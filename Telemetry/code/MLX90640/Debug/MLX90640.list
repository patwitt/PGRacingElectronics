
MLX90640.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bac  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 RAMCODE       000008ac  08005d78  08005d78  00015d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000070  08006628  08006628  00016628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08006698  08006698  00020078  2**0
                  CONTENTS
  5 .ARM          00000008  08006698  08006698  00016698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080066a0  080066a0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080066a4  080066a4  000166a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000078  20000000  080066a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00001958  20000078  08006720  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200019d0  08006720  000219d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c7cf  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d90  00000000  00000000  0002c877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000888  00000000  00000000  0002e608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000007d0  00000000  00000000  0002ee90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b5f  00000000  00000000  0002f660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c301  00000000  00000000  000511bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb0a7  00000000  00000000  0005d4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128567  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000025c0  00000000  00000000  001285bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000078 	.word	0x20000078
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005d5c 	.word	0x08005d5c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000007c 	.word	0x2000007c
 8000204:	08005d5c 	.word	0x08005d5c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b96e 	b.w	8000e74 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468c      	mov	ip, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8083 	bne.w	8000cc6 <__udivmoddi4+0x116>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	d947      	bls.n	8000c56 <__udivmoddi4+0xa6>
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	b142      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bcc:	f1c2 0020 	rsb	r0, r2, #32
 8000bd0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	4097      	lsls	r7, r2
 8000bd8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bdc:	4094      	lsls	r4, r2
 8000bde:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000be2:	0c23      	lsrs	r3, r4, #16
 8000be4:	fbbc f6f8 	udiv	r6, ip, r8
 8000be8:	fa1f fe87 	uxth.w	lr, r7
 8000bec:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x60>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 8119 	bcs.w	8000e38 <__udivmoddi4+0x288>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 8116 	bls.w	8000e38 <__udivmoddi4+0x288>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x8c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 8105 	bcs.w	8000e3c <__udivmoddi4+0x28c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8102 	bls.w	8000e3c <__udivmoddi4+0x28c>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c40:	eba4 040e 	sub.w	r4, r4, lr
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa0>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xaa>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d150      	bne.n	8000d04 <__udivmoddi4+0x154>
 8000c62:	1bcb      	subs	r3, r1, r7
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	fa1f f887 	uxth.w	r8, r7
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c72:	0c21      	lsrs	r1, r4, #16
 8000c74:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0xe4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0xe2>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	f200 80e9 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1ac9      	subs	r1, r1, r3
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x10c>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x10a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80d9 	bhi.w	8000e6c <__udivmoddi4+0x2bc>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e7bf      	b.n	8000c46 <__udivmoddi4+0x96>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0x12e>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <__udivmoddi4+0x282>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x1cc>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0x140>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80b8 	bhi.w	8000e60 <__udivmoddi4+0x2b0>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0a8      	beq.n	8000c50 <__udivmoddi4+0xa0>
 8000cfe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f603 	lsr.w	r6, r0, r3
 8000d0c:	4097      	lsls	r7, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d16:	40d9      	lsrs	r1, r3
 8000d18:	4330      	orrs	r0, r6
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2c:	fb06 f108 	mul.w	r1, r6, r8
 8000d30:	4299      	cmp	r1, r3
 8000d32:	fa04 f402 	lsl.w	r4, r4, r2
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x19c>
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3e:	f080 808d 	bcs.w	8000e5c <__udivmoddi4+0x2ac>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 808a 	bls.w	8000e5c <__udivmoddi4+0x2ac>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b281      	uxth	r1, r0
 8000d50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb00 f308 	mul.w	r3, r0, r8
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x1c4>
 8000d64:	1879      	adds	r1, r7, r1
 8000d66:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d6a:	d273      	bcs.n	8000e54 <__udivmoddi4+0x2a4>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d971      	bls.n	8000e54 <__udivmoddi4+0x2a4>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4439      	add	r1, r7
 8000d74:	1acb      	subs	r3, r1, r3
 8000d76:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d7a:	e778      	b.n	8000c6e <__udivmoddi4+0xbe>
 8000d7c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d80:	fa03 f406 	lsl.w	r4, r3, r6
 8000d84:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d96:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	0c3b      	lsrs	r3, r7, #16
 8000d9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da2:	fa1f f884 	uxth.w	r8, r4
 8000da6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000daa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dae:	fb09 fa08 	mul.w	sl, r9, r8
 8000db2:	458a      	cmp	sl, r1
 8000db4:	fa02 f206 	lsl.w	r2, r2, r6
 8000db8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x220>
 8000dbe:	1861      	adds	r1, r4, r1
 8000dc0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc4:	d248      	bcs.n	8000e58 <__udivmoddi4+0x2a8>
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	d946      	bls.n	8000e58 <__udivmoddi4+0x2a8>
 8000dca:	f1a9 0902 	sub.w	r9, r9, #2
 8000dce:	4421      	add	r1, r4
 8000dd0:	eba1 010a 	sub.w	r1, r1, sl
 8000dd4:	b2bf      	uxth	r7, r7
 8000dd6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dda:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dde:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000de2:	fb00 f808 	mul.w	r8, r0, r8
 8000de6:	45b8      	cmp	r8, r7
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x24a>
 8000dea:	19e7      	adds	r7, r4, r7
 8000dec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df0:	d22e      	bcs.n	8000e50 <__udivmoddi4+0x2a0>
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d92c      	bls.n	8000e50 <__udivmoddi4+0x2a0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4427      	add	r7, r4
 8000dfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfe:	eba7 0708 	sub.w	r7, r7, r8
 8000e02:	fba0 8902 	umull	r8, r9, r0, r2
 8000e06:	454f      	cmp	r7, r9
 8000e08:	46c6      	mov	lr, r8
 8000e0a:	4649      	mov	r1, r9
 8000e0c:	d31a      	bcc.n	8000e44 <__udivmoddi4+0x294>
 8000e0e:	d017      	beq.n	8000e40 <__udivmoddi4+0x290>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x27a>
 8000e12:	ebb3 020e 	subs.w	r2, r3, lr
 8000e16:	eb67 0701 	sbc.w	r7, r7, r1
 8000e1a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1e:	40f2      	lsrs	r2, r6
 8000e20:	ea4c 0202 	orr.w	r2, ip, r2
 8000e24:	40f7      	lsrs	r7, r6
 8000e26:	e9c5 2700 	strd	r2, r7, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	462e      	mov	r6, r5
 8000e34:	4628      	mov	r0, r5
 8000e36:	e70b      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fd      	b.n	8000c3c <__udivmoddi4+0x8c>
 8000e40:	4543      	cmp	r3, r8
 8000e42:	d2e5      	bcs.n	8000e10 <__udivmoddi4+0x260>
 8000e44:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e48:	eb69 0104 	sbc.w	r1, r9, r4
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e7df      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e50:	4608      	mov	r0, r1
 8000e52:	e7d2      	b.n	8000dfa <__udivmoddi4+0x24a>
 8000e54:	4660      	mov	r0, ip
 8000e56:	e78d      	b.n	8000d74 <__udivmoddi4+0x1c4>
 8000e58:	4681      	mov	r9, r0
 8000e5a:	e7b9      	b.n	8000dd0 <__udivmoddi4+0x220>
 8000e5c:	4666      	mov	r6, ip
 8000e5e:	e775      	b.n	8000d4c <__udivmoddi4+0x19c>
 8000e60:	4630      	mov	r0, r6
 8000e62:	e74a      	b.n	8000cfa <__udivmoddi4+0x14a>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	4439      	add	r1, r7
 8000e6a:	e713      	b.n	8000c94 <__udivmoddi4+0xe4>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	e724      	b.n	8000cbc <__udivmoddi4+0x10c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <MLX90640_DumpEE>:
int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2);
int CheckEEPROMValid(uint16_t *eeData);  

  
int MLX90640_DumpEE(uint8_t slaveAddr, uint16_t *eeData)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
     return MLX90640_I2CRead(slaveAddr, 0x2400, 832, eeData);
 8000e84:	79f8      	ldrb	r0, [r7, #7]
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000e8c:	f44f 5110 	mov.w	r1, #9216	; 0x2400
 8000e90:	f001 fdc0 	bl	8002a14 <MLX90640_I2CRead>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <MLX90640_GetFrameData>:

int MLX90640_GetFrameData(uint8_t slaveAddr, uint16_t *frameData)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	6039      	str	r1, [r7, #0]
 8000ea8:	71fb      	strb	r3, [r7, #7]
    uint16_t dataReady = 1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	82fb      	strh	r3, [r7, #22]
    uint16_t controlRegister1;
    uint16_t statusRegister;
    int error = 1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	613b      	str	r3, [r7, #16]
    uint8_t cnt = 0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	757b      	strb	r3, [r7, #21]
    
    dataReady = 0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	82fb      	strh	r3, [r7, #22]
    while(dataReady == 0)
 8000eba:	e011      	b.n	8000ee0 <MLX90640_GetFrameData+0x42>
    {
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);//A new data is available in RAM or not
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	79f8      	ldrb	r0, [r7, #7]
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ec8:	f001 fda4 	bl	8002a14 <MLX90640_I2CRead>
 8000ecc:	6138      	str	r0, [r7, #16]
        if(error != 0)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MLX90640_GetFrameData+0x3a>
        {
            return error;
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	e063      	b.n	8000fa0 <MLX90640_GetFrameData+0x102>
        }    
        dataReady = statusRegister & 0x0008;
 8000ed8:	89bb      	ldrh	r3, [r7, #12]
 8000eda:	f003 0308 	and.w	r3, r3, #8
 8000ede:	82fb      	strh	r3, [r7, #22]
    while(dataReady == 0)
 8000ee0:	8afb      	ldrh	r3, [r7, #22]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0ea      	beq.n	8000ebc <MLX90640_GetFrameData+0x1e>
    }       
        
    while(dataReady != 0 && cnt < 5)
 8000ee6:	e030      	b.n	8000f4a <MLX90640_GetFrameData+0xac>
    { 
        error = MLX90640_I2CWrite(slaveAddr, 0x8000, 0x0030);//?
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2230      	movs	r2, #48	; 0x30
 8000eec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 fe77 	bl	8002be4 <MLX90640_I2CWrite>
 8000ef6:	6138      	str	r0, [r7, #16]
        if(error == -1)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000efe:	d101      	bne.n	8000f04 <MLX90640_GetFrameData+0x66>
        {
            return error;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	e04d      	b.n	8000fa0 <MLX90640_GetFrameData+0x102>
        }
            
        error = MLX90640_I2CRead(slaveAddr, 0x0400, 832, frameData); 
 8000f04:	79f8      	ldrb	r0, [r7, #7]
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f44f 7250 	mov.w	r2, #832	; 0x340
 8000f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f10:	f001 fd80 	bl	8002a14 <MLX90640_I2CRead>
 8000f14:	6138      	str	r0, [r7, #16]
        if(error != 0)
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MLX90640_GetFrameData+0x82>
        {
            return error;
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	e03f      	b.n	8000fa0 <MLX90640_GetFrameData+0x102>
        }
                   
        error = MLX90640_I2CRead(slaveAddr, 0x8000, 1, &statusRegister);
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	79f8      	ldrb	r0, [r7, #7]
 8000f26:	2201      	movs	r2, #1
 8000f28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f2c:	f001 fd72 	bl	8002a14 <MLX90640_I2CRead>
 8000f30:	6138      	str	r0, [r7, #16]
        if(error != 0)
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MLX90640_GetFrameData+0x9e>
        {
            return error;
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	e031      	b.n	8000fa0 <MLX90640_GetFrameData+0x102>
        }    
        dataReady = statusRegister & 0x0008;
 8000f3c:	89bb      	ldrh	r3, [r7, #12]
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	82fb      	strh	r3, [r7, #22]
        cnt = cnt + 1;
 8000f44:	7d7b      	ldrb	r3, [r7, #21]
 8000f46:	3301      	adds	r3, #1
 8000f48:	757b      	strb	r3, [r7, #21]
    while(dataReady != 0 && cnt < 5)
 8000f4a:	8afb      	ldrh	r3, [r7, #22]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <MLX90640_GetFrameData+0xb8>
 8000f50:	7d7b      	ldrb	r3, [r7, #21]
 8000f52:	2b04      	cmp	r3, #4
 8000f54:	d9c8      	bls.n	8000ee8 <MLX90640_GetFrameData+0x4a>
    }
    
    if(cnt > 4)
 8000f56:	7d7b      	ldrb	r3, [r7, #21]
 8000f58:	2b04      	cmp	r3, #4
 8000f5a:	d902      	bls.n	8000f62 <MLX90640_GetFrameData+0xc4>
    {
        return -8;
 8000f5c:	f06f 0307 	mvn.w	r3, #7
 8000f60:	e01e      	b.n	8000fa0 <MLX90640_GetFrameData+0x102>
    }    
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8000f62:	f107 030e 	add.w	r3, r7, #14
 8000f66:	79f8      	ldrb	r0, [r7, #7]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f248 010d 	movw	r1, #32781	; 0x800d
 8000f6e:	f001 fd51 	bl	8002a14 <MLX90640_I2CRead>
 8000f72:	6138      	str	r0, [r7, #16]
    frameData[832] = controlRegister1;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8000f7a:	89fa      	ldrh	r2, [r7, #14]
 8000f7c:	801a      	strh	r2, [r3, #0]
    frameData[833] = statusRegister & 0x0001;
 8000f7e:	89ba      	ldrh	r2, [r7, #12]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8000f86:	f002 0201 	and.w	r2, r2, #1
 8000f8a:	b292      	uxth	r2, r2
 8000f8c:	801a      	strh	r2, [r3, #0]
    
    if(error != 0)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MLX90640_GetFrameData+0xfa>
    {
        return error;
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	e003      	b.n	8000fa0 <MLX90640_GetFrameData+0x102>
    }
    
    return frameData[833];    
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f203 6382 	addw	r3, r3, #1666	; 0x682
 8000f9e:	881b      	ldrh	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3718      	adds	r7, #24
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <MLX90640_ExtractParameters>:

int MLX90640_ExtractParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
    int error = CheckEEPROMValid(eeData);
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f001 fd17 	bl	80029e6 <CheckEEPROMValid>
 8000fb8:	60f8      	str	r0, [r7, #12]
    
    if(error == 0)
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d138      	bne.n	8001032 <MLX90640_ExtractParameters+0x8a>
    {
        ExtractVDDParameters(eeData, mlx90640);
 8000fc0:	6839      	ldr	r1, [r7, #0]
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 f9a2 	bl	800130c <ExtractVDDParameters>
        ExtractPTATParameters(eeData, mlx90640);
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f9d6 	bl	800137c <ExtractPTATParameters>
        ExtractGainParameters(eeData, mlx90640);
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 fa5e 	bl	8001494 <ExtractGainParameters>
        ExtractTgcParameters(eeData, mlx90640);
 8000fd8:	6839      	ldr	r1, [r7, #0]
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f000 fa6c 	bl	80014b8 <ExtractTgcParameters>
        ExtractResolutionParameters(eeData, mlx90640);
 8000fe0:	6839      	ldr	r1, [r7, #0]
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 faa0 	bl	8001528 <ExtractResolutionParameters>
        ExtractKsTaParameters(eeData, mlx90640);
 8000fe8:	6839      	ldr	r1, [r7, #0]
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f000 fab4 	bl	8001558 <ExtractKsTaParameters>
        ExtractKsToParameters(eeData, mlx90640);
 8000ff0:	6839      	ldr	r1, [r7, #0]
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f000 fae8 	bl	80015c8 <ExtractKsToParameters>
        ExtractAlphaParameters(eeData, mlx90640);
 8000ff8:	6839      	ldr	r1, [r7, #0]
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 fbc0 	bl	8001780 <ExtractAlphaParameters>
        ExtractOffsetParameters(eeData, mlx90640);
 8001000:	6839      	ldr	r1, [r7, #0]
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f000 fdea 	bl	8001bdc <ExtractOffsetParameters>
        ExtractKtaPixelParameters(eeData, mlx90640);
 8001008:	6839      	ldr	r1, [r7, #0]
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f000 ffcc 	bl	8001fa8 <ExtractKtaPixelParameters>
        ExtractKvPixelParameters(eeData, mlx90640);
 8001010:	6839      	ldr	r1, [r7, #0]
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f001 f8dc 	bl	80021d0 <ExtractKvPixelParameters>
        ExtractCPParameters(eeData, mlx90640);
 8001018:	6839      	ldr	r1, [r7, #0]
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f001 f9a8 	bl	8002370 <ExtractCPParameters>
        ExtractCILCParameters(eeData, mlx90640);
 8001020:	6839      	ldr	r1, [r7, #0]
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f001 fb04 	bl	8002630 <ExtractCILCParameters>
        error = ExtractDeviatingPixels(eeData, mlx90640);  
 8001028:	6839      	ldr	r1, [r7, #0]
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f001 fba0 	bl	8002770 <ExtractDeviatingPixels>
 8001030:	60f8      	str	r0, [r7, #12]
    }
    
    return error;
 8001032:	68fb      	ldr	r3, [r7, #12]

}
 8001034:	4618      	mov	r0, r3
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}

0800103c <MLX90640_SetRefreshRate>:
}

//------------------------------------------------------------------------------

int MLX90640_SetRefreshRate(uint8_t slaveAddr, uint8_t refreshRate)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b086      	sub	sp, #24
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	460a      	mov	r2, r1
 8001046:	71fb      	strb	r3, [r7, #7]
 8001048:	4613      	mov	r3, r2
 800104a:	71bb      	strb	r3, [r7, #6]
    uint16_t controlRegister1;
    int value;
    int error;
    
    value = (refreshRate & 0x07)<<7;
 800104c:	79bb      	ldrb	r3, [r7, #6]
 800104e:	01db      	lsls	r3, r3, #7
 8001050:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8001054:	613b      	str	r3, [r7, #16]
    
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 8001056:	f107 030e 	add.w	r3, r7, #14
 800105a:	79f8      	ldrb	r0, [r7, #7]
 800105c:	2201      	movs	r2, #1
 800105e:	f248 010d 	movw	r1, #32781	; 0x800d
 8001062:	f001 fcd7 	bl	8002a14 <MLX90640_I2CRead>
 8001066:	6178      	str	r0, [r7, #20]
    if(error == 0)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d110      	bne.n	8001090 <MLX90640_SetRefreshRate+0x54>
    {
        value = (controlRegister1 & 0xFC7F) | value;
 800106e:	89fb      	ldrh	r3, [r7, #14]
 8001070:	461a      	mov	r2, r3
 8001072:	f64f 437f 	movw	r3, #64639	; 0xfc7f
 8001076:	4013      	ands	r3, r2
 8001078:	693a      	ldr	r2, [r7, #16]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	b29a      	uxth	r2, r3
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f248 010d 	movw	r1, #32781	; 0x800d
 8001088:	4618      	mov	r0, r3
 800108a:	f001 fdab 	bl	8002be4 <MLX90640_I2CWrite>
 800108e:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 8001090:	697b      	ldr	r3, [r7, #20]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3718      	adds	r7, #24
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <MLX90640_SetChessMode>:
}

//------------------------------------------------------------------------------

int MLX90640_SetChessMode(uint8_t slaveAddr)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	71fb      	strb	r3, [r7, #7]
    uint16_t controlRegister1;
    int value;
    int error;
        
    error = MLX90640_I2CRead(slaveAddr, 0x800D, 1, &controlRegister1);
 80010a4:	f107 030e 	add.w	r3, r7, #14
 80010a8:	79f8      	ldrb	r0, [r7, #7]
 80010aa:	2201      	movs	r2, #1
 80010ac:	f248 010d 	movw	r1, #32781	; 0x800d
 80010b0:	f001 fcb0 	bl	8002a14 <MLX90640_I2CRead>
 80010b4:	6178      	str	r0, [r7, #20]
    
    if(error == 0)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10d      	bne.n	80010d8 <MLX90640_SetChessMode+0x3e>
    {
        value = (controlRegister1 | 0x1000);
 80010bc:	89fb      	ldrh	r3, [r7, #14]
 80010be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010c2:	b29b      	uxth	r3, r3
 80010c4:	613b      	str	r3, [r7, #16]
        error = MLX90640_I2CWrite(slaveAddr, 0x800D, value);        
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	b29a      	uxth	r2, r3
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f248 010d 	movw	r1, #32781	; 0x800d
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fd87 	bl	8002be4 <MLX90640_I2CWrite>
 80010d6:	6178      	str	r0, [r7, #20]
    }    
    
    return error;
 80010d8:	697b      	ldr	r3, [r7, #20]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	0000      	movs	r0, r0
 80010e4:	0000      	movs	r0, r0
	...

080010e8 <MLX90640_GetVdd>:
}

//------------------------------------------------------------------------------

float MLX90640_GetVdd(uint16_t *frameData, const paramsMLX90640 *params)
{
 80010e8:	b5b0      	push	{r4, r5, r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
    float vdd;
    float resolutionCorrection;

    int resolutionRAM;    
    
    vdd = frameData[810];
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f203 6354 	addw	r3, r3, #1620	; 0x654
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	ee07 3a90 	vmov	s15, r3
 80010fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001102:	edc7 7a05 	vstr	s15, [r7, #20]
    if(vdd > 32767)
 8001106:	edd7 7a05 	vldr	s15, [r7, #20]
 800110a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80011e0 <MLX90640_GetVdd+0xf8>
 800110e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	dd07      	ble.n	8001128 <MLX90640_GetVdd+0x40>
    {
        vdd = vdd - 65536;
 8001118:	edd7 7a05 	vldr	s15, [r7, #20]
 800111c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80011e4 <MLX90640_GetVdd+0xfc>
 8001120:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001124:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    resolutionRAM = (frameData[832] & 0x0C00) >> 10;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	129b      	asrs	r3, r3, #10
 8001132:	f003 0303 	and.w	r3, r3, #3
 8001136:	613b      	str	r3, [r7, #16]
    resolutionCorrection = pow(2, (double)params->resolutionEE) / pow(2, (double)resolutionRAM);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff f9a4 	bl	800048c <__aeabi_ui2d>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
 8001148:	ec43 2b11 	vmov	d1, r2, r3
 800114c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80011d8 <MLX90640_GetVdd+0xf0>
 8001150:	f003 fe1c 	bl	8004d8c <pow>
 8001154:	ec55 4b10 	vmov	r4, r5, d0
 8001158:	6938      	ldr	r0, [r7, #16]
 800115a:	f7ff f9a7 	bl	80004ac <__aeabi_i2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	ec43 2b11 	vmov	d1, r2, r3
 8001166:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80011d8 <MLX90640_GetVdd+0xf0>
 800116a:	f003 fe0f 	bl	8004d8c <pow>
 800116e:	ec53 2b10 	vmov	r2, r3, d0
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fb2d 	bl	80007d4 <__aeabi_ddiv>
 800117a:	4602      	mov	r2, r0
 800117c:	460b      	mov	r3, r1
 800117e:	4610      	mov	r0, r2
 8001180:	4619      	mov	r1, r3
 8001182:	f7ff fcad 	bl	8000ae0 <__aeabi_d2f>
 8001186:	4603      	mov	r3, r0
 8001188:	60fb      	str	r3, [r7, #12]
    vdd = (resolutionCorrection * vdd - params->vdd25) / params->kVdd + 3.3f;
 800118a:	ed97 7a03 	vldr	s14, [r7, #12]
 800118e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800119c:	ee07 3a90 	vmov	s15, r3
 80011a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ae:	ee07 3a90 	vmov	s15, r3
 80011b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80011e8 <MLX90640_GetVdd+0x100>
 80011be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011c2:	edc7 7a05 	vstr	s15, [r7, #20]
    
    return vdd;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	ee07 3a90 	vmov	s15, r3
}
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	3718      	adds	r7, #24
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bdb0      	pop	{r4, r5, r7, pc}
 80011d6:	bf00      	nop
 80011d8:	00000000 	.word	0x00000000
 80011dc:	40000000 	.word	0x40000000
 80011e0:	46fffe00 	.word	0x46fffe00
 80011e4:	47800000 	.word	0x47800000
 80011e8:	40533333 	.word	0x40533333

080011ec <MLX90640_GetTa>:

//------------------------------------------------------------------------------

float MLX90640_GetTa(uint16_t *frameData, const paramsMLX90640 *params)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
    float ptat;
    float ptatArt;
    float vdd;
    float ta;
    
    vdd = MLX90640_GetVdd(frameData, params);
 80011f6:	6839      	ldr	r1, [r7, #0]
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff ff75 	bl	80010e8 <MLX90640_GetVdd>
 80011fe:	ed87 0a03 	vstr	s0, [r7, #12]
    
    ptat = frameData[800];
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 8001208:	881b      	ldrh	r3, [r3, #0]
 800120a:	ee07 3a90 	vmov	s15, r3
 800120e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001212:	edc7 7a05 	vstr	s15, [r7, #20]
    if(ptat > 32767)
 8001216:	edd7 7a05 	vldr	s15, [r7, #20]
 800121a:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80012fc <MLX90640_GetTa+0x110>
 800121e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001226:	dd07      	ble.n	8001238 <MLX90640_GetTa+0x4c>
    {
        ptat = ptat - 65536;
 8001228:	edd7 7a05 	vldr	s15, [r7, #20]
 800122c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8001300 <MLX90640_GetTa+0x114>
 8001230:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001234:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    
    ptatArt = frameData[768];
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	ee07 3a90 	vmov	s15, r3
 8001244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001248:	edc7 7a04 	vstr	s15, [r7, #16]
    if(ptatArt > 32767)
 800124c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001250:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80012fc <MLX90640_GetTa+0x110>
 8001254:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	dd07      	ble.n	800126e <MLX90640_GetTa+0x82>
    {
        ptatArt = ptatArt - 65536;
 800125e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001262:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001300 <MLX90640_GetTa+0x114>
 8001266:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800126a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ptatArt = (ptat / (ptat * params->alphaPTAT + ptatArt)) * pow(2, (double)18);
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	ed93 7a04 	vldr	s14, [r3, #16]
 8001274:	edd7 7a05 	vldr	s15, [r7, #20]
 8001278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800127c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001280:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001284:	edd7 6a05 	vldr	s13, [r7, #20]
 8001288:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800128c:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001304 <MLX90640_GetTa+0x118>
 8001290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001294:	edc7 7a04 	vstr	s15, [r7, #16]
    
    ta = (ptatArt / (1 + params->KvPTAT * (vdd - 3.3f)) - params->vPTAT25);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	ed93 7a01 	vldr	s14, [r3, #4]
 800129e:	edd7 7a03 	vldr	s15, [r7, #12]
 80012a2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001308 <MLX90640_GetTa+0x11c>
 80012a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80012aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012b2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012b6:	edd7 6a04 	vldr	s13, [r7, #16]
 80012ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	899b      	ldrh	r3, [r3, #12]
 80012c2:	ee07 3a90 	vmov	s15, r3
 80012c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012ce:	edc7 7a02 	vstr	s15, [r7, #8]
    ta = ta / params->KtPTAT + 25;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80012d8:	edd7 6a02 	vldr	s13, [r7, #8]
 80012dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012e0:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 80012e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80012e8:	edc7 7a02 	vstr	s15, [r7, #8]
    
    return ta;
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	ee07 3a90 	vmov	s15, r3
}
 80012f2:	eeb0 0a67 	vmov.f32	s0, s15
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	46fffe00 	.word	0x46fffe00
 8001300:	47800000 	.word	0x47800000
 8001304:	48800000 	.word	0x48800000
 8001308:	40533333 	.word	0x40533333

0800130c <ExtractVDDParameters>:
}    

//------------------------------------------------------------------------------

void ExtractVDDParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
    int16_t kVdd;
    int16_t vdd25;
    
    kVdd = eeData[51];
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3366      	adds	r3, #102	; 0x66
 800131a:	881b      	ldrh	r3, [r3, #0]
 800131c:	81fb      	strh	r3, [r7, #14]
    
    kVdd = (eeData[51] & 0xFF00) >> 8;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3366      	adds	r3, #102	; 0x66
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	b29b      	uxth	r3, r3
 8001328:	81fb      	strh	r3, [r7, #14]
    if(kVdd > 127)
 800132a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132e:	2b7f      	cmp	r3, #127	; 0x7f
 8001330:	dd04      	ble.n	800133c <ExtractVDDParameters+0x30>
    {
        kVdd = kVdd - 256;
 8001332:	89fb      	ldrh	r3, [r7, #14]
 8001334:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001338:	b29b      	uxth	r3, r3
 800133a:	81fb      	strh	r3, [r7, #14]
    }
    kVdd = 32 * kVdd;
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	015b      	lsls	r3, r3, #5
 8001340:	b29b      	uxth	r3, r3
 8001342:	81fb      	strh	r3, [r7, #14]
    vdd25 = eeData[51] & 0x00FF;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3366      	adds	r3, #102	; 0x66
 8001348:	881b      	ldrh	r3, [r3, #0]
 800134a:	b21b      	sxth	r3, r3
 800134c:	b2db      	uxtb	r3, r3
 800134e:	81bb      	strh	r3, [r7, #12]
    vdd25 = ((vdd25 - 256) << 5) - 8192;
 8001350:	89bb      	ldrh	r3, [r7, #12]
 8001352:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001356:	b29b      	uxth	r3, r3
 8001358:	015b      	lsls	r3, r3, #5
 800135a:	b29b      	uxth	r3, r3
 800135c:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8001360:	b29b      	uxth	r3, r3
 8001362:	81bb      	strh	r3, [r7, #12]
    
    mlx90640->kVdd = kVdd;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	89fa      	ldrh	r2, [r7, #14]
 8001368:	801a      	strh	r2, [r3, #0]
    mlx90640->vdd25 = vdd25; 
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	89ba      	ldrh	r2, [r7, #12]
 800136e:	805a      	strh	r2, [r3, #2]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <ExtractPTATParameters>:

//------------------------------------------------------------------------------

void ExtractPTATParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	6039      	str	r1, [r7, #0]
    float KvPTAT;
    float KtPTAT;
    int16_t vPTAT25;
    float alphaPTAT;
    
    KvPTAT = (eeData[50] & 0xFC00) >> 10;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3364      	adds	r3, #100	; 0x64
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	0a9b      	lsrs	r3, r3, #10
 800138e:	b29b      	uxth	r3, r3
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001398:	edc7 7a05 	vstr	s15, [r7, #20]
    if(KvPTAT > 31)
 800139c:	edd7 7a05 	vldr	s15, [r7, #20]
 80013a0:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 80013a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dd07      	ble.n	80013be <ExtractPTATParameters+0x42>
    {
        KvPTAT = KvPTAT - 64;
 80013ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80013b2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800147c <ExtractPTATParameters+0x100>
 80013b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013ba:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    KvPTAT = KvPTAT/4096;
 80013be:	ed97 7a05 	vldr	s14, [r7, #20]
 80013c2:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001480 <ExtractPTATParameters+0x104>
 80013c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ca:	edc7 7a05 	vstr	s15, [r7, #20]
    
    KtPTAT = eeData[50] & 0x03FF;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3364      	adds	r3, #100	; 0x64
 80013d2:	881b      	ldrh	r3, [r3, #0]
 80013d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013d8:	ee07 3a90 	vmov	s15, r3
 80013dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e0:	edc7 7a04 	vstr	s15, [r7, #16]
    if(KtPTAT > 511)
 80013e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001484 <ExtractPTATParameters+0x108>
 80013ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f4:	dd07      	ble.n	8001406 <ExtractPTATParameters+0x8a>
    {
        KtPTAT = KtPTAT - 1024;
 80013f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80013fa:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001488 <ExtractPTATParameters+0x10c>
 80013fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001402:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    KtPTAT = KtPTAT/8;
 8001406:	ed97 7a04 	vldr	s14, [r7, #16]
 800140a:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 800140e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001412:	edc7 7a04 	vstr	s15, [r7, #16]
    
    vPTAT25 = eeData[49];
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3362      	adds	r3, #98	; 0x62
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	81fb      	strh	r3, [r7, #14]
    
    alphaPTAT = (eeData[16] & 0xF000) / pow(2, (double)14) + 8.0f;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	3320      	adds	r3, #32
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f83f 	bl	80004ac <__aeabi_i2d>
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <ExtractPTATParameters+0x110>)
 8001434:	f7ff f9ce 	bl	80007d4 <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	4610      	mov	r0, r2
 800143e:	4619      	mov	r1, r3
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <ExtractPTATParameters+0x114>)
 8001446:	f7fe fee5 	bl	8000214 <__adddf3>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4610      	mov	r0, r2
 8001450:	4619      	mov	r1, r3
 8001452:	f7ff fb45 	bl	8000ae0 <__aeabi_d2f>
 8001456:	4603      	mov	r3, r0
 8001458:	60bb      	str	r3, [r7, #8]
    
    mlx90640->KvPTAT = KvPTAT;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	697a      	ldr	r2, [r7, #20]
 800145e:	605a      	str	r2, [r3, #4]
    mlx90640->KtPTAT = KtPTAT;    
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	609a      	str	r2, [r3, #8]
    mlx90640->vPTAT25 = vPTAT25;
 8001466:	89fa      	ldrh	r2, [r7, #14]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	819a      	strh	r2, [r3, #12]
    mlx90640->alphaPTAT = alphaPTAT;   
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	611a      	str	r2, [r3, #16]
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	42800000 	.word	0x42800000
 8001480:	45800000 	.word	0x45800000
 8001484:	43ff8000 	.word	0x43ff8000
 8001488:	44800000 	.word	0x44800000
 800148c:	40d00000 	.word	0x40d00000
 8001490:	40200000 	.word	0x40200000

08001494 <ExtractGainParameters>:

//------------------------------------------------------------------------------

void ExtractGainParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
    int16_t gainEE;
    
    gainEE = eeData[48];
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	3360      	adds	r3, #96	; 0x60
 80014a2:	881b      	ldrh	r3, [r3, #0]
 80014a4:	81fb      	strh	r3, [r7, #14]
    if(gainEE > 32767)
    {
        gainEE = gainEE -65536;
    }
    
    mlx90640->gainEE = gainEE;    
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	89fa      	ldrh	r2, [r7, #14]
 80014aa:	829a      	strh	r2, [r3, #20]
}
 80014ac:	bf00      	nop
 80014ae:	3714      	adds	r7, #20
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <ExtractTgcParameters>:

//------------------------------------------------------------------------------

void ExtractTgcParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b085      	sub	sp, #20
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
    float tgc;
    tgc = eeData[60] & 0x00FF;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3378      	adds	r3, #120	; 0x78
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	ee07 3a90 	vmov	s15, r3
 80014ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014d2:	edc7 7a03 	vstr	s15, [r7, #12]
    if(tgc > 127)
 80014d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014da:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800151c <ExtractTgcParameters+0x64>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	dd07      	ble.n	80014f8 <ExtractTgcParameters+0x40>
    {
        tgc = tgc - 256;
 80014e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001520 <ExtractTgcParameters+0x68>
 80014f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014f4:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    tgc = tgc / 32.0f;
 80014f8:	ed97 7a03 	vldr	s14, [r7, #12]
 80014fc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8001524 <ExtractTgcParameters+0x6c>
 8001500:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001504:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->tgc = tgc;        
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	68fa      	ldr	r2, [r7, #12]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	42fe0000 	.word	0x42fe0000
 8001520:	43800000 	.word	0x43800000
 8001524:	42000000 	.word	0x42000000

08001528 <ExtractResolutionParameters>:

//------------------------------------------------------------------------------

void ExtractResolutionParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
    uint8_t resolutionEE;
    resolutionEE = (eeData[56] & 0x3000) >> 12;    
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	3370      	adds	r3, #112	; 0x70
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	131b      	asrs	r3, r3, #12
 800153a:	b2db      	uxtb	r3, r3
 800153c:	f003 0303 	and.w	r3, r3, #3
 8001540:	73fb      	strb	r3, [r7, #15]
    
    mlx90640->resolutionEE = resolutionEE;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
	...

08001558 <ExtractKsTaParameters>:

//------------------------------------------------------------------------------

void ExtractKsTaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
    float KsTa;
    KsTa = (eeData[60] & 0xFF00) >> 8;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3378      	adds	r3, #120	; 0x78
 8001566:	881b      	ldrh	r3, [r3, #0]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	b29b      	uxth	r3, r3
 800156c:	ee07 3a90 	vmov	s15, r3
 8001570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001574:	edc7 7a03 	vstr	s15, [r7, #12]
    if(KsTa > 127)
 8001578:	edd7 7a03 	vldr	s15, [r7, #12]
 800157c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015bc <ExtractKsTaParameters+0x64>
 8001580:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001588:	dd07      	ble.n	800159a <ExtractKsTaParameters+0x42>
    {
        KsTa = KsTa -256;
 800158a:	edd7 7a03 	vldr	s15, [r7, #12]
 800158e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80015c0 <ExtractKsTaParameters+0x68>
 8001592:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001596:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    KsTa = KsTa / 8192.0f;
 800159a:	ed97 7a03 	vldr	s14, [r7, #12]
 800159e:	eddf 6a09 	vldr	s13, [pc, #36]	; 80015c4 <ExtractKsTaParameters+0x6c>
 80015a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a6:	edc7 7a03 	vstr	s15, [r7, #12]
    
    mlx90640->KsTa = KsTa;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	42fe0000 	.word	0x42fe0000
 80015c0:	43800000 	.word	0x43800000
 80015c4:	46000000 	.word	0x46000000

080015c8 <ExtractKsToParameters>:

//------------------------------------------------------------------------------

void ExtractKsToParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b087      	sub	sp, #28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
    int KsToScale;
    int8_t step;
    
    step = ((eeData[63] & 0x3000) >> 12) * 10;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	337e      	adds	r3, #126	; 0x7e
 80015d6:	881b      	ldrh	r3, [r3, #0]
 80015d8:	131b      	asrs	r3, r3, #12
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 0303 	and.w	r3, r3, #3
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	0092      	lsls	r2, r2, #2
 80015e6:	4413      	add	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	74fb      	strb	r3, [r7, #19]
    
    mlx90640->ct[0] = -40;
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	f64f 72d8 	movw	r2, #65496	; 0xffd8
 80015f4:	879a      	strh	r2, [r3, #60]	; 0x3c
    mlx90640->ct[1] = 0;
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	2200      	movs	r2, #0
 80015fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    mlx90640->ct[2] = (eeData[63] & 0x00F0) >> 4;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	337e      	adds	r3, #126	; 0x7e
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	111b      	asrs	r3, r3, #4
 8001604:	b21b      	sxth	r3, r3
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	b21a      	sxth	r2, r3
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[3] = (eeData[63] & 0x0F00) >> 8;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	337e      	adds	r3, #126	; 0x7e
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	121b      	asrs	r3, r3, #8
 800161a:	b21b      	sxth	r3, r3
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	b21a      	sxth	r2, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    
    mlx90640->ct[2] = mlx90640->ct[2]*step;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800162e:	b29a      	uxth	r2, r3
 8001630:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001634:	b29b      	uxth	r3, r3
 8001636:	fb12 f303 	smulbb	r3, r2, r3
 800163a:	b29b      	uxth	r3, r3
 800163c:	b21a      	sxth	r2, r3
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    mlx90640->ct[3] = mlx90640->ct[2] + mlx90640->ct[3]*step;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800164a:	b29a      	uxth	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001652:	b299      	uxth	r1, r3
 8001654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001658:	b29b      	uxth	r3, r3
 800165a:	fb11 f303 	smulbb	r3, r1, r3
 800165e:	b29b      	uxth	r3, r3
 8001660:	4413      	add	r3, r2
 8001662:	b29b      	uxth	r3, r3
 8001664:	b21a      	sxth	r2, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    
    KsToScale = (eeData[63] & 0x000F) + 8;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	337e      	adds	r3, #126	; 0x7e
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	3308      	adds	r3, #8
 8001678:	60fb      	str	r3, [r7, #12]
    KsToScale = 1 << KsToScale;
 800167a:	2201      	movs	r2, #1
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	fa02 f303 	lsl.w	r3, r2, r3
 8001682:	60fb      	str	r3, [r7, #12]
    
    mlx90640->ksTo[0] = eeData[61] & 0x00FF;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	337a      	adds	r3, #122	; 0x7a
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    mlx90640->ksTo[1] = (eeData[61] & 0xFF00) >> 8;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	337a      	adds	r3, #122	; 0x7a
 800169e:	881b      	ldrh	r3, [r3, #0]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	ee07 3a90 	vmov	s15, r3
 80016a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
    mlx90640->ksTo[2] = eeData[62] & 0x00FF;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	337c      	adds	r3, #124	; 0x7c
 80016b6:	881b      	ldrh	r3, [r3, #0]
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	ee07 3a90 	vmov	s15, r3
 80016be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    mlx90640->ksTo[3] = (eeData[62] & 0xFF00) >> 8;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	337c      	adds	r3, #124	; 0x7c
 80016cc:	881b      	ldrh	r3, [r3, #0]
 80016ce:	0a1b      	lsrs	r3, r3, #8
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	ee07 3a90 	vmov	s15, r3
 80016d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    
    
    for(int i = 0; i < 4; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e03c      	b.n	8001760 <ExtractKsToParameters+0x198>
    {
        if(mlx90640->ksTo[i] > 127)
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	330a      	adds	r3, #10
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	3304      	adds	r3, #4
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8001774 <ExtractKsToParameters+0x1ac>
 80016fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001702:	dd13      	ble.n	800172c <ExtractKsToParameters+0x164>
        {
            mlx90640->ksTo[i] = mlx90640->ksTo[i] -256;
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	330a      	adds	r3, #10
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	3304      	adds	r3, #4
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001778 <ExtractKsToParameters+0x1b0>
 8001718:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800171c:	683a      	ldr	r2, [r7, #0]
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	330a      	adds	r3, #10
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	3304      	adds	r3, #4
 8001728:	edc3 7a00 	vstr	s15, [r3]
        }
        mlx90640->ksTo[i] = mlx90640->ksTo[i] / KsToScale;
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	330a      	adds	r3, #10
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	edd3 6a00 	vldr	s13, [r3]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	ee07 3a90 	vmov	s15, r3
 8001742:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001746:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	330a      	adds	r3, #10
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	4413      	add	r3, r2
 8001754:	3304      	adds	r3, #4
 8001756:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 4; i++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b03      	cmp	r3, #3
 8001764:	ddbf      	ble.n	80016e6 <ExtractKsToParameters+0x11e>
    } 
}
 8001766:	bf00      	nop
 8001768:	bf00      	nop
 800176a:	371c      	adds	r7, #28
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	42fe0000 	.word	0x42fe0000
 8001778:	43800000 	.word	0x43800000
 800177c:	00000000 	.word	0x00000000

08001780 <ExtractAlphaParameters>:

//------------------------------------------------------------------------------

void ExtractAlphaParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001780:	b5b0      	push	{r4, r5, r7, lr}
 8001782:	b0c4      	sub	sp, #272	; 0x110
 8001784:	af00      	add	r7, sp, #0
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	6018      	str	r0, [r3, #0]
 800178a:	463b      	mov	r3, r7
 800178c:	6019      	str	r1, [r3, #0]
    int accRow[24];
    int accColumn[32];
    int p = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t accRowScale;
    uint8_t accColumnScale;
    uint8_t accRemScale;
    

    accRemScale = eeData[32] & 0x000F;
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3340      	adds	r3, #64	; 0x40
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    accColumnScale = (eeData[32] & 0x00F0) >> 4;
 80017a6:	1d3b      	adds	r3, r7, #4
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	3340      	adds	r3, #64	; 0x40
 80017ac:	881b      	ldrh	r3, [r3, #0]
 80017ae:	111b      	asrs	r3, r3, #4
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    accRowScale = (eeData[32] & 0x0F00) >> 8;
 80017ba:	1d3b      	adds	r3, r7, #4
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3340      	adds	r3, #64	; 0x40
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	121b      	asrs	r3, r3, #8
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    alphaScale = ((eeData[32] & 0xF000) >> 12) + 30;
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	3340      	adds	r3, #64	; 0x40
 80017d4:	881b      	ldrh	r3, [r3, #0]
 80017d6:	0b1b      	lsrs	r3, r3, #12
 80017d8:	b29b      	uxth	r3, r3
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	331e      	adds	r3, #30
 80017de:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
    alphaRef = eeData[33];
 80017e2:	1d3b      	adds	r3, r7, #4
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	3342      	adds	r3, #66	; 0x42
 80017e8:	881b      	ldrh	r3, [r3, #0]
 80017ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    
    for(int i = 0; i < 6; i++)
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80017f4:	e056      	b.n	80018a4 <ExtractAlphaParameters+0x124>
    {
        p = i * 4;
 80017f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        accRow[p + 0] = (eeData[34 + i] & 0x000F);
 8001800:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001804:	3322      	adds	r3, #34	; 0x22
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	1d3a      	adds	r2, r7, #4
 800180a:	6812      	ldr	r2, [r2, #0]
 800180c:	4413      	add	r3, r2
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	f003 020f 	and.w	r2, r3, #15
 8001814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800181e:	440b      	add	r3, r1
 8001820:	f843 2c84 	str.w	r2, [r3, #-132]
        accRow[p + 1] = (eeData[34 + i] & 0x00F0) >> 4;
 8001824:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001828:	3322      	adds	r3, #34	; 0x22
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	1d3a      	adds	r2, r7, #4
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	4413      	add	r3, r2
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	111a      	asrs	r2, r3, #4
 8001836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800183a:	3301      	adds	r3, #1
 800183c:	f002 020f 	and.w	r2, r2, #15
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001846:	440b      	add	r3, r1
 8001848:	f843 2c84 	str.w	r2, [r3, #-132]
        accRow[p + 2] = (eeData[34 + i] & 0x0F00) >> 8;
 800184c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001850:	3322      	adds	r3, #34	; 0x22
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	1d3a      	adds	r2, r7, #4
 8001856:	6812      	ldr	r2, [r2, #0]
 8001858:	4413      	add	r3, r2
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	121a      	asrs	r2, r3, #8
 800185e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001862:	3302      	adds	r3, #2
 8001864:	f002 020f 	and.w	r2, r2, #15
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800186e:	440b      	add	r3, r1
 8001870:	f843 2c84 	str.w	r2, [r3, #-132]
        accRow[p + 3] = (eeData[34 + i] & 0xF000) >> 12;
 8001874:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001878:	3322      	adds	r3, #34	; 0x22
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	1d3a      	adds	r2, r7, #4
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	4413      	add	r3, r2
 8001882:	881b      	ldrh	r3, [r3, #0]
 8001884:	0b1b      	lsrs	r3, r3, #12
 8001886:	b29a      	uxth	r2, r3
 8001888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800188c:	3303      	adds	r3, #3
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001894:	440b      	add	r3, r1
 8001896:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 800189a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800189e:	3301      	adds	r3, #1
 80018a0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80018a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80018a8:	2b05      	cmp	r3, #5
 80018aa:	dda4      	ble.n	80017f6 <ExtractAlphaParameters+0x76>
    }
    
    for(int i = 0; i < 24; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80018b2:	e020      	b.n	80018f6 <ExtractAlphaParameters+0x176>
    {
        if (accRow[i] > 7)
 80018b4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018be:	4413      	add	r3, r2
 80018c0:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80018c4:	2b07      	cmp	r3, #7
 80018c6:	dd11      	ble.n	80018ec <ExtractAlphaParameters+0x16c>
        {
            accRow[i] = accRow[i] - 16;
 80018c8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80018d2:	4413      	add	r3, r2
 80018d4:	f853 3c84 	ldr.w	r3, [r3, #-132]
 80018d8:	f1a3 0210 	sub.w	r2, r3, #16
 80018dc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80018e6:	440b      	add	r3, r1
 80018e8:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 80018ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018f0:	3301      	adds	r3, #1
 80018f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80018f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80018fa:	2b17      	cmp	r3, #23
 80018fc:	ddda      	ble.n	80018b4 <ExtractAlphaParameters+0x134>
        }
    }
    
    for(int i = 0; i < 8; i++)
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001904:	e04e      	b.n	80019a4 <ExtractAlphaParameters+0x224>
    {
        p = i * 4;
 8001906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        accColumn[p + 0] = (eeData[40 + i] & 0x000F);
 8001910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001914:	3328      	adds	r3, #40	; 0x28
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	1d3a      	adds	r2, r7, #4
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	4413      	add	r3, r2
 800191e:	881b      	ldrh	r3, [r3, #0]
 8001920:	f003 010f 	and.w	r1, r3, #15
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800192c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 1] = (eeData[40 + i] & 0x00F0) >> 4;
 8001930:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001934:	3328      	adds	r3, #40	; 0x28
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	1d3a      	adds	r2, r7, #4
 800193a:	6812      	ldr	r2, [r2, #0]
 800193c:	4413      	add	r3, r2
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	111b      	asrs	r3, r3, #4
 8001942:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001946:	3201      	adds	r2, #1
 8001948:	f003 010f 	and.w	r1, r3, #15
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 2] = (eeData[40 + i] & 0x0F00) >> 8;
 8001954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001958:	3328      	adds	r3, #40	; 0x28
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	1d3a      	adds	r2, r7, #4
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	4413      	add	r3, r2
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	121b      	asrs	r3, r3, #8
 8001966:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800196a:	3202      	adds	r2, #2
 800196c:	f003 010f 	and.w	r1, r3, #15
 8001970:	f107 030c 	add.w	r3, r7, #12
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        accColumn[p + 3] = (eeData[40 + i] & 0xF000) >> 12;
 8001978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800197c:	3328      	adds	r3, #40	; 0x28
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	1d3a      	adds	r2, r7, #4
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	4413      	add	r3, r2
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	0b1b      	lsrs	r3, r3, #12
 800198a:	b299      	uxth	r1, r3
 800198c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001990:	1cda      	adds	r2, r3, #3
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 800199a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800199e:	3301      	adds	r3, #1
 80019a0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019a8:	2b07      	cmp	r3, #7
 80019aa:	ddac      	ble.n	8001906 <ExtractAlphaParameters+0x186>
    }
    
    for(int i = 0; i < 32; i ++)
 80019ac:	2300      	movs	r3, #0
 80019ae:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019b2:	e01a      	b.n	80019ea <ExtractAlphaParameters+0x26a>
    {
        if (accColumn[i] > 7)
 80019b4:	f107 030c 	add.w	r3, r7, #12
 80019b8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80019bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c0:	2b07      	cmp	r3, #7
 80019c2:	dd0d      	ble.n	80019e0 <ExtractAlphaParameters+0x260>
        {
            accColumn[i] = accColumn[i] - 16;
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80019cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019d0:	f1a3 0110 	sub.w	r1, r3, #16
 80019d4:	f107 030c 	add.w	r3, r7, #12
 80019d8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80019dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 80019e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80019e4:	3301      	adds	r3, #1
 80019e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80019ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80019ee:	2b1f      	cmp	r3, #31
 80019f0:	dde0      	ble.n	80019b4 <ExtractAlphaParameters+0x234>
        }
    }

    for(int i = 0; i < 24; i++)
 80019f2:	2300      	movs	r3, #0
 80019f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80019f8:	e0df      	b.n	8001bba <ExtractAlphaParameters+0x43a>
    {
        for(int j = 0; j < 32; j ++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001a00:	e0d1      	b.n	8001ba6 <ExtractAlphaParameters+0x426>
        {
            p = 32 * i +j;
 8001a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a06:	015b      	lsls	r3, r3, #5
 8001a08:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001a0c:	4413      	add	r3, r2
 8001a0e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->alpha[p] = (eeData[64 + p] & 0x03F0) >> 4;
 8001a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a16:	3340      	adds	r3, #64	; 0x40
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	1d3a      	adds	r2, r7, #4
 8001a1c:	6812      	ldr	r2, [r2, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	881b      	ldrh	r3, [r3, #0]
 8001a22:	111b      	asrs	r3, r3, #4
 8001a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a28:	ee07 3a90 	vmov	s15, r3
 8001a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a30:	463b      	mov	r3, r7
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a38:	3310      	adds	r3, #16
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3304      	adds	r3, #4
 8001a40:	edc3 7a00 	vstr	s15, [r3]
            if (mlx90640->alpha[p] > 31)
 8001a44:	463b      	mov	r3, r7
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a4c:	3310      	adds	r3, #16
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	3304      	adds	r3, #4
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8001a5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	dd17      	ble.n	8001a96 <ExtractAlphaParameters+0x316>
            {
                mlx90640->alpha[p] = mlx90640->alpha[p] - 64;
 8001a66:	463b      	mov	r3, r7
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a6e:	3310      	adds	r3, #16
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	edd3 7a00 	vldr	s15, [r3]
 8001a7a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8001bd8 <ExtractAlphaParameters+0x458>
 8001a7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001a82:	463b      	mov	r3, r7
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	3304      	adds	r3, #4
 8001a92:	edc3 7a00 	vstr	s15, [r3]
            }
            mlx90640->alpha[p] = mlx90640->alpha[p]*(1 << accRemScale);
 8001a96:	463b      	mov	r3, r7
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001a9e:	3310      	adds	r3, #16
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	3304      	adds	r3, #4
 8001aa6:	ed93 7a00 	vldr	s14, [r3]
 8001aaa:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8001aae:	2201      	movs	r2, #1
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ac8:	3310      	adds	r3, #16
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	3304      	adds	r3, #4
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
            mlx90640->alpha[p] = (alphaRef + (accRow[i] << accRowScale) + (accColumn[j] << accColumnScale) + mlx90640->alpha[p]);
 8001ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001ade:	4413      	add	r3, r2
 8001ae0:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8001ae4:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8001ae8:	409a      	lsls	r2, r3
 8001aea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001aee:	441a      	add	r2, r3
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001af8:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001afc:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	ee07 3a90 	vmov	s15, r3
 8001b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b0e:	463b      	mov	r3, r7
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b16:	3310      	adds	r3, #16
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	edd3 7a00 	vldr	s15, [r3]
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	463b      	mov	r3, r7
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b2e:	3310      	adds	r3, #16
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	4413      	add	r3, r2
 8001b34:	3304      	adds	r3, #4
 8001b36:	edc3 7a00 	vstr	s15, [r3]
            mlx90640->alpha[p] = mlx90640->alpha[p] / pow(2,(double)alphaScale);
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b42:	3310      	adds	r3, #16
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	3304      	adds	r3, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fcbf 	bl	80004d0 <__aeabi_f2d>
 8001b52:	4604      	mov	r4, r0
 8001b54:	460d      	mov	r5, r1
 8001b56:	f897 30f0 	ldrb.w	r3, [r7, #240]	; 0xf0
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fc96 	bl	800048c <__aeabi_ui2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	ec43 2b11 	vmov	d1, r2, r3
 8001b68:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8001bd0 <ExtractAlphaParameters+0x450>
 8001b6c:	f003 f90e 	bl	8004d8c <pow>
 8001b70:	ec53 2b10 	vmov	r2, r3, d0
 8001b74:	4620      	mov	r0, r4
 8001b76:	4629      	mov	r1, r5
 8001b78:	f7fe fe2c 	bl	80007d4 <__aeabi_ddiv>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4610      	mov	r0, r2
 8001b82:	4619      	mov	r1, r3
 8001b84:	f7fe ffac 	bl	8000ae0 <__aeabi_d2f>
 8001b88:	4601      	mov	r1, r0
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b92:	3310      	adds	r3, #16
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	3304      	adds	r3, #4
 8001b9a:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 32; j ++)
 8001b9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001baa:	2b1f      	cmp	r3, #31
 8001bac:	f77f af29 	ble.w	8001a02 <ExtractAlphaParameters+0x282>
    for(int i = 0; i < 24; i++)
 8001bb0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001bbe:	2b17      	cmp	r3, #23
 8001bc0:	f77f af1b 	ble.w	80019fa <ExtractAlphaParameters+0x27a>
        }
    }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	00000000 	.word	0x00000000
 8001bd4:	40000000 	.word	0x40000000
 8001bd8:	42800000 	.word	0x42800000

08001bdc <ExtractOffsetParameters>:

//------------------------------------------------------------------------------

void ExtractOffsetParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b0c5      	sub	sp, #276	; 0x114
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	6018      	str	r0, [r3, #0]
 8001be6:	463b      	mov	r3, r7
 8001be8:	6019      	str	r1, [r3, #0]
    int occRow[24];
    int occColumn[32];
    int p = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t occRowScale;
    uint8_t occColumnScale;
    uint8_t occRemScale;
    

    occRemScale = (eeData[16] & 0x000F);
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	3320      	adds	r3, #32
 8001bf6:	881b      	ldrh	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    occColumnScale = (eeData[16] & 0x00F0) >> 4;
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3320      	adds	r3, #32
 8001c08:	881b      	ldrh	r3, [r3, #0]
 8001c0a:	111b      	asrs	r3, r3, #4
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f003 030f 	and.w	r3, r3, #15
 8001c12:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    occRowScale = (eeData[16] & 0x0F00) >> 8;
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3320      	adds	r3, #32
 8001c1c:	881b      	ldrh	r3, [r3, #0]
 8001c1e:	121b      	asrs	r3, r3, #8
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    offsetRef = eeData[17];
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3322      	adds	r3, #34	; 0x22
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	f8a7 30ee 	strh.w	r3, [r7, #238]	; 0xee
    if (offsetRef > 32767)
    {
        offsetRef = offsetRef - 65536;
    }
    
    for(int i = 0; i < 6; i++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001c3c:	e056      	b.n	8001cec <ExtractOffsetParameters+0x110>
    {
        p = i * 4;
 8001c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occRow[p + 0] = (eeData[18 + i] & 0x000F);
 8001c48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c4c:	3312      	adds	r3, #18
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	1d3a      	adds	r2, r7, #4
 8001c52:	6812      	ldr	r2, [r2, #0]
 8001c54:	4413      	add	r3, r2
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	f003 020f 	and.w	r2, r3, #15
 8001c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001c66:	440b      	add	r3, r1
 8001c68:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 1] = (eeData[18 + i] & 0x00F0) >> 4;
 8001c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c70:	3312      	adds	r3, #18
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	1d3a      	adds	r2, r7, #4
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	111a      	asrs	r2, r3, #4
 8001c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c82:	3301      	adds	r3, #1
 8001c84:	f002 020f 	and.w	r2, r2, #15
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001c8e:	440b      	add	r3, r1
 8001c90:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 2] = (eeData[18 + i] & 0x0F00) >> 8;
 8001c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c98:	3312      	adds	r3, #18
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	1d3a      	adds	r2, r7, #4
 8001c9e:	6812      	ldr	r2, [r2, #0]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	121a      	asrs	r2, r3, #8
 8001ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001caa:	3302      	adds	r3, #2
 8001cac:	f002 020f 	and.w	r2, r2, #15
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001cb6:	440b      	add	r3, r1
 8001cb8:	f843 2c84 	str.w	r2, [r3, #-132]
        occRow[p + 3] = (eeData[18 + i] & 0xF000) >> 12;
 8001cbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cc0:	3312      	adds	r3, #18
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	1d3a      	adds	r2, r7, #4
 8001cc6:	6812      	ldr	r2, [r2, #0]
 8001cc8:	4413      	add	r3, r2
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	0b1b      	lsrs	r3, r3, #12
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cd4:	3303      	adds	r3, #3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001cdc:	440b      	add	r3, r1
 8001cde:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 6; i++)
 8001ce2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001cec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	dda4      	ble.n	8001c3e <ExtractOffsetParameters+0x62>
    }
    
    for(int i = 0; i < 24; i++)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001cfa:	e020      	b.n	8001d3e <ExtractOffsetParameters+0x162>
    {
        if (occRow[i] > 7)
 8001cfc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d06:	4413      	add	r3, r2
 8001d08:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8001d0c:	2b07      	cmp	r3, #7
 8001d0e:	dd11      	ble.n	8001d34 <ExtractOffsetParameters+0x158>
        {
            occRow[i] = occRow[i] - 16;
 8001d10:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001d1a:	4413      	add	r3, r2
 8001d1c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8001d20:	f1a3 0210 	sub.w	r2, r3, #16
 8001d24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001d2e:	440b      	add	r3, r1
 8001d30:	f843 2c84 	str.w	r2, [r3, #-132]
    for(int i = 0; i < 24; i++)
 8001d34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d38:	3301      	adds	r3, #1
 8001d3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001d3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001d42:	2b17      	cmp	r3, #23
 8001d44:	ddda      	ble.n	8001cfc <ExtractOffsetParameters+0x120>
        }
    }
    
    for(int i = 0; i < 8; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001d4c:	e04e      	b.n	8001dec <ExtractOffsetParameters+0x210>
    {
        p = i * 4;
 8001d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
        occColumn[p + 0] = (eeData[24 + i] & 0x000F);
 8001d58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d5c:	3318      	adds	r3, #24
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	1d3a      	adds	r2, r7, #4
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	4413      	add	r3, r2
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	f003 010f 	and.w	r1, r3, #15
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 1] = (eeData[24 + i] & 0x00F0) >> 4;
 8001d78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001d7c:	3318      	adds	r3, #24
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	1d3a      	adds	r2, r7, #4
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	111b      	asrs	r3, r3, #4
 8001d8a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001d8e:	3201      	adds	r2, #1
 8001d90:	f003 010f 	and.w	r1, r3, #15
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 2] = (eeData[24 + i] & 0x0F00) >> 8;
 8001d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001da0:	3318      	adds	r3, #24
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	1d3a      	adds	r2, r7, #4
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	121b      	asrs	r3, r3, #8
 8001dae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8001db2:	3202      	adds	r2, #2
 8001db4:	f003 010f 	and.w	r1, r3, #15
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        occColumn[p + 3] = (eeData[24 + i] & 0xF000) >> 12;
 8001dc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001dc4:	3318      	adds	r3, #24
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	1d3a      	adds	r2, r7, #4
 8001dca:	6812      	ldr	r2, [r2, #0]
 8001dcc:	4413      	add	r3, r2
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	0b1b      	lsrs	r3, r3, #12
 8001dd2:	b299      	uxth	r1, r3
 8001dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd8:	1cda      	adds	r2, r3, #3
 8001dda:	f107 030c 	add.w	r3, r7, #12
 8001dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 8; i++)
 8001de2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001de6:	3301      	adds	r3, #1
 8001de8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001df0:	2b07      	cmp	r3, #7
 8001df2:	ddac      	ble.n	8001d4e <ExtractOffsetParameters+0x172>
    }
    
    for(int i = 0; i < 32; i ++)
 8001df4:	2300      	movs	r3, #0
 8001df6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001dfa:	e01a      	b.n	8001e32 <ExtractOffsetParameters+0x256>
    {
        if (occColumn[i] > 7)
 8001dfc:	f107 030c 	add.w	r3, r7, #12
 8001e00:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e08:	2b07      	cmp	r3, #7
 8001e0a:	dd0d      	ble.n	8001e28 <ExtractOffsetParameters+0x24c>
        {
            occColumn[i] = occColumn[i] - 16;
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e18:	f1a3 0110 	sub.w	r1, r3, #16
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for(int i = 0; i < 32; i ++)
 8001e28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001e32:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001e36:	2b1f      	cmp	r3, #31
 8001e38:	dde0      	ble.n	8001dfc <ExtractOffsetParameters+0x220>
        }
    }

    for(int i = 0; i < 24; i++)
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001e40:	e0a3      	b.n	8001f8a <ExtractOffsetParameters+0x3ae>
    {
        for(int j = 0; j < 32; j ++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001e48:	e095      	b.n	8001f76 <ExtractOffsetParameters+0x39a>
        {
            p = 32 * i +j;
 8001e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e4e:	015b      	lsls	r3, r3, #5
 8001e50:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8001e54:	4413      	add	r3, r2
 8001e56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
            mlx90640->offset[p] = (eeData[64 + p] & 0xFC00) >> 10;
 8001e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5e:	3340      	adds	r3, #64	; 0x40
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	1d3a      	adds	r2, r7, #4
 8001e64:	6812      	ldr	r2, [r2, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	0a9b      	lsrs	r3, r3, #10
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	b219      	sxth	r1, r3
 8001e70:	463b      	mov	r3, r7
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e78:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001e7c:	005b      	lsls	r3, r3, #1
 8001e7e:	4413      	add	r3, r2
 8001e80:	460a      	mov	r2, r1
 8001e82:	809a      	strh	r2, [r3, #4]
            if (mlx90640->offset[p] > 31)
 8001e84:	463b      	mov	r3, r7
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8c:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	4413      	add	r3, r2
 8001e94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e98:	2b1f      	cmp	r3, #31
 8001e9a:	dd17      	ble.n	8001ecc <ExtractOffsetParameters+0x2f0>
            {
                mlx90640->offset[p] = mlx90640->offset[p] - 64;
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea4:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	4413      	add	r3, r2
 8001eac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	3b40      	subs	r3, #64	; 0x40
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	b219      	sxth	r1, r3
 8001eb8:	463b      	mov	r3, r7
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec0:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4413      	add	r3, r2
 8001ec8:	460a      	mov	r2, r1
 8001eca:	809a      	strh	r2, [r3, #4]
            }
            mlx90640->offset[p] = mlx90640->offset[p]*(1 << occRemScale);
 8001ecc:	463b      	mov	r3, r7
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed4:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	4413      	add	r3, r2
 8001edc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	b219      	sxth	r1, r3
 8001eec:	463b      	mov	r3, r7
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef4:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	460a      	mov	r2, r1
 8001efe:	809a      	strh	r2, [r3, #4]
            mlx90640->offset[p] = (offsetRef + (occRow[i] << occRowScale) + (occColumn[j] << occColumnScale) + mlx90640->offset[p]);
 8001f00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001f0a:	4413      	add	r3, r2
 8001f0c:	f853 2c84 	ldr.w	r2, [r3, #-132]
 8001f10:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	f8b7 30ee 	ldrh.w	r3, [r7, #238]	; 0xee
 8001f1e:	4413      	add	r3, r2
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	f107 030c 	add.w	r3, r7, #12
 8001f26:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001f2a:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8001f2e:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 8001f32:	fa01 f303 	lsl.w	r3, r1, r3
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	4413      	add	r3, r2
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	463b      	mov	r3, r7
 8001f3e:	6819      	ldr	r1, [r3, #0]
 8001f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f44:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	440b      	add	r3, r1
 8001f4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	4413      	add	r3, r2
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	b219      	sxth	r1, r3
 8001f58:	463b      	mov	r3, r7
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f60:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	4413      	add	r3, r2
 8001f68:	460a      	mov	r2, r1
 8001f6a:	809a      	strh	r2, [r3, #4]
        for(int j = 0; j < 32; j ++)
 8001f6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f70:	3301      	adds	r3, #1
 8001f72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001f76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f7a:	2b1f      	cmp	r3, #31
 8001f7c:	f77f af65 	ble.w	8001e4a <ExtractOffsetParameters+0x26e>
    for(int i = 0; i < 24; i++)
 8001f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f84:	3301      	adds	r3, #1
 8001f86:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8001f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f8e:	2b17      	cmp	r3, #23
 8001f90:	f77f af57 	ble.w	8001e42 <ExtractOffsetParameters+0x266>
        }
    }
}
 8001f94:	bf00      	nop
 8001f96:	bf00      	nop
 8001f98:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	0000      	movs	r0, r0
	...

08001fa8 <ExtractKtaPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKtaPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8001fa8:	b5b0      	push	{r4, r5, r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
    int p = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	617b      	str	r3, [r7, #20]
    int8_t KtaReCe;
    uint8_t ktaScale1;
    uint8_t ktaScale2;
    uint8_t split;

    KtaRoCo = (eeData[54] & 0xFF00) >> 8;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	336c      	adds	r3, #108	; 0x6c
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	74fb      	strb	r3, [r7, #19]
    if (KtaRoCo > 127)
    {
        KtaRoCo = KtaRoCo - 256;
    }
    KtaRC[0] = KtaRoCo;
 8001fc2:	7cfb      	ldrb	r3, [r7, #19]
 8001fc4:	723b      	strb	r3, [r7, #8]
    
    KtaReCo = (eeData[54] & 0x00FF);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	336c      	adds	r3, #108	; 0x6c
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	74bb      	strb	r3, [r7, #18]
    if (KtaReCo > 127)
    {
        KtaReCo = KtaReCo - 256;
    }
    KtaRC[2] = KtaReCo;
 8001fce:	7cbb      	ldrb	r3, [r7, #18]
 8001fd0:	72bb      	strb	r3, [r7, #10]
      
    KtaRoCe = (eeData[55] & 0xFF00) >> 8;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	336e      	adds	r3, #110	; 0x6e
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	747b      	strb	r3, [r7, #17]
    if (KtaRoCe > 127)
    {
        KtaRoCe = KtaRoCe - 256;
    }
    KtaRC[1] = KtaRoCe;
 8001fde:	7c7b      	ldrb	r3, [r7, #17]
 8001fe0:	727b      	strb	r3, [r7, #9]
      
    KtaReCe = (eeData[55] & 0x00FF);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	336e      	adds	r3, #110	; 0x6e
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	743b      	strb	r3, [r7, #16]
    if (KtaReCe > 127)
    {
        KtaReCe = KtaReCe - 256;
    }
    KtaRC[3] = KtaReCe;
 8001fea:	7c3b      	ldrb	r3, [r7, #16]
 8001fec:	72fb      	strb	r3, [r7, #11]
  
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3370      	adds	r3, #112	; 0x70
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	111b      	asrs	r3, r3, #4
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	3308      	adds	r3, #8
 8002000:	73fb      	strb	r3, [r7, #15]
    ktaScale2 = (eeData[56] & 0x000F);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	3370      	adds	r3, #112	; 0x70
 8002006:	881b      	ldrh	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	73bb      	strb	r3, [r7, #14]

    for(int i = 0; i < 24; i++)
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	e0ce      	b.n	80021b4 <ExtractKtaPixelParameters+0x20c>
    {
        for(int j = 0; j < 32; j ++)
 8002016:	2300      	movs	r3, #0
 8002018:	61bb      	str	r3, [r7, #24]
 800201a:	e0c4      	b.n	80021a6 <ExtractKtaPixelParameters+0x1fe>
        {
            p = 32 * i +j;
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	015b      	lsls	r3, r3, #5
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4413      	add	r3, r2
 8002024:	617b      	str	r3, [r7, #20]
            split = 2*(p/32 - (p/64)*2) + p%2;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b00      	cmp	r3, #0
 800202a:	da00      	bge.n	800202e <ExtractKtaPixelParameters+0x86>
 800202c:	331f      	adds	r3, #31
 800202e:	115b      	asrs	r3, r3, #5
 8002030:	461a      	mov	r2, r3
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	da00      	bge.n	800203a <ExtractKtaPixelParameters+0x92>
 8002038:	333f      	adds	r3, #63	; 0x3f
 800203a:	119b      	asrs	r3, r3, #6
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	b2db      	uxtb	r3, r3
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	b2da      	uxtb	r2, r3
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	bfb8      	it	lt
 8002050:	425b      	neglt	r3, r3
 8002052:	b2db      	uxtb	r3, r3
 8002054:	4413      	add	r3, r2
 8002056:	737b      	strb	r3, [r7, #13]
            mlx90640->kta[p] = (eeData[64 + p] & 0x000E) >> 1;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	3340      	adds	r3, #64	; 0x40
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	4413      	add	r3, r2
 8002062:	881b      	ldrh	r3, [r3, #0]
 8002064:	105b      	asrs	r3, r3, #1
 8002066:	f003 0307 	and.w	r3, r3, #7
 800206a:	ee07 3a90 	vmov	s15, r3
 800206e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	3304      	adds	r3, #4
 8002080:	edc3 7a00 	vstr	s15, [r3]
            if (mlx90640->kta[p] > 3)
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	edd3 7a00 	vldr	s15, [r3]
 8002096:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800209a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800209e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a2:	dd15      	ble.n	80020d0 <ExtractKtaPixelParameters+0x128>
            {
                mlx90640->kta[p] = mlx90640->kta[p] - 8;
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4413      	add	r3, r2
 80020b0:	3304      	adds	r3, #4
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80020ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	edc3 7a00 	vstr	s15, [r3]
            }
            mlx90640->kta[p] = mlx90640->kta[p] * (1 << ktaScale2);
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	3304      	adds	r3, #4
 80020de:	ed93 7a00 	vldr	s14, [r3]
 80020e2:	7bbb      	ldrb	r3, [r7, #14]
 80020e4:	2201      	movs	r2, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	ee07 3a90 	vmov	s15, r3
 80020ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	3304      	adds	r3, #4
 8002104:	edc3 7a00 	vstr	s15, [r3]
            mlx90640->kta[p] = KtaRC[split] + mlx90640->kta[p];
 8002108:	7b7b      	ldrb	r3, [r7, #13]
 800210a:	f107 0220 	add.w	r2, r7, #32
 800210e:	4413      	add	r3, r2
 8002110:	f913 3c18 	ldrsb.w	r3, [r3, #-24]
 8002114:	ee07 3a90 	vmov	s15, r3
 8002118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	3304      	adds	r3, #4
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4413      	add	r3, r2
 800213e:	3304      	adds	r3, #4
 8002140:	edc3 7a00 	vstr	s15, [r3]
            mlx90640->kta[p] = mlx90640->kta[p] / pow(2,(double)ktaScale1);
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9bb 	bl	80004d0 <__aeabi_f2d>
 800215a:	4604      	mov	r4, r0
 800215c:	460d      	mov	r5, r1
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe f993 	bl	800048c <__aeabi_ui2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	ec43 2b11 	vmov	d1, r2, r3
 800216e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80021c8 <ExtractKtaPixelParameters+0x220>
 8002172:	f002 fe0b 	bl	8004d8c <pow>
 8002176:	ec53 2b10 	vmov	r2, r3, d0
 800217a:	4620      	mov	r0, r4
 800217c:	4629      	mov	r1, r5
 800217e:	f7fe fb29 	bl	80007d4 <__aeabi_ddiv>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4610      	mov	r0, r2
 8002188:	4619      	mov	r1, r3
 800218a:	f7fe fca9 	bl	8000ae0 <__aeabi_d2f>
 800218e:	4601      	mov	r1, r0
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8002198:	009b      	lsls	r3, r3, #2
 800219a:	4413      	add	r3, r2
 800219c:	3304      	adds	r3, #4
 800219e:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 32; j ++)
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	3301      	adds	r3, #1
 80021a4:	61bb      	str	r3, [r7, #24]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b1f      	cmp	r3, #31
 80021aa:	f77f af37 	ble.w	800201c <ExtractKtaPixelParameters+0x74>
    for(int i = 0; i < 24; i++)
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3301      	adds	r3, #1
 80021b2:	61fb      	str	r3, [r7, #28]
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	2b17      	cmp	r3, #23
 80021b8:	f77f af2d 	ble.w	8002016 <ExtractKtaPixelParameters+0x6e>
        }
    }
}
 80021bc:	bf00      	nop
 80021be:	bf00      	nop
 80021c0:	3720      	adds	r7, #32
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bdb0      	pop	{r4, r5, r7, pc}
 80021c6:	bf00      	nop
 80021c8:	00000000 	.word	0x00000000
 80021cc:	40000000 	.word	0x40000000

080021d0 <ExtractKvPixelParameters>:

//------------------------------------------------------------------------------

void ExtractKvPixelParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 80021d0:	b5b0      	push	{r4, r5, r7, lr}
 80021d2:	b088      	sub	sp, #32
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
    int p = 0;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
    int8_t KvReCo;
    int8_t KvReCe;
    uint8_t kvScale;
    uint8_t split;

    KvRoCo = (eeData[52] & 0xF000) >> 12;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3368      	adds	r3, #104	; 0x68
 80021e2:	881b      	ldrh	r3, [r3, #0]
 80021e4:	0b1b      	lsrs	r3, r3, #12
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	77fb      	strb	r3, [r7, #31]
    if (KvRoCo > 7)
 80021ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80021ee:	2b07      	cmp	r3, #7
 80021f0:	dd03      	ble.n	80021fa <ExtractKvPixelParameters+0x2a>
    {
        KvRoCo = KvRoCo - 16;
 80021f2:	7ffb      	ldrb	r3, [r7, #31]
 80021f4:	3b10      	subs	r3, #16
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	77fb      	strb	r3, [r7, #31]
    }
    KvT[0] = KvRoCo;
 80021fa:	7ffb      	ldrb	r3, [r7, #31]
 80021fc:	723b      	strb	r3, [r7, #8]
    
    KvReCo = (eeData[52] & 0x0F00) >> 8;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3368      	adds	r3, #104	; 0x68
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	121b      	asrs	r3, r3, #8
 8002206:	b25b      	sxtb	r3, r3
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	777b      	strb	r3, [r7, #29]
    if (KvReCo > 7)
 800220e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002212:	2b07      	cmp	r3, #7
 8002214:	dd03      	ble.n	800221e <ExtractKvPixelParameters+0x4e>
    {
        KvReCo = KvReCo - 16;
 8002216:	7f7b      	ldrb	r3, [r7, #29]
 8002218:	3b10      	subs	r3, #16
 800221a:	b2db      	uxtb	r3, r3
 800221c:	777b      	strb	r3, [r7, #29]
    }
    KvT[2] = KvReCo;
 800221e:	7f7b      	ldrb	r3, [r7, #29]
 8002220:	72bb      	strb	r3, [r7, #10]
      
    KvRoCe = (eeData[52] & 0x00F0) >> 4;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3368      	adds	r3, #104	; 0x68
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	111b      	asrs	r3, r3, #4
 800222a:	b25b      	sxtb	r3, r3
 800222c:	f003 030f 	and.w	r3, r3, #15
 8002230:	77bb      	strb	r3, [r7, #30]
    if (KvRoCe > 7)
 8002232:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002236:	2b07      	cmp	r3, #7
 8002238:	dd03      	ble.n	8002242 <ExtractKvPixelParameters+0x72>
    {
        KvRoCe = KvRoCe - 16;
 800223a:	7fbb      	ldrb	r3, [r7, #30]
 800223c:	3b10      	subs	r3, #16
 800223e:	b2db      	uxtb	r3, r3
 8002240:	77bb      	strb	r3, [r7, #30]
    }
    KvT[1] = KvRoCe;
 8002242:	7fbb      	ldrb	r3, [r7, #30]
 8002244:	727b      	strb	r3, [r7, #9]
      
    KvReCe = (eeData[52] & 0x000F);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3368      	adds	r3, #104	; 0x68
 800224a:	881b      	ldrh	r3, [r3, #0]
 800224c:	b25b      	sxtb	r3, r3
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	773b      	strb	r3, [r7, #28]
    if (KvReCe > 7)
 8002254:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8002258:	2b07      	cmp	r3, #7
 800225a:	dd03      	ble.n	8002264 <ExtractKvPixelParameters+0x94>
    {
        KvReCe = KvReCe - 16;
 800225c:	7f3b      	ldrb	r3, [r7, #28]
 800225e:	3b10      	subs	r3, #16
 8002260:	b2db      	uxtb	r3, r3
 8002262:	773b      	strb	r3, [r7, #28]
    }
    KvT[3] = KvReCe;
 8002264:	7f3b      	ldrb	r3, [r7, #28]
 8002266:	72fb      	strb	r3, [r7, #11]
  
    kvScale = (eeData[56] & 0x0F00) >> 8;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3370      	adds	r3, #112	; 0x70
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	121b      	asrs	r3, r3, #8
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	73fb      	strb	r3, [r7, #15]


    for(int i = 0; i < 24; i++)
 8002278:	2300      	movs	r3, #0
 800227a:	61bb      	str	r3, [r7, #24]
 800227c:	e06a      	b.n	8002354 <ExtractKvPixelParameters+0x184>
    {
        for(int j = 0; j < 32; j ++)
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	e061      	b.n	8002348 <ExtractKvPixelParameters+0x178>
        {
            p = 32 * i +j;
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	015b      	lsls	r3, r3, #5
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	4413      	add	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
            split = 2*(p/32 - (p/64)*2) + p%2;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	2b00      	cmp	r3, #0
 8002292:	da00      	bge.n	8002296 <ExtractKvPixelParameters+0xc6>
 8002294:	331f      	adds	r3, #31
 8002296:	115b      	asrs	r3, r3, #5
 8002298:	461a      	mov	r2, r3
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	2b00      	cmp	r3, #0
 800229e:	da00      	bge.n	80022a2 <ExtractKvPixelParameters+0xd2>
 80022a0:	333f      	adds	r3, #63	; 0x3f
 80022a2:	119b      	asrs	r3, r3, #6
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	bfb8      	it	lt
 80022b8:	425b      	neglt	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	4413      	add	r3, r2
 80022be:	73bb      	strb	r3, [r7, #14]
            mlx90640->kv[p] = KvT[split];
 80022c0:	7bbb      	ldrb	r3, [r7, #14]
 80022c2:	f107 0220 	add.w	r2, r7, #32
 80022c6:	4413      	add	r3, r2
 80022c8:	f913 3c18 	ldrsb.w	r3, [r3, #-24]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	4413      	add	r3, r2
 80022e0:	3304      	adds	r3, #4
 80022e2:	edc3 7a00 	vstr	s15, [r3]
            mlx90640->kv[p] = mlx90640->kv[p] / pow(2,(double)kvScale);
 80022e6:	683a      	ldr	r2, [r7, #0]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	3304      	adds	r3, #4
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe f8ea 	bl	80004d0 <__aeabi_f2d>
 80022fc:	4604      	mov	r4, r0
 80022fe:	460d      	mov	r5, r1
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f8c2 	bl	800048c <__aeabi_ui2d>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	ec43 2b11 	vmov	d1, r2, r3
 8002310:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8002368 <ExtractKvPixelParameters+0x198>
 8002314:	f002 fd3a 	bl	8004d8c <pow>
 8002318:	ec53 2b10 	vmov	r2, r3, d0
 800231c:	4620      	mov	r0, r4
 800231e:	4629      	mov	r1, r5
 8002320:	f7fe fa58 	bl	80007d4 <__aeabi_ddiv>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f7fe fbd8 	bl	8000ae0 <__aeabi_d2f>
 8002330:	4601      	mov	r1, r0
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	3304      	adds	r3, #4
 8002340:	6019      	str	r1, [r3, #0]
        for(int j = 0; j < 32; j ++)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	3301      	adds	r3, #1
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	2b1f      	cmp	r3, #31
 800234c:	dd9a      	ble.n	8002284 <ExtractKvPixelParameters+0xb4>
    for(int i = 0; i < 24; i++)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	3301      	adds	r3, #1
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	2b17      	cmp	r3, #23
 8002358:	dd91      	ble.n	800227e <ExtractKvPixelParameters+0xae>
        }
    }
}
 800235a:	bf00      	nop
 800235c:	bf00      	nop
 800235e:	3720      	adds	r7, #32
 8002360:	46bd      	mov	sp, r7
 8002362:	bdb0      	pop	{r4, r5, r7, pc}
 8002364:	f3af 8000 	nop.w
 8002368:	00000000 	.word	0x00000000
 800236c:	40000000 	.word	0x40000000

08002370 <ExtractCPParameters>:

//------------------------------------------------------------------------------

void ExtractCPParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002370:	b5b0      	push	{r4, r5, r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
    float cpKta;
    uint8_t alphaScale;
    uint8_t ktaScale1;
    uint8_t kvScale;

    alphaScale = ((eeData[32] & 0xF000) >> 12) + 27;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3340      	adds	r3, #64	; 0x40
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	0b1b      	lsrs	r3, r3, #12
 8002382:	b29b      	uxth	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	331b      	adds	r3, #27
 8002388:	75fb      	strb	r3, [r7, #23]
    
    offsetSP[0] = (eeData[58] & 0x03FF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3374      	adds	r3, #116	; 0x74
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	b21b      	sxth	r3, r3
 8002392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002396:	b21b      	sxth	r3, r3
 8002398:	813b      	strh	r3, [r7, #8]
    if (offsetSP[0] > 511)
 800239a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800239e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023a2:	db07      	blt.n	80023b4 <ExtractCPParameters+0x44>
    {
        offsetSP[0] = offsetSP[0] - 1024;
 80023a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	813b      	strh	r3, [r7, #8]
    }
    
    offsetSP[1] = (eeData[58] & 0xFC00) >> 10;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3374      	adds	r3, #116	; 0x74
 80023b8:	881b      	ldrh	r3, [r3, #0]
 80023ba:	0a9b      	lsrs	r3, r3, #10
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b21b      	sxth	r3, r3
 80023c0:	817b      	strh	r3, [r7, #10]
    if (offsetSP[1] > 31)
 80023c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023c6:	2b1f      	cmp	r3, #31
 80023c8:	dd06      	ble.n	80023d8 <ExtractCPParameters+0x68>
    {
        offsetSP[1] = offsetSP[1] - 64;
 80023ca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	3b40      	subs	r3, #64	; 0x40
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	817b      	strh	r3, [r7, #10]
    }
    offsetSP[1] = offsetSP[1] + offsetSP[0]; 
 80023d8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80023dc:	b29a      	uxth	r2, r3
 80023de:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	4413      	add	r3, r2
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	817b      	strh	r3, [r7, #10]
    
    alphaSP[0] = (eeData[57] & 0x03FF);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3372      	adds	r3, #114	; 0x72
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023f6:	ee07 3a90 	vmov	s15, r3
 80023fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fe:	edc7 7a03 	vstr	s15, [r7, #12]
    if (alphaSP[0] > 511)
 8002402:	edd7 7a03 	vldr	s15, [r7, #12]
 8002406:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8002618 <ExtractCPParameters+0x2a8>
 800240a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800240e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002412:	dd07      	ble.n	8002424 <ExtractCPParameters+0xb4>
    {
        alphaSP[0] = alphaSP[0] - 1024;
 8002414:	edd7 7a03 	vldr	s15, [r7, #12]
 8002418:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800261c <ExtractCPParameters+0x2ac>
 800241c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002420:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    alphaSP[0] = alphaSP[0] /  pow(2,(double)alphaScale);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe f852 	bl	80004d0 <__aeabi_f2d>
 800242c:	4604      	mov	r4, r0
 800242e:	460d      	mov	r5, r1
 8002430:	7dfb      	ldrb	r3, [r7, #23]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f82a 	bl	800048c <__aeabi_ui2d>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	ec43 2b11 	vmov	d1, r2, r3
 8002440:	ed9f 0b73 	vldr	d0, [pc, #460]	; 8002610 <ExtractCPParameters+0x2a0>
 8002444:	f002 fca2 	bl	8004d8c <pow>
 8002448:	ec53 2b10 	vmov	r2, r3, d0
 800244c:	4620      	mov	r0, r4
 800244e:	4629      	mov	r1, r5
 8002450:	f7fe f9c0 	bl	80007d4 <__aeabi_ddiv>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4610      	mov	r0, r2
 800245a:	4619      	mov	r1, r3
 800245c:	f7fe fb40 	bl	8000ae0 <__aeabi_d2f>
 8002460:	4603      	mov	r3, r0
 8002462:	60fb      	str	r3, [r7, #12]
    
    alphaSP[1] = (eeData[57] & 0xFC00) >> 10;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	3372      	adds	r3, #114	; 0x72
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	0a9b      	lsrs	r3, r3, #10
 800246c:	b29b      	uxth	r3, r3
 800246e:	ee07 3a90 	vmov	s15, r3
 8002472:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002476:	edc7 7a04 	vstr	s15, [r7, #16]
    if (alphaSP[1] > 31)
 800247a:	edd7 7a04 	vldr	s15, [r7, #16]
 800247e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002482:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248a:	dd07      	ble.n	800249c <ExtractCPParameters+0x12c>
    {
        alphaSP[1] = alphaSP[1] - 64;
 800248c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002490:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8002620 <ExtractCPParameters+0x2b0>
 8002494:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002498:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    alphaSP[1] = (1 + alphaSP[1]/128) * alphaSP[0];
 800249c:	ed97 7a04 	vldr	s14, [r7, #16]
 80024a0:	eddf 6a60 	vldr	s13, [pc, #384]	; 8002624 <ExtractCPParameters+0x2b4>
 80024a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80024ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80024b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b8:	edc7 7a04 	vstr	s15, [r7, #16]
    
    cpKta = (eeData[59] & 0x00FF);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	3376      	adds	r3, #118	; 0x76
 80024c0:	881b      	ldrh	r3, [r3, #0]
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	ee07 3a90 	vmov	s15, r3
 80024c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024cc:	edc7 7a06 	vstr	s15, [r7, #24]
    if (cpKta > 127)
 80024d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80024d4:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8002628 <ExtractCPParameters+0x2b8>
 80024d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e0:	dd07      	ble.n	80024f2 <ExtractCPParameters+0x182>
    {
        cpKta = cpKta - 256;
 80024e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024e6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800262c <ExtractCPParameters+0x2bc>
 80024ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024ee:	edc7 7a06 	vstr	s15, [r7, #24]
    }
    ktaScale1 = ((eeData[56] & 0x00F0) >> 4) + 8;    
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3370      	adds	r3, #112	; 0x70
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	111b      	asrs	r3, r3, #4
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	f003 030f 	and.w	r3, r3, #15
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3308      	adds	r3, #8
 8002504:	75bb      	strb	r3, [r7, #22]
    mlx90640->cpKta = cpKta / pow(2,(double)ktaScale1);
 8002506:	69b8      	ldr	r0, [r7, #24]
 8002508:	f7fd ffe2 	bl	80004d0 <__aeabi_f2d>
 800250c:	4604      	mov	r4, r0
 800250e:	460d      	mov	r5, r1
 8002510:	7dbb      	ldrb	r3, [r7, #22]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fd ffba 	bl	800048c <__aeabi_ui2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	ec43 2b11 	vmov	d1, r2, r3
 8002520:	ed9f 0b3b 	vldr	d0, [pc, #236]	; 8002610 <ExtractCPParameters+0x2a0>
 8002524:	f002 fc32 	bl	8004d8c <pow>
 8002528:	ec53 2b10 	vmov	r2, r3, d0
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	f7fe f950 	bl	80007d4 <__aeabi_ddiv>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	f7fe fad0 	bl	8000ae0 <__aeabi_d2f>
 8002540:	4602      	mov	r2, r0
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	621a      	str	r2, [r3, #32]
    
    cpKv = (eeData[59] & 0xFF00) >> 8;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3376      	adds	r3, #118	; 0x76
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	b29b      	uxth	r3, r3
 8002550:	ee07 3a90 	vmov	s15, r3
 8002554:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002558:	edc7 7a07 	vstr	s15, [r7, #28]
    if (cpKv > 127)
 800255c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002560:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002628 <ExtractCPParameters+0x2b8>
 8002564:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	dd07      	ble.n	800257e <ExtractCPParameters+0x20e>
    {
        cpKv = cpKv - 256;
 800256e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002572:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800262c <ExtractCPParameters+0x2bc>
 8002576:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800257a:	edc7 7a07 	vstr	s15, [r7, #28]
    }
    kvScale = (eeData[56] & 0x0F00) >> 8;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3370      	adds	r3, #112	; 0x70
 8002582:	881b      	ldrh	r3, [r3, #0]
 8002584:	121b      	asrs	r3, r3, #8
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f003 030f 	and.w	r3, r3, #15
 800258c:	757b      	strb	r3, [r7, #21]
    mlx90640->cpKv = cpKv / pow(2,(double)kvScale);
 800258e:	69f8      	ldr	r0, [r7, #28]
 8002590:	f7fd ff9e 	bl	80004d0 <__aeabi_f2d>
 8002594:	4604      	mov	r4, r0
 8002596:	460d      	mov	r5, r1
 8002598:	7d7b      	ldrb	r3, [r7, #21]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd ff76 	bl	800048c <__aeabi_ui2d>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	ec43 2b11 	vmov	d1, r2, r3
 80025a8:	ed9f 0b19 	vldr	d0, [pc, #100]	; 8002610 <ExtractCPParameters+0x2a0>
 80025ac:	f002 fbee 	bl	8004d8c <pow>
 80025b0:	ec53 2b10 	vmov	r2, r3, d0
 80025b4:	4620      	mov	r0, r4
 80025b6:	4629      	mov	r1, r5
 80025b8:	f7fe f90c 	bl	80007d4 <__aeabi_ddiv>
 80025bc:	4602      	mov	r2, r0
 80025be:	460b      	mov	r3, r1
 80025c0:	4610      	mov	r0, r2
 80025c2:	4619      	mov	r1, r3
 80025c4:	f7fe fa8c 	bl	8000ae0 <__aeabi_d2f>
 80025c8:	4602      	mov	r2, r0
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	61da      	str	r2, [r3, #28]
       
    mlx90640->cpAlpha[0] = alphaSP[0];
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80025d6:	3304      	adds	r3, #4
 80025d8:	601a      	str	r2, [r3, #0]
    mlx90640->cpAlpha[1] = alphaSP[1];
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80025e2:	3308      	adds	r3, #8
 80025e4:	601a      	str	r2, [r3, #0]
    mlx90640->cpOffset[0] = offsetSP[0];
 80025e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80025f0:	330c      	adds	r3, #12
 80025f2:	801a      	strh	r2, [r3, #0]
    mlx90640->cpOffset[1] = offsetSP[1];  
 80025f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80025fe:	330e      	adds	r3, #14
 8002600:	801a      	strh	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bdb0      	pop	{r4, r5, r7, pc}
 800260a:	bf00      	nop
 800260c:	f3af 8000 	nop.w
 8002610:	00000000 	.word	0x00000000
 8002614:	40000000 	.word	0x40000000
 8002618:	43ff8000 	.word	0x43ff8000
 800261c:	44800000 	.word	0x44800000
 8002620:	42800000 	.word	0x42800000
 8002624:	43000000 	.word	0x43000000
 8002628:	42fe0000 	.word	0x42fe0000
 800262c:	43800000 	.word	0x43800000

08002630 <ExtractCILCParameters>:

//------------------------------------------------------------------------------

void ExtractCILCParameters(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
    float ilChessC[3];
    uint8_t calibrationModeEE;
    
    calibrationModeEE = (eeData[10] & 0x0800) >> 4;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3314      	adds	r3, #20
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	111b      	asrs	r3, r3, #4
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002648:	75fb      	strb	r3, [r7, #23]
    calibrationModeEE = calibrationModeEE ^ 0x80;
 800264a:	7dfb      	ldrb	r3, [r7, #23]
 800264c:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8002650:	43db      	mvns	r3, r3
 8002652:	75fb      	strb	r3, [r7, #23]

    ilChessC[0] = (eeData[53] & 0x003F);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	336a      	adds	r3, #106	; 0x6a
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002666:	edc7 7a02 	vstr	s15, [r7, #8]
    if (ilChessC[0] > 31)
 800266a:	edd7 7a02 	vldr	s15, [r7, #8]
 800266e:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 8002672:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267a:	dd07      	ble.n	800268c <ExtractCILCParameters+0x5c>
    {
        ilChessC[0] = ilChessC[0] - 64;
 800267c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002680:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002768 <ExtractCILCParameters+0x138>
 8002684:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002688:	edc7 7a02 	vstr	s15, [r7, #8]
    }
    ilChessC[0] = ilChessC[0] / 16.0f;
 800268c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002690:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8002694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002698:	edc7 7a02 	vstr	s15, [r7, #8]
    
    ilChessC[1] = (eeData[53] & 0x07C0) >> 6;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	336a      	adds	r3, #106	; 0x6a
 80026a0:	881b      	ldrh	r3, [r3, #0]
 80026a2:	119b      	asrs	r3, r3, #6
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	ee07 3a90 	vmov	s15, r3
 80026ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (ilChessC[1] > 15)
 80026b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80026b8:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80026bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c4:	dd07      	ble.n	80026d6 <ExtractCILCParameters+0xa6>
    {
        ilChessC[1] = ilChessC[1] - 32;
 80026c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80026ca:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800276c <ExtractCILCParameters+0x13c>
 80026ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80026d2:	edc7 7a03 	vstr	s15, [r7, #12]
    }
    ilChessC[1] = ilChessC[1] / 2.0f;
 80026d6:	ed97 7a03 	vldr	s14, [r7, #12]
 80026da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80026de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026e2:	edc7 7a03 	vstr	s15, [r7, #12]
    
    ilChessC[2] = (eeData[53] & 0xF800) >> 11;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	336a      	adds	r3, #106	; 0x6a
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	0adb      	lsrs	r3, r3, #11
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	ee07 3a90 	vmov	s15, r3
 80026f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026f8:	edc7 7a04 	vstr	s15, [r7, #16]
    if (ilChessC[2] > 15)
 80026fc:	edd7 7a04 	vldr	s15, [r7, #16]
 8002700:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8002704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270c:	dd07      	ble.n	800271e <ExtractCILCParameters+0xee>
    {
        ilChessC[2] = ilChessC[2] - 32;
 800270e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002712:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800276c <ExtractCILCParameters+0x13c>
 8002716:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800271a:	edc7 7a04 	vstr	s15, [r7, #16]
    }
    ilChessC[2] = ilChessC[2] / 8.0f;
 800271e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002722:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8002726:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800272a:	edc7 7a04 	vstr	s15, [r7, #16]
    
    mlx90640->calibrationModeEE = calibrationModeEE;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	7dfa      	ldrb	r2, [r7, #23]
 8002732:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    mlx90640->ilChessC[0] = ilChessC[0];
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800273e:	3310      	adds	r3, #16
 8002740:	601a      	str	r2, [r3, #0]
    mlx90640->ilChessC[1] = ilChessC[1];
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 800274a:	3314      	adds	r3, #20
 800274c:	601a      	str	r2, [r3, #0]
    mlx90640->ilChessC[2] = ilChessC[2];
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8002756:	3318      	adds	r3, #24
 8002758:	601a      	str	r2, [r3, #0]
}
 800275a:	bf00      	nop
 800275c:	371c      	adds	r7, #28
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	42800000 	.word	0x42800000
 800276c:	42000000 	.word	0x42000000

08002770 <ExtractDeviatingPixels>:

//------------------------------------------------------------------------------

int ExtractDeviatingPixels(uint16_t *eeData, paramsMLX90640 *mlx90640)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
    uint16_t pixCnt = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	82fb      	strh	r3, [r7, #22]
    uint16_t brokenPixCnt = 0;
 800277e:	2300      	movs	r3, #0
 8002780:	82bb      	strh	r3, [r7, #20]
    uint16_t outlierPixCnt = 0;
 8002782:	2300      	movs	r3, #0
 8002784:	827b      	strh	r3, [r7, #18]
    int warn = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
    int i;
    
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 800278a:	2300      	movs	r3, #0
 800278c:	82fb      	strh	r3, [r7, #22]
 800278e:	e016      	b.n	80027be <ExtractDeviatingPixels+0x4e>
    {
        mlx90640->brokenPixels[pixCnt] = 0xFFFF;
 8002790:	8afb      	ldrh	r3, [r7, #22]
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8002798:	330c      	adds	r3, #12
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027a2:	809a      	strh	r2, [r3, #4]
        mlx90640->outlierPixels[pixCnt] = 0xFFFF;
 80027a4:	8afb      	ldrh	r3, [r7, #22]
 80027a6:	683a      	ldr	r2, [r7, #0]
 80027a8:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 80027ac:	3310      	adds	r3, #16
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4413      	add	r3, r2
 80027b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b6:	80da      	strh	r2, [r3, #6]
    for(pixCnt = 0; pixCnt<5; pixCnt++)
 80027b8:	8afb      	ldrh	r3, [r7, #22]
 80027ba:	3301      	adds	r3, #1
 80027bc:	82fb      	strh	r3, [r7, #22]
 80027be:	8afb      	ldrh	r3, [r7, #22]
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d9e5      	bls.n	8002790 <ExtractDeviatingPixels+0x20>
    }
        
    pixCnt = 0;    
 80027c4:	2300      	movs	r3, #0
 80027c6:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 80027c8:	e02d      	b.n	8002826 <ExtractDeviatingPixels+0xb6>
    {
        if(eeData[pixCnt+64] == 0)
 80027ca:	8afb      	ldrh	r3, [r7, #22]
 80027cc:	3340      	adds	r3, #64	; 0x40
 80027ce:	005b      	lsls	r3, r3, #1
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	4413      	add	r3, r2
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10c      	bne.n	80027f4 <ExtractDeviatingPixels+0x84>
        {
            mlx90640->brokenPixels[brokenPixCnt] = pixCnt;
 80027da:	8abb      	ldrh	r3, [r7, #20]
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 80027e2:	330c      	adds	r3, #12
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	4413      	add	r3, r2
 80027e8:	8afa      	ldrh	r2, [r7, #22]
 80027ea:	809a      	strh	r2, [r3, #4]
            brokenPixCnt = brokenPixCnt + 1;
 80027ec:	8abb      	ldrh	r3, [r7, #20]
 80027ee:	3301      	adds	r3, #1
 80027f0:	82bb      	strh	r3, [r7, #20]
 80027f2:	e015      	b.n	8002820 <ExtractDeviatingPixels+0xb0>
        }    
        else if((eeData[pixCnt+64] & 0x0001) != 0)
 80027f4:	8afb      	ldrh	r3, [r7, #22]
 80027f6:	3340      	adds	r3, #64	; 0x40
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00b      	beq.n	8002820 <ExtractDeviatingPixels+0xb0>
        {
            mlx90640->outlierPixels[outlierPixCnt] = pixCnt;
 8002808:	8a7b      	ldrh	r3, [r7, #18]
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8002810:	3310      	adds	r3, #16
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	8afa      	ldrh	r2, [r7, #22]
 8002818:	80da      	strh	r2, [r3, #6]
            outlierPixCnt = outlierPixCnt + 1;
 800281a:	8a7b      	ldrh	r3, [r7, #18]
 800281c:	3301      	adds	r3, #1
 800281e:	827b      	strh	r3, [r7, #18]
        }    
        
        pixCnt = pixCnt + 1;
 8002820:	8afb      	ldrh	r3, [r7, #22]
 8002822:	3301      	adds	r3, #1
 8002824:	82fb      	strh	r3, [r7, #22]
    while (pixCnt < 768 && brokenPixCnt < 5 && outlierPixCnt < 5)
 8002826:	8afb      	ldrh	r3, [r7, #22]
 8002828:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800282c:	d205      	bcs.n	800283a <ExtractDeviatingPixels+0xca>
 800282e:	8abb      	ldrh	r3, [r7, #20]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d802      	bhi.n	800283a <ExtractDeviatingPixels+0xca>
 8002834:	8a7b      	ldrh	r3, [r7, #18]
 8002836:	2b04      	cmp	r3, #4
 8002838:	d9c7      	bls.n	80027ca <ExtractDeviatingPixels+0x5a>
        
    } 
    
    if(brokenPixCnt > 4)  
 800283a:	8abb      	ldrh	r3, [r7, #20]
 800283c:	2b04      	cmp	r3, #4
 800283e:	d903      	bls.n	8002848 <ExtractDeviatingPixels+0xd8>
    {
        warn = -3;
 8002840:	f06f 0302 	mvn.w	r3, #2
 8002844:	60fb      	str	r3, [r7, #12]
 8002846:	e098      	b.n	800297a <ExtractDeviatingPixels+0x20a>
    }         
    else if(outlierPixCnt > 4)  
 8002848:	8a7b      	ldrh	r3, [r7, #18]
 800284a:	2b04      	cmp	r3, #4
 800284c:	d903      	bls.n	8002856 <ExtractDeviatingPixels+0xe6>
    {
        warn = -4;
 800284e:	f06f 0303 	mvn.w	r3, #3
 8002852:	60fb      	str	r3, [r7, #12]
 8002854:	e091      	b.n	800297a <ExtractDeviatingPixels+0x20a>
    }
    else if((brokenPixCnt + outlierPixCnt) > 4)  
 8002856:	8aba      	ldrh	r2, [r7, #20]
 8002858:	8a7b      	ldrh	r3, [r7, #18]
 800285a:	4413      	add	r3, r2
 800285c:	2b04      	cmp	r3, #4
 800285e:	dd03      	ble.n	8002868 <ExtractDeviatingPixels+0xf8>
    {
        warn = -5;
 8002860:	f06f 0304 	mvn.w	r3, #4
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	e088      	b.n	800297a <ExtractDeviatingPixels+0x20a>
    } 
    else
    {
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8002868:	2300      	movs	r3, #0
 800286a:	82fb      	strh	r3, [r7, #22]
 800286c:	e026      	b.n	80028bc <ExtractDeviatingPixels+0x14c>
        {
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 800286e:	8afb      	ldrh	r3, [r7, #22]
 8002870:	3301      	adds	r3, #1
 8002872:	60bb      	str	r3, [r7, #8]
 8002874:	e01b      	b.n	80028ae <ExtractDeviatingPixels+0x13e>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->brokenPixels[i]);
 8002876:	8afb      	ldrh	r3, [r7, #22]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800287e:	330c      	adds	r3, #12
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	4413      	add	r3, r2
 8002884:	8898      	ldrh	r0, [r3, #4]
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 800288e:	330c      	adds	r3, #12
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	889b      	ldrh	r3, [r3, #4]
 8002896:	4619      	mov	r1, r3
 8002898:	f000 f874 	bl	8002984 <CheckAdjacentPixels>
 800289c:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d001      	beq.n	80028a8 <ExtractDeviatingPixels+0x138>
                {
                    return warn;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	e069      	b.n	800297c <ExtractDeviatingPixels+0x20c>
            for(i=pixCnt+1; i<brokenPixCnt; i++)
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	3301      	adds	r3, #1
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	8abb      	ldrh	r3, [r7, #20]
 80028b0:	68ba      	ldr	r2, [r7, #8]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	dbdf      	blt.n	8002876 <ExtractDeviatingPixels+0x106>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 80028b6:	8afb      	ldrh	r3, [r7, #22]
 80028b8:	3301      	adds	r3, #1
 80028ba:	82fb      	strh	r3, [r7, #22]
 80028bc:	8afa      	ldrh	r2, [r7, #22]
 80028be:	8abb      	ldrh	r3, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d3d4      	bcc.n	800286e <ExtractDeviatingPixels+0xfe>
                }    
            }    
        }
        
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 80028c4:	2300      	movs	r3, #0
 80028c6:	82fb      	strh	r3, [r7, #22]
 80028c8:	e026      	b.n	8002918 <ExtractDeviatingPixels+0x1a8>
        {
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 80028ca:	8afb      	ldrh	r3, [r7, #22]
 80028cc:	3301      	adds	r3, #1
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	e01b      	b.n	800290a <ExtractDeviatingPixels+0x19a>
            {
                warn = CheckAdjacentPixels(mlx90640->outlierPixels[pixCnt],mlx90640->outlierPixels[i]);
 80028d2:	8afb      	ldrh	r3, [r7, #22]
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 80028da:	3310      	adds	r3, #16
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	4413      	add	r3, r2
 80028e0:	88d8      	ldrh	r0, [r3, #6]
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 80028ea:	3310      	adds	r3, #16
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	88db      	ldrh	r3, [r3, #6]
 80028f2:	4619      	mov	r1, r3
 80028f4:	f000 f846 	bl	8002984 <CheckAdjacentPixels>
 80028f8:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <ExtractDeviatingPixels+0x194>
                {
                    return warn;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	e03b      	b.n	800297c <ExtractDeviatingPixels+0x20c>
            for(i=pixCnt+1; i<outlierPixCnt; i++)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	3301      	adds	r3, #1
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	8a7b      	ldrh	r3, [r7, #18]
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	dbdf      	blt.n	80028d2 <ExtractDeviatingPixels+0x162>
        for(pixCnt=0; pixCnt<outlierPixCnt; pixCnt++)
 8002912:	8afb      	ldrh	r3, [r7, #22]
 8002914:	3301      	adds	r3, #1
 8002916:	82fb      	strh	r3, [r7, #22]
 8002918:	8afa      	ldrh	r2, [r7, #22]
 800291a:	8a7b      	ldrh	r3, [r7, #18]
 800291c:	429a      	cmp	r2, r3
 800291e:	d3d4      	bcc.n	80028ca <ExtractDeviatingPixels+0x15a>
                }    
            }    
        } 
        
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 8002920:	2300      	movs	r3, #0
 8002922:	82fb      	strh	r3, [r7, #22]
 8002924:	e025      	b.n	8002972 <ExtractDeviatingPixels+0x202>
        {
            for(i=0; i<outlierPixCnt; i++)
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
 800292a:	e01b      	b.n	8002964 <ExtractDeviatingPixels+0x1f4>
            {
                warn = CheckAdjacentPixels(mlx90640->brokenPixels[pixCnt],mlx90640->outlierPixels[i]);
 800292c:	8afb      	ldrh	r3, [r7, #22]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8002934:	330c      	adds	r3, #12
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	4413      	add	r3, r2
 800293a:	8898      	ldrh	r0, [r3, #4]
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f503 53a9 	add.w	r3, r3, #5408	; 0x1520
 8002944:	3310      	adds	r3, #16
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	88db      	ldrh	r3, [r3, #6]
 800294c:	4619      	mov	r1, r3
 800294e:	f000 f819 	bl	8002984 <CheckAdjacentPixels>
 8002952:	60f8      	str	r0, [r7, #12]
                if(warn != 0)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <ExtractDeviatingPixels+0x1ee>
                {
                    return warn;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	e00e      	b.n	800297c <ExtractDeviatingPixels+0x20c>
            for(i=0; i<outlierPixCnt; i++)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	3301      	adds	r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	8a7b      	ldrh	r3, [r7, #18]
 8002966:	68ba      	ldr	r2, [r7, #8]
 8002968:	429a      	cmp	r2, r3
 800296a:	dbdf      	blt.n	800292c <ExtractDeviatingPixels+0x1bc>
        for(pixCnt=0; pixCnt<brokenPixCnt; pixCnt++)
 800296c:	8afb      	ldrh	r3, [r7, #22]
 800296e:	3301      	adds	r3, #1
 8002970:	82fb      	strh	r3, [r7, #22]
 8002972:	8afa      	ldrh	r2, [r7, #22]
 8002974:	8abb      	ldrh	r3, [r7, #20]
 8002976:	429a      	cmp	r2, r3
 8002978:	d3d5      	bcc.n	8002926 <ExtractDeviatingPixels+0x1b6>
        }    
        
    }    
    
    
    return warn;
 800297a:	68fb      	ldr	r3, [r7, #12]
       
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <CheckAdjacentPixels>:

//------------------------------------------------------------------------------

 int CheckAdjacentPixels(uint16_t pix1, uint16_t pix2)
 {
 8002984:	b480      	push	{r7}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	460a      	mov	r2, r1
 800298e:	80fb      	strh	r3, [r7, #6]
 8002990:	4613      	mov	r3, r2
 8002992:	80bb      	strh	r3, [r7, #4]
     int pixPosDif;
     
     pixPosDif = pix1 - pix2;
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	88bb      	ldrh	r3, [r7, #4]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	60fb      	str	r3, [r7, #12]
     if(pixPosDif > -34 && pixPosDif < -30)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f113 0f21 	cmn.w	r3, #33	; 0x21
 80029a2:	db06      	blt.n	80029b2 <CheckAdjacentPixels+0x2e>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f113 0f1e 	cmn.w	r3, #30
 80029aa:	da02      	bge.n	80029b2 <CheckAdjacentPixels+0x2e>
     {
         return -6;
 80029ac:	f06f 0305 	mvn.w	r3, #5
 80029b0:	e013      	b.n	80029da <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > -2 && pixPosDif < 2)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	db05      	blt.n	80029c6 <CheckAdjacentPixels+0x42>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	dc02      	bgt.n	80029c6 <CheckAdjacentPixels+0x42>
     {
         return -6;
 80029c0:	f06f 0305 	mvn.w	r3, #5
 80029c4:	e009      	b.n	80029da <CheckAdjacentPixels+0x56>
     } 
     if(pixPosDif > 30 && pixPosDif < 34)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b1e      	cmp	r3, #30
 80029ca:	dd05      	ble.n	80029d8 <CheckAdjacentPixels+0x54>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2b21      	cmp	r3, #33	; 0x21
 80029d0:	dc02      	bgt.n	80029d8 <CheckAdjacentPixels+0x54>
     {
         return -6;
 80029d2:	f06f 0305 	mvn.w	r3, #5
 80029d6:	e000      	b.n	80029da <CheckAdjacentPixels+0x56>
     }
     
     return 0;    
 80029d8:	2300      	movs	r3, #0
 }
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr

080029e6 <CheckEEPROMValid>:
 
 //------------------------------------------------------------------------------
 
 int CheckEEPROMValid(uint16_t *eeData)  
 {
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
     int deviceSelect;
     deviceSelect = eeData[10] & 0x0040;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3314      	adds	r3, #20
 80029f2:	881b      	ldrh	r3, [r3, #0]
 80029f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f8:	60fb      	str	r3, [r7, #12]
     if(deviceSelect == 0)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <CheckEEPROMValid+0x1e>
     {
         return 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	e001      	b.n	8002a08 <CheckEEPROMValid+0x22>
     }
     
     return -7;    
 8002a04:	f06f 0306 	mvn.w	r3, #6
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <MLX90640_I2CRead>:
{   
    I2CStop();
}

int MLX90640_I2CRead(uint8_t slaveAddr, uint16_t startAddress,uint16_t nMemAddressRead, uint16_t *data)
{
 8002a14:	b590      	push	{r4, r7, lr}
 8002a16:	f2ad 6dac 	subw	sp, sp, #1708	; 0x6ac
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4604      	mov	r4, r0
 8002a1e:	4608      	mov	r0, r1
 8002a20:	4611      	mov	r1, r2
 8002a22:	1d3a      	adds	r2, r7, #4
 8002a24:	6013      	str	r3, [r2, #0]
 8002a26:	f107 030f 	add.w	r3, r7, #15
 8002a2a:	4622      	mov	r2, r4
 8002a2c:	701a      	strb	r2, [r3, #0]
 8002a2e:	f107 030c 	add.w	r3, r7, #12
 8002a32:	4602      	mov	r2, r0
 8002a34:	801a      	strh	r2, [r3, #0]
 8002a36:	f107 030a 	add.w	r3, r7, #10
 8002a3a:	460a      	mov	r2, r1
 8002a3c:	801a      	strh	r2, [r3, #0]
    uint8_t sa;
    int ack = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
    int cnt = 0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
    int i = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
    char cmd[2] = {0,0};
 8002a50:	2300      	movs	r3, #0
 8002a52:	f8a7 3694 	strh.w	r3, [r7, #1684]	; 0x694
    char i2cData[1664] = {0};
 8002a56:	f107 0314 	add.w	r3, r7, #20
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	f240 627c 	movw	r2, #1660	; 0x67c
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f002 f988 	bl	8004d7c <memset>
    uint16_t *p;
    
    p = data;
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8c7 36a0 	str.w	r3, [r7, #1696]	; 0x6a0
    sa = (slaveAddr << 1);
 8002a74:	f107 030f 	add.w	r3, r7, #15
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	f887 3697 	strb.w	r3, [r7, #1687]	; 0x697
    cmd[0] = startAddress >> 8;
 8002a80:	f107 030c 	add.w	r3, r7, #12
 8002a84:	881b      	ldrh	r3, [r3, #0]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	f887 3694 	strb.w	r3, [r7, #1684]	; 0x694
    cmd[1] = startAddress & 0x00FF;
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	881b      	ldrh	r3, [r3, #0]
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	f887 3695 	strb.w	r3, [r7, #1685]	; 0x695
    
    I2CStop();
 8002a9c:	f000 fa12 	bl	8002ec4 <I2CStop>
    Wait(freqCnt);  
 8002aa0:	4b4f      	ldr	r3, [pc, #316]	; (8002be0 <MLX90640_I2CRead+0x1cc>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f000 f9c3 	bl	8002e30 <Wait>
    I2CStart();
 8002aaa:	f000 f9d9 	bl	8002e60 <I2CStart>
    Wait(freqCnt);
 8002aae:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <MLX90640_I2CRead+0x1cc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 f9bc 	bl	8002e30 <Wait>
    
    ack = I2CSendByte(sa)!=0;
 8002ab8:	f997 3697 	ldrsb.w	r3, [r7, #1687]	; 0x697
 8002abc:	4618      	mov	r0, r3
 8002abe:	f000 f8f7 	bl	8002cb0 <I2CSendByte>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	bf14      	ite	ne
 8002ac8:	2301      	movne	r3, #1
 8002aca:	2300      	moveq	r3, #0
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
    if(ack != 0)
 8002ad2:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <MLX90640_I2CRead+0xcc>
    {
        return -1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
 8002ade:	e079      	b.n	8002bd4 <MLX90640_I2CRead+0x1c0>
    } 
    
    ack = I2CSendByte(cmd[0])!=0;   
 8002ae0:	f897 3694 	ldrb.w	r3, [r7, #1684]	; 0x694
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f8e2 	bl	8002cb0 <I2CSendByte>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	bf14      	ite	ne
 8002af2:	2301      	movne	r3, #1
 8002af4:	2300      	moveq	r3, #0
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
    if(ack != 0)
 8002afc:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <MLX90640_I2CRead+0xf6>
    {
        return -1;
 8002b04:	f04f 33ff 	mov.w	r3, #4294967295
 8002b08:	e064      	b.n	8002bd4 <MLX90640_I2CRead+0x1c0>
    }
    
    ack = I2CSendByte(cmd[1])!=0;    
 8002b0a:	f897 3695 	ldrb.w	r3, [r7, #1685]	; 0x695
 8002b0e:	b25b      	sxtb	r3, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f8cd 	bl	8002cb0 <I2CSendByte>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
    if(ack != 0)
 8002b26:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d002      	beq.n	8002b34 <MLX90640_I2CRead+0x120>
    {
        return -1;
 8002b2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b32:	e04f      	b.n	8002bd4 <MLX90640_I2CRead+0x1c0>
    }  
    
    I2CRepeatedStart();
 8002b34:	f000 f9f4 	bl	8002f20 <I2CRepeatedStart>
       
    sa = sa | 0x01;
 8002b38:	f897 3697 	ldrb.w	r3, [r7, #1687]	; 0x697
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	f887 3697 	strb.w	r3, [r7, #1687]	; 0x697
    
    ack = I2CSendByte(sa);
 8002b44:	f997 3697 	ldrsb.w	r3, [r7, #1687]	; 0x697
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f8b1 	bl	8002cb0 <I2CSendByte>
 8002b4e:	f8c7 069c 	str.w	r0, [r7, #1692]	; 0x69c
    if(ack != 0)
 8002b52:	f8d7 369c 	ldr.w	r3, [r7, #1692]	; 0x69c
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d002      	beq.n	8002b60 <MLX90640_I2CRead+0x14c>
    {
        return -1;
 8002b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b5e:	e039      	b.n	8002bd4 <MLX90640_I2CRead+0x1c0>
    } 
        
    I2CReadBytes((nMemAddressRead << 1), i2cData);
 8002b60:	f107 030a 	add.w	r3, r7, #10
 8002b64:	881b      	ldrh	r3, [r3, #0]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	f107 0214 	add.w	r2, r7, #20
 8002b6c:	4611      	mov	r1, r2
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f8f4 	bl	8002d5c <I2CReadBytes>
              
    I2CStop();   
 8002b74:	f000 f9a6 	bl	8002ec4 <I2CStop>

    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8002b78:	2300      	movs	r3, #0
 8002b7a:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8002b7e:	e021      	b.n	8002bc4 <MLX90640_I2CRead+0x1b0>
    {
        i = cnt << 1;
 8002b80:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	f8c7 3698 	str.w	r3, [r7, #1688]	; 0x698
        *p++ = (int)i2cData[i]*256 + (int)i2cData[i+1];
 8002b8a:	f107 0214 	add.w	r2, r7, #20
 8002b8e:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8002b92:	4413      	add	r3, r2
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	021b      	lsls	r3, r3, #8
 8002b9a:	b299      	uxth	r1, r3
 8002b9c:	f8d7 3698 	ldr.w	r3, [r7, #1688]	; 0x698
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	f107 0214 	add.w	r2, r7, #20
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	f8d7 36a0 	ldr.w	r3, [r7, #1696]	; 0x6a0
 8002bae:	1c98      	adds	r0, r3, #2
 8002bb0:	f8c7 06a0 	str.w	r0, [r7, #1696]	; 0x6a0
 8002bb4:	440a      	add	r2, r1
 8002bb6:	b292      	uxth	r2, r2
 8002bb8:	801a      	strh	r2, [r3, #0]
    for(cnt=0; cnt < nMemAddressRead; cnt++)
 8002bba:	f8d7 36a4 	ldr.w	r3, [r7, #1700]	; 0x6a4
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8002bc4:	f107 030a 	add.w	r3, r7, #10
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	f8d7 26a4 	ldr.w	r2, [r7, #1700]	; 0x6a4
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	dbd6      	blt.n	8002b80 <MLX90640_I2CRead+0x16c>
    } 
    return 0;
 8002bd2:	2300      	movs	r3, #0
  
} 
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f207 67ac 	addw	r7, r7, #1708	; 0x6ac
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000000 	.word	0x20000000

08002be4 <MLX90640_I2CWrite>:
{
    freqCnt = freq>>1;
}

int MLX90640_I2CWrite(uint8_t slaveAddr, uint16_t writeAddress, uint16_t data)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b086      	sub	sp, #24
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	80bb      	strh	r3, [r7, #4]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	807b      	strh	r3, [r7, #2]
    uint8_t sa;
    int ack = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
    char cmd[4] = {0,0,0,0};
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
    static uint16_t dataCheck;
	int i;

    sa = (slaveAddr << 1);
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	005b      	lsls	r3, r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
    cmd[0] = writeAddress >> 8;
 8002c04:	88bb      	ldrh	r3, [r7, #4]
 8002c06:	0a1b      	lsrs	r3, r3, #8
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	723b      	strb	r3, [r7, #8]
    cmd[1] = writeAddress & 0x00FF;
 8002c0e:	88bb      	ldrh	r3, [r7, #4]
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	727b      	strb	r3, [r7, #9]
    cmd[2] = data >> 8;
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	0a1b      	lsrs	r3, r3, #8
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	72bb      	strb	r3, [r7, #10]
    cmd[3] = data & 0x00FF;
 8002c1e:	887b      	ldrh	r3, [r7, #2]
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	72fb      	strb	r3, [r7, #11]

    I2CStop();
 8002c24:	f000 f94e 	bl	8002ec4 <I2CStop>
    Wait(freqCnt);
 8002c28:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <MLX90640_I2CWrite+0xc4>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f000 f8ff 	bl	8002e30 <Wait>
    I2CStart();
 8002c32:	f000 f915 	bl	8002e60 <I2CStart>
    ack = I2CSendByte(sa);
 8002c36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f000 f838 	bl	8002cb0 <I2CSendByte>
 8002c40:	6138      	str	r0, [r7, #16]
    if (ack != 0x00)
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <MLX90640_I2CWrite+0x68>
    {
        return 1; 
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e029      	b.n	8002ca0 <MLX90640_I2CWrite+0xbc>
    }  
    
    for(i = 0; i<4; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]
 8002c50:	e012      	b.n	8002c78 <MLX90640_I2CWrite+0x94>
    {
        ack = I2CSendByte(cmd[i]);
 8002c52:	f107 0208 	add.w	r2, r7, #8
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	4413      	add	r3, r2
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	b25b      	sxtb	r3, r3
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 f826 	bl	8002cb0 <I2CSendByte>
 8002c64:	6138      	str	r0, [r7, #16]
    
        if (ack != 0x00)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <MLX90640_I2CWrite+0x8e>
        {
            return -1;
 8002c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c70:	e016      	b.n	8002ca0 <MLX90640_I2CWrite+0xbc>
    for(i = 0; i<4; i++)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	3301      	adds	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	dde9      	ble.n	8002c52 <MLX90640_I2CWrite+0x6e>
        }  
    }           
    I2CStop();   
 8002c7e:	f000 f921 	bl	8002ec4 <I2CStop>
    
    MLX90640_I2CRead(slaveAddr,writeAddress,1, &dataCheck);
 8002c82:	88b9      	ldrh	r1, [r7, #4]
 8002c84:	79f8      	ldrb	r0, [r7, #7]
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <MLX90640_I2CWrite+0xc8>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f7ff fec3 	bl	8002a14 <MLX90640_I2CRead>
    
    if ( dataCheck != data)
 8002c8e:	4b07      	ldr	r3, [pc, #28]	; (8002cac <MLX90640_I2CWrite+0xc8>)
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d002      	beq.n	8002c9e <MLX90640_I2CWrite+0xba>
    {
        return -2;
 8002c98:	f06f 0301 	mvn.w	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <MLX90640_I2CWrite+0xbc>
    }    
    
    return 0;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	20000000 	.word	0x20000000
 8002cac:	20000094 	.word	0x20000094

08002cb0 <I2CSendByte>:

int I2CSendByte(int8_t data)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
   int ack = 1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
   int8_t byte = data; 
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	75fb      	strb	r3, [r7, #23]
   int i;

   IIC_SDA_OUT();
 8002cc2:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <I2CSendByte+0xa4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <I2CSendByte+0xa4>)
 8002cc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ccc:	6013      	str	r3, [r2, #0]

   for(i=0;i<8;i++)
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	e02f      	b.n	8002d34 <I2CSendByte+0x84>
   {
       Wait(freqCnt);
 8002cd4:	4b20      	ldr	r3, [pc, #128]	; (8002d58 <I2CSendByte+0xa8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f8a9 	bl	8002e30 <Wait>
       
       if(byte & 0x80)
 8002cde:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	da04      	bge.n	8002cf0 <I2CSendByte+0x40>
       {
           SDA_HIGH;
 8002ce6:	4b1b      	ldr	r3, [pc, #108]	; (8002d54 <I2CSendByte+0xa4>)
 8002ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cec:	619a      	str	r2, [r3, #24]
 8002cee:	e003      	b.n	8002cf8 <I2CSendByte+0x48>
       }
       else
       {
           SDA_LOW;
 8002cf0:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <I2CSendByte+0xa4>)
 8002cf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cf6:	619a      	str	r2, [r3, #24]
       }
       Wait(freqCnt);
 8002cf8:	4b17      	ldr	r3, [pc, #92]	; (8002d58 <I2CSendByte+0xa8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f897 	bl	8002e30 <Wait>
       SCL_HIGH;
 8002d02:	4b14      	ldr	r3, [pc, #80]	; (8002d54 <I2CSendByte+0xa4>)
 8002d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d08:	619a      	str	r2, [r3, #24]
       Wait(freqCnt);
 8002d0a:	4b13      	ldr	r3, [pc, #76]	; (8002d58 <I2CSendByte+0xa8>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 f88e 	bl	8002e30 <Wait>
       Wait(freqCnt);
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <I2CSendByte+0xa8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 f889 	bl	8002e30 <Wait>
       SCL_LOW;
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <I2CSendByte+0xa4>)
 8002d20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d24:	619a      	str	r2, [r3, #24]
       byte = byte<<1;        
 8002d26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	75fb      	strb	r3, [r7, #23]
   for(i=0;i<8;i++)
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	3301      	adds	r3, #1
 8002d32:	613b      	str	r3, [r7, #16]
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	2b07      	cmp	r3, #7
 8002d38:	ddcc      	ble.n	8002cd4 <I2CSendByte+0x24>
   }    
   
   Wait(freqCnt);
 8002d3a:	4b07      	ldr	r3, [pc, #28]	; (8002d58 <I2CSendByte+0xa8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 f876 	bl	8002e30 <Wait>
   ack = I2CReceiveAck();
 8002d44:	f000 f986 	bl	8003054 <I2CReceiveAck>
 8002d48:	60f8      	str	r0, [r7, #12]
   
   return ack; 
 8002d4a:	68fb      	ldr	r3, [r7, #12]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	40020400 	.word	0x40020400
 8002d58:	20000000 	.word	0x20000000

08002d5c <I2CReadBytes>:

void I2CReadBytes(int nBytes, char *dataP)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
    char data;
	int i,j;

	IIC_SDA_IN();
 8002d66:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <I2CReadBytes+0xcc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a2f      	ldr	r2, [pc, #188]	; (8002e28 <I2CReadBytes+0xcc>)
 8002d6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002d70:	6013      	str	r3, [r2, #0]

    for(j=0;j<nBytes;j++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	e049      	b.n	8002e0c <I2CReadBytes+0xb0>
    {
        Wait(freqCnt);  
 8002d78:	4b2c      	ldr	r3, [pc, #176]	; (8002e2c <I2CReadBytes+0xd0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 f857 	bl	8002e30 <Wait>
        
        data = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	75fb      	strb	r3, [r7, #23]
        for(i=0;i<8;i++){
 8002d86:	2300      	movs	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	e02a      	b.n	8002de2 <I2CReadBytes+0x86>
            Wait(freqCnt);
 8002d8c:	4b27      	ldr	r3, [pc, #156]	; (8002e2c <I2CReadBytes+0xd0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f000 f84d 	bl	8002e30 <Wait>
            SCL_HIGH;
 8002d96:	4b24      	ldr	r3, [pc, #144]	; (8002e28 <I2CReadBytes+0xcc>)
 8002d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d9c:	619a      	str	r2, [r3, #24]
            Wait(freqCnt);
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <I2CReadBytes+0xd0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f000 f844 	bl	8002e30 <Wait>
            data = data<<1;
 8002da8:	7dfb      	ldrb	r3, [r7, #23]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
            if(sda != 0){
 8002dae:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <I2CReadBytes+0xcc>)
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <I2CReadBytes+0x64>
                data = data+1;  
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	75fb      	strb	r3, [r7, #23]
            }
            Wait(freqCnt);
 8002dc0:	4b1a      	ldr	r3, [pc, #104]	; (8002e2c <I2CReadBytes+0xd0>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f833 	bl	8002e30 <Wait>
            SCL_LOW;
 8002dca:	4b17      	ldr	r3, [pc, #92]	; (8002e28 <I2CReadBytes+0xcc>)
 8002dcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dd0:	619a      	str	r2, [r3, #24]
            Wait(freqCnt);
 8002dd2:	4b16      	ldr	r3, [pc, #88]	; (8002e2c <I2CReadBytes+0xd0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f82a 	bl	8002e30 <Wait>
        for(i=0;i<8;i++){
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	3301      	adds	r3, #1
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	2b07      	cmp	r3, #7
 8002de6:	ddd1      	ble.n	8002d8c <I2CReadBytes+0x30>
        }  
        
        if(j == (nBytes-1))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d102      	bne.n	8002df8 <I2CReadBytes+0x9c>
        {
            I2CSendNack();
 8002df2:	f000 f8fd 	bl	8002ff0 <I2CSendNack>
 8002df6:	e001      	b.n	8002dfc <I2CReadBytes+0xa0>
        }
        else
        {                  
            I2CSendACK();
 8002df8:	f000 f8c8 	bl	8002f8c <I2CSendACK>
        }
            
        *(dataP+j) = data; 
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	4413      	add	r3, r2
 8002e02:	7dfa      	ldrb	r2, [r7, #23]
 8002e04:	701a      	strb	r2, [r3, #0]
    for(j=0;j<nBytes;j++)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3301      	adds	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	dbb1      	blt.n	8002d78 <I2CReadBytes+0x1c>
    }
	    
    IIC_SDA_OUT();
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <I2CReadBytes+0xcc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a03      	ldr	r2, [pc, #12]	; (8002e28 <I2CReadBytes+0xcc>)
 8002e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e1e:	6013      	str	r3, [r2, #0]
}
 8002e20:	bf00      	nop
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40020400 	.word	0x40020400
 8002e2c:	20000000 	.word	0x20000000

08002e30 <Wait>:
     
void Wait(int freqCnt)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
    int TimeCnt;
    for(int i = 0; i<freqCnt; i++)
 8002e38:	2300      	movs	r3, #0
 8002e3a:	60bb      	str	r3, [r7, #8]
 8002e3c:	e005      	b.n	8002e4a <Wait+0x1a>
    {
        TimeCnt ++; 
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3301      	adds	r3, #1
 8002e42:	60fb      	str	r3, [r7, #12]
    for(int i = 0; i<freqCnt; i++)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	3301      	adds	r3, #1
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	dbf5      	blt.n	8002e3e <Wait+0xe>
    }    

 //    delay_us(1);
} 
 8002e52:	bf00      	nop
 8002e54:	bf00      	nop
 8002e56:	3714      	adds	r7, #20
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <I2CStart>:

void I2CStart(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
	IIC_SDA_OUT();
 8002e64:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <I2CStart+0x5c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a14      	ldr	r2, [pc, #80]	; (8002ebc <I2CStart+0x5c>)
 8002e6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e6e:	6013      	str	r3, [r2, #0]

    SDA_HIGH;
 8002e70:	4b12      	ldr	r3, [pc, #72]	; (8002ebc <I2CStart+0x5c>)
 8002e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e76:	619a      	str	r2, [r3, #24]
    SCL_HIGH;
 8002e78:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <I2CStart+0x5c>)
 8002e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e7e:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002e80:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <I2CStart+0x60>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff ffd3 	bl	8002e30 <Wait>
    Wait(freqCnt);
 8002e8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ec0 <I2CStart+0x60>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7ff ffce 	bl	8002e30 <Wait>
    SDA_LOW;
 8002e94:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <I2CStart+0x5c>)
 8002e96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e9a:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <I2CStart+0x60>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff ffc5 	bl	8002e30 <Wait>
    SCL_LOW;
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <I2CStart+0x5c>)
 8002ea8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eac:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);    
 8002eae:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <I2CStart+0x60>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff ffbc 	bl	8002e30 <Wait>
    
}
 8002eb8:	bf00      	nop
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40020400 	.word	0x40020400
 8002ec0:	20000000 	.word	0x20000000

08002ec4 <I2CStop>:

void I2CStop(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
	IIC_SDA_OUT();
 8002ec8:	4b13      	ldr	r3, [pc, #76]	; (8002f18 <I2CStop+0x54>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a12      	ldr	r2, [pc, #72]	; (8002f18 <I2CStop+0x54>)
 8002ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ed2:	6013      	str	r3, [r2, #0]

    SCL_LOW;
 8002ed4:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <I2CStop+0x54>)
 8002ed6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002eda:	619a      	str	r2, [r3, #24]
    SDA_LOW;
 8002edc:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <I2CStop+0x54>)
 8002ede:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ee2:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002ee4:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <I2CStop+0x58>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ffa1 	bl	8002e30 <Wait>
    SCL_HIGH;
 8002eee:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <I2CStop+0x54>)
 8002ef0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ef4:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002ef6:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <I2CStop+0x58>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7ff ff98 	bl	8002e30 <Wait>
    SDA_HIGH;
 8002f00:	4b05      	ldr	r3, [pc, #20]	; (8002f18 <I2CStop+0x54>)
 8002f02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f06:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <I2CStop+0x58>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7ff ff8f 	bl	8002e30 <Wait>
} 
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	40020400 	.word	0x40020400
 8002f1c:	20000000 	.word	0x20000000

08002f20 <I2CRepeatedStart>:

void I2CRepeatedStart(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
	IIC_SDA_OUT();
 8002f24:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <I2CRepeatedStart+0x64>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a16      	ldr	r2, [pc, #88]	; (8002f84 <I2CRepeatedStart+0x64>)
 8002f2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f2e:	6013      	str	r3, [r2, #0]

    SCL_LOW;
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <I2CRepeatedStart+0x64>)
 8002f32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f36:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002f38:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <I2CRepeatedStart+0x68>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff77 	bl	8002e30 <Wait>
    SDA_HIGH;
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <I2CRepeatedStart+0x64>)
 8002f44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f48:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <I2CRepeatedStart+0x68>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7ff ff6e 	bl	8002e30 <Wait>
    SCL_HIGH;
 8002f54:	4b0b      	ldr	r3, [pc, #44]	; (8002f84 <I2CRepeatedStart+0x64>)
 8002f56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f5a:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002f5c:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <I2CRepeatedStart+0x68>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff ff65 	bl	8002e30 <Wait>
    SDA_LOW;
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <I2CRepeatedStart+0x64>)
 8002f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6c:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002f6e:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <I2CRepeatedStart+0x68>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff ff5c 	bl	8002e30 <Wait>
    SCL_LOW;
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <I2CRepeatedStart+0x64>)
 8002f7a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f7e:	619a      	str	r2, [r3, #24]
           
}
 8002f80:	bf00      	nop
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40020400 	.word	0x40020400
 8002f88:	20000000 	.word	0x20000000

08002f8c <I2CSendACK>:

void I2CSendACK(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
	IIC_SDA_OUT();
 8002f90:	4b15      	ldr	r3, [pc, #84]	; (8002fe8 <I2CSendACK+0x5c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a14      	ldr	r2, [pc, #80]	; (8002fe8 <I2CSendACK+0x5c>)
 8002f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9a:	6013      	str	r3, [r2, #0]

    SDA_LOW;
 8002f9c:	4b12      	ldr	r3, [pc, #72]	; (8002fe8 <I2CSendACK+0x5c>)
 8002f9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fa2:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002fa4:	4b11      	ldr	r3, [pc, #68]	; (8002fec <I2CSendACK+0x60>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff41 	bl	8002e30 <Wait>
    SCL_HIGH;
 8002fae:	4b0e      	ldr	r3, [pc, #56]	; (8002fe8 <I2CSendACK+0x5c>)
 8002fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fb4:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <I2CSendACK+0x60>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff ff38 	bl	8002e30 <Wait>
    Wait(freqCnt);
 8002fc0:	4b0a      	ldr	r3, [pc, #40]	; (8002fec <I2CSendACK+0x60>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff ff33 	bl	8002e30 <Wait>
    SCL_LOW;
 8002fca:	4b07      	ldr	r3, [pc, #28]	; (8002fe8 <I2CSendACK+0x5c>)
 8002fcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fd0:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8002fd2:	4b06      	ldr	r3, [pc, #24]	; (8002fec <I2CSendACK+0x60>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7ff ff2a 	bl	8002e30 <Wait>
    SDA_HIGH;
 8002fdc:	4b02      	ldr	r3, [pc, #8]	; (8002fe8 <I2CSendACK+0x5c>)
 8002fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fe2:	619a      	str	r2, [r3, #24]
    
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	20000000 	.word	0x20000000

08002ff0 <I2CSendNack>:

void I2CSendNack(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	IIC_SDA_OUT();
 8002ff4:	4b15      	ldr	r3, [pc, #84]	; (800304c <I2CSendNack+0x5c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a14      	ldr	r2, [pc, #80]	; (800304c <I2CSendNack+0x5c>)
 8002ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffe:	6013      	str	r3, [r2, #0]

    SDA_HIGH;
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <I2CSendNack+0x5c>)
 8003002:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003006:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <I2CSendNack+0x60>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff ff0f 	bl	8002e30 <Wait>
    SCL_HIGH;
 8003012:	4b0e      	ldr	r3, [pc, #56]	; (800304c <I2CSendNack+0x5c>)
 8003014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003018:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 800301a:	4b0d      	ldr	r3, [pc, #52]	; (8003050 <I2CSendNack+0x60>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4618      	mov	r0, r3
 8003020:	f7ff ff06 	bl	8002e30 <Wait>
    Wait(freqCnt);
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <I2CSendNack+0x60>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff01 	bl	8002e30 <Wait>
    SCL_LOW;
 800302e:	4b07      	ldr	r3, [pc, #28]	; (800304c <I2CSendNack+0x5c>)
 8003030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003034:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <I2CSendNack+0x60>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff fef8 	bl	8002e30 <Wait>
    SDA_HIGH;   
 8003040:	4b02      	ldr	r3, [pc, #8]	; (800304c <I2CSendNack+0x5c>)
 8003042:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003046:	619a      	str	r2, [r3, #24]
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	40020400 	.word	0x40020400
 8003050:	20000000 	.word	0x20000000

08003054 <I2CReceiveAck>:

int I2CReceiveAck(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
    int ack;
    
	IIC_SDA_IN();
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <I2CReceiveAck+0x74>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a1a      	ldr	r2, [pc, #104]	; (80030c8 <I2CReceiveAck+0x74>)
 8003060:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003064:	6013      	str	r3, [r2, #0]

    Wait(freqCnt);
 8003066:	4b19      	ldr	r3, [pc, #100]	; (80030cc <I2CReceiveAck+0x78>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff fee0 	bl	8002e30 <Wait>
    SCL_HIGH;
 8003070:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <I2CReceiveAck+0x74>)
 8003072:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003076:	619a      	str	r2, [r3, #24]
    Wait(freqCnt);
 8003078:	4b14      	ldr	r3, [pc, #80]	; (80030cc <I2CReceiveAck+0x78>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff fed7 	bl	8002e30 <Wait>
    if(sda == 0)
 8003082:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <I2CReceiveAck+0x74>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800308a:	2b00      	cmp	r3, #0
 800308c:	d102      	bne.n	8003094 <I2CReceiveAck+0x40>
    {
        ack = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	e001      	b.n	8003098 <I2CReceiveAck+0x44>
    }
    else
    {
        ack = 1;
 8003094:	2301      	movs	r3, #1
 8003096:	607b      	str	r3, [r7, #4]
    }
    Wait(freqCnt);   
 8003098:	4b0c      	ldr	r3, [pc, #48]	; (80030cc <I2CReceiveAck+0x78>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fec7 	bl	8002e30 <Wait>
	
	IIC_SDA_OUT();     
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <I2CReceiveAck+0x74>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <I2CReceiveAck+0x74>)
 80030a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030ac:	6013      	str	r3, [r2, #0]
    SCL_LOW;
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <I2CReceiveAck+0x74>)
 80030b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80030b4:	619a      	str	r2, [r3, #24]
    SDA_LOW;
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <I2CReceiveAck+0x74>)
 80030b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80030bc:	619a      	str	r2, [r3, #24]
    
    return ack;    
 80030be:	687b      	ldr	r3, [r7, #4]
}  
 80030c0:	4618      	mov	r0, r3
 80030c2:	3708      	adds	r7, #8
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40020400 	.word	0x40020400
 80030cc:	20000000 	.word	0x20000000

080030d0 <uart_init>:
DMA_HandleTypeDef  UART2TxDMA_Handler;      //DMA Handle

//UART2 init
//bound:BaudRate
void uart_init(u32 bound)
{	
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]


	UART2_Handler.Instance = USART2;
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <uart_init+0x48>)
 80030da:	4a10      	ldr	r2, [pc, #64]	; (800311c <uart_init+0x4c>)
 80030dc:	601a      	str	r2, [r3, #0]
	UART2_Handler.Init.BaudRate = 115200;
 80030de:	4b0e      	ldr	r3, [pc, #56]	; (8003118 <uart_init+0x48>)
 80030e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80030e4:	605a      	str	r2, [r3, #4]
	UART2_Handler.Init.WordLength = UART_WORDLENGTH_8B;
 80030e6:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <uart_init+0x48>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	609a      	str	r2, [r3, #8]
	UART2_Handler.Init.StopBits = UART_STOPBITS_1;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <uart_init+0x48>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	60da      	str	r2, [r3, #12]
	UART2_Handler.Init.Parity = UART_PARITY_NONE;
 80030f2:	4b09      	ldr	r3, [pc, #36]	; (8003118 <uart_init+0x48>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	611a      	str	r2, [r3, #16]
	UART2_Handler.Init.Mode = UART_MODE_TX_RX;
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <uart_init+0x48>)
 80030fa:	220c      	movs	r2, #12
 80030fc:	615a      	str	r2, [r3, #20]
	UART2_Handler.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030fe:	4b06      	ldr	r3, [pc, #24]	; (8003118 <uart_init+0x48>)
 8003100:	2200      	movs	r2, #0
 8003102:	619a      	str	r2, [r3, #24]
	UART2_Handler.Init.OverSampling = UART_OVERSAMPLING_16;
 8003104:	4b04      	ldr	r3, [pc, #16]	; (8003118 <uart_init+0x48>)
 8003106:	2200      	movs	r2, #0
 8003108:	61da      	str	r2, [r3, #28]
	  if (HAL_UART_Init(&UART2_Handler) != HAL_OK)
 800310a:	4803      	ldr	r0, [pc, #12]	; (8003118 <uart_init+0x48>)
 800310c:	f001 fbf6 	bl	80048fc <HAL_UART_Init>
	  {

	  }
	//MYDMA_Config(DMA2_Stream7,DMA_CHANNEL_4);//Init DMA
	//HAL_DMA_Start(&UART2TxDMA_Handler,(u32)UsartBuff,(u32)&USART2->DR,SEND_BUF_SIZE);
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	20001318 	.word	0x20001318
 800311c:	40004400 	.word	0x40004400

08003120 <delay_ms>:
u8 fac_us;

__IO u16 ntime;	
							    
void delay_ms(u16 nms)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	4603      	mov	r3, r0
 8003128:	80fb      	strh	r3, [r7, #6]
   	  SysTick->LOAD = (u32)fac_ms*nms-1;
 800312a:	4b12      	ldr	r3, [pc, #72]	; (8003174 <delay_ms+0x54>)
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	461a      	mov	r2, r3
 8003130:	88fb      	ldrh	r3, [r7, #6]
 8003132:	fb03 f302 	mul.w	r3, r3, r2
 8003136:	4a10      	ldr	r2, [pc, #64]	; (8003178 <delay_ms+0x58>)
 8003138:	3b01      	subs	r3, #1
 800313a:	6053      	str	r3, [r2, #4]
	  SysTick->VAL = 1;
 800313c:	4b0e      	ldr	r3, [pc, #56]	; (8003178 <delay_ms+0x58>)
 800313e:	2201      	movs	r2, #1
 8003140:	609a      	str	r2, [r3, #8]
	  SysTick->CTRL |= BIT(0);//SysTick enable
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <delay_ms+0x58>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <delay_ms+0x58>)
 8003148:	f043 0301 	orr.w	r3, r3, #1
 800314c:	6013      	str	r3, [r2, #0]
	  while(!(SysTick->CTRL&(1<<16)));
 800314e:	bf00      	nop
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <delay_ms+0x58>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d0f9      	beq.n	8003150 <delay_ms+0x30>
	  SysTick->CTRL &=~BIT(0);//close SysTick
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <delay_ms+0x58>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a05      	ldr	r2, [pc, #20]	; (8003178 <delay_ms+0x58>)
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	6013      	str	r3, [r2, #0]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	200019c4 	.word	0x200019c4
 8003178:	e000e010 	.word	0xe000e010

0800317c <Delay_Init>:

void Delay_Init(u8 SYSCLK)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
     SysTick->CTRL &=~BIT(2);
 8003186:	4b11      	ldr	r3, [pc, #68]	; (80031cc <Delay_Init+0x50>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a10      	ldr	r2, [pc, #64]	; (80031cc <Delay_Init+0x50>)
 800318c:	f023 0304 	bic.w	r3, r3, #4
 8003190:	6013      	str	r3, [r2, #0]
	 SysTick->CTRL &=~BIT(1);
 8003192:	4b0e      	ldr	r3, [pc, #56]	; (80031cc <Delay_Init+0x50>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <Delay_Init+0x50>)
 8003198:	f023 0302 	bic.w	r3, r3, #2
 800319c:	6013      	str	r3, [r2, #0]
	 fac_us = SYSCLK/8;
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	4b0a      	ldr	r3, [pc, #40]	; (80031d0 <Delay_Init+0x54>)
 80031a6:	701a      	strb	r2, [r3, #0]
	 fac_ms = (u16)fac_us*1000;	 
 80031a8:	4b09      	ldr	r3, [pc, #36]	; (80031d0 <Delay_Init+0x54>)
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	461a      	mov	r2, r3
 80031b0:	0152      	lsls	r2, r2, #5
 80031b2:	1ad2      	subs	r2, r2, r3
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <Delay_Init+0x58>)
 80031be:	801a      	strh	r2, [r3, #0]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e010 	.word	0xe000e010
 80031d0:	200019c6 	.word	0x200019c6
 80031d4:	200019c4 	.word	0x200019c4

080031d8 <main>:
    HAL_UART_Transmit(&UART2_Handler, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
    return 1;
}

int main(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	f5ad 5d44 	sub.w	sp, sp, #12544	; 0x3100
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0

	static uint16_t eeMLX90640[832];
	uint16_t frame[834];
	float Ta,tr;
	float emissivity=0.95;
 80031e2:	4bb5      	ldr	r3, [pc, #724]	; (80034b8 <main+0x2e0>)
 80031e4:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 80031e8:	f102 020c 	add.w	r2, r2, #12
 80031ec:	6013      	str	r3, [r2, #0]
	static float mlx90640To[768];
	u16 i=0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 80031f4:	f102 0216 	add.w	r2, r2, #22
 80031f8:	8013      	strh	r3, [r2, #0]
	u32 CheckCode;

  All_Init();
 80031fa:	f000 f967 	bl	80034cc <All_Init>

	UsartBuff[0]=0x5A;
 80031fe:	4baf      	ldr	r3, [pc, #700]	; (80034bc <main+0x2e4>)
 8003200:	225a      	movs	r2, #90	; 0x5a
 8003202:	701a      	strb	r2, [r3, #0]
	UsartBuff[1]=0x5A;
 8003204:	4bad      	ldr	r3, [pc, #692]	; (80034bc <main+0x2e4>)
 8003206:	225a      	movs	r2, #90	; 0x5a
 8003208:	705a      	strb	r2, [r3, #1]
	UsartBuff[2]=0x02;
 800320a:	4bac      	ldr	r3, [pc, #688]	; (80034bc <main+0x2e4>)
 800320c:	2202      	movs	r2, #2
 800320e:	709a      	strb	r2, [r3, #2]
	UsartBuff[3]=0x06;
 8003210:	4baa      	ldr	r3, [pc, #680]	; (80034bc <main+0x2e4>)
 8003212:	2206      	movs	r2, #6
 8003214:	70da      	strb	r2, [r3, #3]

	MLX90640_SetRefreshRate(MLX_I2C_ADDR, RefreshRate);
 8003216:	2103      	movs	r1, #3
 8003218:	2033      	movs	r0, #51	; 0x33
 800321a:	f7fd ff0f 	bl	800103c <MLX90640_SetRefreshRate>
	MLX90640_SetChessMode(MLX_I2C_ADDR);
 800321e:	2033      	movs	r0, #51	; 0x33
 8003220:	f7fd ff3b 	bl	800109a <MLX90640_SetChessMode>
	paramsMLX90640 mlx90640;
	MLX90640_DumpEE(MLX_I2C_ADDR, eeMLX90640);
 8003224:	49a6      	ldr	r1, [pc, #664]	; (80034c0 <main+0x2e8>)
 8003226:	2033      	movs	r0, #51	; 0x33
 8003228:	f7fd fe26 	bl	8000e78 <MLX90640_DumpEE>
	MLX90640_ExtractParameters(eeMLX90640, &mlx90640);
 800322c:	f107 0318 	add.w	r3, r7, #24
 8003230:	3b08      	subs	r3, #8
 8003232:	4619      	mov	r1, r3
 8003234:	48a2      	ldr	r0, [pc, #648]	; (80034c0 <main+0x2e8>)
 8003236:	f7fd feb7 	bl	8000fa8 <MLX90640_ExtractParameters>

	for(i=0;i<3;i++)//Lose the start frame
 800323a:	2300      	movs	r3, #0
 800323c:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 8003240:	f102 0216 	add.w	r2, r2, #22
 8003244:	8013      	strh	r3, [r2, #0]
 8003246:	e014      	b.n	8003272 <main+0x9a>
	{
			MLX90640_GetFrameData(MLX_I2C_ADDR, frame);
 8003248:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 800324c:	4619      	mov	r1, r3
 800324e:	2033      	movs	r0, #51	; 0x33
 8003250:	f7fd fe25 	bl	8000e9e <MLX90640_GetFrameData>
			delay_ms(500);
 8003254:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003258:	f7ff ff62 	bl	8003120 <delay_ms>
	for(i=0;i<3;i++)//Lose the start frame
 800325c:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 8003260:	f103 0316 	add.w	r3, r3, #22
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 800326c:	f102 0216 	add.w	r2, r2, #22
 8003270:	8013      	strh	r3, [r2, #0]
 8003272:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 8003276:	f103 0316 	add.w	r3, r3, #22
 800327a:	881b      	ldrh	r3, [r3, #0]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d9e3      	bls.n	8003248 <main+0x70>
	//HAL_UART_Transmit_DMA(&UART2_Handler,UsartBuff,SEND_BUF_SIZE);//start DMA transfer
	char aaa[10];
  while (1)
  {

			MLX90640_GetFrameData(MLX_I2C_ADDR, frame);
 8003280:	f507 532a 	add.w	r3, r7, #10880	; 0x2a80
 8003284:	4619      	mov	r1, r3
 8003286:	2033      	movs	r0, #51	; 0x33
 8003288:	f7fd fe09 	bl	8000e9e <MLX90640_GetFrameData>
			Ta = MLX90640_GetTa(frame, &mlx90640);
 800328c:	f107 0318 	add.w	r3, r7, #24
 8003290:	3b08      	subs	r3, #8
 8003292:	f507 522a 	add.w	r2, r7, #10880	; 0x2a80
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f7fd ffa7 	bl	80011ec <MLX90640_GetTa>
 800329e:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 80032a2:	f103 0308 	add.w	r3, r3, #8
 80032a6:	ed83 0a00 	vstr	s0, [r3]
			tr = Ta - TA_SHIFT;
 80032aa:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 80032ae:	f103 0308 	add.w	r3, r3, #8
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80032ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032be:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 80032c2:	f103 0304 	add.w	r3, r3, #4
 80032c6:	edc3 7a00 	vstr	s15, [r3]
			MLX90640_CalculateTo(frame, &mlx90640, emissivity, tr, mlx90640To);
 80032ca:	f107 0318 	add.w	r3, r7, #24
 80032ce:	3b08      	subs	r3, #8
 80032d0:	f507 502a 	add.w	r0, r7, #10880	; 0x2a80
 80032d4:	4a7b      	ldr	r2, [pc, #492]	; (80034c4 <main+0x2ec>)
 80032d6:	f507 5144 	add.w	r1, r7, #12544	; 0x3100
 80032da:	f101 0104 	add.w	r1, r1, #4
 80032de:	edd1 0a00 	vldr	s1, [r1]
 80032e2:	f507 5144 	add.w	r1, r7, #12544	; 0x3100
 80032e6:	f101 010c 	add.w	r1, r1, #12
 80032ea:	ed91 0a00 	vldr	s0, [r1]
 80032ee:	4619      	mov	r1, r3
 80032f0:	f002 fd42 	bl	8005d78 <MLX90640_CalculateTo>

			CheckCode=0x5A5A;
 80032f4:	f645 235a 	movw	r3, #23130	; 0x5a5a
 80032f8:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 80032fc:	f102 0210 	add.w	r2, r2, #16
 8003300:	6013      	str	r3, [r2, #0]
			CheckCode+=0x0602;
 8003302:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 8003306:	f103 0310 	add.w	r3, r3, #16
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f203 6302 	addw	r3, r3, #1538	; 0x602
 8003310:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 8003314:	f102 0210 	add.w	r2, r2, #16
 8003318:	6013      	str	r3, [r2, #0]
			for(i=0;i<768;i++)
 800331a:	2300      	movs	r3, #0
 800331c:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 8003320:	f102 0216 	add.w	r2, r2, #22
 8003324:	8013      	strh	r3, [r2, #0]
 8003326:	e065      	b.n	80033f4 <main+0x21c>
			{
					UsartBuff[i*2+4]= (u16)(mlx90640To[i]*100)&0xFF;
 8003328:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 800332c:	f103 0316 	add.w	r3, r3, #22
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	4a64      	ldr	r2, [pc, #400]	; (80034c4 <main+0x2ec>)
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	edd3 7a00 	vldr	s15, [r3]
 800333c:	ed9f 7a62 	vldr	s14, [pc, #392]	; 80034c8 <main+0x2f0>
 8003340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003348:	ee17 3a90 	vmov	r3, s15
 800334c:	b29a      	uxth	r2, r3
 800334e:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 8003352:	f103 0316 	add.w	r3, r3, #22
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	3302      	adds	r3, #2
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	b2d1      	uxtb	r1, r2
 800335e:	4a57      	ldr	r2, [pc, #348]	; (80034bc <main+0x2e4>)
 8003360:	54d1      	strb	r1, [r2, r3]
					UsartBuff[i*2+5]= ((u16)(mlx90640To[i]*100)>>8)&0xFF;
 8003362:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 8003366:	f103 0316 	add.w	r3, r3, #22
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	4a55      	ldr	r2, [pc, #340]	; (80034c4 <main+0x2ec>)
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80034c8 <main+0x2f0>
 800337a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800337e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003382:	ee17 3a90 	vmov	r3, s15
 8003386:	b29b      	uxth	r3, r3
 8003388:	0a1b      	lsrs	r3, r3, #8
 800338a:	b29a      	uxth	r2, r3
 800338c:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 8003390:	f103 0316 	add.w	r3, r3, #22
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	3305      	adds	r3, #5
 800339a:	b2d1      	uxtb	r1, r2
 800339c:	4a47      	ldr	r2, [pc, #284]	; (80034bc <main+0x2e4>)
 800339e:	54d1      	strb	r1, [r2, r3]
					CheckCode+=(u16)(mlx90640To[i]*100);
 80033a0:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 80033a4:	f103 0316 	add.w	r3, r3, #22
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	4a46      	ldr	r2, [pc, #280]	; (80034c4 <main+0x2ec>)
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	edd3 7a00 	vldr	s15, [r3]
 80033b4:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80034c8 <main+0x2f0>
 80033b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033c0:	ee17 3a90 	vmov	r3, s15
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 80033cc:	f103 0310 	add.w	r3, r3, #16
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4413      	add	r3, r2
 80033d4:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 80033d8:	f102 0210 	add.w	r2, r2, #16
 80033dc:	6013      	str	r3, [r2, #0]
			for(i=0;i<768;i++)
 80033de:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 80033e2:	f103 0316 	add.w	r3, r3, #22
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	3301      	adds	r3, #1
 80033ea:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 80033ee:	f102 0216 	add.w	r2, r2, #22
 80033f2:	8013      	strh	r3, [r2, #0]
 80033f4:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 80033f8:	f103 0316 	add.w	r3, r3, #22
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003402:	d391      	bcc.n	8003328 <main+0x150>

			}

			UsartBuff[1540]= (u16)(Ta*100)&0xFF;
 8003404:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 8003408:	f103 0308 	add.w	r3, r3, #8
 800340c:	edd3 7a00 	vldr	s15, [r3]
 8003410:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 80034c8 <main+0x2f0>
 8003414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800341c:	ee17 3a90 	vmov	r3, s15
 8003420:	b29b      	uxth	r3, r3
 8003422:	b2da      	uxtb	r2, r3
 8003424:	4b25      	ldr	r3, [pc, #148]	; (80034bc <main+0x2e4>)
 8003426:	f883 2604 	strb.w	r2, [r3, #1540]	; 0x604
			UsartBuff[1541]= ((u16)(Ta*100)>>8)&0xFF;
 800342a:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 800342e:	f103 0308 	add.w	r3, r3, #8
 8003432:	edd3 7a00 	vldr	s15, [r3]
 8003436:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80034c8 <main+0x2f0>
 800343a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800343e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003442:	ee17 3a90 	vmov	r3, s15
 8003446:	b29b      	uxth	r3, r3
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	b29b      	uxth	r3, r3
 800344c:	b2da      	uxtb	r2, r3
 800344e:	4b1b      	ldr	r3, [pc, #108]	; (80034bc <main+0x2e4>)
 8003450:	f883 2605 	strb.w	r2, [r3, #1541]	; 0x605
			CheckCode+=(u16)(Ta*100);
 8003454:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 8003458:	f103 0308 	add.w	r3, r3, #8
 800345c:	edd3 7a00 	vldr	s15, [r3]
 8003460:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80034c8 <main+0x2f0>
 8003464:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800346c:	ee17 3a90 	vmov	r3, s15
 8003470:	b29b      	uxth	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 8003478:	f103 0310 	add.w	r3, r3, #16
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4413      	add	r3, r2
 8003480:	f507 5244 	add.w	r2, r7, #12544	; 0x3100
 8003484:	f102 0210 	add.w	r2, r2, #16
 8003488:	6013      	str	r3, [r2, #0]
			UsartBuff[1542]= (u16)CheckCode&0xFF;
 800348a:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 800348e:	f103 0310 	add.w	r3, r3, #16
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	b2da      	uxtb	r2, r3
 8003496:	4b09      	ldr	r3, [pc, #36]	; (80034bc <main+0x2e4>)
 8003498:	f883 2606 	strb.w	r2, [r3, #1542]	; 0x606
			UsartBuff[1543]= ((u16)CheckCode>>8)&0xFF;
 800349c:	f507 5344 	add.w	r3, r7, #12544	; 0x3100
 80034a0:	f103 0310 	add.w	r3, r3, #16
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	0a1b      	lsrs	r3, r3, #8
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	4b03      	ldr	r3, [pc, #12]	; (80034bc <main+0x2e4>)
 80034b0:	f883 2607 	strb.w	r2, [r3, #1543]	; 0x607
			MLX90640_GetFrameData(MLX_I2C_ADDR, frame);
 80034b4:	e6e4      	b.n	8003280 <main+0xa8>
 80034b6:	bf00      	nop
 80034b8:	3f733333 	.word	0x3f733333
 80034bc:	200013bc 	.word	0x200013bc
 80034c0:	20000098 	.word	0x20000098
 80034c4:	20000718 	.word	0x20000718
 80034c8:	42c80000 	.word	0x42c80000

080034cc <All_Init>:

  }
}

void All_Init(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
	HAL_Init();
 80034d0:	f000 f9de 	bl	8003890 <HAL_Init>
  SystemClock_Config();
 80034d4:	f000 f80c 	bl	80034f0 <SystemClock_Config>
	Delay_Init(84);
 80034d8:	2054      	movs	r0, #84	; 0x54
 80034da:	f7ff fe4f 	bl	800317c <Delay_Init>
  MX_GPIO_Init();
 80034de:	f000 f87d 	bl	80035dc <MX_GPIO_Init>
	uart_init(115200);
 80034e2:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 80034e6:	f7ff fdf3 	bl	80030d0 <uart_init>

}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
	...

080034f0 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b094      	sub	sp, #80	; 0x50
 80034f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034f6:	2300      	movs	r3, #0
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	4b34      	ldr	r3, [pc, #208]	; (80035cc <SystemClock_Config+0xdc>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	4a33      	ldr	r2, [pc, #204]	; (80035cc <SystemClock_Config+0xdc>)
 8003500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003504:	6413      	str	r3, [r2, #64]	; 0x40
 8003506:	4b31      	ldr	r3, [pc, #196]	; (80035cc <SystemClock_Config+0xdc>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003512:	2300      	movs	r3, #0
 8003514:	603b      	str	r3, [r7, #0]
 8003516:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <SystemClock_Config+0xe0>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800351e:	4a2c      	ldr	r2, [pc, #176]	; (80035d0 <SystemClock_Config+0xe0>)
 8003520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4b2a      	ldr	r3, [pc, #168]	; (80035d0 <SystemClock_Config+0xe0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003532:	2301      	movs	r3, #1
 8003534:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800353a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800353c:	2302      	movs	r3, #2
 800353e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003540:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003544:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003546:	2304      	movs	r3, #4
 8003548:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 84;
 800354a:	2354      	movs	r3, #84	; 0x54
 800354c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800354e:	2302      	movs	r3, #2
 8003550:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003552:	2304      	movs	r3, #4
 8003554:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003556:	f107 031c 	add.w	r3, r7, #28
 800355a:	4618      	mov	r0, r3
 800355c:	f000 ff30 	bl	80043c0 <HAL_RCC_OscConfig>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003566:	217f      	movs	r1, #127	; 0x7f
 8003568:	481a      	ldr	r0, [pc, #104]	; (80035d4 <SystemClock_Config+0xe4>)
 800356a:	f000 f881 	bl	8003670 <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800356e:	230f      	movs	r3, #15
 8003570:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003572:	2302      	movs	r3, #2
 8003574:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003576:	2300      	movs	r3, #0
 8003578:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800357a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800357e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003580:	2300      	movs	r3, #0
 8003582:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003584:	f107 0308 	add.w	r3, r7, #8
 8003588:	2102      	movs	r1, #2
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fca2 	bl	8003ed4 <HAL_RCC_ClockConfig>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <SystemClock_Config+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003596:	218d      	movs	r1, #141	; 0x8d
 8003598:	480e      	ldr	r0, [pc, #56]	; (80035d4 <SystemClock_Config+0xe4>)
 800359a:	f000 f869 	bl	8003670 <_Error_Handler>
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800359e:	f000 fd7f 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80035a2:	4603      	mov	r3, r0
 80035a4:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <SystemClock_Config+0xe8>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 faba 	bl	8003b26 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80035b2:	2004      	movs	r0, #4
 80035b4:	f000 fac4 	bl	8003b40 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2100      	movs	r1, #0
 80035bc:	f04f 30ff 	mov.w	r0, #4294967295
 80035c0:	f000 fa95 	bl	8003aee <HAL_NVIC_SetPriority>
}
 80035c4:	bf00      	nop
 80035c6:	3750      	adds	r7, #80	; 0x50
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40023800 	.word	0x40023800
 80035d0:	40007000 	.word	0x40007000
 80035d4:	08006628 	.word	0x08006628
 80035d8:	10624dd3 	.word	0x10624dd3

080035dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	4b20      	ldr	r3, [pc, #128]	; (8003668 <MX_GPIO_Init+0x8c>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a1f      	ldr	r2, [pc, #124]	; (8003668 <MX_GPIO_Init+0x8c>)
 80035ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b1d      	ldr	r3, [pc, #116]	; (8003668 <MX_GPIO_Init+0x8c>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fa:	60bb      	str	r3, [r7, #8]
 80035fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	4b19      	ldr	r3, [pc, #100]	; (8003668 <MX_GPIO_Init+0x8c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	4a18      	ldr	r2, [pc, #96]	; (8003668 <MX_GPIO_Init+0x8c>)
 8003608:	f043 0301 	orr.w	r3, r3, #1
 800360c:	6313      	str	r3, [r2, #48]	; 0x30
 800360e:	4b16      	ldr	r3, [pc, #88]	; (8003668 <MX_GPIO_Init+0x8c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4b12      	ldr	r3, [pc, #72]	; (8003668 <MX_GPIO_Init+0x8c>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a11      	ldr	r2, [pc, #68]	; (8003668 <MX_GPIO_Init+0x8c>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <MX_GPIO_Init+0x8c>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_SET);
 8003636:	2201      	movs	r2, #1
 8003638:	f44f 7140 	mov.w	r1, #768	; 0x300
 800363c:	480b      	ldr	r0, [pc, #44]	; (800366c <MX_GPIO_Init+0x90>)
 800363e:	f000 fc2f 	bl	8003ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003648:	2301      	movs	r3, #1
 800364a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800364c:	2301      	movs	r3, #1
 800364e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003650:	2301      	movs	r3, #1
 8003652:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003654:	f107 030c 	add.w	r3, r7, #12
 8003658:	4619      	mov	r1, r3
 800365a:	4804      	ldr	r0, [pc, #16]	; (800366c <MX_GPIO_Init+0x90>)
 800365c:	f000 fa8c 	bl	8003b78 <HAL_GPIO_Init>
}
 8003660:	bf00      	nop
 8003662:	3720      	adds	r7, #32
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}
 8003668:	40023800 	.word	0x40023800
 800366c:	40020400 	.word	0x40020400

08003670 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 800367a:	e7fe      	b.n	800367a <_Error_Handler+0xa>

0800367c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	607b      	str	r3, [r7, #4]
 8003686:	4b10      	ldr	r3, [pc, #64]	; (80036c8 <HAL_MspInit+0x4c>)
 8003688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368a:	4a0f      	ldr	r2, [pc, #60]	; (80036c8 <HAL_MspInit+0x4c>)
 800368c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003690:	6453      	str	r3, [r2, #68]	; 0x44
 8003692:	4b0d      	ldr	r3, [pc, #52]	; (80036c8 <HAL_MspInit+0x4c>)
 8003694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003696:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800369e:	2300      	movs	r3, #0
 80036a0:	603b      	str	r3, [r7, #0]
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_MspInit+0x4c>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a08      	ldr	r2, [pc, #32]	; (80036c8 <HAL_MspInit+0x4c>)
 80036a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_MspInit+0x4c>)
 80036b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800

080036cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08c      	sub	sp, #48	; 0x30
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036d4:	f107 031c 	add.w	r3, r7, #28
 80036d8:	2200      	movs	r2, #0
 80036da:	601a      	str	r2, [r3, #0]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	609a      	str	r2, [r3, #8]
 80036e0:	60da      	str	r2, [r3, #12]
 80036e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <HAL_UART_MspInit+0xe8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d12d      	bne.n	800374a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80036ee:	2300      	movs	r3, #0
 80036f0:	61bb      	str	r3, [r7, #24]
 80036f2:	4b31      	ldr	r3, [pc, #196]	; (80037b8 <HAL_UART_MspInit+0xec>)
 80036f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f6:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <HAL_UART_MspInit+0xec>)
 80036f8:	f043 0310 	orr.w	r3, r3, #16
 80036fc:	6453      	str	r3, [r2, #68]	; 0x44
 80036fe:	4b2e      	ldr	r3, [pc, #184]	; (80037b8 <HAL_UART_MspInit+0xec>)
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	61bb      	str	r3, [r7, #24]
 8003708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	4b2a      	ldr	r3, [pc, #168]	; (80037b8 <HAL_UART_MspInit+0xec>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003712:	4a29      	ldr	r2, [pc, #164]	; (80037b8 <HAL_UART_MspInit+0xec>)
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	6313      	str	r3, [r2, #48]	; 0x30
 800371a:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <HAL_UART_MspInit+0xec>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	617b      	str	r3, [r7, #20]
 8003724:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003726:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800372a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372c:	2302      	movs	r3, #2
 800372e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003730:	2300      	movs	r3, #0
 8003732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003734:	2303      	movs	r3, #3
 8003736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003738:	2307      	movs	r3, #7
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800373c:	f107 031c 	add.w	r3, r7, #28
 8003740:	4619      	mov	r1, r3
 8003742:	481e      	ldr	r0, [pc, #120]	; (80037bc <HAL_UART_MspInit+0xf0>)
 8003744:	f000 fa18 	bl	8003b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003748:	e030      	b.n	80037ac <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a1c      	ldr	r2, [pc, #112]	; (80037c0 <HAL_UART_MspInit+0xf4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d12b      	bne.n	80037ac <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
 8003758:	4b17      	ldr	r3, [pc, #92]	; (80037b8 <HAL_UART_MspInit+0xec>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <HAL_UART_MspInit+0xec>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003762:	6413      	str	r3, [r2, #64]	; 0x40
 8003764:	4b14      	ldr	r3, [pc, #80]	; (80037b8 <HAL_UART_MspInit+0xec>)
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <HAL_UART_MspInit+0xec>)
 8003776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003778:	4a0f      	ldr	r2, [pc, #60]	; (80037b8 <HAL_UART_MspInit+0xec>)
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	6313      	str	r3, [r2, #48]	; 0x30
 8003780:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <HAL_UART_MspInit+0xec>)
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800378c:	230c      	movs	r3, #12
 800378e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003790:	2302      	movs	r3, #2
 8003792:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003794:	2300      	movs	r3, #0
 8003796:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003798:	2303      	movs	r3, #3
 800379a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800379c:	2307      	movs	r3, #7
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a0:	f107 031c 	add.w	r3, r7, #28
 80037a4:	4619      	mov	r1, r3
 80037a6:	4805      	ldr	r0, [pc, #20]	; (80037bc <HAL_UART_MspInit+0xf0>)
 80037a8:	f000 f9e6 	bl	8003b78 <HAL_GPIO_Init>
}
 80037ac:	bf00      	nop
 80037ae:	3730      	adds	r7, #48	; 0x30
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	40011000 	.word	0x40011000
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40020000 	.word	0x40020000
 80037c0:	40004400 	.word	0x40004400

080037c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037c4:	b480      	push	{r7}
 80037c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037c8:	e7fe      	b.n	80037c8 <NMI_Handler+0x4>

080037ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037ca:	b480      	push	{r7}
 80037cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037ce:	e7fe      	b.n	80037ce <HardFault_Handler+0x4>

080037d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037d4:	e7fe      	b.n	80037d4 <MemManage_Handler+0x4>

080037d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037d6:	b480      	push	{r7}
 80037d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037da:	e7fe      	b.n	80037da <BusFault_Handler+0x4>

080037dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e0:	e7fe      	b.n	80037e0 <UsageFault_Handler+0x4>

080037e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037e6:	bf00      	nop
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80037fe:	b480      	push	{r7}
 8003800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003802:	bf00      	nop
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003810:	f000 f890 	bl	8003934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}

08003818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800381c:	4b06      	ldr	r3, [pc, #24]	; (8003838 <SystemInit+0x20>)
 800381e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003822:	4a05      	ldr	r2, [pc, #20]	; (8003838 <SystemInit+0x20>)
 8003824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800382c:	bf00      	nop
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800383c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003874 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003842:	490e      	ldr	r1, [pc, #56]	; (800387c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003844:	4a0e      	ldr	r2, [pc, #56]	; (8003880 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003846:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003848:	e002      	b.n	8003850 <LoopCopyDataInit>

0800384a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800384a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800384c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800384e:	3304      	adds	r3, #4

08003850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003854:	d3f9      	bcc.n	800384a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003858:	4c0b      	ldr	r4, [pc, #44]	; (8003888 <LoopFillZerobss+0x26>)
  movs r3, #0
 800385a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800385c:	e001      	b.n	8003862 <LoopFillZerobss>

0800385e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800385e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003860:	3204      	adds	r2, #4

08003862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003864:	d3fb      	bcc.n	800385e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003866:	f7ff ffd7 	bl	8003818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800386a:	f001 fa63 	bl	8004d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800386e:	f7ff fcb3 	bl	80031d8 <main>
  bx  lr    
 8003872:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800387c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003880:	080066a8 	.word	0x080066a8
  ldr r2, =_sbss
 8003884:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003888:	200019d0 	.word	0x200019d0

0800388c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800388c:	e7fe      	b.n	800388c <ADC_IRQHandler>
	...

08003890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <HAL_Init+0x40>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <HAL_Init+0x40>)
 800389a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800389e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80038a0:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_Init+0x40>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <HAL_Init+0x40>)
 80038a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80038ac:	4b08      	ldr	r3, [pc, #32]	; (80038d0 <HAL_Init+0x40>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a07      	ldr	r2, [pc, #28]	; (80038d0 <HAL_Init+0x40>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038b8:	2003      	movs	r0, #3
 80038ba:	f000 f90d 	bl	8003ad8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80038be:	200f      	movs	r0, #15
 80038c0:	f000 f808 	bl	80038d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80038c4:	f7ff feda 	bl	800367c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023c00 	.word	0x40023c00

080038d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80038dc:	4b12      	ldr	r3, [pc, #72]	; (8003928 <HAL_InitTick+0x54>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b12      	ldr	r3, [pc, #72]	; (800392c <HAL_InitTick+0x58>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	4619      	mov	r1, r3
 80038e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80038ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f917 	bl	8003b26 <HAL_SYSTICK_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e00e      	b.n	8003920 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b0f      	cmp	r3, #15
 8003906:	d80a      	bhi.n	800391e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003908:	2200      	movs	r2, #0
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	f000 f8ed 	bl	8003aee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003914:	4a06      	ldr	r2, [pc, #24]	; (8003930 <HAL_InitTick+0x5c>)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	e000      	b.n	8003920 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
}
 8003920:	4618      	mov	r0, r3
 8003922:	3708      	adds	r7, #8
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20000004 	.word	0x20000004
 800392c:	2000000c 	.word	0x2000000c
 8003930:	20000008 	.word	0x20000008

08003934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003934:	b480      	push	{r7}
 8003936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003938:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_IncTick+0x20>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_IncTick+0x24>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4413      	add	r3, r2
 8003944:	4a04      	ldr	r2, [pc, #16]	; (8003958 <HAL_IncTick+0x24>)
 8003946:	6013      	str	r3, [r2, #0]
}
 8003948:	bf00      	nop
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	2000000c 	.word	0x2000000c
 8003958:	200019cc 	.word	0x200019cc

0800395c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return uwTick;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_GetTick+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	200019cc 	.word	0x200019cc

08003974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003974:	b480      	push	{r7}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003990:	4013      	ands	r3, r2
 8003992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800399c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80039a6:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <__NVIC_SetPriorityGrouping+0x44>)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	60d3      	str	r3, [r2, #12]
}
 80039ac:	bf00      	nop
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr
 80039b8:	e000ed00 	.word	0xe000ed00

080039bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80039c0:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <__NVIC_GetPriorityGrouping+0x18>)
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	0a1b      	lsrs	r3, r3, #8
 80039c6:	f003 0307 	and.w	r3, r3, #7
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	e000ed00 	.word	0xe000ed00

080039d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	4603      	mov	r3, r0
 80039e0:	6039      	str	r1, [r7, #0]
 80039e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	db0a      	blt.n	8003a02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	490c      	ldr	r1, [pc, #48]	; (8003a24 <__NVIC_SetPriority+0x4c>)
 80039f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f6:	0112      	lsls	r2, r2, #4
 80039f8:	b2d2      	uxtb	r2, r2
 80039fa:	440b      	add	r3, r1
 80039fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a00:	e00a      	b.n	8003a18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	4908      	ldr	r1, [pc, #32]	; (8003a28 <__NVIC_SetPriority+0x50>)
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	3b04      	subs	r3, #4
 8003a10:	0112      	lsls	r2, r2, #4
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	440b      	add	r3, r1
 8003a16:	761a      	strb	r2, [r3, #24]
}
 8003a18:	bf00      	nop
 8003a1a:	370c      	adds	r7, #12
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a22:	4770      	bx	lr
 8003a24:	e000e100 	.word	0xe000e100
 8003a28:	e000ed00 	.word	0xe000ed00

08003a2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b089      	sub	sp, #36	; 0x24
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f1c3 0307 	rsb	r3, r3, #7
 8003a46:	2b04      	cmp	r3, #4
 8003a48:	bf28      	it	cs
 8003a4a:	2304      	movcs	r3, #4
 8003a4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	3304      	adds	r3, #4
 8003a52:	2b06      	cmp	r3, #6
 8003a54:	d902      	bls.n	8003a5c <NVIC_EncodePriority+0x30>
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	3b03      	subs	r3, #3
 8003a5a:	e000      	b.n	8003a5e <NVIC_EncodePriority+0x32>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	401a      	ands	r2, r3
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a74:	f04f 31ff 	mov.w	r1, #4294967295
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a7e:	43d9      	mvns	r1, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a84:	4313      	orrs	r3, r2
         );
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3724      	adds	r7, #36	; 0x24
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003aa4:	d301      	bcc.n	8003aaa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00f      	b.n	8003aca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	; (8003ad4 <SysTick_Config+0x40>)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ab2:	210f      	movs	r1, #15
 8003ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab8:	f7ff ff8e 	bl	80039d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003abc:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <SysTick_Config+0x40>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ac2:	4b04      	ldr	r3, [pc, #16]	; (8003ad4 <SysTick_Config+0x40>)
 8003ac4:	2207      	movs	r2, #7
 8003ac6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	e000e010 	.word	0xe000e010

08003ad8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ff47 	bl	8003974 <__NVIC_SetPriorityGrouping>
}
 8003ae6:	bf00      	nop
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b086      	sub	sp, #24
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	4603      	mov	r3, r0
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	607a      	str	r2, [r7, #4]
 8003afa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003b00:	f7ff ff5c 	bl	80039bc <__NVIC_GetPriorityGrouping>
 8003b04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68b9      	ldr	r1, [r7, #8]
 8003b0a:	6978      	ldr	r0, [r7, #20]
 8003b0c:	f7ff ff8e 	bl	8003a2c <NVIC_EncodePriority>
 8003b10:	4602      	mov	r2, r0
 8003b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b16:	4611      	mov	r1, r2
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff5d 	bl	80039d8 <__NVIC_SetPriority>
}
 8003b1e:	bf00      	nop
 8003b20:	3718      	adds	r7, #24
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ffb0 	bl	8003a94 <SysTick_Config>
 8003b34:	4603      	mov	r3, r0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b04      	cmp	r3, #4
 8003b4c:	d106      	bne.n	8003b5c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a08      	ldr	r2, [pc, #32]	; (8003b74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003b54:	f043 0304 	orr.w	r3, r3, #4
 8003b58:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8003b5a:	e005      	b.n	8003b68 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8003b62:	f023 0304 	bic.w	r3, r3, #4
 8003b66:	6013      	str	r3, [r2, #0]
}
 8003b68:	bf00      	nop
 8003b6a:	370c      	adds	r7, #12
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr
 8003b74:	e000e010 	.word	0xe000e010

08003b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b089      	sub	sp, #36	; 0x24
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	e165      	b.n	8003e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b94:	2201      	movs	r2, #1
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	429a      	cmp	r2, r3
 8003bae:	f040 8154 	bne.w	8003e5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d005      	beq.n	8003bca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d130      	bne.n	8003c2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	2203      	movs	r2, #3
 8003bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68da      	ldr	r2, [r3, #12]
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	fa02 f303 	lsl.w	r3, r2, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c00:	2201      	movs	r2, #1
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	43db      	mvns	r3, r3
 8003c0a:	69ba      	ldr	r2, [r7, #24]
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 0201 	and.w	r2, r3, #1
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	2b03      	cmp	r3, #3
 8003c36:	d017      	beq.n	8003c68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	2203      	movs	r2, #3
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	689a      	ldr	r2, [r3, #8]
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	005b      	lsls	r3, r3, #1
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0303 	and.w	r3, r3, #3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d123      	bne.n	8003cbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	08da      	lsrs	r2, r3, #3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3208      	adds	r2, #8
 8003c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	220f      	movs	r2, #15
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	43db      	mvns	r3, r3
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	4013      	ands	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691a      	ldr	r2, [r3, #16]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	08da      	lsrs	r2, r3, #3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	3208      	adds	r2, #8
 8003cb6:	69b9      	ldr	r1, [r7, #24]
 8003cb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	2203      	movs	r2, #3
 8003cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0203 	and.w	r2, r3, #3
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80ae 	beq.w	8003e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	4b5d      	ldr	r3, [pc, #372]	; (8003e78 <HAL_GPIO_Init+0x300>)
 8003d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d06:	4a5c      	ldr	r2, [pc, #368]	; (8003e78 <HAL_GPIO_Init+0x300>)
 8003d08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d0c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d0e:	4b5a      	ldr	r3, [pc, #360]	; (8003e78 <HAL_GPIO_Init+0x300>)
 8003d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d1a:	4a58      	ldr	r2, [pc, #352]	; (8003e7c <HAL_GPIO_Init+0x304>)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	089b      	lsrs	r3, r3, #2
 8003d20:	3302      	adds	r3, #2
 8003d22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0303 	and.w	r3, r3, #3
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	220f      	movs	r2, #15
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a4f      	ldr	r2, [pc, #316]	; (8003e80 <HAL_GPIO_Init+0x308>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d025      	beq.n	8003d92 <HAL_GPIO_Init+0x21a>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4e      	ldr	r2, [pc, #312]	; (8003e84 <HAL_GPIO_Init+0x30c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d01f      	beq.n	8003d8e <HAL_GPIO_Init+0x216>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4d      	ldr	r2, [pc, #308]	; (8003e88 <HAL_GPIO_Init+0x310>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d019      	beq.n	8003d8a <HAL_GPIO_Init+0x212>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a4c      	ldr	r2, [pc, #304]	; (8003e8c <HAL_GPIO_Init+0x314>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d013      	beq.n	8003d86 <HAL_GPIO_Init+0x20e>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a4b      	ldr	r2, [pc, #300]	; (8003e90 <HAL_GPIO_Init+0x318>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00d      	beq.n	8003d82 <HAL_GPIO_Init+0x20a>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a4a      	ldr	r2, [pc, #296]	; (8003e94 <HAL_GPIO_Init+0x31c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d007      	beq.n	8003d7e <HAL_GPIO_Init+0x206>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a49      	ldr	r2, [pc, #292]	; (8003e98 <HAL_GPIO_Init+0x320>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d101      	bne.n	8003d7a <HAL_GPIO_Init+0x202>
 8003d76:	2306      	movs	r3, #6
 8003d78:	e00c      	b.n	8003d94 <HAL_GPIO_Init+0x21c>
 8003d7a:	2307      	movs	r3, #7
 8003d7c:	e00a      	b.n	8003d94 <HAL_GPIO_Init+0x21c>
 8003d7e:	2305      	movs	r3, #5
 8003d80:	e008      	b.n	8003d94 <HAL_GPIO_Init+0x21c>
 8003d82:	2304      	movs	r3, #4
 8003d84:	e006      	b.n	8003d94 <HAL_GPIO_Init+0x21c>
 8003d86:	2303      	movs	r3, #3
 8003d88:	e004      	b.n	8003d94 <HAL_GPIO_Init+0x21c>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e002      	b.n	8003d94 <HAL_GPIO_Init+0x21c>
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e000      	b.n	8003d94 <HAL_GPIO_Init+0x21c>
 8003d92:	2300      	movs	r3, #0
 8003d94:	69fa      	ldr	r2, [r7, #28]
 8003d96:	f002 0203 	and.w	r2, r2, #3
 8003d9a:	0092      	lsls	r2, r2, #2
 8003d9c:	4093      	lsls	r3, r2
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003da4:	4935      	ldr	r1, [pc, #212]	; (8003e7c <HAL_GPIO_Init+0x304>)
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	089b      	lsrs	r3, r3, #2
 8003daa:	3302      	adds	r3, #2
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003db2:	4b3a      	ldr	r3, [pc, #232]	; (8003e9c <HAL_GPIO_Init+0x324>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dd6:	4a31      	ldr	r2, [pc, #196]	; (8003e9c <HAL_GPIO_Init+0x324>)
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ddc:	4b2f      	ldr	r3, [pc, #188]	; (8003e9c <HAL_GPIO_Init+0x324>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4013      	ands	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e00:	4a26      	ldr	r2, [pc, #152]	; (8003e9c <HAL_GPIO_Init+0x324>)
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e06:	4b25      	ldr	r3, [pc, #148]	; (8003e9c <HAL_GPIO_Init+0x324>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003e22:	69ba      	ldr	r2, [r7, #24]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_GPIO_Init+0x324>)
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e30:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_GPIO_Init+0x324>)
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	69ba      	ldr	r2, [r7, #24]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e54:	4a11      	ldr	r2, [pc, #68]	; (8003e9c <HAL_GPIO_Init+0x324>)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	61fb      	str	r3, [r7, #28]
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	2b0f      	cmp	r3, #15
 8003e64:	f67f ae96 	bls.w	8003b94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	3724      	adds	r7, #36	; 0x24
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40013800 	.word	0x40013800
 8003e80:	40020000 	.word	0x40020000
 8003e84:	40020400 	.word	0x40020400
 8003e88:	40020800 	.word	0x40020800
 8003e8c:	40020c00 	.word	0x40020c00
 8003e90:	40021000 	.word	0x40021000
 8003e94:	40021400 	.word	0x40021400
 8003e98:	40021800 	.word	0x40021800
 8003e9c:	40013c00 	.word	0x40013c00

08003ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
 8003eac:	4613      	mov	r3, r2
 8003eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003eb0:	787b      	ldrb	r3, [r7, #1]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d003      	beq.n	8003ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eb6:	887a      	ldrh	r2, [r7, #2]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ebc:	e003      	b.n	8003ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ebe:	887b      	ldrh	r3, [r7, #2]
 8003ec0:	041a      	lsls	r2, r3, #16
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	619a      	str	r2, [r3, #24]
}
 8003ec6:	bf00      	nop
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
	...

08003ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e0cc      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee8:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 030f 	and.w	r3, r3, #15
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d90c      	bls.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	4b65      	ldr	r3, [pc, #404]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efe:	4b63      	ldr	r3, [pc, #396]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d001      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e0b8      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d020      	beq.n	8003f5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a58      	ldr	r2, [pc, #352]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d005      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f40:	4b53      	ldr	r3, [pc, #332]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	4a52      	ldr	r2, [pc, #328]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b50      	ldr	r3, [pc, #320]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	494d      	ldr	r1, [pc, #308]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0301 	and.w	r3, r3, #1
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d044      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d107      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f72:	4b47      	ldr	r3, [pc, #284]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d119      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e07f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d107      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e06f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa2:	4b3b      	ldr	r3, [pc, #236]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e067      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f023 0203 	bic.w	r2, r3, #3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	4934      	ldr	r1, [pc, #208]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc4:	f7ff fcca 	bl	800395c <HAL_GetTick>
 8003fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fcc:	f7ff fcc6 	bl	800395c <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e04f      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	f003 020c 	and.w	r2, r3, #12
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d1eb      	bne.n	8003fcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff4:	4b25      	ldr	r3, [pc, #148]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 030f 	and.w	r3, r3, #15
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20c      	bcs.n	800401c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004002:	4b22      	ldr	r3, [pc, #136]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 8004004:	683a      	ldr	r2, [r7, #0]
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800400a:	4b20      	ldr	r3, [pc, #128]	; (800408c <HAL_RCC_ClockConfig+0x1b8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 030f 	and.w	r3, r3, #15
 8004012:	683a      	ldr	r2, [r7, #0]
 8004014:	429a      	cmp	r2, r3
 8004016:	d001      	beq.n	800401c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e032      	b.n	8004082 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b00      	cmp	r3, #0
 8004026:	d008      	beq.n	800403a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004028:	4b19      	ldr	r3, [pc, #100]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4916      	ldr	r1, [pc, #88]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004036:	4313      	orrs	r3, r2
 8004038:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004046:	4b12      	ldr	r3, [pc, #72]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	490e      	ldr	r1, [pc, #56]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	4313      	orrs	r3, r2
 8004058:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800405a:	f000 f855 	bl	8004108 <HAL_RCC_GetSysClockFreq>
 800405e:	4602      	mov	r2, r0
 8004060:	4b0b      	ldr	r3, [pc, #44]	; (8004090 <HAL_RCC_ClockConfig+0x1bc>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	091b      	lsrs	r3, r3, #4
 8004066:	f003 030f 	and.w	r3, r3, #15
 800406a:	490a      	ldr	r1, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x1c0>)
 800406c:	5ccb      	ldrb	r3, [r1, r3]
 800406e:	fa22 f303 	lsr.w	r3, r2, r3
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c4>)
 8004074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_RCC_ClockConfig+0x1c8>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fc2a 	bl	80038d4 <HAL_InitTick>

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	40023c00 	.word	0x40023c00
 8004090:	40023800 	.word	0x40023800
 8004094:	0800663c 	.word	0x0800663c
 8004098:	20000004 	.word	0x20000004
 800409c:	20000008 	.word	0x20000008

080040a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040a4:	4b03      	ldr	r3, [pc, #12]	; (80040b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040a6:	681b      	ldr	r3, [r3, #0]
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	20000004 	.word	0x20000004

080040b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040bc:	f7ff fff0 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b05      	ldr	r3, [pc, #20]	; (80040d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0a9b      	lsrs	r3, r3, #10
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4903      	ldr	r1, [pc, #12]	; (80040dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	0800664c 	.word	0x0800664c

080040e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80040e4:	f7ff ffdc 	bl	80040a0 <HAL_RCC_GetHCLKFreq>
 80040e8:	4602      	mov	r2, r0
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	0b5b      	lsrs	r3, r3, #13
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	4903      	ldr	r1, [pc, #12]	; (8004104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80040f6:	5ccb      	ldrb	r3, [r1, r3]
 80040f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40023800 	.word	0x40023800
 8004104:	0800664c 	.word	0x0800664c

08004108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004108:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800410c:	b087      	sub	sp, #28
 800410e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004110:	2600      	movs	r6, #0
 8004112:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8004114:	2600      	movs	r6, #0
 8004116:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8004118:	2600      	movs	r6, #0
 800411a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 800411c:	2600      	movs	r6, #0
 800411e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004120:	2600      	movs	r6, #0
 8004122:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004124:	4ea3      	ldr	r6, [pc, #652]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004126:	68b6      	ldr	r6, [r6, #8]
 8004128:	f006 060c 	and.w	r6, r6, #12
 800412c:	2e0c      	cmp	r6, #12
 800412e:	f200 8137 	bhi.w	80043a0 <HAL_RCC_GetSysClockFreq+0x298>
 8004132:	f20f 0c08 	addw	ip, pc, #8
 8004136:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 800413a:	bf00      	nop
 800413c:	08004171 	.word	0x08004171
 8004140:	080043a1 	.word	0x080043a1
 8004144:	080043a1 	.word	0x080043a1
 8004148:	080043a1 	.word	0x080043a1
 800414c:	08004177 	.word	0x08004177
 8004150:	080043a1 	.word	0x080043a1
 8004154:	080043a1 	.word	0x080043a1
 8004158:	080043a1 	.word	0x080043a1
 800415c:	0800417d 	.word	0x0800417d
 8004160:	080043a1 	.word	0x080043a1
 8004164:	080043a1 	.word	0x080043a1
 8004168:	080043a1 	.word	0x080043a1
 800416c:	08004293 	.word	0x08004293
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b91      	ldr	r3, [pc, #580]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8004172:	613b      	str	r3, [r7, #16]
       break;
 8004174:	e117      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004176:	4b91      	ldr	r3, [pc, #580]	; (80043bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 8004178:	613b      	str	r3, [r7, #16]
      break;
 800417a:	e114      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800417c:	4b8d      	ldr	r3, [pc, #564]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004184:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004186:	4b8b      	ldr	r3, [pc, #556]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d024      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b88      	ldr	r3, [pc, #544]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	461a      	mov	r2, r3
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	f240 14ff 	movw	r4, #511	; 0x1ff
 80041a2:	f04f 0500 	mov.w	r5, #0
 80041a6:	ea02 0004 	and.w	r0, r2, r4
 80041aa:	ea03 0105 	and.w	r1, r3, r5
 80041ae:	4b83      	ldr	r3, [pc, #524]	; (80043bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80041b0:	fb03 f201 	mul.w	r2, r3, r1
 80041b4:	2300      	movs	r3, #0
 80041b6:	fb03 f300 	mul.w	r3, r3, r0
 80041ba:	4413      	add	r3, r2
 80041bc:	4a7f      	ldr	r2, [pc, #508]	; (80043bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80041be:	fba0 0102 	umull	r0, r1, r0, r2
 80041c2:	440b      	add	r3, r1
 80041c4:	4619      	mov	r1, r3
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	461a      	mov	r2, r3
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f7fc fcd7 	bl	8000b80 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4613      	mov	r3, r2
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	e04c      	b.n	8004276 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041dc:	4b75      	ldr	r3, [pc, #468]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	099b      	lsrs	r3, r3, #6
 80041e2:	461a      	mov	r2, r3
 80041e4:	f04f 0300 	mov.w	r3, #0
 80041e8:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041ec:	f04f 0100 	mov.w	r1, #0
 80041f0:	ea02 0800 	and.w	r8, r2, r0
 80041f4:	ea03 0901 	and.w	r9, r3, r1
 80041f8:	4640      	mov	r0, r8
 80041fa:	4649      	mov	r1, r9
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	014b      	lsls	r3, r1, #5
 8004206:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800420a:	0142      	lsls	r2, r0, #5
 800420c:	4610      	mov	r0, r2
 800420e:	4619      	mov	r1, r3
 8004210:	ebb0 0008 	subs.w	r0, r0, r8
 8004214:	eb61 0109 	sbc.w	r1, r1, r9
 8004218:	f04f 0200 	mov.w	r2, #0
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	018b      	lsls	r3, r1, #6
 8004222:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004226:	0182      	lsls	r2, r0, #6
 8004228:	1a12      	subs	r2, r2, r0
 800422a:	eb63 0301 	sbc.w	r3, r3, r1
 800422e:	f04f 0000 	mov.w	r0, #0
 8004232:	f04f 0100 	mov.w	r1, #0
 8004236:	00d9      	lsls	r1, r3, #3
 8004238:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800423c:	00d0      	lsls	r0, r2, #3
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	eb12 0208 	adds.w	r2, r2, r8
 8004246:	eb43 0309 	adc.w	r3, r3, r9
 800424a:	f04f 0000 	mov.w	r0, #0
 800424e:	f04f 0100 	mov.w	r1, #0
 8004252:	0299      	lsls	r1, r3, #10
 8004254:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004258:	0290      	lsls	r0, r2, #10
 800425a:	4602      	mov	r2, r0
 800425c:	460b      	mov	r3, r1
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	461a      	mov	r2, r3
 8004266:	f04f 0300 	mov.w	r3, #0
 800426a:	f7fc fc89 	bl	8000b80 <__aeabi_uldivmod>
 800426e:	4602      	mov	r2, r0
 8004270:	460b      	mov	r3, r1
 8004272:	4613      	mov	r3, r2
 8004274:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004276:	4b4f      	ldr	r3, [pc, #316]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	3301      	adds	r3, #1
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	fbb2 f3f3 	udiv	r3, r2, r3
 800428e:	613b      	str	r3, [r7, #16]
      break;
 8004290:	e089      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004292:	4948      	ldr	r1, [pc, #288]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8004294:	6849      	ldr	r1, [r1, #4]
 8004296:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800429a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800429c:	4945      	ldr	r1, [pc, #276]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800429e:	6849      	ldr	r1, [r1, #4]
 80042a0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80042a4:	2900      	cmp	r1, #0
 80042a6:	d024      	beq.n	80042f2 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a8:	4942      	ldr	r1, [pc, #264]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80042aa:	6849      	ldr	r1, [r1, #4]
 80042ac:	0989      	lsrs	r1, r1, #6
 80042ae:	4608      	mov	r0, r1
 80042b0:	f04f 0100 	mov.w	r1, #0
 80042b4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80042b8:	f04f 0500 	mov.w	r5, #0
 80042bc:	ea00 0204 	and.w	r2, r0, r4
 80042c0:	ea01 0305 	and.w	r3, r1, r5
 80042c4:	493d      	ldr	r1, [pc, #244]	; (80043bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80042c6:	fb01 f003 	mul.w	r0, r1, r3
 80042ca:	2100      	movs	r1, #0
 80042cc:	fb01 f102 	mul.w	r1, r1, r2
 80042d0:	1844      	adds	r4, r0, r1
 80042d2:	493a      	ldr	r1, [pc, #232]	; (80043bc <HAL_RCC_GetSysClockFreq+0x2b4>)
 80042d4:	fba2 0101 	umull	r0, r1, r2, r1
 80042d8:	1863      	adds	r3, r4, r1
 80042da:	4619      	mov	r1, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	461a      	mov	r2, r3
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	f7fc fc4c 	bl	8000b80 <__aeabi_uldivmod>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4613      	mov	r3, r2
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	e04a      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042f2:	4b30      	ldr	r3, [pc, #192]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	099b      	lsrs	r3, r3, #6
 80042f8:	461a      	mov	r2, r3
 80042fa:	f04f 0300 	mov.w	r3, #0
 80042fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004302:	f04f 0100 	mov.w	r1, #0
 8004306:	ea02 0400 	and.w	r4, r2, r0
 800430a:	ea03 0501 	and.w	r5, r3, r1
 800430e:	4620      	mov	r0, r4
 8004310:	4629      	mov	r1, r5
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	014b      	lsls	r3, r1, #5
 800431c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004320:	0142      	lsls	r2, r0, #5
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	1b00      	subs	r0, r0, r4
 8004328:	eb61 0105 	sbc.w	r1, r1, r5
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	018b      	lsls	r3, r1, #6
 8004336:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800433a:	0182      	lsls	r2, r0, #6
 800433c:	1a12      	subs	r2, r2, r0
 800433e:	eb63 0301 	sbc.w	r3, r3, r1
 8004342:	f04f 0000 	mov.w	r0, #0
 8004346:	f04f 0100 	mov.w	r1, #0
 800434a:	00d9      	lsls	r1, r3, #3
 800434c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004350:	00d0      	lsls	r0, r2, #3
 8004352:	4602      	mov	r2, r0
 8004354:	460b      	mov	r3, r1
 8004356:	1912      	adds	r2, r2, r4
 8004358:	eb45 0303 	adc.w	r3, r5, r3
 800435c:	f04f 0000 	mov.w	r0, #0
 8004360:	f04f 0100 	mov.w	r1, #0
 8004364:	0299      	lsls	r1, r3, #10
 8004366:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800436a:	0290      	lsls	r0, r2, #10
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4610      	mov	r0, r2
 8004372:	4619      	mov	r1, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	461a      	mov	r2, r3
 8004378:	f04f 0300 	mov.w	r3, #0
 800437c:	f7fc fc00 	bl	8000b80 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004388:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	0f1b      	lsrs	r3, r3, #28
 800438e:	f003 0307 	and.w	r3, r3, #7
 8004392:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004394:	697a      	ldr	r2, [r7, #20]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	fbb2 f3f3 	udiv	r3, r2, r3
 800439c:	613b      	str	r3, [r7, #16]
      break;
 800439e:	e002      	b.n	80043a6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80043a2:	613b      	str	r3, [r7, #16]
      break;
 80043a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a6:	693b      	ldr	r3, [r7, #16]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80043b2:	bf00      	nop
 80043b4:	40023800 	.word	0x40023800
 80043b8:	00f42400 	.word	0x00f42400
 80043bc:	017d7840 	.word	0x017d7840

080043c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b086      	sub	sp, #24
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e28d      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 8083 	beq.w	80044e6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043e0:	4b94      	ldr	r3, [pc, #592]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	f003 030c 	and.w	r3, r3, #12
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d019      	beq.n	8004420 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043ec:	4b91      	ldr	r3, [pc, #580]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043f8:	4b8e      	ldr	r3, [pc, #568]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004400:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004404:	d00c      	beq.n	8004420 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004406:	4b8b      	ldr	r3, [pc, #556]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800440e:	2b0c      	cmp	r3, #12
 8004410:	d112      	bne.n	8004438 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004412:	4b88      	ldr	r3, [pc, #544]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800441a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800441e:	d10b      	bne.n	8004438 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	4b84      	ldr	r3, [pc, #528]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d05b      	beq.n	80044e4 <HAL_RCC_OscConfig+0x124>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d157      	bne.n	80044e4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e25a      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004440:	d106      	bne.n	8004450 <HAL_RCC_OscConfig+0x90>
 8004442:	4b7c      	ldr	r3, [pc, #496]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a7b      	ldr	r2, [pc, #492]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e01d      	b.n	800448c <HAL_RCC_OscConfig+0xcc>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0xb4>
 800445a:	4b76      	ldr	r3, [pc, #472]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a75      	ldr	r2, [pc, #468]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	4b73      	ldr	r3, [pc, #460]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a72      	ldr	r2, [pc, #456]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 800446c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	e00b      	b.n	800448c <HAL_RCC_OscConfig+0xcc>
 8004474:	4b6f      	ldr	r3, [pc, #444]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a6e      	ldr	r2, [pc, #440]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 800447a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b6c      	ldr	r3, [pc, #432]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a6b      	ldr	r2, [pc, #428]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800448a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d013      	beq.n	80044bc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7ff fa62 	bl	800395c <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800449c:	f7ff fa5e 	bl	800395c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b64      	cmp	r3, #100	; 0x64
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e21f      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ae:	4b61      	ldr	r3, [pc, #388]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d0f0      	beq.n	800449c <HAL_RCC_OscConfig+0xdc>
 80044ba:	e014      	b.n	80044e6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7ff fa4e 	bl	800395c <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044c4:	f7ff fa4a 	bl	800395c <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b64      	cmp	r3, #100	; 0x64
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e20b      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044d6:	4b57      	ldr	r3, [pc, #348]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x104>
 80044e2:	e000      	b.n	80044e6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d06f      	beq.n	80045d2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044f2:	4b50      	ldr	r3, [pc, #320]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f003 030c 	and.w	r3, r3, #12
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d017      	beq.n	800452e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044fe:	4b4d      	ldr	r3, [pc, #308]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004506:	2b08      	cmp	r3, #8
 8004508:	d105      	bne.n	8004516 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800450a:	4b4a      	ldr	r3, [pc, #296]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00b      	beq.n	800452e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004516:	4b47      	ldr	r3, [pc, #284]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d11c      	bne.n	800455c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004522:	4b44      	ldr	r3, [pc, #272]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d116      	bne.n	800455c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800452e:	4b41      	ldr	r3, [pc, #260]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d005      	beq.n	8004546 <HAL_RCC_OscConfig+0x186>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d001      	beq.n	8004546 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e1d3      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004546:	4b3b      	ldr	r3, [pc, #236]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	4937      	ldr	r1, [pc, #220]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004556:	4313      	orrs	r3, r2
 8004558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800455a:	e03a      	b.n	80045d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d020      	beq.n	80045a6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004564:	4b34      	ldr	r3, [pc, #208]	; (8004638 <HAL_RCC_OscConfig+0x278>)
 8004566:	2201      	movs	r2, #1
 8004568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800456a:	f7ff f9f7 	bl	800395c <HAL_GetTick>
 800456e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004570:	e008      	b.n	8004584 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004572:	f7ff f9f3 	bl	800395c <HAL_GetTick>
 8004576:	4602      	mov	r2, r0
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	1ad3      	subs	r3, r2, r3
 800457c:	2b02      	cmp	r3, #2
 800457e:	d901      	bls.n	8004584 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004580:	2303      	movs	r3, #3
 8004582:	e1b4      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004584:	4b2b      	ldr	r3, [pc, #172]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0302 	and.w	r3, r3, #2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d0f0      	beq.n	8004572 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004590:	4b28      	ldr	r3, [pc, #160]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	00db      	lsls	r3, r3, #3
 800459e:	4925      	ldr	r1, [pc, #148]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	600b      	str	r3, [r1, #0]
 80045a4:	e015      	b.n	80045d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045a6:	4b24      	ldr	r3, [pc, #144]	; (8004638 <HAL_RCC_OscConfig+0x278>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ac:	f7ff f9d6 	bl	800395c <HAL_GetTick>
 80045b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045b2:	e008      	b.n	80045c6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045b4:	f7ff f9d2 	bl	800395c <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d901      	bls.n	80045c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80045c2:	2303      	movs	r3, #3
 80045c4:	e193      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045c6:	4b1b      	ldr	r3, [pc, #108]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f0      	bne.n	80045b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d036      	beq.n	800464c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d016      	beq.n	8004614 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045e6:	4b15      	ldr	r3, [pc, #84]	; (800463c <HAL_RCC_OscConfig+0x27c>)
 80045e8:	2201      	movs	r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7ff f9b6 	bl	800395c <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045f4:	f7ff f9b2 	bl	800395c <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e173      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004606:	4b0b      	ldr	r3, [pc, #44]	; (8004634 <HAL_RCC_OscConfig+0x274>)
 8004608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800460a:	f003 0302 	and.w	r3, r3, #2
 800460e:	2b00      	cmp	r3, #0
 8004610:	d0f0      	beq.n	80045f4 <HAL_RCC_OscConfig+0x234>
 8004612:	e01b      	b.n	800464c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004614:	4b09      	ldr	r3, [pc, #36]	; (800463c <HAL_RCC_OscConfig+0x27c>)
 8004616:	2200      	movs	r2, #0
 8004618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800461a:	f7ff f99f 	bl	800395c <HAL_GetTick>
 800461e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004620:	e00e      	b.n	8004640 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004622:	f7ff f99b 	bl	800395c <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d907      	bls.n	8004640 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e15c      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
 8004634:	40023800 	.word	0x40023800
 8004638:	42470000 	.word	0x42470000
 800463c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004640:	4b8a      	ldr	r3, [pc, #552]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ea      	bne.n	8004622 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8097 	beq.w	8004788 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800465e:	4b83      	ldr	r3, [pc, #524]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10f      	bne.n	800468a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	60bb      	str	r3, [r7, #8]
 800466e:	4b7f      	ldr	r3, [pc, #508]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a7e      	ldr	r2, [pc, #504]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b7c      	ldr	r3, [pc, #496]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	60bb      	str	r3, [r7, #8]
 8004684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004686:	2301      	movs	r3, #1
 8004688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468a:	4b79      	ldr	r3, [pc, #484]	; (8004870 <HAL_RCC_OscConfig+0x4b0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004692:	2b00      	cmp	r3, #0
 8004694:	d118      	bne.n	80046c8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004696:	4b76      	ldr	r3, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x4b0>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a75      	ldr	r2, [pc, #468]	; (8004870 <HAL_RCC_OscConfig+0x4b0>)
 800469c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a2:	f7ff f95b 	bl	800395c <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046aa:	f7ff f957 	bl	800395c <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e118      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046bc:	4b6c      	ldr	r3, [pc, #432]	; (8004870 <HAL_RCC_OscConfig+0x4b0>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0f0      	beq.n	80046aa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d106      	bne.n	80046de <HAL_RCC_OscConfig+0x31e>
 80046d0:	4b66      	ldr	r3, [pc, #408]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 80046d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d4:	4a65      	ldr	r2, [pc, #404]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	6713      	str	r3, [r2, #112]	; 0x70
 80046dc:	e01c      	b.n	8004718 <HAL_RCC_OscConfig+0x358>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d10c      	bne.n	8004700 <HAL_RCC_OscConfig+0x340>
 80046e6:	4b61      	ldr	r3, [pc, #388]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 80046e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ea:	4a60      	ldr	r2, [pc, #384]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	6713      	str	r3, [r2, #112]	; 0x70
 80046f2:	4b5e      	ldr	r3, [pc, #376]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	4a5d      	ldr	r2, [pc, #372]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 80046f8:	f043 0301 	orr.w	r3, r3, #1
 80046fc:	6713      	str	r3, [r2, #112]	; 0x70
 80046fe:	e00b      	b.n	8004718 <HAL_RCC_OscConfig+0x358>
 8004700:	4b5a      	ldr	r3, [pc, #360]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004704:	4a59      	ldr	r2, [pc, #356]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6713      	str	r3, [r2, #112]	; 0x70
 800470c:	4b57      	ldr	r3, [pc, #348]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 800470e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004710:	4a56      	ldr	r2, [pc, #344]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004712:	f023 0304 	bic.w	r3, r3, #4
 8004716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7ff f91c 	bl	800395c <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004726:	e00a      	b.n	800473e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004728:	f7ff f918 	bl	800395c <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	f241 3288 	movw	r2, #5000	; 0x1388
 8004736:	4293      	cmp	r3, r2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e0d7      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800473e:	4b4b      	ldr	r3, [pc, #300]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b00      	cmp	r3, #0
 8004748:	d0ee      	beq.n	8004728 <HAL_RCC_OscConfig+0x368>
 800474a:	e014      	b.n	8004776 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7ff f906 	bl	800395c <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004752:	e00a      	b.n	800476a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004754:	f7ff f902 	bl	800395c <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004762:	4293      	cmp	r3, r2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e0c1      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800476a:	4b40      	ldr	r3, [pc, #256]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 800476c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476e:	f003 0302 	and.w	r3, r3, #2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1ee      	bne.n	8004754 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004776:	7dfb      	ldrb	r3, [r7, #23]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d105      	bne.n	8004788 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800477c:	4b3b      	ldr	r3, [pc, #236]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	4a3a      	ldr	r2, [pc, #232]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 80ad 	beq.w	80048ec <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004792:	4b36      	ldr	r3, [pc, #216]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	f003 030c 	and.w	r3, r3, #12
 800479a:	2b08      	cmp	r3, #8
 800479c:	d060      	beq.n	8004860 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d145      	bne.n	8004832 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a6:	4b33      	ldr	r3, [pc, #204]	; (8004874 <HAL_RCC_OscConfig+0x4b4>)
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ac:	f7ff f8d6 	bl	800395c <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7ff f8d2 	bl	800395c <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e093      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	4b29      	ldr	r3, [pc, #164]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f0      	bne.n	80047b4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	69da      	ldr	r2, [r3, #28]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	019b      	lsls	r3, r3, #6
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e8:	085b      	lsrs	r3, r3, #1
 80047ea:	3b01      	subs	r3, #1
 80047ec:	041b      	lsls	r3, r3, #16
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047fc:	071b      	lsls	r3, r3, #28
 80047fe:	491b      	ldr	r1, [pc, #108]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004800:	4313      	orrs	r3, r2
 8004802:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004804:	4b1b      	ldr	r3, [pc, #108]	; (8004874 <HAL_RCC_OscConfig+0x4b4>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480a:	f7ff f8a7 	bl	800395c <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004812:	f7ff f8a3 	bl	800395c <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e064      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004824:	4b11      	ldr	r3, [pc, #68]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x452>
 8004830:	e05c      	b.n	80048ec <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004832:	4b10      	ldr	r3, [pc, #64]	; (8004874 <HAL_RCC_OscConfig+0x4b4>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004838:	f7ff f890 	bl	800395c <HAL_GetTick>
 800483c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483e:	e008      	b.n	8004852 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004840:	f7ff f88c 	bl	800395c <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b02      	cmp	r3, #2
 800484c:	d901      	bls.n	8004852 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e04d      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_RCC_OscConfig+0x4ac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1f0      	bne.n	8004840 <HAL_RCC_OscConfig+0x480>
 800485e:	e045      	b.n	80048ec <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	699b      	ldr	r3, [r3, #24]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d107      	bne.n	8004878 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e040      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
 800486c:	40023800 	.word	0x40023800
 8004870:	40007000 	.word	0x40007000
 8004874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004878:	4b1f      	ldr	r3, [pc, #124]	; (80048f8 <HAL_RCC_OscConfig+0x538>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d030      	beq.n	80048e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004890:	429a      	cmp	r2, r3
 8004892:	d129      	bne.n	80048e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800489e:	429a      	cmp	r2, r3
 80048a0:	d122      	bne.n	80048e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048a8:	4013      	ands	r3, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d119      	bne.n	80048e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048be:	085b      	lsrs	r3, r3, #1
 80048c0:	3b01      	subs	r3, #1
 80048c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d10f      	bne.n	80048e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d107      	bne.n	80048e8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d001      	beq.n	80048ec <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3718      	adds	r7, #24
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	40023800 	.word	0x40023800

080048fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e03f      	b.n	800498e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fe fed2 	bl	80036cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800493e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f829 	bl	8004998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
	...

08004998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	b09f      	sub	sp, #124	; 0x7c
 800499e:	af00      	add	r7, sp, #0
 80049a0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80049ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ae:	68d9      	ldr	r1, [r3, #12]
 80049b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	ea40 0301 	orr.w	r3, r0, r1
 80049b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80049ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80049d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80049dc:	f021 010c 	bic.w	r1, r1, #12
 80049e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049e6:	430b      	orrs	r3, r1
 80049e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	695b      	ldr	r3, [r3, #20]
 80049f0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f6:	6999      	ldr	r1, [r3, #24]
 80049f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	ea40 0301 	orr.w	r3, r0, r1
 8004a00:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	4bc5      	ldr	r3, [pc, #788]	; (8004d1c <UART_SetConfig+0x384>)
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d004      	beq.n	8004a16 <UART_SetConfig+0x7e>
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4bc3      	ldr	r3, [pc, #780]	; (8004d20 <UART_SetConfig+0x388>)
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d103      	bne.n	8004a1e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004a16:	f7ff fb63 	bl	80040e0 <HAL_RCC_GetPCLK2Freq>
 8004a1a:	6778      	str	r0, [r7, #116]	; 0x74
 8004a1c:	e002      	b.n	8004a24 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a1e:	f7ff fb4b 	bl	80040b8 <HAL_RCC_GetPCLK1Freq>
 8004a22:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a2c:	f040 80b6 	bne.w	8004b9c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a32:	461c      	mov	r4, r3
 8004a34:	f04f 0500 	mov.w	r5, #0
 8004a38:	4622      	mov	r2, r4
 8004a3a:	462b      	mov	r3, r5
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	6439      	str	r1, [r7, #64]	; 0x40
 8004a40:	415b      	adcs	r3, r3
 8004a42:	647b      	str	r3, [r7, #68]	; 0x44
 8004a44:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004a48:	1912      	adds	r2, r2, r4
 8004a4a:	eb45 0303 	adc.w	r3, r5, r3
 8004a4e:	f04f 0000 	mov.w	r0, #0
 8004a52:	f04f 0100 	mov.w	r1, #0
 8004a56:	00d9      	lsls	r1, r3, #3
 8004a58:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a5c:	00d0      	lsls	r0, r2, #3
 8004a5e:	4602      	mov	r2, r0
 8004a60:	460b      	mov	r3, r1
 8004a62:	1911      	adds	r1, r2, r4
 8004a64:	6639      	str	r1, [r7, #96]	; 0x60
 8004a66:	416b      	adcs	r3, r5
 8004a68:	667b      	str	r3, [r7, #100]	; 0x64
 8004a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	1891      	adds	r1, r2, r2
 8004a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a78:	415b      	adcs	r3, r3
 8004a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a80:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a84:	f7fc f87c 	bl	8000b80 <__aeabi_uldivmod>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	460b      	mov	r3, r1
 8004a8c:	4ba5      	ldr	r3, [pc, #660]	; (8004d24 <UART_SetConfig+0x38c>)
 8004a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a92:	095b      	lsrs	r3, r3, #5
 8004a94:	011e      	lsls	r6, r3, #4
 8004a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a98:	461c      	mov	r4, r3
 8004a9a:	f04f 0500 	mov.w	r5, #0
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	462b      	mov	r3, r5
 8004aa2:	1891      	adds	r1, r2, r2
 8004aa4:	6339      	str	r1, [r7, #48]	; 0x30
 8004aa6:	415b      	adcs	r3, r3
 8004aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8004aaa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004aae:	1912      	adds	r2, r2, r4
 8004ab0:	eb45 0303 	adc.w	r3, r5, r3
 8004ab4:	f04f 0000 	mov.w	r0, #0
 8004ab8:	f04f 0100 	mov.w	r1, #0
 8004abc:	00d9      	lsls	r1, r3, #3
 8004abe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ac2:	00d0      	lsls	r0, r2, #3
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	460b      	mov	r3, r1
 8004ac8:	1911      	adds	r1, r2, r4
 8004aca:	65b9      	str	r1, [r7, #88]	; 0x58
 8004acc:	416b      	adcs	r3, r5
 8004ace:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	1891      	adds	r1, r2, r2
 8004adc:	62b9      	str	r1, [r7, #40]	; 0x28
 8004ade:	415b      	adcs	r3, r3
 8004ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ae6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004aea:	f7fc f849 	bl	8000b80 <__aeabi_uldivmod>
 8004aee:	4602      	mov	r2, r0
 8004af0:	460b      	mov	r3, r1
 8004af2:	4b8c      	ldr	r3, [pc, #560]	; (8004d24 <UART_SetConfig+0x38c>)
 8004af4:	fba3 1302 	umull	r1, r3, r3, r2
 8004af8:	095b      	lsrs	r3, r3, #5
 8004afa:	2164      	movs	r1, #100	; 0x64
 8004afc:	fb01 f303 	mul.w	r3, r1, r3
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	3332      	adds	r3, #50	; 0x32
 8004b06:	4a87      	ldr	r2, [pc, #540]	; (8004d24 <UART_SetConfig+0x38c>)
 8004b08:	fba2 2303 	umull	r2, r3, r2, r3
 8004b0c:	095b      	lsrs	r3, r3, #5
 8004b0e:	005b      	lsls	r3, r3, #1
 8004b10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b14:	441e      	add	r6, r3
 8004b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f04f 0100 	mov.w	r1, #0
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	1894      	adds	r4, r2, r2
 8004b24:	623c      	str	r4, [r7, #32]
 8004b26:	415b      	adcs	r3, r3
 8004b28:	627b      	str	r3, [r7, #36]	; 0x24
 8004b2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b2e:	1812      	adds	r2, r2, r0
 8004b30:	eb41 0303 	adc.w	r3, r1, r3
 8004b34:	f04f 0400 	mov.w	r4, #0
 8004b38:	f04f 0500 	mov.w	r5, #0
 8004b3c:	00dd      	lsls	r5, r3, #3
 8004b3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b42:	00d4      	lsls	r4, r2, #3
 8004b44:	4622      	mov	r2, r4
 8004b46:	462b      	mov	r3, r5
 8004b48:	1814      	adds	r4, r2, r0
 8004b4a:	653c      	str	r4, [r7, #80]	; 0x50
 8004b4c:	414b      	adcs	r3, r1
 8004b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	461a      	mov	r2, r3
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	1891      	adds	r1, r2, r2
 8004b5c:	61b9      	str	r1, [r7, #24]
 8004b5e:	415b      	adcs	r3, r3
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b66:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b6a:	f7fc f809 	bl	8000b80 <__aeabi_uldivmod>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	460b      	mov	r3, r1
 8004b72:	4b6c      	ldr	r3, [pc, #432]	; (8004d24 <UART_SetConfig+0x38c>)
 8004b74:	fba3 1302 	umull	r1, r3, r3, r2
 8004b78:	095b      	lsrs	r3, r3, #5
 8004b7a:	2164      	movs	r1, #100	; 0x64
 8004b7c:	fb01 f303 	mul.w	r3, r1, r3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	3332      	adds	r3, #50	; 0x32
 8004b86:	4a67      	ldr	r2, [pc, #412]	; (8004d24 <UART_SetConfig+0x38c>)
 8004b88:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8c:	095b      	lsrs	r3, r3, #5
 8004b8e:	f003 0207 	and.w	r2, r3, #7
 8004b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4432      	add	r2, r6
 8004b98:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b9a:	e0b9      	b.n	8004d10 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b9e:	461c      	mov	r4, r3
 8004ba0:	f04f 0500 	mov.w	r5, #0
 8004ba4:	4622      	mov	r2, r4
 8004ba6:	462b      	mov	r3, r5
 8004ba8:	1891      	adds	r1, r2, r2
 8004baa:	6139      	str	r1, [r7, #16]
 8004bac:	415b      	adcs	r3, r3
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004bb4:	1912      	adds	r2, r2, r4
 8004bb6:	eb45 0303 	adc.w	r3, r5, r3
 8004bba:	f04f 0000 	mov.w	r0, #0
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	00d9      	lsls	r1, r3, #3
 8004bc4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bc8:	00d0      	lsls	r0, r2, #3
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	eb12 0804 	adds.w	r8, r2, r4
 8004bd2:	eb43 0905 	adc.w	r9, r3, r5
 8004bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f04f 0100 	mov.w	r1, #0
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	008b      	lsls	r3, r1, #2
 8004bea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004bee:	0082      	lsls	r2, r0, #2
 8004bf0:	4640      	mov	r0, r8
 8004bf2:	4649      	mov	r1, r9
 8004bf4:	f7fb ffc4 	bl	8000b80 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4b49      	ldr	r3, [pc, #292]	; (8004d24 <UART_SetConfig+0x38c>)
 8004bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	011e      	lsls	r6, r3, #4
 8004c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f04f 0100 	mov.w	r1, #0
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	1894      	adds	r4, r2, r2
 8004c14:	60bc      	str	r4, [r7, #8]
 8004c16:	415b      	adcs	r3, r3
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c1e:	1812      	adds	r2, r2, r0
 8004c20:	eb41 0303 	adc.w	r3, r1, r3
 8004c24:	f04f 0400 	mov.w	r4, #0
 8004c28:	f04f 0500 	mov.w	r5, #0
 8004c2c:	00dd      	lsls	r5, r3, #3
 8004c2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c32:	00d4      	lsls	r4, r2, #3
 8004c34:	4622      	mov	r2, r4
 8004c36:	462b      	mov	r3, r5
 8004c38:	1814      	adds	r4, r2, r0
 8004c3a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004c3c:	414b      	adcs	r3, r1
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f04f 0100 	mov.w	r1, #0
 8004c4a:	f04f 0200 	mov.w	r2, #0
 8004c4e:	f04f 0300 	mov.w	r3, #0
 8004c52:	008b      	lsls	r3, r1, #2
 8004c54:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c58:	0082      	lsls	r2, r0, #2
 8004c5a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c5e:	f7fb ff8f 	bl	8000b80 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <UART_SetConfig+0x38c>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	; 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	3332      	adds	r3, #50	; 0x32
 8004c7a:	4a2a      	ldr	r2, [pc, #168]	; (8004d24 <UART_SetConfig+0x38c>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c86:	441e      	add	r6, r3
 8004c88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f04f 0100 	mov.w	r1, #0
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	1894      	adds	r4, r2, r2
 8004c96:	603c      	str	r4, [r7, #0]
 8004c98:	415b      	adcs	r3, r3
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ca0:	1812      	adds	r2, r2, r0
 8004ca2:	eb41 0303 	adc.w	r3, r1, r3
 8004ca6:	f04f 0400 	mov.w	r4, #0
 8004caa:	f04f 0500 	mov.w	r5, #0
 8004cae:	00dd      	lsls	r5, r3, #3
 8004cb0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004cb4:	00d4      	lsls	r4, r2, #3
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	eb12 0a00 	adds.w	sl, r2, r0
 8004cbe:	eb43 0b01 	adc.w	fp, r3, r1
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f04f 0100 	mov.w	r1, #0
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	f04f 0300 	mov.w	r3, #0
 8004cd4:	008b      	lsls	r3, r1, #2
 8004cd6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004cda:	0082      	lsls	r2, r0, #2
 8004cdc:	4650      	mov	r0, sl
 8004cde:	4659      	mov	r1, fp
 8004ce0:	f7fb ff4e 	bl	8000b80 <__aeabi_uldivmod>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	460b      	mov	r3, r1
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <UART_SetConfig+0x38c>)
 8004cea:	fba3 1302 	umull	r1, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2164      	movs	r1, #100	; 0x64
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	011b      	lsls	r3, r3, #4
 8004cfa:	3332      	adds	r3, #50	; 0x32
 8004cfc:	4a09      	ldr	r2, [pc, #36]	; (8004d24 <UART_SetConfig+0x38c>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4432      	add	r2, r6
 8004d0e:	609a      	str	r2, [r3, #8]
}
 8004d10:	bf00      	nop
 8004d12:	377c      	adds	r7, #124	; 0x7c
 8004d14:	46bd      	mov	sp, r7
 8004d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1a:	bf00      	nop
 8004d1c:	40011000 	.word	0x40011000
 8004d20:	40011400 	.word	0x40011400
 8004d24:	51eb851f 	.word	0x51eb851f

08004d28 <__errno>:
 8004d28:	4b01      	ldr	r3, [pc, #4]	; (8004d30 <__errno+0x8>)
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000010 	.word	0x20000010

08004d34 <__libc_init_array>:
 8004d34:	b570      	push	{r4, r5, r6, lr}
 8004d36:	4d0d      	ldr	r5, [pc, #52]	; (8004d6c <__libc_init_array+0x38>)
 8004d38:	4c0d      	ldr	r4, [pc, #52]	; (8004d70 <__libc_init_array+0x3c>)
 8004d3a:	1b64      	subs	r4, r4, r5
 8004d3c:	10a4      	asrs	r4, r4, #2
 8004d3e:	2600      	movs	r6, #0
 8004d40:	42a6      	cmp	r6, r4
 8004d42:	d109      	bne.n	8004d58 <__libc_init_array+0x24>
 8004d44:	4d0b      	ldr	r5, [pc, #44]	; (8004d74 <__libc_init_array+0x40>)
 8004d46:	4c0c      	ldr	r4, [pc, #48]	; (8004d78 <__libc_init_array+0x44>)
 8004d48:	f001 f808 	bl	8005d5c <_init>
 8004d4c:	1b64      	subs	r4, r4, r5
 8004d4e:	10a4      	asrs	r4, r4, #2
 8004d50:	2600      	movs	r6, #0
 8004d52:	42a6      	cmp	r6, r4
 8004d54:	d105      	bne.n	8004d62 <__libc_init_array+0x2e>
 8004d56:	bd70      	pop	{r4, r5, r6, pc}
 8004d58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d5c:	4798      	blx	r3
 8004d5e:	3601      	adds	r6, #1
 8004d60:	e7ee      	b.n	8004d40 <__libc_init_array+0xc>
 8004d62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d66:	4798      	blx	r3
 8004d68:	3601      	adds	r6, #1
 8004d6a:	e7f2      	b.n	8004d52 <__libc_init_array+0x1e>
 8004d6c:	080066a0 	.word	0x080066a0
 8004d70:	080066a0 	.word	0x080066a0
 8004d74:	080066a0 	.word	0x080066a0
 8004d78:	080066a4 	.word	0x080066a4

08004d7c <memset>:
 8004d7c:	4402      	add	r2, r0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d100      	bne.n	8004d86 <memset+0xa>
 8004d84:	4770      	bx	lr
 8004d86:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8a:	e7f9      	b.n	8004d80 <memset+0x4>

08004d8c <pow>:
 8004d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d90:	ec59 8b10 	vmov	r8, r9, d0
 8004d94:	ec57 6b11 	vmov	r6, r7, d1
 8004d98:	f000 f8da 	bl	8004f50 <__ieee754_pow>
 8004d9c:	4b4e      	ldr	r3, [pc, #312]	; (8004ed8 <pow+0x14c>)
 8004d9e:	f993 3000 	ldrsb.w	r3, [r3]
 8004da2:	3301      	adds	r3, #1
 8004da4:	ec55 4b10 	vmov	r4, r5, d0
 8004da8:	d015      	beq.n	8004dd6 <pow+0x4a>
 8004daa:	4632      	mov	r2, r6
 8004dac:	463b      	mov	r3, r7
 8004dae:	4630      	mov	r0, r6
 8004db0:	4639      	mov	r1, r7
 8004db2:	f7fb fe7f 	bl	8000ab4 <__aeabi_dcmpun>
 8004db6:	b970      	cbnz	r0, 8004dd6 <pow+0x4a>
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	f7fb fe78 	bl	8000ab4 <__aeabi_dcmpun>
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	b148      	cbz	r0, 8004dde <pow+0x52>
 8004dca:	4630      	mov	r0, r6
 8004dcc:	4639      	mov	r1, r7
 8004dce:	f7fb fe3f 	bl	8000a50 <__aeabi_dcmpeq>
 8004dd2:	2800      	cmp	r0, #0
 8004dd4:	d17d      	bne.n	8004ed2 <pow+0x146>
 8004dd6:	ec45 4b10 	vmov	d0, r4, r5
 8004dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dde:	4640      	mov	r0, r8
 8004de0:	4649      	mov	r1, r9
 8004de2:	f7fb fe35 	bl	8000a50 <__aeabi_dcmpeq>
 8004de6:	b1e0      	cbz	r0, 8004e22 <pow+0x96>
 8004de8:	2200      	movs	r2, #0
 8004dea:	2300      	movs	r3, #0
 8004dec:	4630      	mov	r0, r6
 8004dee:	4639      	mov	r1, r7
 8004df0:	f7fb fe2e 	bl	8000a50 <__aeabi_dcmpeq>
 8004df4:	2800      	cmp	r0, #0
 8004df6:	d16c      	bne.n	8004ed2 <pow+0x146>
 8004df8:	ec47 6b10 	vmov	d0, r6, r7
 8004dfc:	f000 fe87 	bl	8005b0e <finite>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d0e8      	beq.n	8004dd6 <pow+0x4a>
 8004e04:	2200      	movs	r2, #0
 8004e06:	2300      	movs	r3, #0
 8004e08:	4630      	mov	r0, r6
 8004e0a:	4639      	mov	r1, r7
 8004e0c:	f7fb fe2a 	bl	8000a64 <__aeabi_dcmplt>
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d0e0      	beq.n	8004dd6 <pow+0x4a>
 8004e14:	f7ff ff88 	bl	8004d28 <__errno>
 8004e18:	2321      	movs	r3, #33	; 0x21
 8004e1a:	6003      	str	r3, [r0, #0]
 8004e1c:	2400      	movs	r4, #0
 8004e1e:	4d2f      	ldr	r5, [pc, #188]	; (8004edc <pow+0x150>)
 8004e20:	e7d9      	b.n	8004dd6 <pow+0x4a>
 8004e22:	ec45 4b10 	vmov	d0, r4, r5
 8004e26:	f000 fe72 	bl	8005b0e <finite>
 8004e2a:	bbb8      	cbnz	r0, 8004e9c <pow+0x110>
 8004e2c:	ec49 8b10 	vmov	d0, r8, r9
 8004e30:	f000 fe6d 	bl	8005b0e <finite>
 8004e34:	b390      	cbz	r0, 8004e9c <pow+0x110>
 8004e36:	ec47 6b10 	vmov	d0, r6, r7
 8004e3a:	f000 fe68 	bl	8005b0e <finite>
 8004e3e:	b368      	cbz	r0, 8004e9c <pow+0x110>
 8004e40:	4622      	mov	r2, r4
 8004e42:	462b      	mov	r3, r5
 8004e44:	4620      	mov	r0, r4
 8004e46:	4629      	mov	r1, r5
 8004e48:	f7fb fe34 	bl	8000ab4 <__aeabi_dcmpun>
 8004e4c:	b160      	cbz	r0, 8004e68 <pow+0xdc>
 8004e4e:	f7ff ff6b 	bl	8004d28 <__errno>
 8004e52:	2321      	movs	r3, #33	; 0x21
 8004e54:	6003      	str	r3, [r0, #0]
 8004e56:	2200      	movs	r2, #0
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4610      	mov	r0, r2
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	f7fb fcb9 	bl	80007d4 <__aeabi_ddiv>
 8004e62:	4604      	mov	r4, r0
 8004e64:	460d      	mov	r5, r1
 8004e66:	e7b6      	b.n	8004dd6 <pow+0x4a>
 8004e68:	f7ff ff5e 	bl	8004d28 <__errno>
 8004e6c:	2322      	movs	r3, #34	; 0x22
 8004e6e:	6003      	str	r3, [r0, #0]
 8004e70:	2200      	movs	r2, #0
 8004e72:	2300      	movs	r3, #0
 8004e74:	4640      	mov	r0, r8
 8004e76:	4649      	mov	r1, r9
 8004e78:	f7fb fdf4 	bl	8000a64 <__aeabi_dcmplt>
 8004e7c:	2400      	movs	r4, #0
 8004e7e:	b158      	cbz	r0, 8004e98 <pow+0x10c>
 8004e80:	ec47 6b10 	vmov	d0, r6, r7
 8004e84:	f000 fe58 	bl	8005b38 <rint>
 8004e88:	4632      	mov	r2, r6
 8004e8a:	ec51 0b10 	vmov	r0, r1, d0
 8004e8e:	463b      	mov	r3, r7
 8004e90:	f7fb fdde 	bl	8000a50 <__aeabi_dcmpeq>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	d0c2      	beq.n	8004e1e <pow+0x92>
 8004e98:	4d11      	ldr	r5, [pc, #68]	; (8004ee0 <pow+0x154>)
 8004e9a:	e79c      	b.n	8004dd6 <pow+0x4a>
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb fdd4 	bl	8000a50 <__aeabi_dcmpeq>
 8004ea8:	2800      	cmp	r0, #0
 8004eaa:	d094      	beq.n	8004dd6 <pow+0x4a>
 8004eac:	ec49 8b10 	vmov	d0, r8, r9
 8004eb0:	f000 fe2d 	bl	8005b0e <finite>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d08e      	beq.n	8004dd6 <pow+0x4a>
 8004eb8:	ec47 6b10 	vmov	d0, r6, r7
 8004ebc:	f000 fe27 	bl	8005b0e <finite>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d088      	beq.n	8004dd6 <pow+0x4a>
 8004ec4:	f7ff ff30 	bl	8004d28 <__errno>
 8004ec8:	2322      	movs	r3, #34	; 0x22
 8004eca:	6003      	str	r3, [r0, #0]
 8004ecc:	2400      	movs	r4, #0
 8004ece:	2500      	movs	r5, #0
 8004ed0:	e781      	b.n	8004dd6 <pow+0x4a>
 8004ed2:	4d04      	ldr	r5, [pc, #16]	; (8004ee4 <pow+0x158>)
 8004ed4:	2400      	movs	r4, #0
 8004ed6:	e77e      	b.n	8004dd6 <pow+0x4a>
 8004ed8:	20000074 	.word	0x20000074
 8004edc:	fff00000 	.word	0xfff00000
 8004ee0:	7ff00000 	.word	0x7ff00000
 8004ee4:	3ff00000 	.word	0x3ff00000

08004ee8 <sqrt>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	ed2d 8b02 	vpush	{d8}
 8004eee:	ec55 4b10 	vmov	r4, r5, d0
 8004ef2:	f000 fd4f 	bl	8005994 <__ieee754_sqrt>
 8004ef6:	4b15      	ldr	r3, [pc, #84]	; (8004f4c <sqrt+0x64>)
 8004ef8:	eeb0 8a40 	vmov.f32	s16, s0
 8004efc:	eef0 8a60 	vmov.f32	s17, s1
 8004f00:	f993 3000 	ldrsb.w	r3, [r3]
 8004f04:	3301      	adds	r3, #1
 8004f06:	d019      	beq.n	8004f3c <sqrt+0x54>
 8004f08:	4622      	mov	r2, r4
 8004f0a:	462b      	mov	r3, r5
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7fb fdd0 	bl	8000ab4 <__aeabi_dcmpun>
 8004f14:	b990      	cbnz	r0, 8004f3c <sqrt+0x54>
 8004f16:	2200      	movs	r2, #0
 8004f18:	2300      	movs	r3, #0
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	4629      	mov	r1, r5
 8004f1e:	f7fb fda1 	bl	8000a64 <__aeabi_dcmplt>
 8004f22:	b158      	cbz	r0, 8004f3c <sqrt+0x54>
 8004f24:	f7ff ff00 	bl	8004d28 <__errno>
 8004f28:	2321      	movs	r3, #33	; 0x21
 8004f2a:	6003      	str	r3, [r0, #0]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	2300      	movs	r3, #0
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	f7fb fc4e 	bl	80007d4 <__aeabi_ddiv>
 8004f38:	ec41 0b18 	vmov	d8, r0, r1
 8004f3c:	eeb0 0a48 	vmov.f32	s0, s16
 8004f40:	eef0 0a68 	vmov.f32	s1, s17
 8004f44:	ecbd 8b02 	vpop	{d8}
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	bf00      	nop
 8004f4c:	20000074 	.word	0x20000074

08004f50 <__ieee754_pow>:
 8004f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f54:	ed2d 8b06 	vpush	{d8-d10}
 8004f58:	b08d      	sub	sp, #52	; 0x34
 8004f5a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8004f5e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8004f62:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8004f66:	ea56 0100 	orrs.w	r1, r6, r0
 8004f6a:	ec53 2b10 	vmov	r2, r3, d0
 8004f6e:	f000 84d1 	beq.w	8005914 <__ieee754_pow+0x9c4>
 8004f72:	497f      	ldr	r1, [pc, #508]	; (8005170 <__ieee754_pow+0x220>)
 8004f74:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8004f78:	428c      	cmp	r4, r1
 8004f7a:	ee10 8a10 	vmov	r8, s0
 8004f7e:	4699      	mov	r9, r3
 8004f80:	dc09      	bgt.n	8004f96 <__ieee754_pow+0x46>
 8004f82:	d103      	bne.n	8004f8c <__ieee754_pow+0x3c>
 8004f84:	b97a      	cbnz	r2, 8004fa6 <__ieee754_pow+0x56>
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	dd02      	ble.n	8004f90 <__ieee754_pow+0x40>
 8004f8a:	e00c      	b.n	8004fa6 <__ieee754_pow+0x56>
 8004f8c:	428e      	cmp	r6, r1
 8004f8e:	dc02      	bgt.n	8004f96 <__ieee754_pow+0x46>
 8004f90:	428e      	cmp	r6, r1
 8004f92:	d110      	bne.n	8004fb6 <__ieee754_pow+0x66>
 8004f94:	b178      	cbz	r0, 8004fb6 <__ieee754_pow+0x66>
 8004f96:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004f9a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f9e:	ea54 0308 	orrs.w	r3, r4, r8
 8004fa2:	f000 84b7 	beq.w	8005914 <__ieee754_pow+0x9c4>
 8004fa6:	4873      	ldr	r0, [pc, #460]	; (8005174 <__ieee754_pow+0x224>)
 8004fa8:	b00d      	add	sp, #52	; 0x34
 8004faa:	ecbd 8b06 	vpop	{d8-d10}
 8004fae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb2:	f000 bdb9 	b.w	8005b28 <nan>
 8004fb6:	f1b9 0f00 	cmp.w	r9, #0
 8004fba:	da36      	bge.n	800502a <__ieee754_pow+0xda>
 8004fbc:	496e      	ldr	r1, [pc, #440]	; (8005178 <__ieee754_pow+0x228>)
 8004fbe:	428e      	cmp	r6, r1
 8004fc0:	dc51      	bgt.n	8005066 <__ieee754_pow+0x116>
 8004fc2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8004fc6:	428e      	cmp	r6, r1
 8004fc8:	f340 84af 	ble.w	800592a <__ieee754_pow+0x9da>
 8004fcc:	1531      	asrs	r1, r6, #20
 8004fce:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004fd2:	2914      	cmp	r1, #20
 8004fd4:	dd0f      	ble.n	8004ff6 <__ieee754_pow+0xa6>
 8004fd6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004fda:	fa20 fc01 	lsr.w	ip, r0, r1
 8004fde:	fa0c f101 	lsl.w	r1, ip, r1
 8004fe2:	4281      	cmp	r1, r0
 8004fe4:	f040 84a1 	bne.w	800592a <__ieee754_pow+0x9da>
 8004fe8:	f00c 0c01 	and.w	ip, ip, #1
 8004fec:	f1cc 0102 	rsb	r1, ip, #2
 8004ff0:	9100      	str	r1, [sp, #0]
 8004ff2:	b180      	cbz	r0, 8005016 <__ieee754_pow+0xc6>
 8004ff4:	e059      	b.n	80050aa <__ieee754_pow+0x15a>
 8004ff6:	2800      	cmp	r0, #0
 8004ff8:	d155      	bne.n	80050a6 <__ieee754_pow+0x156>
 8004ffa:	f1c1 0114 	rsb	r1, r1, #20
 8004ffe:	fa46 fc01 	asr.w	ip, r6, r1
 8005002:	fa0c f101 	lsl.w	r1, ip, r1
 8005006:	42b1      	cmp	r1, r6
 8005008:	f040 848c 	bne.w	8005924 <__ieee754_pow+0x9d4>
 800500c:	f00c 0c01 	and.w	ip, ip, #1
 8005010:	f1cc 0102 	rsb	r1, ip, #2
 8005014:	9100      	str	r1, [sp, #0]
 8005016:	4959      	ldr	r1, [pc, #356]	; (800517c <__ieee754_pow+0x22c>)
 8005018:	428e      	cmp	r6, r1
 800501a:	d12d      	bne.n	8005078 <__ieee754_pow+0x128>
 800501c:	2f00      	cmp	r7, #0
 800501e:	da79      	bge.n	8005114 <__ieee754_pow+0x1c4>
 8005020:	4956      	ldr	r1, [pc, #344]	; (800517c <__ieee754_pow+0x22c>)
 8005022:	2000      	movs	r0, #0
 8005024:	f7fb fbd6 	bl	80007d4 <__aeabi_ddiv>
 8005028:	e016      	b.n	8005058 <__ieee754_pow+0x108>
 800502a:	2100      	movs	r1, #0
 800502c:	9100      	str	r1, [sp, #0]
 800502e:	2800      	cmp	r0, #0
 8005030:	d13b      	bne.n	80050aa <__ieee754_pow+0x15a>
 8005032:	494f      	ldr	r1, [pc, #316]	; (8005170 <__ieee754_pow+0x220>)
 8005034:	428e      	cmp	r6, r1
 8005036:	d1ee      	bne.n	8005016 <__ieee754_pow+0xc6>
 8005038:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800503c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005040:	ea53 0308 	orrs.w	r3, r3, r8
 8005044:	f000 8466 	beq.w	8005914 <__ieee754_pow+0x9c4>
 8005048:	4b4d      	ldr	r3, [pc, #308]	; (8005180 <__ieee754_pow+0x230>)
 800504a:	429c      	cmp	r4, r3
 800504c:	dd0d      	ble.n	800506a <__ieee754_pow+0x11a>
 800504e:	2f00      	cmp	r7, #0
 8005050:	f280 8464 	bge.w	800591c <__ieee754_pow+0x9cc>
 8005054:	2000      	movs	r0, #0
 8005056:	2100      	movs	r1, #0
 8005058:	ec41 0b10 	vmov	d0, r0, r1
 800505c:	b00d      	add	sp, #52	; 0x34
 800505e:	ecbd 8b06 	vpop	{d8-d10}
 8005062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005066:	2102      	movs	r1, #2
 8005068:	e7e0      	b.n	800502c <__ieee754_pow+0xdc>
 800506a:	2f00      	cmp	r7, #0
 800506c:	daf2      	bge.n	8005054 <__ieee754_pow+0x104>
 800506e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005072:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005076:	e7ef      	b.n	8005058 <__ieee754_pow+0x108>
 8005078:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800507c:	d104      	bne.n	8005088 <__ieee754_pow+0x138>
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	f7fb fa7d 	bl	8000580 <__aeabi_dmul>
 8005086:	e7e7      	b.n	8005058 <__ieee754_pow+0x108>
 8005088:	493e      	ldr	r1, [pc, #248]	; (8005184 <__ieee754_pow+0x234>)
 800508a:	428f      	cmp	r7, r1
 800508c:	d10d      	bne.n	80050aa <__ieee754_pow+0x15a>
 800508e:	f1b9 0f00 	cmp.w	r9, #0
 8005092:	db0a      	blt.n	80050aa <__ieee754_pow+0x15a>
 8005094:	ec43 2b10 	vmov	d0, r2, r3
 8005098:	b00d      	add	sp, #52	; 0x34
 800509a:	ecbd 8b06 	vpop	{d8-d10}
 800509e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a2:	f000 bc77 	b.w	8005994 <__ieee754_sqrt>
 80050a6:	2100      	movs	r1, #0
 80050a8:	9100      	str	r1, [sp, #0]
 80050aa:	ec43 2b10 	vmov	d0, r2, r3
 80050ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050b2:	f000 fd23 	bl	8005afc <fabs>
 80050b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ba:	ec51 0b10 	vmov	r0, r1, d0
 80050be:	f1b8 0f00 	cmp.w	r8, #0
 80050c2:	d12a      	bne.n	800511a <__ieee754_pow+0x1ca>
 80050c4:	b12c      	cbz	r4, 80050d2 <__ieee754_pow+0x182>
 80050c6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800517c <__ieee754_pow+0x22c>
 80050ca:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80050ce:	45e6      	cmp	lr, ip
 80050d0:	d123      	bne.n	800511a <__ieee754_pow+0x1ca>
 80050d2:	2f00      	cmp	r7, #0
 80050d4:	da05      	bge.n	80050e2 <__ieee754_pow+0x192>
 80050d6:	4602      	mov	r2, r0
 80050d8:	460b      	mov	r3, r1
 80050da:	2000      	movs	r0, #0
 80050dc:	4927      	ldr	r1, [pc, #156]	; (800517c <__ieee754_pow+0x22c>)
 80050de:	f7fb fb79 	bl	80007d4 <__aeabi_ddiv>
 80050e2:	f1b9 0f00 	cmp.w	r9, #0
 80050e6:	dab7      	bge.n	8005058 <__ieee754_pow+0x108>
 80050e8:	9b00      	ldr	r3, [sp, #0]
 80050ea:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80050ee:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80050f2:	4323      	orrs	r3, r4
 80050f4:	d108      	bne.n	8005108 <__ieee754_pow+0x1b8>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4610      	mov	r0, r2
 80050fc:	4619      	mov	r1, r3
 80050fe:	f7fb f887 	bl	8000210 <__aeabi_dsub>
 8005102:	4602      	mov	r2, r0
 8005104:	460b      	mov	r3, r1
 8005106:	e78d      	b.n	8005024 <__ieee754_pow+0xd4>
 8005108:	9b00      	ldr	r3, [sp, #0]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d1a4      	bne.n	8005058 <__ieee754_pow+0x108>
 800510e:	4602      	mov	r2, r0
 8005110:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005114:	4610      	mov	r0, r2
 8005116:	4619      	mov	r1, r3
 8005118:	e79e      	b.n	8005058 <__ieee754_pow+0x108>
 800511a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800511e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8005122:	950a      	str	r5, [sp, #40]	; 0x28
 8005124:	9d00      	ldr	r5, [sp, #0]
 8005126:	46ac      	mov	ip, r5
 8005128:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800512a:	ea5c 0505 	orrs.w	r5, ip, r5
 800512e:	d0e4      	beq.n	80050fa <__ieee754_pow+0x1aa>
 8005130:	4b15      	ldr	r3, [pc, #84]	; (8005188 <__ieee754_pow+0x238>)
 8005132:	429e      	cmp	r6, r3
 8005134:	f340 80fc 	ble.w	8005330 <__ieee754_pow+0x3e0>
 8005138:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800513c:	429e      	cmp	r6, r3
 800513e:	4b10      	ldr	r3, [pc, #64]	; (8005180 <__ieee754_pow+0x230>)
 8005140:	dd07      	ble.n	8005152 <__ieee754_pow+0x202>
 8005142:	429c      	cmp	r4, r3
 8005144:	dc0a      	bgt.n	800515c <__ieee754_pow+0x20c>
 8005146:	2f00      	cmp	r7, #0
 8005148:	da84      	bge.n	8005054 <__ieee754_pow+0x104>
 800514a:	a307      	add	r3, pc, #28	; (adr r3, 8005168 <__ieee754_pow+0x218>)
 800514c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005150:	e795      	b.n	800507e <__ieee754_pow+0x12e>
 8005152:	429c      	cmp	r4, r3
 8005154:	dbf7      	blt.n	8005146 <__ieee754_pow+0x1f6>
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <__ieee754_pow+0x22c>)
 8005158:	429c      	cmp	r4, r3
 800515a:	dd17      	ble.n	800518c <__ieee754_pow+0x23c>
 800515c:	2f00      	cmp	r7, #0
 800515e:	dcf4      	bgt.n	800514a <__ieee754_pow+0x1fa>
 8005160:	e778      	b.n	8005054 <__ieee754_pow+0x104>
 8005162:	bf00      	nop
 8005164:	f3af 8000 	nop.w
 8005168:	8800759c 	.word	0x8800759c
 800516c:	7e37e43c 	.word	0x7e37e43c
 8005170:	7ff00000 	.word	0x7ff00000
 8005174:	08006654 	.word	0x08006654
 8005178:	433fffff 	.word	0x433fffff
 800517c:	3ff00000 	.word	0x3ff00000
 8005180:	3fefffff 	.word	0x3fefffff
 8005184:	3fe00000 	.word	0x3fe00000
 8005188:	41e00000 	.word	0x41e00000
 800518c:	4b64      	ldr	r3, [pc, #400]	; (8005320 <__ieee754_pow+0x3d0>)
 800518e:	2200      	movs	r2, #0
 8005190:	f7fb f83e 	bl	8000210 <__aeabi_dsub>
 8005194:	a356      	add	r3, pc, #344	; (adr r3, 80052f0 <__ieee754_pow+0x3a0>)
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	4604      	mov	r4, r0
 800519c:	460d      	mov	r5, r1
 800519e:	f7fb f9ef 	bl	8000580 <__aeabi_dmul>
 80051a2:	a355      	add	r3, pc, #340	; (adr r3, 80052f8 <__ieee754_pow+0x3a8>)
 80051a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a8:	4606      	mov	r6, r0
 80051aa:	460f      	mov	r7, r1
 80051ac:	4620      	mov	r0, r4
 80051ae:	4629      	mov	r1, r5
 80051b0:	f7fb f9e6 	bl	8000580 <__aeabi_dmul>
 80051b4:	4b5b      	ldr	r3, [pc, #364]	; (8005324 <__ieee754_pow+0x3d4>)
 80051b6:	4682      	mov	sl, r0
 80051b8:	468b      	mov	fp, r1
 80051ba:	2200      	movs	r2, #0
 80051bc:	4620      	mov	r0, r4
 80051be:	4629      	mov	r1, r5
 80051c0:	f7fb f9de 	bl	8000580 <__aeabi_dmul>
 80051c4:	4602      	mov	r2, r0
 80051c6:	460b      	mov	r3, r1
 80051c8:	a14d      	add	r1, pc, #308	; (adr r1, 8005300 <__ieee754_pow+0x3b0>)
 80051ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051ce:	f7fb f81f 	bl	8000210 <__aeabi_dsub>
 80051d2:	4622      	mov	r2, r4
 80051d4:	462b      	mov	r3, r5
 80051d6:	f7fb f9d3 	bl	8000580 <__aeabi_dmul>
 80051da:	4602      	mov	r2, r0
 80051dc:	460b      	mov	r3, r1
 80051de:	2000      	movs	r0, #0
 80051e0:	4951      	ldr	r1, [pc, #324]	; (8005328 <__ieee754_pow+0x3d8>)
 80051e2:	f7fb f815 	bl	8000210 <__aeabi_dsub>
 80051e6:	4622      	mov	r2, r4
 80051e8:	4680      	mov	r8, r0
 80051ea:	4689      	mov	r9, r1
 80051ec:	462b      	mov	r3, r5
 80051ee:	4620      	mov	r0, r4
 80051f0:	4629      	mov	r1, r5
 80051f2:	f7fb f9c5 	bl	8000580 <__aeabi_dmul>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4640      	mov	r0, r8
 80051fc:	4649      	mov	r1, r9
 80051fe:	f7fb f9bf 	bl	8000580 <__aeabi_dmul>
 8005202:	a341      	add	r3, pc, #260	; (adr r3, 8005308 <__ieee754_pow+0x3b8>)
 8005204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005208:	f7fb f9ba 	bl	8000580 <__aeabi_dmul>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4650      	mov	r0, sl
 8005212:	4659      	mov	r1, fp
 8005214:	f7fa fffc 	bl	8000210 <__aeabi_dsub>
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4680      	mov	r8, r0
 800521e:	4689      	mov	r9, r1
 8005220:	4630      	mov	r0, r6
 8005222:	4639      	mov	r1, r7
 8005224:	f7fa fff6 	bl	8000214 <__adddf3>
 8005228:	2400      	movs	r4, #0
 800522a:	4632      	mov	r2, r6
 800522c:	463b      	mov	r3, r7
 800522e:	4620      	mov	r0, r4
 8005230:	460d      	mov	r5, r1
 8005232:	f7fa ffed 	bl	8000210 <__aeabi_dsub>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4640      	mov	r0, r8
 800523c:	4649      	mov	r1, r9
 800523e:	f7fa ffe7 	bl	8000210 <__aeabi_dsub>
 8005242:	9b00      	ldr	r3, [sp, #0]
 8005244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005246:	3b01      	subs	r3, #1
 8005248:	4313      	orrs	r3, r2
 800524a:	4682      	mov	sl, r0
 800524c:	468b      	mov	fp, r1
 800524e:	f040 81f1 	bne.w	8005634 <__ieee754_pow+0x6e4>
 8005252:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8005310 <__ieee754_pow+0x3c0>
 8005256:	eeb0 8a47 	vmov.f32	s16, s14
 800525a:	eef0 8a67 	vmov.f32	s17, s15
 800525e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005262:	2600      	movs	r6, #0
 8005264:	4632      	mov	r2, r6
 8005266:	463b      	mov	r3, r7
 8005268:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800526c:	f7fa ffd0 	bl	8000210 <__aeabi_dsub>
 8005270:	4622      	mov	r2, r4
 8005272:	462b      	mov	r3, r5
 8005274:	f7fb f984 	bl	8000580 <__aeabi_dmul>
 8005278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800527c:	4680      	mov	r8, r0
 800527e:	4689      	mov	r9, r1
 8005280:	4650      	mov	r0, sl
 8005282:	4659      	mov	r1, fp
 8005284:	f7fb f97c 	bl	8000580 <__aeabi_dmul>
 8005288:	4602      	mov	r2, r0
 800528a:	460b      	mov	r3, r1
 800528c:	4640      	mov	r0, r8
 800528e:	4649      	mov	r1, r9
 8005290:	f7fa ffc0 	bl	8000214 <__adddf3>
 8005294:	4632      	mov	r2, r6
 8005296:	463b      	mov	r3, r7
 8005298:	4680      	mov	r8, r0
 800529a:	4689      	mov	r9, r1
 800529c:	4620      	mov	r0, r4
 800529e:	4629      	mov	r1, r5
 80052a0:	f7fb f96e 	bl	8000580 <__aeabi_dmul>
 80052a4:	460b      	mov	r3, r1
 80052a6:	4604      	mov	r4, r0
 80052a8:	460d      	mov	r5, r1
 80052aa:	4602      	mov	r2, r0
 80052ac:	4649      	mov	r1, r9
 80052ae:	4640      	mov	r0, r8
 80052b0:	f7fa ffb0 	bl	8000214 <__adddf3>
 80052b4:	4b1d      	ldr	r3, [pc, #116]	; (800532c <__ieee754_pow+0x3dc>)
 80052b6:	4299      	cmp	r1, r3
 80052b8:	ec45 4b19 	vmov	d9, r4, r5
 80052bc:	4606      	mov	r6, r0
 80052be:	460f      	mov	r7, r1
 80052c0:	468b      	mov	fp, r1
 80052c2:	f340 82fe 	ble.w	80058c2 <__ieee754_pow+0x972>
 80052c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80052ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80052ce:	4303      	orrs	r3, r0
 80052d0:	f000 81f0 	beq.w	80056b4 <__ieee754_pow+0x764>
 80052d4:	a310      	add	r3, pc, #64	; (adr r3, 8005318 <__ieee754_pow+0x3c8>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	ec51 0b18 	vmov	r0, r1, d8
 80052de:	f7fb f94f 	bl	8000580 <__aeabi_dmul>
 80052e2:	a30d      	add	r3, pc, #52	; (adr r3, 8005318 <__ieee754_pow+0x3c8>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	e6cb      	b.n	8005082 <__ieee754_pow+0x132>
 80052ea:	bf00      	nop
 80052ec:	f3af 8000 	nop.w
 80052f0:	60000000 	.word	0x60000000
 80052f4:	3ff71547 	.word	0x3ff71547
 80052f8:	f85ddf44 	.word	0xf85ddf44
 80052fc:	3e54ae0b 	.word	0x3e54ae0b
 8005300:	55555555 	.word	0x55555555
 8005304:	3fd55555 	.word	0x3fd55555
 8005308:	652b82fe 	.word	0x652b82fe
 800530c:	3ff71547 	.word	0x3ff71547
 8005310:	00000000 	.word	0x00000000
 8005314:	bff00000 	.word	0xbff00000
 8005318:	8800759c 	.word	0x8800759c
 800531c:	7e37e43c 	.word	0x7e37e43c
 8005320:	3ff00000 	.word	0x3ff00000
 8005324:	3fd00000 	.word	0x3fd00000
 8005328:	3fe00000 	.word	0x3fe00000
 800532c:	408fffff 	.word	0x408fffff
 8005330:	4bd7      	ldr	r3, [pc, #860]	; (8005690 <__ieee754_pow+0x740>)
 8005332:	ea03 0309 	and.w	r3, r3, r9
 8005336:	2200      	movs	r2, #0
 8005338:	b92b      	cbnz	r3, 8005346 <__ieee754_pow+0x3f6>
 800533a:	4bd6      	ldr	r3, [pc, #856]	; (8005694 <__ieee754_pow+0x744>)
 800533c:	f7fb f920 	bl	8000580 <__aeabi_dmul>
 8005340:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005344:	460c      	mov	r4, r1
 8005346:	1523      	asrs	r3, r4, #20
 8005348:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800534c:	4413      	add	r3, r2
 800534e:	9309      	str	r3, [sp, #36]	; 0x24
 8005350:	4bd1      	ldr	r3, [pc, #836]	; (8005698 <__ieee754_pow+0x748>)
 8005352:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005356:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800535a:	429c      	cmp	r4, r3
 800535c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005360:	dd08      	ble.n	8005374 <__ieee754_pow+0x424>
 8005362:	4bce      	ldr	r3, [pc, #824]	; (800569c <__ieee754_pow+0x74c>)
 8005364:	429c      	cmp	r4, r3
 8005366:	f340 8163 	ble.w	8005630 <__ieee754_pow+0x6e0>
 800536a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800536c:	3301      	adds	r3, #1
 800536e:	9309      	str	r3, [sp, #36]	; 0x24
 8005370:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005374:	2400      	movs	r4, #0
 8005376:	00e3      	lsls	r3, r4, #3
 8005378:	930b      	str	r3, [sp, #44]	; 0x2c
 800537a:	4bc9      	ldr	r3, [pc, #804]	; (80056a0 <__ieee754_pow+0x750>)
 800537c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005380:	ed93 7b00 	vldr	d7, [r3]
 8005384:	4629      	mov	r1, r5
 8005386:	ec53 2b17 	vmov	r2, r3, d7
 800538a:	eeb0 8a47 	vmov.f32	s16, s14
 800538e:	eef0 8a67 	vmov.f32	s17, s15
 8005392:	4682      	mov	sl, r0
 8005394:	f7fa ff3c 	bl	8000210 <__aeabi_dsub>
 8005398:	4652      	mov	r2, sl
 800539a:	4606      	mov	r6, r0
 800539c:	460f      	mov	r7, r1
 800539e:	462b      	mov	r3, r5
 80053a0:	ec51 0b18 	vmov	r0, r1, d8
 80053a4:	f7fa ff36 	bl	8000214 <__adddf3>
 80053a8:	4602      	mov	r2, r0
 80053aa:	460b      	mov	r3, r1
 80053ac:	2000      	movs	r0, #0
 80053ae:	49bd      	ldr	r1, [pc, #756]	; (80056a4 <__ieee754_pow+0x754>)
 80053b0:	f7fb fa10 	bl	80007d4 <__aeabi_ddiv>
 80053b4:	ec41 0b19 	vmov	d9, r0, r1
 80053b8:	4602      	mov	r2, r0
 80053ba:	460b      	mov	r3, r1
 80053bc:	4630      	mov	r0, r6
 80053be:	4639      	mov	r1, r7
 80053c0:	f7fb f8de 	bl	8000580 <__aeabi_dmul>
 80053c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053d0:	2300      	movs	r3, #0
 80053d2:	9304      	str	r3, [sp, #16]
 80053d4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80053d8:	46ab      	mov	fp, r5
 80053da:	106d      	asrs	r5, r5, #1
 80053dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80053e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80053e4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80053e8:	2200      	movs	r2, #0
 80053ea:	4640      	mov	r0, r8
 80053ec:	4649      	mov	r1, r9
 80053ee:	4614      	mov	r4, r2
 80053f0:	461d      	mov	r5, r3
 80053f2:	f7fb f8c5 	bl	8000580 <__aeabi_dmul>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	4630      	mov	r0, r6
 80053fc:	4639      	mov	r1, r7
 80053fe:	f7fa ff07 	bl	8000210 <__aeabi_dsub>
 8005402:	ec53 2b18 	vmov	r2, r3, d8
 8005406:	4606      	mov	r6, r0
 8005408:	460f      	mov	r7, r1
 800540a:	4620      	mov	r0, r4
 800540c:	4629      	mov	r1, r5
 800540e:	f7fa feff 	bl	8000210 <__aeabi_dsub>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	4650      	mov	r0, sl
 8005418:	4659      	mov	r1, fp
 800541a:	f7fa fef9 	bl	8000210 <__aeabi_dsub>
 800541e:	4642      	mov	r2, r8
 8005420:	464b      	mov	r3, r9
 8005422:	f7fb f8ad 	bl	8000580 <__aeabi_dmul>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4630      	mov	r0, r6
 800542c:	4639      	mov	r1, r7
 800542e:	f7fa feef 	bl	8000210 <__aeabi_dsub>
 8005432:	ec53 2b19 	vmov	r2, r3, d9
 8005436:	f7fb f8a3 	bl	8000580 <__aeabi_dmul>
 800543a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800543e:	ec41 0b18 	vmov	d8, r0, r1
 8005442:	4610      	mov	r0, r2
 8005444:	4619      	mov	r1, r3
 8005446:	f7fb f89b 	bl	8000580 <__aeabi_dmul>
 800544a:	a37d      	add	r3, pc, #500	; (adr r3, 8005640 <__ieee754_pow+0x6f0>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	4604      	mov	r4, r0
 8005452:	460d      	mov	r5, r1
 8005454:	f7fb f894 	bl	8000580 <__aeabi_dmul>
 8005458:	a37b      	add	r3, pc, #492	; (adr r3, 8005648 <__ieee754_pow+0x6f8>)
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f7fa fed9 	bl	8000214 <__adddf3>
 8005462:	4622      	mov	r2, r4
 8005464:	462b      	mov	r3, r5
 8005466:	f7fb f88b 	bl	8000580 <__aeabi_dmul>
 800546a:	a379      	add	r3, pc, #484	; (adr r3, 8005650 <__ieee754_pow+0x700>)
 800546c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005470:	f7fa fed0 	bl	8000214 <__adddf3>
 8005474:	4622      	mov	r2, r4
 8005476:	462b      	mov	r3, r5
 8005478:	f7fb f882 	bl	8000580 <__aeabi_dmul>
 800547c:	a376      	add	r3, pc, #472	; (adr r3, 8005658 <__ieee754_pow+0x708>)
 800547e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005482:	f7fa fec7 	bl	8000214 <__adddf3>
 8005486:	4622      	mov	r2, r4
 8005488:	462b      	mov	r3, r5
 800548a:	f7fb f879 	bl	8000580 <__aeabi_dmul>
 800548e:	a374      	add	r3, pc, #464	; (adr r3, 8005660 <__ieee754_pow+0x710>)
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f7fa febe 	bl	8000214 <__adddf3>
 8005498:	4622      	mov	r2, r4
 800549a:	462b      	mov	r3, r5
 800549c:	f7fb f870 	bl	8000580 <__aeabi_dmul>
 80054a0:	a371      	add	r3, pc, #452	; (adr r3, 8005668 <__ieee754_pow+0x718>)
 80054a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a6:	f7fa feb5 	bl	8000214 <__adddf3>
 80054aa:	4622      	mov	r2, r4
 80054ac:	4606      	mov	r6, r0
 80054ae:	460f      	mov	r7, r1
 80054b0:	462b      	mov	r3, r5
 80054b2:	4620      	mov	r0, r4
 80054b4:	4629      	mov	r1, r5
 80054b6:	f7fb f863 	bl	8000580 <__aeabi_dmul>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4630      	mov	r0, r6
 80054c0:	4639      	mov	r1, r7
 80054c2:	f7fb f85d 	bl	8000580 <__aeabi_dmul>
 80054c6:	4642      	mov	r2, r8
 80054c8:	4604      	mov	r4, r0
 80054ca:	460d      	mov	r5, r1
 80054cc:	464b      	mov	r3, r9
 80054ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054d2:	f7fa fe9f 	bl	8000214 <__adddf3>
 80054d6:	ec53 2b18 	vmov	r2, r3, d8
 80054da:	f7fb f851 	bl	8000580 <__aeabi_dmul>
 80054de:	4622      	mov	r2, r4
 80054e0:	462b      	mov	r3, r5
 80054e2:	f7fa fe97 	bl	8000214 <__adddf3>
 80054e6:	4642      	mov	r2, r8
 80054e8:	4682      	mov	sl, r0
 80054ea:	468b      	mov	fp, r1
 80054ec:	464b      	mov	r3, r9
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	f7fb f845 	bl	8000580 <__aeabi_dmul>
 80054f6:	4b6c      	ldr	r3, [pc, #432]	; (80056a8 <__ieee754_pow+0x758>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	4606      	mov	r6, r0
 80054fc:	460f      	mov	r7, r1
 80054fe:	f7fa fe89 	bl	8000214 <__adddf3>
 8005502:	4652      	mov	r2, sl
 8005504:	465b      	mov	r3, fp
 8005506:	f7fa fe85 	bl	8000214 <__adddf3>
 800550a:	9c04      	ldr	r4, [sp, #16]
 800550c:	460d      	mov	r5, r1
 800550e:	4622      	mov	r2, r4
 8005510:	460b      	mov	r3, r1
 8005512:	4640      	mov	r0, r8
 8005514:	4649      	mov	r1, r9
 8005516:	f7fb f833 	bl	8000580 <__aeabi_dmul>
 800551a:	4b63      	ldr	r3, [pc, #396]	; (80056a8 <__ieee754_pow+0x758>)
 800551c:	4680      	mov	r8, r0
 800551e:	4689      	mov	r9, r1
 8005520:	2200      	movs	r2, #0
 8005522:	4620      	mov	r0, r4
 8005524:	4629      	mov	r1, r5
 8005526:	f7fa fe73 	bl	8000210 <__aeabi_dsub>
 800552a:	4632      	mov	r2, r6
 800552c:	463b      	mov	r3, r7
 800552e:	f7fa fe6f 	bl	8000210 <__aeabi_dsub>
 8005532:	4602      	mov	r2, r0
 8005534:	460b      	mov	r3, r1
 8005536:	4650      	mov	r0, sl
 8005538:	4659      	mov	r1, fp
 800553a:	f7fa fe69 	bl	8000210 <__aeabi_dsub>
 800553e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005542:	f7fb f81d 	bl	8000580 <__aeabi_dmul>
 8005546:	4622      	mov	r2, r4
 8005548:	4606      	mov	r6, r0
 800554a:	460f      	mov	r7, r1
 800554c:	462b      	mov	r3, r5
 800554e:	ec51 0b18 	vmov	r0, r1, d8
 8005552:	f7fb f815 	bl	8000580 <__aeabi_dmul>
 8005556:	4602      	mov	r2, r0
 8005558:	460b      	mov	r3, r1
 800555a:	4630      	mov	r0, r6
 800555c:	4639      	mov	r1, r7
 800555e:	f7fa fe59 	bl	8000214 <__adddf3>
 8005562:	4606      	mov	r6, r0
 8005564:	460f      	mov	r7, r1
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4640      	mov	r0, r8
 800556c:	4649      	mov	r1, r9
 800556e:	f7fa fe51 	bl	8000214 <__adddf3>
 8005572:	9c04      	ldr	r4, [sp, #16]
 8005574:	a33e      	add	r3, pc, #248	; (adr r3, 8005670 <__ieee754_pow+0x720>)
 8005576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557a:	4620      	mov	r0, r4
 800557c:	460d      	mov	r5, r1
 800557e:	f7fa ffff 	bl	8000580 <__aeabi_dmul>
 8005582:	4642      	mov	r2, r8
 8005584:	ec41 0b18 	vmov	d8, r0, r1
 8005588:	464b      	mov	r3, r9
 800558a:	4620      	mov	r0, r4
 800558c:	4629      	mov	r1, r5
 800558e:	f7fa fe3f 	bl	8000210 <__aeabi_dsub>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4630      	mov	r0, r6
 8005598:	4639      	mov	r1, r7
 800559a:	f7fa fe39 	bl	8000210 <__aeabi_dsub>
 800559e:	a336      	add	r3, pc, #216	; (adr r3, 8005678 <__ieee754_pow+0x728>)
 80055a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055a4:	f7fa ffec 	bl	8000580 <__aeabi_dmul>
 80055a8:	a335      	add	r3, pc, #212	; (adr r3, 8005680 <__ieee754_pow+0x730>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	4606      	mov	r6, r0
 80055b0:	460f      	mov	r7, r1
 80055b2:	4620      	mov	r0, r4
 80055b4:	4629      	mov	r1, r5
 80055b6:	f7fa ffe3 	bl	8000580 <__aeabi_dmul>
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	4630      	mov	r0, r6
 80055c0:	4639      	mov	r1, r7
 80055c2:	f7fa fe27 	bl	8000214 <__adddf3>
 80055c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055c8:	4b38      	ldr	r3, [pc, #224]	; (80056ac <__ieee754_pow+0x75c>)
 80055ca:	4413      	add	r3, r2
 80055cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055d0:	f7fa fe20 	bl	8000214 <__adddf3>
 80055d4:	4682      	mov	sl, r0
 80055d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055d8:	468b      	mov	fp, r1
 80055da:	f7fa ff67 	bl	80004ac <__aeabi_i2d>
 80055de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80055e0:	4b33      	ldr	r3, [pc, #204]	; (80056b0 <__ieee754_pow+0x760>)
 80055e2:	4413      	add	r3, r2
 80055e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055e8:	4606      	mov	r6, r0
 80055ea:	460f      	mov	r7, r1
 80055ec:	4652      	mov	r2, sl
 80055ee:	465b      	mov	r3, fp
 80055f0:	ec51 0b18 	vmov	r0, r1, d8
 80055f4:	f7fa fe0e 	bl	8000214 <__adddf3>
 80055f8:	4642      	mov	r2, r8
 80055fa:	464b      	mov	r3, r9
 80055fc:	f7fa fe0a 	bl	8000214 <__adddf3>
 8005600:	4632      	mov	r2, r6
 8005602:	463b      	mov	r3, r7
 8005604:	f7fa fe06 	bl	8000214 <__adddf3>
 8005608:	9c04      	ldr	r4, [sp, #16]
 800560a:	4632      	mov	r2, r6
 800560c:	463b      	mov	r3, r7
 800560e:	4620      	mov	r0, r4
 8005610:	460d      	mov	r5, r1
 8005612:	f7fa fdfd 	bl	8000210 <__aeabi_dsub>
 8005616:	4642      	mov	r2, r8
 8005618:	464b      	mov	r3, r9
 800561a:	f7fa fdf9 	bl	8000210 <__aeabi_dsub>
 800561e:	ec53 2b18 	vmov	r2, r3, d8
 8005622:	f7fa fdf5 	bl	8000210 <__aeabi_dsub>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4650      	mov	r0, sl
 800562c:	4659      	mov	r1, fp
 800562e:	e606      	b.n	800523e <__ieee754_pow+0x2ee>
 8005630:	2401      	movs	r4, #1
 8005632:	e6a0      	b.n	8005376 <__ieee754_pow+0x426>
 8005634:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005688 <__ieee754_pow+0x738>
 8005638:	e60d      	b.n	8005256 <__ieee754_pow+0x306>
 800563a:	bf00      	nop
 800563c:	f3af 8000 	nop.w
 8005640:	4a454eef 	.word	0x4a454eef
 8005644:	3fca7e28 	.word	0x3fca7e28
 8005648:	93c9db65 	.word	0x93c9db65
 800564c:	3fcd864a 	.word	0x3fcd864a
 8005650:	a91d4101 	.word	0xa91d4101
 8005654:	3fd17460 	.word	0x3fd17460
 8005658:	518f264d 	.word	0x518f264d
 800565c:	3fd55555 	.word	0x3fd55555
 8005660:	db6fabff 	.word	0xdb6fabff
 8005664:	3fdb6db6 	.word	0x3fdb6db6
 8005668:	33333303 	.word	0x33333303
 800566c:	3fe33333 	.word	0x3fe33333
 8005670:	e0000000 	.word	0xe0000000
 8005674:	3feec709 	.word	0x3feec709
 8005678:	dc3a03fd 	.word	0xdc3a03fd
 800567c:	3feec709 	.word	0x3feec709
 8005680:	145b01f5 	.word	0x145b01f5
 8005684:	be3e2fe0 	.word	0xbe3e2fe0
 8005688:	00000000 	.word	0x00000000
 800568c:	3ff00000 	.word	0x3ff00000
 8005690:	7ff00000 	.word	0x7ff00000
 8005694:	43400000 	.word	0x43400000
 8005698:	0003988e 	.word	0x0003988e
 800569c:	000bb679 	.word	0x000bb679
 80056a0:	08006658 	.word	0x08006658
 80056a4:	3ff00000 	.word	0x3ff00000
 80056a8:	40080000 	.word	0x40080000
 80056ac:	08006678 	.word	0x08006678
 80056b0:	08006668 	.word	0x08006668
 80056b4:	a3b5      	add	r3, pc, #724	; (adr r3, 800598c <__ieee754_pow+0xa3c>)
 80056b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ba:	4640      	mov	r0, r8
 80056bc:	4649      	mov	r1, r9
 80056be:	f7fa fda9 	bl	8000214 <__adddf3>
 80056c2:	4622      	mov	r2, r4
 80056c4:	ec41 0b1a 	vmov	d10, r0, r1
 80056c8:	462b      	mov	r3, r5
 80056ca:	4630      	mov	r0, r6
 80056cc:	4639      	mov	r1, r7
 80056ce:	f7fa fd9f 	bl	8000210 <__aeabi_dsub>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	ec51 0b1a 	vmov	r0, r1, d10
 80056da:	f7fb f9e1 	bl	8000aa0 <__aeabi_dcmpgt>
 80056de:	2800      	cmp	r0, #0
 80056e0:	f47f adf8 	bne.w	80052d4 <__ieee754_pow+0x384>
 80056e4:	4aa4      	ldr	r2, [pc, #656]	; (8005978 <__ieee754_pow+0xa28>)
 80056e6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056ea:	4293      	cmp	r3, r2
 80056ec:	f340 810b 	ble.w	8005906 <__ieee754_pow+0x9b6>
 80056f0:	151b      	asrs	r3, r3, #20
 80056f2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80056f6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80056fa:	fa4a f303 	asr.w	r3, sl, r3
 80056fe:	445b      	add	r3, fp
 8005700:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005704:	4e9d      	ldr	r6, [pc, #628]	; (800597c <__ieee754_pow+0xa2c>)
 8005706:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800570a:	4116      	asrs	r6, r2
 800570c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005710:	2000      	movs	r0, #0
 8005712:	ea23 0106 	bic.w	r1, r3, r6
 8005716:	f1c2 0214 	rsb	r2, r2, #20
 800571a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800571e:	fa4a fa02 	asr.w	sl, sl, r2
 8005722:	f1bb 0f00 	cmp.w	fp, #0
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4620      	mov	r0, r4
 800572c:	4629      	mov	r1, r5
 800572e:	bfb8      	it	lt
 8005730:	f1ca 0a00 	rsblt	sl, sl, #0
 8005734:	f7fa fd6c 	bl	8000210 <__aeabi_dsub>
 8005738:	ec41 0b19 	vmov	d9, r0, r1
 800573c:	4642      	mov	r2, r8
 800573e:	464b      	mov	r3, r9
 8005740:	ec51 0b19 	vmov	r0, r1, d9
 8005744:	f7fa fd66 	bl	8000214 <__adddf3>
 8005748:	2400      	movs	r4, #0
 800574a:	a379      	add	r3, pc, #484	; (adr r3, 8005930 <__ieee754_pow+0x9e0>)
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	4620      	mov	r0, r4
 8005752:	460d      	mov	r5, r1
 8005754:	f7fa ff14 	bl	8000580 <__aeabi_dmul>
 8005758:	ec53 2b19 	vmov	r2, r3, d9
 800575c:	4606      	mov	r6, r0
 800575e:	460f      	mov	r7, r1
 8005760:	4620      	mov	r0, r4
 8005762:	4629      	mov	r1, r5
 8005764:	f7fa fd54 	bl	8000210 <__aeabi_dsub>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4640      	mov	r0, r8
 800576e:	4649      	mov	r1, r9
 8005770:	f7fa fd4e 	bl	8000210 <__aeabi_dsub>
 8005774:	a370      	add	r3, pc, #448	; (adr r3, 8005938 <__ieee754_pow+0x9e8>)
 8005776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577a:	f7fa ff01 	bl	8000580 <__aeabi_dmul>
 800577e:	a370      	add	r3, pc, #448	; (adr r3, 8005940 <__ieee754_pow+0x9f0>)
 8005780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005784:	4680      	mov	r8, r0
 8005786:	4689      	mov	r9, r1
 8005788:	4620      	mov	r0, r4
 800578a:	4629      	mov	r1, r5
 800578c:	f7fa fef8 	bl	8000580 <__aeabi_dmul>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4640      	mov	r0, r8
 8005796:	4649      	mov	r1, r9
 8005798:	f7fa fd3c 	bl	8000214 <__adddf3>
 800579c:	4604      	mov	r4, r0
 800579e:	460d      	mov	r5, r1
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4630      	mov	r0, r6
 80057a6:	4639      	mov	r1, r7
 80057a8:	f7fa fd34 	bl	8000214 <__adddf3>
 80057ac:	4632      	mov	r2, r6
 80057ae:	463b      	mov	r3, r7
 80057b0:	4680      	mov	r8, r0
 80057b2:	4689      	mov	r9, r1
 80057b4:	f7fa fd2c 	bl	8000210 <__aeabi_dsub>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fa fd26 	bl	8000210 <__aeabi_dsub>
 80057c4:	4642      	mov	r2, r8
 80057c6:	4606      	mov	r6, r0
 80057c8:	460f      	mov	r7, r1
 80057ca:	464b      	mov	r3, r9
 80057cc:	4640      	mov	r0, r8
 80057ce:	4649      	mov	r1, r9
 80057d0:	f7fa fed6 	bl	8000580 <__aeabi_dmul>
 80057d4:	a35c      	add	r3, pc, #368	; (adr r3, 8005948 <__ieee754_pow+0x9f8>)
 80057d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057da:	4604      	mov	r4, r0
 80057dc:	460d      	mov	r5, r1
 80057de:	f7fa fecf 	bl	8000580 <__aeabi_dmul>
 80057e2:	a35b      	add	r3, pc, #364	; (adr r3, 8005950 <__ieee754_pow+0xa00>)
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f7fa fd12 	bl	8000210 <__aeabi_dsub>
 80057ec:	4622      	mov	r2, r4
 80057ee:	462b      	mov	r3, r5
 80057f0:	f7fa fec6 	bl	8000580 <__aeabi_dmul>
 80057f4:	a358      	add	r3, pc, #352	; (adr r3, 8005958 <__ieee754_pow+0xa08>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fd0b 	bl	8000214 <__adddf3>
 80057fe:	4622      	mov	r2, r4
 8005800:	462b      	mov	r3, r5
 8005802:	f7fa febd 	bl	8000580 <__aeabi_dmul>
 8005806:	a356      	add	r3, pc, #344	; (adr r3, 8005960 <__ieee754_pow+0xa10>)
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f7fa fd00 	bl	8000210 <__aeabi_dsub>
 8005810:	4622      	mov	r2, r4
 8005812:	462b      	mov	r3, r5
 8005814:	f7fa feb4 	bl	8000580 <__aeabi_dmul>
 8005818:	a353      	add	r3, pc, #332	; (adr r3, 8005968 <__ieee754_pow+0xa18>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f7fa fcf9 	bl	8000214 <__adddf3>
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	f7fa feab 	bl	8000580 <__aeabi_dmul>
 800582a:	4602      	mov	r2, r0
 800582c:	460b      	mov	r3, r1
 800582e:	4640      	mov	r0, r8
 8005830:	4649      	mov	r1, r9
 8005832:	f7fa fced 	bl	8000210 <__aeabi_dsub>
 8005836:	4604      	mov	r4, r0
 8005838:	460d      	mov	r5, r1
 800583a:	4602      	mov	r2, r0
 800583c:	460b      	mov	r3, r1
 800583e:	4640      	mov	r0, r8
 8005840:	4649      	mov	r1, r9
 8005842:	f7fa fe9d 	bl	8000580 <__aeabi_dmul>
 8005846:	2200      	movs	r2, #0
 8005848:	ec41 0b19 	vmov	d9, r0, r1
 800584c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005850:	4620      	mov	r0, r4
 8005852:	4629      	mov	r1, r5
 8005854:	f7fa fcdc 	bl	8000210 <__aeabi_dsub>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	ec51 0b19 	vmov	r0, r1, d9
 8005860:	f7fa ffb8 	bl	80007d4 <__aeabi_ddiv>
 8005864:	4632      	mov	r2, r6
 8005866:	4604      	mov	r4, r0
 8005868:	460d      	mov	r5, r1
 800586a:	463b      	mov	r3, r7
 800586c:	4640      	mov	r0, r8
 800586e:	4649      	mov	r1, r9
 8005870:	f7fa fe86 	bl	8000580 <__aeabi_dmul>
 8005874:	4632      	mov	r2, r6
 8005876:	463b      	mov	r3, r7
 8005878:	f7fa fccc 	bl	8000214 <__adddf3>
 800587c:	4602      	mov	r2, r0
 800587e:	460b      	mov	r3, r1
 8005880:	4620      	mov	r0, r4
 8005882:	4629      	mov	r1, r5
 8005884:	f7fa fcc4 	bl	8000210 <__aeabi_dsub>
 8005888:	4642      	mov	r2, r8
 800588a:	464b      	mov	r3, r9
 800588c:	f7fa fcc0 	bl	8000210 <__aeabi_dsub>
 8005890:	460b      	mov	r3, r1
 8005892:	4602      	mov	r2, r0
 8005894:	493a      	ldr	r1, [pc, #232]	; (8005980 <__ieee754_pow+0xa30>)
 8005896:	2000      	movs	r0, #0
 8005898:	f7fa fcba 	bl	8000210 <__aeabi_dsub>
 800589c:	e9cd 0100 	strd	r0, r1, [sp]
 80058a0:	9b01      	ldr	r3, [sp, #4]
 80058a2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80058a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058aa:	da2f      	bge.n	800590c <__ieee754_pow+0x9bc>
 80058ac:	4650      	mov	r0, sl
 80058ae:	ed9d 0b00 	vldr	d0, [sp]
 80058b2:	f000 f9cd 	bl	8005c50 <scalbn>
 80058b6:	ec51 0b10 	vmov	r0, r1, d0
 80058ba:	ec53 2b18 	vmov	r2, r3, d8
 80058be:	f7ff bbe0 	b.w	8005082 <__ieee754_pow+0x132>
 80058c2:	4b30      	ldr	r3, [pc, #192]	; (8005984 <__ieee754_pow+0xa34>)
 80058c4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80058c8:	429e      	cmp	r6, r3
 80058ca:	f77f af0b 	ble.w	80056e4 <__ieee754_pow+0x794>
 80058ce:	4b2e      	ldr	r3, [pc, #184]	; (8005988 <__ieee754_pow+0xa38>)
 80058d0:	440b      	add	r3, r1
 80058d2:	4303      	orrs	r3, r0
 80058d4:	d00b      	beq.n	80058ee <__ieee754_pow+0x99e>
 80058d6:	a326      	add	r3, pc, #152	; (adr r3, 8005970 <__ieee754_pow+0xa20>)
 80058d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058dc:	ec51 0b18 	vmov	r0, r1, d8
 80058e0:	f7fa fe4e 	bl	8000580 <__aeabi_dmul>
 80058e4:	a322      	add	r3, pc, #136	; (adr r3, 8005970 <__ieee754_pow+0xa20>)
 80058e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ea:	f7ff bbca 	b.w	8005082 <__ieee754_pow+0x132>
 80058ee:	4622      	mov	r2, r4
 80058f0:	462b      	mov	r3, r5
 80058f2:	f7fa fc8d 	bl	8000210 <__aeabi_dsub>
 80058f6:	4642      	mov	r2, r8
 80058f8:	464b      	mov	r3, r9
 80058fa:	f7fb f8c7 	bl	8000a8c <__aeabi_dcmpge>
 80058fe:	2800      	cmp	r0, #0
 8005900:	f43f aef0 	beq.w	80056e4 <__ieee754_pow+0x794>
 8005904:	e7e7      	b.n	80058d6 <__ieee754_pow+0x986>
 8005906:	f04f 0a00 	mov.w	sl, #0
 800590a:	e717      	b.n	800573c <__ieee754_pow+0x7ec>
 800590c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005910:	4619      	mov	r1, r3
 8005912:	e7d2      	b.n	80058ba <__ieee754_pow+0x96a>
 8005914:	491a      	ldr	r1, [pc, #104]	; (8005980 <__ieee754_pow+0xa30>)
 8005916:	2000      	movs	r0, #0
 8005918:	f7ff bb9e 	b.w	8005058 <__ieee754_pow+0x108>
 800591c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005920:	f7ff bb9a 	b.w	8005058 <__ieee754_pow+0x108>
 8005924:	9000      	str	r0, [sp, #0]
 8005926:	f7ff bb76 	b.w	8005016 <__ieee754_pow+0xc6>
 800592a:	2100      	movs	r1, #0
 800592c:	f7ff bb60 	b.w	8004ff0 <__ieee754_pow+0xa0>
 8005930:	00000000 	.word	0x00000000
 8005934:	3fe62e43 	.word	0x3fe62e43
 8005938:	fefa39ef 	.word	0xfefa39ef
 800593c:	3fe62e42 	.word	0x3fe62e42
 8005940:	0ca86c39 	.word	0x0ca86c39
 8005944:	be205c61 	.word	0xbe205c61
 8005948:	72bea4d0 	.word	0x72bea4d0
 800594c:	3e663769 	.word	0x3e663769
 8005950:	c5d26bf1 	.word	0xc5d26bf1
 8005954:	3ebbbd41 	.word	0x3ebbbd41
 8005958:	af25de2c 	.word	0xaf25de2c
 800595c:	3f11566a 	.word	0x3f11566a
 8005960:	16bebd93 	.word	0x16bebd93
 8005964:	3f66c16c 	.word	0x3f66c16c
 8005968:	5555553e 	.word	0x5555553e
 800596c:	3fc55555 	.word	0x3fc55555
 8005970:	c2f8f359 	.word	0xc2f8f359
 8005974:	01a56e1f 	.word	0x01a56e1f
 8005978:	3fe00000 	.word	0x3fe00000
 800597c:	000fffff 	.word	0x000fffff
 8005980:	3ff00000 	.word	0x3ff00000
 8005984:	4090cbff 	.word	0x4090cbff
 8005988:	3f6f3400 	.word	0x3f6f3400
 800598c:	652b82fe 	.word	0x652b82fe
 8005990:	3c971547 	.word	0x3c971547

08005994 <__ieee754_sqrt>:
 8005994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005998:	ec55 4b10 	vmov	r4, r5, d0
 800599c:	4e56      	ldr	r6, [pc, #344]	; (8005af8 <__ieee754_sqrt+0x164>)
 800599e:	43ae      	bics	r6, r5
 80059a0:	ee10 0a10 	vmov	r0, s0
 80059a4:	ee10 3a10 	vmov	r3, s0
 80059a8:	4629      	mov	r1, r5
 80059aa:	462a      	mov	r2, r5
 80059ac:	d110      	bne.n	80059d0 <__ieee754_sqrt+0x3c>
 80059ae:	ee10 2a10 	vmov	r2, s0
 80059b2:	462b      	mov	r3, r5
 80059b4:	f7fa fde4 	bl	8000580 <__aeabi_dmul>
 80059b8:	4602      	mov	r2, r0
 80059ba:	460b      	mov	r3, r1
 80059bc:	4620      	mov	r0, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	f7fa fc28 	bl	8000214 <__adddf3>
 80059c4:	4604      	mov	r4, r0
 80059c6:	460d      	mov	r5, r1
 80059c8:	ec45 4b10 	vmov	d0, r4, r5
 80059cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	dc10      	bgt.n	80059f6 <__ieee754_sqrt+0x62>
 80059d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80059d8:	4330      	orrs	r0, r6
 80059da:	d0f5      	beq.n	80059c8 <__ieee754_sqrt+0x34>
 80059dc:	b15d      	cbz	r5, 80059f6 <__ieee754_sqrt+0x62>
 80059de:	ee10 2a10 	vmov	r2, s0
 80059e2:	462b      	mov	r3, r5
 80059e4:	ee10 0a10 	vmov	r0, s0
 80059e8:	f7fa fc12 	bl	8000210 <__aeabi_dsub>
 80059ec:	4602      	mov	r2, r0
 80059ee:	460b      	mov	r3, r1
 80059f0:	f7fa fef0 	bl	80007d4 <__aeabi_ddiv>
 80059f4:	e7e6      	b.n	80059c4 <__ieee754_sqrt+0x30>
 80059f6:	1509      	asrs	r1, r1, #20
 80059f8:	d076      	beq.n	8005ae8 <__ieee754_sqrt+0x154>
 80059fa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80059fe:	07ce      	lsls	r6, r1, #31
 8005a00:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005a04:	bf5e      	ittt	pl
 8005a06:	0fda      	lsrpl	r2, r3, #31
 8005a08:	005b      	lslpl	r3, r3, #1
 8005a0a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005a0e:	0fda      	lsrs	r2, r3, #31
 8005a10:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005a14:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005a18:	2000      	movs	r0, #0
 8005a1a:	106d      	asrs	r5, r5, #1
 8005a1c:	005b      	lsls	r3, r3, #1
 8005a1e:	f04f 0e16 	mov.w	lr, #22
 8005a22:	4684      	mov	ip, r0
 8005a24:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005a28:	eb0c 0401 	add.w	r4, ip, r1
 8005a2c:	4294      	cmp	r4, r2
 8005a2e:	bfde      	ittt	le
 8005a30:	1b12      	suble	r2, r2, r4
 8005a32:	eb04 0c01 	addle.w	ip, r4, r1
 8005a36:	1840      	addle	r0, r0, r1
 8005a38:	0052      	lsls	r2, r2, #1
 8005a3a:	f1be 0e01 	subs.w	lr, lr, #1
 8005a3e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005a42:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005a46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a4a:	d1ed      	bne.n	8005a28 <__ieee754_sqrt+0x94>
 8005a4c:	4671      	mov	r1, lr
 8005a4e:	2720      	movs	r7, #32
 8005a50:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005a54:	4562      	cmp	r2, ip
 8005a56:	eb04 060e 	add.w	r6, r4, lr
 8005a5a:	dc02      	bgt.n	8005a62 <__ieee754_sqrt+0xce>
 8005a5c:	d113      	bne.n	8005a86 <__ieee754_sqrt+0xf2>
 8005a5e:	429e      	cmp	r6, r3
 8005a60:	d811      	bhi.n	8005a86 <__ieee754_sqrt+0xf2>
 8005a62:	2e00      	cmp	r6, #0
 8005a64:	eb06 0e04 	add.w	lr, r6, r4
 8005a68:	da43      	bge.n	8005af2 <__ieee754_sqrt+0x15e>
 8005a6a:	f1be 0f00 	cmp.w	lr, #0
 8005a6e:	db40      	blt.n	8005af2 <__ieee754_sqrt+0x15e>
 8005a70:	f10c 0801 	add.w	r8, ip, #1
 8005a74:	eba2 020c 	sub.w	r2, r2, ip
 8005a78:	429e      	cmp	r6, r3
 8005a7a:	bf88      	it	hi
 8005a7c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005a80:	1b9b      	subs	r3, r3, r6
 8005a82:	4421      	add	r1, r4
 8005a84:	46c4      	mov	ip, r8
 8005a86:	0052      	lsls	r2, r2, #1
 8005a88:	3f01      	subs	r7, #1
 8005a8a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005a8e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005a92:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005a96:	d1dd      	bne.n	8005a54 <__ieee754_sqrt+0xc0>
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	d006      	beq.n	8005aaa <__ieee754_sqrt+0x116>
 8005a9c:	1c4c      	adds	r4, r1, #1
 8005a9e:	bf13      	iteet	ne
 8005aa0:	3101      	addne	r1, #1
 8005aa2:	3001      	addeq	r0, #1
 8005aa4:	4639      	moveq	r1, r7
 8005aa6:	f021 0101 	bicne.w	r1, r1, #1
 8005aaa:	1043      	asrs	r3, r0, #1
 8005aac:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005ab0:	0849      	lsrs	r1, r1, #1
 8005ab2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005ab6:	07c2      	lsls	r2, r0, #31
 8005ab8:	bf48      	it	mi
 8005aba:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005abe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8005ac2:	460c      	mov	r4, r1
 8005ac4:	463d      	mov	r5, r7
 8005ac6:	e77f      	b.n	80059c8 <__ieee754_sqrt+0x34>
 8005ac8:	0ada      	lsrs	r2, r3, #11
 8005aca:	3815      	subs	r0, #21
 8005acc:	055b      	lsls	r3, r3, #21
 8005ace:	2a00      	cmp	r2, #0
 8005ad0:	d0fa      	beq.n	8005ac8 <__ieee754_sqrt+0x134>
 8005ad2:	02d7      	lsls	r7, r2, #11
 8005ad4:	d50a      	bpl.n	8005aec <__ieee754_sqrt+0x158>
 8005ad6:	f1c1 0420 	rsb	r4, r1, #32
 8005ada:	fa23 f404 	lsr.w	r4, r3, r4
 8005ade:	1e4d      	subs	r5, r1, #1
 8005ae0:	408b      	lsls	r3, r1
 8005ae2:	4322      	orrs	r2, r4
 8005ae4:	1b41      	subs	r1, r0, r5
 8005ae6:	e788      	b.n	80059fa <__ieee754_sqrt+0x66>
 8005ae8:	4608      	mov	r0, r1
 8005aea:	e7f0      	b.n	8005ace <__ieee754_sqrt+0x13a>
 8005aec:	0052      	lsls	r2, r2, #1
 8005aee:	3101      	adds	r1, #1
 8005af0:	e7ef      	b.n	8005ad2 <__ieee754_sqrt+0x13e>
 8005af2:	46e0      	mov	r8, ip
 8005af4:	e7be      	b.n	8005a74 <__ieee754_sqrt+0xe0>
 8005af6:	bf00      	nop
 8005af8:	7ff00000 	.word	0x7ff00000

08005afc <fabs>:
 8005afc:	ec51 0b10 	vmov	r0, r1, d0
 8005b00:	ee10 2a10 	vmov	r2, s0
 8005b04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b08:	ec43 2b10 	vmov	d0, r2, r3
 8005b0c:	4770      	bx	lr

08005b0e <finite>:
 8005b0e:	b082      	sub	sp, #8
 8005b10:	ed8d 0b00 	vstr	d0, [sp]
 8005b14:	9801      	ldr	r0, [sp, #4]
 8005b16:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005b1a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005b1e:	0fc0      	lsrs	r0, r0, #31
 8005b20:	b002      	add	sp, #8
 8005b22:	4770      	bx	lr
 8005b24:	0000      	movs	r0, r0
	...

08005b28 <nan>:
 8005b28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005b30 <nan+0x8>
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	00000000 	.word	0x00000000
 8005b34:	7ff80000 	.word	0x7ff80000

08005b38 <rint>:
 8005b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b3a:	ec51 0b10 	vmov	r0, r1, d0
 8005b3e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005b42:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005b46:	2e13      	cmp	r6, #19
 8005b48:	ee10 4a10 	vmov	r4, s0
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005b52:	dc58      	bgt.n	8005c06 <rint+0xce>
 8005b54:	2e00      	cmp	r6, #0
 8005b56:	da2b      	bge.n	8005bb0 <rint+0x78>
 8005b58:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005b5c:	4302      	orrs	r2, r0
 8005b5e:	d023      	beq.n	8005ba8 <rint+0x70>
 8005b60:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005b64:	4302      	orrs	r2, r0
 8005b66:	4254      	negs	r4, r2
 8005b68:	4314      	orrs	r4, r2
 8005b6a:	0c4b      	lsrs	r3, r1, #17
 8005b6c:	0b24      	lsrs	r4, r4, #12
 8005b6e:	045b      	lsls	r3, r3, #17
 8005b70:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005b74:	ea44 0103 	orr.w	r1, r4, r3
 8005b78:	4b32      	ldr	r3, [pc, #200]	; (8005c44 <rint+0x10c>)
 8005b7a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005b7e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4630      	mov	r0, r6
 8005b88:	4639      	mov	r1, r7
 8005b8a:	f7fa fb43 	bl	8000214 <__adddf3>
 8005b8e:	e9cd 0100 	strd	r0, r1, [sp]
 8005b92:	463b      	mov	r3, r7
 8005b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b98:	4632      	mov	r2, r6
 8005b9a:	f7fa fb39 	bl	8000210 <__aeabi_dsub>
 8005b9e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ba2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005ba6:	4639      	mov	r1, r7
 8005ba8:	ec41 0b10 	vmov	d0, r0, r1
 8005bac:	b003      	add	sp, #12
 8005bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bb0:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <rint+0x110>)
 8005bb2:	4132      	asrs	r2, r6
 8005bb4:	ea01 0702 	and.w	r7, r1, r2
 8005bb8:	4307      	orrs	r7, r0
 8005bba:	d0f5      	beq.n	8005ba8 <rint+0x70>
 8005bbc:	0851      	lsrs	r1, r2, #1
 8005bbe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8005bc2:	4314      	orrs	r4, r2
 8005bc4:	d00c      	beq.n	8005be0 <rint+0xa8>
 8005bc6:	ea23 0201 	bic.w	r2, r3, r1
 8005bca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005bce:	2e13      	cmp	r6, #19
 8005bd0:	fa43 f606 	asr.w	r6, r3, r6
 8005bd4:	bf0c      	ite	eq
 8005bd6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005bda:	2400      	movne	r4, #0
 8005bdc:	ea42 0306 	orr.w	r3, r2, r6
 8005be0:	4918      	ldr	r1, [pc, #96]	; (8005c44 <rint+0x10c>)
 8005be2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005be6:	4622      	mov	r2, r4
 8005be8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005bec:	4620      	mov	r0, r4
 8005bee:	4629      	mov	r1, r5
 8005bf0:	f7fa fb10 	bl	8000214 <__adddf3>
 8005bf4:	e9cd 0100 	strd	r0, r1, [sp]
 8005bf8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bfc:	4622      	mov	r2, r4
 8005bfe:	462b      	mov	r3, r5
 8005c00:	f7fa fb06 	bl	8000210 <__aeabi_dsub>
 8005c04:	e7d0      	b.n	8005ba8 <rint+0x70>
 8005c06:	2e33      	cmp	r6, #51	; 0x33
 8005c08:	dd07      	ble.n	8005c1a <rint+0xe2>
 8005c0a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005c0e:	d1cb      	bne.n	8005ba8 <rint+0x70>
 8005c10:	ee10 2a10 	vmov	r2, s0
 8005c14:	f7fa fafe 	bl	8000214 <__adddf3>
 8005c18:	e7c6      	b.n	8005ba8 <rint+0x70>
 8005c1a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005c1e:	f04f 36ff 	mov.w	r6, #4294967295
 8005c22:	40d6      	lsrs	r6, r2
 8005c24:	4230      	tst	r0, r6
 8005c26:	d0bf      	beq.n	8005ba8 <rint+0x70>
 8005c28:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005c2c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005c30:	bf1f      	itttt	ne
 8005c32:	ea24 0101 	bicne.w	r1, r4, r1
 8005c36:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005c3a:	fa44 f202 	asrne.w	r2, r4, r2
 8005c3e:	ea41 0402 	orrne.w	r4, r1, r2
 8005c42:	e7cd      	b.n	8005be0 <rint+0xa8>
 8005c44:	08006688 	.word	0x08006688
 8005c48:	000fffff 	.word	0x000fffff
 8005c4c:	00000000 	.word	0x00000000

08005c50 <scalbn>:
 8005c50:	b570      	push	{r4, r5, r6, lr}
 8005c52:	ec55 4b10 	vmov	r4, r5, d0
 8005c56:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	462b      	mov	r3, r5
 8005c5e:	b99a      	cbnz	r2, 8005c88 <scalbn+0x38>
 8005c60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005c64:	4323      	orrs	r3, r4
 8005c66:	d036      	beq.n	8005cd6 <scalbn+0x86>
 8005c68:	4b39      	ldr	r3, [pc, #228]	; (8005d50 <scalbn+0x100>)
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	ee10 0a10 	vmov	r0, s0
 8005c70:	2200      	movs	r2, #0
 8005c72:	f7fa fc85 	bl	8000580 <__aeabi_dmul>
 8005c76:	4b37      	ldr	r3, [pc, #220]	; (8005d54 <scalbn+0x104>)
 8005c78:	429e      	cmp	r6, r3
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	460d      	mov	r5, r1
 8005c7e:	da10      	bge.n	8005ca2 <scalbn+0x52>
 8005c80:	a32b      	add	r3, pc, #172	; (adr r3, 8005d30 <scalbn+0xe0>)
 8005c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c86:	e03a      	b.n	8005cfe <scalbn+0xae>
 8005c88:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005c8c:	428a      	cmp	r2, r1
 8005c8e:	d10c      	bne.n	8005caa <scalbn+0x5a>
 8005c90:	ee10 2a10 	vmov	r2, s0
 8005c94:	4620      	mov	r0, r4
 8005c96:	4629      	mov	r1, r5
 8005c98:	f7fa fabc 	bl	8000214 <__adddf3>
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	e019      	b.n	8005cd6 <scalbn+0x86>
 8005ca2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	3a36      	subs	r2, #54	; 0x36
 8005caa:	4432      	add	r2, r6
 8005cac:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005cb0:	428a      	cmp	r2, r1
 8005cb2:	dd08      	ble.n	8005cc6 <scalbn+0x76>
 8005cb4:	2d00      	cmp	r5, #0
 8005cb6:	a120      	add	r1, pc, #128	; (adr r1, 8005d38 <scalbn+0xe8>)
 8005cb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cbc:	da1c      	bge.n	8005cf8 <scalbn+0xa8>
 8005cbe:	a120      	add	r1, pc, #128	; (adr r1, 8005d40 <scalbn+0xf0>)
 8005cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cc4:	e018      	b.n	8005cf8 <scalbn+0xa8>
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	dd08      	ble.n	8005cdc <scalbn+0x8c>
 8005cca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005cce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005cd2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005cd6:	ec45 4b10 	vmov	d0, r4, r5
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005ce0:	da19      	bge.n	8005d16 <scalbn+0xc6>
 8005ce2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005ce6:	429e      	cmp	r6, r3
 8005ce8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005cec:	dd0a      	ble.n	8005d04 <scalbn+0xb4>
 8005cee:	a112      	add	r1, pc, #72	; (adr r1, 8005d38 <scalbn+0xe8>)
 8005cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1e2      	bne.n	8005cbe <scalbn+0x6e>
 8005cf8:	a30f      	add	r3, pc, #60	; (adr r3, 8005d38 <scalbn+0xe8>)
 8005cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfe:	f7fa fc3f 	bl	8000580 <__aeabi_dmul>
 8005d02:	e7cb      	b.n	8005c9c <scalbn+0x4c>
 8005d04:	a10a      	add	r1, pc, #40	; (adr r1, 8005d30 <scalbn+0xe0>)
 8005d06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d0b8      	beq.n	8005c80 <scalbn+0x30>
 8005d0e:	a10e      	add	r1, pc, #56	; (adr r1, 8005d48 <scalbn+0xf8>)
 8005d10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d14:	e7b4      	b.n	8005c80 <scalbn+0x30>
 8005d16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005d1a:	3236      	adds	r2, #54	; 0x36
 8005d1c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005d20:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005d24:	4620      	mov	r0, r4
 8005d26:	4b0c      	ldr	r3, [pc, #48]	; (8005d58 <scalbn+0x108>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	e7e8      	b.n	8005cfe <scalbn+0xae>
 8005d2c:	f3af 8000 	nop.w
 8005d30:	c2f8f359 	.word	0xc2f8f359
 8005d34:	01a56e1f 	.word	0x01a56e1f
 8005d38:	8800759c 	.word	0x8800759c
 8005d3c:	7e37e43c 	.word	0x7e37e43c
 8005d40:	8800759c 	.word	0x8800759c
 8005d44:	fe37e43c 	.word	0xfe37e43c
 8005d48:	c2f8f359 	.word	0xc2f8f359
 8005d4c:	81a56e1f 	.word	0x81a56e1f
 8005d50:	43500000 	.word	0x43500000
 8005d54:	ffff3cb0 	.word	0xffff3cb0
 8005d58:	3c900000 	.word	0x3c900000

08005d5c <_init>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	bf00      	nop
 8005d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d62:	bc08      	pop	{r3}
 8005d64:	469e      	mov	lr, r3
 8005d66:	4770      	bx	lr

08005d68 <_fini>:
 8005d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6a:	bf00      	nop
 8005d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d6e:	bc08      	pop	{r3}
 8005d70:	469e      	mov	lr, r3
 8005d72:	4770      	bx	lr

Disassembly of section RAMCODE:

08005d78 <MLX90640_CalculateTo>:
{
 8005d78:	b5b0      	push	{r4, r5, r7, lr}
 8005d7a:	b09c      	sub	sp, #112	; 0x70
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6178      	str	r0, [r7, #20]
 8005d80:	6139      	str	r1, [r7, #16]
 8005d82:	ed87 0a03 	vstr	s0, [r7, #12]
 8005d86:	edc7 0a02 	vstr	s1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
    subPage = frameData[833];
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f8b3 3682 	ldrh.w	r3, [r3, #1666]	; 0x682
 8005d92:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
    vdd = MLX90640_GetVdd(frameData, params);
 8005d96:	6939      	ldr	r1, [r7, #16]
 8005d98:	6978      	ldr	r0, [r7, #20]
 8005d9a:	f7fb f9a5 	bl	80010e8 <MLX90640_GetVdd>
 8005d9e:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
    ta = MLX90640_GetTa(frameData, params);
 8005da2:	6939      	ldr	r1, [r7, #16]
 8005da4:	6978      	ldr	r0, [r7, #20]
 8005da6:	f7fb fa21 	bl	80011ec <MLX90640_GetTa>
 8005daa:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
    ta4 = pow((ta + 273.15f), (double)4);
 8005dae:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005db2:	ed9f 7adb 	vldr	s14, [pc, #876]	; 8006120 <MLX90640_CalculateTo+0x3a8>
 8005db6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dba:	ee17 0a90 	vmov	r0, s15
 8005dbe:	f7fa fb87 	bl	80004d0 <__aeabi_f2d>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	ed9f 1bd4 	vldr	d1, [pc, #848]	; 8006118 <MLX90640_CalculateTo+0x3a0>
 8005dca:	ec43 2b10 	vmov	d0, r2, r3
 8005dce:	f7fe ffdd 	bl	8004d8c <pow>
 8005dd2:	ec53 2b10 	vmov	r2, r3, d0
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	4619      	mov	r1, r3
 8005dda:	f7fa fe81 	bl	8000ae0 <__aeabi_d2f>
 8005dde:	4603      	mov	r3, r0
 8005de0:	64fb      	str	r3, [r7, #76]	; 0x4c
    tr4 = pow((tr + 273.15f), (double)4);
 8005de2:	edd7 7a02 	vldr	s15, [r7, #8]
 8005de6:	ed9f 7ace 	vldr	s14, [pc, #824]	; 8006120 <MLX90640_CalculateTo+0x3a8>
 8005dea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dee:	ee17 0a90 	vmov	r0, s15
 8005df2:	f7fa fb6d 	bl	80004d0 <__aeabi_f2d>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	ed9f 1bc7 	vldr	d1, [pc, #796]	; 8006118 <MLX90640_CalculateTo+0x3a0>
 8005dfe:	ec43 2b10 	vmov	d0, r2, r3
 8005e02:	f7fe ffc3 	bl	8004d8c <pow>
 8005e06:	ec53 2b10 	vmov	r2, r3, d0
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	f7fa fe67 	bl	8000ae0 <__aeabi_d2f>
 8005e12:	4603      	mov	r3, r0
 8005e14:	64bb      	str	r3, [r7, #72]	; 0x48
    taTr = tr4 - (tr4-ta4)/emissivity;
 8005e16:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005e1a:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8005e1e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8005e22:	ed97 7a03 	vldr	s14, [r7, #12]
 8005e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e2a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8005e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e32:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    alphaCorrR[0] = 1 / (1 + params->ksTo[0] * 40);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005e3c:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8006124 <MLX90640_CalculateTo+0x3ac>
 8005e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e54:	edc7 7a07 	vstr	s15, [r7, #28]
    alphaCorrR[1] = 1 ;
 8005e58:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005e5c:	623b      	str	r3, [r7, #32]
    alphaCorrR[2] = (1 + params->ksTo[2] * params->ct[2]);
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005e72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e7e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    alphaCorrR[3] = alphaCorrR[2] * (1 + params->ksTo[3] * (params->ct[3] - params->ct[2]));
 8005e82:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8005e92:	461a      	mov	r2, r3
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	ee07 3a90 	vmov	s15, r3
 8005ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005eb4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    gain = frameData[778];
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f203 6314 	addw	r3, r3, #1556	; 0x614
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	ee07 3a90 	vmov	s15, r3
 8005ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ec8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    if(gain > 32767)
 8005ecc:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005ed0:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8006128 <MLX90640_CalculateTo+0x3b0>
 8005ed4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005edc:	dd07      	ble.n	8005eee <MLX90640_CalculateTo+0x176>
        gain = gain - 65536;
 8005ede:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005ee2:	ed9f 7a92 	vldr	s14, [pc, #584]	; 800612c <MLX90640_CalculateTo+0x3b4>
 8005ee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005eea:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    gain = params->gainEE / gain; 
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005efc:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 8005f00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f04:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
    mode = (frameData[832] & 0x1000) >> 5;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	f503 63d0 	add.w	r3, r3, #1664	; 0x680
 8005f0e:	881b      	ldrh	r3, [r3, #0]
 8005f10:	115b      	asrs	r3, r3, #5
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f18:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    irDataCP[0] = frameData[776];  
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	f503 63c2 	add.w	r3, r3, #1552	; 0x610
 8005f22:	881b      	ldrh	r3, [r3, #0]
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    irDataCP[1] = frameData[808];
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f503 63ca 	add.w	r3, r3, #1616	; 0x650
 8005f36:	881b      	ldrh	r3, [r3, #0]
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f40:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    for( int i = 0; i < 2; i++)
 8005f44:	2300      	movs	r3, #0
 8005f46:	663b      	str	r3, [r7, #96]	; 0x60
 8005f48:	e039      	b.n	8005fbe <MLX90640_CalculateTo+0x246>
        if(irDataCP[i] > 32767)
 8005f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005f52:	4413      	add	r3, r2
 8005f54:	3b44      	subs	r3, #68	; 0x44
 8005f56:	edd3 7a00 	vldr	s15, [r3]
 8005f5a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8006128 <MLX90640_CalculateTo+0x3b0>
 8005f5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f66:	dd13      	ble.n	8005f90 <MLX90640_CalculateTo+0x218>
            irDataCP[i] = irDataCP[i] - 65536;
 8005f68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005f70:	4413      	add	r3, r2
 8005f72:	3b44      	subs	r3, #68	; 0x44
 8005f74:	edd3 7a00 	vldr	s15, [r3]
 8005f78:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800612c <MLX90640_CalculateTo+0x3b4>
 8005f7c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005f88:	4413      	add	r3, r2
 8005f8a:	3b44      	subs	r3, #68	; 0x44
 8005f8c:	edc3 7a00 	vstr	s15, [r3]
        irDataCP[i] = irDataCP[i] * gain;
 8005f90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005f98:	4413      	add	r3, r2
 8005f9a:	3b44      	subs	r3, #68	; 0x44
 8005f9c:	ed93 7a00 	vldr	s14, [r3]
 8005fa0:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8005fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3b44      	subs	r3, #68	; 0x44
 8005fb4:	edc3 7a00 	vstr	s15, [r3]
    for( int i = 0; i < 2; i++)
 8005fb8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fba:	3301      	adds	r3, #1
 8005fbc:	663b      	str	r3, [r7, #96]	; 0x60
 8005fbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	ddc2      	ble.n	8005f4a <MLX90640_CalculateTo+0x1d2>
    irDataCP[0] = irDataCP[0] - params->cpOffset[0] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8005fc4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8005fce:	330c      	adds	r3, #12
 8005fd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fd4:	ee07 3a90 	vmov	s15, r3
 8005fd8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	ed93 6a08 	vldr	s12, [r3, #32]
 8005fe2:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8005fe6:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 8005fea:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005fee:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005ff2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005ff6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005ffa:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	ed93 6a07 	vldr	s12, [r3, #28]
 8006004:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006008:	eddf 5a49 	vldr	s11, [pc, #292]	; 8006130 <MLX90640_CalculateTo+0x3b8>
 800600c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006010:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006014:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006018:	ee77 7a86 	vadd.f32	s15, s15, s12
 800601c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006020:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006024:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    if( mode ==  params->calibrationModeEE)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800602e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8006032:	429a      	cmp	r2, r3
 8006034:	d132      	bne.n	800609c <MLX90640_CalculateTo+0x324>
        irDataCP[1] = irDataCP[1] - params->cpOffset[1] * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 8006036:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 8006040:	330e      	adds	r3, #14
 8006042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	ed93 6a08 	vldr	s12, [r3, #32]
 8006054:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006058:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 800605c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006060:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006064:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006068:	ee77 7a86 	vadd.f32	s15, s15, s12
 800606c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	ed93 6a07 	vldr	s12, [r3, #28]
 8006076:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800607a:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006130 <MLX90640_CalculateTo+0x3b8>
 800607e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006082:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006086:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800608a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800608e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006096:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800609a:	e039      	b.n	8006110 <MLX90640_CalculateTo+0x398>
      irDataCP[1] = irDataCP[1] - (params->cpOffset[1] + params->ilChessC[0]) * (1 + params->cpKta * (ta - 25)) * (1 + params->cpKv * (vdd - 3.3f));
 800609c:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80060a6:	330e      	adds	r3, #14
 80060a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80060ba:	3310      	adds	r3, #16
 80060bc:	edd3 7a00 	vldr	s15, [r3]
 80060c0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	ed93 6a08 	vldr	s12, [r3, #32]
 80060ca:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80060ce:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
 80060d2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80060d6:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060da:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80060de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80060e2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	ed93 6a07 	vldr	s12, [r3, #28]
 80060ec:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80060f0:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8006130 <MLX90640_CalculateTo+0x3b8>
 80060f4:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80060f8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80060fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006100:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006104:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006108:	ee77 7a67 	vsub.f32	s15, s14, s15
 800610c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 8006110:	2300      	movs	r3, #0
 8006112:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006114:	e26e      	b.n	80065f4 <MLX90640_CalculateTo+0x87c>
 8006116:	bf00      	nop
 8006118:	00000000 	.word	0x00000000
 800611c:	40100000 	.word	0x40100000
 8006120:	43889333 	.word	0x43889333
 8006124:	42200000 	.word	0x42200000
 8006128:	46fffe00 	.word	0x46fffe00
 800612c:	47800000 	.word	0x47800000
 8006130:	40533333 	.word	0x40533333
        ilPattern = pixelNumber / 32 - (pixelNumber / 64) * 2; 
 8006134:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006136:	2b00      	cmp	r3, #0
 8006138:	da00      	bge.n	800613c <MLX90640_CalculateTo+0x3c4>
 800613a:	331f      	adds	r3, #31
 800613c:	115b      	asrs	r3, r3, #5
 800613e:	b2da      	uxtb	r2, r3
 8006140:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006142:	2b00      	cmp	r3, #0
 8006144:	da00      	bge.n	8006148 <MLX90640_CalculateTo+0x3d0>
 8006146:	333f      	adds	r3, #63	; 0x3f
 8006148:	119b      	asrs	r3, r3, #6
 800614a:	b2db      	uxtb	r3, r3
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	b2db      	uxtb	r3, r3
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	b2db      	uxtb	r3, r3
 8006154:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        chessPattern = ilPattern ^ (pixelNumber - (pixelNumber/2)*2); 
 8006158:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800615a:	2b00      	cmp	r3, #0
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	bfb8      	it	lt
 8006162:	425b      	neglt	r3, r3
 8006164:	b25a      	sxtb	r2, r3
 8006166:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 800616a:	4053      	eors	r3, r2
 800616c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
        conversionPattern = ((pixelNumber + 2) / 4 - (pixelNumber + 3) / 4 + (pixelNumber + 1) / 4 - pixelNumber / 4) * (1 - 2 * ilPattern);
 8006170:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006172:	3302      	adds	r3, #2
 8006174:	2b00      	cmp	r3, #0
 8006176:	da00      	bge.n	800617a <MLX90640_CalculateTo+0x402>
 8006178:	3303      	adds	r3, #3
 800617a:	109b      	asrs	r3, r3, #2
 800617c:	461a      	mov	r2, r3
 800617e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006180:	3303      	adds	r3, #3
 8006182:	2b00      	cmp	r3, #0
 8006184:	da00      	bge.n	8006188 <MLX90640_CalculateTo+0x410>
 8006186:	3303      	adds	r3, #3
 8006188:	109b      	asrs	r3, r3, #2
 800618a:	425b      	negs	r3, r3
 800618c:	441a      	add	r2, r3
 800618e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006190:	3301      	adds	r3, #1
 8006192:	2b00      	cmp	r3, #0
 8006194:	da00      	bge.n	8006198 <MLX90640_CalculateTo+0x420>
 8006196:	3303      	adds	r3, #3
 8006198:	109b      	asrs	r3, r3, #2
 800619a:	441a      	add	r2, r3
 800619c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	da00      	bge.n	80061a4 <MLX90640_CalculateTo+0x42c>
 80061a2:	3303      	adds	r3, #3
 80061a4:	109b      	asrs	r3, r3, #2
 80061a6:	425b      	negs	r3, r3
 80061a8:	4413      	add	r3, r2
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 80061b0:	005b      	lsls	r3, r3, #1
 80061b2:	f1c3 0301 	rsb	r3, r3, #1
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	fb12 f303 	smulbb	r3, r2, r3
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
        if(mode == 0)
 80061c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d104      	bne.n	80061d4 <MLX90640_CalculateTo+0x45c>
          pattern = ilPattern; 
 80061ca:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 80061ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80061d2:	e003      	b.n	80061dc <MLX90640_CalculateTo+0x464>
          pattern = chessPattern; 
 80061d4:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 80061d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        if(pattern == frameData[833])
 80061dc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80061e0:	697a      	ldr	r2, [r7, #20]
 80061e2:	f202 6282 	addw	r2, r2, #1666	; 0x682
 80061e6:	8812      	ldrh	r2, [r2, #0]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	f040 8200 	bne.w	80065ee <MLX90640_CalculateTo+0x876>
            irData = frameData[pixelNumber];
 80061ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	4413      	add	r3, r2
 80061f6:	881b      	ldrh	r3, [r3, #0]
 80061f8:	ee07 3a90 	vmov	s15, r3
 80061fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006200:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            if(irData > 32767)
 8006204:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8006208:	ed1f 7a39 	vldr	s14, [pc, #-228]	; 8006128 <MLX90640_CalculateTo+0x3b0>
 800620c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006210:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006214:	dd07      	ble.n	8006226 <MLX90640_CalculateTo+0x4ae>
                irData = irData - 65536;
 8006216:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 800621a:	ed1f 7a3c 	vldr	s14, [pc, #-240]	; 800612c <MLX90640_CalculateTo+0x3b4>
 800621e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006222:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            irData = irData * gain;
 8006226:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 800622a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006232:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            irData = irData - params->offset[pixelNumber]*(1 + params->kta[pixelNumber]*(ta - 25))*(1 + params->kv[pixelNumber]*(vdd - 3.3f));
 8006236:	693a      	ldr	r2, [r7, #16]
 8006238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800623a:	f503 63c4 	add.w	r3, r3, #1568	; 0x620
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	4413      	add	r3, r2
 8006242:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006246:	ee07 3a90 	vmov	s15, r3
 800624a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006252:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	4413      	add	r3, r2
 800625a:	3304      	adds	r3, #4
 800625c:	edd3 6a00 	vldr	s13, [r3]
 8006260:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006264:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8006268:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800626c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006270:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006274:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006278:	ee27 7a27 	vmul.f32	s14, s14, s15
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006280:	f503 63f2 	add.w	r3, r3, #1936	; 0x790
 8006284:	009b      	lsls	r3, r3, #2
 8006286:	4413      	add	r3, r2
 8006288:	3304      	adds	r3, #4
 800628a:	edd3 6a00 	vldr	s13, [r3]
 800628e:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8006292:	ed1f 6a59 	vldr	s12, [pc, #-356]	; 8006130 <MLX90640_CalculateTo+0x3b8>
 8006296:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800629a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800629e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062aa:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80062ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062b2:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            if(mode !=  params->calibrationModeEE)
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80062bc:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d025      	beq.n	8006310 <MLX90640_CalculateTo+0x598>
              irData = irData + params->ilChessC[2] * (2 * ilPattern - 1) - params->ilChessC[1] * conversionPattern; 
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80062ca:	3318      	adds	r3, #24
 80062cc:	ed93 7a00 	vldr	s14, [r3]
 80062d0:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	3b01      	subs	r3, #1
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80062e4:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80062e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	f503 5329 	add.w	r3, r3, #10816	; 0x2a40
 80062f2:	3314      	adds	r3, #20
 80062f4:	edd3 6a00 	vldr	s13, [r3]
 80062f8:	f997 3040 	ldrsb.w	r3, [r7, #64]	; 0x40
 80062fc:	ee07 3a90 	vmov	s15, r3
 8006300:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006304:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800630c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            irData = irData / emissivity;
 8006310:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006314:	ed97 7a03 	vldr	s14, [r7, #12]
 8006318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800631c:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            irData = irData - params->tgc * irDataCP[subPage];
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	ed93 7a06 	vldr	s14, [r3, #24]
 8006326:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8006330:	4413      	add	r3, r2
 8006332:	3b44      	subs	r3, #68	; 0x44
 8006334:	edd3 7a00 	vldr	s15, [r3]
 8006338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633c:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 8006340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006344:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
            alphaCompensated = (params->alpha[pixelNumber] - params->tgc * params->cpAlpha[subPage])*(1 + params->KsTa * (ta - 25));
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800634c:	3310      	adds	r3, #16
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	4413      	add	r3, r2
 8006352:	3304      	adds	r3, #4
 8006354:	ed93 7a00 	vldr	s14, [r3]
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	edd3 6a06 	vldr	s13, [r3, #24]
 800635e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	f503 6329 	add.w	r3, r3, #2704	; 0xa90
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	3304      	adds	r3, #4
 800636e:	edd3 7a00 	vldr	s15, [r3]
 8006372:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006376:	ee37 7a67 	vsub.f32	s14, s14, s15
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8006380:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8006384:	eeb3 6a09 	vmov.f32	s12, #57	; 0x41c80000  25.0
 8006388:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800638c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006394:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            Sx = pow((double)alphaCompensated, (double)3) * (irData + alphaCompensated * taTr);
 80063a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063a2:	f7fa f895 	bl	80004d0 <__aeabi_f2d>
 80063a6:	4602      	mov	r2, r0
 80063a8:	460b      	mov	r3, r1
 80063aa:	ed9f 1b97 	vldr	d1, [pc, #604]	; 8006608 <MLX90640_CalculateTo+0x890>
 80063ae:	ec43 2b10 	vmov	d0, r2, r3
 80063b2:	f7fe fceb 	bl	8004d8c <pow>
 80063b6:	ec55 4b10 	vmov	r4, r5, d0
 80063ba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80063be:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80063c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063c6:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80063ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063ce:	ee17 0a90 	vmov	r0, s15
 80063d2:	f7fa f87d 	bl	80004d0 <__aeabi_f2d>
 80063d6:	4602      	mov	r2, r0
 80063d8:	460b      	mov	r3, r1
 80063da:	4620      	mov	r0, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	f7fa f8cf 	bl	8000580 <__aeabi_dmul>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4610      	mov	r0, r2
 80063e8:	4619      	mov	r1, r3
 80063ea:	f7fa fb79 	bl	8000ae0 <__aeabi_d2f>
 80063ee:	4603      	mov	r3, r0
 80063f0:	63bb      	str	r3, [r7, #56]	; 0x38
            Sx = sqrt(sqrt(Sx)) * params->ksTo[1];
 80063f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063f4:	f7fa f86c 	bl	80004d0 <__aeabi_f2d>
 80063f8:	4602      	mov	r2, r0
 80063fa:	460b      	mov	r3, r1
 80063fc:	ec43 2b10 	vmov	d0, r2, r3
 8006400:	f7fe fd72 	bl	8004ee8 <sqrt>
 8006404:	eeb0 7a40 	vmov.f32	s14, s0
 8006408:	eef0 7a60 	vmov.f32	s15, s1
 800640c:	eeb0 0a47 	vmov.f32	s0, s14
 8006410:	eef0 0a67 	vmov.f32	s1, s15
 8006414:	f7fe fd68 	bl	8004ee8 <sqrt>
 8006418:	ec55 4b10 	vmov	r4, r5, d0
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006420:	4618      	mov	r0, r3
 8006422:	f7fa f855 	bl	80004d0 <__aeabi_f2d>
 8006426:	4602      	mov	r2, r0
 8006428:	460b      	mov	r3, r1
 800642a:	4620      	mov	r0, r4
 800642c:	4629      	mov	r1, r5
 800642e:	f7fa f8a7 	bl	8000580 <__aeabi_dmul>
 8006432:	4602      	mov	r2, r0
 8006434:	460b      	mov	r3, r1
 8006436:	4610      	mov	r0, r2
 8006438:	4619      	mov	r1, r3
 800643a:	f7fa fb51 	bl	8000ae0 <__aeabi_d2f>
 800643e:	4603      	mov	r3, r0
 8006440:	63bb      	str	r3, [r7, #56]	; 0x38
            To = sqrt(sqrt(irData/(alphaCompensated * (1 - params->ksTo[1] * 273.15f) + Sx) + taTr)) - 273.15f;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8006448:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8006620 <MLX90640_CalculateTo+0x8a8>
 800644c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006450:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006454:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006458:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800645c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006460:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8006464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006468:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800646c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006470:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006478:	ee17 0a90 	vmov	r0, s15
 800647c:	f7fa f828 	bl	80004d0 <__aeabi_f2d>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	ec43 2b10 	vmov	d0, r2, r3
 8006488:	f7fe fd2e 	bl	8004ee8 <sqrt>
 800648c:	eeb0 7a40 	vmov.f32	s14, s0
 8006490:	eef0 7a60 	vmov.f32	s15, s1
 8006494:	eeb0 0a47 	vmov.f32	s0, s14
 8006498:	eef0 0a67 	vmov.f32	s1, s15
 800649c:	f7fe fd24 	bl	8004ee8 <sqrt>
 80064a0:	ec51 0b10 	vmov	r0, r1, d0
 80064a4:	a35a      	add	r3, pc, #360	; (adr r3, 8006610 <MLX90640_CalculateTo+0x898>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f7f9 feb1 	bl	8000210 <__aeabi_dsub>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	4610      	mov	r0, r2
 80064b4:	4619      	mov	r1, r3
 80064b6:	f7fa fb13 	bl	8000ae0 <__aeabi_d2f>
 80064ba:	4603      	mov	r3, r0
 80064bc:	637b      	str	r3, [r7, #52]	; 0x34
            if(To < params->ct[1])
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80064c4:	ee07 3a90 	vmov	s15, r3
 80064c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064cc:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80064d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d8:	d503      	bpl.n	80064e2 <MLX90640_CalculateTo+0x76a>
                range = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80064e0:	e026      	b.n	8006530 <MLX90640_CalculateTo+0x7b8>
            else if(To < params->ct[2])   
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80064e8:	ee07 3a90 	vmov	s15, r3
 80064ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80064f0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80064f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80064f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064fc:	d503      	bpl.n	8006506 <MLX90640_CalculateTo+0x78e>
                range = 1;            
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006504:	e014      	b.n	8006530 <MLX90640_CalculateTo+0x7b8>
            else if(To < params->ct[3])
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800650c:	ee07 3a90 	vmov	s15, r3
 8006510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006514:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8006518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800651c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006520:	d503      	bpl.n	800652a <MLX90640_CalculateTo+0x7b2>
                range = 2;            
 8006522:	2302      	movs	r3, #2
 8006524:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8006528:	e002      	b.n	8006530 <MLX90640_CalculateTo+0x7b8>
                range = 3;            
 800652a:	2303      	movs	r3, #3
 800652c:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
            To = sqrt(sqrt(irData / (alphaCompensated * alphaCorrR[range] * (1 + params->ksTo[range] * (To - params->ct[range]))) + taTr)) - 273.15;
 8006530:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	f107 0270 	add.w	r2, r7, #112	; 0x70
 800653a:	4413      	add	r3, r2
 800653c:	3b54      	subs	r3, #84	; 0x54
 800653e:	ed93 7a00 	vldr	s14, [r3]
 8006542:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8006546:	ee27 7a27 	vmul.f32	s14, s14, s15
 800654a:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	330a      	adds	r3, #10
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	3304      	adds	r3, #4
 8006558:	edd3 6a00 	vldr	s13, [r3]
 800655c:	f997 3066 	ldrsb.w	r3, [r7, #102]	; 0x66
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	331c      	adds	r3, #28
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	4413      	add	r3, r2
 8006568:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800656c:	ee07 3a90 	vmov	s15, r3
 8006570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006574:	ed97 6a0d 	vldr	s12, [r7, #52]	; 0x34
 8006578:	ee76 7a67 	vsub.f32	s15, s12, s15
 800657c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800658c:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 8006590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006594:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8006598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800659c:	ee17 0a90 	vmov	r0, s15
 80065a0:	f7f9 ff96 	bl	80004d0 <__aeabi_f2d>
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	ec43 2b10 	vmov	d0, r2, r3
 80065ac:	f7fe fc9c 	bl	8004ee8 <sqrt>
 80065b0:	eeb0 7a40 	vmov.f32	s14, s0
 80065b4:	eef0 7a60 	vmov.f32	s15, s1
 80065b8:	eeb0 0a47 	vmov.f32	s0, s14
 80065bc:	eef0 0a67 	vmov.f32	s1, s15
 80065c0:	f7fe fc92 	bl	8004ee8 <sqrt>
 80065c4:	ec51 0b10 	vmov	r0, r1, d0
 80065c8:	a313      	add	r3, pc, #76	; (adr r3, 8006618 <MLX90640_CalculateTo+0x8a0>)
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f7f9 fe1f 	bl	8000210 <__aeabi_dsub>
 80065d2:	4602      	mov	r2, r0
 80065d4:	460b      	mov	r3, r1
 80065d6:	4610      	mov	r0, r2
 80065d8:	4619      	mov	r1, r3
 80065da:	f7fa fa81 	bl	8000ae0 <__aeabi_d2f>
 80065de:	4603      	mov	r3, r0
 80065e0:	637b      	str	r3, [r7, #52]	; 0x34
            result[pixelNumber] = To;
 80065e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	4413      	add	r3, r2
 80065ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065ec:	601a      	str	r2, [r3, #0]
    for( int pixelNumber = 0; pixelNumber < 768; pixelNumber++)
 80065ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f0:	3301      	adds	r3, #1
 80065f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065fa:	f6ff ad9b 	blt.w	8006134 <MLX90640_CalculateTo+0x3bc>
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	3770      	adds	r7, #112	; 0x70
 8006604:	46bd      	mov	sp, r7
 8006606:	bdb0      	pop	{r4, r5, r7, pc}
 8006608:	00000000 	.word	0x00000000
 800660c:	40080000 	.word	0x40080000
 8006610:	60000000 	.word	0x60000000
 8006614:	40711266 	.word	0x40711266
 8006618:	66666666 	.word	0x66666666
 800661c:	40711266 	.word	0x40711266
 8006620:	43889333 	.word	0x43889333
