
bluepill_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080058bc  080058bc  000158bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080058c0  080058c0  000158c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  080058c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000204  2000007c  08005940  0002007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000280  08005940  00020280  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000ddd4  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002545  00000000  00000000  0002de79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000e58  00000000  00000000  000303c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000d50  00000000  00000000  00031218  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000071dd  00000000  00000000  00031f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000048b4  00000000  00000000  00039145  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003d9f9  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003d04  00000000  00000000  0003da78  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005850 	.word	0x08005850

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08005850 	.word	0x08005850

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__gedf2>:
 80004c0:	f04f 3cff 	mov.w	ip, #4294967295
 80004c4:	e006      	b.n	80004d4 <__cmpdf2+0x4>
 80004c6:	bf00      	nop

080004c8 <__ledf2>:
 80004c8:	f04f 0c01 	mov.w	ip, #1
 80004cc:	e002      	b.n	80004d4 <__cmpdf2+0x4>
 80004ce:	bf00      	nop

080004d0 <__cmpdf2>:
 80004d0:	f04f 0c01 	mov.w	ip, #1
 80004d4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80004d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80004dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80004e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80004e4:	bf18      	it	ne
 80004e6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80004ea:	d01b      	beq.n	8000524 <__cmpdf2+0x54>
 80004ec:	b001      	add	sp, #4
 80004ee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80004f2:	bf0c      	ite	eq
 80004f4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80004f8:	ea91 0f03 	teqne	r1, r3
 80004fc:	bf02      	ittt	eq
 80004fe:	ea90 0f02 	teqeq	r0, r2
 8000502:	2000      	moveq	r0, #0
 8000504:	4770      	bxeq	lr
 8000506:	f110 0f00 	cmn.w	r0, #0
 800050a:	ea91 0f03 	teq	r1, r3
 800050e:	bf58      	it	pl
 8000510:	4299      	cmppl	r1, r3
 8000512:	bf08      	it	eq
 8000514:	4290      	cmpeq	r0, r2
 8000516:	bf2c      	ite	cs
 8000518:	17d8      	asrcs	r0, r3, #31
 800051a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800051e:	f040 0001 	orr.w	r0, r0, #1
 8000522:	4770      	bx	lr
 8000524:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000528:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800052c:	d102      	bne.n	8000534 <__cmpdf2+0x64>
 800052e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000532:	d107      	bne.n	8000544 <__cmpdf2+0x74>
 8000534:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000538:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800053c:	d1d6      	bne.n	80004ec <__cmpdf2+0x1c>
 800053e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000542:	d0d3      	beq.n	80004ec <__cmpdf2+0x1c>
 8000544:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <__aeabi_cdrcmple>:
 800054c:	4684      	mov	ip, r0
 800054e:	4610      	mov	r0, r2
 8000550:	4662      	mov	r2, ip
 8000552:	468c      	mov	ip, r1
 8000554:	4619      	mov	r1, r3
 8000556:	4663      	mov	r3, ip
 8000558:	e000      	b.n	800055c <__aeabi_cdcmpeq>
 800055a:	bf00      	nop

0800055c <__aeabi_cdcmpeq>:
 800055c:	b501      	push	{r0, lr}
 800055e:	f7ff ffb7 	bl	80004d0 <__cmpdf2>
 8000562:	2800      	cmp	r0, #0
 8000564:	bf48      	it	mi
 8000566:	f110 0f00 	cmnmi.w	r0, #0
 800056a:	bd01      	pop	{r0, pc}

0800056c <__aeabi_dcmpeq>:
 800056c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000570:	f7ff fff4 	bl	800055c <__aeabi_cdcmpeq>
 8000574:	bf0c      	ite	eq
 8000576:	2001      	moveq	r0, #1
 8000578:	2000      	movne	r0, #0
 800057a:	f85d fb08 	ldr.w	pc, [sp], #8
 800057e:	bf00      	nop

08000580 <__aeabi_dcmplt>:
 8000580:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000584:	f7ff ffea 	bl	800055c <__aeabi_cdcmpeq>
 8000588:	bf34      	ite	cc
 800058a:	2001      	movcc	r0, #1
 800058c:	2000      	movcs	r0, #0
 800058e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000592:	bf00      	nop

08000594 <__aeabi_dcmple>:
 8000594:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000598:	f7ff ffe0 	bl	800055c <__aeabi_cdcmpeq>
 800059c:	bf94      	ite	ls
 800059e:	2001      	movls	r0, #1
 80005a0:	2000      	movhi	r0, #0
 80005a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005a6:	bf00      	nop

080005a8 <__aeabi_dcmpge>:
 80005a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ac:	f7ff ffce 	bl	800054c <__aeabi_cdrcmple>
 80005b0:	bf94      	ite	ls
 80005b2:	2001      	movls	r0, #1
 80005b4:	2000      	movhi	r0, #0
 80005b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ba:	bf00      	nop

080005bc <__aeabi_dcmpgt>:
 80005bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c0:	f7ff ffc4 	bl	800054c <__aeabi_cdrcmple>
 80005c4:	bf34      	ite	cc
 80005c6:	2001      	movcc	r0, #1
 80005c8:	2000      	movcs	r0, #0
 80005ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80005ce:	bf00      	nop

080005d0 <__aeabi_d2uiz>:
 80005d0:	004a      	lsls	r2, r1, #1
 80005d2:	d211      	bcs.n	80005f8 <__aeabi_d2uiz+0x28>
 80005d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005d8:	d211      	bcs.n	80005fe <__aeabi_d2uiz+0x2e>
 80005da:	d50d      	bpl.n	80005f8 <__aeabi_d2uiz+0x28>
 80005dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005e4:	d40e      	bmi.n	8000604 <__aeabi_d2uiz+0x34>
 80005e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80005ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80005ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80005f2:	fa23 f002 	lsr.w	r0, r3, r2
 80005f6:	4770      	bx	lr
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	4770      	bx	lr
 80005fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000602:	d102      	bne.n	800060a <__aeabi_d2uiz+0x3a>
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	4770      	bx	lr
 800060a:	f04f 0000 	mov.w	r0, #0
 800060e:	4770      	bx	lr

08000610 <__aeabi_frsub>:
 8000610:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000614:	e002      	b.n	800061c <__addsf3>
 8000616:	bf00      	nop

08000618 <__aeabi_fsub>:
 8000618:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800061c <__addsf3>:
 800061c:	0042      	lsls	r2, r0, #1
 800061e:	bf1f      	itttt	ne
 8000620:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000624:	ea92 0f03 	teqne	r2, r3
 8000628:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800062c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000630:	d06a      	beq.n	8000708 <__addsf3+0xec>
 8000632:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000636:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800063a:	bfc1      	itttt	gt
 800063c:	18d2      	addgt	r2, r2, r3
 800063e:	4041      	eorgt	r1, r0
 8000640:	4048      	eorgt	r0, r1
 8000642:	4041      	eorgt	r1, r0
 8000644:	bfb8      	it	lt
 8000646:	425b      	neglt	r3, r3
 8000648:	2b19      	cmp	r3, #25
 800064a:	bf88      	it	hi
 800064c:	4770      	bxhi	lr
 800064e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000652:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000656:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800065a:	bf18      	it	ne
 800065c:	4240      	negne	r0, r0
 800065e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000662:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000666:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800066a:	bf18      	it	ne
 800066c:	4249      	negne	r1, r1
 800066e:	ea92 0f03 	teq	r2, r3
 8000672:	d03f      	beq.n	80006f4 <__addsf3+0xd8>
 8000674:	f1a2 0201 	sub.w	r2, r2, #1
 8000678:	fa41 fc03 	asr.w	ip, r1, r3
 800067c:	eb10 000c 	adds.w	r0, r0, ip
 8000680:	f1c3 0320 	rsb	r3, r3, #32
 8000684:	fa01 f103 	lsl.w	r1, r1, r3
 8000688:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800068c:	d502      	bpl.n	8000694 <__addsf3+0x78>
 800068e:	4249      	negs	r1, r1
 8000690:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000694:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000698:	d313      	bcc.n	80006c2 <__addsf3+0xa6>
 800069a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800069e:	d306      	bcc.n	80006ae <__addsf3+0x92>
 80006a0:	0840      	lsrs	r0, r0, #1
 80006a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a6:	f102 0201 	add.w	r2, r2, #1
 80006aa:	2afe      	cmp	r2, #254	; 0xfe
 80006ac:	d251      	bcs.n	8000752 <__addsf3+0x136>
 80006ae:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006b2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006b6:	bf08      	it	eq
 80006b8:	f020 0001 	biceq.w	r0, r0, #1
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	4770      	bx	lr
 80006c2:	0049      	lsls	r1, r1, #1
 80006c4:	eb40 0000 	adc.w	r0, r0, r0
 80006c8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80006cc:	f1a2 0201 	sub.w	r2, r2, #1
 80006d0:	d1ed      	bne.n	80006ae <__addsf3+0x92>
 80006d2:	fab0 fc80 	clz	ip, r0
 80006d6:	f1ac 0c08 	sub.w	ip, ip, #8
 80006da:	ebb2 020c 	subs.w	r2, r2, ip
 80006de:	fa00 f00c 	lsl.w	r0, r0, ip
 80006e2:	bfaa      	itet	ge
 80006e4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006e8:	4252      	neglt	r2, r2
 80006ea:	4318      	orrge	r0, r3
 80006ec:	bfbc      	itt	lt
 80006ee:	40d0      	lsrlt	r0, r2
 80006f0:	4318      	orrlt	r0, r3
 80006f2:	4770      	bx	lr
 80006f4:	f092 0f00 	teq	r2, #0
 80006f8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80006fc:	bf06      	itte	eq
 80006fe:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000702:	3201      	addeq	r2, #1
 8000704:	3b01      	subne	r3, #1
 8000706:	e7b5      	b.n	8000674 <__addsf3+0x58>
 8000708:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800070c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000710:	bf18      	it	ne
 8000712:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000716:	d021      	beq.n	800075c <__addsf3+0x140>
 8000718:	ea92 0f03 	teq	r2, r3
 800071c:	d004      	beq.n	8000728 <__addsf3+0x10c>
 800071e:	f092 0f00 	teq	r2, #0
 8000722:	bf08      	it	eq
 8000724:	4608      	moveq	r0, r1
 8000726:	4770      	bx	lr
 8000728:	ea90 0f01 	teq	r0, r1
 800072c:	bf1c      	itt	ne
 800072e:	2000      	movne	r0, #0
 8000730:	4770      	bxne	lr
 8000732:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000736:	d104      	bne.n	8000742 <__addsf3+0x126>
 8000738:	0040      	lsls	r0, r0, #1
 800073a:	bf28      	it	cs
 800073c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000740:	4770      	bx	lr
 8000742:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000746:	bf3c      	itt	cc
 8000748:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800074c:	4770      	bxcc	lr
 800074e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000752:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000756:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800075a:	4770      	bx	lr
 800075c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000760:	bf16      	itet	ne
 8000762:	4608      	movne	r0, r1
 8000764:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000768:	4601      	movne	r1, r0
 800076a:	0242      	lsls	r2, r0, #9
 800076c:	bf06      	itte	eq
 800076e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000772:	ea90 0f01 	teqeq	r0, r1
 8000776:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800077a:	4770      	bx	lr

0800077c <__aeabi_ui2f>:
 800077c:	f04f 0300 	mov.w	r3, #0
 8000780:	e004      	b.n	800078c <__aeabi_i2f+0x8>
 8000782:	bf00      	nop

08000784 <__aeabi_i2f>:
 8000784:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000788:	bf48      	it	mi
 800078a:	4240      	negmi	r0, r0
 800078c:	ea5f 0c00 	movs.w	ip, r0
 8000790:	bf08      	it	eq
 8000792:	4770      	bxeq	lr
 8000794:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000798:	4601      	mov	r1, r0
 800079a:	f04f 0000 	mov.w	r0, #0
 800079e:	e01c      	b.n	80007da <__aeabi_l2f+0x2a>

080007a0 <__aeabi_ul2f>:
 80007a0:	ea50 0201 	orrs.w	r2, r0, r1
 80007a4:	bf08      	it	eq
 80007a6:	4770      	bxeq	lr
 80007a8:	f04f 0300 	mov.w	r3, #0
 80007ac:	e00a      	b.n	80007c4 <__aeabi_l2f+0x14>
 80007ae:	bf00      	nop

080007b0 <__aeabi_l2f>:
 80007b0:	ea50 0201 	orrs.w	r2, r0, r1
 80007b4:	bf08      	it	eq
 80007b6:	4770      	bxeq	lr
 80007b8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007bc:	d502      	bpl.n	80007c4 <__aeabi_l2f+0x14>
 80007be:	4240      	negs	r0, r0
 80007c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007c4:	ea5f 0c01 	movs.w	ip, r1
 80007c8:	bf02      	ittt	eq
 80007ca:	4684      	moveq	ip, r0
 80007cc:	4601      	moveq	r1, r0
 80007ce:	2000      	moveq	r0, #0
 80007d0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80007d4:	bf08      	it	eq
 80007d6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80007da:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80007de:	fabc f28c 	clz	r2, ip
 80007e2:	3a08      	subs	r2, #8
 80007e4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007e8:	db10      	blt.n	800080c <__aeabi_l2f+0x5c>
 80007ea:	fa01 fc02 	lsl.w	ip, r1, r2
 80007ee:	4463      	add	r3, ip
 80007f0:	fa00 fc02 	lsl.w	ip, r0, r2
 80007f4:	f1c2 0220 	rsb	r2, r2, #32
 80007f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80007fc:	fa20 f202 	lsr.w	r2, r0, r2
 8000800:	eb43 0002 	adc.w	r0, r3, r2
 8000804:	bf08      	it	eq
 8000806:	f020 0001 	biceq.w	r0, r0, #1
 800080a:	4770      	bx	lr
 800080c:	f102 0220 	add.w	r2, r2, #32
 8000810:	fa01 fc02 	lsl.w	ip, r1, r2
 8000814:	f1c2 0220 	rsb	r2, r2, #32
 8000818:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800081c:	fa21 f202 	lsr.w	r2, r1, r2
 8000820:	eb43 0002 	adc.w	r0, r3, r2
 8000824:	bf08      	it	eq
 8000826:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800082a:	4770      	bx	lr

0800082c <__aeabi_fmul>:
 800082c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000830:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000834:	bf1e      	ittt	ne
 8000836:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800083a:	ea92 0f0c 	teqne	r2, ip
 800083e:	ea93 0f0c 	teqne	r3, ip
 8000842:	d06f      	beq.n	8000924 <__aeabi_fmul+0xf8>
 8000844:	441a      	add	r2, r3
 8000846:	ea80 0c01 	eor.w	ip, r0, r1
 800084a:	0240      	lsls	r0, r0, #9
 800084c:	bf18      	it	ne
 800084e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000852:	d01e      	beq.n	8000892 <__aeabi_fmul+0x66>
 8000854:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000858:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800085c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000860:	fba0 3101 	umull	r3, r1, r0, r1
 8000864:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000868:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800086c:	bf3e      	ittt	cc
 800086e:	0049      	lslcc	r1, r1, #1
 8000870:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000874:	005b      	lslcc	r3, r3, #1
 8000876:	ea40 0001 	orr.w	r0, r0, r1
 800087a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800087e:	2afd      	cmp	r2, #253	; 0xfd
 8000880:	d81d      	bhi.n	80008be <__aeabi_fmul+0x92>
 8000882:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000886:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800088a:	bf08      	it	eq
 800088c:	f020 0001 	biceq.w	r0, r0, #1
 8000890:	4770      	bx	lr
 8000892:	f090 0f00 	teq	r0, #0
 8000896:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800089a:	bf08      	it	eq
 800089c:	0249      	lsleq	r1, r1, #9
 800089e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008a2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008a6:	3a7f      	subs	r2, #127	; 0x7f
 80008a8:	bfc2      	ittt	gt
 80008aa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008ae:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80008b2:	4770      	bxgt	lr
 80008b4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	3a01      	subs	r2, #1
 80008be:	dc5d      	bgt.n	800097c <__aeabi_fmul+0x150>
 80008c0:	f112 0f19 	cmn.w	r2, #25
 80008c4:	bfdc      	itt	le
 80008c6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008ca:	4770      	bxle	lr
 80008cc:	f1c2 0200 	rsb	r2, r2, #0
 80008d0:	0041      	lsls	r1, r0, #1
 80008d2:	fa21 f102 	lsr.w	r1, r1, r2
 80008d6:	f1c2 0220 	rsb	r2, r2, #32
 80008da:	fa00 fc02 	lsl.w	ip, r0, r2
 80008de:	ea5f 0031 	movs.w	r0, r1, rrx
 80008e2:	f140 0000 	adc.w	r0, r0, #0
 80008e6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008ea:	bf08      	it	eq
 80008ec:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008f0:	4770      	bx	lr
 80008f2:	f092 0f00 	teq	r2, #0
 80008f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008fa:	bf02      	ittt	eq
 80008fc:	0040      	lsleq	r0, r0, #1
 80008fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000902:	3a01      	subeq	r2, #1
 8000904:	d0f9      	beq.n	80008fa <__aeabi_fmul+0xce>
 8000906:	ea40 000c 	orr.w	r0, r0, ip
 800090a:	f093 0f00 	teq	r3, #0
 800090e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000912:	bf02      	ittt	eq
 8000914:	0049      	lsleq	r1, r1, #1
 8000916:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800091a:	3b01      	subeq	r3, #1
 800091c:	d0f9      	beq.n	8000912 <__aeabi_fmul+0xe6>
 800091e:	ea41 010c 	orr.w	r1, r1, ip
 8000922:	e78f      	b.n	8000844 <__aeabi_fmul+0x18>
 8000924:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000928:	ea92 0f0c 	teq	r2, ip
 800092c:	bf18      	it	ne
 800092e:	ea93 0f0c 	teqne	r3, ip
 8000932:	d00a      	beq.n	800094a <__aeabi_fmul+0x11e>
 8000934:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000938:	bf18      	it	ne
 800093a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800093e:	d1d8      	bne.n	80008f2 <__aeabi_fmul+0xc6>
 8000940:	ea80 0001 	eor.w	r0, r0, r1
 8000944:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000948:	4770      	bx	lr
 800094a:	f090 0f00 	teq	r0, #0
 800094e:	bf17      	itett	ne
 8000950:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000954:	4608      	moveq	r0, r1
 8000956:	f091 0f00 	teqne	r1, #0
 800095a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800095e:	d014      	beq.n	800098a <__aeabi_fmul+0x15e>
 8000960:	ea92 0f0c 	teq	r2, ip
 8000964:	d101      	bne.n	800096a <__aeabi_fmul+0x13e>
 8000966:	0242      	lsls	r2, r0, #9
 8000968:	d10f      	bne.n	800098a <__aeabi_fmul+0x15e>
 800096a:	ea93 0f0c 	teq	r3, ip
 800096e:	d103      	bne.n	8000978 <__aeabi_fmul+0x14c>
 8000970:	024b      	lsls	r3, r1, #9
 8000972:	bf18      	it	ne
 8000974:	4608      	movne	r0, r1
 8000976:	d108      	bne.n	800098a <__aeabi_fmul+0x15e>
 8000978:	ea80 0001 	eor.w	r0, r0, r1
 800097c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000988:	4770      	bx	lr
 800098a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800098e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000992:	4770      	bx	lr

08000994 <__aeabi_fdiv>:
 8000994:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000998:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800099c:	bf1e      	ittt	ne
 800099e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009a2:	ea92 0f0c 	teqne	r2, ip
 80009a6:	ea93 0f0c 	teqne	r3, ip
 80009aa:	d069      	beq.n	8000a80 <__aeabi_fdiv+0xec>
 80009ac:	eba2 0203 	sub.w	r2, r2, r3
 80009b0:	ea80 0c01 	eor.w	ip, r0, r1
 80009b4:	0249      	lsls	r1, r1, #9
 80009b6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009ba:	d037      	beq.n	8000a2c <__aeabi_fdiv+0x98>
 80009bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009c0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009c4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009c8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009cc:	428b      	cmp	r3, r1
 80009ce:	bf38      	it	cc
 80009d0:	005b      	lslcc	r3, r3, #1
 80009d2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009d6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009da:	428b      	cmp	r3, r1
 80009dc:	bf24      	itt	cs
 80009de:	1a5b      	subcs	r3, r3, r1
 80009e0:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009e8:	bf24      	itt	cs
 80009ea:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009ee:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009f6:	bf24      	itt	cs
 80009f8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a04:	bf24      	itt	cs
 8000a06:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a0a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	bf18      	it	ne
 8000a12:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a16:	d1e0      	bne.n	80009da <__aeabi_fdiv+0x46>
 8000a18:	2afd      	cmp	r2, #253	; 0xfd
 8000a1a:	f63f af50 	bhi.w	80008be <__aeabi_fmul+0x92>
 8000a1e:	428b      	cmp	r3, r1
 8000a20:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a24:	bf08      	it	eq
 8000a26:	f020 0001 	biceq.w	r0, r0, #1
 8000a2a:	4770      	bx	lr
 8000a2c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a30:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a34:	327f      	adds	r2, #127	; 0x7f
 8000a36:	bfc2      	ittt	gt
 8000a38:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a3c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a40:	4770      	bxgt	lr
 8000a42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a46:	f04f 0300 	mov.w	r3, #0
 8000a4a:	3a01      	subs	r2, #1
 8000a4c:	e737      	b.n	80008be <__aeabi_fmul+0x92>
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0040      	lsleq	r0, r0, #1
 8000a5a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a5e:	3a01      	subeq	r2, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fdiv+0xc2>
 8000a62:	ea40 000c 	orr.w	r0, r0, ip
 8000a66:	f093 0f00 	teq	r3, #0
 8000a6a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0049      	lsleq	r1, r1, #1
 8000a72:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a76:	3b01      	subeq	r3, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fdiv+0xda>
 8000a7a:	ea41 010c 	orr.w	r1, r1, ip
 8000a7e:	e795      	b.n	80009ac <__aeabi_fdiv+0x18>
 8000a80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	d108      	bne.n	8000a9c <__aeabi_fdiv+0x108>
 8000a8a:	0242      	lsls	r2, r0, #9
 8000a8c:	f47f af7d 	bne.w	800098a <__aeabi_fmul+0x15e>
 8000a90:	ea93 0f0c 	teq	r3, ip
 8000a94:	f47f af70 	bne.w	8000978 <__aeabi_fmul+0x14c>
 8000a98:	4608      	mov	r0, r1
 8000a9a:	e776      	b.n	800098a <__aeabi_fmul+0x15e>
 8000a9c:	ea93 0f0c 	teq	r3, ip
 8000aa0:	d104      	bne.n	8000aac <__aeabi_fdiv+0x118>
 8000aa2:	024b      	lsls	r3, r1, #9
 8000aa4:	f43f af4c 	beq.w	8000940 <__aeabi_fmul+0x114>
 8000aa8:	4608      	mov	r0, r1
 8000aaa:	e76e      	b.n	800098a <__aeabi_fmul+0x15e>
 8000aac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ab0:	bf18      	it	ne
 8000ab2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ab6:	d1ca      	bne.n	8000a4e <__aeabi_fdiv+0xba>
 8000ab8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000abc:	f47f af5c 	bne.w	8000978 <__aeabi_fmul+0x14c>
 8000ac0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ac4:	f47f af3c 	bne.w	8000940 <__aeabi_fmul+0x114>
 8000ac8:	e75f      	b.n	800098a <__aeabi_fmul+0x15e>
 8000aca:	bf00      	nop

08000acc <CANManager_Init>:
/* ---------------------------- */
/*       Global functions       */
/* ---------------------------- */

void CANManager_Init(CAN_HandleTypeDef* hcan)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	_hcan = hcan;
 8000ad4:	4a03      	ldr	r2, [pc, #12]	; (8000ae4 <CANManager_Init+0x18>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000158 	.word	0x20000158

08000ae8 <CAN_ReceiveMsg>:

void CAN_ReceiveMsg(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
	HAL_CAN_GetRxMessage(_hcan, CAN_RX_FIFO0, &RxHeader, receive_buff);
 8000aec:	4b04      	ldr	r3, [pc, #16]	; (8000b00 <CAN_ReceiveMsg+0x18>)
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <CAN_ReceiveMsg+0x1c>)
 8000af2:	4a05      	ldr	r2, [pc, #20]	; (8000b08 <CAN_ReceiveMsg+0x20>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	f002 fc54 	bl	80033a2 <HAL_CAN_GetRxMessage>
	  {
		  GearControl_SetControl(GEAR_ENABLE);
	  }
  }
#endif
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000158 	.word	0x20000158
 8000b04:	2000011c 	.word	0x2000011c
 8000b08:	20000174 	.word	0x20000174

08000b0c <CAN_TransmitMsg>:

void CAN_TransmitMsg(uint8* data)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	HAL_CAN_AddTxMessage(_hcan, &TxHeader, data, &TxMailbox);
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <CAN_TransmitMsg+0x20>)
 8000b16:	6818      	ldr	r0, [r3, #0]
 8000b18:	4b05      	ldr	r3, [pc, #20]	; (8000b30 <CAN_TransmitMsg+0x24>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	4905      	ldr	r1, [pc, #20]	; (8000b34 <CAN_TransmitMsg+0x28>)
 8000b1e:	f002 fb6a 	bl	80031f6 <HAL_CAN_AddTxMessage>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000158 	.word	0x20000158
 8000b30:	20000154 	.word	0x20000154
 8000b34:	2000015c 	.word	0x2000015c

08000b38 <CAN_Init>:

HAL_StatusTypeDef CAN_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = 0;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	71fb      	strb	r3, [r7, #7]

	TxHeader.DLC = 8; /* Data frame length */
 8000b42:	4b26      	ldr	r3, [pc, #152]	; (8000bdc <CAN_Init+0xa4>)
 8000b44:	2208      	movs	r2, #8
 8000b46:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD; /* Frame ID type (standard) */
 8000b48:	4b24      	ldr	r3, [pc, #144]	; (8000bdc <CAN_Init+0xa4>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA; /* Frame type */
 8000b4e:	4b23      	ldr	r3, [pc, #140]	; (8000bdc <CAN_Init+0xa4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 1; /* standard ID, od 0 do 0x7FF */
 8000b54:	4b21      	ldr	r3, [pc, #132]	; (8000bdc <CAN_Init+0xa4>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	601a      	str	r2, [r3, #0]

	filterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <CAN_Init+0xa8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
	filterconfig.FilterIdHigh = 0x4;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	; (8000be0 <CAN_Init+0xa8>)
 8000b62:	2204      	movs	r2, #4
 8000b64:	601a      	str	r2, [r3, #0]
	filterconfig.FilterIdLow = 0x0000;
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <CAN_Init+0xa8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	605a      	str	r2, [r3, #4]
	filterconfig.FilterMaskIdHigh = 0x4;
 8000b6c:	4b1c      	ldr	r3, [pc, #112]	; (8000be0 <CAN_Init+0xa8>)
 8000b6e:	2204      	movs	r2, #4
 8000b70:	609a      	str	r2, [r3, #8]
	filterconfig.FilterMaskIdLow = 0x0000;
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <CAN_Init+0xa8>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
	filterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <CAN_Init+0xa8>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	61da      	str	r2, [r3, #28]
	filterconfig.FilterBank = 0;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <CAN_Init+0xa8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
	filterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b84:	4b16      	ldr	r3, [pc, #88]	; (8000be0 <CAN_Init+0xa8>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
	filterconfig.FilterActivation = ENABLE;
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <CAN_Init+0xa8>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	621a      	str	r2, [r3, #32]

	status |= HAL_CAN_ConfigFilter(_hcan, &filterconfig);
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <CAN_Init+0xac>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4912      	ldr	r1, [pc, #72]	; (8000be0 <CAN_Init+0xa8>)
 8000b96:	4618      	mov	r0, r3
 8000b98:	f002 fa20 	bl	8002fdc <HAL_CAN_ConfigFilter>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	71fb      	strb	r3, [r7, #7]
	status |= HAL_CAN_Start(_hcan);
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <CAN_Init+0xac>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fadf 	bl	800316e <HAL_CAN_Start>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	461a      	mov	r2, r3
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	71fb      	strb	r3, [r7, #7]
	status |= HAL_CAN_ActivateNotification(_hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000bba:	4b0a      	ldr	r3, [pc, #40]	; (8000be4 <CAN_Init+0xac>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 fcff 	bl	80035c4 <HAL_CAN_ActivateNotification>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	461a      	mov	r2, r3
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	71fb      	strb	r3, [r7, #7]

	return status;
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	2000015c 	.word	0x2000015c
 8000be0:	20000124 	.word	0x20000124
 8000be4:	20000158 	.word	0x20000158

08000be8 <Encoder_AvgSamples>:
/* ---------------------------- */
/*       Static functions       */
/* ---------------------------- */

static uint16 Encoder_AvgSamples(uint16 new_sample)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	uint16 avg = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	81fb      	strh	r3, [r7, #14]
	uint16 sample = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	81bb      	strh	r3, [r7, #12]

	/* Queue new sample in FIFO */
	for(sample = 3; sample > 0U; --sample)
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	81bb      	strh	r3, [r7, #12]
 8000bfe:	e012      	b.n	8000c26 <Encoder_AvgSamples+0x3e>
	{
		posBuff[sample] = posBuff[sample - 1];
 8000c00:	89bb      	ldrh	r3, [r7, #12]
 8000c02:	89ba      	ldrh	r2, [r7, #12]
 8000c04:	3a01      	subs	r2, #1
 8000c06:	4911      	ldr	r1, [pc, #68]	; (8000c4c <Encoder_AvgSamples+0x64>)
 8000c08:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 8000c0c:	4a0f      	ldr	r2, [pc, #60]	; (8000c4c <Encoder_AvgSamples+0x64>)
 8000c0e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		avg = (uint16)(avg + posBuff[sample]);
 8000c12:	89bb      	ldrh	r3, [r7, #12]
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <Encoder_AvgSamples+0x64>)
 8000c16:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c1a:	89fb      	ldrh	r3, [r7, #14]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	81fb      	strh	r3, [r7, #14]
	for(sample = 3; sample > 0U; --sample)
 8000c20:	89bb      	ldrh	r3, [r7, #12]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	81bb      	strh	r3, [r7, #12]
 8000c26:	89bb      	ldrh	r3, [r7, #12]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1e9      	bne.n	8000c00 <Encoder_AvgSamples+0x18>
	}
	posBuff[0] = new_sample;
 8000c2c:	4a07      	ldr	r2, [pc, #28]	; (8000c4c <Encoder_AvgSamples+0x64>)
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	8013      	strh	r3, [r2, #0]
	avg += new_sample;
 8000c32:	89fa      	ldrh	r2, [r7, #14]
 8000c34:	88fb      	ldrh	r3, [r7, #6]
 8000c36:	4413      	add	r3, r2
 8000c38:	81fb      	strh	r3, [r7, #14]
	avg /= 4U;
 8000c3a:	89fb      	ldrh	r3, [r7, #14]
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	81fb      	strh	r3, [r7, #14]

	return avg;
 8000c40:	89fb      	ldrh	r3, [r7, #14]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3714      	adds	r7, #20
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bc80      	pop	{r7}
 8000c4a:	4770      	bx	lr
 8000c4c:	2000009c 	.word	0x2000009c

08000c50 <Encoder_Read>:

static uint16 Encoder_Read(void)
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
	uint16 pos = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	80fb      	strh	r3, [r7, #6]
	uint8 i = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	717b      	strb	r3, [r7, #5]

	HAL_GPIO_WritePin(GPIOA, ABS_CS_Pin, GPIO_PIN_SET);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	2120      	movs	r1, #32
 8000c62:	4830      	ldr	r0, [pc, #192]	; (8000d24 <Encoder_Read+0xd4>)
 8000c64:	f003 fb71 	bl	800434a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, ABS_CS_Pin, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2120      	movs	r1, #32
 8000c6c:	482d      	ldr	r0, [pc, #180]	; (8000d24 <Encoder_Read+0xd4>)
 8000c6e:	f003 fb6c 	bl	800434a <HAL_GPIO_WritePin>

	for(i = 0; i < ANGULAR_POS_DATA_BITS; ++i)
 8000c72:	2300      	movs	r3, #0
 8000c74:	717b      	strb	r3, [r7, #5]
 8000c76:	e01b      	b.n	8000cb0 <Encoder_Read+0x60>
	{
		HAL_GPIO_WritePin(GPIOA, ABS_CLK_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	2108      	movs	r1, #8
 8000c7c:	4829      	ldr	r0, [pc, #164]	; (8000d24 <Encoder_Read+0xd4>)
 8000c7e:	f003 fb64 	bl	800434a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ABS_CLK_Pin, GPIO_PIN_SET);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2108      	movs	r1, #8
 8000c86:	4827      	ldr	r0, [pc, #156]	; (8000d24 <Encoder_Read+0xd4>)
 8000c88:	f003 fb5f 	bl	800434a <HAL_GPIO_WritePin>

		pos |= (uint16)(HAL_GPIO_ReadPin(GPIOA, ABS_DO_Pin) << (10u - (i + 1u)));
 8000c8c:	2180      	movs	r1, #128	; 0x80
 8000c8e:	4825      	ldr	r0, [pc, #148]	; (8000d24 <Encoder_Read+0xd4>)
 8000c90:	f003 fb44 	bl	800431c <HAL_GPIO_ReadPin>
 8000c94:	4603      	mov	r3, r0
 8000c96:	461a      	mov	r2, r3
 8000c98:	797b      	ldrb	r3, [r7, #5]
 8000c9a:	f1c3 0309 	rsb	r3, r3, #9
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	80fb      	strh	r3, [r7, #6]
	for(i = 0; i < ANGULAR_POS_DATA_BITS; ++i)
 8000caa:	797b      	ldrb	r3, [r7, #5]
 8000cac:	3301      	adds	r3, #1
 8000cae:	717b      	strb	r3, [r7, #5]
 8000cb0:	797b      	ldrb	r3, [r7, #5]
 8000cb2:	2b09      	cmp	r3, #9
 8000cb4:	d9e0      	bls.n	8000c78 <Encoder_Read+0x28>
	}

	/* Status bits S1-S5 */
	for(i = 0; i < STATUS_BITS; ++i)
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	717b      	strb	r3, [r7, #5]
 8000cba:	e015      	b.n	8000ce8 <Encoder_Read+0x98>
	{
		HAL_GPIO_WritePin(GPIOA, ABS_CLK_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	4818      	ldr	r0, [pc, #96]	; (8000d24 <Encoder_Read+0xd4>)
 8000cc2:	f003 fb42 	bl	800434a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, ABS_CLK_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2108      	movs	r1, #8
 8000cca:	4816      	ldr	r0, [pc, #88]	; (8000d24 <Encoder_Read+0xd4>)
 8000ccc:	f003 fb3d 	bl	800434a <HAL_GPIO_WritePin>

		status_bits[i] = (uint8)HAL_GPIO_ReadPin(GPIOA, ABS_DO_Pin);
 8000cd0:	797c      	ldrb	r4, [r7, #5]
 8000cd2:	2180      	movs	r1, #128	; 0x80
 8000cd4:	4813      	ldr	r0, [pc, #76]	; (8000d24 <Encoder_Read+0xd4>)
 8000cd6:	f003 fb21 	bl	800431c <HAL_GPIO_ReadPin>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <Encoder_Read+0xd8>)
 8000ce0:	551a      	strb	r2, [r3, r4]
	for(i = 0; i < STATUS_BITS; ++i)
 8000ce2:	797b      	ldrb	r3, [r7, #5]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	717b      	strb	r3, [r7, #5]
 8000ce8:	797b      	ldrb	r3, [r7, #5]
 8000cea:	2b03      	cmp	r3, #3
 8000cec:	d9e6      	bls.n	8000cbc <Encoder_Read+0x6c>
	}

	/* Parity bit P1 */
	HAL_GPIO_WritePin(GPIOA, ABS_CLK_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2108      	movs	r1, #8
 8000cf2:	480c      	ldr	r0, [pc, #48]	; (8000d24 <Encoder_Read+0xd4>)
 8000cf4:	f003 fb29 	bl	800434a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, ABS_CLK_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2108      	movs	r1, #8
 8000cfc:	4809      	ldr	r0, [pc, #36]	; (8000d24 <Encoder_Read+0xd4>)
 8000cfe:	f003 fb24 	bl	800434a <HAL_GPIO_WritePin>

	parity_bit |= (uint8)HAL_GPIO_ReadPin(GPIOA, ABS_DO_Pin);
 8000d02:	2180      	movs	r1, #128	; 0x80
 8000d04:	4807      	ldr	r0, [pc, #28]	; (8000d24 <Encoder_Read+0xd4>)
 8000d06:	f003 fb09 	bl	800431c <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <Encoder_Read+0xdc>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	4313      	orrs	r3, r2
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4b05      	ldr	r3, [pc, #20]	; (8000d2c <Encoder_Read+0xdc>)
 8000d18:	701a      	strb	r2, [r3, #0]

	return pos;
 8000d1a:	88fb      	ldrh	r3, [r7, #6]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd90      	pop	{r4, r7, pc}
 8000d24:	40010800 	.word	0x40010800
 8000d28:	20000098 	.word	0x20000098
 8000d2c:	200000a4 	.word	0x200000a4

08000d30 <Encoder_Init>:
/* ---------------------------- */
/*       Global functions       */
/* ---------------------------- */

boolean Encoder_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
	static uint8 samples_i = 0;
	boolean ret = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	71fb      	strb	r3, [r7, #7]
	uint16 val = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	80bb      	strh	r3, [r7, #4]

	val = Encoder_Read();
 8000d3e:	f7ff ff87 	bl	8000c50 <Encoder_Read>
 8000d42:	4603      	mov	r3, r0
 8000d44:	80bb      	strh	r3, [r7, #4]

	if ((val > 0) && (val < 1024U))
 8000d46:	88bb      	ldrh	r3, [r7, #4]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d022      	beq.n	8000d92 <Encoder_Init+0x62>
 8000d4c:	88bb      	ldrh	r3, [r7, #4]
 8000d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d52:	d21e      	bcs.n	8000d92 <Encoder_Init+0x62>
	{
		if (samples_i < 3)
 8000d54:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <Encoder_Init+0x6c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d80d      	bhi.n	8000d78 <Encoder_Init+0x48>
		{
			posBuff[samples_i] = val;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <Encoder_Init+0x6c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	4619      	mov	r1, r3
 8000d62:	4a0f      	ldr	r2, [pc, #60]	; (8000da0 <Encoder_Init+0x70>)
 8000d64:	88bb      	ldrh	r3, [r7, #4]
 8000d66:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
			++samples_i;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <Encoder_Init+0x6c>)
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <Encoder_Init+0x6c>)
 8000d74:	701a      	strb	r2, [r3, #0]
 8000d76:	e00c      	b.n	8000d92 <Encoder_Init+0x62>
		}
		else
		{
			start_pos = Encoder_AvgSamples(val);
 8000d78:	88bb      	ldrh	r3, [r7, #4]
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff34 	bl	8000be8 <Encoder_AvgSamples>
 8000d80:	4603      	mov	r3, r0
 8000d82:	461a      	mov	r2, r3
 8000d84:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <Encoder_Init+0x74>)
 8000d86:	801a      	strh	r2, [r3, #0]
			samples_i = 0;
 8000d88:	4b04      	ldr	r3, [pc, #16]	; (8000d9c <Encoder_Init+0x6c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	701a      	strb	r2, [r3, #0]
			ret = TRUE;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	71fb      	strb	r3, [r7, #7]
		}
	}

	return ret;
 8000d92:	79fb      	ldrb	r3, [r7, #7]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000a8 	.word	0x200000a8
 8000da0:	2000009c 	.word	0x2000009c
 8000da4:	200000a6 	.word	0x200000a6

08000da8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000dac:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000db0:	4905      	ldr	r1, [pc, #20]	; (8000dc8 <__NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000db2:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <__NVIC_SystemReset+0x20>)
 8000db4:	68db      	ldr	r3, [r3, #12]
 8000db6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__NVIC_SystemReset+0x24>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	60cb      	str	r3, [r1, #12]
 8000dc0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <__NVIC_SystemReset+0x1c>
 8000dc8:	e000ed00 	.word	0xe000ed00
 8000dcc:	05fa0004 	.word	0x05fa0004

08000dd0 <GearControl_WdgOff>:
/*       Static functions       */
/* ---------------------------- */

/* Reset WDG parameters */
static void GearControl_WdgOff(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
	GearHandler.wdgCnt = 0U;
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <GearControl_WdgOff+0x18>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	731a      	strb	r2, [r3, #12]
	GearHandler.wdgStatus = FALSE;
 8000dda:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <GearControl_WdgOff+0x18>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	745a      	strb	r2, [r3, #17]
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	20000000 	.word	0x20000000

08000dec <GearState_Init>:

/* Gear state init handler */
static GearStates GearState_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
	static GearStates initGear = GEAR_INVALID;
	static InitStates initState = INIT_SERVO;
	static uint8 cnt = 0;
	GearStates nextState = GEAR_INIT;
 8000df2:	2300      	movs	r3, #0
 8000df4:	71fb      	strb	r3, [r7, #7]

	switch (initState)
 8000df6:	4b53      	ldr	r3, [pc, #332]	; (8000f44 <GearState_Init+0x158>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	f200 8095 	bhi.w	8000f2a <GearState_Init+0x13e>
 8000e00:	a201      	add	r2, pc, #4	; (adr r2, 8000e08 <GearState_Init+0x1c>)
 8000e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e06:	bf00      	nop
 8000e08:	08000e1d 	.word	0x08000e1d
 8000e0c:	08000e2f 	.word	0x08000e2f
 8000e10:	08000e67 	.word	0x08000e67
 8000e14:	08000ea3 	.word	0x08000ea3
 8000e18:	08000f0b 	.word	0x08000f0b
	{
		case INIT_SERVO:
			GearControl_SetServoPos(SET_DEG, POS_DEG_DEFAULT, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	215a      	movs	r1, #90	; 0x5a
 8000e20:	2004      	movs	r0, #4
 8000e22:	f000 fb67 	bl	80014f4 <GearControl_SetServoPos>
			initState = INIT_CAN_BUS;
 8000e26:	4b47      	ldr	r3, [pc, #284]	; (8000f44 <GearState_Init+0x158>)
 8000e28:	2201      	movs	r2, #1
 8000e2a:	701a      	strb	r2, [r3, #0]
			break;
 8000e2c:	e084      	b.n	8000f38 <GearState_Init+0x14c>

		case INIT_CAN_BUS:
			++cnt;
 8000e2e:	4b46      	ldr	r3, [pc, #280]	; (8000f48 <GearState_Init+0x15c>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	3301      	adds	r3, #1
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b44      	ldr	r3, [pc, #272]	; (8000f48 <GearState_Init+0x15c>)
 8000e38:	701a      	strb	r2, [r3, #0]

			if (HAL_OK == CAN_Init())
 8000e3a:	f7ff fe7d 	bl	8000b38 <CAN_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d103      	bne.n	8000e4c <GearState_Init+0x60>
			{
				#ifdef READ_ENCODER
					initState = INIT_ENCODER;
				#else
					initState = INIT_ADC;
 8000e44:	4b3f      	ldr	r3, [pc, #252]	; (8000f44 <GearState_Init+0x158>)
 8000e46:	2203      	movs	r2, #3
 8000e48:	701a      	strb	r2, [r3, #0]
					HAL_Delay(5000);
					cnt = 0;
					NVIC_SystemReset();
				}
			}
			break;
 8000e4a:	e070      	b.n	8000f2e <GearState_Init+0x142>
				if (cnt > INIT_ATTEMPTS)
 8000e4c:	4b3e      	ldr	r3, [pc, #248]	; (8000f48 <GearState_Init+0x15c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b0a      	cmp	r3, #10
 8000e52:	d96c      	bls.n	8000f2e <GearState_Init+0x142>
					HAL_Delay(5000);
 8000e54:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e58:	f001 fbe8 	bl	800262c <HAL_Delay>
					cnt = 0;
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <GearState_Init+0x15c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	701a      	strb	r2, [r3, #0]
					NVIC_SystemReset();
 8000e62:	f7ff ffa1 	bl	8000da8 <__NVIC_SystemReset>

		case INIT_ENCODER:
			++cnt;
 8000e66:	4b38      	ldr	r3, [pc, #224]	; (8000f48 <GearState_Init+0x15c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4b36      	ldr	r3, [pc, #216]	; (8000f48 <GearState_Init+0x15c>)
 8000e70:	701a      	strb	r2, [r3, #0]
			if (cnt < INIT_ATTEMPTS)
 8000e72:	4b35      	ldr	r3, [pc, #212]	; (8000f48 <GearState_Init+0x15c>)
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b09      	cmp	r3, #9
 8000e78:	d80b      	bhi.n	8000e92 <GearState_Init+0xa6>
			{
				if (TRUE == Encoder_Init())
 8000e7a:	f7ff ff59 	bl	8000d30 <Encoder_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d156      	bne.n	8000f32 <GearState_Init+0x146>
				{
					cnt = 0;
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <GearState_Init+0x15c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
					initState = INIT_ADC;
 8000e8a:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <GearState_Init+0x158>)
 8000e8c:	2203      	movs	r2, #3
 8000e8e:	701a      	strb	r2, [r3, #0]
			{
				/* Error */
				GearControl_SetError(INIT_ENCODER_ERROR, TRUE);
				cnt = 0;
			}
			break;
 8000e90:	e04f      	b.n	8000f32 <GearState_Init+0x146>
				GearControl_SetError(INIT_ENCODER_ERROR, TRUE);
 8000e92:	2101      	movs	r1, #1
 8000e94:	2020      	movs	r0, #32
 8000e96:	f000 fadb 	bl	8001450 <GearControl_SetError>
				cnt = 0;
 8000e9a:	4b2b      	ldr	r3, [pc, #172]	; (8000f48 <GearState_Init+0x15c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	701a      	strb	r2, [r3, #0]
			break;
 8000ea0:	e047      	b.n	8000f32 <GearState_Init+0x146>


		case INIT_ADC:
			initGear = GearSensor_GetStateBySensorAdc(N_SAMPLES);
 8000ea2:	2004      	movs	r0, #4
 8000ea4:	f000 fc3e 	bl	8001724 <GearSensor_GetStateBySensorAdc>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <GearState_Init+0x160>)
 8000eae:	701a      	strb	r2, [r3, #0]

			if (GEAR_INVALID != initGear)
 8000eb0:	4b26      	ldr	r3, [pc, #152]	; (8000f4c <GearState_Init+0x160>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b09      	cmp	r3, #9
 8000eb6:	d011      	beq.n	8000edc <GearState_Init+0xf0>
			{
				GearHandler.prevGear = initGear;
 8000eb8:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <GearState_Init+0x160>)
 8000eba:	781a      	ldrb	r2, [r3, #0]
 8000ebc:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <GearState_Init+0x164>)
 8000ebe:	735a      	strb	r2, [r3, #13]
				can_data[0] = initGear;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <GearState_Init+0x160>)
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <GearState_Init+0x168>)
 8000ec6:	701a      	strb	r2, [r3, #0]
				can_data[1] = COL_BLACK;
 8000ec8:	4b22      	ldr	r3, [pc, #136]	; (8000f54 <GearState_Init+0x168>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	705a      	strb	r2, [r3, #1]
				cnt = 0;
 8000ece:	4b1e      	ldr	r3, [pc, #120]	; (8000f48 <GearState_Init+0x15c>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]
				initState = INIT_DONE;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <GearState_Init+0x158>)
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	701a      	strb	r2, [r3, #0]
 8000eda:	e005      	b.n	8000ee8 <GearState_Init+0xfc>
			}
			else
			{
				++cnt;
 8000edc:	4b1a      	ldr	r3, [pc, #104]	; (8000f48 <GearState_Init+0x15c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <GearState_Init+0x15c>)
 8000ee6:	701a      	strb	r2, [r3, #0]
			}

			if (cnt > INIT_ATTEMPTS)
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <GearState_Init+0x15c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b0a      	cmp	r3, #10
 8000eee:	d922      	bls.n	8000f36 <GearState_Init+0x14a>
			{
				cnt = 0;
 8000ef0:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <GearState_Init+0x15c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
				can_data[0] = 0;
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <GearState_Init+0x168>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
				can_data[1] = COL_ORANGE;
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <GearState_Init+0x168>)
 8000efe:	2203      	movs	r2, #3
 8000f00:	705a      	strb	r2, [r3, #1]
				CAN_TransmitMsg(can_data);
 8000f02:	4814      	ldr	r0, [pc, #80]	; (8000f54 <GearState_Init+0x168>)
 8000f04:	f7ff fe02 	bl	8000b0c <CAN_TransmitMsg>
			}
			break;
 8000f08:	e015      	b.n	8000f36 <GearState_Init+0x14a>

		case INIT_DONE:
			CAN_TransmitMsg(can_data);
 8000f0a:	4812      	ldr	r0, [pc, #72]	; (8000f54 <GearState_Init+0x168>)
 8000f0c:	f7ff fdfe 	bl	8000b0c <CAN_TransmitMsg>
			nextState = initGear;
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <GearState_Init+0x160>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	71fb      	strb	r3, [r7, #7]
			initState = INIT_SERVO;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	; (8000f44 <GearState_Init+0x158>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
			initGear = GEAR_INVALID;
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <GearState_Init+0x160>)
 8000f1e:	2209      	movs	r2, #9
 8000f20:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8000f22:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <GearState_Init+0x15c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
			break;
 8000f28:	e006      	b.n	8000f38 <GearState_Init+0x14c>

		default:
			break;
 8000f2a:	bf00      	nop
 8000f2c:	e004      	b.n	8000f38 <GearState_Init+0x14c>
			break;
 8000f2e:	bf00      	nop
 8000f30:	e002      	b.n	8000f38 <GearState_Init+0x14c>
			break;
 8000f32:	bf00      	nop
 8000f34:	e000      	b.n	8000f38 <GearState_Init+0x14c>
			break;
 8000f36:	bf00      	nop
	}

	return nextState;
 8000f38:	79fb      	ldrb	r3, [r7, #7]
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000b8 	.word	0x200000b8
 8000f48:	200000b9 	.word	0x200000b9
 8000f4c:	20000018 	.word	0x20000018
 8000f50:	20000000 	.word	0x20000000
 8000f54:	200000b0 	.word	0x200000b0

08000f58 <GearState_ValidateRequest>:

static inline uint8 GearState_ValidateRequest(uint8 request)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
	uint8 ret = REQUEST_EMPTY;
 8000f62:	2300      	movs	r3, #0
 8000f64:	73fb      	strb	r3, [r7, #15]

	switch (GearHandler.state)
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <GearState_ValidateRequest+0x84>)
 8000f68:	7b9b      	ldrb	r3, [r3, #14]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d828      	bhi.n	8000fc4 <GearState_ValidateRequest+0x6c>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <GearState_ValidateRequest+0x20>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f95 	.word	0x08000f95
 8000f7c:	08000fa7 	.word	0x08000fa7
 8000f80:	08000fa7 	.word	0x08000fa7
 8000f84:	08000fa7 	.word	0x08000fa7
 8000f88:	08000fa7 	.word	0x08000fa7
 8000f8c:	08000fa7 	.word	0x08000fa7
 8000f90:	08000fb9 	.word	0x08000fb9
	{
		case GEAR_1:
			if (REQUEST_SHIFT_UP == request)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d102      	bne.n	8000fa0 <GearState_ValidateRequest+0x48>
			{
				ret = request;
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	73fb      	strb	r3, [r7, #15]
			}
			else
			{
				ret = REQUEST_SHIFT_N;
			}
			break;
 8000f9e:	e016      	b.n	8000fce <GearState_ValidateRequest+0x76>
				ret = REQUEST_SHIFT_N;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	73fb      	strb	r3, [r7, #15]
			break;
 8000fa4:	e013      	b.n	8000fce <GearState_ValidateRequest+0x76>
		case GEAR_N:
		case GEAR_2:
		case GEAR_3:
		case GEAR_4:
		case GEAR_5:
			if ((REQUEST_SHIFT_UP == request) ||
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d002      	beq.n	8000fb2 <GearState_ValidateRequest+0x5a>
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d10a      	bne.n	8000fc8 <GearState_ValidateRequest+0x70>
				(REQUEST_SHIFT_DOWN == request))
			{
				ret = request;
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8000fb6:	e007      	b.n	8000fc8 <GearState_ValidateRequest+0x70>

		case GEAR_6:
			if (REQUEST_SHIFT_DOWN == request)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b02      	cmp	r3, #2
 8000fbc:	d106      	bne.n	8000fcc <GearState_ValidateRequest+0x74>
			{
				ret = request;
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	73fb      	strb	r3, [r7, #15]
			}
			break;
 8000fc2:	e003      	b.n	8000fcc <GearState_ValidateRequest+0x74>

		default:
			break;
 8000fc4:	bf00      	nop
 8000fc6:	e002      	b.n	8000fce <GearState_ValidateRequest+0x76>
			break;
 8000fc8:	bf00      	nop
 8000fca:	e000      	b.n	8000fce <GearState_ValidateRequest+0x76>
			break;
 8000fcc:	bf00      	nop
	}

	return ret;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3714      	adds	r7, #20
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000000 	.word	0x20000000

08000fe0 <GearControl_RequestGearChange>:

static void GearControl_RequestGearChange(__IO uint8* request, GearStates* savedState)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	/* Valid request, change gear */
	switch (*request)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d004      	beq.n	8000ffe <GearControl_RequestGearChange+0x1e>
 8000ff4:	2b03      	cmp	r3, #3
 8000ff6:	d041      	beq.n	800107c <GearControl_RequestGearChange+0x9c>
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d020      	beq.n	800103e <GearControl_RequestGearChange+0x5e>
			GearControl_SetServoPos(SET_DEG, (POS_DEG_DEFAULT + DEG_1_TO_N), 0);
			*savedState = (GearStates)((uint8)GearHandler.state + 1U);
			break;

		default:
			break;
 8000ffc:	e04b      	b.n	8001096 <GearControl_RequestGearChange+0xb6>
			GearControl_SetServoPos(SET_DEG, (POS_DEG_DEFAULT - GearHandler.data->degreesDown), 0);
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <GearControl_RequestGearChange+0xc0>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	789b      	ldrb	r3, [r3, #2]
 8001004:	f1c3 035a 	rsb	r3, r3, #90	; 0x5a
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	2004      	movs	r0, #4
 8001010:	f000 fa70 	bl	80014f4 <GearControl_SetServoPos>
			if (GEAR_2 == GearHandler.state)
 8001014:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <GearControl_RequestGearChange+0xc0>)
 8001016:	7b9b      	ldrb	r3, [r3, #14]
 8001018:	b2db      	uxtb	r3, r3
 800101a:	2b03      	cmp	r3, #3
 800101c:	d107      	bne.n	800102e <GearControl_RequestGearChange+0x4e>
				*savedState = (GearStates)((uint8)GearHandler.state - 2U);
 800101e:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <GearControl_RequestGearChange+0xc0>)
 8001020:	7b9b      	ldrb	r3, [r3, #14]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	3b02      	subs	r3, #2
 8001026:	b2da      	uxtb	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	701a      	strb	r2, [r3, #0]
			break;
 800102c:	e033      	b.n	8001096 <GearControl_RequestGearChange+0xb6>
				*savedState = (GearStates)((uint8)GearHandler.state - 1U);
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <GearControl_RequestGearChange+0xc0>)
 8001030:	7b9b      	ldrb	r3, [r3, #14]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	3b01      	subs	r3, #1
 8001036:	b2da      	uxtb	r2, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	701a      	strb	r2, [r3, #0]
			break;
 800103c:	e02b      	b.n	8001096 <GearControl_RequestGearChange+0xb6>
			GearControl_SetServoPos(SET_DEG, (POS_DEG_DEFAULT + GearHandler.data->degreesUp), 0);
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <GearControl_RequestGearChange+0xc0>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	785b      	ldrb	r3, [r3, #1]
 8001044:	335a      	adds	r3, #90	; 0x5a
 8001046:	b2db      	uxtb	r3, r3
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	2004      	movs	r0, #4
 800104e:	f000 fa51 	bl	80014f4 <GearControl_SetServoPos>
			if (GEAR_1 == GearHandler.state)
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <GearControl_RequestGearChange+0xc0>)
 8001054:	7b9b      	ldrb	r3, [r3, #14]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b01      	cmp	r3, #1
 800105a:	d107      	bne.n	800106c <GearControl_RequestGearChange+0x8c>
				*savedState = (GearStates)((uint8)GearHandler.state + 2U);
 800105c:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <GearControl_RequestGearChange+0xc0>)
 800105e:	7b9b      	ldrb	r3, [r3, #14]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	3302      	adds	r3, #2
 8001064:	b2da      	uxtb	r2, r3
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	701a      	strb	r2, [r3, #0]
			break;
 800106a:	e014      	b.n	8001096 <GearControl_RequestGearChange+0xb6>
				*savedState = (GearStates)((uint8)GearHandler.state + 1U);
 800106c:	4b0c      	ldr	r3, [pc, #48]	; (80010a0 <GearControl_RequestGearChange+0xc0>)
 800106e:	7b9b      	ldrb	r3, [r3, #14]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	3301      	adds	r3, #1
 8001074:	b2da      	uxtb	r2, r3
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	701a      	strb	r2, [r3, #0]
			break;
 800107a:	e00c      	b.n	8001096 <GearControl_RequestGearChange+0xb6>
			GearControl_SetServoPos(SET_DEG, (POS_DEG_DEFAULT + DEG_1_TO_N), 0);
 800107c:	2200      	movs	r2, #0
 800107e:	217a      	movs	r1, #122	; 0x7a
 8001080:	2004      	movs	r0, #4
 8001082:	f000 fa37 	bl	80014f4 <GearControl_SetServoPos>
			*savedState = (GearStates)((uint8)GearHandler.state + 1U);
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <GearControl_RequestGearChange+0xc0>)
 8001088:	7b9b      	ldrb	r3, [r3, #14]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	3301      	adds	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	701a      	strb	r2, [r3, #0]
			break;
 8001094:	bf00      	nop
	}
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000

080010a4 <GearControl_PrepareCANMessage>:

/* CAN FRAME: */
/* 1 byte - gear */
/* 2 byte - status colour */
static boolean GearControl_PrepareCANMessage(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
	static uint8 prevGearMsg = 0;
	static uint8 prevColMsg = 0;
	static uint16 idle_ticks = 0;
	boolean send = FALSE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	71fb      	strb	r3, [r7, #7]

	if (ShiftHandler.validation == VALIDATION_DONE)
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <GearControl_PrepareCANMessage+0x110>)
 80010b0:	789b      	ldrb	r3, [r3, #2]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d130      	bne.n	800111a <GearControl_PrepareCANMessage+0x76>
	{
		switch (GearHandler.GearSensState)
 80010b8:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <GearControl_PrepareCANMessage+0x114>)
 80010ba:	7c1b      	ldrb	r3, [r3, #16]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b02      	cmp	r3, #2
 80010c0:	d004      	beq.n	80010cc <GearControl_PrepareCANMessage+0x28>
 80010c2:	2b03      	cmp	r3, #3
 80010c4:	d01a      	beq.n	80010fc <GearControl_PrepareCANMessage+0x58>
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d00c      	beq.n	80010e4 <GearControl_PrepareCANMessage+0x40>
				can_data[1] = COL_RED;
				break;

			case GEAR_IDLE:
			default:
				break;
 80010ca:	e023      	b.n	8001114 <GearControl_PrepareCANMessage+0x70>
				ShiftHandler.validation = VALIDATION_END;
 80010cc:	4b39      	ldr	r3, [pc, #228]	; (80011b4 <GearControl_PrepareCANMessage+0x110>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	709a      	strb	r2, [r3, #2]
				can_data[0] = GearHandler.state;
 80010d2:	4b39      	ldr	r3, [pc, #228]	; (80011b8 <GearControl_PrepareCANMessage+0x114>)
 80010d4:	7b9b      	ldrb	r3, [r3, #14]
 80010d6:	b2da      	uxtb	r2, r3
 80010d8:	4b38      	ldr	r3, [pc, #224]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 80010da:	701a      	strb	r2, [r3, #0]
				can_data[1] = COL_GREEN;
 80010dc:	4b37      	ldr	r3, [pc, #220]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 80010de:	2201      	movs	r2, #1
 80010e0:	705a      	strb	r2, [r3, #1]
				break;
 80010e2:	e017      	b.n	8001114 <GearControl_PrepareCANMessage+0x70>
				ShiftHandler.validation = VALIDATION_POLL;
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <GearControl_PrepareCANMessage+0x110>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	709a      	strb	r2, [r3, #2]
				can_data[0] = GearHandler.prevGear;
 80010ea:	4b33      	ldr	r3, [pc, #204]	; (80011b8 <GearControl_PrepareCANMessage+0x114>)
 80010ec:	7b5b      	ldrb	r3, [r3, #13]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	4b32      	ldr	r3, [pc, #200]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 80010f2:	701a      	strb	r2, [r3, #0]
				can_data[1] = COL_ORANGE;
 80010f4:	4b31      	ldr	r3, [pc, #196]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 80010f6:	2203      	movs	r2, #3
 80010f8:	705a      	strb	r2, [r3, #1]
				break;
 80010fa:	e00b      	b.n	8001114 <GearControl_PrepareCANMessage+0x70>
				ShiftHandler.validation = VALIDATION_END;
 80010fc:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <GearControl_PrepareCANMessage+0x110>)
 80010fe:	2200      	movs	r2, #0
 8001100:	709a      	strb	r2, [r3, #2]
				can_data[0] = GearHandler.state;
 8001102:	4b2d      	ldr	r3, [pc, #180]	; (80011b8 <GearControl_PrepareCANMessage+0x114>)
 8001104:	7b9b      	ldrb	r3, [r3, #14]
 8001106:	b2da      	uxtb	r2, r3
 8001108:	4b2c      	ldr	r3, [pc, #176]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 800110a:	701a      	strb	r2, [r3, #0]
				can_data[1] = COL_RED;
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 800110e:	2202      	movs	r2, #2
 8001110:	705a      	strb	r2, [r3, #1]
				break;
 8001112:	bf00      	nop
		}

		GearHandler.GearSensState = GEAR_IDLE;
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <GearControl_PrepareCANMessage+0x114>)
 8001116:	2200      	movs	r2, #0
 8001118:	741a      	strb	r2, [r3, #16]
	}

	/* Gear Change disabled, send grey status */
	if (FALSE == GearControl_IsActive())
 800111a:	f000 f8e1 	bl	80012e0 <GearControl_IsActive>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d103      	bne.n	800112c <GearControl_PrepareCANMessage+0x88>
	{
		can_data[1] = COL_GREY;
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 8001126:	2204      	movs	r2, #4
 8001128:	705a      	strb	r2, [r3, #1]
 800112a:	e009      	b.n	8001140 <GearControl_PrepareCANMessage+0x9c>
	}
	else
	{
		can_data[1] = (can_data[1] == COL_GREY) ? COL_BLACK : can_data[1];
 800112c:	4b23      	ldr	r3, [pc, #140]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 800112e:	785b      	ldrb	r3, [r3, #1]
 8001130:	2b04      	cmp	r3, #4
 8001132:	d002      	beq.n	800113a <GearControl_PrepareCANMessage+0x96>
 8001134:	4b21      	ldr	r3, [pc, #132]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	e000      	b.n	800113c <GearControl_PrepareCANMessage+0x98>
 800113a:	2300      	movs	r3, #0
 800113c:	4a1f      	ldr	r2, [pc, #124]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 800113e:	7053      	strb	r3, [r2, #1]
	}

	if ((can_data[0] != prevGearMsg) || (can_data[1] != prevColMsg))
 8001140:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	4b1e      	ldr	r3, [pc, #120]	; (80011c0 <GearControl_PrepareCANMessage+0x11c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	429a      	cmp	r2, r3
 800114a:	d105      	bne.n	8001158 <GearControl_PrepareCANMessage+0xb4>
 800114c:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 800114e:	785a      	ldrb	r2, [r3, #1]
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <GearControl_PrepareCANMessage+0x120>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d005      	beq.n	8001164 <GearControl_PrepareCANMessage+0xc0>
	{
		send = TRUE;
 8001158:	2301      	movs	r3, #1
 800115a:	71fb      	strb	r3, [r7, #7]
		idle_ticks = 0;
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <GearControl_PrepareCANMessage+0x124>)
 800115e:	2200      	movs	r2, #0
 8001160:	801a      	strh	r2, [r3, #0]
 8001162:	e019      	b.n	8001198 <GearControl_PrepareCANMessage+0xf4>
	}
	else
	{
		if ((++idle_ticks) > DELAY_720MS)
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <GearControl_PrepareCANMessage+0x124>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	b29a      	uxth	r2, r3
 800116c:	4b16      	ldr	r3, [pc, #88]	; (80011c8 <GearControl_PrepareCANMessage+0x124>)
 800116e:	801a      	strh	r2, [r3, #0]
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <GearControl_PrepareCANMessage+0x124>)
 8001172:	881b      	ldrh	r3, [r3, #0]
 8001174:	2bb4      	cmp	r3, #180	; 0xb4
 8001176:	d90f      	bls.n	8001198 <GearControl_PrepareCANMessage+0xf4>
		{
			/* Set colour to black after 1 second of inactivity */
			if ((can_data[1] != COL_ORANGE) &&
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 800117a:	785b      	ldrb	r3, [r3, #1]
 800117c:	2b03      	cmp	r3, #3
 800117e:	d006      	beq.n	800118e <GearControl_PrepareCANMessage+0xea>
				(can_data[1] != COL_GREY))
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 8001182:	785b      	ldrb	r3, [r3, #1]
			if ((can_data[1] != COL_ORANGE) &&
 8001184:	2b04      	cmp	r3, #4
 8001186:	d002      	beq.n	800118e <GearControl_PrepareCANMessage+0xea>
			{
				can_data[1] = COL_BLACK;
 8001188:	4b0c      	ldr	r3, [pc, #48]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 800118a:	2200      	movs	r2, #0
 800118c:	705a      	strb	r2, [r3, #1]
			}
			send = TRUE;
 800118e:	2301      	movs	r3, #1
 8001190:	71fb      	strb	r3, [r7, #7]
			idle_ticks = 0;
 8001192:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <GearControl_PrepareCANMessage+0x124>)
 8001194:	2200      	movs	r2, #0
 8001196:	801a      	strh	r2, [r3, #0]
		}
	}

	prevGearMsg = can_data[0];
 8001198:	4b08      	ldr	r3, [pc, #32]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <GearControl_PrepareCANMessage+0x11c>)
 800119e:	701a      	strb	r2, [r3, #0]
	prevColMsg = can_data[1];
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <GearControl_PrepareCANMessage+0x118>)
 80011a2:	785a      	ldrb	r2, [r3, #1]
 80011a4:	4b07      	ldr	r3, [pc, #28]	; (80011c4 <GearControl_PrepareCANMessage+0x120>)
 80011a6:	701a      	strb	r2, [r3, #0]

	return send;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200000ac 	.word	0x200000ac
 80011b8:	20000000 	.word	0x20000000
 80011bc:	200000b0 	.word	0x200000b0
 80011c0:	200000ba 	.word	0x200000ba
 80011c4:	200000bb 	.word	0x200000bb
 80011c8:	200000bc 	.word	0x200000bc

080011cc <GearStateHandler>:

/* Gear state handler, called every 4 ms */
static GearStates GearStateHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
	static GearStates savedState = GEAR_INVALID;
	static uint8 fuelCutDelay = 0U;
	GearStates nextState = GearHandler.state;
 80011d2:	4b3d      	ldr	r3, [pc, #244]	; (80012c8 <GearStateHandler+0xfc>)
 80011d4:	7b9b      	ldrb	r3, [r3, #14]
 80011d6:	71fb      	strb	r3, [r7, #7]

	switch (ShiftHandler.state)
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <GearStateHandler+0x100>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b04      	cmp	r3, #4
 80011e0:	d868      	bhi.n	80012b4 <GearStateHandler+0xe8>
 80011e2:	a201      	add	r2, pc, #4	; (adr r2, 80011e8 <GearStateHandler+0x1c>)
 80011e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011e8:	080011fd 	.word	0x080011fd
 80011ec:	08001205 	.word	0x08001205
 80011f0:	0800125d 	.word	0x0800125d
 80011f4:	080012b5 	.word	0x080012b5
 80011f8:	0800128d 	.word	0x0800128d
	{
		case SHIFT_INIT:
			ShiftHandler.state = SHIFT_IDLE;
 80011fc:	4b33      	ldr	r3, [pc, #204]	; (80012cc <GearStateHandler+0x100>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
			break;
 8001202:	e05c      	b.n	80012be <GearStateHandler+0xf2>

		case SHIFT_IDLE:
			if (ShiftHandler.request != REQUEST_EMPTY)
 8001204:	4b31      	ldr	r3, [pc, #196]	; (80012cc <GearStateHandler+0x100>)
 8001206:	785b      	ldrb	r3, [r3, #1]
 8001208:	b2db      	uxtb	r3, r3
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01d      	beq.n	800124a <GearStateHandler+0x7e>
			{
				if (NULL != GearHandler.data)
 800120e:	4b2e      	ldr	r3, [pc, #184]	; (80012c8 <GearStateHandler+0xfc>)
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d050      	beq.n	80012b8 <GearStateHandler+0xec>
				{
					ShiftHandler.state = SHIFT_PRELOAD;
 8001216:	4b2d      	ldr	r3, [pc, #180]	; (80012cc <GearStateHandler+0x100>)
 8001218:	2202      	movs	r2, #2
 800121a:	701a      	strb	r2, [r3, #0]

					/* Save previous gear */
					GearHandler.prevGear = GearHandler.state;
 800121c:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <GearStateHandler+0xfc>)
 800121e:	7b9b      	ldrb	r3, [r3, #14]
 8001220:	b2da      	uxtb	r2, r3
 8001222:	4b29      	ldr	r3, [pc, #164]	; (80012c8 <GearStateHandler+0xfc>)
 8001224:	735a      	strb	r2, [r3, #13]

					/* Set servo to change position */
					GearControl_RequestGearChange(&ShiftHandler.request, &savedState);
 8001226:	492a      	ldr	r1, [pc, #168]	; (80012d0 <GearStateHandler+0x104>)
 8001228:	482a      	ldr	r0, [pc, #168]	; (80012d4 <GearStateHandler+0x108>)
 800122a:	f7ff fed9 	bl	8000fe0 <GearControl_RequestGearChange>

					/* Reset request and error, start WDG Timer */
					ShiftHandler.request = REQUEST_EMPTY;
 800122e:	4b27      	ldr	r3, [pc, #156]	; (80012cc <GearStateHandler+0x100>)
 8001230:	2200      	movs	r2, #0
 8001232:	705a      	strb	r2, [r3, #1]
					ShiftHandler.validation = VALIDATION_POLL;
 8001234:	4b25      	ldr	r3, [pc, #148]	; (80012cc <GearStateHandler+0x100>)
 8001236:	2202      	movs	r2, #2
 8001238:	709a      	strb	r2, [r3, #2]
					GearHandler.wdgStatus = TRUE;
 800123a:	4b23      	ldr	r3, [pc, #140]	; (80012c8 <GearStateHandler+0xfc>)
 800123c:	2201      	movs	r2, #1
 800123e:	745a      	strb	r2, [r3, #17]

					/* Clear flags */
					GearControl_SetError(GEAR_NOT_SHIFTED_ERROR | SHIFT_REQUEST_ERROR | TIMEOUT_ERROR, FALSE);
 8001240:	2100      	movs	r1, #0
 8001242:	2019      	movs	r0, #25
 8001244:	f000 f904 	bl	8001450 <GearControl_SetError>
				if (TRUE == GearControl_PrepareCANMessage())
				{
					CAN_TransmitMsg(can_data);
				}
			}
			break;
 8001248:	e036      	b.n	80012b8 <GearStateHandler+0xec>
				if (TRUE == GearControl_PrepareCANMessage())
 800124a:	f7ff ff2b 	bl	80010a4 <GearControl_PrepareCANMessage>
 800124e:	4603      	mov	r3, r0
 8001250:	2b01      	cmp	r3, #1
 8001252:	d131      	bne.n	80012b8 <GearStateHandler+0xec>
					CAN_TransmitMsg(can_data);
 8001254:	4820      	ldr	r0, [pc, #128]	; (80012d8 <GearStateHandler+0x10c>)
 8001256:	f7ff fc59 	bl	8000b0c <CAN_TransmitMsg>
			break;
 800125a:	e02d      	b.n	80012b8 <GearStateHandler+0xec>

		case SHIFT_PRELOAD:
			/* Wait for fuel cut */
			/* GEAR_CUT_DELAY * 4ms */
			if ((++fuelCutDelay) >= GEAR_CUT_DELAY)
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <GearStateHandler+0x110>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	3301      	adds	r3, #1
 8001262:	b2da      	uxtb	r2, r3
 8001264:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <GearStateHandler+0x110>)
 8001266:	701a      	strb	r2, [r3, #0]
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <GearStateHandler+0x110>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b03      	cmp	r3, #3
 800126e:	d925      	bls.n	80012bc <GearStateHandler+0xf0>
			{
				fuelCutDelay = 0U;
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <GearStateHandler+0x110>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]
				/* Trigger fuel cut */
				GearControl_FuelCutTrigger(ON);
 8001276:	2001      	movs	r0, #1
 8001278:	f000 f9d8 	bl	800162c <GearControl_FuelCutTrigger>

				GearHandler.nextState = savedState;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <GearStateHandler+0x104>)
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <GearStateHandler+0xfc>)
 8001282:	73da      	strb	r2, [r3, #15]
				ShiftHandler.state = SHIFT_EXEC;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <GearStateHandler+0x100>)
 8001286:	2203      	movs	r2, #3
 8001288:	701a      	strb	r2, [r3, #0]
			}
			break;
 800128a:	e017      	b.n	80012bc <GearStateHandler+0xf0>

		case SHIFT_DONE:
			GearControl_FuelCutTrigger(OFF);
 800128c:	2000      	movs	r0, #0
 800128e:	f000 f9cd 	bl	800162c <GearControl_FuelCutTrigger>
			GearHandler.nextState = GEAR_INVALID;
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <GearStateHandler+0xfc>)
 8001294:	2209      	movs	r2, #9
 8001296:	73da      	strb	r2, [r3, #15]
			GearHandler.data = NULL;
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <GearStateHandler+0xfc>)
 800129a:	2200      	movs	r2, #0
 800129c:	615a      	str	r2, [r3, #20]
			nextState = savedState;
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <GearStateHandler+0x104>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	71fb      	strb	r3, [r7, #7]
			GearControl_WdgOff();
 80012a4:	f7ff fd94 	bl	8000dd0 <GearControl_WdgOff>
			ShiftControl_SetState(SHIFT_IDLE);
 80012a8:	2001      	movs	r0, #1
 80012aa:	f000 f831 	bl	8001310 <ShiftControl_SetState>
			MicroSwitch_PollAgain();
 80012ae:	f000 fbbb 	bl	8001a28 <MicroSwitch_PollAgain>
			break;
 80012b2:	e004      	b.n	80012be <GearStateHandler+0xf2>

		case SHIFT_EXEC:
		default:
			/* In progress */
			break;
 80012b4:	bf00      	nop
 80012b6:	e002      	b.n	80012be <GearStateHandler+0xf2>
			break;
 80012b8:	bf00      	nop
 80012ba:	e000      	b.n	80012be <GearStateHandler+0xf2>
			break;
 80012bc:	bf00      	nop
	}

	return nextState;
 80012be:	79fb      	ldrb	r3, [r7, #7]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000000 	.word	0x20000000
 80012cc:	200000ac 	.word	0x200000ac
 80012d0:	20000019 	.word	0x20000019
 80012d4:	200000ad 	.word	0x200000ad
 80012d8:	200000b0 	.word	0x200000b0
 80012dc:	200000be 	.word	0x200000be

080012e0 <GearControl_IsActive>:
{
	GearHandler.activation = control;
}

boolean GearControl_IsActive(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	return GearHandler.activation;
 80012e4:	4b03      	ldr	r3, [pc, #12]	; (80012f4 <GearControl_IsActive+0x14>)
 80012e6:	7c9b      	ldrb	r3, [r3, #18]
 80012e8:	b2db      	uxtb	r3, r3
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bc80      	pop	{r7}
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	20000000 	.word	0x20000000

080012f8 <ShiftControl_GetState>:

ShiftStates ShiftControl_GetState(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
	return ShiftHandler.state;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <ShiftControl_GetState+0x14>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	b2db      	uxtb	r3, r3
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	bc80      	pop	{r7}
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200000ac 	.word	0x200000ac

08001310 <ShiftControl_SetState>:

void ShiftControl_SetState(ShiftStates state)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
	ShiftHandler.state = state;
 800131a:	4a04      	ldr	r2, [pc, #16]	; (800132c <ShiftControl_SetState+0x1c>)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	7013      	strb	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	200000ac 	.word	0x200000ac

08001330 <ShiftControl_SetValidation>:

void ShiftControl_SetValidation(boolean status)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
	ShiftHandler.validation = status;
 800133a:	4a04      	ldr	r2, [pc, #16]	; (800134c <ShiftControl_SetValidation+0x1c>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	7093      	strb	r3, [r2, #2]
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	200000ac 	.word	0x200000ac

08001350 <ShiftControl_GetValidation>:
uint8 ShiftControl_GetValidation(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
	return ShiftHandler.validation;
 8001354:	4b03      	ldr	r3, [pc, #12]	; (8001364 <ShiftControl_GetValidation+0x14>)
 8001356:	789b      	ldrb	r3, [r3, #2]
 8001358:	b2db      	uxtb	r3, r3
}
 800135a:	4618      	mov	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	200000ac 	.word	0x200000ac

08001368 <GearControl_SetState>:
void GearControl_SetState(GearStates state)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	71fb      	strb	r3, [r7, #7]
	GearHandler.state = state;
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <GearControl_SetState+0x1c>)
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	7393      	strb	r3, [r2, #14]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	20000000 	.word	0x20000000

08001388 <GearControl_GetState>:

GearStates GearControl_GetState(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
	return GearHandler.state;
 800138c:	4b03      	ldr	r3, [pc, #12]	; (800139c <GearControl_GetState+0x14>)
 800138e:	7b9b      	ldrb	r3, [r3, #14]
 8001390:	b2db      	uxtb	r3, r3
}
 8001392:	4618      	mov	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000000 	.word	0x20000000

080013a0 <GearControl_GetNextState>:

GearStates GearControl_GetNextState(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	return GearHandler.nextState;
 80013a4:	4b03      	ldr	r3, [pc, #12]	; (80013b4 <GearControl_GetNextState+0x14>)
 80013a6:	7bdb      	ldrb	r3, [r3, #15]
 80013a8:	b2db      	uxtb	r3, r3
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000000 	.word	0x20000000

080013b8 <GearSensor_SetState>:

void GearSensor_SetState(GearSensorStates state)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	GearHandler.GearSensState = state;
 80013c2:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <GearSensor_SetState+0x1c>)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	7413      	strb	r3, [r2, #16]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000

080013d8 <ShiftControl_SetRequest>:

void ShiftControl_SetRequest(uint8 request)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	if (TRUE == GearControl_IsActive())
 80013e2:	f7ff ff7d 	bl	80012e0 <GearControl_IsActive>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d11c      	bne.n	8001426 <ShiftControl_SetRequest+0x4e>
	{
		uint8 req = GearState_ValidateRequest(request);
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fdb2 	bl	8000f58 <GearState_ValidateRequest>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73fb      	strb	r3, [r7, #15]

		if (REQUEST_EMPTY != req)
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00e      	beq.n	800141c <ShiftControl_SetRequest+0x44>
		{
			/* Valid Request */
			ShiftHandler.request = req;
 80013fe:	4a11      	ldr	r2, [pc, #68]	; (8001444 <ShiftControl_SetRequest+0x6c>)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	7053      	strb	r3, [r2, #1]
			GearHandler.data = &GearDataDecoder[(uint8)GearHandler.state];
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <ShiftControl_SetRequest+0x70>)
 8001406:	7b9b      	ldrb	r3, [r3, #14]
 8001408:	b2db      	uxtb	r3, r3
 800140a:	461a      	mov	r2, r3
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	4a0e      	ldr	r2, [pc, #56]	; (800144c <ShiftControl_SetRequest+0x74>)
 8001414:	4413      	add	r3, r2
 8001416:	4a0c      	ldr	r2, [pc, #48]	; (8001448 <ShiftControl_SetRequest+0x70>)
 8001418:	6153      	str	r3, [r2, #20]
		/* Gear Change disabled */
		GearControl_FuelCutTrigger(OFF);
		GearControl_SetServoPos(SET_DEG, POS_DEG_DEFAULT, 0);
		MicroSwitch_PollAgain();
	}
}
 800141a:	e00e      	b.n	800143a <ShiftControl_SetRequest+0x62>
			GearControl_SetError(SHIFT_REQUEST_ERROR, TRUE);
 800141c:	2101      	movs	r1, #1
 800141e:	2001      	movs	r0, #1
 8001420:	f000 f816 	bl	8001450 <GearControl_SetError>
}
 8001424:	e009      	b.n	800143a <ShiftControl_SetRequest+0x62>
		GearControl_FuelCutTrigger(OFF);
 8001426:	2000      	movs	r0, #0
 8001428:	f000 f900 	bl	800162c <GearControl_FuelCutTrigger>
		GearControl_SetServoPos(SET_DEG, POS_DEG_DEFAULT, 0);
 800142c:	2200      	movs	r2, #0
 800142e:	215a      	movs	r1, #90	; 0x5a
 8001430:	2004      	movs	r0, #4
 8001432:	f000 f85f 	bl	80014f4 <GearControl_SetServoPos>
		MicroSwitch_PollAgain();
 8001436:	f000 faf7 	bl	8001a28 <MicroSwitch_PollAgain>
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	200000ac 	.word	0x200000ac
 8001448:	20000000 	.word	0x20000000
 800144c:	0800587c 	.word	0x0800587c

08001450 <GearControl_SetError>:
{
	return GearHandler.errors;
}

void GearControl_SetError(uint32 err, boolean set)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	70fb      	strb	r3, [r7, #3]
	if (TRUE == set)
 800145c:	78fb      	ldrb	r3, [r7, #3]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d106      	bne.n	8001470 <GearControl_SetError+0x20>
	{
		GearHandler.errors |= err;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <GearControl_SetError+0x38>)
 8001464:	689a      	ldr	r2, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4313      	orrs	r3, r2
 800146a:	4a07      	ldr	r2, [pc, #28]	; (8001488 <GearControl_SetError+0x38>)
 800146c:	6093      	str	r3, [r2, #8]
	}
	else
	{
		GearHandler.errors &= ~err;
	}
}
 800146e:	e006      	b.n	800147e <GearControl_SetError+0x2e>
		GearHandler.errors &= ~err;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <GearControl_SetError+0x38>)
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	43db      	mvns	r3, r3
 8001478:	4013      	ands	r3, r2
 800147a:	4a03      	ldr	r2, [pc, #12]	; (8001488 <GearControl_SetError+0x38>)
 800147c:	6093      	str	r3, [r2, #8]
}
 800147e:	bf00      	nop
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000000 	.word	0x20000000

0800148c <GearControl_Init>:

void GearControl_Init(__IO uint32* servoPWM)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	GearHandler.PWM = servoPWM;
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <GearControl_Init+0x18>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6013      	str	r3, [r2, #0]
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000000 	.word	0x20000000

080014a8 <GearControl_WdgProcess>:

/* Called in 4ms period */
void GearControl_WdgProcess(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
	if (TRUE == GearHandler.wdgStatus)
 80014ac:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <GearControl_WdgProcess+0x48>)
 80014ae:	7c5b      	ldrb	r3, [r3, #17]
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d11a      	bne.n	80014ec <GearControl_WdgProcess+0x44>
	{
		if (GearHandler.wdgCnt < SHIFT_TIMEOUT)
 80014b6:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <GearControl_WdgProcess+0x48>)
 80014b8:	7b1b      	ldrb	r3, [r3, #12]
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	2b63      	cmp	r3, #99	; 0x63
 80014be:	d807      	bhi.n	80014d0 <GearControl_WdgProcess+0x28>
		{
			++GearHandler.wdgCnt;
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <GearControl_WdgProcess+0x48>)
 80014c2:	7b1b      	ldrb	r3, [r3, #12]
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	3301      	adds	r3, #1
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <GearControl_WdgProcess+0x48>)
 80014cc:	731a      	strb	r2, [r3, #12]
			ShiftControl_SetState(SHIFT_DONE);
			GearControl_SetError(TIMEOUT_ERROR, TRUE);
			GearControl_WdgOff();
		}
	}
}
 80014ce:	e00d      	b.n	80014ec <GearControl_WdgProcess+0x44>
			GearControl_SetServoPos(SET_DEG, POS_DEG_DEFAULT, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	215a      	movs	r1, #90	; 0x5a
 80014d4:	2004      	movs	r0, #4
 80014d6:	f000 f80d 	bl	80014f4 <GearControl_SetServoPos>
			ShiftControl_SetState(SHIFT_DONE);
 80014da:	2004      	movs	r0, #4
 80014dc:	f7ff ff18 	bl	8001310 <ShiftControl_SetState>
			GearControl_SetError(TIMEOUT_ERROR, TRUE);
 80014e0:	2101      	movs	r1, #1
 80014e2:	2008      	movs	r0, #8
 80014e4:	f7ff ffb4 	bl	8001450 <GearControl_SetError>
			GearControl_WdgOff();
 80014e8:	f7ff fc72 	bl	8000dd0 <GearControl_WdgOff>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000000 	.word	0x20000000

080014f4 <GearControl_SetServoPos>:

/* 500 - 0 deg */
/* 1500 - 90 deg */
/* 2500 - 180 deg */
void GearControl_SetServoPos(uint8 control, uint8 deg, uint32 PWM)
{
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	603a      	str	r2, [r7, #0]
 80014fe:	71fb      	strb	r3, [r7, #7]
 8001500:	460b      	mov	r3, r1
 8001502:	71bb      	strb	r3, [r7, #6]
	switch (control)
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d002      	beq.n	8001510 <GearControl_SetServoPos+0x1c>
 800150a:	2b04      	cmp	r3, #4
 800150c:	d016      	beq.n	800153c <GearControl_SetServoPos+0x48>
 800150e:	e065      	b.n	80015dc <GearControl_SetServoPos+0xe8>
	{
		case SET_PWM:
			/* Set PWM signal directly */
			if ((PWM >= POS_PWM_MIN) && (PWM <= POS_PWM_MAX))
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	f240 4232 	movw	r2, #1074	; 0x432
 8001516:	4293      	cmp	r3, r2
 8001518:	d90b      	bls.n	8001532 <GearControl_SetServoPos+0x3e>
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	f5b3 6ff7 	cmp.w	r3, #1976	; 0x7b8
 8001520:	d207      	bcs.n	8001532 <GearControl_SetServoPos+0x3e>
			{
				*GearHandler.PWM = PWM;
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <GearControl_SetServoPos+0xfc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	601a      	str	r2, [r3, #0]
				GearHandler.PwmRequest = PWM;
 800152a:	4a31      	ldr	r2, [pc, #196]	; (80015f0 <GearControl_SetServoPos+0xfc>)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	6053      	str	r3, [r2, #4]
			else
			{
				/* Error */
				GearControl_SetError(POSITION_REQUEST_ERROR, TRUE);
			}
			break;
 8001530:	e059      	b.n	80015e6 <GearControl_SetServoPos+0xf2>
				GearControl_SetError(POSITION_REQUEST_ERROR, TRUE);
 8001532:	2101      	movs	r1, #1
 8001534:	2002      	movs	r0, #2
 8001536:	f7ff ff8b 	bl	8001450 <GearControl_SetError>
			break;
 800153a:	e054      	b.n	80015e6 <GearControl_SetServoPos+0xf2>

		case SET_DEG:
			/* Set PWM signal by degrees conversion */
			if ((deg >= POS_DEG_MIN) && (deg <= POS_DEG_MAX))
 800153c:	79bb      	ldrb	r3, [r7, #6]
 800153e:	2bb4      	cmp	r3, #180	; 0xb4
 8001540:	d847      	bhi.n	80015d2 <GearControl_SetServoPos+0xde>
			{
				if (deg < 90U)
 8001542:	79bb      	ldrb	r3, [r7, #6]
 8001544:	2b59      	cmp	r3, #89	; 0x59
 8001546:	d81f      	bhi.n	8001588 <GearControl_SetServoPos+0x94>
				{
					/* 0-90 deg use floor */
					*GearHandler.PWM = (uint32)(floor((11.111111f * deg))) + (uint32)500U;
 8001548:	4b29      	ldr	r3, [pc, #164]	; (80015f0 <GearControl_SetServoPos+0xfc>)
 800154a:	681c      	ldr	r4, [r3, #0]
 800154c:	79bb      	ldrb	r3, [r7, #6]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f918 	bl	8000784 <__aeabi_i2f>
 8001554:	4603      	mov	r3, r0
 8001556:	4927      	ldr	r1, [pc, #156]	; (80015f4 <GearControl_SetServoPos+0x100>)
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff f967 	bl	800082c <__aeabi_fmul>
 800155e:	4603      	mov	r3, r0
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ff59 	bl	8000418 <__aeabi_f2d>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	f004 f8eb 	bl	8005748 <floor>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	f7ff f829 	bl	80005d0 <__aeabi_d2uiz>
 800157e:	4603      	mov	r3, r0
 8001580:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	e01e      	b.n	80015c6 <GearControl_SetServoPos+0xd2>
				}
				else
				{
					/* 90-180 deg use ceil */
					*GearHandler.PWM = (uint32)(ceil((11.111111f * deg))) + (uint32)500U;
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <GearControl_SetServoPos+0xfc>)
 800158a:	681c      	ldr	r4, [r3, #0]
 800158c:	79bb      	ldrb	r3, [r7, #6]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff f8f8 	bl	8000784 <__aeabi_i2f>
 8001594:	4603      	mov	r3, r0
 8001596:	4917      	ldr	r1, [pc, #92]	; (80015f4 <GearControl_SetServoPos+0x100>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff f947 	bl	800082c <__aeabi_fmul>
 800159e:	4603      	mov	r3, r0
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ff39 	bl	8000418 <__aeabi_f2d>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	f004 f847 	bl	8005640 <ceil>
 80015b2:	4602      	mov	r2, r0
 80015b4:	460b      	mov	r3, r1
 80015b6:	4610      	mov	r0, r2
 80015b8:	4619      	mov	r1, r3
 80015ba:	f7ff f809 	bl	80005d0 <__aeabi_d2uiz>
 80015be:	4603      	mov	r3, r0
 80015c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80015c4:	6023      	str	r3, [r4, #0]
				}
				GearHandler.PwmRequest = *GearHandler.PWM;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <GearControl_SetServoPos+0xfc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <GearControl_SetServoPos+0xfc>)
 80015ce:	6053      	str	r3, [r2, #4]
			else
			{
				/* Error */
				GearControl_SetError(POSITION_REQUEST_ERROR, TRUE);
			}
			break;
 80015d0:	e009      	b.n	80015e6 <GearControl_SetServoPos+0xf2>
				GearControl_SetError(POSITION_REQUEST_ERROR, TRUE);
 80015d2:	2101      	movs	r1, #1
 80015d4:	2002      	movs	r0, #2
 80015d6:	f7ff ff3b 	bl	8001450 <GearControl_SetError>
			break;
 80015da:	e004      	b.n	80015e6 <GearControl_SetServoPos+0xf2>

		default:
			/* Error */
			GearControl_SetError(POSITION_REQUEST_ERROR, TRUE);
 80015dc:	2101      	movs	r1, #1
 80015de:	2002      	movs	r0, #2
 80015e0:	f7ff ff36 	bl	8001450 <GearControl_SetError>
			break;
 80015e4:	bf00      	nop
	}
}
 80015e6:	bf00      	nop
 80015e8:	370c      	adds	r7, #12
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd90      	pop	{r4, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000000 	.word	0x20000000
 80015f4:	4131c71c 	.word	0x4131c71c

080015f8 <GearControl_Process>:

/* Gear control main process */
void GearControl_Process(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
	if (GEAR_INIT == GearHandler.state)
 80015fc:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <GearControl_Process+0x30>)
 80015fe:	7b9b      	ldrb	r3, [r3, #14]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <GearControl_Process+0x1c>
	{
		GearHandler.state = GearState_Init();
 8001606:	f7ff fbf1 	bl	8000dec <GearState_Init>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <GearControl_Process+0x30>)
 8001610:	739a      	strb	r2, [r3, #14]
	{
		GearHandler.state = GearStateHandler();

		GearControl_WdgProcess();
	}
}
 8001612:	e007      	b.n	8001624 <GearControl_Process+0x2c>
		GearHandler.state = GearStateHandler();
 8001614:	f7ff fdda 	bl	80011cc <GearStateHandler>
 8001618:	4603      	mov	r3, r0
 800161a:	461a      	mov	r2, r3
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <GearControl_Process+0x30>)
 800161e:	739a      	strb	r2, [r3, #14]
		GearControl_WdgProcess();
 8001620:	f7ff ff42 	bl	80014a8 <GearControl_WdgProcess>
}
 8001624:	bf00      	nop
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20000000 	.word	0x20000000

0800162c <GearControl_FuelCutTrigger>:

void GearControl_FuelCutTrigger(uint8 onOff)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
	if (onOff == ON)
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d109      	bne.n	8001650 <GearControl_FuelCutTrigger+0x24>
	{
		GearHandler.cutStatus = TRUE;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <GearControl_FuelCutTrigger+0x40>)
 800163e:	2201      	movs	r2, #1
 8001640:	74da      	strb	r2, [r3, #19]
		HAL_GPIO_WritePin(FUEL_CUT_GPIO_Port, FUEL_CUT_Pin, GPIO_PIN_SET);
 8001642:	2201      	movs	r2, #1
 8001644:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001648:	4809      	ldr	r0, [pc, #36]	; (8001670 <GearControl_FuelCutTrigger+0x44>)
 800164a:	f002 fe7e 	bl	800434a <HAL_GPIO_WritePin>
	else
	{
		GearHandler.cutStatus = FALSE;
		HAL_GPIO_WritePin(FUEL_CUT_GPIO_Port, FUEL_CUT_Pin, GPIO_PIN_RESET);
	}
}
 800164e:	e008      	b.n	8001662 <GearControl_FuelCutTrigger+0x36>
		GearHandler.cutStatus = FALSE;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <GearControl_FuelCutTrigger+0x40>)
 8001652:	2200      	movs	r2, #0
 8001654:	74da      	strb	r2, [r3, #19]
		HAL_GPIO_WritePin(FUEL_CUT_GPIO_Port, FUEL_CUT_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <GearControl_FuelCutTrigger+0x44>)
 800165e:	f002 fe74 	bl	800434a <HAL_GPIO_WritePin>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000000 	.word	0x20000000
 8001670:	40010c00 	.word	0x40010c00

08001674 <InRange>:
/*       Static functions       */
/* ---------------------------- */

/* Check if adc reading is within threshold for given gear position */
static inline uint8 InRange(GearInfoS* gearinfo, uint8 nSamples)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	460b      	mov	r3, r1
 800167e:	70fb      	strb	r3, [r7, #3]
	uint8 in_range = FALSE;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

	if ((gear_sensor.rawVal[0] != GEARSENSOR_UNDEFINED) &&
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <InRange+0x90>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	881b      	ldrh	r3, [r3, #0]
 800168a:	b29b      	uxth	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d02f      	beq.n	80016f0 <InRange+0x7c>
		(gearinfo->adcVal >= (gear_sensor.rawVal[0] - gearinfo->adcThreshold)) &&
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	885b      	ldrh	r3, [r3, #2]
 8001694:	461a      	mov	r2, r3
 8001696:	4b1b      	ldr	r3, [pc, #108]	; (8001704 <InRange+0x90>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	881b      	ldrh	r3, [r3, #0]
 800169c:	b29b      	uxth	r3, r3
 800169e:	4619      	mov	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	889b      	ldrh	r3, [r3, #4]
 80016a4:	1acb      	subs	r3, r1, r3
	if ((gear_sensor.rawVal[0] != GEARSENSOR_UNDEFINED) &&
 80016a6:	429a      	cmp	r2, r3
 80016a8:	db22      	blt.n	80016f0 <InRange+0x7c>
		(gearinfo->adcVal <= (gear_sensor.rawVal[0] + gearinfo->adcThreshold)))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	885b      	ldrh	r3, [r3, #2]
 80016ae:	461a      	mov	r2, r3
 80016b0:	4b14      	ldr	r3, [pc, #80]	; (8001704 <InRange+0x90>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	881b      	ldrh	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4619      	mov	r1, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	889b      	ldrh	r3, [r3, #4]
 80016be:	440b      	add	r3, r1
		(gearinfo->adcVal >= (gear_sensor.rawVal[0] - gearinfo->adcThreshold)) &&
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dc15      	bgt.n	80016f0 <InRange+0x7c>
	{
		if (gearinfo->validCnt >= nSamples)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	799b      	ldrb	r3, [r3, #6]
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	78fa      	ldrb	r2, [r7, #3]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d805      	bhi.n	80016dc <InRange+0x68>
		{
			in_range = TRUE;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
			gearinfo->validCnt = 0;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	719a      	strb	r2, [r3, #6]
		if (gearinfo->validCnt >= nSamples)
 80016da:	e00c      	b.n	80016f6 <InRange+0x82>
		}
		else
		{
			in_range = CHECK_IN_PROG;
 80016dc:	2303      	movs	r3, #3
 80016de:	73fb      	strb	r3, [r7, #15]
			gearinfo->validCnt++;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	799b      	ldrb	r3, [r3, #6]
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	719a      	strb	r2, [r3, #6]
		if (gearinfo->validCnt >= nSamples)
 80016ee:	e002      	b.n	80016f6 <InRange+0x82>
		}
	}
	else
	{
		/* Reset valid counter and return FALSE */
		gearinfo->validCnt = 0;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	719a      	strb	r2, [r3, #6]
	}

	return in_range;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	200000c4 	.word	0x200000c4

08001708 <GearSensor_Init>:
/* ---------------------------- */
/*       Global functions       */
/* ---------------------------- */

void GearSensor_Init(__IO uint16* const dmaBuffer)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	gear_sensor.rawVal = dmaBuffer;
 8001710:	4a03      	ldr	r2, [pc, #12]	; (8001720 <GearSensor_Init+0x18>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	bc80      	pop	{r7}
 800171e:	4770      	bx	lr
 8001720:	200000c4 	.word	0x200000c4

08001724 <GearSensor_GetStateBySensorAdc>:

/* Get current gear by sensor reading */
GearStates GearSensor_GetStateBySensorAdc(uint8 nSamples)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	71fb      	strb	r3, [r7, #7]
	uint8 i = (uint8)GEAR_1; /* Start with GEAR 1 id */
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
	GearStates state = GEAR_INVALID;
 8001732:	2309      	movs	r3, #9
 8001734:	73bb      	strb	r3, [r7, #14]

	while (GearInfo[i].state != GEAR_INVALID)
 8001736:	e01c      	b.n	8001772 <GearSensor_GetStateBySensorAdc+0x4e>
	{
		uint8 status = InRange(&GearInfo[i], nSamples);
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	00db      	lsls	r3, r3, #3
 800173c:	4a12      	ldr	r2, [pc, #72]	; (8001788 <GearSensor_GetStateBySensorAdc+0x64>)
 800173e:	4413      	add	r3, r2
 8001740:	79fa      	ldrb	r2, [r7, #7]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff95 	bl	8001674 <InRange>
 800174a:	4603      	mov	r3, r0
 800174c:	737b      	strb	r3, [r7, #13]

		if (status == TRUE)
 800174e:	7b7b      	ldrb	r3, [r7, #13]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <GearSensor_GetStateBySensorAdc+0x3c>
		{
			state = GearInfo[i].state;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <GearSensor_GetStateBySensorAdc+0x64>)
 8001758:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800175c:	73bb      	strb	r3, [r7, #14]
			break;
 800175e:	e00e      	b.n	800177e <GearSensor_GetStateBySensorAdc+0x5a>
		}
		else if (status == CHECK_IN_PROG)
 8001760:	7b7b      	ldrb	r3, [r7, #13]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d102      	bne.n	800176c <GearSensor_GetStateBySensorAdc+0x48>
		{
			state = GEAR_IN_PROG;
 8001766:	2308      	movs	r3, #8
 8001768:	73bb      	strb	r3, [r7, #14]
			break;
 800176a:	e008      	b.n	800177e <GearSensor_GetStateBySensorAdc+0x5a>
		}
		++i;
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	3301      	adds	r3, #1
 8001770:	73fb      	strb	r3, [r7, #15]
	while (GearInfo[i].state != GEAR_INVALID)
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	4a04      	ldr	r2, [pc, #16]	; (8001788 <GearSensor_GetStateBySensorAdc+0x64>)
 8001776:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800177a:	2b09      	cmp	r3, #9
 800177c:	d1dc      	bne.n	8001738 <GearSensor_GetStateBySensorAdc+0x14>
	}

	return state;
 800177e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	2000001c 	.word	0x2000001c

0800178c <GearSensor_Process>:

/* Check if gear was changed by monitoring IDLE state */
void GearSensor_Process(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
	GearStates nextstate = GearControl_GetNextState();
 8001792:	f7ff fe05 	bl	80013a0 <GearControl_GetNextState>
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
	GearStates currentstate = GearControl_GetState();
 800179a:	f7ff fdf5 	bl	8001388 <GearControl_GetState>
 800179e:	4603      	mov	r3, r0
 80017a0:	71bb      	strb	r3, [r7, #6]

	if ((SHIFT_IDLE == ShiftControl_GetState()) && (nextstate == GEAR_INVALID))
 80017a2:	f7ff fda9 	bl	80012f8 <ShiftControl_GetState>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d13f      	bne.n	800182c <GearSensor_Process+0xa0>
 80017ac:	79fb      	ldrb	r3, [r7, #7]
 80017ae:	2b09      	cmp	r3, #9
 80017b0:	d13c      	bne.n	800182c <GearSensor_Process+0xa0>
	{
		uint8 isInRange = InRange(&GearInfo[(uint8)currentstate], SAMPLES_3);
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	4a1f      	ldr	r2, [pc, #124]	; (8001834 <GearSensor_Process+0xa8>)
 80017b8:	4413      	add	r3, r2
 80017ba:	2103      	movs	r1, #3
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff59 	bl	8001674 <InRange>
 80017c2:	4603      	mov	r3, r0
 80017c4:	717b      	strb	r3, [r7, #5]

		if (FALSE == isInRange)
 80017c6:	797b      	ldrb	r3, [r7, #5]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d11d      	bne.n	8001808 <GearSensor_Process+0x7c>
		{
			GearStates newState = GearSensor_GetStateBySensorAdc(SAMPLES_3);
 80017cc:	2003      	movs	r0, #3
 80017ce:	f7ff ffa9 	bl	8001724 <GearSensor_GetStateBySensorAdc>
 80017d2:	4603      	mov	r3, r0
 80017d4:	713b      	strb	r3, [r7, #4]

			if (newState == GEAR_IN_PROG)
 80017d6:	793b      	ldrb	r3, [r7, #4]
 80017d8:	2b08      	cmp	r3, #8
 80017da:	d027      	beq.n	800182c <GearSensor_Process+0xa0>
				/* CHECK IN PROGRESS */
			}
			else
			{
				/* Gear found or unkown (adc == 0) */
				if (newState != GEAR_INVALID)
 80017dc:	793b      	ldrb	r3, [r7, #4]
 80017de:	2b09      	cmp	r3, #9
 80017e0:	d007      	beq.n	80017f2 <GearSensor_Process+0x66>
				{
					GearControl_SetState(newState);
 80017e2:	793b      	ldrb	r3, [r7, #4]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fdbf 	bl	8001368 <GearControl_SetState>
					GearSensor_SetState(GEAR_NOT_CHANGED);
 80017ea:	2003      	movs	r0, #3
 80017ec:	f7ff fde4 	bl	80013b8 <GearSensor_SetState>
 80017f0:	e002      	b.n	80017f8 <GearSensor_Process+0x6c>
				}
				else
				{
					/* adc equal 0, unknown gear */
					GearSensor_SetState(GEAR_UNKNOWN);
 80017f2:	2001      	movs	r0, #1
 80017f4:	f7ff fde0 	bl	80013b8 <GearSensor_SetState>
				}

				ShiftControl_SetValidation(VALIDATION_DONE);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff fd99 	bl	8001330 <ShiftControl_SetValidation>
				GearControl_SetError(GEAR_NOT_SHIFTED_ERROR, TRUE);
 80017fe:	2101      	movs	r1, #1
 8001800:	2010      	movs	r0, #16
 8001802:	f7ff fe25 	bl	8001450 <GearControl_SetError>
		else
		{
			/* CHECK IN PROGRESS */
		}
	}
}
 8001806:	e011      	b.n	800182c <GearSensor_Process+0xa0>
		else if ((TRUE == isInRange) &&
 8001808:	797b      	ldrb	r3, [r7, #5]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d10e      	bne.n	800182c <GearSensor_Process+0xa0>
				(VALIDATION_POLL == ShiftControl_GetValidation()))
 800180e:	f7ff fd9f 	bl	8001350 <ShiftControl_GetValidation>
 8001812:	4603      	mov	r3, r0
		else if ((TRUE == isInRange) &&
 8001814:	2b02      	cmp	r3, #2
 8001816:	d109      	bne.n	800182c <GearSensor_Process+0xa0>
			GearSensor_SetState(GEAR_OK);
 8001818:	2002      	movs	r0, #2
 800181a:	f7ff fdcd 	bl	80013b8 <GearSensor_SetState>
			GearControl_SetError(GEAR_NOT_SHIFTED_ERROR, FALSE);
 800181e:	2100      	movs	r1, #0
 8001820:	2010      	movs	r0, #16
 8001822:	f7ff fe15 	bl	8001450 <GearControl_SetError>
			ShiftControl_SetValidation(VALIDATION_DONE);
 8001826:	2001      	movs	r0, #1
 8001828:	f7ff fd82 	bl	8001330 <ShiftControl_SetValidation>
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2000001c 	.word	0x2000001c

08001838 <GearSensor_DMAProcess>:

void GearSensor_DMAProcess(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	GearStates nextstate = GearControl_GetNextState();
 800183e:	f7ff fdaf 	bl	80013a0 <GearControl_GetNextState>
 8001842:	4603      	mov	r3, r0
 8001844:	71fb      	strb	r3, [r7, #7]
	ShiftStates state = ShiftControl_GetState();
 8001846:	f7ff fd57 	bl	80012f8 <ShiftControl_GetState>
 800184a:	4603      	mov	r3, r0
 800184c:	71bb      	strb	r3, [r7, #6]

	testadcval = gear_sensor.rawVal[0];
 800184e:	4b1d      	ldr	r3, [pc, #116]	; (80018c4 <GearSensor_DMAProcess+0x8c>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	b29b      	uxth	r3, r3
 8001856:	461a      	mov	r2, r3
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <GearSensor_DMAProcess+0x90>)
 800185a:	601a      	str	r2, [r3, #0]

	switch (state)
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d01d      	beq.n	800189e <GearSensor_DMAProcess+0x66>
 8001862:	2b03      	cmp	r3, #3
 8001864:	d000      	beq.n	8001868 <GearSensor_DMAProcess+0x30>
				GearControl_SetServoPos(SET_DEG, POS_DEG_DEFAULT, 0);
			}
			break;

		default:
			break;
 8001866:	e029      	b.n	80018bc <GearSensor_DMAProcess+0x84>
			if ((GEAR_INVALID != nextstate) &&
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b09      	cmp	r3, #9
 800186c:	d023      	beq.n	80018b6 <GearSensor_DMAProcess+0x7e>
				(TRUE == InRange(&GearInfo[(uint8)nextstate], N_SAMPLES)))
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4a16      	ldr	r2, [pc, #88]	; (80018cc <GearSensor_DMAProcess+0x94>)
 8001874:	4413      	add	r3, r2
 8001876:	2104      	movs	r1, #4
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fefb 	bl	8001674 <InRange>
 800187e:	4603      	mov	r3, r0
			if ((GEAR_INVALID != nextstate) &&
 8001880:	2b01      	cmp	r3, #1
 8001882:	d118      	bne.n	80018b6 <GearSensor_DMAProcess+0x7e>
				GearControl_SetServoPos(SET_DEG, POS_DEG_DEFAULT, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	215a      	movs	r1, #90	; 0x5a
 8001888:	2004      	movs	r0, #4
 800188a:	f7ff fe33 	bl	80014f4 <GearControl_SetServoPos>
				GearControl_SetError(GEAR_NOT_SHIFTED_ERROR, FALSE);
 800188e:	2100      	movs	r1, #0
 8001890:	2010      	movs	r0, #16
 8001892:	f7ff fddd 	bl	8001450 <GearControl_SetError>
				ShiftControl_SetState(SHIFT_DONE);
 8001896:	2004      	movs	r0, #4
 8001898:	f7ff fd3a 	bl	8001310 <ShiftControl_SetState>
			break;
 800189c:	e00b      	b.n	80018b6 <GearSensor_DMAProcess+0x7e>
			if (GEARSENSOR_UNDEFINED == gear_sensor.rawVal[0])
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <GearSensor_DMAProcess+0x8c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d107      	bne.n	80018ba <GearSensor_DMAProcess+0x82>
				GearControl_SetServoPos(SET_DEG, POS_DEG_DEFAULT, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	215a      	movs	r1, #90	; 0x5a
 80018ae:	2004      	movs	r0, #4
 80018b0:	f7ff fe20 	bl	80014f4 <GearControl_SetServoPos>
			break;
 80018b4:	e001      	b.n	80018ba <GearSensor_DMAProcess+0x82>
			break;
 80018b6:	bf00      	nop
 80018b8:	e000      	b.n	80018bc <GearSensor_DMAProcess+0x84>
			break;
 80018ba:	bf00      	nop
	}
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	200000c4 	.word	0x200000c4
 80018c8:	200000c0 	.word	0x200000c0
 80018cc:	2000001c 	.word	0x2000001c

080018d0 <MicroSwitch_Clear>:

/* ---------------------------- */
/*       Static functions       */
/* ---------------------------- */
static void MicroSwitch_Clear(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
	uint8 i = 0;
 80018d6:	2300      	movs	r3, #0
 80018d8:	71fb      	strb	r3, [r7, #7]

	for (i = 0; i < BUTTON_CNT; ++i)
 80018da:	2300      	movs	r3, #0
 80018dc:	71fb      	strb	r3, [r7, #7]
 80018de:	e01f      	b.n	8001920 <MicroSwitch_Clear+0x50>
	{
		MicroSwitch[i].validCnt = 0;
 80018e0:	79fa      	ldrb	r2, [r7, #7]
 80018e2:	4913      	ldr	r1, [pc, #76]	; (8001930 <MicroSwitch_Clear+0x60>)
 80018e4:	4613      	mov	r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	440b      	add	r3, r1
 80018ee:	3302      	adds	r3, #2
 80018f0:	2200      	movs	r2, #0
 80018f2:	801a      	strh	r2, [r3, #0]
		MicroSwitch[i].debCnt = 0;
 80018f4:	79fa      	ldrb	r2, [r7, #7]
 80018f6:	490e      	ldr	r1, [pc, #56]	; (8001930 <MicroSwitch_Clear+0x60>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	2200      	movs	r2, #0
 8001904:	801a      	strh	r2, [r3, #0]
		MicroSwitch[i].wasPressed = FALSE;
 8001906:	79fa      	ldrb	r2, [r7, #7]
 8001908:	4909      	ldr	r1, [pc, #36]	; (8001930 <MicroSwitch_Clear+0x60>)
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	3305      	adds	r3, #5
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BUTTON_CNT; ++i)
 800191a:	79fb      	ldrb	r3, [r7, #7]
 800191c:	3301      	adds	r3, #1
 800191e:	71fb      	strb	r3, [r7, #7]
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d9dc      	bls.n	80018e0 <MicroSwitch_Clear+0x10>
	}
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	200000f4 	.word	0x200000f4

08001934 <MicroSwitch_DebounceLow>:

static void MicroSwitch_DebounceLow(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
	/* Make sure both microswitches were LOW debouncing before triggering gearshift again */
	if ((*MicroSwitch[0].adc_read < BUTTON_OFF_ADC_TRESHOLD) &&
 8001938:	4b13      	ldr	r3, [pc, #76]	; (8001988 <MicroSwitch_DebounceLow+0x54>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	b29b      	uxth	r3, r3
 8001940:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001944:	d219      	bcs.n	800197a <MicroSwitch_DebounceLow+0x46>
		(*MicroSwitch[1].adc_read < BUTTON_OFF_ADC_TRESHOLD))
 8001946:	4b10      	ldr	r3, [pc, #64]	; (8001988 <MicroSwitch_DebounceLow+0x54>)
 8001948:	695b      	ldr	r3, [r3, #20]
 800194a:	881b      	ldrh	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
	if ((*MicroSwitch[0].adc_read < BUTTON_OFF_ADC_TRESHOLD) &&
 800194e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001952:	d212      	bcs.n	800197a <MicroSwitch_DebounceLow+0x46>
	{
		++lowDebCnt;
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <MicroSwitch_DebounceLow+0x58>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3301      	adds	r3, #1
 800195c:	b2da      	uxtb	r2, r3
 800195e:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MicroSwitch_DebounceLow+0x58>)
 8001960:	701a      	strb	r2, [r3, #0]

		if (lowDebCnt > DEBOUNCE_20MS)
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <MicroSwitch_DebounceLow+0x58>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b0a      	cmp	r3, #10
 800196a:	d909      	bls.n	8001980 <MicroSwitch_DebounceLow+0x4c>
		{
			lowDebCnt = 0;
 800196c:	4b07      	ldr	r3, [pc, #28]	; (800198c <MicroSwitch_DebounceLow+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
			CheckForLow = FALSE;
 8001972:	4b07      	ldr	r3, [pc, #28]	; (8001990 <MicroSwitch_DebounceLow+0x5c>)
 8001974:	2200      	movs	r2, #0
 8001976:	701a      	strb	r2, [r3, #0]
		if (lowDebCnt > DEBOUNCE_20MS)
 8001978:	e002      	b.n	8001980 <MicroSwitch_DebounceLow+0x4c>
		}
	}
	else
	{
		lowDebCnt = 0;
 800197a:	4b04      	ldr	r3, [pc, #16]	; (800198c <MicroSwitch_DebounceLow+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	701a      	strb	r2, [r3, #0]
	}
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr
 8001988:	200000f4 	.word	0x200000f4
 800198c:	200000f0 	.word	0x200000f0
 8001990:	2000006c 	.word	0x2000006c

08001994 <MicroSwitch_Init>:
/* ---------------------------- */
/*       Global functions       */
/* ---------------------------- */

void MicroSwitch_Init(__IO uint16* const dmaBuffer)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	uint8 i = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < BUTTON_CNT; ++i)
 80019a0:	2300      	movs	r3, #0
 80019a2:	73fb      	strb	r3, [r7, #15]
 80019a4:	e01f      	b.n	80019e6 <MicroSwitch_Init+0x52>
	{
		MicroSwitch[i].debCnt = 0;
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	491e      	ldr	r1, [pc, #120]	; (8001a24 <MicroSwitch_Init+0x90>)
 80019aa:	4613      	mov	r3, r2
 80019ac:	005b      	lsls	r3, r3, #1
 80019ae:	4413      	add	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	440b      	add	r3, r1
 80019b4:	2200      	movs	r2, #0
 80019b6:	801a      	strh	r2, [r3, #0]
		MicroSwitch[i].validCnt = 0;
 80019b8:	7bfa      	ldrb	r2, [r7, #15]
 80019ba:	491a      	ldr	r1, [pc, #104]	; (8001a24 <MicroSwitch_Init+0x90>)
 80019bc:	4613      	mov	r3, r2
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	4413      	add	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	440b      	add	r3, r1
 80019c6:	3302      	adds	r3, #2
 80019c8:	2200      	movs	r2, #0
 80019ca:	801a      	strh	r2, [r3, #0]
		MicroSwitch[i].wasPressed = FALSE;
 80019cc:	7bfa      	ldrb	r2, [r7, #15]
 80019ce:	4915      	ldr	r1, [pc, #84]	; (8001a24 <MicroSwitch_Init+0x90>)
 80019d0:	4613      	mov	r3, r2
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	4413      	add	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	3305      	adds	r3, #5
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < BUTTON_CNT; ++i)
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	3301      	adds	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	7bfb      	ldrb	r3, [r7, #15]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d9dc      	bls.n	80019a6 <MicroSwitch_Init+0x12>
	}

	MicroSwitch[0].request = REQUEST_SHIFT_DOWN;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <MicroSwitch_Init+0x90>)
 80019ee:	2202      	movs	r2, #2
 80019f0:	711a      	strb	r2, [r3, #4]
	MicroSwitch[0].GPIO = GPIO_PIN_15;
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <MicroSwitch_Init+0x90>)
 80019f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019f8:	80da      	strh	r2, [r3, #6]
	MicroSwitch[0].adc_read = &dmaBuffer[2];
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3304      	adds	r3, #4
 80019fe:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <MicroSwitch_Init+0x90>)
 8001a00:	6093      	str	r3, [r2, #8]
	MicroSwitch[1].request = REQUEST_SHIFT_UP;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <MicroSwitch_Init+0x90>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	741a      	strb	r2, [r3, #16]
	MicroSwitch[1].GPIO = GPIO_PIN_14;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <MicroSwitch_Init+0x90>)
 8001a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a0e:	825a      	strh	r2, [r3, #18]
	MicroSwitch[1].adc_read = &dmaBuffer[3];
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3306      	adds	r3, #6
 8001a14:	4a03      	ldr	r2, [pc, #12]	; (8001a24 <MicroSwitch_Init+0x90>)
 8001a16:	6153      	str	r3, [r2, #20]
}
 8001a18:	bf00      	nop
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	200000f4 	.word	0x200000f4

08001a28 <MicroSwitch_PollAgain>:

void MicroSwitch_PollAgain(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
	MS_PollStatus = POLL_NONE;
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <MicroSwitch_PollAgain+0x14>)
 8001a2e:	2204      	movs	r2, #4
 8001a30:	701a      	strb	r2, [r3, #0]
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	2000006d 	.word	0x2000006d

08001a40 <MicroSwitch_PollStatus>:

void MicroSwitch_PollStatus(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	if ((SHIFT_IDLE == ShiftControl_GetState()) && (MS_PollStatus == POLL_NONE))
 8001a44:	f7ff fc58 	bl	80012f8 <ShiftControl_GetState>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d123      	bne.n	8001a96 <MicroSwitch_PollStatus+0x56>
 8001a4e:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <MicroSwitch_PollStatus+0x5c>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d11e      	bne.n	8001a96 <MicroSwitch_PollStatus+0x56>
	{
		if (CheckForLow)
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <MicroSwitch_PollStatus+0x60>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d002      	beq.n	8001a68 <MicroSwitch_PollStatus+0x28>
		{
			MicroSwitch_DebounceLow();
 8001a62:	f7ff ff67 	bl	8001934 <MicroSwitch_DebounceLow>
			{
				/* Nothing */
			}
		}
	}
}
 8001a66:	e016      	b.n	8001a96 <MicroSwitch_PollStatus+0x56>
			if (*MicroSwitch[0].adc_read > BUTTON_PRESSED_ADC_THRESHOLD)
 8001a68:	4b0e      	ldr	r3, [pc, #56]	; (8001aa4 <MicroSwitch_PollStatus+0x64>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d903      	bls.n	8001a80 <MicroSwitch_PollStatus+0x40>
				MS_PollStatus = POLL_SHIFT_DOWN;
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MicroSwitch_PollStatus+0x5c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	701a      	strb	r2, [r3, #0]
}
 8001a7e:	e00a      	b.n	8001a96 <MicroSwitch_PollStatus+0x56>
			else if (*MicroSwitch[1].adc_read > BUTTON_PRESSED_ADC_THRESHOLD)
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MicroSwitch_PollStatus+0x64>)
 8001a82:	695b      	ldr	r3, [r3, #20]
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d902      	bls.n	8001a96 <MicroSwitch_PollStatus+0x56>
				MS_PollStatus = POLL_SHIFT_UP;
 8001a90:	4b02      	ldr	r3, [pc, #8]	; (8001a9c <MicroSwitch_PollStatus+0x5c>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	701a      	strb	r2, [r3, #0]
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	2000006d 	.word	0x2000006d
 8001aa0:	2000006c 	.word	0x2000006c
 8001aa4:	200000f4 	.word	0x200000f4

08001aa8 <MicroSwitch_Process>:
		debCnt = 0U;
	}
}
#endif
void MicroSwitch_Process(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
	if ((MS_PollStatus == POLL_SHIFT_UP) || (MS_PollStatus == POLL_SHIFT_DOWN))
 8001aae:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <MicroSwitch_Process+0x13c>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d005      	beq.n	8001ac4 <MicroSwitch_Process+0x1c>
 8001ab8:	4b4a      	ldr	r3, [pc, #296]	; (8001be4 <MicroSwitch_Process+0x13c>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	f040 808c 	bne.w	8001bdc <MicroSwitch_Process+0x134>
	{
		uint8 id = (uint8)MS_PollStatus;
 8001ac4:	4b47      	ldr	r3, [pc, #284]	; (8001be4 <MicroSwitch_Process+0x13c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	71fb      	strb	r3, [r7, #7]

		if (MicroSwitch[id].debCnt <= DEBOUNCE_10MS)
 8001aca:	79fa      	ldrb	r2, [r7, #7]
 8001acc:	4946      	ldr	r1, [pc, #280]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001ace:	4613      	mov	r3, r2
 8001ad0:	005b      	lsls	r3, r3, #1
 8001ad2:	4413      	add	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d858      	bhi.n	8001b92 <MicroSwitch_Process+0xea>
		{
			++MicroSwitch[id].debCnt;
 8001ae0:	79fa      	ldrb	r2, [r7, #7]
 8001ae2:	4941      	ldr	r1, [pc, #260]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	4413      	add	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	3301      	adds	r3, #1
 8001af4:	b298      	uxth	r0, r3
 8001af6:	493c      	ldr	r1, [pc, #240]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001af8:	4613      	mov	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	4602      	mov	r2, r0
 8001b04:	801a      	strh	r2, [r3, #0]

			if (*MicroSwitch[id].adc_read > BUTTON_PRESSED_ADC_THRESHOLD)
 8001b06:	79fa      	ldrb	r2, [r7, #7]
 8001b08:	4937      	ldr	r1, [pc, #220]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	005b      	lsls	r3, r3, #1
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	3308      	adds	r3, #8
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d915      	bls.n	8001b50 <MicroSwitch_Process+0xa8>
			{
				++MicroSwitch[id].validCnt;
 8001b24:	79fa      	ldrb	r2, [r7, #7]
 8001b26:	4930      	ldr	r1, [pc, #192]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001b28:	4613      	mov	r3, r2
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	4413      	add	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	3302      	adds	r3, #2
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b298      	uxth	r0, r3
 8001b3c:	492a      	ldr	r1, [pc, #168]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001b3e:	4613      	mov	r3, r2
 8001b40:	005b      	lsls	r3, r3, #1
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3302      	adds	r3, #2
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	801a      	strh	r2, [r3, #0]
 8001b4e:	e009      	b.n	8001b64 <MicroSwitch_Process+0xbc>
			}
			else
			{
				MicroSwitch[id].validCnt = 0U;
 8001b50:	79fa      	ldrb	r2, [r7, #7]
 8001b52:	4925      	ldr	r1, [pc, #148]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001b54:	4613      	mov	r3, r2
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4413      	add	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	440b      	add	r3, r1
 8001b5e:	3302      	adds	r3, #2
 8001b60:	2200      	movs	r2, #0
 8001b62:	801a      	strh	r2, [r3, #0]
			}

			/* Check for X CONSECUTIVE high signals */
			if (MicroSwitch[id].validCnt >= DEBOUNCE_10MS)
 8001b64:	79fa      	ldrb	r2, [r7, #7]
 8001b66:	4920      	ldr	r1, [pc, #128]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	3302      	adds	r3, #2
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d90e      	bls.n	8001b9a <MicroSwitch_Process+0xf2>
			{
				MicroSwitch[id].wasPressed = TRUE;
 8001b7c:	79fa      	ldrb	r2, [r7, #7]
 8001b7e:	491a      	ldr	r1, [pc, #104]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	3305      	adds	r3, #5
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e003      	b.n	8001b9a <MicroSwitch_Process+0xf2>
			}
		}
		else
		{
			/* Debounce exceeded */
			MicroSwitch_Clear();
 8001b92:	f7ff fe9d 	bl	80018d0 <MicroSwitch_Clear>
			MicroSwitch_PollAgain();
 8001b96:	f7ff ff47 	bl	8001a28 <MicroSwitch_PollAgain>
		}

		/* Microswitch pressed, change gear */
		if (TRUE == MicroSwitch[id].wasPressed)
 8001b9a:	79fa      	ldrb	r2, [r7, #7]
 8001b9c:	4912      	ldr	r1, [pc, #72]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	3305      	adds	r3, #5
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d114      	bne.n	8001bdc <MicroSwitch_Process+0x134>
		{
			CheckForLow = TRUE;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <MicroSwitch_Process+0x144>)
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	701a      	strb	r2, [r3, #0]
			MS_PollStatus = POLL_EXEC;
 8001bb8:	4b0a      	ldr	r3, [pc, #40]	; (8001be4 <MicroSwitch_Process+0x13c>)
 8001bba:	2202      	movs	r2, #2
 8001bbc:	701a      	strb	r2, [r3, #0]
			MicroSwitch_Clear();
 8001bbe:	f7ff fe87 	bl	80018d0 <MicroSwitch_Clear>
			ShiftControl_SetRequest(MicroSwitch[id].request);
 8001bc2:	79fa      	ldrb	r2, [r7, #7]
 8001bc4:	4908      	ldr	r1, [pc, #32]	; (8001be8 <MicroSwitch_Process+0x140>)
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff fbfe 	bl	80013d8 <ShiftControl_SetRequest>
		}
	}
}
 8001bdc:	bf00      	nop
 8001bde:	3708      	adds	r7, #8
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000006d 	.word	0x2000006d
 8001be8:	200000f4 	.word	0x200000f4
 8001bec:	2000006c 	.word	0x2000006c

08001bf0 <PeriodicProcess2msHandler>:
}
#endif


void PeriodicProcess2msHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	/* Poll MicroSwitch Status */
	MicroSwitch_PollStatus();
 8001bf4:	f7ff ff24 	bl	8001a40 <MicroSwitch_PollStatus>

	/* MicroSwitch process */
	MicroSwitch_Process();
 8001bf8:	f7ff ff56 	bl	8001aa8 <MicroSwitch_Process>
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <PeriodicProcess4msHandler>:

void PeriodicProcess4msHandler(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
	/* Gear Control process */
	GearControl_Process();
 8001c04:	f7ff fcf8 	bl	80015f8 <GearControl_Process>

	/* Gear Sensor process */
	GearSensor_Process();
 8001c08:	f7ff fdc0 	bl	800178c <GearSensor_Process>
}
 8001c0c:	bf00      	nop
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <PeriodicProcess200msHandler>:

void PeriodicProcess200msHandler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0

}
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <main>:
  * @brief  The application entry point.
  * @retval int
  */

int main(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c22:	f000 fca1 	bl	8002568 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c26:	f000 f84b 	bl	8001cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c2a:	f000 f9e7 	bl	8001ffc <MX_GPIO_Init>
  MX_DMA_Init();
 8001c2e:	f000 f9c7 	bl	8001fc0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001c32:	f000 f8a1 	bl	8001d78 <MX_ADC1_Init>
  MX_CAN_Init();
 8001c36:	f000 f909 	bl	8001e4c <MX_CAN_Init>
  MX_TIM1_Init();
 8001c3a:	f000 f93d 	bl	8001eb8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <main+0x8c>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <main+0x8c>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6053      	str	r3, [r2, #4]

  GearControl_FuelCutTrigger(OFF);
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f7ff fce6 	bl	800162c <GearControl_FuelCutTrigger>
  /* Init CAN Manager */
  CANManager_Init(&hcan);
 8001c60:	4812      	ldr	r0, [pc, #72]	; (8001cac <main+0x90>)
 8001c62:	f7fe ff33 	bl	8000acc <CANManager_Init>
  /* Start servo PWM signal */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001c66:	2108      	movs	r1, #8
 8001c68:	4811      	ldr	r0, [pc, #68]	; (8001cb0 <main+0x94>)
 8001c6a:	f003 f877 	bl	8004d5c <HAL_TIM_PWM_Start>
  /* Initialize Gear Control module */
  GearControl_Init(&htim1.Instance->CCR3);
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <main+0x94>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	333c      	adds	r3, #60	; 0x3c
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fc09 	bl	800148c <GearControl_Init>
  /* Start Gear Sensor Adc DMA */
  HAL_ADC_Start_DMA(&hadc1, (uint32*)gearsens, N_CHANNELS);
 8001c7a:	2204      	movs	r2, #4
 8001c7c:	490d      	ldr	r1, [pc, #52]	; (8001cb4 <main+0x98>)
 8001c7e:	480e      	ldr	r0, [pc, #56]	; (8001cb8 <main+0x9c>)
 8001c80:	f000 fdce 	bl	8002820 <HAL_ADC_Start_DMA>
  /* Initialize Gear Sensor module */
  GearSensor_Init(gearsens);
 8001c84:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <main+0x98>)
 8001c86:	f7ff fd3f 	bl	8001708 <GearSensor_Init>
  /* Initialize MicroSwitch module */
  MicroSwitch_Init(gearsens);
 8001c8a:	480a      	ldr	r0, [pc, #40]	; (8001cb4 <main+0x98>)
 8001c8c:	f7ff fe82 	bl	8001994 <MicroSwitch_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (SysTickHasElapsed())
 8001c90:	f000 fc22 	bl	80024d8 <SysTickHasElapsed>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0fa      	beq.n	8001c90 <main+0x74>
	  {
		  /* Reset Elapsed status */
		  SysTickResetElapsed();
 8001c9a:	f000 fc29 	bl	80024f0 <SysTickResetElapsed>

		  /* Call Scheduler every SysTick (1ms) */
		  SchedulerEvaluate(schedule);
 8001c9e:	4807      	ldr	r0, [pc, #28]	; (8001cbc <main+0xa0>)
 8001ca0:	f000 fc32 	bl	8002508 <SchedulerEvaluate>
	  if (SysTickHasElapsed())
 8001ca4:	e7f4      	b.n	8001c90 <main+0x74>
 8001ca6:	bf00      	nop
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	20000190 	.word	0x20000190
 8001cb0:	2000022c 	.word	0x2000022c
 8001cb4:	20000274 	.word	0x20000274
 8001cb8:	200001b8 	.word	0x200001b8
 8001cbc:	08005894 	.word	0x08005894

08001cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b094      	sub	sp, #80	; 0x50
 8001cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cca:	2228      	movs	r2, #40	; 0x28
 8001ccc:	2100      	movs	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f003 fcac 	bl	800562c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d02:	2302      	movs	r3, #2
 8001d04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001d0c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001d10:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 fb30 	bl	800437c <HAL_RCC_OscConfig>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001d22:	f000 fa05 	bl	8002130 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d26:	230f      	movs	r3, #15
 8001d28:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d36:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2102      	movs	r1, #2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fd9a 	bl	800487c <HAL_RCC_ClockConfig>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001d4e:	f000 f9ef 	bl	8002130 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d52:	2302      	movs	r3, #2
 8001d54:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d5a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5c:	1d3b      	adds	r3, r7, #4
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f002 fef6 	bl	8004b50 <HAL_RCCEx_PeriphCLKConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001d6a:	f000 f9e1 	bl	8002130 <Error_Handler>
  }
}
 8001d6e:	bf00      	nop
 8001d70:	3750      	adds	r7, #80	; 0x50
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
	...

08001d78 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b084      	sub	sp, #16
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d88:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001d8a:	4a2f      	ldr	r2, [pc, #188]	; (8001e48 <MX_ADC1_Init+0xd0>)
 8001d8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001d8e:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001d90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d94:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001d96:	4b2b      	ldr	r3, [pc, #172]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001d98:	2201      	movs	r2, #1
 8001d9a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001da2:	4b28      	ldr	r3, [pc, #160]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001da4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001da8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001daa:	4b26      	ldr	r3, [pc, #152]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 4;
 8001db0:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001db2:	2204      	movs	r2, #4
 8001db4:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001db6:	4823      	ldr	r0, [pc, #140]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001db8:	f000 fc5a 	bl	8002670 <HAL_ADC_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001dc2:	f000 f9b5 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001dce:	2307      	movs	r3, #7
 8001dd0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dd2:	1d3b      	adds	r3, r7, #4
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	481b      	ldr	r0, [pc, #108]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001dd8:	f000 fe1c 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001de2:	f000 f9a5 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001de6:	2301      	movs	r3, #1
 8001de8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001dea:	2302      	movs	r3, #2
 8001dec:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	4619      	mov	r1, r3
 8001df2:	4814      	ldr	r0, [pc, #80]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001df4:	f000 fe0e 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8001dfe:	f000 f997 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001e02:	2308      	movs	r3, #8
 8001e04:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001e06:	2303      	movs	r3, #3
 8001e08:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	480d      	ldr	r0, [pc, #52]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001e10:	f000 fe00 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8001e1a:	f000 f989 	bl	8002130 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001e1e:	2309      	movs	r3, #9
 8001e20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001e22:	2304      	movs	r3, #4
 8001e24:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4806      	ldr	r0, [pc, #24]	; (8001e44 <MX_ADC1_Init+0xcc>)
 8001e2c:	f000 fdf2 	bl	8002a14 <HAL_ADC_ConfigChannel>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8001e36:	f000 f97b 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e3a:	bf00      	nop
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200001b8 	.word	0x200001b8
 8001e48:	40012400 	.word	0x40012400

08001e4c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e52:	4a18      	ldr	r2, [pc, #96]	; (8001eb4 <MX_CAN_Init+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e58:	2204      	movs	r2, #4
 8001e5a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e6a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001e6e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001e94:	4b06      	ldr	r3, [pc, #24]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_CAN_Init+0x64>)
 8001e9c:	f000 ffa4 	bl	8002de8 <HAL_CAN_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 8001ea6:	f000 f943 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000190 	.word	0x20000190
 8001eb4:	40006400 	.word	0x40006400

08001eb8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b092      	sub	sp, #72	; 0x48
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ebe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
 8001ed8:	615a      	str	r2, [r3, #20]
 8001eda:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	2220      	movs	r2, #32
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 fba2 	bl	800562c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ee8:	4b33      	ldr	r3, [pc, #204]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001eea:	4a34      	ldr	r2, [pc, #208]	; (8001fbc <MX_TIM1_Init+0x104>)
 8001eec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001eee:	4b32      	ldr	r3, [pc, #200]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001ef0:	2247      	movs	r2, #71	; 0x47
 8001ef2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef4:	4b30      	ldr	r3, [pc, #192]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8001efa:	4b2f      	ldr	r3, [pc, #188]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001efc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f02:	4b2d      	ldr	r3, [pc, #180]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f08:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f0e:	4b2a      	ldr	r3, [pc, #168]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f14:	4828      	ldr	r0, [pc, #160]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001f16:	f002 fed1 	bl	8004cbc <HAL_TIM_PWM_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001f20:	f000 f906 	bl	8002130 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f24:	2300      	movs	r3, #0
 8001f26:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f2c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f30:	4619      	mov	r1, r3
 8001f32:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001f34:	f003 fa80 	bl	8005438 <HAL_TIMEx_MasterConfigSynchronization>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001f3e:	f000 f8f7 	bl	8002130 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f42:	2360      	movs	r3, #96	; 0x60
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f62:	2208      	movs	r2, #8
 8001f64:	4619      	mov	r1, r3
 8001f66:	4814      	ldr	r0, [pc, #80]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001f68:	f002 ff9a 	bl	8004ea0 <HAL_TIM_PWM_ConfigChannel>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001f72:	f000 f8dd 	bl	8002130 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f8e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f90:	2300      	movs	r3, #0
 8001f92:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f94:	1d3b      	adds	r3, r7, #4
 8001f96:	4619      	mov	r1, r3
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001f9a:	f003 faab 	bl	80054f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001fa4:	f000 f8c4 	bl	8002130 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001fa8:	4803      	ldr	r0, [pc, #12]	; (8001fb8 <MX_TIM1_Init+0x100>)
 8001faa:	f000 fa03 	bl	80023b4 <HAL_TIM_MspPostInit>

}
 8001fae:	bf00      	nop
 8001fb0:	3748      	adds	r7, #72	; 0x48
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	2000022c 	.word	0x2000022c
 8001fbc:	40012c00 	.word	0x40012c00

08001fc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fc6:	4a0c      	ldr	r2, [pc, #48]	; (8001ff8 <MX_DMA_Init+0x38>)
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <MX_DMA_Init+0x38>)
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	f043 0301 	orr.w	r3, r3, #1
 8001fd0:	6153      	str	r3, [r2, #20]
 8001fd2:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <MX_DMA_Init+0x38>)
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	607b      	str	r3, [r7, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	200b      	movs	r0, #11
 8001fe4:	f001 fe0f 	bl	8003c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001fe8:	200b      	movs	r0, #11
 8001fea:	f001 fe28 	bl	8003c3e <HAL_NVIC_EnableIRQ>

}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000

08001ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b088      	sub	sp, #32
 8002000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	f107 0310 	add.w	r3, r7, #16
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002010:	4a43      	ldr	r2, [pc, #268]	; (8002120 <MX_GPIO_Init+0x124>)
 8002012:	4b43      	ldr	r3, [pc, #268]	; (8002120 <MX_GPIO_Init+0x124>)
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	f043 0310 	orr.w	r3, r3, #16
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b40      	ldr	r3, [pc, #256]	; (8002120 <MX_GPIO_Init+0x124>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002028:	4a3d      	ldr	r2, [pc, #244]	; (8002120 <MX_GPIO_Init+0x124>)
 800202a:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <MX_GPIO_Init+0x124>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	f043 0320 	orr.w	r3, r3, #32
 8002032:	6193      	str	r3, [r2, #24]
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <MX_GPIO_Init+0x124>)
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	f003 0320 	and.w	r3, r3, #32
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002040:	4a37      	ldr	r2, [pc, #220]	; (8002120 <MX_GPIO_Init+0x124>)
 8002042:	4b37      	ldr	r3, [pc, #220]	; (8002120 <MX_GPIO_Init+0x124>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6193      	str	r3, [r2, #24]
 800204c:	4b34      	ldr	r3, [pc, #208]	; (8002120 <MX_GPIO_Init+0x124>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	607b      	str	r3, [r7, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002058:	4a31      	ldr	r2, [pc, #196]	; (8002120 <MX_GPIO_Init+0x124>)
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <MX_GPIO_Init+0x124>)
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	f043 0308 	orr.w	r3, r3, #8
 8002062:	6193      	str	r3, [r2, #24]
 8002064:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <MX_GPIO_Init+0x124>)
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	603b      	str	r3, [r7, #0]
 800206e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002070:	2200      	movs	r2, #0
 8002072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002076:	482b      	ldr	r0, [pc, #172]	; (8002124 <MX_GPIO_Init+0x128>)
 8002078:	f002 f967 	bl	800434a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ABS_CLK_Pin|ABS_CS_Pin, GPIO_PIN_RESET);
 800207c:	2200      	movs	r2, #0
 800207e:	2128      	movs	r1, #40	; 0x28
 8002080:	4829      	ldr	r0, [pc, #164]	; (8002128 <MX_GPIO_Init+0x12c>)
 8002082:	f002 f962 	bl	800434a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FUEL_CUT_GPIO_Port, FUEL_CUT_Pin, GPIO_PIN_RESET);
 8002086:	2200      	movs	r2, #0
 8002088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800208c:	4827      	ldr	r0, [pc, #156]	; (800212c <MX_GPIO_Init+0x130>)
 800208e:	f002 f95c 	bl	800434a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002096:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002098:	2301      	movs	r3, #1
 800209a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a0:	2302      	movs	r3, #2
 80020a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020a4:	f107 0310 	add.w	r3, r7, #16
 80020a8:	4619      	mov	r1, r3
 80020aa:	481e      	ldr	r0, [pc, #120]	; (8002124 <MX_GPIO_Init+0x128>)
 80020ac:	f001 ffdc 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80020b0:	2301      	movs	r3, #1
 80020b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020b4:	2303      	movs	r3, #3
 80020b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b8:	f107 0310 	add.w	r3, r7, #16
 80020bc:	4619      	mov	r1, r3
 80020be:	481a      	ldr	r0, [pc, #104]	; (8002128 <MX_GPIO_Init+0x12c>)
 80020c0:	f001 ffd2 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pins : ABS_CLK_Pin ABS_CS_Pin */
  GPIO_InitStruct.Pin = ABS_CLK_Pin|ABS_CS_Pin;
 80020c4:	2328      	movs	r3, #40	; 0x28
 80020c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	4619      	mov	r1, r3
 80020da:	4813      	ldr	r0, [pc, #76]	; (8002128 <MX_GPIO_Init+0x12c>)
 80020dc:	f001 ffc4 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : ABS_DO_Pin */
  GPIO_InitStruct.Pin = ABS_DO_Pin;
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ABS_DO_GPIO_Port, &GPIO_InitStruct);
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4619      	mov	r1, r3
 80020f2:	480d      	ldr	r0, [pc, #52]	; (8002128 <MX_GPIO_Init+0x12c>)
 80020f4:	f001 ffb8 	bl	8004068 <HAL_GPIO_Init>

  /*Configure GPIO pin : FUEL_CUT_Pin */
  GPIO_InitStruct.Pin = FUEL_CUT_Pin;
 80020f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020fe:	2301      	movs	r3, #1
 8002100:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002102:	2302      	movs	r3, #2
 8002104:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(FUEL_CUT_GPIO_Port, &GPIO_InitStruct);
 800210a:	f107 0310 	add.w	r3, r7, #16
 800210e:	4619      	mov	r1, r3
 8002110:	4806      	ldr	r0, [pc, #24]	; (800212c <MX_GPIO_Init+0x130>)
 8002112:	f001 ffa9 	bl	8004068 <HAL_GPIO_Init>

}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	40011000 	.word	0x40011000
 8002128:	40010800 	.word	0x40010800
 800212c:	40010c00 	.word	0x40010c00

08002130 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002142:	4a16      	ldr	r2, [pc, #88]	; (800219c <HAL_MspInit+0x60>)
 8002144:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_MspInit+0x60>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6193      	str	r3, [r2, #24]
 800214e:	4b13      	ldr	r3, [pc, #76]	; (800219c <HAL_MspInit+0x60>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4a10      	ldr	r2, [pc, #64]	; (800219c <HAL_MspInit+0x60>)
 800215c:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_MspInit+0x60>)
 800215e:	69db      	ldr	r3, [r3, #28]
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_MspInit+0x60>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8002172:	2005      	movs	r0, #5
 8002174:	f001 fd3c 	bl	8003bf0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002178:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <HAL_MspInit+0x64>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <HAL_MspInit+0x64>)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002194:	bf00      	nop
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40021000 	.word	0x40021000
 80021a0:	40010000 	.word	0x40010000

080021a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0318 	add.w	r3, r7, #24
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a34      	ldr	r2, [pc, #208]	; (8002290 <HAL_ADC_MspInit+0xec>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d160      	bne.n	8002286 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021c4:	4a33      	ldr	r2, [pc, #204]	; (8002294 <HAL_ADC_MspInit+0xf0>)
 80021c6:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_ADC_MspInit+0xf0>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021ce:	6193      	str	r3, [r2, #24]
 80021d0:	4b30      	ldr	r3, [pc, #192]	; (8002294 <HAL_ADC_MspInit+0xf0>)
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	4a2d      	ldr	r2, [pc, #180]	; (8002294 <HAL_ADC_MspInit+0xf0>)
 80021de:	4b2d      	ldr	r3, [pc, #180]	; (8002294 <HAL_ADC_MspInit+0xf0>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_ADC_MspInit+0xf0>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0304 	and.w	r3, r3, #4
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f4:	4a27      	ldr	r2, [pc, #156]	; (8002294 <HAL_ADC_MspInit+0xf0>)
 80021f6:	4b27      	ldr	r3, [pc, #156]	; (8002294 <HAL_ADC_MspInit+0xf0>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f043 0308 	orr.w	r3, r3, #8
 80021fe:	6193      	str	r3, [r2, #24]
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_ADC_MspInit+0xf0>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800220c:	2303      	movs	r3, #3
 800220e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002210:	2303      	movs	r3, #3
 8002212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002214:	f107 0318 	add.w	r3, r7, #24
 8002218:	4619      	mov	r1, r3
 800221a:	481f      	ldr	r0, [pc, #124]	; (8002298 <HAL_ADC_MspInit+0xf4>)
 800221c:	f001 ff24 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002220:	2303      	movs	r3, #3
 8002222:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002224:	2303      	movs	r3, #3
 8002226:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002228:	f107 0318 	add.w	r3, r7, #24
 800222c:	4619      	mov	r1, r3
 800222e:	481b      	ldr	r0, [pc, #108]	; (800229c <HAL_ADC_MspInit+0xf8>)
 8002230:	f001 ff1a 	bl	8004068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 8002236:	4a1b      	ldr	r2, [pc, #108]	; (80022a4 <HAL_ADC_MspInit+0x100>)
 8002238:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 800223c:	2200      	movs	r2, #0
 800223e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 8002248:	2280      	movs	r2, #128	; 0x80
 800224a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800224c:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 800224e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002252:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 8002256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800225a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 800225e:	2220      	movs	r2, #32
 8002260:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 8002264:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002268:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 800226c:	f001 fd02 	bl	8003c74 <HAL_DMA_Init>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_ADC_MspInit+0xd6>
    {
      Error_Handler();
 8002276:	f7ff ff5b 	bl	8002130 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 800227e:	621a      	str	r2, [r3, #32]
 8002280:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <HAL_ADC_MspInit+0xfc>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	3728      	adds	r7, #40	; 0x28
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40012400 	.word	0x40012400
 8002294:	40021000 	.word	0x40021000
 8002298:	40010800 	.word	0x40010800
 800229c:	40010c00 	.word	0x40010c00
 80022a0:	200001e8 	.word	0x200001e8
 80022a4:	40020008 	.word	0x40020008

080022a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a29      	ldr	r2, [pc, #164]	; (8002368 <HAL_CAN_MspInit+0xc0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d14b      	bne.n	8002360 <HAL_CAN_MspInit+0xb8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80022c8:	4a28      	ldr	r2, [pc, #160]	; (800236c <HAL_CAN_MspInit+0xc4>)
 80022ca:	4b28      	ldr	r3, [pc, #160]	; (800236c <HAL_CAN_MspInit+0xc4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022d2:	61d3      	str	r3, [r2, #28]
 80022d4:	4b25      	ldr	r3, [pc, #148]	; (800236c <HAL_CAN_MspInit+0xc4>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022dc:	613b      	str	r3, [r7, #16]
 80022de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e0:	4a22      	ldr	r2, [pc, #136]	; (800236c <HAL_CAN_MspInit+0xc4>)
 80022e2:	4b22      	ldr	r3, [pc, #136]	; (800236c <HAL_CAN_MspInit+0xc4>)
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	f043 0308 	orr.w	r3, r3, #8
 80022ea:	6193      	str	r3, [r2, #24]
 80022ec:	4b1f      	ldr	r3, [pc, #124]	; (800236c <HAL_CAN_MspInit+0xc4>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0308 	and.w	r3, r3, #8
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80022f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022fe:	2300      	movs	r3, #0
 8002300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002302:	2300      	movs	r3, #0
 8002304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	4818      	ldr	r0, [pc, #96]	; (8002370 <HAL_CAN_MspInit+0xc8>)
 800230e:	f001 feab 	bl	8004068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002318:	2302      	movs	r3, #2
 800231a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231c:	2303      	movs	r3, #3
 800231e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4812      	ldr	r0, [pc, #72]	; (8002370 <HAL_CAN_MspInit+0xc8>)
 8002328:	f001 fe9e 	bl	8004068 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <HAL_CAN_MspInit+0xcc>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	627b      	str	r3, [r7, #36]	; 0x24
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8002338:	627b      	str	r3, [r7, #36]	; 0x24
 800233a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
 800234a:	4a0a      	ldr	r2, [pc, #40]	; (8002374 <HAL_CAN_MspInit+0xcc>)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002350:	2200      	movs	r2, #0
 8002352:	2100      	movs	r1, #0
 8002354:	2014      	movs	r0, #20
 8002356:	f001 fc56 	bl	8003c06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800235a:	2014      	movs	r0, #20
 800235c:	f001 fc6f 	bl	8003c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	; 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40006400 	.word	0x40006400
 800236c:	40021000 	.word	0x40021000
 8002370:	40010c00 	.word	0x40010c00
 8002374:	40010000 	.word	0x40010000

08002378 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_TIM_PWM_MspInit+0x34>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d10b      	bne.n	80023a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_TIM_PWM_MspInit+0x38>)
 800238c:	4b08      	ldr	r3, [pc, #32]	; (80023b0 <HAL_TIM_PWM_MspInit+0x38>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002394:	6193      	str	r3, [r2, #24]
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_TIM_PWM_MspInit+0x38>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239e:	60fb      	str	r3, [r7, #12]
 80023a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40012c00 	.word	0x40012c00
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a10      	ldr	r2, [pc, #64]	; (8002410 <HAL_TIM_MspPostInit+0x5c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d118      	bne.n	8002406 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023d4:	4a0f      	ldr	r2, [pc, #60]	; (8002414 <HAL_TIM_MspPostInit+0x60>)
 80023d6:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <HAL_TIM_MspPostInit+0x60>)
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b0c      	ldr	r3, [pc, #48]	; (8002414 <HAL_TIM_MspPostInit+0x60>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0304 	and.w	r3, r3, #4
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f2:	2302      	movs	r3, #2
 80023f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f6:	2302      	movs	r3, #2
 80023f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023fa:	f107 0310 	add.w	r3, r7, #16
 80023fe:	4619      	mov	r1, r3
 8002400:	4805      	ldr	r0, [pc, #20]	; (8002418 <HAL_TIM_MspPostInit+0x64>)
 8002402:	f001 fe31 	bl	8004068 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002406:	bf00      	nop
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	40012c00 	.word	0x40012c00
 8002414:	40021000 	.word	0x40021000
 8002418:	40010800 	.word	0x40010800

0800241c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr

08002428 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242c:	e7fe      	b.n	800242c <HardFault_Handler+0x4>

0800242e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <MemManage_Handler+0x4>

08002434 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <BusFault_Handler+0x4>

0800243a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <UsageFault_Handler+0x4>

08002440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	46bd      	mov	sp, r7
 8002448:	bc80      	pop	{r7}
 800244a:	4770      	bx	lr

0800244c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	bc80      	pop	{r7}
 8002462:	4770      	bx	lr

08002464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246a:	f000 f8c3 	bl	80025f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  for (uint8 i = 0; i < N_PROCESS; ++i)
 800246e:	2300      	movs	r3, #0
 8002470:	71fb      	strb	r3, [r7, #7]
 8002472:	e00a      	b.n	800248a <SysTick_Handler+0x26>
  {
	  ++timers[i];
 8002474:	79fb      	ldrb	r3, [r7, #7]
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <SysTick_Handler+0x3c>)
 8002478:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800247c:	3201      	adds	r2, #1
 800247e:	4908      	ldr	r1, [pc, #32]	; (80024a0 <SysTick_Handler+0x3c>)
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (uint8 i = 0; i < N_PROCESS; ++i)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	3301      	adds	r3, #1
 8002488:	71fb      	strb	r3, [r7, #7]
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	2b02      	cmp	r3, #2
 800248e:	d9f1      	bls.n	8002474 <SysTick_Handler+0x10>
  }
  hasElapsed = TRUE;
 8002490:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <SysTick_Handler+0x40>)
 8002492:	2201      	movs	r2, #1
 8002494:	701a      	strb	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	2000010c 	.word	0x2000010c
 80024a4:	20000118 	.word	0x20000118

080024a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024ac:	4803      	ldr	r0, [pc, #12]	; (80024bc <DMA1_Channel1_IRQHandler+0x14>)
 80024ae:	f001 fc9b 	bl	8003de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* Gear Sensor DMA process */
  GearSensor_DMAProcess();
 80024b2:	f7ff f9c1 	bl	8001838 <GearSensor_DMAProcess>

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200001e8 	.word	0x200001e8

080024c0 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80024c4:	4803      	ldr	r0, [pc, #12]	; (80024d4 <USB_LP_CAN1_RX0_IRQHandler+0x14>)
 80024c6:	f001 f8a2 	bl	800360e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  CAN_ReceiveMsg();
 80024ca:	f7fe fb0d 	bl	8000ae8 <CAN_ReceiveMsg>

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000190 	.word	0x20000190

080024d8 <SysTickHasElapsed>:

/* USER CODE BEGIN 1 */

boolean SysTickHasElapsed(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
	return hasElapsed;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <SysTickHasElapsed+0x14>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000118 	.word	0x20000118

080024f0 <SysTickResetElapsed>:

void SysTickResetElapsed(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
	hasElapsed = FALSE;
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <SysTickResetElapsed+0x14>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
}
 80024fa:	bf00      	nop
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bc80      	pop	{r7}
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	20000118 	.word	0x20000118

08002508 <SchedulerEvaluate>:

void SchedulerEvaluate(const Scheduler* schedule)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	for (uint8 i = 0U; i < N_PROCESS; ++i)
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
 8002514:	e018      	b.n	8002548 <SchedulerEvaluate+0x40>
	{
		if (timers[i] >= schedule[i].period)
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <SchedulerEvaluate+0x50>)
 800251a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800251e:	7bfb      	ldrb	r3, [r7, #15]
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	440b      	add	r3, r1
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	429a      	cmp	r2, r3
 800252a:	d30a      	bcc.n	8002542 <SchedulerEvaluate+0x3a>
		{
			schedule[i].handler();
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	4413      	add	r3, r2
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4798      	blx	r3
			timers[i] = 0U;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	4a07      	ldr	r2, [pc, #28]	; (8002558 <SchedulerEvaluate+0x50>)
 800253c:	2100      	movs	r1, #0
 800253e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (uint8 i = 0U; i < N_PROCESS; ++i)
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	3301      	adds	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	7bfb      	ldrb	r3, [r7, #15]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d9e3      	bls.n	8002516 <SchedulerEvaluate+0xe>
		}
	}
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000010c 	.word	0x2000010c

0800255c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800256c:	4a08      	ldr	r2, [pc, #32]	; (8002590 <HAL_Init+0x28>)
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <HAL_Init+0x28>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002578:	2003      	movs	r0, #3
 800257a:	f001 fb39 	bl	8003bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257e:	2000      	movs	r0, #0
 8002580:	f000 f808 	bl	8002594 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002584:	f7ff fdda 	bl	800213c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	40022000 	.word	0x40022000

08002594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_InitTick+0x54>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b12      	ldr	r3, [pc, #72]	; (80025ec <HAL_InitTick+0x58>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	4619      	mov	r1, r3
 80025a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80025ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f001 fb51 	bl	8003c5a <HAL_SYSTICK_Config>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e00e      	b.n	80025e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b0f      	cmp	r3, #15
 80025c6:	d80a      	bhi.n	80025de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c8:	2200      	movs	r2, #0
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	f04f 30ff 	mov.w	r0, #4294967295
 80025d0:	f001 fb19 	bl	8003c06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d4:	4a06      	ldr	r2, [pc, #24]	; (80025f0 <HAL_InitTick+0x5c>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000070 	.word	0x20000070
 80025ec:	20000078 	.word	0x20000078
 80025f0:	20000074 	.word	0x20000074

080025f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_IncTick+0x1c>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_IncTick+0x20>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4413      	add	r3, r2
 8002604:	4a03      	ldr	r2, [pc, #12]	; (8002614 <HAL_IncTick+0x20>)
 8002606:	6013      	str	r3, [r2, #0]
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	20000078 	.word	0x20000078
 8002614:	2000027c 	.word	0x2000027c

08002618 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b02      	ldr	r3, [pc, #8]	; (8002628 <HAL_GetTick+0x10>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	2000027c 	.word	0x2000027c

0800262c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff fff0 	bl	8002618 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d005      	beq.n	8002652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002646:	4b09      	ldr	r3, [pc, #36]	; (800266c <HAL_Delay+0x40>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002652:	bf00      	nop
 8002654:	f7ff ffe0 	bl	8002618 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad2      	subs	r2, r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d3f7      	bcc.n	8002654 <HAL_Delay+0x28>
  {
  }
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	20000078 	.word	0x20000078

08002670 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002678:	2300      	movs	r3, #0
 800267a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e0be      	b.n	8002810 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	2b00      	cmp	r3, #0
 800269e:	d109      	bne.n	80026b4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7ff fd78 	bl	80021a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 faf7 	bl	8002ca8 <ADC_ConversionStop_Disable>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f040 8099 	bne.w	80027fe <HAL_ADC_Init+0x18e>
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	f040 8095 	bne.w	80027fe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026dc:	f023 0302 	bic.w	r3, r3, #2
 80026e0:	f043 0202 	orr.w	r2, r3, #2
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026f0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	7b1b      	ldrb	r3, [r3, #12]
 80026f6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80026f8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002708:	d003      	beq.n	8002712 <HAL_ADC_Init+0xa2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_ADC_Init+0xa8>
 8002712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002716:	e000      	b.n	800271a <HAL_ADC_Init+0xaa>
 8002718:	2300      	movs	r3, #0
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7d1b      	ldrb	r3, [r3, #20]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d119      	bne.n	800275c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	7b1b      	ldrb	r3, [r3, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d109      	bne.n	8002744 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	699b      	ldr	r3, [r3, #24]
 8002734:	3b01      	subs	r3, #1
 8002736:	035a      	lsls	r2, r3, #13
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4313      	orrs	r3, r2
 800273c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	e00b      	b.n	800275c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	f043 0220 	orr.w	r2, r3, #32
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	f043 0201 	orr.w	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6812      	ldr	r2, [r2, #0]
 8002764:	6852      	ldr	r2, [r2, #4]
 8002766:	f422 4169 	bic.w	r1, r2, #59648	; 0xe900
 800276a:	693a      	ldr	r2, [r7, #16]
 800276c:	430a      	orrs	r2, r1
 800276e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	4b27      	ldr	r3, [pc, #156]	; (8002818 <HAL_ADC_Init+0x1a8>)
 800277c:	400b      	ands	r3, r1
 800277e:	68b9      	ldr	r1, [r7, #8]
 8002780:	430b      	orrs	r3, r1
 8002782:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800278c:	d003      	beq.n	8002796 <HAL_ADC_Init+0x126>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d104      	bne.n	80027a0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691b      	ldr	r3, [r3, #16]
 800279a:	3b01      	subs	r3, #1
 800279c:	051b      	lsls	r3, r3, #20
 800279e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027aa:	f422 0170 	bic.w	r1, r2, #15728640	; 0xf00000
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_ADC_Init+0x1ac>)
 80027bc:	4013      	ands	r3, r2
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d10b      	bne.n	80027dc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027da:	e018      	b.n	800280e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	f023 0312 	bic.w	r3, r3, #18
 80027e4:	f043 0210 	orr.w	r2, r3, #16
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f0:	f043 0201 	orr.w	r2, r3, #1
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80027fc:	e007      	b.n	800280e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002802:	f043 0210 	orr.w	r2, r3, #16
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800280e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	ffe1f7fd 	.word	0xffe1f7fd
 800281c:	ff1f0efe 	.word	0xff1f0efe

08002820 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800282c:	2300      	movs	r3, #0
 800282e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a64      	ldr	r2, [pc, #400]	; (80029c8 <HAL_ADC_Start_DMA+0x1a8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d004      	beq.n	8002844 <HAL_ADC_Start_DMA+0x24>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a63      	ldr	r2, [pc, #396]	; (80029cc <HAL_ADC_Start_DMA+0x1ac>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d106      	bne.n	8002852 <HAL_ADC_Start_DMA+0x32>
 8002844:	4b60      	ldr	r3, [pc, #384]	; (80029c8 <HAL_ADC_Start_DMA+0x1a8>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800284c:	2b00      	cmp	r3, #0
 800284e:	f040 80b3 	bne.w	80029b8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002858:	2b01      	cmp	r3, #1
 800285a:	d101      	bne.n	8002860 <HAL_ADC_Start_DMA+0x40>
 800285c:	2302      	movs	r3, #2
 800285e:	e0ae      	b.n	80029be <HAL_ADC_Start_DMA+0x19e>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 f9cb 	bl	8002c04 <ADC_Enable>
 800286e:	4603      	mov	r3, r0
 8002870:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002872:	7dfb      	ldrb	r3, [r7, #23]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f040 809a 	bne.w	80029ae <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002882:	f023 0301 	bic.w	r3, r3, #1
 8002886:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a4e      	ldr	r2, [pc, #312]	; (80029cc <HAL_ADC_Start_DMA+0x1ac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d105      	bne.n	80028a4 <HAL_ADC_Start_DMA+0x84>
 8002898:	4b4b      	ldr	r3, [pc, #300]	; (80029c8 <HAL_ADC_Start_DMA+0x1a8>)
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d115      	bne.n	80028d0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d026      	beq.n	800290c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028c6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028ce:	e01d      	b.n	800290c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a39      	ldr	r2, [pc, #228]	; (80029c8 <HAL_ADC_Start_DMA+0x1a8>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d004      	beq.n	80028f0 <HAL_ADC_Start_DMA+0xd0>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a38      	ldr	r2, [pc, #224]	; (80029cc <HAL_ADC_Start_DMA+0x1ac>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d10d      	bne.n	800290c <HAL_ADC_Start_DMA+0xec>
 80028f0:	4b35      	ldr	r3, [pc, #212]	; (80029c8 <HAL_ADC_Start_DMA+0x1a8>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d007      	beq.n	800290c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002904:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291c:	f023 0206 	bic.w	r2, r3, #6
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	62da      	str	r2, [r3, #44]	; 0x2c
 8002924:	e002      	b.n	800292c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	4a25      	ldr	r2, [pc, #148]	; (80029d0 <HAL_ADC_Start_DMA+0x1b0>)
 800293a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	4a24      	ldr	r2, [pc, #144]	; (80029d4 <HAL_ADC_Start_DMA+0x1b4>)
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4a23      	ldr	r2, [pc, #140]	; (80029d8 <HAL_ADC_Start_DMA+0x1b8>)
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0202 	mvn.w	r2, #2
 8002954:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	6892      	ldr	r2, [r2, #8]
 8002960:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002964:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a18      	ldr	r0, [r3, #32]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	334c      	adds	r3, #76	; 0x4c
 8002970:	4619      	mov	r1, r3
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f001 f9d7 	bl	8003d28 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002984:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002988:	d108      	bne.n	800299c <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	6812      	ldr	r2, [r2, #0]
 8002992:	6892      	ldr	r2, [r2, #8]
 8002994:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002998:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800299a:	e00f      	b.n	80029bc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	6892      	ldr	r2, [r2, #8]
 80029a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80029aa:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80029ac:	e006      	b.n	80029bc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 80029b6:	e001      	b.n	80029bc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40012400 	.word	0x40012400
 80029cc:	40012800 	.word	0x40012800
 80029d0:	08002d1d 	.word	0x08002d1d
 80029d4:	08002d99 	.word	0x08002d99
 80029d8:	08002db5 	.word	0x08002db5

080029dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029dc:	b480      	push	{r7}
 80029de:	b083      	sub	sp, #12
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029e4:	bf00      	nop
 80029e6:	370c      	adds	r7, #12
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029ee:	b480      	push	{r7}
 80029f0:	b083      	sub	sp, #12
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bc80      	pop	{r7}
 8002a10:	4770      	bx	lr
	...

08002a14 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a14:	b490      	push	{r4, r7}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d101      	bne.n	8002a34 <HAL_ADC_ConfigChannel+0x20>
 8002a30:	2302      	movs	r3, #2
 8002a32:	e0dc      	b.n	8002bee <HAL_ADC_ConfigChannel+0x1da>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b06      	cmp	r3, #6
 8002a42:	d81c      	bhi.n	8002a7e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6819      	ldr	r1, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	3b05      	subs	r3, #5
 8002a5a:	221f      	movs	r2, #31
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	4018      	ands	r0, r3
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681c      	ldr	r4, [r3, #0]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	3b05      	subs	r3, #5
 8002a74:	fa04 f303 	lsl.w	r3, r4, r3
 8002a78:	4303      	orrs	r3, r0
 8002a7a:	634b      	str	r3, [r1, #52]	; 0x34
 8002a7c:	e03c      	b.n	8002af8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b0c      	cmp	r3, #12
 8002a84:	d81c      	bhi.n	8002ac0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6819      	ldr	r1, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	3b23      	subs	r3, #35	; 0x23
 8002a9c:	221f      	movs	r2, #31
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43db      	mvns	r3, r3
 8002aa4:	4018      	ands	r0, r3
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	681c      	ldr	r4, [r3, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	3b23      	subs	r3, #35	; 0x23
 8002ab6:	fa04 f303 	lsl.w	r3, r4, r3
 8002aba:	4303      	orrs	r3, r0
 8002abc:	630b      	str	r3, [r1, #48]	; 0x30
 8002abe:	e01b      	b.n	8002af8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b41      	subs	r3, #65	; 0x41
 8002ad6:	221f      	movs	r2, #31
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4018      	ands	r0, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681c      	ldr	r4, [r3, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685a      	ldr	r2, [r3, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	4413      	add	r3, r2
 8002aee:	3b41      	subs	r3, #65	; 0x41
 8002af0:	fa04 f303 	lsl.w	r3, r4, r3
 8002af4:	4303      	orrs	r3, r0
 8002af6:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2b09      	cmp	r3, #9
 8002afe:	d91c      	bls.n	8002b3a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6819      	ldr	r1, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68d8      	ldr	r0, [r3, #12]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	4413      	add	r3, r2
 8002b14:	3b1e      	subs	r3, #30
 8002b16:	2207      	movs	r2, #7
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	4018      	ands	r0, r3
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689c      	ldr	r4, [r3, #8]
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b1e      	subs	r3, #30
 8002b30:	fa04 f303 	lsl.w	r3, r4, r3
 8002b34:	4303      	orrs	r3, r0
 8002b36:	60cb      	str	r3, [r1, #12]
 8002b38:	e019      	b.n	8002b6e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6918      	ldr	r0, [r3, #16]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	4413      	add	r3, r2
 8002b4e:	2207      	movs	r2, #7
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	4018      	ands	r0, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689c      	ldr	r4, [r3, #8]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4613      	mov	r3, r2
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	4413      	add	r3, r2
 8002b66:	fa04 f303 	lsl.w	r3, r4, r3
 8002b6a:	4303      	orrs	r3, r0
 8002b6c:	610b      	str	r3, [r1, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2b10      	cmp	r3, #16
 8002b74:	d003      	beq.n	8002b7e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b7a:	2b11      	cmp	r3, #17
 8002b7c:	d132      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a1d      	ldr	r2, [pc, #116]	; (8002bf8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d125      	bne.n	8002bd4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d126      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6812      	ldr	r2, [r2, #0]
 8002b9e:	6892      	ldr	r2, [r2, #8]
 8002ba0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002ba4:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2b10      	cmp	r3, #16
 8002bac:	d11a      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bae:	4b13      	ldr	r3, [pc, #76]	; (8002bfc <HAL_ADC_ConfigChannel+0x1e8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <HAL_ADC_ConfigChannel+0x1ec>)
 8002bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb8:	0c9a      	lsrs	r2, r3, #18
 8002bba:	4613      	mov	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bc4:	e002      	b.n	8002bcc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f9      	bne.n	8002bc6 <HAL_ADC_ConfigChannel+0x1b2>
 8002bd2:	e007      	b.n	8002be4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	f043 0220 	orr.w	r2, r3, #32
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bc90      	pop	{r4, r7}
 8002bf6:	4770      	bx	lr
 8002bf8:	40012400 	.word	0x40012400
 8002bfc:	20000070 	.word	0x20000070
 8002c00:	431bde83 	.word	0x431bde83

08002c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c10:	2300      	movs	r3, #0
 8002c12:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d039      	beq.n	8002c96 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6812      	ldr	r2, [r2, #0]
 8002c2a:	6892      	ldr	r2, [r2, #8]
 8002c2c:	f042 0201 	orr.w	r2, r2, #1
 8002c30:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c32:	4b1b      	ldr	r3, [pc, #108]	; (8002ca0 <ADC_Enable+0x9c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <ADC_Enable+0xa0>)
 8002c38:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3c:	0c9b      	lsrs	r3, r3, #18
 8002c3e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c40:	e002      	b.n	8002c48 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c4e:	f7ff fce3 	bl	8002618 <HAL_GetTick>
 8002c52:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c54:	e018      	b.n	8002c88 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c56:	f7ff fcdf 	bl	8002618 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d911      	bls.n	8002c88 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c68:	f043 0210 	orr.w	r2, r3, #16
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e007      	b.n	8002c98 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d1df      	bne.n	8002c56 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	20000070 	.word	0x20000070
 8002ca4:	431bde83 	.word	0x431bde83

08002ca8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 0301 	and.w	r3, r3, #1
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d127      	bne.n	8002d12 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	6812      	ldr	r2, [r2, #0]
 8002cca:	6892      	ldr	r2, [r2, #8]
 8002ccc:	f022 0201 	bic.w	r2, r2, #1
 8002cd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cd2:	f7ff fca1 	bl	8002618 <HAL_GetTick>
 8002cd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002cd8:	e014      	b.n	8002d04 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002cda:	f7ff fc9d 	bl	8002618 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d90d      	bls.n	8002d04 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	f043 0210 	orr.w	r2, r3, #16
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f043 0201 	orr.w	r2, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e007      	b.n	8002d14 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d0e3      	beq.n	8002cda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d12:	2300      	movs	r3, #0
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d2e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d127      	bne.n	8002d86 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002d4c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002d50:	d115      	bne.n	8002d7e <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d111      	bne.n	8002d7e <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d105      	bne.n	8002d7e <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	f043 0201 	orr.w	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d7e:	68f8      	ldr	r0, [r7, #12]
 8002d80:	f7ff fe2c 	bl	80029dc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002d84:	e004      	b.n	8002d90 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	4798      	blx	r3
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f7ff fe21 	bl	80029ee <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dac:	bf00      	nop
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	f043 0204 	orr.w	r2, r3, #4
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dda:	68f8      	ldr	r0, [r7, #12]
 8002ddc:	f7ff fe10 	bl	8002a00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002de0:	bf00      	nop
 8002de2:	3710      	adds	r7, #16
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b084      	sub	sp, #16
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d101      	bne.n	8002dfa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e0ec      	b.n	8002fd4 <HAL_CAN_Init+0x1ec>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d102      	bne.n	8002e0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff fa4e 	bl	80022a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6812      	ldr	r2, [r2, #0]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	f022 0202 	bic.w	r2, r2, #2
 8002e1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e1c:	f7ff fbfc 	bl	8002618 <HAL_GetTick>
 8002e20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e22:	e012      	b.n	8002e4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e24:	f7ff fbf8 	bl	8002618 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b0a      	cmp	r3, #10
 8002e30:	d90b      	bls.n	8002e4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2205      	movs	r2, #5
 8002e42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0c4      	b.n	8002fd4 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e5      	bne.n	8002e24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	6812      	ldr	r2, [r2, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e68:	f7ff fbd6 	bl	8002618 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e6e:	e012      	b.n	8002e96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e70:	f7ff fbd2 	bl	8002618 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b0a      	cmp	r3, #10
 8002e7c:	d90b      	bls.n	8002e96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2205      	movs	r2, #5
 8002e8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e09e      	b.n	8002fd4 <HAL_CAN_Init+0x1ec>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 0301 	and.w	r3, r3, #1
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0e5      	beq.n	8002e70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	7e1b      	ldrb	r3, [r3, #24]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d108      	bne.n	8002ebe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	e007      	b.n	8002ece <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6812      	ldr	r2, [r2, #0]
 8002ec6:	6812      	ldr	r2, [r2, #0]
 8002ec8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ecc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	7e5b      	ldrb	r3, [r3, #25]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	6812      	ldr	r2, [r2, #0]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e007      	b.n	8002ef8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6812      	ldr	r2, [r2, #0]
 8002ef0:	6812      	ldr	r2, [r2, #0]
 8002ef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ef6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7e9b      	ldrb	r3, [r3, #26]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d108      	bne.n	8002f12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	6812      	ldr	r2, [r2, #0]
 8002f0a:	f042 0220 	orr.w	r2, r2, #32
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	e007      	b.n	8002f22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	f022 0220 	bic.w	r2, r2, #32
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	7edb      	ldrb	r3, [r3, #27]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d108      	bne.n	8002f3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	f022 0210 	bic.w	r2, r2, #16
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	e007      	b.n	8002f4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	f042 0210 	orr.w	r2, r2, #16
 8002f4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7f1b      	ldrb	r3, [r3, #28]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d108      	bne.n	8002f66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	f042 0208 	orr.w	r2, r2, #8
 8002f62:	601a      	str	r2, [r3, #0]
 8002f64:	e007      	b.n	8002f76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	f022 0208 	bic.w	r2, r2, #8
 8002f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7f5b      	ldrb	r3, [r3, #29]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d108      	bne.n	8002f90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	f042 0204 	orr.w	r2, r2, #4
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	e007      	b.n	8002fa0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	f022 0204 	bic.w	r2, r2, #4
 8002f9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6891      	ldr	r1, [r2, #8]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68d2      	ldr	r2, [r2, #12]
 8002fac:	4311      	orrs	r1, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6912      	ldr	r2, [r2, #16]
 8002fb2:	4311      	orrs	r1, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6952      	ldr	r2, [r2, #20]
 8002fb8:	4311      	orrs	r1, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6852      	ldr	r2, [r2, #4]
 8002fbe:	3a01      	subs	r2, #1
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3710      	adds	r7, #16
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002ff4:	7cfb      	ldrb	r3, [r7, #19]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d003      	beq.n	8003002 <HAL_CAN_ConfigFilter+0x26>
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	f040 80aa 	bne.w	8003156 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2201      	movs	r2, #1
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	43db      	mvns	r3, r3
 800302c:	401a      	ands	r2, r3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d123      	bne.n	8003084 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	43db      	mvns	r3, r3
 8003046:	401a      	ands	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800305e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	3248      	adds	r2, #72	; 0x48
 8003064:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	6812      	ldr	r2, [r2, #0]
 8003076:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003078:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800307a:	6979      	ldr	r1, [r7, #20]
 800307c:	3348      	adds	r3, #72	; 0x48
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	440b      	add	r3, r1
 8003082:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d122      	bne.n	80030d2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	431a      	orrs	r2, r3
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b29b      	uxth	r3, r3
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80030ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	3248      	adds	r2, #72	; 0x48
 80030b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	6892      	ldr	r2, [r2, #8]
 80030be:	0411      	lsls	r1, r2, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	68d2      	ldr	r2, [r2, #12]
 80030c4:	b292      	uxth	r2, r2
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80030c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80030c8:	6979      	ldr	r1, [r7, #20]
 80030ca:	3348      	adds	r3, #72	; 0x48
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	440b      	add	r3, r1
 80030d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d109      	bne.n	80030ee <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	43db      	mvns	r3, r3
 80030e4:	401a      	ands	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80030ec:	e007      	b.n	80030fe <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	431a      	orrs	r2, r3
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d109      	bne.n	800311a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	43db      	mvns	r3, r3
 8003110:	401a      	ands	r2, r3
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8003118:	e007      	b.n	800312a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	431a      	orrs	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d107      	bne.n	8003142 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	431a      	orrs	r2, r3
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003148:	f023 0201 	bic.w	r2, r3, #1
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8003152:	2300      	movs	r3, #0
 8003154:	e006      	b.n	8003164 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
  }
}
 8003164:	4618      	mov	r0, r3
 8003166:	371c      	adds	r7, #28
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b084      	sub	sp, #16
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3020 	ldrb.w	r3, [r3, #32]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d12e      	bne.n	80031e0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	f022 0201 	bic.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800319a:	f7ff fa3d 	bl	8002618 <HAL_GetTick>
 800319e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031a0:	e012      	b.n	80031c8 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031a2:	f7ff fa39 	bl	8002618 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b0a      	cmp	r3, #10
 80031ae:	d90b      	bls.n	80031c8 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2205      	movs	r2, #5
 80031c0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e012      	b.n	80031ee <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1e5      	bne.n	80031a2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e006      	b.n	80031ee <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
  }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b089      	sub	sp, #36	; 0x24
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
 8003202:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3020 	ldrb.w	r3, [r3, #32]
 800320a:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8003214:	7ffb      	ldrb	r3, [r7, #31]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d003      	beq.n	8003222 <HAL_CAN_AddTxMessage+0x2c>
 800321a:	7ffb      	ldrb	r3, [r7, #31]
 800321c:	2b02      	cmp	r3, #2
 800321e:	f040 80b4 	bne.w	800338a <HAL_CAN_AddTxMessage+0x194>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10a      	bne.n	8003242 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003232:	2b00      	cmp	r3, #0
 8003234:	d105      	bne.n	8003242 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 809c 	beq.w	800337a <HAL_CAN_AddTxMessage+0x184>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	0e1b      	lsrs	r3, r3, #24
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d907      	bls.n	8003262 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003256:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e09a      	b.n	8003398 <HAL_CAN_AddTxMessage+0x1a2>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003262:	2201      	movs	r2, #1
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	409a      	lsls	r2, r3
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10d      	bne.n	8003290 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6819      	ldr	r1, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003282:	431a      	orrs	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3318      	adds	r3, #24
 8003288:	011b      	lsls	r3, r3, #4
 800328a:	440b      	add	r3, r1
 800328c:	601a      	str	r2, [r3, #0]
 800328e:	e00f      	b.n	80032b0 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800329e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	68db      	ldr	r3, [r3, #12]
                                                           pHeader->IDE |
 80032a4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	3318      	adds	r3, #24
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	440b      	add	r3, r1
 80032ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6819      	ldr	r1, [r3, #0]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	3318      	adds	r3, #24
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	440b      	add	r3, r1
 80032c0:	3304      	adds	r3, #4
 80032c2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	7d1b      	ldrb	r3, [r3, #20]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d111      	bne.n	80032f0 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3318      	adds	r3, #24
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4413      	add	r3, r2
 80032dc:	3304      	adds	r3, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3318      	adds	r3, #24
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	440b      	add	r3, r1
 80032ec:	3304      	adds	r3, #4
 80032ee:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	3307      	adds	r3, #7
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	061a      	lsls	r2, r3, #24
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3306      	adds	r3, #6
 8003300:	781b      	ldrb	r3, [r3, #0]
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	3305      	adds	r3, #5
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	4313      	orrs	r3, r2
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	3204      	adds	r2, #4
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	431a      	orrs	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	440b      	add	r3, r1
 800331e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003322:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3303      	adds	r3, #3
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	061a      	lsls	r2, r3, #24
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3302      	adds	r3, #2
 8003334:	781b      	ldrb	r3, [r3, #0]
 8003336:	041b      	lsls	r3, r3, #16
 8003338:	431a      	orrs	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3301      	adds	r3, #1
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	021b      	lsls	r3, r3, #8
 8003342:	4313      	orrs	r3, r2
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	7812      	ldrb	r2, [r2, #0]
 8003348:	431a      	orrs	r2, r3
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	440b      	add	r3, r1
 8003350:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003354:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6819      	ldr	r1, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3318      	adds	r3, #24
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	4413      	add	r3, r2
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f043 0201 	orr.w	r2, r3, #1
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3318      	adds	r3, #24
 8003370:	011b      	lsls	r3, r3, #4
 8003372:	440b      	add	r3, r1
 8003374:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e00e      	b.n	8003398 <HAL_CAN_AddTxMessage+0x1a2>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e006      	b.n	8003398 <HAL_CAN_AddTxMessage+0x1a2>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
  }
}
 8003398:	4618      	mov	r0, r3
 800339a:	3724      	adds	r7, #36	; 0x24
 800339c:	46bd      	mov	sp, r7
 800339e:	bc80      	pop	{r7}
 80033a0:	4770      	bx	lr

080033a2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80033a2:	b480      	push	{r7}
 80033a4:	b087      	sub	sp, #28
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80033b8:	7dfb      	ldrb	r3, [r7, #23]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d003      	beq.n	80033c6 <HAL_CAN_GetRxMessage+0x24>
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f040 80f3 	bne.w	80035ac <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10e      	bne.n	80033ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0303 	and.w	r3, r3, #3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e0e7      	b.n	80035ba <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	f003 0303 	and.w	r3, r3, #3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d107      	bne.n	8003408 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e0d8      	b.n	80035ba <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	331b      	adds	r3, #27
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	4413      	add	r3, r2
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0204 	and.w	r2, r3, #4
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	331b      	adds	r3, #27
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	4413      	add	r3, r2
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0d5b      	lsrs	r3, r3, #21
 8003436:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	e00b      	b.n	8003458 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	331b      	adds	r3, #27
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	4413      	add	r3, r2
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	08db      	lsrs	r3, r3, #3
 8003450:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	331b      	adds	r3, #27
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	4413      	add	r3, r2
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0202 	and.w	r2, r3, #2
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	331b      	adds	r3, #27
 8003476:	011b      	lsls	r3, r3, #4
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 020f 	and.w	r2, r3, #15
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	331b      	adds	r3, #27
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	4413      	add	r3, r2
 8003492:	3304      	adds	r3, #4
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	0a1b      	lsrs	r3, r3, #8
 8003498:	b2da      	uxtb	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	331b      	adds	r3, #27
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	4413      	add	r3, r2
 80034aa:	3304      	adds	r3, #4
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	0c1b      	lsrs	r3, r3, #16
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	4413      	add	r3, r2
 80034c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	3301      	adds	r3, #1
 80034d0:	68fa      	ldr	r2, [r7, #12]
 80034d2:	6811      	ldr	r1, [r2, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	440a      	add	r2, r1
 80034da:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	0a12      	lsrs	r2, r2, #8
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	3302      	adds	r3, #2
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	6811      	ldr	r1, [r2, #0]
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	440a      	add	r2, r1
 80034f4:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 80034f8:	6812      	ldr	r2, [r2, #0]
 80034fa:	0c12      	lsrs	r2, r2, #16
 80034fc:	b2d2      	uxtb	r2, r2
 80034fe:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	3303      	adds	r3, #3
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	6811      	ldr	r1, [r2, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	0112      	lsls	r2, r2, #4
 800350c:	440a      	add	r2, r1
 800350e:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8003512:	6812      	ldr	r2, [r2, #0]
 8003514:	0e12      	lsrs	r2, r2, #24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	3304      	adds	r3, #4
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	6811      	ldr	r1, [r2, #0]
 8003522:	68ba      	ldr	r2, [r7, #8]
 8003524:	0112      	lsls	r2, r2, #4
 8003526:	440a      	add	r2, r1
 8003528:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 800352c:	6812      	ldr	r2, [r2, #0]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	3305      	adds	r3, #5
 8003536:	68fa      	ldr	r2, [r7, #12]
 8003538:	6811      	ldr	r1, [r2, #0]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	0112      	lsls	r2, r2, #4
 800353e:	440a      	add	r2, r1
 8003540:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8003544:	6812      	ldr	r2, [r2, #0]
 8003546:	0a12      	lsrs	r2, r2, #8
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	3306      	adds	r3, #6
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	6811      	ldr	r1, [r2, #0]
 8003554:	68ba      	ldr	r2, [r7, #8]
 8003556:	0112      	lsls	r2, r2, #4
 8003558:	440a      	add	r2, r1
 800355a:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	0c12      	lsrs	r2, r2, #16
 8003562:	b2d2      	uxtb	r2, r2
 8003564:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	3307      	adds	r3, #7
 800356a:	68fa      	ldr	r2, [r7, #12]
 800356c:	6811      	ldr	r1, [r2, #0]
 800356e:	68ba      	ldr	r2, [r7, #8]
 8003570:	0112      	lsls	r2, r2, #4
 8003572:	440a      	add	r2, r1
 8003574:	f502 72de 	add.w	r2, r2, #444	; 0x1bc
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	0e12      	lsrs	r2, r2, #24
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	68d2      	ldr	r2, [r2, #12]
 8003590:	f042 0220 	orr.w	r2, r2, #32
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	e007      	b.n	80035a8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	6912      	ldr	r2, [r2, #16]
 80035a2:	f042 0220 	orr.w	r2, r2, #32
 80035a6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e006      	b.n	80035ba <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
  }
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035d4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d002      	beq.n	80035e2 <HAL_CAN_ActivateNotification+0x1e>
 80035dc:	7bfb      	ldrb	r3, [r7, #15]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d109      	bne.n	80035f6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6812      	ldr	r2, [r2, #0]
 80035ea:	6951      	ldr	r1, [r2, #20]
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e006      	b.n	8003604 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	3714      	adds	r7, #20
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b08a      	sub	sp, #40	; 0x28
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d07c      	beq.n	800374e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d023      	beq.n	80036a6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2201      	movs	r2, #1
 8003664:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d003      	beq.n	8003678 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f97d 	bl	8003970 <HAL_CAN_TxMailbox0CompleteCallback>
 8003676:	e016      	b.n	80036a6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003684:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
 800368a:	e00c      	b.n	80036a6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
 800369e:	e002      	b.n	80036a6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f980 	bl	80039a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d024      	beq.n	80036fa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f95c 	bl	8003982 <HAL_CAN_TxMailbox1CompleteCallback>
 80036ca:	e016      	b.n	80036fa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d004      	beq.n	80036e0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80036d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036dc:	627b      	str	r3, [r7, #36]	; 0x24
 80036de:	e00c      	b.n	80036fa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d004      	beq.n	80036f4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
 80036f2:	e002      	b.n	80036fa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f95f 	bl	80039b8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80036fa:	69bb      	ldr	r3, [r7, #24]
 80036fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d024      	beq.n	800374e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800370c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f93b 	bl	8003994 <HAL_CAN_TxMailbox2CompleteCallback>
 800371e:	e016      	b.n	800374e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d004      	beq.n	8003734 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
 8003732:	e00c      	b.n	800374e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
 8003746:	e002      	b.n	800374e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f93e 	bl	80039ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800374e:	6a3b      	ldr	r3, [r7, #32]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00c      	beq.n	8003772 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f003 0310 	and.w	r3, r3, #16
 800375e:	2b00      	cmp	r3, #0
 8003760:	d007      	beq.n	8003772 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003768:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2210      	movs	r2, #16
 8003770:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00b      	beq.n	8003794 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2208      	movs	r2, #8
 800378c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f92d 	bl	80039ee <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d009      	beq.n	80037b2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f915 	bl	80039dc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00c      	beq.n	80037d6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80037c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	2210      	movs	r2, #16
 80037d4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f003 0320 	and.w	r3, r3, #32
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00b      	beq.n	80037f8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2208      	movs	r2, #8
 80037f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f90d 	bl	8003a12 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	f003 0310 	and.w	r3, r3, #16
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	691b      	ldr	r3, [r3, #16]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b00      	cmp	r3, #0
 800380e:	d002      	beq.n	8003816 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f8f5 	bl	8003a00 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	2b00      	cmp	r3, #0
 8003828:	d006      	beq.n	8003838 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2210      	movs	r2, #16
 8003830:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f8f6 	bl	8003a24 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00b      	beq.n	800385a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2208      	movs	r2, #8
 8003852:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 f8ee 	bl	8003a36 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800385a:	6a3b      	ldr	r3, [r7, #32]
 800385c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d075      	beq.n	8003950 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f003 0304 	and.w	r3, r3, #4
 800386a:	2b00      	cmp	r3, #0
 800386c:	d06c      	beq.n	8003948 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d008      	beq.n	800388a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	f043 0301 	orr.w	r3, r3, #1
 8003888:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003890:	2b00      	cmp	r3, #0
 8003892:	d008      	beq.n	80038a6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800389e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a0:	f043 0302 	orr.w	r3, r3, #2
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d008      	beq.n	80038c2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d03d      	beq.n	8003948 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d038      	beq.n	8003948 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038dc:	2b30      	cmp	r3, #48	; 0x30
 80038de:	d017      	beq.n	8003910 <HAL_CAN_IRQHandler+0x302>
 80038e0:	2b30      	cmp	r3, #48	; 0x30
 80038e2:	d804      	bhi.n	80038ee <HAL_CAN_IRQHandler+0x2e0>
 80038e4:	2b10      	cmp	r3, #16
 80038e6:	d009      	beq.n	80038fc <HAL_CAN_IRQHandler+0x2ee>
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d00c      	beq.n	8003906 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80038ec:	e024      	b.n	8003938 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80038ee:	2b50      	cmp	r3, #80	; 0x50
 80038f0:	d018      	beq.n	8003924 <HAL_CAN_IRQHandler+0x316>
 80038f2:	2b60      	cmp	r3, #96	; 0x60
 80038f4:	d01b      	beq.n	800392e <HAL_CAN_IRQHandler+0x320>
 80038f6:	2b40      	cmp	r3, #64	; 0x40
 80038f8:	d00f      	beq.n	800391a <HAL_CAN_IRQHandler+0x30c>
            break;
 80038fa:	e01d      	b.n	8003938 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	f043 0308 	orr.w	r3, r3, #8
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003904:	e018      	b.n	8003938 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	f043 0310 	orr.w	r3, r3, #16
 800390c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800390e:	e013      	b.n	8003938 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	f043 0320 	orr.w	r3, r3, #32
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003918:	e00e      	b.n	8003938 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003922:	e009      	b.n	8003938 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800392c:	e004      	b.n	8003938 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003934:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003936:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	6992      	ldr	r2, [r2, #24]
 8003942:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003946:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2204      	movs	r2, #4
 800394e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800395a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f000 f870 	bl	8003a48 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003968:	bf00      	nop
 800396a:	3728      	adds	r7, #40	; 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003978:	bf00      	nop
 800397a:	370c      	adds	r7, #12
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr

08003982 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr

08003994 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bc80      	pop	{r7}
 80039a4:	4770      	bx	lr

080039a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr

080039b8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80039ca:	b480      	push	{r7}
 80039cc:	b083      	sub	sp, #12
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80039d2:	bf00      	nop
 80039d4:	370c      	adds	r7, #12
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bc80      	pop	{r7}
 80039da:	4770      	bx	lr

080039dc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bc80      	pop	{r7}
 80039ec:	4770      	bx	lr

080039ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr

08003a00 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bc80      	pop	{r7}
 8003a10:	4770      	bx	lr

08003a12 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003a12:	b480      	push	{r7}
 8003a14:	b083      	sub	sp, #12
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003a1a:	bf00      	nop
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bc80      	pop	{r7}
 8003a22:	4770      	bx	lr

08003a24 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bc80      	pop	{r7}
 8003a34:	4770      	bx	lr

08003a36 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b083      	sub	sp, #12
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bc80      	pop	{r7}
 8003a58:	4770      	bx	lr
	...

08003a5c <__NVIC_SetPriorityGrouping>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a72:	68ba      	ldr	r2, [r7, #8]
 8003a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a8e:	4a04      	ldr	r2, [pc, #16]	; (8003aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	60d3      	str	r3, [r2, #12]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	e000ed00 	.word	0xe000ed00

08003aa4 <__NVIC_GetPriorityGrouping>:
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <__NVIC_GetPriorityGrouping+0x18>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	0a1b      	lsrs	r3, r3, #8
 8003aae:	f003 0307 	and.w	r3, r3, #7
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bc80      	pop	{r7}
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	e000ed00 	.word	0xe000ed00

08003ac0 <__NVIC_EnableIRQ>:
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	db0b      	blt.n	8003aea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad2:	4908      	ldr	r1, [pc, #32]	; (8003af4 <__NVIC_EnableIRQ+0x34>)
 8003ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	79fa      	ldrb	r2, [r7, #7]
 8003adc:	f002 021f 	and.w	r2, r2, #31
 8003ae0:	2001      	movs	r0, #1
 8003ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8003ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003aea:	bf00      	nop
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bc80      	pop	{r7}
 8003af2:	4770      	bx	lr
 8003af4:	e000e100 	.word	0xe000e100

08003af8 <__NVIC_SetPriority>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	4603      	mov	r3, r0
 8003b00:	6039      	str	r1, [r7, #0]
 8003b02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	db0a      	blt.n	8003b22 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b0c:	490d      	ldr	r1, [pc, #52]	; (8003b44 <__NVIC_SetPriority+0x4c>)
 8003b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	b2d2      	uxtb	r2, r2
 8003b16:	0112      	lsls	r2, r2, #4
 8003b18:	b2d2      	uxtb	r2, r2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b20:	e00a      	b.n	8003b38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b22:	4909      	ldr	r1, [pc, #36]	; (8003b48 <__NVIC_SetPriority+0x50>)
 8003b24:	79fb      	ldrb	r3, [r7, #7]
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	3b04      	subs	r3, #4
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	b2d2      	uxtb	r2, r2
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	440b      	add	r3, r1
 8003b36:	761a      	strb	r2, [r3, #24]
}
 8003b38:	bf00      	nop
 8003b3a:	370c      	adds	r7, #12
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bc80      	pop	{r7}
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	e000e100 	.word	0xe000e100
 8003b48:	e000ed00 	.word	0xe000ed00

08003b4c <NVIC_EncodePriority>:
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b089      	sub	sp, #36	; 0x24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0307 	and.w	r3, r3, #7
 8003b5e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f1c3 0307 	rsb	r3, r3, #7
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	bf28      	it	cs
 8003b6a:	2304      	movcs	r3, #4
 8003b6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	3304      	adds	r3, #4
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d902      	bls.n	8003b7c <NVIC_EncodePriority+0x30>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3b03      	subs	r3, #3
 8003b7a:	e000      	b.n	8003b7e <NVIC_EncodePriority+0x32>
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b80:	2201      	movs	r2, #1
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	1e5a      	subs	r2, r3, #1
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	401a      	ands	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b92:	2101      	movs	r1, #1
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	fa01 f303 	lsl.w	r3, r1, r3
 8003b9a:	1e59      	subs	r1, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ba0:	4313      	orrs	r3, r2
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3724      	adds	r7, #36	; 0x24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr

08003bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bbc:	d301      	bcc.n	8003bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00f      	b.n	8003be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bc2:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <SysTick_Config+0x40>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003bca:	210f      	movs	r1, #15
 8003bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd0:	f7ff ff92 	bl	8003af8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <SysTick_Config+0x40>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003bda:	4b04      	ldr	r3, [pc, #16]	; (8003bec <SysTick_Config+0x40>)
 8003bdc:	2207      	movs	r2, #7
 8003bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	e000e010 	.word	0xe000e010

08003bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f7ff ff2f 	bl	8003a5c <__NVIC_SetPriorityGrouping>
}
 8003bfe:	bf00      	nop
 8003c00:	3708      	adds	r7, #8
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
 8003c12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003c18:	f7ff ff44 	bl	8003aa4 <__NVIC_GetPriorityGrouping>
 8003c1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	6978      	ldr	r0, [r7, #20]
 8003c24:	f7ff ff92 	bl	8003b4c <NVIC_EncodePriority>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c2e:	4611      	mov	r1, r2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff ff61 	bl	8003af8 <__NVIC_SetPriority>
}
 8003c36:	bf00      	nop
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	4603      	mov	r3, r0
 8003c46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7ff ff37 	bl	8003ac0 <__NVIC_EnableIRQ>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b082      	sub	sp, #8
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f7ff ffa2 	bl	8003bac <SysTick_Config>
 8003c68:	4603      	mov	r3, r0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e043      	b.n	8003d12 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	461a      	mov	r2, r3
 8003c90:	4b22      	ldr	r3, [pc, #136]	; (8003d1c <HAL_DMA_Init+0xa8>)
 8003c92:	4413      	add	r3, r2
 8003c94:	4a22      	ldr	r2, [pc, #136]	; (8003d20 <HAL_DMA_Init+0xac>)
 8003c96:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9a:	091b      	lsrs	r3, r3, #4
 8003c9c:	009a      	lsls	r2, r3, #2
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a1f      	ldr	r2, [pc, #124]	; (8003d24 <HAL_DMA_Init+0xb0>)
 8003ca6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003cbe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003cc2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ce4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3714      	adds	r7, #20
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	bffdfff8 	.word	0xbffdfff8
 8003d20:	cccccccd 	.word	0xcccccccd
 8003d24:	40020000 	.word	0x40020000

08003d28 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_DMA_Start_IT+0x20>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e04a      	b.n	8003dde <HAL_DMA_Start_IT+0xb6>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d13a      	bne.n	8003dd0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	f022 0201 	bic.w	r2, r2, #1
 8003d76:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f944 	bl	800400c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d008      	beq.n	8003d9e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	6812      	ldr	r2, [r2, #0]
 8003d94:	6812      	ldr	r2, [r2, #0]
 8003d96:	f042 020e 	orr.w	r2, r2, #14
 8003d9a:	601a      	str	r2, [r3, #0]
 8003d9c:	e00f      	b.n	8003dbe <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	6812      	ldr	r2, [r2, #0]
 8003da8:	f022 0204 	bic.w	r2, r2, #4
 8003dac:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	6812      	ldr	r2, [r2, #0]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	f042 020a 	orr.w	r2, r2, #10
 8003dbc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
 8003dce:	e005      	b.n	8003ddc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
 8003dda:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3718      	adds	r7, #24
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}
	...

08003de8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2204      	movs	r2, #4
 8003e06:	409a      	lsls	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d055      	beq.n	8003ebc <HAL_DMA_IRQHandler+0xd4>
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f003 0304 	and.w	r3, r3, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d050      	beq.n	8003ebc <HAL_DMA_IRQHandler+0xd4>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0320 	and.w	r3, r3, #32
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d107      	bne.n	8003e38 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	6812      	ldr	r2, [r2, #0]
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	f022 0204 	bic.w	r2, r2, #4
 8003e36:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003e38:	4a6d      	ldr	r2, [pc, #436]	; (8003ff0 <HAL_DMA_IRQHandler+0x208>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4619      	mov	r1, r3
 8003e40:	4b6c      	ldr	r3, [pc, #432]	; (8003ff4 <HAL_DMA_IRQHandler+0x20c>)
 8003e42:	4299      	cmp	r1, r3
 8003e44:	d02e      	beq.n	8003ea4 <HAL_DMA_IRQHandler+0xbc>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_DMA_IRQHandler+0x210>)
 8003e4e:	4299      	cmp	r1, r3
 8003e50:	d026      	beq.n	8003ea0 <HAL_DMA_IRQHandler+0xb8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4619      	mov	r1, r3
 8003e58:	4b68      	ldr	r3, [pc, #416]	; (8003ffc <HAL_DMA_IRQHandler+0x214>)
 8003e5a:	4299      	cmp	r1, r3
 8003e5c:	d01d      	beq.n	8003e9a <HAL_DMA_IRQHandler+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4619      	mov	r1, r3
 8003e64:	4b66      	ldr	r3, [pc, #408]	; (8004000 <HAL_DMA_IRQHandler+0x218>)
 8003e66:	4299      	cmp	r1, r3
 8003e68:	d014      	beq.n	8003e94 <HAL_DMA_IRQHandler+0xac>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4b64      	ldr	r3, [pc, #400]	; (8004004 <HAL_DMA_IRQHandler+0x21c>)
 8003e72:	4299      	cmp	r1, r3
 8003e74:	d00b      	beq.n	8003e8e <HAL_DMA_IRQHandler+0xa6>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4b62      	ldr	r3, [pc, #392]	; (8004008 <HAL_DMA_IRQHandler+0x220>)
 8003e7e:	4299      	cmp	r1, r3
 8003e80:	d102      	bne.n	8003e88 <HAL_DMA_IRQHandler+0xa0>
 8003e82:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003e86:	e00e      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xbe>
 8003e88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003e8c:	e00b      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xbe>
 8003e8e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e92:	e008      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xbe>
 8003e94:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e98:	e005      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xbe>
 8003e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e9e:	e002      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xbe>
 8003ea0:	2340      	movs	r3, #64	; 0x40
 8003ea2:	e000      	b.n	8003ea6 <HAL_DMA_IRQHandler+0xbe>
 8003ea4:	2304      	movs	r3, #4
 8003ea6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	f000 809a 	beq.w	8003fe6 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003eba:	e094      	b.n	8003fe6 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d05c      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x19e>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d057      	beq.n	8003f86 <HAL_DMA_IRQHandler+0x19e>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10b      	bne.n	8003efc <HAL_DMA_IRQHandler+0x114>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	6812      	ldr	r2, [r2, #0]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	f022 020a 	bic.w	r2, r2, #10
 8003ef2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003efc:	4a3c      	ldr	r2, [pc, #240]	; (8003ff0 <HAL_DMA_IRQHandler+0x208>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4619      	mov	r1, r3
 8003f04:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <HAL_DMA_IRQHandler+0x20c>)
 8003f06:	4299      	cmp	r1, r3
 8003f08:	d02e      	beq.n	8003f68 <HAL_DMA_IRQHandler+0x180>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <HAL_DMA_IRQHandler+0x210>)
 8003f12:	4299      	cmp	r1, r3
 8003f14:	d026      	beq.n	8003f64 <HAL_DMA_IRQHandler+0x17c>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	4b37      	ldr	r3, [pc, #220]	; (8003ffc <HAL_DMA_IRQHandler+0x214>)
 8003f1e:	4299      	cmp	r1, r3
 8003f20:	d01d      	beq.n	8003f5e <HAL_DMA_IRQHandler+0x176>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4b35      	ldr	r3, [pc, #212]	; (8004000 <HAL_DMA_IRQHandler+0x218>)
 8003f2a:	4299      	cmp	r1, r3
 8003f2c:	d014      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x170>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4619      	mov	r1, r3
 8003f34:	4b33      	ldr	r3, [pc, #204]	; (8004004 <HAL_DMA_IRQHandler+0x21c>)
 8003f36:	4299      	cmp	r1, r3
 8003f38:	d00b      	beq.n	8003f52 <HAL_DMA_IRQHandler+0x16a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_DMA_IRQHandler+0x220>)
 8003f42:	4299      	cmp	r1, r3
 8003f44:	d102      	bne.n	8003f4c <HAL_DMA_IRQHandler+0x164>
 8003f46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f4a:	e00e      	b.n	8003f6a <HAL_DMA_IRQHandler+0x182>
 8003f4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f50:	e00b      	b.n	8003f6a <HAL_DMA_IRQHandler+0x182>
 8003f52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f56:	e008      	b.n	8003f6a <HAL_DMA_IRQHandler+0x182>
 8003f58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f5c:	e005      	b.n	8003f6a <HAL_DMA_IRQHandler+0x182>
 8003f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f62:	e002      	b.n	8003f6a <HAL_DMA_IRQHandler+0x182>
 8003f64:	2320      	movs	r3, #32
 8003f66:	e000      	b.n	8003f6a <HAL_DMA_IRQHandler+0x182>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d034      	beq.n	8003fe6 <HAL_DMA_IRQHandler+0x1fe>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003f84:	e02f      	b.n	8003fe6 <HAL_DMA_IRQHandler+0x1fe>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	2208      	movs	r2, #8
 8003f8c:	409a      	lsls	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4013      	ands	r3, r2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d028      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x200>
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d023      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x200>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	687a      	ldr	r2, [r7, #4]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	6812      	ldr	r2, [r2, #0]
 8003faa:	f022 020e 	bic.w	r2, r2, #14
 8003fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d004      	beq.n	8003fe8 <HAL_DMA_IRQHandler+0x200>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	4798      	blx	r3
    }
  }
  return;
 8003fe6:	bf00      	nop
 8003fe8:	bf00      	nop
}
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40020000 	.word	0x40020000
 8003ff4:	40020008 	.word	0x40020008
 8003ff8:	4002001c 	.word	0x4002001c
 8003ffc:	40020030 	.word	0x40020030
 8004000:	40020044 	.word	0x40020044
 8004004:	40020058 	.word	0x40020058
 8004008:	4002006c 	.word	0x4002006c

0800400c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	60f8      	str	r0, [r7, #12]
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	607a      	str	r2, [r7, #4]
 8004018:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004022:	2101      	movs	r1, #1
 8004024:	fa01 f202 	lsl.w	r2, r1, r2
 8004028:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	2b10      	cmp	r3, #16
 8004038:	d108      	bne.n	800404c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800404a:	e007      	b.n	800405c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68ba      	ldr	r2, [r7, #8]
 8004052:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	60da      	str	r2, [r3, #12]
}
 800405c:	bf00      	nop
 800405e:	3714      	adds	r7, #20
 8004060:	46bd      	mov	sp, r7
 8004062:	bc80      	pop	{r7}
 8004064:	4770      	bx	lr
	...

08004068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004068:	b480      	push	{r7}
 800406a:	b08b      	sub	sp, #44	; 0x2c
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004072:	2300      	movs	r3, #0
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004076:	2300      	movs	r3, #0
 8004078:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800407a:	e127      	b.n	80042cc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800407c:	2201      	movs	r2, #1
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	fa02 f303 	lsl.w	r3, r2, r3
 8004084:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	4013      	ands	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	429a      	cmp	r2, r3
 8004096:	f040 8116 	bne.w	80042c6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2b12      	cmp	r3, #18
 80040a0:	d034      	beq.n	800410c <HAL_GPIO_Init+0xa4>
 80040a2:	2b12      	cmp	r3, #18
 80040a4:	d80d      	bhi.n	80040c2 <HAL_GPIO_Init+0x5a>
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d02b      	beq.n	8004102 <HAL_GPIO_Init+0x9a>
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d804      	bhi.n	80040b8 <HAL_GPIO_Init+0x50>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d031      	beq.n	8004116 <HAL_GPIO_Init+0xae>
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d01c      	beq.n	80040f0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80040b6:	e048      	b.n	800414a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80040b8:	2b03      	cmp	r3, #3
 80040ba:	d043      	beq.n	8004144 <HAL_GPIO_Init+0xdc>
 80040bc:	2b11      	cmp	r3, #17
 80040be:	d01b      	beq.n	80040f8 <HAL_GPIO_Init+0x90>
          break;
 80040c0:	e043      	b.n	800414a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80040c2:	4a89      	ldr	r2, [pc, #548]	; (80042e8 <HAL_GPIO_Init+0x280>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d026      	beq.n	8004116 <HAL_GPIO_Init+0xae>
 80040c8:	4a87      	ldr	r2, [pc, #540]	; (80042e8 <HAL_GPIO_Init+0x280>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d806      	bhi.n	80040dc <HAL_GPIO_Init+0x74>
 80040ce:	4a87      	ldr	r2, [pc, #540]	; (80042ec <HAL_GPIO_Init+0x284>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d020      	beq.n	8004116 <HAL_GPIO_Init+0xae>
 80040d4:	4a86      	ldr	r2, [pc, #536]	; (80042f0 <HAL_GPIO_Init+0x288>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01d      	beq.n	8004116 <HAL_GPIO_Init+0xae>
          break;
 80040da:	e036      	b.n	800414a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80040dc:	4a85      	ldr	r2, [pc, #532]	; (80042f4 <HAL_GPIO_Init+0x28c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d019      	beq.n	8004116 <HAL_GPIO_Init+0xae>
 80040e2:	4a85      	ldr	r2, [pc, #532]	; (80042f8 <HAL_GPIO_Init+0x290>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d016      	beq.n	8004116 <HAL_GPIO_Init+0xae>
 80040e8:	4a84      	ldr	r2, [pc, #528]	; (80042fc <HAL_GPIO_Init+0x294>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d013      	beq.n	8004116 <HAL_GPIO_Init+0xae>
          break;
 80040ee:	e02c      	b.n	800414a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	623b      	str	r3, [r7, #32]
          break;
 80040f6:	e028      	b.n	800414a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	3304      	adds	r3, #4
 80040fe:	623b      	str	r3, [r7, #32]
          break;
 8004100:	e023      	b.n	800414a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	3308      	adds	r3, #8
 8004108:	623b      	str	r3, [r7, #32]
          break;
 800410a:	e01e      	b.n	800414a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	330c      	adds	r3, #12
 8004112:	623b      	str	r3, [r7, #32]
          break;
 8004114:	e019      	b.n	800414a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d102      	bne.n	8004124 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800411e:	2304      	movs	r3, #4
 8004120:	623b      	str	r3, [r7, #32]
          break;
 8004122:	e012      	b.n	800414a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2b01      	cmp	r3, #1
 800412a:	d105      	bne.n	8004138 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800412c:	2308      	movs	r3, #8
 800412e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	69fa      	ldr	r2, [r7, #28]
 8004134:	611a      	str	r2, [r3, #16]
          break;
 8004136:	e008      	b.n	800414a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004138:	2308      	movs	r3, #8
 800413a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	615a      	str	r2, [r3, #20]
          break;
 8004142:	e002      	b.n	800414a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004144:	2300      	movs	r3, #0
 8004146:	623b      	str	r3, [r7, #32]
          break;
 8004148:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2bff      	cmp	r3, #255	; 0xff
 800414e:	d801      	bhi.n	8004154 <HAL_GPIO_Init+0xec>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	e001      	b.n	8004158 <HAL_GPIO_Init+0xf0>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	3304      	adds	r3, #4
 8004158:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	2bff      	cmp	r3, #255	; 0xff
 800415e:	d802      	bhi.n	8004166 <HAL_GPIO_Init+0xfe>
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	e002      	b.n	800416c <HAL_GPIO_Init+0x104>
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	3b08      	subs	r3, #8
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	210f      	movs	r1, #15
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	fa01 f303 	lsl.w	r3, r1, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	401a      	ands	r2, r3
 800417e:	6a39      	ldr	r1, [r7, #32]
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	fa01 f303 	lsl.w	r3, r1, r3
 8004186:	431a      	orrs	r2, r3
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8096 	beq.w	80042c6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800419a:	4a59      	ldr	r2, [pc, #356]	; (8004300 <HAL_GPIO_Init+0x298>)
 800419c:	4b58      	ldr	r3, [pc, #352]	; (8004300 <HAL_GPIO_Init+0x298>)
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6193      	str	r3, [r2, #24]
 80041a6:	4b56      	ldr	r3, [pc, #344]	; (8004300 <HAL_GPIO_Init+0x298>)
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	60bb      	str	r3, [r7, #8]
 80041b0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80041b2:	4a54      	ldr	r2, [pc, #336]	; (8004304 <HAL_GPIO_Init+0x29c>)
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	089b      	lsrs	r3, r3, #2
 80041b8:	3302      	adds	r3, #2
 80041ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041be:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	f003 0303 	and.w	r3, r3, #3
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	220f      	movs	r2, #15
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43db      	mvns	r3, r3
 80041d0:	68fa      	ldr	r2, [r7, #12]
 80041d2:	4013      	ands	r3, r2
 80041d4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a4b      	ldr	r2, [pc, #300]	; (8004308 <HAL_GPIO_Init+0x2a0>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_GPIO_Init+0x19e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a4a      	ldr	r2, [pc, #296]	; (800430c <HAL_GPIO_Init+0x2a4>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d00d      	beq.n	8004202 <HAL_GPIO_Init+0x19a>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a49      	ldr	r2, [pc, #292]	; (8004310 <HAL_GPIO_Init+0x2a8>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d007      	beq.n	80041fe <HAL_GPIO_Init+0x196>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	4a48      	ldr	r2, [pc, #288]	; (8004314 <HAL_GPIO_Init+0x2ac>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d101      	bne.n	80041fa <HAL_GPIO_Init+0x192>
 80041f6:	2303      	movs	r3, #3
 80041f8:	e006      	b.n	8004208 <HAL_GPIO_Init+0x1a0>
 80041fa:	2304      	movs	r3, #4
 80041fc:	e004      	b.n	8004208 <HAL_GPIO_Init+0x1a0>
 80041fe:	2302      	movs	r3, #2
 8004200:	e002      	b.n	8004208 <HAL_GPIO_Init+0x1a0>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <HAL_GPIO_Init+0x1a0>
 8004206:	2300      	movs	r3, #0
 8004208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800420a:	f002 0203 	and.w	r2, r2, #3
 800420e:	0092      	lsls	r2, r2, #2
 8004210:	4093      	lsls	r3, r2
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004218:	493a      	ldr	r1, [pc, #232]	; (8004304 <HAL_GPIO_Init+0x29c>)
 800421a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421c:	089b      	lsrs	r3, r3, #2
 800421e:	3302      	adds	r3, #2
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004232:	4939      	ldr	r1, [pc, #228]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 8004234:	4b38      	ldr	r3, [pc, #224]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	4313      	orrs	r3, r2
 800423c:	600b      	str	r3, [r1, #0]
 800423e:	e006      	b.n	800424e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004240:	4935      	ldr	r1, [pc, #212]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 8004242:	4b35      	ldr	r3, [pc, #212]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	43db      	mvns	r3, r3
 800424a:	4013      	ands	r3, r2
 800424c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d006      	beq.n	8004268 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800425a:	492f      	ldr	r1, [pc, #188]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 800425c:	4b2e      	ldr	r3, [pc, #184]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 800425e:	685a      	ldr	r2, [r3, #4]
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	4313      	orrs	r3, r2
 8004264:	604b      	str	r3, [r1, #4]
 8004266:	e006      	b.n	8004276 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004268:	492b      	ldr	r1, [pc, #172]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 800426a:	4b2b      	ldr	r3, [pc, #172]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	43db      	mvns	r3, r3
 8004272:	4013      	ands	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d006      	beq.n	8004290 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004282:	4925      	ldr	r1, [pc, #148]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	4313      	orrs	r3, r2
 800428c:	608b      	str	r3, [r1, #8]
 800428e:	e006      	b.n	800429e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004290:	4921      	ldr	r1, [pc, #132]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 8004292:	4b21      	ldr	r3, [pc, #132]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 8004294:	689a      	ldr	r2, [r3, #8]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	43db      	mvns	r3, r3
 800429a:	4013      	ands	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d006      	beq.n	80042b8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80042aa:	491b      	ldr	r1, [pc, #108]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 80042ac:	4b1a      	ldr	r3, [pc, #104]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 80042ae:	68da      	ldr	r2, [r3, #12]
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60cb      	str	r3, [r1, #12]
 80042b6:	e006      	b.n	80042c6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80042b8:	4917      	ldr	r1, [pc, #92]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 80042ba:	4b17      	ldr	r3, [pc, #92]	; (8004318 <HAL_GPIO_Init+0x2b0>)
 80042bc:	68da      	ldr	r2, [r3, #12]
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	43db      	mvns	r3, r3
 80042c2:	4013      	ands	r3, r2
 80042c4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80042c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c8:	3301      	adds	r3, #1
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042d2:	fa22 f303 	lsr.w	r3, r2, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f47f aed0 	bne.w	800407c <HAL_GPIO_Init+0x14>
  }
}
 80042dc:	bf00      	nop
 80042de:	372c      	adds	r7, #44	; 0x2c
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bc80      	pop	{r7}
 80042e4:	4770      	bx	lr
 80042e6:	bf00      	nop
 80042e8:	10210000 	.word	0x10210000
 80042ec:	10110000 	.word	0x10110000
 80042f0:	10120000 	.word	0x10120000
 80042f4:	10310000 	.word	0x10310000
 80042f8:	10320000 	.word	0x10320000
 80042fc:	10220000 	.word	0x10220000
 8004300:	40021000 	.word	0x40021000
 8004304:	40010000 	.word	0x40010000
 8004308:	40010800 	.word	0x40010800
 800430c:	40010c00 	.word	0x40010c00
 8004310:	40011000 	.word	0x40011000
 8004314:	40011400 	.word	0x40011400
 8004318:	40010400 	.word	0x40010400

0800431c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	689a      	ldr	r2, [r3, #8]
 800432c:	887b      	ldrh	r3, [r7, #2]
 800432e:	4013      	ands	r3, r2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d002      	beq.n	800433a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004334:	2301      	movs	r3, #1
 8004336:	73fb      	strb	r3, [r7, #15]
 8004338:	e001      	b.n	800433e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800433a:	2300      	movs	r3, #0
 800433c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800433e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	bc80      	pop	{r7}
 8004348:	4770      	bx	lr

0800434a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	460b      	mov	r3, r1
 8004354:	807b      	strh	r3, [r7, #2]
 8004356:	4613      	mov	r3, r2
 8004358:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800435a:	787b      	ldrb	r3, [r7, #1]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004360:	887a      	ldrh	r2, [r7, #2]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004366:	e003      	b.n	8004370 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004368:	887b      	ldrh	r3, [r7, #2]
 800436a:	041a      	lsls	r2, r3, #16
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	611a      	str	r2, [r3, #16]
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	bc80      	pop	{r7}
 8004378:	4770      	bx	lr
	...

0800437c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e26c      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	f000 8087 	beq.w	80044aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800439c:	4b92      	ldr	r3, [pc, #584]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f003 030c 	and.w	r3, r3, #12
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d00c      	beq.n	80043c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80043a8:	4b8f      	ldr	r3, [pc, #572]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d112      	bne.n	80043da <HAL_RCC_OscConfig+0x5e>
 80043b4:	4b8c      	ldr	r3, [pc, #560]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d10b      	bne.n	80043da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043c2:	4b89      	ldr	r3, [pc, #548]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d06c      	beq.n	80044a8 <HAL_RCC_OscConfig+0x12c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d168      	bne.n	80044a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e246      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043e2:	d106      	bne.n	80043f2 <HAL_RCC_OscConfig+0x76>
 80043e4:	4a80      	ldr	r2, [pc, #512]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043e6:	4b80      	ldr	r3, [pc, #512]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ee:	6013      	str	r3, [r2, #0]
 80043f0:	e02e      	b.n	8004450 <HAL_RCC_OscConfig+0xd4>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10c      	bne.n	8004414 <HAL_RCC_OscConfig+0x98>
 80043fa:	4a7b      	ldr	r2, [pc, #492]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	4b7a      	ldr	r3, [pc, #488]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	4a78      	ldr	r2, [pc, #480]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004408:	4b77      	ldr	r3, [pc, #476]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004410:	6013      	str	r3, [r2, #0]
 8004412:	e01d      	b.n	8004450 <HAL_RCC_OscConfig+0xd4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800441c:	d10c      	bne.n	8004438 <HAL_RCC_OscConfig+0xbc>
 800441e:	4a72      	ldr	r2, [pc, #456]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004420:	4b71      	ldr	r3, [pc, #452]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	4a6f      	ldr	r2, [pc, #444]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800442c:	4b6e      	ldr	r3, [pc, #440]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004434:	6013      	str	r3, [r2, #0]
 8004436:	e00b      	b.n	8004450 <HAL_RCC_OscConfig+0xd4>
 8004438:	4a6b      	ldr	r2, [pc, #428]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800443a:	4b6b      	ldr	r3, [pc, #428]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004442:	6013      	str	r3, [r2, #0]
 8004444:	4a68      	ldr	r2, [pc, #416]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004446:	4b68      	ldr	r3, [pc, #416]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800444e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d013      	beq.n	8004480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fe f8de 	bl	8002618 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004460:	f7fe f8da 	bl	8002618 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b64      	cmp	r3, #100	; 0x64
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e1fa      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	4b5d      	ldr	r3, [pc, #372]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d0f0      	beq.n	8004460 <HAL_RCC_OscConfig+0xe4>
 800447e:	e014      	b.n	80044aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004480:	f7fe f8ca 	bl	8002618 <HAL_GetTick>
 8004484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004486:	e008      	b.n	800449a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004488:	f7fe f8c6 	bl	8002618 <HAL_GetTick>
 800448c:	4602      	mov	r2, r0
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	2b64      	cmp	r3, #100	; 0x64
 8004494:	d901      	bls.n	800449a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004496:	2303      	movs	r3, #3
 8004498:	e1e6      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449a:	4b53      	ldr	r3, [pc, #332]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d1f0      	bne.n	8004488 <HAL_RCC_OscConfig+0x10c>
 80044a6:	e000      	b.n	80044aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d063      	beq.n	800457e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044b6:	4b4c      	ldr	r3, [pc, #304]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80044c2:	4b49      	ldr	r3, [pc, #292]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f003 030c 	and.w	r3, r3, #12
 80044ca:	2b08      	cmp	r3, #8
 80044cc:	d11c      	bne.n	8004508 <HAL_RCC_OscConfig+0x18c>
 80044ce:	4b46      	ldr	r3, [pc, #280]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d116      	bne.n	8004508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044da:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_RCC_OscConfig+0x176>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d001      	beq.n	80044f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e1ba      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044f2:	493d      	ldr	r1, [pc, #244]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044f4:	4b3c      	ldr	r3, [pc, #240]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4313      	orrs	r3, r2
 8004504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004506:	e03a      	b.n	800457e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d020      	beq.n	8004552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004510:	4b36      	ldr	r3, [pc, #216]	; (80045ec <HAL_RCC_OscConfig+0x270>)
 8004512:	2201      	movs	r2, #1
 8004514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004516:	f7fe f87f 	bl	8002618 <HAL_GetTick>
 800451a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451c:	e008      	b.n	8004530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451e:	f7fe f87b 	bl	8002618 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e19b      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004530:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0f0      	beq.n	800451e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800453c:	492a      	ldr	r1, [pc, #168]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 800453e:	4b2a      	ldr	r3, [pc, #168]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	00db      	lsls	r3, r3, #3
 800454c:	4313      	orrs	r3, r2
 800454e:	600b      	str	r3, [r1, #0]
 8004550:	e015      	b.n	800457e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004552:	4b26      	ldr	r3, [pc, #152]	; (80045ec <HAL_RCC_OscConfig+0x270>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004558:	f7fe f85e 	bl	8002618 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004560:	f7fe f85a 	bl	8002618 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e17a      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004572:	4b1d      	ldr	r3, [pc, #116]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d03a      	beq.n	8004600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d019      	beq.n	80045c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004592:	4b17      	ldr	r3, [pc, #92]	; (80045f0 <HAL_RCC_OscConfig+0x274>)
 8004594:	2201      	movs	r2, #1
 8004596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004598:	f7fe f83e 	bl	8002618 <HAL_GetTick>
 800459c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800459e:	e008      	b.n	80045b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a0:	f7fe f83a 	bl	8002618 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d901      	bls.n	80045b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e15a      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045b2:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <HAL_RCC_OscConfig+0x26c>)
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d0f0      	beq.n	80045a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80045be:	2001      	movs	r0, #1
 80045c0:	f000 faa8 	bl	8004b14 <RCC_Delay>
 80045c4:	e01c      	b.n	8004600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_RCC_OscConfig+0x274>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045cc:	f7fe f824 	bl	8002618 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d2:	e00f      	b.n	80045f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045d4:	f7fe f820 	bl	8002618 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d908      	bls.n	80045f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045e2:	2303      	movs	r3, #3
 80045e4:	e140      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
 80045ec:	42420000 	.word	0x42420000
 80045f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	4b9e      	ldr	r3, [pc, #632]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e9      	bne.n	80045d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80a6 	beq.w	800475a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b97      	ldr	r3, [pc, #604]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10d      	bne.n	800463a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	4a94      	ldr	r2, [pc, #592]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004620:	4b93      	ldr	r3, [pc, #588]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004628:	61d3      	str	r3, [r2, #28]
 800462a:	4b91      	ldr	r3, [pc, #580]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004632:	60bb      	str	r3, [r7, #8]
 8004634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463a:	4b8e      	ldr	r3, [pc, #568]	; (8004874 <HAL_RCC_OscConfig+0x4f8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d118      	bne.n	8004678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004646:	4a8b      	ldr	r2, [pc, #556]	; (8004874 <HAL_RCC_OscConfig+0x4f8>)
 8004648:	4b8a      	ldr	r3, [pc, #552]	; (8004874 <HAL_RCC_OscConfig+0x4f8>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004652:	f7fd ffe1 	bl	8002618 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465a:	f7fd ffdd 	bl	8002618 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b64      	cmp	r3, #100	; 0x64
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e0fd      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800466c:	4b81      	ldr	r3, [pc, #516]	; (8004874 <HAL_RCC_OscConfig+0x4f8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x312>
 8004680:	4a7b      	ldr	r2, [pc, #492]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004682:	4b7b      	ldr	r3, [pc, #492]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	f043 0301 	orr.w	r3, r3, #1
 800468a:	6213      	str	r3, [r2, #32]
 800468c:	e02d      	b.n	80046ea <HAL_RCC_OscConfig+0x36e>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10c      	bne.n	80046b0 <HAL_RCC_OscConfig+0x334>
 8004696:	4a76      	ldr	r2, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004698:	4b75      	ldr	r3, [pc, #468]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	6213      	str	r3, [r2, #32]
 80046a2:	4a73      	ldr	r2, [pc, #460]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046a4:	4b72      	ldr	r3, [pc, #456]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	f023 0304 	bic.w	r3, r3, #4
 80046ac:	6213      	str	r3, [r2, #32]
 80046ae:	e01c      	b.n	80046ea <HAL_RCC_OscConfig+0x36e>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	2b05      	cmp	r3, #5
 80046b6:	d10c      	bne.n	80046d2 <HAL_RCC_OscConfig+0x356>
 80046b8:	4a6d      	ldr	r2, [pc, #436]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046ba:	4b6d      	ldr	r3, [pc, #436]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	6213      	str	r3, [r2, #32]
 80046c4:	4a6a      	ldr	r2, [pc, #424]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046c6:	4b6a      	ldr	r3, [pc, #424]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	f043 0301 	orr.w	r3, r3, #1
 80046ce:	6213      	str	r3, [r2, #32]
 80046d0:	e00b      	b.n	80046ea <HAL_RCC_OscConfig+0x36e>
 80046d2:	4a67      	ldr	r2, [pc, #412]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046d4:	4b66      	ldr	r3, [pc, #408]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f023 0301 	bic.w	r3, r3, #1
 80046dc:	6213      	str	r3, [r2, #32]
 80046de:	4a64      	ldr	r2, [pc, #400]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046e0:	4b63      	ldr	r3, [pc, #396]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f023 0304 	bic.w	r3, r3, #4
 80046e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d015      	beq.n	800471e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f2:	f7fd ff91 	bl	8002618 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fd ff8d 	bl	8002618 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0ab      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004710:	4b57      	ldr	r3, [pc, #348]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ee      	beq.n	80046fa <HAL_RCC_OscConfig+0x37e>
 800471c:	e014      	b.n	8004748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800471e:	f7fd ff7b 	bl	8002618 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004724:	e00a      	b.n	800473c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004726:	f7fd ff77 	bl	8002618 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	f241 3288 	movw	r2, #5000	; 0x1388
 8004734:	4293      	cmp	r3, r2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e095      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800473c:	4b4c      	ldr	r3, [pc, #304]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ee      	bne.n	8004726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d105      	bne.n	800475a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474e:	4a48      	ldr	r2, [pc, #288]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004750:	4b47      	ldr	r3, [pc, #284]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004758:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8081 	beq.w	8004866 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004764:	4b42      	ldr	r3, [pc, #264]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f003 030c 	and.w	r3, r3, #12
 800476c:	2b08      	cmp	r3, #8
 800476e:	d061      	beq.n	8004834 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d146      	bne.n	8004806 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004778:	4b3f      	ldr	r3, [pc, #252]	; (8004878 <HAL_RCC_OscConfig+0x4fc>)
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800477e:	f7fd ff4b 	bl	8002618 <HAL_GetTick>
 8004782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004784:	e008      	b.n	8004798 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004786:	f7fd ff47 	bl	8002618 <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	2b02      	cmp	r3, #2
 8004792:	d901      	bls.n	8004798 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e067      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004798:	4b35      	ldr	r3, [pc, #212]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1f0      	bne.n	8004786 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a1b      	ldr	r3, [r3, #32]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ac:	d108      	bne.n	80047c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80047ae:	4930      	ldr	r1, [pc, #192]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047b0:	4b2f      	ldr	r3, [pc, #188]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c0:	482b      	ldr	r0, [pc, #172]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047c2:	4b2b      	ldr	r3, [pc, #172]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a19      	ldr	r1, [r3, #32]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	430b      	orrs	r3, r1
 80047d4:	4313      	orrs	r3, r2
 80047d6:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047d8:	4b27      	ldr	r3, [pc, #156]	; (8004878 <HAL_RCC_OscConfig+0x4fc>)
 80047da:	2201      	movs	r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047de:	f7fd ff1b 	bl	8002618 <HAL_GetTick>
 80047e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e6:	f7fd ff17 	bl	8002618 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e037      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f8:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d0f0      	beq.n	80047e6 <HAL_RCC_OscConfig+0x46a>
 8004804:	e02f      	b.n	8004866 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004806:	4b1c      	ldr	r3, [pc, #112]	; (8004878 <HAL_RCC_OscConfig+0x4fc>)
 8004808:	2200      	movs	r2, #0
 800480a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7fd ff04 	bl	8002618 <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004812:	e008      	b.n	8004826 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004814:	f7fd ff00 	bl	8002618 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	2b02      	cmp	r3, #2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e020      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004826:	4b12      	ldr	r3, [pc, #72]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f0      	bne.n	8004814 <HAL_RCC_OscConfig+0x498>
 8004832:	e018      	b.n	8004866 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e013      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004840:	4b0b      	ldr	r3, [pc, #44]	; (8004870 <HAL_RCC_OscConfig+0x4f4>)
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	429a      	cmp	r2, r3
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800485e:	429a      	cmp	r2, r3
 8004860:	d001      	beq.n	8004866 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e000      	b.n	8004868 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004866:	2300      	movs	r3, #0
}
 8004868:	4618      	mov	r0, r3
 800486a:	3718      	adds	r7, #24
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	40007000 	.word	0x40007000
 8004878:	42420060 	.word	0x42420060

0800487c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0d0      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b6a      	ldr	r3, [pc, #424]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0207 	and.w	r2, r3, #7
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d210      	bcs.n	80048c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4967      	ldr	r1, [pc, #412]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80048a0:	4b66      	ldr	r3, [pc, #408]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f023 0207 	bic.w	r2, r3, #7
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ae:	4b63      	ldr	r3, [pc, #396]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0207 	and.w	r2, r3, #7
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d001      	beq.n	80048c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0b8      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d020      	beq.n	800490e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0304 	and.w	r3, r3, #4
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d8:	4a59      	ldr	r2, [pc, #356]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	4b59      	ldr	r3, [pc, #356]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0308 	and.w	r3, r3, #8
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d005      	beq.n	80048fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048f0:	4a53      	ldr	r2, [pc, #332]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	4b53      	ldr	r3, [pc, #332]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048fc:	4950      	ldr	r1, [pc, #320]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80048fe:	4b50      	ldr	r3, [pc, #320]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	4313      	orrs	r3, r2
 800490c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d040      	beq.n	800499c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d107      	bne.n	8004932 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004922:	4b47      	ldr	r3, [pc, #284]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d115      	bne.n	800495a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e07f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b02      	cmp	r3, #2
 8004938:	d107      	bne.n	800494a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493a:	4b41      	ldr	r3, [pc, #260]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e073      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800494a:	4b3d      	ldr	r3, [pc, #244]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e06b      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800495a:	4939      	ldr	r1, [pc, #228]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	4b38      	ldr	r3, [pc, #224]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f023 0203 	bic.w	r2, r3, #3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	4313      	orrs	r3, r2
 800496a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800496c:	f7fd fe54 	bl	8002618 <HAL_GetTick>
 8004970:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004972:	e00a      	b.n	800498a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004974:	f7fd fe50 	bl	8002618 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004982:	4293      	cmp	r3, r2
 8004984:	d901      	bls.n	800498a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e053      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800498a:	4b2d      	ldr	r3, [pc, #180]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	f003 020c 	and.w	r2, r3, #12
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	429a      	cmp	r2, r3
 800499a:	d1eb      	bne.n	8004974 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800499c:	4b27      	ldr	r3, [pc, #156]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0207 	and.w	r2, r3, #7
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d910      	bls.n	80049cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4924      	ldr	r1, [pc, #144]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80049ac:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f023 0207 	bic.w	r2, r3, #7
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	4b20      	ldr	r3, [pc, #128]	; (8004a3c <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0207 	and.w	r2, r3, #7
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d001      	beq.n	80049cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e032      	b.n	8004a32 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d008      	beq.n	80049ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d8:	4919      	ldr	r1, [pc, #100]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80049da:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049f6:	4912      	ldr	r1, [pc, #72]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4313      	orrs	r3, r2
 8004a08:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a0a:	f000 f821 	bl	8004a50 <HAL_RCC_GetSysClockFreq>
 8004a0e:	4601      	mov	r1, r0
 8004a10:	4b0b      	ldr	r3, [pc, #44]	; (8004a40 <HAL_RCC_ClockConfig+0x1c4>)
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	5cd3      	ldrb	r3, [r2, r3]
 8004a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8004a22:	4a09      	ldr	r2, [pc, #36]	; (8004a48 <HAL_RCC_ClockConfig+0x1cc>)
 8004a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a26:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <HAL_RCC_ClockConfig+0x1d0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fd fdb2 	bl	8002594 <HAL_InitTick>

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40022000 	.word	0x40022000
 8004a40:	40021000 	.word	0x40021000
 8004a44:	080058ac 	.word	0x080058ac
 8004a48:	20000070 	.word	0x20000070
 8004a4c:	20000074 	.word	0x20000074

08004a50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a50:	b490      	push	{r4, r7}
 8004a52:	b08a      	sub	sp, #40	; 0x28
 8004a54:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a56:	4b2a      	ldr	r3, [pc, #168]	; (8004b00 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a58:	1d3c      	adds	r4, r7, #4
 8004a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a60:	4b28      	ldr	r3, [pc, #160]	; (8004b04 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a66:	2300      	movs	r3, #0
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	61bb      	str	r3, [r7, #24]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	627b      	str	r3, [r7, #36]	; 0x24
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a7a:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	f003 030c 	and.w	r3, r3, #12
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d002      	beq.n	8004a90 <HAL_RCC_GetSysClockFreq+0x40>
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d003      	beq.n	8004a96 <HAL_RCC_GetSysClockFreq+0x46>
 8004a8e:	e02d      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a90:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a92:	623b      	str	r3, [r7, #32]
      break;
 8004a94:	e02d      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	0c9b      	lsrs	r3, r3, #18
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004aa2:	4413      	add	r3, r2
 8004aa4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004aa8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d013      	beq.n	8004adc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004ab4:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	0c5b      	lsrs	r3, r3, #17
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ac8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4a0f      	ldr	r2, [pc, #60]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ace:	fb02 f203 	mul.w	r2, r2, r3
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8004ada:	e004      	b.n	8004ae6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	623b      	str	r3, [r7, #32]
      break;
 8004aea:	e002      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004aec:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004aee:	623b      	str	r3, [r7, #32]
      break;
 8004af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004af2:	6a3b      	ldr	r3, [r7, #32]
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3728      	adds	r7, #40	; 0x28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc90      	pop	{r4, r7}
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	08005868 	.word	0x08005868
 8004b04:	08005878 	.word	0x08005878
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	007a1200 	.word	0x007a1200
 8004b10:	003d0900 	.word	0x003d0900

08004b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b085      	sub	sp, #20
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b1c:	4b0a      	ldr	r3, [pc, #40]	; (8004b48 <RCC_Delay+0x34>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <RCC_Delay+0x38>)
 8004b22:	fba2 2303 	umull	r2, r3, r2, r3
 8004b26:	0a5b      	lsrs	r3, r3, #9
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b30:	bf00      	nop
  }
  while (Delay --);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1e5a      	subs	r2, r3, #1
 8004b36:	60fa      	str	r2, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d1f9      	bne.n	8004b30 <RCC_Delay+0x1c>
}
 8004b3c:	bf00      	nop
 8004b3e:	3714      	adds	r7, #20
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bc80      	pop	{r7}
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	20000070 	.word	0x20000070
 8004b4c:	10624dd3 	.word	0x10624dd3

08004b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d07d      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b70:	4b4f      	ldr	r3, [pc, #316]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10d      	bne.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7c:	4a4c      	ldr	r2, [pc, #304]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b7e:	4b4c      	ldr	r3, [pc, #304]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b86:	61d3      	str	r3, [r2, #28]
 8004b88:	4b49      	ldr	r3, [pc, #292]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b90:	60bb      	str	r3, [r7, #8]
 8004b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b94:	2301      	movs	r3, #1
 8004b96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b98:	4b46      	ldr	r3, [pc, #280]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d118      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba4:	4a43      	ldr	r2, [pc, #268]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ba6:	4b43      	ldr	r3, [pc, #268]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb0:	f7fd fd32 	bl	8002618 <HAL_GetTick>
 8004bb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb6:	e008      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb8:	f7fd fd2e 	bl	8002618 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b64      	cmp	r3, #100	; 0x64
 8004bc4:	d901      	bls.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e06d      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	4b3a      	ldr	r3, [pc, #232]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004bd6:	4b36      	ldr	r3, [pc, #216]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d02e      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d027      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004bf4:	4b2e      	ldr	r3, [pc, #184]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bf6:	6a1b      	ldr	r3, [r3, #32]
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004bfe:	4b2e      	ldr	r3, [pc, #184]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c00:	2201      	movs	r2, #1
 8004c02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c04:	4b2c      	ldr	r3, [pc, #176]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c0a:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d014      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1a:	f7fd fcfd 	bl	8002618 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c22:	f7fd fcf9 	bl	8002618 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e036      	b.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c38:	4b1d      	ldr	r3, [pc, #116]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ee      	beq.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c44:	491a      	ldr	r1, [pc, #104]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c46:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d105      	bne.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c5e:	4b14      	ldr	r3, [pc, #80]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d008      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c74:	490e      	ldr	r1, [pc, #56]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f003 0310 	and.w	r3, r3, #16
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d008      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c92:	4907      	ldr	r1, [pc, #28]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c94:	4b06      	ldr	r3, [pc, #24]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40007000 	.word	0x40007000
 8004cb8:	42420440 	.word	0x42420440

08004cbc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b082      	sub	sp, #8
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e041      	b.n	8004d52 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d106      	bne.n	8004ce8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd fb48 	bl	8002378 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	3304      	adds	r3, #4
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	f000 f98e 	bl	800501c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2201      	movs	r2, #1
 8004d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
	...

08004d5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <HAL_TIM_PWM_Start+0x24>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	bf14      	ite	ne
 8004d78:	2301      	movne	r3, #1
 8004d7a:	2300      	moveq	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	e022      	b.n	8004dc6 <HAL_TIM_PWM_Start+0x6a>
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b04      	cmp	r3, #4
 8004d84:	d109      	bne.n	8004d9a <HAL_TIM_PWM_Start+0x3e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	bf14      	ite	ne
 8004d92:	2301      	movne	r3, #1
 8004d94:	2300      	moveq	r3, #0
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	e015      	b.n	8004dc6 <HAL_TIM_PWM_Start+0x6a>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b08      	cmp	r3, #8
 8004d9e:	d109      	bne.n	8004db4 <HAL_TIM_PWM_Start+0x58>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	bf14      	ite	ne
 8004dac:	2301      	movne	r3, #1
 8004dae:	2300      	moveq	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	e008      	b.n	8004dc6 <HAL_TIM_PWM_Start+0x6a>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	bf14      	ite	ne
 8004dc0:	2301      	movne	r3, #1
 8004dc2:	2300      	moveq	r3, #0
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e05e      	b.n	8004e8c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <HAL_TIM_PWM_Start+0x82>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2202      	movs	r2, #2
 8004dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ddc:	e013      	b.n	8004e06 <HAL_TIM_PWM_Start+0xaa>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d104      	bne.n	8004dee <HAL_TIM_PWM_Start+0x92>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dec:	e00b      	b.n	8004e06 <HAL_TIM_PWM_Start+0xaa>
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b08      	cmp	r3, #8
 8004df2:	d104      	bne.n	8004dfe <HAL_TIM_PWM_Start+0xa2>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2202      	movs	r2, #2
 8004df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dfc:	e003      	b.n	8004e06 <HAL_TIM_PWM_Start+0xaa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	6839      	ldr	r1, [r7, #0]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 faee 	bl	80053f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1e      	ldr	r2, [pc, #120]	; (8004e94 <HAL_TIM_PWM_Start+0x138>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d107      	bne.n	8004e2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	6812      	ldr	r2, [r2, #0]
 8004e26:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004e28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <HAL_TIM_PWM_Start+0x138>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <HAL_TIM_PWM_Start+0xfa>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e40:	d009      	beq.n	8004e56 <HAL_TIM_PWM_Start+0xfa>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <HAL_TIM_PWM_Start+0x13c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_TIM_PWM_Start+0xfa>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a12      	ldr	r2, [pc, #72]	; (8004e9c <HAL_TIM_PWM_Start+0x140>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d111      	bne.n	8004e7a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b06      	cmp	r3, #6
 8004e66:	d010      	beq.n	8004e8a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e78:	e007      	b.n	8004e8a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	6812      	ldr	r2, [r2, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40012c00 	.word	0x40012c00
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800

08004ea0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d101      	bne.n	8004eba <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	e0ac      	b.n	8005014 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b0c      	cmp	r3, #12
 8004ec6:	f200 809f 	bhi.w	8005008 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004eca:	a201      	add	r2, pc, #4	; (adr r2, 8004ed0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed0:	08004f05 	.word	0x08004f05
 8004ed4:	08005009 	.word	0x08005009
 8004ed8:	08005009 	.word	0x08005009
 8004edc:	08005009 	.word	0x08005009
 8004ee0:	08004f45 	.word	0x08004f45
 8004ee4:	08005009 	.word	0x08005009
 8004ee8:	08005009 	.word	0x08005009
 8004eec:	08005009 	.word	0x08005009
 8004ef0:	08004f87 	.word	0x08004f87
 8004ef4:	08005009 	.word	0x08005009
 8004ef8:	08005009 	.word	0x08005009
 8004efc:	08005009 	.word	0x08005009
 8004f00:	08004fc7 	.word	0x08004fc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f8e8 	bl	80050e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	6992      	ldr	r2, [r2, #24]
 8004f1a:	f042 0208 	orr.w	r2, r2, #8
 8004f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	6992      	ldr	r2, [r2, #24]
 8004f2a:	f022 0204 	bic.w	r2, r2, #4
 8004f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	6991      	ldr	r1, [r2, #24]
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	6912      	ldr	r2, [r2, #16]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	619a      	str	r2, [r3, #24]
      break;
 8004f42:	e062      	b.n	800500a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 f92e 	bl	80051ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	6992      	ldr	r2, [r2, #24]
 8004f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	6992      	ldr	r2, [r2, #24]
 8004f6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	6991      	ldr	r1, [r2, #24]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	6912      	ldr	r2, [r2, #16]
 8004f7e:	0212      	lsls	r2, r2, #8
 8004f80:	430a      	orrs	r2, r1
 8004f82:	619a      	str	r2, [r3, #24]
      break;
 8004f84:	e041      	b.n	800500a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68b9      	ldr	r1, [r7, #8]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 f977 	bl	8005280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	69d2      	ldr	r2, [r2, #28]
 8004f9c:	f042 0208 	orr.w	r2, r2, #8
 8004fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	69d2      	ldr	r2, [r2, #28]
 8004fac:	f022 0204 	bic.w	r2, r2, #4
 8004fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	6812      	ldr	r2, [r2, #0]
 8004fba:	69d1      	ldr	r1, [r2, #28]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	6912      	ldr	r2, [r2, #16]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	61da      	str	r2, [r3, #28]
      break;
 8004fc4:	e021      	b.n	800500a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 f9c1 	bl	8005354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	69d2      	ldr	r2, [r2, #28]
 8004fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	6812      	ldr	r2, [r2, #0]
 8004fea:	69d2      	ldr	r2, [r2, #28]
 8004fec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	69d1      	ldr	r1, [r2, #28]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	6912      	ldr	r2, [r2, #16]
 8005000:	0212      	lsls	r2, r2, #8
 8005002:	430a      	orrs	r2, r1
 8005004:	61da      	str	r2, [r3, #28]
      break;
 8005006:	e000      	b.n	800500a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005008:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a29      	ldr	r2, [pc, #164]	; (80050d4 <TIM_Base_SetConfig+0xb8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d00b      	beq.n	800504c <TIM_Base_SetConfig+0x30>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503a:	d007      	beq.n	800504c <TIM_Base_SetConfig+0x30>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <TIM_Base_SetConfig+0xbc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d003      	beq.n	800504c <TIM_Base_SetConfig+0x30>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a25      	ldr	r2, [pc, #148]	; (80050dc <TIM_Base_SetConfig+0xc0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d108      	bne.n	800505e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	68fa      	ldr	r2, [r7, #12]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a1c      	ldr	r2, [pc, #112]	; (80050d4 <TIM_Base_SetConfig+0xb8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00b      	beq.n	800507e <TIM_Base_SetConfig+0x62>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800506c:	d007      	beq.n	800507e <TIM_Base_SetConfig+0x62>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a19      	ldr	r2, [pc, #100]	; (80050d8 <TIM_Base_SetConfig+0xbc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_Base_SetConfig+0x62>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a18      	ldr	r2, [pc, #96]	; (80050dc <TIM_Base_SetConfig+0xc0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d108      	bne.n	8005090 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4313      	orrs	r3, r2
 800508e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	689a      	ldr	r2, [r3, #8]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a07      	ldr	r2, [pc, #28]	; (80050d4 <TIM_Base_SetConfig+0xb8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d103      	bne.n	80050c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	691a      	ldr	r2, [r3, #16]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	615a      	str	r2, [r3, #20]
}
 80050ca:	bf00      	nop
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bc80      	pop	{r7}
 80050d2:	4770      	bx	lr
 80050d4:	40012c00 	.word	0x40012c00
 80050d8:	40000400 	.word	0x40000400
 80050dc:	40000800 	.word	0x40000800

080050e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	f023 0201 	bic.w	r2, r3, #1
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f023 0303 	bic.w	r3, r3, #3
 8005116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	4313      	orrs	r3, r2
 8005120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f023 0302 	bic.w	r3, r3, #2
 8005128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	697a      	ldr	r2, [r7, #20]
 8005130:	4313      	orrs	r3, r2
 8005132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <TIM_OC1_SetConfig+0xc8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d10c      	bne.n	8005156 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0308 	bic.w	r3, r3, #8
 8005142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a13      	ldr	r2, [pc, #76]	; (80051a8 <TIM_OC1_SetConfig+0xc8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d111      	bne.n	8005182 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4313      	orrs	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	621a      	str	r2, [r3, #32]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bc80      	pop	{r7}
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40012c00 	.word	0x40012c00

080051ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0210 	bic.w	r2, r3, #16
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	021b      	lsls	r3, r3, #8
 80051ea:	68fa      	ldr	r2, [r7, #12]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0320 	bic.w	r3, r3, #32
 80051f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a1d      	ldr	r2, [pc, #116]	; (800527c <TIM_OC2_SetConfig+0xd0>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d10d      	bne.n	8005228 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	011b      	lsls	r3, r3, #4
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a14      	ldr	r2, [pc, #80]	; (800527c <TIM_OC2_SetConfig+0xd0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d113      	bne.n	8005258 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005236:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800523e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	699b      	ldr	r3, [r3, #24]
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	4313      	orrs	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685a      	ldr	r2, [r3, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	621a      	str	r2, [r3, #32]
}
 8005272:	bf00      	nop
 8005274:	371c      	adds	r7, #28
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr
 800527c:	40012c00 	.word	0x40012c00

08005280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005280:	b480      	push	{r7}
 8005282:	b087      	sub	sp, #28
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69db      	ldr	r3, [r3, #28]
 80052a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 0303 	bic.w	r3, r3, #3
 80052b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	4313      	orrs	r3, r2
 80052c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	021b      	lsls	r3, r3, #8
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1d      	ldr	r2, [pc, #116]	; (8005350 <TIM_OC3_SetConfig+0xd0>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d10d      	bne.n	80052fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	021b      	lsls	r3, r3, #8
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a14      	ldr	r2, [pc, #80]	; (8005350 <TIM_OC3_SetConfig+0xd0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d113      	bne.n	800532a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685a      	ldr	r2, [r3, #4]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	697a      	ldr	r2, [r7, #20]
 8005342:	621a      	str	r2, [r3, #32]
}
 8005344:	bf00      	nop
 8005346:	371c      	adds	r7, #28
 8005348:	46bd      	mov	sp, r7
 800534a:	bc80      	pop	{r7}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40012c00 	.word	0x40012c00

08005354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a1b      	ldr	r3, [r3, #32]
 800536e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800538a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	021b      	lsls	r3, r3, #8
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4313      	orrs	r3, r2
 8005396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800539e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	689b      	ldr	r3, [r3, #8]
 80053a4:	031b      	lsls	r3, r3, #12
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a0f      	ldr	r2, [pc, #60]	; (80053ec <TIM_OC4_SetConfig+0x98>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d109      	bne.n	80053c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	695b      	ldr	r3, [r3, #20]
 80053c0:	019b      	lsls	r3, r3, #6
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	621a      	str	r2, [r3, #32]
}
 80053e2:	bf00      	nop
 80053e4:	371c      	adds	r7, #28
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00

080053f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	f003 031f 	and.w	r3, r3, #31
 8005402:	2201      	movs	r2, #1
 8005404:	fa02 f303 	lsl.w	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1a      	ldr	r2, [r3, #32]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	43db      	mvns	r3, r3
 8005412:	401a      	ands	r2, r3
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1a      	ldr	r2, [r3, #32]
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	6879      	ldr	r1, [r7, #4]
 8005424:	fa01 f303 	lsl.w	r3, r1, r3
 8005428:	431a      	orrs	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800544c:	2302      	movs	r3, #2
 800544e:	e046      	b.n	80054de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68fa      	ldr	r2, [r7, #12]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a16      	ldr	r2, [pc, #88]	; (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00e      	beq.n	80054b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800549c:	d009      	beq.n	80054b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a12      	ldr	r2, [pc, #72]	; (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a10      	ldr	r2, [pc, #64]	; (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d10c      	bne.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800

080054f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054fe:	2300      	movs	r3, #0
 8005500:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005508:	2b01      	cmp	r3, #1
 800550a:	d101      	bne.n	8005510 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800550c:	2302      	movs	r3, #2
 800550e:	e03d      	b.n	800558c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	4313      	orrs	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4313      	orrs	r3, r2
 800554e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3714      	adds	r7, #20
 8005590:	46bd      	mov	sp, r7
 8005592:	bc80      	pop	{r7}
 8005594:	4770      	bx	lr
	...

08005598 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005598:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800559a:	e003      	b.n	80055a4 <LoopCopyDataInit>

0800559c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800559e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80055a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80055a2:	3104      	adds	r1, #4

080055a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80055a4:	480a      	ldr	r0, [pc, #40]	; (80055d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80055a6:	4b0b      	ldr	r3, [pc, #44]	; (80055d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80055a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80055aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80055ac:	d3f6      	bcc.n	800559c <CopyDataInit>
  ldr r2, =_sbss
 80055ae:	4a0a      	ldr	r2, [pc, #40]	; (80055d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80055b0:	e002      	b.n	80055b8 <LoopFillZerobss>

080055b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80055b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80055b4:	f842 3b04 	str.w	r3, [r2], #4

080055b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80055b8:	4b08      	ldr	r3, [pc, #32]	; (80055dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80055ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80055bc:	d3f9      	bcc.n	80055b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055be:	f7fc ffcd 	bl	800255c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055c2:	f000 f80f 	bl	80055e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80055c6:	f7fc fb29 	bl	8001c1c <main>
  bx lr
 80055ca:	4770      	bx	lr
  ldr r3, =_sidata
 80055cc:	080058c4 	.word	0x080058c4
  ldr r0, =_sdata
 80055d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80055d4:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80055d8:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80055dc:	20000280 	.word	0x20000280

080055e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055e0:	e7fe      	b.n	80055e0 <ADC1_2_IRQHandler>
	...

080055e4 <__libc_init_array>:
 80055e4:	b570      	push	{r4, r5, r6, lr}
 80055e6:	2500      	movs	r5, #0
 80055e8:	4e0c      	ldr	r6, [pc, #48]	; (800561c <__libc_init_array+0x38>)
 80055ea:	4c0d      	ldr	r4, [pc, #52]	; (8005620 <__libc_init_array+0x3c>)
 80055ec:	1ba4      	subs	r4, r4, r6
 80055ee:	10a4      	asrs	r4, r4, #2
 80055f0:	42a5      	cmp	r5, r4
 80055f2:	d109      	bne.n	8005608 <__libc_init_array+0x24>
 80055f4:	f000 f92c 	bl	8005850 <_init>
 80055f8:	2500      	movs	r5, #0
 80055fa:	4e0a      	ldr	r6, [pc, #40]	; (8005624 <__libc_init_array+0x40>)
 80055fc:	4c0a      	ldr	r4, [pc, #40]	; (8005628 <__libc_init_array+0x44>)
 80055fe:	1ba4      	subs	r4, r4, r6
 8005600:	10a4      	asrs	r4, r4, #2
 8005602:	42a5      	cmp	r5, r4
 8005604:	d105      	bne.n	8005612 <__libc_init_array+0x2e>
 8005606:	bd70      	pop	{r4, r5, r6, pc}
 8005608:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800560c:	4798      	blx	r3
 800560e:	3501      	adds	r5, #1
 8005610:	e7ee      	b.n	80055f0 <__libc_init_array+0xc>
 8005612:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005616:	4798      	blx	r3
 8005618:	3501      	adds	r5, #1
 800561a:	e7f2      	b.n	8005602 <__libc_init_array+0x1e>
 800561c:	080058bc 	.word	0x080058bc
 8005620:	080058bc 	.word	0x080058bc
 8005624:	080058bc 	.word	0x080058bc
 8005628:	080058c0 	.word	0x080058c0

0800562c <memset>:
 800562c:	4603      	mov	r3, r0
 800562e:	4402      	add	r2, r0
 8005630:	4293      	cmp	r3, r2
 8005632:	d100      	bne.n	8005636 <memset+0xa>
 8005634:	4770      	bx	lr
 8005636:	f803 1b01 	strb.w	r1, [r3], #1
 800563a:	e7f9      	b.n	8005630 <memset+0x4>
 800563c:	0000      	movs	r0, r0
	...

08005640 <ceil>:
 8005640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005644:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005648:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800564c:	2e13      	cmp	r6, #19
 800564e:	4607      	mov	r7, r0
 8005650:	460b      	mov	r3, r1
 8005652:	460c      	mov	r4, r1
 8005654:	4605      	mov	r5, r0
 8005656:	dc31      	bgt.n	80056bc <ceil+0x7c>
 8005658:	2e00      	cmp	r6, #0
 800565a:	da12      	bge.n	8005682 <ceil+0x42>
 800565c:	a336      	add	r3, pc, #216	; (adr r3, 8005738 <ceil+0xf8>)
 800565e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005662:	f7fa fd7b 	bl	800015c <__adddf3>
 8005666:	2200      	movs	r2, #0
 8005668:	2300      	movs	r3, #0
 800566a:	f7fa ffa7 	bl	80005bc <__aeabi_dcmpgt>
 800566e:	b128      	cbz	r0, 800567c <ceil+0x3c>
 8005670:	2c00      	cmp	r4, #0
 8005672:	db58      	blt.n	8005726 <ceil+0xe6>
 8005674:	433c      	orrs	r4, r7
 8005676:	d05a      	beq.n	800572e <ceil+0xee>
 8005678:	2500      	movs	r5, #0
 800567a:	4c31      	ldr	r4, [pc, #196]	; (8005740 <ceil+0x100>)
 800567c:	4623      	mov	r3, r4
 800567e:	462f      	mov	r7, r5
 8005680:	e027      	b.n	80056d2 <ceil+0x92>
 8005682:	4a30      	ldr	r2, [pc, #192]	; (8005744 <ceil+0x104>)
 8005684:	fa42 f806 	asr.w	r8, r2, r6
 8005688:	ea01 0208 	and.w	r2, r1, r8
 800568c:	4302      	orrs	r2, r0
 800568e:	d020      	beq.n	80056d2 <ceil+0x92>
 8005690:	a329      	add	r3, pc, #164	; (adr r3, 8005738 <ceil+0xf8>)
 8005692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005696:	f7fa fd61 	bl	800015c <__adddf3>
 800569a:	2200      	movs	r2, #0
 800569c:	2300      	movs	r3, #0
 800569e:	f7fa ff8d 	bl	80005bc <__aeabi_dcmpgt>
 80056a2:	2800      	cmp	r0, #0
 80056a4:	d0ea      	beq.n	800567c <ceil+0x3c>
 80056a6:	2c00      	cmp	r4, #0
 80056a8:	bfc2      	ittt	gt
 80056aa:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 80056ae:	fa43 f606 	asrgt.w	r6, r3, r6
 80056b2:	19a4      	addgt	r4, r4, r6
 80056b4:	ea24 0408 	bic.w	r4, r4, r8
 80056b8:	2500      	movs	r5, #0
 80056ba:	e7df      	b.n	800567c <ceil+0x3c>
 80056bc:	2e33      	cmp	r6, #51	; 0x33
 80056be:	dd0c      	ble.n	80056da <ceil+0x9a>
 80056c0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80056c4:	d105      	bne.n	80056d2 <ceil+0x92>
 80056c6:	460b      	mov	r3, r1
 80056c8:	4602      	mov	r2, r0
 80056ca:	f7fa fd47 	bl	800015c <__adddf3>
 80056ce:	4607      	mov	r7, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4638      	mov	r0, r7
 80056d4:	4619      	mov	r1, r3
 80056d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056da:	f04f 32ff 	mov.w	r2, #4294967295
 80056de:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80056e2:	fa22 f808 	lsr.w	r8, r2, r8
 80056e6:	ea10 0f08 	tst.w	r0, r8
 80056ea:	d0f2      	beq.n	80056d2 <ceil+0x92>
 80056ec:	a312      	add	r3, pc, #72	; (adr r3, 8005738 <ceil+0xf8>)
 80056ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f2:	f7fa fd33 	bl	800015c <__adddf3>
 80056f6:	2200      	movs	r2, #0
 80056f8:	2300      	movs	r3, #0
 80056fa:	f7fa ff5f 	bl	80005bc <__aeabi_dcmpgt>
 80056fe:	2800      	cmp	r0, #0
 8005700:	d0bc      	beq.n	800567c <ceil+0x3c>
 8005702:	2c00      	cmp	r4, #0
 8005704:	dd02      	ble.n	800570c <ceil+0xcc>
 8005706:	2e14      	cmp	r6, #20
 8005708:	d103      	bne.n	8005712 <ceil+0xd2>
 800570a:	3401      	adds	r4, #1
 800570c:	ea25 0508 	bic.w	r5, r5, r8
 8005710:	e7b4      	b.n	800567c <ceil+0x3c>
 8005712:	2301      	movs	r3, #1
 8005714:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005718:	fa03 f606 	lsl.w	r6, r3, r6
 800571c:	4435      	add	r5, r6
 800571e:	42af      	cmp	r7, r5
 8005720:	bf88      	it	hi
 8005722:	18e4      	addhi	r4, r4, r3
 8005724:	e7f2      	b.n	800570c <ceil+0xcc>
 8005726:	2500      	movs	r5, #0
 8005728:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800572c:	e7a6      	b.n	800567c <ceil+0x3c>
 800572e:	4625      	mov	r5, r4
 8005730:	e7a4      	b.n	800567c <ceil+0x3c>
 8005732:	bf00      	nop
 8005734:	f3af 8000 	nop.w
 8005738:	8800759c 	.word	0x8800759c
 800573c:	7e37e43c 	.word	0x7e37e43c
 8005740:	3ff00000 	.word	0x3ff00000
 8005744:	000fffff 	.word	0x000fffff

08005748 <floor>:
 8005748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800574c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8005750:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8005754:	2e13      	cmp	r6, #19
 8005756:	4607      	mov	r7, r0
 8005758:	460b      	mov	r3, r1
 800575a:	460c      	mov	r4, r1
 800575c:	4605      	mov	r5, r0
 800575e:	dc35      	bgt.n	80057cc <floor+0x84>
 8005760:	2e00      	cmp	r6, #0
 8005762:	da16      	bge.n	8005792 <floor+0x4a>
 8005764:	a336      	add	r3, pc, #216	; (adr r3, 8005840 <floor+0xf8>)
 8005766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576a:	f7fa fcf7 	bl	800015c <__adddf3>
 800576e:	2200      	movs	r2, #0
 8005770:	2300      	movs	r3, #0
 8005772:	f7fa ff23 	bl	80005bc <__aeabi_dcmpgt>
 8005776:	b148      	cbz	r0, 800578c <floor+0x44>
 8005778:	2c00      	cmp	r4, #0
 800577a:	da5c      	bge.n	8005836 <floor+0xee>
 800577c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005780:	433b      	orrs	r3, r7
 8005782:	4b31      	ldr	r3, [pc, #196]	; (8005848 <floor+0x100>)
 8005784:	f04f 0500 	mov.w	r5, #0
 8005788:	bf18      	it	ne
 800578a:	461c      	movne	r4, r3
 800578c:	4623      	mov	r3, r4
 800578e:	462f      	mov	r7, r5
 8005790:	e027      	b.n	80057e2 <floor+0x9a>
 8005792:	4a2e      	ldr	r2, [pc, #184]	; (800584c <floor+0x104>)
 8005794:	fa42 f806 	asr.w	r8, r2, r6
 8005798:	ea01 0208 	and.w	r2, r1, r8
 800579c:	4302      	orrs	r2, r0
 800579e:	d020      	beq.n	80057e2 <floor+0x9a>
 80057a0:	a327      	add	r3, pc, #156	; (adr r3, 8005840 <floor+0xf8>)
 80057a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a6:	f7fa fcd9 	bl	800015c <__adddf3>
 80057aa:	2200      	movs	r2, #0
 80057ac:	2300      	movs	r3, #0
 80057ae:	f7fa ff05 	bl	80005bc <__aeabi_dcmpgt>
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d0ea      	beq.n	800578c <floor+0x44>
 80057b6:	2c00      	cmp	r4, #0
 80057b8:	bfbe      	ittt	lt
 80057ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80057be:	fa43 f606 	asrlt.w	r6, r3, r6
 80057c2:	19a4      	addlt	r4, r4, r6
 80057c4:	ea24 0408 	bic.w	r4, r4, r8
 80057c8:	2500      	movs	r5, #0
 80057ca:	e7df      	b.n	800578c <floor+0x44>
 80057cc:	2e33      	cmp	r6, #51	; 0x33
 80057ce:	dd0c      	ble.n	80057ea <floor+0xa2>
 80057d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80057d4:	d105      	bne.n	80057e2 <floor+0x9a>
 80057d6:	460b      	mov	r3, r1
 80057d8:	4602      	mov	r2, r0
 80057da:	f7fa fcbf 	bl	800015c <__adddf3>
 80057de:	4607      	mov	r7, r0
 80057e0:	460b      	mov	r3, r1
 80057e2:	4638      	mov	r0, r7
 80057e4:	4619      	mov	r1, r3
 80057e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ea:	f04f 32ff 	mov.w	r2, #4294967295
 80057ee:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 80057f2:	fa22 f808 	lsr.w	r8, r2, r8
 80057f6:	ea10 0f08 	tst.w	r0, r8
 80057fa:	d0f2      	beq.n	80057e2 <floor+0x9a>
 80057fc:	a310      	add	r3, pc, #64	; (adr r3, 8005840 <floor+0xf8>)
 80057fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005802:	f7fa fcab 	bl	800015c <__adddf3>
 8005806:	2200      	movs	r2, #0
 8005808:	2300      	movs	r3, #0
 800580a:	f7fa fed7 	bl	80005bc <__aeabi_dcmpgt>
 800580e:	2800      	cmp	r0, #0
 8005810:	d0bc      	beq.n	800578c <floor+0x44>
 8005812:	2c00      	cmp	r4, #0
 8005814:	da02      	bge.n	800581c <floor+0xd4>
 8005816:	2e14      	cmp	r6, #20
 8005818:	d103      	bne.n	8005822 <floor+0xda>
 800581a:	3401      	adds	r4, #1
 800581c:	ea25 0508 	bic.w	r5, r5, r8
 8005820:	e7b4      	b.n	800578c <floor+0x44>
 8005822:	2301      	movs	r3, #1
 8005824:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005828:	fa03 f606 	lsl.w	r6, r3, r6
 800582c:	4435      	add	r5, r6
 800582e:	42af      	cmp	r7, r5
 8005830:	bf88      	it	hi
 8005832:	18e4      	addhi	r4, r4, r3
 8005834:	e7f2      	b.n	800581c <floor+0xd4>
 8005836:	2500      	movs	r5, #0
 8005838:	462c      	mov	r4, r5
 800583a:	e7a7      	b.n	800578c <floor+0x44>
 800583c:	f3af 8000 	nop.w
 8005840:	8800759c 	.word	0x8800759c
 8005844:	7e37e43c 	.word	0x7e37e43c
 8005848:	bff00000 	.word	0xbff00000
 800584c:	000fffff 	.word	0x000fffff

08005850 <_init>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr

0800585c <_fini>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr
