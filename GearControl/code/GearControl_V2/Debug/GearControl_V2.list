
GearControl_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005548  08005548  00015548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005574  08005574  000200f4  2**0
                  CONTENTS
  4 .ARM          00000008  08005574  08005574  00015574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800557c  0800557c  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800557c  0800557c  0001557c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  08005584  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  200000f8  08005678  000200f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08005678  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdfa  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c54  00000000  00000000  0002ff1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  00032b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  00033a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b1a  00000000  00000000  00034800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001244d  00000000  00000000  0005631a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cdcce  00000000  00000000  00068767  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00136435  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cf4  00000000  00000000  00136488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000f8 	.word	0x200000f8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005530 	.word	0x08005530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000fc 	.word	0x200000fc
 80001c4:	08005530 	.word	0x08005530

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <ADC_updateMinMax>:
static AdcDataChannel adc1Data[ADC_1_CHANNELS_COUNT];
static AdcDataChannel adc2Data[ADC_2_CHANNELS_COUNT];
static AdcDataChannel *const adcData[ADC_HANDLE_COUNT] = {&adc1Data[0U], &adc2Data[0U]};

#ifdef SHOW_MIN_MAX
void ADC_updateMinMax(__IO AdcDataChannel* adcChannel) {
 80004cc:	b480      	push	{r7}
 80004ce:	b083      	sub	sp, #12
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
	if (adcChannel != NULL) {
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d019      	beq.n	800050e <ADC_updateMinMax+0x42>
		if (adcChannel->avg < adcChannel->min) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	889b      	ldrh	r3, [r3, #4]
 80004de:	b29a      	uxth	r2, r3
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	8a1b      	ldrh	r3, [r3, #16]
 80004e4:	b29b      	uxth	r3, r3
 80004e6:	429a      	cmp	r2, r3
 80004e8:	d204      	bcs.n	80004f4 <ADC_updateMinMax+0x28>
			adcChannel->min = adcChannel->avg;
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	889b      	ldrh	r3, [r3, #4]
 80004ee:	b29a      	uxth	r2, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	821a      	strh	r2, [r3, #16]
		}
		if (adcChannel->avg > adcChannel->max) {
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	889b      	ldrh	r3, [r3, #4]
 80004f8:	b29a      	uxth	r2, r3
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	89db      	ldrh	r3, [r3, #14]
 80004fe:	b29b      	uxth	r3, r3
 8000500:	429a      	cmp	r2, r3
 8000502:	d904      	bls.n	800050e <ADC_updateMinMax+0x42>
			adcChannel->max = adcChannel->avg;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	889b      	ldrh	r3, [r3, #4]
 8000508:	b29a      	uxth	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	81da      	strh	r2, [r3, #14]
		}
	}
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
	...

0800051c <ADC_getAdcStruct>:
#endif

__IO AdcDataChannel* ADC_getAdcStruct(const AdcHandleEnum adcHandle)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	4603      	mov	r3, r0
 8000524:	71fb      	strb	r3, [r7, #7]
	__IO AdcDataChannel* dmaAdc = NULL;
 8000526:	2300      	movs	r3, #0
 8000528:	60fb      	str	r3, [r7, #12]

	if (adcHandle < ADC_HANDLE_COUNT)
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d804      	bhi.n	800053a <ADC_getAdcStruct+0x1e>
	{
		dmaAdc = adcData[adcHandle];
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <ADC_getAdcStruct+0x2c>)
 8000534:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000538:	60fb      	str	r3, [r7, #12]
	}

	return dmaAdc;
 800053a:	68fb      	ldr	r3, [r7, #12]
}
 800053c:	4618      	mov	r0, r3
 800053e:	3714      	adds	r7, #20
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	08005554 	.word	0x08005554

0800054c <ADC_getAdcChannelPtr>:

__IO AdcDataChannel* ADC_getAdcChannelPtr(const AdcHandleEnum adcHandle, const AdcChannelEnum channel)
{
 800054c:	b480      	push	{r7}
 800054e:	b085      	sub	sp, #20
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]
	__IO AdcDataChannel* adcChannel = NULL;
 800055c:	2300      	movs	r3, #0
 800055e:	60fb      	str	r3, [r7, #12]

	if ((adcHandle < ADC_HANDLE_COUNT) && (channel <= adcChannelsMaxConversions[adcHandle]))
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d810      	bhi.n	8000588 <ADC_getAdcChannelPtr+0x3c>
 8000566:	79fb      	ldrb	r3, [r7, #7]
 8000568:	4a0b      	ldr	r2, [pc, #44]	; (8000598 <ADC_getAdcChannelPtr+0x4c>)
 800056a:	5cd3      	ldrb	r3, [r2, r3]
 800056c:	79ba      	ldrb	r2, [r7, #6]
 800056e:	429a      	cmp	r2, r3
 8000570:	d80a      	bhi.n	8000588 <ADC_getAdcChannelPtr+0x3c>
	{
		adcChannel = &adcData[adcHandle][channel];
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <ADC_getAdcChannelPtr+0x50>)
 8000576:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800057a:	79ba      	ldrb	r2, [r7, #6]
 800057c:	4613      	mov	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	4413      	add	r3, r2
 8000582:	009b      	lsls	r3, r3, #2
 8000584:	440b      	add	r3, r1
 8000586:	60fb      	str	r3, [r7, #12]
	}

	return adcChannel;
 8000588:	68fb      	ldr	r3, [r7, #12]
}
 800058a:	4618      	mov	r0, r3
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	08005548 	.word	0x08005548
 800059c:	08005554 	.word	0x08005554

080005a0 <ADC_Init>:

ErrorEnum ADC_Init(ADC_HandleTypeDef* adcHalHandle, const AdcHandleEnum adcHandle, const uint32 conversions)
{
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b087      	sub	sp, #28
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	460b      	mov	r3, r1
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	72fb      	strb	r3, [r7, #11]
	ErrorEnum err = ERROR_OK;
 80005ae:	2300      	movs	r3, #0
 80005b0:	75fb      	strb	r3, [r7, #23]

	if ((adcHandle < ADC_HANDLE_COUNT) && ((AdcChannelEnum)conversions <= adcChannelsMaxConversions[adcHandle]))
 80005b2:	7afb      	ldrb	r3, [r7, #11]
 80005b4:	2b01      	cmp	r3, #1
 80005b6:	d84b      	bhi.n	8000650 <ADC_Init+0xb0>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	7afb      	ldrb	r3, [r7, #11]
 80005be:	4928      	ldr	r1, [pc, #160]	; (8000660 <ADC_Init+0xc0>)
 80005c0:	5ccb      	ldrb	r3, [r1, r3]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	d844      	bhi.n	8000650 <ADC_Init+0xb0>
	{
		if (HAL_OK == HAL_ADC_Start_DMA(adcHalHandle, (uint32*)adcDmaBuffers[adcHandle], conversions))
 80005c6:	7afb      	ldrb	r3, [r7, #11]
 80005c8:	4a26      	ldr	r2, [pc, #152]	; (8000664 <ADC_Init+0xc4>)
 80005ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ce:	687a      	ldr	r2, [r7, #4]
 80005d0:	4619      	mov	r1, r3
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	f002 f83e 	bl	8002654 <HAL_ADC_Start_DMA>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d135      	bne.n	800064a <ADC_Init+0xaa>
		{
			for (uint32_t channel = 0U; channel < conversions; ++channel) {
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]
 80005e2:	e02d      	b.n	8000640 <ADC_Init+0xa0>
				adcData[adcHandle][channel].raw = &adcDmaBuffers[adcHandle][channel];
 80005e4:	7afb      	ldrb	r3, [r7, #11]
 80005e6:	4a1f      	ldr	r2, [pc, #124]	; (8000664 <ADC_Init+0xc4>)
 80005e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80005ec:	693b      	ldr	r3, [r7, #16]
 80005ee:	0059      	lsls	r1, r3, #1
 80005f0:	7afb      	ldrb	r3, [r7, #11]
 80005f2:	4a1d      	ldr	r2, [pc, #116]	; (8000668 <ADC_Init+0xc8>)
 80005f4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005f8:	693a      	ldr	r2, [r7, #16]
 80005fa:	4613      	mov	r3, r2
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	4413      	add	r3, r2
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	4423      	add	r3, r4
 8000604:	1842      	adds	r2, r0, r1
 8000606:	601a      	str	r2, [r3, #0]

#ifdef SHOW_MIN_MAX
				adcData[adcHandle][channel].max = 0U;
 8000608:	7afb      	ldrb	r3, [r7, #11]
 800060a:	4a17      	ldr	r2, [pc, #92]	; (8000668 <ADC_Init+0xc8>)
 800060c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4613      	mov	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	4413      	add	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	440b      	add	r3, r1
 800061c:	2200      	movs	r2, #0
 800061e:	81da      	strh	r2, [r3, #14]
				adcData[adcHandle][channel].min = 0xFFFFU;
 8000620:	7afb      	ldrb	r3, [r7, #11]
 8000622:	4a11      	ldr	r2, [pc, #68]	; (8000668 <ADC_Init+0xc8>)
 8000624:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	4613      	mov	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	009b      	lsls	r3, r3, #2
 8000632:	440b      	add	r3, r1
 8000634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000638:	821a      	strh	r2, [r3, #16]
			for (uint32_t channel = 0U; channel < conversions; ++channel) {
 800063a:	693b      	ldr	r3, [r7, #16]
 800063c:	3301      	adds	r3, #1
 800063e:	613b      	str	r3, [r7, #16]
 8000640:	693a      	ldr	r2, [r7, #16]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	429a      	cmp	r2, r3
 8000646:	d3cd      	bcc.n	80005e4 <ADC_Init+0x44>
		if (HAL_OK == HAL_ADC_Start_DMA(adcHalHandle, (uint32*)adcDmaBuffers[adcHandle], conversions))
 8000648:	e004      	b.n	8000654 <ADC_Init+0xb4>
#endif
			}
		} else {
			err = ERROR_HAL;
 800064a:	2304      	movs	r3, #4
 800064c:	75fb      	strb	r3, [r7, #23]
		if (HAL_OK == HAL_ADC_Start_DMA(adcHalHandle, (uint32*)adcDmaBuffers[adcHandle], conversions))
 800064e:	e001      	b.n	8000654 <ADC_Init+0xb4>
		}
	} else {
		err = ERROR_OOR;
 8000650:	2303      	movs	r3, #3
 8000652:	75fb      	strb	r3, [r7, #23]
	}

	return err;
 8000654:	7dfb      	ldrb	r3, [r7, #23]
}
 8000656:	4618      	mov	r0, r3
 8000658:	371c      	adds	r7, #28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	bf00      	nop
 8000660:	08005548 	.word	0x08005548
 8000664:	0800554c 	.word	0x0800554c
 8000668:	08005554 	.word	0x08005554

0800066c <DBW_Init>:

/* Plausibility */
static void DBW_PlausibilityCheck(PlausibilityParamType *const plausibility, const uint16 sens1, const uint16 sens2, ErrorEnum *const error);

ErrorEnum DBW_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
	ErrorEnum err = ERROR_OK;
 8000672:	2300      	movs	r3, #0
 8000674:	71fb      	strb	r3, [r7, #7]

	tps_.tps1 = ADC_getAdcChannelPtr(ADC_2_HANDLE, ADC_CHANNEL_TPS_1);
 8000676:	2100      	movs	r1, #0
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff ff67 	bl	800054c <ADC_getAdcChannelPtr>
 800067e:	4603      	mov	r3, r0
 8000680:	4a39      	ldr	r2, [pc, #228]	; (8000768 <DBW_Init+0xfc>)
 8000682:	6013      	str	r3, [r2, #0]
	tps_.tps2 = ADC_getAdcChannelPtr(ADC_2_HANDLE, ADC_CHANNEL_TPS_2);
 8000684:	2101      	movs	r1, #1
 8000686:	2001      	movs	r0, #1
 8000688:	f7ff ff60 	bl	800054c <ADC_getAdcChannelPtr>
 800068c:	4603      	mov	r3, r0
 800068e:	4a36      	ldr	r2, [pc, #216]	; (8000768 <DBW_Init+0xfc>)
 8000690:	6053      	str	r3, [r2, #4]
	apps_.apps1 = ADC_getAdcChannelPtr(ADC_2_HANDLE, ADC_CHANNEL_APPS_1);
 8000692:	2102      	movs	r1, #2
 8000694:	2001      	movs	r0, #1
 8000696:	f7ff ff59 	bl	800054c <ADC_getAdcChannelPtr>
 800069a:	4603      	mov	r3, r0
 800069c:	4a33      	ldr	r2, [pc, #204]	; (800076c <DBW_Init+0x100>)
 800069e:	6013      	str	r3, [r2, #0]
	apps_.apps2 = ADC_getAdcChannelPtr(ADC_2_HANDLE, ADC_CHANNEL_APPS_2);
 80006a0:	2103      	movs	r1, #3
 80006a2:	2001      	movs	r0, #1
 80006a4:	f7ff ff52 	bl	800054c <ADC_getAdcChannelPtr>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a30      	ldr	r2, [pc, #192]	; (800076c <DBW_Init+0x100>)
 80006ac:	6053      	str	r3, [r2, #4]

	if ((tps_.tps1 != NULL) && (tps_.tps1->raw != NULL) &&
 80006ae:	4b2e      	ldr	r3, [pc, #184]	; (8000768 <DBW_Init+0xfc>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d051      	beq.n	800075a <DBW_Init+0xee>
 80006b6:	4b2c      	ldr	r3, [pc, #176]	; (8000768 <DBW_Init+0xfc>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d04c      	beq.n	800075a <DBW_Init+0xee>
		(tps_.tps2 != NULL) && (tps_.tps2->raw != NULL) &&
 80006c0:	4b29      	ldr	r3, [pc, #164]	; (8000768 <DBW_Init+0xfc>)
 80006c2:	685b      	ldr	r3, [r3, #4]
	if ((tps_.tps1 != NULL) && (tps_.tps1->raw != NULL) &&
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d048      	beq.n	800075a <DBW_Init+0xee>
		(tps_.tps2 != NULL) && (tps_.tps2->raw != NULL) &&
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <DBW_Init+0xfc>)
 80006ca:	685b      	ldr	r3, [r3, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d043      	beq.n	800075a <DBW_Init+0xee>
		(apps_.apps1 != NULL) && (apps_.apps1->raw != NULL) &&
 80006d2:	4b26      	ldr	r3, [pc, #152]	; (800076c <DBW_Init+0x100>)
 80006d4:	681b      	ldr	r3, [r3, #0]
		(tps_.tps2 != NULL) && (tps_.tps2->raw != NULL) &&
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d03f      	beq.n	800075a <DBW_Init+0xee>
		(apps_.apps1 != NULL) && (apps_.apps1->raw != NULL) &&
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <DBW_Init+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d03a      	beq.n	800075a <DBW_Init+0xee>
		(apps_.apps2 != NULL) && (apps_.apps2->raw != NULL)) {
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <DBW_Init+0x100>)
 80006e6:	685b      	ldr	r3, [r3, #4]
		(apps_.apps1 != NULL) && (apps_.apps1->raw != NULL) &&
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d036      	beq.n	800075a <DBW_Init+0xee>
		(apps_.apps2 != NULL) && (apps_.apps2->raw != NULL)) {
 80006ec:	4b1f      	ldr	r3, [pc, #124]	; (800076c <DBW_Init+0x100>)
 80006ee:	685b      	ldr	r3, [r3, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d031      	beq.n	800075a <DBW_Init+0xee>

		err = SwTimerInit(&apps_.timer, APPS_CALIBRATION_TIME_MS, FALSE);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f241 3188 	movw	r1, #5000	; 0x1388
 80006fc:	481c      	ldr	r0, [pc, #112]	; (8000770 <DBW_Init+0x104>)
 80006fe:	f000 fdf3 	bl	80012e8 <SwTimerInit>
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
		if (err == ERROR_OK) {
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d104      	bne.n	8000716 <DBW_Init+0xaa>
			err = SwTimerRegister(&apps_.timer);
 800070c:	4818      	ldr	r0, [pc, #96]	; (8000770 <DBW_Init+0x104>)
 800070e:	f000 fe17 	bl	8001340 <SwTimerRegister>
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
		}

		if (err == ERROR_OK) {
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d10f      	bne.n	800073c <DBW_Init+0xd0>
			err = SwTimerInit(&tps_.timer, TPS_CALIBRATION_TIME_MS, FALSE);
 800071c:	2200      	movs	r2, #0
 800071e:	f241 3188 	movw	r1, #5000	; 0x1388
 8000722:	4814      	ldr	r0, [pc, #80]	; (8000774 <DBW_Init+0x108>)
 8000724:	f000 fde0 	bl	80012e8 <SwTimerInit>
 8000728:	4603      	mov	r3, r0
 800072a:	71fb      	strb	r3, [r7, #7]
			if (err == ERROR_OK) {
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d104      	bne.n	800073c <DBW_Init+0xd0>
				err = SwTimerRegister(&tps_.timer);
 8000732:	4810      	ldr	r0, [pc, #64]	; (8000774 <DBW_Init+0x108>)
 8000734:	f000 fe04 	bl	8001340 <SwTimerRegister>
 8000738:	4603      	mov	r3, r0
 800073a:	71fb      	strb	r3, [r7, #7]
			}
		}

		if (err == ERROR_OK) {
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d10d      	bne.n	800075e <DBW_Init+0xf2>
			if (DCMotorController_Init() == ERROR_OK) {
 8000742:	f000 fac7 	bl	8000cd4 <DCMotorController_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d103      	bne.n	8000754 <DBW_Init+0xe8>
				dbw.state = DBW_INIT;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <DBW_Init+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	721a      	strb	r2, [r3, #8]
		if (err == ERROR_OK) {
 8000752:	e004      	b.n	800075e <DBW_Init+0xf2>
			} else {
				err = ERROR_DBW_DC_MOTOR_INIT;
 8000754:	2307      	movs	r3, #7
 8000756:	71fb      	strb	r3, [r7, #7]
		if (err == ERROR_OK) {
 8000758:	e001      	b.n	800075e <DBW_Init+0xf2>
			}
		}
	} else {
		err = ERROR_NULL;
 800075a:	2302      	movs	r3, #2
 800075c:	71fb      	strb	r3, [r7, #7]
	}

	return err;
 800075e:	79fb      	ldrb	r3, [r7, #7]
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000018 	.word	0x20000018
 800076c:	20000048 	.word	0x20000048
 8000770:	20000064 	.word	0x20000064
 8000774:	2000003c 	.word	0x2000003c
 8000778:	20000070 	.word	0x20000070

0800077c <DBW_RequestAppsCalibration>:

void DBW_RequestAppsCalibration(void) {
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	if (dbw.state != DBW_DISABLED) {
 8000780:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <DBW_RequestAppsCalibration+0x30>)
 8000782:	7a1b      	ldrb	r3, [r3, #8]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d00e      	beq.n	80007a6 <DBW_RequestAppsCalibration+0x2a>
		DCMotorController_Disable();
 8000788:	f000 fb10 	bl	8000dac <DCMotorController_Disable>
		SwTimerStart(&apps_.timer);
 800078c:	4808      	ldr	r0, [pc, #32]	; (80007b0 <DBW_RequestAppsCalibration+0x34>)
 800078e:	f000 fe01 	bl	8001394 <SwTimerStart>
		apps_.min = 0xFFFFU;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <DBW_RequestAppsCalibration+0x38>)
 8000794:	4a08      	ldr	r2, [pc, #32]	; (80007b8 <DBW_RequestAppsCalibration+0x3c>)
 8000796:	615a      	str	r2, [r3, #20]
		apps_.max = 0U;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <DBW_RequestAppsCalibration+0x38>)
 800079a:	f04f 0200 	mov.w	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
		dbw.state = DBW_CALIBRATE_APPS;
 80007a0:	4b02      	ldr	r3, [pc, #8]	; (80007ac <DBW_RequestAppsCalibration+0x30>)
 80007a2:	2202      	movs	r2, #2
 80007a4:	721a      	strb	r2, [r3, #8]
	}
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000070 	.word	0x20000070
 80007b0:	20000064 	.word	0x20000064
 80007b4:	20000048 	.word	0x20000048
 80007b8:	477fff00 	.word	0x477fff00

080007bc <DBW_Handler_Init>:

static DBW_States DBW_Handler_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	DBW_States nextState = DBW_INIT;
 80007c2:	2300      	movs	r3, #0
 80007c4:	71fb      	strb	r3, [r7, #7]

	if (HAL_GetTick() > TPS_INIT_DELAY_MS) {
 80007c6:	f001 fef5 	bl	80025b4 <HAL_GetTick>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b64      	cmp	r3, #100	; 0x64
 80007ce:	d950      	bls.n	8000872 <DBW_Handler_Init+0xb6>
		/* Get idle min/max values */
		if (tps_.tps2->avg > tps_.idlePosMax) {
 80007d0:	4b2a      	ldr	r3, [pc, #168]	; (800087c <DBW_Handler_Init+0xc0>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	889b      	ldrh	r3, [r3, #4]
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <DBW_Handler_Init+0xc0>)
 80007da:	899b      	ldrh	r3, [r3, #12]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d905      	bls.n	80007ec <DBW_Handler_Init+0x30>
			tps_.idlePosMax = tps_.tps2->avg;
 80007e0:	4b26      	ldr	r3, [pc, #152]	; (800087c <DBW_Handler_Init+0xc0>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	889b      	ldrh	r3, [r3, #4]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <DBW_Handler_Init+0xc0>)
 80007ea:	819a      	strh	r2, [r3, #12]
		}

		if (tps_.tps2->avg < tps_.idlePosMin) {
 80007ec:	4b23      	ldr	r3, [pc, #140]	; (800087c <DBW_Handler_Init+0xc0>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	889b      	ldrh	r3, [r3, #4]
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <DBW_Handler_Init+0xc0>)
 80007f6:	895b      	ldrh	r3, [r3, #10]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	d205      	bcs.n	8000808 <DBW_Handler_Init+0x4c>
			tps_.idlePosMin = tps_.tps2->avg;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <DBW_Handler_Init+0xc0>)
 80007fe:	685b      	ldr	r3, [r3, #4]
 8000800:	889b      	ldrh	r3, [r3, #4]
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b1d      	ldr	r3, [pc, #116]	; (800087c <DBW_Handler_Init+0xc0>)
 8000806:	815a      	strh	r2, [r3, #10]
		}

		/* TPS IDLE calibration */
		if (HAL_GetTick() > (TPS_INIT_DELAY_MS + TPS_INIT_CALIBRATION_MS)) {
 8000808:	f001 fed4 	bl	80025b4 <HAL_GetTick>
 800080c:	4603      	mov	r3, r0
 800080e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000812:	d92e      	bls.n	8000872 <DBW_Handler_Init+0xb6>
			nextState = DBW_DISABLED;
 8000814:	2303      	movs	r3, #3
 8000816:	71fb      	strb	r3, [r7, #7]

			// 728/735
			if (abs(tps_.idlePosMax - tps_.idlePosMin) < 10U) {
 8000818:	4b18      	ldr	r3, [pc, #96]	; (800087c <DBW_Handler_Init+0xc0>)
 800081a:	899b      	ldrh	r3, [r3, #12]
 800081c:	461a      	mov	r2, r3
 800081e:	4b17      	ldr	r3, [pc, #92]	; (800087c <DBW_Handler_Init+0xc0>)
 8000820:	895b      	ldrh	r3, [r3, #10]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	2b00      	cmp	r3, #0
 8000826:	bfb8      	it	lt
 8000828:	425b      	neglt	r3, r3
 800082a:	2b09      	cmp	r3, #9
 800082c:	d81d      	bhi.n	800086a <DBW_Handler_Init+0xae>
				tps_.constTpsIdle = (uint16)((tps_.idlePosMax + tps_.idlePosMin) / 2U);
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <DBW_Handler_Init+0xc0>)
 8000830:	899b      	ldrh	r3, [r3, #12]
 8000832:	461a      	mov	r2, r3
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <DBW_Handler_Init+0xc0>)
 8000836:	895b      	ldrh	r3, [r3, #10]
 8000838:	4413      	add	r3, r2
 800083a:	085b      	lsrs	r3, r3, #1
 800083c:	b29a      	uxth	r2, r3
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <DBW_Handler_Init+0xc0>)
 8000840:	811a      	strh	r2, [r3, #8]

				if (abs(TPS_INIT_IDLE_EXPECTED - tps_.constTpsIdle) < 10U) {
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <DBW_Handler_Init+0xc0>)
 8000844:	891b      	ldrh	r3, [r3, #8]
 8000846:	f5c3 7337 	rsb	r3, r3, #732	; 0x2dc
 800084a:	3301      	adds	r3, #1
 800084c:	2b00      	cmp	r3, #0
 800084e:	bfb8      	it	lt
 8000850:	425b      	neglt	r3, r3
 8000852:	2b09      	cmp	r3, #9
 8000854:	d804      	bhi.n	8000860 <DBW_Handler_Init+0xa4>
					/* Init OK */
					nextState = DBW_CALIBRATE_APPS;
 8000856:	2302      	movs	r3, #2
 8000858:	71fb      	strb	r3, [r7, #7]
					DBW_RequestAppsCalibration();
 800085a:	f7ff ff8f 	bl	800077c <DBW_RequestAppsCalibration>
 800085e:	e008      	b.n	8000872 <DBW_Handler_Init+0xb6>
				} else {
					tps_.error = ERROR_DBW_TPS_INIT;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <DBW_Handler_Init+0xc0>)
 8000862:	2205      	movs	r2, #5
 8000864:	f883 2020 	strb.w	r2, [r3, #32]
 8000868:	e003      	b.n	8000872 <DBW_Handler_Init+0xb6>
				}
			} else {
				tps_.error = ERROR_DBW_TPS_INIT;
 800086a:	4b04      	ldr	r3, [pc, #16]	; (800087c <DBW_Handler_Init+0xc0>)
 800086c:	2205      	movs	r2, #5
 800086e:	f883 2020 	strb.w	r2, [r3, #32]
			}
		}
	}

	return nextState;
 8000872:	79fb      	ldrb	r3, [r7, #7]
}
 8000874:	4618      	mov	r0, r3
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	20000018 	.word	0x20000018

08000880 <DBW_Handler_Run>:

static DBW_States DBW_Handler_Run(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
	float position = DBW_ConvertTpsRawValue();
 8000886:	f000 f8f9 	bl	8000a7c <DBW_ConvertTpsRawValue>
 800088a:	ed87 0a03 	vstr	s0, [r7, #12]
	float target = DBW_ConvertAppsRawValue();
 800088e:	f000 f947 	bl	8000b20 <DBW_ConvertAppsRawValue>
 8000892:	ed87 0a02 	vstr	s0, [r7, #8]

	float pidOut = PID_Update(target, position);
 8000896:	edd7 0a03 	vldr	s1, [r7, #12]
 800089a:	ed97 0a02 	vldr	s0, [r7, #8]
 800089e:	f000 fabd 	bl	8000e1c <PID_Update>
 80008a2:	ed87 0a01 	vstr	s0, [r7, #4]

	if (target > position) {
 80008a6:	ed97 7a02 	vldr	s14, [r7, #8]
 80008aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80008ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008b6:	dd05      	ble.n	80008c4 <DBW_Handler_Run+0x44>
		DCMotorController_Update(pidOut, DC_MOTOR_ROTATE_PLUS);
 80008b8:	2001      	movs	r0, #1
 80008ba:	ed97 0a01 	vldr	s0, [r7, #4]
 80008be:	f000 fa3f 	bl	8000d40 <DCMotorController_Update>
 80008c2:	e004      	b.n	80008ce <DBW_Handler_Run+0x4e>
	} else {
		DCMotorController_Update(pidOut, DC_MOTOR_ROTATE_MINUS);
 80008c4:	2000      	movs	r0, #0
 80008c6:	ed97 0a01 	vldr	s0, [r7, #4]
 80008ca:	f000 fa39 	bl	8000d40 <DCMotorController_Update>
	}

	return DBW_RUN;
 80008ce:	2301      	movs	r3, #1
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3710      	adds	r7, #16
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}

080008d8 <DBW_Handler_calibrateAPPS>:

static DBW_States DBW_Handler_calibrateAPPS(void) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	DBW_States nextState = DBW_CALIBRATE_APPS;
 80008de:	2302      	movs	r3, #2
 80008e0:	71fb      	strb	r3, [r7, #7]

	if (!SwTimerHasTimerElapsed(&apps_.timer)) {
 80008e2:	4835      	ldr	r0, [pc, #212]	; (80009b8 <DBW_Handler_calibrateAPPS+0xe0>)
 80008e4:	f000 fd70 	bl	80013c8 <SwTimerHasTimerElapsed>
 80008e8:	4603      	mov	r3, r0
 80008ea:	f083 0301 	eor.w	r3, r3, #1
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d03a      	beq.n	800096a <DBW_Handler_calibrateAPPS+0x92>
		if (*apps_.apps2->raw < apps_.min) {
 80008f4:	4b31      	ldr	r3, [pc, #196]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	b29b      	uxth	r3, r3
 80008fe:	ee07 3a90 	vmov	s15, r3
 8000902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000906:	4b2d      	ldr	r3, [pc, #180]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 8000908:	edd3 7a05 	vldr	s15, [r3, #20]
 800090c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000914:	d50b      	bpl.n	800092e <DBW_Handler_calibrateAPPS+0x56>
			apps_.min = *apps_.apps2->raw;
 8000916:	4b29      	ldr	r3, [pc, #164]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	b29b      	uxth	r3, r3
 8000920:	ee07 3a90 	vmov	s15, r3
 8000924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000928:	4b24      	ldr	r3, [pc, #144]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 800092a:	edc3 7a05 	vstr	s15, [r3, #20]
		}
		if (*apps_.apps2->raw > apps_.max) {
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	881b      	ldrh	r3, [r3, #0]
 8000936:	b29b      	uxth	r3, r3
 8000938:	ee07 3a90 	vmov	s15, r3
 800093c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 8000942:	edd3 7a04 	vldr	s15, [r3, #16]
 8000946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800094a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800094e:	dd2d      	ble.n	80009ac <DBW_Handler_calibrateAPPS+0xd4>
			apps_.max = *apps_.apps2->raw;
 8000950:	4b1a      	ldr	r3, [pc, #104]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 8000952:	685b      	ldr	r3, [r3, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	b29b      	uxth	r3, r3
 800095a:	ee07 3a90 	vmov	s15, r3
 800095e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000962:	4b16      	ldr	r3, [pc, #88]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 8000964:	edc3 7a04 	vstr	s15, [r3, #16]
 8000968:	e020      	b.n	80009ac <DBW_Handler_calibrateAPPS+0xd4>
		}
	} else {
		if ((uint16_t)abs(ADC_MAX - (apps_.min + apps_.max)) < APPS_ADC_MAX_DIFF_THRESHOLD) {
 800096a:	4b14      	ldr	r3, [pc, #80]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 800096c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000970:	4b12      	ldr	r3, [pc, #72]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 8000972:	edd3 7a04 	vldr	s15, [r3, #16]
 8000976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800097a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80009c0 <DBW_Handler_calibrateAPPS+0xe8>
 800097e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000986:	ee17 3a90 	vmov	r3, s15
 800098a:	2b00      	cmp	r3, #0
 800098c:	bfb8      	it	lt
 800098e:	425b      	neglt	r3, r3
 8000990:	b29b      	uxth	r3, r3
 8000992:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000996:	d204      	bcs.n	80009a2 <DBW_Handler_calibrateAPPS+0xca>
			/* Calibration OK */
			DCMotorController_Enable();
 8000998:	f000 fa24 	bl	8000de4 <DCMotorController_Enable>
			nextState = DBW_RUN;
 800099c:	2301      	movs	r3, #1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	e004      	b.n	80009ac <DBW_Handler_calibrateAPPS+0xd4>
		} else {
			nextState = DBW_DISABLED;
 80009a2:	2303      	movs	r3, #3
 80009a4:	71fb      	strb	r3, [r7, #7]
			apps_.error = ERROR_DBW_APPS_INIT;
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <DBW_Handler_calibrateAPPS+0xe4>)
 80009a8:	2206      	movs	r2, #6
 80009aa:	721a      	strb	r2, [r3, #8]
		}
	}

	return nextState;
 80009ac:	79fb      	ldrb	r3, [r7, #7]
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	20000064 	.word	0x20000064
 80009bc:	20000048 	.word	0x20000048
 80009c0:	45800000 	.word	0x45800000

080009c4 <DBW_Process>:
	}
	DCMotorController_Disable();
}

void DBW_Process(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	switch (dbw.state)
 80009c8:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <DBW_Process+0xa4>)
 80009ca:	7a1b      	ldrb	r3, [r3, #8]
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d00d      	beq.n	80009ec <DBW_Process+0x28>
 80009d0:	2b02      	cmp	r3, #2
 80009d2:	dc44      	bgt.n	8000a5e <DBW_Process+0x9a>
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <DBW_Process+0x1a>
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d00e      	beq.n	80009fa <DBW_Process+0x36>
 80009dc:	e03f      	b.n	8000a5e <DBW_Process+0x9a>
	{
		case DBW_INIT:
			dbw.state = DBW_Handler_Init();
 80009de:	f7ff feed 	bl	80007bc <DBW_Handler_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <DBW_Process+0xa4>)
 80009e8:	721a      	strb	r2, [r3, #8]
			break;
 80009ea:	e03b      	b.n	8000a64 <DBW_Process+0xa0>

		case DBW_CALIBRATE_APPS:
			dbw.state = DBW_Handler_calibrateAPPS();
 80009ec:	f7ff ff74 	bl	80008d8 <DBW_Handler_calibrateAPPS>
 80009f0:	4603      	mov	r3, r0
 80009f2:	461a      	mov	r2, r3
 80009f4:	4b1c      	ldr	r3, [pc, #112]	; (8000a68 <DBW_Process+0xa4>)
 80009f6:	721a      	strb	r2, [r3, #8]
			break;
 80009f8:	e034      	b.n	8000a64 <DBW_Process+0xa0>

		case DBW_RUN:
			DBW_PlausibilityCheck(tps_.plausibility, *tps_.tps1->raw, *tps_.tps2->raw, &tps_.error);
 80009fa:	4b1c      	ldr	r3, [pc, #112]	; (8000a6c <DBW_Process+0xa8>)
 80009fc:	69d8      	ldr	r0, [r3, #28]
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <DBW_Process+0xa8>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	b299      	uxth	r1, r3
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <DBW_Process+0xa8>)
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	4b17      	ldr	r3, [pc, #92]	; (8000a70 <DBW_Process+0xac>)
 8000a14:	f000 f8d6 	bl	8000bc4 <DBW_PlausibilityCheck>
			DBW_PlausibilityCheck(apps_.plausibility, *apps_.apps1->raw, *apps_.apps2->raw, &apps_.error);
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <DBW_Process+0xb0>)
 8000a1a:	68d8      	ldr	r0, [r3, #12]
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <DBW_Process+0xb0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	b299      	uxth	r1, r3
 8000a26:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <DBW_Process+0xb0>)
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	881b      	ldrh	r3, [r3, #0]
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <DBW_Process+0xb4>)
 8000a32:	f000 f8c7 	bl	8000bc4 <DBW_PlausibilityCheck>

			if ((apps_.error == ERROR_OK) && (tps_.error == ERROR_OK)) {
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <DBW_Process+0xb0>)
 8000a38:	7a1b      	ldrb	r3, [r3, #8]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d10b      	bne.n	8000a56 <DBW_Process+0x92>
 8000a3e:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <DBW_Process+0xa8>)
 8000a40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d106      	bne.n	8000a56 <DBW_Process+0x92>
				dbw.state = DBW_Handler_Run();
 8000a48:	f7ff ff1a 	bl	8000880 <DBW_Handler_Run>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <DBW_Process+0xa4>)
 8000a52:	721a      	strb	r2, [r3, #8]
			} else {
				dbw.state = DBW_DISABLED;
			}
			break;
 8000a54:	e006      	b.n	8000a64 <DBW_Process+0xa0>
				dbw.state = DBW_DISABLED;
 8000a56:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <DBW_Process+0xa4>)
 8000a58:	2203      	movs	r2, #3
 8000a5a:	721a      	strb	r2, [r3, #8]
			break;
 8000a5c:	e002      	b.n	8000a64 <DBW_Process+0xa0>

		case DBW_DISABLED:
		default:
			DCMotorController_Disable();
 8000a5e:	f000 f9a5 	bl	8000dac <DCMotorController_Disable>
			break;
 8000a62:	bf00      	nop
	}
}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000070 	.word	0x20000070
 8000a6c:	20000018 	.word	0x20000018
 8000a70:	20000038 	.word	0x20000038
 8000a74:	20000048 	.word	0x20000048
 8000a78:	20000050 	.word	0x20000050

08000a7c <DBW_ConvertTpsRawValue>:
	//return dbw.adcTps2->avg;
	return 0;
}

static float DBW_ConvertTpsRawValue(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
	float tpsPos = TPS_POS_MIN;
 8000a82:	f04f 0300 	mov.w	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]

	if (*tps_.tps2->raw >= tps_.min) {
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <DBW_ConvertTpsRawValue+0x98>)
 8000a8a:	685b      	ldr	r3, [r3, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	881b      	ldrh	r3, [r3, #0]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	ee07 3a90 	vmov	s15, r3
 8000a96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a9a:	4b1e      	ldr	r3, [pc, #120]	; (8000b14 <DBW_ConvertTpsRawValue+0x98>)
 8000a9c:	edd3 7a05 	vldr	s15, [r3, #20]
 8000aa0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa8:	db2a      	blt.n	8000b00 <DBW_ConvertTpsRawValue+0x84>
		tpsPos = ((float)*tps_.tps2->raw - tps_.min) * APPS_DIVISOR(tps_.min, tps_.max);
 8000aaa:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <DBW_ConvertTpsRawValue+0x98>)
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	ee07 3a90 	vmov	s15, r3
 8000ab8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <DBW_ConvertTpsRawValue+0x98>)
 8000abe:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ac6:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <DBW_ConvertTpsRawValue+0x98>)
 8000ac8:	edd3 6a04 	vldr	s13, [r3, #16]
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <DBW_ConvertTpsRawValue+0x98>)
 8000ace:	edd3 7a05 	vldr	s15, [r3, #20]
 8000ad2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000ad6:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8000b18 <DBW_ConvertTpsRawValue+0x9c>
 8000ada:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ae2:	edc7 7a01 	vstr	s15, [r7, #4]
		tpsPos = CLAMP_MAX(tpsPos, TPS_POS_MAX);
 8000ae6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aea:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000b18 <DBW_ConvertTpsRawValue+0x9c>
 8000aee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af6:	dd01      	ble.n	8000afc <DBW_ConvertTpsRawValue+0x80>
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <DBW_ConvertTpsRawValue+0xa0>)
 8000afa:	e000      	b.n	8000afe <DBW_ConvertTpsRawValue+0x82>
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	607b      	str	r3, [r7, #4]
	}

	return tpsPos;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	ee07 3a90 	vmov	s15, r3
}
 8000b06:	eeb0 0a67 	vmov.f32	s0, s15
 8000b0a:	370c      	adds	r7, #12
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	20000018 	.word	0x20000018
 8000b18:	447a0000 	.word	0x447a0000
 8000b1c:	447a0000 	.word	0x447a0000

08000b20 <DBW_ConvertAppsRawValue>:

static float DBW_ConvertAppsRawValue(void) {
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
	float targetApps = APPS_POS_MIN;
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]

	if (*apps_.apps2->raw >= apps_.min) {
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <DBW_ConvertAppsRawValue+0x98>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	881b      	ldrh	r3, [r3, #0]
 8000b34:	b29b      	uxth	r3, r3
 8000b36:	ee07 3a90 	vmov	s15, r3
 8000b3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000b3e:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <DBW_ConvertAppsRawValue+0x98>)
 8000b40:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4c:	db2a      	blt.n	8000ba4 <DBW_ConvertAppsRawValue+0x84>
		targetApps = ((float)*apps_.apps2->raw - apps_.min) * APPS_DIVISOR(apps_.min, apps_.max);
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <DBW_ConvertAppsRawValue+0x98>)
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	ee07 3a90 	vmov	s15, r3
 8000b5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b60:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <DBW_ConvertAppsRawValue+0x98>)
 8000b62:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <DBW_ConvertAppsRawValue+0x98>)
 8000b6c:	edd3 6a04 	vldr	s13, [r3, #16]
 8000b70:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <DBW_ConvertAppsRawValue+0x98>)
 8000b72:	edd3 7a05 	vldr	s15, [r3, #20]
 8000b76:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000b7a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8000bbc <DBW_ConvertAppsRawValue+0x9c>
 8000b7e:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b86:	edc7 7a01 	vstr	s15, [r7, #4]
		targetApps = CLAMP_MAX(targetApps, APPS_POS_MAX);
 8000b8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b8e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000bbc <DBW_ConvertAppsRawValue+0x9c>
 8000b92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9a:	dd01      	ble.n	8000ba0 <DBW_ConvertAppsRawValue+0x80>
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <DBW_ConvertAppsRawValue+0xa0>)
 8000b9e:	e000      	b.n	8000ba2 <DBW_ConvertAppsRawValue+0x82>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	607b      	str	r3, [r7, #4]
	}

	return targetApps;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	ee07 3a90 	vmov	s15, r3
}
 8000baa:	eeb0 0a67 	vmov.f32	s0, s15
 8000bae:	370c      	adds	r7, #12
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr
 8000bb8:	20000048 	.word	0x20000048
 8000bbc:	447a0000 	.word	0x447a0000
 8000bc0:	447a0000 	.word	0x447a0000

08000bc4 <DBW_PlausibilityCheck>:

static void DBW_PlausibilityCheck(PlausibilityParamType *const plausibility, const uint16 sens1, const uint16 sens2, ErrorEnum *const error)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	607b      	str	r3, [r7, #4]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	817b      	strh	r3, [r7, #10]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	813b      	strh	r3, [r7, #8]
	plausibility->absDiff = (uint16_t)abs(ADC_MAX - (sens1 + sens2));
 8000bd6:	897a      	ldrh	r2, [r7, #10]
 8000bd8:	893b      	ldrh	r3, [r7, #8]
 8000bda:	4413      	add	r3, r2
 8000bdc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bfb8      	it	lt
 8000be4:	425b      	neglt	r3, r3
 8000be6:	b29a      	uxth	r2, r3
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	809a      	strh	r2, [r3, #4]

	if (plausibility->absDiff > plausibility->maxAbsDiff) {
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	889a      	ldrh	r2, [r3, #4]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	88db      	ldrh	r3, [r3, #6]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d903      	bls.n	8000c00 <DBW_PlausibilityCheck+0x3c>
		plausibility->maxAbsDiff = plausibility->absDiff;
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	889a      	ldrh	r2, [r3, #4]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	80da      	strh	r2, [r3, #6]
	}

	if ((plausibility->absDiff) < plausibility->maxDiffAllowed) {
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	889a      	ldrh	r2, [r3, #4]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d20a      	bcs.n	8000c22 <DBW_PlausibilityCheck+0x5e>
		if (plausibility->debounceCnt > 0U) {
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	7a1b      	ldrb	r3, [r3, #8]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d010      	beq.n	8000c36 <DBW_PlausibilityCheck+0x72>
			--plausibility->debounceCnt;
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	7a1b      	ldrb	r3, [r3, #8]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	721a      	strb	r2, [r3, #8]
 8000c20:	e009      	b.n	8000c36 <DBW_PlausibilityCheck+0x72>
		}
	} else {
		if (*error == ERROR_OK) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d105      	bne.n	8000c36 <DBW_PlausibilityCheck+0x72>
			++plausibility->debounceCnt;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	7a1b      	ldrb	r3, [r3, #8]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	721a      	strb	r2, [r3, #8]
		}
	}

	if (plausibility->debounceCnt == 0U) {
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	7a1b      	ldrb	r3, [r3, #8]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <DBW_PlausibilityCheck+0x82>
		*error = ERROR_OK;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
	}
	else if (plausibility->debounceCnt > plausibility->debounceMs) {
		*error = plausibility->errorFlag;
	}
	else { /* Nothing */ }
}
 8000c44:	e009      	b.n	8000c5a <DBW_PlausibilityCheck+0x96>
	else if (plausibility->debounceCnt > plausibility->debounceMs) {
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	7a1a      	ldrb	r2, [r3, #8]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	789b      	ldrb	r3, [r3, #2]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d903      	bls.n	8000c5a <DBW_PlausibilityCheck+0x96>
		*error = plausibility->errorFlag;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	78da      	ldrb	r2, [r3, #3]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	701a      	strb	r2, [r3, #0]
}
 8000c5a:	bf00      	nop
 8000c5c:	3714      	adds	r7, #20
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <DCMotorController_ResetPwm>:
DCMotorController dcController = {.PWM_H_plus = NULL, .PWM_H_minus = NULL};

static void DCMotorController_ResetPwm(void);
static uint32 DCMotorController_ConvertTargetToPwm(float target);

static void DCMotorController_ResetPwm(void) {
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
	*dcController.PWM_H_plus = 0U;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <DCMotorController_ResetPwm+0x20>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
	*dcController.PWM_H_minus = 0U;
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <DCMotorController_ResetPwm+0x20>)
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000198 	.word	0x20000198

08000c8c <DCMotorController_ConvertTargetToPwm>:

static uint32 DCMotorController_ConvertTargetToPwm(float target) {
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	ed87 0a01 	vstr	s0, [r7, #4]
	float pwmF = target * PWM_MULTIPLIER;
 8000c96:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c9a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000cd0 <DCMotorController_ConvertTargetToPwm+0x44>
 8000c9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ca2:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32 pwm_ = (uint32)pwmF;
 8000ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cae:	ee17 3a90 	vmov	r3, s15
 8000cb2:	60bb      	str	r3, [r7, #8]
	pwm_ = CLAMP_MAX(pwm_, PWM_DUTY_CYCLE_MAX);
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cba:	bf28      	it	cs
 8000cbc:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 8000cc0:	60bb      	str	r3, [r7, #8]
	pwm_ = CLAMP_MIN(pwm_, PWM_DUTY_CYCLE_MIN);
	return pwm_;
 8000cc2:	68bb      	ldr	r3, [r7, #8]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr
 8000cd0:	4056f9db 	.word	0x4056f9db

08000cd4 <DCMotorController_Init>:

ErrorEnum DCMotorController_Init(void) {
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
	ErrorEnum err = ERROR_OK;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	71fb      	strb	r3, [r7, #7]

	/* Start PWM timers for ETC */
	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK) {
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4815      	ldr	r0, [pc, #84]	; (8000d38 <DCMotorController_Init+0x64>)
 8000ce2:	f003 fd15 	bl	8004710 <HAL_TIM_PWM_Start>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <DCMotorController_Init+0x1c>
	  err = ERROR_HAL;
 8000cec:	2304      	movs	r3, #4
 8000cee:	71fb      	strb	r3, [r7, #7]
	}

	if (HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK) {
 8000cf0:	210c      	movs	r1, #12
 8000cf2:	4811      	ldr	r0, [pc, #68]	; (8000d38 <DCMotorController_Init+0x64>)
 8000cf4:	f003 fd0c 	bl	8004710 <HAL_TIM_PWM_Start>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <DCMotorController_Init+0x2e>
	  err = ERROR_HAL;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	71fb      	strb	r3, [r7, #7]
	}

	if (err == ERROR_OK) {
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d112      	bne.n	8000d2e <DCMotorController_Init+0x5a>

		if (htim1.Instance != NULL) {
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <DCMotorController_Init+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d00c      	beq.n	8000d2a <DCMotorController_Init+0x56>
			  dcController.PWM_H_plus = &htim1.Instance->CCR1;
 8000d10:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <DCMotorController_Init+0x64>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3334      	adds	r3, #52	; 0x34
 8000d16:	4a09      	ldr	r2, [pc, #36]	; (8000d3c <DCMotorController_Init+0x68>)
 8000d18:	6013      	str	r3, [r2, #0]
			  dcController.PWM_H_minus = &htim1.Instance->CCR4;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <DCMotorController_Init+0x64>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3340      	adds	r3, #64	; 0x40
 8000d20:	4a06      	ldr	r2, [pc, #24]	; (8000d3c <DCMotorController_Init+0x68>)
 8000d22:	6053      	str	r3, [r2, #4]
			  DCMotorController_Disable();
 8000d24:	f000 f842 	bl	8000dac <DCMotorController_Disable>
 8000d28:	e001      	b.n	8000d2e <DCMotorController_Init+0x5a>
		} else {
			err = ERROR_NULL;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	71fb      	strb	r3, [r7, #7]
		}
	}

	return err;
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000394 	.word	0x20000394
 8000d3c:	20000198 	.word	0x20000198

08000d40 <DCMotorController_Update>:

void DCMotorController_Update(float target, DCMotorDirectionEnum direction)
{
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	ed87 0a01 	vstr	s0, [r7, #4]
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	70fb      	strb	r3, [r7, #3]
	switch (direction) {
 8000d4e:	78fb      	ldrb	r3, [r7, #3]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d00e      	beq.n	8000d72 <DCMotorController_Update+0x32>
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d119      	bne.n	8000d8c <DCMotorController_Update+0x4c>
		case DC_MOTOR_ROTATE_PLUS:
			*dcController.PWM_H_minus = PWM_DUTY_CYCLE_MIN;
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <DCMotorController_Update+0x68>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
			*dcController.PWM_H_plus = DCMotorController_ConvertTargetToPwm(target);
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <DCMotorController_Update+0x68>)
 8000d62:	681c      	ldr	r4, [r3, #0]
 8000d64:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d68:	f7ff ff90 	bl	8000c8c <DCMotorController_ConvertTargetToPwm>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	6023      	str	r3, [r4, #0]
			break;
 8000d70:	e015      	b.n	8000d9e <DCMotorController_Update+0x5e>

		case DC_MOTOR_ROTATE_MINUS:
			*dcController.PWM_H_plus = PWM_DUTY_CYCLE_MIN;
 8000d72:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <DCMotorController_Update+0x68>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
			*dcController.PWM_H_minus = DCMotorController_ConvertTargetToPwm(target);
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <DCMotorController_Update+0x68>)
 8000d7c:	685c      	ldr	r4, [r3, #4]
 8000d7e:	ed97 0a01 	vldr	s0, [r7, #4]
 8000d82:	f7ff ff83 	bl	8000c8c <DCMotorController_ConvertTargetToPwm>
 8000d86:	4603      	mov	r3, r0
 8000d88:	6023      	str	r3, [r4, #0]
			break;
 8000d8a:	e008      	b.n	8000d9e <DCMotorController_Update+0x5e>

		case DC_MOTOR_DISABLED:
		default:
			*dcController.PWM_H_minus = PWM_DUTY_CYCLE_MIN;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <DCMotorController_Update+0x68>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
			*dcController.PWM_H_plus = PWM_DUTY_CYCLE_MIN;
 8000d94:	4b04      	ldr	r3, [pc, #16]	; (8000da8 <DCMotorController_Update+0x68>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
			break;
 8000d9c:	bf00      	nop
	}
}
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd90      	pop	{r4, r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000198 	.word	0x20000198

08000dac <DCMotorController_Disable>:

void DCMotorController_Disable(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000db0:	2200      	movs	r2, #0
 8000db2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db6:	4809      	ldr	r0, [pc, #36]	; (8000ddc <DCMotorController_Disable+0x30>)
 8000db8:	f002 ff34 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH1_GPIO_Port, INH1_Pin, GPIO_PIN_RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dc2:	4807      	ldr	r0, [pc, #28]	; (8000de0 <DCMotorController_Disable+0x34>)
 8000dc4:	f002 ff2e 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH2_GPIO_Port, INH2_Pin, GPIO_PIN_RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dce:	4804      	ldr	r0, [pc, #16]	; (8000de0 <DCMotorController_Disable+0x34>)
 8000dd0:	f002 ff28 	bl	8003c24 <HAL_GPIO_WritePin>

	DCMotorController_ResetPwm();
 8000dd4:	f7ff ff48 	bl	8000c68 <DCMotorController_ResetPwm>
}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40020800 	.word	0x40020800
 8000de0:	40020000 	.word	0x40020000

08000de4 <DCMotorController_Enable>:

void DCMotorController_Enable(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	/* Enable Throttle Body */
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dee:	4809      	ldr	r0, [pc, #36]	; (8000e14 <DCMotorController_Enable+0x30>)
 8000df0:	f002 ff18 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH1_GPIO_Port, INH1_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dfa:	4807      	ldr	r0, [pc, #28]	; (8000e18 <DCMotorController_Enable+0x34>)
 8000dfc:	f002 ff12 	bl	8003c24 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(INH2_GPIO_Port, INH2_Pin, GPIO_PIN_SET);
 8000e00:	2201      	movs	r2, #1
 8000e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e06:	4804      	ldr	r0, [pc, #16]	; (8000e18 <DCMotorController_Enable+0x34>)
 8000e08:	f002 ff0c 	bl	8003c24 <HAL_GPIO_WritePin>

	DCMotorController_ResetPwm();
 8000e0c:	f7ff ff2c 	bl	8000c68 <DCMotorController_ResetPwm>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40020800 	.word	0x40020800
 8000e18:	40020000 	.word	0x40020000

08000e1c <PID_Update>:
{
	(void)pid;
}

float PID_Update(float target, float measurement)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b087      	sub	sp, #28
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e26:	edc7 0a00 	vstr	s1, [r7]
	/* Error signal */
	float error = target - measurement;
 8000e2a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000e2e:	edd7 7a00 	vldr	s15, [r7]
 8000e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e36:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Proportional */
	float proportional = pid.Kp * error;
 8000e3a:	4b73      	ldr	r3, [pc, #460]	; (8001008 <PID_Update+0x1ec>)
 8000e3c:	edd3 7a00 	vldr	s15, [r3]
 8000e40:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e48:	edc7 7a02 	vstr	s15, [r7, #8]

	/* Integral */
	pid.integrator = pid.integrator + 0.5f * pid.Ki * pid.T * (error + pid.prevErr);
 8000e4c:	4b6e      	ldr	r3, [pc, #440]	; (8001008 <PID_Update+0x1ec>)
 8000e4e:	ed93 7a07 	vldr	s14, [r3, #28]
 8000e52:	4b6d      	ldr	r3, [pc, #436]	; (8001008 <PID_Update+0x1ec>)
 8000e54:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e58:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8000e5c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8000e60:	4b69      	ldr	r3, [pc, #420]	; (8001008 <PID_Update+0x1ec>)
 8000e62:	edd3 7a06 	vldr	s15, [r3, #24]
 8000e66:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e6a:	4b67      	ldr	r3, [pc, #412]	; (8001008 <PID_Update+0x1ec>)
 8000e6c:	ed93 6a08 	vldr	s12, [r3, #32]
 8000e70:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e74:	ee76 7a27 	vadd.f32	s15, s12, s15
 8000e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e80:	4b61      	ldr	r3, [pc, #388]	; (8001008 <PID_Update+0x1ec>)
 8000e82:	edc3 7a07 	vstr	s15, [r3, #28]

	/* Anti wind-up via dynamic integrator clamping */
	float limMinInt;
	float limMaxInt;

	if (pid.limMax > proportional)
 8000e86:	4b60      	ldr	r3, [pc, #384]	; (8001008 <PID_Update+0x1ec>)
 8000e88:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e8c:	ed97 7a02 	vldr	s14, [r7, #8]
 8000e90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e98:	d509      	bpl.n	8000eae <PID_Update+0x92>
	{
		limMaxInt = pid.limMax - proportional;
 8000e9a:	4b5b      	ldr	r3, [pc, #364]	; (8001008 <PID_Update+0x1ec>)
 8000e9c:	ed93 7a05 	vldr	s14, [r3, #20]
 8000ea0:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ea8:	edc7 7a04 	vstr	s15, [r7, #16]
 8000eac:	e002      	b.n	8000eb4 <PID_Update+0x98>
	}
	else
	{
		limMaxInt = 0.0f;
 8000eae:	f04f 0300 	mov.w	r3, #0
 8000eb2:	613b      	str	r3, [r7, #16]
	}

	if (pid.limMin < proportional)
 8000eb4:	4b54      	ldr	r3, [pc, #336]	; (8001008 <PID_Update+0x1ec>)
 8000eb6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000eba:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ebe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec6:	dd09      	ble.n	8000edc <PID_Update+0xc0>
	{
		limMinInt = pid.limMin - proportional;
 8000ec8:	4b4f      	ldr	r3, [pc, #316]	; (8001008 <PID_Update+0x1ec>)
 8000eca:	ed93 7a04 	vldr	s14, [r3, #16]
 8000ece:	edd7 7a02 	vldr	s15, [r7, #8]
 8000ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ed6:	edc7 7a05 	vstr	s15, [r7, #20]
 8000eda:	e002      	b.n	8000ee2 <PID_Update+0xc6>
	}
	else
	{
		limMinInt = 0.0f;
 8000edc:	f04f 0300 	mov.w	r3, #0
 8000ee0:	617b      	str	r3, [r7, #20]
	}

	/* Integrator clamp */
	pid.integrator = CLAMP_MAX(pid.integrator, limMaxInt);
 8000ee2:	4b49      	ldr	r3, [pc, #292]	; (8001008 <PID_Update+0x1ec>)
 8000ee4:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ee8:	ed97 7a04 	vldr	s14, [r7, #16]
 8000eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef4:	d501      	bpl.n	8000efa <PID_Update+0xde>
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	e001      	b.n	8000efe <PID_Update+0xe2>
 8000efa:	4b43      	ldr	r3, [pc, #268]	; (8001008 <PID_Update+0x1ec>)
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	4a42      	ldr	r2, [pc, #264]	; (8001008 <PID_Update+0x1ec>)
 8000f00:	61d3      	str	r3, [r2, #28]
	pid.integrator = CLAMP_MIN(pid.integrator, limMinInt);
 8000f02:	4b41      	ldr	r3, [pc, #260]	; (8001008 <PID_Update+0x1ec>)
 8000f04:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f08:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f14:	dd01      	ble.n	8000f1a <PID_Update+0xfe>
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	e001      	b.n	8000f1e <PID_Update+0x102>
 8000f1a:	4b3b      	ldr	r3, [pc, #236]	; (8001008 <PID_Update+0x1ec>)
 8000f1c:	69db      	ldr	r3, [r3, #28]
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	; (8001008 <PID_Update+0x1ec>)
 8000f20:	61d3      	str	r3, [r2, #28]

	/* Derivative band-limited differentiator */
	pid.differentiator = (2.0f * pid.Kd * (measurement - pid.prevMeas)
 8000f22:	4b39      	ldr	r3, [pc, #228]	; (8001008 <PID_Update+0x1ec>)
 8000f24:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f28:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <PID_Update+0x1ec>)
 8000f2e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8000f32:	edd7 6a00 	vldr	s13, [r7]
 8000f36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f3a:	ee27 7a27 	vmul.f32	s14, s14, s15
			           + (2.0f * pid.tau - pid.T) * pid.differentiator)
 8000f3e:	4b32      	ldr	r3, [pc, #200]	; (8001008 <PID_Update+0x1ec>)
 8000f40:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f44:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8000f48:	4b2f      	ldr	r3, [pc, #188]	; (8001008 <PID_Update+0x1ec>)
 8000f4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <PID_Update+0x1ec>)
 8000f54:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f5c:	ee77 6a27 	vadd.f32	s13, s14, s15
					   / (2.0f * pid.tau + pid.T);
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <PID_Update+0x1ec>)
 8000f62:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f66:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8000f6a:	4b27      	ldr	r3, [pc, #156]	; (8001008 <PID_Update+0x1ec>)
 8000f6c:	edd3 7a06 	vldr	s15, [r3, #24]
 8000f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
	pid.differentiator = (2.0f * pid.Kd * (measurement - pid.prevMeas)
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <PID_Update+0x1ec>)
 8000f7a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/* Compute output */
	pid.out = proportional + pid.integrator + pid.differentiator;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <PID_Update+0x1ec>)
 8000f80:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f84:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <PID_Update+0x1ec>)
 8000f8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <PID_Update+0x1ec>)
 8000f98:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	/* Clamp output */
	pid.out = CLAMP_MAX(pid.out, pid.limMax);
 8000f9c:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <PID_Update+0x1ec>)
 8000f9e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000fa2:	4b19      	ldr	r3, [pc, #100]	; (8001008 <PID_Update+0x1ec>)
 8000fa4:	edd3 7a05 	vldr	s15, [r3, #20]
 8000fa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	dd02      	ble.n	8000fb8 <PID_Update+0x19c>
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <PID_Update+0x1ec>)
 8000fb4:	695b      	ldr	r3, [r3, #20]
 8000fb6:	e001      	b.n	8000fbc <PID_Update+0x1a0>
 8000fb8:	4b13      	ldr	r3, [pc, #76]	; (8001008 <PID_Update+0x1ec>)
 8000fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fbc:	4a12      	ldr	r2, [pc, #72]	; (8001008 <PID_Update+0x1ec>)
 8000fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
	pid.out = CLAMP_MIN(pid.out, pid.limMin);
 8000fc0:	4b11      	ldr	r3, [pc, #68]	; (8001008 <PID_Update+0x1ec>)
 8000fc2:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000fc6:	4b10      	ldr	r3, [pc, #64]	; (8001008 <PID_Update+0x1ec>)
 8000fc8:	edd3 7a04 	vldr	s15, [r3, #16]
 8000fcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fd4:	d502      	bpl.n	8000fdc <PID_Update+0x1c0>
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <PID_Update+0x1ec>)
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	e001      	b.n	8000fe0 <PID_Update+0x1c4>
 8000fdc:	4b0a      	ldr	r3, [pc, #40]	; (8001008 <PID_Update+0x1ec>)
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	4a09      	ldr	r2, [pc, #36]	; (8001008 <PID_Update+0x1ec>)
 8000fe2:	62d3      	str	r3, [r2, #44]	; 0x2c

	/* Store error */
	pid.prevErr = error;
 8000fe4:	4a08      	ldr	r2, [pc, #32]	; (8001008 <PID_Update+0x1ec>)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	6213      	str	r3, [r2, #32]
	pid.prevMeas = measurement;
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <PID_Update+0x1ec>)
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	6293      	str	r3, [r2, #40]	; 0x28

	return pid.out;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <PID_Update+0x1ec>)
 8000ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff4:	ee07 3a90 	vmov	s15, r3
}
 8000ff8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffc:	371c      	adds	r7, #28
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000007c 	.word	0x2000007c

0800100c <SchedulerInit>:

static void SchedulerExecuteTasks(void);
static void SchedulerTimeBase(void);

void SchedulerInit(SchedulerType* const schedule)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
   schedule_ = schedule;
 8001014:	4a10      	ldr	r2, [pc, #64]	; (8001058 <SchedulerInit+0x4c>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]

   SchedulerInitStats(&combinedStats);
 800101a:	4810      	ldr	r0, [pc, #64]	; (800105c <SchedulerInit+0x50>)
 800101c:	f000 f820 	bl	8001060 <SchedulerInitStats>

   for (uint32_t i = 0U; i < N_PROCESS; ++i)
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	e00e      	b.n	8001044 <SchedulerInit+0x38>
   {
      SchedulerInitStats(&schedule_[i].stats);
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <SchedulerInit+0x4c>)
 8001028:	6819      	ldr	r1, [r3, #0]
 800102a:	68fa      	ldr	r2, [r7, #12]
 800102c:	4613      	mov	r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4413      	add	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3308      	adds	r3, #8
 8001038:	4618      	mov	r0, r3
 800103a:	f000 f811 	bl	8001060 <SchedulerInitStats>
   for (uint32_t i = 0U; i < N_PROCESS; ++i)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3301      	adds	r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d9ed      	bls.n	8001026 <SchedulerInit+0x1a>
   }

   WatchdogFeed();
 800104a:	f000 fa3b 	bl	80014c4 <WatchdogFeed>
}
 800104e:	bf00      	nop
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200001bc 	.word	0x200001bc
 800105c:	200001b0 	.word	0x200001b0

08001060 <SchedulerInitStats>:

static void SchedulerInitStats(SchedulerStatsType* stats)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
   stats->lastDuration = 0U;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
   stats->maxDuration = 0U;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
   stats->minDuration = UINT32_MAX;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f04f 32ff 	mov.w	r2, #4294967295
 800107a:	605a      	str	r2, [r3, #4]
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <SchedulerCallback>:

void SchedulerCallback(void)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
	  for (uint32 i = 0U; i < N_PROCESS; ++i)
 800108e:	2300      	movs	r3, #0
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	e00b      	b.n	80010ac <SchedulerCallback+0x24>
	  {
		  ++timers[i];
 8001094:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <SchedulerCallback+0x3c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	4909      	ldr	r1, [pc, #36]	; (80010c4 <SchedulerCallback+0x3c>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (uint32 i = 0U; i < N_PROCESS; ++i)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3301      	adds	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d9f0      	bls.n	8001094 <SchedulerCallback+0xc>
	  }
	  hasElapsed = TRUE;
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SchedulerCallback+0x40>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	200001a0 	.word	0x200001a0
 80010c8:	200001ac 	.word	0x200001ac

080010cc <SchedulerRun>:

// coverity[misra_c_2012_rule_8_7_violation] - GADSS-AD-1 Public API method for IE
void SchedulerRun(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
   while (1U)
   {
      SchedulerTimeBase();
 80010d0:	f000 f802 	bl	80010d8 <SchedulerTimeBase>
 80010d4:	e7fc      	b.n	80010d0 <SchedulerRun+0x4>
	...

080010d8 <SchedulerTimeBase>:
   }
}

static void SchedulerTimeBase(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
   if (hasElapsed)
 80010dc:	4b05      	ldr	r3, [pc, #20]	; (80010f4 <SchedulerTimeBase+0x1c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d004      	beq.n	80010f0 <SchedulerTimeBase+0x18>
   {
      SchedulerExecuteTasks();
 80010e6:	f000 f807 	bl	80010f8 <SchedulerExecuteTasks>

      hasElapsed = FALSE;
 80010ea:	4b02      	ldr	r3, [pc, #8]	; (80010f4 <SchedulerTimeBase+0x1c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
   }
}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	200001ac 	.word	0x200001ac

080010f8 <SchedulerExecuteTasks>:

static void SchedulerExecuteTasks(void)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
   static TimerStopWatchLapType frameStopWatch = {0U};
   static TimerStopWatchLapType taskStopWatch = {0U};

   TimerStopWatchStartFrame(&frameStopWatch);
 80010fe:	4826      	ldr	r0, [pc, #152]	; (8001198 <SchedulerExecuteTasks+0xa0>)
 8001100:	f000 f882 	bl	8001208 <TimerStopWatchStartFrame>

   for (uint32_t i = 0U; i < N_PROCESS; ++i)
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	e035      	b.n	8001176 <SchedulerExecuteTasks+0x7e>
   {
         if (timers[i] >= schedule_[i].period)
 800110a:	4a24      	ldr	r2, [pc, #144]	; (800119c <SchedulerExecuteTasks+0xa4>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001112:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <SchedulerExecuteTasks+0xa8>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4613      	mov	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	4413      	add	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4403      	add	r3, r0
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	4299      	cmp	r1, r3
 8001126:	d323      	bcc.n	8001170 <SchedulerExecuteTasks+0x78>
         {
            TimerStopWatchStartLap(&taskStopWatch);
 8001128:	481e      	ldr	r0, [pc, #120]	; (80011a4 <SchedulerExecuteTasks+0xac>)
 800112a:	f000 f881 	bl	8001230 <TimerStopWatchStartLap>
            schedule_[i].handler();
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <SchedulerExecuteTasks+0xa8>)
 8001130:	6819      	ldr	r1, [r3, #0]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	440b      	add	r3, r1
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4798      	blx	r3
            SchedulerUpdateStats(&schedule_[i].stats, TimerStopWatchCaptureDuration(&taskStopWatch));
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <SchedulerExecuteTasks+0xa8>)
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	f103 0408 	add.w	r4, r3, #8
 8001156:	4813      	ldr	r0, [pc, #76]	; (80011a4 <SchedulerExecuteTasks+0xac>)
 8001158:	f000 f87c 	bl	8001254 <TimerStopWatchCaptureDuration>
 800115c:	4603      	mov	r3, r0
 800115e:	4619      	mov	r1, r3
 8001160:	4620      	mov	r0, r4
 8001162:	f000 f823 	bl	80011ac <SchedulerUpdateStats>
            timers[i] = 0U;
 8001166:	4a0d      	ldr	r2, [pc, #52]	; (800119c <SchedulerExecuteTasks+0xa4>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2100      	movs	r1, #0
 800116c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   for (uint32_t i = 0U; i < N_PROCESS; ++i)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3301      	adds	r3, #1
 8001174:	607b      	str	r3, [r7, #4]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b02      	cmp	r3, #2
 800117a:	d9c6      	bls.n	800110a <SchedulerExecuteTasks+0x12>
         }
   }

   const uint32_t frameDuration = TimerStopWatchCaptureDuration(&frameStopWatch);
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <SchedulerExecuteTasks+0xa0>)
 800117e:	f000 f869 	bl	8001254 <TimerStopWatchCaptureDuration>
 8001182:	6038      	str	r0, [r7, #0]
   SchedulerUpdateStats(&combinedStats, frameDuration);
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	4808      	ldr	r0, [pc, #32]	; (80011a8 <SchedulerExecuteTasks+0xb0>)
 8001188:	f000 f810 	bl	80011ac <SchedulerUpdateStats>

   //SchedulerUpdateCpuLoadStats(frameDuration);
   WatchdogFeed();
 800118c:	f000 f99a 	bl	80014c4 <WatchdogFeed>
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	200001c0 	.word	0x200001c0
 800119c:	200001a0 	.word	0x200001a0
 80011a0:	200001bc 	.word	0x200001bc
 80011a4:	200001c8 	.word	0x200001c8
 80011a8:	200001b0 	.word	0x200001b0

080011ac <SchedulerUpdateStats>:

static void SchedulerUpdateStats(SchedulerStatsType* stats, const uint32_t duration)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
   if (duration > stats->maxDuration)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	683a      	ldr	r2, [r7, #0]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d902      	bls.n	80011c6 <SchedulerUpdateStats+0x1a>
   {
      stats->maxDuration = duration;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	609a      	str	r2, [r3, #8]
   }

   if (duration < stats->minDuration)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d202      	bcs.n	80011d6 <SchedulerUpdateStats+0x2a>
   {
      stats->minDuration = duration;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	605a      	str	r2, [r3, #4]
   }

   stats->lastDuration = duration;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	601a      	str	r2, [r3, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <StopWatchInit>:
#include "StopWatch.h"

static TIM_HandleTypeDef* tim = NULL;

void StopWatchInit(TIM_HandleTypeDef* const timer)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
	tim = timer;
 80011f0:	4a04      	ldr	r2, [pc, #16]	; (8001204 <StopWatchInit+0x1c>)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6013      	str	r3, [r2, #0]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	200001d0 	.word	0x200001d0

08001208 <TimerStopWatchStartFrame>:

void TimerStopWatchStartFrame(TimerStopWatchLapType* frameTimer)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
   __HAL_TIM_SET_COUNTER(tim, 0U);
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <TimerStopWatchStartFrame+0x24>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	625a      	str	r2, [r3, #36]	; 0x24

   frameTimer->begin = 0U;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	200001d0 	.word	0x200001d0

08001230 <TimerStopWatchStartLap>:

void TimerStopWatchStartLap(TimerStopWatchLapType* lap)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
   lap->begin = __HAL_TIM_GET_COUNTER(tim);
 8001238:	4b05      	ldr	r3, [pc, #20]	; (8001250 <TimerStopWatchStartLap+0x20>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	601a      	str	r2, [r3, #0]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	200001d0 	.word	0x200001d0

08001254 <TimerStopWatchCaptureDuration>:

uint32 TimerStopWatchCaptureDuration(TimerStopWatchLapType* lap)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
   uint32 retVal = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]

   lap->finish = __HAL_TIM_GET_COUNTER(tim);
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <TimerStopWatchCaptureDuration+0x44>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	605a      	str	r2, [r3, #4]
   retVal = (lap->finish > lap->begin) ? (lap->finish - lap->begin) : 0U;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d905      	bls.n	8001284 <TimerStopWatchCaptureDuration+0x30>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	e000      	b.n	8001286 <TimerStopWatchCaptureDuration+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]

   return retVal;
 8001288:	68fb      	ldr	r3, [r7, #12]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200001d0 	.word	0x200001d0

0800129c <SwTimerExecute>:
 */
static void SwTimerProcessSwTimer(SwTimerType* timer);


void SwTimerExecute(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
   ++uptime_;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <SwTimerExecute+0x40>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4a0c      	ldr	r2, [pc, #48]	; (80012dc <SwTimerExecute+0x40>)
 80012aa:	6013      	str	r3, [r2, #0]

   for (uint32 i = 0; i < timersCount_; i++)
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	e009      	b.n	80012c6 <SwTimerExecute+0x2a>
   {
      SwTimerProcessSwTimer(timers_[i]);
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <SwTimerExecute+0x44>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 f8d3 	bl	8001466 <SwTimerProcessSwTimer>
   for (uint32 i = 0; i < timersCount_; i++)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3301      	adds	r3, #1
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <SwTimerExecute+0x48>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d3f0      	bcc.n	80012b2 <SwTimerExecute+0x16>
   }
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000200 	.word	0x20000200
 80012e0:	200001d4 	.word	0x200001d4
 80012e4:	200001fc 	.word	0x200001fc

080012e8 <SwTimerInit>:

ErrorEnum SwTimerInit(SwTimerType* timer, uint32 period, bool_t endlessCount)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b087      	sub	sp, #28
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	60f8      	str	r0, [r7, #12]
 80012f0:	60b9      	str	r1, [r7, #8]
 80012f2:	4613      	mov	r3, r2
 80012f4:	71fb      	strb	r3, [r7, #7]
   //ASSERT_VOID(timer != NULL);
	ErrorEnum error = ERROR_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	75fb      	strb	r3, [r7, #23]

	if (timer != NULL) {
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d013      	beq.n	8001328 <SwTimerInit+0x40>
	   timer->period = period / SYSTICK_RESOLUTION_IN_MS;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4a0e      	ldr	r2, [pc, #56]	; (800133c <SwTimerInit+0x54>)
 8001304:	fba2 2303 	umull	r2, r3, r2, r3
 8001308:	08da      	lsrs	r2, r3, #3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	605a      	str	r2, [r3, #4]
	   timer->endlessCount = endlessCount;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	79fa      	ldrb	r2, [r7, #7]
 8001312:	729a      	strb	r2, [r3, #10]
	   timer->active = false;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	721a      	strb	r2, [r3, #8]
	   timer->count = DEFAULT_COUNT;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
	   timer->elapsed = false;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	725a      	strb	r2, [r3, #9]
 8001326:	e001      	b.n	800132c <SwTimerInit+0x44>
	} else {
		error = ERROR_NULL;
 8001328:	2302      	movs	r3, #2
 800132a:	75fb      	strb	r3, [r7, #23]
	}

	return error;
 800132c:	7dfb      	ldrb	r3, [r7, #23]
}
 800132e:	4618      	mov	r0, r3
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	cccccccd 	.word	0xcccccccd

08001340 <SwTimerRegister>:

   return period;
}

ErrorEnum SwTimerRegister(SwTimerType* timer)
{
 8001340:	b480      	push	{r7}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
	ErrorEnum err = ERROR_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

	if (timer != NULL) {
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d012      	beq.n	8001378 <SwTimerRegister+0x38>
		if (timersCount_ < SW_TIMERS_MAX) {
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <SwTimerRegister+0x4c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	2b09      	cmp	r3, #9
 8001358:	d80b      	bhi.n	8001372 <SwTimerRegister+0x32>
		   timers_[timersCount_] = timer;
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <SwTimerRegister+0x4c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	490c      	ldr	r1, [pc, #48]	; (8001390 <SwTimerRegister+0x50>)
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		   timersCount_++;
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <SwTimerRegister+0x4c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3301      	adds	r3, #1
 800136c:	4a07      	ldr	r2, [pc, #28]	; (800138c <SwTimerRegister+0x4c>)
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	e004      	b.n	800137c <SwTimerRegister+0x3c>
		} else {
			err = ERROR_SW_TIMER_MAX_EXCEEDED;
 8001372:	230a      	movs	r3, #10
 8001374:	73fb      	strb	r3, [r7, #15]
 8001376:	e001      	b.n	800137c <SwTimerRegister+0x3c>
		}
	} else {
		err = ERROR_NULL;
 8001378:	2302      	movs	r3, #2
 800137a:	73fb      	strb	r3, [r7, #15]
	}

	return err;
 800137c:	7bfb      	ldrb	r3, [r7, #15]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3714      	adds	r7, #20
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200001fc 	.word	0x200001fc
 8001390:	200001d4 	.word	0x200001d4

08001394 <SwTimerStart>:

void SwTimerStart(SwTimerType* timer)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
   //ASSERT_VOID(timer != NULL);

   if (!timer->active)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	7a1b      	ldrb	r3, [r3, #8]
 80013a0:	f083 0301 	eor.w	r3, r3, #1
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d008      	beq.n	80013bc <SwTimerStart+0x28>
   {
      timer->count = DEFAULT_COUNT;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
      timer->elapsed = false;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	725a      	strb	r2, [r3, #9]
      timer->active = true;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	721a      	strb	r2, [r3, #8]
   }
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <SwTimerHasTimerElapsed>:

bool_t SwTimerHasTimerElapsed(const SwTimerType* timer)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
   //ASSERT_VOID(timer != NULL);

   return timer->elapsed;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	7a5b      	ldrb	r3, [r3, #9]
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <SwTimerDeactivate>:
{
   return uptime_;
}

static void SwTimerDeactivate(SwTimerType* timer)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
   timer->count = 0U;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
   timer->elapsed = true;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2201      	movs	r2, #1
 80013f2:	725a      	strb	r2, [r3, #9]

   if (!timer->endlessCount)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7a9b      	ldrb	r3, [r3, #10]
 80013f8:	f083 0301 	eor.w	r3, r3, #1
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d002      	beq.n	8001408 <SwTimerDeactivate+0x28>
   {
      timer->active = false;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
   }
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <SwTimerIsExpired>:

static bool_t SwTimerIsExpired(const SwTimerType* timer)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
   //A timer can have a period of 0, so this needs to be >=
   return timer->count >= timer->period;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	bf2c      	ite	cs
 8001428:	2301      	movcs	r3, #1
 800142a:	2300      	movcc	r3, #0
 800142c:	b2db      	uxtb	r3, r3
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <SwTimerIsActive>:

static bool_t SwTimerIsActive(const SwTimerType* timer)
{
 800143a:	b480      	push	{r7}
 800143c:	b085      	sub	sp, #20
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   bool_t isActive = false;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]

   if (timer != NULL)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d005      	beq.n	8001458 <SwTimerIsActive+0x1e>
   {
      if (timer->active)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7a1b      	ldrb	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SwTimerIsActive+0x1e>
      {
         isActive = true;
 8001454:	2301      	movs	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
      }
   }

   return isActive;
 8001458:	7bfb      	ldrb	r3, [r7, #15]
}
 800145a:	4618      	mov	r0, r3
 800145c:	3714      	adds	r7, #20
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <SwTimerProcessSwTimer>:

static void SwTimerProcessSwTimer(SwTimerType* timer)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   if (SwTimerIsActive(timer))
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffe3 	bl	800143a <SwTimerIsActive>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d010      	beq.n	800149c <SwTimerProcessSwTimer+0x36>
   {
      //Clear the elapsed flag
      timer->elapsed = false;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	725a      	strb	r2, [r3, #9]
      timer->count++;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	1c5a      	adds	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	601a      	str	r2, [r3, #0]

      if (SwTimerIsExpired(timer))
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffc2 	bl	8001414 <SwTimerIsExpired>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d002      	beq.n	800149c <SwTimerProcessSwTimer+0x36>
      {
         SwTimerDeactivate(timer);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff ffa2 	bl	80013e0 <SwTimerDeactivate>
      }
   }
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <Watchdog_Init>:
/*          Local data          */
/* ---------------------------- */
static __IO IWDG_HandleTypeDef* watchdog_ = NULL;

void Watchdog_Init(__IO IWDG_HandleTypeDef* const wdg)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	watchdog_ = wdg;
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <Watchdog_Init+0x1c>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000204 	.word	0x20000204

080014c4 <WatchdogFeed>:

__IO void WatchdogFeed(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
	__HAL_IWDG_RELOAD_COUNTER(watchdog_);
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <WatchdogFeed+0x1c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80014d2:	601a      	str	r2, [r3, #0]
}
 80014d4:	bf00      	nop
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20000204 	.word	0x20000204

080014e4 <PeriodicProcess1msHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void PeriodicProcess1msHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	DBW_Process();
 80014e8:	f7ff fa6c 	bl	80009c4 <DBW_Process>
	MicroSwitch_PollStatus();

	/* MicroSwitch process */
	MicroSwitch_Process();
#endif
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <PeriodicProcess10msHandler>:

void PeriodicProcess10msHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	SwTimerExecute();
 80014f4:	f7ff fed2 	bl	800129c <SwTimerExecute>
	GearControl_Process();

	/* Gear Sensor process */
	GearSensor_Process();
#endif
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <PeriodicProcess100msHandler>:

void PeriodicProcess100msHandler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
	//OnOffSwitch_Process();
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001510:	f000 ffea 	bl	80024e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001514:	f000 f870 	bl	80015f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001518:	f000 fb72 	bl	8001c00 <MX_GPIO_Init>
  MX_ADC1_Init();
 800151c:	f000 f8d8 	bl	80016d0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001520:	f000 f9b2 	bl	8001888 <MX_CAN1_Init>
  MX_TIM1_Init();
 8001524:	f000 f9fe 	bl	8001924 <MX_TIM1_Init>
  MX_DMA_Init();
 8001528:	f000 fb42 	bl	8001bb0 <MX_DMA_Init>
  MX_TIM3_Init();
 800152c:	f000 fadc 	bl	8001ae8 <MX_TIM3_Init>
  MX_ADC2_Init();
 8001530:	f000 f92e 	bl	8001790 <MX_ADC2_Init>
  MX_TIM2_Init();
 8001534:	f000 fa86 	bl	8001a44 <MX_TIM2_Init>
  MX_IWDG_Init();
 8001538:	f000 f9da 	bl	80018f0 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

/* -------------------------------------------- */
  if (!errorFlags.halErr) {
 800153c:	4b28      	ldr	r3, [pc, #160]	; (80015e0 <main+0xd4>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d148      	bne.n	80015dc <main+0xd0>
	  /* Start servo PWM signal */
	  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	  /* Initialize Gear Control module */
	  //GearControl_Init(&htim1.Instance->CCR3);
	  /* Initialize ADC */
	  if (ADC_Init(&hadc1, ADC_1_HANDLE, ADC_1_CHANNELS_COUNT) != ERROR_OK) {
 800154a:	2202      	movs	r2, #2
 800154c:	2100      	movs	r1, #0
 800154e:	4825      	ldr	r0, [pc, #148]	; (80015e4 <main+0xd8>)
 8001550:	f7ff f826 	bl	80005a0 <ADC_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <main+0x58>
		  errorFlags.adcInitErr = TRUE;
 800155a:	4a21      	ldr	r2, [pc, #132]	; (80015e0 <main+0xd4>)
 800155c:	7813      	ldrb	r3, [r2, #0]
 800155e:	f043 0301 	orr.w	r3, r3, #1
 8001562:	7013      	strb	r3, [r2, #0]
	  }

	  if (ADC_Init(&hadc2, ADC_2_HANDLE, ADC_2_CHANNELS_COUNT) != ERROR_OK) {
 8001564:	2204      	movs	r2, #4
 8001566:	2101      	movs	r1, #1
 8001568:	481f      	ldr	r0, [pc, #124]	; (80015e8 <main+0xdc>)
 800156a:	f7ff f819 	bl	80005a0 <ADC_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d004      	beq.n	800157e <main+0x72>
		  errorFlags.adcInitErr = TRUE;
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <main+0xd4>)
 8001576:	7813      	ldrb	r3, [r2, #0]
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	7013      	strb	r3, [r2, #0]
	  }

	  /* Interrupts Init */
	  if (IRQ_Init() != ERROR_OK) {
 800157e:	f000 fe8f 	bl	80022a0 <IRQ_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <main+0x86>
		  errorFlags.irqInitErr = TRUE;
 8001588:	4a15      	ldr	r2, [pc, #84]	; (80015e0 <main+0xd4>)
 800158a:	7813      	ldrb	r3, [r2, #0]
 800158c:	f043 0302 	orr.w	r3, r3, #2
 8001590:	7013      	strb	r3, [r2, #0]
	  }

	  /* DBW Init */
	  if (DBW_Init() != ERROR_OK) {
 8001592:	f7ff f86b 	bl	800066c <DBW_Init>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d004      	beq.n	80015a6 <main+0x9a>
		  errorFlags.dbwInitErr = TRUE;
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <main+0xd4>)
 800159e:	7813      	ldrb	r3, [r2, #0]
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	7013      	strb	r3, [r2, #0]
	  }

	  /* Enable watchdog - no return */
	  Watchdog_Init(&hiwdg);
 80015a6:	4811      	ldr	r0, [pc, #68]	; (80015ec <main+0xe0>)
 80015a8:	f7ff ff7c 	bl	80014a4 <Watchdog_Init>

	  /* Timer for scheduler frames time measurement (in uS) */
	  if (HAL_TIM_Base_Start(&htim2) != HAL_OK) {
 80015ac:	4810      	ldr	r0, [pc, #64]	; (80015f0 <main+0xe4>)
 80015ae:	f002 fff7 	bl	80045a0 <HAL_TIM_Base_Start>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d004      	beq.n	80015c2 <main+0xb6>
		  errorFlags.schedulerInitErr = TRUE;
 80015b8:	4a09      	ldr	r2, [pc, #36]	; (80015e0 <main+0xd4>)
 80015ba:	7813      	ldrb	r3, [r2, #0]
 80015bc:	f043 0308 	orr.w	r3, r3, #8
 80015c0:	7013      	strb	r3, [r2, #0]
	  }

	  /* Assign scheduler timer to stop watch - no return */
	  StopWatchInit(&htim2);
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <main+0xe4>)
 80015c4:	f7ff fe10 	bl	80011e8 <StopWatchInit>
	  //GearSensor_Init(gearsens);
	  /* Initialize MicroSwitch module */
	  //MicroSwitch_Init(gearsens);

	  /* Initialize Scheduler - no return */
	  if (errorFlags.errTotal == 0U) {
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <main+0xd4>)
 80015ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	d104      	bne.n	80015dc <main+0xd0>
		  SchedulerInit(schedule);
 80015d2:	4808      	ldr	r0, [pc, #32]	; (80015f4 <main+0xe8>)
 80015d4:	f7ff fd1a 	bl	800100c <SchedulerInit>

		  /* Run scheduler */
		  SchedulerRun();
 80015d8:	f7ff fd78 	bl	80010cc <SchedulerRun>
  /* Should never reach here */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <main+0xd0>
 80015de:	bf00      	nop
 80015e0:	20000208 	.word	0x20000208
 80015e4:	20000210 	.word	0x20000210
 80015e8:	20000258 	.word	0x20000258
 80015ec:	20000388 	.word	0x20000388
 80015f0:	200003dc 	.word	0x200003dc
 80015f4:	200000ac 	.word	0x200000ac

080015f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b094      	sub	sp, #80	; 0x50
 80015fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015fe:	f107 0320 	add.w	r3, r7, #32
 8001602:	2230      	movs	r2, #48	; 0x30
 8001604:	2100      	movs	r1, #0
 8001606:	4618      	mov	r0, r3
 8001608:	f003 ff8a 	bl	8005520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800160c:	f107 030c 	add.w	r3, r7, #12
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	4b29      	ldr	r3, [pc, #164]	; (80016c8 <SystemClock_Config+0xd0>)
 8001622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001624:	4a28      	ldr	r2, [pc, #160]	; (80016c8 <SystemClock_Config+0xd0>)
 8001626:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162a:	6413      	str	r3, [r2, #64]	; 0x40
 800162c:	4b26      	ldr	r3, [pc, #152]	; (80016c8 <SystemClock_Config+0xd0>)
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001638:	2300      	movs	r3, #0
 800163a:	607b      	str	r3, [r7, #4]
 800163c:	4b23      	ldr	r3, [pc, #140]	; (80016cc <SystemClock_Config+0xd4>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a22      	ldr	r2, [pc, #136]	; (80016cc <SystemClock_Config+0xd4>)
 8001642:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <SystemClock_Config+0xd4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001650:	607b      	str	r3, [r7, #4]
 8001652:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001654:	2309      	movs	r3, #9
 8001656:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001658:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800165e:	2301      	movs	r3, #1
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001662:	2302      	movs	r3, #2
 8001664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800166a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800166c:	2310      	movs	r3, #16
 800166e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001670:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001674:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001676:	2302      	movs	r3, #2
 8001678:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800167a:	2307      	movs	r3, #7
 800167c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800167e:	f107 0320 	add.w	r3, r7, #32
 8001682:	4618      	mov	r0, r3
 8001684:	f002 fb2a 	bl	8003cdc <HAL_RCC_OscConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800168e:	f000 fb51 	bl	8001d34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001692:	230f      	movs	r3, #15
 8001694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001696:	2302      	movs	r3, #2
 8001698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800169e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80016a4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	2105      	movs	r1, #5
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 fd8b 	bl	80041cc <HAL_RCC_ClockConfig>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80016bc:	f000 fb3a 	bl	8001d34 <Error_Handler>
  }
}
 80016c0:	bf00      	nop
 80016c2:	3750      	adds	r7, #80	; 0x50
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40007000 	.word	0x40007000

080016d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d6:	463b      	mov	r3, r7
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016e2:	4b28      	ldr	r3, [pc, #160]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016e4:	4a28      	ldr	r2, [pc, #160]	; (8001788 <MX_ADC1_Init+0xb8>)
 80016e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016ea:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80016ee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80016f6:	4b23      	ldr	r3, [pc, #140]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016fc:	4b21      	ldr	r3, [pc, #132]	; (8001784 <MX_ADC1_Init+0xb4>)
 80016fe:	2201      	movs	r2, #1
 8001700:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001702:	4b20      	ldr	r3, [pc, #128]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <MX_ADC1_Init+0xb4>)
 800170c:	2200      	movs	r2, #0
 800170e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001710:	4b1c      	ldr	r3, [pc, #112]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <MX_ADC1_Init+0xbc>)
 8001714:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800171c:	4b19      	ldr	r3, [pc, #100]	; (8001784 <MX_ADC1_Init+0xb4>)
 800171e:	2202      	movs	r2, #2
 8001720:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800172a:	4b16      	ldr	r3, [pc, #88]	; (8001784 <MX_ADC1_Init+0xb4>)
 800172c:	2201      	movs	r2, #1
 800172e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001730:	4814      	ldr	r0, [pc, #80]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001732:	f000 ff4b 	bl	80025cc <HAL_ADC_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800173c:	f000 fafa 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001740:	2301      	movs	r3, #1
 8001742:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001744:	2301      	movs	r3, #1
 8001746:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001748:	2307      	movs	r3, #7
 800174a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800174c:	463b      	mov	r3, r7
 800174e:	4619      	mov	r1, r3
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <MX_ADC1_Init+0xb4>)
 8001752:	f001 f8ad 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800175c:	f000 faea 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001760:	2303      	movs	r3, #3
 8001762:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001764:	2302      	movs	r3, #2
 8001766:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001768:	463b      	mov	r3, r7
 800176a:	4619      	mov	r1, r3
 800176c:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_ADC1_Init+0xb4>)
 800176e:	f001 f89f 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001778:	f000 fadc 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000210 	.word	0x20000210
 8001788:	40012000 	.word	0x40012000
 800178c:	0f000001 	.word	0x0f000001

08001790 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001796:	463b      	mov	r3, r7
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80017a2:	4b36      	ldr	r3, [pc, #216]	; (800187c <MX_ADC2_Init+0xec>)
 80017a4:	4a36      	ldr	r2, [pc, #216]	; (8001880 <MX_ADC2_Init+0xf0>)
 80017a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80017a8:	4b34      	ldr	r3, [pc, #208]	; (800187c <MX_ADC2_Init+0xec>)
 80017aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80017ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80017b0:	4b32      	ldr	r3, [pc, #200]	; (800187c <MX_ADC2_Init+0xec>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <MX_ADC2_Init+0xec>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80017bc:	4b2f      	ldr	r3, [pc, #188]	; (800187c <MX_ADC2_Init+0xec>)
 80017be:	2201      	movs	r2, #1
 80017c0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017c2:	4b2e      	ldr	r3, [pc, #184]	; (800187c <MX_ADC2_Init+0xec>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017ca:	4b2c      	ldr	r3, [pc, #176]	; (800187c <MX_ADC2_Init+0xec>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <MX_ADC2_Init+0xec>)
 80017d2:	4a2c      	ldr	r2, [pc, #176]	; (8001884 <MX_ADC2_Init+0xf4>)
 80017d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017d6:	4b29      	ldr	r3, [pc, #164]	; (800187c <MX_ADC2_Init+0xec>)
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <MX_ADC2_Init+0xec>)
 80017de:	2204      	movs	r2, #4
 80017e0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80017e2:	4b26      	ldr	r3, [pc, #152]	; (800187c <MX_ADC2_Init+0xec>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <MX_ADC2_Init+0xec>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017f0:	4822      	ldr	r0, [pc, #136]	; (800187c <MX_ADC2_Init+0xec>)
 80017f2:	f000 feeb 	bl	80025cc <HAL_ADC_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80017fc:	f000 fa9a 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001800:	2305      	movs	r3, #5
 8001802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001808:	2307      	movs	r3, #7
 800180a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800180c:	463b      	mov	r3, r7
 800180e:	4619      	mov	r1, r3
 8001810:	481a      	ldr	r0, [pc, #104]	; (800187c <MX_ADC2_Init+0xec>)
 8001812:	f001 f84d 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800181c:	f000 fa8a 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001820:	2307      	movs	r3, #7
 8001822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001824:	2302      	movs	r3, #2
 8001826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001828:	463b      	mov	r3, r7
 800182a:	4619      	mov	r1, r3
 800182c:	4813      	ldr	r0, [pc, #76]	; (800187c <MX_ADC2_Init+0xec>)
 800182e:	f001 f83f 	bl	80028b0 <HAL_ADC_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001838:	f000 fa7c 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800183c:	2309      	movs	r3, #9
 800183e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001840:	2303      	movs	r3, #3
 8001842:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001844:	463b      	mov	r3, r7
 8001846:	4619      	mov	r1, r3
 8001848:	480c      	ldr	r0, [pc, #48]	; (800187c <MX_ADC2_Init+0xec>)
 800184a:	f001 f831 	bl	80028b0 <HAL_ADC_ConfigChannel>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001854:	f000 fa6e 	bl	8001d34 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001858:	230f      	movs	r3, #15
 800185a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800185c:	2304      	movs	r3, #4
 800185e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001860:	463b      	mov	r3, r7
 8001862:	4619      	mov	r1, r3
 8001864:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_ADC2_Init+0xec>)
 8001866:	f001 f823 	bl	80028b0 <HAL_ADC_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8001870:	f000 fa60 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	3710      	adds	r7, #16
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000258 	.word	0x20000258
 8001880:	40012100 	.word	0x40012100
 8001884:	0f000001 	.word	0x0f000001

08001888 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800188c:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <MX_CAN1_Init+0x60>)
 800188e:	4a17      	ldr	r2, [pc, #92]	; (80018ec <MX_CAN1_Init+0x64>)
 8001890:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001892:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_CAN1_Init+0x60>)
 8001894:	2210      	movs	r2, #16
 8001896:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001898:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <MX_CAN1_Init+0x60>)
 800189a:	2200      	movs	r2, #0
 800189c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800189e:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018b6:	4b0c      	ldr	r3, [pc, #48]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018bc:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018be:	2200      	movs	r2, #0
 80018c0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018c2:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018c8:	4b07      	ldr	r3, [pc, #28]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018d4:	4804      	ldr	r0, [pc, #16]	; (80018e8 <MX_CAN1_Init+0x60>)
 80018d6:	f001 fa8b 	bl	8002df0 <HAL_CAN_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80018e0:	f000 fa28 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018e4:	bf00      	nop
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000360 	.word	0x20000360
 80018ec:	40006400 	.word	0x40006400

080018f0 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_IWDG_Init+0x2c>)
 80018f6:	4a0a      	ldr	r2, [pc, #40]	; (8001920 <MX_IWDG_Init+0x30>)
 80018f8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_IWDG_Init+0x2c>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 7;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_IWDG_Init+0x2c>)
 8001902:	2207      	movs	r2, #7
 8001904:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_IWDG_Init+0x2c>)
 8001908:	f002 f9a5 	bl	8003c56 <HAL_IWDG_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 8001912:	f000 fa0f 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000388 	.word	0x20000388
 8001920:	40003000 	.word	0x40003000

08001924 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b092      	sub	sp, #72	; 0x48
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800192a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001934:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
 8001944:	615a      	str	r2, [r3, #20]
 8001946:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	2220      	movs	r2, #32
 800194c:	2100      	movs	r1, #0
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fde6 	bl	8005520 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001954:	4b39      	ldr	r3, [pc, #228]	; (8001a3c <MX_TIM1_Init+0x118>)
 8001956:	4a3a      	ldr	r2, [pc, #232]	; (8001a40 <MX_TIM1_Init+0x11c>)
 8001958:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800195a:	4b38      	ldr	r3, [pc, #224]	; (8001a3c <MX_TIM1_Init+0x118>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001960:	4b36      	ldr	r3, [pc, #216]	; (8001a3c <MX_TIM1_Init+0x118>)
 8001962:	2200      	movs	r2, #0
 8001964:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3359;
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <MX_TIM1_Init+0x118>)
 8001968:	f640 521f 	movw	r2, #3359	; 0xd1f
 800196c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800196e:	4b33      	ldr	r3, [pc, #204]	; (8001a3c <MX_TIM1_Init+0x118>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001974:	4b31      	ldr	r3, [pc, #196]	; (8001a3c <MX_TIM1_Init+0x118>)
 8001976:	2200      	movs	r2, #0
 8001978:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197a:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <MX_TIM1_Init+0x118>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001980:	482e      	ldr	r0, [pc, #184]	; (8001a3c <MX_TIM1_Init+0x118>)
 8001982:	f002 fe75 	bl	8004670 <HAL_TIM_PWM_Init>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800198c:	f000 f9d2 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001990:	2300      	movs	r3, #0
 8001992:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001998:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800199c:	4619      	mov	r1, r3
 800199e:	4827      	ldr	r0, [pc, #156]	; (8001a3c <MX_TIM1_Init+0x118>)
 80019a0:	f003 fccc 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80019aa:	f000 f9c3 	bl	8001d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ae:	2360      	movs	r3, #96	; 0x60
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ba:	2300      	movs	r3, #0
 80019bc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ce:	2200      	movs	r2, #0
 80019d0:	4619      	mov	r1, r3
 80019d2:	481a      	ldr	r0, [pc, #104]	; (8001a3c <MX_TIM1_Init+0x118>)
 80019d4:	f003 f850 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80019de:	f000 f9a9 	bl	8001d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019e6:	220c      	movs	r2, #12
 80019e8:	4619      	mov	r1, r3
 80019ea:	4814      	ldr	r0, [pc, #80]	; (8001a3c <MX_TIM1_Init+0x118>)
 80019ec:	f003 f844 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80019f6:	f000 f99d 	bl	8001d34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a12:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	4807      	ldr	r0, [pc, #28]	; (8001a3c <MX_TIM1_Init+0x118>)
 8001a1e:	f003 fd09 	bl	8005434 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d001      	beq.n	8001a2c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001a28:	f000 f984 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a2c:	4803      	ldr	r0, [pc, #12]	; (8001a3c <MX_TIM1_Init+0x118>)
 8001a2e:	f000 fb95 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001a32:	bf00      	nop
 8001a34:	3748      	adds	r7, #72	; 0x48
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000394 	.word	0x20000394
 8001a40:	40010000 	.word	0x40010000

08001a44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4a:	f107 0310 	add.w	r3, r7, #16
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a54:	463b      	mov	r3, r7
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_TIM2_Init+0xa0>)
 8001a62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_TIM2_Init+0xa0>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM2_Init+0xa0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 167;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_TIM2_Init+0xa0>)
 8001a76:	22a7      	movs	r2, #167	; 0xa7
 8001a78:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM2_Init+0xa0>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_TIM2_Init+0xa0>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001a86:	4817      	ldr	r0, [pc, #92]	; (8001ae4 <MX_TIM2_Init+0xa0>)
 8001a88:	f002 ff0a 	bl	80048a0 <HAL_TIM_IC_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001a92:	f000 f94f 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a9e:	f107 0310 	add.w	r3, r7, #16
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	480f      	ldr	r0, [pc, #60]	; (8001ae4 <MX_TIM2_Init+0xa0>)
 8001aa6:	f003 fc49 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ab0:	f000 f940 	bl	8001d34 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001abc:	2300      	movs	r3, #0
 8001abe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	2204      	movs	r2, #4
 8001ac8:	4619      	mov	r1, r3
 8001aca:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <MX_TIM2_Init+0xa0>)
 8001acc:	f002 ff37 	bl	800493e <HAL_TIM_IC_ConfigChannel>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001ad6:	f000 f92d 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200003dc 	.word	0x200003dc

08001ae8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aee:	f107 0320 	add.w	r3, r7, #32
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]
 8001b00:	609a      	str	r2, [r3, #8]
 8001b02:	60da      	str	r2, [r3, #12]
 8001b04:	611a      	str	r2, [r3, #16]
 8001b06:	615a      	str	r2, [r3, #20]
 8001b08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b0c:	4a27      	ldr	r2, [pc, #156]	; (8001bac <MX_TIM3_Init+0xc4>)
 8001b0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b10:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b1c:	4b22      	ldr	r3, [pc, #136]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b24:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b30:	481d      	ldr	r0, [pc, #116]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b32:	f002 fd9d 	bl	8004670 <HAL_TIM_PWM_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b3c:	f000 f8fa 	bl	8001d34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b48:	f107 0320 	add.w	r3, r7, #32
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	4816      	ldr	r0, [pc, #88]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b50:	f003 fbf4 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b5a:	f000 f8eb 	bl	8001d34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b5e:	2360      	movs	r3, #96	; 0x60
 8001b60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b66:	2300      	movs	r3, #0
 8001b68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	2200      	movs	r2, #0
 8001b72:	4619      	mov	r1, r3
 8001b74:	480c      	ldr	r0, [pc, #48]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b76:	f002 ff7f 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b80:	f000 f8d8 	bl	8001d34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	2208      	movs	r2, #8
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b8c:	f002 ff74 	bl	8004a78 <HAL_TIM_PWM_ConfigChannel>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b96:	f000 f8cd 	bl	8001d34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b9a:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <MX_TIM3_Init+0xc0>)
 8001b9c:	f000 fade 	bl	800215c <HAL_TIM_MspPostInit>

}
 8001ba0:	bf00      	nop
 8001ba2:	3728      	adds	r7, #40	; 0x28
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000424 	.word	0x20000424
 8001bac:	40000400 	.word	0x40000400

08001bb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	607b      	str	r3, [r7, #4]
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <MX_DMA_Init+0x4c>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a0f      	ldr	r2, [pc, #60]	; (8001bfc <MX_DMA_Init+0x4c>)
 8001bc0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b0d      	ldr	r3, [pc, #52]	; (8001bfc <MX_DMA_Init+0x4c>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	203a      	movs	r0, #58	; 0x3a
 8001bd8:	f001 fae1 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001bdc:	203a      	movs	r0, #58	; 0x3a
 8001bde:	f001 fafa 	bl	80031d6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8001be2:	2200      	movs	r2, #0
 8001be4:	2100      	movs	r1, #0
 8001be6:	203c      	movs	r0, #60	; 0x3c
 8001be8:	f001 fad9 	bl	800319e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001bec:	203c      	movs	r0, #60	; 0x3c
 8001bee:	f001 faf2 	bl	80031d6 <HAL_NVIC_EnableIRQ>

}
 8001bf2:	bf00      	nop
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40023800 	.word	0x40023800

08001c00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b08a      	sub	sp, #40	; 0x28
 8001c04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c06:	f107 0314 	add.w	r3, r7, #20
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	60da      	str	r2, [r3, #12]
 8001c14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	4a41      	ldr	r2, [pc, #260]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c24:	6313      	str	r3, [r2, #48]	; 0x30
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	4a3a      	ldr	r2, [pc, #232]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c3c:	f043 0304 	orr.w	r3, r3, #4
 8001c40:	6313      	str	r3, [r2, #48]	; 0x30
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f003 0304 	and.w	r3, r3, #4
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	4b34      	ldr	r3, [pc, #208]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	4a33      	ldr	r2, [pc, #204]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c58:	f043 0301 	orr.w	r3, r3, #1
 8001c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5e:	4b31      	ldr	r3, [pc, #196]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	607b      	str	r3, [r7, #4]
 8001c6e:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a2c      	ldr	r2, [pc, #176]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c74:	f043 0302 	orr.w	r3, r3, #2
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <MX_GPIO_Init+0x124>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	607b      	str	r3, [r7, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATUS_Pin|INH2_Pin|INH1_Pin, GPIO_PIN_RESET);
 8001c86:	2200      	movs	r2, #0
 8001c88:	f240 6104 	movw	r1, #1540	; 0x604
 8001c8c:	4826      	ldr	r0, [pc, #152]	; (8001d28 <MX_GPIO_Init+0x128>)
 8001c8e:	f001 ffc9 	bl	8003c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GEAR_CUT_GPIO_Port, GEAR_CUT_Pin, GPIO_PIN_RESET);
 8001c92:	2200      	movs	r2, #0
 8001c94:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c98:	4824      	ldr	r0, [pc, #144]	; (8001d2c <MX_GPIO_Init+0x12c>)
 8001c9a:	f001 ffc3 	bl	8003c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ca4:	4822      	ldr	r0, [pc, #136]	; (8001d30 <MX_GPIO_Init+0x130>)
 8001ca6:	f001 ffbd 	bl	8003c24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001caa:	2306      	movs	r3, #6
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	481c      	ldr	r0, [pc, #112]	; (8001d30 <MX_GPIO_Init+0x130>)
 8001cbe:	f001 fe15 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STATUS_Pin INH2_Pin INH1_Pin */
  GPIO_InitStruct.Pin = LED_STATUS_Pin|INH2_Pin|INH1_Pin;
 8001cc2:	f240 6304 	movw	r3, #1540	; 0x604
 8001cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4813      	ldr	r0, [pc, #76]	; (8001d28 <MX_GPIO_Init+0x128>)
 8001cdc:	f001 fe06 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pin : GEAR_CUT_Pin */
  GPIO_InitStruct.Pin = GEAR_CUT_Pin;
 8001ce0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GEAR_CUT_GPIO_Port, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <MX_GPIO_Init+0x12c>)
 8001cfa:	f001 fdf7 	bl	80038ec <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8001cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d04:	2301      	movs	r3, #1
 8001d06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0314 	add.w	r3, r7, #20
 8001d14:	4619      	mov	r1, r3
 8001d16:	4806      	ldr	r0, [pc, #24]	; (8001d30 <MX_GPIO_Init+0x130>)
 8001d18:	f001 fde8 	bl	80038ec <HAL_GPIO_Init>

}
 8001d1c:	bf00      	nop
 8001d1e:	3728      	adds	r7, #40	; 0x28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800

08001d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	errorFlags.halErr = TRUE;
 8001d38:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <Error_Handler+0x18>)
 8001d3a:	7813      	ldrb	r3, [r2, #0]
 8001d3c:	f043 0310 	orr.w	r3, r3, #16
 8001d40:	7013      	strb	r3, [r2, #0]
  /* USER CODE END Error_Handler_Debug */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20000208 	.word	0x20000208

08001d50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	4a0f      	ldr	r2, [pc, #60]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d64:	6453      	str	r3, [r2, #68]	; 0x44
 8001d66:	4b0d      	ldr	r3, [pc, #52]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d6e:	607b      	str	r3, [r7, #4]
 8001d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	603b      	str	r3, [r7, #0]
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	4a08      	ldr	r2, [pc, #32]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d80:	6413      	str	r3, [r2, #64]	; 0x40
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <HAL_MspInit+0x4c>)
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8a:	603b      	str	r3, [r7, #0]
 8001d8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800

08001da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08e      	sub	sp, #56	; 0x38
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a7a      	ldr	r2, [pc, #488]	; (8001fa8 <HAL_ADC_MspInit+0x208>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d159      	bne.n	8001e76 <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	623b      	str	r3, [r7, #32]
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	4a78      	ldr	r2, [pc, #480]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd2:	4b76      	ldr	r3, [pc, #472]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	623b      	str	r3, [r7, #32]
 8001ddc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	61fb      	str	r3, [r7, #28]
 8001de2:	4b72      	ldr	r3, [pc, #456]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a71      	ldr	r2, [pc, #452]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001de8:	f043 0301 	orr.w	r3, r3, #1
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b6f      	ldr	r3, [pc, #444]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001dfa:	230a      	movs	r3, #10
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	4868      	ldr	r0, [pc, #416]	; (8001fb0 <HAL_ADC_MspInit+0x210>)
 8001e0e:	f001 fd6d 	bl	80038ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001e12:	4b68      	ldr	r3, [pc, #416]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e14:	4a68      	ldr	r2, [pc, #416]	; (8001fb8 <HAL_ADC_MspInit+0x218>)
 8001e16:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001e18:	4b66      	ldr	r3, [pc, #408]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e1e:	4b65      	ldr	r3, [pc, #404]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e24:	4b63      	ldr	r3, [pc, #396]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001e2a:	4b62      	ldr	r3, [pc, #392]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e30:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e32:	4b60      	ldr	r3, [pc, #384]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e38:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e40:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001e42:	4b5c      	ldr	r3, [pc, #368]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e48:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e4a:	4b5a      	ldr	r3, [pc, #360]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e4c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e50:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001e58:	4856      	ldr	r0, [pc, #344]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e5a:	f001 f9d7 	bl	800320c <HAL_DMA_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001e64:	f7ff ff66 	bl	8001d34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e6e:	4a51      	ldr	r2, [pc, #324]	; (8001fb4 <HAL_ADC_MspInit+0x214>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e74:	e093      	b.n	8001f9e <HAL_ADC_MspInit+0x1fe>
  else if(hadc->Instance==ADC2)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a50      	ldr	r2, [pc, #320]	; (8001fbc <HAL_ADC_MspInit+0x21c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	f040 808e 	bne.w	8001f9e <HAL_ADC_MspInit+0x1fe>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	4b49      	ldr	r3, [pc, #292]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8a:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e90:	6453      	str	r3, [r2, #68]	; 0x44
 8001e92:	4b46      	ldr	r3, [pc, #280]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	4b42      	ldr	r3, [pc, #264]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a41      	ldr	r2, [pc, #260]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a3a      	ldr	r2, [pc, #232]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b38      	ldr	r3, [pc, #224]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b34      	ldr	r3, [pc, #208]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a33      	ldr	r2, [pc, #204]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b31      	ldr	r3, [pc, #196]	; (8001fac <HAL_ADC_MspInit+0x20c>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TPS_1_Pin|TPS_2_Pin;
 8001ef2:	23a0      	movs	r3, #160	; 0xa0
 8001ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f02:	4619      	mov	r1, r3
 8001f04:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <HAL_ADC_MspInit+0x210>)
 8001f06:	f001 fcf1 	bl	80038ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = APPS_1_Pin;
 8001f0a:	2320      	movs	r3, #32
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS_1_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4828      	ldr	r0, [pc, #160]	; (8001fc0 <HAL_ADC_MspInit+0x220>)
 8001f1e:	f001 fce5 	bl	80038ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = APPS_2_Pin;
 8001f22:	2302      	movs	r3, #2
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f26:	2303      	movs	r3, #3
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(APPS_2_GPIO_Port, &GPIO_InitStruct);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	4823      	ldr	r0, [pc, #140]	; (8001fc4 <HAL_ADC_MspInit+0x224>)
 8001f36:	f001 fcd9 	bl	80038ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8001f3a:	4b23      	ldr	r3, [pc, #140]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f3c:	4a23      	ldr	r2, [pc, #140]	; (8001fcc <HAL_ADC_MspInit+0x22c>)
 8001f3e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f46:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f48:	4b1f      	ldr	r3, [pc, #124]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f4e:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001f54:	4b1c      	ldr	r3, [pc, #112]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f5a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f62:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f64:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001f6c:	4b16      	ldr	r3, [pc, #88]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f72:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 8001f74:	4b14      	ldr	r3, [pc, #80]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f7a:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f7c:	4b12      	ldr	r3, [pc, #72]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001f82:	4811      	ldr	r0, [pc, #68]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f84:	f001 f942 	bl	800320c <HAL_DMA_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <HAL_ADC_MspInit+0x1f2>
      Error_Handler();
 8001f8e:	f7ff fed1 	bl	8001d34 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
 8001f98:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <HAL_ADC_MspInit+0x228>)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001f9e:	bf00      	nop
 8001fa0:	3738      	adds	r7, #56	; 0x38
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40012000 	.word	0x40012000
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	200002a0 	.word	0x200002a0
 8001fb8:	40026470 	.word	0x40026470
 8001fbc:	40012100 	.word	0x40012100
 8001fc0:	40020800 	.word	0x40020800
 8001fc4:	40020400 	.word	0x40020400
 8001fc8:	20000300 	.word	0x20000300
 8001fcc:	40026440 	.word	0x40026440

08001fd0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a19      	ldr	r2, [pc, #100]	; (8002054 <HAL_CAN_MspInit+0x84>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d12c      	bne.n	800204c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	4a17      	ldr	r2, [pc, #92]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8001ffc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002000:	6413      	str	r3, [r2, #64]	; 0x40
 8002002:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b11      	ldr	r3, [pc, #68]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8002018:	f043 0302 	orr.w	r3, r3, #2
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b0e      	ldr	r3, [pc, #56]	; (8002058 <HAL_CAN_MspInit+0x88>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800202a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800203c:	2309      	movs	r3, #9
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <HAL_CAN_MspInit+0x8c>)
 8002048:	f001 fc50 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800204c:	bf00      	nop
 800204e:	3728      	adds	r7, #40	; 0x28
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40006400 	.word	0x40006400
 8002058:	40023800 	.word	0x40023800
 800205c:	40020400 	.word	0x40020400

08002060 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a15      	ldr	r2, [pc, #84]	; (80020c4 <HAL_TIM_PWM_MspInit+0x64>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d10e      	bne.n	8002090 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_TIM_PWM_MspInit+0x68>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <HAL_TIM_PWM_MspInit+0x68>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	6453      	str	r3, [r2, #68]	; 0x44
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_TIM_PWM_MspInit+0x68>)
 8002084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800208e:	e012      	b.n	80020b6 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <HAL_TIM_PWM_MspInit+0x6c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d10d      	bne.n	80020b6 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_TIM_PWM_MspInit+0x68>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_TIM_PWM_MspInit+0x68>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6413      	str	r3, [r2, #64]	; 0x40
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <HAL_TIM_PWM_MspInit+0x68>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	60bb      	str	r3, [r7, #8]
 80020b4:	68bb      	ldr	r3, [r7, #8]
}
 80020b6:	bf00      	nop
 80020b8:	3714      	adds	r7, #20
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40010000 	.word	0x40010000
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40000400 	.word	0x40000400

080020d0 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d12b      	bne.n	800214a <HAL_TIM_IC_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_TIM_IC_MspInit+0x84>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a16      	ldr	r2, [pc, #88]	; (8002154 <HAL_TIM_IC_MspInit+0x84>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_TIM_IC_MspInit+0x84>)
 8002104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <HAL_TIM_IC_MspInit+0x84>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a0f      	ldr	r2, [pc, #60]	; (8002154 <HAL_TIM_IC_MspInit+0x84>)
 8002118:	f043 0302 	orr.w	r3, r3, #2
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <HAL_TIM_IC_MspInit+0x84>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800212a:	2308      	movs	r3, #8
 800212c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212e:	2302      	movs	r3, #2
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800213a:	2301      	movs	r3, #1
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	4804      	ldr	r0, [pc, #16]	; (8002158 <HAL_TIM_IC_MspInit+0x88>)
 8002146:	f001 fbd1 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800214a:	bf00      	nop
 800214c:	3728      	adds	r7, #40	; 0x28
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	40020400 	.word	0x40020400

0800215c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a25      	ldr	r2, [pc, #148]	; (8002210 <HAL_TIM_MspPostInit+0xb4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d11f      	bne.n	80021be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_TIM_MspPostInit+0xb8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a23      	ldr	r2, [pc, #140]	; (8002214 <HAL_TIM_MspPostInit+0xb8>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b21      	ldr	r3, [pc, #132]	; (8002214 <HAL_TIM_MspPostInit+0xb8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_H_IN2_Pin|PWM_H_IN1_Pin;
 800219a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2300      	movs	r3, #0
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021ac:	2301      	movs	r3, #1
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	4818      	ldr	r0, [pc, #96]	; (8002218 <HAL_TIM_MspPostInit+0xbc>)
 80021b8:	f001 fb98 	bl	80038ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80021bc:	e023      	b.n	8002206 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a16      	ldr	r2, [pc, #88]	; (800221c <HAL_TIM_MspPostInit+0xc0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d11e      	bne.n	8002206 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <HAL_TIM_MspPostInit+0xb8>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	4a10      	ldr	r2, [pc, #64]	; (8002214 <HAL_TIM_MspPostInit+0xb8>)
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	6313      	str	r3, [r2, #48]	; 0x30
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <HAL_TIM_MspPostInit+0xb8>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_CLUTCH_Pin|PWM_GEAR_Pin;
 80021e4:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80021e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021f6:	2302      	movs	r3, #2
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021fa:	f107 0314 	add.w	r3, r7, #20
 80021fe:	4619      	mov	r1, r3
 8002200:	4807      	ldr	r0, [pc, #28]	; (8002220 <HAL_TIM_MspPostInit+0xc4>)
 8002202:	f001 fb73 	bl	80038ec <HAL_GPIO_Init>
}
 8002206:	bf00      	nop
 8002208:	3728      	adds	r7, #40	; 0x28
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40010000 	.word	0x40010000
 8002214:	40023800 	.word	0x40023800
 8002218:	40020000 	.word	0x40020000
 800221c:	40000400 	.word	0x40000400
 8002220:	40020800 	.word	0x40020800

08002224 <ADC_AvgSamples>:
	ADC_2_HANDLE = 1U,
	ADC_HANDLE_COUNT = 2U
} AdcHandleEnum;

static inline uint16 ADC_AvgSamples(__IO uint16_t* adcBuff, __IO uint16* new_sample)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
	uint16 avg = 0U;
 800222e:	2300      	movs	r3, #0
 8002230:	81fb      	strh	r3, [r7, #14]
	uint16 sample = 0U;
 8002232:	2300      	movs	r3, #0
 8002234:	81bb      	strh	r3, [r7, #12]

	/* Queue new sample in FIFO */
	for(sample = 3U; sample > 0U; --sample)
 8002236:	2303      	movs	r3, #3
 8002238:	81bb      	strh	r3, [r7, #12]
 800223a:	e019      	b.n	8002270 <ADC_AvgSamples+0x4c>
	{
		adcBuff[sample] = adcBuff[sample - 1U];
 800223c:	89bb      	ldrh	r3, [r7, #12]
 800223e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8002242:	3b01      	subs	r3, #1
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	441a      	add	r2, r3
 800224a:	89bb      	ldrh	r3, [r7, #12]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	6879      	ldr	r1, [r7, #4]
 8002250:	440b      	add	r3, r1
 8002252:	8812      	ldrh	r2, [r2, #0]
 8002254:	b292      	uxth	r2, r2
 8002256:	801a      	strh	r2, [r3, #0]
		avg = (avg + adcBuff[sample]);
 8002258:	89bb      	ldrh	r3, [r7, #12]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	b29a      	uxth	r2, r3
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	4413      	add	r3, r2
 8002268:	81fb      	strh	r3, [r7, #14]
	for(sample = 3U; sample > 0U; --sample)
 800226a:	89bb      	ldrh	r3, [r7, #12]
 800226c:	3b01      	subs	r3, #1
 800226e:	81bb      	strh	r3, [r7, #12]
 8002270:	89bb      	ldrh	r3, [r7, #12]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1e2      	bne.n	800223c <ADC_AvgSamples+0x18>
	}
	adcBuff[0U] = *new_sample;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	881b      	ldrh	r3, [r3, #0]
 800227a:	b29a      	uxth	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	801a      	strh	r2, [r3, #0]
	avg += *new_sample;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	881b      	ldrh	r3, [r3, #0]
 8002284:	b29a      	uxth	r2, r3
 8002286:	89fb      	ldrh	r3, [r7, #14]
 8002288:	4413      	add	r3, r2
 800228a:	81fb      	strh	r3, [r7, #14]
	avg /= 4U;
 800228c:	89fb      	ldrh	r3, [r7, #14]
 800228e:	089b      	lsrs	r3, r3, #2
 8002290:	81fb      	strh	r3, [r7, #14]

	return avg;
 8002292:	89fb      	ldrh	r3, [r7, #14]
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <IRQ_Init>:
/* External variables --------------------------------------------------------*/
extern DMA_HandleTypeDef hdma_adc1;
extern DMA_HandleTypeDef hdma_adc2;
/* USER CODE BEGIN EV */
ErrorEnum IRQ_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
	ErrorEnum err = ERROR_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	71fb      	strb	r3, [r7, #7]

	adc1Channels = ADC_getAdcStruct(ADC_1_HANDLE);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7fe f936 	bl	800051c <ADC_getAdcStruct>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <IRQ_Init+0x40>)
 80022b4:	6013      	str	r3, [r2, #0]
	adc2Channels = ADC_getAdcStruct(ADC_2_HANDLE);
 80022b6:	2001      	movs	r0, #1
 80022b8:	f7fe f930 	bl	800051c <ADC_getAdcStruct>
 80022bc:	4603      	mov	r3, r0
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <IRQ_Init+0x44>)
 80022c0:	6013      	str	r3, [r2, #0]

	if ((adc1Channels == NULL) || (adc2Channels == NULL)) {
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <IRQ_Init+0x40>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <IRQ_Init+0x32>
 80022ca:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <IRQ_Init+0x44>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <IRQ_Init+0x36>
		err = ERROR_NULL;
 80022d2:	2302      	movs	r3, #2
 80022d4:	71fb      	strb	r3, [r7, #7]
	}

	return err;
 80022d6:	79fb      	ldrb	r3, [r7, #7]
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000046c 	.word	0x2000046c
 80022e4:	20000470 	.word	0x20000470

080022e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <MemManage_Handler+0x4>

08002302 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <UsageFault_Handler+0x4>

0800230e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800233c:	f000 f926 	bl	800258c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SchedulerCallback();
 8002340:	f7fe fea2 	bl	8001088 <SchedulerCallback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}

08002348 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002348:	b598      	push	{r3, r4, r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800234c:	483e      	ldr	r0, [pc, #248]	; (8002448 <DMA2_Stream2_IRQHandler+0x100>)
 800234e:	f001 f863 	bl	8003418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  adc2Channels[ADC_CHANNEL_TPS_1].avg = ADC_AvgSamples(adc2Channels[ADC_CHANNEL_TPS_1].avgBuff, adc2Channels[ADC_CHANNEL_TPS_1].raw);
 8002352:	4b3e      	ldr	r3, [pc, #248]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	1d9a      	adds	r2, r3, #6
 8002358:	4b3c      	ldr	r3, [pc, #240]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	493b      	ldr	r1, [pc, #236]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 8002360:	680c      	ldr	r4, [r1, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7ff ff5d 	bl	8002224 <ADC_AvgSamples>
 800236a:	4603      	mov	r3, r0
 800236c:	80a3      	strh	r3, [r4, #4]
  adc2Channels[ADC_CHANNEL_TPS_2].avg = ADC_AvgSamples(adc2Channels[ADC_CHANNEL_TPS_2].avgBuff, adc2Channels[ADC_CHANNEL_TPS_2].raw);
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	3314      	adds	r3, #20
 8002374:	1d9a      	adds	r2, r3, #6
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	3314      	adds	r3, #20
 800237c:	6819      	ldr	r1, [r3, #0]
 800237e:	4b33      	ldr	r3, [pc, #204]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f103 0414 	add.w	r4, r3, #20
 8002386:	4610      	mov	r0, r2
 8002388:	f7ff ff4c 	bl	8002224 <ADC_AvgSamples>
 800238c:	4603      	mov	r3, r0
 800238e:	80a3      	strh	r3, [r4, #4]
  adc2Channels[ADC_CHANNEL_APPS_1].avg = ADC_AvgSamples(adc2Channels[ADC_CHANNEL_APPS_1].avgBuff, adc2Channels[ADC_CHANNEL_APPS_1].raw);
 8002390:	4b2e      	ldr	r3, [pc, #184]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	3328      	adds	r3, #40	; 0x28
 8002396:	1d9a      	adds	r2, r3, #6
 8002398:	4b2c      	ldr	r3, [pc, #176]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3328      	adds	r3, #40	; 0x28
 800239e:	6819      	ldr	r1, [r3, #0]
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80023a8:	4610      	mov	r0, r2
 80023aa:	f7ff ff3b 	bl	8002224 <ADC_AvgSamples>
 80023ae:	4603      	mov	r3, r0
 80023b0:	80a3      	strh	r3, [r4, #4]
  adc2Channels[ADC_CHANNEL_APPS_2].avg = ADC_AvgSamples(adc2Channels[ADC_CHANNEL_APPS_2].avgBuff, adc2Channels[ADC_CHANNEL_APPS_2].raw);
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	333c      	adds	r3, #60	; 0x3c
 80023b8:	1d9a      	adds	r2, r3, #6
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	333c      	adds	r3, #60	; 0x3c
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 80023ca:	4610      	mov	r0, r2
 80023cc:	f7ff ff2a 	bl	8002224 <ADC_AvgSamples>
 80023d0:	4603      	mov	r3, r0
 80023d2:	80a3      	strh	r3, [r4, #4]

#ifdef SHOW_MIN_MAX
  if (HAL_GetTick() > 100U) {
 80023d4:	f000 f8ee 	bl	80025b4 <HAL_GetTick>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b64      	cmp	r3, #100	; 0x64
 80023dc:	d916      	bls.n	800240c <DMA2_Stream2_IRQHandler+0xc4>
	  ADC_updateMinMax(&adc2Channels[ADC_CHANNEL_TPS_1]);
 80023de:	4b1b      	ldr	r3, [pc, #108]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f872 	bl	80004cc <ADC_updateMinMax>
	  ADC_updateMinMax(&adc2Channels[ADC_CHANNEL_TPS_2]);
 80023e8:	4b18      	ldr	r3, [pc, #96]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3314      	adds	r3, #20
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f86c 	bl	80004cc <ADC_updateMinMax>
	  ADC_updateMinMax(&adc2Channels[ADC_CHANNEL_APPS_1]);
 80023f4:	4b15      	ldr	r3, [pc, #84]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	3328      	adds	r3, #40	; 0x28
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f866 	bl	80004cc <ADC_updateMinMax>
	  ADC_updateMinMax(&adc2Channels[ADC_CHANNEL_APPS_2]);
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	333c      	adds	r3, #60	; 0x3c
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f860 	bl	80004cc <ADC_updateMinMax>
  }
#endif

#ifdef RUN_DEBUG
  debugAdc2[ADC_CHANNEL_TPS_1] = adc2Channels[ADC_CHANNEL_TPS_1].avg;
 800240c:	4b0f      	ldr	r3, [pc, #60]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	889b      	ldrh	r3, [r3, #4]
 8002412:	b29a      	uxth	r2, r3
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <DMA2_Stream2_IRQHandler+0x108>)
 8002416:	801a      	strh	r2, [r3, #0]
  debugAdc2[ADC_CHANNEL_TPS_2] = adc2Channels[ADC_CHANNEL_TPS_2].avg;
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	3314      	adds	r3, #20
 800241e:	889b      	ldrh	r3, [r3, #4]
 8002420:	b29a      	uxth	r2, r3
 8002422:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <DMA2_Stream2_IRQHandler+0x108>)
 8002424:	805a      	strh	r2, [r3, #2]
  debugAdc2[ADC_CHANNEL_APPS_1] = adc2Channels[ADC_CHANNEL_APPS_1].avg;
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	3328      	adds	r3, #40	; 0x28
 800242c:	889b      	ldrh	r3, [r3, #4]
 800242e:	b29a      	uxth	r2, r3
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <DMA2_Stream2_IRQHandler+0x108>)
 8002432:	809a      	strh	r2, [r3, #4]
  debugAdc2[ADC_CHANNEL_APPS_2] = adc2Channels[ADC_CHANNEL_APPS_2].avg;
 8002434:	4b05      	ldr	r3, [pc, #20]	; (800244c <DMA2_Stream2_IRQHandler+0x104>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	333c      	adds	r3, #60	; 0x3c
 800243a:	889b      	ldrh	r3, [r3, #4]
 800243c:	b29a      	uxth	r2, r3
 800243e:	4b04      	ldr	r3, [pc, #16]	; (8002450 <DMA2_Stream2_IRQHandler+0x108>)
 8002440:	80da      	strh	r2, [r3, #6]
#endif
  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	bd98      	pop	{r3, r4, r7, pc}
 8002446:	bf00      	nop
 8002448:	20000300 	.word	0x20000300
 800244c:	20000470 	.word	0x20000470
 8002450:	20000474 	.word	0x20000474

08002454 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <DMA2_Stream4_IRQHandler+0x10>)
 800245a:	f000 ffdd 	bl	8003418 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	200002a0 	.word	0x200002a0

08002468 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800246c:	4b08      	ldr	r3, [pc, #32]	; (8002490 <SystemInit+0x28>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	4a07      	ldr	r2, [pc, #28]	; (8002490 <SystemInit+0x28>)
 8002474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SystemInit+0x28>)
 800247e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002482:	609a      	str	r2, [r3, #8]
#endif
}
 8002484:	bf00      	nop
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002494:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002498:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800249a:	e003      	b.n	80024a4 <LoopCopyDataInit>

0800249c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800249e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80024a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80024a2:	3104      	adds	r1, #4

080024a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80024a4:	480b      	ldr	r0, [pc, #44]	; (80024d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80024a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80024aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80024ac:	d3f6      	bcc.n	800249c <CopyDataInit>
  ldr  r2, =_sbss
 80024ae:	4a0b      	ldr	r2, [pc, #44]	; (80024dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80024b0:	e002      	b.n	80024b8 <LoopFillZerobss>

080024b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80024b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80024b4:	f842 3b04 	str.w	r3, [r2], #4

080024b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80024ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80024bc:	d3f9      	bcc.n	80024b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80024be:	f7ff ffd3 	bl	8002468 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024c2:	f003 f809 	bl	80054d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024c6:	f7ff f821 	bl	800150c <main>
  bx  lr    
 80024ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80024d0:	08005584 	.word	0x08005584
  ldr  r0, =_sdata
 80024d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80024d8:	200000f4 	.word	0x200000f4
  ldr  r2, =_sbss
 80024dc:	200000f8 	.word	0x200000f8
  ldr  r3, = _ebss
 80024e0:	20000480 	.word	0x20000480

080024e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024e4:	e7fe      	b.n	80024e4 <ADC_IRQHandler>
	...

080024e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024ec:	4b0e      	ldr	r3, [pc, #56]	; (8002528 <HAL_Init+0x40>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a0d      	ldr	r2, [pc, #52]	; (8002528 <HAL_Init+0x40>)
 80024f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024f8:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_Init+0x40>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <HAL_Init+0x40>)
 80024fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002502:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <HAL_Init+0x40>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a07      	ldr	r2, [pc, #28]	; (8002528 <HAL_Init+0x40>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002510:	2003      	movs	r0, #3
 8002512:	f000 fe39 	bl	8003188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f808 	bl	800252c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800251c:	f7ff fc18 	bl	8001d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00

0800252c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002534:	4b12      	ldr	r3, [pc, #72]	; (8002580 <HAL_InitTick+0x54>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_InitTick+0x58>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	4619      	mov	r1, r3
 800253e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002542:	fbb3 f3f1 	udiv	r3, r3, r1
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fe51 	bl	80031f2 <HAL_SYSTICK_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e00e      	b.n	8002578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b0f      	cmp	r3, #15
 800255e:	d80a      	bhi.n	8002576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002560:	2200      	movs	r2, #0
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	f04f 30ff 	mov.w	r0, #4294967295
 8002568:	f000 fe19 	bl	800319e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800256c:	4a06      	ldr	r2, [pc, #24]	; (8002588 <HAL_InitTick+0x5c>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
 8002574:	e000      	b.n	8002578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
}
 8002578:	4618      	mov	r0, r3
 800257a:	3708      	adds	r7, #8
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	200000e8 	.word	0x200000e8
 8002584:	200000f0 	.word	0x200000f0
 8002588:	200000ec 	.word	0x200000ec

0800258c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_IncTick+0x20>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	461a      	mov	r2, r3
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <HAL_IncTick+0x24>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4413      	add	r3, r2
 800259c:	4a04      	ldr	r2, [pc, #16]	; (80025b0 <HAL_IncTick+0x24>)
 800259e:	6013      	str	r3, [r2, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	200000f0 	.word	0x200000f0
 80025b0:	2000047c 	.word	0x2000047c

080025b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  return uwTick;
 80025b8:	4b03      	ldr	r3, [pc, #12]	; (80025c8 <HAL_GetTick+0x14>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop
 80025c8:	2000047c 	.word	0x2000047c

080025cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e033      	b.n	800264a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff fbd8 	bl	8001da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 0310 	and.w	r3, r3, #16
 8002606:	2b00      	cmp	r3, #0
 8002608:	d118      	bne.n	800263c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002612:	f023 0302 	bic.w	r3, r3, #2
 8002616:	f043 0202 	orr.w	r2, r3, #2
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fa68 	bl	8002af4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f023 0303 	bic.w	r3, r3, #3
 8002632:	f043 0201 	orr.w	r2, r3, #1
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
 800263a:	e001      	b.n	8002640 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002648:	7bfb      	ldrb	r3, [r7, #15]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002660:	2300      	movs	r3, #0
 8002662:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Start_DMA+0x1e>
 800266e:	2302      	movs	r3, #2
 8002670:	e0e9      	b.n	8002846 <HAL_ADC_Start_DMA+0x1f2>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d018      	beq.n	80026ba <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f042 0201 	orr.w	r2, r2, #1
 8002696:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002698:	4b6d      	ldr	r3, [pc, #436]	; (8002850 <HAL_ADC_Start_DMA+0x1fc>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a6d      	ldr	r2, [pc, #436]	; (8002854 <HAL_ADC_Start_DMA+0x200>)
 800269e:	fba2 2303 	umull	r2, r3, r2, r3
 80026a2:	0c9a      	lsrs	r2, r3, #18
 80026a4:	4613      	mov	r3, r2
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	4413      	add	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026ac:	e002      	b.n	80026b4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	3b01      	subs	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f9      	bne.n	80026ae <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026c8:	d107      	bne.n	80026da <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0301 	and.w	r3, r3, #1
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	f040 80a1 	bne.w	800282c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002710:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002714:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002720:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002724:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002728:	d106      	bne.n	8002738 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	f023 0206 	bic.w	r2, r3, #6
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	645a      	str	r2, [r3, #68]	; 0x44
 8002736:	e002      	b.n	800273e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002746:	4b44      	ldr	r3, [pc, #272]	; (8002858 <HAL_ADC_Start_DMA+0x204>)
 8002748:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	4a43      	ldr	r2, [pc, #268]	; (800285c <HAL_ADC_Start_DMA+0x208>)
 8002750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002756:	4a42      	ldr	r2, [pc, #264]	; (8002860 <HAL_ADC_Start_DMA+0x20c>)
 8002758:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275e:	4a41      	ldr	r2, [pc, #260]	; (8002864 <HAL_ADC_Start_DMA+0x210>)
 8002760:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800276a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800277a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800278a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	334c      	adds	r3, #76	; 0x4c
 8002796:	4619      	mov	r1, r3
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f000 fde4 	bl	8003368 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d12a      	bne.n	8002802 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a2d      	ldr	r2, [pc, #180]	; (8002868 <HAL_ADC_Start_DMA+0x214>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d015      	beq.n	80027e2 <HAL_ADC_Start_DMA+0x18e>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2c      	ldr	r2, [pc, #176]	; (800286c <HAL_ADC_Start_DMA+0x218>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d105      	bne.n	80027cc <HAL_ADC_Start_DMA+0x178>
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <HAL_ADC_Start_DMA+0x204>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a27      	ldr	r2, [pc, #156]	; (8002870 <HAL_ADC_Start_DMA+0x21c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d136      	bne.n	8002844 <HAL_ADC_Start_DMA+0x1f0>
 80027d6:	4b20      	ldr	r3, [pc, #128]	; (8002858 <HAL_ADC_Start_DMA+0x204>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d130      	bne.n	8002844 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d129      	bne.n	8002844 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80027fe:	609a      	str	r2, [r3, #8]
 8002800:	e020      	b.n	8002844 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a18      	ldr	r2, [pc, #96]	; (8002868 <HAL_ADC_Start_DMA+0x214>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d11b      	bne.n	8002844 <HAL_ADC_Start_DMA+0x1f0>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d114      	bne.n	8002844 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	e00b      	b.n	8002844 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	f043 0210 	orr.w	r2, r3, #16
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	200000e8 	.word	0x200000e8
 8002854:	431bde83 	.word	0x431bde83
 8002858:	40012300 	.word	0x40012300
 800285c:	08002ced 	.word	0x08002ced
 8002860:	08002da7 	.word	0x08002da7
 8002864:	08002dc3 	.word	0x08002dc3
 8002868:	40012000 	.word	0x40012000
 800286c:	40012100 	.word	0x40012100
 8002870:	40012200 	.word	0x40012200

08002874 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d101      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x1c>
 80028c8:	2302      	movs	r3, #2
 80028ca:	e105      	b.n	8002ad8 <HAL_ADC_ConfigChannel+0x228>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b09      	cmp	r3, #9
 80028da:	d925      	bls.n	8002928 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68d9      	ldr	r1, [r3, #12]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	4613      	mov	r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4413      	add	r3, r2
 80028f0:	3b1e      	subs	r3, #30
 80028f2:	2207      	movs	r2, #7
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	43da      	mvns	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	400a      	ands	r2, r1
 8002900:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	68d9      	ldr	r1, [r3, #12]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	4618      	mov	r0, r3
 8002914:	4603      	mov	r3, r0
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4403      	add	r3, r0
 800291a:	3b1e      	subs	r3, #30
 800291c:	409a      	lsls	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	60da      	str	r2, [r3, #12]
 8002926:	e022      	b.n	800296e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	6919      	ldr	r1, [r3, #16]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	2207      	movs	r2, #7
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	43da      	mvns	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	400a      	ands	r2, r1
 800294a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6919      	ldr	r1, [r3, #16]
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	689a      	ldr	r2, [r3, #8]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	4618      	mov	r0, r3
 800295e:	4603      	mov	r3, r0
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	4403      	add	r3, r0
 8002964:	409a      	lsls	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b06      	cmp	r3, #6
 8002974:	d824      	bhi.n	80029c0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	4413      	add	r3, r2
 8002986:	3b05      	subs	r3, #5
 8002988:	221f      	movs	r2, #31
 800298a:	fa02 f303 	lsl.w	r3, r2, r3
 800298e:	43da      	mvns	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	400a      	ands	r2, r1
 8002996:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685a      	ldr	r2, [r3, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4413      	add	r3, r2
 80029b0:	3b05      	subs	r3, #5
 80029b2:	fa00 f203 	lsl.w	r2, r0, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	635a      	str	r2, [r3, #52]	; 0x34
 80029be:	e04c      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b0c      	cmp	r3, #12
 80029c6:	d824      	bhi.n	8002a12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	3b23      	subs	r3, #35	; 0x23
 80029da:	221f      	movs	r2, #31
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43da      	mvns	r2, r3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	400a      	ands	r2, r1
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	3b23      	subs	r3, #35	; 0x23
 8002a04:	fa00 f203 	lsl.w	r2, r0, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a10:	e023      	b.n	8002a5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	3b41      	subs	r3, #65	; 0x41
 8002a24:	221f      	movs	r2, #31
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	400a      	ands	r2, r1
 8002a32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	b29b      	uxth	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3b41      	subs	r3, #65	; 0x41
 8002a4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a5a:	4b22      	ldr	r3, [pc, #136]	; (8002ae4 <HAL_ADC_ConfigChannel+0x234>)
 8002a5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a21      	ldr	r2, [pc, #132]	; (8002ae8 <HAL_ADC_ConfigChannel+0x238>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d109      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1cc>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b12      	cmp	r3, #18
 8002a6e:	d105      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a19      	ldr	r2, [pc, #100]	; (8002ae8 <HAL_ADC_ConfigChannel+0x238>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d123      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x21e>
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2b10      	cmp	r3, #16
 8002a8c:	d003      	beq.n	8002a96 <HAL_ADC_ConfigChannel+0x1e6>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b11      	cmp	r3, #17
 8002a94:	d11b      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2b10      	cmp	r3, #16
 8002aa8:	d111      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002aaa:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_ADC_ConfigChannel+0x23c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a10      	ldr	r2, [pc, #64]	; (8002af0 <HAL_ADC_ConfigChannel+0x240>)
 8002ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab4:	0c9a      	lsrs	r2, r3, #18
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	4413      	add	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ac0:	e002      	b.n	8002ac8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f9      	bne.n	8002ac2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3714      	adds	r7, #20
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	40012000 	.word	0x40012000
 8002aec:	200000e8 	.word	0x200000e8
 8002af0:	431bde83 	.word	0x431bde83

08002af4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002afc:	4b79      	ldr	r3, [pc, #484]	; (8002ce4 <ADC_Init+0x1f0>)
 8002afe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	431a      	orrs	r2, r3
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	021a      	lsls	r2, r3, #8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689a      	ldr	r2, [r3, #8]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	6899      	ldr	r1, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68da      	ldr	r2, [r3, #12]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	4a58      	ldr	r2, [pc, #352]	; (8002ce8 <ADC_Init+0x1f4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d022      	beq.n	8002bd2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b9a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6899      	ldr	r1, [r3, #8]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	430a      	orrs	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	689a      	ldr	r2, [r3, #8]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6899      	ldr	r1, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	e00f      	b.n	8002bf2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689a      	ldr	r2, [r3, #8]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002be0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bf0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0202 	bic.w	r2, r2, #2
 8002c00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	6899      	ldr	r1, [r3, #8]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7e1b      	ldrb	r3, [r3, #24]
 8002c0c:	005a      	lsls	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d01b      	beq.n	8002c58 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c2e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c3e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	035a      	lsls	r2, r3, #13
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	605a      	str	r2, [r3, #4]
 8002c56:	e007      	b.n	8002c68 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c66:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	69db      	ldr	r3, [r3, #28]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	051a      	lsls	r2, r3, #20
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6899      	ldr	r1, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002caa:	025a      	lsls	r2, r3, #9
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	6899      	ldr	r1, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	029a      	lsls	r2, r3, #10
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	609a      	str	r2, [r3, #8]
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	40012300 	.word	0x40012300
 8002ce8:	0f000001 	.word	0x0f000001

08002cec <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d13c      	bne.n	8002d80 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d12b      	bne.n	8002d78 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d127      	bne.n	8002d78 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d006      	beq.n	8002d44 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d119      	bne.n	8002d78 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0220 	bic.w	r2, r2, #32
 8002d52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d58:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d105      	bne.n	8002d78 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f7ff fd7b 	bl	8002874 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d7e:	e00e      	b.n	8002d9e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f003 0310 	and.w	r3, r3, #16
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f7ff fd85 	bl	800289c <HAL_ADC_ErrorCallback>
}
 8002d92:	e004      	b.n	8002d9e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
}
 8002d9e:	bf00      	nop
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002db4:	68f8      	ldr	r0, [r7, #12]
 8002db6:	f7ff fd67 	bl	8002888 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dba:	bf00      	nop
 8002dbc:	3710      	adds	r7, #16
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}

08002dc2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b084      	sub	sp, #16
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dce:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2240      	movs	r2, #64	; 0x40
 8002dd4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f043 0204 	orr.w	r2, r3, #4
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff fd5a 	bl	800289c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}

08002df0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b084      	sub	sp, #16
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e0ed      	b.n	8002fde <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d102      	bne.n	8002e14 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f7ff f8de 	bl	8001fd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e24:	f7ff fbc6 	bl	80025b4 <HAL_GetTick>
 8002e28:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e2a:	e012      	b.n	8002e52 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e2c:	f7ff fbc2 	bl	80025b4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b0a      	cmp	r3, #10
 8002e38:	d90b      	bls.n	8002e52 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2205      	movs	r2, #5
 8002e4a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0c5      	b.n	8002fde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0e5      	beq.n	8002e2c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 0202 	bic.w	r2, r2, #2
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e70:	f7ff fba0 	bl	80025b4 <HAL_GetTick>
 8002e74:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e76:	e012      	b.n	8002e9e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e78:	f7ff fb9c 	bl	80025b4 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b0a      	cmp	r3, #10
 8002e84:	d90b      	bls.n	8002e9e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2205      	movs	r2, #5
 8002e96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e09f      	b.n	8002fde <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1e5      	bne.n	8002e78 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	7e1b      	ldrb	r3, [r3, #24]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d108      	bne.n	8002ec6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ec2:	601a      	str	r2, [r3, #0]
 8002ec4:	e007      	b.n	8002ed6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ed4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	7e5b      	ldrb	r3, [r3, #25]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d108      	bne.n	8002ef0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	e007      	b.n	8002f00 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7e9b      	ldrb	r3, [r3, #26]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d108      	bne.n	8002f1a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0220 	orr.w	r2, r2, #32
 8002f16:	601a      	str	r2, [r3, #0]
 8002f18:	e007      	b.n	8002f2a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0220 	bic.w	r2, r2, #32
 8002f28:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7edb      	ldrb	r3, [r3, #27]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d108      	bne.n	8002f44 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0210 	bic.w	r2, r2, #16
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	e007      	b.n	8002f54 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f042 0210 	orr.w	r2, r2, #16
 8002f52:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	7f1b      	ldrb	r3, [r3, #28]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d108      	bne.n	8002f6e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f042 0208 	orr.w	r2, r2, #8
 8002f6a:	601a      	str	r2, [r3, #0]
 8002f6c:	e007      	b.n	8002f7e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0208 	bic.w	r2, r2, #8
 8002f7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	7f5b      	ldrb	r3, [r3, #29]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d108      	bne.n	8002f98 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 0204 	orr.w	r2, r2, #4
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e007      	b.n	8002fa8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0204 	bic.w	r2, r2, #4
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	ea42 0103 	orr.w	r1, r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	1e5a      	subs	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ff8:	4b0c      	ldr	r3, [pc, #48]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003004:	4013      	ands	r3, r2
 8003006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800301a:	4a04      	ldr	r2, [pc, #16]	; (800302c <__NVIC_SetPriorityGrouping+0x44>)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	60d3      	str	r3, [r2, #12]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003030:	b480      	push	{r7}
 8003032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003034:	4b04      	ldr	r3, [pc, #16]	; (8003048 <__NVIC_GetPriorityGrouping+0x18>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	0a1b      	lsrs	r3, r3, #8
 800303a:	f003 0307 	and.w	r3, r3, #7
}
 800303e:	4618      	mov	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr
 8003048:	e000ed00 	.word	0xe000ed00

0800304c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	db0b      	blt.n	8003076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	f003 021f 	and.w	r2, r3, #31
 8003064:	4907      	ldr	r1, [pc, #28]	; (8003084 <__NVIC_EnableIRQ+0x38>)
 8003066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800306a:	095b      	lsrs	r3, r3, #5
 800306c:	2001      	movs	r0, #1
 800306e:	fa00 f202 	lsl.w	r2, r0, r2
 8003072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	e000e100 	.word	0xe000e100

08003088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db0a      	blt.n	80030b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	490c      	ldr	r1, [pc, #48]	; (80030d4 <__NVIC_SetPriority+0x4c>)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	0112      	lsls	r2, r2, #4
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	440b      	add	r3, r1
 80030ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030b0:	e00a      	b.n	80030c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	; (80030d8 <__NVIC_SetPriority+0x50>)
 80030b8:	79fb      	ldrb	r3, [r7, #7]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	3b04      	subs	r3, #4
 80030c0:	0112      	lsls	r2, r2, #4
 80030c2:	b2d2      	uxtb	r2, r2
 80030c4:	440b      	add	r3, r1
 80030c6:	761a      	strb	r2, [r3, #24]
}
 80030c8:	bf00      	nop
 80030ca:	370c      	adds	r7, #12
 80030cc:	46bd      	mov	sp, r7
 80030ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d2:	4770      	bx	lr
 80030d4:	e000e100 	.word	0xe000e100
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030dc:	b480      	push	{r7}
 80030de:	b089      	sub	sp, #36	; 0x24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f1c3 0307 	rsb	r3, r3, #7
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	bf28      	it	cs
 80030fa:	2304      	movcs	r3, #4
 80030fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	3304      	adds	r3, #4
 8003102:	2b06      	cmp	r3, #6
 8003104:	d902      	bls.n	800310c <NVIC_EncodePriority+0x30>
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3b03      	subs	r3, #3
 800310a:	e000      	b.n	800310e <NVIC_EncodePriority+0x32>
 800310c:	2300      	movs	r3, #0
 800310e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	401a      	ands	r2, r3
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003124:	f04f 31ff 	mov.w	r1, #4294967295
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa01 f303 	lsl.w	r3, r1, r3
 800312e:	43d9      	mvns	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003134:	4313      	orrs	r3, r2
         );
}
 8003136:	4618      	mov	r0, r3
 8003138:	3724      	adds	r7, #36	; 0x24
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
	...

08003144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3b01      	subs	r3, #1
 8003150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003154:	d301      	bcc.n	800315a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003156:	2301      	movs	r3, #1
 8003158:	e00f      	b.n	800317a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800315a:	4a0a      	ldr	r2, [pc, #40]	; (8003184 <SysTick_Config+0x40>)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	3b01      	subs	r3, #1
 8003160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003162:	210f      	movs	r1, #15
 8003164:	f04f 30ff 	mov.w	r0, #4294967295
 8003168:	f7ff ff8e 	bl	8003088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800316c:	4b05      	ldr	r3, [pc, #20]	; (8003184 <SysTick_Config+0x40>)
 800316e:	2200      	movs	r2, #0
 8003170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003172:	4b04      	ldr	r3, [pc, #16]	; (8003184 <SysTick_Config+0x40>)
 8003174:	2207      	movs	r2, #7
 8003176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003178:	2300      	movs	r3, #0
}
 800317a:	4618      	mov	r0, r3
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	e000e010 	.word	0xe000e010

08003188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f7ff ff29 	bl	8002fe8 <__NVIC_SetPriorityGrouping>
}
 8003196:	bf00      	nop
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	4603      	mov	r3, r0
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
 80031aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031b0:	f7ff ff3e 	bl	8003030 <__NVIC_GetPriorityGrouping>
 80031b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	68b9      	ldr	r1, [r7, #8]
 80031ba:	6978      	ldr	r0, [r7, #20]
 80031bc:	f7ff ff8e 	bl	80030dc <NVIC_EncodePriority>
 80031c0:	4602      	mov	r2, r0
 80031c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c6:	4611      	mov	r1, r2
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff5d 	bl	8003088 <__NVIC_SetPriority>
}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	4603      	mov	r3, r0
 80031de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff ff31 	bl	800304c <__NVIC_EnableIRQ>
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b082      	sub	sp, #8
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff ffa2 	bl	8003144 <SysTick_Config>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
	...

0800320c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003218:	f7ff f9cc 	bl	80025b4 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d101      	bne.n	8003228 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e099      	b.n	800335c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0201 	bic.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003248:	e00f      	b.n	800326a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800324a:	f7ff f9b3 	bl	80025b4 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b05      	cmp	r3, #5
 8003256:	d908      	bls.n	800326a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2220      	movs	r2, #32
 800325c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2203      	movs	r2, #3
 8003262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e078      	b.n	800335c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0301 	and.w	r3, r3, #1
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e8      	bne.n	800324a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4b38      	ldr	r3, [pc, #224]	; (8003364 <HAL_DMA_Init+0x158>)
 8003284:	4013      	ands	r3, r2
 8003286:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003296:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d107      	bne.n	80032d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032cc:	4313      	orrs	r3, r2
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	f023 0307 	bic.w	r3, r3, #7
 80032ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	697a      	ldr	r2, [r7, #20]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d117      	bne.n	800332e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fa6f 	bl	80037f4 <DMA_CheckFifoParam>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2240      	movs	r2, #64	; 0x40
 8003320:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800332a:	2301      	movs	r3, #1
 800332c:	e016      	b.n	800335c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa26 	bl	8003788 <DMA_CalcBaseAndBitshift>
 800333c:	4603      	mov	r3, r0
 800333e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003344:	223f      	movs	r2, #63	; 0x3f
 8003346:	409a      	lsls	r2, r3
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	f010803f 	.word	0xf010803f

08003368 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003386:	2b01      	cmp	r3, #1
 8003388:	d101      	bne.n	800338e <HAL_DMA_Start_IT+0x26>
 800338a:	2302      	movs	r3, #2
 800338c:	e040      	b.n	8003410 <HAL_DMA_Start_IT+0xa8>
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d12f      	bne.n	8003402 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2202      	movs	r2, #2
 80033a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	68b9      	ldr	r1, [r7, #8]
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 f9b8 	bl	800372c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c0:	223f      	movs	r2, #63	; 0x3f
 80033c2:	409a      	lsls	r2, r3
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0216 	orr.w	r2, r2, #22
 80033d6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f042 0208 	orr.w	r2, r2, #8
 80033ee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	e005      	b.n	800340e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800340a:	2302      	movs	r3, #2
 800340c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800340e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003424:	4b8e      	ldr	r3, [pc, #568]	; (8003660 <HAL_DMA_IRQHandler+0x248>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a8e      	ldr	r2, [pc, #568]	; (8003664 <HAL_DMA_IRQHandler+0x24c>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0a9b      	lsrs	r3, r3, #10
 8003430:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	2208      	movs	r2, #8
 8003444:	409a      	lsls	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4013      	ands	r3, r2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d01a      	beq.n	8003484 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0204 	bic.w	r2, r2, #4
 800346a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003470:	2208      	movs	r2, #8
 8003472:	409a      	lsls	r2, r3
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	f043 0201 	orr.w	r2, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003488:	2201      	movs	r2, #1
 800348a:	409a      	lsls	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4013      	ands	r3, r2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	2201      	movs	r2, #1
 80034a8:	409a      	lsls	r2, r3
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b2:	f043 0202 	orr.w	r2, r3, #2
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034be:	2204      	movs	r2, #4
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d012      	beq.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d00b      	beq.n	80034f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034dc:	2204      	movs	r2, #4
 80034de:	409a      	lsls	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e8:	f043 0204 	orr.w	r2, r3, #4
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034f4:	2210      	movs	r2, #16
 80034f6:	409a      	lsls	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4013      	ands	r3, r2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d043      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0308 	and.w	r3, r3, #8
 800350a:	2b00      	cmp	r3, #0
 800350c:	d03c      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003512:	2210      	movs	r2, #16
 8003514:	409a      	lsls	r2, r3
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d018      	beq.n	800355a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d108      	bne.n	8003548 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	2b00      	cmp	r3, #0
 800353c:	d024      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	4798      	blx	r3
 8003546:	e01f      	b.n	8003588 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800354c:	2b00      	cmp	r3, #0
 800354e:	d01b      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
 8003558:	e016      	b.n	8003588 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003564:	2b00      	cmp	r3, #0
 8003566:	d107      	bne.n	8003578 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0208 	bic.w	r2, r2, #8
 8003576:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357c:	2b00      	cmp	r3, #0
 800357e:	d003      	beq.n	8003588 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	2220      	movs	r2, #32
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 808f 	beq.w	80036b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 8087 	beq.w	80036b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	2220      	movs	r2, #32
 80035b0:	409a      	lsls	r2, r3
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b05      	cmp	r3, #5
 80035c0:	d136      	bne.n	8003630 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0216 	bic.w	r2, r2, #22
 80035d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695a      	ldr	r2, [r3, #20]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <HAL_DMA_IRQHandler+0x1da>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f022 0208 	bic.w	r2, r2, #8
 8003600:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003606:	223f      	movs	r2, #63	; 0x3f
 8003608:	409a      	lsls	r2, r3
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003622:	2b00      	cmp	r3, #0
 8003624:	d07e      	beq.n	8003724 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	4798      	blx	r3
        }
        return;
 800362e:	e079      	b.n	8003724 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d01d      	beq.n	800367a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003650:	2b00      	cmp	r3, #0
 8003652:	d031      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
 800365c:	e02c      	b.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
 800365e:	bf00      	nop
 8003660:	200000e8 	.word	0x200000e8
 8003664:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d023      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	4798      	blx	r3
 8003678:	e01e      	b.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10f      	bne.n	80036a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0210 	bic.w	r2, r2, #16
 8003696:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d003      	beq.n	80036b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d032      	beq.n	8003726 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c4:	f003 0301 	and.w	r3, r3, #1
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d022      	beq.n	8003712 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2205      	movs	r2, #5
 80036d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	3301      	adds	r3, #1
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d307      	bcc.n	8003700 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f2      	bne.n	80036e4 <HAL_DMA_IRQHandler+0x2cc>
 80036fe:	e000      	b.n	8003702 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003700:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003716:	2b00      	cmp	r3, #0
 8003718:	d005      	beq.n	8003726 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	4798      	blx	r3
 8003722:	e000      	b.n	8003726 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003724:	bf00      	nop
    }
  }
}
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800372c:	b480      	push	{r7}
 800372e:	b085      	sub	sp, #20
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003748:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	2b40      	cmp	r3, #64	; 0x40
 8003758:	d108      	bne.n	800376c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800376a:	e007      	b.n	800377c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68ba      	ldr	r2, [r7, #8]
 8003772:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	60da      	str	r2, [r3, #12]
}
 800377c:	bf00      	nop
 800377e:	3714      	adds	r7, #20
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003788:	b480      	push	{r7}
 800378a:	b085      	sub	sp, #20
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	b2db      	uxtb	r3, r3
 8003796:	3b10      	subs	r3, #16
 8003798:	4a14      	ldr	r2, [pc, #80]	; (80037ec <DMA_CalcBaseAndBitshift+0x64>)
 800379a:	fba2 2303 	umull	r2, r3, r2, r3
 800379e:	091b      	lsrs	r3, r3, #4
 80037a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80037a2:	4a13      	ldr	r2, [pc, #76]	; (80037f0 <DMA_CalcBaseAndBitshift+0x68>)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d909      	bls.n	80037ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037be:	f023 0303 	bic.w	r3, r3, #3
 80037c2:	1d1a      	adds	r2, r3, #4
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	659a      	str	r2, [r3, #88]	; 0x58
 80037c8:	e007      	b.n	80037da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80037d2:	f023 0303 	bic.w	r3, r3, #3
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	aaaaaaab 	.word	0xaaaaaaab
 80037f0:	0800556c 	.word	0x0800556c

080037f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003804:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d11f      	bne.n	800384e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	2b03      	cmp	r3, #3
 8003812:	d856      	bhi.n	80038c2 <DMA_CheckFifoParam+0xce>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <DMA_CheckFifoParam+0x28>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	0800382d 	.word	0x0800382d
 8003820:	0800383f 	.word	0x0800383f
 8003824:	0800382d 	.word	0x0800382d
 8003828:	080038c3 	.word	0x080038c3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d046      	beq.n	80038c6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800383c:	e043      	b.n	80038c6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003842:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003846:	d140      	bne.n	80038ca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384c:	e03d      	b.n	80038ca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003856:	d121      	bne.n	800389c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	2b03      	cmp	r3, #3
 800385c:	d837      	bhi.n	80038ce <DMA_CheckFifoParam+0xda>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <DMA_CheckFifoParam+0x70>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003875 	.word	0x08003875
 8003868:	0800387b 	.word	0x0800387b
 800386c:	08003875 	.word	0x08003875
 8003870:	0800388d 	.word	0x0800388d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e030      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d025      	beq.n	80038d2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800388a:	e022      	b.n	80038d2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003890:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003894:	d11f      	bne.n	80038d6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800389a:	e01c      	b.n	80038d6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d903      	bls.n	80038aa <DMA_CheckFifoParam+0xb6>
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d003      	beq.n	80038b0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80038a8:	e018      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
      break;
 80038ae:	e015      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00e      	beq.n	80038da <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      break;
 80038c0:	e00b      	b.n	80038da <DMA_CheckFifoParam+0xe6>
      break;
 80038c2:	bf00      	nop
 80038c4:	e00a      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038c6:	bf00      	nop
 80038c8:	e008      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038ca:	bf00      	nop
 80038cc:	e006      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038ce:	bf00      	nop
 80038d0:	e004      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038d2:	bf00      	nop
 80038d4:	e002      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;   
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <DMA_CheckFifoParam+0xe8>
      break;
 80038da:	bf00      	nop
    }
  } 
  
  return status; 
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop

080038ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038fa:	2300      	movs	r3, #0
 80038fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003902:	2300      	movs	r3, #0
 8003904:	61fb      	str	r3, [r7, #28]
 8003906:	e16b      	b.n	8003be0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003908:	2201      	movs	r2, #1
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	4013      	ands	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800391c:	693a      	ldr	r2, [r7, #16]
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	429a      	cmp	r2, r3
 8003922:	f040 815a 	bne.w	8003bda <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b01      	cmp	r3, #1
 8003930:	d005      	beq.n	800393e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800393a:	2b02      	cmp	r3, #2
 800393c:	d130      	bne.n	80039a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	005b      	lsls	r3, r3, #1
 8003948:	2203      	movs	r2, #3
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003974:	2201      	movs	r2, #1
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 0201 	and.w	r2, r3, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4313      	orrs	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d017      	beq.n	80039dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	2203      	movs	r2, #3
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	689a      	ldr	r2, [r3, #8]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d123      	bne.n	8003a30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	08da      	lsrs	r2, r3, #3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3208      	adds	r2, #8
 80039f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	220f      	movs	r2, #15
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	08da      	lsrs	r2, r3, #3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3208      	adds	r2, #8
 8003a2a:	69b9      	ldr	r1, [r7, #24]
 8003a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f003 0203 	and.w	r2, r3, #3
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80b4 	beq.w	8003bda <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	4b60      	ldr	r3, [pc, #384]	; (8003bf8 <HAL_GPIO_Init+0x30c>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a7a:	4a5f      	ldr	r2, [pc, #380]	; (8003bf8 <HAL_GPIO_Init+0x30c>)
 8003a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a80:	6453      	str	r3, [r2, #68]	; 0x44
 8003a82:	4b5d      	ldr	r3, [pc, #372]	; (8003bf8 <HAL_GPIO_Init+0x30c>)
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a8e:	4a5b      	ldr	r2, [pc, #364]	; (8003bfc <HAL_GPIO_Init+0x310>)
 8003a90:	69fb      	ldr	r3, [r7, #28]
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	3302      	adds	r3, #2
 8003a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	220f      	movs	r2, #15
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a52      	ldr	r2, [pc, #328]	; (8003c00 <HAL_GPIO_Init+0x314>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d02b      	beq.n	8003b12 <HAL_GPIO_Init+0x226>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <HAL_GPIO_Init+0x318>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d025      	beq.n	8003b0e <HAL_GPIO_Init+0x222>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a50      	ldr	r2, [pc, #320]	; (8003c08 <HAL_GPIO_Init+0x31c>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01f      	beq.n	8003b0a <HAL_GPIO_Init+0x21e>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a4f      	ldr	r2, [pc, #316]	; (8003c0c <HAL_GPIO_Init+0x320>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d019      	beq.n	8003b06 <HAL_GPIO_Init+0x21a>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4e      	ldr	r2, [pc, #312]	; (8003c10 <HAL_GPIO_Init+0x324>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d013      	beq.n	8003b02 <HAL_GPIO_Init+0x216>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4d      	ldr	r2, [pc, #308]	; (8003c14 <HAL_GPIO_Init+0x328>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d00d      	beq.n	8003afe <HAL_GPIO_Init+0x212>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4c      	ldr	r2, [pc, #304]	; (8003c18 <HAL_GPIO_Init+0x32c>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d007      	beq.n	8003afa <HAL_GPIO_Init+0x20e>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4b      	ldr	r2, [pc, #300]	; (8003c1c <HAL_GPIO_Init+0x330>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_GPIO_Init+0x20a>
 8003af2:	2307      	movs	r3, #7
 8003af4:	e00e      	b.n	8003b14 <HAL_GPIO_Init+0x228>
 8003af6:	2308      	movs	r3, #8
 8003af8:	e00c      	b.n	8003b14 <HAL_GPIO_Init+0x228>
 8003afa:	2306      	movs	r3, #6
 8003afc:	e00a      	b.n	8003b14 <HAL_GPIO_Init+0x228>
 8003afe:	2305      	movs	r3, #5
 8003b00:	e008      	b.n	8003b14 <HAL_GPIO_Init+0x228>
 8003b02:	2304      	movs	r3, #4
 8003b04:	e006      	b.n	8003b14 <HAL_GPIO_Init+0x228>
 8003b06:	2303      	movs	r3, #3
 8003b08:	e004      	b.n	8003b14 <HAL_GPIO_Init+0x228>
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	e002      	b.n	8003b14 <HAL_GPIO_Init+0x228>
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e000      	b.n	8003b14 <HAL_GPIO_Init+0x228>
 8003b12:	2300      	movs	r3, #0
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	f002 0203 	and.w	r2, r2, #3
 8003b1a:	0092      	lsls	r2, r2, #2
 8003b1c:	4093      	lsls	r3, r2
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b24:	4935      	ldr	r1, [pc, #212]	; (8003bfc <HAL_GPIO_Init+0x310>)
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	089b      	lsrs	r3, r3, #2
 8003b2a:	3302      	adds	r3, #2
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b32:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_GPIO_Init+0x334>)
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003b56:	4a32      	ldr	r2, [pc, #200]	; (8003c20 <HAL_GPIO_Init+0x334>)
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b5c:	4b30      	ldr	r3, [pc, #192]	; (8003c20 <HAL_GPIO_Init+0x334>)
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b80:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <HAL_GPIO_Init+0x334>)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b86:	4b26      	ldr	r3, [pc, #152]	; (8003c20 <HAL_GPIO_Init+0x334>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d003      	beq.n	8003baa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003baa:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <HAL_GPIO_Init+0x334>)
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_GPIO_Init+0x334>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bd4:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_GPIO_Init+0x334>)
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2b0f      	cmp	r3, #15
 8003be4:	f67f ae90 	bls.w	8003908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003be8:	bf00      	nop
 8003bea:	bf00      	nop
 8003bec:	3724      	adds	r7, #36	; 0x24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40013800 	.word	0x40013800
 8003c00:	40020000 	.word	0x40020000
 8003c04:	40020400 	.word	0x40020400
 8003c08:	40020800 	.word	0x40020800
 8003c0c:	40020c00 	.word	0x40020c00
 8003c10:	40021000 	.word	0x40021000
 8003c14:	40021400 	.word	0x40021400
 8003c18:	40021800 	.word	0x40021800
 8003c1c:	40021c00 	.word	0x40021c00
 8003c20:	40013c00 	.word	0x40013c00

08003c24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
 8003c30:	4613      	mov	r3, r2
 8003c32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c34:	787b      	ldrb	r3, [r7, #1]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c3a:	887a      	ldrh	r2, [r7, #2]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c40:	e003      	b.n	8003c4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c42:	887b      	ldrh	r3, [r7, #2]
 8003c44:	041a      	lsls	r2, r3, #16
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	619a      	str	r2, [r3, #24]
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr

08003c56 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b084      	sub	sp, #16
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d101      	bne.n	8003c68 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e034      	b.n	8003cd2 <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8003c70:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f245 5255 	movw	r2, #21845	; 0x5555
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6852      	ldr	r2, [r2, #4]
 8003c84:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6892      	ldr	r2, [r2, #8]
 8003c8e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003c90:	f7fe fc90 	bl	80025b4 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003c96:	e00f      	b.n	8003cb8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003c98:	f7fe fc8c 	bl	80025b4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b31      	cmp	r3, #49	; 0x31
 8003ca4:	d908      	bls.n	8003cb8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f003 0303 	and.w	r3, r3, #3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e00c      	b.n	8003cd2 <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e8      	bne.n	8003c98 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8003cce:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
	...

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b086      	sub	sp, #24
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e267      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d075      	beq.n	8003de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cfa:	4b88      	ldr	r3, [pc, #544]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d00c      	beq.n	8003d20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d06:	4b85      	ldr	r3, [pc, #532]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d112      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d12:	4b82      	ldr	r3, [pc, #520]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	4b7e      	ldr	r3, [pc, #504]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x108>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d157      	bne.n	8003de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e242      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x74>
 8003d42:	4b76      	ldr	r3, [pc, #472]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a75      	ldr	r2, [pc, #468]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x98>
 8003d5a:	4b70      	ldr	r3, [pc, #448]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6f      	ldr	r2, [pc, #444]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b6d      	ldr	r3, [pc, #436]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a6c      	ldr	r2, [pc, #432]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d74:	4b69      	ldr	r3, [pc, #420]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a68      	ldr	r2, [pc, #416]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b66      	ldr	r3, [pc, #408]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a65      	ldr	r2, [pc, #404]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d94:	f7fe fc0e 	bl	80025b4 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fe fc0a 	bl	80025b4 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e207      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	4b5b      	ldr	r3, [pc, #364]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0xc0>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dbc:	f7fe fbfa 	bl	80025b4 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fe fbf6 	bl	80025b4 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e1f3      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	4b51      	ldr	r3, [pc, #324]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d063      	beq.n	8003eba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003df2:	4b4a      	ldr	r3, [pc, #296]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00b      	beq.n	8003e16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dfe:	4b47      	ldr	r3, [pc, #284]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e06:	2b08      	cmp	r3, #8
 8003e08:	d11c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e0a:	4b44      	ldr	r3, [pc, #272]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d116      	bne.n	8003e44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e16:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b01      	cmp	r3, #1
 8003e28:	d001      	beq.n	8003e2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e1c7      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e2e:	4b3b      	ldr	r3, [pc, #236]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4937      	ldr	r1, [pc, #220]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e42:	e03a      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d020      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e4c:	4b34      	ldr	r3, [pc, #208]	; (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e4e:	2201      	movs	r2, #1
 8003e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e52:	f7fe fbaf 	bl	80025b4 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e58:	e008      	b.n	8003e6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e5a:	f7fe fbab 	bl	80025b4 <HAL_GetTick>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	1ad3      	subs	r3, r2, r3
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e1a8      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	4b2b      	ldr	r3, [pc, #172]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0f0      	beq.n	8003e5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e78:	4b28      	ldr	r3, [pc, #160]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	691b      	ldr	r3, [r3, #16]
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	4925      	ldr	r1, [pc, #148]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	600b      	str	r3, [r1, #0]
 8003e8c:	e015      	b.n	8003eba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e8e:	4b24      	ldr	r3, [pc, #144]	; (8003f20 <HAL_RCC_OscConfig+0x244>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fe fb8e 	bl	80025b4 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9c:	f7fe fb8a 	bl	80025b4 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e187      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d036      	beq.n	8003f34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d016      	beq.n	8003efc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ece:	4b15      	ldr	r3, [pc, #84]	; (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7fe fb6e 	bl	80025b4 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003edc:	f7fe fb6a 	bl	80025b4 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e167      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0f0      	beq.n	8003edc <HAL_RCC_OscConfig+0x200>
 8003efa:	e01b      	b.n	8003f34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b09      	ldr	r3, [pc, #36]	; (8003f24 <HAL_RCC_OscConfig+0x248>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f02:	f7fe fb57 	bl	80025b4 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f08:	e00e      	b.n	8003f28 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fe fb53 	bl	80025b4 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d907      	bls.n	8003f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e150      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 8003f1c:	40023800 	.word	0x40023800
 8003f20:	42470000 	.word	0x42470000
 8003f24:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f28:	4b88      	ldr	r3, [pc, #544]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1ea      	bne.n	8003f0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 8097 	beq.w	8004070 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f42:	2300      	movs	r3, #0
 8003f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f46:	4b81      	ldr	r3, [pc, #516]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10f      	bne.n	8003f72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f52:	2300      	movs	r3, #0
 8003f54:	60bb      	str	r3, [r7, #8]
 8003f56:	4b7d      	ldr	r3, [pc, #500]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5a:	4a7c      	ldr	r2, [pc, #496]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f60:	6413      	str	r3, [r2, #64]	; 0x40
 8003f62:	4b7a      	ldr	r3, [pc, #488]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	60bb      	str	r3, [r7, #8]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f72:	4b77      	ldr	r3, [pc, #476]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d118      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f7e:	4b74      	ldr	r3, [pc, #464]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a73      	ldr	r2, [pc, #460]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8a:	f7fe fb13 	bl	80025b4 <HAL_GetTick>
 8003f8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f90:	e008      	b.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f92:	f7fe fb0f 	bl	80025b4 <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e10c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa4:	4b6a      	ldr	r3, [pc, #424]	; (8004150 <HAL_RCC_OscConfig+0x474>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0f0      	beq.n	8003f92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d106      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x2ea>
 8003fb8:	4b64      	ldr	r3, [pc, #400]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbc:	4a63      	ldr	r2, [pc, #396]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fbe:	f043 0301 	orr.w	r3, r3, #1
 8003fc2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc4:	e01c      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b05      	cmp	r3, #5
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x30c>
 8003fce:	4b5f      	ldr	r3, [pc, #380]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a5e      	ldr	r2, [pc, #376]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fd4:	f043 0304 	orr.w	r3, r3, #4
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	4b5c      	ldr	r3, [pc, #368]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a5b      	ldr	r2, [pc, #364]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe6:	e00b      	b.n	8004000 <HAL_RCC_OscConfig+0x324>
 8003fe8:	4b58      	ldr	r3, [pc, #352]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a57      	ldr	r2, [pc, #348]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ff4:	4b55      	ldr	r3, [pc, #340]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	4a54      	ldr	r2, [pc, #336]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8003ffa:	f023 0304 	bic.w	r3, r3, #4
 8003ffe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d015      	beq.n	8004034 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004008:	f7fe fad4 	bl	80025b4 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	e00a      	b.n	8004026 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004010:	f7fe fad0 	bl	80025b4 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f241 3288 	movw	r2, #5000	; 0x1388
 800401e:	4293      	cmp	r3, r2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0cb      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004026:	4b49      	ldr	r3, [pc, #292]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ee      	beq.n	8004010 <HAL_RCC_OscConfig+0x334>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004034:	f7fe fabe 	bl	80025b4 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	e00a      	b.n	8004052 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800403c:	f7fe faba 	bl	80025b4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	f241 3288 	movw	r2, #5000	; 0x1388
 800404a:	4293      	cmp	r3, r2
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e0b5      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004052:	4b3e      	ldr	r3, [pc, #248]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ee      	bne.n	800403c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800405e:	7dfb      	ldrb	r3, [r7, #23]
 8004060:	2b01      	cmp	r3, #1
 8004062:	d105      	bne.n	8004070 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004064:	4b39      	ldr	r3, [pc, #228]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004068:	4a38      	ldr	r2, [pc, #224]	; (800414c <HAL_RCC_OscConfig+0x470>)
 800406a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800406e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 80a1 	beq.w	80041bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800407a:	4b34      	ldr	r3, [pc, #208]	; (800414c <HAL_RCC_OscConfig+0x470>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f003 030c 	and.w	r3, r3, #12
 8004082:	2b08      	cmp	r3, #8
 8004084:	d05c      	beq.n	8004140 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d141      	bne.n	8004112 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b31      	ldr	r3, [pc, #196]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004094:	f7fe fa8e 	bl	80025b4 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409c:	f7fe fa8a 	bl	80025b4 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e087      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	4b27      	ldr	r3, [pc, #156]	; (800414c <HAL_RCC_OscConfig+0x470>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	019b      	lsls	r3, r3, #6
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d0:	085b      	lsrs	r3, r3, #1
 80040d2:	3b01      	subs	r3, #1
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	061b      	lsls	r3, r3, #24
 80040de:	491b      	ldr	r1, [pc, #108]	; (800414c <HAL_RCC_OscConfig+0x470>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040e4:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ea:	f7fe fa63 	bl	80025b4 <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040f2:	f7fe fa5f 	bl	80025b4 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e05c      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004104:	4b11      	ldr	r3, [pc, #68]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x416>
 8004110:	e054      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004112:	4b10      	ldr	r3, [pc, #64]	; (8004154 <HAL_RCC_OscConfig+0x478>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004118:	f7fe fa4c 	bl	80025b4 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004120:	f7fe fa48 	bl	80025b4 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e045      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_OscConfig+0x470>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1f0      	bne.n	8004120 <HAL_RCC_OscConfig+0x444>
 800413e:	e03d      	b.n	80041bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e038      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
 800414c:	40023800 	.word	0x40023800
 8004150:	40007000 	.word	0x40007000
 8004154:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <HAL_RCC_OscConfig+0x4ec>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d028      	beq.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004170:	429a      	cmp	r2, r3
 8004172:	d121      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800417e:	429a      	cmp	r2, r3
 8004180:	d11a      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004188:	4013      	ands	r3, r2
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800418e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004190:	4293      	cmp	r3, r2
 8004192:	d111      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	3b01      	subs	r3, #1
 80041a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d107      	bne.n	80041b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e000      	b.n	80041be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023800 	.word	0x40023800

080041cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0cc      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b68      	ldr	r3, [pc, #416]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d90c      	bls.n	8004208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b65      	ldr	r3, [pc, #404]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041f6:	4b63      	ldr	r3, [pc, #396]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0307 	and.w	r3, r3, #7
 80041fe:	683a      	ldr	r2, [r7, #0]
 8004200:	429a      	cmp	r2, r3
 8004202:	d001      	beq.n	8004208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e0b8      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004220:	4b59      	ldr	r3, [pc, #356]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a58      	ldr	r2, [pc, #352]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800422a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0308 	and.w	r3, r3, #8
 8004234:	2b00      	cmp	r3, #0
 8004236:	d005      	beq.n	8004244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004238:	4b53      	ldr	r3, [pc, #332]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4a52      	ldr	r2, [pc, #328]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004244:	4b50      	ldr	r3, [pc, #320]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	494d      	ldr	r1, [pc, #308]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004252:	4313      	orrs	r3, r2
 8004254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d044      	beq.n	80042ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	4b47      	ldr	r3, [pc, #284]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d119      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e07f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d003      	beq.n	800428a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004286:	2b03      	cmp	r3, #3
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	4b3f      	ldr	r3, [pc, #252]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e06f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	4b3b      	ldr	r3, [pc, #236]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e067      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	4b37      	ldr	r3, [pc, #220]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 0203 	bic.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4934      	ldr	r1, [pc, #208]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042bc:	f7fe f97a 	bl	80025b4 <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fe f976 	bl	80025b4 <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e04f      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b2b      	ldr	r3, [pc, #172]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 020c 	and.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1eb      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b25      	ldr	r3, [pc, #148]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d20c      	bcs.n	8004314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	b2d2      	uxtb	r2, r2
 8004300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004302:	4b20      	ldr	r3, [pc, #128]	; (8004384 <HAL_RCC_ClockConfig+0x1b8>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	683a      	ldr	r2, [r7, #0]
 800430c:	429a      	cmp	r2, r3
 800430e:	d001      	beq.n	8004314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e032      	b.n	800437a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004320:	4b19      	ldr	r3, [pc, #100]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	4916      	ldr	r1, [pc, #88]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d009      	beq.n	8004352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	490e      	ldr	r1, [pc, #56]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004352:	f000 f821 	bl	8004398 <HAL_RCC_GetSysClockFreq>
 8004356:	4602      	mov	r2, r0
 8004358:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <HAL_RCC_ClockConfig+0x1bc>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	091b      	lsrs	r3, r3, #4
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	490a      	ldr	r1, [pc, #40]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 8004364:	5ccb      	ldrb	r3, [r1, r3]
 8004366:	fa22 f303 	lsr.w	r3, r2, r3
 800436a:	4a09      	ldr	r2, [pc, #36]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800436c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800436e:	4b09      	ldr	r3, [pc, #36]	; (8004394 <HAL_RCC_ClockConfig+0x1c8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fe f8da 	bl	800252c <HAL_InitTick>

  return HAL_OK;
 8004378:	2300      	movs	r3, #0
}
 800437a:	4618      	mov	r0, r3
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	40023c00 	.word	0x40023c00
 8004388:	40023800 	.word	0x40023800
 800438c:	0800555c 	.word	0x0800555c
 8004390:	200000e8 	.word	0x200000e8
 8004394:	200000ec 	.word	0x200000ec

08004398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800439c:	b094      	sub	sp, #80	; 0x50
 800439e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	647b      	str	r3, [r7, #68]	; 0x44
 80043a4:	2300      	movs	r3, #0
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a8:	2300      	movs	r3, #0
 80043aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80043ac:	2300      	movs	r3, #0
 80043ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043b0:	4b79      	ldr	r3, [pc, #484]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f003 030c 	and.w	r3, r3, #12
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d00d      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x40>
 80043bc:	2b08      	cmp	r3, #8
 80043be:	f200 80e1 	bhi.w	8004584 <HAL_RCC_GetSysClockFreq+0x1ec>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_RCC_GetSysClockFreq+0x34>
 80043c6:	2b04      	cmp	r3, #4
 80043c8:	d003      	beq.n	80043d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80043ca:	e0db      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043cc:	4b73      	ldr	r3, [pc, #460]	; (800459c <HAL_RCC_GetSysClockFreq+0x204>)
 80043ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80043d0:	e0db      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043d2:	4b72      	ldr	r3, [pc, #456]	; (800459c <HAL_RCC_GetSysClockFreq+0x204>)
 80043d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043d6:	e0d8      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d8:	4b6f      	ldr	r3, [pc, #444]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043e2:	4b6d      	ldr	r3, [pc, #436]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d063      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ee:	4b6a      	ldr	r3, [pc, #424]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	099b      	lsrs	r3, r3, #6
 80043f4:	2200      	movs	r2, #0
 80043f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80043f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80043fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004400:	633b      	str	r3, [r7, #48]	; 0x30
 8004402:	2300      	movs	r3, #0
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
 8004406:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800440a:	4622      	mov	r2, r4
 800440c:	462b      	mov	r3, r5
 800440e:	f04f 0000 	mov.w	r0, #0
 8004412:	f04f 0100 	mov.w	r1, #0
 8004416:	0159      	lsls	r1, r3, #5
 8004418:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800441c:	0150      	lsls	r0, r2, #5
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4621      	mov	r1, r4
 8004424:	1a51      	subs	r1, r2, r1
 8004426:	6139      	str	r1, [r7, #16]
 8004428:	4629      	mov	r1, r5
 800442a:	eb63 0301 	sbc.w	r3, r3, r1
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	f04f 0200 	mov.w	r2, #0
 8004434:	f04f 0300 	mov.w	r3, #0
 8004438:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800443c:	4659      	mov	r1, fp
 800443e:	018b      	lsls	r3, r1, #6
 8004440:	4651      	mov	r1, sl
 8004442:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004446:	4651      	mov	r1, sl
 8004448:	018a      	lsls	r2, r1, #6
 800444a:	4651      	mov	r1, sl
 800444c:	ebb2 0801 	subs.w	r8, r2, r1
 8004450:	4659      	mov	r1, fp
 8004452:	eb63 0901 	sbc.w	r9, r3, r1
 8004456:	f04f 0200 	mov.w	r2, #0
 800445a:	f04f 0300 	mov.w	r3, #0
 800445e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004462:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004466:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800446a:	4690      	mov	r8, r2
 800446c:	4699      	mov	r9, r3
 800446e:	4623      	mov	r3, r4
 8004470:	eb18 0303 	adds.w	r3, r8, r3
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	462b      	mov	r3, r5
 8004478:	eb49 0303 	adc.w	r3, r9, r3
 800447c:	60fb      	str	r3, [r7, #12]
 800447e:	f04f 0200 	mov.w	r2, #0
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800448a:	4629      	mov	r1, r5
 800448c:	028b      	lsls	r3, r1, #10
 800448e:	4621      	mov	r1, r4
 8004490:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004494:	4621      	mov	r1, r4
 8004496:	028a      	lsls	r2, r1, #10
 8004498:	4610      	mov	r0, r2
 800449a:	4619      	mov	r1, r3
 800449c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800449e:	2200      	movs	r2, #0
 80044a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044a8:	f7fb fe8e 	bl	80001c8 <__aeabi_uldivmod>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4613      	mov	r3, r2
 80044b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b4:	e058      	b.n	8004568 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b6:	4b38      	ldr	r3, [pc, #224]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	099b      	lsrs	r3, r3, #6
 80044bc:	2200      	movs	r2, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	4611      	mov	r1, r2
 80044c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	2300      	movs	r3, #0
 80044ca:	627b      	str	r3, [r7, #36]	; 0x24
 80044cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044d0:	4642      	mov	r2, r8
 80044d2:	464b      	mov	r3, r9
 80044d4:	f04f 0000 	mov.w	r0, #0
 80044d8:	f04f 0100 	mov.w	r1, #0
 80044dc:	0159      	lsls	r1, r3, #5
 80044de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e2:	0150      	lsls	r0, r2, #5
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4641      	mov	r1, r8
 80044ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80044ee:	4649      	mov	r1, r9
 80044f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004500:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004504:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004508:	ebb2 040a 	subs.w	r4, r2, sl
 800450c:	eb63 050b 	sbc.w	r5, r3, fp
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	00eb      	lsls	r3, r5, #3
 800451a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800451e:	00e2      	lsls	r2, r4, #3
 8004520:	4614      	mov	r4, r2
 8004522:	461d      	mov	r5, r3
 8004524:	4643      	mov	r3, r8
 8004526:	18e3      	adds	r3, r4, r3
 8004528:	603b      	str	r3, [r7, #0]
 800452a:	464b      	mov	r3, r9
 800452c:	eb45 0303 	adc.w	r3, r5, r3
 8004530:	607b      	str	r3, [r7, #4]
 8004532:	f04f 0200 	mov.w	r2, #0
 8004536:	f04f 0300 	mov.w	r3, #0
 800453a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800453e:	4629      	mov	r1, r5
 8004540:	028b      	lsls	r3, r1, #10
 8004542:	4621      	mov	r1, r4
 8004544:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004548:	4621      	mov	r1, r4
 800454a:	028a      	lsls	r2, r1, #10
 800454c:	4610      	mov	r0, r2
 800454e:	4619      	mov	r1, r3
 8004550:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004552:	2200      	movs	r2, #0
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	61fa      	str	r2, [r7, #28]
 8004558:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800455c:	f7fb fe34 	bl	80001c8 <__aeabi_uldivmod>
 8004560:	4602      	mov	r2, r0
 8004562:	460b      	mov	r3, r1
 8004564:	4613      	mov	r3, r2
 8004566:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004568:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCC_GetSysClockFreq+0x200>)
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	0c1b      	lsrs	r3, r3, #16
 800456e:	f003 0303 	and.w	r3, r3, #3
 8004572:	3301      	adds	r3, #1
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004578:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800457a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800457c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004580:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004582:	e002      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCC_GetSysClockFreq+0x204>)
 8004586:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004588:	bf00      	nop
    }
  }
  return sysclockfreq;
 800458a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800458c:	4618      	mov	r0, r3
 800458e:	3750      	adds	r7, #80	; 0x50
 8004590:	46bd      	mov	sp, r7
 8004592:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	00f42400 	.word	0x00f42400

080045a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d001      	beq.n	80045b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e046      	b.n	8004646 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2202      	movs	r2, #2
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a23      	ldr	r2, [pc, #140]	; (8004654 <HAL_TIM_Base_Start+0xb4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d022      	beq.n	8004610 <HAL_TIM_Base_Start+0x70>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d2:	d01d      	beq.n	8004610 <HAL_TIM_Base_Start+0x70>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a1f      	ldr	r2, [pc, #124]	; (8004658 <HAL_TIM_Base_Start+0xb8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d018      	beq.n	8004610 <HAL_TIM_Base_Start+0x70>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1e      	ldr	r2, [pc, #120]	; (800465c <HAL_TIM_Base_Start+0xbc>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d013      	beq.n	8004610 <HAL_TIM_Base_Start+0x70>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <HAL_TIM_Base_Start+0xc0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d00e      	beq.n	8004610 <HAL_TIM_Base_Start+0x70>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <HAL_TIM_Base_Start+0xc4>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d009      	beq.n	8004610 <HAL_TIM_Base_Start+0x70>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a19      	ldr	r2, [pc, #100]	; (8004668 <HAL_TIM_Base_Start+0xc8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d004      	beq.n	8004610 <HAL_TIM_Base_Start+0x70>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a18      	ldr	r2, [pc, #96]	; (800466c <HAL_TIM_Base_Start+0xcc>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d111      	bne.n	8004634 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2b06      	cmp	r3, #6
 8004620:	d010      	beq.n	8004644 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f042 0201 	orr.w	r2, r2, #1
 8004630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004632:	e007      	b.n	8004644 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000
 8004658:	40000400 	.word	0x40000400
 800465c:	40000800 	.word	0x40000800
 8004660:	40000c00 	.word	0x40000c00
 8004664:	40010400 	.word	0x40010400
 8004668:	40014000 	.word	0x40014000
 800466c:	40001800 	.word	0x40001800

08004670 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e041      	b.n	8004706 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fd fce2 	bl	8002060 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f000 faa4 	bl	8004bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d109      	bne.n	8004734 <HAL_TIM_PWM_Start+0x24>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	bf14      	ite	ne
 800472c:	2301      	movne	r3, #1
 800472e:	2300      	moveq	r3, #0
 8004730:	b2db      	uxtb	r3, r3
 8004732:	e022      	b.n	800477a <HAL_TIM_PWM_Start+0x6a>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b04      	cmp	r3, #4
 8004738:	d109      	bne.n	800474e <HAL_TIM_PWM_Start+0x3e>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	bf14      	ite	ne
 8004746:	2301      	movne	r3, #1
 8004748:	2300      	moveq	r3, #0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	e015      	b.n	800477a <HAL_TIM_PWM_Start+0x6a>
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b08      	cmp	r3, #8
 8004752:	d109      	bne.n	8004768 <HAL_TIM_PWM_Start+0x58>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800475a:	b2db      	uxtb	r3, r3
 800475c:	2b01      	cmp	r3, #1
 800475e:	bf14      	ite	ne
 8004760:	2301      	movne	r3, #1
 8004762:	2300      	moveq	r3, #0
 8004764:	b2db      	uxtb	r3, r3
 8004766:	e008      	b.n	800477a <HAL_TIM_PWM_Start+0x6a>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e07c      	b.n	800487c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0x82>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004790:	e013      	b.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b04      	cmp	r3, #4
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x92>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047a0:	e00b      	b.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b08      	cmp	r3, #8
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047b0:	e003      	b.n	80047ba <HAL_TIM_PWM_Start+0xaa>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2202      	movs	r2, #2
 80047b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	2201      	movs	r2, #1
 80047c0:	6839      	ldr	r1, [r7, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fd94 	bl	80052f0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2d      	ldr	r2, [pc, #180]	; (8004884 <HAL_TIM_PWM_Start+0x174>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d004      	beq.n	80047dc <HAL_TIM_PWM_Start+0xcc>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2c      	ldr	r2, [pc, #176]	; (8004888 <HAL_TIM_PWM_Start+0x178>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d101      	bne.n	80047e0 <HAL_TIM_PWM_Start+0xd0>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <HAL_TIM_PWM_Start+0xd2>
 80047e0:	2300      	movs	r3, #0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d007      	beq.n	80047f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a22      	ldr	r2, [pc, #136]	; (8004884 <HAL_TIM_PWM_Start+0x174>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d022      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004808:	d01d      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a1f      	ldr	r2, [pc, #124]	; (800488c <HAL_TIM_PWM_Start+0x17c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d018      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a1d      	ldr	r2, [pc, #116]	; (8004890 <HAL_TIM_PWM_Start+0x180>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d013      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1c      	ldr	r2, [pc, #112]	; (8004894 <HAL_TIM_PWM_Start+0x184>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d00e      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a16      	ldr	r2, [pc, #88]	; (8004888 <HAL_TIM_PWM_Start+0x178>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a18      	ldr	r2, [pc, #96]	; (8004898 <HAL_TIM_PWM_Start+0x188>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d004      	beq.n	8004846 <HAL_TIM_PWM_Start+0x136>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <HAL_TIM_PWM_Start+0x18c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d111      	bne.n	800486a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b06      	cmp	r3, #6
 8004856:	d010      	beq.n	800487a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004868:	e007      	b.n	800487a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800487a:	2300      	movs	r3, #0
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40010000 	.word	0x40010000
 8004888:	40010400 	.word	0x40010400
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40014000 	.word	0x40014000
 800489c:	40001800 	.word	0x40001800

080048a0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e041      	b.n	8004936 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d106      	bne.n	80048cc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7fd fc02 	bl	80020d0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2202      	movs	r2, #2
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	3304      	adds	r3, #4
 80048dc:	4619      	mov	r1, r3
 80048de:	4610      	mov	r0, r2
 80048e0:	f000 f98c 	bl	8004bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b086      	sub	sp, #24
 8004942:	af00      	add	r7, sp, #0
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800494a:	2300      	movs	r3, #0
 800494c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004954:	2b01      	cmp	r3, #1
 8004956:	d101      	bne.n	800495c <HAL_TIM_IC_ConfigChannel+0x1e>
 8004958:	2302      	movs	r3, #2
 800495a:	e088      	b.n	8004a6e <HAL_TIM_IC_ConfigChannel+0x130>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d11b      	bne.n	80049a2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	6819      	ldr	r1, [r3, #0]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	f000 fb8f 	bl	800509c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699a      	ldr	r2, [r3, #24]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 020c 	bic.w	r2, r2, #12
 800498c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6999      	ldr	r1, [r3, #24]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	430a      	orrs	r2, r1
 800499e:	619a      	str	r2, [r3, #24]
 80049a0:	e060      	b.n	8004a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d11c      	bne.n	80049e2 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	6819      	ldr	r1, [r3, #0]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	f000 fbe4 	bl	8005184 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80049ca:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6999      	ldr	r1, [r3, #24]
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	021a      	lsls	r2, r3, #8
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	430a      	orrs	r2, r1
 80049de:	619a      	str	r2, [r3, #24]
 80049e0:	e040      	b.n	8004a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b08      	cmp	r3, #8
 80049e6:	d11b      	bne.n	8004a20 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	6818      	ldr	r0, [r3, #0]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	6819      	ldr	r1, [r3, #0]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	68db      	ldr	r3, [r3, #12]
 80049f8:	f000 fc01 	bl	80051fe <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	69da      	ldr	r2, [r3, #28]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f022 020c 	bic.w	r2, r2, #12
 8004a0a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	69d9      	ldr	r1, [r3, #28]
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	689a      	ldr	r2, [r3, #8]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	61da      	str	r2, [r3, #28]
 8004a1e:	e021      	b.n	8004a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b0c      	cmp	r3, #12
 8004a24:	d11c      	bne.n	8004a60 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	6819      	ldr	r1, [r3, #0]
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f000 fc1e 	bl	8005276 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	69da      	ldr	r2, [r3, #28]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004a48:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	69d9      	ldr	r1, [r3, #28]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	021a      	lsls	r2, r3, #8
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	61da      	str	r2, [r3, #28]
 8004a5e:	e001      	b.n	8004a64 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a84:	2300      	movs	r3, #0
 8004a86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d101      	bne.n	8004a96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a92:	2302      	movs	r3, #2
 8004a94:	e0ae      	b.n	8004bf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b0c      	cmp	r3, #12
 8004aa2:	f200 809f 	bhi.w	8004be4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004aa6:	a201      	add	r2, pc, #4	; (adr r2, 8004aac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aac:	08004ae1 	.word	0x08004ae1
 8004ab0:	08004be5 	.word	0x08004be5
 8004ab4:	08004be5 	.word	0x08004be5
 8004ab8:	08004be5 	.word	0x08004be5
 8004abc:	08004b21 	.word	0x08004b21
 8004ac0:	08004be5 	.word	0x08004be5
 8004ac4:	08004be5 	.word	0x08004be5
 8004ac8:	08004be5 	.word	0x08004be5
 8004acc:	08004b63 	.word	0x08004b63
 8004ad0:	08004be5 	.word	0x08004be5
 8004ad4:	08004be5 	.word	0x08004be5
 8004ad8:	08004be5 	.word	0x08004be5
 8004adc:	08004ba3 	.word	0x08004ba3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68b9      	ldr	r1, [r7, #8]
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 f928 	bl	8004d3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0208 	orr.w	r2, r2, #8
 8004afa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0204 	bic.w	r2, r2, #4
 8004b0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	6999      	ldr	r1, [r3, #24]
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	691a      	ldr	r2, [r3, #16]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	619a      	str	r2, [r3, #24]
      break;
 8004b1e:	e064      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68b9      	ldr	r1, [r7, #8]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f978 	bl	8004e1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	699a      	ldr	r2, [r3, #24]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	6999      	ldr	r1, [r3, #24]
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	021a      	lsls	r2, r3, #8
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	619a      	str	r2, [r3, #24]
      break;
 8004b60:	e043      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68b9      	ldr	r1, [r7, #8]
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f9cd 	bl	8004f08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f042 0208 	orr.w	r2, r2, #8
 8004b7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0204 	bic.w	r2, r2, #4
 8004b8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69d9      	ldr	r1, [r3, #28]
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	691a      	ldr	r2, [r3, #16]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	61da      	str	r2, [r3, #28]
      break;
 8004ba0:	e023      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fa21 	bl	8004ff0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69da      	ldr	r2, [r3, #28]
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	69da      	ldr	r2, [r3, #28]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	69d9      	ldr	r1, [r3, #28]
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	021a      	lsls	r2, r3, #8
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	61da      	str	r2, [r3, #28]
      break;
 8004be2:	e002      	b.n	8004bea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	75fb      	strb	r3, [r7, #23]
      break;
 8004be8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a40      	ldr	r2, [pc, #256]	; (8004d10 <TIM_Base_SetConfig+0x114>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d013      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1a:	d00f      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	4a3d      	ldr	r2, [pc, #244]	; (8004d14 <TIM_Base_SetConfig+0x118>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d00b      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a3c      	ldr	r2, [pc, #240]	; (8004d18 <TIM_Base_SetConfig+0x11c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d007      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a3b      	ldr	r2, [pc, #236]	; (8004d1c <TIM_Base_SetConfig+0x120>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d003      	beq.n	8004c3c <TIM_Base_SetConfig+0x40>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a3a      	ldr	r2, [pc, #232]	; (8004d20 <TIM_Base_SetConfig+0x124>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d108      	bne.n	8004c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a2f      	ldr	r2, [pc, #188]	; (8004d10 <TIM_Base_SetConfig+0x114>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d02b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5c:	d027      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a2c      	ldr	r2, [pc, #176]	; (8004d14 <TIM_Base_SetConfig+0x118>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d023      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <TIM_Base_SetConfig+0x11c>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d01f      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a2a      	ldr	r2, [pc, #168]	; (8004d1c <TIM_Base_SetConfig+0x120>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d01b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a29      	ldr	r2, [pc, #164]	; (8004d20 <TIM_Base_SetConfig+0x124>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d017      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a28      	ldr	r2, [pc, #160]	; (8004d24 <TIM_Base_SetConfig+0x128>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d013      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a27      	ldr	r2, [pc, #156]	; (8004d28 <TIM_Base_SetConfig+0x12c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00f      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <TIM_Base_SetConfig+0x130>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00b      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a25      	ldr	r2, [pc, #148]	; (8004d30 <TIM_Base_SetConfig+0x134>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a24      	ldr	r2, [pc, #144]	; (8004d34 <TIM_Base_SetConfig+0x138>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_Base_SetConfig+0xb2>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a23      	ldr	r2, [pc, #140]	; (8004d38 <TIM_Base_SetConfig+0x13c>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d108      	bne.n	8004cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	4a0a      	ldr	r2, [pc, #40]	; (8004d10 <TIM_Base_SetConfig+0x114>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d003      	beq.n	8004cf4 <TIM_Base_SetConfig+0xf8>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <TIM_Base_SetConfig+0x124>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d103      	bne.n	8004cfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	615a      	str	r2, [r3, #20]
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40010400 	.word	0x40010400
 8004d24:	40014000 	.word	0x40014000
 8004d28:	40014400 	.word	0x40014400
 8004d2c:	40014800 	.word	0x40014800
 8004d30:	40001800 	.word	0x40001800
 8004d34:	40001c00 	.word	0x40001c00
 8004d38:	40002000 	.word	0x40002000

08004d3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b087      	sub	sp, #28
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a1b      	ldr	r3, [r3, #32]
 8004d56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0303 	bic.w	r3, r3, #3
 8004d72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	f023 0302 	bic.w	r3, r3, #2
 8004d84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	689b      	ldr	r3, [r3, #8]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a20      	ldr	r2, [pc, #128]	; (8004e14 <TIM_OC1_SetConfig+0xd8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d003      	beq.n	8004da0 <TIM_OC1_SetConfig+0x64>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a1f      	ldr	r2, [pc, #124]	; (8004e18 <TIM_OC1_SetConfig+0xdc>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d10c      	bne.n	8004dba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f023 0308 	bic.w	r3, r3, #8
 8004da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f023 0304 	bic.w	r3, r3, #4
 8004db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <TIM_OC1_SetConfig+0xd8>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d003      	beq.n	8004dca <TIM_OC1_SetConfig+0x8e>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <TIM_OC1_SetConfig+0xdc>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d111      	bne.n	8004dee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	693a      	ldr	r2, [r7, #16]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	693a      	ldr	r2, [r7, #16]
 8004df2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	621a      	str	r2, [r3, #32]
}
 8004e08:	bf00      	nop
 8004e0a:	371c      	adds	r7, #28
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr
 8004e14:	40010000 	.word	0x40010000
 8004e18:	40010400 	.word	0x40010400

08004e1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0210 	bic.w	r2, r3, #16
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	021b      	lsls	r3, r3, #8
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	f023 0320 	bic.w	r3, r3, #32
 8004e66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	697a      	ldr	r2, [r7, #20]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	4a22      	ldr	r2, [pc, #136]	; (8004f00 <TIM_OC2_SetConfig+0xe4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d003      	beq.n	8004e84 <TIM_OC2_SetConfig+0x68>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a21      	ldr	r2, [pc, #132]	; (8004f04 <TIM_OC2_SetConfig+0xe8>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d10d      	bne.n	8004ea0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	011b      	lsls	r3, r3, #4
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a17      	ldr	r2, [pc, #92]	; (8004f00 <TIM_OC2_SetConfig+0xe4>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_OC2_SetConfig+0x94>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <TIM_OC2_SetConfig+0xe8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d113      	bne.n	8004ed8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004eb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ebe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	693a      	ldr	r2, [r7, #16]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685a      	ldr	r2, [r3, #4]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	621a      	str	r2, [r3, #32]
}
 8004ef2:	bf00      	nop
 8004ef4:	371c      	adds	r7, #28
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40010400 	.word	0x40010400

08004f08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0303 	bic.w	r3, r3, #3
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a21      	ldr	r2, [pc, #132]	; (8004fe8 <TIM_OC3_SetConfig+0xe0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d003      	beq.n	8004f6e <TIM_OC3_SetConfig+0x66>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a20      	ldr	r2, [pc, #128]	; (8004fec <TIM_OC3_SetConfig+0xe4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d10d      	bne.n	8004f8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a16      	ldr	r2, [pc, #88]	; (8004fe8 <TIM_OC3_SetConfig+0xe0>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d003      	beq.n	8004f9a <TIM_OC3_SetConfig+0x92>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a15      	ldr	r2, [pc, #84]	; (8004fec <TIM_OC3_SetConfig+0xe4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d113      	bne.n	8004fc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	011b      	lsls	r3, r3, #4
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	011b      	lsls	r3, r3, #4
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	697a      	ldr	r2, [r7, #20]
 8004fda:	621a      	str	r2, [r3, #32]
}
 8004fdc:	bf00      	nop
 8004fde:	371c      	adds	r7, #28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400

08004ff0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b087      	sub	sp, #28
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800501e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005026:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	021b      	lsls	r3, r3, #8
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	4313      	orrs	r3, r2
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800503a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	031b      	lsls	r3, r3, #12
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a12      	ldr	r2, [pc, #72]	; (8005094 <TIM_OC4_SetConfig+0xa4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC4_SetConfig+0x68>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a11      	ldr	r2, [pc, #68]	; (8005098 <TIM_OC4_SetConfig+0xa8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d109      	bne.n	800506c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800505e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	019b      	lsls	r3, r3, #6
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	40010000 	.word	0x40010000
 8005098:	40010400 	.word	0x40010400

0800509c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800509c:	b480      	push	{r7}
 800509e:	b087      	sub	sp, #28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	f023 0201 	bic.w	r2, r3, #1
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	4a28      	ldr	r2, [pc, #160]	; (8005168 <TIM_TI1_SetConfig+0xcc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d01b      	beq.n	8005102 <TIM_TI1_SetConfig+0x66>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050d0:	d017      	beq.n	8005102 <TIM_TI1_SetConfig+0x66>
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4a25      	ldr	r2, [pc, #148]	; (800516c <TIM_TI1_SetConfig+0xd0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d013      	beq.n	8005102 <TIM_TI1_SetConfig+0x66>
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	4a24      	ldr	r2, [pc, #144]	; (8005170 <TIM_TI1_SetConfig+0xd4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d00f      	beq.n	8005102 <TIM_TI1_SetConfig+0x66>
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4a23      	ldr	r2, [pc, #140]	; (8005174 <TIM_TI1_SetConfig+0xd8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d00b      	beq.n	8005102 <TIM_TI1_SetConfig+0x66>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a22      	ldr	r2, [pc, #136]	; (8005178 <TIM_TI1_SetConfig+0xdc>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d007      	beq.n	8005102 <TIM_TI1_SetConfig+0x66>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a21      	ldr	r2, [pc, #132]	; (800517c <TIM_TI1_SetConfig+0xe0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d003      	beq.n	8005102 <TIM_TI1_SetConfig+0x66>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	4a20      	ldr	r2, [pc, #128]	; (8005180 <TIM_TI1_SetConfig+0xe4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d101      	bne.n	8005106 <TIM_TI1_SetConfig+0x6a>
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <TIM_TI1_SetConfig+0x6c>
 8005106:	2300      	movs	r3, #0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f023 0303 	bic.w	r3, r3, #3
 8005112:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4313      	orrs	r3, r2
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	e003      	b.n	8005126 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f043 0301 	orr.w	r3, r3, #1
 8005124:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800512c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	b2db      	uxtb	r3, r3
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	f023 030a 	bic.w	r3, r3, #10
 8005140:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	f003 030a 	and.w	r3, r3, #10
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	621a      	str	r2, [r3, #32]
}
 800515a:	bf00      	nop
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	40010000 	.word	0x40010000
 800516c:	40000400 	.word	0x40000400
 8005170:	40000800 	.word	0x40000800
 8005174:	40000c00 	.word	0x40000c00
 8005178:	40010400 	.word	0x40010400
 800517c:	40014000 	.word	0x40014000
 8005180:	40001800 	.word	0x40001800

08005184 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005184:	b480      	push	{r7}
 8005186:	b087      	sub	sp, #28
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f023 0210 	bic.w	r2, r3, #16
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	697a      	ldr	r2, [r7, #20]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	031b      	lsls	r3, r3, #12
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	697a      	ldr	r2, [r7, #20]
 80051ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	621a      	str	r2, [r3, #32]
}
 80051f2:	bf00      	nop
 80051f4:	371c      	adds	r7, #28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051fe:	b480      	push	{r7}
 8005200:	b087      	sub	sp, #28
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	69db      	ldr	r3, [r3, #28]
 800521c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800522c:	697a      	ldr	r2, [r7, #20]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	b2db      	uxtb	r3, r3
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	4313      	orrs	r3, r2
 8005246:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800524e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	021b      	lsls	r3, r3, #8
 8005254:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	4313      	orrs	r3, r2
 800525c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr

08005276 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005276:	b480      	push	{r7}
 8005278:	b087      	sub	sp, #28
 800527a:	af00      	add	r7, sp, #0
 800527c:	60f8      	str	r0, [r7, #12]
 800527e:	60b9      	str	r1, [r7, #8]
 8005280:	607a      	str	r2, [r7, #4]
 8005282:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a1b      	ldr	r3, [r3, #32]
 8005288:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	69db      	ldr	r3, [r3, #28]
 8005294:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a1b      	ldr	r3, [r3, #32]
 800529a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	021b      	lsls	r3, r3, #8
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	031b      	lsls	r3, r3, #12
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	4313      	orrs	r3, r2
 80052c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80052c8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	031b      	lsls	r3, r3, #12
 80052ce:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	621a      	str	r2, [r3, #32]
}
 80052e4:	bf00      	nop
 80052e6:	371c      	adds	r7, #28
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	f003 031f 	and.w	r3, r3, #31
 8005302:	2201      	movs	r2, #1
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1a      	ldr	r2, [r3, #32]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	43db      	mvns	r3, r3
 8005312:	401a      	ands	r2, r3
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6a1a      	ldr	r2, [r3, #32]
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f003 031f 	and.w	r3, r3, #31
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	fa01 f303 	lsl.w	r3, r1, r3
 8005328:	431a      	orrs	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	621a      	str	r2, [r3, #32]
}
 800532e:	bf00      	nop
 8005330:	371c      	adds	r7, #28
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005350:	2302      	movs	r3, #2
 8005352:	e05a      	b.n	800540a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a21      	ldr	r2, [pc, #132]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d022      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a0:	d01d      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a1d      	ldr	r2, [pc, #116]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d018      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a1b      	ldr	r2, [pc, #108]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d013      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d00e      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a18      	ldr	r2, [pc, #96]	; (8005428 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d009      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a17      	ldr	r2, [pc, #92]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d004      	beq.n	80053de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a15      	ldr	r2, [pc, #84]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d10c      	bne.n	80053f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	68ba      	ldr	r2, [r7, #8]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40010000 	.word	0x40010000
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800
 8005424:	40000c00 	.word	0x40000c00
 8005428:	40010400 	.word	0x40010400
 800542c:	40014000 	.word	0x40014000
 8005430:	40001800 	.word	0x40001800

08005434 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800544c:	2302      	movs	r3, #2
 800544e:	e03d      	b.n	80054cc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2201      	movs	r2, #1
 8005454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	4313      	orrs	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4313      	orrs	r3, r2
 8005480:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <__libc_init_array>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	4d0d      	ldr	r5, [pc, #52]	; (8005510 <__libc_init_array+0x38>)
 80054dc:	4c0d      	ldr	r4, [pc, #52]	; (8005514 <__libc_init_array+0x3c>)
 80054de:	1b64      	subs	r4, r4, r5
 80054e0:	10a4      	asrs	r4, r4, #2
 80054e2:	2600      	movs	r6, #0
 80054e4:	42a6      	cmp	r6, r4
 80054e6:	d109      	bne.n	80054fc <__libc_init_array+0x24>
 80054e8:	4d0b      	ldr	r5, [pc, #44]	; (8005518 <__libc_init_array+0x40>)
 80054ea:	4c0c      	ldr	r4, [pc, #48]	; (800551c <__libc_init_array+0x44>)
 80054ec:	f000 f820 	bl	8005530 <_init>
 80054f0:	1b64      	subs	r4, r4, r5
 80054f2:	10a4      	asrs	r4, r4, #2
 80054f4:	2600      	movs	r6, #0
 80054f6:	42a6      	cmp	r6, r4
 80054f8:	d105      	bne.n	8005506 <__libc_init_array+0x2e>
 80054fa:	bd70      	pop	{r4, r5, r6, pc}
 80054fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005500:	4798      	blx	r3
 8005502:	3601      	adds	r6, #1
 8005504:	e7ee      	b.n	80054e4 <__libc_init_array+0xc>
 8005506:	f855 3b04 	ldr.w	r3, [r5], #4
 800550a:	4798      	blx	r3
 800550c:	3601      	adds	r6, #1
 800550e:	e7f2      	b.n	80054f6 <__libc_init_array+0x1e>
 8005510:	0800557c 	.word	0x0800557c
 8005514:	0800557c 	.word	0x0800557c
 8005518:	0800557c 	.word	0x0800557c
 800551c:	08005580 	.word	0x08005580

08005520 <memset>:
 8005520:	4402      	add	r2, r0
 8005522:	4603      	mov	r3, r0
 8005524:	4293      	cmp	r3, r2
 8005526:	d100      	bne.n	800552a <memset+0xa>
 8005528:	4770      	bx	lr
 800552a:	f803 1b01 	strb.w	r1, [r3], #1
 800552e:	e7f9      	b.n	8005524 <memset+0x4>

08005530 <_init>:
 8005530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005532:	bf00      	nop
 8005534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005536:	bc08      	pop	{r3}
 8005538:	469e      	mov	lr, r3
 800553a:	4770      	bx	lr

0800553c <_fini>:
 800553c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553e:	bf00      	nop
 8005540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005542:	bc08      	pop	{r3}
 8005544:	469e      	mov	lr, r3
 8005546:	4770      	bx	lr
