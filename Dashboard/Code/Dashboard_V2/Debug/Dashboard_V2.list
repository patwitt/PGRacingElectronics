
Dashboard_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002bd84  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004260  0802bf84  0802bf84  0003bf84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a9c5e  080301e4  080301e4  000401e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000011c  080d9e44  080d9e44  000e9e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000898c8  080d9f60  080d9f60  000e9f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000030c  08163828  08163828  00173828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08163b34  08163b34  001802e4  2**0
                  CONTENTS
  8 .ARM          00000008  08163b34  08163b34  00173b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08163b3c  08163b3c  001802e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  08163b3c  08163b3c  00173b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   0000000c  08163b54  08163b54  00173b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000002e4  20000000  08163b60  00180000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0003bed0  200002e4  08163e44  001802e4  2**2
                  ALLOC
 14 ._user_heap_stack 00000604  2003c1b4  08163e44  0018c1b4  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001802e4  2**0
                  CONTENTS, READONLY
 16 .debug_info   000d5dd3  00000000  00000000  00180312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00018cc6  00000000  00000000  002560e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000046a8  00000000  00000000  0026edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00004018  00000000  00000000  00273458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a732  00000000  00000000  00277470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00054de5  00000000  00000000  002b1ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0013349b  00000000  00000000  00306987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  00439e22  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000135f0  00000000  00000000  00439ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0802bf6c 	.word	0x0802bf6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	0802bf6c 	.word	0x0802bf6c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <__aeabi_ldivmod>:
 8000304:	b97b      	cbnz	r3, 8000326 <__aeabi_ldivmod+0x22>
 8000306:	b972      	cbnz	r2, 8000326 <__aeabi_ldivmod+0x22>
 8000308:	2900      	cmp	r1, #0
 800030a:	bfbe      	ittt	lt
 800030c:	2000      	movlt	r0, #0
 800030e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000312:	e006      	blt.n	8000322 <__aeabi_ldivmod+0x1e>
 8000314:	bf08      	it	eq
 8000316:	2800      	cmpeq	r0, #0
 8000318:	bf1c      	itt	ne
 800031a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800031e:	f04f 30ff 	movne.w	r0, #4294967295
 8000322:	f000 b9bf 	b.w	80006a4 <__aeabi_idiv0>
 8000326:	f1ad 0c08 	sub.w	ip, sp, #8
 800032a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032e:	2900      	cmp	r1, #0
 8000330:	db09      	blt.n	8000346 <__aeabi_ldivmod+0x42>
 8000332:	2b00      	cmp	r3, #0
 8000334:	db1a      	blt.n	800036c <__aeabi_ldivmod+0x68>
 8000336:	f000 f84d 	bl	80003d4 <__udivmoddi4>
 800033a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800033e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000342:	b004      	add	sp, #16
 8000344:	4770      	bx	lr
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	db1b      	blt.n	8000388 <__aeabi_ldivmod+0x84>
 8000350:	f000 f840 	bl	80003d4 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	4770      	bx	lr
 800036c:	4252      	negs	r2, r2
 800036e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000372:	f000 f82f 	bl	80003d4 <__udivmoddi4>
 8000376:	f8dd e004 	ldr.w	lr, [sp, #4]
 800037a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037e:	b004      	add	sp, #16
 8000380:	4240      	negs	r0, r0
 8000382:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000386:	4770      	bx	lr
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	f000 f821 	bl	80003d4 <__udivmoddi4>
 8000392:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039a:	b004      	add	sp, #16
 800039c:	4252      	negs	r2, r2
 800039e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_uldivmod>:
 80003a4:	b953      	cbnz	r3, 80003bc <__aeabi_uldivmod+0x18>
 80003a6:	b94a      	cbnz	r2, 80003bc <__aeabi_uldivmod+0x18>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bf08      	it	eq
 80003ac:	2800      	cmpeq	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	f04f 31ff 	movne.w	r1, #4294967295
 80003b4:	f04f 30ff 	movne.w	r0, #4294967295
 80003b8:	f000 b974 	b.w	80006a4 <__aeabi_idiv0>
 80003bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c4:	f000 f806 	bl	80003d4 <__udivmoddi4>
 80003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d0:	b004      	add	sp, #16
 80003d2:	4770      	bx	lr

080003d4 <__udivmoddi4>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	9d08      	ldr	r5, [sp, #32]
 80003da:	4604      	mov	r4, r0
 80003dc:	468e      	mov	lr, r1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d14d      	bne.n	800047e <__udivmoddi4+0xaa>
 80003e2:	428a      	cmp	r2, r1
 80003e4:	4694      	mov	ip, r2
 80003e6:	d969      	bls.n	80004bc <__udivmoddi4+0xe8>
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	b152      	cbz	r2, 8000404 <__udivmoddi4+0x30>
 80003ee:	fa01 f302 	lsl.w	r3, r1, r2
 80003f2:	f1c2 0120 	rsb	r1, r2, #32
 80003f6:	fa20 f101 	lsr.w	r1, r0, r1
 80003fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000402:	4094      	lsls	r4, r2
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	0c21      	lsrs	r1, r4, #16
 800040a:	fbbe f6f8 	udiv	r6, lr, r8
 800040e:	fa1f f78c 	uxth.w	r7, ip
 8000412:	fb08 e316 	mls	r3, r8, r6, lr
 8000416:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800041a:	fb06 f107 	mul.w	r1, r6, r7
 800041e:	4299      	cmp	r1, r3
 8000420:	d90a      	bls.n	8000438 <__udivmoddi4+0x64>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f106 30ff 	add.w	r0, r6, #4294967295
 800042a:	f080 811f 	bcs.w	800066c <__udivmoddi4+0x298>
 800042e:	4299      	cmp	r1, r3
 8000430:	f240 811c 	bls.w	800066c <__udivmoddi4+0x298>
 8000434:	3e02      	subs	r6, #2
 8000436:	4463      	add	r3, ip
 8000438:	1a5b      	subs	r3, r3, r1
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3310 	mls	r3, r8, r0, r3
 8000444:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000448:	fb00 f707 	mul.w	r7, r0, r7
 800044c:	42a7      	cmp	r7, r4
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x92>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f100 33ff 	add.w	r3, r0, #4294967295
 8000458:	f080 810a 	bcs.w	8000670 <__udivmoddi4+0x29c>
 800045c:	42a7      	cmp	r7, r4
 800045e:	f240 8107 	bls.w	8000670 <__udivmoddi4+0x29c>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	1be4      	subs	r4, r4, r7
 800046c:	2600      	movs	r6, #0
 800046e:	b11d      	cbz	r5, 8000478 <__udivmoddi4+0xa4>
 8000470:	40d4      	lsrs	r4, r2
 8000472:	2300      	movs	r3, #0
 8000474:	e9c5 4300 	strd	r4, r3, [r5]
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	428b      	cmp	r3, r1
 8000480:	d909      	bls.n	8000496 <__udivmoddi4+0xc2>
 8000482:	2d00      	cmp	r5, #0
 8000484:	f000 80ef 	beq.w	8000666 <__udivmoddi4+0x292>
 8000488:	2600      	movs	r6, #0
 800048a:	e9c5 0100 	strd	r0, r1, [r5]
 800048e:	4630      	mov	r0, r6
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	fab3 f683 	clz	r6, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d14a      	bne.n	8000534 <__udivmoddi4+0x160>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xd4>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 80f9 	bhi.w	800069a <__udivmoddi4+0x2c6>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb61 0303 	sbc.w	r3, r1, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	469e      	mov	lr, r3
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e0      	beq.n	8000478 <__udivmoddi4+0xa4>
 80004b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80004ba:	e7dd      	b.n	8000478 <__udivmoddi4+0xa4>
 80004bc:	b902      	cbnz	r2, 80004c0 <__udivmoddi4+0xec>
 80004be:	deff      	udf	#255	; 0xff
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	f040 8092 	bne.w	80005ee <__udivmoddi4+0x21a>
 80004ca:	eba1 010c 	sub.w	r1, r1, ip
 80004ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d2:	fa1f fe8c 	uxth.w	lr, ip
 80004d6:	2601      	movs	r6, #1
 80004d8:	0c20      	lsrs	r0, r4, #16
 80004da:	fbb1 f3f7 	udiv	r3, r1, r7
 80004de:	fb07 1113 	mls	r1, r7, r3, r1
 80004e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e6:	fb0e f003 	mul.w	r0, lr, r3
 80004ea:	4288      	cmp	r0, r1
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x12c>
 80004ee:	eb1c 0101 	adds.w	r1, ip, r1
 80004f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f6:	d202      	bcs.n	80004fe <__udivmoddi4+0x12a>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f200 80cb 	bhi.w	8000694 <__udivmoddi4+0x2c0>
 80004fe:	4643      	mov	r3, r8
 8000500:	1a09      	subs	r1, r1, r0
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1110 	mls	r1, r7, r0, r1
 800050c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000510:	fb0e fe00 	mul.w	lr, lr, r0
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x156>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d202      	bcs.n	8000528 <__udivmoddi4+0x154>
 8000522:	45a6      	cmp	lr, r4
 8000524:	f200 80bb 	bhi.w	800069e <__udivmoddi4+0x2ca>
 8000528:	4608      	mov	r0, r1
 800052a:	eba4 040e 	sub.w	r4, r4, lr
 800052e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000532:	e79c      	b.n	800046e <__udivmoddi4+0x9a>
 8000534:	f1c6 0720 	rsb	r7, r6, #32
 8000538:	40b3      	lsls	r3, r6
 800053a:	fa22 fc07 	lsr.w	ip, r2, r7
 800053e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000542:	fa20 f407 	lsr.w	r4, r0, r7
 8000546:	fa01 f306 	lsl.w	r3, r1, r6
 800054a:	431c      	orrs	r4, r3
 800054c:	40f9      	lsrs	r1, r7
 800054e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000552:	fa00 f306 	lsl.w	r3, r0, r6
 8000556:	fbb1 f8f9 	udiv	r8, r1, r9
 800055a:	0c20      	lsrs	r0, r4, #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fb09 1118 	mls	r1, r9, r8, r1
 8000564:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000568:	fb08 f00e 	mul.w	r0, r8, lr
 800056c:	4288      	cmp	r0, r1
 800056e:	fa02 f206 	lsl.w	r2, r2, r6
 8000572:	d90b      	bls.n	800058c <__udivmoddi4+0x1b8>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f108 3aff 	add.w	sl, r8, #4294967295
 800057c:	f080 8088 	bcs.w	8000690 <__udivmoddi4+0x2bc>
 8000580:	4288      	cmp	r0, r1
 8000582:	f240 8085 	bls.w	8000690 <__udivmoddi4+0x2bc>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f9 	udiv	r0, r1, r9
 8000594:	fb09 1110 	mls	r1, r9, r0, r1
 8000598:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800059c:	fb00 fe0e 	mul.w	lr, r0, lr
 80005a0:	458e      	cmp	lr, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x1e2>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80005ac:	d26c      	bcs.n	8000688 <__udivmoddi4+0x2b4>
 80005ae:	458e      	cmp	lr, r1
 80005b0:	d96a      	bls.n	8000688 <__udivmoddi4+0x2b4>
 80005b2:	3802      	subs	r0, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ba:	fba0 9402 	umull	r9, r4, r0, r2
 80005be:	eba1 010e 	sub.w	r1, r1, lr
 80005c2:	42a1      	cmp	r1, r4
 80005c4:	46c8      	mov	r8, r9
 80005c6:	46a6      	mov	lr, r4
 80005c8:	d356      	bcc.n	8000678 <__udivmoddi4+0x2a4>
 80005ca:	d053      	beq.n	8000674 <__udivmoddi4+0x2a0>
 80005cc:	b15d      	cbz	r5, 80005e6 <__udivmoddi4+0x212>
 80005ce:	ebb3 0208 	subs.w	r2, r3, r8
 80005d2:	eb61 010e 	sbc.w	r1, r1, lr
 80005d6:	fa01 f707 	lsl.w	r7, r1, r7
 80005da:	fa22 f306 	lsr.w	r3, r2, r6
 80005de:	40f1      	lsrs	r1, r6
 80005e0:	431f      	orrs	r7, r3
 80005e2:	e9c5 7100 	strd	r7, r1, [r5]
 80005e6:	2600      	movs	r6, #0
 80005e8:	4631      	mov	r1, r6
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	40d8      	lsrs	r0, r3
 80005f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3
 80005fc:	4091      	lsls	r1, r2
 80005fe:	4301      	orrs	r1, r0
 8000600:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000604:	fa1f fe8c 	uxth.w	lr, ip
 8000608:	fbb3 f0f7 	udiv	r0, r3, r7
 800060c:	fb07 3610 	mls	r6, r7, r0, r3
 8000610:	0c0b      	lsrs	r3, r1, #16
 8000612:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000616:	fb00 f60e 	mul.w	r6, r0, lr
 800061a:	429e      	cmp	r6, r3
 800061c:	fa04 f402 	lsl.w	r4, r4, r2
 8000620:	d908      	bls.n	8000634 <__udivmoddi4+0x260>
 8000622:	eb1c 0303 	adds.w	r3, ip, r3
 8000626:	f100 38ff 	add.w	r8, r0, #4294967295
 800062a:	d22f      	bcs.n	800068c <__udivmoddi4+0x2b8>
 800062c:	429e      	cmp	r6, r3
 800062e:	d92d      	bls.n	800068c <__udivmoddi4+0x2b8>
 8000630:	3802      	subs	r0, #2
 8000632:	4463      	add	r3, ip
 8000634:	1b9b      	subs	r3, r3, r6
 8000636:	b289      	uxth	r1, r1
 8000638:	fbb3 f6f7 	udiv	r6, r3, r7
 800063c:	fb07 3316 	mls	r3, r7, r6, r3
 8000640:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000644:	fb06 f30e 	mul.w	r3, r6, lr
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x28a>
 800064c:	eb1c 0101 	adds.w	r1, ip, r1
 8000650:	f106 38ff 	add.w	r8, r6, #4294967295
 8000654:	d216      	bcs.n	8000684 <__udivmoddi4+0x2b0>
 8000656:	428b      	cmp	r3, r1
 8000658:	d914      	bls.n	8000684 <__udivmoddi4+0x2b0>
 800065a:	3e02      	subs	r6, #2
 800065c:	4461      	add	r1, ip
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000664:	e738      	b.n	80004d8 <__udivmoddi4+0x104>
 8000666:	462e      	mov	r6, r5
 8000668:	4628      	mov	r0, r5
 800066a:	e705      	b.n	8000478 <__udivmoddi4+0xa4>
 800066c:	4606      	mov	r6, r0
 800066e:	e6e3      	b.n	8000438 <__udivmoddi4+0x64>
 8000670:	4618      	mov	r0, r3
 8000672:	e6f8      	b.n	8000466 <__udivmoddi4+0x92>
 8000674:	454b      	cmp	r3, r9
 8000676:	d2a9      	bcs.n	80005cc <__udivmoddi4+0x1f8>
 8000678:	ebb9 0802 	subs.w	r8, r9, r2
 800067c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000680:	3801      	subs	r0, #1
 8000682:	e7a3      	b.n	80005cc <__udivmoddi4+0x1f8>
 8000684:	4646      	mov	r6, r8
 8000686:	e7ea      	b.n	800065e <__udivmoddi4+0x28a>
 8000688:	4620      	mov	r0, r4
 800068a:	e794      	b.n	80005b6 <__udivmoddi4+0x1e2>
 800068c:	4640      	mov	r0, r8
 800068e:	e7d1      	b.n	8000634 <__udivmoddi4+0x260>
 8000690:	46d0      	mov	r8, sl
 8000692:	e77b      	b.n	800058c <__udivmoddi4+0x1b8>
 8000694:	3b02      	subs	r3, #2
 8000696:	4461      	add	r1, ip
 8000698:	e732      	b.n	8000500 <__udivmoddi4+0x12c>
 800069a:	4630      	mov	r0, r6
 800069c:	e709      	b.n	80004b2 <__udivmoddi4+0xde>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	e742      	b.n	800052a <__udivmoddi4+0x156>

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <HAL_TIM_PWM_PulseFinishedCallback>:
static void updateLedsType_0(int8_t activeLeds);
static void updateLedsType_1(int8_t activeLeds);
static float lerp(float A, float B, float Alpha);

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f007 fc6a 	bl	8007f8c <HAL_TIM_PWM_Stop_DMA>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006c6:	463b      	mov	r3, r7
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006d2:	4b21      	ldr	r3, [pc, #132]	; (8000758 <MX_ADC1_Init+0x98>)
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <MX_ADC1_Init+0x9c>)
 80006d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006d8:	4b1f      	ldr	r3, [pc, #124]	; (8000758 <MX_ADC1_Init+0x98>)
 80006da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006e0:	4b1d      	ldr	r3, [pc, #116]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006e6:	4b1c      	ldr	r3, [pc, #112]	; (8000758 <MX_ADC1_Init+0x98>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006ec:	4b1a      	ldr	r3, [pc, #104]	; (8000758 <MX_ADC1_Init+0x98>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006f2:	4b19      	ldr	r3, [pc, #100]	; (8000758 <MX_ADC1_Init+0x98>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006fa:	4b17      	ldr	r3, [pc, #92]	; (8000758 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000700:	4b15      	ldr	r3, [pc, #84]	; (8000758 <MX_ADC1_Init+0x98>)
 8000702:	4a17      	ldr	r2, [pc, #92]	; (8000760 <MX_ADC1_Init+0xa0>)
 8000704:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000706:	4b14      	ldr	r3, [pc, #80]	; (8000758 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800070c:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_ADC1_Init+0x98>)
 800070e:	2201      	movs	r2, #1
 8000710:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000712:	4b11      	ldr	r3, [pc, #68]	; (8000758 <MX_ADC1_Init+0x98>)
 8000714:	2200      	movs	r2, #0
 8000716:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <MX_ADC1_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000720:	480d      	ldr	r0, [pc, #52]	; (8000758 <MX_ADC1_Init+0x98>)
 8000722:	f001 fecd 	bl	80024c0 <HAL_ADC_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800072c:	f001 f9d4 	bl	8001ad8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000730:	230b      	movs	r3, #11
 8000732:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000734:	2301      	movs	r3, #1
 8000736:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800073c:	463b      	mov	r3, r7
 800073e:	4619      	mov	r1, r3
 8000740:	4805      	ldr	r0, [pc, #20]	; (8000758 <MX_ADC1_Init+0x98>)
 8000742:	f001 ff01 	bl	8002548 <HAL_ADC_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800074c:	f001 f9c4 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000300 	.word	0x20000300
 800075c:	40012000 	.word	0x40012000
 8000760:	0f000001 	.word	0x0f000001

08000764 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08a      	sub	sp, #40	; 0x28
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <HAL_ADC_MspInit+0x74>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d123      	bne.n	80007ce <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <HAL_ADC_MspInit+0x78>)
 8000788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800078a:	4a14      	ldr	r2, [pc, #80]	; (80007dc <HAL_ADC_MspInit+0x78>)
 800078c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000790:	6453      	str	r3, [r2, #68]	; 0x44
 8000792:	4b12      	ldr	r3, [pc, #72]	; (80007dc <HAL_ADC_MspInit+0x78>)
 8000794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <HAL_ADC_MspInit+0x78>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_ADC_MspInit+0x78>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <HAL_ADC_MspInit+0x78>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007b6:	2302      	movs	r3, #2
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ba:	2303      	movs	r3, #3
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_ADC_MspInit+0x7c>)
 80007ca:	f003 fa99 	bl	8003d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007ce:	bf00      	nop
 80007d0:	3728      	adds	r7, #40	; 0x28
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40012000 	.word	0x40012000
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020800 	.word	0x40020800

080007e4 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <FLASH_QSPI_Init+0x70>)
 80007ea:	4a1b      	ldr	r2, [pc, #108]	; (8000858 <FLASH_QSPI_Init+0x74>)
 80007ec:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 80007ee:	4819      	ldr	r0, [pc, #100]	; (8000854 <FLASH_QSPI_Init+0x70>)
 80007f0:	f005 fcda 	bl	80061a8 <HAL_QSPI_DeInit>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
 80007fc:	e028      	b.n	8000850 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 80007fe:	f001 f971 	bl	8001ae4 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8000802:	f000 f82b 	bl	800085c <FLASH_QSPI_ResetChip>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 800080c:	2301      	movs	r3, #1
 800080e:	e01f      	b.n	8000850 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8000810:	2001      	movs	r0, #1
 8000812:	f001 fe31 	bl	8002478 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 8000816:	f000 f87f 	bl	8000918 <FLASH_QSPI_AutoPollingMemReady>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8000820:	2301      	movs	r3, #1
 8000822:	e015      	b.n	8000850 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000824:	f000 f8b0 	bl	8000988 <FLASH_QSPI_WriteEnable>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 8000832:	f000 f8f3 	bl	8000a1c <FLASH_QSPI_Configuration>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	e007      	b.n	8000850 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000840:	f000 f962 	bl	8000b08 <FLASH_QSPI_EnableMemoryMappedMode>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 800084a:	2301      	movs	r3, #1
 800084c:	e000      	b.n	8000850 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 800084e:	2300      	movs	r3, #0
}
 8000850:	4618      	mov	r0, r3
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000574 	.word	0x20000574
 8000858:	a0001000 	.word	0xa0001000

0800085c <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 800085c:	b580      	push	{r7, lr}
 800085e:	b090      	sub	sp, #64	; 0x40
 8000860:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 8000866:	2366      	movs	r3, #102	; 0x66
 8000868:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 800086a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800086e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000876:	2300      	movs	r3, #0
 8000878:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800087a:	2300      	movs	r3, #0
 800087c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800087e:	2300      	movs	r3, #0
 8000880:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000882:	2300      	movs	r3, #0
 8000884:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	f241 3288 	movw	r2, #5000	; 0x1388
 800089c:	4619      	mov	r1, r3
 800089e:	481d      	ldr	r0, [pc, #116]	; (8000914 <FLASH_QSPI_ResetChip+0xb8>)
 80008a0:	f005 fca6 	bl	80061f0 <HAL_QSPI_Command>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e02e      	b.n	800090c <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 80008ae:	2300      	movs	r3, #0
 80008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008b2:	e003      	b.n	80008bc <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 80008b4:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 80008b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008b8:	3301      	adds	r3, #1
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80008bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80008be:	2b2e      	cmp	r3, #46	; 0x2e
 80008c0:	d9f8      	bls.n	80008b4 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 80008c2:	2399      	movs	r3, #153	; 0x99
 80008c4:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 80008c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008ca:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 80008cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80008da:	2300      	movs	r3, #0
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80008de:	2300      	movs	r3, #0
 80008e0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 80008ea:	2300      	movs	r3, #0
 80008ec:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	; (8000914 <FLASH_QSPI_ResetChip+0xb8>)
 80008fc:	f005 fc78 	bl	80061f0 <HAL_QSPI_Command>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3740      	adds	r7, #64	; 0x40
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000574 	.word	0x20000574

08000918 <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 800091e:	2305      	movs	r3, #5
 8000920:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000922:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800092c:	2300      	movs	r3, #0
 800092e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000934:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 800093e:	2300      	movs	r3, #0
 8000940:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000942:	2300      	movs	r3, #0
 8000944:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 800094a:	2301      	movs	r3, #1
 800094c:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000952:	2301      	movs	r3, #1
 8000954:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000956:	2310      	movs	r3, #16
 8000958:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 800095a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800095e:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000960:	463a      	mov	r2, r7
 8000962:	f107 0118 	add.w	r1, r7, #24
 8000966:	f241 3388 	movw	r3, #5000	; 0x1388
 800096a:	4806      	ldr	r0, [pc, #24]	; (8000984 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 800096c:	f005 fdcd 	bl	800650a <HAL_QSPI_AutoPolling>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000976:	2301      	movs	r3, #1
 8000978:	e000      	b.n	800097c <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 800097a:	2300      	movs	r3, #0
}
 800097c:	4618      	mov	r0, r3
 800097e:	3750      	adds	r7, #80	; 0x50
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000574 	.word	0x20000574

08000988 <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 800098e:	2306      	movs	r3, #6
 8000990:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000992:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000996:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000998:	2300      	movs	r3, #0
 800099a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800099c:	2300      	movs	r3, #0
 800099e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 80009a8:	2300      	movs	r3, #0
 80009aa:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 80009ac:	2300      	movs	r3, #0
 80009ae:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 80009b0:	2300      	movs	r3, #0
 80009b2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009bc:	4619      	mov	r1, r3
 80009be:	4816      	ldr	r0, [pc, #88]	; (8000a18 <FLASH_QSPI_WriteEnable+0x90>)
 80009c0:	f005 fc16 	bl	80061f0 <HAL_QSPI_Command>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e01f      	b.n	8000a0e <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 80009ce:	2302      	movs	r3, #2
 80009d0:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 80009d2:	2302      	movs	r3, #2
 80009d4:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 80009da:	2301      	movs	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 80009de:	2310      	movs	r3, #16
 80009e0:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 80009e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009e6:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 80009e8:	2305      	movs	r3, #5
 80009ea:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 80009ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009f0:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 80009f2:	463a      	mov	r2, r7
 80009f4:	f107 0118 	add.w	r1, r7, #24
 80009f8:	f241 3388 	movw	r3, #5000	; 0x1388
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <FLASH_QSPI_WriteEnable+0x90>)
 80009fe:	f005 fd84 	bl	800650a <HAL_QSPI_AutoPolling>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	e000      	b.n	8000a0e <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3750      	adds	r7, #80	; 0x50
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000574 	.word	0x20000574

08000a1c <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b090      	sub	sp, #64	; 0x40
 8000a20:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8000a22:	2335      	movs	r3, #53	; 0x35
 8000a24:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a2a:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a38:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000a42:	2300      	movs	r3, #0
 8000a44:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000a46:	2300      	movs	r3, #0
 8000a48:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a56:	4619      	mov	r1, r3
 8000a58:	482a      	ldr	r0, [pc, #168]	; (8000b04 <FLASH_QSPI_Configuration+0xe8>)
 8000a5a:	f005 fbc9 	bl	80061f0 <HAL_QSPI_Command>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e049      	b.n	8000afc <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 8000a68:	1dfb      	adds	r3, r7, #7
 8000a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4824      	ldr	r0, [pc, #144]	; (8000b04 <FLASH_QSPI_Configuration+0xe8>)
 8000a72:	f005 fcad 	bl	80063d0 <HAL_QSPI_Receive>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e03d      	b.n	8000afc <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000a80:	f7ff ff82 	bl	8000988 <FLASH_QSPI_WriteEnable>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	e036      	b.n	8000afc <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8000a8e:	79fb      	ldrb	r3, [r7, #7]
 8000a90:	f043 0302 	orr.w	r3, r3, #2
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 8000a98:	2331      	movs	r3, #49	; 0x31
 8000a9a:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000a9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aa0:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ac4:	f107 0308 	add.w	r3, r7, #8
 8000ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000acc:	4619      	mov	r1, r3
 8000ace:	480d      	ldr	r0, [pc, #52]	; (8000b04 <FLASH_QSPI_Configuration+0xe8>)
 8000ad0:	f005 fb8e 	bl	80061f0 <HAL_QSPI_Command>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00e      	b.n	8000afc <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000ade:	1dfb      	adds	r3, r7, #7
 8000ae0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <FLASH_QSPI_Configuration+0xe8>)
 8000ae8:	f005 fbe0 	bl	80062ac <HAL_QSPI_Transmit>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000af2:	f000 fff1 	bl	8001ad8 <Error_Handler>
		return HAL_ERROR;
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 8000afa:	2300      	movs	r3, #0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3740      	adds	r7, #64	; 0x40
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000574 	.word	0x20000574

08000b08 <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b090      	sub	sp, #64	; 0x40
 8000b0c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8000b0e:	23eb      	movs	r3, #235	; 0xeb
 8000b10:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b16:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1c:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000b1e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000b30:	2300      	movs	r3, #0
 8000b32:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000b34:	2300      	movs	r3, #0
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8000b38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b3c:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000b3e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000b42:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 8000b4c:	2304      	movs	r3, #4
 8000b4e:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 8000b54:	463a      	mov	r2, r7
 8000b56:	f107 0308 	add.w	r3, r7, #8
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4806      	ldr	r0, [pc, #24]	; (8000b78 <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 8000b5e:	f005 fd4b 	bl	80065f8 <HAL_QSPI_MemoryMapped>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	e000      	b.n	8000b6e <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3740      	adds	r7, #64	; 0x40
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000574 	.word	0x20000574

08000b7c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000b84:	4a26      	ldr	r2, [pc, #152]	; (8000c20 <MX_CAN1_Init+0xa4>)
 8000b86:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 9;
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000b8a:	2209      	movs	r2, #9
 8000b8c:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b8e:	4b23      	ldr	r3, [pc, #140]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000b94:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000b96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000b9a:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000b9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ba2:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000ba6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000baa:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bac:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8000bb2:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000bb8:	4b18      	ldr	r3, [pc, #96]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8000bbe:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bd0:	4812      	ldr	r0, [pc, #72]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000bd2:	f001 ff09 	bl	80029e8 <HAL_CAN_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_CAN1_Init+0x64>
	{
		Error_Handler();
 8000bdc:	f000 ff7c 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000be0:	2301      	movs	r3, #1
 8000be2:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 8; // which filter bank to use from the assigned ones
 8000be4:	2308      	movs	r3, #8
 8000be6:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c00:	2301      	movs	r3, #1
 8000c02:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8000c04:	230a      	movs	r3, #10
 8000c06:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000c08:	463b      	mov	r3, r7
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <MX_CAN1_Init+0xa0>)
 8000c0e:	f001 ffe7 	bl	8002be0 <HAL_CAN_ConfigFilter>
	//HAL_CAN_Start(&hcan1);

	/* USER CODE END CAN1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000034c 	.word	0x2000034c
 8000c20:	40006400 	.word	0x40006400

08000c24 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b08a      	sub	sp, #40	; 0x28
 8000c28:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8000c2a:	4b26      	ldr	r3, [pc, #152]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c2c:	4a26      	ldr	r2, [pc, #152]	; (8000cc8 <MX_CAN2_Init+0xa4>)
 8000c2e:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 9;
 8000c30:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c32:	2209      	movs	r2, #9
 8000c34:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000c36:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000c3c:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c42:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000c44:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c4a:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c4e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c52:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000c6c:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000c78:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000c7a:	f001 feb5 	bl	80029e8 <HAL_CAN_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 8000c84:	f000 ff28 	bl	8001ad8 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 8000c8c:	2312      	movs	r3, #18
 8000c8e:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8000cac:	230a      	movs	r3, #10
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4803      	ldr	r0, [pc, #12]	; (8000cc4 <MX_CAN2_Init+0xa0>)
 8000cb6:	f001 ff93 	bl	8002be0 <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

	/* USER CODE END CAN2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000374 	.word	0x20000374
 8000cc8:	40006800 	.word	0x40006800

08000ccc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED = 0;

void HAL_CAN_MspInit(CAN_HandleTypeDef *canHandle)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08c      	sub	sp, #48	; 0x30
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct =
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
	{ 0 };
	if (canHandle->Instance == CAN1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a3e      	ldr	r2, [pc, #248]	; (8000de4 <HAL_CAN_MspInit+0x118>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d132      	bne.n	8000d54 <HAL_CAN_MspInit+0x88>
	{
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* CAN1 clock enable */
		HAL_RCC_CAN1_CLK_ENABLED++;
 8000cee:	4b3e      	ldr	r3, [pc, #248]	; (8000de8 <HAL_CAN_MspInit+0x11c>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	4a3c      	ldr	r2, [pc, #240]	; (8000de8 <HAL_CAN_MspInit+0x11c>)
 8000cf6:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8000cf8:	4b3b      	ldr	r3, [pc, #236]	; (8000de8 <HAL_CAN_MspInit+0x11c>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b01      	cmp	r3, #1
 8000cfe:	d10b      	bne.n	8000d18 <HAL_CAN_MspInit+0x4c>
		{
			__HAL_RCC_CAN1_CLK_ENABLE();
 8000d00:	4b3a      	ldr	r3, [pc, #232]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	4a39      	ldr	r2, [pc, #228]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d06:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0c:	4b37      	ldr	r3, [pc, #220]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d14:	61bb      	str	r3, [r7, #24]
 8000d16:	69bb      	ldr	r3, [r7, #24]
		}

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d18:	4b34      	ldr	r3, [pc, #208]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1c:	4a33      	ldr	r2, [pc, #204]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d1e:	f043 0301 	orr.w	r3, r3, #1
 8000d22:	6313      	str	r3, [r2, #48]	; 0x30
 8000d24:	4b31      	ldr	r3, [pc, #196]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d28:	f003 0301 	and.w	r3, r3, #1
 8000d2c:	617b      	str	r3, [r7, #20]
 8000d2e:	697b      	ldr	r3, [r7, #20]
		/**CAN1 GPIO Configuration
		 PA11     ------> CAN1_RX
		 PA12     ------> CAN1_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_12;
 8000d30:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d34:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d36:	2302      	movs	r3, #2
 8000d38:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000d42:	2309      	movs	r3, #9
 8000d44:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d46:	f107 031c 	add.w	r3, r7, #28
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4828      	ldr	r0, [pc, #160]	; (8000df0 <HAL_CAN_MspInit+0x124>)
 8000d4e:	f002 ffd7 	bl	8003d00 <HAL_GPIO_Init>

		/* USER CODE BEGIN CAN2_MspInit 1 */

		/* USER CODE END CAN2_MspInit 1 */
	}
}
 8000d52:	e042      	b.n	8000dda <HAL_CAN_MspInit+0x10e>
	else if (canHandle->Instance == CAN2)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a26      	ldr	r2, [pc, #152]	; (8000df4 <HAL_CAN_MspInit+0x128>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d13d      	bne.n	8000dda <HAL_CAN_MspInit+0x10e>
		__HAL_RCC_CAN2_CLK_ENABLE();
 8000d5e:	4b23      	ldr	r3, [pc, #140]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a22      	ldr	r2, [pc, #136]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
		HAL_RCC_CAN1_CLK_ENABLED++;
 8000d76:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <HAL_CAN_MspInit+0x11c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	4a1a      	ldr	r2, [pc, #104]	; (8000de8 <HAL_CAN_MspInit+0x11c>)
 8000d7e:	6013      	str	r3, [r2, #0]
		if (HAL_RCC_CAN1_CLK_ENABLED == 1)
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <HAL_CAN_MspInit+0x11c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d10b      	bne.n	8000da0 <HAL_CAN_MspInit+0xd4>
			__HAL_RCC_CAN1_CLK_ENABLE();
 8000d88:	4b18      	ldr	r3, [pc, #96]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a17      	ldr	r2, [pc, #92]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b15      	ldr	r3, [pc, #84]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	4a11      	ldr	r2, [pc, #68]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6313      	str	r3, [r2, #48]	; 0x30
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <HAL_CAN_MspInit+0x120>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	f003 0302 	and.w	r3, r3, #2
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13;
 8000db8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000dbc:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000dca:	2309      	movs	r3, #9
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4808      	ldr	r0, [pc, #32]	; (8000df8 <HAL_CAN_MspInit+0x12c>)
 8000dd6:	f002 ff93 	bl	8003d00 <HAL_GPIO_Init>
}
 8000dda:	bf00      	nop
 8000ddc:	3730      	adds	r7, #48	; 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40006400 	.word	0x40006400
 8000de8:	2000039c 	.word	0x2000039c
 8000dec:	40023800 	.word	0x40023800
 8000df0:	40020000 	.word	0x40020000
 8000df4:	40006800 	.word	0x40006800
 8000df8:	40020400 	.word	0x40020400

08000dfc <CanCommunicationInit>:
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}

void CanCommunicationInit()
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b09a      	sub	sp, #104	; 0x68
 8000e00:	af02      	add	r7, sp, #8
	HAL_CAN_Start(&hcan2);
 8000e02:	4859      	ldr	r0, [pc, #356]	; (8000f68 <CanCommunicationInit+0x16c>)
 8000e04:	f001 ffd8 	bl	8002db8 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan1);
 8000e08:	4858      	ldr	r0, [pc, #352]	; (8000f6c <CanCommunicationInit+0x170>)
 8000e0a:	f001 ffd5 	bl	8002db8 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e0e:	2102      	movs	r1, #2
 8000e10:	4855      	ldr	r0, [pc, #340]	; (8000f68 <CanCommunicationInit+0x16c>)
 8000e12:	f002 f8e5 	bl	8002fe0 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e16:	2102      	movs	r1, #2
 8000e18:	4854      	ldr	r0, [pc, #336]	; (8000f6c <CanCommunicationInit+0x170>)
 8000e1a:	f002 f8e1 	bl	8002fe0 <HAL_CAN_ActivateNotification>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.IDE = CAN_ID_STD;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	647b      	str	r3, [r7, #68]	; 0x44
	TxHeader.RTR = CAN_RTR_DATA;
 8000e22:	2300      	movs	r3, #0
 8000e24:	64bb      	str	r3, [r7, #72]	; 0x48
	TxHeader.DLC = 8;
 8000e26:	2308      	movs	r3, #8
 8000e28:	64fb      	str	r3, [r7, #76]	; 0x4c
	TxHeader.StdId = GIT_BUILD_TAG;
 8000e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t TxData[8] =
 8000e30:	4a4f      	ldr	r2, [pc, #316]	; (8000f70 <CanCommunicationInit+0x174>)
 8000e32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e3a:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 1, 0, 0, 0, 0, 0, 0, 0 };

	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 8000e3e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e42:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000e46:	4b4b      	ldr	r3, [pc, #300]	; (8000f74 <CanCommunicationInit+0x178>)
 8000e48:	4848      	ldr	r0, [pc, #288]	; (8000f6c <CanCommunicationInit+0x170>)
 8000e4a:	f001 fff9 	bl	8002e40 <HAL_CAN_AddTxMessage>

	TxHeader.DLC = 4;
 8000e4e:	2304      	movs	r3, #4
 8000e50:	64fb      	str	r3, [r7, #76]	; 0x4c
	TxHeader.StdId = GIT_BUILD_TAG;
 8000e52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c

	sscanf(_V_BUILD_TAG, "v%hu.%hu.%hu", (short unsigned*) &TxData[0],
 8000e58:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e5c:	1c59      	adds	r1, r3, #1
 8000e5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e66:	3302      	adds	r3, #2
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4942      	ldr	r1, [pc, #264]	; (8000f78 <CanCommunicationInit+0x17c>)
 8000e6e:	4843      	ldr	r0, [pc, #268]	; (8000f7c <CanCommunicationInit+0x180>)
 8000e70:	f028 fe72 	bl	8029b58 <siscanf>
			(short unsigned*) &TxData[1], (short unsigned*) &TxData[2]);
	TxData[3] = _V_COMMITS_AHEAD;
 8000e74:	2301      	movs	r3, #1
 8000e76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

#ifdef _V_GIT_DIRTY_FLAG
	TxData[4] = 1;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif
	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 8000e80:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e84:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000e88:	4b3a      	ldr	r3, [pc, #232]	; (8000f74 <CanCommunicationInit+0x178>)
 8000e8a:	4838      	ldr	r0, [pc, #224]	; (8000f6c <CanCommunicationInit+0x170>)
 8000e8c:	f001 ffd8 	bl	8002e40 <HAL_CAN_AddTxMessage>

	char Temp[10];
	TxHeader.DLC = 8;
 8000e90:	2308      	movs	r3, #8
 8000e92:	64fb      	str	r3, [r7, #76]	; 0x4c
	TxHeader.StdId = GIT_COMMIT;
 8000e94:	f240 1301 	movw	r3, #257	; 0x101
 8000e98:	63fb      	str	r3, [r7, #60]	; 0x3c

	memset(TxData, 0, 8);
 8000e9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e9e:	2208      	movs	r2, #8
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f027 ffbc 	bl	8028e20 <memset>
	strcpy(Temp, _V_COMMIT);
 8000ea8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eac:	4a34      	ldr	r2, [pc, #208]	; (8000f80 <CanCommunicationInit+0x184>)
 8000eae:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eb0:	c303      	stmia	r3!, {r0, r1}
 8000eb2:	701a      	strb	r2, [r3, #0]
	strncpy((char*) TxData, Temp, 8);
 8000eb4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000eb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ebc:	2208      	movs	r2, #8
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f028 fecf 	bl	8029c62 <strncpy>
	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 8000ec4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000ec8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000ecc:	4b29      	ldr	r3, [pc, #164]	; (8000f74 <CanCommunicationInit+0x178>)
 8000ece:	4827      	ldr	r0, [pc, #156]	; (8000f6c <CanCommunicationInit+0x170>)
 8000ed0:	f001 ffb6 	bl	8002e40 <HAL_CAN_AddTxMessage>

	// parse build date and send through can
	struct tm result;
	strptime(_V_DATE, "%d.%m.%Y %R", &result);
 8000ed4:	1d3b      	adds	r3, r7, #4
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	492a      	ldr	r1, [pc, #168]	; (8000f84 <CanCommunicationInit+0x188>)
 8000eda:	482b      	ldr	r0, [pc, #172]	; (8000f88 <CanCommunicationInit+0x18c>)
 8000edc:	f029 fa7a 	bl	802a3d4 <strptime>
	time_t tempTime = mktime(&result);
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f028 f87c 	bl	8028fe0 <mktime>
 8000ee8:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	uint8_t counter = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while (tempTime > 0 && counter < 8)
 8000ef2:	e01f      	b.n	8000f34 <CanCommunicationInit+0x138>
	{
		TxData[counter++] = tempTime % 0xFF;
 8000ef4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000ef8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8000efc:	f04f 0300 	mov.w	r3, #0
 8000f00:	f7ff fa00 	bl	8000304 <__aeabi_ldivmod>
 8000f04:	4610      	mov	r0, r2
 8000f06:	4619      	mov	r1, r3
 8000f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f0c:	1c5a      	adds	r2, r3, #1
 8000f0e:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8000f12:	b2c2      	uxtb	r2, r0
 8000f14:	3360      	adds	r3, #96	; 0x60
 8000f16:	443b      	add	r3, r7
 8000f18:	f803 2c2c 	strb.w	r2, [r3, #-44]
		tempTime /= 0xFF;
 8000f1c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8000f20:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	f7ff f9ec 	bl	8000304 <__aeabi_ldivmod>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	460b      	mov	r3, r1
 8000f30:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	while (tempTime > 0 && counter < 8)
 8000f34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000f38:	2a01      	cmp	r2, #1
 8000f3a:	f173 0300 	sbcs.w	r3, r3, #0
 8000f3e:	db03      	blt.n	8000f48 <CanCommunicationInit+0x14c>
 8000f40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f44:	2b07      	cmp	r3, #7
 8000f46:	d9d5      	bls.n	8000ef4 <CanCommunicationInit+0xf8>
	}

	TxHeader.StdId = BUILD_DATE;
 8000f48:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 8000f4e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f52:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <CanCommunicationInit+0x178>)
 8000f58:	4804      	ldr	r0, [pc, #16]	; (8000f6c <CanCommunicationInit+0x170>)
 8000f5a:	f001 ff71 	bl	8002e40 <HAL_CAN_AddTxMessage>
}
 8000f5e:	bf00      	nop
 8000f60:	3760      	adds	r7, #96	; 0x60
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000374 	.word	0x20000374
 8000f6c:	2000034c 	.word	0x2000034c
 8000f70:	0802bfc8 	.word	0x0802bfc8
 8000f74:	20000348 	.word	0x20000348
 8000f78:	0802bf84 	.word	0x0802bf84
 8000f7c:	0802bf94 	.word	0x0802bf94
 8000f80:	0802bf9c 	.word	0x0802bf9c
 8000f84:	0802bfa8 	.word	0x0802bfa8
 8000f88:	0802bfb4 	.word	0x0802bfb4

08000f8c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f90:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <MX_CRC_Init+0x3c>)
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <MX_CRC_Init+0x40>)
 8000f94:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <MX_CRC_Init+0x3c>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <MX_CRC_Init+0x3c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <MX_CRC_Init+0x3c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fa8:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <MX_CRC_Init+0x3c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fae:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <MX_CRC_Init+0x3c>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fb4:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <MX_CRC_Init+0x3c>)
 8000fb6:	f002 f91b 	bl	80031f0 <HAL_CRC_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000fc0:	f000 fd8a 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200003a0 	.word	0x200003a0
 8000fcc:	40023000 	.word	0x40023000

08000fd0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_CRC_MspInit+0x38>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10b      	bne.n	8000ffa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_CRC_MspInit+0x3c>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <HAL_CRC_MspInit+0x3c>)
 8000fe8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b07      	ldr	r3, [pc, #28]	; (800100c <HAL_CRC_MspInit+0x3c>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40023000 	.word	0x40023000
 800100c:	40023800 	.word	0x40023800

08001010 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_DMA_Init+0x48>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a0f      	ldr	r2, [pc, #60]	; (8001058 <MX_DMA_Init+0x48>)
 800101c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <MX_DMA_Init+0x48>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2105      	movs	r1, #5
 8001032:	200b      	movs	r0, #11
 8001034:	f002 f8b2 	bl	800319c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001038:	200b      	movs	r0, #11
 800103a:	f002 f8cb 	bl	80031d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2105      	movs	r1, #5
 8001042:	200f      	movs	r0, #15
 8001044:	f002 f8aa 	bl	800319c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001048:	200f      	movs	r0, #15
 800104a:	f002 f8c3 	bl	80031d4 <HAL_NVIC_EnableIRQ>

}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800

0800105c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_DMA2D_Init+0x68>)
 8001062:	4a19      	ldr	r2, [pc, #100]	; (80010c8 <MX_DMA2D_Init+0x6c>)
 8001064:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_DMA2D_Init+0x68>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_DMA2D_Init+0x68>)
 800106e:	2201      	movs	r2, #1
 8001070:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_DMA2D_Init+0x68>)
 8001074:	2200      	movs	r2, #0
 8001076:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001078:	4b12      	ldr	r3, [pc, #72]	; (80010c4 <MX_DMA2D_Init+0x68>)
 800107a:	2200      	movs	r2, #0
 800107c:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800107e:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <MX_DMA2D_Init+0x68>)
 8001080:	2201      	movs	r2, #1
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <MX_DMA2D_Init+0x68>)
 8001086:	2200      	movs	r2, #0
 8001088:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800108a:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <MX_DMA2D_Init+0x68>)
 800108c:	2200      	movs	r2, #0
 800108e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001090:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <MX_DMA2D_Init+0x68>)
 8001092:	2200      	movs	r2, #0
 8001094:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <MX_DMA2D_Init+0x68>)
 8001098:	2200      	movs	r2, #0
 800109a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800109c:	4809      	ldr	r0, [pc, #36]	; (80010c4 <MX_DMA2D_Init+0x68>)
 800109e:	f002 fd37 	bl	8003b10 <HAL_DMA2D_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80010a8:	f000 fd16 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80010ac:	2101      	movs	r1, #1
 80010ae:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_DMA2D_Init+0x68>)
 80010b0:	f002 fd88 	bl	8003bc4 <HAL_DMA2D_ConfigLayer>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80010ba:	f000 fd0d 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200003c4 	.word	0x200003c4
 80010c8:	4002b000 	.word	0x4002b000

080010cc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <HAL_DMA2D_MspInit+0x38>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d10b      	bne.n	80010f6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_DMA2D_MspInit+0x3c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <HAL_DMA2D_MspInit+0x3c>)
 80010e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_DMA2D_MspInit+0x3c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80010f6:	bf00      	nop
 80010f8:	3714      	adds	r7, #20
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	4002b000 	.word	0x4002b000
 8001108:	40023800 	.word	0x40023800

0800110c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b088      	sub	sp, #32
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001112:	1d3b      	adds	r3, r7, #4
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001124:	4b4a      	ldr	r3, [pc, #296]	; (8001250 <MX_FMC_Init+0x144>)
 8001126:	4a4b      	ldr	r2, [pc, #300]	; (8001254 <MX_FMC_Init+0x148>)
 8001128:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800112a:	4b49      	ldr	r3, [pc, #292]	; (8001250 <MX_FMC_Init+0x144>)
 800112c:	2200      	movs	r2, #0
 800112e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001130:	4b47      	ldr	r3, [pc, #284]	; (8001250 <MX_FMC_Init+0x144>)
 8001132:	2200      	movs	r2, #0
 8001134:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001136:	4b46      	ldr	r3, [pc, #280]	; (8001250 <MX_FMC_Init+0x144>)
 8001138:	2200      	movs	r2, #0
 800113a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800113c:	4b44      	ldr	r3, [pc, #272]	; (8001250 <MX_FMC_Init+0x144>)
 800113e:	2210      	movs	r2, #16
 8001140:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001142:	4b43      	ldr	r3, [pc, #268]	; (8001250 <MX_FMC_Init+0x144>)
 8001144:	2200      	movs	r2, #0
 8001146:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001148:	4b41      	ldr	r3, [pc, #260]	; (8001250 <MX_FMC_Init+0x144>)
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001150:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <MX_FMC_Init+0x144>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001156:	4b3e      	ldr	r3, [pc, #248]	; (8001250 <MX_FMC_Init+0x144>)
 8001158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800115c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <MX_FMC_Init+0x144>)
 8001160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001164:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001166:	4b3a      	ldr	r3, [pc, #232]	; (8001250 <MX_FMC_Init+0x144>)
 8001168:	2200      	movs	r2, #0
 800116a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800116c:	2302      	movs	r3, #2
 800116e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001170:	2307      	movs	r3, #7
 8001172:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001174:	2304      	movs	r3, #4
 8001176:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001178:	2306      	movs	r3, #6
 800117a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800117c:	2303      	movs	r3, #3
 800117e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001180:	2302      	movs	r3, #2
 8001182:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001184:	2302      	movs	r3, #2
 8001186:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	4619      	mov	r1, r3
 800118c:	4830      	ldr	r0, [pc, #192]	; (8001250 <MX_FMC_Init+0x144>)
 800118e:	f006 fd3b 	bl	8007c08 <HAL_SDRAM_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001198:	f000 fc9e 	bl	8001ad8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80011a0:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <MX_FMC_Init+0x14c>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <MX_FMC_Init+0x14c>)
 80011a8:	2210      	movs	r2, #16
 80011aa:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80011ac:	4b2a      	ldr	r3, [pc, #168]	; (8001258 <MX_FMC_Init+0x14c>)
 80011ae:	2201      	movs	r2, #1
 80011b0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80011b2:	4b29      	ldr	r3, [pc, #164]	; (8001258 <MX_FMC_Init+0x14c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	4926      	ldr	r1, [pc, #152]	; (8001258 <MX_FMC_Init+0x14c>)
 80011be:	4824      	ldr	r0, [pc, #144]	; (8001250 <MX_FMC_Init+0x144>)
 80011c0:	f006 fd56 	bl	8007c70 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f001 f957 	bl	8002478 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 80011ca:	4b23      	ldr	r3, [pc, #140]	; (8001258 <MX_FMC_Init+0x14c>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <MX_FMC_Init+0x14c>)
 80011d2:	2210      	movs	r2, #16
 80011d4:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80011d6:	4b20      	ldr	r3, [pc, #128]	; (8001258 <MX_FMC_Init+0x14c>)
 80011d8:	2201      	movs	r2, #1
 80011da:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80011dc:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <MX_FMC_Init+0x14c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80011e2:	f04f 32ff 	mov.w	r2, #4294967295
 80011e6:	491c      	ldr	r1, [pc, #112]	; (8001258 <MX_FMC_Init+0x14c>)
 80011e8:	4819      	ldr	r0, [pc, #100]	; (8001250 <MX_FMC_Init+0x144>)
 80011ea:	f006 fd41 	bl	8007c70 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80011ee:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <MX_FMC_Init+0x14c>)
 80011f0:	2203      	movs	r2, #3
 80011f2:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80011f4:	4b18      	ldr	r3, [pc, #96]	; (8001258 <MX_FMC_Init+0x14c>)
 80011f6:	2210      	movs	r2, #16
 80011f8:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <MX_FMC_Init+0x14c>)
 80011fc:	2208      	movs	r2, #8
 80011fe:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001200:	4b15      	ldr	r3, [pc, #84]	; (8001258 <MX_FMC_Init+0x14c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001206:	f04f 32ff 	mov.w	r2, #4294967295
 800120a:	4913      	ldr	r1, [pc, #76]	; (8001258 <MX_FMC_Init+0x14c>)
 800120c:	4810      	ldr	r0, [pc, #64]	; (8001250 <MX_FMC_Init+0x144>)
 800120e:	f006 fd2f 	bl	8007c70 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8001212:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001216:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_FMC_Init+0x14c>)
 800121a:	2204      	movs	r2, #4
 800121c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_FMC_Init+0x14c>)
 8001220:	2210      	movs	r2, #16
 8001222:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_FMC_Init+0x14c>)
 8001226:	2201      	movs	r2, #1
 8001228:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <MX_FMC_Init+0x14c>)
 800122e:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	4908      	ldr	r1, [pc, #32]	; (8001258 <MX_FMC_Init+0x14c>)
 8001236:	4806      	ldr	r0, [pc, #24]	; (8001250 <MX_FMC_Init+0x144>)
 8001238:	f006 fd1a 	bl	8007c70 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 800123c:	f240 617c 	movw	r1, #1660	; 0x67c
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_FMC_Init+0x144>)
 8001242:	f006 fd4a 	bl	8007cda <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000041c 	.word	0x2000041c
 8001254:	a0000140 	.word	0xa0000140
 8001258:	20000454 	.word	0x20000454

0800125c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001270:	4b3a      	ldr	r3, [pc, #232]	; (800135c <HAL_FMC_MspInit+0x100>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d16d      	bne.n	8001354 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001278:	4b38      	ldr	r3, [pc, #224]	; (800135c <HAL_FMC_MspInit+0x100>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800127e:	4b38      	ldr	r3, [pc, #224]	; (8001360 <HAL_FMC_MspInit+0x104>)
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	4a37      	ldr	r2, [pc, #220]	; (8001360 <HAL_FMC_MspInit+0x104>)
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	6393      	str	r3, [r2, #56]	; 0x38
 800128a:	4b35      	ldr	r3, [pc, #212]	; (8001360 <HAL_FMC_MspInit+0x104>)
 800128c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001296:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800129a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129c:	2302      	movs	r3, #2
 800129e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a8:	230c      	movs	r3, #12
 80012aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	4619      	mov	r1, r3
 80012b0:	482c      	ldr	r0, [pc, #176]	; (8001364 <HAL_FMC_MspInit+0x108>)
 80012b2:	f002 fd25 	bl	8003d00 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80012b6:	230c      	movs	r3, #12
 80012b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c6:	230c      	movs	r3, #12
 80012c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4826      	ldr	r0, [pc, #152]	; (8001368 <HAL_FMC_MspInit+0x10c>)
 80012d0:	f002 fd16 	bl	8003d00 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e4:	230c      	movs	r3, #12
 80012e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	481f      	ldr	r0, [pc, #124]	; (800136c <HAL_FMC_MspInit+0x110>)
 80012ee:	f002 fd07 	bl	8003d00 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80012f2:	f248 1311 	movw	r3, #33041	; 0x8111
 80012f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001304:	230c      	movs	r3, #12
 8001306:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	4818      	ldr	r0, [pc, #96]	; (8001370 <HAL_FMC_MspInit+0x114>)
 800130e:	f002 fcf7 	bl	8003d00 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001312:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001316:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001324:	230c      	movs	r3, #12
 8001326:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	4619      	mov	r1, r3
 800132c:	4811      	ldr	r0, [pc, #68]	; (8001374 <HAL_FMC_MspInit+0x118>)
 800132e:	f002 fce7 	bl	8003d00 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001332:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001336:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001340:	2303      	movs	r3, #3
 8001342:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001344:	230c      	movs	r3, #12
 8001346:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	4619      	mov	r1, r3
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <HAL_FMC_MspInit+0x11c>)
 800134e:	f002 fcd7 	bl	8003d00 <HAL_GPIO_Init>
 8001352:	e000      	b.n	8001356 <HAL_FMC_MspInit+0xfa>
    return;
 8001354:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000450 	.word	0x20000450
 8001360:	40023800 	.word	0x40023800
 8001364:	40021400 	.word	0x40021400
 8001368:	40020800 	.word	0x40020800
 800136c:	40020000 	.word	0x40020000
 8001370:	40021800 	.word	0x40021800
 8001374:	40021000 	.word	0x40021000
 8001378:	40020c00 	.word	0x40020c00

0800137c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001384:	f7ff ff6a 	bl	800125c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hardwareTask */
  hardwareTaskHandle = osThreadNew(StartHardwareTask, NULL, &hardwareTask_attributes);
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <MX_FREERTOS_Init+0x48>)
 8001396:	2100      	movs	r1, #0
 8001398:	4810      	ldr	r0, [pc, #64]	; (80013dc <MX_FREERTOS_Init+0x4c>)
 800139a:	f007 ffd3 	bl	8009344 <osThreadNew>
 800139e:	4603      	mov	r3, r0
 80013a0:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <MX_FREERTOS_Init+0x50>)
 80013a2:	6013      	str	r3, [r2, #0]

  /* creation of RPMLed */
  RPMLedHandle = osThreadNew(startRPMLed, NULL, &RPMLed_attributes);
 80013a4:	4a0f      	ldr	r2, [pc, #60]	; (80013e4 <MX_FREERTOS_Init+0x54>)
 80013a6:	2100      	movs	r1, #0
 80013a8:	480f      	ldr	r0, [pc, #60]	; (80013e8 <MX_FREERTOS_Init+0x58>)
 80013aa:	f007 ffcb 	bl	8009344 <osThreadNew>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a0e      	ldr	r2, [pc, #56]	; (80013ec <MX_FREERTOS_Init+0x5c>)
 80013b2:	6013      	str	r3, [r2, #0]

  /* creation of touchGFXTask */
  touchGFXTaskHandle = osThreadNew(startTouchGFXTask, NULL, &touchGFXTask_attributes);
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <MX_FREERTOS_Init+0x60>)
 80013b6:	2100      	movs	r1, #0
 80013b8:	480e      	ldr	r0, [pc, #56]	; (80013f4 <MX_FREERTOS_Init+0x64>)
 80013ba:	f007 ffc3 	bl	8009344 <osThreadNew>
 80013be:	4603      	mov	r3, r0
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <MX_FREERTOS_Init+0x68>)
 80013c2:	6013      	str	r3, [r2, #0]

  /* creation of statusLedTask */
  statusLedTaskHandle = osThreadNew(startStatusLedTask, NULL, &statusLedTask_attributes);
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <MX_FREERTOS_Init+0x6c>)
 80013c6:	2100      	movs	r1, #0
 80013c8:	480d      	ldr	r0, [pc, #52]	; (8001400 <MX_FREERTOS_Init+0x70>)
 80013ca:	f007 ffbb 	bl	8009344 <osThreadNew>
 80013ce:	4603      	mov	r3, r0
 80013d0:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <MX_FREERTOS_Init+0x74>)
 80013d2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	0802e3b0 	.word	0x0802e3b0
 80013dc:	08001409 	.word	0x08001409
 80013e0:	20000464 	.word	0x20000464
 80013e4:	0802e3d4 	.word	0x0802e3d4
 80013e8:	0800141d 	.word	0x0800141d
 80013ec:	20000468 	.word	0x20000468
 80013f0:	0802e3f8 	.word	0x0802e3f8
 80013f4:	0800142d 	.word	0x0800142d
 80013f8:	2000046c 	.word	0x2000046c
 80013fc:	0802e41c 	.word	0x0802e41c
 8001400:	0800143d 	.word	0x0800143d
 8001404:	20000470 	.word	0x20000470

08001408 <StartHardwareTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardwareTask */
	CanCommunicationInit();
 8001410:	f7ff fcf4 	bl	8000dfc <CanCommunicationInit>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001414:	2001      	movs	r0, #1
 8001416:	f008 f83b 	bl	8009490 <osDelay>
 800141a:	e7fb      	b.n	8001414 <StartHardwareTask+0xc>

0800141c <startRPMLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startRPMLed */
void startRPMLed(void *argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRPMLed */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001424:	2001      	movs	r0, #1
 8001426:	f008 f833 	bl	8009490 <osDelay>
 800142a:	e7fb      	b.n	8001424 <startRPMLed+0x8>

0800142c <startTouchGFXTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startTouchGFXTask */
void startTouchGFXTask(void *argument)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTouchGFXTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001434:	2001      	movs	r0, #1
 8001436:	f008 f82b 	bl	8009490 <osDelay>
 800143a:	e7fb      	b.n	8001434 <startTouchGFXTask+0x8>

0800143c <startStatusLedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startStatusLedTask */
void startStatusLedTask(void *argument)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startStatusLedTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f008 f823 	bl	8009490 <osDelay>
 800144a:	e7fb      	b.n	8001444 <startStatusLedTask+0x8>

0800144c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001452:	4b33      	ldr	r3, [pc, #204]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001458:	f043 0310 	orr.w	r3, r3, #16
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b30      	ldr	r3, [pc, #192]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0310 	and.w	r3, r3, #16
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800146a:	4b2d      	ldr	r3, [pc, #180]	; (8001520 <MX_GPIO_Init+0xd4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a2c      	ldr	r2, [pc, #176]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001470:	f043 0320 	orr.w	r3, r3, #32
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b2a      	ldr	r3, [pc, #168]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001482:	4b27      	ldr	r3, [pc, #156]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a26      	ldr	r2, [pc, #152]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b24      	ldr	r3, [pc, #144]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <MX_GPIO_Init+0xd4>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a20      	ldr	r2, [pc, #128]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b1e      	ldr	r3, [pc, #120]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a1a      	ldr	r2, [pc, #104]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b18      	ldr	r3, [pc, #96]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	; 0x30
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <MX_GPIO_Init+0xd4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a08      	ldr	r2, [pc, #32]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b06      	ldr	r3, [pc, #24]	; (8001520 <MX_GPIO_Init+0xd4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

}
 8001512:	bf00      	nop
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	40023800 	.word	0x40023800

08001524 <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_JPEG_Init+0x20>)
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <MX_JPEG_Init+0x24>)
 800152c:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_JPEG_Init+0x20>)
 8001530:	f002 fe9e 	bl	8004270 <HAL_JPEG_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 800153a:	f000 facd 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000474 	.word	0x20000474
 8001548:	50051000 	.word	0x50051000

0800154c <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <HAL_JPEG_MspInit+0x38>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10b      	bne.n	8001576 <HAL_JPEG_MspInit+0x2a>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_JPEG_MspInit+0x3c>)
 8001560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <HAL_JPEG_MspInit+0x3c>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6353      	str	r3, [r2, #52]	; 0x34
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_JPEG_MspInit+0x3c>)
 800156c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 8001576:	bf00      	nop
 8001578:	3714      	adds	r7, #20
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	50051000 	.word	0x50051000
 8001588:	40023800 	.word	0x40023800

0800158c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	2234      	movs	r2, #52	; 0x34
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f027 fc41 	bl	8028e20 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800159e:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015a0:	4a3a      	ldr	r2, [pc, #232]	; (800168c <MX_LTDC_Init+0x100>)
 80015a2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015aa:	4b37      	ldr	r3, [pc, #220]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015b0:	4b35      	ldr	r3, [pc, #212]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015b6:	4b34      	ldr	r3, [pc, #208]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 80015bc:	4b32      	ldr	r3, [pc, #200]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015be:	2203      	movs	r2, #3
 80015c0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015c4:	2227      	movs	r2, #39	; 0x27
 80015c6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 80015c8:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015ca:	220b      	movs	r2, #11
 80015cc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 80015ce:	4b2e      	ldr	r3, [pc, #184]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015d0:	222f      	movs	r2, #47	; 0x2f
 80015d2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 80015d4:	4b2c      	ldr	r3, [pc, #176]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015d6:	f240 322b 	movw	r2, #811	; 0x32b
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 80015dc:	4b2a      	ldr	r3, [pc, #168]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015de:	f240 220f 	movw	r2, #527	; 0x20f
 80015e2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 80015e4:	4b28      	ldr	r3, [pc, #160]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015e6:	f240 3233 	movw	r2, #819	; 0x333
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015ee:	f240 2217 	movw	r2, #535	; 0x217
 80015f2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80015f4:	4b24      	ldr	r3, [pc, #144]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80015fc:	4b22      	ldr	r3, [pc, #136]	; (8001688 <MX_LTDC_Init+0xfc>)
 80015fe:	2200      	movs	r2, #0
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001604:	4b20      	ldr	r3, [pc, #128]	; (8001688 <MX_LTDC_Init+0xfc>)
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800160c:	481e      	ldr	r0, [pc, #120]	; (8001688 <MX_LTDC_Init+0xfc>)
 800160e:	f004 f967 	bl	80058e0 <HAL_LTDC_Init>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001618:	f000 fa5e 	bl	8001ad8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001620:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001624:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 800162a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800162e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001634:	23ff      	movs	r3, #255	; 0xff
 8001636:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800163c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001640:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001642:	2305      	movs	r3, #5
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001646:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 800164c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001652:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800165e:	2300      	movs	r3, #0
 8001660:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2200      	movs	r2, #0
 800166e:	4619      	mov	r1, r3
 8001670:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_LTDC_Init+0xfc>)
 8001672:	f004 fabd 	bl	8005bf0 <HAL_LTDC_ConfigLayer>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800167c:	f000 fa2c 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001680:	bf00      	nop
 8001682:	3738      	adds	r7, #56	; 0x38
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200004cc 	.word	0x200004cc
 800168c:	40016800 	.word	0x40016800

08001690 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0b4      	sub	sp, #208	; 0xd0
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ac:	2290      	movs	r2, #144	; 0x90
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f027 fbb5 	bl	8028e20 <memset>
  if(ltdcHandle->Instance==LTDC)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4aa6      	ldr	r2, [pc, #664]	; (8001954 <HAL_LTDC_MspInit+0x2c4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	f040 8145 	bne.w	800194c <HAL_LTDC_MspInit+0x2bc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80016c2:	2308      	movs	r3, #8
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 80016c6:	f240 1317 	movw	r3, #279	; 0x117
 80016ca:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 80016cc:	2303      	movs	r3, #3
 80016ce:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80016d0:	2302      	movs	r3, #2
 80016d2:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 80016d4:	2300      	movs	r3, #0
 80016d6:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 80016d8:	2301      	movs	r3, #1
 80016da:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80016dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016e0:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e6:	4618      	mov	r0, r3
 80016e8:	f005 fe66 	bl	80073b8 <HAL_RCCEx_PeriphCLKConfig>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 80016f2:	f000 f9f1 	bl	8001ad8 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80016f6:	4b98      	ldr	r3, [pc, #608]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fa:	4a97      	ldr	r2, [pc, #604]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 80016fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001700:	6453      	str	r3, [r2, #68]	; 0x44
 8001702:	4b95      	ldr	r3, [pc, #596]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001706:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800170a:	62bb      	str	r3, [r7, #40]	; 0x28
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	4b92      	ldr	r3, [pc, #584]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a91      	ldr	r2, [pc, #580]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001714:	f043 0310 	orr.w	r3, r3, #16
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b8f      	ldr	r3, [pc, #572]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0310 	and.w	r3, r3, #16
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001726:	4b8c      	ldr	r3, [pc, #560]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a8b      	ldr	r2, [pc, #556]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 800172c:	f043 0320 	orr.w	r3, r3, #32
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b89      	ldr	r3, [pc, #548]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0320 	and.w	r3, r3, #32
 800173a:	623b      	str	r3, [r7, #32]
 800173c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	4b86      	ldr	r3, [pc, #536]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a85      	ldr	r2, [pc, #532]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001744:	f043 0304 	orr.w	r3, r3, #4
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b83      	ldr	r3, [pc, #524]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0304 	and.w	r3, r3, #4
 8001752:	61fb      	str	r3, [r7, #28]
 8001754:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001756:	4b80      	ldr	r3, [pc, #512]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a7f      	ldr	r2, [pc, #508]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b7d      	ldr	r3, [pc, #500]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800176e:	4b7a      	ldr	r3, [pc, #488]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a79      	ldr	r2, [pc, #484]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b77      	ldr	r3, [pc, #476]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001786:	4b74      	ldr	r3, [pc, #464]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a73      	ldr	r2, [pc, #460]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 800178c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b71      	ldr	r3, [pc, #452]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800179e:	4b6e      	ldr	r3, [pc, #440]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a6d      	ldr	r2, [pc, #436]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b6b      	ldr	r3, [pc, #428]	; (8001958 <HAL_LTDC_MspInit+0x2c8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017b6:	2370      	movs	r3, #112	; 0x70
 80017b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017ce:	230e      	movs	r3, #14
 80017d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017d4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017d8:	4619      	mov	r1, r3
 80017da:	4860      	ldr	r0, [pc, #384]	; (800195c <HAL_LTDC_MspInit+0x2cc>)
 80017dc:	f002 fa90 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e8:	2302      	movs	r3, #2
 80017ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	2300      	movs	r3, #0
 80017f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017fa:	230e      	movs	r3, #14
 80017fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001800:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001804:	4619      	mov	r1, r3
 8001806:	4856      	ldr	r0, [pc, #344]	; (8001960 <HAL_LTDC_MspInit+0x2d0>)
 8001808:	f002 fa7a 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800180c:	f240 23c1 	movw	r3, #705	; 0x2c1
 8001810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001826:	230e      	movs	r3, #14
 8001828:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800182c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001830:	4619      	mov	r1, r3
 8001832:	484c      	ldr	r0, [pc, #304]	; (8001964 <HAL_LTDC_MspInit+0x2d4>)
 8001834:	f002 fa64 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001838:	f240 437e 	movw	r3, #1150	; 0x47e
 800183c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001840:	2302      	movs	r3, #2
 8001842:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001852:	230e      	movs	r3, #14
 8001854:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001858:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800185c:	4619      	mov	r1, r3
 800185e:	4842      	ldr	r0, [pc, #264]	; (8001968 <HAL_LTDC_MspInit+0x2d8>)
 8001860:	f002 fa4e 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001864:	2303      	movs	r3, #3
 8001866:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800187c:	2309      	movs	r3, #9
 800187e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001882:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001886:	4619      	mov	r1, r3
 8001888:	4838      	ldr	r0, [pc, #224]	; (800196c <HAL_LTDC_MspInit+0x2dc>)
 800188a:	f002 fa39 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 800188e:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001892:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a2:	2300      	movs	r3, #0
 80018a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018a8:	230e      	movs	r3, #14
 80018aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018b2:	4619      	mov	r1, r3
 80018b4:	482d      	ldr	r0, [pc, #180]	; (800196c <HAL_LTDC_MspInit+0x2dc>)
 80018b6:	f002 fa23 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 80018ba:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 80018be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018d4:	230e      	movs	r3, #14
 80018d6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018da:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018de:	4619      	mov	r1, r3
 80018e0:	4823      	ldr	r0, [pc, #140]	; (8001970 <HAL_LTDC_MspInit+0x2e0>)
 80018e2:	f002 fa0d 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80018e6:	2308      	movs	r3, #8
 80018e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80018fe:	230e      	movs	r3, #14
 8001900:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001904:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001908:	4619      	mov	r1, r3
 800190a:	481a      	ldr	r0, [pc, #104]	; (8001974 <HAL_LTDC_MspInit+0x2e4>)
 800190c:	f002 f9f8 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001910:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001914:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191e:	2300      	movs	r3, #0
 8001920:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2300      	movs	r3, #0
 8001926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800192a:	2309      	movs	r3, #9
 800192c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001930:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001934:	4619      	mov	r1, r3
 8001936:	480e      	ldr	r0, [pc, #56]	; (8001970 <HAL_LTDC_MspInit+0x2e0>)
 8001938:	f002 f9e2 	bl	8003d00 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800193c:	2200      	movs	r2, #0
 800193e:	2105      	movs	r1, #5
 8001940:	2058      	movs	r0, #88	; 0x58
 8001942:	f001 fc2b 	bl	800319c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001946:	2058      	movs	r0, #88	; 0x58
 8001948:	f001 fc44 	bl	80031d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800194c:	bf00      	nop
 800194e:	37d0      	adds	r7, #208	; 0xd0
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40016800 	.word	0x40016800
 8001958:	40023800 	.word	0x40023800
 800195c:	40021000 	.word	0x40021000
 8001960:	40021400 	.word	0x40021400
 8001964:	40020800 	.word	0x40020800
 8001968:	40020000 	.word	0x40020000
 800196c:	40020400 	.word	0x40020400
 8001970:	40021800 	.word	0x40021800
 8001974:	40020c00 	.word	0x40020c00

08001978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800197c:	f000 fd4f 	bl	800241e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001980:	f000 f828 	bl	80019d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001984:	f7ff fd62 	bl	800144c <MX_GPIO_Init>
  MX_CRC_Init();
 8001988:	f7ff fb00 	bl	8000f8c <MX_CRC_Init>
  MX_DMA2D_Init();
 800198c:	f7ff fb66 	bl	800105c <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001990:	f7ff fdfc 	bl	800158c <MX_LTDC_Init>
  MX_ADC1_Init();
 8001994:	f7fe fe94 	bl	80006c0 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001998:	f7ff f8f0 	bl	8000b7c <MX_CAN1_Init>
  MX_CAN2_Init();
 800199c:	f7ff f942 	bl	8000c24 <MX_CAN2_Init>
  MX_FMC_Init();
 80019a0:	f7ff fbb4 	bl	800110c <MX_FMC_Init>
  MX_JPEG_Init();
 80019a4:	f7ff fdbe 	bl	8001524 <MX_JPEG_Init>
  MX_QUADSPI_Init();
 80019a8:	f000 f89c 	bl	8001ae4 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 80019ac:	f000 fb24 	bl	8001ff8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80019b0:	f000 fb98 	bl	80020e4 <MX_TIM4_Init>
  MX_DMA_Init();
 80019b4:	f7ff fb2c 	bl	8001010 <MX_DMA_Init>
  MX_TouchGFX_Init();
 80019b8:	f00b fb4f 	bl	800d05a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 80019bc:	f00b fb46 	bl	800d04c <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 80019c0:	f7fe ff10 	bl	80007e4 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80019c4:	f007 fc54 	bl	8009270 <osKernelInitialize>
  MX_FREERTOS_Init();
 80019c8:	f7ff fce2 	bl	8001390 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80019cc:	f007 fc84 	bl	80092d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <main+0x58>
	...

080019d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b094      	sub	sp, #80	; 0x50
 80019d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019da:	f107 031c 	add.w	r3, r7, #28
 80019de:	2234      	movs	r2, #52	; 0x34
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f027 fa1c 	bl	8028e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019e8:	f107 0308 	add.w	r3, r7, #8
 80019ec:	2200      	movs	r2, #0
 80019ee:	601a      	str	r2, [r3, #0]
 80019f0:	605a      	str	r2, [r3, #4]
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	60da      	str	r2, [r3, #12]
 80019f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f8:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <SystemClock_Config+0xd8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	4a2b      	ldr	r2, [pc, #172]	; (8001aac <SystemClock_Config+0xd8>)
 80019fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6413      	str	r3, [r2, #64]	; 0x40
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <SystemClock_Config+0xd8>)
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a10:	4b27      	ldr	r3, [pc, #156]	; (8001ab0 <SystemClock_Config+0xdc>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <SystemClock_Config+0xdc>)
 8001a16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	4b24      	ldr	r3, [pc, #144]	; (8001ab0 <SystemClock_Config+0xdc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a32:	2302      	movs	r3, #2
 8001a34:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a3c:	2319      	movs	r3, #25
 8001a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001a40:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001a44:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a46:	2302      	movs	r3, #2
 8001a48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4618      	mov	r0, r3
 8001a58:	f004 fffc 	bl	8006a54 <HAL_RCC_OscConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001a62:	f000 f839 	bl	8001ad8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a66:	f004 fad3 	bl	8006010 <HAL_PWREx_EnableOverDrive>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001a70:	f000 f832 	bl	8001ad8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	230f      	movs	r3, #15
 8001a76:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a8c:	f107 0308 	add.w	r3, r7, #8
 8001a90:	2107      	movs	r1, #7
 8001a92:	4618      	mov	r0, r3
 8001a94:	f005 fa8c 	bl	8006fb0 <HAL_RCC_ClockConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001a9e:	f000 f81b 	bl	8001ad8 <Error_Handler>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3750      	adds	r7, #80	; 0x50
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ac6:	f000 fcb7 	bl	8002438 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40001000 	.word	0x40001000

08001ad8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ae0:	e7fe      	b.n	8001ae0 <Error_Handler+0x8>
	...

08001ae4 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001ae8:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001aea:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <MX_QUADSPI_Init+0x54>)
 8001aec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001af0:	2203      	movs	r2, #3
 8001af2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001afc:	2210      	movs	r2, #16
 8001afe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001b02:	2217      	movs	r2, #23
 8001b04:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001b08:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001b0c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_QUADSPI_Init+0x50>)
 8001b22:	f004 fac5 	bl	80060b0 <HAL_QSPI_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001b2c:	f7ff ffd4 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000574 	.word	0x20000574
 8001b38:	a0001000 	.word	0xa0001000

08001b3c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b08a      	sub	sp, #40	; 0x28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 0314 	add.w	r3, r7, #20
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a35      	ldr	r2, [pc, #212]	; (8001c30 <HAL_QSPI_MspInit+0xf4>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d164      	bne.n	8001c28 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001b5e:	4b35      	ldr	r3, [pc, #212]	; (8001c34 <HAL_QSPI_MspInit+0xf8>)
 8001b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b62:	4a34      	ldr	r2, [pc, #208]	; (8001c34 <HAL_QSPI_MspInit+0xf8>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	6393      	str	r3, [r2, #56]	; 0x38
 8001b6a:	4b32      	ldr	r3, [pc, #200]	; (8001c34 <HAL_QSPI_MspInit+0xf8>)
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b76:	4b2f      	ldr	r3, [pc, #188]	; (8001c34 <HAL_QSPI_MspInit+0xf8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a2e      	ldr	r2, [pc, #184]	; (8001c34 <HAL_QSPI_MspInit+0xf8>)
 8001b7c:	f043 0320 	orr.w	r3, r3, #32
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <HAL_QSPI_MspInit+0xf8>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0320 	and.w	r3, r3, #32
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	4b29      	ldr	r3, [pc, #164]	; (8001c34 <HAL_QSPI_MspInit+0xf8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	4a28      	ldr	r2, [pc, #160]	; (8001c34 <HAL_QSPI_MspInit+0xf8>)
 8001b94:	f043 0302 	orr.w	r3, r3, #2
 8001b98:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9a:	4b26      	ldr	r3, [pc, #152]	; (8001c34 <HAL_QSPI_MspInit+0xf8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	f003 0302 	and.w	r3, r3, #2
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba6:	23c0      	movs	r3, #192	; 0xc0
 8001ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bb6:	2309      	movs	r3, #9
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	481d      	ldr	r0, [pc, #116]	; (8001c38 <HAL_QSPI_MspInit+0xfc>)
 8001bc2:	f002 f89d 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001bd8:	230a      	movs	r3, #10
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bdc:	f107 0314 	add.w	r3, r7, #20
 8001be0:	4619      	mov	r1, r3
 8001be2:	4815      	ldr	r0, [pc, #84]	; (8001c38 <HAL_QSPI_MspInit+0xfc>)
 8001be4:	f002 f88c 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001be8:	2304      	movs	r3, #4
 8001bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bf8:	2309      	movs	r3, #9
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bfc:	f107 0314 	add.w	r3, r7, #20
 8001c00:	4619      	mov	r1, r3
 8001c02:	480e      	ldr	r0, [pc, #56]	; (8001c3c <HAL_QSPI_MspInit+0x100>)
 8001c04:	f002 f87c 	bl	8003d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c08:	2340      	movs	r3, #64	; 0x40
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001c18:	230a      	movs	r3, #10
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	4806      	ldr	r0, [pc, #24]	; (8001c3c <HAL_QSPI_MspInit+0x100>)
 8001c24:	f002 f86c 	bl	8003d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8001c28:	bf00      	nop
 8001c2a:	3728      	adds	r7, #40	; 0x28
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	a0001000 	.word	0xa0001000
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40021400 	.word	0x40021400
 8001c3c:	40020400 	.word	0x40020400

08001c40 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <HAL_QSPI_MspDeInit+0x38>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10e      	bne.n	8001c70 <HAL_QSPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 8001c52:	4b0a      	ldr	r3, [pc, #40]	; (8001c7c <HAL_QSPI_MspDeInit+0x3c>)
 8001c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c56:	4a09      	ldr	r2, [pc, #36]	; (8001c7c <HAL_QSPI_MspDeInit+0x3c>)
 8001c58:	f023 0302 	bic.w	r3, r3, #2
 8001c5c:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001c5e:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001c62:	4807      	ldr	r0, [pc, #28]	; (8001c80 <HAL_QSPI_MspDeInit+0x40>)
 8001c64:	f002 f9f8 	bl	8004058 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 8001c68:	2144      	movs	r1, #68	; 0x44
 8001c6a:	4806      	ldr	r0, [pc, #24]	; (8001c84 <HAL_QSPI_MspDeInit+0x44>)
 8001c6c:	f002 f9f4 	bl	8004058 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	a0001000 	.word	0xa0001000
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40021400 	.word	0x40021400
 8001c84:	40020400 	.word	0x40020400

08001c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_MspInit+0x4c>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cba:	603b      	str	r3, [r7, #0]
 8001cbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	210f      	movs	r1, #15
 8001cc2:	f06f 0001 	mvn.w	r0, #1
 8001cc6:	f001 fa69 	bl	800319c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40023800 	.word	0x40023800

08001cd8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b08e      	sub	sp, #56	; 0x38
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ce8:	4b33      	ldr	r3, [pc, #204]	; (8001db8 <HAL_InitTick+0xe0>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	4a32      	ldr	r2, [pc, #200]	; (8001db8 <HAL_InitTick+0xe0>)
 8001cee:	f043 0310 	orr.w	r3, r3, #16
 8001cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf4:	4b30      	ldr	r3, [pc, #192]	; (8001db8 <HAL_InitTick+0xe0>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d00:	f107 0210 	add.w	r2, r7, #16
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 fb22 	bl	8007354 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d1a:	f005 fb07 	bl	800732c <HAL_RCC_GetPCLK1Freq>
 8001d1e:	6378      	str	r0, [r7, #52]	; 0x34
 8001d20:	e004      	b.n	8001d2c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d22:	f005 fb03 	bl	800732c <HAL_RCC_GetPCLK1Freq>
 8001d26:	4603      	mov	r3, r0
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2e:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <HAL_InitTick+0xe4>)
 8001d30:	fba2 2303 	umull	r2, r3, r2, r3
 8001d34:	0c9b      	lsrs	r3, r3, #18
 8001d36:	3b01      	subs	r3, #1
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_InitTick+0xe8>)
 8001d3c:	4a21      	ldr	r2, [pc, #132]	; (8001dc4 <HAL_InitTick+0xec>)
 8001d3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_InitTick+0xe8>)
 8001d42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_InitTick+0xe8>)
 8001d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d4e:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_InitTick+0xe8>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d54:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <HAL_InitTick+0xe8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_InitTick+0xe8>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001d60:	4817      	ldr	r0, [pc, #92]	; (8001dc0 <HAL_InitTick+0xe8>)
 8001d62:	f005 ffe2 	bl	8007d2a <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d11b      	bne.n	8001dac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001d74:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <HAL_InitTick+0xe8>)
 8001d76:	f006 f82f 	bl	8007dd8 <HAL_TIM_Base_Start_IT>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001d80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d111      	bne.n	8001dac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d88:	2036      	movs	r0, #54	; 0x36
 8001d8a:	f001 fa23 	bl	80031d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d808      	bhi.n	8001da6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	2036      	movs	r0, #54	; 0x36
 8001d9a:	f001 f9ff 	bl	800319c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_InitTick+0xf0>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e002      	b.n	8001dac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001dac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3738      	adds	r7, #56	; 0x38
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	200005c0 	.word	0x200005c0
 8001dc4:	40001000 	.word	0x40001000
 8001dc8:	2000000c 	.word	0x2000000c

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001dfc:	4802      	ldr	r0, [pc, #8]	; (8001e08 <DMA1_Stream0_IRQHandler+0x10>)
 8001dfe:	f001 fc11 	bl	8003624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	2000070c 	.word	0x2000070c

08001e0c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8001e10:	4802      	ldr	r0, [pc, #8]	; (8001e1c <DMA1_Stream4_IRQHandler+0x10>)
 8001e12:	f001 fc07 	bl	8003624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200006ac 	.word	0x200006ac

08001e20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001e24:	4802      	ldr	r0, [pc, #8]	; (8001e30 <TIM6_DAC_IRQHandler+0x10>)
 8001e26:	f006 f993 	bl	8008150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	200005c0 	.word	0x200005c0

08001e34 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001e38:	4802      	ldr	r0, [pc, #8]	; (8001e44 <LTDC_IRQHandler+0x10>)
 8001e3a:	f003 fe21 	bl	8005a80 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200004cc 	.word	0x200004cc

08001e48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
	return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <_kill>:

int _kill(int pid, int sig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e62:	f026 ff83 	bl	8028d6c <__errno>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2216      	movs	r2, #22
 8001e6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_exit>:

void _exit (int status)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ffe7 	bl	8001e58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e8a:	e7fe      	b.n	8001e8a <_exit+0x12>

08001e8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e98:	2300      	movs	r3, #0
 8001e9a:	617b      	str	r3, [r7, #20]
 8001e9c:	e00a      	b.n	8001eb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e9e:	f3af 8000 	nop.w
 8001ea2:	4601      	mov	r1, r0
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	60ba      	str	r2, [r7, #8]
 8001eaa:	b2ca      	uxtb	r2, r1
 8001eac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	dbf0      	blt.n	8001e9e <_read+0x12>
	}

return len;
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b086      	sub	sp, #24
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	617b      	str	r3, [r7, #20]
 8001ed6:	e009      	b.n	8001eec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1c5a      	adds	r2, r3, #1
 8001edc:	60ba      	str	r2, [r7, #8]
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf1      	blt.n	8001ed8 <_write+0x12>
	}
	return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_close>:

int _close(int file)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
	return -1;
 8001f06:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b083      	sub	sp, #12
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f26:	605a      	str	r2, [r3, #4]
	return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <_isatty>:

int _isatty(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001f3e:	2301      	movs	r3, #1
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
	return 0;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
	...

08001f68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f70:	4a14      	ldr	r2, [pc, #80]	; (8001fc4 <_sbrk+0x5c>)
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <_sbrk+0x60>)
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f7c:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <_sbrk+0x64>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d102      	bne.n	8001f8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <_sbrk+0x64>)
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <_sbrk+0x68>)
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <_sbrk+0x64>)
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4413      	add	r3, r2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d207      	bcs.n	8001fa8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f98:	f026 fee8 	bl	8028d6c <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fa6:	e009      	b.n	8001fbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <_sbrk+0x64>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fae:	4b07      	ldr	r3, [pc, #28]	; (8001fcc <_sbrk+0x64>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	4a05      	ldr	r2, [pc, #20]	; (8001fcc <_sbrk+0x64>)
 8001fb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fba:	68fb      	ldr	r3, [r7, #12]
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3718      	adds	r7, #24
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20080000 	.word	0x20080000
 8001fc8:	00000400 	.word	0x00000400
 8001fcc:	20000610 	.word	0x20000610
 8001fd0:	2003c1b8 	.word	0x2003c1b8

08001fd4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <SystemInit+0x20>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fde:	4a05      	ldr	r2, [pc, #20]	; (8001ff4 <SystemInit+0x20>)
 8001fe0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fe4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	; 0x38
 8001ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002002:	2200      	movs	r2, #0
 8002004:	601a      	str	r2, [r3, #0]
 8002006:	605a      	str	r2, [r3, #4]
 8002008:	609a      	str	r2, [r3, #8]
 800200a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	605a      	str	r2, [r3, #4]
 8002016:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002018:	463b      	mov	r3, r7
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
 800201e:	605a      	str	r2, [r3, #4]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	60da      	str	r2, [r3, #12]
 8002024:	611a      	str	r2, [r3, #16]
 8002026:	615a      	str	r2, [r3, #20]
 8002028:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800202a:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <MX_TIM3_Init+0xe4>)
 800202c:	4a2c      	ldr	r2, [pc, #176]	; (80020e0 <MX_TIM3_Init+0xe8>)
 800202e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002030:	4b2a      	ldr	r3, [pc, #168]	; (80020dc <MX_TIM3_Init+0xe4>)
 8002032:	2200      	movs	r2, #0
 8002034:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <MX_TIM3_Init+0xe4>)
 8002038:	2200      	movs	r2, #0
 800203a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 800203c:	4b27      	ldr	r3, [pc, #156]	; (80020dc <MX_TIM3_Init+0xe4>)
 800203e:	2286      	movs	r2, #134	; 0x86
 8002040:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <MX_TIM3_Init+0xe4>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002048:	4b24      	ldr	r3, [pc, #144]	; (80020dc <MX_TIM3_Init+0xe4>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800204e:	4823      	ldr	r0, [pc, #140]	; (80020dc <MX_TIM3_Init+0xe4>)
 8002050:	f005 fe6b 	bl	8007d2a <HAL_TIM_Base_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800205a:	f7ff fd3d 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002062:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002064:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002068:	4619      	mov	r1, r3
 800206a:	481c      	ldr	r0, [pc, #112]	; (80020dc <MX_TIM3_Init+0xe4>)
 800206c:	f006 faa4 	bl	80085b8 <HAL_TIM_ConfigClockSource>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002076:	f7ff fd2f 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800207a:	4818      	ldr	r0, [pc, #96]	; (80020dc <MX_TIM3_Init+0xe4>)
 800207c:	f005 ff24 	bl	8007ec8 <HAL_TIM_PWM_Init>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002086:	f7ff fd27 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	4619      	mov	r1, r3
 8002098:	4810      	ldr	r0, [pc, #64]	; (80020dc <MX_TIM3_Init+0xe4>)
 800209a:	f006 ff33 	bl	8008f04 <HAL_TIMEx_MasterConfigSynchronization>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020a4:	f7ff fd18 	bl	8001ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a8:	2360      	movs	r3, #96	; 0x60
 80020aa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020b8:	463b      	mov	r3, r7
 80020ba:	2200      	movs	r2, #0
 80020bc:	4619      	mov	r1, r3
 80020be:	4807      	ldr	r0, [pc, #28]	; (80020dc <MX_TIM3_Init+0xe4>)
 80020c0:	f006 f966 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020ca:	f7ff fd05 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020ce:	4803      	ldr	r0, [pc, #12]	; (80020dc <MX_TIM3_Init+0xe4>)
 80020d0:	f000 f91e 	bl	8002310 <HAL_TIM_MspPostInit>

}
 80020d4:	bf00      	nop
 80020d6:	3738      	adds	r7, #56	; 0x38
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000614 	.word	0x20000614
 80020e0:	40000400 	.word	0x40000400

080020e4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b08e      	sub	sp, #56	; 0x38
 80020e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020ee:	2200      	movs	r2, #0
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	605a      	str	r2, [r3, #4]
 80020f4:	609a      	str	r2, [r3, #8]
 80020f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002104:	463b      	mov	r3, r7
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
 8002110:	611a      	str	r2, [r3, #16]
 8002112:	615a      	str	r2, [r3, #20]
 8002114:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002116:	4b2c      	ldr	r3, [pc, #176]	; (80021c8 <MX_TIM4_Init+0xe4>)
 8002118:	4a2c      	ldr	r2, [pc, #176]	; (80021cc <MX_TIM4_Init+0xe8>)
 800211a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800211c:	4b2a      	ldr	r3, [pc, #168]	; (80021c8 <MX_TIM4_Init+0xe4>)
 800211e:	2200      	movs	r2, #0
 8002120:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002122:	4b29      	ldr	r3, [pc, #164]	; (80021c8 <MX_TIM4_Init+0xe4>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <MX_TIM4_Init+0xe4>)
 800212a:	22d7      	movs	r2, #215	; 0xd7
 800212c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800212e:	4b26      	ldr	r3, [pc, #152]	; (80021c8 <MX_TIM4_Init+0xe4>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002134:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <MX_TIM4_Init+0xe4>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800213a:	4823      	ldr	r0, [pc, #140]	; (80021c8 <MX_TIM4_Init+0xe4>)
 800213c:	f005 fdf5 	bl	8007d2a <HAL_TIM_Base_Init>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d001      	beq.n	800214a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002146:	f7ff fcc7 	bl	8001ad8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800214a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800214e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002150:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002154:	4619      	mov	r1, r3
 8002156:	481c      	ldr	r0, [pc, #112]	; (80021c8 <MX_TIM4_Init+0xe4>)
 8002158:	f006 fa2e 	bl	80085b8 <HAL_TIM_ConfigClockSource>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8002162:	f7ff fcb9 	bl	8001ad8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002166:	4818      	ldr	r0, [pc, #96]	; (80021c8 <MX_TIM4_Init+0xe4>)
 8002168:	f005 feae 	bl	8007ec8 <HAL_TIM_PWM_Init>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d001      	beq.n	8002176 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002172:	f7ff fcb1 	bl	8001ad8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002176:	2300      	movs	r3, #0
 8002178:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4810      	ldr	r0, [pc, #64]	; (80021c8 <MX_TIM4_Init+0xe4>)
 8002186:	f006 febd 	bl	8008f04 <HAL_TIMEx_MasterConfigSynchronization>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002190:	f7ff fca2 	bl	8001ad8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002194:	2360      	movs	r3, #96	; 0x60
 8002196:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800219c:	2300      	movs	r3, #0
 800219e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021a4:	463b      	mov	r3, r7
 80021a6:	2200      	movs	r2, #0
 80021a8:	4619      	mov	r1, r3
 80021aa:	4807      	ldr	r0, [pc, #28]	; (80021c8 <MX_TIM4_Init+0xe4>)
 80021ac:	f006 f8f0 	bl	8008390 <HAL_TIM_PWM_ConfigChannel>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80021b6:	f7ff fc8f 	bl	8001ad8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80021ba:	4803      	ldr	r0, [pc, #12]	; (80021c8 <MX_TIM4_Init+0xe4>)
 80021bc:	f000 f8a8 	bl	8002310 <HAL_TIM_MspPostInit>

}
 80021c0:	bf00      	nop
 80021c2:	3738      	adds	r7, #56	; 0x38
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000660 	.word	0x20000660
 80021cc:	40000800 	.word	0x40000800

080021d0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b084      	sub	sp, #16
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a45      	ldr	r2, [pc, #276]	; (80022f4 <HAL_TIM_Base_MspInit+0x124>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d142      	bne.n	8002268 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021e2:	4b45      	ldr	r3, [pc, #276]	; (80022f8 <HAL_TIM_Base_MspInit+0x128>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a44      	ldr	r2, [pc, #272]	; (80022f8 <HAL_TIM_Base_MspInit+0x128>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b42      	ldr	r3, [pc, #264]	; (80022f8 <HAL_TIM_Base_MspInit+0x128>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80021fa:	4b40      	ldr	r3, [pc, #256]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 80021fc:	4a40      	ldr	r2, [pc, #256]	; (8002300 <HAL_TIM_Base_MspInit+0x130>)
 80021fe:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 8002200:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 8002202:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002206:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002208:	4b3c      	ldr	r3, [pc, #240]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 800220a:	2200      	movs	r2, #0
 800220c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 800220e:	4b3b      	ldr	r3, [pc, #236]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 8002210:	2200      	movs	r2, #0
 8002212:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 8002214:	4b39      	ldr	r3, [pc, #228]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 8002216:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800221a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800221c:	4b37      	ldr	r3, [pc, #220]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 800221e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002222:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002224:	4b35      	ldr	r3, [pc, #212]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 8002226:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800222a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 800222c:	4b33      	ldr	r3, [pc, #204]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 8002232:	4b32      	ldr	r3, [pc, #200]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002238:	4b30      	ldr	r3, [pc, #192]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 800223e:	482f      	ldr	r0, [pc, #188]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 8002240:	f001 f8c0 	bl	80033c4 <HAL_DMA_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 800224a:	f7ff fc45 	bl	8001ad8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a2a      	ldr	r2, [pc, #168]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 8002252:	625a      	str	r2, [r3, #36]	; 0x24
 8002254:	4a29      	ldr	r2, [pc, #164]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a27      	ldr	r2, [pc, #156]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 800225e:	639a      	str	r2, [r3, #56]	; 0x38
 8002260:	4a26      	ldr	r2, [pc, #152]	; (80022fc <HAL_TIM_Base_MspInit+0x12c>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002266:	e040      	b.n	80022ea <HAL_TIM_Base_MspInit+0x11a>
  else if(tim_baseHandle->Instance==TIM4)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a25      	ldr	r2, [pc, #148]	; (8002304 <HAL_TIM_Base_MspInit+0x134>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d13b      	bne.n	80022ea <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002272:	4b21      	ldr	r3, [pc, #132]	; (80022f8 <HAL_TIM_Base_MspInit+0x128>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	4a20      	ldr	r2, [pc, #128]	; (80022f8 <HAL_TIM_Base_MspInit+0x128>)
 8002278:	f043 0304 	orr.w	r3, r3, #4
 800227c:	6413      	str	r3, [r2, #64]	; 0x40
 800227e:	4b1e      	ldr	r3, [pc, #120]	; (80022f8 <HAL_TIM_Base_MspInit+0x128>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	60bb      	str	r3, [r7, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800228a:	4b1f      	ldr	r3, [pc, #124]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 800228c:	4a1f      	ldr	r2, [pc, #124]	; (800230c <HAL_TIM_Base_MspInit+0x13c>)
 800228e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002290:	4b1d      	ldr	r3, [pc, #116]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 8002292:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002296:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002298:	4b1b      	ldr	r3, [pc, #108]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800229e:	4b1a      	ldr	r3, [pc, #104]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022a4:	4b18      	ldr	r3, [pc, #96]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022aa:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022ac:	4b16      	ldr	r3, [pc, #88]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022b4:	4b14      	ldr	r3, [pc, #80]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ba:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022c2:	4b11      	ldr	r3, [pc, #68]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022c8:	4b0f      	ldr	r3, [pc, #60]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80022ce:	480e      	ldr	r0, [pc, #56]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022d0:	f001 f878 	bl	80033c4 <HAL_DMA_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80022da:	f7ff fbfd 	bl	8001ad8 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24
 80022e4:	4a08      	ldr	r2, [pc, #32]	; (8002308 <HAL_TIM_Base_MspInit+0x138>)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40000400 	.word	0x40000400
 80022f8:	40023800 	.word	0x40023800
 80022fc:	200006ac 	.word	0x200006ac
 8002300:	40026070 	.word	0x40026070
 8002304:	40000800 	.word	0x40000800
 8002308:	2000070c 	.word	0x2000070c
 800230c:	40026010 	.word	0x40026010

08002310 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	; 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002318:	f107 0314 	add.w	r3, r7, #20
 800231c:	2200      	movs	r2, #0
 800231e:	601a      	str	r2, [r3, #0]
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	60da      	str	r2, [r3, #12]
 8002326:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <HAL_TIM_MspPostInit+0xa8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d11c      	bne.n	800236c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002332:	4b22      	ldr	r3, [pc, #136]	; (80023bc <HAL_TIM_MspPostInit+0xac>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002336:	4a21      	ldr	r2, [pc, #132]	; (80023bc <HAL_TIM_MspPostInit+0xac>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6313      	str	r3, [r2, #48]	; 0x30
 800233e:	4b1f      	ldr	r3, [pc, #124]	; (80023bc <HAL_TIM_MspPostInit+0xac>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	613b      	str	r3, [r7, #16]
 8002348:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800234a:	2310      	movs	r3, #16
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800235a:	2302      	movs	r3, #2
 800235c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	4816      	ldr	r0, [pc, #88]	; (80023c0 <HAL_TIM_MspPostInit+0xb0>)
 8002366:	f001 fccb 	bl	8003d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800236a:	e021      	b.n	80023b0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <HAL_TIM_MspPostInit+0xb4>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d11c      	bne.n	80023b0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002376:	4b11      	ldr	r3, [pc, #68]	; (80023bc <HAL_TIM_MspPostInit+0xac>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a10      	ldr	r2, [pc, #64]	; (80023bc <HAL_TIM_MspPostInit+0xac>)
 800237c:	f043 0308 	orr.w	r3, r3, #8
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b0e      	ldr	r3, [pc, #56]	; (80023bc <HAL_TIM_MspPostInit+0xac>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800238e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239c:	2300      	movs	r3, #0
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023a0:	2302      	movs	r3, #2
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <HAL_TIM_MspPostInit+0xb8>)
 80023ac:	f001 fca8 	bl	8003d00 <HAL_GPIO_Init>
}
 80023b0:	bf00      	nop
 80023b2:	3728      	adds	r7, #40	; 0x28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40023800 	.word	0x40023800
 80023c0:	40020400 	.word	0x40020400
 80023c4:	40000800 	.word	0x40000800
 80023c8:	40020c00 	.word	0x40020c00

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e8:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023f6:	f7ff fded 	bl	8001fd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f026 fccf 	bl	8028d9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7ff fabb 	bl	8001978 <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002404:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	200002e4 	.word	0x200002e4
  ldr r2, =_sidata
 8002410:	08163b60 	.word	0x08163b60
  ldr r2, =_sbss
 8002414:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8002418:	2003c1b4 	.word	0x2003c1b4

0800241c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC_IRQHandler>

0800241e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002422:	2003      	movs	r0, #3
 8002424:	f000 feaf 	bl	8003186 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002428:	200f      	movs	r0, #15
 800242a:	f7ff fc55 	bl	8001cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242e:	f7ff fc2b 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800243c:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_IncTick+0x20>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	4b06      	ldr	r3, [pc, #24]	; (800245c <HAL_IncTick+0x24>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4413      	add	r3, r2
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_IncTick+0x24>)
 800244a:	6013      	str	r3, [r2, #0]
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	20000010 	.word	0x20000010
 800245c:	2000076c 	.word	0x2000076c

08002460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  return uwTick;
 8002464:	4b03      	ldr	r3, [pc, #12]	; (8002474 <HAL_GetTick+0x14>)
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
 8002472:	bf00      	nop
 8002474:	2000076c 	.word	0x2000076c

08002478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002480:	f7ff ffee 	bl	8002460 <HAL_GetTick>
 8002484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002490:	d005      	beq.n	800249e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002492:	4b0a      	ldr	r3, [pc, #40]	; (80024bc <HAL_Delay+0x44>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4413      	add	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800249e:	bf00      	nop
 80024a0:	f7ff ffde 	bl	8002460 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d8f7      	bhi.n	80024a0 <HAL_Delay+0x28>
  {
  }
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000010 	.word	0x20000010

080024c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024c8:	2300      	movs	r3, #0
 80024ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e031      	b.n	800253a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d109      	bne.n	80024f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7fe f940 	bl	8000764 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d116      	bne.n	800252c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_ADC_Init+0x84>)
 8002504:	4013      	ands	r3, r2
 8002506:	f043 0202 	orr.w	r2, r3, #2
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f970 	bl	80027f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	f043 0201 	orr.w	r2, r3, #1
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	641a      	str	r2, [r3, #64]	; 0x40
 800252a:	e001      	b.n	8002530 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002538:	7bfb      	ldrb	r3, [r7, #15]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	ffffeefd 	.word	0xffffeefd

08002548 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002552:	2300      	movs	r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x1c>
 8002560:	2302      	movs	r3, #2
 8002562:	e136      	b.n	80027d2 <HAL_ADC_ConfigChannel+0x28a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b09      	cmp	r3, #9
 8002572:	d93a      	bls.n	80025ea <HAL_ADC_ConfigChannel+0xa2>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800257c:	d035      	beq.n	80025ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68d9      	ldr	r1, [r3, #12]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	b29b      	uxth	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	4613      	mov	r3, r2
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	4413      	add	r3, r2
 8002592:	3b1e      	subs	r3, #30
 8002594:	2207      	movs	r2, #7
 8002596:	fa02 f303 	lsl.w	r3, r2, r3
 800259a:	43da      	mvns	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	400a      	ands	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a8d      	ldr	r2, [pc, #564]	; (80027e0 <HAL_ADC_ConfigChannel+0x298>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d10a      	bne.n	80025c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68d9      	ldr	r1, [r3, #12]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	061a      	lsls	r2, r3, #24
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025c2:	e035      	b.n	8002630 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68d9      	ldr	r1, [r3, #12]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	689a      	ldr	r2, [r3, #8]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	4618      	mov	r0, r3
 80025d6:	4603      	mov	r3, r0
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	4403      	add	r3, r0
 80025dc:	3b1e      	subs	r3, #30
 80025de:	409a      	lsls	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025e8:	e022      	b.n	8002630 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	6919      	ldr	r1, [r3, #16]
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	461a      	mov	r2, r3
 80025f8:	4613      	mov	r3, r2
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	4413      	add	r3, r2
 80025fe:	2207      	movs	r2, #7
 8002600:	fa02 f303 	lsl.w	r3, r2, r3
 8002604:	43da      	mvns	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	400a      	ands	r2, r1
 800260c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6919      	ldr	r1, [r3, #16]
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4618      	mov	r0, r3
 8002620:	4603      	mov	r3, r0
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4403      	add	r3, r0
 8002626:	409a      	lsls	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b06      	cmp	r3, #6
 8002636:	d824      	bhi.n	8002682 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	3b05      	subs	r3, #5
 800264a:	221f      	movs	r2, #31
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43da      	mvns	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	400a      	ands	r2, r1
 8002658:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	3b05      	subs	r3, #5
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	635a      	str	r2, [r3, #52]	; 0x34
 8002680:	e04c      	b.n	800271c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b0c      	cmp	r3, #12
 8002688:	d824      	bhi.n	80026d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3b23      	subs	r3, #35	; 0x23
 800269c:	221f      	movs	r2, #31
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	400a      	ands	r2, r1
 80026aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	3b23      	subs	r3, #35	; 0x23
 80026c6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	631a      	str	r2, [r3, #48]	; 0x30
 80026d2:	e023      	b.n	800271c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	685a      	ldr	r2, [r3, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	3b41      	subs	r3, #65	; 0x41
 80026e6:	221f      	movs	r2, #31
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43da      	mvns	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	400a      	ands	r2, r1
 80026f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	4618      	mov	r0, r3
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	3b41      	subs	r3, #65	; 0x41
 8002710:	fa00 f203 	lsl.w	r2, r0, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a30      	ldr	r2, [pc, #192]	; (80027e4 <HAL_ADC_ConfigChannel+0x29c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d10a      	bne.n	800273c <HAL_ADC_ConfigChannel+0x1f4>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800272e:	d105      	bne.n	800273c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002730:	4b2d      	ldr	r3, [pc, #180]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4a2c      	ldr	r2, [pc, #176]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002736:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800273a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a28      	ldr	r2, [pc, #160]	; (80027e4 <HAL_ADC_ConfigChannel+0x29c>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d10f      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x21e>
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2b12      	cmp	r3, #18
 800274c:	d10b      	bne.n	8002766 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800274e:	4b26      	ldr	r3, [pc, #152]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a25      	ldr	r2, [pc, #148]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002754:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002758:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800275a:	4b23      	ldr	r3, [pc, #140]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4a22      	ldr	r2, [pc, #136]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002760:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002764:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a1e      	ldr	r2, [pc, #120]	; (80027e4 <HAL_ADC_ConfigChannel+0x29c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d12b      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x280>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a1a      	ldr	r2, [pc, #104]	; (80027e0 <HAL_ADC_ConfigChannel+0x298>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d003      	beq.n	8002782 <HAL_ADC_ConfigChannel+0x23a>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	2b11      	cmp	r3, #17
 8002780:	d122      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002782:	4b19      	ldr	r3, [pc, #100]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a18      	ldr	r2, [pc, #96]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002788:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800278c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a15      	ldr	r2, [pc, #84]	; (80027e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8002794:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002798:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <HAL_ADC_ConfigChannel+0x298>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d111      	bne.n	80027c8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80027a4:	4b11      	ldr	r3, [pc, #68]	; (80027ec <HAL_ADC_ConfigChannel+0x2a4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a11      	ldr	r2, [pc, #68]	; (80027f0 <HAL_ADC_ConfigChannel+0x2a8>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	0c9a      	lsrs	r2, r3, #18
 80027b0:	4613      	mov	r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	4413      	add	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027ba:	e002      	b.n	80027c2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3b01      	subs	r3, #1
 80027c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f9      	bne.n	80027bc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	10000012 	.word	0x10000012
 80027e4:	40012000 	.word	0x40012000
 80027e8:	40012300 	.word	0x40012300
 80027ec:	20000008 	.word	0x20000008
 80027f0:	431bde83 	.word	0x431bde83

080027f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80027fc:	4b78      	ldr	r3, [pc, #480]	; (80029e0 <ADC_Init+0x1ec>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a77      	ldr	r2, [pc, #476]	; (80029e0 <ADC_Init+0x1ec>)
 8002802:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002806:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002808:	4b75      	ldr	r3, [pc, #468]	; (80029e0 <ADC_Init+0x1ec>)
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4973      	ldr	r1, [pc, #460]	; (80029e0 <ADC_Init+0x1ec>)
 8002812:	4313      	orrs	r3, r2
 8002814:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685a      	ldr	r2, [r3, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6859      	ldr	r1, [r3, #4]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	021a      	lsls	r2, r3, #8
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6859      	ldr	r1, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800286a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	4a58      	ldr	r2, [pc, #352]	; (80029e4 <ADC_Init+0x1f0>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689a      	ldr	r2, [r3, #8]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6899      	ldr	r1, [r3, #8]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6899      	ldr	r1, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	430a      	orrs	r2, r1
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e00f      	b.n	80028ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0202 	bic.w	r2, r2, #2
 80028fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6899      	ldr	r1, [r3, #8]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	005a      	lsls	r2, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01b      	beq.n	8002954 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800293a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6859      	ldr	r1, [r3, #4]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	3b01      	subs	r3, #1
 8002948:	035a      	lsls	r2, r3, #13
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	e007      	b.n	8002964 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002962:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	3b01      	subs	r3, #1
 8002980:	051a      	lsls	r2, r3, #20
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	6899      	ldr	r1, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029a6:	025a      	lsls	r2, r3, #9
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6899      	ldr	r1, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	029a      	lsls	r2, r3, #10
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	609a      	str	r2, [r3, #8]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	40012300 	.word	0x40012300
 80029e4:	0f000001 	.word	0x0f000001

080029e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e0ed      	b.n	8002bd6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d102      	bne.n	8002a0c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f7fe f960 	bl	8000ccc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a1c:	f7ff fd20 	bl	8002460 <HAL_GetTick>
 8002a20:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a22:	e012      	b.n	8002a4a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a24:	f7ff fd1c 	bl	8002460 <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b0a      	cmp	r3, #10
 8002a30:	d90b      	bls.n	8002a4a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2205      	movs	r2, #5
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0c5      	b.n	8002bd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0e5      	beq.n	8002a24 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0202 	bic.w	r2, r2, #2
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a68:	f7ff fcfa 	bl	8002460 <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a6e:	e012      	b.n	8002a96 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a70:	f7ff fcf6 	bl	8002460 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b0a      	cmp	r3, #10
 8002a7c:	d90b      	bls.n	8002a96 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2205      	movs	r2, #5
 8002a8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e09f      	b.n	8002bd6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d1e5      	bne.n	8002a70 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	7e1b      	ldrb	r3, [r3, #24]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d108      	bne.n	8002abe <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	e007      	b.n	8002ace <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	7e5b      	ldrb	r3, [r3, #25]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d108      	bne.n	8002ae8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e007      	b.n	8002af8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002af6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7e9b      	ldrb	r3, [r3, #26]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d108      	bne.n	8002b12 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0220 	orr.w	r2, r2, #32
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e007      	b.n	8002b22 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0220 	bic.w	r2, r2, #32
 8002b20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	7edb      	ldrb	r3, [r3, #27]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d108      	bne.n	8002b3c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f022 0210 	bic.w	r2, r2, #16
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e007      	b.n	8002b4c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0210 	orr.w	r2, r2, #16
 8002b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	7f1b      	ldrb	r3, [r3, #28]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d108      	bne.n	8002b66 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0208 	orr.w	r2, r2, #8
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e007      	b.n	8002b76 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0208 	bic.w	r2, r2, #8
 8002b74:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7f5b      	ldrb	r3, [r3, #29]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0204 	orr.w	r2, r2, #4
 8002b8c:	601a      	str	r2, [r3, #0]
 8002b8e:	e007      	b.n	8002ba0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 0204 	bic.w	r2, r2, #4
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	431a      	orrs	r2, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	ea42 0103 	orr.w	r1, r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	1e5a      	subs	r2, r3, #1
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
	...

08002be0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b087      	sub	sp, #28
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bf6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002bf8:	7cfb      	ldrb	r3, [r7, #19]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d003      	beq.n	8002c06 <HAL_CAN_ConfigFilter+0x26>
 8002bfe:	7cfb      	ldrb	r3, [r7, #19]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	f040 80c7 	bne.w	8002d94 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a69      	ldr	r2, [pc, #420]	; (8002db0 <HAL_CAN_ConfigFilter+0x1d0>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d001      	beq.n	8002c14 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8002c10:	4b68      	ldr	r3, [pc, #416]	; (8002db4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002c12:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4a63      	ldr	r2, [pc, #396]	; (8002db4 <HAL_CAN_ConfigFilter+0x1d4>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d111      	bne.n	8002c50 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002c32:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	695b      	ldr	r3, [r3, #20]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	2201      	movs	r2, #1
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	401a      	ands	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d123      	bne.n	8002cc2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	401a      	ands	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002c9c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	3248      	adds	r2, #72	; 0x48
 8002ca2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cb6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002cb8:	6979      	ldr	r1, [r7, #20]
 8002cba:	3348      	adds	r3, #72	; 0x48
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	69db      	ldr	r3, [r3, #28]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d122      	bne.n	8002d10 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002cea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	3248      	adds	r2, #72	; 0x48
 8002cf0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d06:	6979      	ldr	r1, [r7, #20]
 8002d08:	3348      	adds	r3, #72	; 0x48
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	440b      	add	r3, r1
 8002d0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d109      	bne.n	8002d2c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	43db      	mvns	r3, r3
 8002d22:	401a      	ands	r2, r3
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002d2a:	e007      	b.n	8002d3c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	431a      	orrs	r2, r3
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002d56:	e007      	b.n	8002d68 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	431a      	orrs	r2, r3
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	6a1b      	ldr	r3, [r3, #32]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d107      	bne.n	8002d80 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d86:	f023 0201 	bic.w	r2, r3, #1
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e006      	b.n	8002da2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
  }
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	371c      	adds	r7, #28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	40003400 	.word	0x40003400
 8002db4:	40006400 	.word	0x40006400

08002db8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d12e      	bne.n	8002e2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2202      	movs	r2, #2
 8002dd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002de4:	f7ff fb3c 	bl	8002460 <HAL_GetTick>
 8002de8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002dea:	e012      	b.n	8002e12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002dec:	f7ff fb38 	bl	8002460 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b0a      	cmp	r3, #10
 8002df8:	d90b      	bls.n	8002e12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2205      	movs	r2, #5
 8002e0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e012      	b.n	8002e38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1e5      	bne.n	8002dec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e006      	b.n	8002e38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
  }
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002e5e:	7ffb      	ldrb	r3, [r7, #31]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d003      	beq.n	8002e6c <HAL_CAN_AddTxMessage+0x2c>
 8002e64:	7ffb      	ldrb	r3, [r7, #31]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	f040 80ad 	bne.w	8002fc6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d105      	bne.n	8002e8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 8095 	beq.w	8002fb6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	0e1b      	lsrs	r3, r3, #24
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002e96:	2201      	movs	r2, #1
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	409a      	lsls	r2, r3
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10d      	bne.n	8002ec4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002eb2:	68f9      	ldr	r1, [r7, #12]
 8002eb4:	6809      	ldr	r1, [r1, #0]
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	3318      	adds	r3, #24
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	440b      	add	r3, r1
 8002ec0:	601a      	str	r2, [r3, #0]
 8002ec2:	e00f      	b.n	8002ee4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ece:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ed4:	68f9      	ldr	r1, [r7, #12]
 8002ed6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ed8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3318      	adds	r3, #24
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	440b      	add	r3, r1
 8002ee2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	3318      	adds	r3, #24
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	7d1b      	ldrb	r3, [r3, #20]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d111      	bne.n	8002f24 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	3318      	adds	r3, #24
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	4413      	add	r3, r2
 8002f0c:	3304      	adds	r3, #4
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	6811      	ldr	r1, [r2, #0]
 8002f14:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3318      	adds	r3, #24
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	440b      	add	r3, r1
 8002f20:	3304      	adds	r3, #4
 8002f22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3307      	adds	r3, #7
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	061a      	lsls	r2, r3, #24
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	3306      	adds	r3, #6
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	041b      	lsls	r3, r3, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	3305      	adds	r3, #5
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	021b      	lsls	r3, r3, #8
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	3204      	adds	r2, #4
 8002f44:	7812      	ldrb	r2, [r2, #0]
 8002f46:	4610      	mov	r0, r2
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	6811      	ldr	r1, [r2, #0]
 8002f4c:	ea43 0200 	orr.w	r2, r3, r0
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	440b      	add	r3, r1
 8002f56:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002f5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	3303      	adds	r3, #3
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	061a      	lsls	r2, r3, #24
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	3302      	adds	r3, #2
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	041b      	lsls	r3, r3, #16
 8002f6c:	431a      	orrs	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3301      	adds	r3, #1
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	021b      	lsls	r3, r3, #8
 8002f76:	4313      	orrs	r3, r2
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	7812      	ldrb	r2, [r2, #0]
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	6811      	ldr	r1, [r2, #0]
 8002f82:	ea43 0200 	orr.w	r2, r3, r0
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	440b      	add	r3, r1
 8002f8c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002f90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3318      	adds	r3, #24
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	4413      	add	r3, r2
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	6811      	ldr	r1, [r2, #0]
 8002fa4:	f043 0201 	orr.w	r2, r3, #1
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	3318      	adds	r3, #24
 8002fac:	011b      	lsls	r3, r3, #4
 8002fae:	440b      	add	r3, r1
 8002fb0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	e00e      	b.n	8002fd4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e006      	b.n	8002fd4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
  }
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3724      	adds	r7, #36	; 0x24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ff0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d002      	beq.n	8002ffe <HAL_CAN_ActivateNotification+0x1e>
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d109      	bne.n	8003012 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6959      	ldr	r1, [r3, #20]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	e006      	b.n	8003020 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003016:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
  }
}
 8003020:	4618      	mov	r0, r3
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b480      	push	{r7}
 800302e:	b085      	sub	sp, #20
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0307 	and.w	r3, r3, #7
 800303a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800303c:	4b0b      	ldr	r3, [pc, #44]	; (800306c <__NVIC_SetPriorityGrouping+0x40>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003048:	4013      	ands	r3, r2
 800304a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003054:	4b06      	ldr	r3, [pc, #24]	; (8003070 <__NVIC_SetPriorityGrouping+0x44>)
 8003056:	4313      	orrs	r3, r2
 8003058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305a:	4a04      	ldr	r2, [pc, #16]	; (800306c <__NVIC_SetPriorityGrouping+0x40>)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	60d3      	str	r3, [r2, #12]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00
 8003070:	05fa0000 	.word	0x05fa0000

08003074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <__NVIC_GetPriorityGrouping+0x18>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0a1b      	lsrs	r3, r3, #8
 800307e:	f003 0307 	and.w	r3, r3, #7
}
 8003082:	4618      	mov	r0, r3
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	db0b      	blt.n	80030ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030a2:	79fb      	ldrb	r3, [r7, #7]
 80030a4:	f003 021f 	and.w	r2, r3, #31
 80030a8:	4907      	ldr	r1, [pc, #28]	; (80030c8 <__NVIC_EnableIRQ+0x38>)
 80030aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ae:	095b      	lsrs	r3, r3, #5
 80030b0:	2001      	movs	r0, #1
 80030b2:	fa00 f202 	lsl.w	r2, r0, r2
 80030b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030ba:	bf00      	nop
 80030bc:	370c      	adds	r7, #12
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	e000e100 	.word	0xe000e100

080030cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	4603      	mov	r3, r0
 80030d4:	6039      	str	r1, [r7, #0]
 80030d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	db0a      	blt.n	80030f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	b2da      	uxtb	r2, r3
 80030e4:	490c      	ldr	r1, [pc, #48]	; (8003118 <__NVIC_SetPriority+0x4c>)
 80030e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030ea:	0112      	lsls	r2, r2, #4
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	440b      	add	r3, r1
 80030f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f4:	e00a      	b.n	800310c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	b2da      	uxtb	r2, r3
 80030fa:	4908      	ldr	r1, [pc, #32]	; (800311c <__NVIC_SetPriority+0x50>)
 80030fc:	79fb      	ldrb	r3, [r7, #7]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	3b04      	subs	r3, #4
 8003104:	0112      	lsls	r2, r2, #4
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	440b      	add	r3, r1
 800310a:	761a      	strb	r2, [r3, #24]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	e000e100 	.word	0xe000e100
 800311c:	e000ed00 	.word	0xe000ed00

08003120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003120:	b480      	push	{r7}
 8003122:	b089      	sub	sp, #36	; 0x24
 8003124:	af00      	add	r7, sp, #0
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	f1c3 0307 	rsb	r3, r3, #7
 800313a:	2b04      	cmp	r3, #4
 800313c:	bf28      	it	cs
 800313e:	2304      	movcs	r3, #4
 8003140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3304      	adds	r3, #4
 8003146:	2b06      	cmp	r3, #6
 8003148:	d902      	bls.n	8003150 <NVIC_EncodePriority+0x30>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3b03      	subs	r3, #3
 800314e:	e000      	b.n	8003152 <NVIC_EncodePriority+0x32>
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003154:	f04f 32ff 	mov.w	r2, #4294967295
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	43da      	mvns	r2, r3
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	401a      	ands	r2, r3
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003168:	f04f 31ff 	mov.w	r1, #4294967295
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	fa01 f303 	lsl.w	r3, r1, r3
 8003172:	43d9      	mvns	r1, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003178:	4313      	orrs	r3, r2
         );
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ff4c 	bl	800302c <__NVIC_SetPriorityGrouping>
}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
 80031a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80031aa:	2300      	movs	r3, #0
 80031ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031ae:	f7ff ff61 	bl	8003074 <__NVIC_GetPriorityGrouping>
 80031b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	68b9      	ldr	r1, [r7, #8]
 80031b8:	6978      	ldr	r0, [r7, #20]
 80031ba:	f7ff ffb1 	bl	8003120 <NVIC_EncodePriority>
 80031be:	4602      	mov	r2, r0
 80031c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c4:	4611      	mov	r1, r2
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff ff80 	bl	80030cc <__NVIC_SetPriority>
}
 80031cc:	bf00      	nop
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7ff ff54 	bl	8003090 <__NVIC_EnableIRQ>
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e054      	b.n	80032ac <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	7f5b      	ldrb	r3, [r3, #29]
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd fedc 	bl	8000fd0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	791b      	ldrb	r3, [r3, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10c      	bne.n	8003240 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a22      	ldr	r2, [pc, #136]	; (80032b4 <HAL_CRC_Init+0xc4>)
 800322c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0218 	bic.w	r2, r2, #24
 800323c:	609a      	str	r2, [r3, #8]
 800323e:	e00c      	b.n	800325a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6899      	ldr	r1, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	461a      	mov	r2, r3
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f834 	bl	80032b8 <HAL_CRCEx_Polynomial_Set>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e028      	b.n	80032ac <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	795b      	ldrb	r3, [r3, #5]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f04f 32ff 	mov.w	r2, #4294967295
 800326a:	611a      	str	r2, [r3, #16]
 800326c:	e004      	b.n	8003278 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6912      	ldr	r2, [r2, #16]
 8003276:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695a      	ldr	r2, [r3, #20]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	430a      	orrs	r2, r1
 800328c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	430a      	orrs	r2, r1
 80032a2:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	04c11db7 	.word	0x04c11db7

080032b8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b087      	sub	sp, #28
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c4:	2300      	movs	r3, #0
 80032c6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80032c8:	231f      	movs	r3, #31
 80032ca:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80032cc:	bf00      	nop
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1e5a      	subs	r2, r3, #1
 80032d2:	613a      	str	r2, [r7, #16]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <HAL_CRCEx_Polynomial_Set+0x34>
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f003 031f 	and.w	r3, r3, #31
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	fa22 f303 	lsr.w	r3, r2, r3
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b18      	cmp	r3, #24
 80032f0:	d846      	bhi.n	8003380 <HAL_CRCEx_Polynomial_Set+0xc8>
 80032f2:	a201      	add	r2, pc, #4	; (adr r2, 80032f8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80032f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f8:	08003387 	.word	0x08003387
 80032fc:	08003381 	.word	0x08003381
 8003300:	08003381 	.word	0x08003381
 8003304:	08003381 	.word	0x08003381
 8003308:	08003381 	.word	0x08003381
 800330c:	08003381 	.word	0x08003381
 8003310:	08003381 	.word	0x08003381
 8003314:	08003381 	.word	0x08003381
 8003318:	08003375 	.word	0x08003375
 800331c:	08003381 	.word	0x08003381
 8003320:	08003381 	.word	0x08003381
 8003324:	08003381 	.word	0x08003381
 8003328:	08003381 	.word	0x08003381
 800332c:	08003381 	.word	0x08003381
 8003330:	08003381 	.word	0x08003381
 8003334:	08003381 	.word	0x08003381
 8003338:	08003369 	.word	0x08003369
 800333c:	08003381 	.word	0x08003381
 8003340:	08003381 	.word	0x08003381
 8003344:	08003381 	.word	0x08003381
 8003348:	08003381 	.word	0x08003381
 800334c:	08003381 	.word	0x08003381
 8003350:	08003381 	.word	0x08003381
 8003354:	08003381 	.word	0x08003381
 8003358:	0800335d 	.word	0x0800335d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b06      	cmp	r3, #6
 8003360:	d913      	bls.n	800338a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003366:	e010      	b.n	800338a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	2b07      	cmp	r3, #7
 800336c:	d90f      	bls.n	800338e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003372:	e00c      	b.n	800338e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b0f      	cmp	r3, #15
 8003378:	d90b      	bls.n	8003392 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800337e:	e008      	b.n	8003392 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	75fb      	strb	r3, [r7, #23]
      break;
 8003384:	e006      	b.n	8003394 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003386:	bf00      	nop
 8003388:	e004      	b.n	8003394 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800338a:	bf00      	nop
 800338c:	e002      	b.n	8003394 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800338e:	bf00      	nop
 8003390:	e000      	b.n	8003394 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003392:	bf00      	nop
  }
  if (status == HAL_OK)
 8003394:	7dfb      	ldrb	r3, [r7, #23]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10d      	bne.n	80033b6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 0118 	bic.w	r1, r3, #24
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80033b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033d0:	f7ff f846 	bl	8002460 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d101      	bne.n	80033e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e099      	b.n	8003514 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003400:	e00f      	b.n	8003422 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003402:	f7ff f82d 	bl	8002460 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b05      	cmp	r3, #5
 800340e:	d908      	bls.n	8003422 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2220      	movs	r2, #32
 8003414:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2203      	movs	r2, #3
 800341a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e078      	b.n	8003514 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e8      	bne.n	8003402 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	4b38      	ldr	r3, [pc, #224]	; (800351c <HAL_DMA_Init+0x158>)
 800343c:	4013      	ands	r3, r2
 800343e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800344e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800345a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2b04      	cmp	r3, #4
 800347a:	d107      	bne.n	800348c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003484:	4313      	orrs	r3, r2
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	4313      	orrs	r3, r2
 800348a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f023 0307 	bic.w	r3, r3, #7
 80034a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d117      	bne.n	80034e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4313      	orrs	r3, r2
 80034be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00e      	beq.n	80034e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 faa5 	bl	8003a18 <DMA_CheckFifoParam>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d008      	beq.n	80034e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2240      	movs	r2, #64	; 0x40
 80034d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034e2:	2301      	movs	r3, #1
 80034e4:	e016      	b.n	8003514 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 fa5c 	bl	80039ac <DMA_CalcBaseAndBitshift>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	223f      	movs	r2, #63	; 0x3f
 80034fe:	409a      	lsls	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2201      	movs	r2, #1
 800350e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	e010803f 	.word	0xe010803f

08003520 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
 800352c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003536:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_DMA_Start_IT+0x26>
 8003542:	2302      	movs	r3, #2
 8003544:	e048      	b.n	80035d8 <HAL_DMA_Start_IT+0xb8>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d137      	bne.n	80035ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2202      	movs	r2, #2
 800355e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2200      	movs	r2, #0
 8003566:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f9ee 	bl	8003950 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003578:	223f      	movs	r2, #63	; 0x3f
 800357a:	409a      	lsls	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f042 0216 	orr.w	r2, r2, #22
 800358e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	695a      	ldr	r2, [r3, #20]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800359e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d007      	beq.n	80035b8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0208 	orr.w	r2, r2, #8
 80035b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	e005      	b.n	80035d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035d2:	2302      	movs	r3, #2
 80035d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d004      	beq.n	80035fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2280      	movs	r2, #128	; 0x80
 80035f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e00c      	b.n	8003618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2205      	movs	r2, #5
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b086      	sub	sp, #24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800362c:	2300      	movs	r3, #0
 800362e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003630:	4b8e      	ldr	r3, [pc, #568]	; (800386c <HAL_DMA_IRQHandler+0x248>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a8e      	ldr	r2, [pc, #568]	; (8003870 <HAL_DMA_IRQHandler+0x24c>)
 8003636:	fba2 2303 	umull	r2, r3, r2, r3
 800363a:	0a9b      	lsrs	r3, r3, #10
 800363c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	2208      	movs	r2, #8
 8003650:	409a      	lsls	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	4013      	ands	r3, r2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01a      	beq.n	8003690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	d013      	beq.n	8003690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0204 	bic.w	r2, r2, #4
 8003676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367c:	2208      	movs	r2, #8
 800367e:	409a      	lsls	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003688:	f043 0201 	orr.w	r2, r3, #1
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003694:	2201      	movs	r2, #1
 8003696:	409a      	lsls	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4013      	ands	r3, r2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d012      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	2201      	movs	r2, #1
 80036b4:	409a      	lsls	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036be:	f043 0202 	orr.w	r2, r3, #2
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ca:	2204      	movs	r2, #4
 80036cc:	409a      	lsls	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4013      	ands	r3, r2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e8:	2204      	movs	r2, #4
 80036ea:	409a      	lsls	r2, r3
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f043 0204 	orr.w	r2, r3, #4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003700:	2210      	movs	r2, #16
 8003702:	409a      	lsls	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d043      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d03c      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800371e:	2210      	movs	r2, #16
 8003720:	409a      	lsls	r2, r3
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d018      	beq.n	8003766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d108      	bne.n	8003754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	2b00      	cmp	r3, #0
 8003748:	d024      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	4798      	blx	r3
 8003752:	e01f      	b.n	8003794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003758:	2b00      	cmp	r3, #0
 800375a:	d01b      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
 8003764:	e016      	b.n	8003794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003770:	2b00      	cmp	r3, #0
 8003772:	d107      	bne.n	8003784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0208 	bic.w	r2, r2, #8
 8003782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003798:	2220      	movs	r2, #32
 800379a:	409a      	lsls	r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 808f 	beq.w	80038c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8087 	beq.w	80038c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2220      	movs	r2, #32
 80037bc:	409a      	lsls	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b05      	cmp	r3, #5
 80037cc:	d136      	bne.n	800383c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0216 	bic.w	r2, r2, #22
 80037dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695a      	ldr	r2, [r3, #20]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d103      	bne.n	80037fe <HAL_DMA_IRQHandler+0x1da>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d007      	beq.n	800380e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0208 	bic.w	r2, r2, #8
 800380c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003812:	223f      	movs	r2, #63	; 0x3f
 8003814:	409a      	lsls	r2, r3
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382e:	2b00      	cmp	r3, #0
 8003830:	d07e      	beq.n	8003930 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	4798      	blx	r3
        }
        return;
 800383a:	e079      	b.n	8003930 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d01d      	beq.n	8003886 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10d      	bne.n	8003874 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	2b00      	cmp	r3, #0
 800385e:	d031      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	4798      	blx	r3
 8003868:	e02c      	b.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
 800386a:	bf00      	nop
 800386c:	20000008 	.word	0x20000008
 8003870:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003878:	2b00      	cmp	r3, #0
 800387a:	d023      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
 8003884:	e01e      	b.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10f      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0210 	bic.w	r2, r2, #16
 80038a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d032      	beq.n	8003932 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d0:	f003 0301 	and.w	r3, r3, #1
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d022      	beq.n	800391e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2205      	movs	r2, #5
 80038dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	3301      	adds	r3, #1
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d307      	bcc.n	800390c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f2      	bne.n	80038f0 <HAL_DMA_IRQHandler+0x2cc>
 800390a:	e000      	b.n	800390e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800390c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	2b00      	cmp	r3, #0
 8003924:	d005      	beq.n	8003932 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4798      	blx	r3
 800392e:	e000      	b.n	8003932 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003930:	bf00      	nop
    }
  }
}
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003938:	b480      	push	{r7}
 800393a:	b083      	sub	sp, #12
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003944:	4618      	mov	r0, r3
 8003946:	370c      	adds	r7, #12
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	60b9      	str	r1, [r7, #8]
 800395a:	607a      	str	r2, [r7, #4]
 800395c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800396c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b40      	cmp	r3, #64	; 0x40
 800397c:	d108      	bne.n	8003990 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800398e:	e007      	b.n	80039a0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	60da      	str	r2, [r3, #12]
}
 80039a0:	bf00      	nop
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr

080039ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b085      	sub	sp, #20
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	3b10      	subs	r3, #16
 80039bc:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <DMA_CalcBaseAndBitshift+0x60>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	091b      	lsrs	r3, r3, #4
 80039c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039c6:	4a12      	ldr	r2, [pc, #72]	; (8003a10 <DMA_CalcBaseAndBitshift+0x64>)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4413      	add	r3, r2
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b03      	cmp	r3, #3
 80039d8:	d908      	bls.n	80039ec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <DMA_CalcBaseAndBitshift+0x68>)
 80039e2:	4013      	ands	r3, r2
 80039e4:	1d1a      	adds	r2, r3, #4
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	659a      	str	r2, [r3, #88]	; 0x58
 80039ea:	e006      	b.n	80039fa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	461a      	mov	r2, r3
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <DMA_CalcBaseAndBitshift+0x68>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3714      	adds	r7, #20
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	aaaaaaab 	.word	0xaaaaaaab
 8003a10:	0802e458 	.word	0x0802e458
 8003a14:	fffffc00 	.word	0xfffffc00

08003a18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b085      	sub	sp, #20
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a20:	2300      	movs	r3, #0
 8003a22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d11f      	bne.n	8003a72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2b03      	cmp	r3, #3
 8003a36:	d856      	bhi.n	8003ae6 <DMA_CheckFifoParam+0xce>
 8003a38:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <DMA_CheckFifoParam+0x28>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a51 	.word	0x08003a51
 8003a44:	08003a63 	.word	0x08003a63
 8003a48:	08003a51 	.word	0x08003a51
 8003a4c:	08003ae7 	.word	0x08003ae7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d046      	beq.n	8003aea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a60:	e043      	b.n	8003aea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a6a:	d140      	bne.n	8003aee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a70:	e03d      	b.n	8003aee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a7a:	d121      	bne.n	8003ac0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b03      	cmp	r3, #3
 8003a80:	d837      	bhi.n	8003af2 <DMA_CheckFifoParam+0xda>
 8003a82:	a201      	add	r2, pc, #4	; (adr r2, 8003a88 <DMA_CheckFifoParam+0x70>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003a99 	.word	0x08003a99
 8003a8c:	08003a9f 	.word	0x08003a9f
 8003a90:	08003a99 	.word	0x08003a99
 8003a94:	08003ab1 	.word	0x08003ab1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a9c:	e030      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d025      	beq.n	8003af6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aae:	e022      	b.n	8003af6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ab8:	d11f      	bne.n	8003afa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003abe:	e01c      	b.n	8003afa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d903      	bls.n	8003ace <DMA_CheckFifoParam+0xb6>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d003      	beq.n	8003ad4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003acc:	e018      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      break;
 8003ad2:	e015      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00e      	beq.n	8003afe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae4:	e00b      	b.n	8003afe <DMA_CheckFifoParam+0xe6>
      break;
 8003ae6:	bf00      	nop
 8003ae8:	e00a      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003aea:	bf00      	nop
 8003aec:	e008      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003aee:	bf00      	nop
 8003af0:	e006      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;   
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
    }
  } 
  
  return status; 
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop

08003b10 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e049      	b.n	8003bb6 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d106      	bne.n	8003b3c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7fd fac8 	bl	80010cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b60:	f023 0107 	bic.w	r1, r3, #7
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b76:	4b12      	ldr	r3, [pc, #72]	; (8003bc0 <HAL_DMA2D_Init+0xb0>)
 8003b78:	4013      	ands	r3, r2
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	68d1      	ldr	r1, [r2, #12]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	430b      	orrs	r3, r1
 8003b84:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8c:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	051a      	lsls	r2, r3, #20
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	055b      	lsls	r3, r3, #21
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	ffffc000 	.word	0xffffc000

08003bc4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_DMA2D_ConfigLayer+0x20>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e084      	b.n	8003cee <HAL_DMA2D_ConfigLayer+0x12a>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	00db      	lsls	r3, r3, #3
 8003bfe:	3320      	adds	r3, #32
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	4413      	add	r3, r2
 8003c04:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	041b      	lsls	r3, r3, #16
 8003c10:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003c18:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	695b      	ldr	r3, [r3, #20]
 8003c1e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8003c20:	4313      	orrs	r3, r2
 8003c22:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8003c24:	4b35      	ldr	r3, [pc, #212]	; (8003cfc <HAL_DMA2D_ConfigLayer+0x138>)
 8003c26:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b0a      	cmp	r3, #10
 8003c2e:	d003      	beq.n	8003c38 <HAL_DMA2D_ConfigLayer+0x74>
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	2b09      	cmp	r3, #9
 8003c36:	d107      	bne.n	8003c48 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c40:	697a      	ldr	r2, [r7, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	617b      	str	r3, [r7, #20]
 8003c46:	e005      	b.n	8003c54 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	061b      	lsls	r3, r3, #24
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d120      	bne.n	8003c9c <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	43db      	mvns	r3, r3
 8003c64:	ea02 0103 	and.w	r1, r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b0a      	cmp	r3, #10
 8003c82:	d003      	beq.n	8003c8c <HAL_DMA2D_ConfigLayer+0xc8>
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2b09      	cmp	r3, #9
 8003c8a:	d127      	bne.n	8003cdc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28
 8003c9a:	e01f      	b.n	8003cdc <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	69da      	ldr	r2, [r3, #28]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	ea02 0103 	and.w	r1, r2, r3
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b0a      	cmp	r3, #10
 8003cc4:	d003      	beq.n	8003cce <HAL_DMA2D_ConfigLayer+0x10a>
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b09      	cmp	r3, #9
 8003ccc:	d106      	bne.n	8003cdc <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003cda:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	ff33000f 	.word	0xff33000f

08003d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	; 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	e175      	b.n	800400c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003d20:	2201      	movs	r2, #1
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	f040 8164 	bne.w	8004006 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d005      	beq.n	8003d56 <HAL_GPIO_Init+0x56>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d130      	bne.n	8003db8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2203      	movs	r2, #3
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 0201 	and.w	r2, r3, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d017      	beq.n	8003df4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	2203      	movs	r2, #3
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d123      	bne.n	8003e48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	08da      	lsrs	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3208      	adds	r2, #8
 8003e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	220f      	movs	r2, #15
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	08da      	lsrs	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3208      	adds	r2, #8
 8003e42:	69b9      	ldr	r1, [r7, #24]
 8003e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2203      	movs	r2, #3
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0203 	and.w	r2, r3, #3
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80be 	beq.w	8004006 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8a:	4b66      	ldr	r3, [pc, #408]	; (8004024 <HAL_GPIO_Init+0x324>)
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	4a65      	ldr	r2, [pc, #404]	; (8004024 <HAL_GPIO_Init+0x324>)
 8003e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e94:	6453      	str	r3, [r2, #68]	; 0x44
 8003e96:	4b63      	ldr	r3, [pc, #396]	; (8004024 <HAL_GPIO_Init+0x324>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e9e:	60fb      	str	r3, [r7, #12]
 8003ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ea2:	4a61      	ldr	r2, [pc, #388]	; (8004028 <HAL_GPIO_Init+0x328>)
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	089b      	lsrs	r3, r3, #2
 8003ea8:	3302      	adds	r3, #2
 8003eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	f003 0303 	and.w	r3, r3, #3
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	220f      	movs	r2, #15
 8003eba:	fa02 f303 	lsl.w	r3, r2, r3
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a58      	ldr	r2, [pc, #352]	; (800402c <HAL_GPIO_Init+0x32c>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d037      	beq.n	8003f3e <HAL_GPIO_Init+0x23e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a57      	ldr	r2, [pc, #348]	; (8004030 <HAL_GPIO_Init+0x330>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d031      	beq.n	8003f3a <HAL_GPIO_Init+0x23a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a56      	ldr	r2, [pc, #344]	; (8004034 <HAL_GPIO_Init+0x334>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d02b      	beq.n	8003f36 <HAL_GPIO_Init+0x236>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a55      	ldr	r2, [pc, #340]	; (8004038 <HAL_GPIO_Init+0x338>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d025      	beq.n	8003f32 <HAL_GPIO_Init+0x232>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a54      	ldr	r2, [pc, #336]	; (800403c <HAL_GPIO_Init+0x33c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01f      	beq.n	8003f2e <HAL_GPIO_Init+0x22e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a53      	ldr	r2, [pc, #332]	; (8004040 <HAL_GPIO_Init+0x340>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d019      	beq.n	8003f2a <HAL_GPIO_Init+0x22a>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a52      	ldr	r2, [pc, #328]	; (8004044 <HAL_GPIO_Init+0x344>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <HAL_GPIO_Init+0x226>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a51      	ldr	r2, [pc, #324]	; (8004048 <HAL_GPIO_Init+0x348>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00d      	beq.n	8003f22 <HAL_GPIO_Init+0x222>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a50      	ldr	r2, [pc, #320]	; (800404c <HAL_GPIO_Init+0x34c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d007      	beq.n	8003f1e <HAL_GPIO_Init+0x21e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a4f      	ldr	r2, [pc, #316]	; (8004050 <HAL_GPIO_Init+0x350>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d101      	bne.n	8003f1a <HAL_GPIO_Init+0x21a>
 8003f16:	2309      	movs	r3, #9
 8003f18:	e012      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f1a:	230a      	movs	r3, #10
 8003f1c:	e010      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f1e:	2308      	movs	r3, #8
 8003f20:	e00e      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f22:	2307      	movs	r3, #7
 8003f24:	e00c      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f26:	2306      	movs	r3, #6
 8003f28:	e00a      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f2a:	2305      	movs	r3, #5
 8003f2c:	e008      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f2e:	2304      	movs	r3, #4
 8003f30:	e006      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f32:	2303      	movs	r3, #3
 8003f34:	e004      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f36:	2302      	movs	r3, #2
 8003f38:	e002      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_GPIO_Init+0x240>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	f002 0203 	and.w	r2, r2, #3
 8003f46:	0092      	lsls	r2, r2, #2
 8003f48:	4093      	lsls	r3, r2
 8003f4a:	69ba      	ldr	r2, [r7, #24]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f50:	4935      	ldr	r1, [pc, #212]	; (8004028 <HAL_GPIO_Init+0x328>)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	089b      	lsrs	r3, r3, #2
 8003f56:	3302      	adds	r3, #2
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	; (8004054 <HAL_GPIO_Init+0x354>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	43db      	mvns	r3, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d003      	beq.n	8003f82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f82:	4a34      	ldr	r2, [pc, #208]	; (8004054 <HAL_GPIO_Init+0x354>)
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f88:	4b32      	ldr	r3, [pc, #200]	; (8004054 <HAL_GPIO_Init+0x354>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fac:	4a29      	ldr	r2, [pc, #164]	; (8004054 <HAL_GPIO_Init+0x354>)
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fb2:	4b28      	ldr	r3, [pc, #160]	; (8004054 <HAL_GPIO_Init+0x354>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fd6:	4a1f      	ldr	r2, [pc, #124]	; (8004054 <HAL_GPIO_Init+0x354>)
 8003fd8:	69bb      	ldr	r3, [r7, #24]
 8003fda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fdc:	4b1d      	ldr	r3, [pc, #116]	; (8004054 <HAL_GPIO_Init+0x354>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004000:	4a14      	ldr	r2, [pc, #80]	; (8004054 <HAL_GPIO_Init+0x354>)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	3301      	adds	r3, #1
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	2b0f      	cmp	r3, #15
 8004010:	f67f ae86 	bls.w	8003d20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	3724      	adds	r7, #36	; 0x24
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800
 8004028:	40013800 	.word	0x40013800
 800402c:	40020000 	.word	0x40020000
 8004030:	40020400 	.word	0x40020400
 8004034:	40020800 	.word	0x40020800
 8004038:	40020c00 	.word	0x40020c00
 800403c:	40021000 	.word	0x40021000
 8004040:	40021400 	.word	0x40021400
 8004044:	40021800 	.word	0x40021800
 8004048:	40021c00 	.word	0x40021c00
 800404c:	40022000 	.word	0x40022000
 8004050:	40022400 	.word	0x40022400
 8004054:	40013c00 	.word	0x40013c00

08004058 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8004062:	2300      	movs	r3, #0
 8004064:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 800406a:	2300      	movs	r3, #0
 800406c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	e0d9      	b.n	8004228 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004074:	2201      	movs	r2, #1
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	fa02 f303 	lsl.w	r3, r2, r3
 800407c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800407e:	683a      	ldr	r2, [r7, #0]
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4013      	ands	r3, r2
 8004084:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	429a      	cmp	r2, r3
 800408c:	f040 80c9 	bne.w	8004222 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8004090:	4a6b      	ldr	r2, [pc, #428]	; (8004240 <HAL_GPIO_DeInit+0x1e8>)
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	3302      	adds	r3, #2
 8004098:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409c:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f003 0303 	and.w	r3, r3, #3
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	220f      	movs	r2, #15
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	68ba      	ldr	r2, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a63      	ldr	r2, [pc, #396]	; (8004244 <HAL_GPIO_DeInit+0x1ec>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d037      	beq.n	800412a <HAL_GPIO_DeInit+0xd2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a62      	ldr	r2, [pc, #392]	; (8004248 <HAL_GPIO_DeInit+0x1f0>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d031      	beq.n	8004126 <HAL_GPIO_DeInit+0xce>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a61      	ldr	r2, [pc, #388]	; (800424c <HAL_GPIO_DeInit+0x1f4>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d02b      	beq.n	8004122 <HAL_GPIO_DeInit+0xca>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a60      	ldr	r2, [pc, #384]	; (8004250 <HAL_GPIO_DeInit+0x1f8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d025      	beq.n	800411e <HAL_GPIO_DeInit+0xc6>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a5f      	ldr	r2, [pc, #380]	; (8004254 <HAL_GPIO_DeInit+0x1fc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d01f      	beq.n	800411a <HAL_GPIO_DeInit+0xc2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a5e      	ldr	r2, [pc, #376]	; (8004258 <HAL_GPIO_DeInit+0x200>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d019      	beq.n	8004116 <HAL_GPIO_DeInit+0xbe>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a5d      	ldr	r2, [pc, #372]	; (800425c <HAL_GPIO_DeInit+0x204>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d013      	beq.n	8004112 <HAL_GPIO_DeInit+0xba>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a5c      	ldr	r2, [pc, #368]	; (8004260 <HAL_GPIO_DeInit+0x208>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00d      	beq.n	800410e <HAL_GPIO_DeInit+0xb6>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a5b      	ldr	r2, [pc, #364]	; (8004264 <HAL_GPIO_DeInit+0x20c>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d007      	beq.n	800410a <HAL_GPIO_DeInit+0xb2>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a5a      	ldr	r2, [pc, #360]	; (8004268 <HAL_GPIO_DeInit+0x210>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d101      	bne.n	8004106 <HAL_GPIO_DeInit+0xae>
 8004102:	2309      	movs	r3, #9
 8004104:	e012      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004106:	230a      	movs	r3, #10
 8004108:	e010      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800410a:	2308      	movs	r3, #8
 800410c:	e00e      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800410e:	2307      	movs	r3, #7
 8004110:	e00c      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004112:	2306      	movs	r3, #6
 8004114:	e00a      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004116:	2305      	movs	r3, #5
 8004118:	e008      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800411a:	2304      	movs	r3, #4
 800411c:	e006      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800411e:	2303      	movs	r3, #3
 8004120:	e004      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004122:	2302      	movs	r3, #2
 8004124:	e002      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 8004126:	2301      	movs	r3, #1
 8004128:	e000      	b.n	800412c <HAL_GPIO_DeInit+0xd4>
 800412a:	2300      	movs	r3, #0
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	f002 0203 	and.w	r2, r2, #3
 8004132:	0092      	lsls	r2, r2, #2
 8004134:	4093      	lsls	r3, r2
 8004136:	68ba      	ldr	r2, [r7, #8]
 8004138:	429a      	cmp	r2, r3
 800413a:	d132      	bne.n	80041a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800413c:	4b4b      	ldr	r3, [pc, #300]	; (800426c <HAL_GPIO_DeInit+0x214>)
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	43db      	mvns	r3, r3
 8004144:	4949      	ldr	r1, [pc, #292]	; (800426c <HAL_GPIO_DeInit+0x214>)
 8004146:	4013      	ands	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800414a:	4b48      	ldr	r3, [pc, #288]	; (800426c <HAL_GPIO_DeInit+0x214>)
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	43db      	mvns	r3, r3
 8004152:	4946      	ldr	r1, [pc, #280]	; (800426c <HAL_GPIO_DeInit+0x214>)
 8004154:	4013      	ands	r3, r2
 8004156:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004158:	4b44      	ldr	r3, [pc, #272]	; (800426c <HAL_GPIO_DeInit+0x214>)
 800415a:	68da      	ldr	r2, [r3, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43db      	mvns	r3, r3
 8004160:	4942      	ldr	r1, [pc, #264]	; (800426c <HAL_GPIO_DeInit+0x214>)
 8004162:	4013      	ands	r3, r2
 8004164:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004166:	4b41      	ldr	r3, [pc, #260]	; (800426c <HAL_GPIO_DeInit+0x214>)
 8004168:	689a      	ldr	r2, [r3, #8]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	43db      	mvns	r3, r3
 800416e:	493f      	ldr	r1, [pc, #252]	; (800426c <HAL_GPIO_DeInit+0x214>)
 8004170:	4013      	ands	r3, r2
 8004172:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	f003 0303 	and.w	r3, r3, #3
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	220f      	movs	r2, #15
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8004184:	4a2e      	ldr	r2, [pc, #184]	; (8004240 <HAL_GPIO_DeInit+0x1e8>)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	089b      	lsrs	r3, r3, #2
 800418a:	3302      	adds	r3, #2
 800418c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	43da      	mvns	r2, r3
 8004194:	482a      	ldr	r0, [pc, #168]	; (8004240 <HAL_GPIO_DeInit+0x1e8>)
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	089b      	lsrs	r3, r3, #2
 800419a:	400a      	ands	r2, r1
 800419c:	3302      	adds	r3, #2
 800419e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	2103      	movs	r1, #3
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	401a      	ands	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	08da      	lsrs	r2, r3, #3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3208      	adds	r2, #8
 80041c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	220f      	movs	r2, #15
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	08d2      	lsrs	r2, r2, #3
 80041d8:	4019      	ands	r1, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	3208      	adds	r2, #8
 80041de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68da      	ldr	r2, [r3, #12]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	005b      	lsls	r3, r3, #1
 80041ea:	2103      	movs	r1, #3
 80041ec:	fa01 f303 	lsl.w	r3, r1, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	401a      	ands	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	685a      	ldr	r2, [r3, #4]
 80041fc:	2101      	movs	r1, #1
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	fa01 f303 	lsl.w	r3, r1, r3
 8004204:	43db      	mvns	r3, r3
 8004206:	401a      	ands	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	2103      	movs	r1, #3
 8004216:	fa01 f303 	lsl.w	r3, r1, r3
 800421a:	43db      	mvns	r3, r3
 800421c:	401a      	ands	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3301      	adds	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	f67f af22 	bls.w	8004074 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	371c      	adds	r7, #28
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40013800 	.word	0x40013800
 8004244:	40020000 	.word	0x40020000
 8004248:	40020400 	.word	0x40020400
 800424c:	40020800 	.word	0x40020800
 8004250:	40020c00 	.word	0x40020c00
 8004254:	40021000 	.word	0x40021000
 8004258:	40021400 	.word	0x40021400
 800425c:	40021800 	.word	0x40021800
 8004260:	40021c00 	.word	0x40021c00
 8004264:	40022000 	.word	0x40022000
 8004268:	40022400 	.word	0x40022400
 800426c:	40013c00 	.word	0x40013c00

08004270 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d101      	bne.n	8004282 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e078      	b.n	8004374 <HAL_JPEG_Init+0x104>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d106      	bne.n	800429c <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f7fd f958 	bl	800154c <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2202      	movs	r2, #2
 80042a0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0201 	bic.w	r2, r2, #1
 80042c2:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80042d2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80042e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042f2:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004302:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004312:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a19      	ldr	r2, [pc, #100]	; (800437c <HAL_JPEG_Init+0x10c>)
 8004318:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	4a18      	ldr	r2, [pc, #96]	; (8004380 <HAL_JPEG_Init+0x110>)
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fd0b 	bl	8004d48 <JPEG_Set_HuffEnc_Mem>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <HAL_JPEG_Init+0xd2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e018      	b.n	8004374 <HAL_JPEG_Init+0x104>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004350:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2201      	movs	r2, #1
 8004362:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3708      	adds	r7, #8
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}
 800437c:	0802e600 	.word	0x0802e600
 8004380:	0802e640 	.word	0x0802e640

08004384 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d005      	beq.n	80043a4 <HAL_JPEG_Decode_DMA+0x20>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_JPEG_Decode_DMA+0x20>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e04c      	b.n	8004442 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_JPEG_Decode_DMA+0x32>
 80043b2:	2302      	movs	r3, #2
 80043b4:	e045      	b.n	8004442 <HAL_JPEG_Decode_DMA+0xbe>
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	2b01      	cmp	r3, #1
 80043c8:	d134      	bne.n	8004434 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2204      	movs	r2, #4
 80043ce:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d6:	f023 020f 	bic.w	r2, r3, #15
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	f043 020e 	orr.w	r2, r3, #14
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2200      	movs	r2, #0
 800440c:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 ff1c 	bl	800524c <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 ff95 	bl	8005344 <JPEG_DMA_StartProcess>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d00f      	beq.n	8004440 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2206      	movs	r2, #6
 8004424:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e006      	b.n	8004442 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 800443c:	2302      	movs	r3, #2
 800443e:	e000      	b.n	8004442 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 800444a:	b480      	push	{r7}
 800444c:	b085      	sub	sp, #20
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445c:	f003 030c 	and.w	r3, r3, #12
 8004460:	2b0c      	cmp	r3, #12
 8004462:	d129      	bne.n	80044b8 <HAL_JPEG_Pause+0x6e>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_JPEG_Pause+0x38>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004472:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004480:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d009      	beq.n	80044a0 <HAL_JPEG_Pause+0x56>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800449e:	60fb      	str	r3, [r7, #12]
    }
    JPEG_DISABLE_DMA(hjpeg, mask);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80044ac:	43da      	mvns	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	400a      	ands	r2, r1
 80044b4:	631a      	str	r2, [r3, #48]	; 0x30
 80044b6:	e02c      	b.n	8004512 <HAL_JPEG_Pause+0xc8>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d126      	bne.n	8004512 <HAL_JPEG_Pause+0xc8>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_JPEG_Pause+0x98>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f043 0306 	orr.w	r3, r3, #6
 80044e0:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d009      	beq.n	8004500 <HAL_JPEG_Pause+0xb6>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80044fe:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	43da      	mvns	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	400a      	ands	r2, r1
 8004510:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 800452a:	2300      	movs	r3, #0
 800452c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004532:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d101      	bne.n	800453e <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0a9      	b.n	8004692 <HAL_JPEG_Resume+0x172>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b0c      	cmp	r3, #12
 8004548:	d176      	bne.n	8004638 <HAL_JPEG_Resume+0x118>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	2b00      	cmp	r3, #0
 8004552:	d030      	beq.n	80045b6 <HAL_JPEG_Resume+0x96>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004558:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004566:	60fb      	str	r3, [r7, #12]

      /*JPEG Input DMA transfer data number must be multiple of DMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456c:	f023 0203 	bic.w	r2, r3, #3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	629a      	str	r2, [r3, #40]	; 0x28

      if (hjpeg->InDataLength > 0UL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01c      	beq.n	80045b6 <HAL_JPEG_Resume+0x96>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	4619      	mov	r1, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3340      	adds	r3, #64	; 0x40
 800458c:	461a      	mov	r2, r3
                             hjpeg->InDataLength >> 2) != HAL_OK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	f7fe ffc4 	bl	8003520 <HAL_DMA_Start_IT>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00b      	beq.n	80045b6 <HAL_JPEG_Resume+0x96>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045a2:	f043 0204 	orr.w	r2, r3, #4
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2206      	movs	r2, #6
 80045ae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e06d      	b.n	8004692 <HAL_JPEG_Resume+0x172>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d030      	beq.n	8004622 <HAL_JPEG_Resume+0x102>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_JPEG_Resume+0xc0>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 ffa3 	bl	8005524 <JPEG_DMA_PollResidualData>
 80045de:	e020      	b.n	8004622 <HAL_JPEG_Resume+0x102>
      }
      else
      {
        mask |= JPEG_DMA_ODMA;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045e6:	60fb      	str	r3, [r7, #12]

        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3344      	adds	r3, #68	; 0x44
 80045f2:	4619      	mov	r1, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	f7fe ff8e 	bl	8003520 <HAL_DMA_Start_IT>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <HAL_JPEG_Resume+0x102>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800460e:	f043 0204 	orr.w	r2, r3, #4
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2206      	movs	r2, #6
 800461a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e037      	b.n	8004692 <HAL_JPEG_Resume+0x172>
        }
      }

    }
    JPEG_ENABLE_DMA(hjpeg, mask);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
 8004636:	e02b      	b.n	8004690 <HAL_JPEG_Resume+0x170>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463c:	f003 030c 	and.w	r3, r3, #12
 8004640:	2b08      	cmp	r3, #8
 8004642:	d125      	bne.n	8004690 <HAL_JPEG_Resume+0x170>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_JPEG_Resume+0x142>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f043 0306 	orr.w	r3, r3, #6
 8004660:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d009      	beq.n	8004680 <HAL_JPEG_Resume+0x160>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004670:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800467e:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68fa      	ldr	r2, [r7, #12]
 800468c:	430a      	orrs	r2, r1
 800468e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3710      	adds	r7, #16
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 800469a:	b480      	push	{r7}
 800469c:	b085      	sub	sp, #20
 800469e:	af00      	add	r7, sp, #0
 80046a0:	60f8      	str	r0, [r7, #12]
 80046a2:	60b9      	str	r1, [r7, #8]
 80046a4:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 80046be:	b480      	push	{r7}
 80046c0:	b085      	sub	sp, #20
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80046d6:	bf00      	nop
 80046d8:	3714      	adds	r7, #20
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 80046ea:	bf00      	nop
 80046ec:	370c      	adds	r7, #12
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr

080046f6 <HAL_JPEG_GetState>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG state
  */
HAL_JPEG_STATETypeDef HAL_JPEG_GetState(JPEG_HandleTypeDef *hjpeg)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  return hjpeg->State;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004704:	b2db      	uxtb	r3, r3
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_JPEG_GetError>:
  * @param  hjpeg  pointer to a JPEG_HandleTypeDef structure that contains
  *              the configuration information for the specified JPEG.
  * @retval JPEG Error Code
  */
uint32_t HAL_JPEG_GetError(JPEG_HandleTypeDef *hjpeg)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  return hjpeg->ErrorCode;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 800472a:	b480      	push	{r7}
 800472c:	b08b      	sub	sp, #44	; 0x2c
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8004738:	2300      	movs	r3, #0
 800473a:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 800473c:	2300      	movs	r3, #0
 800473e:	61fb      	str	r3, [r7, #28]
 8004740:	e020      	b.n	8004784 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	4413      	add	r3, r2
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 800474c:	6a3a      	ldr	r2, [r7, #32]
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	4413      	add	r3, r2
 8004752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004756:	d90f      	bls.n	8004778 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e055      	b.n	8004808 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	b2da      	uxtb	r2, r3
 8004760:	68b9      	ldr	r1, [r7, #8]
 8004762:	6a3b      	ldr	r3, [r7, #32]
 8004764:	440b      	add	r3, r1
 8004766:	3201      	adds	r2, #1
 8004768:	b2d2      	uxtb	r2, r2
 800476a:	701a      	strb	r2, [r3, #0]
      p++;
 800476c:	6a3b      	ldr	r3, [r7, #32]
 800476e:	3301      	adds	r3, #1
 8004770:	623b      	str	r3, [r7, #32]
      i--;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	3b01      	subs	r3, #1
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1ee      	bne.n	800475c <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3301      	adds	r3, #1
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b0f      	cmp	r3, #15
 8004788:	d9db      	bls.n	8004742 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	6a3b      	ldr	r3, [r7, #32]
 800478e:	4413      	add	r3, r2
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	6a3a      	ldr	r2, [r7, #32]
 8004798:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	617b      	str	r3, [r7, #20]
  p = 0;
 80047a4:	2300      	movs	r3, #0
 80047a6:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 80047a8:	e027      	b.n	80047fa <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	69ba      	ldr	r2, [r7, #24]
 80047b4:	601a      	str	r2, [r3, #0]
      p++;
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	3301      	adds	r3, #1
 80047ba:	623b      	str	r3, [r7, #32]
      code++;
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	3301      	adds	r3, #1
 80047c0:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 80047c2:	68ba      	ldr	r2, [r7, #8]
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	4413      	add	r3, r2
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d0eb      	beq.n	80047aa <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	2b1f      	cmp	r3, #31
 80047d6:	d901      	bls.n	80047dc <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e015      	b.n	8004808 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80047dc:	2201      	movs	r2, #1
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d301      	bcc.n	80047ee <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e00c      	b.n	8004808 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	61bb      	str	r3, [r7, #24]
    si++;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	3301      	adds	r3, #1
 80047f8:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	4413      	add	r3, r2
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d1dd      	bne.n	80047c2 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	372c      	adds	r7, #44	; 0x2c
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800481a:	af00      	add	r7, sp, #0
 800481c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004820:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8004824:	6018      	str	r0, [r3, #0]
 8004826:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800482a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800482e:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004830:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004834:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	f107 0308 	add.w	r3, r7, #8
 800483e:	f107 020c 	add.w	r2, r7, #12
 8004842:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 8004846:	f7ff ff70 	bl	800472a <JPEG_Bits_To_SizeCodes>
 800484a:	4603      	mov	r3, r0
 800484c:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 8004850:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8004854:	2b00      	cmp	r3, #0
 8004856:	d002      	beq.n	800485e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8004858:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800485c:	e075      	b.n	800494a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 800485e:	2300      	movs	r3, #0
 8004860:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 8004864:	e067      	b.n	8004936 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 8004866:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800486a:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004874:	4413      	add	r3, r2
 8004876:	3310      	adds	r3, #16
 8004878:	781b      	ldrb	r3, [r3, #0]
 800487a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 800487e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 8004886:	23a0      	movs	r3, #160	; 0xa0
 8004888:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800488c:	e021      	b.n	80048d2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 800488e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004892:	2bf0      	cmp	r3, #240	; 0xf0
 8004894:	d103      	bne.n	800489e <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 8004896:	23a1      	movs	r3, #161	; 0xa1
 8004898:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800489c:	e019      	b.n	80048d2 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 800489e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80048a2:	091b      	lsrs	r3, r3, #4
 80048a4:	f003 030f 	and.w	r3, r3, #15
 80048a8:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 80048ac:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80048b0:	f003 030f 	and.w	r3, r3, #15
 80048b4:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 80048b8:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 80048bc:	4613      	mov	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	461a      	mov	r2, r3
 80048c6:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80048ca:	4413      	add	r3, r2
 80048cc:	3b01      	subs	r3, #1
 80048ce:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80048d2:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80048d6:	2ba1      	cmp	r3, #161	; 0xa1
 80048d8:	d901      	bls.n	80048de <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80048da:	2301      	movs	r3, #1
 80048dc:	e035      	b.n	800494a <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80048de:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80048e2:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80048e6:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80048ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048ee:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80048f2:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 80048f6:	6819      	ldr	r1, [r3, #0]
 80048f8:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80048fc:	3328      	adds	r3, #40	; 0x28
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	440b      	add	r3, r1
 8004902:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8004904:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8004908:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800490c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004910:	4413      	add	r3, r2
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	3b01      	subs	r3, #1
 8004916:	b2d9      	uxtb	r1, r3
 8004918:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800491c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8004926:	4413      	add	r3, r2
 8004928:	460a      	mov	r2, r1
 800492a:	701a      	strb	r2, [r3, #0]
      k++;
 800492c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8004930:	3301      	adds	r3, #1
 8004932:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8004936:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800493a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8004944:	429a      	cmp	r2, r3
 8004946:	d38e      	bcc.n	8004866 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004948:	2300      	movs	r3, #0
}
 800494a:	4618      	mov	r0, r3
 800494c:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 800495a:	af00      	add	r7, sp, #0
 800495c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004960:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8004964:	6018      	str	r0, [r3, #0]
 8004966:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800496a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800496e:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8004970:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004974:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800497e:	f107 0208 	add.w	r2, r7, #8
 8004982:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 8004986:	f7ff fed0 	bl	800472a <JPEG_Bits_To_SizeCodes>
 800498a:	4603      	mov	r3, r0
 800498c:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 8004990:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 8004998:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 800499c:	e048      	b.n	8004a30 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 800499e:	2300      	movs	r3, #0
 80049a0:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 80049a4:	e03d      	b.n	8004a22 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 80049a6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80049aa:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80049b4:	4413      	add	r3, r2
 80049b6:	3310      	adds	r3, #16
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 80049be:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80049c2:	2b0b      	cmp	r3, #11
 80049c4:	d901      	bls.n	80049ca <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 80049c6:	2301      	movs	r3, #1
 80049c8:	e032      	b.n	8004a30 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80049ca:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80049ce:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 80049d2:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 80049d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049da:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80049de:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 80049e8:	3302      	adds	r3, #2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80049f0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80049f4:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 80049f8:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80049fc:	4413      	add	r3, r2
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b2d9      	uxtb	r1, r3
 8004a04:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8004a08:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8004a12:	4413      	add	r3, r2
 8004a14:	460a      	mov	r2, r1
 8004a16:	701a      	strb	r2, [r3, #0]
      k++;
 8004a18:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8004a22:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8004a26:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d3bb      	bcc.n	80049a6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b09a      	sub	sp, #104	; 0x68
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d106      	bne.n	8004a62 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004a60:	e00f      	b.n	8004a82 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d106      	bne.n	8004a7e <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 8004a78:	3318      	adds	r3, #24
 8004a7a:	663b      	str	r3, [r7, #96]	; 0x60
 8004a7c:	e001      	b.n	8004a82 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e059      	b.n	8004b36 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d055      	beq.n	8004b34 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8004a88:	f107 0314 	add.w	r3, r7, #20
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	68b8      	ldr	r0, [r7, #8]
 8004a90:	f7ff ff60 	bl	8004954 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 8004a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8004aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004aa6:	e046      	b.n	8004b36 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8004aa8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aaa:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004aac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aae:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004ab2:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004ab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 8004aba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004abc:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004ac0:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8004ac6:	e032      	b.n	8004b2e <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8004ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004aca:	3b01      	subs	r3, #1
 8004acc:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 8004ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ad0:	3b04      	subs	r3, #4
 8004ad2:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004ad4:	f107 0214 	add.w	r2, r7, #20
 8004ad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ada:	4413      	add	r3, r2
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	021b      	lsls	r3, r3, #8
 8004ae0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	3368      	adds	r3, #104	; 0x68
 8004aec:	443b      	add	r3, r7
 8004aee:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	4313      	orrs	r3, r2
 8004af6:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8004af8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004afa:	3b01      	subs	r3, #1
 8004afc:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8004afe:	f107 0214 	add.w	r2, r7, #20
 8004b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b04:	4413      	add	r3, r2
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	021b      	lsls	r3, r3, #8
 8004b0a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004b0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b10:	3302      	adds	r3, #2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	3368      	adds	r3, #104	; 0x68
 8004b16:	443b      	add	r3, r7
 8004b18:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b24:	041a      	lsls	r2, r3, #16
 8004b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b2c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004b2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d8c9      	bhi.n	8004ac8 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3768      	adds	r7, #104	; 0x68
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
	...

08004b40 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004b4c:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004b50:	6018      	str	r0, [r3, #0]
 8004b52:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004b56:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8004b5a:	6019      	str	r1, [r3, #0]
 8004b5c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004b60:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 8004b64:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8004b66:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004b6a:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b76:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004b7a:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d10c      	bne.n	8004b9e <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004b84:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004b88:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004b98:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004b9c:	e01d      	b.n	8004bda <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 8004b9e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004ba2:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004bae:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004bb2:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8004bb6:	6812      	ldr	r2, [r2, #0]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d10c      	bne.n	8004bd6 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8004bbc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004bc0:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 8004bcc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8004bd0:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8004bd4:	e001      	b.n	8004bda <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0a8      	b.n	8004d2c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 8004bda:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004bde:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80a0 	beq.w	8004d2a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 8004bea:	f107 0214 	add.w	r2, r7, #20
 8004bee:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004bf2:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	6818      	ldr	r0, [r3, #0]
 8004bfa:	f7ff fe0b 	bl	8004814 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8004c04:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d002      	beq.n	8004c12 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 8004c0c:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8004c10:	e08c      	b.n	8004d2c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8004c12:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004c16:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004c20:	e00e      	b.n	8004c40 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8004c22:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c26:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8004c2a:	601a      	str	r2, [r3, #0]
      addressDef++;
 8004c2c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c30:	3304      	adds	r3, #4
 8004c32:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8004c36:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8004c40:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d9ec      	bls.n	8004c22 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 8004c48:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c4c:	4a3a      	ldr	r2, [pc, #232]	; (8004d38 <JPEG_Set_HuffAC_Mem+0x1f8>)
 8004c4e:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c50:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c54:	3304      	adds	r3, #4
 8004c56:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 8004c5a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c5e:	4a37      	ldr	r2, [pc, #220]	; (8004d3c <JPEG_Set_HuffAC_Mem+0x1fc>)
 8004c60:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c62:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c66:	3304      	adds	r3, #4
 8004c68:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 8004c6c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c70:	4a33      	ldr	r2, [pc, #204]	; (8004d40 <JPEG_Set_HuffAC_Mem+0x200>)
 8004c72:	601a      	str	r2, [r3, #0]
    addressDef++;
 8004c74:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c78:	3304      	adds	r3, #4
 8004c7a:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 8004c7e:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8004c82:	4a30      	ldr	r2, [pc, #192]	; (8004d44 <JPEG_Set_HuffAC_Mem+0x204>)
 8004c84:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 8004c86:	23a2      	movs	r3, #162	; 0xa2
 8004c88:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 8004c8c:	e049      	b.n	8004d22 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 8004c8e:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004c92:	3b01      	subs	r3, #1
 8004c94:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 8004c98:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004c9c:	3b04      	subs	r3, #4
 8004c9e:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004ca2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004ca6:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8004caa:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cae:	4413      	add	r3, r2
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004cb8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004cbc:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8004cc0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cc4:	3328      	adds	r3, #40	; 0x28
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8004cd4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8004cde:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004ce2:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8004ce6:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004cea:	4413      	add	r3, r2
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	021b      	lsls	r3, r3, #8
 8004cf0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004cf4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004cf8:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8004cfc:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004d00:	3328      	adds	r3, #40	; 0x28
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8004d10:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8004d14:	041a      	lsls	r2, r3, #16
 8004d16:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 8004d1a:	431a      	orrs	r2, r3
 8004d1c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8004d20:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8004d22:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d8b1      	bhi.n	8004c8e <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	0fd10fd0 	.word	0x0fd10fd0
 8004d3c:	0fd30fd2 	.word	0x0fd30fd2
 8004d40:	0fd50fd4 	.word	0x0fd50fd4
 8004d44:	0fd70fd6 	.word	0x0fd70fd6

08004d48 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f84d 	bl	8004df0 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8004d5e:	461a      	mov	r2, r3
 8004d60:	491f      	ldr	r1, [pc, #124]	; (8004de0 <JPEG_Set_HuffEnc_Mem+0x98>)
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f7ff feec 	bl	8004b40 <JPEG_Set_HuffAC_Mem>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	e030      	b.n	8004dd8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4918      	ldr	r1, [pc, #96]	; (8004de4 <JPEG_Set_HuffEnc_Mem+0x9c>)
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f7ff fedc 	bl	8004b40 <JPEG_Set_HuffAC_Mem>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004d8c:	7bfb      	ldrb	r3, [r7, #15]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d001      	beq.n	8004d96 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	e020      	b.n	8004dd8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8004d9e:	461a      	mov	r2, r3
 8004da0:	4911      	ldr	r1, [pc, #68]	; (8004de8 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7ff fe49 	bl	8004a3a <JPEG_Set_HuffDC_Mem>
 8004da8:	4603      	mov	r3, r0
 8004daa:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004dac:	7bfb      	ldrb	r3, [r7, #15]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8004db2:	7bfb      	ldrb	r3, [r7, #15]
 8004db4:	e010      	b.n	8004dd8 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	490a      	ldr	r1, [pc, #40]	; (8004dec <JPEG_Set_HuffEnc_Mem+0xa4>)
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7ff fe39 	bl	8004a3a <JPEG_Set_HuffDC_Mem>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	e000      	b.n	8004dd8 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	0802e498 	.word	0x0802e498
 8004de4:	0802e54c 	.word	0x0802e54c
 8004de8:	0802e460 	.word	0x0802e460
 8004dec:	0802e47c 	.word	0x0802e47c

08004df0 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b08b      	sub	sp, #44	; 0x2c
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8004df8:	4b80      	ldr	r3, [pc, #512]	; (8004ffc <JPEG_Set_Huff_DHTMem+0x20c>)
 8004dfa:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 8004dfc:	4b80      	ldr	r3, [pc, #512]	; (8005000 <JPEG_Set_Huff_DHTMem+0x210>)
 8004dfe:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8004e00:	4b80      	ldr	r3, [pc, #512]	; (8005004 <JPEG_Set_Huff_DHTMem+0x214>)
 8004e02:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8004e04:	4b80      	ldr	r3, [pc, #512]	; (8005008 <JPEG_Set_Huff_DHTMem+0x218>)
 8004e06:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004e10:	330c      	adds	r3, #12
 8004e12:	623b      	str	r3, [r7, #32]
  index = 16;
 8004e14:	2310      	movs	r3, #16
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e18:	e01d      	b.n	8004e56 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	5cd3      	ldrb	r3, [r2, r3]
 8004e22:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	3b02      	subs	r3, #2
 8004e28:	6979      	ldr	r1, [r7, #20]
 8004e2a:	5ccb      	ldrb	r3, [r1, r3]
 8004e2c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004e2e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e32:	3b03      	subs	r3, #3
 8004e34:	6979      	ldr	r1, [r7, #20]
 8004e36:	5ccb      	ldrb	r3, [r1, r3]
 8004e38:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004e3a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8004e3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e3e:	3a04      	subs	r2, #4
 8004e40:	6979      	ldr	r1, [r7, #20]
 8004e42:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004e44:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	601a      	str	r2, [r3, #0]
    address--;
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	3b04      	subs	r3, #4
 8004e4e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	3b04      	subs	r3, #4
 8004e54:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d8de      	bhi.n	8004e1a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004e64:	3318      	adds	r3, #24
 8004e66:	623b      	str	r3, [r7, #32]
  index = 12;
 8004e68:	230c      	movs	r3, #12
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004e6c:	e021      	b.n	8004eb2 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e70:	3b01      	subs	r3, #1
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	4413      	add	r3, r2
 8004e76:	7c1b      	ldrb	r3, [r3, #16]
 8004e78:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	3b02      	subs	r3, #2
 8004e7e:	6979      	ldr	r1, [r7, #20]
 8004e80:	440b      	add	r3, r1
 8004e82:	7c1b      	ldrb	r3, [r3, #16]
 8004e84:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004e86:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e8a:	3b03      	subs	r3, #3
 8004e8c:	6979      	ldr	r1, [r7, #20]
 8004e8e:	440b      	add	r3, r1
 8004e90:	7c1b      	ldrb	r3, [r3, #16]
 8004e92:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004e94:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 8004e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e98:	3a04      	subs	r2, #4
 8004e9a:	6979      	ldr	r1, [r7, #20]
 8004e9c:	440a      	add	r2, r1
 8004e9e:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004ea0:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	601a      	str	r2, [r3, #0]
    address--;
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	3b04      	subs	r3, #4
 8004eaa:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3b04      	subs	r3, #4
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb4:	2b03      	cmp	r3, #3
 8004eb6:	d8da      	bhi.n	8004e6e <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004ec0:	3328      	adds	r3, #40	; 0x28
 8004ec2:	623b      	str	r3, [r7, #32]
  index = 16;
 8004ec4:	2310      	movs	r3, #16
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ec8:	e01d      	b.n	8004f06 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	5cd3      	ldrb	r3, [r2, r3]
 8004ed2:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed6:	3b02      	subs	r3, #2
 8004ed8:	69f9      	ldr	r1, [r7, #28]
 8004eda:	5ccb      	ldrb	r3, [r1, r3]
 8004edc:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004ede:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	3b03      	subs	r3, #3
 8004ee4:	69f9      	ldr	r1, [r7, #28]
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8004eea:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8004eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eee:	3a04      	subs	r2, #4
 8004ef0:	69f9      	ldr	r1, [r7, #28]
 8004ef2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8004ef4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	601a      	str	r2, [r3, #0]
    address--;
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	3b04      	subs	r3, #4
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b03      	cmp	r3, #3
 8004f0a:	d8de      	bhi.n	8004eca <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f14:	33cc      	adds	r3, #204	; 0xcc
 8004f16:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	4b3b      	ldr	r3, [pc, #236]	; (800500c <JPEG_Set_Huff_DHTMem+0x21c>)
 8004f1e:	4013      	ands	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8004f28:	021a      	lsls	r2, r3, #8
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	69fa      	ldr	r2, [r7, #28]
 8004f30:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8004f34:	4313      	orrs	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	3b04      	subs	r3, #4
 8004f42:	623b      	str	r3, [r7, #32]
  index = 160;
 8004f44:	23a0      	movs	r3, #160	; 0xa0
 8004f46:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004f48:	e021      	b.n	8004f8e <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	69fa      	ldr	r2, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	7c1b      	ldrb	r3, [r3, #16]
 8004f54:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f58:	3b02      	subs	r3, #2
 8004f5a:	69f9      	ldr	r1, [r7, #28]
 8004f5c:	440b      	add	r3, r1
 8004f5e:	7c1b      	ldrb	r3, [r3, #16]
 8004f60:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f62:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f66:	3b03      	subs	r3, #3
 8004f68:	69f9      	ldr	r1, [r7, #28]
 8004f6a:	440b      	add	r3, r1
 8004f6c:	7c1b      	ldrb	r3, [r3, #16]
 8004f6e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8004f70:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8004f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f74:	3a04      	subs	r2, #4
 8004f76:	69f9      	ldr	r1, [r7, #28]
 8004f78:	440a      	add	r2, r1
 8004f7a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8004f7c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	601a      	str	r2, [r3, #0]
    address--;
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	3b04      	subs	r3, #4
 8004f86:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	3b04      	subs	r3, #4
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d8da      	bhi.n	8004f4a <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004f9c:	33cc      	adds	r3, #204	; 0xcc
 8004f9e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	785b      	ldrb	r3, [r3, #1]
 8004fac:	061a      	lsls	r2, r3, #24
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	431a      	orrs	r2, r3
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	781b      	ldrb	r3, [r3, #0]
 8004fb6:	041b      	lsls	r3, r3, #16
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004fbc:	6a3b      	ldr	r3, [r7, #32]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8004fca:	33dc      	adds	r3, #220	; 0xdc
 8004fcc:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8004fce:	6a3b      	ldr	r3, [r7, #32]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	4b0e      	ldr	r3, [pc, #56]	; (800500c <JPEG_Set_Huff_DHTMem+0x21c>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	7bdb      	ldrb	r3, [r3, #15]
 8004fdc:	021a      	lsls	r2, r3, #8
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	7b92      	ldrb	r2, [r2, #14]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]
  *address = value;
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8004ff0:	6a3b      	ldr	r3, [r7, #32]
 8004ff2:	3b04      	subs	r3, #4
 8004ff4:	623b      	str	r3, [r7, #32]
  index = 12;
 8004ff6:	230c      	movs	r3, #12
 8004ff8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8004ffa:	e027      	b.n	800504c <JPEG_Set_Huff_DHTMem+0x25c>
 8004ffc:	0802e498 	.word	0x0802e498
 8005000:	0802e54c 	.word	0x0802e54c
 8005004:	0802e460 	.word	0x0802e460
 8005008:	0802e47c 	.word	0x0802e47c
 800500c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005012:	3301      	adds	r3, #1
 8005014:	693a      	ldr	r2, [r7, #16]
 8005016:	5cd3      	ldrb	r3, [r2, r3]
 8005018:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800501a:	6939      	ldr	r1, [r7, #16]
 800501c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501e:	440b      	add	r3, r1
 8005020:	781b      	ldrb	r3, [r3, #0]
 8005022:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005024:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	3b01      	subs	r3, #1
 800502a:	6939      	ldr	r1, [r7, #16]
 800502c:	5ccb      	ldrb	r3, [r1, r3]
 800502e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005030:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8005032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005034:	3a02      	subs	r2, #2
 8005036:	6939      	ldr	r1, [r7, #16]
 8005038:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800503a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	601a      	str	r2, [r3, #0]
    address--;
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	3b04      	subs	r3, #4
 8005044:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	3b04      	subs	r3, #4
 800504a:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	2b03      	cmp	r3, #3
 8005050:	d8de      	bhi.n	8005010 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800505a:	33dc      	adds	r3, #220	; 0xdc
 800505c:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	7c5b      	ldrb	r3, [r3, #17]
 800506a:	061a      	lsls	r2, r3, #24
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	431a      	orrs	r2, r3
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	7c1b      	ldrb	r3, [r3, #16]
 8005074:	041b      	lsls	r3, r3, #16
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 800507a:	6a3b      	ldr	r3, [r7, #32]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005088:	33e8      	adds	r3, #232	; 0xe8
 800508a:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	4b6d      	ldr	r3, [pc, #436]	; (8005248 <JPEG_Set_Huff_DHTMem+0x458>)
 8005092:	4013      	ands	r3, r2
 8005094:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	7edb      	ldrb	r3, [r3, #27]
 800509a:	021a      	lsls	r2, r3, #8
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	7e92      	ldrb	r2, [r2, #26]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
  *address = value;
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	3b04      	subs	r3, #4
 80050b2:	623b      	str	r3, [r7, #32]
  index = 8;
 80050b4:	2308      	movs	r3, #8
 80050b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80050b8:	e021      	b.n	80050fe <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050bc:	3301      	adds	r3, #1
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4413      	add	r3, r2
 80050c2:	7c1b      	ldrb	r3, [r3, #16]
 80050c4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80050c6:	6939      	ldr	r1, [r7, #16]
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	440b      	add	r3, r1
 80050cc:	3310      	adds	r3, #16
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80050d2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	3b01      	subs	r3, #1
 80050d8:	6939      	ldr	r1, [r7, #16]
 80050da:	440b      	add	r3, r1
 80050dc:	7c1b      	ldrb	r3, [r3, #16]
 80050de:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 80050e0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 80050e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e4:	3a02      	subs	r2, #2
 80050e6:	6939      	ldr	r1, [r7, #16]
 80050e8:	440a      	add	r2, r1
 80050ea:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80050ec:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	601a      	str	r2, [r3, #0]
    address--;
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	3b04      	subs	r3, #4
 80050f6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	3b04      	subs	r3, #4
 80050fc:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	2b03      	cmp	r3, #3
 8005102:	d8da      	bhi.n	80050ba <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800510c:	33e8      	adds	r3, #232	; 0xe8
 800510e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	785b      	ldrb	r3, [r3, #1]
 800511c:	061a      	lsls	r2, r3, #24
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	431a      	orrs	r2, r3
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800513a:	33f8      	adds	r3, #248	; 0xf8
 800513c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800513e:	6a3b      	ldr	r3, [r7, #32]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	4b41      	ldr	r3, [pc, #260]	; (8005248 <JPEG_Set_Huff_DHTMem+0x458>)
 8005144:	4013      	ands	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	7bdb      	ldrb	r3, [r3, #15]
 800514c:	021a      	lsls	r2, r3, #8
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	4313      	orrs	r3, r2
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	7b92      	ldrb	r2, [r2, #14]
 8005156:	4313      	orrs	r3, r2
 8005158:	60fb      	str	r3, [r7, #12]
  *address = value;
 800515a:	6a3b      	ldr	r3, [r7, #32]
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	3b04      	subs	r3, #4
 8005164:	623b      	str	r3, [r7, #32]
  index = 12;
 8005166:	230c      	movs	r3, #12
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800516a:	e01d      	b.n	80051a8 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	3301      	adds	r3, #1
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	5cd3      	ldrb	r3, [r2, r3]
 8005174:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 8005176:	69b9      	ldr	r1, [r7, #24]
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	440b      	add	r3, r1
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005180:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005184:	3b01      	subs	r3, #1
 8005186:	69b9      	ldr	r1, [r7, #24]
 8005188:	5ccb      	ldrb	r3, [r1, r3]
 800518a:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 800518c:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 800518e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005190:	3a02      	subs	r2, #2
 8005192:	69b9      	ldr	r1, [r7, #24]
 8005194:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005196:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	601a      	str	r2, [r3, #0]
    address--;
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	3b04      	subs	r3, #4
 80051a0:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	3b04      	subs	r3, #4
 80051a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	2b03      	cmp	r3, #3
 80051ac:	d8de      	bhi.n	800516c <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80051b6:	33f8      	adds	r3, #248	; 0xf8
 80051b8:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	7c5b      	ldrb	r3, [r3, #17]
 80051c6:	061a      	lsls	r2, r3, #24
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	7c1b      	ldrb	r3, [r3, #16]
 80051d0:	041b      	lsls	r3, r3, #16
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80051e4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80051e8:	623b      	str	r3, [r7, #32]
  index = 160;
 80051ea:	23a0      	movs	r3, #160	; 0xa0
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80051ee:	e021      	b.n	8005234 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	3301      	adds	r3, #1
 80051f4:	69ba      	ldr	r2, [r7, #24]
 80051f6:	4413      	add	r3, r2
 80051f8:	7c1b      	ldrb	r3, [r3, #16]
 80051fa:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80051fc:	69b9      	ldr	r1, [r7, #24]
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	440b      	add	r3, r1
 8005202:	3310      	adds	r3, #16
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005208:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800520a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520c:	3b01      	subs	r3, #1
 800520e:	69b9      	ldr	r1, [r7, #24]
 8005210:	440b      	add	r3, r1
 8005212:	7c1b      	ldrb	r3, [r3, #16]
 8005214:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005216:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800521a:	3a02      	subs	r2, #2
 800521c:	69b9      	ldr	r1, [r7, #24]
 800521e:	440a      	add	r2, r1
 8005220:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005222:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005224:	6a3b      	ldr	r3, [r7, #32]
 8005226:	601a      	str	r2, [r3, #0]
    address--;
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	3b04      	subs	r3, #4
 800522c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	3b04      	subs	r3, #4
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005236:	2b03      	cmp	r3, #3
 8005238:	d8da      	bhi.n	80051f0 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	372c      	adds	r7, #44	; 0x2c
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	ffff0000 	.word	0xffff0000

0800524c <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005258:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d108      	bne.n	800527e <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0208 	orr.w	r2, r2, #8
 800527a:	605a      	str	r2, [r3, #4]
 800527c:	e007      	b.n	800528e <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0208 	bic.w	r2, r2, #8
 800528c:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 0201 	bic.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80052ac:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80052bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80052ec:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005302:	f003 030c 	and.w	r3, r3, #12
 8005306:	2b08      	cmp	r3, #8
 8005308:	d108      	bne.n	800531c <JPEG_Init_Process+0xd0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8005318:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800531a:	e00d      	b.n	8005338 <JPEG_Init_Process+0xec>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005320:	f003 030c 	and.w	r3, r3, #12
 8005324:	2b0c      	cmp	r3, #12
 8005326:	d107      	bne.n	8005338 <JPEG_Init_Process+0xec>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	2b03      	cmp	r3, #3
 8005352:	d903      	bls.n	800535c <JPEG_DMA_StartProcess+0x18>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005358:	2b03      	cmp	r3, #3
 800535a:	d801      	bhi.n	8005360 <JPEG_DMA_StartProcess+0x1c>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e068      	b.n	8005432 <JPEG_DMA_StartProcess+0xee>
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005364:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Disable DMA In/Out Request*/
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 800537a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the JPEG DMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005380:	4a2e      	ldr	r2, [pc, #184]	; (800543c <JPEG_DMA_StartProcess+0xf8>)
 8005382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005388:	4a2d      	ldr	r2, [pc, #180]	; (8005440 <JPEG_DMA_StartProcess+0xfc>)
 800538a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the JPEG DMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	4a2c      	ldr	r2, [pc, #176]	; (8005444 <JPEG_DMA_StartProcess+0x100>)
 8005392:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA Out error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005398:	4a29      	ldr	r2, [pc, #164]	; (8005440 <JPEG_DMA_StartProcess+0xfc>)
 800539a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a0:	4a29      	ldr	r2, [pc, #164]	; (8005448 <JPEG_DMA_StartProcess+0x104>)
 80053a2:	651a      	str	r2, [r3, #80]	; 0x50

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	f023 0203 	bic.w	r2, r3, #3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	629a      	str	r2, [r3, #40]	; 0x28

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b4:	f023 0203 	bic.w	r2, r3, #3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	4619      	mov	r1, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3340      	adds	r3, #64	; 0x40
 80053cc:	461a      	mov	r2, r3
                       hjpeg->InDataLength >> 2)  != HAL_OK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80053d2:	089b      	lsrs	r3, r3, #2
 80053d4:	f7fe f8a4 	bl	8003520 <HAL_DMA_Start_IT>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <JPEG_DMA_StartProcess+0xaa>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	f043 0204 	orr.w	r2, r3, #4
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e021      	b.n	8005432 <JPEG_DMA_StartProcess+0xee>
  }

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3344      	adds	r3, #68	; 0x44
 80053f8:	4619      	mov	r1, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	461a      	mov	r2, r3
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005404:	089b      	lsrs	r3, r3, #2
 8005406:	f7fe f88b 	bl	8003520 <HAL_DMA_Start_IT>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d007      	beq.n	8005420 <JPEG_DMA_StartProcess+0xdc>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005414:	f043 0204 	orr.w	r2, r3, #4
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e008      	b.n	8005432 <JPEG_DMA_StartProcess+0xee>
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 800542e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3708      	adds	r7, #8
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	08005669 	.word	0x08005669
 8005440:	0800584d 	.word	0x0800584d
 8005444:	08005769 	.word	0x08005769
 8005448:	080058b9 	.word	0x080058b9

0800544c <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	0099      	lsls	r1, r3, #2
 8005462:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <JPEG_DMA_EndProcess+0xd4>)
 8005464:	400b      	ands	r3, r1
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005474:	429a      	cmp	r2, r3
 8005476:	d10a      	bne.n	800548e <JPEG_DMA_EndProcess+0x42>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69d9      	ldr	r1, [r3, #28]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005480:	461a      	mov	r2, r3
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f00d f9ec 	bl	8012860 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b00      	cmp	r3, #0
 800549a:	d134      	bne.n	8005506 <JPEG_DMA_EndProcess+0xba>
  {
    if (hjpeg->JpegOutCount > 0UL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00a      	beq.n	80054ba <JPEG_DMA_EndProcess+0x6e>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	69d9      	ldr	r1, [r3, #28]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ac:	461a      	mov	r2, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f00d f9d6 	bl	8012860 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054d4:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f003 0303 	and.w	r3, r3, #3
 80054f2:	2b02      	cmp	r3, #2
 80054f4:	d103      	bne.n	80054fe <JPEG_DMA_EndProcess+0xb2>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f00d fa20 	bl	801293c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 80054fc:	e00c      	b.n	8005518 <JPEG_DMA_EndProcess+0xcc>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff f8ef 	bl	80046e2 <HAL_JPEG_EncodeCpltCallback>
}
 8005504:	e008      	b.n	8005518 <JPEG_DMA_EndProcess+0xcc>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <JPEG_DMA_EndProcess+0xcc>
    JPEG_DMA_PollResidualData(hjpeg);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f806 	bl	8005524 <JPEG_DMA_PollResidualData>
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	0003fffc 	.word	0x0003fffc

08005524 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800552c:	2310      	movs	r3, #16
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e04f      	b.n	80055d2 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d146      	bne.n	80055cc <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	d03f      	beq.n	80055cc <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005552:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	69da      	ldr	r2, [r3, #28]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555c:	4413      	add	r3, r2
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	0a19      	lsrs	r1, r3, #8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	69da      	ldr	r2, [r3, #28]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005570:	3301      	adds	r3, #1
 8005572:	4413      	add	r3, r2
 8005574:	b2ca      	uxtb	r2, r1
 8005576:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	0c19      	lsrs	r1, r3, #16
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	69da      	ldr	r2, [r3, #28]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	3302      	adds	r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	b2ca      	uxtb	r2, r1
 800558a:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	0e19      	lsrs	r1, r3, #24
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	69da      	ldr	r2, [r3, #28]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	3303      	adds	r3, #3
 800559a:	4413      	add	r3, r2
 800559c:	b2ca      	uxtb	r2, r1
 800559e:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	1d1a      	adds	r2, r3, #4
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d10a      	bne.n	80055cc <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	69d9      	ldr	r1, [r3, #28]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055be:	461a      	mov	r2, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f00d f94d 	bl	8012860 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	3b01      	subs	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ac      	bne.n	8005532 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055dc:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e4:	f003 0310 	and.w	r3, r3, #16
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d004      	beq.n	80055f6 <JPEG_DMA_PollResidualData+0xd2>
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d133      	bne.n	800565e <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0201 	bic.w	r2, r2, #1
 8005604:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00a      	beq.n	8005624 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69d9      	ldr	r1, [r3, #28]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	461a      	mov	r2, r3
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f00d f921 	bl	8012860 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	f003 0303 	and.w	r3, r3, #3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d103      	bne.n	8005658 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	f00d f973 	bl	801293c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8005656:	e002      	b.n	800565e <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff f842 	bl	80046e2 <HAL_JPEG_EncodeCpltCallback>
}
 800565e:	bf00      	nop
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <JPEG_DMAInCpltCallback>:
  * @brief  DMA input transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAInCpltCallback(DMA_HandleTypeDef *hdma)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005674:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005684:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800568a:	f248 030c 	movw	r3, #32780	; 0x800c
 800568e:	4013      	ands	r3, r2
 8005690:	2b0c      	cmp	r3, #12
 8005692:	d163      	bne.n	800575c <JPEG_DMAInCpltCallback+0xf4>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056a2:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	0099      	lsls	r1, r3, #2
 80056b0:	4b2c      	ldr	r3, [pc, #176]	; (8005764 <JPEG_DMAInCpltCallback+0xfc>)
 80056b2:	400b      	ands	r3, r1
 80056b4:	1ad2      	subs	r2, r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	4619      	mov	r1, r3
 80056c0:	68f8      	ldr	r0, [r7, #12]
 80056c2:	f00d f899 	bl	80127f8 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    if (hjpeg->InDataLength >= 4UL)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d906      	bls.n	80056dc <JPEG_DMAInCpltCallback+0x74>
    {
      /*JPEG Input DMA transfer data number must be multiple of 32 bits word
        as the destination is a 32 bits (4 bytes) register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	f023 0203 	bic.w	r2, r3, #3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	629a      	str	r2, [r3, #40]	; 0x28
 80056da:	e006      	b.n	80056ea <JPEG_DMAInCpltCallback+0x82>
    }
    else if (hjpeg->InDataLength > 0UL)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <JPEG_DMAInCpltCallback+0x82>
    {
      /*Transfer last data word (i.e last 4 bytes)*/
      hjpeg->InDataLength = 4;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2204      	movs	r2, #4
 80056e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d12a      	bne.n	800574c <JPEG_DMAInCpltCallback+0xe4>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d026      	beq.n	800574c <JPEG_DMAInCpltCallback+0xe4>
    {
      /* Start DMA FIFO In transfer */
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	4619      	mov	r1, r3
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3340      	adds	r3, #64	; 0x40
 800570e:	461a      	mov	r2, r3
                           hjpeg->InDataLength >> 2) != HAL_OK)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005714:	089b      	lsrs	r3, r3, #2
 8005716:	f7fd ff03 	bl	8003520 <HAL_DMA_Start_IT>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00d      	beq.n	800573c <JPEG_DMAInCpltCallback+0xd4>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005724:	f043 0204 	orr.w	r2, r3, #4
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2206      	movs	r2, #6
 8005730:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f00d f8f3 	bl	8012920 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 800573a:	e00f      	b.n	800575c <JPEG_DMAInCpltCallback+0xf4>
      }
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	0003fffc 	.word	0x0003fffc

08005768 <JPEG_DMAOutCpltCallback>:
  * @brief  DMA output transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutCpltCallback(DMA_HandleTypeDef *hdma)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005774:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005784:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800578a:	f248 030c 	movw	r3, #32780	; 0x800c
 800578e:	4013      	ands	r3, r2
 8005790:	2b0c      	cmp	r3, #12
 8005792:	d156      	bne.n	8005842 <JPEG_DMAOutCpltCallback+0xda>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579a:	f003 0320 	and.w	r3, r3, #32
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d147      	bne.n	8005832 <JPEG_DMAOutCpltCallback+0xca>
    {
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057b0:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	0099      	lsls	r1, r3, #2
 80057be:	4b22      	ldr	r3, [pc, #136]	; (8005848 <JPEG_DMAOutCpltCallback+0xe0>)
 80057c0:	400b      	ands	r3, r1
 80057c2:	1ad2      	subs	r2, r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	69d9      	ldr	r1, [r3, #28]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d0:	461a      	mov	r2, r3
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f00d f844 	bl	8012860 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d126      	bne.n	8005832 <JPEG_DMAOutCpltCallback+0xca>
      {
        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	3344      	adds	r3, #68	; 0x44
 80057ee:	4619      	mov	r1, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80057fa:	089b      	lsrs	r3, r3, #2
 80057fc:	f7fd fe90 	bl	8003520 <HAL_DMA_Start_IT>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <JPEG_DMAOutCpltCallback+0xba>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800580a:	f043 0204 	orr.w	r2, r3, #4
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2206      	movs	r2, #6
 8005816:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f00d f880 	bl	8012920 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8005820:	e00f      	b.n	8005842 <JPEG_DMAOutCpltCallback+0xda>
        }
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005840:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8005842:	3710      	adds	r7, #16
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	0003fffc 	.word	0x0003fffc

0800584c <JPEG_DMAErrorCallback>:
  * @brief  DMA Transfer error callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAErrorCallback(DMA_HandleTypeDef *hdma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b084      	sub	sp, #16
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005858:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fe f86c 	bl	8003938 <HAL_DMA_GetError>
 8005860:	4603      	mov	r3, r0
 8005862:	2b02      	cmp	r3, #2
 8005864:	d024      	beq.n	80058b0 <JPEG_DMAErrorCallback+0x64>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 0201 	bic.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]

    /* Disable All Interrupts */
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005884:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable All DMA requests */
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005894:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->State = HAL_JPEG_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a2:	f043 0204 	orr.w	r2, r3, #4
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	651a      	str	r2, [r3, #80]	; 0x50
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->ErrorCallback(hjpeg);
#else
    HAL_JPEG_ErrorCallback(hjpeg);
 80058aa:	68f8      	ldr	r0, [r7, #12]
 80058ac:	f00d f838 	bl	8012920 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
  }
}
 80058b0:	bf00      	nop
 80058b2:	3710      	adds	r7, #16
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <JPEG_DMAOutAbortCallback>:
  * @brief  DMA output Abort callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutAbortCallback(DMA_HandleTypeDef *hdma)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <JPEG_DMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f7ff fdba 	bl	800544c <JPEG_DMA_EndProcess>
  }
}
 80058d8:	bf00      	nop
 80058da:	3710      	adds	r7, #16
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}

080058e0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e0bf      	b.n	8005a72 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d106      	bne.n	800590c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7fb fec2 	bl	8001690 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2202      	movs	r2, #2
 8005910:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005922:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6999      	ldr	r1, [r3, #24]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685a      	ldr	r2, [r3, #4]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005938:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6899      	ldr	r1, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b4a      	ldr	r3, [pc, #296]	; (8005a7c <HAL_LTDC_Init+0x19c>)
 8005954:	400b      	ands	r3, r1
 8005956:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6899      	ldr	r1, [r3, #8]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699a      	ldr	r2, [r3, #24]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68d9      	ldr	r1, [r3, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b3e      	ldr	r3, [pc, #248]	; (8005a7c <HAL_LTDC_Init+0x19c>)
 8005982:	400b      	ands	r3, r1
 8005984:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	041b      	lsls	r3, r3, #16
 800598c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68d9      	ldr	r1, [r3, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1a      	ldr	r2, [r3, #32]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	6919      	ldr	r1, [r3, #16]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <HAL_LTDC_Init+0x19c>)
 80059b0:	400b      	ands	r3, r1
 80059b2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	041b      	lsls	r3, r3, #16
 80059ba:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6919      	ldr	r1, [r3, #16]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	6959      	ldr	r1, [r3, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	4b27      	ldr	r3, [pc, #156]	; (8005a7c <HAL_LTDC_Init+0x19c>)
 80059de:	400b      	ands	r3, r1
 80059e0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	041b      	lsls	r3, r3, #16
 80059e8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6959      	ldr	r1, [r3, #20]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005a10:	041b      	lsls	r3, r3, #16
 8005a12:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	687a      	ldr	r2, [r7, #4]
 8005a32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0206 	orr.w	r2, r2, #6
 8005a4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699a      	ldr	r2, [r3, #24]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005a70:	2300      	movs	r3, #0
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3710      	adds	r7, #16
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	f000f800 	.word	0xf000f800

08005a80 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a96:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f003 0304 	and.w	r3, r3, #4
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d023      	beq.n	8005aea <HAL_LTDC_IRQHandler+0x6a>
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	f003 0304 	and.w	r3, r3, #4
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01e      	beq.n	8005aea <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 0204 	bic.w	r2, r2, #4
 8005aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005aca:	f043 0201 	orr.w	r2, r3, #1
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f000 f86f 	bl	8005bc8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f003 0302 	and.w	r3, r3, #2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d023      	beq.n	8005b3c <HAL_LTDC_IRQHandler+0xbc>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d01e      	beq.n	8005b3c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 0202 	bic.w	r2, r2, #2
 8005b0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	2202      	movs	r2, #2
 8005b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005b1c:	f043 0202 	orr.w	r2, r3, #2
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f846 	bl	8005bc8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d01b      	beq.n	8005b7e <HAL_LTDC_IRQHandler+0xfe>
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d016      	beq.n	8005b7e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f022 0201 	bic.w	r2, r2, #1
 8005b5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2201      	movs	r2, #1
 8005b66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f00e fc9f 	bl	80144bc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d01b      	beq.n	8005bc0 <HAL_LTDC_IRQHandler+0x140>
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0308 	and.w	r3, r3, #8
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d016      	beq.n	8005bc0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0208 	bic.w	r2, r2, #8
 8005ba0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f80e 	bl	8005bdc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005bc0:	bf00      	nop
 8005bc2:	3710      	adds	r7, #16
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005bf0:	b5b0      	push	{r4, r5, r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d101      	bne.n	8005c0a <HAL_LTDC_ConfigLayer+0x1a>
 8005c06:	2302      	movs	r3, #2
 8005c08:	e02c      	b.n	8005c64 <HAL_LTDC_ConfigLayer+0x74>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2202      	movs	r2, #2
 8005c16:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2134      	movs	r1, #52	; 0x34
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	4413      	add	r3, r2
 8005c26:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	4614      	mov	r4, r2
 8005c2e:	461d      	mov	r5, r3
 8005c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c3c:	682b      	ldr	r3, [r5, #0]
 8005c3e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 f849 	bl	8005cdc <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bdb0      	pop	{r4, r5, r7, pc}

08005c6c <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_LTDC_ProgramLineEvent+0x18>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e023      	b.n	8005ccc <HAL_LTDC_ProgramLineEvent+0x60>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f022 0201 	bic.w	r2, r2, #1
 8005ca2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005ca4:	4a0c      	ldr	r2, [pc, #48]	; (8005cd8 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f042 0201 	orr.w	r2, r2, #1
 8005cb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	40016800 	.word	0x40016800

08005cdc <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b089      	sub	sp, #36	; 0x24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68db      	ldr	r3, [r3, #12]
 8005cf2:	0c1b      	lsrs	r3, r3, #16
 8005cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cf8:	4413      	add	r3, r2
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	01db      	lsls	r3, r3, #7
 8005d08:	4413      	add	r3, r2
 8005d0a:	3384      	adds	r3, #132	; 0x84
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	6812      	ldr	r2, [r2, #0]
 8005d12:	4611      	mov	r1, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	01d2      	lsls	r2, r2, #7
 8005d18:	440a      	add	r2, r1
 8005d1a:	3284      	adds	r2, #132	; 0x84
 8005d1c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d20:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d32:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d34:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	01db      	lsls	r3, r3, #7
 8005d40:	440b      	add	r3, r1
 8005d42:	3384      	adds	r3, #132	; 0x84
 8005d44:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005d4a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	68da      	ldr	r2, [r3, #12]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d5a:	4413      	add	r3, r2
 8005d5c:	041b      	lsls	r3, r3, #16
 8005d5e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	461a      	mov	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	01db      	lsls	r3, r3, #7
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3384      	adds	r3, #132	; 0x84
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	6812      	ldr	r2, [r2, #0]
 8005d74:	4611      	mov	r1, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	01d2      	lsls	r2, r2, #7
 8005d7a:	440a      	add	r2, r1
 8005d7c:	3284      	adds	r2, #132	; 0x84
 8005d7e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005d82:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d92:	4413      	add	r3, r2
 8005d94:	1c5a      	adds	r2, r3, #1
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4619      	mov	r1, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	01db      	lsls	r3, r3, #7
 8005da0:	440b      	add	r3, r1
 8005da2:	3384      	adds	r3, #132	; 0x84
 8005da4:	4619      	mov	r1, r3
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	461a      	mov	r2, r3
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	01db      	lsls	r3, r3, #7
 8005db6:	4413      	add	r3, r2
 8005db8:	3384      	adds	r3, #132	; 0x84
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	6812      	ldr	r2, [r2, #0]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	01d2      	lsls	r2, r2, #7
 8005dc6:	440a      	add	r2, r1
 8005dc8:	3284      	adds	r2, #132	; 0x84
 8005dca:	f023 0307 	bic.w	r3, r3, #7
 8005dce:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	01db      	lsls	r3, r3, #7
 8005dda:	4413      	add	r3, r2
 8005ddc:	3384      	adds	r3, #132	; 0x84
 8005dde:	461a      	mov	r2, r3
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005df6:	041b      	lsls	r3, r3, #16
 8005df8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	061b      	lsls	r3, r3, #24
 8005e00:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	461a      	mov	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	01db      	lsls	r3, r3, #7
 8005e0c:	4413      	add	r3, r2
 8005e0e:	3384      	adds	r3, #132	; 0x84
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	461a      	mov	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	01db      	lsls	r3, r3, #7
 8005e1c:	4413      	add	r3, r2
 8005e1e:	3384      	adds	r3, #132	; 0x84
 8005e20:	461a      	mov	r2, r3
 8005e22:	2300      	movs	r3, #0
 8005e24:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	431a      	orrs	r2, r3
 8005e32:	69bb      	ldr	r3, [r7, #24]
 8005e34:	431a      	orrs	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	01db      	lsls	r3, r3, #7
 8005e40:	440b      	add	r3, r1
 8005e42:	3384      	adds	r3, #132	; 0x84
 8005e44:	4619      	mov	r1, r3
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	01db      	lsls	r3, r3, #7
 8005e56:	4413      	add	r3, r2
 8005e58:	3384      	adds	r3, #132	; 0x84
 8005e5a:	695b      	ldr	r3, [r3, #20]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	4611      	mov	r1, r2
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	01d2      	lsls	r2, r2, #7
 8005e66:	440a      	add	r2, r1
 8005e68:	3284      	adds	r2, #132	; 0x84
 8005e6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e6e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	461a      	mov	r2, r3
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	01db      	lsls	r3, r3, #7
 8005e7a:	4413      	add	r3, r2
 8005e7c:	3384      	adds	r3, #132	; 0x84
 8005e7e:	461a      	mov	r2, r3
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	695b      	ldr	r3, [r3, #20]
 8005e84:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	01db      	lsls	r3, r3, #7
 8005e90:	4413      	add	r3, r2
 8005e92:	3384      	adds	r3, #132	; 0x84
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	01db      	lsls	r3, r3, #7
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3384      	adds	r3, #132	; 0x84
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4b58      	ldr	r3, [pc, #352]	; (8006008 <LTDC_SetConfig+0x32c>)
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	69da      	ldr	r2, [r3, #28]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	68f9      	ldr	r1, [r7, #12]
 8005eb6:	6809      	ldr	r1, [r1, #0]
 8005eb8:	4608      	mov	r0, r1
 8005eba:	6879      	ldr	r1, [r7, #4]
 8005ebc:	01c9      	lsls	r1, r1, #7
 8005ebe:	4401      	add	r1, r0
 8005ec0:	3184      	adds	r1, #132	; 0x84
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	01db      	lsls	r3, r3, #7
 8005ed0:	4413      	add	r3, r2
 8005ed2:	3384      	adds	r3, #132	; 0x84
 8005ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	01db      	lsls	r3, r3, #7
 8005ee0:	4413      	add	r3, r2
 8005ee2:	3384      	adds	r3, #132	; 0x84
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	461a      	mov	r2, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	01db      	lsls	r3, r3, #7
 8005ef4:	4413      	add	r3, r2
 8005ef6:	3384      	adds	r3, #132	; 0x84
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d102      	bne.n	8005f0e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005f08:	2304      	movs	r3, #4
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	e01b      	b.n	8005f46 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d102      	bne.n	8005f1c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8005f16:	2303      	movs	r3, #3
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	e014      	b.n	8005f46 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d00b      	beq.n	8005f3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d007      	beq.n	8005f3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005f30:	2b03      	cmp	r3, #3
 8005f32:	d003      	beq.n	8005f3c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f38:	2b07      	cmp	r3, #7
 8005f3a:	d102      	bne.n	8005f42 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8005f3c:	2302      	movs	r3, #2
 8005f3e:	61fb      	str	r3, [r7, #28]
 8005f40:	e001      	b.n	8005f46 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8005f42:	2301      	movs	r3, #1
 8005f44:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	461a      	mov	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	01db      	lsls	r3, r3, #7
 8005f50:	4413      	add	r3, r2
 8005f52:	3384      	adds	r3, #132	; 0x84
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	6812      	ldr	r2, [r2, #0]
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	01d2      	lsls	r2, r2, #7
 8005f60:	440a      	add	r2, r1
 8005f62:	3284      	adds	r2, #132	; 0x84
 8005f64:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005f68:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	fb02 f303 	mul.w	r3, r2, r3
 8005f74:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	6859      	ldr	r1, [r3, #4]
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	1acb      	subs	r3, r1, r3
 8005f80:	69f9      	ldr	r1, [r7, #28]
 8005f82:	fb01 f303 	mul.w	r3, r1, r3
 8005f86:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005f88:	68f9      	ldr	r1, [r7, #12]
 8005f8a:	6809      	ldr	r1, [r1, #0]
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	6879      	ldr	r1, [r7, #4]
 8005f90:	01c9      	lsls	r1, r1, #7
 8005f92:	4401      	add	r1, r0
 8005f94:	3184      	adds	r1, #132	; 0x84
 8005f96:	4313      	orrs	r3, r2
 8005f98:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	01db      	lsls	r3, r3, #7
 8005fa4:	4413      	add	r3, r2
 8005fa6:	3384      	adds	r3, #132	; 0x84
 8005fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	01db      	lsls	r3, r3, #7
 8005fb4:	440b      	add	r3, r1
 8005fb6:	3384      	adds	r3, #132	; 0x84
 8005fb8:	4619      	mov	r1, r3
 8005fba:	4b14      	ldr	r3, [pc, #80]	; (800600c <LTDC_SetConfig+0x330>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	01db      	lsls	r3, r3, #7
 8005fca:	4413      	add	r3, r2
 8005fcc:	3384      	adds	r3, #132	; 0x84
 8005fce:	461a      	mov	r2, r3
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	01db      	lsls	r3, r3, #7
 8005fe0:	4413      	add	r3, r2
 8005fe2:	3384      	adds	r3, #132	; 0x84
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	6812      	ldr	r2, [r2, #0]
 8005fea:	4611      	mov	r1, r2
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	01d2      	lsls	r2, r2, #7
 8005ff0:	440a      	add	r2, r1
 8005ff2:	3284      	adds	r2, #132	; 0x84
 8005ff4:	f043 0301 	orr.w	r3, r3, #1
 8005ff8:	6013      	str	r3, [r2, #0]
}
 8005ffa:	bf00      	nop
 8005ffc:	3724      	adds	r7, #36	; 0x24
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
 8006006:	bf00      	nop
 8006008:	fffff8f8 	.word	0xfffff8f8
 800600c:	fffff800 	.word	0xfffff800

08006010 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006016:	2300      	movs	r3, #0
 8006018:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800601a:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	4a22      	ldr	r2, [pc, #136]	; (80060a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006020:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006024:	6413      	str	r3, [r2, #64]	; 0x40
 8006026:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800602e:	603b      	str	r3, [r7, #0]
 8006030:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006032:	4b1e      	ldr	r3, [pc, #120]	; (80060ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1d      	ldr	r2, [pc, #116]	; (80060ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800603c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800603e:	f7fc fa0f 	bl	8002460 <HAL_GetTick>
 8006042:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006044:	e009      	b.n	800605a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006046:	f7fc fa0b 	bl	8002460 <HAL_GetTick>
 800604a:	4602      	mov	r2, r0
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	1ad3      	subs	r3, r2, r3
 8006050:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006054:	d901      	bls.n	800605a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006056:	2303      	movs	r3, #3
 8006058:	e022      	b.n	80060a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800605a:	4b14      	ldr	r3, [pc, #80]	; (80060ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006062:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006066:	d1ee      	bne.n	8006046 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006068:	4b10      	ldr	r3, [pc, #64]	; (80060ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a0f      	ldr	r2, [pc, #60]	; (80060ac <HAL_PWREx_EnableOverDrive+0x9c>)
 800606e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006072:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006074:	f7fc f9f4 	bl	8002460 <HAL_GetTick>
 8006078:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800607a:	e009      	b.n	8006090 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800607c:	f7fc f9f0 	bl	8002460 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800608a:	d901      	bls.n	8006090 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e007      	b.n	80060a0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800609c:	d1ee      	bne.n	800607c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	40023800 	.word	0x40023800
 80060ac:	40007000 	.word	0x40007000

080060b0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af02      	add	r7, sp, #8
 80060b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80060b8:	f7fc f9d2 	bl	8002460 <HAL_GetTick>
 80060bc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e067      	b.n	8006198 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10b      	bne.n	80060ec <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fb fd2d 	bl	8001b3c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80060e2:	f241 3188 	movw	r1, #5000	; 0x1388
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fae8 	bl	80066bc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	021a      	lsls	r2, r3, #8
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	2120      	movs	r1, #32
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fae0 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800611c:	7afb      	ldrb	r3, [r7, #11]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d135      	bne.n	800618e <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <HAL_QSPI_Init+0xf0>)
 800612a:	4013      	ands	r3, r2
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	6852      	ldr	r2, [r2, #4]
 8006130:	0611      	lsls	r1, r2, #24
 8006132:	687a      	ldr	r2, [r7, #4]
 8006134:	68d2      	ldr	r2, [r2, #12]
 8006136:	4311      	orrs	r1, r2
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	69d2      	ldr	r2, [r2, #28]
 800613c:	4311      	orrs	r1, r2
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	6a12      	ldr	r2, [r2, #32]
 8006142:	4311      	orrs	r1, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	430b      	orrs	r3, r1
 800614a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	4b14      	ldr	r3, [pc, #80]	; (80061a4 <HAL_QSPI_Init+0xf4>)
 8006154:	4013      	ands	r3, r2
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	6912      	ldr	r2, [r2, #16]
 800615a:	0411      	lsls	r1, r2, #16
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	6952      	ldr	r2, [r2, #20]
 8006160:	4311      	orrs	r1, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6992      	ldr	r2, [r2, #24]
 8006166:	4311      	orrs	r1, r2
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	6812      	ldr	r2, [r2, #0]
 800616c:	430b      	orrs	r3, r1
 800616e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f042 0201 	orr.w	r2, r2, #1
 800617e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006196:	7afb      	ldrb	r3, [r7, #11]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3710      	adds	r7, #16
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	00ffff2f 	.word	0x00ffff2f
 80061a4:	ffe0f8fe 	.word	0xffe0f8fe

080061a8 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e016      	b.n	80061e8 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0201 	bic.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fb fd38 	bl	8001c40 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80061e6:	2300      	movs	r3, #0
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b088      	sub	sp, #32
 80061f4:	af02      	add	r7, sp, #8
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80061fc:	f7fc f930 	bl	8002460 <HAL_GetTick>
 8006200:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_QSPI_Command+0x22>
 800620e:	2302      	movs	r3, #2
 8006210:	e048      	b.n	80062a4 <HAL_QSPI_Command+0xb4>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b01      	cmp	r3, #1
 8006224:	d137      	bne.n	8006296 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	2200      	movs	r2, #0
 800623c:	2120      	movs	r1, #32
 800623e:	68f8      	ldr	r0, [r7, #12]
 8006240:	f000 fa4a 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 8006244:	4603      	mov	r3, r0
 8006246:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d125      	bne.n	800629a <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800624e:	2200      	movs	r2, #0
 8006250:	68b9      	ldr	r1, [r7, #8]
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 fa77 	bl	8006746 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	2b00      	cmp	r3, #0
 800625e:	d115      	bne.n	800628c <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2201      	movs	r2, #1
 8006268:	2102      	movs	r1, #2
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f000 fa34 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006274:	7dfb      	ldrb	r3, [r7, #23]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10f      	bne.n	800629a <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2202      	movs	r2, #2
 8006280:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2201      	movs	r2, #1
 8006286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800628a:	e006      	b.n	800629a <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006294:	e001      	b.n	800629a <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006296:	2302      	movs	r3, #2
 8006298:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b08a      	sub	sp, #40	; 0x28
 80062b0:	af02      	add	r7, sp, #8
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80062bc:	f7fc f8d0 	bl	8002460 <HAL_GetTick>
 80062c0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3320      	adds	r3, #32
 80062c8:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_QSPI_Transmit+0x2e>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e076      	b.n	80063c8 <HAL_QSPI_Transmit+0x11c>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d165      	bne.n	80063ba <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d056      	beq.n	80063a8 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2212      	movs	r2, #18
 80062fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	691b      	ldr	r3, [r3, #16]
 8006308:	1c5a      	adds	r2, r3, #1
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	691b      	ldr	r3, [r3, #16]
 8006314:	1c5a      	adds	r2, r3, #1
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	68ba      	ldr	r2, [r7, #8]
 800631e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800632e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8006330:	e01b      	b.n	800636a <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	2201      	movs	r2, #1
 800633a:	2104      	movs	r1, #4
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f000 f9cb 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 8006342:	4603      	mov	r3, r0
 8006344:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006346:	7ffb      	ldrb	r3, [r7, #31]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d113      	bne.n	8006374 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006350:	781a      	ldrb	r2, [r3, #0]
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	1e5a      	subs	r2, r3, #1
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1df      	bne.n	8006332 <HAL_QSPI_Transmit+0x86>
 8006372:	e000      	b.n	8006376 <HAL_QSPI_Transmit+0xca>
          break;
 8006374:	bf00      	nop
      }

      if (status == HAL_OK)
 8006376:	7ffb      	ldrb	r3, [r7, #31]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d110      	bne.n	800639e <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	2201      	movs	r2, #1
 8006384:	2102      	movs	r1, #2
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f9a6 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006390:	7ffb      	ldrb	r3, [r7, #31]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d103      	bne.n	800639e <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2202      	movs	r2, #2
 800639c:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063a6:	e00a      	b.n	80063be <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ac:	f043 0208 	orr.w	r2, r3, #8
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e001      	b.n	80063be <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 80063ba:	2302      	movs	r3, #2
 80063bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 80063c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3720      	adds	r7, #32
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063dc:	2300      	movs	r3, #0
 80063de:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 80063e0:	f7fc f83e 	bl	8002460 <HAL_GetTick>
 80063e4:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3320      	adds	r3, #32
 80063f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d101      	bne.n	8006406 <HAL_QSPI_Receive+0x36>
 8006402:	2302      	movs	r3, #2
 8006404:	e07d      	b.n	8006502 <HAL_QSPI_Receive+0x132>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2201      	movs	r2, #1
 800640a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	d16c      	bne.n	80064f4 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d05d      	beq.n	80064e2 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2222      	movs	r2, #34	; 0x22
 800642a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	691b      	ldr	r3, [r3, #16]
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	695b      	ldr	r3, [r3, #20]
 8006452:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800645e:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006468:	e01c      	b.n	80064a4 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	2201      	movs	r2, #1
 8006472:	2106      	movs	r1, #6
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 f92f 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 800647a:	4603      	mov	r3, r0
 800647c:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 800647e:	7ffb      	ldrb	r3, [r7, #31]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d114      	bne.n	80064ae <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006488:	693a      	ldr	r2, [r7, #16]
 800648a:	7812      	ldrb	r2, [r2, #0]
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	1c5a      	adds	r2, r3, #1
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649e:	1e5a      	subs	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1de      	bne.n	800646a <HAL_QSPI_Receive+0x9a>
 80064ac:	e000      	b.n	80064b0 <HAL_QSPI_Receive+0xe0>
          break;
 80064ae:	bf00      	nop
      }

      if (status == HAL_OK)
 80064b0:	7ffb      	ldrb	r3, [r7, #31]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d110      	bne.n	80064d8 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	9300      	str	r3, [sp, #0]
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2201      	movs	r2, #1
 80064be:	2102      	movs	r1, #2
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f909 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 80064c6:	4603      	mov	r3, r0
 80064c8:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 80064ca:	7ffb      	ldrb	r3, [r7, #31]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d103      	bne.n	80064d8 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2202      	movs	r2, #2
 80064d6:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064e0:	e00a      	b.n	80064f8 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064e6:	f043 0208 	orr.w	r2, r3, #8
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	77fb      	strb	r3, [r7, #31]
 80064f2:	e001      	b.n	80064f8 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 80064f4:	2302      	movs	r3, #2
 80064f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006500:	7ffb      	ldrb	r3, [r7, #31]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3720      	adds	r7, #32
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b088      	sub	sp, #32
 800650e:	af02      	add	r7, sp, #8
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	607a      	str	r2, [r7, #4]
 8006516:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006518:	f7fb ffa2 	bl	8002460 <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_QSPI_AutoPolling+0x24>
 800652a:	2302      	movs	r3, #2
 800652c:	e060      	b.n	80065f0 <HAL_QSPI_AutoPolling+0xe6>
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2201      	movs	r2, #1
 8006532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b01      	cmp	r3, #1
 8006540:	d14f      	bne.n	80065e2 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2242      	movs	r2, #66	; 0x42
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	2200      	movs	r2, #0
 8006558:	2120      	movs	r1, #32
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f8bc 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006564:	7dfb      	ldrb	r3, [r7, #23]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d13d      	bne.n	80065e6 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	6852      	ldr	r2, [r2, #4]
 800657c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6892      	ldr	r2, [r2, #8]
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	431a      	orrs	r2, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80065a0:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80065aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065ae:	68b9      	ldr	r1, [r7, #8]
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f000 f8c8 	bl	8006746 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	2201      	movs	r2, #1
 80065be:	2108      	movs	r1, #8
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f889 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 80065c6:	4603      	mov	r3, r0
 80065c8:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 80065ca:	7dfb      	ldrb	r3, [r7, #23]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10a      	bne.n	80065e6 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2208      	movs	r2, #8
 80065d6:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065e0:	e001      	b.n	80065e6 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 80065e2:	2302      	movs	r3, #2
 80065e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3718      	adds	r7, #24
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006604:	f7fb ff2c 	bl	8002460 <HAL_GetTick>
 8006608:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b01      	cmp	r3, #1
 8006614:	d101      	bne.n	800661a <HAL_QSPI_MemoryMapped+0x22>
 8006616:	2302      	movs	r3, #2
 8006618:	e04c      	b.n	80066b4 <HAL_QSPI_MemoryMapped+0xbc>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2201      	movs	r2, #1
 800661e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b01      	cmp	r3, #1
 800662c:	d13b      	bne.n	80066a6 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2282      	movs	r2, #130	; 0x82
 8006638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	2200      	movs	r2, #0
 8006646:	2120      	movs	r1, #32
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 f845 	bl	80066d8 <QSPI_WaitFlagStateUntilTimeout>
 800664e:	4603      	mov	r3, r0
 8006650:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006652:	7dfb      	ldrb	r3, [r7, #23]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d128      	bne.n	80066aa <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f023 0108 	bic.w	r1, r3, #8
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b08      	cmp	r3, #8
 8006674:	d110      	bne.n	8006698 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	6812      	ldr	r2, [r2, #0]
 800667e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2210      	movs	r2, #16
 8006686:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006696:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8006698:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800669c:	68b9      	ldr	r1, [r7, #8]
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f000 f851 	bl	8006746 <QSPI_Config>
 80066a4:	e001      	b.n	80066aa <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 80066a6:	2302      	movs	r3, #2
 80066a8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	3718      	adds	r7, #24
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	683a      	ldr	r2, [r7, #0]
 80066ca:	649a      	str	r2, [r3, #72]	; 0x48
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	603b      	str	r3, [r7, #0]
 80066e4:	4613      	mov	r3, r2
 80066e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80066e8:	e01a      	b.n	8006720 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	d016      	beq.n	8006720 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066f2:	f7fb feb5 	bl	8002460 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d302      	bcc.n	8006708 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10b      	bne.n	8006720 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2204      	movs	r2, #4
 800670c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006714:	f043 0201 	orr.w	r2, r3, #1
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e00e      	b.n	800673e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	4013      	ands	r3, r2
 800672a:	2b00      	cmp	r3, #0
 800672c:	bf14      	ite	ne
 800672e:	2301      	movne	r3, #1
 8006730:	2300      	moveq	r3, #0
 8006732:	b2db      	uxtb	r3, r3
 8006734:	461a      	mov	r2, r3
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	429a      	cmp	r2, r3
 800673a:	d1d6      	bne.n	80066ea <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}

08006746 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006746:	b480      	push	{r7}
 8006748:	b085      	sub	sp, #20
 800674a:	af00      	add	r7, sp, #0
 800674c:	60f8      	str	r0, [r7, #12]
 800674e:	60b9      	str	r1, [r7, #8]
 8006750:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006756:	2b00      	cmp	r3, #0
 8006758:	d009      	beq.n	800676e <QSPI_Config+0x28>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006760:	d005      	beq.n	800676e <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3a01      	subs	r2, #1
 800676c:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	2b00      	cmp	r3, #0
 8006774:	f000 80b9 	beq.w	80068ea <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d05f      	beq.n	8006840 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68ba      	ldr	r2, [r7, #8]
 8006786:	6892      	ldr	r2, [r2, #8]
 8006788:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d031      	beq.n	80067f6 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679a:	431a      	orrs	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	431a      	orrs	r2, r3
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	049b      	lsls	r3, r3, #18
 80067ae:	431a      	orrs	r2, r3
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	431a      	orrs	r2, r3
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	431a      	orrs	r2, r3
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	431a      	orrs	r2, r3
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	69db      	ldr	r3, [r3, #28]
 80067c6:	431a      	orrs	r2, r3
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	431a      	orrs	r2, r3
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	ea42 0103 	orr.w	r1, r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	430a      	orrs	r2, r1
 80067de:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80067e6:	f000 812e 	beq.w	8006a46 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	6852      	ldr	r2, [r2, #4]
 80067f2:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 80067f4:	e127      	b.n	8006a46 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fe:	431a      	orrs	r2, r3
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006804:	431a      	orrs	r2, r3
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	431a      	orrs	r2, r3
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	695b      	ldr	r3, [r3, #20]
 8006810:	049b      	lsls	r3, r3, #18
 8006812:	431a      	orrs	r2, r3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	431a      	orrs	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	6a1b      	ldr	r3, [r3, #32]
 800681e:	431a      	orrs	r2, r3
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	69db      	ldr	r3, [r3, #28]
 8006824:	431a      	orrs	r2, r3
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	431a      	orrs	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	ea42 0103 	orr.w	r1, r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	430a      	orrs	r2, r1
 800683c:	615a      	str	r2, [r3, #20]
}
 800683e:	e102      	b.n	8006a46 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d02e      	beq.n	80068a6 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006850:	431a      	orrs	r2, r3
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006856:	431a      	orrs	r2, r3
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	431a      	orrs	r2, r3
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	049b      	lsls	r3, r3, #18
 8006864:	431a      	orrs	r2, r3
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	6a1b      	ldr	r3, [r3, #32]
 800686a:	431a      	orrs	r2, r3
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	431a      	orrs	r2, r3
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	431a      	orrs	r2, r3
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	431a      	orrs	r2, r3
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	ea42 0103 	orr.w	r1, r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	687a      	ldr	r2, [r7, #4]
 800688c:	430a      	orrs	r2, r1
 800688e:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006896:	f000 80d6 	beq.w	8006a46 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	6852      	ldr	r2, [r2, #4]
 80068a2:	619a      	str	r2, [r3, #24]
}
 80068a4:	e0cf      	b.n	8006a46 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ae:	431a      	orrs	r2, r3
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068b4:	431a      	orrs	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ba:	431a      	orrs	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	049b      	lsls	r3, r3, #18
 80068c2:	431a      	orrs	r2, r3
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	431a      	orrs	r2, r3
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	431a      	orrs	r2, r3
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	ea42 0103 	orr.w	r1, r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	615a      	str	r2, [r3, #20]
}
 80068e8:	e0ad      	b.n	8006a46 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d058      	beq.n	80069a4 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	6892      	ldr	r2, [r2, #8]
 80068fa:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	69db      	ldr	r3, [r3, #28]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d02d      	beq.n	8006960 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690c:	431a      	orrs	r2, r3
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006912:	431a      	orrs	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006918:	431a      	orrs	r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	695b      	ldr	r3, [r3, #20]
 800691e:	049b      	lsls	r3, r3, #18
 8006920:	431a      	orrs	r2, r3
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	431a      	orrs	r2, r3
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	431a      	orrs	r2, r3
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	431a      	orrs	r2, r3
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	431a      	orrs	r2, r3
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	ea42 0103 	orr.w	r1, r2, r3
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	430a      	orrs	r2, r1
 800694a:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006952:	d078      	beq.n	8006a46 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	6852      	ldr	r2, [r2, #4]
 800695c:	619a      	str	r2, [r3, #24]
}
 800695e:	e072      	b.n	8006a46 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	431a      	orrs	r2, r3
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696e:	431a      	orrs	r2, r3
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	431a      	orrs	r2, r3
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	049b      	lsls	r3, r3, #18
 800697c:	431a      	orrs	r2, r3
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	431a      	orrs	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	431a      	orrs	r2, r3
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	431a      	orrs	r2, r3
 8006990:	68bb      	ldr	r3, [r7, #8]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	ea42 0103 	orr.w	r1, r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	430a      	orrs	r2, r1
 80069a0:	615a      	str	r2, [r3, #20]
}
 80069a2:	e050      	b.n	8006a46 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d02a      	beq.n	8006a02 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b4:	431a      	orrs	r2, r3
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ba:	431a      	orrs	r2, r3
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c0:	431a      	orrs	r2, r3
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	049b      	lsls	r3, r3, #18
 80069c8:	431a      	orrs	r2, r3
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6a1b      	ldr	r3, [r3, #32]
 80069ce:	431a      	orrs	r2, r3
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	431a      	orrs	r2, r3
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	431a      	orrs	r2, r3
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	699b      	ldr	r3, [r3, #24]
 80069e0:	ea42 0103 	orr.w	r1, r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	430a      	orrs	r2, r1
 80069ec:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069f4:	d027      	beq.n	8006a46 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	6852      	ldr	r2, [r2, #4]
 80069fe:	619a      	str	r2, [r3, #24]
}
 8006a00:	e021      	b.n	8006a46 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d01d      	beq.n	8006a46 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a12:	431a      	orrs	r2, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a1e:	431a      	orrs	r2, r3
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	695b      	ldr	r3, [r3, #20]
 8006a24:	049b      	lsls	r3, r3, #18
 8006a26:	431a      	orrs	r2, r3
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	69db      	ldr	r3, [r3, #28]
 8006a32:	431a      	orrs	r2, r3
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	699b      	ldr	r3, [r3, #24]
 8006a38:	ea42 0103 	orr.w	r1, r2, r3
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	430a      	orrs	r2, r1
 8006a44:	615a      	str	r2, [r3, #20]
}
 8006a46:	bf00      	nop
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e29b      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	f000 8087 	beq.w	8006b86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006a78:	4b96      	ldr	r3, [pc, #600]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	f003 030c 	and.w	r3, r3, #12
 8006a80:	2b04      	cmp	r3, #4
 8006a82:	d00c      	beq.n	8006a9e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a84:	4b93      	ldr	r3, [pc, #588]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f003 030c 	and.w	r3, r3, #12
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d112      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x62>
 8006a90:	4b90      	ldr	r3, [pc, #576]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a9c:	d10b      	bne.n	8006ab6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a9e:	4b8d      	ldr	r3, [pc, #564]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d06c      	beq.n	8006b84 <HAL_RCC_OscConfig+0x130>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d168      	bne.n	8006b84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e275      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006abe:	d106      	bne.n	8006ace <HAL_RCC_OscConfig+0x7a>
 8006ac0:	4b84      	ldr	r3, [pc, #528]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a83      	ldr	r2, [pc, #524]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e02e      	b.n	8006b2c <HAL_RCC_OscConfig+0xd8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10c      	bne.n	8006af0 <HAL_RCC_OscConfig+0x9c>
 8006ad6:	4b7f      	ldr	r3, [pc, #508]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a7e      	ldr	r2, [pc, #504]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae0:	6013      	str	r3, [r2, #0]
 8006ae2:	4b7c      	ldr	r3, [pc, #496]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a7b      	ldr	r2, [pc, #492]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006ae8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006aec:	6013      	str	r3, [r2, #0]
 8006aee:	e01d      	b.n	8006b2c <HAL_RCC_OscConfig+0xd8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006af8:	d10c      	bne.n	8006b14 <HAL_RCC_OscConfig+0xc0>
 8006afa:	4b76      	ldr	r3, [pc, #472]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a75      	ldr	r2, [pc, #468]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	4b73      	ldr	r3, [pc, #460]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a72      	ldr	r2, [pc, #456]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b10:	6013      	str	r3, [r2, #0]
 8006b12:	e00b      	b.n	8006b2c <HAL_RCC_OscConfig+0xd8>
 8006b14:	4b6f      	ldr	r3, [pc, #444]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a6e      	ldr	r2, [pc, #440]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1e:	6013      	str	r3, [r2, #0]
 8006b20:	4b6c      	ldr	r3, [pc, #432]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a6b      	ldr	r2, [pc, #428]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d013      	beq.n	8006b5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b34:	f7fb fc94 	bl	8002460 <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7fb fc90 	bl	8002460 <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	; 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e229      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b4e:	4b61      	ldr	r3, [pc, #388]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d0f0      	beq.n	8006b3c <HAL_RCC_OscConfig+0xe8>
 8006b5a:	e014      	b.n	8006b86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b5c:	f7fb fc80 	bl	8002460 <HAL_GetTick>
 8006b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b62:	e008      	b.n	8006b76 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b64:	f7fb fc7c 	bl	8002460 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b64      	cmp	r3, #100	; 0x64
 8006b70:	d901      	bls.n	8006b76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006b72:	2303      	movs	r3, #3
 8006b74:	e215      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b76:	4b57      	ldr	r3, [pc, #348]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1f0      	bne.n	8006b64 <HAL_RCC_OscConfig+0x110>
 8006b82:	e000      	b.n	8006b86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d069      	beq.n	8006c66 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006b92:	4b50      	ldr	r3, [pc, #320]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	f003 030c 	and.w	r3, r3, #12
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00b      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b9e:	4b4d      	ldr	r3, [pc, #308]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f003 030c 	and.w	r3, r3, #12
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d11c      	bne.n	8006be4 <HAL_RCC_OscConfig+0x190>
 8006baa:	4b4a      	ldr	r3, [pc, #296]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d116      	bne.n	8006be4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bb6:	4b47      	ldr	r3, [pc, #284]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0302 	and.w	r3, r3, #2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d005      	beq.n	8006bce <HAL_RCC_OscConfig+0x17a>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	68db      	ldr	r3, [r3, #12]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d001      	beq.n	8006bce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e1e9      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bce:	4b41      	ldr	r3, [pc, #260]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	493d      	ldr	r1, [pc, #244]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006be2:	e040      	b.n	8006c66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d023      	beq.n	8006c34 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bec:	4b39      	ldr	r3, [pc, #228]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a38      	ldr	r2, [pc, #224]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006bf2:	f043 0301 	orr.w	r3, r3, #1
 8006bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf8:	f7fb fc32 	bl	8002460 <HAL_GetTick>
 8006bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bfe:	e008      	b.n	8006c12 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c00:	f7fb fc2e 	bl	8002460 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d901      	bls.n	8006c12 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	e1c7      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c12:	4b30      	ldr	r3, [pc, #192]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0f0      	beq.n	8006c00 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1e:	4b2d      	ldr	r3, [pc, #180]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4929      	ldr	r1, [pc, #164]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	600b      	str	r3, [r1, #0]
 8006c32:	e018      	b.n	8006c66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c34:	4b27      	ldr	r3, [pc, #156]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a26      	ldr	r2, [pc, #152]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006c3a:	f023 0301 	bic.w	r3, r3, #1
 8006c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c40:	f7fb fc0e 	bl	8002460 <HAL_GetTick>
 8006c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c46:	e008      	b.n	8006c5a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c48:	f7fb fc0a 	bl	8002460 <HAL_GetTick>
 8006c4c:	4602      	mov	r2, r0
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d901      	bls.n	8006c5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c56:	2303      	movs	r3, #3
 8006c58:	e1a3      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c5a:	4b1e      	ldr	r3, [pc, #120]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f003 0302 	and.w	r3, r3, #2
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d1f0      	bne.n	8006c48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 0308 	and.w	r3, r3, #8
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d038      	beq.n	8006ce4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d019      	beq.n	8006cae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c7a:	4b16      	ldr	r3, [pc, #88]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c7e:	4a15      	ldr	r2, [pc, #84]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006c80:	f043 0301 	orr.w	r3, r3, #1
 8006c84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c86:	f7fb fbeb 	bl	8002460 <HAL_GetTick>
 8006c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c8c:	e008      	b.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c8e:	f7fb fbe7 	bl	8002460 <HAL_GetTick>
 8006c92:	4602      	mov	r2, r0
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	1ad3      	subs	r3, r2, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d901      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e180      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ca0:	4b0c      	ldr	r3, [pc, #48]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d0f0      	beq.n	8006c8e <HAL_RCC_OscConfig+0x23a>
 8006cac:	e01a      	b.n	8006ce4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cb2:	4a08      	ldr	r2, [pc, #32]	; (8006cd4 <HAL_RCC_OscConfig+0x280>)
 8006cb4:	f023 0301 	bic.w	r3, r3, #1
 8006cb8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cba:	f7fb fbd1 	bl	8002460 <HAL_GetTick>
 8006cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cc0:	e00a      	b.n	8006cd8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cc2:	f7fb fbcd 	bl	8002460 <HAL_GetTick>
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	2b02      	cmp	r3, #2
 8006cce:	d903      	bls.n	8006cd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006cd0:	2303      	movs	r3, #3
 8006cd2:	e166      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
 8006cd4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cd8:	4b92      	ldr	r3, [pc, #584]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006cda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1ee      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0304 	and.w	r3, r3, #4
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	f000 80a4 	beq.w	8006e3a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cf2:	4b8c      	ldr	r3, [pc, #560]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10d      	bne.n	8006d1a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cfe:	4b89      	ldr	r3, [pc, #548]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	4a88      	ldr	r2, [pc, #544]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d08:	6413      	str	r3, [r2, #64]	; 0x40
 8006d0a:	4b86      	ldr	r3, [pc, #536]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d12:	60bb      	str	r3, [r7, #8]
 8006d14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d16:	2301      	movs	r3, #1
 8006d18:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d1a:	4b83      	ldr	r3, [pc, #524]	; (8006f28 <HAL_RCC_OscConfig+0x4d4>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d118      	bne.n	8006d58 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006d26:	4b80      	ldr	r3, [pc, #512]	; (8006f28 <HAL_RCC_OscConfig+0x4d4>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a7f      	ldr	r2, [pc, #508]	; (8006f28 <HAL_RCC_OscConfig+0x4d4>)
 8006d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d32:	f7fb fb95 	bl	8002460 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d3a:	f7fb fb91 	bl	8002460 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b64      	cmp	r3, #100	; 0x64
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e12a      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d4c:	4b76      	ldr	r3, [pc, #472]	; (8006f28 <HAL_RCC_OscConfig+0x4d4>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0f0      	beq.n	8006d3a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d106      	bne.n	8006d6e <HAL_RCC_OscConfig+0x31a>
 8006d60:	4b70      	ldr	r3, [pc, #448]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	4a6f      	ldr	r2, [pc, #444]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d66:	f043 0301 	orr.w	r3, r3, #1
 8006d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6c:	e02d      	b.n	8006dca <HAL_RCC_OscConfig+0x376>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10c      	bne.n	8006d90 <HAL_RCC_OscConfig+0x33c>
 8006d76:	4b6b      	ldr	r3, [pc, #428]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	4a6a      	ldr	r2, [pc, #424]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d7c:	f023 0301 	bic.w	r3, r3, #1
 8006d80:	6713      	str	r3, [r2, #112]	; 0x70
 8006d82:	4b68      	ldr	r3, [pc, #416]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d86:	4a67      	ldr	r2, [pc, #412]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d88:	f023 0304 	bic.w	r3, r3, #4
 8006d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d8e:	e01c      	b.n	8006dca <HAL_RCC_OscConfig+0x376>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	2b05      	cmp	r3, #5
 8006d96:	d10c      	bne.n	8006db2 <HAL_RCC_OscConfig+0x35e>
 8006d98:	4b62      	ldr	r3, [pc, #392]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9c:	4a61      	ldr	r2, [pc, #388]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006d9e:	f043 0304 	orr.w	r3, r3, #4
 8006da2:	6713      	str	r3, [r2, #112]	; 0x70
 8006da4:	4b5f      	ldr	r3, [pc, #380]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da8:	4a5e      	ldr	r2, [pc, #376]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006daa:	f043 0301 	orr.w	r3, r3, #1
 8006dae:	6713      	str	r3, [r2, #112]	; 0x70
 8006db0:	e00b      	b.n	8006dca <HAL_RCC_OscConfig+0x376>
 8006db2:	4b5c      	ldr	r3, [pc, #368]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	4a5b      	ldr	r2, [pc, #364]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dbe:	4b59      	ldr	r3, [pc, #356]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	4a58      	ldr	r2, [pc, #352]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006dc4:	f023 0304 	bic.w	r3, r3, #4
 8006dc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d015      	beq.n	8006dfe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd2:	f7fb fb45 	bl	8002460 <HAL_GetTick>
 8006dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dd8:	e00a      	b.n	8006df0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dda:	f7fb fb41 	bl	8002460 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d901      	bls.n	8006df0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e0d8      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006df0:	4b4c      	ldr	r3, [pc, #304]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df4:	f003 0302 	and.w	r3, r3, #2
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0ee      	beq.n	8006dda <HAL_RCC_OscConfig+0x386>
 8006dfc:	e014      	b.n	8006e28 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dfe:	f7fb fb2f 	bl	8002460 <HAL_GetTick>
 8006e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e04:	e00a      	b.n	8006e1c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e06:	f7fb fb2b 	bl	8002460 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d901      	bls.n	8006e1c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e18:	2303      	movs	r3, #3
 8006e1a:	e0c2      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e1c:	4b41      	ldr	r3, [pc, #260]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e20:	f003 0302 	and.w	r3, r3, #2
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1ee      	bne.n	8006e06 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e28:	7dfb      	ldrb	r3, [r7, #23]
 8006e2a:	2b01      	cmp	r3, #1
 8006e2c:	d105      	bne.n	8006e3a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e2e:	4b3d      	ldr	r3, [pc, #244]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	4a3c      	ldr	r2, [pc, #240]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	699b      	ldr	r3, [r3, #24]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80ae 	beq.w	8006fa0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e44:	4b37      	ldr	r3, [pc, #220]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006e46:	689b      	ldr	r3, [r3, #8]
 8006e48:	f003 030c 	and.w	r3, r3, #12
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d06d      	beq.n	8006f2c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	699b      	ldr	r3, [r3, #24]
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d14b      	bne.n	8006ef0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e58:	4b32      	ldr	r3, [pc, #200]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a31      	ldr	r2, [pc, #196]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e64:	f7fb fafc 	bl	8002460 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e6a:	e008      	b.n	8006e7e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e6c:	f7fb faf8 	bl	8002460 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d901      	bls.n	8006e7e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e091      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e7e:	4b29      	ldr	r3, [pc, #164]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d1f0      	bne.n	8006e6c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	69da      	ldr	r2, [r3, #28]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	431a      	orrs	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	019b      	lsls	r3, r3, #6
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea0:	085b      	lsrs	r3, r3, #1
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	041b      	lsls	r3, r3, #16
 8006ea6:	431a      	orrs	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eac:	061b      	lsls	r3, r3, #24
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb4:	071b      	lsls	r3, r3, #28
 8006eb6:	491b      	ldr	r1, [pc, #108]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ebc:	4b19      	ldr	r3, [pc, #100]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a18      	ldr	r2, [pc, #96]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec8:	f7fb faca 	bl	8002460 <HAL_GetTick>
 8006ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ece:	e008      	b.n	8006ee2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed0:	f7fb fac6 	bl	8002460 <HAL_GetTick>
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	d901      	bls.n	8006ee2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006ede:	2303      	movs	r3, #3
 8006ee0:	e05f      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ee2:	4b10      	ldr	r3, [pc, #64]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f0      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x47c>
 8006eee:	e057      	b.n	8006fa0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ef0:	4b0c      	ldr	r3, [pc, #48]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a0b      	ldr	r2, [pc, #44]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006ef6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006efa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006efc:	f7fb fab0 	bl	8002460 <HAL_GetTick>
 8006f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f02:	e008      	b.n	8006f16 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f04:	f7fb faac 	bl	8002460 <HAL_GetTick>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	1ad3      	subs	r3, r2, r3
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e045      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f16:	4b03      	ldr	r3, [pc, #12]	; (8006f24 <HAL_RCC_OscConfig+0x4d0>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1f0      	bne.n	8006f04 <HAL_RCC_OscConfig+0x4b0>
 8006f22:	e03d      	b.n	8006fa0 <HAL_RCC_OscConfig+0x54c>
 8006f24:	40023800 	.word	0x40023800
 8006f28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006f2c:	4b1f      	ldr	r3, [pc, #124]	; (8006fac <HAL_RCC_OscConfig+0x558>)
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d030      	beq.n	8006f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d129      	bne.n	8006f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d122      	bne.n	8006f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f62:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d119      	bne.n	8006f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f72:	085b      	lsrs	r3, r3, #1
 8006f74:	3b01      	subs	r3, #1
 8006f76:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d10f      	bne.n	8006f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f86:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d107      	bne.n	8006f9c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d001      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	e000      	b.n	8006fa2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3718      	adds	r7, #24
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	40023800 	.word	0x40023800

08006fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d101      	bne.n	8006fc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e0d0      	b.n	800716a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006fc8:	4b6a      	ldr	r3, [pc, #424]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 030f 	and.w	r3, r3, #15
 8006fd0:	683a      	ldr	r2, [r7, #0]
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d910      	bls.n	8006ff8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fd6:	4b67      	ldr	r3, [pc, #412]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f023 020f 	bic.w	r2, r3, #15
 8006fde:	4965      	ldr	r1, [pc, #404]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fe6:	4b63      	ldr	r3, [pc, #396]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 030f 	and.w	r3, r3, #15
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d001      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e0b8      	b.n	800716a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d020      	beq.n	8007046 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007010:	4b59      	ldr	r3, [pc, #356]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	4a58      	ldr	r2, [pc, #352]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007016:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800701a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0308 	and.w	r3, r3, #8
 8007024:	2b00      	cmp	r3, #0
 8007026:	d005      	beq.n	8007034 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007028:	4b53      	ldr	r3, [pc, #332]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	4a52      	ldr	r2, [pc, #328]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 800702e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007032:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007034:	4b50      	ldr	r3, [pc, #320]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	494d      	ldr	r1, [pc, #308]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007042:	4313      	orrs	r3, r2
 8007044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d040      	beq.n	80070d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d107      	bne.n	800706a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800705a:	4b47      	ldr	r3, [pc, #284]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d115      	bne.n	8007092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007066:	2301      	movs	r3, #1
 8007068:	e07f      	b.n	800716a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d107      	bne.n	8007082 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007072:	4b41      	ldr	r3, [pc, #260]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d109      	bne.n	8007092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e073      	b.n	800716a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007082:	4b3d      	ldr	r3, [pc, #244]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 0302 	and.w	r3, r3, #2
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e06b      	b.n	800716a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007092:	4b39      	ldr	r3, [pc, #228]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f023 0203 	bic.w	r2, r3, #3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	4936      	ldr	r1, [pc, #216]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a4:	f7fb f9dc 	bl	8002460 <HAL_GetTick>
 80070a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070aa:	e00a      	b.n	80070c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070ac:	f7fb f9d8 	bl	8002460 <HAL_GetTick>
 80070b0:	4602      	mov	r2, r0
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	1ad3      	subs	r3, r2, r3
 80070b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e053      	b.n	800716a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070c2:	4b2d      	ldr	r3, [pc, #180]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	f003 020c 	and.w	r2, r3, #12
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	009b      	lsls	r3, r3, #2
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d1eb      	bne.n	80070ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070d4:	4b27      	ldr	r3, [pc, #156]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f003 030f 	and.w	r3, r3, #15
 80070dc:	683a      	ldr	r2, [r7, #0]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d210      	bcs.n	8007104 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070e2:	4b24      	ldr	r3, [pc, #144]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f023 020f 	bic.w	r2, r3, #15
 80070ea:	4922      	ldr	r1, [pc, #136]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070f2:	4b20      	ldr	r3, [pc, #128]	; (8007174 <HAL_RCC_ClockConfig+0x1c4>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d001      	beq.n	8007104 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e032      	b.n	800716a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007110:	4b19      	ldr	r3, [pc, #100]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	4916      	ldr	r1, [pc, #88]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 800711e:	4313      	orrs	r3, r2
 8007120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d009      	beq.n	8007142 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800712e:	4b12      	ldr	r3, [pc, #72]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	00db      	lsls	r3, r3, #3
 800713c:	490e      	ldr	r1, [pc, #56]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 800713e:	4313      	orrs	r3, r2
 8007140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007142:	f000 f821 	bl	8007188 <HAL_RCC_GetSysClockFreq>
 8007146:	4602      	mov	r2, r0
 8007148:	4b0b      	ldr	r3, [pc, #44]	; (8007178 <HAL_RCC_ClockConfig+0x1c8>)
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	091b      	lsrs	r3, r3, #4
 800714e:	f003 030f 	and.w	r3, r3, #15
 8007152:	490a      	ldr	r1, [pc, #40]	; (800717c <HAL_RCC_ClockConfig+0x1cc>)
 8007154:	5ccb      	ldrb	r3, [r1, r3]
 8007156:	fa22 f303 	lsr.w	r3, r2, r3
 800715a:	4a09      	ldr	r2, [pc, #36]	; (8007180 <HAL_RCC_ClockConfig+0x1d0>)
 800715c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800715e:	4b09      	ldr	r3, [pc, #36]	; (8007184 <HAL_RCC_ClockConfig+0x1d4>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4618      	mov	r0, r3
 8007164:	f7fa fdb8 	bl	8001cd8 <HAL_InitTick>

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	3710      	adds	r7, #16
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	40023c00 	.word	0x40023c00
 8007178:	40023800 	.word	0x40023800
 800717c:	0802e440 	.word	0x0802e440
 8007180:	20000008 	.word	0x20000008
 8007184:	2000000c 	.word	0x2000000c

08007188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800718c:	b090      	sub	sp, #64	; 0x40
 800718e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007190:	2300      	movs	r3, #0
 8007192:	637b      	str	r3, [r7, #52]	; 0x34
 8007194:	2300      	movs	r3, #0
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007198:	2300      	movs	r3, #0
 800719a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800719c:	2300      	movs	r3, #0
 800719e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071a0:	4b59      	ldr	r3, [pc, #356]	; (8007308 <HAL_RCC_GetSysClockFreq+0x180>)
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f003 030c 	and.w	r3, r3, #12
 80071a8:	2b08      	cmp	r3, #8
 80071aa:	d00d      	beq.n	80071c8 <HAL_RCC_GetSysClockFreq+0x40>
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	f200 80a1 	bhi.w	80072f4 <HAL_RCC_GetSysClockFreq+0x16c>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <HAL_RCC_GetSysClockFreq+0x34>
 80071b6:	2b04      	cmp	r3, #4
 80071b8:	d003      	beq.n	80071c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80071ba:	e09b      	b.n	80072f4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071bc:	4b53      	ldr	r3, [pc, #332]	; (800730c <HAL_RCC_GetSysClockFreq+0x184>)
 80071be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071c0:	e09b      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071c2:	4b53      	ldr	r3, [pc, #332]	; (8007310 <HAL_RCC_GetSysClockFreq+0x188>)
 80071c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071c6:	e098      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071c8:	4b4f      	ldr	r3, [pc, #316]	; (8007308 <HAL_RCC_GetSysClockFreq+0x180>)
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071d0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80071d2:	4b4d      	ldr	r3, [pc, #308]	; (8007308 <HAL_RCC_GetSysClockFreq+0x180>)
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d028      	beq.n	8007230 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071de:	4b4a      	ldr	r3, [pc, #296]	; (8007308 <HAL_RCC_GetSysClockFreq+0x180>)
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	099b      	lsrs	r3, r3, #6
 80071e4:	2200      	movs	r2, #0
 80071e6:	623b      	str	r3, [r7, #32]
 80071e8:	627a      	str	r2, [r7, #36]	; 0x24
 80071ea:	6a3b      	ldr	r3, [r7, #32]
 80071ec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071f0:	2100      	movs	r1, #0
 80071f2:	4b47      	ldr	r3, [pc, #284]	; (8007310 <HAL_RCC_GetSysClockFreq+0x188>)
 80071f4:	fb03 f201 	mul.w	r2, r3, r1
 80071f8:	2300      	movs	r3, #0
 80071fa:	fb00 f303 	mul.w	r3, r0, r3
 80071fe:	4413      	add	r3, r2
 8007200:	4a43      	ldr	r2, [pc, #268]	; (8007310 <HAL_RCC_GetSysClockFreq+0x188>)
 8007202:	fba0 1202 	umull	r1, r2, r0, r2
 8007206:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007208:	460a      	mov	r2, r1
 800720a:	62ba      	str	r2, [r7, #40]	; 0x28
 800720c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800720e:	4413      	add	r3, r2
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007214:	2200      	movs	r2, #0
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	61fa      	str	r2, [r7, #28]
 800721a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800721e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007222:	f7f9 f8bf 	bl	80003a4 <__aeabi_uldivmod>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	4613      	mov	r3, r2
 800722c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800722e:	e053      	b.n	80072d8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007230:	4b35      	ldr	r3, [pc, #212]	; (8007308 <HAL_RCC_GetSysClockFreq+0x180>)
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	099b      	lsrs	r3, r3, #6
 8007236:	2200      	movs	r2, #0
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	617a      	str	r2, [r7, #20]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007242:	f04f 0b00 	mov.w	fp, #0
 8007246:	4652      	mov	r2, sl
 8007248:	465b      	mov	r3, fp
 800724a:	f04f 0000 	mov.w	r0, #0
 800724e:	f04f 0100 	mov.w	r1, #0
 8007252:	0159      	lsls	r1, r3, #5
 8007254:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007258:	0150      	lsls	r0, r2, #5
 800725a:	4602      	mov	r2, r0
 800725c:	460b      	mov	r3, r1
 800725e:	ebb2 080a 	subs.w	r8, r2, sl
 8007262:	eb63 090b 	sbc.w	r9, r3, fp
 8007266:	f04f 0200 	mov.w	r2, #0
 800726a:	f04f 0300 	mov.w	r3, #0
 800726e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007272:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007276:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800727a:	ebb2 0408 	subs.w	r4, r2, r8
 800727e:	eb63 0509 	sbc.w	r5, r3, r9
 8007282:	f04f 0200 	mov.w	r2, #0
 8007286:	f04f 0300 	mov.w	r3, #0
 800728a:	00eb      	lsls	r3, r5, #3
 800728c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007290:	00e2      	lsls	r2, r4, #3
 8007292:	4614      	mov	r4, r2
 8007294:	461d      	mov	r5, r3
 8007296:	eb14 030a 	adds.w	r3, r4, sl
 800729a:	603b      	str	r3, [r7, #0]
 800729c:	eb45 030b 	adc.w	r3, r5, fp
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	f04f 0200 	mov.w	r2, #0
 80072a6:	f04f 0300 	mov.w	r3, #0
 80072aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072ae:	4629      	mov	r1, r5
 80072b0:	028b      	lsls	r3, r1, #10
 80072b2:	4621      	mov	r1, r4
 80072b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072b8:	4621      	mov	r1, r4
 80072ba:	028a      	lsls	r2, r1, #10
 80072bc:	4610      	mov	r0, r2
 80072be:	4619      	mov	r1, r3
 80072c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c2:	2200      	movs	r2, #0
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	60fa      	str	r2, [r7, #12]
 80072c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072cc:	f7f9 f86a 	bl	80003a4 <__aeabi_uldivmod>
 80072d0:	4602      	mov	r2, r0
 80072d2:	460b      	mov	r3, r1
 80072d4:	4613      	mov	r3, r2
 80072d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80072d8:	4b0b      	ldr	r3, [pc, #44]	; (8007308 <HAL_RCC_GetSysClockFreq+0x180>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	0c1b      	lsrs	r3, r3, #16
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	3301      	adds	r3, #1
 80072e4:	005b      	lsls	r3, r3, #1
 80072e6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80072e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072f2:	e002      	b.n	80072fa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072f4:	4b05      	ldr	r3, [pc, #20]	; (800730c <HAL_RCC_GetSysClockFreq+0x184>)
 80072f6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80072f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3740      	adds	r7, #64	; 0x40
 8007300:	46bd      	mov	sp, r7
 8007302:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007306:	bf00      	nop
 8007308:	40023800 	.word	0x40023800
 800730c:	00f42400 	.word	0x00f42400
 8007310:	017d7840 	.word	0x017d7840

08007314 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007314:	b480      	push	{r7}
 8007316:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007318:	4b03      	ldr	r3, [pc, #12]	; (8007328 <HAL_RCC_GetHCLKFreq+0x14>)
 800731a:	681b      	ldr	r3, [r3, #0]
}
 800731c:	4618      	mov	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	20000008 	.word	0x20000008

0800732c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007330:	f7ff fff0 	bl	8007314 <HAL_RCC_GetHCLKFreq>
 8007334:	4602      	mov	r2, r0
 8007336:	4b05      	ldr	r3, [pc, #20]	; (800734c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	0a9b      	lsrs	r3, r3, #10
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	4903      	ldr	r1, [pc, #12]	; (8007350 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007342:	5ccb      	ldrb	r3, [r1, r3]
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007348:	4618      	mov	r0, r3
 800734a:	bd80      	pop	{r7, pc}
 800734c:	40023800 	.word	0x40023800
 8007350:	0802e450 	.word	0x0802e450

08007354 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	220f      	movs	r2, #15
 8007362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007364:	4b12      	ldr	r3, [pc, #72]	; (80073b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007366:	689b      	ldr	r3, [r3, #8]
 8007368:	f003 0203 	and.w	r2, r3, #3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007370:	4b0f      	ldr	r3, [pc, #60]	; (80073b0 <HAL_RCC_GetClockConfig+0x5c>)
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800737c:	4b0c      	ldr	r3, [pc, #48]	; (80073b0 <HAL_RCC_GetClockConfig+0x5c>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007388:	4b09      	ldr	r3, [pc, #36]	; (80073b0 <HAL_RCC_GetClockConfig+0x5c>)
 800738a:	689b      	ldr	r3, [r3, #8]
 800738c:	08db      	lsrs	r3, r3, #3
 800738e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007396:	4b07      	ldr	r3, [pc, #28]	; (80073b4 <HAL_RCC_GetClockConfig+0x60>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f003 020f 	and.w	r2, r3, #15
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	601a      	str	r2, [r3, #0]
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	40023800 	.word	0x40023800
 80073b4:	40023c00 	.word	0x40023c00

080073b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80073c0:	2300      	movs	r3, #0
 80073c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80073c8:	2300      	movs	r3, #0
 80073ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80073cc:	2300      	movs	r3, #0
 80073ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0301 	and.w	r3, r3, #1
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d012      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80073e0:	4b69      	ldr	r3, [pc, #420]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	4a68      	ldr	r2, [pc, #416]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80073ea:	6093      	str	r3, [r2, #8]
 80073ec:	4b66      	ldr	r3, [pc, #408]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ee:	689a      	ldr	r2, [r3, #8]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073f4:	4964      	ldr	r1, [pc, #400]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007402:	2301      	movs	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d017      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007412:	4b5d      	ldr	r3, [pc, #372]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007420:	4959      	ldr	r1, [pc, #356]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007422:	4313      	orrs	r3, r2
 8007424:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800742c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007430:	d101      	bne.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007432:	2301      	movs	r3, #1
 8007434:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800743e:	2301      	movs	r3, #1
 8007440:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d017      	beq.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800744e:	4b4e      	ldr	r3, [pc, #312]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007454:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	494a      	ldr	r1, [pc, #296]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800745e:	4313      	orrs	r3, r2
 8007460:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800746c:	d101      	bne.n	8007472 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800746e:	2301      	movs	r3, #1
 8007470:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	2b00      	cmp	r3, #0
 8007478:	d101      	bne.n	800747e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800747a:	2301      	movs	r3, #1
 800747c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800748a:	2301      	movs	r3, #1
 800748c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b00      	cmp	r3, #0
 8007498:	f000 808b 	beq.w	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800749c:	4b3a      	ldr	r3, [pc, #232]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800749e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a0:	4a39      	ldr	r2, [pc, #228]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074a6:	6413      	str	r3, [r2, #64]	; 0x40
 80074a8:	4b37      	ldr	r3, [pc, #220]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074b0:	60bb      	str	r3, [r7, #8]
 80074b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80074b4:	4b35      	ldr	r3, [pc, #212]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a34      	ldr	r2, [pc, #208]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80074be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074c0:	f7fa ffce 	bl	8002460 <HAL_GetTick>
 80074c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074c6:	e008      	b.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074c8:	f7fa ffca 	bl	8002460 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b64      	cmp	r3, #100	; 0x64
 80074d4:	d901      	bls.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e38f      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80074da:	4b2c      	ldr	r3, [pc, #176]	; (800758c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0f0      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80074e6:	4b28      	ldr	r3, [pc, #160]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d035      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	429a      	cmp	r2, r3
 8007502:	d02e      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007504:	4b20      	ldr	r3, [pc, #128]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800750c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800750e:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	4a1d      	ldr	r2, [pc, #116]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007514:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007518:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800751a:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800751c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751e:	4a1a      	ldr	r2, [pc, #104]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007520:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007524:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800752c:	4b16      	ldr	r3, [pc, #88]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800752e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007530:	f003 0301 	and.w	r3, r3, #1
 8007534:	2b01      	cmp	r3, #1
 8007536:	d114      	bne.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007538:	f7fa ff92 	bl	8002460 <HAL_GetTick>
 800753c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800753e:	e00a      	b.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007540:	f7fa ff8e 	bl	8002460 <HAL_GetTick>
 8007544:	4602      	mov	r2, r0
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f241 3288 	movw	r2, #5000	; 0x1388
 800754e:	4293      	cmp	r3, r2
 8007550:	d901      	bls.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e351      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007556:	4b0c      	ldr	r3, [pc, #48]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d0ee      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800756e:	d111      	bne.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007570:	4b05      	ldr	r3, [pc, #20]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800757c:	4b04      	ldr	r3, [pc, #16]	; (8007590 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800757e:	400b      	ands	r3, r1
 8007580:	4901      	ldr	r1, [pc, #4]	; (8007588 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007582:	4313      	orrs	r3, r2
 8007584:	608b      	str	r3, [r1, #8]
 8007586:	e00b      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007588:	40023800 	.word	0x40023800
 800758c:	40007000 	.word	0x40007000
 8007590:	0ffffcff 	.word	0x0ffffcff
 8007594:	4bac      	ldr	r3, [pc, #688]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	4aab      	ldr	r2, [pc, #684]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800759a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800759e:	6093      	str	r3, [r2, #8]
 80075a0:	4ba9      	ldr	r3, [pc, #676]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ac:	49a6      	ldr	r1, [pc, #664]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d010      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80075be:	4ba2      	ldr	r3, [pc, #648]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075c4:	4aa0      	ldr	r2, [pc, #640]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80075ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80075ce:	4b9e      	ldr	r3, [pc, #632]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d8:	499b      	ldr	r1, [pc, #620]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075da:	4313      	orrs	r3, r2
 80075dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00a      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80075ec:	4b96      	ldr	r3, [pc, #600]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075fa:	4993      	ldr	r1, [pc, #588]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00a      	beq.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800760e:	4b8e      	ldr	r3, [pc, #568]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007614:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800761c:	498a      	ldr	r1, [pc, #552]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800761e:	4313      	orrs	r3, r2
 8007620:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00a      	beq.n	8007646 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007630:	4b85      	ldr	r3, [pc, #532]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007636:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800763e:	4982      	ldr	r1, [pc, #520]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007640:	4313      	orrs	r3, r2
 8007642:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d00a      	beq.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007652:	4b7d      	ldr	r3, [pc, #500]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007654:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007658:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007660:	4979      	ldr	r1, [pc, #484]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007662:	4313      	orrs	r3, r2
 8007664:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d00a      	beq.n	800768a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007674:	4b74      	ldr	r3, [pc, #464]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767a:	f023 0203 	bic.w	r2, r3, #3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007682:	4971      	ldr	r1, [pc, #452]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007684:	4313      	orrs	r3, r2
 8007686:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00a      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007696:	4b6c      	ldr	r3, [pc, #432]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769c:	f023 020c 	bic.w	r2, r3, #12
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a4:	4968      	ldr	r1, [pc, #416]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00a      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076b8:	4b63      	ldr	r3, [pc, #396]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076c6:	4960      	ldr	r1, [pc, #384]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00a      	beq.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80076da:	4b5b      	ldr	r3, [pc, #364]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e8:	4957      	ldr	r1, [pc, #348]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00a      	beq.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80076fc:	4b52      	ldr	r3, [pc, #328]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007702:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	494f      	ldr	r1, [pc, #316]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800770c:	4313      	orrs	r3, r2
 800770e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800771a:	2b00      	cmp	r3, #0
 800771c:	d00a      	beq.n	8007734 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800771e:	4b4a      	ldr	r3, [pc, #296]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007724:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772c:	4946      	ldr	r1, [pc, #280]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800772e:	4313      	orrs	r3, r2
 8007730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007740:	4b41      	ldr	r3, [pc, #260]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007746:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774e:	493e      	ldr	r1, [pc, #248]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007750:	4313      	orrs	r3, r2
 8007752:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00a      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007762:	4b39      	ldr	r3, [pc, #228]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007768:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007770:	4935      	ldr	r1, [pc, #212]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007772:	4313      	orrs	r3, r2
 8007774:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007784:	4b30      	ldr	r3, [pc, #192]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800778a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007792:	492d      	ldr	r1, [pc, #180]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007794:	4313      	orrs	r3, r2
 8007796:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d011      	beq.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80077a6:	4b28      	ldr	r3, [pc, #160]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077b4:	4924      	ldr	r1, [pc, #144]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077c4:	d101      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80077c6:	2301      	movs	r3, #1
 80077c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f003 0308 	and.w	r3, r3, #8
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80077d6:	2301      	movs	r3, #1
 80077d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d00a      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077e6:	4b18      	ldr	r3, [pc, #96]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077f4:	4914      	ldr	r1, [pc, #80]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00b      	beq.n	8007820 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007808:	4b0f      	ldr	r3, [pc, #60]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800780a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800780e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007818:	490b      	ldr	r1, [pc, #44]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800781a:	4313      	orrs	r3, r2
 800781c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007828:	2b00      	cmp	r3, #0
 800782a:	d00f      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800782c:	4b06      	ldr	r3, [pc, #24]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007832:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783c:	4902      	ldr	r1, [pc, #8]	; (8007848 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800783e:	4313      	orrs	r3, r2
 8007840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007844:	e002      	b.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8007846:	bf00      	nop
 8007848:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007858:	4b8a      	ldr	r3, [pc, #552]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800785a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800785e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007868:	4986      	ldr	r1, [pc, #536]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800786a:	4313      	orrs	r3, r2
 800786c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800787c:	4b81      	ldr	r3, [pc, #516]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800787e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007882:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800788c:	497d      	ldr	r1, [pc, #500]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007894:	69fb      	ldr	r3, [r7, #28]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d006      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 80d6 	beq.w	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80078a8:	4b76      	ldr	r3, [pc, #472]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a75      	ldr	r2, [pc, #468]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80078b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078b4:	f7fa fdd4 	bl	8002460 <HAL_GetTick>
 80078b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078ba:	e008      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80078bc:	f7fa fdd0 	bl	8002460 <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b64      	cmp	r3, #100	; 0x64
 80078c8:	d901      	bls.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e195      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80078ce:	4b6d      	ldr	r3, [pc, #436]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f0      	bne.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0301 	and.w	r3, r3, #1
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d021      	beq.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d11d      	bne.n	800792a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80078ee:	4b65      	ldr	r3, [pc, #404]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f4:	0c1b      	lsrs	r3, r3, #16
 80078f6:	f003 0303 	and.w	r3, r3, #3
 80078fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078fc:	4b61      	ldr	r3, [pc, #388]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80078fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007902:	0e1b      	lsrs	r3, r3, #24
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	019a      	lsls	r2, r3, #6
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	041b      	lsls	r3, r3, #16
 8007914:	431a      	orrs	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	061b      	lsls	r3, r3, #24
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	071b      	lsls	r3, r3, #28
 8007922:	4958      	ldr	r1, [pc, #352]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007924:	4313      	orrs	r3, r2
 8007926:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d004      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800793a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800793e:	d00a      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007948:	2b00      	cmp	r3, #0
 800794a:	d02e      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007954:	d129      	bne.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007956:	4b4b      	ldr	r3, [pc, #300]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007958:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800795c:	0c1b      	lsrs	r3, r3, #16
 800795e:	f003 0303 	and.w	r3, r3, #3
 8007962:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007964:	4b47      	ldr	r3, [pc, #284]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800796a:	0f1b      	lsrs	r3, r3, #28
 800796c:	f003 0307 	and.w	r3, r3, #7
 8007970:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	019a      	lsls	r2, r3, #6
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	041b      	lsls	r3, r3, #16
 800797c:	431a      	orrs	r2, r3
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	68db      	ldr	r3, [r3, #12]
 8007982:	061b      	lsls	r3, r3, #24
 8007984:	431a      	orrs	r2, r3
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	071b      	lsls	r3, r3, #28
 800798a:	493e      	ldr	r1, [pc, #248]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800798c:	4313      	orrs	r3, r2
 800798e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007992:	4b3c      	ldr	r3, [pc, #240]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007998:	f023 021f 	bic.w	r2, r3, #31
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	3b01      	subs	r3, #1
 80079a2:	4938      	ldr	r1, [pc, #224]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01d      	beq.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80079b6:	4b33      	ldr	r3, [pc, #204]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079bc:	0e1b      	lsrs	r3, r3, #24
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80079c4:	4b2f      	ldr	r3, [pc, #188]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80079ca:	0f1b      	lsrs	r3, r3, #28
 80079cc:	f003 0307 	and.w	r3, r3, #7
 80079d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	019a      	lsls	r2, r3, #6
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	691b      	ldr	r3, [r3, #16]
 80079dc:	041b      	lsls	r3, r3, #16
 80079de:	431a      	orrs	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	061b      	lsls	r3, r3, #24
 80079e4:	431a      	orrs	r2, r3
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	071b      	lsls	r3, r3, #28
 80079ea:	4926      	ldr	r1, [pc, #152]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d011      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	019a      	lsls	r2, r3, #6
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	041b      	lsls	r3, r3, #16
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	061b      	lsls	r3, r3, #24
 8007a12:	431a      	orrs	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	071b      	lsls	r3, r3, #28
 8007a1a:	491a      	ldr	r1, [pc, #104]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007a22:	4b18      	ldr	r3, [pc, #96]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a17      	ldr	r2, [pc, #92]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a2e:	f7fa fd17 	bl	8002460 <HAL_GetTick>
 8007a32:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a34:	e008      	b.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a36:	f7fa fd13 	bl	8002460 <HAL_GetTick>
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	697b      	ldr	r3, [r7, #20]
 8007a3e:	1ad3      	subs	r3, r2, r3
 8007a40:	2b64      	cmp	r3, #100	; 0x64
 8007a42:	d901      	bls.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a44:	2303      	movs	r3, #3
 8007a46:	e0d8      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007a48:	4b0e      	ldr	r3, [pc, #56]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0f0      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	f040 80ce 	bne.w	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007a5c:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a08      	ldr	r2, [pc, #32]	; (8007a84 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a68:	f7fa fcfa 	bl	8002460 <HAL_GetTick>
 8007a6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a6e:	e00b      	b.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007a70:	f7fa fcf6 	bl	8002460 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b64      	cmp	r3, #100	; 0x64
 8007a7c:	d904      	bls.n	8007a88 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e0bb      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007a82:	bf00      	nop
 8007a84:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007a88:	4b5e      	ldr	r3, [pc, #376]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007a90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a94:	d0ec      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d009      	beq.n	8007abe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d02e      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d12a      	bne.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007abe:	4b51      	ldr	r3, [pc, #324]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac4:	0c1b      	lsrs	r3, r3, #16
 8007ac6:	f003 0303 	and.w	r3, r3, #3
 8007aca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007acc:	4b4d      	ldr	r3, [pc, #308]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad2:	0f1b      	lsrs	r3, r3, #28
 8007ad4:	f003 0307 	and.w	r3, r3, #7
 8007ad8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	019a      	lsls	r2, r3, #6
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	041b      	lsls	r3, r3, #16
 8007ae4:	431a      	orrs	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	699b      	ldr	r3, [r3, #24]
 8007aea:	061b      	lsls	r3, r3, #24
 8007aec:	431a      	orrs	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	071b      	lsls	r3, r3, #28
 8007af2:	4944      	ldr	r1, [pc, #272]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007af4:	4313      	orrs	r3, r2
 8007af6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007afa:	4b42      	ldr	r3, [pc, #264]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b00:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b08:	3b01      	subs	r3, #1
 8007b0a:	021b      	lsls	r3, r3, #8
 8007b0c:	493d      	ldr	r1, [pc, #244]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b0e:	4313      	orrs	r3, r2
 8007b10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d022      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007b24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b28:	d11d      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b2a:	4b36      	ldr	r3, [pc, #216]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b30:	0e1b      	lsrs	r3, r3, #24
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007b38:	4b32      	ldr	r3, [pc, #200]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b3e:	0f1b      	lsrs	r3, r3, #28
 8007b40:	f003 0307 	and.w	r3, r3, #7
 8007b44:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	019a      	lsls	r2, r3, #6
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	041b      	lsls	r3, r3, #16
 8007b52:	431a      	orrs	r2, r3
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	061b      	lsls	r3, r3, #24
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	071b      	lsls	r3, r3, #28
 8007b5e:	4929      	ldr	r1, [pc, #164]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b60:	4313      	orrs	r3, r2
 8007b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0308 	and.w	r3, r3, #8
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d028      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007b72:	4b24      	ldr	r3, [pc, #144]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b78:	0e1b      	lsrs	r3, r3, #24
 8007b7a:	f003 030f 	and.w	r3, r3, #15
 8007b7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007b80:	4b20      	ldr	r3, [pc, #128]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b86:	0c1b      	lsrs	r3, r3, #16
 8007b88:	f003 0303 	and.w	r3, r3, #3
 8007b8c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	695b      	ldr	r3, [r3, #20]
 8007b92:	019a      	lsls	r2, r3, #6
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	041b      	lsls	r3, r3, #16
 8007b98:	431a      	orrs	r2, r3
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	061b      	lsls	r3, r3, #24
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	69db      	ldr	r3, [r3, #28]
 8007ba4:	071b      	lsls	r3, r3, #28
 8007ba6:	4917      	ldr	r1, [pc, #92]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007bae:	4b15      	ldr	r3, [pc, #84]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bb4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bbc:	4911      	ldr	r1, [pc, #68]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007bc4:	4b0f      	ldr	r3, [pc, #60]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a0e      	ldr	r2, [pc, #56]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bd0:	f7fa fc46 	bl	8002460 <HAL_GetTick>
 8007bd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bd6:	e008      	b.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007bd8:	f7fa fc42 	bl	8002460 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b64      	cmp	r3, #100	; 0x64
 8007be4:	d901      	bls.n	8007bea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e007      	b.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007bea:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bf6:	d1ef      	bne.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007bf8:	2300      	movs	r3, #0
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3720      	adds	r7, #32
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	40023800 	.word	0x40023800

08007c08 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d101      	bne.n	8007c1c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e025      	b.n	8007c68 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d106      	bne.n	8007c36 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7f9 fba3 	bl	800137c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2202      	movs	r2, #2
 8007c3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3304      	adds	r3, #4
 8007c46:	4619      	mov	r1, r3
 8007c48:	4610      	mov	r0, r2
 8007c4a:	f001 fa07 	bl	800905c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6818      	ldr	r0, [r3, #0]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	461a      	mov	r2, r3
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	f001 fa5b 	bl	8009114 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007c82:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007c84:	7dfb      	ldrb	r3, [r7, #23]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d101      	bne.n	8007c8e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8007c8a:	2302      	movs	r3, #2
 8007c8c:	e021      	b.n	8007cd2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d002      	beq.n	8007c9a <HAL_SDRAM_SendCommand+0x2a>
 8007c94:	7dfb      	ldrb	r3, [r7, #23]
 8007c96:	2b05      	cmp	r3, #5
 8007c98:	d118      	bne.n	8007ccc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2202      	movs	r2, #2
 8007c9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	68b9      	ldr	r1, [r7, #8]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 fa9c 	bl	80091e8 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	d104      	bne.n	8007cc2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2205      	movs	r2, #5
 8007cbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007cc0:	e006      	b.n	8007cd0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8007cca:	e001      	b.n	8007cd0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3718      	adds	r7, #24
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b02      	cmp	r3, #2
 8007cee:	d101      	bne.n	8007cf4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8007cf0:	2302      	movs	r3, #2
 8007cf2:	e016      	b.n	8007d22 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	d10f      	bne.n	8007d20 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2202      	movs	r2, #2
 8007d04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f001 fa8e 	bl	8009230 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	e000      	b.n	8007d22 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007d20:	2301      	movs	r3, #1
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b082      	sub	sp, #8
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e049      	b.n	8007dd0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d106      	bne.n	8007d56 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7fa fa3d 	bl	80021d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3304      	adds	r3, #4
 8007d66:	4619      	mov	r1, r3
 8007d68:	4610      	mov	r0, r2
 8007d6a:	f000 fd0d 	bl	8008788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2201      	movs	r2, #1
 8007d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2201      	movs	r2, #1
 8007d82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2201      	movs	r2, #1
 8007d8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2201      	movs	r2, #1
 8007d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2201      	movs	r2, #1
 8007daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2201      	movs	r2, #1
 8007dba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2201      	movs	r2, #1
 8007dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007dce:	2300      	movs	r3, #0
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3708      	adds	r7, #8
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b085      	sub	sp, #20
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d001      	beq.n	8007df0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e054      	b.n	8007e9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2202      	movs	r2, #2
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f042 0201 	orr.w	r2, r2, #1
 8007e06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a26      	ldr	r2, [pc, #152]	; (8007ea8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d022      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1a:	d01d      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a22      	ldr	r2, [pc, #136]	; (8007eac <HAL_TIM_Base_Start_IT+0xd4>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d018      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a21      	ldr	r2, [pc, #132]	; (8007eb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d013      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a1f      	ldr	r2, [pc, #124]	; (8007eb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d00e      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a1e      	ldr	r2, [pc, #120]	; (8007eb8 <HAL_TIM_Base_Start_IT+0xe0>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d009      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a1c      	ldr	r2, [pc, #112]	; (8007ebc <HAL_TIM_Base_Start_IT+0xe4>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d004      	beq.n	8007e58 <HAL_TIM_Base_Start_IT+0x80>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a1b      	ldr	r2, [pc, #108]	; (8007ec0 <HAL_TIM_Base_Start_IT+0xe8>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d115      	bne.n	8007e84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	4b19      	ldr	r3, [pc, #100]	; (8007ec4 <HAL_TIM_Base_Start_IT+0xec>)
 8007e60:	4013      	ands	r3, r2
 8007e62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2b06      	cmp	r3, #6
 8007e68:	d015      	beq.n	8007e96 <HAL_TIM_Base_Start_IT+0xbe>
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e70:	d011      	beq.n	8007e96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f042 0201 	orr.w	r2, r2, #1
 8007e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e82:	e008      	b.n	8007e96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e000      	b.n	8007e98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007e96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3714      	adds	r7, #20
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	40000800 	.word	0x40000800
 8007eb4:	40000c00 	.word	0x40000c00
 8007eb8:	40010400 	.word	0x40010400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40001800 	.word	0x40001800
 8007ec4:	00010007 	.word	0x00010007

08007ec8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e049      	b.n	8007f6e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d106      	bne.n	8007ef4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f000 f841 	bl	8007f76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2202      	movs	r2, #2
 8007ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3304      	adds	r3, #4
 8007f04:	4619      	mov	r1, r3
 8007f06:	4610      	mov	r0, r2
 8007f08:	f000 fc3e 	bl	8008788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2201      	movs	r2, #1
 8007f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2201      	movs	r2, #1
 8007f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2201      	movs	r2, #1
 8007f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2201      	movs	r2, #1
 8007f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2201      	movs	r2, #1
 8007f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007f76:	b480      	push	{r7}
 8007f78:	b083      	sub	sp, #12
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
	...

08007f8c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	2b0c      	cmp	r3, #12
 8007f9e:	d855      	bhi.n	800804c <HAL_TIM_PWM_Stop_DMA+0xc0>
 8007fa0:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fdd 	.word	0x08007fdd
 8007fac:	0800804d 	.word	0x0800804d
 8007fb0:	0800804d 	.word	0x0800804d
 8007fb4:	0800804d 	.word	0x0800804d
 8007fb8:	08007ff9 	.word	0x08007ff9
 8007fbc:	0800804d 	.word	0x0800804d
 8007fc0:	0800804d 	.word	0x0800804d
 8007fc4:	0800804d 	.word	0x0800804d
 8007fc8:	08008015 	.word	0x08008015
 8007fcc:	0800804d 	.word	0x0800804d
 8007fd0:	0800804d 	.word	0x0800804d
 8007fd4:	0800804d 	.word	0x0800804d
 8007fd8:	08008031 	.word	0x08008031
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68da      	ldr	r2, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007fea:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f7fb faf5 	bl	80035e0 <HAL_DMA_Abort_IT>
      break;
 8007ff6:	e02c      	b.n	8008052 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68da      	ldr	r2, [r3, #12]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008006:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800c:	4618      	mov	r0, r3
 800800e:	f7fb fae7 	bl	80035e0 <HAL_DMA_Abort_IT>
      break;
 8008012:	e01e      	b.n	8008052 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008022:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008028:	4618      	mov	r0, r3
 800802a:	f7fb fad9 	bl	80035e0 <HAL_DMA_Abort_IT>
      break;
 800802e:	e010      	b.n	8008052 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68da      	ldr	r2, [r3, #12]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800803e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008044:	4618      	mov	r0, r3
 8008046:	f7fb facb 	bl	80035e0 <HAL_DMA_Abort_IT>
      break;
 800804a:	e002      	b.n	8008052 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	73fb      	strb	r3, [r7, #15]
      break;
 8008050:	bf00      	nop
  }

  if (status == HAL_OK)
 8008052:	7bfb      	ldrb	r3, [r7, #15]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d171      	bne.n	800813c <HAL_TIM_PWM_Stop_DMA+0x1b0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2200      	movs	r2, #0
 800805e:	6839      	ldr	r1, [r7, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f000 ff29 	bl	8008eb8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a37      	ldr	r2, [pc, #220]	; (8008148 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <HAL_TIM_PWM_Stop_DMA+0xee>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a35      	ldr	r2, [pc, #212]	; (800814c <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d101      	bne.n	800807e <HAL_TIM_PWM_Stop_DMA+0xf2>
 800807a:	2301      	movs	r3, #1
 800807c:	e000      	b.n	8008080 <HAL_TIM_PWM_Stop_DMA+0xf4>
 800807e:	2300      	movs	r3, #0
 8008080:	2b00      	cmp	r3, #0
 8008082:	d017      	beq.n	80080b4 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6a1a      	ldr	r2, [r3, #32]
 800808a:	f241 1311 	movw	r3, #4369	; 0x1111
 800808e:	4013      	ands	r3, r2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d10f      	bne.n	80080b4 <HAL_TIM_PWM_Stop_DMA+0x128>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6a1a      	ldr	r2, [r3, #32]
 800809a:	f240 4344 	movw	r3, #1092	; 0x444
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d107      	bne.n	80080b4 <HAL_TIM_PWM_Stop_DMA+0x128>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80080b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6a1a      	ldr	r2, [r3, #32]
 80080ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80080be:	4013      	ands	r3, r2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10f      	bne.n	80080e4 <HAL_TIM_PWM_Stop_DMA+0x158>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6a1a      	ldr	r2, [r3, #32]
 80080ca:	f240 4344 	movw	r3, #1092	; 0x444
 80080ce:	4013      	ands	r3, r2
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d107      	bne.n	80080e4 <HAL_TIM_PWM_Stop_DMA+0x158>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 0201 	bic.w	r2, r2, #1
 80080e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d104      	bne.n	80080f4 <HAL_TIM_PWM_Stop_DMA+0x168>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080f2:	e023      	b.n	800813c <HAL_TIM_PWM_Stop_DMA+0x1b0>
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	2b04      	cmp	r3, #4
 80080f8:	d104      	bne.n	8008104 <HAL_TIM_PWM_Stop_DMA+0x178>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008102:	e01b      	b.n	800813c <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	2b08      	cmp	r3, #8
 8008108:	d104      	bne.n	8008114 <HAL_TIM_PWM_Stop_DMA+0x188>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008112:	e013      	b.n	800813c <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	2b0c      	cmp	r3, #12
 8008118:	d104      	bne.n	8008124 <HAL_TIM_PWM_Stop_DMA+0x198>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2201      	movs	r2, #1
 800811e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008122:	e00b      	b.n	800813c <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	2b10      	cmp	r3, #16
 8008128:	d104      	bne.n	8008134 <HAL_TIM_PWM_Stop_DMA+0x1a8>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2201      	movs	r2, #1
 800812e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008132:	e003      	b.n	800813c <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800813c:	7bfb      	ldrb	r3, [r7, #15]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	40010000 	.word	0x40010000
 800814c:	40010400 	.word	0x40010400

08008150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	f003 0302 	and.w	r3, r3, #2
 8008162:	2b02      	cmp	r3, #2
 8008164:	d122      	bne.n	80081ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b02      	cmp	r3, #2
 8008172:	d11b      	bne.n	80081ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f06f 0202 	mvn.w	r2, #2
 800817c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2201      	movs	r2, #1
 8008182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	f003 0303 	and.w	r3, r3, #3
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f000 fae4 	bl	8008760 <HAL_TIM_IC_CaptureCallback>
 8008198:	e005      	b.n	80081a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fad6 	bl	800874c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7f8 fa81 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d122      	bne.n	8008200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	f003 0304 	and.w	r3, r3, #4
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d11b      	bne.n	8008200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f06f 0204 	mvn.w	r2, #4
 80081d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2202      	movs	r2, #2
 80081d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d003      	beq.n	80081ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 faba 	bl	8008760 <HAL_TIM_IC_CaptureCallback>
 80081ec:	e005      	b.n	80081fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 faac 	bl	800874c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7f8 fa57 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	f003 0308 	and.w	r3, r3, #8
 800820a:	2b08      	cmp	r3, #8
 800820c:	d122      	bne.n	8008254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	f003 0308 	and.w	r3, r3, #8
 8008218:	2b08      	cmp	r3, #8
 800821a:	d11b      	bne.n	8008254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f06f 0208 	mvn.w	r2, #8
 8008224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2204      	movs	r2, #4
 800822a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	69db      	ldr	r3, [r3, #28]
 8008232:	f003 0303 	and.w	r3, r3, #3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d003      	beq.n	8008242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fa90 	bl	8008760 <HAL_TIM_IC_CaptureCallback>
 8008240:	e005      	b.n	800824e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 fa82 	bl	800874c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7f8 fa2d 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	f003 0310 	and.w	r3, r3, #16
 800825e:	2b10      	cmp	r3, #16
 8008260:	d122      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	68db      	ldr	r3, [r3, #12]
 8008268:	f003 0310 	and.w	r3, r3, #16
 800826c:	2b10      	cmp	r3, #16
 800826e:	d11b      	bne.n	80082a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f06f 0210 	mvn.w	r2, #16
 8008278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2208      	movs	r2, #8
 800827e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	69db      	ldr	r3, [r3, #28]
 8008286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828a:	2b00      	cmp	r3, #0
 800828c:	d003      	beq.n	8008296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa66 	bl	8008760 <HAL_TIM_IC_CaptureCallback>
 8008294:	e005      	b.n	80082a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f000 fa58 	bl	800874c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f7f8 fa03 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2200      	movs	r2, #0
 80082a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	f003 0301 	and.w	r3, r3, #1
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d10e      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	68db      	ldr	r3, [r3, #12]
 80082bc:	f003 0301 	and.w	r3, r3, #1
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d107      	bne.n	80082d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f06f 0201 	mvn.w	r2, #1
 80082cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f7f9 fbf0 	bl	8001ab4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	691b      	ldr	r3, [r3, #16]
 80082da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082de:	2b80      	cmp	r3, #128	; 0x80
 80082e0:	d10e      	bne.n	8008300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ec:	2b80      	cmp	r3, #128	; 0x80
 80082ee:	d107      	bne.n	8008300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80082f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fe9a 	bl	8009034 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800830a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800830e:	d10e      	bne.n	800832e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	68db      	ldr	r3, [r3, #12]
 8008316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800831a:	2b80      	cmp	r3, #128	; 0x80
 800831c:	d107      	bne.n	800832e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 fe8d 	bl	8009048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	691b      	ldr	r3, [r3, #16]
 8008334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008338:	2b40      	cmp	r3, #64	; 0x40
 800833a:	d10e      	bne.n	800835a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008346:	2b40      	cmp	r3, #64	; 0x40
 8008348:	d107      	bne.n	800835a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f000 fa0d 	bl	8008774 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	f003 0320 	and.w	r3, r3, #32
 8008364:	2b20      	cmp	r3, #32
 8008366:	d10e      	bne.n	8008386 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f003 0320 	and.w	r3, r3, #32
 8008372:	2b20      	cmp	r3, #32
 8008374:	d107      	bne.n	8008386 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f06f 0220 	mvn.w	r2, #32
 800837e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fe4d 	bl	8009020 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008386:	bf00      	nop
 8008388:	3708      	adds	r7, #8
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
	...

08008390 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
 8008396:	60f8      	str	r0, [r7, #12]
 8008398:	60b9      	str	r1, [r7, #8]
 800839a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d101      	bne.n	80083ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083aa:	2302      	movs	r3, #2
 80083ac:	e0ff      	b.n	80085ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b14      	cmp	r3, #20
 80083ba:	f200 80f0 	bhi.w	800859e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	08008419 	.word	0x08008419
 80083c8:	0800859f 	.word	0x0800859f
 80083cc:	0800859f 	.word	0x0800859f
 80083d0:	0800859f 	.word	0x0800859f
 80083d4:	08008459 	.word	0x08008459
 80083d8:	0800859f 	.word	0x0800859f
 80083dc:	0800859f 	.word	0x0800859f
 80083e0:	0800859f 	.word	0x0800859f
 80083e4:	0800849b 	.word	0x0800849b
 80083e8:	0800859f 	.word	0x0800859f
 80083ec:	0800859f 	.word	0x0800859f
 80083f0:	0800859f 	.word	0x0800859f
 80083f4:	080084db 	.word	0x080084db
 80083f8:	0800859f 	.word	0x0800859f
 80083fc:	0800859f 	.word	0x0800859f
 8008400:	0800859f 	.word	0x0800859f
 8008404:	0800851d 	.word	0x0800851d
 8008408:	0800859f 	.word	0x0800859f
 800840c:	0800859f 	.word	0x0800859f
 8008410:	0800859f 	.word	0x0800859f
 8008414:	0800855d 	.word	0x0800855d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	68b9      	ldr	r1, [r7, #8]
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fa52 	bl	80088c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	699a      	ldr	r2, [r3, #24]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f042 0208 	orr.w	r2, r2, #8
 8008432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0204 	bic.w	r2, r2, #4
 8008442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	6999      	ldr	r1, [r3, #24]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	691a      	ldr	r2, [r3, #16]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	430a      	orrs	r2, r1
 8008454:	619a      	str	r2, [r3, #24]
      break;
 8008456:	e0a5      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68b9      	ldr	r1, [r7, #8]
 800845e:	4618      	mov	r0, r3
 8008460:	f000 faa4 	bl	80089ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008472:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	699a      	ldr	r2, [r3, #24]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008482:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	6999      	ldr	r1, [r3, #24]
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	021a      	lsls	r2, r3, #8
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	619a      	str	r2, [r3, #24]
      break;
 8008498:	e084      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68b9      	ldr	r1, [r7, #8]
 80084a0:	4618      	mov	r0, r3
 80084a2:	f000 fafb 	bl	8008a9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	69da      	ldr	r2, [r3, #28]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0208 	orr.w	r2, r2, #8
 80084b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	69da      	ldr	r2, [r3, #28]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0204 	bic.w	r2, r2, #4
 80084c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	69d9      	ldr	r1, [r3, #28]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	691a      	ldr	r2, [r3, #16]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	430a      	orrs	r2, r1
 80084d6:	61da      	str	r2, [r3, #28]
      break;
 80084d8:	e064      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68b9      	ldr	r1, [r7, #8]
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 fb51 	bl	8008b88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	69da      	ldr	r2, [r3, #28]
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	69da      	ldr	r2, [r3, #28]
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008504:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	69d9      	ldr	r1, [r3, #28]
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	691b      	ldr	r3, [r3, #16]
 8008510:	021a      	lsls	r2, r3, #8
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	61da      	str	r2, [r3, #28]
      break;
 800851a:	e043      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68b9      	ldr	r1, [r7, #8]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fb88 	bl	8008c38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f042 0208 	orr.w	r2, r2, #8
 8008536:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0204 	bic.w	r2, r2, #4
 8008546:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	691a      	ldr	r2, [r3, #16]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	430a      	orrs	r2, r1
 8008558:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800855a:	e023      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68b9      	ldr	r1, [r7, #8]
 8008562:	4618      	mov	r0, r3
 8008564:	f000 fbba 	bl	8008cdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008576:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008586:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	021a      	lsls	r2, r3, #8
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	430a      	orrs	r2, r1
 800859a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800859c:	e002      	b.n	80085a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800859e:	2301      	movs	r3, #1
 80085a0:	75fb      	strb	r3, [r7, #23]
      break;
 80085a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2200      	movs	r2, #0
 80085a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop

080085b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b084      	sub	sp, #16
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085c2:	2300      	movs	r3, #0
 80085c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_TIM_ConfigClockSource+0x1c>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e0b4      	b.n	800873e <HAL_TIM_ConfigClockSource+0x186>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	4b56      	ldr	r3, [pc, #344]	; (8008748 <HAL_TIM_ConfigClockSource+0x190>)
 80085f0:	4013      	ands	r3, r2
 80085f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68ba      	ldr	r2, [r7, #8]
 8008602:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800860c:	d03e      	beq.n	800868c <HAL_TIM_ConfigClockSource+0xd4>
 800860e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008612:	f200 8087 	bhi.w	8008724 <HAL_TIM_ConfigClockSource+0x16c>
 8008616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800861a:	f000 8086 	beq.w	800872a <HAL_TIM_ConfigClockSource+0x172>
 800861e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008622:	d87f      	bhi.n	8008724 <HAL_TIM_ConfigClockSource+0x16c>
 8008624:	2b70      	cmp	r3, #112	; 0x70
 8008626:	d01a      	beq.n	800865e <HAL_TIM_ConfigClockSource+0xa6>
 8008628:	2b70      	cmp	r3, #112	; 0x70
 800862a:	d87b      	bhi.n	8008724 <HAL_TIM_ConfigClockSource+0x16c>
 800862c:	2b60      	cmp	r3, #96	; 0x60
 800862e:	d050      	beq.n	80086d2 <HAL_TIM_ConfigClockSource+0x11a>
 8008630:	2b60      	cmp	r3, #96	; 0x60
 8008632:	d877      	bhi.n	8008724 <HAL_TIM_ConfigClockSource+0x16c>
 8008634:	2b50      	cmp	r3, #80	; 0x50
 8008636:	d03c      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0xfa>
 8008638:	2b50      	cmp	r3, #80	; 0x50
 800863a:	d873      	bhi.n	8008724 <HAL_TIM_ConfigClockSource+0x16c>
 800863c:	2b40      	cmp	r3, #64	; 0x40
 800863e:	d058      	beq.n	80086f2 <HAL_TIM_ConfigClockSource+0x13a>
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	d86f      	bhi.n	8008724 <HAL_TIM_ConfigClockSource+0x16c>
 8008644:	2b30      	cmp	r3, #48	; 0x30
 8008646:	d064      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0x15a>
 8008648:	2b30      	cmp	r3, #48	; 0x30
 800864a:	d86b      	bhi.n	8008724 <HAL_TIM_ConfigClockSource+0x16c>
 800864c:	2b20      	cmp	r3, #32
 800864e:	d060      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0x15a>
 8008650:	2b20      	cmp	r3, #32
 8008652:	d867      	bhi.n	8008724 <HAL_TIM_ConfigClockSource+0x16c>
 8008654:	2b00      	cmp	r3, #0
 8008656:	d05c      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0x15a>
 8008658:	2b10      	cmp	r3, #16
 800865a:	d05a      	beq.n	8008712 <HAL_TIM_ConfigClockSource+0x15a>
 800865c:	e062      	b.n	8008724 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	6899      	ldr	r1, [r3, #8]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685a      	ldr	r2, [r3, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	68db      	ldr	r3, [r3, #12]
 800866e:	f000 fc03 	bl	8008e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008680:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	609a      	str	r2, [r3, #8]
      break;
 800868a:	e04f      	b.n	800872c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6818      	ldr	r0, [r3, #0]
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	6899      	ldr	r1, [r3, #8]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f000 fbec 	bl	8008e78 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	689a      	ldr	r2, [r3, #8]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086ae:	609a      	str	r2, [r3, #8]
      break;
 80086b0:	e03c      	b.n	800872c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	6859      	ldr	r1, [r3, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	461a      	mov	r2, r3
 80086c0:	f000 fb60 	bl	8008d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2150      	movs	r1, #80	; 0x50
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fbb9 	bl	8008e42 <TIM_ITRx_SetConfig>
      break;
 80086d0:	e02c      	b.n	800872c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6818      	ldr	r0, [r3, #0]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	6859      	ldr	r1, [r3, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	461a      	mov	r2, r3
 80086e0:	f000 fb7f 	bl	8008de2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2160      	movs	r1, #96	; 0x60
 80086ea:	4618      	mov	r0, r3
 80086ec:	f000 fba9 	bl	8008e42 <TIM_ITRx_SetConfig>
      break;
 80086f0:	e01c      	b.n	800872c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6818      	ldr	r0, [r3, #0]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	6859      	ldr	r1, [r3, #4]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	68db      	ldr	r3, [r3, #12]
 80086fe:	461a      	mov	r2, r3
 8008700:	f000 fb40 	bl	8008d84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2140      	movs	r1, #64	; 0x40
 800870a:	4618      	mov	r0, r3
 800870c:	f000 fb99 	bl	8008e42 <TIM_ITRx_SetConfig>
      break;
 8008710:	e00c      	b.n	800872c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681a      	ldr	r2, [r3, #0]
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4619      	mov	r1, r3
 800871c:	4610      	mov	r0, r2
 800871e:	f000 fb90 	bl	8008e42 <TIM_ITRx_SetConfig>
      break;
 8008722:	e003      	b.n	800872c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	73fb      	strb	r3, [r7, #15]
      break;
 8008728:	e000      	b.n	800872c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800872a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800873c:	7bfb      	ldrb	r3, [r7, #15]
}
 800873e:	4618      	mov	r0, r3
 8008740:	3710      	adds	r7, #16
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	fffeff88 	.word	0xfffeff88

0800874c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008760:	b480      	push	{r7}
 8008762:	b083      	sub	sp, #12
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008768:	bf00      	nop
 800876a:	370c      	adds	r7, #12
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008788:	b480      	push	{r7}
 800878a:	b085      	sub	sp, #20
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a40      	ldr	r2, [pc, #256]	; (800889c <TIM_Base_SetConfig+0x114>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d013      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087a6:	d00f      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a3d      	ldr	r2, [pc, #244]	; (80088a0 <TIM_Base_SetConfig+0x118>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d00b      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a3c      	ldr	r2, [pc, #240]	; (80088a4 <TIM_Base_SetConfig+0x11c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d007      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a3b      	ldr	r2, [pc, #236]	; (80088a8 <TIM_Base_SetConfig+0x120>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_Base_SetConfig+0x40>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a3a      	ldr	r2, [pc, #232]	; (80088ac <TIM_Base_SetConfig+0x124>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d108      	bne.n	80087da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a2f      	ldr	r2, [pc, #188]	; (800889c <TIM_Base_SetConfig+0x114>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d02b      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e8:	d027      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2c      	ldr	r2, [pc, #176]	; (80088a0 <TIM_Base_SetConfig+0x118>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d023      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a2b      	ldr	r2, [pc, #172]	; (80088a4 <TIM_Base_SetConfig+0x11c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d01f      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a2a      	ldr	r2, [pc, #168]	; (80088a8 <TIM_Base_SetConfig+0x120>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d01b      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a29      	ldr	r2, [pc, #164]	; (80088ac <TIM_Base_SetConfig+0x124>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d017      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a28      	ldr	r2, [pc, #160]	; (80088b0 <TIM_Base_SetConfig+0x128>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d013      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a27      	ldr	r2, [pc, #156]	; (80088b4 <TIM_Base_SetConfig+0x12c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00f      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a26      	ldr	r2, [pc, #152]	; (80088b8 <TIM_Base_SetConfig+0x130>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00b      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a25      	ldr	r2, [pc, #148]	; (80088bc <TIM_Base_SetConfig+0x134>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d007      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a24      	ldr	r2, [pc, #144]	; (80088c0 <TIM_Base_SetConfig+0x138>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d003      	beq.n	800883a <TIM_Base_SetConfig+0xb2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a23      	ldr	r2, [pc, #140]	; (80088c4 <TIM_Base_SetConfig+0x13c>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d108      	bne.n	800884c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	68fa      	ldr	r2, [r7, #12]
 8008848:	4313      	orrs	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	695b      	ldr	r3, [r3, #20]
 8008856:	4313      	orrs	r3, r2
 8008858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	689a      	ldr	r2, [r3, #8]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	681a      	ldr	r2, [r3, #0]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a0a      	ldr	r2, [pc, #40]	; (800889c <TIM_Base_SetConfig+0x114>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d003      	beq.n	8008880 <TIM_Base_SetConfig+0xf8>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	4a0c      	ldr	r2, [pc, #48]	; (80088ac <TIM_Base_SetConfig+0x124>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d103      	bne.n	8008888 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	615a      	str	r2, [r3, #20]
}
 800888e:	bf00      	nop
 8008890:	3714      	adds	r7, #20
 8008892:	46bd      	mov	sp, r7
 8008894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008898:	4770      	bx	lr
 800889a:	bf00      	nop
 800889c:	40010000 	.word	0x40010000
 80088a0:	40000400 	.word	0x40000400
 80088a4:	40000800 	.word	0x40000800
 80088a8:	40000c00 	.word	0x40000c00
 80088ac:	40010400 	.word	0x40010400
 80088b0:	40014000 	.word	0x40014000
 80088b4:	40014400 	.word	0x40014400
 80088b8:	40014800 	.word	0x40014800
 80088bc:	40001800 	.word	0x40001800
 80088c0:	40001c00 	.word	0x40001c00
 80088c4:	40002000 	.word	0x40002000

080088c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b087      	sub	sp, #28
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
 80088d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	f023 0201 	bic.w	r2, r3, #1
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a1b      	ldr	r3, [r3, #32]
 80088e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	4b2b      	ldr	r3, [pc, #172]	; (80089a0 <TIM_OC1_SetConfig+0xd8>)
 80088f4:	4013      	ands	r3, r2
 80088f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4313      	orrs	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f023 0302 	bic.w	r3, r3, #2
 8008910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	4313      	orrs	r3, r2
 800891a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a21      	ldr	r2, [pc, #132]	; (80089a4 <TIM_OC1_SetConfig+0xdc>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d003      	beq.n	800892c <TIM_OC1_SetConfig+0x64>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	4a20      	ldr	r2, [pc, #128]	; (80089a8 <TIM_OC1_SetConfig+0xe0>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d10c      	bne.n	8008946 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	f023 0308 	bic.w	r3, r3, #8
 8008932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	697a      	ldr	r2, [r7, #20]
 800893a:	4313      	orrs	r3, r2
 800893c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f023 0304 	bic.w	r3, r3, #4
 8008944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a16      	ldr	r2, [pc, #88]	; (80089a4 <TIM_OC1_SetConfig+0xdc>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d003      	beq.n	8008956 <TIM_OC1_SetConfig+0x8e>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a15      	ldr	r2, [pc, #84]	; (80089a8 <TIM_OC1_SetConfig+0xe0>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d111      	bne.n	800897a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800895c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008964:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	695b      	ldr	r3, [r3, #20]
 800896a:	693a      	ldr	r2, [r7, #16]
 800896c:	4313      	orrs	r3, r2
 800896e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	699b      	ldr	r3, [r3, #24]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	4313      	orrs	r3, r2
 8008978:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	693a      	ldr	r2, [r7, #16]
 800897e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	685a      	ldr	r2, [r3, #4]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	697a      	ldr	r2, [r7, #20]
 8008992:	621a      	str	r2, [r3, #32]
}
 8008994:	bf00      	nop
 8008996:	371c      	adds	r7, #28
 8008998:	46bd      	mov	sp, r7
 800899a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899e:	4770      	bx	lr
 80089a0:	fffeff8f 	.word	0xfffeff8f
 80089a4:	40010000 	.word	0x40010000
 80089a8:	40010400 	.word	0x40010400

080089ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b087      	sub	sp, #28
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	f023 0210 	bic.w	r2, r3, #16
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6a1b      	ldr	r3, [r3, #32]
 80089c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	685b      	ldr	r3, [r3, #4]
 80089cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	699b      	ldr	r3, [r3, #24]
 80089d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089d4:	68fa      	ldr	r2, [r7, #12]
 80089d6:	4b2e      	ldr	r3, [pc, #184]	; (8008a90 <TIM_OC2_SetConfig+0xe4>)
 80089d8:	4013      	ands	r3, r2
 80089da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f023 0320 	bic.w	r3, r3, #32
 80089f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a23      	ldr	r2, [pc, #140]	; (8008a94 <TIM_OC2_SetConfig+0xe8>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d003      	beq.n	8008a14 <TIM_OC2_SetConfig+0x68>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a22      	ldr	r2, [pc, #136]	; (8008a98 <TIM_OC2_SetConfig+0xec>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d10d      	bne.n	8008a30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a18      	ldr	r2, [pc, #96]	; (8008a94 <TIM_OC2_SetConfig+0xe8>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d003      	beq.n	8008a40 <TIM_OC2_SetConfig+0x94>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a17      	ldr	r2, [pc, #92]	; (8008a98 <TIM_OC2_SetConfig+0xec>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d113      	bne.n	8008a68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	695b      	ldr	r3, [r3, #20]
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	693a      	ldr	r2, [r7, #16]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	699b      	ldr	r3, [r3, #24]
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68fa      	ldr	r2, [r7, #12]
 8008a72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	685a      	ldr	r2, [r3, #4]
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	697a      	ldr	r2, [r7, #20]
 8008a80:	621a      	str	r2, [r3, #32]
}
 8008a82:	bf00      	nop
 8008a84:	371c      	adds	r7, #28
 8008a86:	46bd      	mov	sp, r7
 8008a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	feff8fff 	.word	0xfeff8fff
 8008a94:	40010000 	.word	0x40010000
 8008a98:	40010400 	.word	0x40010400

08008a9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b087      	sub	sp, #28
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a1b      	ldr	r3, [r3, #32]
 8008aaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4b2d      	ldr	r3, [pc, #180]	; (8008b7c <TIM_OC3_SetConfig+0xe0>)
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f023 0303 	bic.w	r3, r3, #3
 8008ad2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ae4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	021b      	lsls	r3, r3, #8
 8008aec:	697a      	ldr	r2, [r7, #20]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a22      	ldr	r2, [pc, #136]	; (8008b80 <TIM_OC3_SetConfig+0xe4>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d003      	beq.n	8008b02 <TIM_OC3_SetConfig+0x66>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a21      	ldr	r2, [pc, #132]	; (8008b84 <TIM_OC3_SetConfig+0xe8>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d10d      	bne.n	8008b1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	68db      	ldr	r3, [r3, #12]
 8008b0e:	021b      	lsls	r3, r3, #8
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a17      	ldr	r2, [pc, #92]	; (8008b80 <TIM_OC3_SetConfig+0xe4>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d003      	beq.n	8008b2e <TIM_OC3_SetConfig+0x92>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a16      	ldr	r2, [pc, #88]	; (8008b84 <TIM_OC3_SetConfig+0xe8>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d113      	bne.n	8008b56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	695b      	ldr	r3, [r3, #20]
 8008b42:	011b      	lsls	r3, r3, #4
 8008b44:	693a      	ldr	r2, [r7, #16]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	011b      	lsls	r3, r3, #4
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	693a      	ldr	r2, [r7, #16]
 8008b5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	685a      	ldr	r2, [r3, #4]
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	697a      	ldr	r2, [r7, #20]
 8008b6e:	621a      	str	r2, [r3, #32]
}
 8008b70:	bf00      	nop
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr
 8008b7c:	fffeff8f 	.word	0xfffeff8f
 8008b80:	40010000 	.word	0x40010000
 8008b84:	40010400 	.word	0x40010400

08008b88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
 8008b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	69db      	ldr	r3, [r3, #28]
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	4b1e      	ldr	r3, [pc, #120]	; (8008c2c <TIM_OC4_SetConfig+0xa4>)
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	021b      	lsls	r3, r3, #8
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	689b      	ldr	r3, [r3, #8]
 8008bd8:	031b      	lsls	r3, r3, #12
 8008bda:	693a      	ldr	r2, [r7, #16]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a13      	ldr	r2, [pc, #76]	; (8008c30 <TIM_OC4_SetConfig+0xa8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d003      	beq.n	8008bf0 <TIM_OC4_SetConfig+0x68>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a12      	ldr	r2, [pc, #72]	; (8008c34 <TIM_OC4_SetConfig+0xac>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d109      	bne.n	8008c04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bf6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	695b      	ldr	r3, [r3, #20]
 8008bfc:	019b      	lsls	r3, r3, #6
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	68fa      	ldr	r2, [r7, #12]
 8008c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685a      	ldr	r2, [r3, #4]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	621a      	str	r2, [r3, #32]
}
 8008c1e:	bf00      	nop
 8008c20:	371c      	adds	r7, #28
 8008c22:	46bd      	mov	sp, r7
 8008c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c28:	4770      	bx	lr
 8008c2a:	bf00      	nop
 8008c2c:	feff8fff 	.word	0xfeff8fff
 8008c30:	40010000 	.word	0x40010000
 8008c34:	40010400 	.word	0x40010400

08008c38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6a1b      	ldr	r3, [r3, #32]
 8008c46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6a1b      	ldr	r3, [r3, #32]
 8008c52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c60:	68fa      	ldr	r2, [r7, #12]
 8008c62:	4b1b      	ldr	r3, [pc, #108]	; (8008cd0 <TIM_OC5_SetConfig+0x98>)
 8008c64:	4013      	ands	r3, r2
 8008c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	041b      	lsls	r3, r3, #16
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a12      	ldr	r2, [pc, #72]	; (8008cd4 <TIM_OC5_SetConfig+0x9c>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d003      	beq.n	8008c96 <TIM_OC5_SetConfig+0x5e>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a11      	ldr	r2, [pc, #68]	; (8008cd8 <TIM_OC5_SetConfig+0xa0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d109      	bne.n	8008caa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	695b      	ldr	r3, [r3, #20]
 8008ca2:	021b      	lsls	r3, r3, #8
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	697a      	ldr	r2, [r7, #20]
 8008cae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68fa      	ldr	r2, [r7, #12]
 8008cb4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	685a      	ldr	r2, [r3, #4]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	621a      	str	r2, [r3, #32]
}
 8008cc4:	bf00      	nop
 8008cc6:	371c      	adds	r7, #28
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	fffeff8f 	.word	0xfffeff8f
 8008cd4:	40010000 	.word	0x40010000
 8008cd8:	40010400 	.word	0x40010400

08008cdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b087      	sub	sp, #28
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
 8008ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d04:	68fa      	ldr	r2, [r7, #12]
 8008d06:	4b1c      	ldr	r3, [pc, #112]	; (8008d78 <TIM_OC6_SetConfig+0x9c>)
 8008d08:	4013      	ands	r3, r2
 8008d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	021b      	lsls	r3, r3, #8
 8008d12:	68fa      	ldr	r2, [r7, #12]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	051b      	lsls	r3, r3, #20
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a13      	ldr	r2, [pc, #76]	; (8008d7c <TIM_OC6_SetConfig+0xa0>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d003      	beq.n	8008d3c <TIM_OC6_SetConfig+0x60>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a12      	ldr	r2, [pc, #72]	; (8008d80 <TIM_OC6_SetConfig+0xa4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d109      	bne.n	8008d50 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	695b      	ldr	r3, [r3, #20]
 8008d48:	029b      	lsls	r3, r3, #10
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	697a      	ldr	r2, [r7, #20]
 8008d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	693a      	ldr	r2, [r7, #16]
 8008d68:	621a      	str	r2, [r3, #32]
}
 8008d6a:	bf00      	nop
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	feff8fff 	.word	0xfeff8fff
 8008d7c:	40010000 	.word	0x40010000
 8008d80:	40010400 	.word	0x40010400

08008d84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	f023 0201 	bic.w	r2, r3, #1
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008dae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	011b      	lsls	r3, r3, #4
 8008db4:	693a      	ldr	r2, [r7, #16]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f023 030a 	bic.w	r3, r3, #10
 8008dc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	621a      	str	r2, [r3, #32]
}
 8008dd6:	bf00      	nop
 8008dd8:	371c      	adds	r7, #28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b087      	sub	sp, #28
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	60f8      	str	r0, [r7, #12]
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	6a1b      	ldr	r3, [r3, #32]
 8008df2:	f023 0210 	bic.w	r2, r3, #16
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	6a1b      	ldr	r3, [r3, #32]
 8008e04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	031b      	lsls	r3, r3, #12
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	011b      	lsls	r3, r3, #4
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	693a      	ldr	r2, [r7, #16]
 8008e34:	621a      	str	r2, [r3, #32]
}
 8008e36:	bf00      	nop
 8008e38:	371c      	adds	r7, #28
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr

08008e42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e42:	b480      	push	{r7}
 8008e44:	b085      	sub	sp, #20
 8008e46:	af00      	add	r7, sp, #0
 8008e48:	6078      	str	r0, [r7, #4]
 8008e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e5a:	683a      	ldr	r2, [r7, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	f043 0307 	orr.w	r3, r3, #7
 8008e64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	609a      	str	r2, [r3, #8]
}
 8008e6c:	bf00      	nop
 8008e6e:	3714      	adds	r7, #20
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b087      	sub	sp, #28
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
 8008e84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	021a      	lsls	r2, r3, #8
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	431a      	orrs	r2, r3
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	697a      	ldr	r2, [r7, #20]
 8008eaa:	609a      	str	r2, [r3, #8]
}
 8008eac:	bf00      	nop
 8008eae:	371c      	adds	r7, #28
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b087      	sub	sp, #28
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	60f8      	str	r0, [r7, #12]
 8008ec0:	60b9      	str	r1, [r7, #8]
 8008ec2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	f003 031f 	and.w	r3, r3, #31
 8008eca:	2201      	movs	r2, #1
 8008ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ed0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a1a      	ldr	r2, [r3, #32]
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	43db      	mvns	r3, r3
 8008eda:	401a      	ands	r2, r3
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6a1a      	ldr	r2, [r3, #32]
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	f003 031f 	and.w	r3, r3, #31
 8008eea:	6879      	ldr	r1, [r7, #4]
 8008eec:	fa01 f303 	lsl.w	r3, r1, r3
 8008ef0:	431a      	orrs	r2, r3
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	621a      	str	r2, [r3, #32]
}
 8008ef6:	bf00      	nop
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
	...

08008f04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e06d      	b.n	8008ff8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2202      	movs	r2, #2
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a30      	ldr	r2, [pc, #192]	; (8009004 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d004      	beq.n	8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a2f      	ldr	r2, [pc, #188]	; (8009008 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d108      	bne.n	8008f62 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f56:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4a20      	ldr	r2, [pc, #128]	; (8009004 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d022      	beq.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f8e:	d01d      	beq.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	4a1d      	ldr	r2, [pc, #116]	; (800900c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d018      	beq.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a1c      	ldr	r2, [pc, #112]	; (8009010 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d013      	beq.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a1a      	ldr	r2, [pc, #104]	; (8009014 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00e      	beq.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	4a15      	ldr	r2, [pc, #84]	; (8009008 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d009      	beq.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4a16      	ldr	r2, [pc, #88]	; (8009018 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d004      	beq.n	8008fcc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	4a15      	ldr	r2, [pc, #84]	; (800901c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d10c      	bne.n	8008fe6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fd2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	4313      	orrs	r3, r2
 8008fdc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ff6:	2300      	movs	r3, #0
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3714      	adds	r7, #20
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009002:	4770      	bx	lr
 8009004:	40010000 	.word	0x40010000
 8009008:	40010400 	.word	0x40010400
 800900c:	40000400 	.word	0x40000400
 8009010:	40000800 	.word	0x40000800
 8009014:	40000c00 	.word	0x40000c00
 8009018:	40014000 	.word	0x40014000
 800901c:	40001800 	.word	0x40001800

08009020 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009020:	b480      	push	{r7}
 8009022:	b083      	sub	sp, #12
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009034:	b480      	push	{r7}
 8009036:	b083      	sub	sp, #12
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009048:	b480      	push	{r7}
 800904a:	b083      	sub	sp, #12
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009050:	bf00      	nop
 8009052:	370c      	adds	r7, #12
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d121      	bne.n	80090b2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	4b27      	ldr	r3, [pc, #156]	; (8009110 <FMC_SDRAM_Init+0xb4>)
 8009074:	4013      	ands	r3, r2
 8009076:	683a      	ldr	r2, [r7, #0]
 8009078:	6851      	ldr	r1, [r2, #4]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	6892      	ldr	r2, [r2, #8]
 800907e:	4311      	orrs	r1, r2
 8009080:	683a      	ldr	r2, [r7, #0]
 8009082:	68d2      	ldr	r2, [r2, #12]
 8009084:	4311      	orrs	r1, r2
 8009086:	683a      	ldr	r2, [r7, #0]
 8009088:	6912      	ldr	r2, [r2, #16]
 800908a:	4311      	orrs	r1, r2
 800908c:	683a      	ldr	r2, [r7, #0]
 800908e:	6952      	ldr	r2, [r2, #20]
 8009090:	4311      	orrs	r1, r2
 8009092:	683a      	ldr	r2, [r7, #0]
 8009094:	6992      	ldr	r2, [r2, #24]
 8009096:	4311      	orrs	r1, r2
 8009098:	683a      	ldr	r2, [r7, #0]
 800909a:	69d2      	ldr	r2, [r2, #28]
 800909c:	4311      	orrs	r1, r2
 800909e:	683a      	ldr	r2, [r7, #0]
 80090a0:	6a12      	ldr	r2, [r2, #32]
 80090a2:	4311      	orrs	r1, r2
 80090a4:	683a      	ldr	r2, [r7, #0]
 80090a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80090a8:	430a      	orrs	r2, r1
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	e026      	b.n	8009100 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	69d9      	ldr	r1, [r3, #28]
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	6a1b      	ldr	r3, [r3, #32]
 80090c2:	4319      	orrs	r1, r3
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c8:	430b      	orrs	r3, r1
 80090ca:	431a      	orrs	r2, r3
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685a      	ldr	r2, [r3, #4]
 80090d4:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <FMC_SDRAM_Init+0xb4>)
 80090d6:	4013      	ands	r3, r2
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	6851      	ldr	r1, [r2, #4]
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	6892      	ldr	r2, [r2, #8]
 80090e0:	4311      	orrs	r1, r2
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	68d2      	ldr	r2, [r2, #12]
 80090e6:	4311      	orrs	r1, r2
 80090e8:	683a      	ldr	r2, [r7, #0]
 80090ea:	6912      	ldr	r2, [r2, #16]
 80090ec:	4311      	orrs	r1, r2
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	6952      	ldr	r2, [r2, #20]
 80090f2:	4311      	orrs	r1, r2
 80090f4:	683a      	ldr	r2, [r7, #0]
 80090f6:	6992      	ldr	r2, [r2, #24]
 80090f8:	430a      	orrs	r2, r1
 80090fa:	431a      	orrs	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	ffff8000 	.word	0xffff8000

08009114 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009114:	b480      	push	{r7}
 8009116:	b085      	sub	sp, #20
 8009118:	af00      	add	r7, sp, #0
 800911a:	60f8      	str	r0, [r7, #12]
 800911c:	60b9      	str	r1, [r7, #8]
 800911e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d128      	bne.n	8009178 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	1e59      	subs	r1, r3, #1
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	3b01      	subs	r3, #1
 800913a:	011b      	lsls	r3, r3, #4
 800913c:	4319      	orrs	r1, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	689b      	ldr	r3, [r3, #8]
 8009142:	3b01      	subs	r3, #1
 8009144:	021b      	lsls	r3, r3, #8
 8009146:	4319      	orrs	r1, r3
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	3b01      	subs	r3, #1
 800914e:	031b      	lsls	r3, r3, #12
 8009150:	4319      	orrs	r1, r3
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	3b01      	subs	r3, #1
 8009158:	041b      	lsls	r3, r3, #16
 800915a:	4319      	orrs	r1, r3
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	695b      	ldr	r3, [r3, #20]
 8009160:	3b01      	subs	r3, #1
 8009162:	051b      	lsls	r3, r3, #20
 8009164:	4319      	orrs	r1, r3
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	3b01      	subs	r3, #1
 800916c:	061b      	lsls	r3, r3, #24
 800916e:	430b      	orrs	r3, r1
 8009170:	431a      	orrs	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	609a      	str	r2, [r3, #8]
 8009176:	e02d      	b.n	80091d4 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	689a      	ldr	r2, [r3, #8]
 800917c:	4b19      	ldr	r3, [pc, #100]	; (80091e4 <FMC_SDRAM_Timing_Init+0xd0>)
 800917e:	4013      	ands	r3, r2
 8009180:	68ba      	ldr	r2, [r7, #8]
 8009182:	68d2      	ldr	r2, [r2, #12]
 8009184:	3a01      	subs	r2, #1
 8009186:	0311      	lsls	r1, r2, #12
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	6952      	ldr	r2, [r2, #20]
 800918c:	3a01      	subs	r2, #1
 800918e:	0512      	lsls	r2, r2, #20
 8009190:	430a      	orrs	r2, r1
 8009192:	431a      	orrs	r2, r3
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	1e59      	subs	r1, r3, #1
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	3b01      	subs	r3, #1
 80091ac:	011b      	lsls	r3, r3, #4
 80091ae:	4319      	orrs	r1, r3
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	021b      	lsls	r3, r3, #8
 80091b8:	4319      	orrs	r1, r3
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	3b01      	subs	r3, #1
 80091c0:	041b      	lsls	r3, r3, #16
 80091c2:	4319      	orrs	r1, r3
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	699b      	ldr	r3, [r3, #24]
 80091c8:	3b01      	subs	r3, #1
 80091ca:	061b      	lsls	r3, r3, #24
 80091cc:	430b      	orrs	r3, r1
 80091ce:	431a      	orrs	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3714      	adds	r7, #20
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop
 80091e4:	ff0f0fff 	.word	0xff0f0fff

080091e8 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	691a      	ldr	r2, [r3, #16]
 80091f8:	4b0c      	ldr	r3, [pc, #48]	; (800922c <FMC_SDRAM_SendCommand+0x44>)
 80091fa:	4013      	ands	r3, r2
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	6811      	ldr	r1, [r2, #0]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	6852      	ldr	r2, [r2, #4]
 8009204:	4311      	orrs	r1, r2
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	6892      	ldr	r2, [r2, #8]
 800920a:	3a01      	subs	r2, #1
 800920c:	0152      	lsls	r2, r2, #5
 800920e:	4311      	orrs	r1, r2
 8009210:	68ba      	ldr	r2, [r7, #8]
 8009212:	68d2      	ldr	r2, [r2, #12]
 8009214:	0252      	lsls	r2, r2, #9
 8009216:	430a      	orrs	r2, r1
 8009218:	431a      	orrs	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr
 800922c:	ffc00000 	.word	0xffc00000

08009230 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695a      	ldr	r2, [r3, #20]
 800923e:	4b07      	ldr	r3, [pc, #28]	; (800925c <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 8009240:	4013      	ands	r3, r2
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	0052      	lsls	r2, r2, #1
 8009246:	431a      	orrs	r2, r3
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	370c      	adds	r7, #12
 8009252:	46bd      	mov	sp, r7
 8009254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009258:	4770      	bx	lr
 800925a:	bf00      	nop
 800925c:	ffffc001 	.word	0xffffc001

08009260 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009260:	b480      	push	{r7}
 8009262:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8009264:	bf00      	nop
 8009266:	46bd      	mov	sp, r7
 8009268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926c:	4770      	bx	lr
	...

08009270 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009276:	f3ef 8305 	mrs	r3, IPSR
 800927a:	60bb      	str	r3, [r7, #8]
  return(result);
 800927c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800927e:	2b00      	cmp	r3, #0
 8009280:	d10f      	bne.n	80092a2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009282:	f3ef 8310 	mrs	r3, PRIMASK
 8009286:	607b      	str	r3, [r7, #4]
  return(result);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800928e:	f3ef 8311 	mrs	r3, BASEPRI
 8009292:	603b      	str	r3, [r7, #0]
  return(result);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d007      	beq.n	80092aa <osKernelInitialize+0x3a>
 800929a:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <osKernelInitialize+0x64>)
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	2b02      	cmp	r3, #2
 80092a0:	d103      	bne.n	80092aa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80092a2:	f06f 0305 	mvn.w	r3, #5
 80092a6:	60fb      	str	r3, [r7, #12]
 80092a8:	e00c      	b.n	80092c4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80092aa:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <osKernelInitialize+0x64>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d105      	bne.n	80092be <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80092b2:	4b08      	ldr	r3, [pc, #32]	; (80092d4 <osKernelInitialize+0x64>)
 80092b4:	2201      	movs	r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	60fb      	str	r3, [r7, #12]
 80092bc:	e002      	b.n	80092c4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80092be:	f04f 33ff 	mov.w	r3, #4294967295
 80092c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80092c4:	68fb      	ldr	r3, [r7, #12]
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3714      	adds	r7, #20
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr
 80092d2:	bf00      	nop
 80092d4:	20000770 	.word	0x20000770

080092d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092de:	f3ef 8305 	mrs	r3, IPSR
 80092e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80092e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10f      	bne.n	800930a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80092ea:	f3ef 8310 	mrs	r3, PRIMASK
 80092ee:	607b      	str	r3, [r7, #4]
  return(result);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d105      	bne.n	8009302 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80092f6:	f3ef 8311 	mrs	r3, BASEPRI
 80092fa:	603b      	str	r3, [r7, #0]
  return(result);
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d007      	beq.n	8009312 <osKernelStart+0x3a>
 8009302:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <osKernelStart+0x68>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	2b02      	cmp	r3, #2
 8009308:	d103      	bne.n	8009312 <osKernelStart+0x3a>
    stat = osErrorISR;
 800930a:	f06f 0305 	mvn.w	r3, #5
 800930e:	60fb      	str	r3, [r7, #12]
 8009310:	e010      	b.n	8009334 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009312:	4b0b      	ldr	r3, [pc, #44]	; (8009340 <osKernelStart+0x68>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d109      	bne.n	800932e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800931a:	f7ff ffa1 	bl	8009260 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800931e:	4b08      	ldr	r3, [pc, #32]	; (8009340 <osKernelStart+0x68>)
 8009320:	2202      	movs	r2, #2
 8009322:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009324:	f002 f8c8 	bl	800b4b8 <vTaskStartScheduler>
      stat = osOK;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	e002      	b.n	8009334 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800932e:	f04f 33ff 	mov.w	r3, #4294967295
 8009332:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8009334:	68fb      	ldr	r3, [r7, #12]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	20000770 	.word	0x20000770

08009344 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009344:	b580      	push	{r7, lr}
 8009346:	b090      	sub	sp, #64	; 0x40
 8009348:	af04      	add	r7, sp, #16
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009350:	2300      	movs	r3, #0
 8009352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009354:	f3ef 8305 	mrs	r3, IPSR
 8009358:	61fb      	str	r3, [r7, #28]
  return(result);
 800935a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800935c:	2b00      	cmp	r3, #0
 800935e:	f040 808f 	bne.w	8009480 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009362:	f3ef 8310 	mrs	r3, PRIMASK
 8009366:	61bb      	str	r3, [r7, #24]
  return(result);
 8009368:	69bb      	ldr	r3, [r7, #24]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d105      	bne.n	800937a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800936e:	f3ef 8311 	mrs	r3, BASEPRI
 8009372:	617b      	str	r3, [r7, #20]
  return(result);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d003      	beq.n	8009382 <osThreadNew+0x3e>
 800937a:	4b44      	ldr	r3, [pc, #272]	; (800948c <osThreadNew+0x148>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b02      	cmp	r3, #2
 8009380:	d07e      	beq.n	8009480 <osThreadNew+0x13c>
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d07b      	beq.n	8009480 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8009388:	2380      	movs	r3, #128	; 0x80
 800938a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800938c:	2318      	movs	r3, #24
 800938e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8009394:	f04f 33ff 	mov.w	r3, #4294967295
 8009398:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d045      	beq.n	800942c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d002      	beq.n	80093ae <osThreadNew+0x6a>
        name = attr->name;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	699b      	ldr	r3, [r3, #24]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d002      	beq.n	80093bc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80093bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d008      	beq.n	80093d4 <osThreadNew+0x90>
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	2b38      	cmp	r3, #56	; 0x38
 80093c6:	d805      	bhi.n	80093d4 <osThreadNew+0x90>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	f003 0301 	and.w	r3, r3, #1
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d001      	beq.n	80093d8 <osThreadNew+0x94>
        return (NULL);
 80093d4:	2300      	movs	r3, #0
 80093d6:	e054      	b.n	8009482 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	695b      	ldr	r3, [r3, #20]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	695b      	ldr	r3, [r3, #20]
 80093e4:	089b      	lsrs	r3, r3, #2
 80093e6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	689b      	ldr	r3, [r3, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00e      	beq.n	800940e <osThreadNew+0xca>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	2b5b      	cmp	r3, #91	; 0x5b
 80093f6:	d90a      	bls.n	800940e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d006      	beq.n	800940e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d002      	beq.n	800940e <osThreadNew+0xca>
        mem = 1;
 8009408:	2301      	movs	r3, #1
 800940a:	623b      	str	r3, [r7, #32]
 800940c:	e010      	b.n	8009430 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	689b      	ldr	r3, [r3, #8]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d10c      	bne.n	8009430 <osThreadNew+0xec>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d108      	bne.n	8009430 <osThreadNew+0xec>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	691b      	ldr	r3, [r3, #16]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <osThreadNew+0xec>
          mem = 0;
 8009426:	2300      	movs	r3, #0
 8009428:	623b      	str	r3, [r7, #32]
 800942a:	e001      	b.n	8009430 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800942c:	2300      	movs	r3, #0
 800942e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d110      	bne.n	8009458 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800943e:	9202      	str	r2, [sp, #8]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009444:	9300      	str	r3, [sp, #0]
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800944a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f001 fe53 	bl	800b0f8 <xTaskCreateStatic>
 8009452:	4603      	mov	r3, r0
 8009454:	613b      	str	r3, [r7, #16]
 8009456:	e013      	b.n	8009480 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8009458:	6a3b      	ldr	r3, [r7, #32]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d110      	bne.n	8009480 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	b29a      	uxth	r2, r3
 8009462:	f107 0310 	add.w	r3, r7, #16
 8009466:	9301      	str	r3, [sp, #4]
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	9300      	str	r3, [sp, #0]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f001 fea4 	bl	800b1be <xTaskCreate>
 8009476:	4603      	mov	r3, r0
 8009478:	2b01      	cmp	r3, #1
 800947a:	d001      	beq.n	8009480 <osThreadNew+0x13c>
          hTask = NULL;
 800947c:	2300      	movs	r3, #0
 800947e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009480:	693b      	ldr	r3, [r7, #16]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3730      	adds	r7, #48	; 0x30
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	20000770 	.word	0x20000770

08009490 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009498:	f3ef 8305 	mrs	r3, IPSR
 800949c:	613b      	str	r3, [r7, #16]
  return(result);
 800949e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d10f      	bne.n	80094c4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094a4:	f3ef 8310 	mrs	r3, PRIMASK
 80094a8:	60fb      	str	r3, [r7, #12]
  return(result);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d105      	bne.n	80094bc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80094b0:	f3ef 8311 	mrs	r3, BASEPRI
 80094b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d007      	beq.n	80094cc <osDelay+0x3c>
 80094bc:	4b0a      	ldr	r3, [pc, #40]	; (80094e8 <osDelay+0x58>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	2b02      	cmp	r3, #2
 80094c2:	d103      	bne.n	80094cc <osDelay+0x3c>
    stat = osErrorISR;
 80094c4:	f06f 0305 	mvn.w	r3, #5
 80094c8:	617b      	str	r3, [r7, #20]
 80094ca:	e007      	b.n	80094dc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80094cc:	2300      	movs	r3, #0
 80094ce:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d002      	beq.n	80094dc <osDelay+0x4c>
      vTaskDelay(ticks);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f001 ffb8 	bl	800b44c <vTaskDelay>
    }
  }

  return (stat);
 80094dc:	697b      	ldr	r3, [r7, #20]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20000770 	.word	0x20000770

080094ec <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08a      	sub	sp, #40	; 0x28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80094f4:	2300      	movs	r3, #0
 80094f6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094f8:	f3ef 8305 	mrs	r3, IPSR
 80094fc:	613b      	str	r3, [r7, #16]
  return(result);
 80094fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8009500:	2b00      	cmp	r3, #0
 8009502:	f040 8085 	bne.w	8009610 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009506:	f3ef 8310 	mrs	r3, PRIMASK
 800950a:	60fb      	str	r3, [r7, #12]
  return(result);
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d105      	bne.n	800951e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009512:	f3ef 8311 	mrs	r3, BASEPRI
 8009516:	60bb      	str	r3, [r7, #8]
  return(result);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d003      	beq.n	8009526 <osMutexNew+0x3a>
 800951e:	4b3f      	ldr	r3, [pc, #252]	; (800961c <osMutexNew+0x130>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b02      	cmp	r3, #2
 8009524:	d074      	beq.n	8009610 <osMutexNew+0x124>
    if (attr != NULL) {
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <osMutexNew+0x48>
      type = attr->attr_bits;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	623b      	str	r3, [r7, #32]
 8009532:	e001      	b.n	8009538 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8009534:	2300      	movs	r3, #0
 8009536:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009538:	6a3b      	ldr	r3, [r7, #32]
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	d002      	beq.n	8009548 <osMutexNew+0x5c>
      rmtx = 1U;
 8009542:	2301      	movs	r3, #1
 8009544:	61fb      	str	r3, [r7, #28]
 8009546:	e001      	b.n	800954c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8009548:	2300      	movs	r3, #0
 800954a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	f003 0308 	and.w	r3, r3, #8
 8009552:	2b00      	cmp	r3, #0
 8009554:	d15c      	bne.n	8009610 <osMutexNew+0x124>
      mem = -1;
 8009556:	f04f 33ff 	mov.w	r3, #4294967295
 800955a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d015      	beq.n	800958e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	689b      	ldr	r3, [r3, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d006      	beq.n	8009578 <osMutexNew+0x8c>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	2b4f      	cmp	r3, #79	; 0x4f
 8009570:	d902      	bls.n	8009578 <osMutexNew+0x8c>
          mem = 1;
 8009572:	2301      	movs	r3, #1
 8009574:	61bb      	str	r3, [r7, #24]
 8009576:	e00c      	b.n	8009592 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d108      	bne.n	8009592 <osMutexNew+0xa6>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68db      	ldr	r3, [r3, #12]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d104      	bne.n	8009592 <osMutexNew+0xa6>
            mem = 0;
 8009588:	2300      	movs	r3, #0
 800958a:	61bb      	str	r3, [r7, #24]
 800958c:	e001      	b.n	8009592 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d112      	bne.n	80095be <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d007      	beq.n	80095ae <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	689b      	ldr	r3, [r3, #8]
 80095a2:	4619      	mov	r1, r3
 80095a4:	2004      	movs	r0, #4
 80095a6:	f000 fe1a 	bl	800a1de <xQueueCreateMutexStatic>
 80095aa:	6278      	str	r0, [r7, #36]	; 0x24
 80095ac:	e016      	b.n	80095dc <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	4619      	mov	r1, r3
 80095b4:	2001      	movs	r0, #1
 80095b6:	f000 fe12 	bl	800a1de <xQueueCreateMutexStatic>
 80095ba:	6278      	str	r0, [r7, #36]	; 0x24
 80095bc:	e00e      	b.n	80095dc <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d10b      	bne.n	80095dc <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80095c4:	69fb      	ldr	r3, [r7, #28]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d004      	beq.n	80095d4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80095ca:	2004      	movs	r0, #4
 80095cc:	f000 fdef 	bl	800a1ae <xQueueCreateMutex>
 80095d0:	6278      	str	r0, [r7, #36]	; 0x24
 80095d2:	e003      	b.n	80095dc <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80095d4:	2001      	movs	r0, #1
 80095d6:	f000 fdea 	bl	800a1ae <xQueueCreateMutex>
 80095da:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00c      	beq.n	80095fc <osMutexNew+0x110>
        if (attr != NULL) {
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d003      	beq.n	80095f0 <osMutexNew+0x104>
          name = attr->name;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	617b      	str	r3, [r7, #20]
 80095ee:	e001      	b.n	80095f4 <osMutexNew+0x108>
        } else {
          name = NULL;
 80095f0:	2300      	movs	r3, #0
 80095f2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80095f4:	6979      	ldr	r1, [r7, #20]
 80095f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095f8:	f001 fcf6 	bl	800afe8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80095fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d006      	beq.n	8009610 <osMutexNew+0x124>
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009612:	4618      	mov	r0, r3
 8009614:	3728      	adds	r7, #40	; 0x28
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000770 	.word	0x20000770

08009620 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8009620:	b580      	push	{r7, lr}
 8009622:	b088      	sub	sp, #32
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f023 0301 	bic.w	r3, r3, #1
 8009630:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f003 0301 	and.w	r3, r3, #1
 8009638:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800963a:	2300      	movs	r3, #0
 800963c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800963e:	f3ef 8305 	mrs	r3, IPSR
 8009642:	613b      	str	r3, [r7, #16]
  return(result);
 8009644:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10f      	bne.n	800966a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800964a:	f3ef 8310 	mrs	r3, PRIMASK
 800964e:	60fb      	str	r3, [r7, #12]
  return(result);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d105      	bne.n	8009662 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009656:	f3ef 8311 	mrs	r3, BASEPRI
 800965a:	60bb      	str	r3, [r7, #8]
  return(result);
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d007      	beq.n	8009672 <osMutexAcquire+0x52>
 8009662:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <osMutexAcquire+0xb8>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	2b02      	cmp	r3, #2
 8009668:	d103      	bne.n	8009672 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800966a:	f06f 0305 	mvn.w	r3, #5
 800966e:	61fb      	str	r3, [r7, #28]
 8009670:	e02c      	b.n	80096cc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d103      	bne.n	8009680 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8009678:	f06f 0303 	mvn.w	r3, #3
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	e025      	b.n	80096cc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d011      	beq.n	80096aa <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	69b8      	ldr	r0, [r7, #24]
 800968a:	f000 fdf9 	bl	800a280 <xQueueTakeMutexRecursive>
 800968e:	4603      	mov	r3, r0
 8009690:	2b01      	cmp	r3, #1
 8009692:	d01b      	beq.n	80096cc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d003      	beq.n	80096a2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800969a:	f06f 0301 	mvn.w	r3, #1
 800969e:	61fb      	str	r3, [r7, #28]
 80096a0:	e014      	b.n	80096cc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80096a2:	f06f 0302 	mvn.w	r3, #2
 80096a6:	61fb      	str	r3, [r7, #28]
 80096a8:	e010      	b.n	80096cc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80096aa:	6839      	ldr	r1, [r7, #0]
 80096ac:	69b8      	ldr	r0, [r7, #24]
 80096ae:	f001 f9b3 	bl	800aa18 <xQueueSemaphoreTake>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d009      	beq.n	80096cc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d003      	beq.n	80096c6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80096be:	f06f 0301 	mvn.w	r3, #1
 80096c2:	61fb      	str	r3, [r7, #28]
 80096c4:	e002      	b.n	80096cc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80096c6:	f06f 0302 	mvn.w	r3, #2
 80096ca:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80096cc:	69fb      	ldr	r3, [r7, #28]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3720      	adds	r7, #32
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}
 80096d6:	bf00      	nop
 80096d8:	20000770 	.word	0x20000770

080096dc <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f023 0301 	bic.w	r3, r3, #1
 80096ea:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f003 0301 	and.w	r3, r3, #1
 80096f2:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80096f4:	2300      	movs	r3, #0
 80096f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096f8:	f3ef 8305 	mrs	r3, IPSR
 80096fc:	613b      	str	r3, [r7, #16]
  return(result);
 80096fe:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8009700:	2b00      	cmp	r3, #0
 8009702:	d10f      	bne.n	8009724 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009704:	f3ef 8310 	mrs	r3, PRIMASK
 8009708:	60fb      	str	r3, [r7, #12]
  return(result);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d105      	bne.n	800971c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009710:	f3ef 8311 	mrs	r3, BASEPRI
 8009714:	60bb      	str	r3, [r7, #8]
  return(result);
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d007      	beq.n	800972c <osMutexRelease+0x50>
 800971c:	4b16      	ldr	r3, [pc, #88]	; (8009778 <osMutexRelease+0x9c>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b02      	cmp	r3, #2
 8009722:	d103      	bne.n	800972c <osMutexRelease+0x50>
    stat = osErrorISR;
 8009724:	f06f 0305 	mvn.w	r3, #5
 8009728:	61fb      	str	r3, [r7, #28]
 800972a:	e01f      	b.n	800976c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800972c:	69bb      	ldr	r3, [r7, #24]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d103      	bne.n	800973a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8009732:	f06f 0303 	mvn.w	r3, #3
 8009736:	61fb      	str	r3, [r7, #28]
 8009738:	e018      	b.n	800976c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d009      	beq.n	8009754 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009740:	69b8      	ldr	r0, [r7, #24]
 8009742:	f000 fd67 	bl	800a214 <xQueueGiveMutexRecursive>
 8009746:	4603      	mov	r3, r0
 8009748:	2b01      	cmp	r3, #1
 800974a:	d00f      	beq.n	800976c <osMutexRelease+0x90>
        stat = osErrorResource;
 800974c:	f06f 0302 	mvn.w	r3, #2
 8009750:	61fb      	str	r3, [r7, #28]
 8009752:	e00b      	b.n	800976c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009754:	2300      	movs	r3, #0
 8009756:	2200      	movs	r2, #0
 8009758:	2100      	movs	r1, #0
 800975a:	69b8      	ldr	r0, [r7, #24]
 800975c:	f000 fe3a 	bl	800a3d4 <xQueueGenericSend>
 8009760:	4603      	mov	r3, r0
 8009762:	2b01      	cmp	r3, #1
 8009764:	d002      	beq.n	800976c <osMutexRelease+0x90>
        stat = osErrorResource;
 8009766:	f06f 0302 	mvn.w	r3, #2
 800976a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800976c:	69fb      	ldr	r3, [r7, #28]
}
 800976e:	4618      	mov	r0, r3
 8009770:	3720      	adds	r7, #32
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}
 8009776:	bf00      	nop
 8009778:	20000770 	.word	0x20000770

0800977c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800977c:	b580      	push	{r7, lr}
 800977e:	b08c      	sub	sp, #48	; 0x30
 8009780:	af02      	add	r7, sp, #8
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8009788:	2300      	movs	r3, #0
 800978a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800978c:	f3ef 8305 	mrs	r3, IPSR
 8009790:	61bb      	str	r3, [r7, #24]
  return(result);
 8009792:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8009794:	2b00      	cmp	r3, #0
 8009796:	f040 8086 	bne.w	80098a6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800979a:	f3ef 8310 	mrs	r3, PRIMASK
 800979e:	617b      	str	r3, [r7, #20]
  return(result);
 80097a0:	697b      	ldr	r3, [r7, #20]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d105      	bne.n	80097b2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80097a6:	f3ef 8311 	mrs	r3, BASEPRI
 80097aa:	613b      	str	r3, [r7, #16]
  return(result);
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d003      	beq.n	80097ba <osSemaphoreNew+0x3e>
 80097b2:	4b3f      	ldr	r3, [pc, #252]	; (80098b0 <osSemaphoreNew+0x134>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d075      	beq.n	80098a6 <osSemaphoreNew+0x12a>
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d072      	beq.n	80098a6 <osSemaphoreNew+0x12a>
 80097c0:	68ba      	ldr	r2, [r7, #8]
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d86e      	bhi.n	80098a6 <osSemaphoreNew+0x12a>
    mem = -1;
 80097c8:	f04f 33ff 	mov.w	r3, #4294967295
 80097cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d015      	beq.n	8009800 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d006      	beq.n	80097ea <osSemaphoreNew+0x6e>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	2b4f      	cmp	r3, #79	; 0x4f
 80097e2:	d902      	bls.n	80097ea <osSemaphoreNew+0x6e>
        mem = 1;
 80097e4:	2301      	movs	r3, #1
 80097e6:	623b      	str	r3, [r7, #32]
 80097e8:	e00c      	b.n	8009804 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d108      	bne.n	8009804 <osSemaphoreNew+0x88>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <osSemaphoreNew+0x88>
          mem = 0;
 80097fa:	2300      	movs	r3, #0
 80097fc:	623b      	str	r3, [r7, #32]
 80097fe:	e001      	b.n	8009804 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8009800:	2300      	movs	r3, #0
 8009802:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8009804:	6a3b      	ldr	r3, [r7, #32]
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980a:	d04c      	beq.n	80098a6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2b01      	cmp	r3, #1
 8009810:	d128      	bne.n	8009864 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8009812:	6a3b      	ldr	r3, [r7, #32]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d10a      	bne.n	800982e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	2203      	movs	r2, #3
 800981e:	9200      	str	r2, [sp, #0]
 8009820:	2200      	movs	r2, #0
 8009822:	2100      	movs	r1, #0
 8009824:	2001      	movs	r0, #1
 8009826:	f000 fbc1 	bl	8009fac <xQueueGenericCreateStatic>
 800982a:	6278      	str	r0, [r7, #36]	; 0x24
 800982c:	e005      	b.n	800983a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800982e:	2203      	movs	r2, #3
 8009830:	2100      	movs	r1, #0
 8009832:	2001      	movs	r0, #1
 8009834:	f000 fc3c 	bl	800a0b0 <xQueueGenericCreate>
 8009838:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800983a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800983c:	2b00      	cmp	r3, #0
 800983e:	d022      	beq.n	8009886 <osSemaphoreNew+0x10a>
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d01f      	beq.n	8009886 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009846:	2300      	movs	r3, #0
 8009848:	2200      	movs	r2, #0
 800984a:	2100      	movs	r1, #0
 800984c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800984e:	f000 fdc1 	bl	800a3d4 <xQueueGenericSend>
 8009852:	4603      	mov	r3, r0
 8009854:	2b01      	cmp	r3, #1
 8009856:	d016      	beq.n	8009886 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8009858:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800985a:	f001 fa77 	bl	800ad4c <vQueueDelete>
            hSemaphore = NULL;
 800985e:	2300      	movs	r3, #0
 8009860:	627b      	str	r3, [r7, #36]	; 0x24
 8009862:	e010      	b.n	8009886 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d108      	bne.n	800987c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	461a      	mov	r2, r3
 8009870:	68b9      	ldr	r1, [r7, #8]
 8009872:	68f8      	ldr	r0, [r7, #12]
 8009874:	f000 fd3c 	bl	800a2f0 <xQueueCreateCountingSemaphoreStatic>
 8009878:	6278      	str	r0, [r7, #36]	; 0x24
 800987a:	e004      	b.n	8009886 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 fd71 	bl	800a366 <xQueueCreateCountingSemaphore>
 8009884:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00c      	beq.n	80098a6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <osSemaphoreNew+0x11e>
          name = attr->name;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	61fb      	str	r3, [r7, #28]
 8009898:	e001      	b.n	800989e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800989a:	2300      	movs	r3, #0
 800989c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800989e:	69f9      	ldr	r1, [r7, #28]
 80098a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80098a2:	f001 fba1 	bl	800afe8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3728      	adds	r7, #40	; 0x28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}
 80098b0:	20000770 	.word	0x20000770

080098b4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80098c2:	2300      	movs	r3, #0
 80098c4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d103      	bne.n	80098d4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80098cc:	f06f 0303 	mvn.w	r3, #3
 80098d0:	61fb      	str	r3, [r7, #28]
 80098d2:	e04b      	b.n	800996c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80098d4:	f3ef 8305 	mrs	r3, IPSR
 80098d8:	617b      	str	r3, [r7, #20]
  return(result);
 80098da:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d10f      	bne.n	8009900 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098e0:	f3ef 8310 	mrs	r3, PRIMASK
 80098e4:	613b      	str	r3, [r7, #16]
  return(result);
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d105      	bne.n	80098f8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80098ec:	f3ef 8311 	mrs	r3, BASEPRI
 80098f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d026      	beq.n	8009946 <osSemaphoreAcquire+0x92>
 80098f8:	4b1f      	ldr	r3, [pc, #124]	; (8009978 <osSemaphoreAcquire+0xc4>)
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	2b02      	cmp	r3, #2
 80098fe:	d122      	bne.n	8009946 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d003      	beq.n	800990e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8009906:	f06f 0303 	mvn.w	r3, #3
 800990a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800990c:	e02d      	b.n	800996a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800990e:	2300      	movs	r3, #0
 8009910:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8009912:	f107 0308 	add.w	r3, r7, #8
 8009916:	461a      	mov	r2, r3
 8009918:	2100      	movs	r1, #0
 800991a:	69b8      	ldr	r0, [r7, #24]
 800991c:	f001 f990 	bl	800ac40 <xQueueReceiveFromISR>
 8009920:	4603      	mov	r3, r0
 8009922:	2b01      	cmp	r3, #1
 8009924:	d003      	beq.n	800992e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8009926:	f06f 0302 	mvn.w	r3, #2
 800992a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800992c:	e01d      	b.n	800996a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800992e:	68bb      	ldr	r3, [r7, #8]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d01a      	beq.n	800996a <osSemaphoreAcquire+0xb6>
 8009934:	4b11      	ldr	r3, [pc, #68]	; (800997c <osSemaphoreAcquire+0xc8>)
 8009936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800993a:	601a      	str	r2, [r3, #0]
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8009944:	e011      	b.n	800996a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009946:	6839      	ldr	r1, [r7, #0]
 8009948:	69b8      	ldr	r0, [r7, #24]
 800994a:	f001 f865 	bl	800aa18 <xQueueSemaphoreTake>
 800994e:	4603      	mov	r3, r0
 8009950:	2b01      	cmp	r3, #1
 8009952:	d00b      	beq.n	800996c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d003      	beq.n	8009962 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800995a:	f06f 0301 	mvn.w	r3, #1
 800995e:	61fb      	str	r3, [r7, #28]
 8009960:	e004      	b.n	800996c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8009962:	f06f 0302 	mvn.w	r3, #2
 8009966:	61fb      	str	r3, [r7, #28]
 8009968:	e000      	b.n	800996c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800996a:	bf00      	nop
      }
    }
  }

  return (stat);
 800996c:	69fb      	ldr	r3, [r7, #28]
}
 800996e:	4618      	mov	r0, r3
 8009970:	3720      	adds	r7, #32
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}
 8009976:	bf00      	nop
 8009978:	20000770 	.word	0x20000770
 800997c:	e000ed04 	.word	0xe000ed04

08009980 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009980:	b580      	push	{r7, lr}
 8009982:	b088      	sub	sp, #32
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800998c:	2300      	movs	r3, #0
 800998e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8009990:	69bb      	ldr	r3, [r7, #24]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d103      	bne.n	800999e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009996:	f06f 0303 	mvn.w	r3, #3
 800999a:	61fb      	str	r3, [r7, #28]
 800999c:	e03e      	b.n	8009a1c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800999e:	f3ef 8305 	mrs	r3, IPSR
 80099a2:	617b      	str	r3, [r7, #20]
  return(result);
 80099a4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d10f      	bne.n	80099ca <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099aa:	f3ef 8310 	mrs	r3, PRIMASK
 80099ae:	613b      	str	r3, [r7, #16]
  return(result);
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d105      	bne.n	80099c2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80099b6:	f3ef 8311 	mrs	r3, BASEPRI
 80099ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d01e      	beq.n	8009a00 <osSemaphoreRelease+0x80>
 80099c2:	4b19      	ldr	r3, [pc, #100]	; (8009a28 <osSemaphoreRelease+0xa8>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	d11a      	bne.n	8009a00 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80099ce:	f107 0308 	add.w	r3, r7, #8
 80099d2:	4619      	mov	r1, r3
 80099d4:	69b8      	ldr	r0, [r7, #24]
 80099d6:	f000 fea3 	bl	800a720 <xQueueGiveFromISR>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d003      	beq.n	80099e8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80099e0:	f06f 0302 	mvn.w	r3, #2
 80099e4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80099e6:	e018      	b.n	8009a1a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80099e8:	68bb      	ldr	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d015      	beq.n	8009a1a <osSemaphoreRelease+0x9a>
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <osSemaphoreRelease+0xac>)
 80099f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099f4:	601a      	str	r2, [r3, #0]
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80099fe:	e00c      	b.n	8009a1a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009a00:	2300      	movs	r3, #0
 8009a02:	2200      	movs	r2, #0
 8009a04:	2100      	movs	r1, #0
 8009a06:	69b8      	ldr	r0, [r7, #24]
 8009a08:	f000 fce4 	bl	800a3d4 <xQueueGenericSend>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d004      	beq.n	8009a1c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8009a12:	f06f 0302 	mvn.w	r3, #2
 8009a16:	61fb      	str	r3, [r7, #28]
 8009a18:	e000      	b.n	8009a1c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8009a1a:	bf00      	nop
    }
  }

  return (stat);
 8009a1c:	69fb      	ldr	r3, [r7, #28]
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3720      	adds	r7, #32
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20000770 	.word	0x20000770
 8009a2c:	e000ed04 	.word	0xe000ed04

08009a30 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b08c      	sub	sp, #48	; 0x30
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a40:	f3ef 8305 	mrs	r3, IPSR
 8009a44:	61bb      	str	r3, [r7, #24]
  return(result);
 8009a46:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d16f      	bne.n	8009b2c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a50:	617b      	str	r3, [r7, #20]
  return(result);
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d105      	bne.n	8009a64 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009a58:	f3ef 8311 	mrs	r3, BASEPRI
 8009a5c:	613b      	str	r3, [r7, #16]
  return(result);
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d003      	beq.n	8009a6c <osMessageQueueNew+0x3c>
 8009a64:	4b34      	ldr	r3, [pc, #208]	; (8009b38 <osMessageQueueNew+0x108>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b02      	cmp	r3, #2
 8009a6a:	d05f      	beq.n	8009b2c <osMessageQueueNew+0xfc>
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d05c      	beq.n	8009b2c <osMessageQueueNew+0xfc>
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d059      	beq.n	8009b2c <osMessageQueueNew+0xfc>
    mem = -1;
 8009a78:	f04f 33ff 	mov.w	r3, #4294967295
 8009a7c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d029      	beq.n	8009ad8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	689b      	ldr	r3, [r3, #8]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d012      	beq.n	8009ab2 <osMessageQueueNew+0x82>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	2b4f      	cmp	r3, #79	; 0x4f
 8009a92:	d90e      	bls.n	8009ab2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d00a      	beq.n	8009ab2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	695a      	ldr	r2, [r3, #20]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	68b9      	ldr	r1, [r7, #8]
 8009aa4:	fb01 f303 	mul.w	r3, r1, r3
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d302      	bcc.n	8009ab2 <osMessageQueueNew+0x82>
        mem = 1;
 8009aac:	2301      	movs	r3, #1
 8009aae:	623b      	str	r3, [r7, #32]
 8009ab0:	e014      	b.n	8009adc <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	689b      	ldr	r3, [r3, #8]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d110      	bne.n	8009adc <osMessageQueueNew+0xac>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d10c      	bne.n	8009adc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d108      	bne.n	8009adc <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	695b      	ldr	r3, [r3, #20]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d104      	bne.n	8009adc <osMessageQueueNew+0xac>
          mem = 0;
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	623b      	str	r3, [r7, #32]
 8009ad6:	e001      	b.n	8009adc <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d10b      	bne.n	8009afa <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	691a      	ldr	r2, [r3, #16]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	2100      	movs	r1, #0
 8009aec:	9100      	str	r1, [sp, #0]
 8009aee:	68b9      	ldr	r1, [r7, #8]
 8009af0:	68f8      	ldr	r0, [r7, #12]
 8009af2:	f000 fa5b 	bl	8009fac <xQueueGenericCreateStatic>
 8009af6:	6278      	str	r0, [r7, #36]	; 0x24
 8009af8:	e008      	b.n	8009b0c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d105      	bne.n	8009b0c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8009b00:	2200      	movs	r2, #0
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 fad3 	bl	800a0b0 <xQueueGenericCreate>
 8009b0a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8009b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00c      	beq.n	8009b2c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d003      	beq.n	8009b20 <osMessageQueueNew+0xf0>
        name = attr->name;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	61fb      	str	r3, [r7, #28]
 8009b1e:	e001      	b.n	8009b24 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8009b24:	69f9      	ldr	r1, [r7, #28]
 8009b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009b28:	f001 fa5e 	bl	800afe8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3728      	adds	r7, #40	; 0x28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000770 	.word	0x20000770

08009b3c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b08a      	sub	sp, #40	; 0x28
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	60f8      	str	r0, [r7, #12]
 8009b44:	60b9      	str	r1, [r7, #8]
 8009b46:	603b      	str	r3, [r7, #0]
 8009b48:	4613      	mov	r3, r2
 8009b4a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009b50:	2300      	movs	r3, #0
 8009b52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b54:	f3ef 8305 	mrs	r3, IPSR
 8009b58:	61fb      	str	r3, [r7, #28]
  return(result);
 8009b5a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d10f      	bne.n	8009b80 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b60:	f3ef 8310 	mrs	r3, PRIMASK
 8009b64:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d105      	bne.n	8009b78 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8009b70:	617b      	str	r3, [r7, #20]
  return(result);
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d02c      	beq.n	8009bd2 <osMessageQueuePut+0x96>
 8009b78:	4b28      	ldr	r3, [pc, #160]	; (8009c1c <osMessageQueuePut+0xe0>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d128      	bne.n	8009bd2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d005      	beq.n	8009b92 <osMessageQueuePut+0x56>
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d002      	beq.n	8009b92 <osMessageQueuePut+0x56>
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d003      	beq.n	8009b9a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8009b92:	f06f 0303 	mvn.w	r3, #3
 8009b96:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009b98:	e039      	b.n	8009c0e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009b9e:	f107 0210 	add.w	r2, r7, #16
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	68b9      	ldr	r1, [r7, #8]
 8009ba6:	6a38      	ldr	r0, [r7, #32]
 8009ba8:	f000 fd1a 	bl	800a5e0 <xQueueGenericSendFromISR>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b01      	cmp	r3, #1
 8009bb0:	d003      	beq.n	8009bba <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8009bb2:	f06f 0302 	mvn.w	r3, #2
 8009bb6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bb8:	e029      	b.n	8009c0e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d026      	beq.n	8009c0e <osMessageQueuePut+0xd2>
 8009bc0:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <osMessageQueuePut+0xe4>)
 8009bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	f3bf 8f4f 	dsb	sy
 8009bcc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009bd0:	e01d      	b.n	8009c0e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009bd2:	6a3b      	ldr	r3, [r7, #32]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d002      	beq.n	8009bde <osMessageQueuePut+0xa2>
 8009bd8:	68bb      	ldr	r3, [r7, #8]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d103      	bne.n	8009be6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8009bde:	f06f 0303 	mvn.w	r3, #3
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24
 8009be4:	e014      	b.n	8009c10 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009be6:	2300      	movs	r3, #0
 8009be8:	683a      	ldr	r2, [r7, #0]
 8009bea:	68b9      	ldr	r1, [r7, #8]
 8009bec:	6a38      	ldr	r0, [r7, #32]
 8009bee:	f000 fbf1 	bl	800a3d4 <xQueueGenericSend>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d00b      	beq.n	8009c10 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d003      	beq.n	8009c06 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8009bfe:	f06f 0301 	mvn.w	r3, #1
 8009c02:	627b      	str	r3, [r7, #36]	; 0x24
 8009c04:	e004      	b.n	8009c10 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8009c06:	f06f 0302 	mvn.w	r3, #2
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c0c:	e000      	b.n	8009c10 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c0e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3728      	adds	r7, #40	; 0x28
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	20000770 	.word	0x20000770
 8009c20:	e000ed04 	.word	0xe000ed04

08009c24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b08a      	sub	sp, #40	; 0x28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	607a      	str	r2, [r7, #4]
 8009c30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8009c36:	2300      	movs	r3, #0
 8009c38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c3a:	f3ef 8305 	mrs	r3, IPSR
 8009c3e:	61fb      	str	r3, [r7, #28]
  return(result);
 8009c40:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10f      	bne.n	8009c66 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009c46:	f3ef 8310 	mrs	r3, PRIMASK
 8009c4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d105      	bne.n	8009c5e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8009c52:	f3ef 8311 	mrs	r3, BASEPRI
 8009c56:	617b      	str	r3, [r7, #20]
  return(result);
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d02c      	beq.n	8009cb8 <osMessageQueueGet+0x94>
 8009c5e:	4b28      	ldr	r3, [pc, #160]	; (8009d00 <osMessageQueueGet+0xdc>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d128      	bne.n	8009cb8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c66:	6a3b      	ldr	r3, [r7, #32]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d005      	beq.n	8009c78 <osMessageQueueGet+0x54>
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d002      	beq.n	8009c78 <osMessageQueueGet+0x54>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d003      	beq.n	8009c80 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8009c78:	f06f 0303 	mvn.w	r3, #3
 8009c7c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c7e:	e038      	b.n	8009cf2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8009c80:	2300      	movs	r3, #0
 8009c82:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009c84:	f107 0310 	add.w	r3, r7, #16
 8009c88:	461a      	mov	r2, r3
 8009c8a:	68b9      	ldr	r1, [r7, #8]
 8009c8c:	6a38      	ldr	r0, [r7, #32]
 8009c8e:	f000 ffd7 	bl	800ac40 <xQueueReceiveFromISR>
 8009c92:	4603      	mov	r3, r0
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d003      	beq.n	8009ca0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8009c98:	f06f 0302 	mvn.w	r3, #2
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009c9e:	e028      	b.n	8009cf2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d025      	beq.n	8009cf2 <osMessageQueueGet+0xce>
 8009ca6:	4b17      	ldr	r3, [pc, #92]	; (8009d04 <osMessageQueueGet+0xe0>)
 8009ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	f3bf 8f4f 	dsb	sy
 8009cb2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cb6:	e01c      	b.n	8009cf2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <osMessageQueueGet+0xa0>
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d103      	bne.n	8009ccc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8009cc4:	f06f 0303 	mvn.w	r3, #3
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
 8009cca:	e013      	b.n	8009cf4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009ccc:	683a      	ldr	r2, [r7, #0]
 8009cce:	68b9      	ldr	r1, [r7, #8]
 8009cd0:	6a38      	ldr	r0, [r7, #32]
 8009cd2:	f000 fdbb 	bl	800a84c <xQueueReceive>
 8009cd6:	4603      	mov	r3, r0
 8009cd8:	2b01      	cmp	r3, #1
 8009cda:	d00b      	beq.n	8009cf4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8009ce2:	f06f 0301 	mvn.w	r3, #1
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8009ce8:	e004      	b.n	8009cf4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8009cea:	f06f 0302 	mvn.w	r3, #2
 8009cee:	627b      	str	r3, [r7, #36]	; 0x24
 8009cf0:	e000      	b.n	8009cf4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009cf2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3728      	adds	r7, #40	; 0x28
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000770 	.word	0x20000770
 8009d04:	e000ed04 	.word	0xe000ed04

08009d08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	60f8      	str	r0, [r7, #12]
 8009d10:	60b9      	str	r1, [r7, #8]
 8009d12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4a07      	ldr	r2, [pc, #28]	; (8009d34 <vApplicationGetIdleTaskMemory+0x2c>)
 8009d18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	4a06      	ldr	r2, [pc, #24]	; (8009d38 <vApplicationGetIdleTaskMemory+0x30>)
 8009d1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2280      	movs	r2, #128	; 0x80
 8009d24:	601a      	str	r2, [r3, #0]
}
 8009d26:	bf00      	nop
 8009d28:	3714      	adds	r7, #20
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	20000774 	.word	0x20000774
 8009d38:	200007d0 	.word	0x200007d0

08009d3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d3c:	b480      	push	{r7}
 8009d3e:	b085      	sub	sp, #20
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	60f8      	str	r0, [r7, #12]
 8009d44:	60b9      	str	r1, [r7, #8]
 8009d46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	4a07      	ldr	r2, [pc, #28]	; (8009d68 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	4a06      	ldr	r2, [pc, #24]	; (8009d6c <vApplicationGetTimerTaskMemory+0x30>)
 8009d52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d5a:	601a      	str	r2, [r3, #0]
}
 8009d5c:	bf00      	nop
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d66:	4770      	bx	lr
 8009d68:	200009d0 	.word	0x200009d0
 8009d6c:	20000a2c 	.word	0x20000a2c

08009d70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d70:	b480      	push	{r7}
 8009d72:	b083      	sub	sp, #12
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f103 0208 	add.w	r2, r3, #8
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f04f 32ff 	mov.w	r2, #4294967295
 8009d88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f103 0208 	add.w	r2, r3, #8
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f103 0208 	add.w	r2, r3, #8
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009dbe:	bf00      	nop
 8009dc0:	370c      	adds	r7, #12
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc8:	4770      	bx	lr

08009dca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b085      	sub	sp, #20
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	68fa      	ldr	r2, [r7, #12]
 8009dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	689a      	ldr	r2, [r3, #8]
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	1c5a      	adds	r2, r3, #1
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	601a      	str	r2, [r3, #0]
}
 8009e06:	bf00      	nop
 8009e08:	3714      	adds	r7, #20
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e10:	4770      	bx	lr

08009e12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e12:	b480      	push	{r7}
 8009e14:	b085      	sub	sp, #20
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d103      	bne.n	8009e32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	e00c      	b.n	8009e4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	3308      	adds	r3, #8
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	e002      	b.n	8009e40 <vListInsert+0x2e>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	685b      	ldr	r3, [r3, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d2f6      	bcs.n	8009e3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	685a      	ldr	r2, [r3, #4]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	683a      	ldr	r2, [r7, #0]
 8009e5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	683a      	ldr	r2, [r7, #0]
 8009e66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	1c5a      	adds	r2, r3, #1
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	601a      	str	r2, [r3, #0]
}
 8009e78:	bf00      	nop
 8009e7a:	3714      	adds	r7, #20
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	691b      	ldr	r3, [r3, #16]
 8009e90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	6892      	ldr	r2, [r2, #8]
 8009e9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	689b      	ldr	r3, [r3, #8]
 8009ea0:	687a      	ldr	r2, [r7, #4]
 8009ea2:	6852      	ldr	r2, [r2, #4]
 8009ea4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d103      	bne.n	8009eb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	689a      	ldr	r2, [r3, #8]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	1e5a      	subs	r2, r3, #1
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d10c      	bne.n	8009f06 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef0:	b672      	cpsid	i
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	b662      	cpsie	i
 8009f00:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f02:	bf00      	nop
 8009f04:	e7fe      	b.n	8009f04 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8009f06:	f002 fd91 	bl	800ca2c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f12:	68f9      	ldr	r1, [r7, #12]
 8009f14:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f16:	fb01 f303 	mul.w	r3, r1, r3
 8009f1a:	441a      	add	r2, r3
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681a      	ldr	r2, [r3, #0]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f36:	3b01      	subs	r3, #1
 8009f38:	68f9      	ldr	r1, [r7, #12]
 8009f3a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f3c:	fb01 f303 	mul.w	r3, r1, r3
 8009f40:	441a      	add	r2, r3
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	22ff      	movs	r2, #255	; 0xff
 8009f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	22ff      	movs	r2, #255	; 0xff
 8009f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d114      	bne.n	8009f86 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	691b      	ldr	r3, [r3, #16]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d01a      	beq.n	8009f9a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	3310      	adds	r3, #16
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f001 fd3d 	bl	800b9e8 <xTaskRemoveFromEventList>
 8009f6e:	4603      	mov	r3, r0
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d012      	beq.n	8009f9a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f74:	4b0c      	ldr	r3, [pc, #48]	; (8009fa8 <xQueueGenericReset+0xd0>)
 8009f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f7a:	601a      	str	r2, [r3, #0]
 8009f7c:	f3bf 8f4f 	dsb	sy
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	e009      	b.n	8009f9a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3310      	adds	r3, #16
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7ff fef0 	bl	8009d70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3324      	adds	r3, #36	; 0x24
 8009f94:	4618      	mov	r0, r3
 8009f96:	f7ff feeb 	bl	8009d70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009f9a:	f002 fd7b 	bl	800ca94 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009f9e:	2301      	movs	r3, #1
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08e      	sub	sp, #56	; 0x38
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	60f8      	str	r0, [r7, #12]
 8009fb4:	60b9      	str	r1, [r7, #8]
 8009fb6:	607a      	str	r2, [r7, #4]
 8009fb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d10c      	bne.n	8009fda <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc4:	b672      	cpsid	i
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	b662      	cpsie	i
 8009fd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009fd6:	bf00      	nop
 8009fd8:	e7fe      	b.n	8009fd8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d10c      	bne.n	8009ffa <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe4:	b672      	cpsid	i
 8009fe6:	f383 8811 	msr	BASEPRI, r3
 8009fea:	f3bf 8f6f 	isb	sy
 8009fee:	f3bf 8f4f 	dsb	sy
 8009ff2:	b662      	cpsie	i
 8009ff4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d002      	beq.n	800a006 <xQueueGenericCreateStatic+0x5a>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d001      	beq.n	800a00a <xQueueGenericCreateStatic+0x5e>
 800a006:	2301      	movs	r3, #1
 800a008:	e000      	b.n	800a00c <xQueueGenericCreateStatic+0x60>
 800a00a:	2300      	movs	r3, #0
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d10c      	bne.n	800a02a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800a010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a014:	b672      	cpsid	i
 800a016:	f383 8811 	msr	BASEPRI, r3
 800a01a:	f3bf 8f6f 	isb	sy
 800a01e:	f3bf 8f4f 	dsb	sy
 800a022:	b662      	cpsie	i
 800a024:	623b      	str	r3, [r7, #32]
}
 800a026:	bf00      	nop
 800a028:	e7fe      	b.n	800a028 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d102      	bne.n	800a036 <xQueueGenericCreateStatic+0x8a>
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d101      	bne.n	800a03a <xQueueGenericCreateStatic+0x8e>
 800a036:	2301      	movs	r3, #1
 800a038:	e000      	b.n	800a03c <xQueueGenericCreateStatic+0x90>
 800a03a:	2300      	movs	r3, #0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d10c      	bne.n	800a05a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800a040:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a044:	b672      	cpsid	i
 800a046:	f383 8811 	msr	BASEPRI, r3
 800a04a:	f3bf 8f6f 	isb	sy
 800a04e:	f3bf 8f4f 	dsb	sy
 800a052:	b662      	cpsie	i
 800a054:	61fb      	str	r3, [r7, #28]
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a05a:	2350      	movs	r3, #80	; 0x50
 800a05c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2b50      	cmp	r3, #80	; 0x50
 800a062:	d00c      	beq.n	800a07e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800a064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a068:	b672      	cpsid	i
 800a06a:	f383 8811 	msr	BASEPRI, r3
 800a06e:	f3bf 8f6f 	isb	sy
 800a072:	f3bf 8f4f 	dsb	sy
 800a076:	b662      	cpsie	i
 800a078:	61bb      	str	r3, [r7, #24]
}
 800a07a:	bf00      	nop
 800a07c:	e7fe      	b.n	800a07c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a07e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00d      	beq.n	800a0a6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	2201      	movs	r2, #1
 800a08e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a092:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a098:	9300      	str	r3, [sp, #0]
 800a09a:	4613      	mov	r3, r2
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	68b9      	ldr	r1, [r7, #8]
 800a0a0:	68f8      	ldr	r0, [r7, #12]
 800a0a2:	f000 f847 	bl	800a134 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3730      	adds	r7, #48	; 0x30
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b08a      	sub	sp, #40	; 0x28
 800a0b4:	af02      	add	r7, sp, #8
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10c      	bne.n	800a0de <xQueueGenericCreate+0x2e>
	__asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c8:	b672      	cpsid	i
 800a0ca:	f383 8811 	msr	BASEPRI, r3
 800a0ce:	f3bf 8f6f 	isb	sy
 800a0d2:	f3bf 8f4f 	dsb	sy
 800a0d6:	b662      	cpsie	i
 800a0d8:	613b      	str	r3, [r7, #16]
}
 800a0da:	bf00      	nop
 800a0dc:	e7fe      	b.n	800a0dc <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d102      	bne.n	800a0ea <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	61fb      	str	r3, [r7, #28]
 800a0e8:	e004      	b.n	800a0f4 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	fb02 f303 	mul.w	r3, r2, r3
 800a0f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a0f4:	69fb      	ldr	r3, [r7, #28]
 800a0f6:	3350      	adds	r3, #80	; 0x50
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f002 fdc3 	bl	800cc84 <pvPortMalloc>
 800a0fe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a100:	69bb      	ldr	r3, [r7, #24]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d011      	beq.n	800a12a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a10a:	697b      	ldr	r3, [r7, #20]
 800a10c:	3350      	adds	r3, #80	; 0x50
 800a10e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a110:	69bb      	ldr	r3, [r7, #24]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a118:	79fa      	ldrb	r2, [r7, #7]
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	9300      	str	r3, [sp, #0]
 800a11e:	4613      	mov	r3, r2
 800a120:	697a      	ldr	r2, [r7, #20]
 800a122:	68b9      	ldr	r1, [r7, #8]
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f000 f805 	bl	800a134 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a12a:	69bb      	ldr	r3, [r7, #24]
	}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3720      	adds	r7, #32
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
 800a140:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d103      	bne.n	800a150 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a148:	69bb      	ldr	r3, [r7, #24]
 800a14a:	69ba      	ldr	r2, [r7, #24]
 800a14c:	601a      	str	r2, [r3, #0]
 800a14e:	e002      	b.n	800a156 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a15c:	69bb      	ldr	r3, [r7, #24]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a162:	2101      	movs	r1, #1
 800a164:	69b8      	ldr	r0, [r7, #24]
 800a166:	f7ff feb7 	bl	8009ed8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	78fa      	ldrb	r2, [r7, #3]
 800a16e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a172:	bf00      	nop
 800a174:	3710      	adds	r7, #16
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b082      	sub	sp, #8
 800a17e:	af00      	add	r7, sp, #0
 800a180:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00e      	beq.n	800a1a6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a19a:	2300      	movs	r3, #0
 800a19c:	2200      	movs	r2, #0
 800a19e:	2100      	movs	r1, #0
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f917 	bl	800a3d4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a1a6:	bf00      	nop
 800a1a8:	3708      	adds	r7, #8
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	bd80      	pop	{r7, pc}

0800a1ae <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a1ae:	b580      	push	{r7, lr}
 800a1b0:	b086      	sub	sp, #24
 800a1b2:	af00      	add	r7, sp, #0
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	617b      	str	r3, [r7, #20]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a1c0:	79fb      	ldrb	r3, [r7, #7]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	6939      	ldr	r1, [r7, #16]
 800a1c6:	6978      	ldr	r0, [r7, #20]
 800a1c8:	f7ff ff72 	bl	800a0b0 <xQueueGenericCreate>
 800a1cc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a1ce:	68f8      	ldr	r0, [r7, #12]
 800a1d0:	f7ff ffd3 	bl	800a17a <prvInitialiseMutex>

		return xNewQueue;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
	}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b088      	sub	sp, #32
 800a1e2:	af02      	add	r7, sp, #8
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	6039      	str	r1, [r7, #0]
 800a1e8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	617b      	str	r3, [r7, #20]
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a1f2:	79fb      	ldrb	r3, [r7, #7]
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	6939      	ldr	r1, [r7, #16]
 800a1fc:	6978      	ldr	r0, [r7, #20]
 800a1fe:	f7ff fed5 	bl	8009fac <xQueueGenericCreateStatic>
 800a202:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f7ff ffb8 	bl	800a17a <prvInitialiseMutex>

		return xNewQueue;
 800a20a:	68fb      	ldr	r3, [r7, #12]
	}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3718      	adds	r7, #24
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b087      	sub	sp, #28
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a220:	693b      	ldr	r3, [r7, #16]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10c      	bne.n	800a240 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	b672      	cpsid	i
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	b662      	cpsie	i
 800a23a:	60fb      	str	r3, [r7, #12]
}
 800a23c:	bf00      	nop
 800a23e:	e7fe      	b.n	800a23e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	689c      	ldr	r4, [r3, #8]
 800a244:	f001 fd96 	bl	800bd74 <xTaskGetCurrentTaskHandle>
 800a248:	4603      	mov	r3, r0
 800a24a:	429c      	cmp	r4, r3
 800a24c:	d111      	bne.n	800a272 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	1e5a      	subs	r2, r3, #1
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	68db      	ldr	r3, [r3, #12]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d105      	bne.n	800a26c <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a260:	2300      	movs	r3, #0
 800a262:	2200      	movs	r2, #0
 800a264:	2100      	movs	r1, #0
 800a266:	6938      	ldr	r0, [r7, #16]
 800a268:	f000 f8b4 	bl	800a3d4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a26c:	2301      	movs	r3, #1
 800a26e:	617b      	str	r3, [r7, #20]
 800a270:	e001      	b.n	800a276 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a272:	2300      	movs	r3, #0
 800a274:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a276:	697b      	ldr	r3, [r7, #20]
	}
 800a278:	4618      	mov	r0, r3
 800a27a:	371c      	adds	r7, #28
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd90      	pop	{r4, r7, pc}

0800a280 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a280:	b590      	push	{r4, r7, lr}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d10c      	bne.n	800a2ae <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a298:	b672      	cpsid	i
 800a29a:	f383 8811 	msr	BASEPRI, r3
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f3bf 8f4f 	dsb	sy
 800a2a6:	b662      	cpsie	i
 800a2a8:	60fb      	str	r3, [r7, #12]
}
 800a2aa:	bf00      	nop
 800a2ac:	e7fe      	b.n	800a2ac <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a2ae:	693b      	ldr	r3, [r7, #16]
 800a2b0:	689c      	ldr	r4, [r3, #8]
 800a2b2:	f001 fd5f 	bl	800bd74 <xTaskGetCurrentTaskHandle>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	429c      	cmp	r4, r3
 800a2ba:	d107      	bne.n	800a2cc <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	68db      	ldr	r3, [r3, #12]
 800a2c0:	1c5a      	adds	r2, r3, #1
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	617b      	str	r3, [r7, #20]
 800a2ca:	e00c      	b.n	800a2e6 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6938      	ldr	r0, [r7, #16]
 800a2d0:	f000 fba2 	bl	800aa18 <xQueueSemaphoreTake>
 800a2d4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a2d6:	697b      	ldr	r3, [r7, #20]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d004      	beq.n	800a2e6 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	1c5a      	adds	r2, r3, #1
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a2e6:	697b      	ldr	r3, [r7, #20]
	}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	371c      	adds	r7, #28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd90      	pop	{r4, r7, pc}

0800a2f0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b08a      	sub	sp, #40	; 0x28
 800a2f4:	af02      	add	r7, sp, #8
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10c      	bne.n	800a31c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a306:	b672      	cpsid	i
 800a308:	f383 8811 	msr	BASEPRI, r3
 800a30c:	f3bf 8f6f 	isb	sy
 800a310:	f3bf 8f4f 	dsb	sy
 800a314:	b662      	cpsie	i
 800a316:	61bb      	str	r3, [r7, #24]
}
 800a318:	bf00      	nop
 800a31a:	e7fe      	b.n	800a31a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	429a      	cmp	r2, r3
 800a322:	d90c      	bls.n	800a33e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a328:	b672      	cpsid	i
 800a32a:	f383 8811 	msr	BASEPRI, r3
 800a32e:	f3bf 8f6f 	isb	sy
 800a332:	f3bf 8f4f 	dsb	sy
 800a336:	b662      	cpsie	i
 800a338:	617b      	str	r3, [r7, #20]
}
 800a33a:	bf00      	nop
 800a33c:	e7fe      	b.n	800a33c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a33e:	2302      	movs	r3, #2
 800a340:	9300      	str	r3, [sp, #0]
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	2200      	movs	r2, #0
 800a346:	2100      	movs	r1, #0
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7ff fe2f 	bl	8009fac <xQueueGenericCreateStatic>
 800a34e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d002      	beq.n	800a35c <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a35c:	69fb      	ldr	r3, [r7, #28]
	}
 800a35e:	4618      	mov	r0, r3
 800a360:	3720      	adds	r7, #32
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
 800a36e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10c      	bne.n	800a390 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800a376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37a:	b672      	cpsid	i
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	b662      	cpsie	i
 800a38a:	613b      	str	r3, [r7, #16]
}
 800a38c:	bf00      	nop
 800a38e:	e7fe      	b.n	800a38e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800a390:	683a      	ldr	r2, [r7, #0]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	429a      	cmp	r2, r3
 800a396:	d90c      	bls.n	800a3b2 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800a398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39c:	b672      	cpsid	i
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	f3bf 8f6f 	isb	sy
 800a3a6:	f3bf 8f4f 	dsb	sy
 800a3aa:	b662      	cpsie	i
 800a3ac:	60fb      	str	r3, [r7, #12]
}
 800a3ae:	bf00      	nop
 800a3b0:	e7fe      	b.n	800a3b0 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800a3b2:	2202      	movs	r2, #2
 800a3b4:	2100      	movs	r1, #0
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff fe7a 	bl	800a0b0 <xQueueGenericCreate>
 800a3bc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d002      	beq.n	800a3ca <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800a3ca:	697b      	ldr	r3, [r7, #20]
	}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3718      	adds	r7, #24
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b08e      	sub	sp, #56	; 0x38
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
 800a3e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a3ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10c      	bne.n	800a40a <xQueueGenericSend+0x36>
	__asm volatile
 800a3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3f4:	b672      	cpsid	i
 800a3f6:	f383 8811 	msr	BASEPRI, r3
 800a3fa:	f3bf 8f6f 	isb	sy
 800a3fe:	f3bf 8f4f 	dsb	sy
 800a402:	b662      	cpsie	i
 800a404:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a406:	bf00      	nop
 800a408:	e7fe      	b.n	800a408 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d103      	bne.n	800a418 <xQueueGenericSend+0x44>
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <xQueueGenericSend+0x48>
 800a418:	2301      	movs	r3, #1
 800a41a:	e000      	b.n	800a41e <xQueueGenericSend+0x4a>
 800a41c:	2300      	movs	r3, #0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d10c      	bne.n	800a43c <xQueueGenericSend+0x68>
	__asm volatile
 800a422:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a426:	b672      	cpsid	i
 800a428:	f383 8811 	msr	BASEPRI, r3
 800a42c:	f3bf 8f6f 	isb	sy
 800a430:	f3bf 8f4f 	dsb	sy
 800a434:	b662      	cpsie	i
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a438:	bf00      	nop
 800a43a:	e7fe      	b.n	800a43a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d103      	bne.n	800a44a <xQueueGenericSend+0x76>
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a446:	2b01      	cmp	r3, #1
 800a448:	d101      	bne.n	800a44e <xQueueGenericSend+0x7a>
 800a44a:	2301      	movs	r3, #1
 800a44c:	e000      	b.n	800a450 <xQueueGenericSend+0x7c>
 800a44e:	2300      	movs	r3, #0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d10c      	bne.n	800a46e <xQueueGenericSend+0x9a>
	__asm volatile
 800a454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a458:	b672      	cpsid	i
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	b662      	cpsie	i
 800a468:	623b      	str	r3, [r7, #32]
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a46e:	f001 fc91 	bl	800bd94 <xTaskGetSchedulerState>
 800a472:	4603      	mov	r3, r0
 800a474:	2b00      	cmp	r3, #0
 800a476:	d102      	bne.n	800a47e <xQueueGenericSend+0xaa>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d101      	bne.n	800a482 <xQueueGenericSend+0xae>
 800a47e:	2301      	movs	r3, #1
 800a480:	e000      	b.n	800a484 <xQueueGenericSend+0xb0>
 800a482:	2300      	movs	r3, #0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d10c      	bne.n	800a4a2 <xQueueGenericSend+0xce>
	__asm volatile
 800a488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48c:	b672      	cpsid	i
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	b662      	cpsie	i
 800a49c:	61fb      	str	r3, [r7, #28]
}
 800a49e:	bf00      	nop
 800a4a0:	e7fe      	b.n	800a4a0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4a2:	f002 fac3 	bl	800ca2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d302      	bcc.n	800a4b8 <xQueueGenericSend+0xe4>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	2b02      	cmp	r3, #2
 800a4b6:	d129      	bne.n	800a50c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	68b9      	ldr	r1, [r7, #8]
 800a4bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4be:	f000 fc82 	bl	800adc6 <prvCopyDataToQueue>
 800a4c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d010      	beq.n	800a4ee <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	3324      	adds	r3, #36	; 0x24
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f001 fa89 	bl	800b9e8 <xTaskRemoveFromEventList>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d013      	beq.n	800a504 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a4dc:	4b3f      	ldr	r3, [pc, #252]	; (800a5dc <xQueueGenericSend+0x208>)
 800a4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	f3bf 8f4f 	dsb	sy
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	e00a      	b.n	800a504 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d007      	beq.n	800a504 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a4f4:	4b39      	ldr	r3, [pc, #228]	; (800a5dc <xQueueGenericSend+0x208>)
 800a4f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4fa:	601a      	str	r2, [r3, #0]
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a504:	f002 fac6 	bl	800ca94 <vPortExitCritical>
				return pdPASS;
 800a508:	2301      	movs	r3, #1
 800a50a:	e063      	b.n	800a5d4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d103      	bne.n	800a51a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a512:	f002 fabf 	bl	800ca94 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a516:	2300      	movs	r3, #0
 800a518:	e05c      	b.n	800a5d4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a51a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d106      	bne.n	800a52e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a520:	f107 0314 	add.w	r3, r7, #20
 800a524:	4618      	mov	r0, r3
 800a526:	f001 fac5 	bl	800bab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a52a:	2301      	movs	r3, #1
 800a52c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a52e:	f002 fab1 	bl	800ca94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a532:	f001 f82b 	bl	800b58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a536:	f002 fa79 	bl	800ca2c <vPortEnterCritical>
 800a53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a53c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a540:	b25b      	sxtb	r3, r3
 800a542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a546:	d103      	bne.n	800a550 <xQueueGenericSend+0x17c>
 800a548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54a:	2200      	movs	r2, #0
 800a54c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a556:	b25b      	sxtb	r3, r3
 800a558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a55c:	d103      	bne.n	800a566 <xQueueGenericSend+0x192>
 800a55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a566:	f002 fa95 	bl	800ca94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a56a:	1d3a      	adds	r2, r7, #4
 800a56c:	f107 0314 	add.w	r3, r7, #20
 800a570:	4611      	mov	r1, r2
 800a572:	4618      	mov	r0, r3
 800a574:	f001 fab4 	bl	800bae0 <xTaskCheckForTimeOut>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d124      	bne.n	800a5c8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a57e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a580:	f000 fd19 	bl	800afb6 <prvIsQueueFull>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d018      	beq.n	800a5bc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a58c:	3310      	adds	r3, #16
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	4611      	mov	r1, r2
 800a592:	4618      	mov	r0, r3
 800a594:	f001 f9d4 	bl	800b940 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a598:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a59a:	f000 fca4 	bl	800aee6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a59e:	f001 f803 	bl	800b5a8 <xTaskResumeAll>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	f47f af7c 	bne.w	800a4a2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800a5aa:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <xQueueGenericSend+0x208>)
 800a5ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5b0:	601a      	str	r2, [r3, #0]
 800a5b2:	f3bf 8f4f 	dsb	sy
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	e772      	b.n	800a4a2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5be:	f000 fc92 	bl	800aee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5c2:	f000 fff1 	bl	800b5a8 <xTaskResumeAll>
 800a5c6:	e76c      	b.n	800a4a2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a5c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5ca:	f000 fc8c 	bl	800aee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5ce:	f000 ffeb 	bl	800b5a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a5d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3738      	adds	r7, #56	; 0x38
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	e000ed04 	.word	0xe000ed04

0800a5e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b08e      	sub	sp, #56	; 0x38
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d10c      	bne.n	800a612 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800a5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5fc:	b672      	cpsid	i
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	b662      	cpsie	i
 800a60c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a60e:	bf00      	nop
 800a610:	e7fe      	b.n	800a610 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d103      	bne.n	800a620 <xQueueGenericSendFromISR+0x40>
 800a618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d101      	bne.n	800a624 <xQueueGenericSendFromISR+0x44>
 800a620:	2301      	movs	r3, #1
 800a622:	e000      	b.n	800a626 <xQueueGenericSendFromISR+0x46>
 800a624:	2300      	movs	r3, #0
 800a626:	2b00      	cmp	r3, #0
 800a628:	d10c      	bne.n	800a644 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800a62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a62e:	b672      	cpsid	i
 800a630:	f383 8811 	msr	BASEPRI, r3
 800a634:	f3bf 8f6f 	isb	sy
 800a638:	f3bf 8f4f 	dsb	sy
 800a63c:	b662      	cpsie	i
 800a63e:	623b      	str	r3, [r7, #32]
}
 800a640:	bf00      	nop
 800a642:	e7fe      	b.n	800a642 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	2b02      	cmp	r3, #2
 800a648:	d103      	bne.n	800a652 <xQueueGenericSendFromISR+0x72>
 800a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a64e:	2b01      	cmp	r3, #1
 800a650:	d101      	bne.n	800a656 <xQueueGenericSendFromISR+0x76>
 800a652:	2301      	movs	r3, #1
 800a654:	e000      	b.n	800a658 <xQueueGenericSendFromISR+0x78>
 800a656:	2300      	movs	r3, #0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10c      	bne.n	800a676 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a660:	b672      	cpsid	i
 800a662:	f383 8811 	msr	BASEPRI, r3
 800a666:	f3bf 8f6f 	isb	sy
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	b662      	cpsie	i
 800a670:	61fb      	str	r3, [r7, #28]
}
 800a672:	bf00      	nop
 800a674:	e7fe      	b.n	800a674 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a676:	f002 fac1 	bl	800cbfc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a67a:	f3ef 8211 	mrs	r2, BASEPRI
 800a67e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a682:	b672      	cpsid	i
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	b662      	cpsie	i
 800a692:	61ba      	str	r2, [r7, #24]
 800a694:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a696:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a69a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6a2:	429a      	cmp	r2, r3
 800a6a4:	d302      	bcc.n	800a6ac <xQueueGenericSendFromISR+0xcc>
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d12c      	bne.n	800a706 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a6b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	68b9      	ldr	r1, [r7, #8]
 800a6ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a6bc:	f000 fb83 	bl	800adc6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800a6c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c8:	d112      	bne.n	800a6f0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d016      	beq.n	800a700 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d4:	3324      	adds	r3, #36	; 0x24
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	f001 f986 	bl	800b9e8 <xTaskRemoveFromEventList>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00e      	beq.n	800a700 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00b      	beq.n	800a700 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]
 800a6ee:	e007      	b.n	800a700 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a6f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	b25a      	sxtb	r2, r3
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a700:	2301      	movs	r3, #1
 800a702:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800a704:	e001      	b.n	800a70a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a706:	2300      	movs	r3, #0
 800a708:	637b      	str	r3, [r7, #52]	; 0x34
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a714:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3738      	adds	r7, #56	; 0x38
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08e      	sub	sp, #56	; 0x38
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a730:	2b00      	cmp	r3, #0
 800a732:	d10c      	bne.n	800a74e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800a734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a738:	b672      	cpsid	i
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	b662      	cpsie	i
 800a748:	623b      	str	r3, [r7, #32]
}
 800a74a:	bf00      	nop
 800a74c:	e7fe      	b.n	800a74c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00c      	beq.n	800a770 <xQueueGiveFromISR+0x50>
	__asm volatile
 800a756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a75a:	b672      	cpsid	i
 800a75c:	f383 8811 	msr	BASEPRI, r3
 800a760:	f3bf 8f6f 	isb	sy
 800a764:	f3bf 8f4f 	dsb	sy
 800a768:	b662      	cpsie	i
 800a76a:	61fb      	str	r3, [r7, #28]
}
 800a76c:	bf00      	nop
 800a76e:	e7fe      	b.n	800a76e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d103      	bne.n	800a780 <xQueueGiveFromISR+0x60>
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	689b      	ldr	r3, [r3, #8]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <xQueueGiveFromISR+0x64>
 800a780:	2301      	movs	r3, #1
 800a782:	e000      	b.n	800a786 <xQueueGiveFromISR+0x66>
 800a784:	2300      	movs	r3, #0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10c      	bne.n	800a7a4 <xQueueGiveFromISR+0x84>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	b672      	cpsid	i
 800a790:	f383 8811 	msr	BASEPRI, r3
 800a794:	f3bf 8f6f 	isb	sy
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	b662      	cpsie	i
 800a79e:	61bb      	str	r3, [r7, #24]
}
 800a7a0:	bf00      	nop
 800a7a2:	e7fe      	b.n	800a7a2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a7a4:	f002 fa2a 	bl	800cbfc <vPortValidateInterruptPriority>
	__asm volatile
 800a7a8:	f3ef 8211 	mrs	r2, BASEPRI
 800a7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7b0:	b672      	cpsid	i
 800a7b2:	f383 8811 	msr	BASEPRI, r3
 800a7b6:	f3bf 8f6f 	isb	sy
 800a7ba:	f3bf 8f4f 	dsb	sy
 800a7be:	b662      	cpsie	i
 800a7c0:	617a      	str	r2, [r7, #20]
 800a7c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a7c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d22b      	bcs.n	800a830 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e4:	1c5a      	adds	r2, r3, #1
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a7ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f2:	d112      	bne.n	800a81a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d016      	beq.n	800a82a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fe:	3324      	adds	r3, #36	; 0x24
 800a800:	4618      	mov	r0, r3
 800a802:	f001 f8f1 	bl	800b9e8 <xTaskRemoveFromEventList>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00e      	beq.n	800a82a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00b      	beq.n	800a82a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	2201      	movs	r2, #1
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	e007      	b.n	800a82a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a81a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a81e:	3301      	adds	r3, #1
 800a820:	b2db      	uxtb	r3, r3
 800a822:	b25a      	sxtb	r2, r3
 800a824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a82a:	2301      	movs	r3, #1
 800a82c:	637b      	str	r3, [r7, #52]	; 0x34
 800a82e:	e001      	b.n	800a834 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a830:	2300      	movs	r3, #0
 800a832:	637b      	str	r3, [r7, #52]	; 0x34
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f383 8811 	msr	BASEPRI, r3
}
 800a83e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a842:	4618      	mov	r0, r3
 800a844:	3738      	adds	r7, #56	; 0x38
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}
	...

0800a84c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08c      	sub	sp, #48	; 0x30
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a858:	2300      	movs	r3, #0
 800a85a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10c      	bne.n	800a880 <xQueueReceive+0x34>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86a:	b672      	cpsid	i
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	b662      	cpsie	i
 800a87a:	623b      	str	r3, [r7, #32]
}
 800a87c:	bf00      	nop
 800a87e:	e7fe      	b.n	800a87e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d103      	bne.n	800a88e <xQueueReceive+0x42>
 800a886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <xQueueReceive+0x46>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <xQueueReceive+0x48>
 800a892:	2300      	movs	r3, #0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10c      	bne.n	800a8b2 <xQueueReceive+0x66>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89c:	b672      	cpsid	i
 800a89e:	f383 8811 	msr	BASEPRI, r3
 800a8a2:	f3bf 8f6f 	isb	sy
 800a8a6:	f3bf 8f4f 	dsb	sy
 800a8aa:	b662      	cpsie	i
 800a8ac:	61fb      	str	r3, [r7, #28]
}
 800a8ae:	bf00      	nop
 800a8b0:	e7fe      	b.n	800a8b0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8b2:	f001 fa6f 	bl	800bd94 <xTaskGetSchedulerState>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d102      	bne.n	800a8c2 <xQueueReceive+0x76>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d101      	bne.n	800a8c6 <xQueueReceive+0x7a>
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	e000      	b.n	800a8c8 <xQueueReceive+0x7c>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10c      	bne.n	800a8e6 <xQueueReceive+0x9a>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	b672      	cpsid	i
 800a8d2:	f383 8811 	msr	BASEPRI, r3
 800a8d6:	f3bf 8f6f 	isb	sy
 800a8da:	f3bf 8f4f 	dsb	sy
 800a8de:	b662      	cpsie	i
 800a8e0:	61bb      	str	r3, [r7, #24]
}
 800a8e2:	bf00      	nop
 800a8e4:	e7fe      	b.n	800a8e4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a8e6:	f002 f8a1 	bl	800ca2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d01f      	beq.n	800a936 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a8fa:	f000 face 	bl	800ae9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	1e5a      	subs	r2, r3, #1
 800a902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a904:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d00f      	beq.n	800a92e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a910:	3310      	adds	r3, #16
 800a912:	4618      	mov	r0, r3
 800a914:	f001 f868 	bl	800b9e8 <xTaskRemoveFromEventList>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d007      	beq.n	800a92e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a91e:	4b3d      	ldr	r3, [pc, #244]	; (800aa14 <xQueueReceive+0x1c8>)
 800a920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a924:	601a      	str	r2, [r3, #0]
 800a926:	f3bf 8f4f 	dsb	sy
 800a92a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a92e:	f002 f8b1 	bl	800ca94 <vPortExitCritical>
				return pdPASS;
 800a932:	2301      	movs	r3, #1
 800a934:	e069      	b.n	800aa0a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d103      	bne.n	800a944 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a93c:	f002 f8aa 	bl	800ca94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a940:	2300      	movs	r3, #0
 800a942:	e062      	b.n	800aa0a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d106      	bne.n	800a958 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a94a:	f107 0310 	add.w	r3, r7, #16
 800a94e:	4618      	mov	r0, r3
 800a950:	f001 f8b0 	bl	800bab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a954:	2301      	movs	r3, #1
 800a956:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a958:	f002 f89c 	bl	800ca94 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a95c:	f000 fe16 	bl	800b58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a960:	f002 f864 	bl	800ca2c <vPortEnterCritical>
 800a964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a966:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a96a:	b25b      	sxtb	r3, r3
 800a96c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a970:	d103      	bne.n	800a97a <xQueueReceive+0x12e>
 800a972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a974:	2200      	movs	r2, #0
 800a976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a980:	b25b      	sxtb	r3, r3
 800a982:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a986:	d103      	bne.n	800a990 <xQueueReceive+0x144>
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a990:	f002 f880 	bl	800ca94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a994:	1d3a      	adds	r2, r7, #4
 800a996:	f107 0310 	add.w	r3, r7, #16
 800a99a:	4611      	mov	r1, r2
 800a99c:	4618      	mov	r0, r3
 800a99e:	f001 f89f 	bl	800bae0 <xTaskCheckForTimeOut>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d123      	bne.n	800a9f0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9aa:	f000 faee 	bl	800af8a <prvIsQueueEmpty>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d017      	beq.n	800a9e4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	3324      	adds	r3, #36	; 0x24
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f000 ffbf 	bl	800b940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a9c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9c4:	f000 fa8f 	bl	800aee6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a9c8:	f000 fdee 	bl	800b5a8 <xTaskResumeAll>
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d189      	bne.n	800a8e6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800a9d2:	4b10      	ldr	r3, [pc, #64]	; (800aa14 <xQueueReceive+0x1c8>)
 800a9d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	f3bf 8f4f 	dsb	sy
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	e780      	b.n	800a8e6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a9e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e6:	f000 fa7e 	bl	800aee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a9ea:	f000 fddd 	bl	800b5a8 <xTaskResumeAll>
 800a9ee:	e77a      	b.n	800a8e6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a9f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f2:	f000 fa78 	bl	800aee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a9f6:	f000 fdd7 	bl	800b5a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9fc:	f000 fac5 	bl	800af8a <prvIsQueueEmpty>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f43f af6f 	beq.w	800a8e6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa08:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	3730      	adds	r7, #48	; 0x30
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	e000ed04 	.word	0xe000ed04

0800aa18 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08e      	sub	sp, #56	; 0x38
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
 800aa20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800aa22:	2300      	movs	r3, #0
 800aa24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10c      	bne.n	800aa4e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	b672      	cpsid	i
 800aa3a:	f383 8811 	msr	BASEPRI, r3
 800aa3e:	f3bf 8f6f 	isb	sy
 800aa42:	f3bf 8f4f 	dsb	sy
 800aa46:	b662      	cpsie	i
 800aa48:	623b      	str	r3, [r7, #32]
}
 800aa4a:	bf00      	nop
 800aa4c:	e7fe      	b.n	800aa4c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aa4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d00c      	beq.n	800aa70 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800aa56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa5a:	b672      	cpsid	i
 800aa5c:	f383 8811 	msr	BASEPRI, r3
 800aa60:	f3bf 8f6f 	isb	sy
 800aa64:	f3bf 8f4f 	dsb	sy
 800aa68:	b662      	cpsie	i
 800aa6a:	61fb      	str	r3, [r7, #28]
}
 800aa6c:	bf00      	nop
 800aa6e:	e7fe      	b.n	800aa6e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa70:	f001 f990 	bl	800bd94 <xTaskGetSchedulerState>
 800aa74:	4603      	mov	r3, r0
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d102      	bne.n	800aa80 <xQueueSemaphoreTake+0x68>
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d101      	bne.n	800aa84 <xQueueSemaphoreTake+0x6c>
 800aa80:	2301      	movs	r3, #1
 800aa82:	e000      	b.n	800aa86 <xQueueSemaphoreTake+0x6e>
 800aa84:	2300      	movs	r3, #0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d10c      	bne.n	800aaa4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	b672      	cpsid	i
 800aa90:	f383 8811 	msr	BASEPRI, r3
 800aa94:	f3bf 8f6f 	isb	sy
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	b662      	cpsie	i
 800aa9e:	61bb      	str	r3, [r7, #24]
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaa4:	f001 ffc2 	bl	800ca2c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800aaa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800aaae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d024      	beq.n	800aafe <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	1e5a      	subs	r2, r3, #1
 800aab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aabc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d104      	bne.n	800aace <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800aac4:	f001 fae4 	bl	800c090 <pvTaskIncrementMutexHeldCount>
 800aac8:	4602      	mov	r2, r0
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00f      	beq.n	800aaf6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad8:	3310      	adds	r3, #16
 800aada:	4618      	mov	r0, r3
 800aadc:	f000 ff84 	bl	800b9e8 <xTaskRemoveFromEventList>
 800aae0:	4603      	mov	r3, r0
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d007      	beq.n	800aaf6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aae6:	4b55      	ldr	r3, [pc, #340]	; (800ac3c <xQueueSemaphoreTake+0x224>)
 800aae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aaec:	601a      	str	r2, [r3, #0]
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aaf6:	f001 ffcd 	bl	800ca94 <vPortExitCritical>
				return pdPASS;
 800aafa:	2301      	movs	r3, #1
 800aafc:	e099      	b.n	800ac32 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d113      	bne.n	800ab2c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ab04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00c      	beq.n	800ab24 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	b672      	cpsid	i
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	b662      	cpsie	i
 800ab1e:	617b      	str	r3, [r7, #20]
}
 800ab20:	bf00      	nop
 800ab22:	e7fe      	b.n	800ab22 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ab24:	f001 ffb6 	bl	800ca94 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	e082      	b.n	800ac32 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d106      	bne.n	800ab40 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab32:	f107 030c 	add.w	r3, r7, #12
 800ab36:	4618      	mov	r0, r3
 800ab38:	f000 ffbc 	bl	800bab4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab40:	f001 ffa8 	bl	800ca94 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab44:	f000 fd22 	bl	800b58c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab48:	f001 ff70 	bl	800ca2c <vPortEnterCritical>
 800ab4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ab52:	b25b      	sxtb	r3, r3
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab58:	d103      	bne.n	800ab62 <xQueueSemaphoreTake+0x14a>
 800ab5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab68:	b25b      	sxtb	r3, r3
 800ab6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab6e:	d103      	bne.n	800ab78 <xQueueSemaphoreTake+0x160>
 800ab70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab72:	2200      	movs	r2, #0
 800ab74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ab78:	f001 ff8c 	bl	800ca94 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab7c:	463a      	mov	r2, r7
 800ab7e:	f107 030c 	add.w	r3, r7, #12
 800ab82:	4611      	mov	r1, r2
 800ab84:	4618      	mov	r0, r3
 800ab86:	f000 ffab 	bl	800bae0 <xTaskCheckForTimeOut>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d132      	bne.n	800abf6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab92:	f000 f9fa 	bl	800af8a <prvIsQueueEmpty>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d026      	beq.n	800abea <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d109      	bne.n	800abb8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800aba4:	f001 ff42 	bl	800ca2c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	4618      	mov	r0, r3
 800abae:	f001 f90f 	bl	800bdd0 <xTaskPriorityInherit>
 800abb2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800abb4:	f001 ff6e 	bl	800ca94 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800abb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abba:	3324      	adds	r3, #36	; 0x24
 800abbc:	683a      	ldr	r2, [r7, #0]
 800abbe:	4611      	mov	r1, r2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f000 febd 	bl	800b940 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800abc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abc8:	f000 f98d 	bl	800aee6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800abcc:	f000 fcec 	bl	800b5a8 <xTaskResumeAll>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	f47f af66 	bne.w	800aaa4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800abd8:	4b18      	ldr	r3, [pc, #96]	; (800ac3c <xQueueSemaphoreTake+0x224>)
 800abda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	e75c      	b.n	800aaa4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800abea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abec:	f000 f97b 	bl	800aee6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800abf0:	f000 fcda 	bl	800b5a8 <xTaskResumeAll>
 800abf4:	e756      	b.n	800aaa4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800abf6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abf8:	f000 f975 	bl	800aee6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800abfc:	f000 fcd4 	bl	800b5a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ac00:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac02:	f000 f9c2 	bl	800af8a <prvIsQueueEmpty>
 800ac06:	4603      	mov	r3, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f43f af4b 	beq.w	800aaa4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d00d      	beq.n	800ac30 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ac14:	f001 ff0a 	bl	800ca2c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ac18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac1a:	f000 f8bc 	bl	800ad96 <prvGetDisinheritPriorityAfterTimeout>
 800ac1e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ac20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ac26:	4618      	mov	r0, r3
 800ac28:	f001 f9ac 	bl	800bf84 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ac2c:	f001 ff32 	bl	800ca94 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ac30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ac32:	4618      	mov	r0, r3
 800ac34:	3738      	adds	r7, #56	; 0x38
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
 800ac3a:	bf00      	nop
 800ac3c:	e000ed04 	.word	0xe000ed04

0800ac40 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b08e      	sub	sp, #56	; 0x38
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d10c      	bne.n	800ac70 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ac56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac5a:	b672      	cpsid	i
 800ac5c:	f383 8811 	msr	BASEPRI, r3
 800ac60:	f3bf 8f6f 	isb	sy
 800ac64:	f3bf 8f4f 	dsb	sy
 800ac68:	b662      	cpsie	i
 800ac6a:	623b      	str	r3, [r7, #32]
}
 800ac6c:	bf00      	nop
 800ac6e:	e7fe      	b.n	800ac6e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d103      	bne.n	800ac7e <xQueueReceiveFromISR+0x3e>
 800ac76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d101      	bne.n	800ac82 <xQueueReceiveFromISR+0x42>
 800ac7e:	2301      	movs	r3, #1
 800ac80:	e000      	b.n	800ac84 <xQueueReceiveFromISR+0x44>
 800ac82:	2300      	movs	r3, #0
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d10c      	bne.n	800aca2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800ac88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8c:	b672      	cpsid	i
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	b662      	cpsie	i
 800ac9c:	61fb      	str	r3, [r7, #28]
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aca2:	f001 ffab 	bl	800cbfc <vPortValidateInterruptPriority>
	__asm volatile
 800aca6:	f3ef 8211 	mrs	r2, BASEPRI
 800acaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acae:	b672      	cpsid	i
 800acb0:	f383 8811 	msr	BASEPRI, r3
 800acb4:	f3bf 8f6f 	isb	sy
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	b662      	cpsie	i
 800acbe:	61ba      	str	r2, [r7, #24]
 800acc0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800acc2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800accc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d02f      	beq.n	800ad32 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800acd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800acdc:	68b9      	ldr	r1, [r7, #8]
 800acde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ace0:	f000 f8db 	bl	800ae9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ace4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ace6:	1e5a      	subs	r2, r3, #1
 800ace8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800acec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800acf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf4:	d112      	bne.n	800ad1c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d016      	beq.n	800ad2c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad00:	3310      	adds	r3, #16
 800ad02:	4618      	mov	r0, r3
 800ad04:	f000 fe70 	bl	800b9e8 <xTaskRemoveFromEventList>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d00e      	beq.n	800ad2c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d00b      	beq.n	800ad2c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	e007      	b.n	800ad2c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ad1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ad20:	3301      	adds	r3, #1
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	b25a      	sxtb	r2, r3
 800ad26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	637b      	str	r3, [r7, #52]	; 0x34
 800ad30:	e001      	b.n	800ad36 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800ad32:	2300      	movs	r3, #0
 800ad34:	637b      	str	r3, [r7, #52]	; 0x34
 800ad36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad38:	613b      	str	r3, [r7, #16]
	__asm volatile
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	f383 8811 	msr	BASEPRI, r3
}
 800ad40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3738      	adds	r7, #56	; 0x38
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10c      	bne.n	800ad78 <vQueueDelete+0x2c>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	b672      	cpsid	i
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	b662      	cpsie	i
 800ad72:	60bb      	str	r3, [r7, #8]
}
 800ad74:	bf00      	nop
 800ad76:	e7fe      	b.n	800ad76 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f000 f95f 	bl	800b03c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d102      	bne.n	800ad8e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f002 f845 	bl	800ce18 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ad8e:	bf00      	nop
 800ad90:	3710      	adds	r7, #16
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ad96:	b480      	push	{r7}
 800ad98:	b085      	sub	sp, #20
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d006      	beq.n	800adb4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800adb0:	60fb      	str	r3, [r7, #12]
 800adb2:	e001      	b.n	800adb8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800adb4:	2300      	movs	r3, #0
 800adb6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800adb8:	68fb      	ldr	r3, [r7, #12]
	}
 800adba:	4618      	mov	r0, r3
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b086      	sub	sp, #24
 800adca:	af00      	add	r7, sp, #0
 800adcc:	60f8      	str	r0, [r7, #12]
 800adce:	60b9      	str	r1, [r7, #8]
 800add0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800add2:	2300      	movs	r3, #0
 800add4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adda:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10d      	bne.n	800ae00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d14d      	bne.n	800ae88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 f855 	bl	800bea0 <xTaskPriorityDisinherit>
 800adf6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	2200      	movs	r2, #0
 800adfc:	609a      	str	r2, [r3, #8]
 800adfe:	e043      	b.n	800ae88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d119      	bne.n	800ae3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	6858      	ldr	r0, [r3, #4]
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0e:	461a      	mov	r2, r3
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	f01d fff7 	bl	8028e04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	685a      	ldr	r2, [r3, #4]
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1e:	441a      	add	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	685a      	ldr	r2, [r3, #4]
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	689b      	ldr	r3, [r3, #8]
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d32b      	bcc.n	800ae88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	681a      	ldr	r2, [r3, #0]
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	605a      	str	r2, [r3, #4]
 800ae38:	e026      	b.n	800ae88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	68d8      	ldr	r0, [r3, #12]
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae42:	461a      	mov	r2, r3
 800ae44:	68b9      	ldr	r1, [r7, #8]
 800ae46:	f01d ffdd 	bl	8028e04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	68da      	ldr	r2, [r3, #12]
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae52:	425b      	negs	r3, r3
 800ae54:	441a      	add	r2, r3
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	68da      	ldr	r2, [r3, #12]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d207      	bcs.n	800ae76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	689a      	ldr	r2, [r3, #8]
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae6e:	425b      	negs	r3, r3
 800ae70:	441a      	add	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b02      	cmp	r3, #2
 800ae7a:	d105      	bne.n	800ae88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d002      	beq.n	800ae88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	3b01      	subs	r3, #1
 800ae86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ae90:	697b      	ldr	r3, [r7, #20]
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3718      	adds	r7, #24
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b082      	sub	sp, #8
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	6078      	str	r0, [r7, #4]
 800aea2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d018      	beq.n	800aede <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	68da      	ldr	r2, [r3, #12]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb4:	441a      	add	r2, r3
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	68da      	ldr	r2, [r3, #12]
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	429a      	cmp	r2, r3
 800aec4:	d303      	bcc.n	800aece <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	68d9      	ldr	r1, [r3, #12]
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed6:	461a      	mov	r2, r3
 800aed8:	6838      	ldr	r0, [r7, #0]
 800aeda:	f01d ff93 	bl	8028e04 <memcpy>
	}
}
 800aede:	bf00      	nop
 800aee0:	3708      	adds	r7, #8
 800aee2:	46bd      	mov	sp, r7
 800aee4:	bd80      	pop	{r7, pc}

0800aee6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aee6:	b580      	push	{r7, lr}
 800aee8:	b084      	sub	sp, #16
 800aeea:	af00      	add	r7, sp, #0
 800aeec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aeee:	f001 fd9d 	bl	800ca2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aef8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aefa:	e011      	b.n	800af20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af00:	2b00      	cmp	r3, #0
 800af02:	d012      	beq.n	800af2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3324      	adds	r3, #36	; 0x24
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 fd6d 	bl	800b9e8 <xTaskRemoveFromEventList>
 800af0e:	4603      	mov	r3, r0
 800af10:	2b00      	cmp	r3, #0
 800af12:	d001      	beq.n	800af18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af14:	f000 fe4a 	bl	800bbac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af24:	2b00      	cmp	r3, #0
 800af26:	dce9      	bgt.n	800aefc <prvUnlockQueue+0x16>
 800af28:	e000      	b.n	800af2c <prvUnlockQueue+0x46>
					break;
 800af2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	22ff      	movs	r2, #255	; 0xff
 800af30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800af34:	f001 fdae 	bl	800ca94 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af38:	f001 fd78 	bl	800ca2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af44:	e011      	b.n	800af6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	691b      	ldr	r3, [r3, #16]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d012      	beq.n	800af74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	3310      	adds	r3, #16
 800af52:	4618      	mov	r0, r3
 800af54:	f000 fd48 	bl	800b9e8 <xTaskRemoveFromEventList>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d001      	beq.n	800af62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af5e:	f000 fe25 	bl	800bbac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af62:	7bbb      	ldrb	r3, [r7, #14]
 800af64:	3b01      	subs	r3, #1
 800af66:	b2db      	uxtb	r3, r3
 800af68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	dce9      	bgt.n	800af46 <prvUnlockQueue+0x60>
 800af72:	e000      	b.n	800af76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	22ff      	movs	r2, #255	; 0xff
 800af7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800af7e:	f001 fd89 	bl	800ca94 <vPortExitCritical>
}
 800af82:	bf00      	nop
 800af84:	3710      	adds	r7, #16
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b084      	sub	sp, #16
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af92:	f001 fd4b 	bl	800ca2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d102      	bne.n	800afa4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800af9e:	2301      	movs	r3, #1
 800afa0:	60fb      	str	r3, [r7, #12]
 800afa2:	e001      	b.n	800afa8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afa8:	f001 fd74 	bl	800ca94 <vPortExitCritical>

	return xReturn;
 800afac:	68fb      	ldr	r3, [r7, #12]
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800afbe:	f001 fd35 	bl	800ca2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afca:	429a      	cmp	r2, r3
 800afcc:	d102      	bne.n	800afd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800afce:	2301      	movs	r3, #1
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	e001      	b.n	800afd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800afd4:	2300      	movs	r3, #0
 800afd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800afd8:	f001 fd5c 	bl	800ca94 <vPortExitCritical>

	return xReturn;
 800afdc:	68fb      	ldr	r3, [r7, #12]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3710      	adds	r7, #16
 800afe2:	46bd      	mov	sp, r7
 800afe4:	bd80      	pop	{r7, pc}
	...

0800afe8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800aff2:	2300      	movs	r3, #0
 800aff4:	60fb      	str	r3, [r7, #12]
 800aff6:	e014      	b.n	800b022 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800aff8:	4a0f      	ldr	r2, [pc, #60]	; (800b038 <vQueueAddToRegistry+0x50>)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10b      	bne.n	800b01c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b004:	490c      	ldr	r1, [pc, #48]	; (800b038 <vQueueAddToRegistry+0x50>)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	683a      	ldr	r2, [r7, #0]
 800b00a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b00e:	4a0a      	ldr	r2, [pc, #40]	; (800b038 <vQueueAddToRegistry+0x50>)
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	00db      	lsls	r3, r3, #3
 800b014:	4413      	add	r3, r2
 800b016:	687a      	ldr	r2, [r7, #4]
 800b018:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b01a:	e006      	b.n	800b02a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	3301      	adds	r3, #1
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	2b07      	cmp	r3, #7
 800b026:	d9e7      	bls.n	800aff8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b028:	bf00      	nop
 800b02a:	bf00      	nop
 800b02c:	3714      	adds	r7, #20
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr
 800b036:	bf00      	nop
 800b038:	20000e2c 	.word	0x20000e2c

0800b03c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b03c:	b480      	push	{r7}
 800b03e:	b085      	sub	sp, #20
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b044:	2300      	movs	r3, #0
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	e016      	b.n	800b078 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b04a:	4a10      	ldr	r2, [pc, #64]	; (800b08c <vQueueUnregisterQueue+0x50>)
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	00db      	lsls	r3, r3, #3
 800b050:	4413      	add	r3, r2
 800b052:	685b      	ldr	r3, [r3, #4]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	429a      	cmp	r2, r3
 800b058:	d10b      	bne.n	800b072 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b05a:	4a0c      	ldr	r2, [pc, #48]	; (800b08c <vQueueUnregisterQueue+0x50>)
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2100      	movs	r1, #0
 800b060:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b064:	4a09      	ldr	r2, [pc, #36]	; (800b08c <vQueueUnregisterQueue+0x50>)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	00db      	lsls	r3, r3, #3
 800b06a:	4413      	add	r3, r2
 800b06c:	2200      	movs	r2, #0
 800b06e:	605a      	str	r2, [r3, #4]
				break;
 800b070:	e006      	b.n	800b080 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3301      	adds	r3, #1
 800b076:	60fb      	str	r3, [r7, #12]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2b07      	cmp	r3, #7
 800b07c:	d9e5      	bls.n	800b04a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b07e:	bf00      	nop
 800b080:	bf00      	nop
 800b082:	3714      	adds	r7, #20
 800b084:	46bd      	mov	sp, r7
 800b086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08a:	4770      	bx	lr
 800b08c:	20000e2c 	.word	0x20000e2c

0800b090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b090:	b580      	push	{r7, lr}
 800b092:	b086      	sub	sp, #24
 800b094:	af00      	add	r7, sp, #0
 800b096:	60f8      	str	r0, [r7, #12]
 800b098:	60b9      	str	r1, [r7, #8]
 800b09a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b0a0:	f001 fcc4 	bl	800ca2c <vPortEnterCritical>
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0aa:	b25b      	sxtb	r3, r3
 800b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b0:	d103      	bne.n	800b0ba <vQueueWaitForMessageRestricted+0x2a>
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0c0:	b25b      	sxtb	r3, r3
 800b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c6:	d103      	bne.n	800b0d0 <vQueueWaitForMessageRestricted+0x40>
 800b0c8:	697b      	ldr	r3, [r7, #20]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0d0:	f001 fce0 	bl	800ca94 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d106      	bne.n	800b0ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	3324      	adds	r3, #36	; 0x24
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 fc51 	bl	800b98c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b0ea:	6978      	ldr	r0, [r7, #20]
 800b0ec:	f7ff fefb 	bl	800aee6 <prvUnlockQueue>
	}
 800b0f0:	bf00      	nop
 800b0f2:	3718      	adds	r7, #24
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}

0800b0f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08e      	sub	sp, #56	; 0x38
 800b0fc:	af04      	add	r7, sp, #16
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
 800b104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d10c      	bne.n	800b126 <xTaskCreateStatic+0x2e>
	__asm volatile
 800b10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b110:	b672      	cpsid	i
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	b662      	cpsie	i
 800b120:	623b      	str	r3, [r7, #32]
}
 800b122:	bf00      	nop
 800b124:	e7fe      	b.n	800b124 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800b126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10c      	bne.n	800b146 <xTaskCreateStatic+0x4e>
	__asm volatile
 800b12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b130:	b672      	cpsid	i
 800b132:	f383 8811 	msr	BASEPRI, r3
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	f3bf 8f4f 	dsb	sy
 800b13e:	b662      	cpsie	i
 800b140:	61fb      	str	r3, [r7, #28]
}
 800b142:	bf00      	nop
 800b144:	e7fe      	b.n	800b144 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b146:	235c      	movs	r3, #92	; 0x5c
 800b148:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	2b5c      	cmp	r3, #92	; 0x5c
 800b14e:	d00c      	beq.n	800b16a <xTaskCreateStatic+0x72>
	__asm volatile
 800b150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b154:	b672      	cpsid	i
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	b662      	cpsie	i
 800b164:	61bb      	str	r3, [r7, #24]
}
 800b166:	bf00      	nop
 800b168:	e7fe      	b.n	800b168 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b16a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b16c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d01e      	beq.n	800b1b0 <xTaskCreateStatic+0xb8>
 800b172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b174:	2b00      	cmp	r3, #0
 800b176:	d01b      	beq.n	800b1b0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b17a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b180:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b184:	2202      	movs	r2, #2
 800b186:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b18a:	2300      	movs	r3, #0
 800b18c:	9303      	str	r3, [sp, #12]
 800b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b190:	9302      	str	r3, [sp, #8]
 800b192:	f107 0314 	add.w	r3, r7, #20
 800b196:	9301      	str	r3, [sp, #4]
 800b198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b19a:	9300      	str	r3, [sp, #0]
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	68b9      	ldr	r1, [r7, #8]
 800b1a2:	68f8      	ldr	r0, [r7, #12]
 800b1a4:	f000 f850 	bl	800b248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b1a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b1aa:	f000 f8df 	bl	800b36c <prvAddNewTaskToReadyList>
 800b1ae:	e001      	b.n	800b1b4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b1b4:	697b      	ldr	r3, [r7, #20]
	}
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	3728      	adds	r7, #40	; 0x28
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}

0800b1be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b1be:	b580      	push	{r7, lr}
 800b1c0:	b08c      	sub	sp, #48	; 0x30
 800b1c2:	af04      	add	r7, sp, #16
 800b1c4:	60f8      	str	r0, [r7, #12]
 800b1c6:	60b9      	str	r1, [r7, #8]
 800b1c8:	603b      	str	r3, [r7, #0]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b1ce:	88fb      	ldrh	r3, [r7, #6]
 800b1d0:	009b      	lsls	r3, r3, #2
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f001 fd56 	bl	800cc84 <pvPortMalloc>
 800b1d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d00e      	beq.n	800b1fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b1e0:	205c      	movs	r0, #92	; 0x5c
 800b1e2:	f001 fd4f 	bl	800cc84 <pvPortMalloc>
 800b1e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d003      	beq.n	800b1f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	631a      	str	r2, [r3, #48]	; 0x30
 800b1f4:	e005      	b.n	800b202 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b1f6:	6978      	ldr	r0, [r7, #20]
 800b1f8:	f001 fe0e 	bl	800ce18 <vPortFree>
 800b1fc:	e001      	b.n	800b202 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d017      	beq.n	800b238 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b208:	69fb      	ldr	r3, [r7, #28]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b210:	88fa      	ldrh	r2, [r7, #6]
 800b212:	2300      	movs	r3, #0
 800b214:	9303      	str	r3, [sp, #12]
 800b216:	69fb      	ldr	r3, [r7, #28]
 800b218:	9302      	str	r3, [sp, #8]
 800b21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b21c:	9301      	str	r3, [sp, #4]
 800b21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b220:	9300      	str	r3, [sp, #0]
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	68b9      	ldr	r1, [r7, #8]
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f000 f80e 	bl	800b248 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b22c:	69f8      	ldr	r0, [r7, #28]
 800b22e:	f000 f89d 	bl	800b36c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b232:	2301      	movs	r3, #1
 800b234:	61bb      	str	r3, [r7, #24]
 800b236:	e002      	b.n	800b23e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b238:	f04f 33ff 	mov.w	r3, #4294967295
 800b23c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b23e:	69bb      	ldr	r3, [r7, #24]
	}
 800b240:	4618      	mov	r0, r3
 800b242:	3720      	adds	r7, #32
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b258:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	461a      	mov	r2, r3
 800b260:	21a5      	movs	r1, #165	; 0xa5
 800b262:	f01d fddd 	bl	8028e20 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b268:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b26a:	6879      	ldr	r1, [r7, #4]
 800b26c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800b270:	440b      	add	r3, r1
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	4413      	add	r3, r2
 800b276:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b278:	69bb      	ldr	r3, [r7, #24]
 800b27a:	f023 0307 	bic.w	r3, r3, #7
 800b27e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	f003 0307 	and.w	r3, r3, #7
 800b286:	2b00      	cmp	r3, #0
 800b288:	d00c      	beq.n	800b2a4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800b28a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b28e:	b672      	cpsid	i
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	b662      	cpsie	i
 800b29e:	617b      	str	r3, [r7, #20]
}
 800b2a0:	bf00      	nop
 800b2a2:	e7fe      	b.n	800b2a2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d01f      	beq.n	800b2ea <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61fb      	str	r3, [r7, #28]
 800b2ae:	e012      	b.n	800b2d6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	4413      	add	r3, r2
 800b2b6:	7819      	ldrb	r1, [r3, #0]
 800b2b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	4413      	add	r3, r2
 800b2be:	3334      	adds	r3, #52	; 0x34
 800b2c0:	460a      	mov	r2, r1
 800b2c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d006      	beq.n	800b2de <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2d0:	69fb      	ldr	r3, [r7, #28]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	61fb      	str	r3, [r7, #28]
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	2b0f      	cmp	r3, #15
 800b2da:	d9e9      	bls.n	800b2b0 <prvInitialiseNewTask+0x68>
 800b2dc:	e000      	b.n	800b2e0 <prvInitialiseNewTask+0x98>
			{
				break;
 800b2de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b2e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b2e8:	e003      	b.n	800b2f2 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2f4:	2b37      	cmp	r3, #55	; 0x37
 800b2f6:	d901      	bls.n	800b2fc <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b2f8:	2337      	movs	r3, #55	; 0x37
 800b2fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b2fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b306:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30a:	2200      	movs	r2, #0
 800b30c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b310:	3304      	adds	r3, #4
 800b312:	4618      	mov	r0, r3
 800b314:	f7fe fd4c 	bl	8009db0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31a:	3318      	adds	r3, #24
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fe fd47 	bl	8009db0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33a:	2200      	movs	r2, #0
 800b33c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	2200      	movs	r2, #0
 800b342:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	68f9      	ldr	r1, [r7, #12]
 800b34a:	69b8      	ldr	r0, [r7, #24]
 800b34c:	f001 fa64 	bl	800c818 <pxPortInitialiseStack>
 800b350:	4602      	mov	r2, r0
 800b352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b354:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d002      	beq.n	800b362 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b35c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b362:	bf00      	nop
 800b364:	3720      	adds	r7, #32
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b374:	f001 fb5a 	bl	800ca2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b378:	4b2d      	ldr	r3, [pc, #180]	; (800b430 <prvAddNewTaskToReadyList+0xc4>)
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	3301      	adds	r3, #1
 800b37e:	4a2c      	ldr	r2, [pc, #176]	; (800b430 <prvAddNewTaskToReadyList+0xc4>)
 800b380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b382:	4b2c      	ldr	r3, [pc, #176]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d109      	bne.n	800b39e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b38a:	4a2a      	ldr	r2, [pc, #168]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b390:	4b27      	ldr	r3, [pc, #156]	; (800b430 <prvAddNewTaskToReadyList+0xc4>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	2b01      	cmp	r3, #1
 800b396:	d110      	bne.n	800b3ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b398:	f000 fc2c 	bl	800bbf4 <prvInitialiseTaskLists>
 800b39c:	e00d      	b.n	800b3ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b39e:	4b26      	ldr	r3, [pc, #152]	; (800b438 <prvAddNewTaskToReadyList+0xcc>)
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d109      	bne.n	800b3ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b3a6:	4b23      	ldr	r3, [pc, #140]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d802      	bhi.n	800b3ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b3b4:	4a1f      	ldr	r2, [pc, #124]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b3ba:	4b20      	ldr	r3, [pc, #128]	; (800b43c <prvAddNewTaskToReadyList+0xd0>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	4a1e      	ldr	r2, [pc, #120]	; (800b43c <prvAddNewTaskToReadyList+0xd0>)
 800b3c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b3c4:	4b1d      	ldr	r3, [pc, #116]	; (800b43c <prvAddNewTaskToReadyList+0xd0>)
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3d0:	4b1b      	ldr	r3, [pc, #108]	; (800b440 <prvAddNewTaskToReadyList+0xd4>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	429a      	cmp	r2, r3
 800b3d6:	d903      	bls.n	800b3e0 <prvAddNewTaskToReadyList+0x74>
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3dc:	4a18      	ldr	r2, [pc, #96]	; (800b440 <prvAddNewTaskToReadyList+0xd4>)
 800b3de:	6013      	str	r3, [r2, #0]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3e4:	4613      	mov	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	4a15      	ldr	r2, [pc, #84]	; (800b444 <prvAddNewTaskToReadyList+0xd8>)
 800b3ee:	441a      	add	r2, r3
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	4619      	mov	r1, r3
 800b3f6:	4610      	mov	r0, r2
 800b3f8:	f7fe fce7 	bl	8009dca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b3fc:	f001 fb4a 	bl	800ca94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b400:	4b0d      	ldr	r3, [pc, #52]	; (800b438 <prvAddNewTaskToReadyList+0xcc>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d00e      	beq.n	800b426 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b408:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <prvAddNewTaskToReadyList+0xc8>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b412:	429a      	cmp	r2, r3
 800b414:	d207      	bcs.n	800b426 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <prvAddNewTaskToReadyList+0xdc>)
 800b418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	f3bf 8f4f 	dsb	sy
 800b422:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	20001340 	.word	0x20001340
 800b434:	20000e6c 	.word	0x20000e6c
 800b438:	2000134c 	.word	0x2000134c
 800b43c:	2000135c 	.word	0x2000135c
 800b440:	20001348 	.word	0x20001348
 800b444:	20000e70 	.word	0x20000e70
 800b448:	e000ed04 	.word	0xe000ed04

0800b44c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b454:	2300      	movs	r3, #0
 800b456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d019      	beq.n	800b492 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b45e:	4b14      	ldr	r3, [pc, #80]	; (800b4b0 <vTaskDelay+0x64>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d00c      	beq.n	800b480 <vTaskDelay+0x34>
	__asm volatile
 800b466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46a:	b672      	cpsid	i
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	b662      	cpsie	i
 800b47a:	60bb      	str	r3, [r7, #8]
}
 800b47c:	bf00      	nop
 800b47e:	e7fe      	b.n	800b47e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800b480:	f000 f884 	bl	800b58c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b484:	2100      	movs	r1, #0
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fe16 	bl	800c0b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b48c:	f000 f88c 	bl	800b5a8 <xTaskResumeAll>
 800b490:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d107      	bne.n	800b4a8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800b498:	4b06      	ldr	r3, [pc, #24]	; (800b4b4 <vTaskDelay+0x68>)
 800b49a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b49e:	601a      	str	r2, [r3, #0]
 800b4a0:	f3bf 8f4f 	dsb	sy
 800b4a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4a8:	bf00      	nop
 800b4aa:	3710      	adds	r7, #16
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	bd80      	pop	{r7, pc}
 800b4b0:	20001368 	.word	0x20001368
 800b4b4:	e000ed04 	.word	0xe000ed04

0800b4b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b08a      	sub	sp, #40	; 0x28
 800b4bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b4c6:	463a      	mov	r2, r7
 800b4c8:	1d39      	adds	r1, r7, #4
 800b4ca:	f107 0308 	add.w	r3, r7, #8
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	f7fe fc1a 	bl	8009d08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	9202      	str	r2, [sp, #8]
 800b4dc:	9301      	str	r3, [sp, #4]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	9300      	str	r3, [sp, #0]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	460a      	mov	r2, r1
 800b4e6:	4923      	ldr	r1, [pc, #140]	; (800b574 <vTaskStartScheduler+0xbc>)
 800b4e8:	4823      	ldr	r0, [pc, #140]	; (800b578 <vTaskStartScheduler+0xc0>)
 800b4ea:	f7ff fe05 	bl	800b0f8 <xTaskCreateStatic>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	4a22      	ldr	r2, [pc, #136]	; (800b57c <vTaskStartScheduler+0xc4>)
 800b4f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b4f4:	4b21      	ldr	r3, [pc, #132]	; (800b57c <vTaskStartScheduler+0xc4>)
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d002      	beq.n	800b502 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	617b      	str	r3, [r7, #20]
 800b500:	e001      	b.n	800b506 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b502:	2300      	movs	r3, #0
 800b504:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d102      	bne.n	800b512 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b50c:	f000 fe28 	bl	800c160 <xTimerCreateTimerTask>
 800b510:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b512:	697b      	ldr	r3, [r7, #20]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d118      	bne.n	800b54a <vTaskStartScheduler+0x92>
	__asm volatile
 800b518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b51c:	b672      	cpsid	i
 800b51e:	f383 8811 	msr	BASEPRI, r3
 800b522:	f3bf 8f6f 	isb	sy
 800b526:	f3bf 8f4f 	dsb	sy
 800b52a:	b662      	cpsie	i
 800b52c:	613b      	str	r3, [r7, #16]
}
 800b52e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b530:	4b13      	ldr	r3, [pc, #76]	; (800b580 <vTaskStartScheduler+0xc8>)
 800b532:	f04f 32ff 	mov.w	r2, #4294967295
 800b536:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b538:	4b12      	ldr	r3, [pc, #72]	; (800b584 <vTaskStartScheduler+0xcc>)
 800b53a:	2201      	movs	r2, #1
 800b53c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b53e:	4b12      	ldr	r3, [pc, #72]	; (800b588 <vTaskStartScheduler+0xd0>)
 800b540:	2200      	movs	r2, #0
 800b542:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b544:	f001 f9f4 	bl	800c930 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b548:	e010      	b.n	800b56c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b550:	d10c      	bne.n	800b56c <vTaskStartScheduler+0xb4>
	__asm volatile
 800b552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b556:	b672      	cpsid	i
 800b558:	f383 8811 	msr	BASEPRI, r3
 800b55c:	f3bf 8f6f 	isb	sy
 800b560:	f3bf 8f4f 	dsb	sy
 800b564:	b662      	cpsie	i
 800b566:	60fb      	str	r3, [r7, #12]
}
 800b568:	bf00      	nop
 800b56a:	e7fe      	b.n	800b56a <vTaskStartScheduler+0xb2>
}
 800b56c:	bf00      	nop
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	0802c008 	.word	0x0802c008
 800b578:	0800bbc5 	.word	0x0800bbc5
 800b57c:	20001364 	.word	0x20001364
 800b580:	20001360 	.word	0x20001360
 800b584:	2000134c 	.word	0x2000134c
 800b588:	20001344 	.word	0x20001344

0800b58c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800b590:	4b04      	ldr	r3, [pc, #16]	; (800b5a4 <vTaskSuspendAll+0x18>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	3301      	adds	r3, #1
 800b596:	4a03      	ldr	r2, [pc, #12]	; (800b5a4 <vTaskSuspendAll+0x18>)
 800b598:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800b59a:	bf00      	nop
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	20001368 	.word	0x20001368

0800b5a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b5b6:	4b43      	ldr	r3, [pc, #268]	; (800b6c4 <xTaskResumeAll+0x11c>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10c      	bne.n	800b5d8 <xTaskResumeAll+0x30>
	__asm volatile
 800b5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5c2:	b672      	cpsid	i
 800b5c4:	f383 8811 	msr	BASEPRI, r3
 800b5c8:	f3bf 8f6f 	isb	sy
 800b5cc:	f3bf 8f4f 	dsb	sy
 800b5d0:	b662      	cpsie	i
 800b5d2:	603b      	str	r3, [r7, #0]
}
 800b5d4:	bf00      	nop
 800b5d6:	e7fe      	b.n	800b5d6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b5d8:	f001 fa28 	bl	800ca2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b5dc:	4b39      	ldr	r3, [pc, #228]	; (800b6c4 <xTaskResumeAll+0x11c>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	4a38      	ldr	r2, [pc, #224]	; (800b6c4 <xTaskResumeAll+0x11c>)
 800b5e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5e6:	4b37      	ldr	r3, [pc, #220]	; (800b6c4 <xTaskResumeAll+0x11c>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d162      	bne.n	800b6b4 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b5ee:	4b36      	ldr	r3, [pc, #216]	; (800b6c8 <xTaskResumeAll+0x120>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d05e      	beq.n	800b6b4 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b5f6:	e02f      	b.n	800b658 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5f8:	4b34      	ldr	r3, [pc, #208]	; (800b6cc <xTaskResumeAll+0x124>)
 800b5fa:	68db      	ldr	r3, [r3, #12]
 800b5fc:	68db      	ldr	r3, [r3, #12]
 800b5fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	3318      	adds	r3, #24
 800b604:	4618      	mov	r0, r3
 800b606:	f7fe fc3d 	bl	8009e84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	3304      	adds	r3, #4
 800b60e:	4618      	mov	r0, r3
 800b610:	f7fe fc38 	bl	8009e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b618:	4b2d      	ldr	r3, [pc, #180]	; (800b6d0 <xTaskResumeAll+0x128>)
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d903      	bls.n	800b628 <xTaskResumeAll+0x80>
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	4a2a      	ldr	r2, [pc, #168]	; (800b6d0 <xTaskResumeAll+0x128>)
 800b626:	6013      	str	r3, [r2, #0]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	4a27      	ldr	r2, [pc, #156]	; (800b6d4 <xTaskResumeAll+0x12c>)
 800b636:	441a      	add	r2, r3
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	3304      	adds	r3, #4
 800b63c:	4619      	mov	r1, r3
 800b63e:	4610      	mov	r0, r2
 800b640:	f7fe fbc3 	bl	8009dca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b648:	4b23      	ldr	r3, [pc, #140]	; (800b6d8 <xTaskResumeAll+0x130>)
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b64e:	429a      	cmp	r2, r3
 800b650:	d302      	bcc.n	800b658 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800b652:	4b22      	ldr	r3, [pc, #136]	; (800b6dc <xTaskResumeAll+0x134>)
 800b654:	2201      	movs	r2, #1
 800b656:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b658:	4b1c      	ldr	r3, [pc, #112]	; (800b6cc <xTaskResumeAll+0x124>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d1cb      	bne.n	800b5f8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b666:	f000 fb65 	bl	800bd34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800b66a:	4b1d      	ldr	r3, [pc, #116]	; (800b6e0 <xTaskResumeAll+0x138>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d010      	beq.n	800b698 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b676:	f000 f847 	bl	800b708 <xTaskIncrementTick>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d002      	beq.n	800b686 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800b680:	4b16      	ldr	r3, [pc, #88]	; (800b6dc <xTaskResumeAll+0x134>)
 800b682:	2201      	movs	r2, #1
 800b684:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	3b01      	subs	r3, #1
 800b68a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1f1      	bne.n	800b676 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800b692:	4b13      	ldr	r3, [pc, #76]	; (800b6e0 <xTaskResumeAll+0x138>)
 800b694:	2200      	movs	r2, #0
 800b696:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b698:	4b10      	ldr	r3, [pc, #64]	; (800b6dc <xTaskResumeAll+0x134>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d009      	beq.n	800b6b4 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b6a4:	4b0f      	ldr	r3, [pc, #60]	; (800b6e4 <xTaskResumeAll+0x13c>)
 800b6a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6aa:	601a      	str	r2, [r3, #0]
 800b6ac:	f3bf 8f4f 	dsb	sy
 800b6b0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b6b4:	f001 f9ee 	bl	800ca94 <vPortExitCritical>

	return xAlreadyYielded;
 800b6b8:	68bb      	ldr	r3, [r7, #8]
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	20001368 	.word	0x20001368
 800b6c8:	20001340 	.word	0x20001340
 800b6cc:	20001300 	.word	0x20001300
 800b6d0:	20001348 	.word	0x20001348
 800b6d4:	20000e70 	.word	0x20000e70
 800b6d8:	20000e6c 	.word	0x20000e6c
 800b6dc:	20001354 	.word	0x20001354
 800b6e0:	20001350 	.word	0x20001350
 800b6e4:	e000ed04 	.word	0xe000ed04

0800b6e8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b083      	sub	sp, #12
 800b6ec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b6ee:	4b05      	ldr	r3, [pc, #20]	; (800b704 <xTaskGetTickCount+0x1c>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b6f4:	687b      	ldr	r3, [r7, #4]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	370c      	adds	r7, #12
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	20001344 	.word	0x20001344

0800b708 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b70e:	2300      	movs	r3, #0
 800b710:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b712:	4b50      	ldr	r3, [pc, #320]	; (800b854 <xTaskIncrementTick+0x14c>)
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	2b00      	cmp	r3, #0
 800b718:	f040 808b 	bne.w	800b832 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b71c:	4b4e      	ldr	r3, [pc, #312]	; (800b858 <xTaskIncrementTick+0x150>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	3301      	adds	r3, #1
 800b722:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b724:	4a4c      	ldr	r2, [pc, #304]	; (800b858 <xTaskIncrementTick+0x150>)
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d122      	bne.n	800b776 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800b730:	4b4a      	ldr	r3, [pc, #296]	; (800b85c <xTaskIncrementTick+0x154>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d00c      	beq.n	800b754 <xTaskIncrementTick+0x4c>
	__asm volatile
 800b73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b73e:	b672      	cpsid	i
 800b740:	f383 8811 	msr	BASEPRI, r3
 800b744:	f3bf 8f6f 	isb	sy
 800b748:	f3bf 8f4f 	dsb	sy
 800b74c:	b662      	cpsie	i
 800b74e:	603b      	str	r3, [r7, #0]
}
 800b750:	bf00      	nop
 800b752:	e7fe      	b.n	800b752 <xTaskIncrementTick+0x4a>
 800b754:	4b41      	ldr	r3, [pc, #260]	; (800b85c <xTaskIncrementTick+0x154>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	60fb      	str	r3, [r7, #12]
 800b75a:	4b41      	ldr	r3, [pc, #260]	; (800b860 <xTaskIncrementTick+0x158>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a3f      	ldr	r2, [pc, #252]	; (800b85c <xTaskIncrementTick+0x154>)
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	4a3f      	ldr	r2, [pc, #252]	; (800b860 <xTaskIncrementTick+0x158>)
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	4b3e      	ldr	r3, [pc, #248]	; (800b864 <xTaskIncrementTick+0x15c>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3301      	adds	r3, #1
 800b76e:	4a3d      	ldr	r2, [pc, #244]	; (800b864 <xTaskIncrementTick+0x15c>)
 800b770:	6013      	str	r3, [r2, #0]
 800b772:	f000 fadf 	bl	800bd34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b776:	4b3c      	ldr	r3, [pc, #240]	; (800b868 <xTaskIncrementTick+0x160>)
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	693a      	ldr	r2, [r7, #16]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d349      	bcc.n	800b814 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b780:	4b36      	ldr	r3, [pc, #216]	; (800b85c <xTaskIncrementTick+0x154>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d104      	bne.n	800b794 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b78a:	4b37      	ldr	r3, [pc, #220]	; (800b868 <xTaskIncrementTick+0x160>)
 800b78c:	f04f 32ff 	mov.w	r2, #4294967295
 800b790:	601a      	str	r2, [r3, #0]
					break;
 800b792:	e03f      	b.n	800b814 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b794:	4b31      	ldr	r3, [pc, #196]	; (800b85c <xTaskIncrementTick+0x154>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	68db      	ldr	r3, [r3, #12]
 800b79c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b7a4:	693a      	ldr	r2, [r7, #16]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	429a      	cmp	r2, r3
 800b7aa:	d203      	bcs.n	800b7b4 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b7ac:	4a2e      	ldr	r2, [pc, #184]	; (800b868 <xTaskIncrementTick+0x160>)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b7b2:	e02f      	b.n	800b814 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	3304      	adds	r3, #4
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	f7fe fb63 	bl	8009e84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d004      	beq.n	800b7d0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	3318      	adds	r3, #24
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe fb5a 	bl	8009e84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7d4:	4b25      	ldr	r3, [pc, #148]	; (800b86c <xTaskIncrementTick+0x164>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d903      	bls.n	800b7e4 <xTaskIncrementTick+0xdc>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7e0:	4a22      	ldr	r2, [pc, #136]	; (800b86c <xTaskIncrementTick+0x164>)
 800b7e2:	6013      	str	r3, [r2, #0]
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	009b      	lsls	r3, r3, #2
 800b7f0:	4a1f      	ldr	r2, [pc, #124]	; (800b870 <xTaskIncrementTick+0x168>)
 800b7f2:	441a      	add	r2, r3
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	3304      	adds	r3, #4
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	f7fe fae5 	bl	8009dca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b804:	4b1b      	ldr	r3, [pc, #108]	; (800b874 <xTaskIncrementTick+0x16c>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d3b8      	bcc.n	800b780 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800b80e:	2301      	movs	r3, #1
 800b810:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b812:	e7b5      	b.n	800b780 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b814:	4b17      	ldr	r3, [pc, #92]	; (800b874 <xTaskIncrementTick+0x16c>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b81a:	4915      	ldr	r1, [pc, #84]	; (800b870 <xTaskIncrementTick+0x168>)
 800b81c:	4613      	mov	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	4413      	add	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	440b      	add	r3, r1
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	2b01      	cmp	r3, #1
 800b82a:	d907      	bls.n	800b83c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800b82c:	2301      	movs	r3, #1
 800b82e:	617b      	str	r3, [r7, #20]
 800b830:	e004      	b.n	800b83c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800b832:	4b11      	ldr	r3, [pc, #68]	; (800b878 <xTaskIncrementTick+0x170>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	3301      	adds	r3, #1
 800b838:	4a0f      	ldr	r2, [pc, #60]	; (800b878 <xTaskIncrementTick+0x170>)
 800b83a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800b83c:	4b0f      	ldr	r3, [pc, #60]	; (800b87c <xTaskIncrementTick+0x174>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d001      	beq.n	800b848 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800b844:	2301      	movs	r3, #1
 800b846:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800b848:	697b      	ldr	r3, [r7, #20]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3718      	adds	r7, #24
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}
 800b852:	bf00      	nop
 800b854:	20001368 	.word	0x20001368
 800b858:	20001344 	.word	0x20001344
 800b85c:	200012f8 	.word	0x200012f8
 800b860:	200012fc 	.word	0x200012fc
 800b864:	20001358 	.word	0x20001358
 800b868:	20001360 	.word	0x20001360
 800b86c:	20001348 	.word	0x20001348
 800b870:	20000e70 	.word	0x20000e70
 800b874:	20000e6c 	.word	0x20000e6c
 800b878:	20001350 	.word	0x20001350
 800b87c:	20001354 	.word	0x20001354

0800b880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b886:	4b29      	ldr	r3, [pc, #164]	; (800b92c <vTaskSwitchContext+0xac>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d003      	beq.n	800b896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b88e:	4b28      	ldr	r3, [pc, #160]	; (800b930 <vTaskSwitchContext+0xb0>)
 800b890:	2201      	movs	r2, #1
 800b892:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b894:	e043      	b.n	800b91e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800b896:	4b26      	ldr	r3, [pc, #152]	; (800b930 <vTaskSwitchContext+0xb0>)
 800b898:	2200      	movs	r2, #0
 800b89a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89c:	4b25      	ldr	r3, [pc, #148]	; (800b934 <vTaskSwitchContext+0xb4>)
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	60fb      	str	r3, [r7, #12]
 800b8a2:	e012      	b.n	800b8ca <vTaskSwitchContext+0x4a>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d10c      	bne.n	800b8c4 <vTaskSwitchContext+0x44>
	__asm volatile
 800b8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ae:	b672      	cpsid	i
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	b662      	cpsie	i
 800b8be:	607b      	str	r3, [r7, #4]
}
 800b8c0:	bf00      	nop
 800b8c2:	e7fe      	b.n	800b8c2 <vTaskSwitchContext+0x42>
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	3b01      	subs	r3, #1
 800b8c8:	60fb      	str	r3, [r7, #12]
 800b8ca:	491b      	ldr	r1, [pc, #108]	; (800b938 <vTaskSwitchContext+0xb8>)
 800b8cc:	68fa      	ldr	r2, [r7, #12]
 800b8ce:	4613      	mov	r3, r2
 800b8d0:	009b      	lsls	r3, r3, #2
 800b8d2:	4413      	add	r3, r2
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	440b      	add	r3, r1
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d0e2      	beq.n	800b8a4 <vTaskSwitchContext+0x24>
 800b8de:	68fa      	ldr	r2, [r7, #12]
 800b8e0:	4613      	mov	r3, r2
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	4413      	add	r3, r2
 800b8e6:	009b      	lsls	r3, r3, #2
 800b8e8:	4a13      	ldr	r2, [pc, #76]	; (800b938 <vTaskSwitchContext+0xb8>)
 800b8ea:	4413      	add	r3, r2
 800b8ec:	60bb      	str	r3, [r7, #8]
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	685a      	ldr	r2, [r3, #4]
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	605a      	str	r2, [r3, #4]
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	685a      	ldr	r2, [r3, #4]
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	3308      	adds	r3, #8
 800b900:	429a      	cmp	r2, r3
 800b902:	d104      	bne.n	800b90e <vTaskSwitchContext+0x8e>
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	685a      	ldr	r2, [r3, #4]
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	605a      	str	r2, [r3, #4]
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	685b      	ldr	r3, [r3, #4]
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	4a09      	ldr	r2, [pc, #36]	; (800b93c <vTaskSwitchContext+0xbc>)
 800b916:	6013      	str	r3, [r2, #0]
 800b918:	4a06      	ldr	r2, [pc, #24]	; (800b934 <vTaskSwitchContext+0xb4>)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6013      	str	r3, [r2, #0]
}
 800b91e:	bf00      	nop
 800b920:	3714      	adds	r7, #20
 800b922:	46bd      	mov	sp, r7
 800b924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b928:	4770      	bx	lr
 800b92a:	bf00      	nop
 800b92c:	20001368 	.word	0x20001368
 800b930:	20001354 	.word	0x20001354
 800b934:	20001348 	.word	0x20001348
 800b938:	20000e70 	.word	0x20000e70
 800b93c:	20000e6c 	.word	0x20000e6c

0800b940 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b084      	sub	sp, #16
 800b944:	af00      	add	r7, sp, #0
 800b946:	6078      	str	r0, [r7, #4]
 800b948:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d10c      	bne.n	800b96a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800b950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b954:	b672      	cpsid	i
 800b956:	f383 8811 	msr	BASEPRI, r3
 800b95a:	f3bf 8f6f 	isb	sy
 800b95e:	f3bf 8f4f 	dsb	sy
 800b962:	b662      	cpsie	i
 800b964:	60fb      	str	r3, [r7, #12]
}
 800b966:	bf00      	nop
 800b968:	e7fe      	b.n	800b968 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b96a:	4b07      	ldr	r3, [pc, #28]	; (800b988 <vTaskPlaceOnEventList+0x48>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	3318      	adds	r3, #24
 800b970:	4619      	mov	r1, r3
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f7fe fa4d 	bl	8009e12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b978:	2101      	movs	r1, #1
 800b97a:	6838      	ldr	r0, [r7, #0]
 800b97c:	f000 fb9c 	bl	800c0b8 <prvAddCurrentTaskToDelayedList>
}
 800b980:	bf00      	nop
 800b982:	3710      	adds	r7, #16
 800b984:	46bd      	mov	sp, r7
 800b986:	bd80      	pop	{r7, pc}
 800b988:	20000e6c 	.word	0x20000e6c

0800b98c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
 800b992:	60f8      	str	r0, [r7, #12]
 800b994:	60b9      	str	r1, [r7, #8]
 800b996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d10c      	bne.n	800b9b8 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	b672      	cpsid	i
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	b662      	cpsie	i
 800b9b2:	617b      	str	r3, [r7, #20]
}
 800b9b4:	bf00      	nop
 800b9b6:	e7fe      	b.n	800b9b6 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b9b8:	4b0a      	ldr	r3, [pc, #40]	; (800b9e4 <vTaskPlaceOnEventListRestricted+0x58>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	3318      	adds	r3, #24
 800b9be:	4619      	mov	r1, r3
 800b9c0:	68f8      	ldr	r0, [r7, #12]
 800b9c2:	f7fe fa02 	bl	8009dca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d002      	beq.n	800b9d2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800b9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b9d2:	6879      	ldr	r1, [r7, #4]
 800b9d4:	68b8      	ldr	r0, [r7, #8]
 800b9d6:	f000 fb6f 	bl	800c0b8 <prvAddCurrentTaskToDelayedList>
	}
 800b9da:	bf00      	nop
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}
 800b9e2:	bf00      	nop
 800b9e4:	20000e6c 	.word	0x20000e6c

0800b9e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b086      	sub	sp, #24
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b9f8:	693b      	ldr	r3, [r7, #16]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d10c      	bne.n	800ba18 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800b9fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba02:	b672      	cpsid	i
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	b662      	cpsie	i
 800ba12:	60fb      	str	r3, [r7, #12]
}
 800ba14:	bf00      	nop
 800ba16:	e7fe      	b.n	800ba16 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	3318      	adds	r3, #24
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fe fa31 	bl	8009e84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba22:	4b1e      	ldr	r3, [pc, #120]	; (800ba9c <xTaskRemoveFromEventList+0xb4>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d11d      	bne.n	800ba66 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	3304      	adds	r3, #4
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f7fe fa28 	bl	8009e84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba38:	4b19      	ldr	r3, [pc, #100]	; (800baa0 <xTaskRemoveFromEventList+0xb8>)
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d903      	bls.n	800ba48 <xTaskRemoveFromEventList+0x60>
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba44:	4a16      	ldr	r2, [pc, #88]	; (800baa0 <xTaskRemoveFromEventList+0xb8>)
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	009b      	lsls	r3, r3, #2
 800ba50:	4413      	add	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4a13      	ldr	r2, [pc, #76]	; (800baa4 <xTaskRemoveFromEventList+0xbc>)
 800ba56:	441a      	add	r2, r3
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	3304      	adds	r3, #4
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	4610      	mov	r0, r2
 800ba60:	f7fe f9b3 	bl	8009dca <vListInsertEnd>
 800ba64:	e005      	b.n	800ba72 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	3318      	adds	r3, #24
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	480e      	ldr	r0, [pc, #56]	; (800baa8 <xTaskRemoveFromEventList+0xc0>)
 800ba6e:	f7fe f9ac 	bl	8009dca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba76:	4b0d      	ldr	r3, [pc, #52]	; (800baac <xTaskRemoveFromEventList+0xc4>)
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d905      	bls.n	800ba8c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ba80:	2301      	movs	r3, #1
 800ba82:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ba84:	4b0a      	ldr	r3, [pc, #40]	; (800bab0 <xTaskRemoveFromEventList+0xc8>)
 800ba86:	2201      	movs	r2, #1
 800ba88:	601a      	str	r2, [r3, #0]
 800ba8a:	e001      	b.n	800ba90 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ba90:	697b      	ldr	r3, [r7, #20]
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3718      	adds	r7, #24
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
 800ba9a:	bf00      	nop
 800ba9c:	20001368 	.word	0x20001368
 800baa0:	20001348 	.word	0x20001348
 800baa4:	20000e70 	.word	0x20000e70
 800baa8:	20001300 	.word	0x20001300
 800baac:	20000e6c 	.word	0x20000e6c
 800bab0:	20001354 	.word	0x20001354

0800bab4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bab4:	b480      	push	{r7}
 800bab6:	b083      	sub	sp, #12
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800babc:	4b06      	ldr	r3, [pc, #24]	; (800bad8 <vTaskInternalSetTimeOutState+0x24>)
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bac4:	4b05      	ldr	r3, [pc, #20]	; (800badc <vTaskInternalSetTimeOutState+0x28>)
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	605a      	str	r2, [r3, #4]
}
 800bacc:	bf00      	nop
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad6:	4770      	bx	lr
 800bad8:	20001358 	.word	0x20001358
 800badc:	20001344 	.word	0x20001344

0800bae0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b088      	sub	sp, #32
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
 800bae8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10c      	bne.n	800bb0a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	b672      	cpsid	i
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	b662      	cpsie	i
 800bb04:	613b      	str	r3, [r7, #16]
}
 800bb06:	bf00      	nop
 800bb08:	e7fe      	b.n	800bb08 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d10c      	bne.n	800bb2a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800bb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb14:	b672      	cpsid	i
 800bb16:	f383 8811 	msr	BASEPRI, r3
 800bb1a:	f3bf 8f6f 	isb	sy
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	b662      	cpsie	i
 800bb24:	60fb      	str	r3, [r7, #12]
}
 800bb26:	bf00      	nop
 800bb28:	e7fe      	b.n	800bb28 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800bb2a:	f000 ff7f 	bl	800ca2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bb2e:	4b1d      	ldr	r3, [pc, #116]	; (800bba4 <xTaskCheckForTimeOut+0xc4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	685b      	ldr	r3, [r3, #4]
 800bb38:	69ba      	ldr	r2, [r7, #24]
 800bb3a:	1ad3      	subs	r3, r2, r3
 800bb3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb46:	d102      	bne.n	800bb4e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bb48:	2300      	movs	r3, #0
 800bb4a:	61fb      	str	r3, [r7, #28]
 800bb4c:	e023      	b.n	800bb96 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681a      	ldr	r2, [r3, #0]
 800bb52:	4b15      	ldr	r3, [pc, #84]	; (800bba8 <xTaskCheckForTimeOut+0xc8>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d007      	beq.n	800bb6a <xTaskCheckForTimeOut+0x8a>
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	69ba      	ldr	r2, [r7, #24]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d302      	bcc.n	800bb6a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bb64:	2301      	movs	r3, #1
 800bb66:	61fb      	str	r3, [r7, #28]
 800bb68:	e015      	b.n	800bb96 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bb6a:	683b      	ldr	r3, [r7, #0]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	429a      	cmp	r2, r3
 800bb72:	d20b      	bcs.n	800bb8c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	1ad2      	subs	r2, r2, r3
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f7ff ff97 	bl	800bab4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bb86:	2300      	movs	r3, #0
 800bb88:	61fb      	str	r3, [r7, #28]
 800bb8a:	e004      	b.n	800bb96 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	2200      	movs	r2, #0
 800bb90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bb92:	2301      	movs	r3, #1
 800bb94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bb96:	f000 ff7d 	bl	800ca94 <vPortExitCritical>

	return xReturn;
 800bb9a:	69fb      	ldr	r3, [r7, #28]
}
 800bb9c:	4618      	mov	r0, r3
 800bb9e:	3720      	adds	r7, #32
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	20001344 	.word	0x20001344
 800bba8:	20001358 	.word	0x20001358

0800bbac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bbac:	b480      	push	{r7}
 800bbae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bbb0:	4b03      	ldr	r3, [pc, #12]	; (800bbc0 <vTaskMissedYield+0x14>)
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	601a      	str	r2, [r3, #0]
}
 800bbb6:	bf00      	nop
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr
 800bbc0:	20001354 	.word	0x20001354

0800bbc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	b082      	sub	sp, #8
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bbcc:	f000 f852 	bl	800bc74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bbd0:	4b06      	ldr	r3, [pc, #24]	; (800bbec <prvIdleTask+0x28>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d9f9      	bls.n	800bbcc <prvIdleTask+0x8>
			{
				taskYIELD();
 800bbd8:	4b05      	ldr	r3, [pc, #20]	; (800bbf0 <prvIdleTask+0x2c>)
 800bbda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbde:	601a      	str	r2, [r3, #0]
 800bbe0:	f3bf 8f4f 	dsb	sy
 800bbe4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bbe8:	e7f0      	b.n	800bbcc <prvIdleTask+0x8>
 800bbea:	bf00      	nop
 800bbec:	20000e70 	.word	0x20000e70
 800bbf0:	e000ed04 	.word	0xe000ed04

0800bbf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	607b      	str	r3, [r7, #4]
 800bbfe:	e00c      	b.n	800bc1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	4613      	mov	r3, r2
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	4413      	add	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4a12      	ldr	r2, [pc, #72]	; (800bc54 <prvInitialiseTaskLists+0x60>)
 800bc0c:	4413      	add	r3, r2
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fe f8ae 	bl	8009d70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	3301      	adds	r3, #1
 800bc18:	607b      	str	r3, [r7, #4]
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b37      	cmp	r3, #55	; 0x37
 800bc1e:	d9ef      	bls.n	800bc00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bc20:	480d      	ldr	r0, [pc, #52]	; (800bc58 <prvInitialiseTaskLists+0x64>)
 800bc22:	f7fe f8a5 	bl	8009d70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bc26:	480d      	ldr	r0, [pc, #52]	; (800bc5c <prvInitialiseTaskLists+0x68>)
 800bc28:	f7fe f8a2 	bl	8009d70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bc2c:	480c      	ldr	r0, [pc, #48]	; (800bc60 <prvInitialiseTaskLists+0x6c>)
 800bc2e:	f7fe f89f 	bl	8009d70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bc32:	480c      	ldr	r0, [pc, #48]	; (800bc64 <prvInitialiseTaskLists+0x70>)
 800bc34:	f7fe f89c 	bl	8009d70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bc38:	480b      	ldr	r0, [pc, #44]	; (800bc68 <prvInitialiseTaskLists+0x74>)
 800bc3a:	f7fe f899 	bl	8009d70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bc3e:	4b0b      	ldr	r3, [pc, #44]	; (800bc6c <prvInitialiseTaskLists+0x78>)
 800bc40:	4a05      	ldr	r2, [pc, #20]	; (800bc58 <prvInitialiseTaskLists+0x64>)
 800bc42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bc44:	4b0a      	ldr	r3, [pc, #40]	; (800bc70 <prvInitialiseTaskLists+0x7c>)
 800bc46:	4a05      	ldr	r2, [pc, #20]	; (800bc5c <prvInitialiseTaskLists+0x68>)
 800bc48:	601a      	str	r2, [r3, #0]
}
 800bc4a:	bf00      	nop
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	20000e70 	.word	0x20000e70
 800bc58:	200012d0 	.word	0x200012d0
 800bc5c:	200012e4 	.word	0x200012e4
 800bc60:	20001300 	.word	0x20001300
 800bc64:	20001314 	.word	0x20001314
 800bc68:	2000132c 	.word	0x2000132c
 800bc6c:	200012f8 	.word	0x200012f8
 800bc70:	200012fc 	.word	0x200012fc

0800bc74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b082      	sub	sp, #8
 800bc78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bc7a:	e019      	b.n	800bcb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bc7c:	f000 fed6 	bl	800ca2c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc80:	4b10      	ldr	r3, [pc, #64]	; (800bcc4 <prvCheckTasksWaitingTermination+0x50>)
 800bc82:	68db      	ldr	r3, [r3, #12]
 800bc84:	68db      	ldr	r3, [r3, #12]
 800bc86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f7fe f8f9 	bl	8009e84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bc92:	4b0d      	ldr	r3, [pc, #52]	; (800bcc8 <prvCheckTasksWaitingTermination+0x54>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3b01      	subs	r3, #1
 800bc98:	4a0b      	ldr	r2, [pc, #44]	; (800bcc8 <prvCheckTasksWaitingTermination+0x54>)
 800bc9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bc9c:	4b0b      	ldr	r3, [pc, #44]	; (800bccc <prvCheckTasksWaitingTermination+0x58>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3b01      	subs	r3, #1
 800bca2:	4a0a      	ldr	r2, [pc, #40]	; (800bccc <prvCheckTasksWaitingTermination+0x58>)
 800bca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bca6:	f000 fef5 	bl	800ca94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f810 	bl	800bcd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bcb0:	4b06      	ldr	r3, [pc, #24]	; (800bccc <prvCheckTasksWaitingTermination+0x58>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d1e1      	bne.n	800bc7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bcb8:	bf00      	nop
 800bcba:	bf00      	nop
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20001314 	.word	0x20001314
 800bcc8:	20001340 	.word	0x20001340
 800bccc:	20001328 	.word	0x20001328

0800bcd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d108      	bne.n	800bcf4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce6:	4618      	mov	r0, r3
 800bce8:	f001 f896 	bl	800ce18 <vPortFree>
				vPortFree( pxTCB );
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f001 f893 	bl	800ce18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bcf2:	e01a      	b.n	800bd2a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	d103      	bne.n	800bd06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f001 f88a 	bl	800ce18 <vPortFree>
	}
 800bd04:	e011      	b.n	800bd2a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d00c      	beq.n	800bd2a <prvDeleteTCB+0x5a>
	__asm volatile
 800bd10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd14:	b672      	cpsid	i
 800bd16:	f383 8811 	msr	BASEPRI, r3
 800bd1a:	f3bf 8f6f 	isb	sy
 800bd1e:	f3bf 8f4f 	dsb	sy
 800bd22:	b662      	cpsie	i
 800bd24:	60fb      	str	r3, [r7, #12]
}
 800bd26:	bf00      	nop
 800bd28:	e7fe      	b.n	800bd28 <prvDeleteTCB+0x58>
	}
 800bd2a:	bf00      	nop
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
	...

0800bd34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd3a:	4b0c      	ldr	r3, [pc, #48]	; (800bd6c <prvResetNextTaskUnblockTime+0x38>)
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d104      	bne.n	800bd4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bd44:	4b0a      	ldr	r3, [pc, #40]	; (800bd70 <prvResetNextTaskUnblockTime+0x3c>)
 800bd46:	f04f 32ff 	mov.w	r2, #4294967295
 800bd4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bd4c:	e008      	b.n	800bd60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd4e:	4b07      	ldr	r3, [pc, #28]	; (800bd6c <prvResetNextTaskUnblockTime+0x38>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	685b      	ldr	r3, [r3, #4]
 800bd5c:	4a04      	ldr	r2, [pc, #16]	; (800bd70 <prvResetNextTaskUnblockTime+0x3c>)
 800bd5e:	6013      	str	r3, [r2, #0]
}
 800bd60:	bf00      	nop
 800bd62:	370c      	adds	r7, #12
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr
 800bd6c:	200012f8 	.word	0x200012f8
 800bd70:	20001360 	.word	0x20001360

0800bd74 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bd74:	b480      	push	{r7}
 800bd76:	b083      	sub	sp, #12
 800bd78:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bd7a:	4b05      	ldr	r3, [pc, #20]	; (800bd90 <xTaskGetCurrentTaskHandle+0x1c>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bd80:	687b      	ldr	r3, [r7, #4]
	}
 800bd82:	4618      	mov	r0, r3
 800bd84:	370c      	adds	r7, #12
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	20000e6c 	.word	0x20000e6c

0800bd94 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bd94:	b480      	push	{r7}
 800bd96:	b083      	sub	sp, #12
 800bd98:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bd9a:	4b0b      	ldr	r3, [pc, #44]	; (800bdc8 <xTaskGetSchedulerState+0x34>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d102      	bne.n	800bda8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bda2:	2301      	movs	r3, #1
 800bda4:	607b      	str	r3, [r7, #4]
 800bda6:	e008      	b.n	800bdba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda8:	4b08      	ldr	r3, [pc, #32]	; (800bdcc <xTaskGetSchedulerState+0x38>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d102      	bne.n	800bdb6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	607b      	str	r3, [r7, #4]
 800bdb4:	e001      	b.n	800bdba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bdb6:	2300      	movs	r3, #0
 800bdb8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bdba:	687b      	ldr	r3, [r7, #4]
	}
 800bdbc:	4618      	mov	r0, r3
 800bdbe:	370c      	adds	r7, #12
 800bdc0:	46bd      	mov	sp, r7
 800bdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc6:	4770      	bx	lr
 800bdc8:	2000134c 	.word	0x2000134c
 800bdcc:	20001368 	.word	0x20001368

0800bdd0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b084      	sub	sp, #16
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800bddc:	2300      	movs	r3, #0
 800bdde:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d051      	beq.n	800be8a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdea:	4b2a      	ldr	r3, [pc, #168]	; (800be94 <xTaskPriorityInherit+0xc4>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdf0:	429a      	cmp	r2, r3
 800bdf2:	d241      	bcs.n	800be78 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	699b      	ldr	r3, [r3, #24]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	db06      	blt.n	800be0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bdfc:	4b25      	ldr	r3, [pc, #148]	; (800be94 <xTaskPriorityInherit+0xc4>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	6959      	ldr	r1, [r3, #20]
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	4a1f      	ldr	r2, [pc, #124]	; (800be98 <xTaskPriorityInherit+0xc8>)
 800be1c:	4413      	add	r3, r2
 800be1e:	4299      	cmp	r1, r3
 800be20:	d122      	bne.n	800be68 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	3304      	adds	r3, #4
 800be26:	4618      	mov	r0, r3
 800be28:	f7fe f82c 	bl	8009e84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be2c:	4b19      	ldr	r3, [pc, #100]	; (800be94 <xTaskPriorityInherit+0xc4>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be3a:	4b18      	ldr	r3, [pc, #96]	; (800be9c <xTaskPriorityInherit+0xcc>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	429a      	cmp	r2, r3
 800be40:	d903      	bls.n	800be4a <xTaskPriorityInherit+0x7a>
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be46:	4a15      	ldr	r2, [pc, #84]	; (800be9c <xTaskPriorityInherit+0xcc>)
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4e:	4613      	mov	r3, r2
 800be50:	009b      	lsls	r3, r3, #2
 800be52:	4413      	add	r3, r2
 800be54:	009b      	lsls	r3, r3, #2
 800be56:	4a10      	ldr	r2, [pc, #64]	; (800be98 <xTaskPriorityInherit+0xc8>)
 800be58:	441a      	add	r2, r3
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	3304      	adds	r3, #4
 800be5e:	4619      	mov	r1, r3
 800be60:	4610      	mov	r0, r2
 800be62:	f7fd ffb2 	bl	8009dca <vListInsertEnd>
 800be66:	e004      	b.n	800be72 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800be68:	4b0a      	ldr	r3, [pc, #40]	; (800be94 <xTaskPriorityInherit+0xc4>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800be72:	2301      	movs	r3, #1
 800be74:	60fb      	str	r3, [r7, #12]
 800be76:	e008      	b.n	800be8a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800be7c:	4b05      	ldr	r3, [pc, #20]	; (800be94 <xTaskPriorityInherit+0xc4>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be82:	429a      	cmp	r2, r3
 800be84:	d201      	bcs.n	800be8a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800be86:	2301      	movs	r3, #1
 800be88:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800be8a:	68fb      	ldr	r3, [r7, #12]
	}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	20000e6c 	.word	0x20000e6c
 800be98:	20000e70 	.word	0x20000e70
 800be9c:	20001348 	.word	0x20001348

0800bea0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b086      	sub	sp, #24
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800beac:	2300      	movs	r3, #0
 800beae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d05a      	beq.n	800bf6c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800beb6:	4b30      	ldr	r3, [pc, #192]	; (800bf78 <xTaskPriorityDisinherit+0xd8>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	693a      	ldr	r2, [r7, #16]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d00c      	beq.n	800beda <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800bec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec4:	b672      	cpsid	i
 800bec6:	f383 8811 	msr	BASEPRI, r3
 800beca:	f3bf 8f6f 	isb	sy
 800bece:	f3bf 8f4f 	dsb	sy
 800bed2:	b662      	cpsie	i
 800bed4:	60fb      	str	r3, [r7, #12]
}
 800bed6:	bf00      	nop
 800bed8:	e7fe      	b.n	800bed8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10c      	bne.n	800befc <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800bee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee6:	b672      	cpsid	i
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
 800bef4:	b662      	cpsie	i
 800bef6:	60bb      	str	r3, [r7, #8]
}
 800bef8:	bf00      	nop
 800befa:	e7fe      	b.n	800befa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf00:	1e5a      	subs	r2, r3, #1
 800bf02:	693b      	ldr	r3, [r7, #16]
 800bf04:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf06:	693b      	ldr	r3, [r7, #16]
 800bf08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d02c      	beq.n	800bf6c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf12:	693b      	ldr	r3, [r7, #16]
 800bf14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d128      	bne.n	800bf6c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f7fd ffb0 	bl	8009e84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bf24:	693b      	ldr	r3, [r7, #16]
 800bf26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf2c:	693b      	ldr	r3, [r7, #16]
 800bf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf30:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bf38:	693b      	ldr	r3, [r7, #16]
 800bf3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf3c:	4b0f      	ldr	r3, [pc, #60]	; (800bf7c <xTaskPriorityDisinherit+0xdc>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	429a      	cmp	r2, r3
 800bf42:	d903      	bls.n	800bf4c <xTaskPriorityDisinherit+0xac>
 800bf44:	693b      	ldr	r3, [r7, #16]
 800bf46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf48:	4a0c      	ldr	r2, [pc, #48]	; (800bf7c <xTaskPriorityDisinherit+0xdc>)
 800bf4a:	6013      	str	r3, [r2, #0]
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf50:	4613      	mov	r3, r2
 800bf52:	009b      	lsls	r3, r3, #2
 800bf54:	4413      	add	r3, r2
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4a09      	ldr	r2, [pc, #36]	; (800bf80 <xTaskPriorityDisinherit+0xe0>)
 800bf5a:	441a      	add	r2, r3
 800bf5c:	693b      	ldr	r3, [r7, #16]
 800bf5e:	3304      	adds	r3, #4
 800bf60:	4619      	mov	r1, r3
 800bf62:	4610      	mov	r0, r2
 800bf64:	f7fd ff31 	bl	8009dca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bf68:	2301      	movs	r3, #1
 800bf6a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bf6c:	697b      	ldr	r3, [r7, #20]
	}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop
 800bf78:	20000e6c 	.word	0x20000e6c
 800bf7c:	20001348 	.word	0x20001348
 800bf80:	20000e70 	.word	0x20000e70

0800bf84 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b088      	sub	sp, #32
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bf92:	2301      	movs	r3, #1
 800bf94:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d06e      	beq.n	800c07a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d10c      	bne.n	800bfbe <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800bfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa8:	b672      	cpsid	i
 800bfaa:	f383 8811 	msr	BASEPRI, r3
 800bfae:	f3bf 8f6f 	isb	sy
 800bfb2:	f3bf 8f4f 	dsb	sy
 800bfb6:	b662      	cpsie	i
 800bfb8:	60fb      	str	r3, [r7, #12]
}
 800bfba:	bf00      	nop
 800bfbc:	e7fe      	b.n	800bfbc <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bfbe:	69bb      	ldr	r3, [r7, #24]
 800bfc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d902      	bls.n	800bfce <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	61fb      	str	r3, [r7, #28]
 800bfcc:	e002      	b.n	800bfd4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bfce:	69bb      	ldr	r3, [r7, #24]
 800bfd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfd2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bfd4:	69bb      	ldr	r3, [r7, #24]
 800bfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd8:	69fa      	ldr	r2, [r7, #28]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d04d      	beq.n	800c07a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bfde:	69bb      	ldr	r3, [r7, #24]
 800bfe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfe2:	697a      	ldr	r2, [r7, #20]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d148      	bne.n	800c07a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bfe8:	4b26      	ldr	r3, [pc, #152]	; (800c084 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	69ba      	ldr	r2, [r7, #24]
 800bfee:	429a      	cmp	r2, r3
 800bff0:	d10c      	bne.n	800c00c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800bff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff6:	b672      	cpsid	i
 800bff8:	f383 8811 	msr	BASEPRI, r3
 800bffc:	f3bf 8f6f 	isb	sy
 800c000:	f3bf 8f4f 	dsb	sy
 800c004:	b662      	cpsie	i
 800c006:	60bb      	str	r3, [r7, #8]
}
 800c008:	bf00      	nop
 800c00a:	e7fe      	b.n	800c00a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c00c:	69bb      	ldr	r3, [r7, #24]
 800c00e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c010:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c012:	69bb      	ldr	r3, [r7, #24]
 800c014:	69fa      	ldr	r2, [r7, #28]
 800c016:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	699b      	ldr	r3, [r3, #24]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	db04      	blt.n	800c02a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c026:	69bb      	ldr	r3, [r7, #24]
 800c028:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	6959      	ldr	r1, [r3, #20]
 800c02e:	693a      	ldr	r2, [r7, #16]
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	4a13      	ldr	r2, [pc, #76]	; (800c088 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c03a:	4413      	add	r3, r2
 800c03c:	4299      	cmp	r1, r3
 800c03e:	d11c      	bne.n	800c07a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	3304      	adds	r3, #4
 800c044:	4618      	mov	r0, r3
 800c046:	f7fd ff1d 	bl	8009e84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04e:	4b0f      	ldr	r3, [pc, #60]	; (800c08c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	429a      	cmp	r2, r3
 800c054:	d903      	bls.n	800c05e <vTaskPriorityDisinheritAfterTimeout+0xda>
 800c056:	69bb      	ldr	r3, [r7, #24]
 800c058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c05a:	4a0c      	ldr	r2, [pc, #48]	; (800c08c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800c05c:	6013      	str	r3, [r2, #0]
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c062:	4613      	mov	r3, r2
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4413      	add	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4a07      	ldr	r2, [pc, #28]	; (800c088 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800c06c:	441a      	add	r2, r3
 800c06e:	69bb      	ldr	r3, [r7, #24]
 800c070:	3304      	adds	r3, #4
 800c072:	4619      	mov	r1, r3
 800c074:	4610      	mov	r0, r2
 800c076:	f7fd fea8 	bl	8009dca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c07a:	bf00      	nop
 800c07c:	3720      	adds	r7, #32
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	20000e6c 	.word	0x20000e6c
 800c088:	20000e70 	.word	0x20000e70
 800c08c:	20001348 	.word	0x20001348

0800c090 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c090:	b480      	push	{r7}
 800c092:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c094:	4b07      	ldr	r3, [pc, #28]	; (800c0b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d004      	beq.n	800c0a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c09c:	4b05      	ldr	r3, [pc, #20]	; (800c0b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0a2:	3201      	adds	r2, #1
 800c0a4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c0a6:	4b03      	ldr	r3, [pc, #12]	; (800c0b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
	}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	20000e6c 	.word	0x20000e6c

0800c0b8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c0b8:	b580      	push	{r7, lr}
 800c0ba:	b084      	sub	sp, #16
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
 800c0c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0c2:	4b21      	ldr	r3, [pc, #132]	; (800c148 <prvAddCurrentTaskToDelayedList+0x90>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0c8:	4b20      	ldr	r3, [pc, #128]	; (800c14c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fd fed8 	bl	8009e84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0da:	d10a      	bne.n	800c0f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c0dc:	683b      	ldr	r3, [r7, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d007      	beq.n	800c0f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0e2:	4b1a      	ldr	r3, [pc, #104]	; (800c14c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	3304      	adds	r3, #4
 800c0e8:	4619      	mov	r1, r3
 800c0ea:	4819      	ldr	r0, [pc, #100]	; (800c150 <prvAddCurrentTaskToDelayedList+0x98>)
 800c0ec:	f7fd fe6d 	bl	8009dca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0f0:	e026      	b.n	800c140 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0f2:	68fa      	ldr	r2, [r7, #12]
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0fa:	4b14      	ldr	r3, [pc, #80]	; (800c14c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	68ba      	ldr	r2, [r7, #8]
 800c100:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	429a      	cmp	r2, r3
 800c108:	d209      	bcs.n	800c11e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c10a:	4b12      	ldr	r3, [pc, #72]	; (800c154 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	4b0f      	ldr	r3, [pc, #60]	; (800c14c <prvAddCurrentTaskToDelayedList+0x94>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	3304      	adds	r3, #4
 800c114:	4619      	mov	r1, r3
 800c116:	4610      	mov	r0, r2
 800c118:	f7fd fe7b 	bl	8009e12 <vListInsert>
}
 800c11c:	e010      	b.n	800c140 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c11e:	4b0e      	ldr	r3, [pc, #56]	; (800c158 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c120:	681a      	ldr	r2, [r3, #0]
 800c122:	4b0a      	ldr	r3, [pc, #40]	; (800c14c <prvAddCurrentTaskToDelayedList+0x94>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	3304      	adds	r3, #4
 800c128:	4619      	mov	r1, r3
 800c12a:	4610      	mov	r0, r2
 800c12c:	f7fd fe71 	bl	8009e12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c130:	4b0a      	ldr	r3, [pc, #40]	; (800c15c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	429a      	cmp	r2, r3
 800c138:	d202      	bcs.n	800c140 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c13a:	4a08      	ldr	r2, [pc, #32]	; (800c15c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	6013      	str	r3, [r2, #0]
}
 800c140:	bf00      	nop
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}
 800c148:	20001344 	.word	0x20001344
 800c14c:	20000e6c 	.word	0x20000e6c
 800c150:	2000132c 	.word	0x2000132c
 800c154:	200012fc 	.word	0x200012fc
 800c158:	200012f8 	.word	0x200012f8
 800c15c:	20001360 	.word	0x20001360

0800c160 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b08a      	sub	sp, #40	; 0x28
 800c164:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c166:	2300      	movs	r3, #0
 800c168:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c16a:	f000 fb15 	bl	800c798 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c16e:	4b1d      	ldr	r3, [pc, #116]	; (800c1e4 <xTimerCreateTimerTask+0x84>)
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d021      	beq.n	800c1ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c176:	2300      	movs	r3, #0
 800c178:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c17a:	2300      	movs	r3, #0
 800c17c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c17e:	1d3a      	adds	r2, r7, #4
 800c180:	f107 0108 	add.w	r1, r7, #8
 800c184:	f107 030c 	add.w	r3, r7, #12
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fd fdd7 	bl	8009d3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c18e:	6879      	ldr	r1, [r7, #4]
 800c190:	68bb      	ldr	r3, [r7, #8]
 800c192:	68fa      	ldr	r2, [r7, #12]
 800c194:	9202      	str	r2, [sp, #8]
 800c196:	9301      	str	r3, [sp, #4]
 800c198:	2302      	movs	r3, #2
 800c19a:	9300      	str	r3, [sp, #0]
 800c19c:	2300      	movs	r3, #0
 800c19e:	460a      	mov	r2, r1
 800c1a0:	4911      	ldr	r1, [pc, #68]	; (800c1e8 <xTimerCreateTimerTask+0x88>)
 800c1a2:	4812      	ldr	r0, [pc, #72]	; (800c1ec <xTimerCreateTimerTask+0x8c>)
 800c1a4:	f7fe ffa8 	bl	800b0f8 <xTaskCreateStatic>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	4a11      	ldr	r2, [pc, #68]	; (800c1f0 <xTimerCreateTimerTask+0x90>)
 800c1ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c1ae:	4b10      	ldr	r3, [pc, #64]	; (800c1f0 <xTimerCreateTimerTask+0x90>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d001      	beq.n	800c1ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d10c      	bne.n	800c1da <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800c1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c4:	b672      	cpsid	i
 800c1c6:	f383 8811 	msr	BASEPRI, r3
 800c1ca:	f3bf 8f6f 	isb	sy
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	b662      	cpsie	i
 800c1d4:	613b      	str	r3, [r7, #16]
}
 800c1d6:	bf00      	nop
 800c1d8:	e7fe      	b.n	800c1d8 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800c1da:	697b      	ldr	r3, [r7, #20]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3718      	adds	r7, #24
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	2000139c 	.word	0x2000139c
 800c1e8:	0802c010 	.word	0x0802c010
 800c1ec:	0800c331 	.word	0x0800c331
 800c1f0:	200013a0 	.word	0x200013a0

0800c1f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b08a      	sub	sp, #40	; 0x28
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
 800c200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c202:	2300      	movs	r3, #0
 800c204:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d10c      	bne.n	800c226 <xTimerGenericCommand+0x32>
	__asm volatile
 800c20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c210:	b672      	cpsid	i
 800c212:	f383 8811 	msr	BASEPRI, r3
 800c216:	f3bf 8f6f 	isb	sy
 800c21a:	f3bf 8f4f 	dsb	sy
 800c21e:	b662      	cpsie	i
 800c220:	623b      	str	r3, [r7, #32]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c226:	4b1a      	ldr	r3, [pc, #104]	; (800c290 <xTimerGenericCommand+0x9c>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d02a      	beq.n	800c284 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2b05      	cmp	r3, #5
 800c23e:	dc18      	bgt.n	800c272 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c240:	f7ff fda8 	bl	800bd94 <xTaskGetSchedulerState>
 800c244:	4603      	mov	r3, r0
 800c246:	2b02      	cmp	r3, #2
 800c248:	d109      	bne.n	800c25e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c24a:	4b11      	ldr	r3, [pc, #68]	; (800c290 <xTimerGenericCommand+0x9c>)
 800c24c:	6818      	ldr	r0, [r3, #0]
 800c24e:	f107 0110 	add.w	r1, r7, #16
 800c252:	2300      	movs	r3, #0
 800c254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c256:	f7fe f8bd 	bl	800a3d4 <xQueueGenericSend>
 800c25a:	6278      	str	r0, [r7, #36]	; 0x24
 800c25c:	e012      	b.n	800c284 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c25e:	4b0c      	ldr	r3, [pc, #48]	; (800c290 <xTimerGenericCommand+0x9c>)
 800c260:	6818      	ldr	r0, [r3, #0]
 800c262:	f107 0110 	add.w	r1, r7, #16
 800c266:	2300      	movs	r3, #0
 800c268:	2200      	movs	r2, #0
 800c26a:	f7fe f8b3 	bl	800a3d4 <xQueueGenericSend>
 800c26e:	6278      	str	r0, [r7, #36]	; 0x24
 800c270:	e008      	b.n	800c284 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c272:	4b07      	ldr	r3, [pc, #28]	; (800c290 <xTimerGenericCommand+0x9c>)
 800c274:	6818      	ldr	r0, [r3, #0]
 800c276:	f107 0110 	add.w	r1, r7, #16
 800c27a:	2300      	movs	r3, #0
 800c27c:	683a      	ldr	r2, [r7, #0]
 800c27e:	f7fe f9af 	bl	800a5e0 <xQueueGenericSendFromISR>
 800c282:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c286:	4618      	mov	r0, r3
 800c288:	3728      	adds	r7, #40	; 0x28
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	2000139c 	.word	0x2000139c

0800c294 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b088      	sub	sp, #32
 800c298:	af02      	add	r7, sp, #8
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c29e:	4b23      	ldr	r3, [pc, #140]	; (800c32c <prvProcessExpiredTimer+0x98>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	68db      	ldr	r3, [r3, #12]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	3304      	adds	r3, #4
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7fd fde9 	bl	8009e84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c2b8:	f003 0304 	and.w	r3, r3, #4
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d024      	beq.n	800c30a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	699a      	ldr	r2, [r3, #24]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	18d1      	adds	r1, r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	6978      	ldr	r0, [r7, #20]
 800c2ce:	f000 f8d3 	bl	800c478 <prvInsertTimerInActiveList>
 800c2d2:	4603      	mov	r3, r0
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d021      	beq.n	800c31c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2d8:	2300      	movs	r3, #0
 800c2da:	9300      	str	r3, [sp, #0]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	687a      	ldr	r2, [r7, #4]
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	6978      	ldr	r0, [r7, #20]
 800c2e4:	f7ff ff86 	bl	800c1f4 <xTimerGenericCommand>
 800c2e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c2ea:	693b      	ldr	r3, [r7, #16]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d115      	bne.n	800c31c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800c2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f4:	b672      	cpsid	i
 800c2f6:	f383 8811 	msr	BASEPRI, r3
 800c2fa:	f3bf 8f6f 	isb	sy
 800c2fe:	f3bf 8f4f 	dsb	sy
 800c302:	b662      	cpsie	i
 800c304:	60fb      	str	r3, [r7, #12]
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c310:	f023 0301 	bic.w	r3, r3, #1
 800c314:	b2da      	uxtb	r2, r3
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	6a1b      	ldr	r3, [r3, #32]
 800c320:	6978      	ldr	r0, [r7, #20]
 800c322:	4798      	blx	r3
}
 800c324:	bf00      	nop
 800c326:	3718      	adds	r7, #24
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}
 800c32c:	20001394 	.word	0x20001394

0800c330 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c330:	b580      	push	{r7, lr}
 800c332:	b084      	sub	sp, #16
 800c334:	af00      	add	r7, sp, #0
 800c336:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c338:	f107 0308 	add.w	r3, r7, #8
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 f857 	bl	800c3f0 <prvGetNextExpireTime>
 800c342:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c344:	68bb      	ldr	r3, [r7, #8]
 800c346:	4619      	mov	r1, r3
 800c348:	68f8      	ldr	r0, [r7, #12]
 800c34a:	f000 f803 	bl	800c354 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c34e:	f000 f8d5 	bl	800c4fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c352:	e7f1      	b.n	800c338 <prvTimerTask+0x8>

0800c354 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c354:	b580      	push	{r7, lr}
 800c356:	b084      	sub	sp, #16
 800c358:	af00      	add	r7, sp, #0
 800c35a:	6078      	str	r0, [r7, #4]
 800c35c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c35e:	f7ff f915 	bl	800b58c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c362:	f107 0308 	add.w	r3, r7, #8
 800c366:	4618      	mov	r0, r3
 800c368:	f000 f866 	bl	800c438 <prvSampleTimeNow>
 800c36c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d130      	bne.n	800c3d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c374:	683b      	ldr	r3, [r7, #0]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d10a      	bne.n	800c390 <prvProcessTimerOrBlockTask+0x3c>
 800c37a:	687a      	ldr	r2, [r7, #4]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	429a      	cmp	r2, r3
 800c380:	d806      	bhi.n	800c390 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c382:	f7ff f911 	bl	800b5a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c386:	68f9      	ldr	r1, [r7, #12]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7ff ff83 	bl	800c294 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c38e:	e024      	b.n	800c3da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d008      	beq.n	800c3a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c396:	4b13      	ldr	r3, [pc, #76]	; (800c3e4 <prvProcessTimerOrBlockTask+0x90>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <prvProcessTimerOrBlockTask+0x50>
 800c3a0:	2301      	movs	r3, #1
 800c3a2:	e000      	b.n	800c3a6 <prvProcessTimerOrBlockTask+0x52>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c3a8:	4b0f      	ldr	r3, [pc, #60]	; (800c3e8 <prvProcessTimerOrBlockTask+0x94>)
 800c3aa:	6818      	ldr	r0, [r3, #0]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	1ad3      	subs	r3, r2, r3
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	4619      	mov	r1, r3
 800c3b6:	f7fe fe6b 	bl	800b090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c3ba:	f7ff f8f5 	bl	800b5a8 <xTaskResumeAll>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d10a      	bne.n	800c3da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c3c4:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <prvProcessTimerOrBlockTask+0x98>)
 800c3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ca:	601a      	str	r2, [r3, #0]
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	f3bf 8f6f 	isb	sy
}
 800c3d4:	e001      	b.n	800c3da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c3d6:	f7ff f8e7 	bl	800b5a8 <xTaskResumeAll>
}
 800c3da:	bf00      	nop
 800c3dc:	3710      	adds	r7, #16
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}
 800c3e2:	bf00      	nop
 800c3e4:	20001398 	.word	0x20001398
 800c3e8:	2000139c 	.word	0x2000139c
 800c3ec:	e000ed04 	.word	0xe000ed04

0800c3f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b085      	sub	sp, #20
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c3f8:	4b0e      	ldr	r3, [pc, #56]	; (800c434 <prvGetNextExpireTime+0x44>)
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d101      	bne.n	800c406 <prvGetNextExpireTime+0x16>
 800c402:	2201      	movs	r2, #1
 800c404:	e000      	b.n	800c408 <prvGetNextExpireTime+0x18>
 800c406:	2200      	movs	r2, #0
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d105      	bne.n	800c420 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c414:	4b07      	ldr	r3, [pc, #28]	; (800c434 <prvGetNextExpireTime+0x44>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68db      	ldr	r3, [r3, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	60fb      	str	r3, [r7, #12]
 800c41e:	e001      	b.n	800c424 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c420:	2300      	movs	r3, #0
 800c422:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c424:	68fb      	ldr	r3, [r7, #12]
}
 800c426:	4618      	mov	r0, r3
 800c428:	3714      	adds	r7, #20
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
 800c432:	bf00      	nop
 800c434:	20001394 	.word	0x20001394

0800c438 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b084      	sub	sp, #16
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c440:	f7ff f952 	bl	800b6e8 <xTaskGetTickCount>
 800c444:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c446:	4b0b      	ldr	r3, [pc, #44]	; (800c474 <prvSampleTimeNow+0x3c>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68fa      	ldr	r2, [r7, #12]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d205      	bcs.n	800c45c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c450:	f000 f93c 	bl	800c6cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	601a      	str	r2, [r3, #0]
 800c45a:	e002      	b.n	800c462 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c462:	4a04      	ldr	r2, [pc, #16]	; (800c474 <prvSampleTimeNow+0x3c>)
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c468:	68fb      	ldr	r3, [r7, #12]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	200013a4 	.word	0x200013a4

0800c478 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b086      	sub	sp, #24
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	60f8      	str	r0, [r7, #12]
 800c480:	60b9      	str	r1, [r7, #8]
 800c482:	607a      	str	r2, [r7, #4]
 800c484:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c486:	2300      	movs	r3, #0
 800c488:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	68ba      	ldr	r2, [r7, #8]
 800c48e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d812      	bhi.n	800c4c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	683b      	ldr	r3, [r7, #0]
 800c4a2:	1ad2      	subs	r2, r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d302      	bcc.n	800c4b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	617b      	str	r3, [r7, #20]
 800c4b0:	e01b      	b.n	800c4ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c4b2:	4b10      	ldr	r3, [pc, #64]	; (800c4f4 <prvInsertTimerInActiveList+0x7c>)
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	68fb      	ldr	r3, [r7, #12]
 800c4b8:	3304      	adds	r3, #4
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	4610      	mov	r0, r2
 800c4be:	f7fd fca8 	bl	8009e12 <vListInsert>
 800c4c2:	e012      	b.n	800c4ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	683b      	ldr	r3, [r7, #0]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d206      	bcs.n	800c4da <prvInsertTimerInActiveList+0x62>
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d302      	bcc.n	800c4da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	617b      	str	r3, [r7, #20]
 800c4d8:	e007      	b.n	800c4ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <prvInsertTimerInActiveList+0x80>)
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	f7fd fc94 	bl	8009e12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c4ea:	697b      	ldr	r3, [r7, #20]
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	3718      	adds	r7, #24
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}
 800c4f4:	20001398 	.word	0x20001398
 800c4f8:	20001394 	.word	0x20001394

0800c4fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b08e      	sub	sp, #56	; 0x38
 800c500:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c502:	e0d0      	b.n	800c6a6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2b00      	cmp	r3, #0
 800c508:	da1a      	bge.n	800c540 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c50a:	1d3b      	adds	r3, r7, #4
 800c50c:	3304      	adds	r3, #4
 800c50e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c512:	2b00      	cmp	r3, #0
 800c514:	d10c      	bne.n	800c530 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c51a:	b672      	cpsid	i
 800c51c:	f383 8811 	msr	BASEPRI, r3
 800c520:	f3bf 8f6f 	isb	sy
 800c524:	f3bf 8f4f 	dsb	sy
 800c528:	b662      	cpsie	i
 800c52a:	61fb      	str	r3, [r7, #28]
}
 800c52c:	bf00      	nop
 800c52e:	e7fe      	b.n	800c52e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c536:	6850      	ldr	r0, [r2, #4]
 800c538:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c53a:	6892      	ldr	r2, [r2, #8]
 800c53c:	4611      	mov	r1, r2
 800c53e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	f2c0 80ae 	blt.w	800c6a4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c54e:	695b      	ldr	r3, [r3, #20]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d004      	beq.n	800c55e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c556:	3304      	adds	r3, #4
 800c558:	4618      	mov	r0, r3
 800c55a:	f7fd fc93 	bl	8009e84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c55e:	463b      	mov	r3, r7
 800c560:	4618      	mov	r0, r3
 800c562:	f7ff ff69 	bl	800c438 <prvSampleTimeNow>
 800c566:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	2b09      	cmp	r3, #9
 800c56c:	f200 809b 	bhi.w	800c6a6 <prvProcessReceivedCommands+0x1aa>
 800c570:	a201      	add	r2, pc, #4	; (adr r2, 800c578 <prvProcessReceivedCommands+0x7c>)
 800c572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c576:	bf00      	nop
 800c578:	0800c5a1 	.word	0x0800c5a1
 800c57c:	0800c5a1 	.word	0x0800c5a1
 800c580:	0800c5a1 	.word	0x0800c5a1
 800c584:	0800c619 	.word	0x0800c619
 800c588:	0800c62d 	.word	0x0800c62d
 800c58c:	0800c67b 	.word	0x0800c67b
 800c590:	0800c5a1 	.word	0x0800c5a1
 800c594:	0800c5a1 	.word	0x0800c5a1
 800c598:	0800c619 	.word	0x0800c619
 800c59c:	0800c62d 	.word	0x0800c62d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5a6:	f043 0301 	orr.w	r3, r3, #1
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c5b2:	68ba      	ldr	r2, [r7, #8]
 800c5b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b6:	699b      	ldr	r3, [r3, #24]
 800c5b8:	18d1      	adds	r1, r2, r3
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c5be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5c0:	f7ff ff5a 	bl	800c478 <prvInsertTimerInActiveList>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d06d      	beq.n	800c6a6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5cc:	6a1b      	ldr	r3, [r3, #32]
 800c5ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d062      	beq.n	800c6a6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c5e0:	68ba      	ldr	r2, [r7, #8]
 800c5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	441a      	add	r2, r3
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	2100      	movs	r1, #0
 800c5f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c5f2:	f7ff fdff 	bl	800c1f4 <xTimerGenericCommand>
 800c5f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c5f8:	6a3b      	ldr	r3, [r7, #32]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d153      	bne.n	800c6a6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c602:	b672      	cpsid	i
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	b662      	cpsie	i
 800c612:	61bb      	str	r3, [r7, #24]
}
 800c614:	bf00      	nop
 800c616:	e7fe      	b.n	800c616 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c61e:	f023 0301 	bic.w	r3, r3, #1
 800c622:	b2da      	uxtb	r2, r3
 800c624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c62a:	e03c      	b.n	800c6a6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c62e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	b2da      	uxtb	r2, r3
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c642:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	699b      	ldr	r3, [r3, #24]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d10c      	bne.n	800c666 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800c64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c650:	b672      	cpsid	i
 800c652:	f383 8811 	msr	BASEPRI, r3
 800c656:	f3bf 8f6f 	isb	sy
 800c65a:	f3bf 8f4f 	dsb	sy
 800c65e:	b662      	cpsie	i
 800c660:	617b      	str	r3, [r7, #20]
}
 800c662:	bf00      	nop
 800c664:	e7fe      	b.n	800c664 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c668:	699a      	ldr	r2, [r3, #24]
 800c66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66c:	18d1      	adds	r1, r2, r3
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c672:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c674:	f7ff ff00 	bl	800c478 <prvInsertTimerInActiveList>
					break;
 800c678:	e015      	b.n	800c6a6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c67c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c680:	f003 0302 	and.w	r3, r3, #2
 800c684:	2b00      	cmp	r3, #0
 800c686:	d103      	bne.n	800c690 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800c688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c68a:	f000 fbc5 	bl	800ce18 <vPortFree>
 800c68e:	e00a      	b.n	800c6a6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c692:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c696:	f023 0301 	bic.w	r3, r3, #1
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c6a2:	e000      	b.n	800c6a6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c6a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c6a6:	4b08      	ldr	r3, [pc, #32]	; (800c6c8 <prvProcessReceivedCommands+0x1cc>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	1d39      	adds	r1, r7, #4
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe f8cc 	bl	800a84c <xQueueReceive>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	f47f af24 	bne.w	800c504 <prvProcessReceivedCommands+0x8>
	}
}
 800c6bc:	bf00      	nop
 800c6be:	bf00      	nop
 800c6c0:	3730      	adds	r7, #48	; 0x30
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}
 800c6c6:	bf00      	nop
 800c6c8:	2000139c 	.word	0x2000139c

0800c6cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b088      	sub	sp, #32
 800c6d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6d2:	e04a      	b.n	800c76a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6d4:	4b2e      	ldr	r3, [pc, #184]	; (800c790 <prvSwitchTimerLists+0xc4>)
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	68db      	ldr	r3, [r3, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6de:	4b2c      	ldr	r3, [pc, #176]	; (800c790 <prvSwitchTimerLists+0xc4>)
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f7fd fbc9 	bl	8009e84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6a1b      	ldr	r3, [r3, #32]
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c700:	f003 0304 	and.w	r3, r3, #4
 800c704:	2b00      	cmp	r3, #0
 800c706:	d030      	beq.n	800c76a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	699b      	ldr	r3, [r3, #24]
 800c70c:	693a      	ldr	r2, [r7, #16]
 800c70e:	4413      	add	r3, r2
 800c710:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c712:	68ba      	ldr	r2, [r7, #8]
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	429a      	cmp	r2, r3
 800c718:	d90e      	bls.n	800c738 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	68ba      	ldr	r2, [r7, #8]
 800c71e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c726:	4b1a      	ldr	r3, [pc, #104]	; (800c790 <prvSwitchTimerLists+0xc4>)
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	3304      	adds	r3, #4
 800c72e:	4619      	mov	r1, r3
 800c730:	4610      	mov	r0, r2
 800c732:	f7fd fb6e 	bl	8009e12 <vListInsert>
 800c736:	e018      	b.n	800c76a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c738:	2300      	movs	r3, #0
 800c73a:	9300      	str	r3, [sp, #0]
 800c73c:	2300      	movs	r3, #0
 800c73e:	693a      	ldr	r2, [r7, #16]
 800c740:	2100      	movs	r1, #0
 800c742:	68f8      	ldr	r0, [r7, #12]
 800c744:	f7ff fd56 	bl	800c1f4 <xTimerGenericCommand>
 800c748:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d10c      	bne.n	800c76a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800c750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c754:	b672      	cpsid	i
 800c756:	f383 8811 	msr	BASEPRI, r3
 800c75a:	f3bf 8f6f 	isb	sy
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	b662      	cpsie	i
 800c764:	603b      	str	r3, [r7, #0]
}
 800c766:	bf00      	nop
 800c768:	e7fe      	b.n	800c768 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c76a:	4b09      	ldr	r3, [pc, #36]	; (800c790 <prvSwitchTimerLists+0xc4>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1af      	bne.n	800c6d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c774:	4b06      	ldr	r3, [pc, #24]	; (800c790 <prvSwitchTimerLists+0xc4>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c77a:	4b06      	ldr	r3, [pc, #24]	; (800c794 <prvSwitchTimerLists+0xc8>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a04      	ldr	r2, [pc, #16]	; (800c790 <prvSwitchTimerLists+0xc4>)
 800c780:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c782:	4a04      	ldr	r2, [pc, #16]	; (800c794 <prvSwitchTimerLists+0xc8>)
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	6013      	str	r3, [r2, #0]
}
 800c788:	bf00      	nop
 800c78a:	3718      	adds	r7, #24
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}
 800c790:	20001394 	.word	0x20001394
 800c794:	20001398 	.word	0x20001398

0800c798 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b082      	sub	sp, #8
 800c79c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c79e:	f000 f945 	bl	800ca2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c7a2:	4b15      	ldr	r3, [pc, #84]	; (800c7f8 <prvCheckForValidListAndQueue+0x60>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d120      	bne.n	800c7ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c7aa:	4814      	ldr	r0, [pc, #80]	; (800c7fc <prvCheckForValidListAndQueue+0x64>)
 800c7ac:	f7fd fae0 	bl	8009d70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c7b0:	4813      	ldr	r0, [pc, #76]	; (800c800 <prvCheckForValidListAndQueue+0x68>)
 800c7b2:	f7fd fadd 	bl	8009d70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c7b6:	4b13      	ldr	r3, [pc, #76]	; (800c804 <prvCheckForValidListAndQueue+0x6c>)
 800c7b8:	4a10      	ldr	r2, [pc, #64]	; (800c7fc <prvCheckForValidListAndQueue+0x64>)
 800c7ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c7bc:	4b12      	ldr	r3, [pc, #72]	; (800c808 <prvCheckForValidListAndQueue+0x70>)
 800c7be:	4a10      	ldr	r2, [pc, #64]	; (800c800 <prvCheckForValidListAndQueue+0x68>)
 800c7c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	4b11      	ldr	r3, [pc, #68]	; (800c80c <prvCheckForValidListAndQueue+0x74>)
 800c7c8:	4a11      	ldr	r2, [pc, #68]	; (800c810 <prvCheckForValidListAndQueue+0x78>)
 800c7ca:	2110      	movs	r1, #16
 800c7cc:	200a      	movs	r0, #10
 800c7ce:	f7fd fbed 	bl	8009fac <xQueueGenericCreateStatic>
 800c7d2:	4603      	mov	r3, r0
 800c7d4:	4a08      	ldr	r2, [pc, #32]	; (800c7f8 <prvCheckForValidListAndQueue+0x60>)
 800c7d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c7d8:	4b07      	ldr	r3, [pc, #28]	; (800c7f8 <prvCheckForValidListAndQueue+0x60>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d005      	beq.n	800c7ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c7e0:	4b05      	ldr	r3, [pc, #20]	; (800c7f8 <prvCheckForValidListAndQueue+0x60>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	490b      	ldr	r1, [pc, #44]	; (800c814 <prvCheckForValidListAndQueue+0x7c>)
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f7fe fbfe 	bl	800afe8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7ec:	f000 f952 	bl	800ca94 <vPortExitCritical>
}
 800c7f0:	bf00      	nop
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	2000139c 	.word	0x2000139c
 800c7fc:	2000136c 	.word	0x2000136c
 800c800:	20001380 	.word	0x20001380
 800c804:	20001394 	.word	0x20001394
 800c808:	20001398 	.word	0x20001398
 800c80c:	20001448 	.word	0x20001448
 800c810:	200013a8 	.word	0x200013a8
 800c814:	0802c018 	.word	0x0802c018

0800c818 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c818:	b480      	push	{r7}
 800c81a:	b085      	sub	sp, #20
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	60f8      	str	r0, [r7, #12]
 800c820:	60b9      	str	r1, [r7, #8]
 800c822:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	3b04      	subs	r3, #4
 800c828:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3b04      	subs	r3, #4
 800c836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	f023 0201 	bic.w	r2, r3, #1
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	3b04      	subs	r3, #4
 800c846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c848:	4a0c      	ldr	r2, [pc, #48]	; (800c87c <pxPortInitialiseStack+0x64>)
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	3b14      	subs	r3, #20
 800c852:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	3b04      	subs	r3, #4
 800c85e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f06f 0202 	mvn.w	r2, #2
 800c866:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	3b20      	subs	r3, #32
 800c86c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c86e:	68fb      	ldr	r3, [r7, #12]
}
 800c870:	4618      	mov	r0, r3
 800c872:	3714      	adds	r7, #20
 800c874:	46bd      	mov	sp, r7
 800c876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87a:	4770      	bx	lr
 800c87c:	0800c881 	.word	0x0800c881

0800c880 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c880:	b480      	push	{r7}
 800c882:	b085      	sub	sp, #20
 800c884:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c88a:	4b14      	ldr	r3, [pc, #80]	; (800c8dc <prvTaskExitError+0x5c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c892:	d00c      	beq.n	800c8ae <prvTaskExitError+0x2e>
	__asm volatile
 800c894:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c898:	b672      	cpsid	i
 800c89a:	f383 8811 	msr	BASEPRI, r3
 800c89e:	f3bf 8f6f 	isb	sy
 800c8a2:	f3bf 8f4f 	dsb	sy
 800c8a6:	b662      	cpsie	i
 800c8a8:	60fb      	str	r3, [r7, #12]
}
 800c8aa:	bf00      	nop
 800c8ac:	e7fe      	b.n	800c8ac <prvTaskExitError+0x2c>
	__asm volatile
 800c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b2:	b672      	cpsid	i
 800c8b4:	f383 8811 	msr	BASEPRI, r3
 800c8b8:	f3bf 8f6f 	isb	sy
 800c8bc:	f3bf 8f4f 	dsb	sy
 800c8c0:	b662      	cpsie	i
 800c8c2:	60bb      	str	r3, [r7, #8]
}
 800c8c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8c6:	bf00      	nop
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d0fc      	beq.n	800c8c8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8ce:	bf00      	nop
 800c8d0:	bf00      	nop
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	20000014 	.word	0x20000014

0800c8e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8e0:	4b07      	ldr	r3, [pc, #28]	; (800c900 <pxCurrentTCBConst2>)
 800c8e2:	6819      	ldr	r1, [r3, #0]
 800c8e4:	6808      	ldr	r0, [r1, #0]
 800c8e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ea:	f380 8809 	msr	PSP, r0
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f04f 0000 	mov.w	r0, #0
 800c8f6:	f380 8811 	msr	BASEPRI, r0
 800c8fa:	4770      	bx	lr
 800c8fc:	f3af 8000 	nop.w

0800c900 <pxCurrentTCBConst2>:
 800c900:	20000e6c 	.word	0x20000e6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c904:	bf00      	nop
 800c906:	bf00      	nop

0800c908 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c908:	4808      	ldr	r0, [pc, #32]	; (800c92c <prvPortStartFirstTask+0x24>)
 800c90a:	6800      	ldr	r0, [r0, #0]
 800c90c:	6800      	ldr	r0, [r0, #0]
 800c90e:	f380 8808 	msr	MSP, r0
 800c912:	f04f 0000 	mov.w	r0, #0
 800c916:	f380 8814 	msr	CONTROL, r0
 800c91a:	b662      	cpsie	i
 800c91c:	b661      	cpsie	f
 800c91e:	f3bf 8f4f 	dsb	sy
 800c922:	f3bf 8f6f 	isb	sy
 800c926:	df00      	svc	0
 800c928:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c92a:	bf00      	nop
 800c92c:	e000ed08 	.word	0xe000ed08

0800c930 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c930:	b580      	push	{r7, lr}
 800c932:	b084      	sub	sp, #16
 800c934:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c936:	4b37      	ldr	r3, [pc, #220]	; (800ca14 <xPortStartScheduler+0xe4>)
 800c938:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	781b      	ldrb	r3, [r3, #0]
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	22ff      	movs	r2, #255	; 0xff
 800c946:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	b2db      	uxtb	r3, r3
 800c94e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c950:	78fb      	ldrb	r3, [r7, #3]
 800c952:	b2db      	uxtb	r3, r3
 800c954:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c958:	b2da      	uxtb	r2, r3
 800c95a:	4b2f      	ldr	r3, [pc, #188]	; (800ca18 <xPortStartScheduler+0xe8>)
 800c95c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c95e:	4b2f      	ldr	r3, [pc, #188]	; (800ca1c <xPortStartScheduler+0xec>)
 800c960:	2207      	movs	r2, #7
 800c962:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c964:	e009      	b.n	800c97a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800c966:	4b2d      	ldr	r3, [pc, #180]	; (800ca1c <xPortStartScheduler+0xec>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	3b01      	subs	r3, #1
 800c96c:	4a2b      	ldr	r2, [pc, #172]	; (800ca1c <xPortStartScheduler+0xec>)
 800c96e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c970:	78fb      	ldrb	r3, [r7, #3]
 800c972:	b2db      	uxtb	r3, r3
 800c974:	005b      	lsls	r3, r3, #1
 800c976:	b2db      	uxtb	r3, r3
 800c978:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c97a:	78fb      	ldrb	r3, [r7, #3]
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c982:	2b80      	cmp	r3, #128	; 0x80
 800c984:	d0ef      	beq.n	800c966 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c986:	4b25      	ldr	r3, [pc, #148]	; (800ca1c <xPortStartScheduler+0xec>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f1c3 0307 	rsb	r3, r3, #7
 800c98e:	2b04      	cmp	r3, #4
 800c990:	d00c      	beq.n	800c9ac <xPortStartScheduler+0x7c>
	__asm volatile
 800c992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c996:	b672      	cpsid	i
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	b662      	cpsie	i
 800c9a6:	60bb      	str	r3, [r7, #8]
}
 800c9a8:	bf00      	nop
 800c9aa:	e7fe      	b.n	800c9aa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9ac:	4b1b      	ldr	r3, [pc, #108]	; (800ca1c <xPortStartScheduler+0xec>)
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	021b      	lsls	r3, r3, #8
 800c9b2:	4a1a      	ldr	r2, [pc, #104]	; (800ca1c <xPortStartScheduler+0xec>)
 800c9b4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9b6:	4b19      	ldr	r3, [pc, #100]	; (800ca1c <xPortStartScheduler+0xec>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9be:	4a17      	ldr	r2, [pc, #92]	; (800ca1c <xPortStartScheduler+0xec>)
 800c9c0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	b2da      	uxtb	r2, r3
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9ca:	4b15      	ldr	r3, [pc, #84]	; (800ca20 <xPortStartScheduler+0xf0>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a14      	ldr	r2, [pc, #80]	; (800ca20 <xPortStartScheduler+0xf0>)
 800c9d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c9d4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9d6:	4b12      	ldr	r3, [pc, #72]	; (800ca20 <xPortStartScheduler+0xf0>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	4a11      	ldr	r2, [pc, #68]	; (800ca20 <xPortStartScheduler+0xf0>)
 800c9dc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c9e0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c9e2:	f000 f8dd 	bl	800cba0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c9e6:	4b0f      	ldr	r3, [pc, #60]	; (800ca24 <xPortStartScheduler+0xf4>)
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c9ec:	f000 f8fc 	bl	800cbe8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c9f0:	4b0d      	ldr	r3, [pc, #52]	; (800ca28 <xPortStartScheduler+0xf8>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	4a0c      	ldr	r2, [pc, #48]	; (800ca28 <xPortStartScheduler+0xf8>)
 800c9f6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c9fa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c9fc:	f7ff ff84 	bl	800c908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca00:	f7fe ff3e 	bl	800b880 <vTaskSwitchContext>
	prvTaskExitError();
 800ca04:	f7ff ff3c 	bl	800c880 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca08:	2300      	movs	r3, #0
}
 800ca0a:	4618      	mov	r0, r3
 800ca0c:	3710      	adds	r7, #16
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	e000e400 	.word	0xe000e400
 800ca18:	20001498 	.word	0x20001498
 800ca1c:	2000149c 	.word	0x2000149c
 800ca20:	e000ed20 	.word	0xe000ed20
 800ca24:	20000014 	.word	0x20000014
 800ca28:	e000ef34 	.word	0xe000ef34

0800ca2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b083      	sub	sp, #12
 800ca30:	af00      	add	r7, sp, #0
	__asm volatile
 800ca32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca36:	b672      	cpsid	i
 800ca38:	f383 8811 	msr	BASEPRI, r3
 800ca3c:	f3bf 8f6f 	isb	sy
 800ca40:	f3bf 8f4f 	dsb	sy
 800ca44:	b662      	cpsie	i
 800ca46:	607b      	str	r3, [r7, #4]
}
 800ca48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca4a:	4b10      	ldr	r3, [pc, #64]	; (800ca8c <vPortEnterCritical+0x60>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3301      	adds	r3, #1
 800ca50:	4a0e      	ldr	r2, [pc, #56]	; (800ca8c <vPortEnterCritical+0x60>)
 800ca52:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca54:	4b0d      	ldr	r3, [pc, #52]	; (800ca8c <vPortEnterCritical+0x60>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d111      	bne.n	800ca80 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca5c:	4b0c      	ldr	r3, [pc, #48]	; (800ca90 <vPortEnterCritical+0x64>)
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00c      	beq.n	800ca80 <vPortEnterCritical+0x54>
	__asm volatile
 800ca66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6a:	b672      	cpsid	i
 800ca6c:	f383 8811 	msr	BASEPRI, r3
 800ca70:	f3bf 8f6f 	isb	sy
 800ca74:	f3bf 8f4f 	dsb	sy
 800ca78:	b662      	cpsie	i
 800ca7a:	603b      	str	r3, [r7, #0]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <vPortEnterCritical+0x52>
	}
}
 800ca80:	bf00      	nop
 800ca82:	370c      	adds	r7, #12
 800ca84:	46bd      	mov	sp, r7
 800ca86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8a:	4770      	bx	lr
 800ca8c:	20000014 	.word	0x20000014
 800ca90:	e000ed04 	.word	0xe000ed04

0800ca94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ca9a:	4b13      	ldr	r3, [pc, #76]	; (800cae8 <vPortExitCritical+0x54>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10c      	bne.n	800cabc <vPortExitCritical+0x28>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa6:	b672      	cpsid	i
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	b662      	cpsie	i
 800cab6:	607b      	str	r3, [r7, #4]
}
 800cab8:	bf00      	nop
 800caba:	e7fe      	b.n	800caba <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800cabc:	4b0a      	ldr	r3, [pc, #40]	; (800cae8 <vPortExitCritical+0x54>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	3b01      	subs	r3, #1
 800cac2:	4a09      	ldr	r2, [pc, #36]	; (800cae8 <vPortExitCritical+0x54>)
 800cac4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cac6:	4b08      	ldr	r3, [pc, #32]	; (800cae8 <vPortExitCritical+0x54>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d105      	bne.n	800cada <vPortExitCritical+0x46>
 800cace:	2300      	movs	r3, #0
 800cad0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	f383 8811 	msr	BASEPRI, r3
}
 800cad8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cada:	bf00      	nop
 800cadc:	370c      	adds	r7, #12
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	20000014 	.word	0x20000014
 800caec:	00000000 	.word	0x00000000

0800caf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800caf0:	f3ef 8009 	mrs	r0, PSP
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	4b15      	ldr	r3, [pc, #84]	; (800cb50 <pxCurrentTCBConst>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	f01e 0f10 	tst.w	lr, #16
 800cb00:	bf08      	it	eq
 800cb02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb0a:	6010      	str	r0, [r2, #0]
 800cb0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb14:	b672      	cpsid	i
 800cb16:	f380 8811 	msr	BASEPRI, r0
 800cb1a:	f3bf 8f4f 	dsb	sy
 800cb1e:	f3bf 8f6f 	isb	sy
 800cb22:	b662      	cpsie	i
 800cb24:	f7fe feac 	bl	800b880 <vTaskSwitchContext>
 800cb28:	f04f 0000 	mov.w	r0, #0
 800cb2c:	f380 8811 	msr	BASEPRI, r0
 800cb30:	bc09      	pop	{r0, r3}
 800cb32:	6819      	ldr	r1, [r3, #0]
 800cb34:	6808      	ldr	r0, [r1, #0]
 800cb36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3a:	f01e 0f10 	tst.w	lr, #16
 800cb3e:	bf08      	it	eq
 800cb40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb44:	f380 8809 	msr	PSP, r0
 800cb48:	f3bf 8f6f 	isb	sy
 800cb4c:	4770      	bx	lr
 800cb4e:	bf00      	nop

0800cb50 <pxCurrentTCBConst>:
 800cb50:	20000e6c 	.word	0x20000e6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop

0800cb58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb62:	b672      	cpsid	i
 800cb64:	f383 8811 	msr	BASEPRI, r3
 800cb68:	f3bf 8f6f 	isb	sy
 800cb6c:	f3bf 8f4f 	dsb	sy
 800cb70:	b662      	cpsie	i
 800cb72:	607b      	str	r3, [r7, #4]
}
 800cb74:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb76:	f7fe fdc7 	bl	800b708 <xTaskIncrementTick>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d003      	beq.n	800cb88 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb80:	4b06      	ldr	r3, [pc, #24]	; (800cb9c <SysTick_Handler+0x44>)
 800cb82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb86:	601a      	str	r2, [r3, #0]
 800cb88:	2300      	movs	r3, #0
 800cb8a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	f383 8811 	msr	BASEPRI, r3
}
 800cb92:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cb94:	bf00      	nop
 800cb96:	3708      	adds	r7, #8
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	e000ed04 	.word	0xe000ed04

0800cba0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cba0:	b480      	push	{r7}
 800cba2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cba4:	4b0b      	ldr	r3, [pc, #44]	; (800cbd4 <vPortSetupTimerInterrupt+0x34>)
 800cba6:	2200      	movs	r2, #0
 800cba8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbaa:	4b0b      	ldr	r3, [pc, #44]	; (800cbd8 <vPortSetupTimerInterrupt+0x38>)
 800cbac:	2200      	movs	r2, #0
 800cbae:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbb0:	4b0a      	ldr	r3, [pc, #40]	; (800cbdc <vPortSetupTimerInterrupt+0x3c>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a0a      	ldr	r2, [pc, #40]	; (800cbe0 <vPortSetupTimerInterrupt+0x40>)
 800cbb6:	fba2 2303 	umull	r2, r3, r2, r3
 800cbba:	099b      	lsrs	r3, r3, #6
 800cbbc:	4a09      	ldr	r2, [pc, #36]	; (800cbe4 <vPortSetupTimerInterrupt+0x44>)
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbc2:	4b04      	ldr	r3, [pc, #16]	; (800cbd4 <vPortSetupTimerInterrupt+0x34>)
 800cbc4:	2207      	movs	r2, #7
 800cbc6:	601a      	str	r2, [r3, #0]
}
 800cbc8:	bf00      	nop
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd0:	4770      	bx	lr
 800cbd2:	bf00      	nop
 800cbd4:	e000e010 	.word	0xe000e010
 800cbd8:	e000e018 	.word	0xe000e018
 800cbdc:	20000008 	.word	0x20000008
 800cbe0:	10624dd3 	.word	0x10624dd3
 800cbe4:	e000e014 	.word	0xe000e014

0800cbe8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cbe8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cbf8 <vPortEnableVFP+0x10>
 800cbec:	6801      	ldr	r1, [r0, #0]
 800cbee:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cbf2:	6001      	str	r1, [r0, #0]
 800cbf4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cbf6:	bf00      	nop
 800cbf8:	e000ed88 	.word	0xe000ed88

0800cbfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cbfc:	b480      	push	{r7}
 800cbfe:	b085      	sub	sp, #20
 800cc00:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc02:	f3ef 8305 	mrs	r3, IPSR
 800cc06:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b0f      	cmp	r3, #15
 800cc0c:	d916      	bls.n	800cc3c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc0e:	4a19      	ldr	r2, [pc, #100]	; (800cc74 <vPortValidateInterruptPriority+0x78>)
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	4413      	add	r3, r2
 800cc14:	781b      	ldrb	r3, [r3, #0]
 800cc16:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc18:	4b17      	ldr	r3, [pc, #92]	; (800cc78 <vPortValidateInterruptPriority+0x7c>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	7afa      	ldrb	r2, [r7, #11]
 800cc1e:	429a      	cmp	r2, r3
 800cc20:	d20c      	bcs.n	800cc3c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800cc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc26:	b672      	cpsid	i
 800cc28:	f383 8811 	msr	BASEPRI, r3
 800cc2c:	f3bf 8f6f 	isb	sy
 800cc30:	f3bf 8f4f 	dsb	sy
 800cc34:	b662      	cpsie	i
 800cc36:	607b      	str	r3, [r7, #4]
}
 800cc38:	bf00      	nop
 800cc3a:	e7fe      	b.n	800cc3a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc3c:	4b0f      	ldr	r3, [pc, #60]	; (800cc7c <vPortValidateInterruptPriority+0x80>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc44:	4b0e      	ldr	r3, [pc, #56]	; (800cc80 <vPortValidateInterruptPriority+0x84>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d90c      	bls.n	800cc66 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	b672      	cpsid	i
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	b662      	cpsie	i
 800cc60:	603b      	str	r3, [r7, #0]
}
 800cc62:	bf00      	nop
 800cc64:	e7fe      	b.n	800cc64 <vPortValidateInterruptPriority+0x68>
	}
 800cc66:	bf00      	nop
 800cc68:	3714      	adds	r7, #20
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc70:	4770      	bx	lr
 800cc72:	bf00      	nop
 800cc74:	e000e3f0 	.word	0xe000e3f0
 800cc78:	20001498 	.word	0x20001498
 800cc7c:	e000ed0c 	.word	0xe000ed0c
 800cc80:	2000149c 	.word	0x2000149c

0800cc84 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc84:	b580      	push	{r7, lr}
 800cc86:	b08a      	sub	sp, #40	; 0x28
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cc90:	f7fe fc7c 	bl	800b58c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cc94:	4b5b      	ldr	r3, [pc, #364]	; (800ce04 <pvPortMalloc+0x180>)
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d101      	bne.n	800cca0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cc9c:	f000 f91a 	bl	800ced4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cca0:	4b59      	ldr	r3, [pc, #356]	; (800ce08 <pvPortMalloc+0x184>)
 800cca2:	681a      	ldr	r2, [r3, #0]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	4013      	ands	r3, r2
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	f040 8092 	bne.w	800cdd2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d01f      	beq.n	800ccf4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ccb4:	2208      	movs	r2, #8
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	4413      	add	r3, r2
 800ccba:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f003 0307 	and.w	r3, r3, #7
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d016      	beq.n	800ccf4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f023 0307 	bic.w	r3, r3, #7
 800cccc:	3308      	adds	r3, #8
 800ccce:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f003 0307 	and.w	r3, r3, #7
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d00c      	beq.n	800ccf4 <pvPortMalloc+0x70>
	__asm volatile
 800ccda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccde:	b672      	cpsid	i
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	b662      	cpsie	i
 800ccee:	617b      	str	r3, [r7, #20]
}
 800ccf0:	bf00      	nop
 800ccf2:	e7fe      	b.n	800ccf2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d06b      	beq.n	800cdd2 <pvPortMalloc+0x14e>
 800ccfa:	4b44      	ldr	r3, [pc, #272]	; (800ce0c <pvPortMalloc+0x188>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	687a      	ldr	r2, [r7, #4]
 800cd00:	429a      	cmp	r2, r3
 800cd02:	d866      	bhi.n	800cdd2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd04:	4b42      	ldr	r3, [pc, #264]	; (800ce10 <pvPortMalloc+0x18c>)
 800cd06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd08:	4b41      	ldr	r3, [pc, #260]	; (800ce10 <pvPortMalloc+0x18c>)
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd0e:	e004      	b.n	800cd1a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800cd10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d903      	bls.n	800cd2c <pvPortMalloc+0xa8>
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1f1      	bne.n	800cd10 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd2c:	4b35      	ldr	r3, [pc, #212]	; (800ce04 <pvPortMalloc+0x180>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d04d      	beq.n	800cdd2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd36:	6a3b      	ldr	r3, [r7, #32]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	2208      	movs	r2, #8
 800cd3c:	4413      	add	r3, r2
 800cd3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd42:	681a      	ldr	r2, [r3, #0]
 800cd44:	6a3b      	ldr	r3, [r7, #32]
 800cd46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd4a:	685a      	ldr	r2, [r3, #4]
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	1ad2      	subs	r2, r2, r3
 800cd50:	2308      	movs	r3, #8
 800cd52:	005b      	lsls	r3, r3, #1
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d921      	bls.n	800cd9c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	4413      	add	r3, r2
 800cd5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd60:	69bb      	ldr	r3, [r7, #24]
 800cd62:	f003 0307 	and.w	r3, r3, #7
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d00c      	beq.n	800cd84 <pvPortMalloc+0x100>
	__asm volatile
 800cd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd6e:	b672      	cpsid	i
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	b662      	cpsie	i
 800cd7e:	613b      	str	r3, [r7, #16]
}
 800cd80:	bf00      	nop
 800cd82:	e7fe      	b.n	800cd82 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd86:	685a      	ldr	r2, [r3, #4]
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	1ad2      	subs	r2, r2, r3
 800cd8c:	69bb      	ldr	r3, [r7, #24]
 800cd8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd96:	69b8      	ldr	r0, [r7, #24]
 800cd98:	f000 f8fe 	bl	800cf98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd9c:	4b1b      	ldr	r3, [pc, #108]	; (800ce0c <pvPortMalloc+0x188>)
 800cd9e:	681a      	ldr	r2, [r3, #0]
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	685b      	ldr	r3, [r3, #4]
 800cda4:	1ad3      	subs	r3, r2, r3
 800cda6:	4a19      	ldr	r2, [pc, #100]	; (800ce0c <pvPortMalloc+0x188>)
 800cda8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdaa:	4b18      	ldr	r3, [pc, #96]	; (800ce0c <pvPortMalloc+0x188>)
 800cdac:	681a      	ldr	r2, [r3, #0]
 800cdae:	4b19      	ldr	r3, [pc, #100]	; (800ce14 <pvPortMalloc+0x190>)
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	429a      	cmp	r2, r3
 800cdb4:	d203      	bcs.n	800cdbe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdb6:	4b15      	ldr	r3, [pc, #84]	; (800ce0c <pvPortMalloc+0x188>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	4a16      	ldr	r2, [pc, #88]	; (800ce14 <pvPortMalloc+0x190>)
 800cdbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc0:	685a      	ldr	r2, [r3, #4]
 800cdc2:	4b11      	ldr	r3, [pc, #68]	; (800ce08 <pvPortMalloc+0x184>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	431a      	orrs	r2, r3
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cdcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdce:	2200      	movs	r2, #0
 800cdd0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cdd2:	f7fe fbe9 	bl	800b5a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdd6:	69fb      	ldr	r3, [r7, #28]
 800cdd8:	f003 0307 	and.w	r3, r3, #7
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d00c      	beq.n	800cdfa <pvPortMalloc+0x176>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	b672      	cpsid	i
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	b662      	cpsie	i
 800cdf4:	60fb      	str	r3, [r7, #12]
}
 800cdf6:	bf00      	nop
 800cdf8:	e7fe      	b.n	800cdf8 <pvPortMalloc+0x174>
	return pvReturn;
 800cdfa:	69fb      	ldr	r3, [r7, #28]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3728      	adds	r7, #40	; 0x28
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}
 800ce04:	200334a8 	.word	0x200334a8
 800ce08:	200334b4 	.word	0x200334b4
 800ce0c:	200334ac 	.word	0x200334ac
 800ce10:	200334a0 	.word	0x200334a0
 800ce14:	200334b0 	.word	0x200334b0

0800ce18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b086      	sub	sp, #24
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d04c      	beq.n	800cec4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce2a:	2308      	movs	r3, #8
 800ce2c:	425b      	negs	r3, r3
 800ce2e:	697a      	ldr	r2, [r7, #20]
 800ce30:	4413      	add	r3, r2
 800ce32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	4b23      	ldr	r3, [pc, #140]	; (800cecc <vPortFree+0xb4>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4013      	ands	r3, r2
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10c      	bne.n	800ce60 <vPortFree+0x48>
	__asm volatile
 800ce46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce4a:	b672      	cpsid	i
 800ce4c:	f383 8811 	msr	BASEPRI, r3
 800ce50:	f3bf 8f6f 	isb	sy
 800ce54:	f3bf 8f4f 	dsb	sy
 800ce58:	b662      	cpsie	i
 800ce5a:	60fb      	str	r3, [r7, #12]
}
 800ce5c:	bf00      	nop
 800ce5e:	e7fe      	b.n	800ce5e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00c      	beq.n	800ce82 <vPortFree+0x6a>
	__asm volatile
 800ce68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce6c:	b672      	cpsid	i
 800ce6e:	f383 8811 	msr	BASEPRI, r3
 800ce72:	f3bf 8f6f 	isb	sy
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	b662      	cpsie	i
 800ce7c:	60bb      	str	r3, [r7, #8]
}
 800ce7e:	bf00      	nop
 800ce80:	e7fe      	b.n	800ce80 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	685a      	ldr	r2, [r3, #4]
 800ce86:	4b11      	ldr	r3, [pc, #68]	; (800cecc <vPortFree+0xb4>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	4013      	ands	r3, r2
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d019      	beq.n	800cec4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ce90:	693b      	ldr	r3, [r7, #16]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d115      	bne.n	800cec4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	4b0b      	ldr	r3, [pc, #44]	; (800cecc <vPortFree+0xb4>)
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	43db      	mvns	r3, r3
 800cea2:	401a      	ands	r2, r3
 800cea4:	693b      	ldr	r3, [r7, #16]
 800cea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cea8:	f7fe fb70 	bl	800b58c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	685a      	ldr	r2, [r3, #4]
 800ceb0:	4b07      	ldr	r3, [pc, #28]	; (800ced0 <vPortFree+0xb8>)
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	4413      	add	r3, r2
 800ceb6:	4a06      	ldr	r2, [pc, #24]	; (800ced0 <vPortFree+0xb8>)
 800ceb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ceba:	6938      	ldr	r0, [r7, #16]
 800cebc:	f000 f86c 	bl	800cf98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800cec0:	f7fe fb72 	bl	800b5a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cec4:	bf00      	nop
 800cec6:	3718      	adds	r7, #24
 800cec8:	46bd      	mov	sp, r7
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	200334b4 	.word	0x200334b4
 800ced0:	200334ac 	.word	0x200334ac

0800ced4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ced4:	b480      	push	{r7}
 800ced6:	b085      	sub	sp, #20
 800ced8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ceda:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 800cede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cee0:	4b27      	ldr	r3, [pc, #156]	; (800cf80 <prvHeapInit+0xac>)
 800cee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	f003 0307 	and.w	r3, r3, #7
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00c      	beq.n	800cf08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	3307      	adds	r3, #7
 800cef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	f023 0307 	bic.w	r3, r3, #7
 800cefa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cefc:	68ba      	ldr	r2, [r7, #8]
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	1ad3      	subs	r3, r2, r3
 800cf02:	4a1f      	ldr	r2, [pc, #124]	; (800cf80 <prvHeapInit+0xac>)
 800cf04:	4413      	add	r3, r2
 800cf06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf08:	68fb      	ldr	r3, [r7, #12]
 800cf0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf0c:	4a1d      	ldr	r2, [pc, #116]	; (800cf84 <prvHeapInit+0xb0>)
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf12:	4b1c      	ldr	r3, [pc, #112]	; (800cf84 <prvHeapInit+0xb0>)
 800cf14:	2200      	movs	r2, #0
 800cf16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	68ba      	ldr	r2, [r7, #8]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf20:	2208      	movs	r2, #8
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	1a9b      	subs	r3, r3, r2
 800cf26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	f023 0307 	bic.w	r3, r3, #7
 800cf2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	4a15      	ldr	r2, [pc, #84]	; (800cf88 <prvHeapInit+0xb4>)
 800cf34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf36:	4b14      	ldr	r3, [pc, #80]	; (800cf88 <prvHeapInit+0xb4>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	2200      	movs	r2, #0
 800cf3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf3e:	4b12      	ldr	r3, [pc, #72]	; (800cf88 <prvHeapInit+0xb4>)
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	2200      	movs	r2, #0
 800cf44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	1ad2      	subs	r2, r2, r3
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf54:	4b0c      	ldr	r3, [pc, #48]	; (800cf88 <prvHeapInit+0xb4>)
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	685b      	ldr	r3, [r3, #4]
 800cf60:	4a0a      	ldr	r2, [pc, #40]	; (800cf8c <prvHeapInit+0xb8>)
 800cf62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf64:	683b      	ldr	r3, [r7, #0]
 800cf66:	685b      	ldr	r3, [r3, #4]
 800cf68:	4a09      	ldr	r2, [pc, #36]	; (800cf90 <prvHeapInit+0xbc>)
 800cf6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf6c:	4b09      	ldr	r3, [pc, #36]	; (800cf94 <prvHeapInit+0xc0>)
 800cf6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cf72:	601a      	str	r2, [r3, #0]
}
 800cf74:	bf00      	nop
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr
 800cf80:	200014a0 	.word	0x200014a0
 800cf84:	200334a0 	.word	0x200334a0
 800cf88:	200334a8 	.word	0x200334a8
 800cf8c:	200334b0 	.word	0x200334b0
 800cf90:	200334ac 	.word	0x200334ac
 800cf94:	200334b4 	.word	0x200334b4

0800cf98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b085      	sub	sp, #20
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfa0:	4b28      	ldr	r3, [pc, #160]	; (800d044 <prvInsertBlockIntoFreeList+0xac>)
 800cfa2:	60fb      	str	r3, [r7, #12]
 800cfa4:	e002      	b.n	800cfac <prvInsertBlockIntoFreeList+0x14>
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d8f7      	bhi.n	800cfa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	685b      	ldr	r3, [r3, #4]
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	687a      	ldr	r2, [r7, #4]
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d108      	bne.n	800cfda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	685b      	ldr	r3, [r3, #4]
 800cfd0:	441a      	add	r2, r3
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	68ba      	ldr	r2, [r7, #8]
 800cfe4:	441a      	add	r2, r3
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d118      	bne.n	800d020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681a      	ldr	r2, [r3, #0]
 800cff2:	4b15      	ldr	r3, [pc, #84]	; (800d048 <prvInsertBlockIntoFreeList+0xb0>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	429a      	cmp	r2, r3
 800cff8:	d00d      	beq.n	800d016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	685a      	ldr	r2, [r3, #4]
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	441a      	add	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	601a      	str	r2, [r3, #0]
 800d014:	e008      	b.n	800d028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d016:	4b0c      	ldr	r3, [pc, #48]	; (800d048 <prvInsertBlockIntoFreeList+0xb0>)
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	601a      	str	r2, [r3, #0]
 800d01e:	e003      	b.n	800d028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681a      	ldr	r2, [r3, #0]
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d002      	beq.n	800d036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	687a      	ldr	r2, [r7, #4]
 800d034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d036:	bf00      	nop
 800d038:	3714      	adds	r7, #20
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	200334a0 	.word	0x200334a0
 800d048:	200334a8 	.word	0x200334a8

0800d04c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800d04c:	b480      	push	{r7}
 800d04e:	af00      	add	r7, sp, #0
}
 800d050:	bf00      	nop
 800d052:	46bd      	mov	sp, r7
 800d054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d058:	4770      	bx	lr

0800d05a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800d05e:	f006 fd4d 	bl	8013afc <touchgfx_init>
}
 800d062:	bf00      	nop
 800d064:	bd80      	pop	{r7, pc}
	...

0800d068 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
    {
 800d070:	4a04      	ldr	r2, [pc, #16]	; (800d084 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	601a      	str	r2, [r3, #0]
    }
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4618      	mov	r0, r3
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr
 800d084:	0802e69c 	.word	0x0802e69c

0800d088 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d088:	b580      	push	{r7, lr}
 800d08a:	b082      	sub	sp, #8
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
    }
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f7ff ffe9 	bl	800d068 <_ZN8touchgfx12FontProviderD1Ev>
 800d096:	2104      	movs	r1, #4
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f01b fe07 	bl	8028cac <_ZdlPvj>
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d0b4:	887b      	ldrh	r3, [r7, #2]
 800d0b6:	2b0a      	cmp	r3, #10
 800d0b8:	d84f      	bhi.n	800d15a <_ZN23ApplicationFontProvider7getFontEt+0xb2>
 800d0ba:	a201      	add	r2, pc, #4	; (adr r2, 800d0c0 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800d0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c0:	0800d0ed 	.word	0x0800d0ed
 800d0c4:	0800d0f7 	.word	0x0800d0f7
 800d0c8:	0800d101 	.word	0x0800d101
 800d0cc:	0800d10b 	.word	0x0800d10b
 800d0d0:	0800d115 	.word	0x0800d115
 800d0d4:	0800d11f 	.word	0x0800d11f
 800d0d8:	0800d129 	.word	0x0800d129
 800d0dc:	0800d133 	.word	0x0800d133
 800d0e0:	0800d13d 	.word	0x0800d13d
 800d0e4:	0800d147 	.word	0x0800d147
 800d0e8:	0800d151 	.word	0x0800d151
    {
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d0ec:	f004 f82a 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	e032      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_05:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d0f6:	f004 f825 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	685b      	ldr	r3, [r3, #4]
 800d0fe:	e02d      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_02:
        // JetBrainsMono_Regular_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d100:	f004 f820 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d104:	4603      	mov	r3, r0
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	e028      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800d10a:	f004 f81b 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d10e:	4603      	mov	r3, r0
 800d110:	68db      	ldr	r3, [r3, #12]
 800d112:	e023      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800d114:	f004 f816 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d118:	4603      	mov	r3, r0
 800d11a:	691b      	ldr	r3, [r3, #16]
 800d11c:	e01e      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_06:
        // verdana_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800d11e:	f004 f811 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d122:	4603      	mov	r3, r0
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	e019      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800d128:	f004 f80c 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d12c:	4603      	mov	r3, r0
 800d12e:	699b      	ldr	r3, [r3, #24]
 800d130:	e014      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 800d132:	f004 f807 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d136:	4603      	mov	r3, r0
 800d138:	69db      	ldr	r3, [r3, #28]
 800d13a:	e00f      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800d13c:	f004 f802 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d140:	4603      	mov	r3, r0
 800d142:	691b      	ldr	r3, [r3, #16]
 800d144:	e00a      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_03:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d146:	f003 fffd 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d14a:	4603      	mov	r3, r0
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	e005      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_07:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800d150:	f003 fff8 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 800d154:	4603      	mov	r3, r0
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	e000      	b.n	800d15c <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    default:
        return 0;
 800d15a:	2300      	movs	r3, #0
    }
}
 800d15c:	4618      	mov	r0, r3
 800d15e:	3708      	adds	r7, #8
 800d160:	46bd      	mov	sp, r7
 800d162:	bd80      	pop	{r7, pc}

0800d164 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_03 = 1; // JetBrainsMono_Regular_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_07 = 4; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	4a05      	ldr	r2, [pc, #20]	; (800d184 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	601a      	str	r2, [r3, #0]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4618      	mov	r0, r3
 800d176:	f7ff ff77 	bl	800d068 <_ZN8touchgfx12FontProviderD1Ev>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	4618      	mov	r0, r3
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}
 800d184:	0802e688 	.word	0x0802e688

0800d188 <_ZN23ApplicationFontProviderD0Ev>:
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff ffe7 	bl	800d164 <_ZN23ApplicationFontProviderD1Ev>
 800d196:	2104      	movs	r1, #4
 800d198:	6878      	ldr	r0, [r7, #4]
 800d19a:	f01b fd87 	bl	8028cac <_ZdlPvj>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
    {
 800d1b0:	4a04      	ldr	r2, [pc, #16]	; (800d1c4 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	601a      	str	r2, [r3, #0]
    }
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	370c      	adds	r7, #12
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr
 800d1c4:	0802eb44 	.word	0x0802eb44

0800d1c8 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b082      	sub	sp, #8
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
    }
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f7ff ffe9 	bl	800d1a8 <_ZN8touchgfx4FontD1Ev>
 800d1d6:	2110      	movs	r1, #16
 800d1d8:	6878      	ldr	r0, [r7, #4]
 800d1da:	f01b fd67 	bl	8028cac <_ZdlPvj>
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	3708      	adds	r7, #8
 800d1e4:	46bd      	mov	sp, r7
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d1e8:	b590      	push	{r4, r7, lr}
 800d1ea:	b087      	sub	sp, #28
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	460b      	mov	r3, r1
 800d1f2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d1f4:	887b      	ldrh	r3, [r7, #2]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d101      	bne.n	800d1fe <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	e010      	b.n	800d220 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	3308      	adds	r3, #8
 800d20c:	681c      	ldr	r4, [r3, #0]
 800d20e:	f107 030f 	add.w	r3, r7, #15
 800d212:	f107 0210 	add.w	r2, r7, #16
 800d216:	8879      	ldrh	r1, [r7, #2]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	47a0      	blx	r4
 800d21c:	6178      	str	r0, [r7, #20]
        return glyph;
 800d21e:	697b      	ldr	r3, [r7, #20]
    }
 800d220:	4618      	mov	r0, r3
 800d222:	371c      	adds	r7, #28
 800d224:	46bd      	mov	sp, r7
 800d226:	bd90      	pop	{r4, r7, pc}

0800d228 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d228:	b480      	push	{r7}
 800d22a:	b083      	sub	sp, #12
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	895b      	ldrh	r3, [r3, #10]
    }
 800d234:	4618      	mov	r0, r3
 800d236:	370c      	adds	r7, #12
 800d238:	46bd      	mov	sp, r7
 800d23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23e:	4770      	bx	lr

0800d240 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800d240:	b480      	push	{r7}
 800d242:	b083      	sub	sp, #12
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	899b      	ldrh	r3, [r3, #12]
    }
 800d24c:	4618      	mov	r0, r3
 800d24e:	370c      	adds	r7, #12
 800d250:	46bd      	mov	sp, r7
 800d252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d256:	4770      	bx	lr

0800d258 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800d258:	b480      	push	{r7}
 800d25a:	b083      	sub	sp, #12
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	889b      	ldrh	r3, [r3, #4]
    }
 800d264:	4618      	mov	r0, r3
 800d266:	370c      	adds	r7, #12
 800d268:	46bd      	mov	sp, r7
 800d26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26e:	4770      	bx	lr

0800d270 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800d270:	b480      	push	{r7}
 800d272:	b083      	sub	sp, #12
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	889a      	ldrh	r2, [r3, #4]
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	799b      	ldrb	r3, [r3, #6]
 800d280:	b29b      	uxth	r3, r3
 800d282:	4413      	add	r3, r2
 800d284:	b29b      	uxth	r3, r3
    }
 800d286:	4618      	mov	r0, r3
 800d288:	370c      	adds	r7, #12
 800d28a:	46bd      	mov	sp, r7
 800d28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d290:	4770      	bx	lr

0800d292 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800d292:	b480      	push	{r7}
 800d294:	b083      	sub	sp, #12
 800d296:	af00      	add	r7, sp, #0
 800d298:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	79db      	ldrb	r3, [r3, #7]
 800d29e:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800d2a2:	b2db      	uxtb	r3, r3
    }
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr

0800d2b0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800d2b0:	b480      	push	{r7}
 800d2b2:	b083      	sub	sp, #12
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	79db      	ldrb	r3, [r3, #7]
 800d2bc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800d2c0:	b2db      	uxtb	r3, r3
    }
 800d2c2:	4618      	mov	r0, r3
 800d2c4:	370c      	adds	r7, #12
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
	...

0800d2d0 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b082      	sub	sp, #8
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
 800d2d8:	4a05      	ldr	r2, [pc, #20]	; (800d2f0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	601a      	str	r2, [r3, #0]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4618      	mov	r0, r3
 800d2e2:	f7ff ff61 	bl	800d1a8 <_ZN8touchgfx4FontD1Ev>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3708      	adds	r7, #8
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	0802f930 	.word	0x0802f930

0800d2f4 <_ZN8touchgfx9ConstFontD0Ev>:
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f7ff ffe7 	bl	800d2d0 <_ZN8touchgfx9ConstFontD1Ev>
 800d302:	2118      	movs	r1, #24
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f01b fcd1 	bl	8028cac <_ZdlPvj>
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	4618      	mov	r0, r3
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	4a05      	ldr	r2, [pc, #20]	; (800d334 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	4618      	mov	r0, r3
 800d326:	f7ff ffd3 	bl	800d2d0 <_ZN8touchgfx9ConstFontD1Ev>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	4618      	mov	r0, r3
 800d32e:	3708      	adds	r7, #8
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}
 800d334:	0802e6c0 	.word	0x0802e6c0

0800d338 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800d338:	b580      	push	{r7, lr}
 800d33a:	b082      	sub	sp, #8
 800d33c:	af00      	add	r7, sp, #0
 800d33e:	6078      	str	r0, [r7, #4]
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7ff ffe7 	bl	800d314 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d346:	2128      	movs	r1, #40	; 0x28
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f01b fcaf 	bl	8028cac <_ZdlPvj>
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	4618      	mov	r0, r3
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800d358:	b480      	push	{r7}
 800d35a:	b083      	sub	sp, #12
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
    {
 800d360:	4a04      	ldr	r2, [pc, #16]	; (800d374 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	601a      	str	r2, [r3, #0]
    }
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	4618      	mov	r0, r3
 800d36a:	370c      	adds	r7, #12
 800d36c:	46bd      	mov	sp, r7
 800d36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d372:	4770      	bx	lr
 800d374:	0802e6b0 	.word	0x0802e6b0

0800d378 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800d378:	b580      	push	{r7, lr}
 800d37a:	b082      	sub	sp, #8
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
    }
 800d380:	6878      	ldr	r0, [r7, #4]
 800d382:	f7ff ffe9 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>
 800d386:	2108      	movs	r1, #8
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f01b fc8f 	bl	8028cac <_ZdlPvj>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4618      	mov	r0, r3
 800d392:	3708      	adds	r7, #8
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}

0800d398 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800d398:	b480      	push	{r7}
 800d39a:	b083      	sub	sp, #12
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	6a1b      	ldr	r3, [r3, #32]
    }
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	370c      	adds	r7, #12
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3ae:	4770      	bx	lr

0800d3b0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800d3b0:	b480      	push	{r7}
 800d3b2:	b083      	sub	sp, #12
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800d3bc:	4618      	mov	r0, r3
 800d3be:	370c      	adds	r7, #12
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr

0800d3c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b08c      	sub	sp, #48	; 0x30
 800d3cc:	af08      	add	r7, sp, #32
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	4611      	mov	r1, r2
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	460b      	mov	r3, r1
 800d3d8:	80fb      	strh	r3, [r7, #6]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800d3de:	68f8      	ldr	r0, [r7, #12]
 800d3e0:	88b9      	ldrh	r1, [r7, #4]
 800d3e2:	88fa      	ldrh	r2, [r7, #6]
 800d3e4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d3e6:	9306      	str	r3, [sp, #24]
 800d3e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d3ea:	9305      	str	r3, [sp, #20]
 800d3ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d3f0:	9304      	str	r3, [sp, #16]
 800d3f2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d3f6:	9303      	str	r3, [sp, #12]
 800d3f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d3fc:	9302      	str	r3, [sp, #8]
 800d3fe:	7f3b      	ldrb	r3, [r7, #28]
 800d400:	9301      	str	r3, [sp, #4]
 800d402:	7e3b      	ldrb	r3, [r7, #24]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	460b      	mov	r3, r1
 800d408:	68b9      	ldr	r1, [r7, #8]
 800d40a:	f00d fe77 	bl	801b0fc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800d40e:	4a0a      	ldr	r2, [pc, #40]	; (800d438 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	601a      	str	r2, [r3, #0]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d418:	619a      	str	r2, [r3, #24]
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d41e:	61da      	str	r2, [r3, #28]
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d424:	621a      	str	r2, [r3, #32]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d42a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	4618      	mov	r0, r3
 800d430:	3710      	adds	r7, #16
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}
 800d436:	bf00      	nop
 800d438:	0802e6c0 	.word	0x0802e6c0

0800d43c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800d43c:	b480      	push	{r7}
 800d43e:	b085      	sub	sp, #20
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	699b      	ldr	r3, [r3, #24]
 800d44a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	889b      	ldrh	r3, [r3, #4]
 800d450:	0adb      	lsrs	r3, r3, #11
 800d452:	b29b      	uxth	r3, r3
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	68fa      	ldr	r2, [r7, #12]
 800d458:	4413      	add	r3, r2
 800d45a:	681a      	ldr	r2, [r3, #0]
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4413      	add	r3, r2
}
 800d462:	4618      	mov	r0, r3
 800d464:	3714      	adds	r7, #20
 800d466:	46bd      	mov	sp, r7
 800d468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46c:	4770      	bx	lr

0800d46e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800d46e:	b480      	push	{r7}
 800d470:	b089      	sub	sp, #36	; 0x24
 800d472:	af00      	add	r7, sp, #0
 800d474:	60f8      	str	r0, [r7, #12]
 800d476:	460b      	mov	r3, r1
 800d478:	607a      	str	r2, [r7, #4]
 800d47a:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d003      	beq.n	800d48a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	7b1b      	ldrb	r3, [r3, #12]
 800d486:	2b00      	cmp	r3, #0
 800d488:	d101      	bne.n	800d48e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800d48a:	2300      	movs	r3, #0
 800d48c:	e030      	b.n	800d4f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	69da      	ldr	r2, [r3, #28]
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800d496:	697b      	ldr	r3, [r7, #20]
 800d498:	7b5b      	ldrb	r3, [r3, #13]
 800d49a:	021b      	lsls	r3, r3, #8
 800d49c:	b21b      	sxth	r3, r3
 800d49e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d4a2:	b219      	sxth	r1, r3
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	7adb      	ldrb	r3, [r3, #11]
 800d4a8:	b21b      	sxth	r3, r3
 800d4aa:	430b      	orrs	r3, r1
 800d4ac:	b21b      	sxth	r3, r3
 800d4ae:	b29b      	uxth	r3, r3
 800d4b0:	009b      	lsls	r3, r3, #2
 800d4b2:	4413      	add	r3, r2
 800d4b4:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	7b1b      	ldrb	r3, [r3, #12]
 800d4ba:	837b      	strh	r3, [r7, #26]
 800d4bc:	8b7b      	ldrh	r3, [r7, #26]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d015      	beq.n	800d4ee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	881b      	ldrh	r3, [r3, #0]
 800d4c6:	897a      	ldrh	r2, [r7, #10]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d103      	bne.n	800d4d4 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800d4d2:	e00d      	b.n	800d4f0 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800d4d4:	69fb      	ldr	r3, [r7, #28]
 800d4d6:	881b      	ldrh	r3, [r3, #0]
 800d4d8:	897a      	ldrh	r2, [r7, #10]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d306      	bcc.n	800d4ec <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800d4de:	8b7b      	ldrh	r3, [r7, #26]
 800d4e0:	3b01      	subs	r3, #1
 800d4e2:	837b      	strh	r3, [r7, #26]
 800d4e4:	69fb      	ldr	r3, [r7, #28]
 800d4e6:	3304      	adds	r3, #4
 800d4e8:	61fb      	str	r3, [r7, #28]
 800d4ea:	e7e7      	b.n	800d4bc <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800d4ec:	bf00      	nop
        }
    }
    return 0;
 800d4ee:	2300      	movs	r3, #0
}
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	3724      	adds	r7, #36	; 0x24
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fa:	4770      	bx	lr

0800d4fc <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_JetBrainsMono_Regular_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	4801      	ldr	r0, [pc, #4]	; (800d508 <__tcf_0+0xc>)
 800d502:	f7ff ff07 	bl	800d314 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d506:	bd80      	pop	{r7, pc}
 800d508:	200334b8 	.word	0x200334b8

0800d50c <_Z37getFont_JetBrainsMono_Regular_40_4bppv>:
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08c      	sub	sp, #48	; 0x30
 800d510:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 800d512:	4b1f      	ldr	r3, [pc, #124]	; (800d590 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	f3bf 8f5b 	dmb	ish
 800d51a:	b2db      	uxtb	r3, r3
 800d51c:	f003 0301 	and.w	r3, r3, #1
 800d520:	2b00      	cmp	r3, #0
 800d522:	bf0c      	ite	eq
 800d524:	2301      	moveq	r3, #1
 800d526:	2300      	movne	r3, #0
 800d528:	b2db      	uxtb	r3, r3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d02c      	beq.n	800d588 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800d52e:	4818      	ldr	r0, [pc, #96]	; (800d590 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800d530:	f01b fbbe 	bl	8028cb0 <__cxa_guard_acquire>
 800d534:	4603      	mov	r3, r0
 800d536:	2b00      	cmp	r3, #0
 800d538:	bf14      	ite	ne
 800d53a:	2301      	movne	r3, #1
 800d53c:	2300      	moveq	r3, #0
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	2b00      	cmp	r3, #0
 800d542:	d021      	beq.n	800d588 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800d544:	2300      	movs	r3, #0
 800d546:	930a      	str	r3, [sp, #40]	; 0x28
 800d548:	2300      	movs	r3, #0
 800d54a:	9309      	str	r3, [sp, #36]	; 0x24
 800d54c:	2300      	movs	r3, #0
 800d54e:	9308      	str	r3, [sp, #32]
 800d550:	233f      	movs	r3, #63	; 0x3f
 800d552:	9307      	str	r3, [sp, #28]
 800d554:	4b0f      	ldr	r3, [pc, #60]	; (800d594 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x88>)
 800d556:	9306      	str	r3, [sp, #24]
 800d558:	4b0f      	ldr	r3, [pc, #60]	; (800d598 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x8c>)
 800d55a:	9305      	str	r3, [sp, #20]
 800d55c:	2300      	movs	r3, #0
 800d55e:	9304      	str	r3, [sp, #16]
 800d560:	2300      	movs	r3, #0
 800d562:	9303      	str	r3, [sp, #12]
 800d564:	2301      	movs	r3, #1
 800d566:	9302      	str	r3, [sp, #8]
 800d568:	2304      	movs	r3, #4
 800d56a:	9301      	str	r3, [sp, #4]
 800d56c:	2307      	movs	r3, #7
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	2328      	movs	r3, #40	; 0x28
 800d572:	2242      	movs	r2, #66	; 0x42
 800d574:	4909      	ldr	r1, [pc, #36]	; (800d59c <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x90>)
 800d576:	480a      	ldr	r0, [pc, #40]	; (800d5a0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
 800d578:	f7ff ff26 	bl	800d3c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d57c:	4809      	ldr	r0, [pc, #36]	; (800d5a4 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x98>)
 800d57e:	f01b fbe1 	bl	8028d44 <atexit>
 800d582:	4803      	ldr	r0, [pc, #12]	; (800d590 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800d584:	f01b fba0 	bl	8028cc8 <__cxa_guard_release>
    return JetBrainsMono_Regular_40_4bpp;
 800d588:	4b05      	ldr	r3, [pc, #20]	; (800d5a0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	46bd      	mov	sp, r7
 800d58e:	bd80      	pop	{r7, pc}
 800d590:	200334e0 	.word	0x200334e0
 800d594:	080d9e44 	.word	0x080d9e44
 800d598:	080d9f40 	.word	0x080d9f40
 800d59c:	080d8c38 	.word	0x080d8c38
 800d5a0:	200334b8 	.word	0x200334b8
 800d5a4:	0800d4fd 	.word	0x0800d4fd

0800d5a8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_JetBrainsMono_Regular_60_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	4801      	ldr	r0, [pc, #4]	; (800d5b4 <__tcf_0+0xc>)
 800d5ae:	f7ff feb1 	bl	800d314 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	200334e4 	.word	0x200334e4

0800d5b8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>:
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b08c      	sub	sp, #48	; 0x30
 800d5bc:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800d5be:	4b1f      	ldr	r3, [pc, #124]	; (800d63c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800d5c0:	781b      	ldrb	r3, [r3, #0]
 800d5c2:	f3bf 8f5b 	dmb	ish
 800d5c6:	b2db      	uxtb	r3, r3
 800d5c8:	f003 0301 	and.w	r3, r3, #1
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	bf0c      	ite	eq
 800d5d0:	2301      	moveq	r3, #1
 800d5d2:	2300      	movne	r3, #0
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d02c      	beq.n	800d634 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800d5da:	4818      	ldr	r0, [pc, #96]	; (800d63c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800d5dc:	f01b fb68 	bl	8028cb0 <__cxa_guard_acquire>
 800d5e0:	4603      	mov	r3, r0
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	bf14      	ite	ne
 800d5e6:	2301      	movne	r3, #1
 800d5e8:	2300      	moveq	r3, #0
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d021      	beq.n	800d634 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800d5f0:	2300      	movs	r3, #0
 800d5f2:	930a      	str	r3, [sp, #40]	; 0x28
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5f8:	2300      	movs	r3, #0
 800d5fa:	9308      	str	r3, [sp, #32]
 800d5fc:	233f      	movs	r3, #63	; 0x3f
 800d5fe:	9307      	str	r3, [sp, #28]
 800d600:	4b0f      	ldr	r3, [pc, #60]	; (800d640 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x88>)
 800d602:	9306      	str	r3, [sp, #24]
 800d604:	4b0f      	ldr	r3, [pc, #60]	; (800d644 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x8c>)
 800d606:	9305      	str	r3, [sp, #20]
 800d608:	2300      	movs	r3, #0
 800d60a:	9304      	str	r3, [sp, #16]
 800d60c:	2300      	movs	r3, #0
 800d60e:	9303      	str	r3, [sp, #12]
 800d610:	2301      	movs	r3, #1
 800d612:	9302      	str	r3, [sp, #8]
 800d614:	2304      	movs	r3, #4
 800d616:	9301      	str	r3, [sp, #4]
 800d618:	230b      	movs	r3, #11
 800d61a:	9300      	str	r3, [sp, #0]
 800d61c:	233c      	movs	r3, #60	; 0x3c
 800d61e:	223f      	movs	r2, #63	; 0x3f
 800d620:	4909      	ldr	r1, [pc, #36]	; (800d648 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x90>)
 800d622:	480a      	ldr	r0, [pc, #40]	; (800d64c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
 800d624:	f7ff fed0 	bl	800d3c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d628:	4809      	ldr	r0, [pc, #36]	; (800d650 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x98>)
 800d62a:	f01b fb8b 	bl	8028d44 <atexit>
 800d62e:	4803      	ldr	r0, [pc, #12]	; (800d63c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800d630:	f01b fb4a 	bl	8028cc8 <__cxa_guard_release>
    return JetBrainsMono_Regular_60_4bpp;
 800d634:	4b05      	ldr	r3, [pc, #20]	; (800d64c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
}
 800d636:	4618      	mov	r0, r3
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}
 800d63c:	2003350c 	.word	0x2003350c
 800d640:	080d9e48 	.word	0x080d9e48
 800d644:	080d9f44 	.word	0x080d9f44
 800d648:	080d8fd4 	.word	0x080d8fd4
 800d64c:	200334e4 	.word	0x200334e4
 800d650:	0800d5a9 	.word	0x0800d5a9

0800d654 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_swisop3_300_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800d654:	b580      	push	{r7, lr}
 800d656:	af00      	add	r7, sp, #0
 800d658:	4801      	ldr	r0, [pc, #4]	; (800d660 <__tcf_0+0xc>)
 800d65a:	f7ff fe5b 	bl	800d314 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	20033510 	.word	0x20033510

0800d664 <_Z24getFont_swisop3_300_4bppv>:
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08c      	sub	sp, #48	; 0x30
 800d668:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800d66a:	4b20      	ldr	r3, [pc, #128]	; (800d6ec <_Z24getFont_swisop3_300_4bppv+0x88>)
 800d66c:	781b      	ldrb	r3, [r3, #0]
 800d66e:	f3bf 8f5b 	dmb	ish
 800d672:	b2db      	uxtb	r3, r3
 800d674:	f003 0301 	and.w	r3, r3, #1
 800d678:	2b00      	cmp	r3, #0
 800d67a:	bf0c      	ite	eq
 800d67c:	2301      	moveq	r3, #1
 800d67e:	2300      	movne	r3, #0
 800d680:	b2db      	uxtb	r3, r3
 800d682:	2b00      	cmp	r3, #0
 800d684:	d02d      	beq.n	800d6e2 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800d686:	4819      	ldr	r0, [pc, #100]	; (800d6ec <_Z24getFont_swisop3_300_4bppv+0x88>)
 800d688:	f01b fb12 	bl	8028cb0 <__cxa_guard_acquire>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	bf14      	ite	ne
 800d692:	2301      	movne	r3, #1
 800d694:	2300      	moveq	r3, #0
 800d696:	b2db      	uxtb	r3, r3
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d022      	beq.n	800d6e2 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800d69c:	2300      	movs	r3, #0
 800d69e:	930a      	str	r3, [sp, #40]	; 0x28
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	9308      	str	r3, [sp, #32]
 800d6a8:	233f      	movs	r3, #63	; 0x3f
 800d6aa:	9307      	str	r3, [sp, #28]
 800d6ac:	4b10      	ldr	r3, [pc, #64]	; (800d6f0 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 800d6ae:	9306      	str	r3, [sp, #24]
 800d6b0:	4b10      	ldr	r3, [pc, #64]	; (800d6f4 <_Z24getFont_swisop3_300_4bppv+0x90>)
 800d6b2:	9305      	str	r3, [sp, #20]
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	9304      	str	r3, [sp, #16]
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	9303      	str	r3, [sp, #12]
 800d6bc:	2301      	movs	r3, #1
 800d6be:	9302      	str	r3, [sp, #8]
 800d6c0:	2304      	movs	r3, #4
 800d6c2:	9301      	str	r3, [sp, #4]
 800d6c4:	233b      	movs	r3, #59	; 0x3b
 800d6c6:	9300      	str	r3, [sp, #0]
 800d6c8:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800d6cc:	223f      	movs	r2, #63	; 0x3f
 800d6ce:	490a      	ldr	r1, [pc, #40]	; (800d6f8 <_Z24getFont_swisop3_300_4bppv+0x94>)
 800d6d0:	480a      	ldr	r0, [pc, #40]	; (800d6fc <_Z24getFont_swisop3_300_4bppv+0x98>)
 800d6d2:	f7ff fe79 	bl	800d3c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d6d6:	480a      	ldr	r0, [pc, #40]	; (800d700 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 800d6d8:	f01b fb34 	bl	8028d44 <atexit>
 800d6dc:	4803      	ldr	r0, [pc, #12]	; (800d6ec <_Z24getFont_swisop3_300_4bppv+0x88>)
 800d6de:	f01b faf3 	bl	8028cc8 <__cxa_guard_release>
    return swisop3_300_4bpp;
 800d6e2:	4b06      	ldr	r3, [pc, #24]	; (800d6fc <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20033538 	.word	0x20033538
 800d6f0:	080d9e4c 	.word	0x080d9e4c
 800d6f4:	080d9f48 	.word	0x080d9f48
 800d6f8:	080d9348 	.word	0x080d9348
 800d6fc:	20033510 	.word	0x20033510
 800d700:	0800d655 	.word	0x0800d655

0800d704 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_swisop3_50_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800d704:	b580      	push	{r7, lr}
 800d706:	af00      	add	r7, sp, #0
 800d708:	4801      	ldr	r0, [pc, #4]	; (800d710 <__tcf_0+0xc>)
 800d70a:	f7ff fe03 	bl	800d314 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d70e:	bd80      	pop	{r7, pc}
 800d710:	2003353c 	.word	0x2003353c

0800d714 <_Z23getFont_swisop3_50_4bppv>:
{
 800d714:	b580      	push	{r7, lr}
 800d716:	b08c      	sub	sp, #48	; 0x30
 800d718:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800d71a:	4b1f      	ldr	r3, [pc, #124]	; (800d798 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	f3bf 8f5b 	dmb	ish
 800d722:	b2db      	uxtb	r3, r3
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	2b00      	cmp	r3, #0
 800d72a:	bf0c      	ite	eq
 800d72c:	2301      	moveq	r3, #1
 800d72e:	2300      	movne	r3, #0
 800d730:	b2db      	uxtb	r3, r3
 800d732:	2b00      	cmp	r3, #0
 800d734:	d02c      	beq.n	800d790 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800d736:	4818      	ldr	r0, [pc, #96]	; (800d798 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800d738:	f01b faba 	bl	8028cb0 <__cxa_guard_acquire>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	bf14      	ite	ne
 800d742:	2301      	movne	r3, #1
 800d744:	2300      	moveq	r3, #0
 800d746:	b2db      	uxtb	r3, r3
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d021      	beq.n	800d790 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800d74c:	2300      	movs	r3, #0
 800d74e:	930a      	str	r3, [sp, #40]	; 0x28
 800d750:	2300      	movs	r3, #0
 800d752:	9309      	str	r3, [sp, #36]	; 0x24
 800d754:	2300      	movs	r3, #0
 800d756:	9308      	str	r3, [sp, #32]
 800d758:	233f      	movs	r3, #63	; 0x3f
 800d75a:	9307      	str	r3, [sp, #28]
 800d75c:	4b0f      	ldr	r3, [pc, #60]	; (800d79c <_Z23getFont_swisop3_50_4bppv+0x88>)
 800d75e:	9306      	str	r3, [sp, #24]
 800d760:	4b0f      	ldr	r3, [pc, #60]	; (800d7a0 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 800d762:	9305      	str	r3, [sp, #20]
 800d764:	2300      	movs	r3, #0
 800d766:	9304      	str	r3, [sp, #16]
 800d768:	2300      	movs	r3, #0
 800d76a:	9303      	str	r3, [sp, #12]
 800d76c:	2301      	movs	r3, #1
 800d76e:	9302      	str	r3, [sp, #8]
 800d770:	2304      	movs	r3, #4
 800d772:	9301      	str	r3, [sp, #4]
 800d774:	230a      	movs	r3, #10
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	2332      	movs	r3, #50	; 0x32
 800d77a:	2241      	movs	r2, #65	; 0x41
 800d77c:	4909      	ldr	r1, [pc, #36]	; (800d7a4 <_Z23getFont_swisop3_50_4bppv+0x90>)
 800d77e:	480a      	ldr	r0, [pc, #40]	; (800d7a8 <_Z23getFont_swisop3_50_4bppv+0x94>)
 800d780:	f7ff fe22 	bl	800d3c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d784:	4809      	ldr	r0, [pc, #36]	; (800d7ac <_Z23getFont_swisop3_50_4bppv+0x98>)
 800d786:	f01b fadd 	bl	8028d44 <atexit>
 800d78a:	4803      	ldr	r0, [pc, #12]	; (800d798 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800d78c:	f01b fa9c 	bl	8028cc8 <__cxa_guard_release>
    return swisop3_50_4bpp;
 800d790:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 800d792:	4618      	mov	r0, r3
 800d794:	46bd      	mov	sp, r7
 800d796:	bd80      	pop	{r7, pc}
 800d798:	20033564 	.word	0x20033564
 800d79c:	080d9e50 	.word	0x080d9e50
 800d7a0:	080d9f4c 	.word	0x080d9f4c
 800d7a4:	080d96bc 	.word	0x080d96bc
 800d7a8:	2003353c 	.word	0x2003353c
 800d7ac:	0800d705 	.word	0x0800d705

0800d7b0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	af00      	add	r7, sp, #0
 800d7b4:	4801      	ldr	r0, [pc, #4]	; (800d7bc <__tcf_0+0xc>)
 800d7b6:	f7ff fdad 	bl	800d314 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	20033568 	.word	0x20033568

0800d7c0 <_Z23getFont_verdana_10_4bppv>:
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b08c      	sub	sp, #48	; 0x30
 800d7c4:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800d7c6:	4b1f      	ldr	r3, [pc, #124]	; (800d844 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	f3bf 8f5b 	dmb	ish
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	f003 0301 	and.w	r3, r3, #1
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	bf0c      	ite	eq
 800d7d8:	2301      	moveq	r3, #1
 800d7da:	2300      	movne	r3, #0
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d02c      	beq.n	800d83c <_Z23getFont_verdana_10_4bppv+0x7c>
 800d7e2:	4818      	ldr	r0, [pc, #96]	; (800d844 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d7e4:	f01b fa64 	bl	8028cb0 <__cxa_guard_acquire>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	bf14      	ite	ne
 800d7ee:	2301      	movne	r3, #1
 800d7f0:	2300      	moveq	r3, #0
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d021      	beq.n	800d83c <_Z23getFont_verdana_10_4bppv+0x7c>
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	930a      	str	r3, [sp, #40]	; 0x28
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	9309      	str	r3, [sp, #36]	; 0x24
 800d800:	2300      	movs	r3, #0
 800d802:	9308      	str	r3, [sp, #32]
 800d804:	233f      	movs	r3, #63	; 0x3f
 800d806:	9307      	str	r3, [sp, #28]
 800d808:	4b0f      	ldr	r3, [pc, #60]	; (800d848 <_Z23getFont_verdana_10_4bppv+0x88>)
 800d80a:	9306      	str	r3, [sp, #24]
 800d80c:	4b0f      	ldr	r3, [pc, #60]	; (800d84c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800d80e:	9305      	str	r3, [sp, #20]
 800d810:	2300      	movs	r3, #0
 800d812:	9304      	str	r3, [sp, #16]
 800d814:	2300      	movs	r3, #0
 800d816:	9303      	str	r3, [sp, #12]
 800d818:	2301      	movs	r3, #1
 800d81a:	9302      	str	r3, [sp, #8]
 800d81c:	2304      	movs	r3, #4
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	2300      	movs	r3, #0
 800d822:	9300      	str	r3, [sp, #0]
 800d824:	230a      	movs	r3, #10
 800d826:	2201      	movs	r2, #1
 800d828:	4909      	ldr	r1, [pc, #36]	; (800d850 <_Z23getFont_verdana_10_4bppv+0x90>)
 800d82a:	480a      	ldr	r0, [pc, #40]	; (800d854 <_Z23getFont_verdana_10_4bppv+0x94>)
 800d82c:	f7ff fdcc 	bl	800d3c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d830:	4809      	ldr	r0, [pc, #36]	; (800d858 <_Z23getFont_verdana_10_4bppv+0x98>)
 800d832:	f01b fa87 	bl	8028d44 <atexit>
 800d836:	4803      	ldr	r0, [pc, #12]	; (800d844 <_Z23getFont_verdana_10_4bppv+0x84>)
 800d838:	f01b fa46 	bl	8028cc8 <__cxa_guard_release>
    return verdana_10_4bpp;
 800d83c:	4b05      	ldr	r3, [pc, #20]	; (800d854 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800d83e:	4618      	mov	r0, r3
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}
 800d844:	20033590 	.word	0x20033590
 800d848:	080d9e54 	.word	0x080d9e54
 800d84c:	080d9f50 	.word	0x080d9f50
 800d850:	080d9a4c 	.word	0x080d9a4c
 800d854:	20033568 	.word	0x20033568
 800d858:	0800d7b1 	.word	0x0800d7b1

0800d85c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800d85c:	b580      	push	{r7, lr}
 800d85e:	af00      	add	r7, sp, #0
 800d860:	4801      	ldr	r0, [pc, #4]	; (800d868 <__tcf_0+0xc>)
 800d862:	f7ff fd57 	bl	800d314 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d866:	bd80      	pop	{r7, pc}
 800d868:	20033594 	.word	0x20033594

0800d86c <_Z23getFont_verdana_12_4bppv>:
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b08c      	sub	sp, #48	; 0x30
 800d870:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800d872:	4b1f      	ldr	r3, [pc, #124]	; (800d8f0 <_Z23getFont_verdana_12_4bppv+0x84>)
 800d874:	781b      	ldrb	r3, [r3, #0]
 800d876:	f3bf 8f5b 	dmb	ish
 800d87a:	b2db      	uxtb	r3, r3
 800d87c:	f003 0301 	and.w	r3, r3, #1
 800d880:	2b00      	cmp	r3, #0
 800d882:	bf0c      	ite	eq
 800d884:	2301      	moveq	r3, #1
 800d886:	2300      	movne	r3, #0
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d02c      	beq.n	800d8e8 <_Z23getFont_verdana_12_4bppv+0x7c>
 800d88e:	4818      	ldr	r0, [pc, #96]	; (800d8f0 <_Z23getFont_verdana_12_4bppv+0x84>)
 800d890:	f01b fa0e 	bl	8028cb0 <__cxa_guard_acquire>
 800d894:	4603      	mov	r3, r0
 800d896:	2b00      	cmp	r3, #0
 800d898:	bf14      	ite	ne
 800d89a:	2301      	movne	r3, #1
 800d89c:	2300      	moveq	r3, #0
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d021      	beq.n	800d8e8 <_Z23getFont_verdana_12_4bppv+0x7c>
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	9309      	str	r3, [sp, #36]	; 0x24
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	9308      	str	r3, [sp, #32]
 800d8b0:	233f      	movs	r3, #63	; 0x3f
 800d8b2:	9307      	str	r3, [sp, #28]
 800d8b4:	4b0f      	ldr	r3, [pc, #60]	; (800d8f4 <_Z23getFont_verdana_12_4bppv+0x88>)
 800d8b6:	9306      	str	r3, [sp, #24]
 800d8b8:	4b0f      	ldr	r3, [pc, #60]	; (800d8f8 <_Z23getFont_verdana_12_4bppv+0x8c>)
 800d8ba:	9305      	str	r3, [sp, #20]
 800d8bc:	2301      	movs	r3, #1
 800d8be:	9304      	str	r3, [sp, #16]
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	9303      	str	r3, [sp, #12]
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	9302      	str	r3, [sp, #8]
 800d8c8:	2304      	movs	r3, #4
 800d8ca:	9301      	str	r3, [sp, #4]
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	230c      	movs	r3, #12
 800d8d2:	2207      	movs	r2, #7
 800d8d4:	4909      	ldr	r1, [pc, #36]	; (800d8fc <_Z23getFont_verdana_12_4bppv+0x90>)
 800d8d6:	480a      	ldr	r0, [pc, #40]	; (800d900 <_Z23getFont_verdana_12_4bppv+0x94>)
 800d8d8:	f7ff fd76 	bl	800d3c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d8dc:	4809      	ldr	r0, [pc, #36]	; (800d904 <_Z23getFont_verdana_12_4bppv+0x98>)
 800d8de:	f01b fa31 	bl	8028d44 <atexit>
 800d8e2:	4803      	ldr	r0, [pc, #12]	; (800d8f0 <_Z23getFont_verdana_12_4bppv+0x84>)
 800d8e4:	f01b f9f0 	bl	8028cc8 <__cxa_guard_release>
    return verdana_12_4bpp;
 800d8e8:	4b05      	ldr	r3, [pc, #20]	; (800d900 <_Z23getFont_verdana_12_4bppv+0x94>)
}
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}
 800d8f0:	200335bc 	.word	0x200335bc
 800d8f4:	080d9e58 	.word	0x080d9e58
 800d8f8:	080d9f54 	.word	0x080d9f54
 800d8fc:	080d9a5c 	.word	0x080d9a5c
 800d900:	20033594 	.word	0x20033594
 800d904:	0800d85d 	.word	0x0800d85d

0800d908 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d908:	b580      	push	{r7, lr}
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	4801      	ldr	r0, [pc, #4]	; (800d914 <__tcf_0+0xc>)
 800d90e:	f7ff fd01 	bl	800d314 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d912:	bd80      	pop	{r7, pc}
 800d914:	200335c0 	.word	0x200335c0

0800d918 <_Z23getFont_verdana_20_4bppv>:
{
 800d918:	b580      	push	{r7, lr}
 800d91a:	b08c      	sub	sp, #48	; 0x30
 800d91c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800d91e:	4b1f      	ldr	r3, [pc, #124]	; (800d99c <_Z23getFont_verdana_20_4bppv+0x84>)
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	f3bf 8f5b 	dmb	ish
 800d926:	b2db      	uxtb	r3, r3
 800d928:	f003 0301 	and.w	r3, r3, #1
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	bf0c      	ite	eq
 800d930:	2301      	moveq	r3, #1
 800d932:	2300      	movne	r3, #0
 800d934:	b2db      	uxtb	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	d02c      	beq.n	800d994 <_Z23getFont_verdana_20_4bppv+0x7c>
 800d93a:	4818      	ldr	r0, [pc, #96]	; (800d99c <_Z23getFont_verdana_20_4bppv+0x84>)
 800d93c:	f01b f9b8 	bl	8028cb0 <__cxa_guard_acquire>
 800d940:	4603      	mov	r3, r0
 800d942:	2b00      	cmp	r3, #0
 800d944:	bf14      	ite	ne
 800d946:	2301      	movne	r3, #1
 800d948:	2300      	moveq	r3, #0
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d021      	beq.n	800d994 <_Z23getFont_verdana_20_4bppv+0x7c>
 800d950:	2300      	movs	r3, #0
 800d952:	930a      	str	r3, [sp, #40]	; 0x28
 800d954:	2300      	movs	r3, #0
 800d956:	9309      	str	r3, [sp, #36]	; 0x24
 800d958:	2300      	movs	r3, #0
 800d95a:	9308      	str	r3, [sp, #32]
 800d95c:	233f      	movs	r3, #63	; 0x3f
 800d95e:	9307      	str	r3, [sp, #28]
 800d960:	4b0f      	ldr	r3, [pc, #60]	; (800d9a0 <_Z23getFont_verdana_20_4bppv+0x88>)
 800d962:	9306      	str	r3, [sp, #24]
 800d964:	4b0f      	ldr	r3, [pc, #60]	; (800d9a4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800d966:	9305      	str	r3, [sp, #20]
 800d968:	2301      	movs	r3, #1
 800d96a:	9304      	str	r3, [sp, #16]
 800d96c:	2301      	movs	r3, #1
 800d96e:	9303      	str	r3, [sp, #12]
 800d970:	2301      	movs	r3, #1
 800d972:	9302      	str	r3, [sp, #8]
 800d974:	2304      	movs	r3, #4
 800d976:	9301      	str	r3, [sp, #4]
 800d978:	2304      	movs	r3, #4
 800d97a:	9300      	str	r3, [sp, #0]
 800d97c:	2314      	movs	r3, #20
 800d97e:	223f      	movs	r2, #63	; 0x3f
 800d980:	4909      	ldr	r1, [pc, #36]	; (800d9a8 <_Z23getFont_verdana_20_4bppv+0x90>)
 800d982:	480a      	ldr	r0, [pc, #40]	; (800d9ac <_Z23getFont_verdana_20_4bppv+0x94>)
 800d984:	f7ff fd20 	bl	800d3c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800d988:	4809      	ldr	r0, [pc, #36]	; (800d9b0 <_Z23getFont_verdana_20_4bppv+0x98>)
 800d98a:	f01b f9db 	bl	8028d44 <atexit>
 800d98e:	4803      	ldr	r0, [pc, #12]	; (800d99c <_Z23getFont_verdana_20_4bppv+0x84>)
 800d990:	f01b f99a 	bl	8028cc8 <__cxa_guard_release>
    return verdana_20_4bpp;
 800d994:	4b05      	ldr	r3, [pc, #20]	; (800d9ac <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800d996:	4618      	mov	r0, r3
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	200335e8 	.word	0x200335e8
 800d9a0:	080d9e5c 	.word	0x080d9e5c
 800d9a4:	080d9f58 	.word	0x080d9f58
 800d9a8:	080d9ac0 	.word	0x080d9ac0
 800d9ac:	200335c0 	.word	0x200335c0
 800d9b0:	0800d909 	.word	0x0800d909

0800d9b4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	af00      	add	r7, sp, #0
 800d9b8:	4801      	ldr	r0, [pc, #4]	; (800d9c0 <__tcf_0+0xc>)
 800d9ba:	f7ff fcab 	bl	800d314 <_ZN8touchgfx13GeneratedFontD1Ev>
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	200335ec 	.word	0x200335ec

0800d9c4 <_Z23getFont_verdana_40_4bppv>:
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b08c      	sub	sp, #48	; 0x30
 800d9c8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800d9ca:	4b1f      	ldr	r3, [pc, #124]	; (800da48 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	f3bf 8f5b 	dmb	ish
 800d9d2:	b2db      	uxtb	r3, r3
 800d9d4:	f003 0301 	and.w	r3, r3, #1
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	bf0c      	ite	eq
 800d9dc:	2301      	moveq	r3, #1
 800d9de:	2300      	movne	r3, #0
 800d9e0:	b2db      	uxtb	r3, r3
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d02c      	beq.n	800da40 <_Z23getFont_verdana_40_4bppv+0x7c>
 800d9e6:	4818      	ldr	r0, [pc, #96]	; (800da48 <_Z23getFont_verdana_40_4bppv+0x84>)
 800d9e8:	f01b f962 	bl	8028cb0 <__cxa_guard_acquire>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	bf14      	ite	ne
 800d9f2:	2301      	movne	r3, #1
 800d9f4:	2300      	moveq	r3, #0
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d021      	beq.n	800da40 <_Z23getFont_verdana_40_4bppv+0x7c>
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	930a      	str	r3, [sp, #40]	; 0x28
 800da00:	2300      	movs	r3, #0
 800da02:	9309      	str	r3, [sp, #36]	; 0x24
 800da04:	2300      	movs	r3, #0
 800da06:	9308      	str	r3, [sp, #32]
 800da08:	233f      	movs	r3, #63	; 0x3f
 800da0a:	9307      	str	r3, [sp, #28]
 800da0c:	4b0f      	ldr	r3, [pc, #60]	; (800da4c <_Z23getFont_verdana_40_4bppv+0x88>)
 800da0e:	9306      	str	r3, [sp, #24]
 800da10:	4b0f      	ldr	r3, [pc, #60]	; (800da50 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800da12:	9305      	str	r3, [sp, #20]
 800da14:	2300      	movs	r3, #0
 800da16:	9304      	str	r3, [sp, #16]
 800da18:	2300      	movs	r3, #0
 800da1a:	9303      	str	r3, [sp, #12]
 800da1c:	2301      	movs	r3, #1
 800da1e:	9302      	str	r3, [sp, #8]
 800da20:	2304      	movs	r3, #4
 800da22:	9301      	str	r3, [sp, #4]
 800da24:	2300      	movs	r3, #0
 800da26:	9300      	str	r3, [sp, #0]
 800da28:	2328      	movs	r3, #40	; 0x28
 800da2a:	2201      	movs	r2, #1
 800da2c:	4909      	ldr	r1, [pc, #36]	; (800da54 <_Z23getFont_verdana_40_4bppv+0x90>)
 800da2e:	480a      	ldr	r0, [pc, #40]	; (800da58 <_Z23getFont_verdana_40_4bppv+0x94>)
 800da30:	f7ff fcca 	bl	800d3c8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800da34:	4809      	ldr	r0, [pc, #36]	; (800da5c <_Z23getFont_verdana_40_4bppv+0x98>)
 800da36:	f01b f985 	bl	8028d44 <atexit>
 800da3a:	4803      	ldr	r0, [pc, #12]	; (800da48 <_Z23getFont_verdana_40_4bppv+0x84>)
 800da3c:	f01b f944 	bl	8028cc8 <__cxa_guard_release>
    return verdana_40_4bpp;
 800da40:	4b05      	ldr	r3, [pc, #20]	; (800da58 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800da42:	4618      	mov	r0, r3
 800da44:	46bd      	mov	sp, r7
 800da46:	bd80      	pop	{r7, pc}
 800da48:	20033614 	.word	0x20033614
 800da4c:	080d9f3c 	.word	0x080d9f3c
 800da50:	080d9f5c 	.word	0x080d9f5c
 800da54:	080d9e34 	.word	0x080d9e34
 800da58:	200335ec 	.word	0x200335ec
 800da5c:	0800d9b5 	.word	0x0800d9b5

0800da60 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800da60:	b480      	push	{r7}
 800da62:	b083      	sub	sp, #12
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
 800da68:	6039      	str	r1, [r7, #0]
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	4618      	mov	r0, r3
 800da6e:	370c      	adds	r7, #12
 800da70:	46bd      	mov	sp, r7
 800da72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da76:	4770      	bx	lr

0800da78 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800da78:	b480      	push	{r7}
 800da7a:	b083      	sub	sp, #12
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800da82:	bf00      	nop
 800da84:	370c      	adds	r7, #12
 800da86:	46bd      	mov	sp, r7
 800da88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8c:	4770      	bx	lr

0800da8e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800da8e:	b480      	push	{r7}
 800da90:	b083      	sub	sp, #12
 800da92:	af00      	add	r7, sp, #0
 800da94:	6078      	str	r0, [r7, #4]
 800da96:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800da98:	bf00      	nop
 800da9a:	370c      	adds	r7, #12
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800daa4:	b480      	push	{r7}
 800daa6:	b083      	sub	sp, #12
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800daae:	bf00      	nop
 800dab0:	370c      	adds	r7, #12
 800dab2:	46bd      	mov	sp, r7
 800dab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab8:	4770      	bx	lr

0800daba <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800daba:	b480      	push	{r7}
 800dabc:	b083      	sub	sp, #12
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	6078      	str	r0, [r7, #4]
 800dac2:	460b      	mov	r3, r1
 800dac4:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800dac6:	bf00      	nop
 800dac8:	370c      	adds	r7, #12
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800dad2:	b480      	push	{r7}
 800dad4:	b083      	sub	sp, #12
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
    {
    }
 800dada:	bf00      	nop
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800dae6:	b480      	push	{r7}
 800dae8:	b083      	sub	sp, #12
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
    {
    }
 800daee:	bf00      	nop
 800daf0:	370c      	adds	r7, #12
 800daf2:	46bd      	mov	sp, r7
 800daf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf8:	4770      	bx	lr
	...

0800dafc <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
    {
 800db04:	4a04      	ldr	r2, [pc, #16]	; (800db18 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	601a      	str	r2, [r3, #0]
    }
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4618      	mov	r0, r3
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr
 800db18:	0802e828 	.word	0x0802e828

0800db1c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b082      	sub	sp, #8
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
    }
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f7ff ffe9 	bl	800dafc <_ZN8touchgfx15UIEventListenerD1Ev>
 800db2a:	2104      	movs	r1, #4
 800db2c:	6878      	ldr	r0, [r7, #4]
 800db2e:	f01b f8bd 	bl	8028cac <_ZdlPvj>
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4618      	mov	r0, r3
 800db36:	3708      	adds	r7, #8
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
    {
    }
 800db44:	bf00      	nop
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800db5c:	bf00      	nop
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800db68:	b480      	push	{r7}
 800db6a:	b083      	sub	sp, #12
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	683a      	ldr	r2, [r7, #0]
 800db76:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800db7a:	6810      	ldr	r0, [r2, #0]
 800db7c:	6851      	ldr	r1, [r2, #4]
 800db7e:	c303      	stmia	r3!, {r0, r1}
    }
 800db80:	bf00      	nop
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
    {
 800db94:	4a04      	ldr	r2, [pc, #16]	; (800dba8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	601a      	str	r2, [r3, #0]
    }
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	4618      	mov	r0, r3
 800db9e:	370c      	adds	r7, #12
 800dba0:	46bd      	mov	sp, r7
 800dba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba6:	4770      	bx	lr
 800dba8:	0802e810 	.word	0x0802e810

0800dbac <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b082      	sub	sp, #8
 800dbb0:	af00      	add	r7, sp, #0
 800dbb2:	6078      	str	r0, [r7, #4]
    }
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f7ff ffe9 	bl	800db8c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800dbba:	2104      	movs	r1, #4
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f01b f875 	bl	8028cac <_ZdlPvj>
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3708      	adds	r7, #8
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}

0800dbcc <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800dbcc:	b480      	push	{r7}
 800dbce:	af00      	add	r7, sp, #0
    {
        return instance;
 800dbd0:	4b03      	ldr	r3, [pc, #12]	; (800dbe0 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800dbd2:	681b      	ldr	r3, [r3, #0]
    }
 800dbd4:	4618      	mov	r0, r3
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbdc:	4770      	bx	lr
 800dbde:	bf00      	nop
 800dbe0:	2003bee0 	.word	0x2003bee0

0800dbe4 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800dbe4:	b480      	push	{r7}
 800dbe6:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800dbe8:	4b0b      	ldr	r3, [pc, #44]	; (800dc18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d008      	beq.n	800dc06 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800dbf4:	4b08      	ldr	r3, [pc, #32]	; (800dc18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d003      	beq.n	800dc06 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800dbfe:	4b06      	ldr	r3, [pc, #24]	; (800dc18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc04:	e002      	b.n	800dc0c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800dc06:	4b04      	ldr	r3, [pc, #16]	; (800dc18 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	689b      	ldr	r3, [r3, #8]
    }
 800dc0c:	4618      	mov	r0, r3
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc14:	4770      	bx	lr
 800dc16:	bf00      	nop
 800dc18:	2003bee0 	.word	0x2003bee0

0800dc1c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800dc1c:	b480      	push	{r7}
 800dc1e:	b083      	sub	sp, #12
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800dc24:	4a07      	ldr	r2, [pc, #28]	; (800dc44 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	601a      	str	r2, [r3, #0]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	605a      	str	r2, [r3, #4]
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	721a      	strb	r2, [r3, #8]
    {
    }
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	4618      	mov	r0, r3
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	0802e7ec 	.word	0x0802e7ec

0800dc48 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
    {
 800dc50:	4a04      	ldr	r2, [pc, #16]	; (800dc64 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	601a      	str	r2, [r3, #0]
    }
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	4618      	mov	r0, r3
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr
 800dc64:	0802e7ec 	.word	0x0802e7ec

0800dc68 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b082      	sub	sp, #8
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
    }
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f7ff ffe9 	bl	800dc48 <_ZN8touchgfx10TransitionD1Ev>
 800dc76:	210c      	movs	r1, #12
 800dc78:	6878      	ldr	r0, [r7, #4]
 800dc7a:	f01b f817 	bl	8028cac <_ZdlPvj>
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	4618      	mov	r0, r3
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
    {
    }
 800dc90:	bf00      	nop
 800dc92:	370c      	adds	r7, #12
 800dc94:	46bd      	mov	sp, r7
 800dc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9a:	4770      	bx	lr

0800dc9c <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800dc9c:	b480      	push	{r7}
 800dc9e:	b083      	sub	sp, #12
 800dca0:	af00      	add	r7, sp, #0
 800dca2:	6078      	str	r0, [r7, #4]
    {
    }
 800dca4:	bf00      	nop
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800dcb0:	b480      	push	{r7}
 800dcb2:	b083      	sub	sp, #12
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
    {
    }
 800dcb8:	bf00      	nop
 800dcba:	370c      	adds	r7, #12
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr

0800dcc4 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b082      	sub	sp, #8
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800dccc:	f00c f9d0 	bl	801a070 <_ZN8touchgfx11Application11getInstanceEv>
 800dcd0:	4603      	mov	r3, r0
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f00c fd72 	bl	801a7bc <_ZN8touchgfx11Application10invalidateEv>
    }
 800dcd8:	bf00      	nop
 800dcda:	3708      	adds	r7, #8
 800dcdc:	46bd      	mov	sp, r7
 800dcde:	bd80      	pop	{r7, pc}

0800dce0 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800dce0:	b480      	push	{r7}
 800dce2:	b083      	sub	sp, #12
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	683a      	ldr	r2, [r7, #0]
 800dcee:	605a      	str	r2, [r3, #4]
    }
 800dcf0:	bf00      	nop
 800dcf2:	370c      	adds	r7, #12
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfa:	4770      	bx	lr

0800dcfc <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800dcfc:	b580      	push	{r7, lr}
 800dcfe:	b082      	sub	sp, #8
 800dd00:	af00      	add	r7, sp, #0
 800dd02:	6078      	str	r0, [r7, #4]
 800dd04:	4a05      	ldr	r2, [pc, #20]	; (800dd1c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	601a      	str	r2, [r3, #0]
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	f7ff fef5 	bl	800dafc <_ZN8touchgfx15UIEventListenerD1Ev>
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	4618      	mov	r0, r3
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	0802f87c 	.word	0x0802f87c

0800dd20 <_ZN8touchgfx11ApplicationD0Ev>:
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f7ff ffe7 	bl	800dcfc <_ZN8touchgfx11ApplicationD1Ev>
 800dd2e:	f44f 719c 	mov.w	r1, #312	; 0x138
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f01a ffba 	bl	8028cac <_ZdlPvj>
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3708      	adds	r7, #8
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
	...

0800dd44 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b082      	sub	sp, #8
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f00c f9b0 	bl	801a0b4 <_ZN8touchgfx11ApplicationC1Ev>
 800dd54:	4a09      	ldr	r2, [pc, #36]	; (800dd7c <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	601a      	str	r2, [r3, #0]
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2200      	movs	r2, #0
 800dd5e:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2200      	movs	r2, #0
 800dd66:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4a04      	ldr	r2, [pc, #16]	; (800dd80 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800dd6e:	6013      	str	r3, [r2, #0]
    }
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	4618      	mov	r0, r3
 800dd74:	3708      	adds	r7, #8
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
 800dd7a:	bf00      	nop
 800dd7c:	0802e7a0 	.word	0x0802e7a0
 800dd80:	2003bf34 	.word	0x2003bf34

0800dd84 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	f000 f804 	bl	800dd9a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800dd92:	bf00      	nop
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b082      	sub	sp, #8
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d00f      	beq.n	800ddcc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	330c      	adds	r3, #12
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	4610      	mov	r0, r2
 800ddc0:	4798      	blx	r3
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d001      	beq.n	800ddcc <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ddc8:	2301      	movs	r3, #1
 800ddca:	e000      	b.n	800ddce <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ddcc:	2300      	movs	r3, #0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d00e      	beq.n	800ddf0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	3308      	adds	r3, #8
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	4610      	mov	r0, r2
 800dde6:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2200      	movs	r2, #0
 800ddec:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800ddf0:	bf00      	nop
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	683a      	ldr	r2, [r7, #0]
 800de06:	601a      	str	r2, [r3, #0]
    }
 800de08:	bf00      	nop
 800de0a:	370c      	adds	r7, #12
 800de0c:	46bd      	mov	sp, r7
 800de0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de12:	4770      	bx	lr

0800de14 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800de14:	b580      	push	{r7, lr}
 800de16:	b082      	sub	sp, #8
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	4a05      	ldr	r2, [pc, #20]	; (800de34 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	601a      	str	r2, [r3, #0]
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	4618      	mov	r0, r3
 800de26:	f7ff ff69 	bl	800dcfc <_ZN8touchgfx11ApplicationD1Ev>
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	4618      	mov	r0, r3
 800de2e:	3708      	adds	r7, #8
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	0802e7a0 	.word	0x0802e7a0

0800de38 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800de38:	b580      	push	{r7, lr}
 800de3a:	b082      	sub	sp, #8
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6878      	ldr	r0, [r7, #4]
 800de42:	f7ff ffe7 	bl	800de14 <_ZN8touchgfx14MVPApplicationD1Ev>
 800de46:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f01a ff2e 	bl	8028cac <_ZdlPvj>
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
	...

0800de5c <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b082      	sub	sp, #8
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	4a08      	ldr	r2, [pc, #32]	; (800de88 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	601a      	str	r2, [r3, #0]
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800de70:	4618      	mov	r0, r3
 800de72:	f000 facb 	bl	800e40c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4618      	mov	r0, r3
 800de7a:	f7ff ffcb 	bl	800de14 <_ZN8touchgfx14MVPApplicationD1Ev>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	0802e73c 	.word	0x0802e73c

0800de8c <_ZN23FrontendApplicationBaseD0Ev>:
 800de8c:	b580      	push	{r7, lr}
 800de8e:	b082      	sub	sp, #8
 800de90:	af00      	add	r7, sp, #0
 800de92:	6078      	str	r0, [r7, #4]
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f7ff ffe1 	bl	800de5c <_ZN23FrontendApplicationBaseD1Ev>
 800de9a:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800de9e:	6878      	ldr	r0, [r7, #4]
 800dea0:	f01a ff04 	bl	8028cac <_ZdlPvj>
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	4618      	mov	r0, r3
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800deae:	b580      	push	{r7, lr}
 800deb0:	b082      	sub	sp, #8
 800deb2:	af00      	add	r7, sp, #0
 800deb4:	6078      	str	r0, [r7, #4]
    {
        gotoMainScreenNoTransition();
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f000 f87c 	bl	800dfb4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 800debc:	bf00      	nop
 800debe:	3708      	adds	r7, #8
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800dec4:	b480      	push	{r7}
 800dec6:	b083      	sub	sp, #12
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2201      	movs	r2, #1
 800ded0:	721a      	strb	r2, [r3, #8]
    }
 800ded2:	bf00      	nop
 800ded4:	370c      	adds	r7, #12
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr

0800dede <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800dede:	b480      	push	{r7}
 800dee0:	b083      	sub	sp, #12
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
 800dee6:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	683a      	ldr	r2, [r7, #0]
 800deec:	605a      	str	r2, [r3, #4]
    }
 800deee:	bf00      	nop
 800def0:	370c      	adds	r7, #12
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr
	...

0800defc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/lana_screen/LanaView.hpp>
#include <gui/lana_screen/LanaPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800defc:	b580      	push	{r7, lr}
 800defe:	b084      	sub	sp, #16
 800df00:	af00      	add	r7, sp, #0
 800df02:	60f8      	str	r0, [r7, #12]
 800df04:	60b9      	str	r1, [r7, #8]
 800df06:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	4618      	mov	r0, r3
 800df0c:	f7ff ff1a 	bl	800dd44 <_ZN8touchgfx14MVPApplicationC1Ev>
 800df10:	4a13      	ldr	r2, [pc, #76]	; (800df60 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	601a      	str	r2, [r3, #0]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800df1c:	4618      	mov	r0, r3
 800df1e:	f000 f89f 	bl	800e060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	687a      	ldr	r2, [r7, #4]
 800df26:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	68ba      	ldr	r2, [r7, #8]
 800df2e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800df32:	f7ff fe4b 	bl	800dbcc <_ZN8touchgfx3HAL11getInstanceEv>
 800df36:	4603      	mov	r3, r0
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	3208      	adds	r2, #8
 800df3c:	6812      	ldr	r2, [r2, #0]
 800df3e:	2100      	movs	r1, #0
 800df40:	4618      	mov	r0, r3
 800df42:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800df44:	2000      	movs	r0, #0
 800df46:	f003 f885 	bl	8011054 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800df4a:	f7ff fe4b 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 800df4e:	4603      	mov	r3, r0
 800df50:	4618      	mov	r0, r3
 800df52:	f013 fd58 	bl	8021a06 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>
}
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	4618      	mov	r0, r3
 800df5a:	3710      	adds	r7, #16
 800df5c:	46bd      	mov	sp, r7
 800df5e:	bd80      	pop	{r7, pc}
 800df60:	0802e73c 	.word	0x0802e73c

0800df64 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800df64:	b480      	push	{r7}
 800df66:	b083      	sub	sp, #12
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	4618      	mov	r0, r3
 800df72:	370c      	adds	r7, #12
 800df74:	46bd      	mov	sp, r7
 800df76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7a:	4770      	bx	lr

0800df7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b082      	sub	sp, #8
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	6039      	str	r1, [r7, #0]
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	4611      	mov	r1, r2
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7ff ffe9 	bl	800df64 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	685a      	ldr	r2, [r3, #4]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	605a      	str	r2, [r3, #4]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	683a      	ldr	r2, [r7, #0]
 800df9e:	3308      	adds	r3, #8
 800dfa0:	3208      	adds	r2, #8
 800dfa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dfa6:	e883 0003 	stmia.w	r3, {r0, r1}
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	4618      	mov	r0, r3
 800dfae:	3708      	adds	r7, #8
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	bd80      	pop	{r7, pc}

0800dfb4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800dfb4:	b590      	push	{r4, r7, lr}
 800dfb6:	b089      	sub	sp, #36	; 0x24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800dfc2:	4b10      	ldr	r3, [pc, #64]	; (800e004 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800dfc4:	61bb      	str	r3, [r7, #24]
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	61fb      	str	r3, [r7, #28]
 800dfca:	f107 0008 	add.w	r0, r7, #8
 800dfce:	f107 0318 	add.w	r3, r7, #24
 800dfd2:	cb0c      	ldmia	r3, {r2, r3}
 800dfd4:	6879      	ldr	r1, [r7, #4]
 800dfd6:	f000 f85f 	bl	800e098 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800dfda:	f107 0308 	add.w	r3, r7, #8
 800dfde:	4619      	mov	r1, r3
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f7ff ffcb 	bl	800df7c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800dfe6:	f107 0308 	add.w	r3, r7, #8
 800dfea:	4618      	mov	r0, r3
 800dfec:	f000 fa0e 	bl	800e40c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800dffc:	bf00      	nop
 800dffe:	3724      	adds	r7, #36	; 0x24
 800e000:	46bd      	mov	sp, r7
 800e002:	bd90      	pop	{r4, r7, pc}
 800e004:	0800e009 	.word	0x0800e009

0800e008 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af02      	add	r7, sp, #8
 800e00e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800e01c:	461a      	mov	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e024:	9300      	str	r3, [sp, #0]
 800e026:	4b04      	ldr	r3, [pc, #16]	; (800e038 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800e028:	4804      	ldr	r0, [pc, #16]	; (800e03c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800e02a:	f000 f867 	bl	800e0fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e02e:	bf00      	nop
 800e030:	3708      	adds	r7, #8
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
 800e036:	bf00      	nop
 800e038:	2003bf28 	.word	0x2003bf28
 800e03c:	2003bf24 	.word	0x2003bf24

0800e040 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e040:	b480      	push	{r7}
 800e042:	b083      	sub	sp, #12
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	4a04      	ldr	r2, [pc, #16]	; (800e05c <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	601a      	str	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	4618      	mov	r0, r3
 800e052:	370c      	adds	r7, #12
 800e054:	46bd      	mov	sp, r7
 800e056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05a:	4770      	bx	lr
 800e05c:	0802e810 	.word	0x0802e810

0800e060 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e060:	b580      	push	{r7, lr}
 800e062:	b082      	sub	sp, #8
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4618      	mov	r0, r3
 800e06c:	f7ff ffe8 	bl	800e040 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e070:	4a08      	ldr	r2, [pc, #32]	; (800e094 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	601a      	str	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2200      	movs	r2, #0
 800e07a:	605a      	str	r2, [r3, #4]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2200      	movs	r2, #0
 800e080:	609a      	str	r2, [r3, #8]
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2200      	movs	r2, #0
 800e086:	60da      	str	r2, [r3, #12]
    {
    }
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	4618      	mov	r0, r3
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}
 800e092:	bf00      	nop
 800e094:	0802e788 	.word	0x0802e788

0800e098 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	4639      	mov	r1, r7
 800e0a4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7ff ffc8 	bl	800e040 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e0b0:	4a08      	ldr	r2, [pc, #32]	; (800e0d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	601a      	str	r2, [r3, #0]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	68ba      	ldr	r2, [r7, #8]
 800e0ba:	605a      	str	r2, [r3, #4]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	3308      	adds	r3, #8
 800e0c0:	463a      	mov	r2, r7
 800e0c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e0c6:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	0802e788 	.word	0x0802e788

0800e0d8 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f7ff fd9a 	bl	800dc1c <_ZN8touchgfx10TransitionC1Ev>
 800e0e8:	4a03      	ldr	r2, [pc, #12]	; (800e0f8 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	601a      	str	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}
 800e0f8:	0802e718 	.word	0x0802e718

0800e0fc <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e0fc:	b590      	push	{r4, r7, lr}
 800e0fe:	b08f      	sub	sp, #60	; 0x3c
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	607a      	str	r2, [r7, #4]
 800e108:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	689a      	ldr	r2, [r3, #8]
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	689b      	ldr	r3, [r3, #8]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	3320      	adds	r3, #32
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	4610      	mov	r0, r2
 800e11a:	4798      	blx	r3
 800e11c:	4603      	mov	r3, r0
 800e11e:	f243 7263 	movw	r2, #14179	; 0x3763
 800e122:	4293      	cmp	r3, r2
 800e124:	d805      	bhi.n	800e132 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800e126:	4b7f      	ldr	r3, [pc, #508]	; (800e324 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e128:	4a7f      	ldr	r2, [pc, #508]	; (800e328 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e12a:	21a3      	movs	r1, #163	; 0xa3
 800e12c:	487f      	ldr	r0, [pc, #508]	; (800e32c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e12e:	f01a fdeb 	bl	8028d08 <__assert_func>
 800e132:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685a      	ldr	r2, [r3, #4]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	685b      	ldr	r3, [r3, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	3320      	adds	r3, #32
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	4610      	mov	r0, r2
 800e144:	4798      	blx	r3
 800e146:	4603      	mov	r3, r0
 800e148:	2b0f      	cmp	r3, #15
 800e14a:	d805      	bhi.n	800e158 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800e14c:	4b78      	ldr	r3, [pc, #480]	; (800e330 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800e14e:	4a76      	ldr	r2, [pc, #472]	; (800e328 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e150:	21a4      	movs	r1, #164	; 0xa4
 800e152:	4876      	ldr	r0, [pc, #472]	; (800e32c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e154:	f01a fdd8 	bl	8028d08 <__assert_func>
 800e158:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	68da      	ldr	r2, [r3, #12]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68db      	ldr	r3, [r3, #12]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3320      	adds	r3, #32
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	4610      	mov	r0, r2
 800e16a:	4798      	blx	r3
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b0b      	cmp	r3, #11
 800e170:	d805      	bhi.n	800e17e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800e172:	4b70      	ldr	r3, [pc, #448]	; (800e334 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800e174:	4a6c      	ldr	r2, [pc, #432]	; (800e328 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e176:	21a5      	movs	r1, #165	; 0xa5
 800e178:	486c      	ldr	r0, [pc, #432]	; (800e32c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e17a:	f01a fdc5 	bl	8028d08 <__assert_func>
 800e17e:	bf00      	nop
 800e180:	68fb      	ldr	r3, [r7, #12]
 800e182:	62bb      	str	r3, [r7, #40]	; 0x28
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	627b      	str	r3, [r7, #36]	; 0x24
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e18c:	f00b ff70 	bl	801a070 <_ZN8touchgfx11Application11getInstanceEv>
 800e190:	4603      	mov	r3, r0
 800e192:	4618      	mov	r0, r3
 800e194:	f00b ff72 	bl	801a07c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e198:	6a3b      	ldr	r3, [r7, #32]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d008      	beq.n	800e1b2 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800e1a0:	6a3b      	ldr	r3, [r7, #32]
 800e1a2:	681a      	ldr	r2, [r3, #0]
 800e1a4:	6a3b      	ldr	r3, [r7, #32]
 800e1a6:	681b      	ldr	r3, [r3, #0]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	330c      	adds	r3, #12
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4610      	mov	r0, r2
 800e1b0:	4798      	blx	r3
    if (*currentTrans)
 800e1b2:	6a3b      	ldr	r3, [r7, #32]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d007      	beq.n	800e1ca <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800e1ba:	6a3b      	ldr	r3, [r7, #32]
 800e1bc:	681a      	ldr	r2, [r3, #0]
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4610      	mov	r0, r2
 800e1c8:	4798      	blx	r3
    if (*currentScreen)
 800e1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d008      	beq.n	800e1e4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800e1d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	3314      	adds	r3, #20
 800e1de:	681b      	ldr	r3, [r3, #0]
 800e1e0:	4610      	mov	r0, r2
 800e1e2:	4798      	blx	r3
    if (*currentPresenter)
 800e1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d008      	beq.n	800e1fe <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800e1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	4610      	mov	r0, r2
 800e1fc:	4798      	blx	r3
    if (*currentScreen)
 800e1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d007      	beq.n	800e216 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800e206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e208:	681a      	ldr	r2, [r3, #0]
 800e20a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4610      	mov	r0, r2
 800e214:	4798      	blx	r3
    if (*currentPresenter)
 800e216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d008      	beq.n	800e230 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800e21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	3308      	adds	r3, #8
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	4610      	mov	r0, r2
 800e22e:	4798      	blx	r3
}
 800e230:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	2100      	movs	r1, #0
 800e238:	4618      	mov	r0, r3
 800e23a:	f000 f87d 	bl	800e338 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e23e:	4603      	mov	r3, r0
 800e240:	4619      	mov	r1, r3
 800e242:	200c      	movs	r0, #12
 800e244:	f7ff fc0c 	bl	800da60 <_ZnwjPv>
 800e248:	4604      	mov	r4, r0
 800e24a:	4620      	mov	r0, r4
 800e24c:	f7ff ff44 	bl	800e0d8 <_ZN8touchgfx12NoTransitionC1Ev>
 800e250:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	2100      	movs	r1, #0
 800e258:	4618      	mov	r0, r3
 800e25a:	f000 f880 	bl	800e35e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800e25e:	4603      	mov	r3, r0
 800e260:	4619      	mov	r1, r3
 800e262:	f243 7064 	movw	r0, #14180	; 0x3764
 800e266:	f7ff fbfb 	bl	800da60 <_ZnwjPv>
 800e26a:	4604      	mov	r4, r0
 800e26c:	4620      	mov	r0, r4
 800e26e:	f003 f943 	bl	80114f8 <_ZN8MainViewC1Ev>
 800e272:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	685b      	ldr	r3, [r3, #4]
 800e278:	2100      	movs	r1, #0
 800e27a:	4618      	mov	r0, r3
 800e27c:	f000 f882 	bl	800e384 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800e280:	4603      	mov	r3, r0
 800e282:	4619      	mov	r1, r3
 800e284:	2010      	movs	r0, #16
 800e286:	f7ff fbeb 	bl	800da60 <_ZnwjPv>
 800e28a:	4604      	mov	r4, r0
 800e28c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e28e:	4620      	mov	r0, r4
 800e290:	f003 f8da 	bl	8011448 <_ZN13MainPresenterC1ER8MainView>
 800e294:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e29a:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2a0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2a6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d002      	beq.n	800e2b4 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800e2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b0:	3304      	adds	r3, #4
 800e2b2:	e000      	b.n	800e2b6 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	4619      	mov	r1, r3
 800e2b8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e2ba:	f7ff fd9d 	bl	800ddf8 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e2be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2c0:	3304      	adds	r3, #4
 800e2c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7ff fe0a 	bl	800dede <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f000 f86b 	bl	800e3aa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 800e2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d6:	61fb      	str	r3, [r7, #28]
 800e2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2da:	61bb      	str	r3, [r7, #24]
 800e2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2de:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	330c      	adds	r3, #12
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	69f8      	ldr	r0, [r7, #28]
 800e2ea:	4798      	blx	r3
    newPresenter->activate();
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	69b8      	ldr	r0, [r7, #24]
 800e2f4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e2f6:	6979      	ldr	r1, [r7, #20]
 800e2f8:	69f8      	ldr	r0, [r7, #28]
 800e2fa:	f00d fb61 	bl	801b9c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3310      	adds	r3, #16
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	6978      	ldr	r0, [r7, #20]
 800e308:	4798      	blx	r3
    newTransition->invalidate();
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	3314      	adds	r3, #20
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	6978      	ldr	r0, [r7, #20]
 800e314:	4798      	blx	r3
}
 800e316:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	373c      	adds	r7, #60	; 0x3c
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd90      	pop	{r4, r7, pc}
 800e322:	bf00      	nop
 800e324:	0802c020 	.word	0x0802c020
 800e328:	0802c0b0 	.word	0x0802c0b0
 800e32c:	0802c1b0 	.word	0x0802c1b0
 800e330:	0802c1f4 	.word	0x0802c1f4
 800e334:	0802c298 	.word	0x0802c298

0800e338 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e338:	b580      	push	{r7, lr}
 800e33a:	b082      	sub	sp, #8
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	460b      	mov	r3, r1
 800e342:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	3324      	adds	r3, #36	; 0x24
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	887a      	ldrh	r2, [r7, #2]
 800e34e:	4611      	mov	r1, r2
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	4798      	blx	r3
 800e354:	4603      	mov	r3, r0
    }
 800e356:	4618      	mov	r0, r3
 800e358:	3708      	adds	r7, #8
 800e35a:	46bd      	mov	sp, r7
 800e35c:	bd80      	pop	{r7, pc}

0800e35e <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800e35e:	b580      	push	{r7, lr}
 800e360:	b082      	sub	sp, #8
 800e362:	af00      	add	r7, sp, #0
 800e364:	6078      	str	r0, [r7, #4]
 800e366:	460b      	mov	r3, r1
 800e368:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	3324      	adds	r3, #36	; 0x24
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	887a      	ldrh	r2, [r7, #2]
 800e374:	4611      	mov	r1, r2
 800e376:	6878      	ldr	r0, [r7, #4]
 800e378:	4798      	blx	r3
 800e37a:	4603      	mov	r3, r0
    }
 800e37c:	4618      	mov	r0, r3
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
 800e38c:	460b      	mov	r3, r1
 800e38e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	3324      	adds	r3, #36	; 0x24
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	887a      	ldrh	r2, [r7, #2]
 800e39a:	4611      	mov	r1, r2
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	4798      	blx	r3
 800e3a0:	4603      	mov	r3, r0
    }
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	3708      	adds	r7, #8
 800e3a6:	46bd      	mov	sp, r7
 800e3a8:	bd80      	pop	{r7, pc}

0800e3aa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e3aa:	b480      	push	{r7}
 800e3ac:	b083      	sub	sp, #12
 800e3ae:	af00      	add	r7, sp, #0
 800e3b0:	6078      	str	r0, [r7, #4]
 800e3b2:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e3ba:	bf00      	nop
 800e3bc:	370c      	adds	r7, #12
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr
	...

0800e3c8 <_ZN8touchgfx12NoTransitionD1Ev>:
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b082      	sub	sp, #8
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	6078      	str	r0, [r7, #4]
 800e3d0:	4a05      	ldr	r2, [pc, #20]	; (800e3e8 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	601a      	str	r2, [r3, #0]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7ff fc35 	bl	800dc48 <_ZN8touchgfx10TransitionD1Ev>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	3708      	adds	r7, #8
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	bd80      	pop	{r7, pc}
 800e3e8:	0802e718 	.word	0x0802e718

0800e3ec <_ZN8touchgfx12NoTransitionD0Ev>:
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b082      	sub	sp, #8
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f7ff ffe7 	bl	800e3c8 <_ZN8touchgfx12NoTransitionD1Ev>
 800e3fa:	210c      	movs	r1, #12
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f01a fc55 	bl	8028cac <_ZdlPvj>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	4618      	mov	r0, r3
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}

0800e40c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
 800e414:	4a05      	ldr	r2, [pc, #20]	; (800e42c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	601a      	str	r2, [r3, #0]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7ff fbb5 	bl	800db8c <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	4618      	mov	r0, r3
 800e426:	3708      	adds	r7, #8
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	0802e788 	.word	0x0802e788

0800e430 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f7ff ffe7 	bl	800e40c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e43e:	2110      	movs	r1, #16
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f01a fc33 	bl	8028cac <_ZdlPvj>
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	4618      	mov	r0, r3
 800e44a:	3708      	adds	r7, #8
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	687a      	ldr	r2, [r7, #4]
 800e45e:	68d2      	ldr	r2, [r2, #12]
 800e460:	1052      	asrs	r2, r2, #1
 800e462:	1899      	adds	r1, r3, r2
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	f003 0301 	and.w	r3, r3, #1
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d102      	bne.n	800e476 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	689b      	ldr	r3, [r3, #8]
 800e474:	e00a      	b.n	800e48c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	68d2      	ldr	r2, [r2, #12]
 800e47e:	1052      	asrs	r2, r2, #1
 800e480:	4413      	add	r3, r2
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	687a      	ldr	r2, [r7, #4]
 800e486:	6892      	ldr	r2, [r2, #8]
 800e488:	4413      	add	r3, r2
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4608      	mov	r0, r1
 800e48e:	4798      	blx	r3
    }
 800e490:	bf00      	nop
 800e492:	3708      	adds	r7, #8
 800e494:	46bd      	mov	sp, r7
 800e496:	bd80      	pop	{r7, pc}

0800e498 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	685b      	ldr	r3, [r3, #4]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d010      	beq.n	800e4ca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	689b      	ldr	r3, [r3, #8]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d107      	bne.n	800e4c0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	f003 0301 	and.w	r3, r3, #1
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d101      	bne.n	800e4c0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e4bc:	2301      	movs	r3, #1
 800e4be:	e000      	b.n	800e4c2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	d001      	beq.n	800e4ca <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e4c6:	2301      	movs	r3, #1
 800e4c8:	e000      	b.n	800e4cc <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800e4ca:	2300      	movs	r3, #0
    }
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	370c      	adds	r7, #12
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d6:	4770      	bx	lr

0800e4d8 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e4d8:	b480      	push	{r7}
 800e4da:	b083      	sub	sp, #12
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	801a      	strh	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	2200      	movs	r2, #0
 800e4ea:	805a      	strh	r2, [r3, #2]
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2200      	movs	r2, #0
 800e4f0:	809a      	strh	r2, [r3, #4]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	80da      	strh	r2, [r3, #6]
    {
    }
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	370c      	adds	r7, #12
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
	...

0800e508 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e508:	b580      	push	{r7, lr}
 800e50a:	b082      	sub	sp, #8
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800e510:	4a14      	ldr	r2, [pc, #80]	; (800e564 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	601a      	str	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	3304      	adds	r3, #4
 800e51a:	4618      	mov	r0, r3
 800e51c:	f7ff ffdc 	bl	800e4d8 <_ZN8touchgfx4RectC1Ev>
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	330c      	adds	r3, #12
 800e524:	4618      	mov	r0, r3
 800e526:	f7ff ffd7 	bl	800e4d8 <_ZN8touchgfx4RectC1Ev>
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	2200      	movs	r2, #0
 800e52e:	615a      	str	r2, [r3, #20]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2200      	movs	r2, #0
 800e534:	619a      	str	r2, [r3, #24]
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	2200      	movs	r2, #0
 800e53a:	61da      	str	r2, [r3, #28]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2200      	movs	r2, #0
 800e540:	841a      	strh	r2, [r3, #32]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	2200      	movs	r2, #0
 800e546:	845a      	strh	r2, [r3, #34]	; 0x22
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2200      	movs	r2, #0
 800e54c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2201      	movs	r2, #1
 800e554:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	4618      	mov	r0, r3
 800e55c:	3708      	adds	r7, #8
 800e55e:	46bd      	mov	sp, r7
 800e560:	bd80      	pop	{r7, pc}
 800e562:	bf00      	nop
 800e564:	0802f8c8 	.word	0x0802f8c8

0800e568 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e568:	b480      	push	{r7}
 800e56a:	b083      	sub	sp, #12
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
    {
 800e570:	4a04      	ldr	r2, [pc, #16]	; (800e584 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	601a      	str	r2, [r3, #0]
    }
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4618      	mov	r0, r3
 800e57a:	370c      	adds	r7, #12
 800e57c:	46bd      	mov	sp, r7
 800e57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e582:	4770      	bx	lr
 800e584:	0802f8c8 	.word	0x0802f8c8

0800e588 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
    }
 800e590:	6878      	ldr	r0, [r7, #4]
 800e592:	f7ff ffe9 	bl	800e568 <_ZN8touchgfx8DrawableD1Ev>
 800e596:	2128      	movs	r1, #40	; 0x28
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f01a fb87 	bl	8028cac <_ZdlPvj>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800e5a8:	b480      	push	{r7}
 800e5aa:	b083      	sub	sp, #12
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	6078      	str	r0, [r7, #4]
 800e5b0:	460b      	mov	r3, r1
 800e5b2:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	887a      	ldrh	r2, [r7, #2]
 800e5b8:	809a      	strh	r2, [r3, #4]
    }
 800e5ba:	bf00      	nop
 800e5bc:	370c      	adds	r7, #12
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c4:	4770      	bx	lr

0800e5c6 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800e5c6:	b480      	push	{r7}
 800e5c8:	b083      	sub	sp, #12
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	887a      	ldrh	r2, [r7, #2]
 800e5d6:	80da      	strh	r2, [r3, #6]
    }
 800e5d8:	bf00      	nop
 800e5da:	370c      	adds	r7, #12
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr

0800e5e4 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800e5e4:	b480      	push	{r7}
 800e5e6:	b083      	sub	sp, #12
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	460b      	mov	r3, r1
 800e5ee:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	887a      	ldrh	r2, [r7, #2]
 800e5f4:	811a      	strh	r2, [r3, #8]
    }
 800e5f6:	bf00      	nop
 800e5f8:	370c      	adds	r7, #12
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e600:	4770      	bx	lr

0800e602 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800e602:	b480      	push	{r7}
 800e604:	b083      	sub	sp, #12
 800e606:	af00      	add	r7, sp, #0
 800e608:	6078      	str	r0, [r7, #4]
 800e60a:	460b      	mov	r3, r1
 800e60c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	887a      	ldrh	r2, [r7, #2]
 800e612:	815a      	strh	r2, [r3, #10]
    }
 800e614:	bf00      	nop
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
    {
    }
 800e628:	bf00      	nop
 800e62a:	370c      	adds	r7, #12
 800e62c:	46bd      	mov	sp, r7
 800e62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e632:	4770      	bx	lr

0800e634 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e634:	b480      	push	{r7}
 800e636:	b083      	sub	sp, #12
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e63e:	bf00      	nop
 800e640:	370c      	adds	r7, #12
 800e642:	46bd      	mov	sp, r7
 800e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e648:	4770      	bx	lr

0800e64a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e64a:	b480      	push	{r7}
 800e64c:	b083      	sub	sp, #12
 800e64e:	af00      	add	r7, sp, #0
 800e650:	6078      	str	r0, [r7, #4]
 800e652:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e654:	bf00      	nop
 800e656:	370c      	adds	r7, #12
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr

0800e660 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e660:	b480      	push	{r7}
 800e662:	b083      	sub	sp, #12
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
 800e668:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e66a:	bf00      	nop
 800e66c:	370c      	adds	r7, #12
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr

0800e676 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800e676:	b480      	push	{r7}
 800e678:	b083      	sub	sp, #12
 800e67a:	af00      	add	r7, sp, #0
 800e67c:	6078      	str	r0, [r7, #4]
    {
    }
 800e67e:	bf00      	nop
 800e680:	370c      	adds	r7, #12
 800e682:	46bd      	mov	sp, r7
 800e684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e688:	4770      	bx	lr

0800e68a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b082      	sub	sp, #8
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
 800e692:	460b      	mov	r3, r1
 800e694:	807b      	strh	r3, [r7, #2]
 800e696:	4613      	mov	r3, r2
 800e698:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	3354      	adds	r3, #84	; 0x54
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	8879      	ldrh	r1, [r7, #2]
 800e6a4:	687a      	ldr	r2, [r7, #4]
 800e6a6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e6aa:	b292      	uxth	r2, r2
 800e6ac:	1a8a      	subs	r2, r1, r2
 800e6ae:	b292      	uxth	r2, r2
 800e6b0:	b210      	sxth	r0, r2
 800e6b2:	8839      	ldrh	r1, [r7, #0]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e6ba:	b292      	uxth	r2, r2
 800e6bc:	1a8a      	subs	r2, r1, r2
 800e6be:	b292      	uxth	r2, r2
 800e6c0:	b212      	sxth	r2, r2
 800e6c2:	4601      	mov	r1, r0
 800e6c4:	6878      	ldr	r0, [r7, #4]
 800e6c6:	4798      	blx	r3
    }
 800e6c8:	bf00      	nop
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7ff ff14 	bl	800e508 <_ZN8touchgfx8DrawableC1Ev>
 800e6e0:	4a05      	ldr	r2, [pc, #20]	; (800e6f8 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	601a      	str	r2, [r3, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3708      	adds	r7, #8
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	bd80      	pop	{r7, pc}
 800e6f6:	bf00      	nop
 800e6f8:	0802f1f0 	.word	0x0802f1f0

0800e6fc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800e6fc:	b480      	push	{r7}
 800e6fe:	b083      	sub	sp, #12
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800e708:	4618      	mov	r0, r3
 800e70a:	370c      	adds	r7, #12
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr

0800e714 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800e714:	b580      	push	{r7, lr}
 800e716:	b082      	sub	sp, #8
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	4a05      	ldr	r2, [pc, #20]	; (800e734 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	601a      	str	r2, [r3, #0]
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	4618      	mov	r0, r3
 800e726:	f7ff ff1f 	bl	800e568 <_ZN8touchgfx8DrawableD1Ev>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4618      	mov	r0, r3
 800e72e:	3708      	adds	r7, #8
 800e730:	46bd      	mov	sp, r7
 800e732:	bd80      	pop	{r7, pc}
 800e734:	0802f1f0 	.word	0x0802f1f0

0800e738 <_ZN8touchgfx9ContainerD0Ev>:
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f7ff ffe7 	bl	800e714 <_ZN8touchgfx9ContainerD1Ev>
 800e746:	212c      	movs	r1, #44	; 0x2c
 800e748:	6878      	ldr	r0, [r7, #4]
 800e74a:	f01a faaf 	bl	8028cac <_ZdlPvj>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4618      	mov	r0, r3
 800e752:	3708      	adds	r7, #8
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}

0800e758 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800e758:	b480      	push	{r7}
 800e75a:	b083      	sub	sp, #12
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
        : color(col)
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	683a      	ldr	r2, [r7, #0]
 800e766:	601a      	str	r2, [r3, #0]
    }
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	4618      	mov	r0, r3
 800e76c:	370c      	adds	r7, #12
 800e76e:	46bd      	mov	sp, r7
 800e770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e774:	4770      	bx	lr

0800e776 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800e776:	b480      	push	{r7}
 800e778:	b085      	sub	sp, #20
 800e77a:	af00      	add	r7, sp, #0
 800e77c:	60f8      	str	r0, [r7, #12]
 800e77e:	4608      	mov	r0, r1
 800e780:	4611      	mov	r1, r2
 800e782:	461a      	mov	r2, r3
 800e784:	4603      	mov	r3, r0
 800e786:	817b      	strh	r3, [r7, #10]
 800e788:	460b      	mov	r3, r1
 800e78a:	813b      	strh	r3, [r7, #8]
 800e78c:	4613      	mov	r3, r2
 800e78e:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	897a      	ldrh	r2, [r7, #10]
 800e794:	801a      	strh	r2, [r3, #0]
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	893a      	ldrh	r2, [r7, #8]
 800e79a:	805a      	strh	r2, [r3, #2]
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	88fa      	ldrh	r2, [r7, #6]
 800e7a0:	809a      	strh	r2, [r3, #4]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	8b3a      	ldrh	r2, [r7, #24]
 800e7a6:	80da      	strh	r2, [r3, #6]
    {
    }
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3714      	adds	r7, #20
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
    virtual void invalidateContent() const
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b082      	sub	sp, #8
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
        if (visible)
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d005      	beq.n	800e7d4 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
            invalidate();
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	3314      	adds	r3, #20
 800e7ce:	681b      	ldr	r3, [r3, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	4798      	blx	r3
    }
 800e7d4:	bf00      	nop
 800e7d6:	3708      	adds	r7, #8
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
        return 0;
 800e7e4:	2300      	movs	r3, #0
    }
 800e7e6:	4618      	mov	r0, r3
 800e7e8:	370c      	adds	r7, #12
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e7f2:	b580      	push	{r7, lr}
 800e7f4:	b084      	sub	sp, #16
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	60f8      	str	r0, [r7, #12]
 800e7fa:	4608      	mov	r0, r1
 800e7fc:	4611      	mov	r1, r2
 800e7fe:	461a      	mov	r2, r3
 800e800:	4603      	mov	r3, r0
 800e802:	817b      	strh	r3, [r7, #10]
 800e804:	460b      	mov	r3, r1
 800e806:	813b      	strh	r3, [r7, #8]
 800e808:	4613      	mov	r3, r2
 800e80a:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 800e80c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e810:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e814:	4619      	mov	r1, r3
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f000 f80c 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800e81c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e824:	4619      	mov	r1, r3
 800e826:	68f8      	ldr	r0, [r7, #12]
 800e828:	f000 f822 	bl	800e870 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800e82c:	bf00      	nop
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	460b      	mov	r3, r1
 800e83e:	807b      	strh	r3, [r7, #2]
 800e840:	4613      	mov	r3, r2
 800e842:	803b      	strh	r3, [r7, #0]
        setX(x);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	3330      	adds	r3, #48	; 0x30
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e850:	4611      	mov	r1, r2
 800e852:	6878      	ldr	r0, [r7, #4]
 800e854:	4798      	blx	r3
        setY(y);
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	3334      	adds	r3, #52	; 0x34
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e862:	4611      	mov	r1, r2
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	4798      	blx	r3
    }
 800e868:	bf00      	nop
 800e86a:	3708      	adds	r7, #8
 800e86c:	46bd      	mov	sp, r7
 800e86e:	bd80      	pop	{r7, pc}

0800e870 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 800e870:	b580      	push	{r7, lr}
 800e872:	b082      	sub	sp, #8
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
 800e878:	460b      	mov	r3, r1
 800e87a:	807b      	strh	r3, [r7, #2]
 800e87c:	4613      	mov	r3, r2
 800e87e:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	3338      	adds	r3, #56	; 0x38
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e88c:	4611      	mov	r1, r2
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	4798      	blx	r3
        setHeight(height);
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	333c      	adds	r3, #60	; 0x3c
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e89e:	4611      	mov	r1, r2
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	4798      	blx	r3
    }
 800e8a4:	bf00      	nop
 800e8a6:	3708      	adds	r7, #8
 800e8a8:	46bd      	mov	sp, r7
 800e8aa:	bd80      	pop	{r7, pc}

0800e8ac <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 800e8ac:	b480      	push	{r7}
 800e8ae:	b083      	sub	sp, #12
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
        return visible;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	370c      	adds	r7, #12
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8c4:	4770      	bx	lr

0800e8c6 <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 800e8c6:	b480      	push	{r7}
 800e8c8:	b083      	sub	sp, #12
 800e8ca:	af00      	add	r7, sp, #0
 800e8cc:	6078      	str	r0, [r7, #4]
        return touchable;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	370c      	adds	r7, #12
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr

0800e8e0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8ee:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8f6:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e8fe:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800e900:	bf00      	nop
 800e902:	370c      	adds	r7, #12
 800e904:	46bd      	mov	sp, r7
 800e906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90a:	4770      	bx	lr

0800e90c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	60f8      	str	r0, [r7, #12]
 800e914:	60b9      	str	r1, [r7, #8]
 800e916:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f7ff ffe1 	bl	800e8e0 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	68fa      	ldr	r2, [r7, #12]
 800e92a:	601a      	str	r2, [r3, #0]
    }
 800e92c:	bf00      	nop
 800e92e:	3710      	adds	r7, #16
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800e934:	b580      	push	{r7, lr}
 800e936:	b084      	sub	sp, #16
 800e938:	af00      	add	r7, sp, #0
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	607b      	str	r3, [r7, #4]
 800e93e:	460b      	mov	r3, r1
 800e940:	817b      	strh	r3, [r7, #10]
 800e942:	4613      	mov	r3, r2
 800e944:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	4618      	mov	r0, r3
 800e94a:	f7ff ffaf 	bl	800e8ac <_ZNK8touchgfx8Drawable9isVisibleEv>
 800e94e:	4603      	mov	r3, r0
 800e950:	2b00      	cmp	r3, #0
 800e952:	d008      	beq.n	800e966 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	4618      	mov	r0, r3
 800e958:	f7ff ffb5 	bl	800e8c6 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d001      	beq.n	800e966 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800e962:	2301      	movs	r3, #1
 800e964:	e000      	b.n	800e968 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800e966:	2300      	movs	r3, #0
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d002      	beq.n	800e972 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	601a      	str	r2, [r3, #0]
        }
    }
 800e972:	bf00      	nop
 800e974:	3710      	adds	r7, #16
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}
	...

0800e97c <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b082      	sub	sp, #8
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	4618      	mov	r0, r3
 800e988:	f7ff fdbe 	bl	800e508 <_ZN8touchgfx8DrawableC1Ev>
 800e98c:	4a03      	ldr	r2, [pc, #12]	; (800e99c <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	601a      	str	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	4618      	mov	r0, r3
 800e996:	3708      	adds	r7, #8
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd80      	pop	{r7, pc}
 800e99c:	0802e974 	.word	0x0802e974

0800e9a0 <_ZN8touchgfx6WidgetD1Ev>:
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	4a05      	ldr	r2, [pc, #20]	; (800e9c0 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	601a      	str	r2, [r3, #0]
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	f7ff fdd9 	bl	800e568 <_ZN8touchgfx8DrawableD1Ev>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	3708      	adds	r7, #8
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	bd80      	pop	{r7, pc}
 800e9c0:	0802e974 	.word	0x0802e974

0800e9c4 <_ZN8touchgfx6WidgetD0Ev>:
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	b082      	sub	sp, #8
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7ff ffe7 	bl	800e9a0 <_ZN8touchgfx6WidgetD1Ev>
 800e9d2:	2128      	movs	r1, #40	; 0x28
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f01a f969 	bl	8028cac <_ZdlPvj>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	3708      	adds	r7, #8
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	bd80      	pop	{r7, pc}

0800e9e4 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	2326      	movs	r3, #38	; 0x26
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	2100      	movs	r1, #0
 800e9f6:	f01a fa13 	bl	8028e20 <memset>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7ff ffbd 	bl	800e97c <_ZN8touchgfx6WidgetC1Ev>
 800ea02:	4a09      	ldr	r2, [pc, #36]	; (800ea28 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	601a      	str	r2, [r3, #0]
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	22ff      	movs	r2, #255	; 0xff
 800ea0c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	3328      	adds	r3, #40	; 0x28
 800ea14:	2100      	movs	r1, #0
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7ff fe9e 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	3708      	adds	r7, #8
 800ea22:	46bd      	mov	sp, r7
 800ea24:	bd80      	pop	{r7, pc}
 800ea26:	bf00      	nop
 800ea28:	0802f6b4 	.word	0x0802f6b4

0800ea2c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800ea2c:	b480      	push	{r7}
 800ea2e:	b083      	sub	sp, #12
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	683a      	ldr	r2, [r7, #0]
 800ea3a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ea3c:	bf00      	nop
 800ea3e:	370c      	adds	r7, #12
 800ea40:	46bd      	mov	sp, r7
 800ea42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea46:	4770      	bx	lr

0800ea48 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800ea48:	b580      	push	{r7, lr}
 800ea4a:	b082      	sub	sp, #8
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
 800ea50:	4a05      	ldr	r2, [pc, #20]	; (800ea68 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	601a      	str	r2, [r3, #0]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7ff ffa1 	bl	800e9a0 <_ZN8touchgfx6WidgetD1Ev>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	4618      	mov	r0, r3
 800ea62:	3708      	adds	r7, #8
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd80      	pop	{r7, pc}
 800ea68:	0802f6b4 	.word	0x0802f6b4

0800ea6c <_ZN8touchgfx3BoxD0Ev>:
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7ff ffe7 	bl	800ea48 <_ZN8touchgfx3BoxD1Ev>
 800ea7a:	212c      	movs	r1, #44	; 0x2c
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f01a f915 	bl	8028cac <_ZdlPvj>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4618      	mov	r0, r3
 800ea86:	3708      	adds	r7, #8
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800ea8c:	b580      	push	{r7, lr}
 800ea8e:	b082      	sub	sp, #8
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7ff ffa4 	bl	800e9e4 <_ZN8touchgfx3BoxC1Ev>
 800ea9c:	4a08      	ldr	r2, [pc, #32]	; (800eac0 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	601a      	str	r2, [r3, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	332c      	adds	r3, #44	; 0x2c
 800eaa6:	2100      	movs	r1, #0
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7ff fe55 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2200      	movs	r2, #0
 800eab2:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	4618      	mov	r0, r3
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
 800eabe:	bf00      	nop
 800eac0:	0802f7ac 	.word	0x0802f7ac

0800eac4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	683a      	ldr	r2, [r7, #0]
 800ead2:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800ead4:	bf00      	nop
 800ead6:	370c      	adds	r7, #12
 800ead8:	46bd      	mov	sp, r7
 800eada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eade:	4770      	bx	lr

0800eae0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800eae0:	b480      	push	{r7}
 800eae2:	b083      	sub	sp, #12
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	460b      	mov	r3, r1
 800eaea:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	887a      	ldrh	r2, [r7, #2]
 800eaf0:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800eaf2:	bf00      	nop
 800eaf4:	370c      	adds	r7, #12
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr
	...

0800eb00 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800eb00:	b480      	push	{r7}
 800eb02:	b083      	sub	sp, #12
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
 800eb08:	460b      	mov	r3, r1
 800eb0a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800eb0c:	4a06      	ldr	r2, [pc, #24]	; (800eb28 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	601a      	str	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	887a      	ldrh	r2, [r7, #2]
 800eb16:	809a      	strh	r2, [r3, #4]
    }
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	370c      	adds	r7, #12
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb24:	4770      	bx	lr
 800eb26:	bf00      	nop
 800eb28:	0802e6b0 	.word	0x0802e6b0

0800eb2c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800eb2c:	b580      	push	{r7, lr}
 800eb2e:	b082      	sub	sp, #8
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	4618      	mov	r0, r3
 800eb38:	2326      	movs	r3, #38	; 0x26
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	f01a f96f 	bl	8028e20 <memset>
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	4618      	mov	r0, r3
 800eb46:	f7ff ff19 	bl	800e97c <_ZN8touchgfx6WidgetC1Ev>
 800eb4a:	4a16      	ldr	r2, [pc, #88]	; (800eba4 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	601a      	str	r2, [r3, #0]
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	3328      	adds	r3, #40	; 0x28
 800eb54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7ff ffd1 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	3330      	adds	r3, #48	; 0x30
 800eb62:	2100      	movs	r1, #0
 800eb64:	4618      	mov	r0, r3
 800eb66:	f7ff fdf7 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2200      	movs	r2, #0
 800eb6e:	869a      	strh	r2, [r3, #52]	; 0x34
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	22ff      	movs	r2, #255	; 0xff
 800eb74:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	2200      	movs	r2, #0
 800eb7c:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	2200      	movs	r2, #0
 800eb8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	333c      	adds	r3, #60	; 0x3c
 800eb94:	4618      	mov	r0, r3
 800eb96:	f000 f8f2 	bl	800ed7e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	0802f624 	.word	0x0802f624

0800eba8 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800eba8:	b590      	push	{r4, r7, lr}
 800ebaa:	b087      	sub	sp, #28
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6178      	str	r0, [r7, #20]
 800ebb0:	460b      	mov	r3, r1
 800ebb2:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ebba:	4611      	mov	r1, r2
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	f7ff fd11 	bl	800e5e4 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	3384      	adds	r3, #132	; 0x84
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	697c      	ldr	r4, [r7, #20]
 800ebcc:	463a      	mov	r2, r7
 800ebce:	6979      	ldr	r1, [r7, #20]
 800ebd0:	4610      	mov	r0, r2
 800ebd2:	4798      	blx	r3
 800ebd4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ebd8:	463a      	mov	r2, r7
 800ebda:	ca07      	ldmia	r2, {r0, r1, r2}
 800ebdc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ebe0:	bf00      	nop
 800ebe2:	371c      	adds	r7, #28
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd90      	pop	{r4, r7, pc}

0800ebe8 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800ebe8:	b590      	push	{r4, r7, lr}
 800ebea:	b087      	sub	sp, #28
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6178      	str	r0, [r7, #20]
 800ebf0:	460b      	mov	r3, r1
 800ebf2:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800ebf4:	697b      	ldr	r3, [r7, #20]
 800ebf6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff fd00 	bl	800e602 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	3384      	adds	r3, #132	; 0x84
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	697c      	ldr	r4, [r7, #20]
 800ec0c:	463a      	mov	r2, r7
 800ec0e:	6979      	ldr	r1, [r7, #20]
 800ec10:	4610      	mov	r0, r2
 800ec12:	4798      	blx	r3
 800ec14:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ec18:	463a      	mov	r2, r7
 800ec1a:	ca07      	ldmia	r2, {r0, r1, r2}
 800ec1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ec20:	bf00      	nop
 800ec22:	371c      	adds	r7, #28
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd90      	pop	{r4, r7, pc}

0800ec28 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
 800ec2e:	6078      	str	r0, [r7, #4]
 800ec30:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f7ff fc50 	bl	800e4d8 <_ZN8touchgfx4RectC1Ev>
    }
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800ec40:	b480      	push	{r7}
 800ec42:	b083      	sub	sp, #12
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
 800ec48:	460b      	mov	r3, r1
 800ec4a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	78fa      	ldrb	r2, [r7, #3]
 800ec50:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800ec54:	bf00      	nop
 800ec56:	370c      	adds	r7, #12
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr

0800ec60 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800ec60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec62:	b085      	sub	sp, #20
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	6078      	str	r0, [r7, #4]
 800ec68:	460b      	mov	r3, r1
 800ec6a:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800ec6c:	687e      	ldr	r6, [r7, #4]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	3334      	adds	r3, #52	; 0x34
 800ec74:	681c      	ldr	r4, [r3, #0]
 800ec76:	887d      	ldrh	r5, [r7, #2]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f000 f869 	bl	800ed50 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800ec82:	4b1d      	ldr	r3, [pc, #116]	; (800ecf8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d105      	bne.n	800ec96 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800ec8a:	4b1c      	ldr	r3, [pc, #112]	; (800ecfc <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800ec8c:	4a1c      	ldr	r2, [pc, #112]	; (800ed00 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800ec8e:	216c      	movs	r1, #108	; 0x6c
 800ec90:	481c      	ldr	r0, [pc, #112]	; (800ed04 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800ec92:	f01a f839 	bl	8028d08 <__assert_func>
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	889a      	ldrh	r2, [r3, #4]
 800ec9e:	4b1a      	ldr	r3, [pc, #104]	; (800ed08 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	bf34      	ite	cc
 800eca6:	2301      	movcc	r3, #1
 800eca8:	2300      	movcs	r3, #0
 800ecaa:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d105      	bne.n	800ecbc <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800ecb0:	4b16      	ldr	r3, [pc, #88]	; (800ed0c <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800ecb2:	4a13      	ldr	r2, [pc, #76]	; (800ed00 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800ecb4:	216d      	movs	r1, #109	; 0x6d
 800ecb6:	4813      	ldr	r0, [pc, #76]	; (800ed04 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800ecb8:	f01a f826 	bl	8028d08 <__assert_func>
 800ecbc:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800ecbe:	4b14      	ldr	r3, [pc, #80]	; (800ed10 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 800ecc0:	681a      	ldr	r2, [r3, #0]
 800ecc2:	4b0d      	ldr	r3, [pc, #52]	; (800ecf8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800ecc4:	6819      	ldr	r1, [r3, #0]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	889b      	ldrh	r3, [r3, #4]
 800ecca:	005b      	lsls	r3, r3, #1
 800eccc:	440b      	add	r3, r1
 800ecce:	781b      	ldrb	r3, [r3, #0]
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	4413      	add	r3, r2
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	681a      	ldr	r2, [r3, #0]
 800ecd8:	322c      	adds	r2, #44	; 0x2c
 800ecda:	6812      	ldr	r2, [r2, #0]
 800ecdc:	4618      	mov	r0, r3
 800ecde:	4790      	blx	r2
 800ece0:	4603      	mov	r3, r0
 800ece2:	1aeb      	subs	r3, r5, r3
 800ece4:	b29b      	uxth	r3, r3
 800ece6:	b21b      	sxth	r3, r3
 800ece8:	4619      	mov	r1, r3
 800ecea:	4630      	mov	r0, r6
 800ecec:	47a0      	blx	r4
    }
 800ecee:	bf00      	nop
 800ecf0:	3714      	adds	r7, #20
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecf6:	bf00      	nop
 800ecf8:	2003bf38 	.word	0x2003bf38
 800ecfc:	0802c33c 	.word	0x0802c33c
 800ed00:	0802c380 	.word	0x0802c380
 800ed04:	0802c3bc 	.word	0x0802c3bc
 800ed08:	2003bf3c 	.word	0x2003bf3c
 800ed0c:	0802c400 	.word	0x0802c400
 800ed10:	2003bf40 	.word	0x2003bf40

0800ed14 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	460b      	mov	r3, r1
 800ed1e:	807b      	strh	r3, [r7, #2]
 800ed20:	4613      	mov	r3, r2
 800ed22:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800ed24:	687a      	ldr	r2, [r7, #4]
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	3330      	adds	r3, #48	; 0x30
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800ed32:	4610      	mov	r0, r2
 800ed34:	4798      	blx	r3
        setBaselineY(baselineY);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	3364      	adds	r3, #100	; 0x64
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ed42:	4611      	mov	r1, r2
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	4798      	blx	r3
    }
 800ed48:	bf00      	nop
 800ed4a:	3708      	adds	r7, #8
 800ed4c:	46bd      	mov	sp, r7
 800ed4e:	bd80      	pop	{r7, pc}

0800ed50 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800ed50:	b480      	push	{r7}
 800ed52:	b083      	sub	sp, #12
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	3328      	adds	r3, #40	; 0x28
    }
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	370c      	adds	r7, #12
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ed70:	2300      	movs	r3, #0
    }
 800ed72:	4618      	mov	r0, r3
 800ed74:	370c      	adds	r7, #12
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr

0800ed7e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800ed7e:	b580      	push	{r7, lr}
 800ed80:	b084      	sub	sp, #16
 800ed82:	af02      	add	r7, sp, #8
 800ed84:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800ed86:	6878      	ldr	r0, [r7, #4]
 800ed88:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8c:	9300      	str	r3, [sp, #0]
 800ed8e:	f04f 33ff 	mov.w	r3, #4294967295
 800ed92:	2200      	movs	r2, #0
 800ed94:	2100      	movs	r1, #0
 800ed96:	f7ff fcee 	bl	800e776 <_ZN8touchgfx4RectC1Essss>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	609a      	str	r2, [r3, #8]
        {
        }
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
	...

0800edac <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	4a08      	ldr	r2, [pc, #32]	; (800edd8 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	3328      	adds	r3, #40	; 0x28
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe faca 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7ff fdea 	bl	800e9a0 <_ZN8touchgfx6WidgetD1Ev>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4618      	mov	r0, r3
 800edd0:	3708      	adds	r7, #8
 800edd2:	46bd      	mov	sp, r7
 800edd4:	bd80      	pop	{r7, pc}
 800edd6:	bf00      	nop
 800edd8:	0802f624 	.word	0x0802f624

0800eddc <_ZN8touchgfx8TextAreaD0Ev>:
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7ff ffe1 	bl	800edac <_ZN8touchgfx8TextAreaD1Ev>
 800edea:	2148      	movs	r1, #72	; 0x48
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f019 ff5d 	bl	8028cac <_ZdlPvj>
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	4618      	mov	r0, r3
 800edf6:	3708      	adds	r7, #8
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
        : TextArea()
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fe90 	bl	800eb2c <_ZN8touchgfx8TextAreaC1Ev>
 800ee0c:	4a03      	ldr	r2, [pc, #12]	; (800ee1c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	601a      	str	r2, [r3, #0]
    {
    }
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4618      	mov	r0, r3
 800ee16:	3708      	adds	r7, #8
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	0802f71c 	.word	0x0802f71c

0800ee20 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const;

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f7ff ffa7 	bl	800ed7e <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800ee30:	6878      	ldr	r0, [r7, #4]
 800ee32:	3708      	adds	r7, #8
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
 800ee40:	4a05      	ldr	r2, [pc, #20]	; (800ee58 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	601a      	str	r2, [r3, #0]
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f7ff ffaf 	bl	800edac <_ZN8touchgfx8TextAreaD1Ev>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	4618      	mov	r0, r3
 800ee52:	3708      	adds	r7, #8
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}
 800ee58:	0802f71c 	.word	0x0802f71c

0800ee5c <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800ee5c:	b580      	push	{r7, lr}
 800ee5e:	b082      	sub	sp, #8
 800ee60:	af00      	add	r7, sp, #0
 800ee62:	6078      	str	r0, [r7, #4]
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7ff ffe7 	bl	800ee38 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800ee6a:	2148      	movs	r1, #72	; 0x48
 800ee6c:	6878      	ldr	r0, [r7, #4]
 800ee6e:	f019 ff1d 	bl	8028cac <_ZdlPvj>
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	4618      	mov	r0, r3
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}

0800ee7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b082      	sub	sp, #8
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	4618      	mov	r0, r3
 800ee88:	f7ff ffb8 	bl	800edfc <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800ee8c:	4a05      	ldr	r2, [pc, #20]	; (800eea4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3708      	adds	r7, #8
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	0802e8e4 	.word	0x0802e8e4

0800eea8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800eea8:	b480      	push	{r7}
 800eeaa:	b083      	sub	sp, #12
 800eeac:	af00      	add	r7, sp, #0
 800eeae:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800eeb4:	4618      	mov	r0, r3
 800eeb6:	370c      	adds	r7, #12
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eebe:	4770      	bx	lr

0800eec0 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 800eec0:	b590      	push	{r4, r7, lr}
 800eec2:	b095      	sub	sp, #84	; 0x54
 800eec4:	af02      	add	r7, sp, #8
 800eec6:	6178      	str	r0, [r7, #20]
 800eec8:	697b      	ldr	r3, [r7, #20]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7ff fc00 	bl	800e6d0 <_ZN8touchgfx9ContainerC1Ev>
 800eed0:	4a71      	ldr	r2, [pc, #452]	; (800f098 <_ZN12alertBarBaseC1Ev+0x1d8>)
 800eed2:	697b      	ldr	r3, [r7, #20]
 800eed4:	601a      	str	r2, [r3, #0]
 800eed6:	697b      	ldr	r3, [r7, #20]
 800eed8:	332c      	adds	r3, #44	; 0x2c
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7ff fdd6 	bl	800ea8c <_ZN8touchgfx13BoxWithBorderC1Ev>
 800eee0:	697b      	ldr	r3, [r7, #20]
 800eee2:	3360      	adds	r3, #96	; 0x60
 800eee4:	4618      	mov	r0, r3
 800eee6:	f7ff ffc9 	bl	800ee7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	f44f 7148 	mov.w	r1, #800	; 0x320
 800eef0:	4618      	mov	r0, r3
 800eef2:	f7ff fb77 	bl	800e5e4 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	213c      	movs	r1, #60	; 0x3c
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7ff fb81 	bl	800e602 <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 800ef00:	697b      	ldr	r3, [r7, #20]
 800ef02:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800ef06:	233c      	movs	r3, #60	; 0x3c
 800ef08:	9300      	str	r3, [sp, #0]
 800ef0a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ef0e:	2200      	movs	r2, #0
 800ef10:	2100      	movs	r1, #0
 800ef12:	f7ff fc6e 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 800ef16:	697b      	ldr	r3, [r7, #20]
 800ef18:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ef1c:	23ff      	movs	r3, #255	; 0xff
 800ef1e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800ef22:	2300      	movs	r3, #0
 800ef24:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800ef28:	2300      	movs	r3, #0
 800ef2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800ef2e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800ef32:	041b      	lsls	r3, r3, #16
 800ef34:	461a      	mov	r2, r3
 800ef36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800ef3a:	021b      	lsls	r3, r3, #8
 800ef3c:	431a      	orrs	r2, r3
 800ef3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ef42:	4313      	orrs	r3, r2
 800ef44:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ef48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ef4c:	4611      	mov	r1, r2
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7ff fc02 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800ef54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef56:	4619      	mov	r1, r3
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f7ff fd67 	bl	800ea2c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800ef64:	2300      	movs	r3, #0
 800ef66:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ef70:	2300      	movs	r3, #0
 800ef72:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800ef76:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800ef7a:	041b      	lsls	r3, r3, #16
 800ef7c:	461a      	mov	r2, r3
 800ef7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef82:	021b      	lsls	r3, r3, #8
 800ef84:	431a      	orrs	r2, r3
 800ef86:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800ef8a:	4313      	orrs	r3, r2
 800ef8c:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ef90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ef94:	4611      	mov	r1, r2
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff fbde 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800ef9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef9e:	4619      	mov	r1, r3
 800efa0:	4620      	mov	r0, r4
 800efa2:	f7ff fd8f 	bl	800eac4 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 800efa6:	697b      	ldr	r3, [r7, #20]
 800efa8:	332c      	adds	r3, #44	; 0x2c
 800efaa:	2105      	movs	r1, #5
 800efac:	4618      	mov	r0, r3
 800efae:	f7ff fd97 	bl	800eae0 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(0, 0, 800, 60);
 800efb2:	697b      	ldr	r3, [r7, #20]
 800efb4:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800efb8:	233c      	movs	r3, #60	; 0x3c
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	f44f 7348 	mov.w	r3, #800	; 0x320
 800efc0:	2200      	movs	r2, #0
 800efc2:	2100      	movs	r1, #0
 800efc4:	f7ff fc15 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800efce:	23ff      	movs	r3, #255	; 0xff
 800efd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800efd4:	23ff      	movs	r3, #255	; 0xff
 800efd6:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800efda:	23ff      	movs	r3, #255	; 0xff
 800efdc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800efe0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800efe4:	041b      	lsls	r3, r3, #16
 800efe6:	461a      	mov	r2, r3
 800efe8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800efec:	021b      	lsls	r3, r3, #8
 800efee:	431a      	orrs	r2, r3
 800eff0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800eff4:	4313      	orrs	r3, r2
 800eff6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800effa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800effe:	4611      	mov	r1, r2
 800f000:	4618      	mov	r0, r3
 800f002:	f7ff fba9 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800f006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f008:	63fc      	str	r4, [r7, #60]	; 0x3c
 800f00a:	61bb      	str	r3, [r7, #24]
        color = newColor;
 800f00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f00e:	69ba      	ldr	r2, [r7, #24]
 800f010:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f012:	bf00      	nop
    frontText.setLinespacing(0);
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	3360      	adds	r3, #96	; 0x60
 800f018:	647b      	str	r3, [r7, #68]	; 0x44
 800f01a:	2300      	movs	r3, #0
 800f01c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 800f020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f022:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f026:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f028:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	3384      	adds	r3, #132	; 0x84
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800f032:	463a      	mov	r2, r7
 800f034:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f036:	4610      	mov	r0, r2
 800f038:	4798      	blx	r3
 800f03a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f03e:	463a      	mov	r2, r7
 800f040:	ca07      	ldmia	r2, {r0, r1, r2}
 800f042:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f046:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_94W5));
 800f048:	697b      	ldr	r3, [r7, #20]
 800f04a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800f04e:	f107 031c 	add.w	r3, r7, #28
 800f052:	2105      	movs	r1, #5
 800f054:	4618      	mov	r0, r3
 800f056:	f7ff fd53 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
 800f05a:	f107 031c 	add.w	r3, r7, #28
 800f05e:	4619      	mov	r1, r3
 800f060:	4620      	mov	r0, r4
 800f062:	f008 fad1 	bl	8017608 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f066:	f107 031c 	add.w	r3, r7, #28
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fe f974 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 800f070:	697a      	ldr	r2, [r7, #20]
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	332c      	adds	r3, #44	; 0x2c
 800f076:	4619      	mov	r1, r3
 800f078:	4610      	mov	r0, r2
 800f07a:	f006 f90d 	bl	8015298 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 800f07e:	697a      	ldr	r2, [r7, #20]
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	3360      	adds	r3, #96	; 0x60
 800f084:	4619      	mov	r1, r3
 800f086:	4610      	mov	r0, r2
 800f088:	f006 f906 	bl	8015298 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	4618      	mov	r0, r3
 800f090:	374c      	adds	r7, #76	; 0x4c
 800f092:	46bd      	mov	sp, r7
 800f094:	bd90      	pop	{r4, r7, pc}
 800f096:	bf00      	nop
 800f098:	0802e850 	.word	0x0802e850

0800f09c <_ZN12alertBarBaseD1Ev>:

alertBarBase::~alertBarBase()
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	4a0a      	ldr	r2, [pc, #40]	; (800f0d0 <_ZN12alertBarBaseD1Ev+0x34>)
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	601a      	str	r2, [r3, #0]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	3360      	adds	r3, #96	; 0x60
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f000 f82a 	bl	800f108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	332c      	adds	r3, #44	; 0x2c
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	f000 f847 	bl	800f14c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f7ff fb27 	bl	800e714 <_ZN8touchgfx9ContainerD1Ev>
{

}
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	0802e850 	.word	0x0802e850

0800f0d4 <_ZN12alertBarBaseD0Ev>:
alertBarBase::~alertBarBase()
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b082      	sub	sp, #8
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
}
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7ff ffdd 	bl	800f09c <_ZN12alertBarBaseD1Ev>
 800f0e2:	21ac      	movs	r1, #172	; 0xac
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f019 fde1 	bl	8028cac <_ZdlPvj>
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3708      	adds	r7, #8
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 800f0f4:	b480      	push	{r7}
 800f0f6:	b083      	sub	sp, #12
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]

}
 800f0fc:	bf00      	nop
 800f0fe:	370c      	adds	r7, #12
 800f100:	46bd      	mov	sp, r7
 800f102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f106:	4770      	bx	lr

0800f108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800f108:	b580      	push	{r7, lr}
 800f10a:	b082      	sub	sp, #8
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	4a05      	ldr	r2, [pc, #20]	; (800f128 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	601a      	str	r2, [r3, #0]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	4618      	mov	r0, r3
 800f11a:	f7ff fe8d 	bl	800ee38 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	4618      	mov	r0, r3
 800f122:	3708      	adds	r7, #8
 800f124:	46bd      	mov	sp, r7
 800f126:	bd80      	pop	{r7, pc}
 800f128:	0802e8e4 	.word	0x0802e8e4

0800f12c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b082      	sub	sp, #8
 800f130:	af00      	add	r7, sp, #0
 800f132:	6078      	str	r0, [r7, #4]
 800f134:	6878      	ldr	r0, [r7, #4]
 800f136:	f7ff ffe7 	bl	800f108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800f13a:	214c      	movs	r1, #76	; 0x4c
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f019 fdb5 	bl	8028cac <_ZdlPvj>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4618      	mov	r0, r3
 800f146:	3708      	adds	r7, #8
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	4a05      	ldr	r2, [pc, #20]	; (800f16c <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	601a      	str	r2, [r3, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f7ff fc73 	bl	800ea48 <_ZN8touchgfx3BoxD1Ev>
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	4618      	mov	r0, r3
 800f166:	3708      	adds	r7, #8
 800f168:	46bd      	mov	sp, r7
 800f16a:	bd80      	pop	{r7, pc}
 800f16c:	0802f7ac 	.word	0x0802f7ac

0800f170 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800f170:	b580      	push	{r7, lr}
 800f172:	b082      	sub	sp, #8
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
 800f178:	6878      	ldr	r0, [r7, #4]
 800f17a:	f7ff ffe7 	bl	800f14c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800f17e:	2134      	movs	r1, #52	; 0x34
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f019 fd93 	bl	8028cac <_ZdlPvj>
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	4618      	mov	r0, r3
 800f18a:	3708      	adds	r7, #8
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 800f190:	b480      	push	{r7}
 800f192:	b083      	sub	sp, #12
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
        : color(0)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2200      	movs	r2, #0
 800f19c:	601a      	str	r2, [r3, #0]
    }
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	370c      	adds	r7, #12
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 800f1ac:	b480      	push	{r7}
 800f1ae:	b083      	sub	sp, #12
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
        return color;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	681b      	ldr	r3, [r3, #0]
    }
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 800f1c4:	b480      	push	{r7}
 800f1c6:	b083      	sub	sp, #12
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	370c      	adds	r7, #12
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1da:	4770      	bx	lr

0800f1dc <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 800f1dc:	b480      	push	{r7}
 800f1de:	b083      	sub	sp, #12
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 800f1e4:	4a06      	ldr	r2, [pc, #24]	; (800f200 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	601a      	str	r2, [r3, #0]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	2200      	movs	r2, #0
 800f1ee:	809a      	strh	r2, [r3, #4]
    {
    }
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop
 800f200:	0802eaa4 	.word	0x0802eaa4

0800f204 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
    {
 800f20c:	4a04      	ldr	r2, [pc, #16]	; (800f220 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	601a      	str	r2, [r3, #0]
    }
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	4618      	mov	r0, r3
 800f216:	370c      	adds	r7, #12
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr
 800f220:	0802eaa4 	.word	0x0802eaa4

0800f224 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
    }
 800f22c:	6878      	ldr	r0, [r7, #4]
 800f22e:	f7ff ffe9 	bl	800f204 <_ZN8touchgfx15AbstractPainterD1Ev>
 800f232:	2108      	movs	r1, #8
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	f019 fd39 	bl	8028cac <_ZdlPvj>
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	4618      	mov	r0, r3
 800f23e:	3708      	adds	r7, #8
 800f240:	46bd      	mov	sp, r7
 800f242:	bd80      	pop	{r7, pc}

0800f244 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 800f24c:	2300      	movs	r3, #0
    }
 800f24e:	4618      	mov	r0, r3
 800f250:	370c      	adds	r7, #12
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr

0800f25a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 800f25a:	b480      	push	{r7}
 800f25c:	b083      	sub	sp, #12
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
 800f262:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 800f264:	683b      	ldr	r3, [r7, #0]
 800f266:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	809a      	strh	r2, [r3, #4]
        return true;
 800f26e:	2301      	movs	r3, #1
    }
 800f270:	4618      	mov	r0, r3
 800f272:	370c      	adds	r7, #12
 800f274:	46bd      	mov	sp, r7
 800f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27a:	4770      	bx	lr

0800f27c <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 800f27c:	b480      	push	{r7}
 800f27e:	b083      	sub	sp, #12
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
    {
        return;
 800f284:	bf00      	nop
    }
 800f286:	370c      	adds	r7, #12
 800f288:	46bd      	mov	sp, r7
 800f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f28e:	4770      	bx	lr

0800f290 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 800f290:	b480      	push	{r7}
 800f292:	b083      	sub	sp, #12
 800f294:	af00      	add	r7, sp, #0
 800f296:	6078      	str	r0, [r7, #4]
 800f298:	6039      	str	r1, [r7, #0]
            : v(i)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	601a      	str	r2, [r3, #0]
        {
        }
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	370c      	adds	r7, #12
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr

0800f2ae <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 800f2ae:	b480      	push	{r7}
 800f2b0:	b083      	sub	sp, #12
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
        {
            return v;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
        }
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	370c      	adds	r7, #12
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c4:	4770      	bx	lr

0800f2c6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 800f2c6:	b480      	push	{r7}
 800f2c8:	b083      	sub	sp, #12
 800f2ca:	af00      	add	r7, sp, #0
 800f2cc:	6078      	str	r0, [r7, #4]
 800f2ce:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	683a      	ldr	r2, [r7, #0]
 800f2d4:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f2d6:	bf00      	nop
 800f2d8:	370c      	adds	r7, #12
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr

0800f2e2 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 800f2e2:	b590      	push	{r4, r7, lr}
 800f2e4:	b083      	sub	sp, #12
 800f2e6:	af00      	add	r7, sp, #0
 800f2e8:	6078      	str	r0, [r7, #4]
 800f2ea:	6039      	str	r1, [r7, #0]
    {
        if (lineWidthQ5 == widthQ5)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	333c      	adds	r3, #60	; 0x3c
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff ffdc 	bl	800f2ae <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800f2f6:	4604      	mov	r4, r0
 800f2f8:	463b      	mov	r3, r7
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f7ff ffd7 	bl	800f2ae <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 800f300:	4603      	mov	r3, r0
 800f302:	429c      	cmp	r4, r3
 800f304:	bf0c      	ite	eq
 800f306:	2301      	moveq	r3, #1
 800f308:	2300      	movne	r3, #0
 800f30a:	b2db      	uxtb	r3, r3
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d106      	bne.n	800f31e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	683a      	ldr	r2, [r7, #0]
 800f314:	63da      	str	r2, [r3, #60]	; 0x3c

        updateCachedShape();
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f007 fc4a 	bl	8016bb0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 800f31c:	e000      	b.n	800f320 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 800f31e:	bf00      	nop
    }
 800f320:	370c      	adds	r7, #12
 800f322:	46bd      	mov	sp, r7
 800f324:	bd90      	pop	{r4, r7, pc}
	...

0800f328 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterARGB8888 : public AbstractPainter
{
public:
    AbstractPainterARGB8888()
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	4618      	mov	r0, r3
 800f334:	f7ff ff52 	bl	800f1dc <_ZN8touchgfx15AbstractPainterC1Ev>
 800f338:	4a26      	ldr	r2, [pc, #152]	; (800f3d4 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xac>)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	2302      	movs	r3, #2
 800f340:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 800f342:	f7fe fc4f 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 800f346:	4603      	mov	r3, r0
 800f348:	681a      	ldr	r2, [r3, #0]
 800f34a:	322c      	adds	r2, #44	; 0x2c
 800f34c:	6812      	ldr	r2, [r2, #0]
 800f34e:	4618      	mov	r0, r3
 800f350:	4790      	blx	r2
 800f352:	4603      	mov	r3, r0
 800f354:	461a      	mov	r2, r3
 800f356:	7bfb      	ldrb	r3, [r7, #15]
 800f358:	4293      	cmp	r3, r2
 800f35a:	bf0c      	ite	eq
 800f35c:	2301      	moveq	r3, #1
 800f35e:	2300      	movne	r3, #0
 800f360:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 800f362:	f7fe fc33 	bl	800dbcc <_ZN8touchgfx3HAL11getInstanceEv>
 800f366:	4603      	mov	r3, r0
 800f368:	4618      	mov	r0, r3
 800f36a:	f7ff ff2b 	bl	800f1c4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f36e:	4603      	mov	r3, r0
 800f370:	2b00      	cmp	r3, #0
 800f372:	bf14      	ite	ne
 800f374:	2301      	movne	r3, #1
 800f376:	2300      	moveq	r3, #0
 800f378:	b2db      	uxtb	r3, r3
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d01b      	beq.n	800f3b6 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 800f37e:	f7fe fc25 	bl	800dbcc <_ZN8touchgfx3HAL11getInstanceEv>
 800f382:	4603      	mov	r3, r0
 800f384:	4618      	mov	r0, r3
 800f386:	f7ff ff1d 	bl	800f1c4 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 800f38a:	4603      	mov	r3, r0
 800f38c:	681a      	ldr	r2, [r3, #0]
 800f38e:	322c      	adds	r2, #44	; 0x2c
 800f390:	6812      	ldr	r2, [r2, #0]
 800f392:	4618      	mov	r0, r3
 800f394:	4790      	blx	r2
 800f396:	4603      	mov	r3, r0
 800f398:	461a      	mov	r2, r3
 800f39a:	7bfb      	ldrb	r3, [r7, #15]
 800f39c:	4293      	cmp	r3, r2
 800f39e:	bf0c      	ite	eq
 800f3a0:	2301      	moveq	r3, #1
 800f3a2:	2300      	movne	r3, #0
 800f3a4:	b2da      	uxtb	r2, r3
 800f3a6:	7bbb      	ldrb	r3, [r7, #14]
 800f3a8:	4313      	orrs	r3, r2
 800f3aa:	b2db      	uxtb	r3, r3
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	bf14      	ite	ne
 800f3b0:	2301      	movne	r3, #1
 800f3b2:	2300      	moveq	r3, #0
 800f3b4:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 800f3b6:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::ARGB8888) && "The chosen painter only works with ARGB8888 displays");
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d105      	bne.n	800f3c8 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xa0>
 800f3bc:	4b06      	ldr	r3, [pc, #24]	; (800f3d8 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb0>)
 800f3be:	4a07      	ldr	r2, [pc, #28]	; (800f3dc <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb4>)
 800f3c0:	2128      	movs	r1, #40	; 0x28
 800f3c2:	4807      	ldr	r0, [pc, #28]	; (800f3e0 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb8>)
 800f3c4:	f019 fca0 	bl	8028d08 <__assert_func>
 800f3c8:	bf00      	nop
    }
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3710      	adds	r7, #16
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	0802ea84 	.word	0x0802ea84
 800f3d8:	0802c440 	.word	0x0802c440
 800f3dc:	0802c4a4 	.word	0x0802c4a4
 800f3e0:	0802c4e4 	.word	0x0802c4e4

0800f3e4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 800f3e4:	b580      	push	{r7, lr}
 800f3e6:	b082      	sub	sp, #8
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	6078      	str	r0, [r7, #4]
 800f3ec:	6039      	str	r1, [r7, #0]
    {
 800f3ee:	4a08      	ldr	r2, [pc, #32]	; (800f410 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	601a      	str	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	3304      	adds	r3, #4
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7ff fec9 	bl	800f190 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 800f3fe:	6839      	ldr	r1, [r7, #0]
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f000 f827 	bl	800f454 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4618      	mov	r0, r3
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	0802ea70 	.word	0x0802ea70

0800f414 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 800f414:	b480      	push	{r7}
 800f416:	b083      	sub	sp, #12
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
    {
 800f41c:	4a04      	ldr	r2, [pc, #16]	; (800f430 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	601a      	str	r2, [r3, #0]
    }
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	4618      	mov	r0, r3
 800f426:	370c      	adds	r7, #12
 800f428:	46bd      	mov	sp, r7
 800f42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42e:	4770      	bx	lr
 800f430:	0802ea70 	.word	0x0802ea70

0800f434 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    }
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	f7ff ffe9 	bl	800f414 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f442:	2108      	movs	r1, #8
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f019 fc31 	bl	8028cac <_ZdlPvj>
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	4618      	mov	r0, r3
 800f44e:	3708      	adds	r7, #8
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 800f454:	b480      	push	{r7}
 800f456:	b083      	sub	sp, #12
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	683a      	ldr	r2, [r7, #0]
 800f462:	605a      	str	r2, [r3, #4]
    }
 800f464:	bf00      	nop
 800f466:	370c      	adds	r7, #12
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>:
class AbstractPainterARGB8888 : public AbstractPainter
 800f470:	b580      	push	{r7, lr}
 800f472:	b082      	sub	sp, #8
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	4a05      	ldr	r2, [pc, #20]	; (800f490 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev+0x20>)
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	601a      	str	r2, [r3, #0]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4618      	mov	r0, r3
 800f482:	f7ff febf 	bl	800f204 <_ZN8touchgfx15AbstractPainterD1Ev>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4618      	mov	r0, r3
 800f48a:	3708      	adds	r7, #8
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bd80      	pop	{r7, pc}
 800f490:	0802ea84 	.word	0x0802ea84

0800f494 <_ZN8touchgfx23AbstractPainterARGB8888D0Ev>:
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7ff ffe7 	bl	800f470 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 800f4a2:	2108      	movs	r1, #8
 800f4a4:	6878      	ldr	r0, [r7, #4]
 800f4a6:	f019 fc01 	bl	8028cac <_ZdlPvj>
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	3708      	adds	r7, #8
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	bd80      	pop	{r7, pc}

0800f4b4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterARGB8888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterARGB8888(colortype color = 0)
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
        : AbstractPainterARGB8888(), AbstractPainterColor(color)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f7ff ff31 	bl	800f328 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	3308      	adds	r3, #8
 800f4ca:	6839      	ldr	r1, [r7, #0]
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7ff ff89 	bl	800f3e4 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 800f4d2:	4a05      	ldr	r2, [pc, #20]	; (800f4e8 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x34>)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	601a      	str	r2, [r3, #0]
 800f4d8:	4a04      	ldr	r2, [pc, #16]	; (800f4ec <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x38>)
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	609a      	str	r2, [r3, #8]
    {
    }
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	0802f3d8 	.word	0x0802f3d8
 800f4ec:	0802f3fc 	.word	0x0802f3fc

0800f4f0 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b086      	sub	sp, #24
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
 800f4f8:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	3308      	adds	r3, #8
 800f4fe:	6839      	ldr	r1, [r7, #0]
 800f500:	4618      	mov	r0, r3
 800f502:	f7ff ffa7 	bl	800f454 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 800f506:	683b      	ldr	r3, [r7, #0]
 800f508:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 800f50a:	f107 0314 	add.w	r3, r7, #20
 800f50e:	4618      	mov	r0, r3
 800f510:	f7ff fe4c 	bl	800f1ac <_ZNK8touchgfx9colortypecvmEv>
 800f514:	4603      	mov	r3, r0
 800f516:	0c1b      	lsrs	r3, r3, #16
 800f518:	b2da      	uxtb	r2, r3
        painterRed = Color::getRed(color);
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	741a      	strb	r2, [r3, #16]
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 800f522:	f107 0310 	add.w	r3, r7, #16
 800f526:	4618      	mov	r0, r3
 800f528:	f7ff fe40 	bl	800f1ac <_ZNK8touchgfx9colortypecvmEv>
 800f52c:	4603      	mov	r3, r0
 800f52e:	0a1b      	lsrs	r3, r3, #8
 800f530:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	745a      	strb	r2, [r3, #17]
 800f536:	683b      	ldr	r3, [r7, #0]
 800f538:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 800f53a:	f107 030c 	add.w	r3, r7, #12
 800f53e:	4618      	mov	r0, r3
 800f540:	f7ff fe34 	bl	800f1ac <_ZNK8touchgfx9colortypecvmEv>
 800f544:	4603      	mov	r3, r0
 800f546:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	749a      	strb	r2, [r3, #18]
    }
 800f54c:	bf00      	nop
 800f54e:	3718      	adds	r7, #24
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}

0800f554 <_ZThn8_N8touchgfx15PainterARGB88888setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 800f554:	f1a0 0008 	sub.w	r0, r0, #8
 800f558:	e7ca      	b.n	800f4f0 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
	...

0800f55c <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 800f55c:	b590      	push	{r4, r7, lr}
 800f55e:	b095      	sub	sp, #84	; 0x54
 800f560:	af02      	add	r7, sp, #8
 800f562:	6178      	str	r0, [r7, #20]
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	4618      	mov	r0, r3
 800f568:	f7ff f8b2 	bl	800e6d0 <_ZN8touchgfx9ContainerC1Ev>
 800f56c:	4a72      	ldr	r2, [pc, #456]	; (800f738 <_ZN11tempBoxBaseC1Ev+0x1dc>)
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	601a      	str	r2, [r3, #0]
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	332c      	adds	r3, #44	; 0x2c
 800f576:	4618      	mov	r0, r3
 800f578:	f007 fafa 	bl	8016b70 <_ZN8touchgfx4LineC1Ev>
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800f582:	f107 0320 	add.w	r3, r7, #32
 800f586:	2100      	movs	r1, #0
 800f588:	4618      	mov	r0, r3
 800f58a:	f7ff f8e5 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800f58e:	6a39      	ldr	r1, [r7, #32]
 800f590:	4620      	mov	r0, r4
 800f592:	f7ff ff8f 	bl	800f4b4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	33b0      	adds	r3, #176	; 0xb0
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff fac6 	bl	800eb2c <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 800f5a0:	697b      	ldr	r3, [r7, #20]
 800f5a2:	21dc      	movs	r1, #220	; 0xdc
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7ff f81d 	bl	800e5e4 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	213c      	movs	r1, #60	; 0x3c
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7ff f827 	bl	800e602 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 800f5b4:	697b      	ldr	r3, [r7, #20]
 800f5b6:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800f5ba:	233c      	movs	r3, #60	; 0x3c
 800f5bc:	9300      	str	r3, [sp, #0]
 800f5be:	2364      	movs	r3, #100	; 0x64
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	2100      	movs	r1, #0
 800f5c4:	f7ff f915 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f5c8:	697b      	ldr	r3, [r7, #20]
 800f5ca:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 800f5ce:	23ff      	movs	r3, #255	; 0xff
 800f5d0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800f5d4:	23ff      	movs	r3, #255	; 0xff
 800f5d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800f5da:	23ff      	movs	r3, #255	; 0xff
 800f5dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f5e0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800f5e4:	041b      	lsls	r3, r3, #16
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f5ec:	021b      	lsls	r3, r3, #8
 800f5ee:	431a      	orrs	r2, r3
 800f5f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f5fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f5fe:	4611      	mov	r1, r2
 800f600:	4618      	mov	r0, r3
 800f602:	f7ff f8a9 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800f606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f608:	4619      	mov	r1, r3
 800f60a:	4620      	mov	r0, r4
 800f60c:	f7ff ff70 	bl	800f4f0 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 800f610:	697b      	ldr	r3, [r7, #20]
 800f612:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	339c      	adds	r3, #156	; 0x9c
 800f61a:	4619      	mov	r1, r3
 800f61c:	4610      	mov	r0, r2
 800f61e:	f7ff fe52 	bl	800f2c6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(0, 0);
 800f622:	697b      	ldr	r3, [r7, #20]
 800f624:	332c      	adds	r3, #44	; 0x2c
 800f626:	2200      	movs	r2, #0
 800f628:	2100      	movs	r1, #0
 800f62a:	4618      	mov	r0, r3
 800f62c:	f000 f8c2 	bl	800f7b4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 800f630:	697b      	ldr	r3, [r7, #20]
 800f632:	332c      	adds	r3, #44	; 0x2c
 800f634:	22dc      	movs	r2, #220	; 0xdc
 800f636:	2100      	movs	r1, #0
 800f638:	4618      	mov	r0, r3
 800f63a:	f000 f8e1 	bl	800f800 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 800f63e:	697b      	ldr	r3, [r7, #20]
 800f640:	332c      	adds	r3, #44	; 0x2c
 800f642:	2101      	movs	r1, #1
 800f644:	4618      	mov	r0, r3
 800f646:	f000 f901 	bl	800f84c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	332c      	adds	r3, #44	; 0x2c
 800f64e:	2101      	movs	r1, #1
 800f650:	4618      	mov	r0, r3
 800f652:	f007 fbb9 	bl	8016dc8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 800f65c:	233c      	movs	r3, #60	; 0x3c
 800f65e:	9300      	str	r3, [sp, #0]
 800f660:	23dc      	movs	r3, #220	; 0xdc
 800f662:	2200      	movs	r2, #0
 800f664:	2100      	movs	r1, #0
 800f666:	f7ff f8c4 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800f66a:	697b      	ldr	r3, [r7, #20]
 800f66c:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800f670:	23ff      	movs	r3, #255	; 0xff
 800f672:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800f676:	23ff      	movs	r3, #255	; 0xff
 800f678:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800f67c:	23ff      	movs	r3, #255	; 0xff
 800f67e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800f682:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800f686:	041b      	lsls	r3, r3, #16
 800f688:	461a      	mov	r2, r3
 800f68a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800f68e:	021b      	lsls	r3, r3, #8
 800f690:	431a      	orrs	r2, r3
 800f692:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800f696:	4313      	orrs	r3, r2
 800f698:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f69c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f6a0:	4611      	mov	r1, r2
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7ff f858 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800f6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6aa:	63fc      	str	r4, [r7, #60]	; 0x3c
 800f6ac:	61fb      	str	r3, [r7, #28]
        color = newColor;
 800f6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b0:	69fa      	ldr	r2, [r7, #28]
 800f6b2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800f6b4:	bf00      	nop
    textArea1.setLinespacing(2);
 800f6b6:	697b      	ldr	r3, [r7, #20]
 800f6b8:	33b0      	adds	r3, #176	; 0xb0
 800f6ba:	647b      	str	r3, [r7, #68]	; 0x44
 800f6bc:	2302      	movs	r3, #2
 800f6be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 800f6c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f6c8:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800f6ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	3384      	adds	r3, #132	; 0x84
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800f6d4:	463a      	mov	r2, r7
 800f6d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f6d8:	4610      	mov	r0, r2
 800f6da:	4798      	blx	r3
 800f6dc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800f6e0:	463a      	mov	r2, r7
 800f6e2:	ca07      	ldmia	r2, {r0, r1, r2}
 800f6e4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800f6e8:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VVN0));
 800f6ea:	697b      	ldr	r3, [r7, #20]
 800f6ec:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800f6f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6f4:	2104      	movs	r1, #4
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	f7ff fa02 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
 800f6fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f700:	4619      	mov	r1, r3
 800f702:	4620      	mov	r0, r4
 800f704:	f007 ff80 	bl	8017608 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800f708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f70c:	4618      	mov	r0, r3
 800f70e:	f7fd fe23 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 800f712:	697a      	ldr	r2, [r7, #20]
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	332c      	adds	r3, #44	; 0x2c
 800f718:	4619      	mov	r1, r3
 800f71a:	4610      	mov	r0, r2
 800f71c:	f005 fdbc 	bl	8015298 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 800f720:	697a      	ldr	r2, [r7, #20]
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	33b0      	adds	r3, #176	; 0xb0
 800f726:	4619      	mov	r1, r3
 800f728:	4610      	mov	r0, r2
 800f72a:	f005 fdb5 	bl	8015298 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	4618      	mov	r0, r3
 800f732:	374c      	adds	r7, #76	; 0x4c
 800f734:	46bd      	mov	sp, r7
 800f736:	bd90      	pop	{r4, r7, pc}
 800f738:	0802e9dc 	.word	0x0802e9dc

0800f73c <_ZN11tempBoxBaseD1Ev>:

tempBoxBase::~tempBoxBase()
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b082      	sub	sp, #8
 800f740:	af00      	add	r7, sp, #0
 800f742:	6078      	str	r0, [r7, #4]
 800f744:	4a0d      	ldr	r2, [pc, #52]	; (800f77c <_ZN11tempBoxBaseD1Ev+0x40>)
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	601a      	str	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	33b0      	adds	r3, #176	; 0xb0
 800f74e:	4618      	mov	r0, r3
 800f750:	f7ff fb2c 	bl	800edac <_ZN8touchgfx8TextAreaD1Ev>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	339c      	adds	r3, #156	; 0x9c
 800f758:	4618      	mov	r0, r3
 800f75a:	f000 f8d3 	bl	800f904 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	332c      	adds	r3, #44	; 0x2c
 800f762:	4618      	mov	r0, r3
 800f764:	f000 f8ac 	bl	800f8c0 <_ZN8touchgfx4LineD1Ev>
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fe ffd2 	bl	800e714 <_ZN8touchgfx9ContainerD1Ev>
{

}
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	0802e9dc 	.word	0x0802e9dc

0800f780 <_ZN11tempBoxBaseD0Ev>:
tempBoxBase::~tempBoxBase()
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
}
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f7ff ffd7 	bl	800f73c <_ZN11tempBoxBaseD1Ev>
 800f78e:	21f8      	movs	r1, #248	; 0xf8
 800f790:	6878      	ldr	r0, [r7, #4]
 800f792:	f019 fa8b 	bl	8028cac <_ZdlPvj>
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	4618      	mov	r0, r3
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}

0800f7a0 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]

}
 800f7a8:	bf00      	nop
 800f7aa:	370c      	adds	r7, #12
 800f7ac:	46bd      	mov	sp, r7
 800f7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b2:	4770      	bx	lr

0800f7b4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 800f7b4:	b590      	push	{r4, r7, lr}
 800f7b6:	b089      	sub	sp, #36	; 0x24
 800f7b8:	af00      	add	r7, sp, #0
 800f7ba:	60f8      	str	r0, [r7, #12]
 800f7bc:	60b9      	str	r1, [r7, #8]
 800f7be:	607a      	str	r2, [r7, #4]
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 800f7c4:	69bb      	ldr	r3, [r7, #24]
 800f7c6:	015a      	lsls	r2, r3, #5
 800f7c8:	f107 0314 	add.w	r3, r7, #20
 800f7cc:	4611      	mov	r1, r2
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	f7ff fd5e 	bl	800f290 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	461c      	mov	r4, r3
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	61fb      	str	r3, [r7, #28]
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	015a      	lsls	r2, r3, #5
 800f7e0:	f107 0310 	add.w	r3, r7, #16
 800f7e4:	4611      	mov	r1, r2
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff fd52 	bl	800f290 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f7ec:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	f007 fad2 	bl	8016d9c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 800f7f8:	bf00      	nop
 800f7fa:	3724      	adds	r7, #36	; 0x24
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd90      	pop	{r4, r7, pc}

0800f800 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 800f800:	b590      	push	{r4, r7, lr}
 800f802:	b089      	sub	sp, #36	; 0x24
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	607a      	str	r2, [r7, #4]
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	61bb      	str	r3, [r7, #24]
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	015a      	lsls	r2, r3, #5
 800f814:	f107 0314 	add.w	r3, r7, #20
 800f818:	4611      	mov	r1, r2
 800f81a:	4618      	mov	r0, r3
 800f81c:	f7ff fd38 	bl	800f290 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	461c      	mov	r4, r3
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	61fb      	str	r3, [r7, #28]
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	015a      	lsls	r2, r3, #5
 800f82c:	f107 0310 	add.w	r3, r7, #16
 800f830:	4611      	mov	r1, r2
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff fd2c 	bl	800f290 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f838:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 800f83a:	461a      	mov	r2, r3
 800f83c:	4621      	mov	r1, r4
 800f83e:	68f8      	ldr	r0, [r7, #12]
 800f840:	f007 fab7 	bl	8016db2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 800f844:	bf00      	nop
 800f846:	3724      	adds	r7, #36	; 0x24
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd90      	pop	{r4, r7, pc}

0800f84c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b084      	sub	sp, #16
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	60fb      	str	r3, [r7, #12]
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	f107 0308 	add.w	r3, r7, #8
 800f862:	4611      	mov	r1, r2
 800f864:	4618      	mov	r0, r3
 800f866:	f7ff fd13 	bl	800f290 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 800f86a:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 800f86c:	4619      	mov	r1, r3
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7ff fd37 	bl	800f2e2 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 800f874:	bf00      	nop
 800f876:	3710      	adds	r7, #16
 800f878:	46bd      	mov	sp, r7
 800f87a:	bd80      	pop	{r7, pc}

0800f87c <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b082      	sub	sp, #8
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	4a05      	ldr	r2, [pc, #20]	; (800f89c <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	601a      	str	r2, [r3, #0]
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f7ff f887 	bl	800e9a0 <_ZN8touchgfx6WidgetD1Ev>
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	4618      	mov	r0, r3
 800f896:	3708      	adds	r7, #8
 800f898:	46bd      	mov	sp, r7
 800f89a:	bd80      	pop	{r7, pc}
 800f89c:	0802f410 	.word	0x0802f410

0800f8a0 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 800f8a0:	b580      	push	{r7, lr}
 800f8a2:	b082      	sub	sp, #8
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	6878      	ldr	r0, [r7, #4]
 800f8aa:	f7ff ffe7 	bl	800f87c <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f8ae:	212c      	movs	r1, #44	; 0x2c
 800f8b0:	6878      	ldr	r0, [r7, #4]
 800f8b2:	f019 f9fb 	bl	8028cac <_ZdlPvj>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3708      	adds	r7, #8
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
 800f8c8:	4a05      	ldr	r2, [pc, #20]	; (800f8e0 <_ZN8touchgfx4LineD1Ev+0x20>)
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	601a      	str	r2, [r3, #0]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7ff ffd3 	bl	800f87c <_ZN8touchgfx12CanvasWidgetD1Ev>
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	4618      	mov	r0, r3
 800f8da:	3708      	adds	r7, #8
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	0802f5ac 	.word	0x0802f5ac

0800f8e4 <_ZN8touchgfx4LineD0Ev>:
 800f8e4:	b580      	push	{r7, lr}
 800f8e6:	b082      	sub	sp, #8
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
 800f8ec:	6878      	ldr	r0, [r7, #4]
 800f8ee:	f7ff ffe7 	bl	800f8c0 <_ZN8touchgfx4LineD1Ev>
 800f8f2:	2170      	movs	r1, #112	; 0x70
 800f8f4:	6878      	ldr	r0, [r7, #4]
 800f8f6:	f019 f9d9 	bl	8028cac <_ZdlPvj>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	4618      	mov	r0, r3
 800f8fe:	3708      	adds	r7, #8
 800f900:	46bd      	mov	sp, r7
 800f902:	bd80      	pop	{r7, pc}

0800f904 <_ZN8touchgfx15PainterARGB8888D1Ev>:
class PainterARGB8888 : public AbstractPainterARGB8888, public AbstractPainterColor
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	4a09      	ldr	r2, [pc, #36]	; (800f934 <_ZN8touchgfx15PainterARGB8888D1Ev+0x30>)
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	601a      	str	r2, [r3, #0]
 800f912:	4a09      	ldr	r2, [pc, #36]	; (800f938 <_ZN8touchgfx15PainterARGB8888D1Ev+0x34>)
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	609a      	str	r2, [r3, #8]
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	3308      	adds	r3, #8
 800f91c:	4618      	mov	r0, r3
 800f91e:	f7ff fd79 	bl	800f414 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	4618      	mov	r0, r3
 800f926:	f7ff fda3 	bl	800f470 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	0802f3d8 	.word	0x0802f3d8
 800f938:	0802f3fc 	.word	0x0802f3fc

0800f93c <_ZThn8_N8touchgfx15PainterARGB8888D1Ev>:
 800f93c:	f1a0 0008 	sub.w	r0, r0, #8
 800f940:	e7e0      	b.n	800f904 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f942:	bf00      	nop

0800f944 <_ZN8touchgfx15PainterARGB8888D0Ev>:
 800f944:	b580      	push	{r7, lr}
 800f946:	b082      	sub	sp, #8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7ff ffd9 	bl	800f904 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800f952:	2114      	movs	r1, #20
 800f954:	6878      	ldr	r0, [r7, #4]
 800f956:	f019 f9a9 	bl	8028cac <_ZdlPvj>
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	4618      	mov	r0, r3
 800f95e:	3708      	adds	r7, #8
 800f960:	46bd      	mov	sp, r7
 800f962:	bd80      	pop	{r7, pc}

0800f964 <_ZThn8_N8touchgfx15PainterARGB8888D0Ev>:
 800f964:	f1a0 0008 	sub.w	r0, r0, #8
 800f968:	e7ec      	b.n	800f944 <_ZN8touchgfx15PainterARGB8888D0Ev>
	...

0800f96c <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
    {
 800f974:	4a06      	ldr	r2, [pc, #24]	; (800f990 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	601a      	str	r2, [r3, #0]
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	3304      	adds	r3, #4
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fe fec8 	bl	800e714 <_ZN8touchgfx9ContainerD1Ev>
    }
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	4618      	mov	r0, r3
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	0802f9c4 	.word	0x0802f9c4

0800f994 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800f994:	b580      	push	{r7, lr}
 800f996:	b082      	sub	sp, #8
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
    }
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f7ff ffe5 	bl	800f96c <_ZN8touchgfx6ScreenD1Ev>
 800f9a2:	213c      	movs	r1, #60	; 0x3c
 800f9a4:	6878      	ldr	r0, [r7, #4]
 800f9a6:	f019 f981 	bl	8028cac <_ZdlPvj>
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3708      	adds	r7, #8
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}

0800f9b4 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
    {
    }
 800f9bc:	bf00      	nop
 800f9be:	370c      	adds	r7, #12
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c6:	4770      	bx	lr

0800f9c8 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800f9c8:	b480      	push	{r7}
 800f9ca:	b083      	sub	sp, #12
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
    {
    }
 800f9d0:	bf00      	nop
 800f9d2:	370c      	adds	r7, #12
 800f9d4:	46bd      	mov	sp, r7
 800f9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9da:	4770      	bx	lr

0800f9dc <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800f9dc:	b480      	push	{r7}
 800f9de:	b083      	sub	sp, #12
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
    {
    }
 800f9e4:	bf00      	nop
 800f9e6:	370c      	adds	r7, #12
 800f9e8:	46bd      	mov	sp, r7
 800f9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ee:	4770      	bx	lr

0800f9f0 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800f9f0:	b480      	push	{r7}
 800f9f2:	b083      	sub	sp, #12
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
    {
    }
 800f9f8:	bf00      	nop
 800f9fa:	370c      	adds	r7, #12
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa02:	4770      	bx	lr

0800fa04 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800fa04:	b480      	push	{r7}
 800fa06:	b083      	sub	sp, #12
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	460b      	mov	r3, r1
 800fa0e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800fa10:	bf00      	nop
 800fa12:	370c      	adds	r7, #12
 800fa14:	46bd      	mov	sp, r7
 800fa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1a:	4770      	bx	lr

0800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b082      	sub	sp, #8
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
 800fa24:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	3304      	adds	r3, #4
 800fa2a:	6839      	ldr	r1, [r7, #0]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f005 fc33 	bl	8015298 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800fa32:	bf00      	nop
 800fa34:	3708      	adds	r7, #8
 800fa36:	46bd      	mov	sp, r7
 800fa38:	bd80      	pop	{r7, pc}

0800fa3a <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
    void setWildcard1(const Unicode::UnicodeChar* value)
 800fa3a:	b480      	push	{r7}
 800fa3c:	b083      	sub	sp, #12
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	6039      	str	r1, [r7, #0]
        wc1 = value;
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	683a      	ldr	r2, [r7, #0]
 800fa48:	649a      	str	r2, [r3, #72]	; 0x48
    }
 800fa4a:	bf00      	nop
 800fa4c:	370c      	adds	r7, #12
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa54:	4770      	bx	lr

0800fa56 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800fa56:	b580      	push	{r7, lr}
 800fa58:	b082      	sub	sp, #8
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
 800fa5e:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 800fa60:	6839      	ldr	r1, [r7, #0]
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7ff ffe9 	bl	800fa3a <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 800fa68:	bf00      	nop
 800fa6a:	3708      	adds	r7, #8
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}

0800fa70 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b082      	sub	sp, #8
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	6078      	str	r0, [r7, #4]
 800fa78:	4a05      	ldr	r2, [pc, #20]	; (800fa90 <_ZN7tempBoxD1Ev+0x20>)
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	601a      	str	r2, [r3, #0]
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	4618      	mov	r0, r3
 800fa82:	f7ff fe5b 	bl	800f73c <_ZN11tempBoxBaseD1Ev>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	3708      	adds	r7, #8
 800fa8c:	46bd      	mov	sp, r7
 800fa8e:	bd80      	pop	{r7, pc}
 800fa90:	0802ec78 	.word	0x0802ec78

0800fa94 <_ZN7tempBoxD0Ev>:
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b082      	sub	sp, #8
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	f7ff ffe7 	bl	800fa70 <_ZN7tempBoxD1Ev>
 800faa2:	21f8      	movs	r1, #248	; 0xf8
 800faa4:	6878      	ldr	r0, [r7, #4]
 800faa6:	f019 f901 	bl	8028cac <_ZdlPvj>
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	4618      	mov	r0, r3
 800faae:	3708      	adds	r7, #8
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b082      	sub	sp, #8
 800fab8:	af00      	add	r7, sp, #0
 800faba:	6078      	str	r0, [r7, #4]
 800fabc:	4a05      	ldr	r2, [pc, #20]	; (800fad4 <_ZN8alertBarD1Ev+0x20>)
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	601a      	str	r2, [r3, #0]
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	4618      	mov	r0, r3
 800fac6:	f7ff fae9 	bl	800f09c <_ZN12alertBarBaseD1Ev>
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	4618      	mov	r0, r3
 800face:	3708      	adds	r7, #8
 800fad0:	46bd      	mov	sp, r7
 800fad2:	bd80      	pop	{r7, pc}
 800fad4:	0802ebe4 	.word	0x0802ebe4

0800fad8 <_ZN8alertBarD0Ev>:
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7ff ffe7 	bl	800fab4 <_ZN8alertBarD1Ev>
 800fae6:	21ac      	movs	r1, #172	; 0xac
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f019 f8df 	bl	8028cac <_ZdlPvj>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b082      	sub	sp, #8
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	4a05      	ldr	r2, [pc, #20]	; (800fb18 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	601a      	str	r2, [r3, #0]
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	4618      	mov	r0, r3
 800fb0a:	f7ff ff2f 	bl	800f96c <_ZN8touchgfx6ScreenD1Ev>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	4618      	mov	r0, r3
 800fb12:	3708      	adds	r7, #8
 800fb14:	46bd      	mov	sp, r7
 800fb16:	bd80      	pop	{r7, pc}
 800fb18:	0802eafc 	.word	0x0802eafc

0800fb1c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	6078      	str	r0, [r7, #4]
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f7ff ffe7 	bl	800faf8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 800fb2a:	2140      	movs	r1, #64	; 0x40
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	f019 f8bd 	bl	8028cac <_ZdlPvj>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4618      	mov	r0, r3
 800fb36:	3708      	adds	r7, #8
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b082      	sub	sp, #8
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	4a33      	ldr	r2, [pc, #204]	; (800fc14 <_ZN12MainViewBaseD1Ev+0xd8>)
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	601a      	str	r2, [r3, #0]
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7ff fad9 	bl	800f108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	f203 7384 	addw	r3, r3, #1924	; 0x784
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f7ff fad3 	bl	800f108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 800fb68:	4618      	mov	r0, r3
 800fb6a:	f7ff ffa3 	bl	800fab4 <_ZN8alertBarD1Ev>
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 800fb74:	4618      	mov	r0, r3
 800fb76:	f7ff ff9d 	bl	800fab4 <_ZN8alertBarD1Ev>
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	f203 5334 	addw	r3, r3, #1332	; 0x534
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7ff ff75 	bl	800fa70 <_ZN7tempBoxD1Ev>
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7ff ff6f 	bl	800fa70 <_ZN7tempBoxD1Ev>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800fb98:	4618      	mov	r0, r3
 800fb9a:	f7ff ff69 	bl	800fa70 <_ZN7tempBoxD1Ev>
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800fba4:	4618      	mov	r0, r3
 800fba6:	f7ff ff63 	bl	800fa70 <_ZN7tempBoxD1Ev>
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f7ff faa9 	bl	800f108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7ff faa3 	bl	800f108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800fbc8:	4618      	mov	r0, r3
 800fbca:	f7ff fa9d 	bl	800f108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800fbd4:	4618      	mov	r0, r3
 800fbd6:	f7ff fe95 	bl	800f904 <_ZN8touchgfx15PainterARGB8888D1Ev>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	33e4      	adds	r3, #228	; 0xe4
 800fbde:	4618      	mov	r0, r3
 800fbe0:	f7ff fe6e 	bl	800f8c0 <_ZN8touchgfx4LineD1Ev>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	3398      	adds	r3, #152	; 0x98
 800fbe8:	4618      	mov	r0, r3
 800fbea:	f7ff fa8d 	bl	800f108 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	336c      	adds	r3, #108	; 0x6c
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fe ff28 	bl	800ea48 <_ZN8touchgfx3BoxD1Ev>
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	3340      	adds	r3, #64	; 0x40
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	f7fe ff23 	bl	800ea48 <_ZN8touchgfx3BoxD1Ev>
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff ff77 	bl	800faf8 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3708      	adds	r7, #8
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}
 800fc14:	0802eac4 	.word	0x0802eac4

0800fc18 <_ZN12MainViewBaseD0Ev>:
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b082      	sub	sp, #8
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f7ff ff8b 	bl	800fb3c <_ZN12MainViewBaseD1Ev>
 800fc26:	f243 7164 	movw	r1, #14180	; 0x3764
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f019 f83e 	bl	8028cac <_ZdlPvj>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	4618      	mov	r0, r3
 800fc34:	3708      	adds	r7, #8
 800fc36:	46bd      	mov	sp, r7
 800fc38:	bd80      	pop	{r7, pc}

0800fc3a <_ZN12MainViewBase9function1Ev>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 800fc3a:	b480      	push	{r7}
 800fc3c:	b083      	sub	sp, #12
 800fc3e:	af00      	add	r7, sp, #0
 800fc40:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 800fc42:	bf00      	nop
 800fc44:	370c      	adds	r7, #12
 800fc46:	46bd      	mov	sp, r7
 800fc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4c:	4770      	bx	lr
	...

0800fc50 <_ZN12MainViewBaseC1Ev>:
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


MainViewBase::MainViewBase()
 800fc50:	b590      	push	{r4, r7, lr}
 800fc52:	b0d3      	sub	sp, #332	; 0x14c
 800fc54:	af02      	add	r7, sp, #8
 800fc56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc5e:	6018      	str	r0, [r3, #0]
 800fc60:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	f001 f88e 	bl	8010d8c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 800fc70:	4ae0      	ldr	r2, [pc, #896]	; (800fff4 <_ZN12MainViewBaseC1Ev+0x3a4>)
 800fc72:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	601a      	str	r2, [r3, #0]
 800fc7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	3340      	adds	r3, #64	; 0x40
 800fc8a:	4618      	mov	r0, r3
 800fc8c:	f7fe feaa 	bl	800e9e4 <_ZN8touchgfx3BoxC1Ev>
 800fc90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fc94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	336c      	adds	r3, #108	; 0x6c
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fe fea1 	bl	800e9e4 <_ZN8touchgfx3BoxC1Ev>
 800fca2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fca6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	3398      	adds	r3, #152	; 0x98
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7ff f8e4 	bl	800ee7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800fcb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fcb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	33e4      	adds	r3, #228	; 0xe4
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f006 ff55 	bl	8016b70 <_ZN8touchgfx4LineC1Ev>
 800fcc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fcca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 800fcd4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800fcd8:	2100      	movs	r1, #0
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7fe fd3c 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800fce0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fce4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800fce8:	6819      	ldr	r1, [r3, #0]
 800fcea:	4620      	mov	r0, r4
 800fcec:	f7ff fbe2 	bl	800f4b4 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 800fcf0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fcf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7ff f8bc 	bl	800ee7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800fd04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 800fd12:	4618      	mov	r0, r3
 800fd14:	f7ff f8b2 	bl	800ee7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800fd18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800fd26:	4618      	mov	r0, r3
 800fd28:	f7ff f8a8 	bl	800ee7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800fd2c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 800fd3a:	4618      	mov	r0, r3
 800fd3c:	f001 faba 	bl	80112b4 <_ZN7tempBoxC1Ev>
 800fd40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 800fd4e:	4618      	mov	r0, r3
 800fd50:	f001 fab0 	bl	80112b4 <_ZN7tempBoxC1Ev>
 800fd54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 800fd62:	4618      	mov	r0, r3
 800fd64:	f001 faa6 	bl	80112b4 <_ZN7tempBoxC1Ev>
 800fd68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	f203 5334 	addw	r3, r3, #1332	; 0x534
 800fd76:	4618      	mov	r0, r3
 800fd78:	f001 fa9c 	bl	80112b4 <_ZN7tempBoxC1Ev>
 800fd7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	f001 fa74 	bl	8011278 <_ZN8alertBarC1Ev>
 800fd90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fd94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f001 fa6a 	bl	8011278 <_ZN8alertBarC1Ev>
 800fda4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fda8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	f203 7384 	addw	r3, r3, #1924	; 0x784
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7ff f862 	bl	800ee7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 800fdb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fdbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800fdc6:	4618      	mov	r0, r3
 800fdc8:	f7ff f858 	bl	800ee7c <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 800fdcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fdd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	f603 0384 	addw	r3, r3, #2180	; 0x884
 800fdda:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 800fdde:	4618      	mov	r0, r3
 800fde0:	f008 fc4a 	bl	8018678 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 800fde4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fde8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800fdf2:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800fdf6:	9300      	str	r3, [sp, #0]
 800fdf8:	f44f 7348 	mov.w	r3, #800	; 0x320
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	2100      	movs	r1, #0
 800fe00:	f7fe fcf7 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800fe04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fe08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800fe12:	2300      	movs	r3, #0
 800fe14:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 800fe18:	2300      	movs	r3, #0
 800fe1a:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 800fe1e:	2300      	movs	r3, #0
 800fe20:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 800fe24:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 800fe28:	041b      	lsls	r3, r3, #16
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 800fe30:	021b      	lsls	r3, r3, #8
 800fe32:	431a      	orrs	r2, r3
 800fe34:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 800fe38:	4313      	orrs	r3, r2
 800fe3a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fe3e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800fe42:	4611      	mov	r1, r2
 800fe44:	4618      	mov	r0, r3
 800fe46:	f7fe fc87 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800fe4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fe4e:	4619      	mov	r1, r3
 800fe50:	4620      	mov	r0, r4
 800fe52:	f7fe fdeb 	bl	800ea2c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 800fe56:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fe5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800fe64:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800fe68:	9300      	str	r3, [sp, #0]
 800fe6a:	f240 3325 	movw	r3, #805	; 0x325
 800fe6e:	2200      	movs	r2, #0
 800fe70:	2100      	movs	r1, #0
 800fe72:	f7fe fcbe 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800fe76:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fe7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800fe84:	2300      	movs	r3, #0
 800fe86:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 800fe90:	2300      	movs	r3, #0
 800fe92:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 800fe96:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800fe9a:	041b      	lsls	r3, r3, #16
 800fe9c:	461a      	mov	r2, r3
 800fe9e:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 800fea2:	021b      	lsls	r3, r3, #8
 800fea4:	431a      	orrs	r2, r3
 800fea6:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 800feaa:	4313      	orrs	r3, r2
 800feac:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800feb0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800feb4:	4611      	mov	r1, r2
 800feb6:	4618      	mov	r0, r3
 800feb8:	f7fe fc4e 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800febc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800fec0:	4619      	mov	r1, r3
 800fec2:	4620      	mov	r0, r4
 800fec4:	f7fe fdb2 	bl	800ea2c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 800fec8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fecc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	3398      	adds	r3, #152	; 0x98
 800fed4:	223c      	movs	r2, #60	; 0x3c
 800fed6:	f240 114b 	movw	r1, #331	; 0x14b
 800feda:	4618      	mov	r0, r3
 800fedc:	f7fe fcaa 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800fee0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800fee4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800feee:	23ff      	movs	r3, #255	; 0xff
 800fef0:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 800fef4:	23ff      	movs	r3, #255	; 0xff
 800fef6:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 800fefa:	23ff      	movs	r3, #255	; 0xff
 800fefc:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 800ff00:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800ff04:	041b      	lsls	r3, r3, #16
 800ff06:	461a      	mov	r2, r3
 800ff08:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 800ff0c:	021b      	lsls	r3, r3, #8
 800ff0e:	431a      	orrs	r2, r3
 800ff10:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 800ff14:	4313      	orrs	r3, r2
 800ff16:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ff1a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800ff1e:	4611      	mov	r1, r2
 800ff20:	4618      	mov	r0, r3
 800ff22:	f7fe fc19 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 800ff26:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800ff30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff34:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800ff38:	601a      	str	r2, [r3, #0]
        color = newColor;
 800ff3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ff3e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800ff42:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800ff46:	6812      	ldr	r2, [r2, #0]
 800ff48:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800ff4a:	bf00      	nop
    gearArea.setLinespacing(0);
 800ff4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff50:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	3398      	adds	r3, #152	; 0x98
 800ff58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        linespace = space;
 800ff62:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ff66:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800ff6a:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800ff6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	3384      	adds	r3, #132	; 0x84
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 800ff7a:	463a      	mov	r2, r7
 800ff7c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800ff80:	4610      	mov	r0, r2
 800ff82:	4798      	blx	r3
 800ff84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff88:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 800ff8c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ff90:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ff96:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_CBCX).getText());
 800ff98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800ff9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	f603 041c 	addw	r4, r3, #2076	; 0x81c
 800ffa6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ffaa:	210b      	movs	r1, #11
 800ffac:	4618      	mov	r0, r3
 800ffae:	f7fe fda7 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800ffb2:	4b11      	ldr	r3, [pc, #68]	; (800fff8 <_ZN12MainViewBaseC1Ev+0x3a8>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	2b00      	cmp	r3, #0
 800ffb8:	d105      	bne.n	800ffc6 <_ZN12MainViewBaseC1Ev+0x376>
 800ffba:	4b10      	ldr	r3, [pc, #64]	; (800fffc <_ZN12MainViewBaseC1Ev+0x3ac>)
 800ffbc:	4a10      	ldr	r2, [pc, #64]	; (8010000 <_ZN12MainViewBaseC1Ev+0x3b0>)
 800ffbe:	2160      	movs	r1, #96	; 0x60
 800ffc0:	4810      	ldr	r0, [pc, #64]	; (8010004 <_ZN12MainViewBaseC1Ev+0x3b4>)
 800ffc2:	f018 fea1 	bl	8028d08 <__assert_func>
 800ffc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ffca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        return typedTextId < numberOfTypedTexts;
 800ffce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ffd2:	889a      	ldrh	r2, [r3, #4]
 800ffd4:	4b0c      	ldr	r3, [pc, #48]	; (8010008 <_ZN12MainViewBaseC1Ev+0x3b8>)
 800ffd6:	881b      	ldrh	r3, [r3, #0]
 800ffd8:	429a      	cmp	r2, r3
 800ffda:	bf34      	ite	cc
 800ffdc:	2301      	movcc	r3, #1
 800ffde:	2300      	movcs	r3, #0
 800ffe0:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d114      	bne.n	8010010 <_ZN12MainViewBaseC1Ev+0x3c0>
 800ffe6:	4b09      	ldr	r3, [pc, #36]	; (801000c <_ZN12MainViewBaseC1Ev+0x3bc>)
 800ffe8:	4a05      	ldr	r2, [pc, #20]	; (8010000 <_ZN12MainViewBaseC1Ev+0x3b0>)
 800ffea:	2161      	movs	r1, #97	; 0x61
 800ffec:	4805      	ldr	r0, [pc, #20]	; (8010004 <_ZN12MainViewBaseC1Ev+0x3b4>)
 800ffee:	f018 fe8b 	bl	8028d08 <__assert_func>
 800fff2:	bf00      	nop
 800fff4:	0802eac4 	.word	0x0802eac4
 800fff8:	2003bf38 	.word	0x2003bf38
 800fffc:	0802c548 	.word	0x0802c548
 8010000:	0802c754 	.word	0x0802c754
 8010004:	0802c5c8 	.word	0x0802c5c8
 8010008:	2003bf3c 	.word	0x2003bf3c
 801000c:	0802c60c 	.word	0x0802c60c
 8010010:	bf00      	nop
        return texts->getText(typedTextId);
 8010012:	4bab      	ldr	r3, [pc, #684]	; (80102c0 <_ZN12MainViewBaseC1Ev+0x670>)
 8010014:	681a      	ldr	r2, [r3, #0]
 8010016:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801001a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801001e:	889b      	ldrh	r3, [r3, #4]
 8010020:	4619      	mov	r1, r3
 8010022:	4610      	mov	r0, r2
 8010024:	f001 f86c 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 8010028:	4603      	mov	r3, r0
 801002a:	bf00      	nop
 801002c:	4aa5      	ldr	r2, [pc, #660]	; (80102c4 <_ZN12MainViewBaseC1Ev+0x674>)
 801002e:	2102      	movs	r1, #2
 8010030:	4620      	mov	r0, r4
 8010032:	f00c ffa3 	bl	801cf7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010036:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801003a:	4618      	mov	r0, r3
 801003c:	f7fd f98c 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 8010040:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010044:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 801004e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 801005c:	4619      	mov	r1, r3
 801005e:	4610      	mov	r0, r2
 8010060:	f7ff fcf9 	bl	800fa56 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 8010064:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010068:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	3398      	adds	r3, #152	; 0x98
 8010070:	4618      	mov	r0, r3
 8010072:	f007 faa9 	bl	80175c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T6XW));
 8010076:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801007a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8010084:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010088:	2100      	movs	r1, #0
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe fd38 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
 8010090:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010094:	4619      	mov	r1, r3
 8010096:	4620      	mov	r0, r4
 8010098:	f007 fab6 	bl	8017608 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801009c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7fd f959 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 80100a6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80100aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 80100b4:	2314      	movs	r3, #20
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	2398      	movs	r3, #152	; 0x98
 80100ba:	228c      	movs	r2, #140	; 0x8c
 80100bc:	f240 1149 	movw	r1, #329	; 0x149
 80100c0:	f7fe fb97 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80100c4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80100c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 80100d2:	23ff      	movs	r3, #255	; 0xff
 80100d4:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 80100d8:	23ff      	movs	r3, #255	; 0xff
 80100da:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 80100de:	23ff      	movs	r3, #255	; 0xff
 80100e0:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 80100e4:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 80100e8:	041b      	lsls	r3, r3, #16
 80100ea:	461a      	mov	r2, r3
 80100ec:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 80100f0:	021b      	lsls	r3, r3, #8
 80100f2:	431a      	orrs	r2, r3
 80100f4:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 80100f8:	4313      	orrs	r3, r2
 80100fa:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80100fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010102:	4611      	mov	r1, r2
 8010104:	4618      	mov	r0, r3
 8010106:	f7fe fb27 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 801010a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801010e:	4619      	mov	r1, r3
 8010110:	4620      	mov	r0, r4
 8010112:	f7ff f9ed 	bl	800f4f0 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8010116:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801011a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 8010124:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801012c:	681b      	ldr	r3, [r3, #0]
 801012e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010132:	4619      	mov	r1, r3
 8010134:	4610      	mov	r0, r2
 8010136:	f7ff f8c6 	bl	800f2c6 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(0, 0);
 801013a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801013e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	33e4      	adds	r3, #228	; 0xe4
 8010146:	2200      	movs	r2, #0
 8010148:	2100      	movs	r1, #0
 801014a:	4618      	mov	r0, r3
 801014c:	f7ff fb32 	bl	800f7b4 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 8010150:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010154:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	33e4      	adds	r3, #228	; 0xe4
 801015c:	2200      	movs	r2, #0
 801015e:	2196      	movs	r1, #150	; 0x96
 8010160:	4618      	mov	r0, r3
 8010162:	f7ff fb4d 	bl	800f800 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 8010166:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801016a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	33e4      	adds	r3, #228	; 0xe4
 8010172:	2104      	movs	r1, #4
 8010174:	4618      	mov	r0, r3
 8010176:	f7ff fb69 	bl	800f84c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 801017a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801017e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	33e4      	adds	r3, #228	; 0xe4
 8010186:	2101      	movs	r1, #1
 8010188:	4618      	mov	r0, r3
 801018a:	f006 fe1d 	bl	8016dc8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 801018e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010192:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 801019c:	2345      	movs	r3, #69	; 0x45
 801019e:	9300      	str	r3, [sp, #0]
 80101a0:	23d4      	movs	r3, #212	; 0xd4
 80101a2:	2247      	movs	r2, #71	; 0x47
 80101a4:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80101a8:	f7fe fb23 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 80101ac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80101b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 80101ba:	2300      	movs	r3, #0
 80101bc:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 80101c0:	2366      	movs	r3, #102	; 0x66
 80101c2:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 80101c6:	23ff      	movs	r3, #255	; 0xff
 80101c8:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 80101cc:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 80101d0:	041b      	lsls	r3, r3, #16
 80101d2:	461a      	mov	r2, r3
 80101d4:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 80101d8:	021b      	lsls	r3, r3, #8
 80101da:	431a      	orrs	r2, r3
 80101dc:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 80101e0:	4313      	orrs	r3, r2
 80101e2:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80101e6:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80101ea:	4611      	mov	r1, r2
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fe fab3 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 80101f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80101f6:	461a      	mov	r2, r3
 80101f8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80101fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010200:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8010204:	601a      	str	r2, [r3, #0]
        color = newColor;
 8010206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801020a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801020e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8010212:	6812      	ldr	r2, [r2, #0]
 8010214:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010216:	bf00      	nop
    rpmArea.setLinespacing(0);
 8010218:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801021c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010226:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801022a:	2300      	movs	r3, #0
 801022c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        linespace = space;
 8010230:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010234:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 8010238:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801023a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	3384      	adds	r3, #132	; 0x84
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8010248:	463a      	mov	r2, r7
 801024a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801024e:	4610      	mov	r0, r2
 8010250:	4798      	blx	r3
 8010252:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010256:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 801025a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801025e:	ca07      	ldmia	r2, {r0, r1, r2}
 8010260:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010264:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_BKZT).getText());
 8010266:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801026a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 8010274:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010278:	210a      	movs	r1, #10
 801027a:	4618      	mov	r0, r3
 801027c:	f7fe fc40 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010280:	4b11      	ldr	r3, [pc, #68]	; (80102c8 <_ZN12MainViewBaseC1Ev+0x678>)
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d105      	bne.n	8010294 <_ZN12MainViewBaseC1Ev+0x644>
 8010288:	4b10      	ldr	r3, [pc, #64]	; (80102cc <_ZN12MainViewBaseC1Ev+0x67c>)
 801028a:	4a11      	ldr	r2, [pc, #68]	; (80102d0 <_ZN12MainViewBaseC1Ev+0x680>)
 801028c:	2160      	movs	r1, #96	; 0x60
 801028e:	4811      	ldr	r0, [pc, #68]	; (80102d4 <_ZN12MainViewBaseC1Ev+0x684>)
 8010290:	f018 fd3a 	bl	8028d08 <__assert_func>
 8010294:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010298:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        return typedTextId < numberOfTypedTexts;
 801029c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80102a0:	889a      	ldrh	r2, [r3, #4]
 80102a2:	4b0d      	ldr	r3, [pc, #52]	; (80102d8 <_ZN12MainViewBaseC1Ev+0x688>)
 80102a4:	881b      	ldrh	r3, [r3, #0]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	bf34      	ite	cc
 80102aa:	2301      	movcc	r3, #1
 80102ac:	2300      	movcs	r3, #0
 80102ae:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d115      	bne.n	80102e0 <_ZN12MainViewBaseC1Ev+0x690>
 80102b4:	4b09      	ldr	r3, [pc, #36]	; (80102dc <_ZN12MainViewBaseC1Ev+0x68c>)
 80102b6:	4a06      	ldr	r2, [pc, #24]	; (80102d0 <_ZN12MainViewBaseC1Ev+0x680>)
 80102b8:	2161      	movs	r1, #97	; 0x61
 80102ba:	4806      	ldr	r0, [pc, #24]	; (80102d4 <_ZN12MainViewBaseC1Ev+0x684>)
 80102bc:	f018 fd24 	bl	8028d08 <__assert_func>
 80102c0:	2003bf44 	.word	0x2003bf44
 80102c4:	0802c78c 	.word	0x0802c78c
 80102c8:	2003bf38 	.word	0x2003bf38
 80102cc:	0802c548 	.word	0x0802c548
 80102d0:	0802c754 	.word	0x0802c754
 80102d4:	0802c5c8 	.word	0x0802c5c8
 80102d8:	2003bf3c 	.word	0x2003bf3c
 80102dc:	0802c60c 	.word	0x0802c60c
 80102e0:	bf00      	nop
        return texts->getText(typedTextId);
 80102e2:	4bd7      	ldr	r3, [pc, #860]	; (8010640 <_ZN12MainViewBaseC1Ev+0x9f0>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80102ea:	4611      	mov	r1, r2
 80102ec:	4618      	mov	r0, r3
 80102ee:	f000 ff07 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 80102f2:	4603      	mov	r3, r0
 80102f4:	bf00      	nop
 80102f6:	4ad3      	ldr	r2, [pc, #844]	; (8010644 <_ZN12MainViewBaseC1Ev+0x9f4>)
 80102f8:	210a      	movs	r1, #10
 80102fa:	4620      	mov	r0, r4
 80102fc:	f00c fe3e 	bl	801cf7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010300:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010304:	4618      	mov	r0, r3
 8010306:	f7fd f827 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 801030a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801030e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8010318:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801031c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8010326:	4619      	mov	r1, r3
 8010328:	4610      	mov	r0, r2
 801032a:	f7ff fb94 	bl	800fa56 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W8VI));
 801032e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010332:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 801033c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010340:	2101      	movs	r1, #1
 8010342:	4618      	mov	r0, r3
 8010344:	f7fe fbdc 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
 8010348:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801034c:	4619      	mov	r1, r3
 801034e:	4620      	mov	r0, r4
 8010350:	f007 f95a 	bl	8017608 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010354:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8010358:	4618      	mov	r0, r3
 801035a:	f7fc fffd 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 240, 49);
 801035e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010362:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
 801036c:	2331      	movs	r3, #49	; 0x31
 801036e:	9300      	str	r3, [sp, #0]
 8010370:	23f0      	movs	r3, #240	; 0xf0
 8010372:	2252      	movs	r2, #82	; 0x52
 8010374:	210e      	movs	r1, #14
 8010376:	f7fe fa3c 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801037a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801037e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 8010388:	23ff      	movs	r3, #255	; 0xff
 801038a:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 801038e:	23ff      	movs	r3, #255	; 0xff
 8010390:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 8010394:	23ff      	movs	r3, #255	; 0xff
 8010396:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 801039a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 801039e:	041b      	lsls	r3, r3, #16
 80103a0:	461a      	mov	r2, r3
 80103a2:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80103a6:	021b      	lsls	r3, r3, #8
 80103a8:	431a      	orrs	r2, r3
 80103aa:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80103ae:	4313      	orrs	r3, r2
 80103b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80103b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80103b8:	4611      	mov	r1, r2
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7fe f9cc 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 80103c0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80103c4:	461a      	mov	r2, r3
 80103c6:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
 80103ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80103ce:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80103d2:	601a      	str	r2, [r3, #0]
        color = newColor;
 80103d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80103d8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80103dc:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80103e0:	6812      	ldr	r2, [r2, #0]
 80103e2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80103e4:	bf00      	nop
    battArea.setLinespacing(0);
 80103e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80103ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80103f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80103f8:	2300      	movs	r3, #0
 80103fa:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
        linespace = space;
 80103fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010402:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8010406:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8010408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	3384      	adds	r3, #132	; 0x84
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8010416:	463a      	mov	r2, r7
 8010418:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 801041c:	4610      	mov	r0, r2
 801041e:	4798      	blx	r3
 8010420:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010424:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010428:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801042c:	ca07      	ldmia	r2, {r0, r1, r2}
 801042e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010432:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YJO6).getText());
 8010434:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010438:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801043c:	681b      	ldr	r3, [r3, #0]
 801043e:	f603 0434 	addw	r4, r3, #2100	; 0x834
 8010442:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010446:	2108      	movs	r1, #8
 8010448:	4618      	mov	r0, r3
 801044a:	f7fe fb59 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801044e:	4b7e      	ldr	r3, [pc, #504]	; (8010648 <_ZN12MainViewBaseC1Ev+0x9f8>)
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d105      	bne.n	8010462 <_ZN12MainViewBaseC1Ev+0x812>
 8010456:	4b7d      	ldr	r3, [pc, #500]	; (801064c <_ZN12MainViewBaseC1Ev+0x9fc>)
 8010458:	4a7d      	ldr	r2, [pc, #500]	; (8010650 <_ZN12MainViewBaseC1Ev+0xa00>)
 801045a:	2160      	movs	r1, #96	; 0x60
 801045c:	487d      	ldr	r0, [pc, #500]	; (8010654 <_ZN12MainViewBaseC1Ev+0xa04>)
 801045e:	f018 fc53 	bl	8028d08 <__assert_func>
 8010462:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010466:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        return typedTextId < numberOfTypedTexts;
 801046a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801046e:	889a      	ldrh	r2, [r3, #4]
 8010470:	4b79      	ldr	r3, [pc, #484]	; (8010658 <_ZN12MainViewBaseC1Ev+0xa08>)
 8010472:	881b      	ldrh	r3, [r3, #0]
 8010474:	429a      	cmp	r2, r3
 8010476:	bf34      	ite	cc
 8010478:	2301      	movcc	r3, #1
 801047a:	2300      	movcs	r3, #0
 801047c:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 801047e:	2b00      	cmp	r3, #0
 8010480:	d105      	bne.n	801048e <_ZN12MainViewBaseC1Ev+0x83e>
 8010482:	4b76      	ldr	r3, [pc, #472]	; (801065c <_ZN12MainViewBaseC1Ev+0xa0c>)
 8010484:	4a72      	ldr	r2, [pc, #456]	; (8010650 <_ZN12MainViewBaseC1Ev+0xa00>)
 8010486:	2161      	movs	r1, #97	; 0x61
 8010488:	4872      	ldr	r0, [pc, #456]	; (8010654 <_ZN12MainViewBaseC1Ev+0xa04>)
 801048a:	f018 fc3d 	bl	8028d08 <__assert_func>
 801048e:	bf00      	nop
        return texts->getText(typedTextId);
 8010490:	4b6b      	ldr	r3, [pc, #428]	; (8010640 <_ZN12MainViewBaseC1Ev+0x9f0>)
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8010498:	4611      	mov	r1, r2
 801049a:	4618      	mov	r0, r3
 801049c:	f000 fe30 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 80104a0:	4603      	mov	r3, r0
 80104a2:	bf00      	nop
 80104a4:	4a67      	ldr	r2, [pc, #412]	; (8010644 <_ZN12MainViewBaseC1Ev+0x9f4>)
 80104a6:	210a      	movs	r1, #10
 80104a8:	4620      	mov	r0, r4
 80104aa:	f00c fd67 	bl	801cf7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80104ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80104b2:	4618      	mov	r0, r3
 80104b4:	f7fc ff50 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 80104b8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80104bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 80104c6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80104ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f603 0334 	addw	r3, r3, #2100	; 0x834
 80104d4:	4619      	mov	r1, r3
 80104d6:	4610      	mov	r0, r2
 80104d8:	f7ff fabd 	bl	800fa56 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X1RQ));
 80104dc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80104e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 80104ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80104ee:	2102      	movs	r1, #2
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7fe fb05 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
 80104f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80104fa:	4619      	mov	r1, r3
 80104fc:	4620      	mov	r0, r4
 80104fe:	f007 f883 	bl	8017608 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010502:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010506:	4618      	mov	r0, r3
 8010508:	f7fc ff26 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>

    oilPressArea.setPosition(544, 82, 240, 49);
 801050c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010510:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	f503 7000 	add.w	r0, r3, #512	; 0x200
 801051a:	2331      	movs	r3, #49	; 0x31
 801051c:	9300      	str	r3, [sp, #0]
 801051e:	23f0      	movs	r3, #240	; 0xf0
 8010520:	2252      	movs	r2, #82	; 0x52
 8010522:	f44f 7108 	mov.w	r1, #544	; 0x220
 8010526:	f7fe f964 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilPressArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801052a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801052e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f503 7400 	add.w	r4, r3, #512	; 0x200
 8010538:	23ff      	movs	r3, #255	; 0xff
 801053a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 801053e:	23ff      	movs	r3, #255	; 0xff
 8010540:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8010544:	23ff      	movs	r3, #255	; 0xff
 8010546:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 801054a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801054e:	041b      	lsls	r3, r3, #16
 8010550:	461a      	mov	r2, r3
 8010552:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8010556:	021b      	lsls	r3, r3, #8
 8010558:	431a      	orrs	r2, r3
 801055a:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 801055e:	4313      	orrs	r3, r2
 8010560:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010564:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8010568:	4611      	mov	r1, r2
 801056a:	4618      	mov	r0, r3
 801056c:	f7fe f8f4 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 8010570:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010574:	461a      	mov	r2, r3
 8010576:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 801057a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801057e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8010582:	601a      	str	r2, [r3, #0]
        color = newColor;
 8010584:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010588:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801058c:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 8010590:	6812      	ldr	r2, [r2, #0]
 8010592:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010594:	bf00      	nop
    oilPressArea.setLinespacing(0);
 8010596:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801059a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80105a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80105a8:	2300      	movs	r3, #0
 80105aa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        linespace = space;
 80105ae:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80105b2:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80105b6:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80105b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	3384      	adds	r3, #132	; 0x84
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 80105c6:	463a      	mov	r2, r7
 80105c8:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80105cc:	4610      	mov	r0, r2
 80105ce:	4798      	blx	r3
 80105d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80105d4:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80105d8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80105dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80105de:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80105e2:	bf00      	nop
    Unicode::snprintf(oilPressAreaBuffer, OILPRESSAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_R4GH).getText());
 80105e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80105e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f603 0448 	addw	r4, r3, #2120	; 0x848
 80105f2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80105f6:	210d      	movs	r1, #13
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7fe fa81 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80105fe:	4b12      	ldr	r3, [pc, #72]	; (8010648 <_ZN12MainViewBaseC1Ev+0x9f8>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	2b00      	cmp	r3, #0
 8010604:	d105      	bne.n	8010612 <_ZN12MainViewBaseC1Ev+0x9c2>
 8010606:	4b11      	ldr	r3, [pc, #68]	; (801064c <_ZN12MainViewBaseC1Ev+0x9fc>)
 8010608:	4a11      	ldr	r2, [pc, #68]	; (8010650 <_ZN12MainViewBaseC1Ev+0xa00>)
 801060a:	2160      	movs	r1, #96	; 0x60
 801060c:	4811      	ldr	r0, [pc, #68]	; (8010654 <_ZN12MainViewBaseC1Ev+0xa04>)
 801060e:	f018 fb7b 	bl	8028d08 <__assert_func>
 8010612:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010616:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        return typedTextId < numberOfTypedTexts;
 801061a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801061e:	889a      	ldrh	r2, [r3, #4]
 8010620:	4b0d      	ldr	r3, [pc, #52]	; (8010658 <_ZN12MainViewBaseC1Ev+0xa08>)
 8010622:	881b      	ldrh	r3, [r3, #0]
 8010624:	429a      	cmp	r2, r3
 8010626:	bf34      	ite	cc
 8010628:	2301      	movcc	r3, #1
 801062a:	2300      	movcs	r3, #0
 801062c:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 801062e:	2b00      	cmp	r3, #0
 8010630:	d116      	bne.n	8010660 <_ZN12MainViewBaseC1Ev+0xa10>
 8010632:	4b0a      	ldr	r3, [pc, #40]	; (801065c <_ZN12MainViewBaseC1Ev+0xa0c>)
 8010634:	4a06      	ldr	r2, [pc, #24]	; (8010650 <_ZN12MainViewBaseC1Ev+0xa00>)
 8010636:	2161      	movs	r1, #97	; 0x61
 8010638:	4806      	ldr	r0, [pc, #24]	; (8010654 <_ZN12MainViewBaseC1Ev+0xa04>)
 801063a:	f018 fb65 	bl	8028d08 <__assert_func>
 801063e:	bf00      	nop
 8010640:	2003bf44 	.word	0x2003bf44
 8010644:	0802c78c 	.word	0x0802c78c
 8010648:	2003bf38 	.word	0x2003bf38
 801064c:	0802c548 	.word	0x0802c548
 8010650:	0802c754 	.word	0x0802c754
 8010654:	0802c5c8 	.word	0x0802c5c8
 8010658:	2003bf3c 	.word	0x2003bf3c
 801065c:	0802c60c 	.word	0x0802c60c
 8010660:	bf00      	nop
        return texts->getText(typedTextId);
 8010662:	4b91      	ldr	r3, [pc, #580]	; (80108a8 <_ZN12MainViewBaseC1Ev+0xc58>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801066a:	4611      	mov	r1, r2
 801066c:	4618      	mov	r0, r3
 801066e:	f000 fd47 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 8010672:	4603      	mov	r3, r0
 8010674:	bf00      	nop
 8010676:	4a8d      	ldr	r2, [pc, #564]	; (80108ac <_ZN12MainViewBaseC1Ev+0xc5c>)
 8010678:	210a      	movs	r1, #10
 801067a:	4620      	mov	r0, r4
 801067c:	f00c fc7e 	bl	801cf7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010680:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010684:	4618      	mov	r0, r3
 8010686:	f7fc fe67 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>
    oilPressArea.setWildcard(oilPressAreaBuffer);
 801068a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801068e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	f503 7200 	add.w	r2, r3, #512	; 0x200
 8010698:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801069c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80106a6:	4619      	mov	r1, r3
 80106a8:	4610      	mov	r0, r2
 80106aa:	f7ff f9d4 	bl	800fa56 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilPressArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_52EE));
 80106ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f503 7400 	add.w	r4, r3, #512	; 0x200
 80106bc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80106c0:	2103      	movs	r1, #3
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7fe fa1c 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
 80106c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80106cc:	4619      	mov	r1, r3
 80106ce:	4620      	mov	r0, r4
 80106d0:	f006 ff9a 	bl	8017608 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80106d4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80106d8:	4618      	mov	r0, r3
 80106da:	f7fc fe3d 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 80106de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80106ec:	22f8      	movs	r2, #248	; 0xf8
 80106ee:	210b      	movs	r1, #11
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7fe f89f 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 80106f6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80106fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8010704:	f240 1249 	movw	r2, #329	; 0x149
 8010708:	210b      	movs	r1, #11
 801070a:	4618      	mov	r0, r3
 801070c:	f7fe f892 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 8010710:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801071e:	22f8      	movs	r2, #248	; 0xf8
 8010720:	f240 213a 	movw	r1, #570	; 0x23a
 8010724:	4618      	mov	r0, r3
 8010726:	f7fe f885 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 801072a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801072e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010738:	f240 1249 	movw	r2, #329	; 0x149
 801073c:	f240 213a 	movw	r1, #570	; 0x23a
 8010740:	4618      	mov	r0, r3
 8010742:	f7fe f877 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8010746:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801074a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8010754:	2200      	movs	r2, #0
 8010756:	2100      	movs	r1, #0
 8010758:	4618      	mov	r0, r3
 801075a:	f7fe f86b 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 801075e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010762:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010766:	681b      	ldr	r3, [r3, #0]
 8010768:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 801076c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8010770:	2100      	movs	r1, #0
 8010772:	4618      	mov	r0, r3
 8010774:	f7fe f85e 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 8010778:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801077c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	f203 7084 	addw	r0, r3, #1924	; 0x784
 8010786:	2331      	movs	r3, #49	; 0x31
 8010788:	9300      	str	r3, [sp, #0]
 801078a:	23ee      	movs	r3, #238	; 0xee
 801078c:	2296      	movs	r2, #150	; 0x96
 801078e:	210e      	movs	r1, #14
 8010790:	f7fe f82f 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010794:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010798:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f203 7484 	addw	r4, r3, #1924	; 0x784
 80107a2:	23ff      	movs	r3, #255	; 0xff
 80107a4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80107a8:	23ff      	movs	r3, #255	; 0xff
 80107aa:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 80107ae:	23ff      	movs	r3, #255	; 0xff
 80107b0:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 80107b4:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80107b8:	041b      	lsls	r3, r3, #16
 80107ba:	461a      	mov	r2, r3
 80107bc:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80107c0:	021b      	lsls	r3, r3, #8
 80107c2:	431a      	orrs	r2, r3
 80107c4:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 80107c8:	4313      	orrs	r3, r2
 80107ca:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80107ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80107d2:	4611      	mov	r1, r2
 80107d4:	4618      	mov	r0, r3
 80107d6:	f7fd ffbf 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 80107da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80107de:	461a      	mov	r2, r3
 80107e0:	f8c7 411c 	str.w	r4, [r7, #284]	; 0x11c
 80107e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80107e8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80107ec:	601a      	str	r2, [r3, #0]
        color = newColor;
 80107ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80107f2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80107f6:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80107fa:	6812      	ldr	r2, [r2, #0]
 80107fc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80107fe:	bf00      	nop
    cltArea.setLinespacing(0);
 8010800:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	f203 7384 	addw	r3, r3, #1924	; 0x784
 801080e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8010812:	2300      	movs	r3, #0
 8010814:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
        linespace = space;
 8010818:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801081c:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8010820:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8010822:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	3384      	adds	r3, #132	; 0x84
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
 8010830:	463a      	mov	r2, r7
 8010832:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8010836:	4610      	mov	r0, r2
 8010838:	4798      	blx	r3
 801083a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801083e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010842:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010846:	ca07      	ldmia	r2, {r0, r1, r2}
 8010848:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801084c:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_A40Q).getText());
 801084e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010852:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	f603 045c 	addw	r4, r3, #2140	; 0x85c
 801085c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010860:	2109      	movs	r1, #9
 8010862:	4618      	mov	r0, r3
 8010864:	f7fe f94c 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010868:	4b11      	ldr	r3, [pc, #68]	; (80108b0 <_ZN12MainViewBaseC1Ev+0xc60>)
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d105      	bne.n	801087c <_ZN12MainViewBaseC1Ev+0xc2c>
 8010870:	4b10      	ldr	r3, [pc, #64]	; (80108b4 <_ZN12MainViewBaseC1Ev+0xc64>)
 8010872:	4a11      	ldr	r2, [pc, #68]	; (80108b8 <_ZN12MainViewBaseC1Ev+0xc68>)
 8010874:	2160      	movs	r1, #96	; 0x60
 8010876:	4811      	ldr	r0, [pc, #68]	; (80108bc <_ZN12MainViewBaseC1Ev+0xc6c>)
 8010878:	f018 fa46 	bl	8028d08 <__assert_func>
 801087c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8010880:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        return typedTextId < numberOfTypedTexts;
 8010884:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010888:	889a      	ldrh	r2, [r3, #4]
 801088a:	4b0d      	ldr	r3, [pc, #52]	; (80108c0 <_ZN12MainViewBaseC1Ev+0xc70>)
 801088c:	881b      	ldrh	r3, [r3, #0]
 801088e:	429a      	cmp	r2, r3
 8010890:	bf34      	ite	cc
 8010892:	2301      	movcc	r3, #1
 8010894:	2300      	movcs	r3, #0
 8010896:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8010898:	2b00      	cmp	r3, #0
 801089a:	d115      	bne.n	80108c8 <_ZN12MainViewBaseC1Ev+0xc78>
 801089c:	4b09      	ldr	r3, [pc, #36]	; (80108c4 <_ZN12MainViewBaseC1Ev+0xc74>)
 801089e:	4a06      	ldr	r2, [pc, #24]	; (80108b8 <_ZN12MainViewBaseC1Ev+0xc68>)
 80108a0:	2161      	movs	r1, #97	; 0x61
 80108a2:	4806      	ldr	r0, [pc, #24]	; (80108bc <_ZN12MainViewBaseC1Ev+0xc6c>)
 80108a4:	f018 fa30 	bl	8028d08 <__assert_func>
 80108a8:	2003bf44 	.word	0x2003bf44
 80108ac:	0802c78c 	.word	0x0802c78c
 80108b0:	2003bf38 	.word	0x2003bf38
 80108b4:	0802c548 	.word	0x0802c548
 80108b8:	0802c754 	.word	0x0802c754
 80108bc:	0802c5c8 	.word	0x0802c5c8
 80108c0:	2003bf3c 	.word	0x2003bf3c
 80108c4:	0802c60c 	.word	0x0802c60c
 80108c8:	bf00      	nop
        return texts->getText(typedTextId);
 80108ca:	4b6b      	ldr	r3, [pc, #428]	; (8010a78 <_ZN12MainViewBaseC1Ev+0xe28>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80108d2:	4611      	mov	r1, r2
 80108d4:	4618      	mov	r0, r3
 80108d6:	f000 fc13 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 80108da:	4603      	mov	r3, r0
 80108dc:	bf00      	nop
 80108de:	4a67      	ldr	r2, [pc, #412]	; (8010a7c <_ZN12MainViewBaseC1Ev+0xe2c>)
 80108e0:	210a      	movs	r1, #10
 80108e2:	4620      	mov	r0, r4
 80108e4:	f00c fb4a 	bl	801cf7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80108e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80108ec:	4618      	mov	r0, r3
 80108ee:	f7fc fd33 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 80108f2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80108f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80108fa:	681b      	ldr	r3, [r3, #0]
 80108fc:	f203 7284 	addw	r2, r3, #1924	; 0x784
 8010900:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010904:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010908:	681b      	ldr	r3, [r3, #0]
 801090a:	f603 035c 	addw	r3, r3, #2140	; 0x85c
 801090e:	4619      	mov	r1, r3
 8010910:	4610      	mov	r0, r2
 8010912:	f7ff f8a0 	bl	800fa56 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8EGU));
 8010916:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801091a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	f203 7484 	addw	r4, r3, #1924	; 0x784
 8010924:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010928:	2107      	movs	r1, #7
 801092a:	4618      	mov	r0, r3
 801092c:	f7fe f8e8 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
 8010930:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010934:	4619      	mov	r1, r3
 8010936:	4620      	mov	r0, r4
 8010938:	f006 fe66 	bl	8017608 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801093c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010940:	4618      	mov	r0, r3
 8010942:	f7fc fd09 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>

    oilTempArea.setPosition(544, 150, 240, 49);
 8010946:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801094a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f503 60fa 	add.w	r0, r3, #2000	; 0x7d0
 8010954:	2331      	movs	r3, #49	; 0x31
 8010956:	9300      	str	r3, [sp, #0]
 8010958:	23f0      	movs	r3, #240	; 0xf0
 801095a:	2296      	movs	r2, #150	; 0x96
 801095c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8010960:	f7fd ff47 	bl	800e7f2 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilTempArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010964:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801096c:	681b      	ldr	r3, [r3, #0]
 801096e:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8010972:	23ff      	movs	r3, #255	; 0xff
 8010974:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 8010978:	23ff      	movs	r3, #255	; 0xff
 801097a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 801097e:	23ff      	movs	r3, #255	; 0xff
 8010980:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 8010984:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8010988:	041b      	lsls	r3, r3, #16
 801098a:	461a      	mov	r2, r3
 801098c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8010990:	021b      	lsls	r3, r3, #8
 8010992:	431a      	orrs	r2, r3
 8010994:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 8010998:	4313      	orrs	r3, r2
 801099a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801099e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80109a2:	4611      	mov	r1, r2
 80109a4:	4618      	mov	r0, r3
 80109a6:	f7fd fed7 	bl	800e758 <_ZN8touchgfx9colortypeC1Em>
 80109aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109ae:	461a      	mov	r2, r3
 80109b0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 80109b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80109b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80109bc:	601a      	str	r2, [r3, #0]
        color = newColor;
 80109be:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80109c2:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80109c6:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 80109ca:	6812      	ldr	r2, [r2, #0]
 80109cc:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80109ce:	bf00      	nop
    oilTempArea.setLinespacing(0);
 80109d0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80109d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80109de:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80109e2:	2300      	movs	r3, #0
 80109e4:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
        linespace = space;
 80109e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80109ec:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 80109f0:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 80109f2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	3384      	adds	r3, #132	; 0x84
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8010a00:	463a      	mov	r2, r7
 8010a02:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8010a06:	4610      	mov	r0, r2
 8010a08:	4798      	blx	r3
 8010a0a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a0e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010a12:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010a16:	ca07      	ldmia	r2, {r0, r1, r2}
 8010a18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010a1c:	bf00      	nop
    Unicode::snprintf(oilTempAreaBuffer, OILTEMPAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7JNZ).getText());
 8010a1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	f503 6407 	add.w	r4, r3, #2160	; 0x870
 8010a2c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010a30:	210e      	movs	r1, #14
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7fe f864 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010a38:	4b11      	ldr	r3, [pc, #68]	; (8010a80 <_ZN12MainViewBaseC1Ev+0xe30>)
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d105      	bne.n	8010a4c <_ZN12MainViewBaseC1Ev+0xdfc>
 8010a40:	4b10      	ldr	r3, [pc, #64]	; (8010a84 <_ZN12MainViewBaseC1Ev+0xe34>)
 8010a42:	4a11      	ldr	r2, [pc, #68]	; (8010a88 <_ZN12MainViewBaseC1Ev+0xe38>)
 8010a44:	2160      	movs	r1, #96	; 0x60
 8010a46:	4811      	ldr	r0, [pc, #68]	; (8010a8c <_ZN12MainViewBaseC1Ev+0xe3c>)
 8010a48:	f018 f95e 	bl	8028d08 <__assert_func>
 8010a4c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010a50:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        return typedTextId < numberOfTypedTexts;
 8010a54:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8010a58:	889a      	ldrh	r2, [r3, #4]
 8010a5a:	4b0d      	ldr	r3, [pc, #52]	; (8010a90 <_ZN12MainViewBaseC1Ev+0xe40>)
 8010a5c:	881b      	ldrh	r3, [r3, #0]
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	bf34      	ite	cc
 8010a62:	2301      	movcc	r3, #1
 8010a64:	2300      	movcs	r3, #0
 8010a66:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d115      	bne.n	8010a98 <_ZN12MainViewBaseC1Ev+0xe48>
 8010a6c:	4b09      	ldr	r3, [pc, #36]	; (8010a94 <_ZN12MainViewBaseC1Ev+0xe44>)
 8010a6e:	4a06      	ldr	r2, [pc, #24]	; (8010a88 <_ZN12MainViewBaseC1Ev+0xe38>)
 8010a70:	2161      	movs	r1, #97	; 0x61
 8010a72:	4806      	ldr	r0, [pc, #24]	; (8010a8c <_ZN12MainViewBaseC1Ev+0xe3c>)
 8010a74:	f018 f948 	bl	8028d08 <__assert_func>
 8010a78:	2003bf44 	.word	0x2003bf44
 8010a7c:	0802c78c 	.word	0x0802c78c
 8010a80:	2003bf38 	.word	0x2003bf38
 8010a84:	0802c548 	.word	0x0802c548
 8010a88:	0802c754 	.word	0x0802c754
 8010a8c:	0802c5c8 	.word	0x0802c5c8
 8010a90:	2003bf3c 	.word	0x2003bf3c
 8010a94:	0802c60c 	.word	0x0802c60c
 8010a98:	bf00      	nop
        return texts->getText(typedTextId);
 8010a9a:	4b9a      	ldr	r3, [pc, #616]	; (8010d04 <_ZN12MainViewBaseC1Ev+0x10b4>)
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8010aa2:	4611      	mov	r1, r2
 8010aa4:	4618      	mov	r0, r3
 8010aa6:	f000 fb2b 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 8010aaa:	4603      	mov	r3, r0
 8010aac:	bf00      	nop
 8010aae:	4a96      	ldr	r2, [pc, #600]	; (8010d08 <_ZN12MainViewBaseC1Ev+0x10b8>)
 8010ab0:	210a      	movs	r1, #10
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f00c fa62 	bl	801cf7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010ab8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8010abc:	4618      	mov	r0, r3
 8010abe:	f7fc fc4b 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>
    oilTempArea.setWildcard(oilTempAreaBuffer);
 8010ac2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ac6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8010ad0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ad4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ad8:	681b      	ldr	r3, [r3, #0]
 8010ada:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 8010ade:	4619      	mov	r1, r3
 8010ae0:	4610      	mov	r0, r2
 8010ae2:	f7fe ffb8 	bl	800fa56 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilTempArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ILXZ));
 8010ae6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8010af4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010af8:	210c      	movs	r1, #12
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7fe f800 	bl	800eb00 <_ZN8touchgfx9TypedTextC1Et>
 8010b00:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010b04:	4619      	mov	r1, r3
 8010b06:	4620      	mov	r0, r4
 8010b08:	f006 fd7e 	bl	8017608 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010b0c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7fc fc21 	bl	800d358 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8010b16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b1e:	681a      	ldr	r2, [r3, #0]
 8010b20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	3340      	adds	r3, #64	; 0x40
 8010b2c:	4619      	mov	r1, r3
 8010b2e:	4610      	mov	r0, r2
 8010b30:	f7fe ff74 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8010b34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b3c:	681a      	ldr	r2, [r3, #0]
 8010b3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	336c      	adds	r3, #108	; 0x6c
 8010b4a:	4619      	mov	r1, r3
 8010b4c:	4610      	mov	r0, r2
 8010b4e:	f7fe ff65 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 8010b52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	3398      	adds	r3, #152	; 0x98
 8010b68:	4619      	mov	r1, r3
 8010b6a:	4610      	mov	r0, r2
 8010b6c:	f7fe ff56 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 8010b70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b78:	681a      	ldr	r2, [r3, #0]
 8010b7a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	33e4      	adds	r3, #228	; 0xe4
 8010b86:	4619      	mov	r1, r3
 8010b88:	4610      	mov	r0, r2
 8010b8a:	f7fe ff47 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 8010b8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010b96:	681a      	ldr	r2, [r3, #0]
 8010b98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010b9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	4610      	mov	r0, r2
 8010baa:	f7fe ff37 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 8010bae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bb6:	681a      	ldr	r2, [r3, #0]
 8010bb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	4610      	mov	r0, r2
 8010bca:	f7fe ff27 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilPressArea);
 8010bce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bd6:	681a      	ldr	r2, [r3, #0]
 8010bd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010be6:	4619      	mov	r1, r3
 8010be8:	4610      	mov	r0, r2
 8010bea:	f7fe ff17 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 8010bee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bf6:	681a      	ldr	r2, [r3, #0]
 8010bf8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010c06:	4619      	mov	r1, r3
 8010c08:	4610      	mov	r0, r2
 8010c0a:	f7fe ff07 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 8010c0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c12:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c16:	681a      	ldr	r2, [r3, #0]
 8010c18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8010c26:	4619      	mov	r1, r3
 8010c28:	4610      	mov	r0, r2
 8010c2a:	f7fe fef7 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 8010c2e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c32:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c36:	681a      	ldr	r2, [r3, #0]
 8010c38:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010c46:	4619      	mov	r1, r3
 8010c48:	4610      	mov	r0, r2
 8010c4a:	f7fe fee7 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 8010c4e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c56:	681a      	ldr	r2, [r3, #0]
 8010c58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010c66:	4619      	mov	r1, r3
 8010c68:	4610      	mov	r0, r2
 8010c6a:	f7fe fed7 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 8010c6e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c76:	681a      	ldr	r2, [r3, #0]
 8010c78:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8010c86:	4619      	mov	r1, r3
 8010c88:	4610      	mov	r0, r2
 8010c8a:	f7fe fec7 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 8010c8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c96:	681a      	ldr	r2, [r3, #0]
 8010c98:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8010ca6:	4619      	mov	r1, r3
 8010ca8:	4610      	mov	r0, r2
 8010caa:	f7fe feb7 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 8010cae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010cb2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cb6:	681a      	ldr	r2, [r3, #0]
 8010cb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f203 7384 	addw	r3, r3, #1924	; 0x784
 8010cc6:	4619      	mov	r1, r3
 8010cc8:	4610      	mov	r0, r2
 8010cca:	f7fe fea7 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilTempArea);
 8010cce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010cd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cd6:	681a      	ldr	r2, [r3, #0]
 8010cd8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010cdc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010ce6:	4619      	mov	r1, r3
 8010ce8:	4610      	mov	r0, r2
 8010cea:	f7fe fe97 	bl	800fa1c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8010cee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010cf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd90      	pop	{r4, r7, pc}
 8010d02:	bf00      	nop
 8010d04:	2003bf44 	.word	0x2003bf44
 8010d08:	0802c78c 	.word	0x0802c78c

08010d0c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b082      	sub	sp, #8
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f000 fadc 	bl	80112d8 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8010d26:	4618      	mov	r0, r3
 8010d28:	f000 fad6 	bl	80112d8 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010d32:	4618      	mov	r0, r3
 8010d34:	f000 fad0 	bl	80112d8 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 8010d38:	687b      	ldr	r3, [r7, #4]
 8010d3a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f000 faca 	bl	80112d8 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f000 faa6 	bl	801129c <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8010d56:	4618      	mov	r0, r3
 8010d58:	f000 faa0 	bl	801129c <_ZN8alertBar10initializeEv>
}
 8010d5c:	bf00      	nop
 8010d5e:	3708      	adds	r7, #8
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	70fb      	strb	r3, [r7, #3]
    if(56 == key)
 8010d70:	78fb      	ldrb	r3, [r7, #3]
 8010d72:	2b38      	cmp	r3, #56	; 0x38
 8010d74:	d105      	bne.n	8010d82 <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Interaction1
        //When hardware button 56 clicked call virtual function
        //Call function1
        function1();
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	332c      	adds	r3, #44	; 0x2c
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	6878      	ldr	r0, [r7, #4]
 8010d80:	4798      	blx	r3
    }
}
 8010d82:	bf00      	nop
 8010d84:	3708      	adds	r7, #8
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
	...

08010d8c <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b082      	sub	sp, #8
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	4618      	mov	r0, r3
 8010d98:	f00a fc66 	bl	801b668 <_ZN8touchgfx6ScreenC1Ev>
 8010d9c:	4a05      	ldr	r2, [pc, #20]	; (8010db4 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	601a      	str	r2, [r3, #0]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	2200      	movs	r2, #0
 8010da6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4618      	mov	r0, r3
 8010dac:	3708      	adds	r7, #8
 8010dae:	46bd      	mov	sp, r7
 8010db0:	bd80      	pop	{r7, pc}
 8010db2:	bf00      	nop
 8010db4:	0802eafc 	.word	0x0802eafc

08010db8 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8010db8:	b480      	push	{r7}
 8010dba:	af00      	add	r7, sp, #0
    return bitmap_database;
 8010dbc:	4b02      	ldr	r3, [pc, #8]	; (8010dc8 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	46bd      	mov	sp, r7
 8010dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc6:	4770      	bx	lr
 8010dc8:	0802eb28 	.word	0x0802eb28

08010dcc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8010dcc:	b480      	push	{r7}
 8010dce:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8010dd0:	2301      	movs	r3, #1
}
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8010ddc:	b480      	push	{r7}
 8010dde:	b085      	sub	sp, #20
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	60f8      	str	r0, [r7, #12]
 8010de4:	460b      	mov	r3, r1
 8010de6:	607a      	str	r2, [r7, #4]
 8010de8:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8010dea:	2300      	movs	r3, #0
    }
 8010dec:	4618      	mov	r0, r3
 8010dee:	3714      	adds	r7, #20
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010e00:	2300      	movs	r3, #0
    }
 8010e02:	4618      	mov	r0, r3
 8010e04:	370c      	adds	r7, #12
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr

08010e0e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8010e0e:	b480      	push	{r7}
 8010e10:	b083      	sub	sp, #12
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8010e16:	2300      	movs	r3, #0
    }
 8010e18:	4618      	mov	r0, r3
 8010e1a:	370c      	adds	r7, #12
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr

08010e24 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8010e24:	b480      	push	{r7}
 8010e26:	b085      	sub	sp, #20
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	4613      	mov	r3, r2
 8010e30:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8010e32:	4a07      	ldr	r2, [pc, #28]	; (8010e50 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	6013      	str	r3, [r2, #0]
        fonts = f;
 8010e38:	4a06      	ldr	r2, [pc, #24]	; (8010e54 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8010e3e:	4a06      	ldr	r2, [pc, #24]	; (8010e58 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8010e40:	88fb      	ldrh	r3, [r7, #6]
 8010e42:	8013      	strh	r3, [r2, #0]
    }
 8010e44:	bf00      	nop
 8010e46:	3714      	adds	r7, #20
 8010e48:	46bd      	mov	sp, r7
 8010e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e4e:	4770      	bx	lr
 8010e50:	2003bf38 	.word	0x2003bf38
 8010e54:	2003bf40 	.word	0x2003bf40
 8010e58:	2003bf3c 	.word	0x2003bf3c

08010e5c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010e5c:	b40e      	push	{r1, r2, r3}
 8010e5e:	b580      	push	{r7, lr}
 8010e60:	b085      	sub	sp, #20
 8010e62:	af00      	add	r7, sp, #0
 8010e64:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8010e66:	f107 0320 	add.w	r3, r7, #32
 8010e6a:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8010e6c:	68bb      	ldr	r3, [r7, #8]
 8010e6e:	69fa      	ldr	r2, [r7, #28]
 8010e70:	2100      	movs	r1, #0
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f009 ff72 	bl	801ad5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010e78:	4603      	mov	r3, r0
 8010e7a:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010e7c:	89fb      	ldrh	r3, [r7, #14]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3714      	adds	r7, #20
 8010e82:	46bd      	mov	sp, r7
 8010e84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010e88:	b003      	add	sp, #12
 8010e8a:	4770      	bx	lr

08010e8c <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8010e8c:	b40c      	push	{r2, r3}
 8010e8e:	b580      	push	{r7, lr}
 8010e90:	b084      	sub	sp, #16
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	6078      	str	r0, [r7, #4]
 8010e96:	460b      	mov	r3, r1
 8010e98:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8010e9a:	f107 031c 	add.w	r3, r7, #28
 8010e9e:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8010ea0:	78f9      	ldrb	r1, [r7, #3]
 8010ea2:	68bb      	ldr	r3, [r7, #8]
 8010ea4:	69ba      	ldr	r2, [r7, #24]
 8010ea6:	6878      	ldr	r0, [r7, #4]
 8010ea8:	f009 ff58 	bl	801ad5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8010eac:	4603      	mov	r3, r0
 8010eae:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8010eb0:	89fb      	ldrh	r3, [r7, #14]
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3710      	adds	r7, #16
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010ebc:	b002      	add	sp, #8
 8010ebe:	4770      	bx	lr

08010ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b08a      	sub	sp, #40	; 0x28
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	460b      	mov	r3, r1
 8010eca:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d016      	beq.n	8010f02 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	3322      	adds	r3, #34	; 0x22
 8010ed8:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8010eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010edc:	8adb      	ldrh	r3, [r3, #22]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d105      	bne.n	8010eee <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8010ee2:	4b43      	ldr	r3, [pc, #268]	; (8010ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010ee4:	4a43      	ldr	r2, [pc, #268]	; (8010ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010ee6:	21c0      	movs	r1, #192	; 0xc0
 8010ee8:	4843      	ldr	r0, [pc, #268]	; (8010ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010eea:	f017 ff0d 	bl	8028d08 <__assert_func>
            return buffer[pos];
 8010eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef0:	8a9b      	ldrh	r3, [r3, #20]
 8010ef2:	461a      	mov	r2, r3
 8010ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d001      	beq.n	8010f02 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8010efe:	2301      	movs	r3, #1
 8010f00:	e000      	b.n	8010f04 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8010f02:	2300      	movs	r3, #0
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d06a      	beq.n	8010fde <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f00b fa89 	bl	801c420 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	3322      	adds	r3, #34	; 0x22
 8010f12:	623b      	str	r3, [r7, #32]
 8010f14:	2301      	movs	r3, #1
 8010f16:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8010f18:	6a3b      	ldr	r3, [r7, #32]
 8010f1a:	8adb      	ldrh	r3, [r3, #22]
 8010f1c:	8bfa      	ldrh	r2, [r7, #30]
 8010f1e:	429a      	cmp	r2, r3
 8010f20:	d305      	bcc.n	8010f2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8010f22:	4b36      	ldr	r3, [pc, #216]	; (8010ffc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8010f24:	4a36      	ldr	r2, [pc, #216]	; (8011000 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8010f26:	21c5      	movs	r1, #197	; 0xc5
 8010f28:	4833      	ldr	r0, [pc, #204]	; (8010ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010f2a:	f017 feed 	bl	8028d08 <__assert_func>
            const uint16_t index = pos + offset;
 8010f2e:	6a3b      	ldr	r3, [r7, #32]
 8010f30:	8a9a      	ldrh	r2, [r3, #20]
 8010f32:	8bfb      	ldrh	r3, [r7, #30]
 8010f34:	4413      	add	r3, r2
 8010f36:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8010f38:	8bbb      	ldrh	r3, [r7, #28]
 8010f3a:	2b09      	cmp	r3, #9
 8010f3c:	d801      	bhi.n	8010f42 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8010f3e:	8bbb      	ldrh	r3, [r7, #28]
 8010f40:	e001      	b.n	8010f46 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8010f42:	8bbb      	ldrh	r3, [r7, #28]
 8010f44:	3b0a      	subs	r3, #10
 8010f46:	6a3a      	ldr	r2, [r7, #32]
 8010f48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f4c:	f640 123f 	movw	r2, #2367	; 0x93f
 8010f50:	4293      	cmp	r3, r2
 8010f52:	bf0c      	ite	eq
 8010f54:	2301      	moveq	r3, #1
 8010f56:	2300      	movne	r3, #0
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d03f      	beq.n	8010fde <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	3322      	adds	r3, #34	; 0x22
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	3222      	adds	r2, #34	; 0x22
 8010f66:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8010f68:	68ba      	ldr	r2, [r7, #8]
 8010f6a:	8ad2      	ldrh	r2, [r2, #22]
 8010f6c:	2a00      	cmp	r2, #0
 8010f6e:	d105      	bne.n	8010f7c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8010f70:	4b1f      	ldr	r3, [pc, #124]	; (8010ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8010f72:	4a20      	ldr	r2, [pc, #128]	; (8010ff4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8010f74:	21c0      	movs	r1, #192	; 0xc0
 8010f76:	4820      	ldr	r0, [pc, #128]	; (8010ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010f78:	f017 fec6 	bl	8028d08 <__assert_func>
            return buffer[pos];
 8010f7c:	68ba      	ldr	r2, [r7, #8]
 8010f7e:	8a92      	ldrh	r2, [r2, #20]
 8010f80:	4611      	mov	r1, r2
 8010f82:	68ba      	ldr	r2, [r7, #8]
 8010f84:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8010f88:	613b      	str	r3, [r7, #16]
 8010f8a:	4613      	mov	r3, r2
 8010f8c:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	8adb      	ldrh	r3, [r3, #22]
 8010f92:	2b01      	cmp	r3, #1
 8010f94:	d806      	bhi.n	8010fa4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8010f96:	4b1b      	ldr	r3, [pc, #108]	; (8011004 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8010f98:	4a1b      	ldr	r2, [pc, #108]	; (8011008 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8010f9a:	f240 110d 	movw	r1, #269	; 0x10d
 8010f9e:	4816      	ldr	r0, [pc, #88]	; (8010ff8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8010fa0:	f017 feb2 	bl	8028d08 <__assert_func>
            const uint16_t index = pos + 1;
 8010fa4:	693b      	ldr	r3, [r7, #16]
 8010fa6:	8a9b      	ldrh	r3, [r3, #20]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8010fac:	89bb      	ldrh	r3, [r7, #12]
 8010fae:	2b09      	cmp	r3, #9
 8010fb0:	d801      	bhi.n	8010fb6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8010fb2:	89bb      	ldrh	r3, [r7, #12]
 8010fb4:	e000      	b.n	8010fb8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	693a      	ldr	r2, [r7, #16]
 8010fba:	89f9      	ldrh	r1, [r7, #14]
 8010fbc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8010fc0:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	3322      	adds	r3, #34	; 0x22
 8010fc6:	61bb      	str	r3, [r7, #24]
 8010fc8:	f640 133f 	movw	r3, #2367	; 0x93f
 8010fcc:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8010fce:	69bb      	ldr	r3, [r7, #24]
 8010fd0:	8a9b      	ldrh	r3, [r3, #20]
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	69bb      	ldr	r3, [r7, #24]
 8010fd6:	8afa      	ldrh	r2, [r7, #22]
 8010fd8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8010fdc:	bf00      	nop
        }
    }
    return getNextChar();
 8010fde:	6878      	ldr	r0, [r7, #4]
 8010fe0:	f00b f920 	bl	801c224 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8010fe4:	4603      	mov	r3, r0
}
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	3728      	adds	r7, #40	; 0x28
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	0802c790 	.word	0x0802c790
 8010ff4:	0802c79c 	.word	0x0802c79c
 8010ff8:	0802c848 	.word	0x0802c848
 8010ffc:	0802c890 	.word	0x0802c890
 8011000:	0802c8a0 	.word	0x0802c8a0
 8011004:	0802c974 	.word	0x0802c974
 8011008:	0802c980 	.word	0x0802c980

0801100c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f00b f8ce 	bl	801c1b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 801101a:	bf00      	nop
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}

08011022 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8011022:	b580      	push	{r7, lr}
 8011024:	b088      	sub	sp, #32
 8011026:	af02      	add	r7, sp, #8
 8011028:	60f8      	str	r0, [r7, #12]
 801102a:	1d38      	adds	r0, r7, #4
 801102c:	e880 0006 	stmia.w	r0, {r1, r2}
 8011030:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8011032:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011036:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8011038:	1d39      	adds	r1, r7, #4
 801103a:	697b      	ldr	r3, [r7, #20]
 801103c:	9301      	str	r3, [sp, #4]
 801103e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011040:	9300      	str	r3, [sp, #0]
 8011042:	6a3b      	ldr	r3, [r7, #32]
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	68f8      	ldr	r0, [r7, #12]
 8011048:	f008 fb52 	bl	80196f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 801104c:	bf00      	nop
 801104e:	3718      	adds	r7, #24
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}

08011054 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011054:	b590      	push	{r4, r7, lr}
 8011056:	b085      	sub	sp, #20
 8011058:	af00      	add	r7, sp, #0
 801105a:	4603      	mov	r3, r0
 801105c:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 801105e:	2300      	movs	r3, #0
 8011060:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011062:	88fb      	ldrh	r3, [r7, #6]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d127      	bne.n	80110b8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011068:	88fb      	ldrh	r3, [r7, #6]
 801106a:	4a1e      	ldr	r2, [pc, #120]	; (80110e4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 801106c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d016      	beq.n	80110a2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011074:	88fb      	ldrh	r3, [r7, #6]
 8011076:	4a1b      	ldr	r2, [pc, #108]	; (80110e4 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801107c:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 801107e:	68bb      	ldr	r3, [r7, #8]
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	68ba      	ldr	r2, [r7, #8]
 8011084:	4413      	add	r3, r2
 8011086:	4a18      	ldr	r2, [pc, #96]	; (80110e8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011088:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	685b      	ldr	r3, [r3, #4]
 801108e:	68ba      	ldr	r2, [r7, #8]
 8011090:	4413      	add	r3, r2
 8011092:	4a16      	ldr	r2, [pc, #88]	; (80110ec <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011094:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011096:	68bb      	ldr	r3, [r7, #8]
 8011098:	689b      	ldr	r3, [r3, #8]
 801109a:	68ba      	ldr	r2, [r7, #8]
 801109c:	4413      	add	r3, r2
 801109e:	60fb      	str	r3, [r7, #12]
 80110a0:	e00a      	b.n	80110b8 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 80110a2:	4b11      	ldr	r3, [pc, #68]	; (80110e8 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 80110a4:	4a12      	ldr	r2, [pc, #72]	; (80110f0 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 80110a6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80110a8:	4a12      	ldr	r2, [pc, #72]	; (80110f4 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 80110aa:	4b10      	ldr	r3, [pc, #64]	; (80110ec <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 80110ac:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80110ae:	88fb      	ldrh	r3, [r7, #6]
 80110b0:	4a11      	ldr	r2, [pc, #68]	; (80110f8 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 80110b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80110b6:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d00d      	beq.n	80110da <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 80110be:	4a0f      	ldr	r2, [pc, #60]	; (80110fc <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 80110c0:	88fb      	ldrh	r3, [r7, #6]
 80110c2:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80110c4:	f000 f83e 	bl	8011144 <_ZN17TypedTextDatabase8getFontsEv>
 80110c8:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80110ca:	f000 f833 	bl	8011134 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 80110ce:	4603      	mov	r3, r0
 80110d0:	461a      	mov	r2, r3
 80110d2:	4621      	mov	r1, r4
 80110d4:	68f8      	ldr	r0, [r7, #12]
 80110d6:	f7ff fea5 	bl	8010e24 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 80110da:	bf00      	nop
 80110dc:	3714      	adds	r7, #20
 80110de:	46bd      	mov	sp, r7
 80110e0:	bd90      	pop	{r4, r7, pc}
 80110e2:	bf00      	nop
 80110e4:	20033618 	.word	0x20033618
 80110e8:	20033620 	.word	0x20033620
 80110ec:	20033624 	.word	0x20033624
 80110f0:	081639bc 	.word	0x081639bc
 80110f4:	08163828 	.word	0x08163828
 80110f8:	08163b30 	.word	0x08163b30
 80110fc:	2003361c 	.word	0x2003361c

08011100 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
 8011108:	460b      	mov	r3, r1
 801110a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 801110c:	4b07      	ldr	r3, [pc, #28]	; (801112c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	4b07      	ldr	r3, [pc, #28]	; (8011130 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8011112:	6819      	ldr	r1, [r3, #0]
 8011114:	887b      	ldrh	r3, [r7, #2]
 8011116:	009b      	lsls	r3, r3, #2
 8011118:	440b      	add	r3, r1
 801111a:	681b      	ldr	r3, [r3, #0]
 801111c:	005b      	lsls	r3, r3, #1
 801111e:	4413      	add	r3, r2
}
 8011120:	4618      	mov	r0, r3
 8011122:	370c      	adds	r7, #12
 8011124:	46bd      	mov	sp, r7
 8011126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112a:	4770      	bx	lr
 801112c:	20033620 	.word	0x20033620
 8011130:	20033624 	.word	0x20033624

08011134 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8011134:	b480      	push	{r7}
 8011136:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8011138:	2365      	movs	r3, #101	; 0x65
}
 801113a:	4618      	mov	r0, r3
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8011144:	b480      	push	{r7}
 8011146:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8011148:	4b02      	ldr	r3, [pc, #8]	; (8011154 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801114a:	4618      	mov	r0, r3
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr
 8011154:	20033628 	.word	0x20033628

08011158 <_Z41__static_initialization_and_destruction_0ii>:
    case 7:
        touchgfx_fonts[7] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	2b01      	cmp	r3, #1
 8011166:	d12c      	bne.n	80111c2 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801116e:	4293      	cmp	r3, r2
 8011170:	d127      	bne.n	80111c2 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    &(getFont_swisop3_300_4bpp()),
 8011172:	f7fc fa77 	bl	800d664 <_Z24getFont_swisop3_300_4bppv>
 8011176:	4603      	mov	r3, r0
};
 8011178:	4a14      	ldr	r2, [pc, #80]	; (80111cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801117a:	6013      	str	r3, [r2, #0]
    &(getFont_JetBrainsMono_Regular_60_4bpp()),
 801117c:	f7fc fa1c 	bl	800d5b8 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>
 8011180:	4603      	mov	r3, r0
};
 8011182:	4a12      	ldr	r2, [pc, #72]	; (80111cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011184:	6053      	str	r3, [r2, #4]
    &(getFont_JetBrainsMono_Regular_40_4bpp()),
 8011186:	f7fc f9c1 	bl	800d50c <_Z37getFont_JetBrainsMono_Regular_40_4bppv>
 801118a:	4603      	mov	r3, r0
};
 801118c:	4a0f      	ldr	r2, [pc, #60]	; (80111cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801118e:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_50_4bpp()),
 8011190:	f7fc fac0 	bl	800d714 <_Z23getFont_swisop3_50_4bppv>
 8011194:	4603      	mov	r3, r0
};
 8011196:	4a0d      	ldr	r2, [pc, #52]	; (80111cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8011198:	60d3      	str	r3, [r2, #12]
    &(getFont_verdana_20_4bpp()),
 801119a:	f7fc fbbd 	bl	800d918 <_Z23getFont_verdana_20_4bppv>
 801119e:	4603      	mov	r3, r0
};
 80111a0:	4a0a      	ldr	r2, [pc, #40]	; (80111cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80111a2:	6113      	str	r3, [r2, #16]
    &(getFont_verdana_12_4bpp()),
 80111a4:	f7fc fb62 	bl	800d86c <_Z23getFont_verdana_12_4bppv>
 80111a8:	4603      	mov	r3, r0
};
 80111aa:	4a08      	ldr	r2, [pc, #32]	; (80111cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80111ac:	6153      	str	r3, [r2, #20]
    &(getFont_verdana_40_4bpp()),
 80111ae:	f7fc fc09 	bl	800d9c4 <_Z23getFont_verdana_40_4bppv>
 80111b2:	4603      	mov	r3, r0
};
 80111b4:	4a05      	ldr	r2, [pc, #20]	; (80111cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80111b6:	6193      	str	r3, [r2, #24]
    &(getFont_verdana_10_4bpp())
 80111b8:	f7fc fb02 	bl	800d7c0 <_Z23getFont_verdana_10_4bppv>
 80111bc:	4603      	mov	r3, r0
};
 80111be:	4a03      	ldr	r2, [pc, #12]	; (80111cc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80111c0:	61d3      	str	r3, [r2, #28]
} // namespace TypedTextDatabase
 80111c2:	bf00      	nop
 80111c4:	3708      	adds	r7, #8
 80111c6:	46bd      	mov	sp, r7
 80111c8:	bd80      	pop	{r7, pc}
 80111ca:	bf00      	nop
 80111cc:	20033628 	.word	0x20033628

080111d0 <_GLOBAL__sub_I_touchgfx_fonts>:
 80111d0:	b580      	push	{r7, lr}
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80111d8:	2001      	movs	r0, #1
 80111da:	f7ff ffbd 	bl	8011158 <_Z41__static_initialization_and_destruction_0ii>
 80111de:	bd80      	pop	{r7, pc}

080111e0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	6078      	str	r0, [r7, #4]
 80111e8:	4a05      	ldr	r2, [pc, #20]	; (8011200 <_ZN19FrontendApplicationD1Ev+0x20>)
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	601a      	str	r2, [r3, #0]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7fc fe33 	bl	800de5c <_ZN23FrontendApplicationBaseD1Ev>
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	4618      	mov	r0, r3
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	0802eb98 	.word	0x0802eb98

08011204 <_ZN19FrontendApplicationD0Ev>:
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f7ff ffe7 	bl	80111e0 <_ZN19FrontendApplicationD1Ev>
 8011212:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8011216:	6878      	ldr	r0, [r7, #4]
 8011218:	f017 fd48 	bl	8028cac <_ZdlPvj>
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	4618      	mov	r0, r3
 8011220:	3708      	adds	r7, #8
 8011222:	46bd      	mov	sp, r7
 8011224:	bd80      	pop	{r7, pc}

08011226 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8011226:	b580      	push	{r7, lr}
 8011228:	b082      	sub	sp, #8
 801122a:	af00      	add	r7, sp, #0
 801122c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8011234:	4618      	mov	r0, r3
 8011236:	f000 f997 	bl	8011568 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	4618      	mov	r0, r3
 801123e:	f008 fdcf 	bl	8019de0 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8011242:	bf00      	nop
 8011244:	3708      	adds	r7, #8
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
	...

0801124c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801124c:	b580      	push	{r7, lr}
 801124e:	b084      	sub	sp, #16
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	687a      	ldr	r2, [r7, #4]
 801125c:	68b9      	ldr	r1, [r7, #8]
 801125e:	4618      	mov	r0, r3
 8011260:	f7fc fe4c 	bl	800defc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8011264:	4a03      	ldr	r2, [pc, #12]	; (8011274 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	601a      	str	r2, [r3, #0]
{

}
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	4618      	mov	r0, r3
 801126e:	3710      	adds	r7, #16
 8011270:	46bd      	mov	sp, r7
 8011272:	bd80      	pop	{r7, pc}
 8011274:	0802eb98 	.word	0x0802eb98

08011278 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>

alertBar::alertBar()
 8011278:	b580      	push	{r7, lr}
 801127a:	b082      	sub	sp, #8
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	4618      	mov	r0, r3
 8011284:	f7fd fe1c 	bl	800eec0 <_ZN12alertBarBaseC1Ev>
 8011288:	4a03      	ldr	r2, [pc, #12]	; (8011298 <_ZN8alertBarC1Ev+0x20>)
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	601a      	str	r2, [r3, #0]
{

}
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	4618      	mov	r0, r3
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	0802ebe4 	.word	0x0802ebe4

0801129c <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 801129c:	b580      	push	{r7, lr}
 801129e:	b082      	sub	sp, #8
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	4618      	mov	r0, r3
 80112a8:	f7fd ff24 	bl	800f0f4 <_ZN12alertBarBase10initializeEv>
}
 80112ac:	bf00      	nop
 80112ae:	3708      	adds	r7, #8
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd80      	pop	{r7, pc}

080112b4 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>

tempBox::tempBox()
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fe f94c 	bl	800f55c <_ZN11tempBoxBaseC1Ev>
 80112c4:	4a03      	ldr	r2, [pc, #12]	; (80112d4 <_ZN7tempBoxC1Ev+0x20>)
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	601a      	str	r2, [r3, #0]
{

}
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	4618      	mov	r0, r3
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	0802ec78 	.word	0x0802ec78

080112d8 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
 80112de:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	4618      	mov	r0, r3
 80112e4:	f7fe fa5c 	bl	800f7a0 <_ZN11tempBoxBase10initializeEv>
}
 80112e8:	bf00      	nop
 80112ea:	3708      	adds	r7, #8
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 80112f0:	b480      	push	{r7}
 80112f2:	b083      	sub	sp, #12
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
    {
    }
 80112f8:	bf00      	nop
 80112fa:	370c      	adds	r7, #12
 80112fc:	46bd      	mov	sp, r7
 80112fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011302:	4770      	bx	lr

08011304 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
    {
    }
 801130c:	bf00      	nop
 801130e:	370c      	adds	r7, #12
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr

08011318 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8011318:	b480      	push	{r7}
 801131a:	b083      	sub	sp, #12
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
    {
 8011320:	4a04      	ldr	r2, [pc, #16]	; (8011334 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	601a      	str	r2, [r3, #0]
    }
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	4618      	mov	r0, r3
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr
 8011334:	0802ed1c 	.word	0x0802ed1c

08011338 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
    }
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f7ff ffe9 	bl	8011318 <_ZN8touchgfx9PresenterD1Ev>
 8011346:	2104      	movs	r1, #4
 8011348:	6878      	ldr	r0, [r7, #4]
 801134a:	f017 fcaf 	bl	8028cac <_ZdlPvj>
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	4618      	mov	r0, r3
 8011352:	3708      	adds	r7, #8
 8011354:	46bd      	mov	sp, r7
 8011356:	bd80      	pop	{r7, pc}

08011358 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 8011358:	b480      	push	{r7}
 801135a:	b083      	sub	sp, #12
 801135c:	af00      	add	r7, sp, #0
 801135e:	6078      	str	r0, [r7, #4]
    {
 8011360:	4a04      	ldr	r2, [pc, #16]	; (8011374 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	601a      	str	r2, [r3, #0]
    }
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	4618      	mov	r0, r3
 801136a:	370c      	adds	r7, #12
 801136c:	46bd      	mov	sp, r7
 801136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011372:	4770      	bx	lr
 8011374:	0802ed1c 	.word	0x0802ed1c

08011378 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 8011378:	b480      	push	{r7}
 801137a:	b083      	sub	sp, #12
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
 8011380:	4a06      	ldr	r2, [pc, #24]	; (801139c <_ZN13ModelListenerC1Ev+0x24>)
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	601a      	str	r2, [r3, #0]
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	2200      	movs	r2, #0
 801138a:	605a      	str	r2, [r3, #4]
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	4618      	mov	r0, r3
 8011390:	370c      	adds	r7, #12
 8011392:	46bd      	mov	sp, r7
 8011394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011398:	4770      	bx	lr
 801139a:	bf00      	nop
 801139c:	0802ed0c 	.word	0x0802ed0c

080113a0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80113a0:	b480      	push	{r7}
 80113a2:	b083      	sub	sp, #12
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
 80113a8:	4a04      	ldr	r2, [pc, #16]	; (80113bc <_ZN13ModelListenerD1Ev+0x1c>)
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	601a      	str	r2, [r3, #0]
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	4618      	mov	r0, r3
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr
 80113bc:	0802ed0c 	.word	0x0802ed0c

080113c0 <_ZN13ModelListenerD0Ev>:
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6878      	ldr	r0, [r7, #4]
 80113ca:	f7ff ffe9 	bl	80113a0 <_ZN13ModelListenerD1Ev>
 80113ce:	2108      	movs	r1, #8
 80113d0:	6878      	ldr	r0, [r7, #4]
 80113d2:	f017 fc6b 	bl	8028cac <_ZdlPvj>
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	4618      	mov	r0, r3
 80113da:	3708      	adds	r7, #8
 80113dc:	46bd      	mov	sp, r7
 80113de:	bd80      	pop	{r7, pc}

080113e0 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b082      	sub	sp, #8
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
 80113e8:	4a09      	ldr	r2, [pc, #36]	; (8011410 <_ZN13MainPresenterD1Ev+0x30>)
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	601a      	str	r2, [r3, #0]
 80113ee:	4a09      	ldr	r2, [pc, #36]	; (8011414 <_ZN13MainPresenterD1Ev+0x34>)
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	605a      	str	r2, [r3, #4]
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	3304      	adds	r3, #4
 80113f8:	4618      	mov	r0, r3
 80113fa:	f7ff ffd1 	bl	80113a0 <_ZN13ModelListenerD1Ev>
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	4618      	mov	r0, r3
 8011402:	f7ff ff89 	bl	8011318 <_ZN8touchgfx9PresenterD1Ev>
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	4618      	mov	r0, r3
 801140a:	3708      	adds	r7, #8
 801140c:	46bd      	mov	sp, r7
 801140e:	bd80      	pop	{r7, pc}
 8011410:	0802ed34 	.word	0x0802ed34
 8011414:	0802ed4c 	.word	0x0802ed4c

08011418 <_ZThn4_N13MainPresenterD1Ev>:
 8011418:	f1a0 0004 	sub.w	r0, r0, #4
 801141c:	e7e0      	b.n	80113e0 <_ZN13MainPresenterD1Ev>
 801141e:	bf00      	nop

08011420 <_ZN13MainPresenterD0Ev>:
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6878      	ldr	r0, [r7, #4]
 801142a:	f7ff ffd9 	bl	80113e0 <_ZN13MainPresenterD1Ev>
 801142e:	2110      	movs	r1, #16
 8011430:	6878      	ldr	r0, [r7, #4]
 8011432:	f017 fc3b 	bl	8028cac <_ZdlPvj>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	4618      	mov	r0, r3
 801143a:	3708      	adds	r7, #8
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <_ZThn4_N13MainPresenterD0Ev>:
 8011440:	f1a0 0004 	sub.w	r0, r0, #4
 8011444:	e7ec      	b.n	8011420 <_ZN13MainPresenterD0Ev>
	...

08011448 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
    : view(v)
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	4618      	mov	r0, r3
 8011456:	f7ff ff7f 	bl	8011358 <_ZN8touchgfx9PresenterC1Ev>
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	3304      	adds	r3, #4
 801145e:	4618      	mov	r0, r3
 8011460:	f7ff ff8a 	bl	8011378 <_ZN13ModelListenerC1Ev>
 8011464:	4a06      	ldr	r2, [pc, #24]	; (8011480 <_ZN13MainPresenterC1ER8MainView+0x38>)
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	601a      	str	r2, [r3, #0]
 801146a:	4a06      	ldr	r2, [pc, #24]	; (8011484 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	605a      	str	r2, [r3, #4]
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	683a      	ldr	r2, [r7, #0]
 8011474:	60da      	str	r2, [r3, #12]
{

}
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	4618      	mov	r0, r3
 801147a:	3708      	adds	r7, #8
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	0802ed34 	.word	0x0802ed34
 8011484:	0802ed4c 	.word	0x0802ed4c

08011488 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]

}
 8011490:	bf00      	nop
 8011492:	370c      	adds	r7, #12
 8011494:	46bd      	mov	sp, r7
 8011496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801149a:	4770      	bx	lr

0801149c <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 801149c:	b480      	push	{r7}
 801149e:	b083      	sub	sp, #12
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]

}
 80114a4:	bf00      	nop
 80114a6:	370c      	adds	r7, #12
 80114a8:	46bd      	mov	sp, r7
 80114aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ae:	4770      	bx	lr

080114b0 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b082      	sub	sp, #8
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
 80114b8:	4a05      	ldr	r2, [pc, #20]	; (80114d0 <_ZN8MainViewD1Ev+0x20>)
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	601a      	str	r2, [r3, #0]
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	4618      	mov	r0, r3
 80114c2:	f7fe fb3b 	bl	800fb3c <_ZN12MainViewBaseD1Ev>
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	4618      	mov	r0, r3
 80114ca:	3708      	adds	r7, #8
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}
 80114d0:	0802ed5c 	.word	0x0802ed5c

080114d4 <_ZN8MainViewD0Ev>:
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b082      	sub	sp, #8
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6878      	ldr	r0, [r7, #4]
 80114de:	f7ff ffe7 	bl	80114b0 <_ZN8MainViewD1Ev>
 80114e2:	f243 7164 	movw	r1, #14180	; 0x3764
 80114e6:	6878      	ldr	r0, [r7, #4]
 80114e8:	f017 fbe0 	bl	8028cac <_ZdlPvj>
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	4618      	mov	r0, r3
 80114f0:	3708      	adds	r7, #8
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}
	...

080114f8 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

MainView::MainView()
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b082      	sub	sp, #8
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	6078      	str	r0, [r7, #4]
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	4618      	mov	r0, r3
 8011504:	f7fe fba4 	bl	800fc50 <_ZN12MainViewBaseC1Ev>
 8011508:	4a03      	ldr	r2, [pc, #12]	; (8011518 <_ZN8MainViewC1Ev+0x20>)
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	601a      	str	r2, [r3, #0]
{

}
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	4618      	mov	r0, r3
 8011512:	3708      	adds	r7, #8
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}
 8011518:	0802ed5c 	.word	0x0802ed5c

0801151c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
    MainViewBase::setupScreen();
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff fbf0 	bl	8010d0c <_ZN12MainViewBase11setupScreenEv>
}
 801152c:	bf00      	nop
 801152e:	3708      	adds	r7, #8
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}

08011534 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8011534:	b580      	push	{r7, lr}
 8011536:	b082      	sub	sp, #8
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
    MainViewBase::tearDownScreen();
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	4618      	mov	r0, r3
 8011540:	f7fe fa4c 	bl	800f9dc <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8011544:	bf00      	nop
 8011546:	3708      	adds	r7, #8
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}

0801154c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801154c:	b480      	push	{r7}
 801154e:	b083      	sub	sp, #12
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	2200      	movs	r2, #0
 8011558:	601a      	str	r2, [r3, #0]
{

}
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	4618      	mov	r0, r3
 801155e:	370c      	adds	r7, #12
 8011560:	46bd      	mov	sp, r7
 8011562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011566:	4770      	bx	lr

08011568 <_ZN5Model4tickEv>:

void Model::tick()
{
 8011568:	b480      	push	{r7}
 801156a:	b083      	sub	sp, #12
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]

}
 8011570:	bf00      	nop
 8011572:	370c      	adds	r7, #12
 8011574:	46bd      	mov	sp, r7
 8011576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157a:	4770      	bx	lr

0801157c <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 801157c:	b480      	push	{r7}
 801157e:	b083      	sub	sp, #12
 8011580:	af00      	add	r7, sp, #0
 8011582:	6078      	str	r0, [r7, #4]
    {
 8011584:	4a04      	ldr	r2, [pc, #16]	; (8011598 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	601a      	str	r2, [r3, #0]
    }
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	4618      	mov	r0, r3
 801158e:	370c      	adds	r7, #12
 8011590:	46bd      	mov	sp, r7
 8011592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011596:	4770      	bx	lr
 8011598:	0802edac 	.word	0x0802edac

0801159c <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 801159c:	b580      	push	{r7, lr}
 801159e:	b082      	sub	sp, #8
 80115a0:	af00      	add	r7, sp, #0
 80115a2:	6078      	str	r0, [r7, #4]
    }
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f7ff ffe9 	bl	801157c <_ZN8touchgfx15TouchControllerD1Ev>
 80115aa:	2104      	movs	r1, #4
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f017 fb7d 	bl	8028cac <_ZdlPvj>
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	4618      	mov	r0, r3
 80115b6:	3708      	adds	r7, #8
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}

080115bc <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 80115bc:	b480      	push	{r7}
 80115be:	b083      	sub	sp, #12
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 80115c4:	bf00      	nop
 80115c6:	370c      	adds	r7, #12
 80115c8:	46bd      	mov	sp, r7
 80115ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ce:	4770      	bx	lr

080115d0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 80115d0:	b480      	push	{r7}
 80115d2:	b085      	sub	sp, #20
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	60f8      	str	r0, [r7, #12]
 80115d8:	60b9      	str	r1, [r7, #8]
 80115da:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 80115dc:	2300      	movs	r3, #0
}
 80115de:	4618      	mov	r0, r3
 80115e0:	3714      	adds	r7, #20
 80115e2:	46bd      	mov	sp, r7
 80115e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e8:	4770      	bx	lr
	...

080115ec <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	4a05      	ldr	r2, [pc, #20]	; (801160c <_ZN20STM32TouchControllerD1Ev+0x20>)
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	601a      	str	r2, [r3, #0]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	4618      	mov	r0, r3
 80115fe:	f7ff ffbd 	bl	801157c <_ZN8touchgfx15TouchControllerD1Ev>
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4618      	mov	r0, r3
 8011606:	3708      	adds	r7, #8
 8011608:	46bd      	mov	sp, r7
 801160a:	bd80      	pop	{r7, pc}
 801160c:	0802ed94 	.word	0x0802ed94

08011610 <_ZN20STM32TouchControllerD0Ev>:
 8011610:	b580      	push	{r7, lr}
 8011612:	b082      	sub	sp, #8
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f7ff ffe7 	bl	80115ec <_ZN20STM32TouchControllerD1Ev>
 801161e:	2104      	movs	r1, #4
 8011620:	6878      	ldr	r0, [r7, #4]
 8011622:	f017 fb43 	bl	8028cac <_ZdlPvj>
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	4618      	mov	r0, r3
 801162a:	3708      	adds	r7, #8
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8011630:	b480      	push	{r7}
 8011632:	b083      	sub	sp, #12
 8011634:	af00      	add	r7, sp, #0
 8011636:	4603      	mov	r3, r0
 8011638:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801163a:	79fb      	ldrb	r3, [r7, #7]
 801163c:	2b03      	cmp	r3, #3
 801163e:	d80c      	bhi.n	801165a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8011640:	a201      	add	r2, pc, #4	; (adr r2, 8011648 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8011642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011646:	bf00      	nop
 8011648:	08011659 	.word	0x08011659
 801164c:	08011659 	.word	0x08011659
 8011650:	08011659 	.word	0x08011659
 8011654:	08011659 	.word	0x08011659
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 8011658:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 801165a:	bf00      	nop
 801165c:	370c      	adds	r7, #12
 801165e:	46bd      	mov	sp, r7
 8011660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011664:	4770      	bx	lr
 8011666:	bf00      	nop

08011668 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 8011668:	b480      	push	{r7}
 801166a:	b083      	sub	sp, #12
 801166c:	af00      	add	r7, sp, #0
 801166e:	4603      	mov	r3, r0
 8011670:	71fb      	strb	r3, [r7, #7]
    switch (id)
 8011672:	79fb      	ldrb	r3, [r7, #7]
 8011674:	2b03      	cmp	r3, #3
 8011676:	d80c      	bhi.n	8011692 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 8011678:	a201      	add	r2, pc, #4	; (adr r2, 8011680 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 801167a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801167e:	bf00      	nop
 8011680:	08011691 	.word	0x08011691
 8011684:	08011691 	.word	0x08011691
 8011688:	08011691 	.word	0x08011691
 801168c:	08011691 	.word	0x08011691
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 8011690:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 8011692:	bf00      	nop
 8011694:	370c      	adds	r7, #12
 8011696:	46bd      	mov	sp, r7
 8011698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801169c:	4770      	bx	lr
 801169e:	bf00      	nop

080116a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80116a0:	b480      	push	{r7}
 80116a2:	b083      	sub	sp, #12
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	4603      	mov	r3, r0
 80116a8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80116aa:	79fb      	ldrb	r3, [r7, #7]
 80116ac:	2b03      	cmp	r3, #3
 80116ae:	d80c      	bhi.n	80116ca <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 80116b0:	a201      	add	r2, pc, #4	; (adr r2, 80116b8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 80116b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b6:	bf00      	nop
 80116b8:	080116c9 	.word	0x080116c9
 80116bc:	080116c9 	.word	0x080116c9
 80116c0:	080116c9 	.word	0x080116c9
 80116c4:	080116c9 	.word	0x080116c9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 80116c8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 80116ca:	bf00      	nop
 80116cc:	370c      	adds	r7, #12
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr
 80116d6:	bf00      	nop

080116d8 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 80116d8:	b480      	push	{r7}
 80116da:	b083      	sub	sp, #12
 80116dc:	af00      	add	r7, sp, #0
 80116de:	6078      	str	r0, [r7, #4]
    {
 80116e0:	4a04      	ldr	r2, [pc, #16]	; (80116f4 <_ZN8touchgfx3HALD1Ev+0x1c>)
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	601a      	str	r2, [r3, #0]
    }
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	4618      	mov	r0, r3
 80116ea:	370c      	adds	r7, #12
 80116ec:	46bd      	mov	sp, r7
 80116ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116f2:	4770      	bx	lr
 80116f4:	0802f28c 	.word	0x0802f28c

080116f8 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b082      	sub	sp, #8
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
    }
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f7ff ffe9 	bl	80116d8 <_ZN8touchgfx3HALD1Ev>
 8011706:	217c      	movs	r1, #124	; 0x7c
 8011708:	6878      	ldr	r0, [r7, #4]
 801170a:	f017 facf 	bl	8028cac <_ZdlPvj>
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	4618      	mov	r0, r3
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	460b      	mov	r3, r1
 8011722:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	78fa      	ldrb	r2, [r7, #3]
 8011728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2201      	movs	r2, #1
 8011730:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8011734:	bf00      	nop
 8011736:	370c      	adds	r7, #12
 8011738:	46bd      	mov	sp, r7
 801173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173e:	4770      	bx	lr

08011740 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
 8011748:	460b      	mov	r3, r1
 801174a:	807b      	strh	r3, [r7, #2]
 801174c:	4613      	mov	r3, r2
 801174e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8011750:	4b0c      	ldr	r3, [pc, #48]	; (8011784 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 8011752:	881b      	ldrh	r3, [r3, #0]
 8011754:	887a      	ldrh	r2, [r7, #2]
 8011756:	429a      	cmp	r2, r3
 8011758:	d304      	bcc.n	8011764 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 801175a:	4b0b      	ldr	r3, [pc, #44]	; (8011788 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 801175c:	881b      	ldrh	r3, [r3, #0]
 801175e:	883a      	ldrh	r2, [r7, #0]
 8011760:	429a      	cmp	r2, r3
 8011762:	d205      	bcs.n	8011770 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 8011764:	4b09      	ldr	r3, [pc, #36]	; (801178c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 8011766:	4a0a      	ldr	r2, [pc, #40]	; (8011790 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 8011768:	219e      	movs	r1, #158	; 0x9e
 801176a:	480a      	ldr	r0, [pc, #40]	; (8011794 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 801176c:	f017 facc 	bl	8028d08 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8011770:	4a09      	ldr	r2, [pc, #36]	; (8011798 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 8011772:	887b      	ldrh	r3, [r7, #2]
 8011774:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 8011776:	4a09      	ldr	r2, [pc, #36]	; (801179c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 8011778:	883b      	ldrh	r3, [r7, #0]
 801177a:	8013      	strh	r3, [r2, #0]
    }
 801177c:	bf00      	nop
 801177e:	3708      	adds	r7, #8
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	2003bed4 	.word	0x2003bed4
 8011788:	2003bed6 	.word	0x2003bed6
 801178c:	0802ca34 	.word	0x0802ca34
 8011790:	0802ca98 	.word	0x0802ca98
 8011794:	0802cadc 	.word	0x0802cadc
 8011798:	2003beda 	.word	0x2003beda
 801179c:	2003bedc 	.word	0x2003bedc

080117a0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80117a0:	b580      	push	{r7, lr}
 80117a2:	b082      	sub	sp, #8
 80117a4:	af00      	add	r7, sp, #0
 80117a6:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d009      	beq.n	80117c6 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	685a      	ldr	r2, [r3, #4]
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	685b      	ldr	r3, [r3, #4]
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	4610      	mov	r0, r2
 80117c0:	4798      	blx	r3
 80117c2:	4603      	mov	r3, r0
 80117c4:	e000      	b.n	80117c8 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 80117c6:	2300      	movs	r3, #0
    }
 80117c8:	4618      	mov	r0, r3
 80117ca:	3708      	adds	r7, #8
 80117cc:	46bd      	mov	sp, r7
 80117ce:	bd80      	pop	{r7, pc}

080117d0 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80117d0:	b580      	push	{r7, lr}
 80117d2:	b082      	sub	sp, #8
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80117d8:	6878      	ldr	r0, [r7, #4]
 80117da:	f004 fd93 	bl	8016304 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	33ac      	adds	r3, #172	; 0xac
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	4798      	blx	r3
    }
 80117ea:	bf00      	nop
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}

080117f2 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 80117f2:	b480      	push	{r7}
 80117f4:	b083      	sub	sp, #12
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
 80117fa:	6039      	str	r1, [r7, #0]
        return false;
 80117fc:	2300      	movs	r3, #0
    }
 80117fe:	4618      	mov	r0, r3
 8011800:	370c      	adds	r7, #12
 8011802:	46bd      	mov	sp, r7
 8011804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011808:	4770      	bx	lr
	...

0801180c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801180c:	b580      	push	{r7, lr}
 801180e:	b084      	sub	sp, #16
 8011810:	af00      	add	r7, sp, #0
 8011812:	60f8      	str	r0, [r7, #12]
 8011814:	60b9      	str	r1, [r7, #8]
 8011816:	607a      	str	r2, [r7, #4]
 8011818:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801181a:	68bb      	ldr	r3, [r7, #8]
 801181c:	2b00      	cmp	r3, #0
 801181e:	d106      	bne.n	801182e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8011820:	4b0f      	ldr	r3, [pc, #60]	; (8011860 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8011822:	4a10      	ldr	r2, [pc, #64]	; (8011864 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8011824:	f240 21d2 	movw	r1, #722	; 0x2d2
 8011828:	480f      	ldr	r0, [pc, #60]	; (8011868 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801182a:	f017 fa6d 	bl	8028d08 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	68ba      	ldr	r2, [r7, #8]
 8011832:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	687a      	ldr	r2, [r7, #4]
 8011838:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	2b00      	cmp	r3, #0
 801183e:	bf14      	ite	ne
 8011840:	2301      	movne	r3, #1
 8011842:	2300      	moveq	r3, #0
 8011844:	b2da      	uxtb	r2, r3
 8011846:	4b09      	ldr	r3, [pc, #36]	; (801186c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8011848:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801184a:	68fb      	ldr	r3, [r7, #12]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	338c      	adds	r3, #140	; 0x8c
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	6839      	ldr	r1, [r7, #0]
 8011854:	68f8      	ldr	r0, [r7, #12]
 8011856:	4798      	blx	r3
    }
 8011858:	bf00      	nop
 801185a:	3710      	adds	r7, #16
 801185c:	46bd      	mov	sp, r7
 801185e:	bd80      	pop	{r7, pc}
 8011860:	0802cb20 	.word	0x0802cb20
 8011864:	0802cb58 	.word	0x0802cb58
 8011868:	0802cadc 	.word	0x0802cadc
 801186c:	2003bede 	.word	0x2003bede

08011870 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 8011870:	b480      	push	{r7}
 8011872:	b083      	sub	sp, #12
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
 8011878:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	683a      	ldr	r2, [r7, #0]
 801187e:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	bf14      	ite	ne
 8011886:	2301      	movne	r3, #1
 8011888:	2300      	moveq	r3, #0
 801188a:	b2da      	uxtb	r2, r3
 801188c:	4b03      	ldr	r3, [pc, #12]	; (801189c <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 801188e:	701a      	strb	r2, [r3, #0]
    }
 8011890:	bf00      	nop
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr
 801189c:	2003bedf 	.word	0x2003bedf

080118a0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 80118a0:	b480      	push	{r7}
 80118a2:	b083      	sub	sp, #12
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
        return 0;
 80118a8:	2300      	movs	r3, #0
    }
 80118aa:	4618      	mov	r0, r3
 80118ac:	370c      	adds	r7, #12
 80118ae:	46bd      	mov	sp, r7
 80118b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b4:	4770      	bx	lr

080118b6 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b082      	sub	sp, #8
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
 80118be:	460b      	mov	r3, r1
 80118c0:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d004      	beq.n	80118d4 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118ce:	887a      	ldrh	r2, [r7, #2]
 80118d0:	4610      	mov	r0, r2
 80118d2:	4798      	blx	r3
    }
 80118d4:	bf00      	nop
 80118d6:	3708      	adds	r7, #8
 80118d8:	46bd      	mov	sp, r7
 80118da:	bd80      	pop	{r7, pc}

080118dc <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 80118dc:	b580      	push	{r7, lr}
 80118de:	b082      	sub	sp, #8
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 80118e4:	687b      	ldr	r3, [r7, #4]
 80118e6:	685a      	ldr	r2, [r3, #4]
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	685b      	ldr	r3, [r3, #4]
 80118ec:	681b      	ldr	r3, [r3, #0]
 80118ee:	3318      	adds	r3, #24
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	4610      	mov	r0, r2
 80118f4:	4798      	blx	r3
 80118f6:	4603      	mov	r3, r0
    }
 80118f8:	4618      	mov	r0, r3
 80118fa:	3708      	adds	r7, #8
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}

08011900 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8011900:	b480      	push	{r7}
 8011902:	b085      	sub	sp, #20
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011914:	429a      	cmp	r2, r3
 8011916:	d011      	beq.n	801193c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8011918:	4b14      	ldr	r3, [pc, #80]	; (801196c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d11e      	bne.n	801195e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8011920:	4b13      	ldr	r3, [pc, #76]	; (8011970 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011922:	881b      	ldrh	r3, [r3, #0]
 8011924:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8011926:	4b13      	ldr	r3, [pc, #76]	; (8011974 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011928:	881a      	ldrh	r2, [r3, #0]
 801192a:	4b11      	ldr	r3, [pc, #68]	; (8011970 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801192c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801192e:	4a11      	ldr	r2, [pc, #68]	; (8011974 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011930:	89bb      	ldrh	r3, [r7, #12]
 8011932:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8011934:	4b0d      	ldr	r3, [pc, #52]	; (801196c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8011936:	2201      	movs	r2, #1
 8011938:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801193a:	e010      	b.n	801195e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801193c:	4b0b      	ldr	r3, [pc, #44]	; (801196c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801193e:	781b      	ldrb	r3, [r3, #0]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d00c      	beq.n	801195e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8011944:	4b0a      	ldr	r3, [pc, #40]	; (8011970 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011946:	881b      	ldrh	r3, [r3, #0]
 8011948:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801194a:	4b0a      	ldr	r3, [pc, #40]	; (8011974 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801194c:	881a      	ldrh	r2, [r3, #0]
 801194e:	4b08      	ldr	r3, [pc, #32]	; (8011970 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8011950:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 8011952:	4a08      	ldr	r2, [pc, #32]	; (8011974 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8011954:	89fb      	ldrh	r3, [r7, #14]
 8011956:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8011958:	4b04      	ldr	r3, [pc, #16]	; (801196c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801195a:	2200      	movs	r2, #0
 801195c:	701a      	strb	r2, [r3, #0]
    }
 801195e:	bf00      	nop
 8011960:	3714      	adds	r7, #20
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr
 801196a:	bf00      	nop
 801196c:	2003bed8 	.word	0x2003bed8
 8011970:	2003bed6 	.word	0x2003bed6
 8011974:	2003bed4 	.word	0x2003bed4

08011978 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8011978:	b580      	push	{r7, lr}
 801197a:	b082      	sub	sp, #8
 801197c:	af00      	add	r7, sp, #0
 801197e:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	4618      	mov	r0, r3
 8011984:	f003 ff23 	bl	80157ce <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8011988:	bf00      	nop
 801198a:	3708      	adds	r7, #8
 801198c:	46bd      	mov	sp, r7
 801198e:	bd80      	pop	{r7, pc}

08011990 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8011990:	b580      	push	{r7, lr}
 8011992:	b082      	sub	sp, #8
 8011994:	af00      	add	r7, sp, #0
 8011996:	6078      	str	r0, [r7, #4]
 8011998:	4a05      	ldr	r2, [pc, #20]	; (80119b0 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	601a      	str	r2, [r3, #0]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	4618      	mov	r0, r3
 80119a2:	f7ff fe99 	bl	80116d8 <_ZN8touchgfx3HALD1Ev>
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	4618      	mov	r0, r3
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}
 80119b0:	0802f0e4 	.word	0x0802f0e4

080119b4 <_ZN20TouchGFXGeneratedHALD0Ev>:
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f7ff ffe7 	bl	8011990 <_ZN20TouchGFXGeneratedHALD1Ev>
 80119c2:	217c      	movs	r1, #124	; 0x7c
 80119c4:	6878      	ldr	r0, [r7, #4]
 80119c6:	f017 f971 	bl	8028cac <_ZdlPvj>
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	4618      	mov	r0, r3
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	4618      	mov	r0, r3
 80119e0:	f7ff ffca 	bl	8011978 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80119e4:	bf00      	nop
 80119e6:	3708      	adds	r7, #8
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}

080119ec <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b082      	sub	sp, #8
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	4618      	mov	r0, r3
 80119f8:	f002 fbf8 	bl	80141ec <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80119fc:	bf00      	nop
 80119fe:	3708      	adds	r7, #8
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f002 fcae 	bl	8014370 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8011a14:	4603      	mov	r3, r0
}
 8011a16:	4618      	mov	r0, r3
 8011a18:	3708      	adds	r7, #8
 8011a1a:	46bd      	mov	sp, r7
 8011a1c:	bd80      	pop	{r7, pc}

08011a1e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 8011a1e:	b580      	push	{r7, lr}
 8011a20:	b082      	sub	sp, #8
 8011a22:	af00      	add	r7, sp, #0
 8011a24:	6078      	str	r0, [r7, #4]
 8011a26:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6839      	ldr	r1, [r7, #0]
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f002 fcad 	bl	801438c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8011a32:	bf00      	nop
 8011a34:	3708      	adds	r7, #8
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}

08011a3a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011a3a:	b580      	push	{r7, lr}
 8011a3c:	b082      	sub	sp, #8
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	6078      	str	r0, [r7, #4]
 8011a42:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	6839      	ldr	r1, [r7, #0]
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f002 fcb5 	bl	80143b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8011a4e:	bf00      	nop
 8011a50:	3708      	adds	r7, #8
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b084      	sub	sp, #16
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	60f8      	str	r0, [r7, #12]
 8011a5e:	60b9      	str	r1, [r7, #8]
 8011a60:	607a      	str	r2, [r7, #4]
 8011a62:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	683b      	ldr	r3, [r7, #0]
 8011a68:	687a      	ldr	r2, [r7, #4]
 8011a6a:	68b9      	ldr	r1, [r7, #8]
 8011a6c:	f002 fcc2 	bl	80143f4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8011a70:	4603      	mov	r3, r0
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}

08011a7a <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 8011a7a:	b580      	push	{r7, lr}
 8011a7c:	b082      	sub	sp, #8
 8011a7e:	af00      	add	r7, sp, #0
 8011a80:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	4618      	mov	r0, r3
 8011a86:	f002 fbef 	bl	8014268 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 8011a8a:	bf00      	nop
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}

08011a92 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8011a92:	b580      	push	{r7, lr}
 8011a94:	b082      	sub	sp, #8
 8011a96:	af00      	add	r7, sp, #0
 8011a98:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 8011a9a:	687b      	ldr	r3, [r7, #4]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f002 fbf3 	bl	8014288 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8011aa2:	bf00      	nop
 8011aa4:	3708      	adds	r7, #8
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b082      	sub	sp, #8
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f002 fbf5 	bl	80142a4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8011aba:	bf00      	nop
 8011abc:	3708      	adds	r7, #8
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}

08011ac2 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8011ac2:	b580      	push	{r7, lr}
 8011ac4:	b082      	sub	sp, #8
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	4618      	mov	r0, r3
 8011ace:	f002 fbf7 	bl	80142c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8011ad2:	bf00      	nop
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8011ada:	b580      	push	{r7, lr}
 8011adc:	b082      	sub	sp, #8
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f002 fc19 	bl	801431c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8011aea:	4603      	mov	r3, r0
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3708      	adds	r7, #8
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}

08011af4 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b082      	sub	sp, #8
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	4618      	mov	r0, r3
 8011b00:	f002 fc1a 	bl	8014338 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8011b04:	bf00      	nop
 8011b06:	3708      	adds	r7, #8
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}

08011b0c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b082      	sub	sp, #8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
 8011b14:	4a05      	ldr	r2, [pc, #20]	; (8011b2c <_ZN11TouchGFXHALD1Ev+0x20>)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	601a      	str	r2, [r3, #0]
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f7ff ff37 	bl	8011990 <_ZN20TouchGFXGeneratedHALD1Ev>
 8011b22:	687b      	ldr	r3, [r7, #4]
 8011b24:	4618      	mov	r0, r3
 8011b26:	3708      	adds	r7, #8
 8011b28:	46bd      	mov	sp, r7
 8011b2a:	bd80      	pop	{r7, pc}
 8011b2c:	0802edc4 	.word	0x0802edc4

08011b30 <_ZN11TouchGFXHALD0Ev>:
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f7ff ffe7 	bl	8011b0c <_ZN11TouchGFXHALD1Ev>
 8011b3e:	217c      	movs	r1, #124	; 0x7c
 8011b40:	6878      	ldr	r0, [r7, #4]
 8011b42:	f017 f8b3 	bl	8028cac <_ZdlPvj>
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3708      	adds	r7, #8
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
    {
 8011b58:	4a04      	ldr	r2, [pc, #16]	; (8011b6c <_ZN12MJPEGDecoderD1Ev+0x1c>)
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	601a      	str	r2, [r3, #0]
    }
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	4618      	mov	r0, r3
 8011b62:	370c      	adds	r7, #12
 8011b64:	46bd      	mov	sp, r7
 8011b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6a:	4770      	bx	lr
 8011b6c:	0802eee0 	.word	0x0802eee0

08011b70 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b082      	sub	sp, #8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
    }
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f7ff ffe9 	bl	8011b50 <_ZN12MJPEGDecoderD1Ev>
 8011b7e:	2104      	movs	r1, #4
 8011b80:	6878      	ldr	r0, [r7, #4]
 8011b82:	f017 f893 	bl	8028cac <_ZdlPvj>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	4618      	mov	r0, r3
 8011b8a:	3708      	adds	r7, #8
 8011b8c:	46bd      	mov	sp, r7
 8011b8e:	bd80      	pop	{r7, pc}

08011b90 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8011b90:	b480      	push	{r7}
 8011b92:	b083      	sub	sp, #12
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	695b      	ldr	r3, [r3, #20]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	370c      	adds	r7, #12
 8011ba0:	46bd      	mov	sp, r7
 8011ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba6:	4770      	bx	lr

08011ba8 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8011ba8:	b480      	push	{r7}
 8011baa:	b083      	sub	sp, #12
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8011bb6:	4618      	mov	r0, r3
 8011bb8:	370c      	adds	r7, #12
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc0:	4770      	bx	lr
	...

08011bc4 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8011bc4:	b480      	push	{r7}
 8011bc6:	b085      	sub	sp, #20
 8011bc8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8011bca:	4b21      	ldr	r3, [pc, #132]	; (8011c50 <SCB_CleanInvalidateDCache+0x8c>)
 8011bcc:	2200      	movs	r2, #0
 8011bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8011bd2:	f3bf 8f4f 	dsb	sy
}
 8011bd6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8011bd8:	4b1d      	ldr	r3, [pc, #116]	; (8011c50 <SCB_CleanInvalidateDCache+0x8c>)
 8011bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011bde:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	0b5b      	lsrs	r3, r3, #13
 8011be4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8011be8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	08db      	lsrs	r3, r3, #3
 8011bee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011bf2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	015a      	lsls	r2, r3, #5
 8011bf8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8011bfc:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8011bfe:	68ba      	ldr	r2, [r7, #8]
 8011c00:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8011c02:	4913      	ldr	r1, [pc, #76]	; (8011c50 <SCB_CleanInvalidateDCache+0x8c>)
 8011c04:	4313      	orrs	r3, r2
 8011c06:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8011c0a:	68bb      	ldr	r3, [r7, #8]
 8011c0c:	1e5a      	subs	r2, r3, #1
 8011c0e:	60ba      	str	r2, [r7, #8]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	bf14      	ite	ne
 8011c14:	2301      	movne	r3, #1
 8011c16:	2300      	moveq	r3, #0
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d000      	beq.n	8011c20 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8011c1e:	e7e9      	b.n	8011bf4 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	1e5a      	subs	r2, r3, #1
 8011c24:	60fa      	str	r2, [r7, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	bf14      	ite	ne
 8011c2a:	2301      	movne	r3, #1
 8011c2c:	2300      	moveq	r3, #0
 8011c2e:	b2db      	uxtb	r3, r3
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d000      	beq.n	8011c36 <SCB_CleanInvalidateDCache+0x72>
    do {
 8011c34:	e7d9      	b.n	8011bea <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8011c36:	f3bf 8f4f 	dsb	sy
}
 8011c3a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8011c3c:	f3bf 8f6f 	isb	sy
}
 8011c40:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8011c42:	bf00      	nop
 8011c44:	3714      	adds	r7, #20
 8011c46:	46bd      	mov	sp, r7
 8011c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4c:	4770      	bx	lr
 8011c4e:	bf00      	nop
 8011c50:	e000ed00 	.word	0xe000ed00

08011c54 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8011c54:	b480      	push	{r7}
 8011c56:	b083      	sub	sp, #12
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	4a04      	ldr	r2, [pc, #16]	; (8011c70 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	601a      	str	r2, [r3, #0]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	4618      	mov	r0, r3
 8011c66:	370c      	adds	r7, #12
 8011c68:	46bd      	mov	sp, r7
 8011c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c6e:	4770      	bx	lr
 8011c70:	0802eee0 	.word	0x0802eee0

08011c74 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b082      	sub	sp, #8
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f7ff ffe8 	bl	8011c54 <_ZN12MJPEGDecoderC1Ev>
 8011c84:	4a21      	ldr	r2, [pc, #132]	; (8011d0c <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	601a      	str	r2, [r3, #0]
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	615a      	str	r2, [r3, #20]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	2200      	movs	r2, #0
 8011c94:	619a      	str	r2, [r3, #24]
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	2200      	movs	r2, #0
 8011c9a:	61da      	str	r2, [r3, #28]
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	621a      	str	r2, [r3, #32]
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	2200      	movs	r2, #0
 8011ca6:	625a      	str	r2, [r3, #36]	; 0x24
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2200      	movs	r2, #0
 8011cac:	629a      	str	r2, [r3, #40]	; 0x28
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	62da      	str	r2, [r3, #44]	; 0x2c
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	2200      	movs	r2, #0
 8011cbe:	635a      	str	r2, [r3, #52]	; 0x34
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2200      	movs	r2, #0
 8011cc4:	639a      	str	r2, [r3, #56]	; 0x38
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2200      	movs	r2, #0
 8011cca:	63da      	str	r2, [r3, #60]	; 0x3c
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 8011cd4:	687b      	ldr	r3, [r7, #4]
 8011cd6:	2200      	movs	r2, #0
 8011cd8:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2200      	movs	r2, #0
 8011cde:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	2200      	movs	r2, #0
 8011ce4:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	2200      	movs	r2, #0
 8011cea:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 8011cec:	f003 f904 	bl	8014ef8 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 8011cf0:	2200      	movs	r2, #0
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	2001      	movs	r0, #1
 8011cf6:	f7f7 fd41 	bl	800977c <osSemaphoreNew>
 8011cfa:	4603      	mov	r3, r0
 8011cfc:	4a04      	ldr	r2, [pc, #16]	; (8011d10 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 8011cfe:	6013      	str	r3, [r2, #0]
}
 8011d00:	687b      	ldr	r3, [r7, #4]
 8011d02:	4618      	mov	r0, r3
 8011d04:	3708      	adds	r7, #8
 8011d06:	46bd      	mov	sp, r7
 8011d08:	bd80      	pop	{r7, pc}
 8011d0a:	bf00      	nop
 8011d0c:	0802ee9c 	.word	0x0802ee9c
 8011d10:	20033678 	.word	0x20033678

08011d14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b086      	sub	sp, #24
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
 8011d20:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8011d22:	68fb      	ldr	r3, [r7, #12]
 8011d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d008      	beq.n	8011d3c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d32:	68b9      	ldr	r1, [r7, #8]
 8011d34:	1acb      	subs	r3, r1, r3
 8011d36:	4413      	add	r3, r2
 8011d38:	617b      	str	r3, [r7, #20]
 8011d3a:	e004      	b.n	8011d46 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	4413      	add	r3, r2
 8011d44:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8011d46:	683a      	ldr	r2, [r7, #0]
 8011d48:	6879      	ldr	r1, [r7, #4]
 8011d4a:	6978      	ldr	r0, [r7, #20]
 8011d4c:	f017 ff75 	bl	8029c3a <strncmp>
 8011d50:	4603      	mov	r3, r0
}
 8011d52:	4618      	mov	r0, r3
 8011d54:	3718      	adds	r7, #24
 8011d56:	46bd      	mov	sp, r7
 8011d58:	bd80      	pop	{r7, pc}

08011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 8011d5a:	b480      	push	{r7}
 8011d5c:	b085      	sub	sp, #20
 8011d5e:	af00      	add	r7, sp, #0
 8011d60:	6078      	str	r0, [r7, #4]
 8011d62:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d68:	2b00      	cmp	r3, #0
 8011d6a:	d024      	beq.n	8011db6 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d70:	683a      	ldr	r2, [r7, #0]
 8011d72:	1ad3      	subs	r3, r2, r3
 8011d74:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d7a:	68bb      	ldr	r3, [r7, #8]
 8011d7c:	4413      	add	r3, r2
 8011d7e:	781b      	ldrb	r3, [r3, #0]
 8011d80:	4619      	mov	r1, r3
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011d86:	68bb      	ldr	r3, [r7, #8]
 8011d88:	3301      	adds	r3, #1
 8011d8a:	4413      	add	r3, r2
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	021b      	lsls	r3, r3, #8
 8011d90:	ea41 0203 	orr.w	r2, r1, r3
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	3302      	adds	r3, #2
 8011d9c:	440b      	add	r3, r1
 8011d9e:	781b      	ldrb	r3, [r3, #0]
 8011da0:	041b      	lsls	r3, r3, #16
 8011da2:	431a      	orrs	r2, r3
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8011da8:	68bb      	ldr	r3, [r7, #8]
 8011daa:	3303      	adds	r3, #3
 8011dac:	440b      	add	r3, r1
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	061b      	lsls	r3, r3, #24
 8011db2:	4313      	orrs	r3, r2
 8011db4:	e016      	b.n	8011de4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dba:	683b      	ldr	r3, [r7, #0]
 8011dbc:	4413      	add	r3, r2
 8011dbe:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	781b      	ldrb	r3, [r3, #0]
 8011dc4:	461a      	mov	r2, r3
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	3301      	adds	r3, #1
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	021b      	lsls	r3, r3, #8
 8011dce:	431a      	orrs	r2, r3
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	3302      	adds	r3, #2
 8011dd4:	781b      	ldrb	r3, [r3, #0]
 8011dd6:	041b      	lsls	r3, r3, #16
 8011dd8:	431a      	orrs	r2, r3
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	3303      	adds	r3, #3
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	061b      	lsls	r3, r3, #24
 8011de2:	4313      	orrs	r3, r2
    }
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3714      	adds	r7, #20
 8011de8:	46bd      	mov	sp, r7
 8011dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dee:	4770      	bx	lr

08011df0 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 8011df0:	b480      	push	{r7}
 8011df2:	b085      	sub	sp, #20
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
 8011df8:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d013      	beq.n	8011e2a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011e06:	683a      	ldr	r2, [r7, #0]
 8011e08:	1ad3      	subs	r3, r2, r3
 8011e0a:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	4413      	add	r3, r2
 8011e14:	781b      	ldrb	r3, [r3, #0]
 8011e16:	4619      	mov	r1, r3
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	3301      	adds	r3, #1
 8011e20:	4413      	add	r3, r2
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	021b      	lsls	r3, r3, #8
 8011e26:	430b      	orrs	r3, r1
 8011e28:	e00c      	b.n	8011e44 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e2e:	683b      	ldr	r3, [r7, #0]
 8011e30:	4413      	add	r3, r2
 8011e32:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	461a      	mov	r2, r3
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	3301      	adds	r3, #1
 8011e3e:	781b      	ldrb	r3, [r3, #0]
 8011e40:	021b      	lsls	r3, r3, #8
 8011e42:	4313      	orrs	r3, r2
    }
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3714      	adds	r7, #20
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4e:	4770      	bx	lr

08011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b084      	sub	sp, #16
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	60f8      	str	r0, [r7, #12]
 8011e58:	60b9      	str	r1, [r7, #8]
 8011e5a:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d033      	beq.n	8011ecc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e68:	687a      	ldr	r2, [r7, #4]
 8011e6a:	429a      	cmp	r2, r3
 8011e6c:	d909      	bls.n	8011e82 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	2209      	movs	r2, #9
 8011e72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8011e76:	4b19      	ldr	r3, [pc, #100]	; (8011edc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8011e78:	4a19      	ldr	r2, [pc, #100]	; (8011ee0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 8011e7a:	21ad      	movs	r1, #173	; 0xad
 8011e7c:	4819      	ldr	r0, [pc, #100]	; (8011ee4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 8011e7e:	f016 ff43 	bl	8028d08 <__assert_func>
        }

        reader->seek(offset);
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	330c      	adds	r3, #12
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	68b9      	ldr	r1, [r7, #8]
 8011e92:	4610      	mov	r0, r2
 8011e94:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	3310      	adds	r3, #16
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	68fa      	ldr	r2, [r7, #12]
 8011ea6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8011ea8:	687a      	ldr	r2, [r7, #4]
 8011eaa:	4798      	blx	r3
 8011eac:	4603      	mov	r3, r0
 8011eae:	f083 0301 	eor.w	r3, r3, #1
 8011eb2:	b2db      	uxtb	r3, r3
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d003      	beq.n	8011ec0 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	220d      	movs	r2, #13
 8011ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	68ba      	ldr	r2, [r7, #8]
 8011ec4:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011eca:	e003      	b.n	8011ed4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ed0:	68bb      	ldr	r3, [r7, #8]
 8011ed2:	4413      	add	r3, r2
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3710      	adds	r7, #16
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bd80      	pop	{r7, pc}
 8011edc:	0802cba8 	.word	0x0802cba8
 8011ee0:	0802cbbc 	.word	0x0802cbbc
 8011ee4:	0802cc00 	.word	0x0802cc00

08011ee8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 8011ee8:	b580      	push	{r7, lr}
 8011eea:	b08e      	sub	sp, #56	; 0x38
 8011eec:	af04      	add	r7, sp, #16
 8011eee:	60f8      	str	r0, [r7, #12]
 8011ef0:	60b9      	str	r1, [r7, #8]
 8011ef2:	4611      	mov	r1, r2
 8011ef4:	461a      	mov	r2, r3
 8011ef6:	460b      	mov	r3, r1
 8011ef8:	80fb      	strh	r3, [r7, #6]
 8011efa:	4613      	mov	r3, r2
 8011efc:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	695b      	ldr	r3, [r3, #20]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d105      	bne.n	8011f12 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 8011f06:	4b4e      	ldr	r3, [pc, #312]	; (8012040 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 8011f08:	4a4e      	ldr	r2, [pc, #312]	; (8012044 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 8011f0a:	21bf      	movs	r1, #191	; 0xbf
 8011f0c:	484e      	ldr	r0, [pc, #312]	; (8012048 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 8011f0e:	f016 fefb 	bl	8028d08 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8011f12:	68fb      	ldr	r3, [r7, #12]
 8011f14:	699b      	ldr	r3, [r3, #24]
 8011f16:	2208      	movs	r2, #8
 8011f18:	4619      	mov	r1, r3
 8011f1a:	68f8      	ldr	r0, [r7, #12]
 8011f1c:	f7ff ff98 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	699b      	ldr	r3, [r3, #24]
 8011f24:	4619      	mov	r1, r3
 8011f26:	68f8      	ldr	r0, [r7, #12]
 8011f28:	f7ff ff62 	bl	8011df0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8011f2c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	699b      	ldr	r3, [r3, #24]
 8011f32:	3302      	adds	r3, #2
 8011f34:	4619      	mov	r1, r3
 8011f36:	68f8      	ldr	r0, [r7, #12]
 8011f38:	f7ff ff5a 	bl	8011df0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8011f3c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	699b      	ldr	r3, [r3, #24]
 8011f42:	3304      	adds	r3, #4
 8011f44:	4619      	mov	r1, r3
 8011f46:	68f8      	ldr	r0, [r7, #12]
 8011f48:	f7ff ff07 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8011f4c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 8011f4e:	f243 0330 	movw	r3, #12336	; 0x3030
 8011f52:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8011f54:	f246 3364 	movw	r3, #25444	; 0x6364
 8011f58:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	699a      	ldr	r2, [r3, #24]
 8011f5e:	69bb      	ldr	r3, [r7, #24]
 8011f60:	4413      	add	r3, r2
 8011f62:	f103 0208 	add.w	r2, r3, #8
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f6a:	429a      	cmp	r2, r3
 8011f6c:	d255      	bcs.n	801201a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8011f6e:	6a3b      	ldr	r3, [r7, #32]
 8011f70:	f243 0230 	movw	r2, #12336	; 0x3030
 8011f74:	4293      	cmp	r3, r2
 8011f76:	d126      	bne.n	8011fc6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	f246 3264 	movw	r2, #25444	; 0x6364
 8011f7e:	4293      	cmp	r3, r2
 8011f80:	d121      	bne.n	8011fc6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8011f82:	69bb      	ldr	r3, [r7, #24]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d01e      	beq.n	8011fc6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	699b      	ldr	r3, [r3, #24]
 8011f8c:	f103 0208 	add.w	r2, r3, #8
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	699b      	ldr	r3, [r3, #24]
 8011f98:	69ba      	ldr	r2, [r7, #24]
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	68f8      	ldr	r0, [r7, #12]
 8011f9e:	f7ff ff57 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8011fa2:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8011fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa6:	9302      	str	r3, [sp, #8]
 8011fa8:	88bb      	ldrh	r3, [r7, #4]
 8011faa:	9301      	str	r3, [sp, #4]
 8011fac:	88fb      	ldrh	r3, [r7, #6]
 8011fae:	9300      	str	r3, [sp, #0]
 8011fb0:	68bb      	ldr	r3, [r7, #8]
 8011fb2:	69ba      	ldr	r2, [r7, #24]
 8011fb4:	6939      	ldr	r1, [r7, #16]
 8011fb6:	68f8      	ldr	r0, [r7, #12]
 8011fb8:	f000 fa8e 	bl	80124d8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	695b      	ldr	r3, [r3, #20]
 8011fc0:	1c5a      	adds	r2, r3, #1
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	699a      	ldr	r2, [r3, #24]
 8011fd0:	69bb      	ldr	r3, [r7, #24]
 8011fd2:	441a      	add	r2, r3
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 8011fd8:	69bb      	ldr	r3, [r7, #24]
 8011fda:	2b00      	cmp	r3, #0
 8011fdc:	d105      	bne.n	8011fea <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	699b      	ldr	r3, [r3, #24]
 8011fe2:	f103 0208 	add.w	r2, r3, #8
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	699b      	ldr	r3, [r3, #24]
 8011fee:	3301      	adds	r3, #1
 8011ff0:	f023 0201 	bic.w	r2, r3, #1
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	699a      	ldr	r2, [r3, #24]
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012000:	429a      	cmp	r2, r3
 8012002:	d114      	bne.n	801202e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2201      	movs	r2, #1
 8012008:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	6a1a      	ldr	r2, [r3, #32]
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8012012:	2301      	movs	r3, #1
 8012014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012018:	e009      	b.n	801202e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2201      	movs	r2, #1
 801201e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	6a1a      	ldr	r2, [r3, #32]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8012028:	2301      	movs	r3, #1
 801202a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 801202e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012032:	f083 0301 	eor.w	r3, r3, #1
 8012036:	b2db      	uxtb	r3, r3
}
 8012038:	4618      	mov	r0, r3
 801203a:	3728      	adds	r7, #40	; 0x28
 801203c:	46bd      	mov	sp, r7
 801203e:	bd80      	pop	{r7, pc}
 8012040:	0802cc38 	.word	0x0802cc38
 8012044:	0802cc84 	.word	0x0802cc84
 8012048:	0802cc00 	.word	0x0802cc00

0801204c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b086      	sub	sp, #24
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	695b      	ldr	r3, [r3, #20]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d105      	bne.n	8012068 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 801205c:	4b37      	ldr	r3, [pc, #220]	; (801213c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 801205e:	4a38      	ldr	r2, [pc, #224]	; (8012140 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8012060:	21f3      	movs	r1, #243	; 0xf3
 8012062:	4838      	ldr	r0, [pc, #224]	; (8012144 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8012064:	f016 fe50 	bl	8028d08 <__assert_func>

    readData(currentMovieOffset, 8);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	699b      	ldr	r3, [r3, #24]
 801206c:	2208      	movs	r2, #8
 801206e:	4619      	mov	r1, r3
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f7ff feed 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	699b      	ldr	r3, [r3, #24]
 801207a:	3304      	adds	r3, #4
 801207c:	4619      	mov	r1, r3
 801207e:	6878      	ldr	r0, [r7, #4]
 8012080:	f7ff fe6b 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012084:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	699a      	ldr	r2, [r3, #24]
 801208a:	697b      	ldr	r3, [r7, #20]
 801208c:	4413      	add	r3, r2
 801208e:	f103 0208 	add.w	r2, r3, #8
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012096:	429a      	cmp	r2, r3
 8012098:	d243      	bcs.n	8012122 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	699a      	ldr	r2, [r3, #24]
 801209e:	697b      	ldr	r3, [r7, #20]
 80120a0:	4413      	add	r3, r2
 80120a2:	f103 0208 	add.w	r2, r3, #8
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	699b      	ldr	r3, [r3, #24]
 80120ae:	3301      	adds	r3, #1
 80120b0:	f023 0201 	bic.w	r2, r3, #1
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	619a      	str	r2, [r3, #24]
        frameNumber++;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	695b      	ldr	r3, [r3, #20]
 80120bc:	1c5a      	adds	r2, r3, #1
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	699b      	ldr	r3, [r3, #24]
 80120c6:	2208      	movs	r2, #8
 80120c8:	4619      	mov	r1, r3
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f7ff fec0 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	699b      	ldr	r3, [r3, #24]
 80120d4:	4619      	mov	r1, r3
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7ff fe8a 	bl	8011df0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80120dc:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80120de:	687b      	ldr	r3, [r7, #4]
 80120e0:	699b      	ldr	r3, [r3, #24]
 80120e2:	3302      	adds	r3, #2
 80120e4:	4619      	mov	r1, r3
 80120e6:	6878      	ldr	r0, [r7, #4]
 80120e8:	f7ff fe82 	bl	8011df0 <_ZN20HardwareMJPEGDecoder6getU16Em>
 80120ec:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	699b      	ldr	r3, [r3, #24]
 80120f2:	3304      	adds	r3, #4
 80120f4:	4619      	mov	r1, r3
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f7ff fe2f 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80120fc:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 80120fe:	f243 0330 	movw	r3, #12336	; 0x3030
 8012102:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 8012104:	f246 3364 	movw	r3, #25444	; 0x6364
 8012108:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	f243 0230 	movw	r2, #12336	; 0x3030
 8012110:	4293      	cmp	r3, r2
 8012112:	d1b8      	bne.n	8012086 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	f246 3264 	movw	r2, #25444	; 0x6364
 801211a:	4293      	cmp	r3, r2
 801211c:	d1b3      	bne.n	8012086 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 801211e:	2301      	movs	r3, #1
 8012120:	e007      	b.n	8012132 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2201      	movs	r2, #1
 8012126:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	6a1a      	ldr	r2, [r3, #32]
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	619a      	str	r2, [r3, #24]
    return false;
 8012130:	2300      	movs	r3, #0
}
 8012132:	4618      	mov	r0, r3
 8012134:	3718      	adds	r7, #24
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	0802cc38 	.word	0x0802cc38
 8012140:	0802cce0 	.word	0x0802cce0
 8012144:	0802cc00 	.word	0x0802cc00

08012148 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
    movieData = movie;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	68ba      	ldr	r2, [r7, #8]
 8012158:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	687a      	ldr	r2, [r7, #4]
 801215e:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2200      	movs	r2, #0
 8012164:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f000 f834 	bl	80121d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 801216c:	bf00      	nop
 801216e:	3710      	adds	r7, #16
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}

08012174 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 8012174:	b580      	push	{r7, lr}
 8012176:	b082      	sub	sp, #8
 8012178:	af00      	add	r7, sp, #0
 801217a:	6078      	str	r0, [r7, #4]
 801217c:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	683a      	ldr	r2, [r7, #0]
 8012182:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	2200      	movs	r2, #0
 8012188:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 801218a:	683b      	ldr	r3, [r7, #0]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	3308      	adds	r3, #8
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	6838      	ldr	r0, [r7, #0]
 8012194:	4798      	blx	r3
 8012196:	4602      	mov	r2, r0
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	f000 f819 	bl	80121d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 80121a2:	bf00      	nop
 80121a4:	3708      	adds	r7, #8
 80121a6:	46bd      	mov	sp, r7
 80121a8:	bd80      	pop	{r7, pc}

080121aa <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 80121aa:	b480      	push	{r7}
 80121ac:	b083      	sub	sp, #12
 80121ae:	af00      	add	r7, sp, #0
 80121b0:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d103      	bne.n	80121c2 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d001      	beq.n	80121c6 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 80121c2:	2301      	movs	r3, #1
 80121c4:	e000      	b.n	80121c8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 80121c6:	2300      	movs	r3, #0
}
 80121c8:	4618      	mov	r0, r3
 80121ca:	370c      	adds	r7, #12
 80121cc:	46bd      	mov	sp, r7
 80121ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121d2:	4770      	bx	lr

080121d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b08a      	sub	sp, #40	; 0x28
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2200      	movs	r2, #0
 80121e0:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 80121e2:	687b      	ldr	r3, [r7, #4]
 80121e4:	2200      	movs	r2, #0
 80121e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 80121ea:	2248      	movs	r2, #72	; 0x48
 80121ec:	2100      	movs	r1, #0
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7ff fe2e 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	6999      	ldr	r1, [r3, #24]
 80121f8:	2304      	movs	r3, #4
 80121fa:	4aa5      	ldr	r2, [pc, #660]	; (8012490 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 80121fc:	6878      	ldr	r0, [r7, #4]
 80121fe:	f7ff fd89 	bl	8011d14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	bf14      	ite	ne
 8012208:	2301      	movne	r3, #1
 801220a:	2300      	moveq	r3, #0
 801220c:	b2db      	uxtb	r3, r3
 801220e:	2b00      	cmp	r3, #0
 8012210:	d00a      	beq.n	8012228 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2203      	movs	r2, #3
 8012216:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 801221a:	4b9e      	ldr	r3, [pc, #632]	; (8012494 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 801221c:	4a9e      	ldr	r2, [pc, #632]	; (8012498 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 801221e:	f240 113b 	movw	r1, #315	; 0x13b
 8012222:	489e      	ldr	r0, [pc, #632]	; (801249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8012224:	f016 fd70 	bl	8028d08 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	699b      	ldr	r3, [r3, #24]
 801222c:	f103 0208 	add.w	r2, r3, #8
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	6999      	ldr	r1, [r3, #24]
 8012238:	2304      	movs	r3, #4
 801223a:	4a99      	ldr	r2, [pc, #612]	; (80124a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 801223c:	6878      	ldr	r0, [r7, #4]
 801223e:	f7ff fd69 	bl	8011d14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012242:	4603      	mov	r3, r0
 8012244:	2b00      	cmp	r3, #0
 8012246:	bf14      	ite	ne
 8012248:	2301      	movne	r3, #1
 801224a:	2300      	moveq	r3, #0
 801224c:	b2db      	uxtb	r3, r3
 801224e:	2b00      	cmp	r3, #0
 8012250:	d00a      	beq.n	8012268 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	2204      	movs	r2, #4
 8012256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 801225a:	4b92      	ldr	r3, [pc, #584]	; (80124a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 801225c:	4a8e      	ldr	r2, [pc, #568]	; (8012498 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 801225e:	f240 1143 	movw	r1, #323	; 0x143
 8012262:	488e      	ldr	r0, [pc, #568]	; (801249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8012264:	f016 fd50 	bl	8028d08 <__assert_func>
    }

    currentMovieOffset += 4;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	699b      	ldr	r3, [r3, #24]
 801226c:	1d1a      	adds	r2, r3, #4
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	6999      	ldr	r1, [r3, #24]
 8012276:	2304      	movs	r3, #4
 8012278:	4a8b      	ldr	r2, [pc, #556]	; (80124a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 801227a:	6878      	ldr	r0, [r7, #4]
 801227c:	f7ff fd4a 	bl	8011d14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012280:	4603      	mov	r3, r0
 8012282:	2b00      	cmp	r3, #0
 8012284:	bf14      	ite	ne
 8012286:	2301      	movne	r3, #1
 8012288:	2300      	moveq	r3, #0
 801228a:	b2db      	uxtb	r3, r3
 801228c:	2b00      	cmp	r3, #0
 801228e:	d00a      	beq.n	80122a6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2205      	movs	r2, #5
 8012294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 8012298:	4b84      	ldr	r3, [pc, #528]	; (80124ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 801229a:	4a7f      	ldr	r2, [pc, #508]	; (8012498 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 801229c:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80122a0:	487e      	ldr	r0, [pc, #504]	; (801249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80122a2:	f016 fd31 	bl	8028d08 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	699b      	ldr	r3, [r3, #24]
 80122aa:	3304      	adds	r3, #4
 80122ac:	4619      	mov	r1, r3
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f7ff fd53 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80122b4:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	699b      	ldr	r3, [r3, #24]
 80122ba:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 80122bc:	69fb      	ldr	r3, [r7, #28]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d106      	bne.n	80122d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 80122c2:	4b7b      	ldr	r3, [pc, #492]	; (80124b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 80122c4:	4a74      	ldr	r2, [pc, #464]	; (8012498 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80122c6:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80122ca:	4874      	ldr	r0, [pc, #464]	; (801249c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80122cc:	f016 fd1c 	bl	8028d08 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 80122d0:	2301      	movs	r3, #1
 80122d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	699b      	ldr	r3, [r3, #24]
 80122da:	3308      	adds	r3, #8
 80122dc:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 80122de:	2304      	movs	r3, #4
 80122e0:	4a74      	ldr	r2, [pc, #464]	; (80124b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 80122e2:	6979      	ldr	r1, [r7, #20]
 80122e4:	6878      	ldr	r0, [r7, #4]
 80122e6:	f7ff fd15 	bl	8011d14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80122ea:	4603      	mov	r3, r0
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	bf14      	ite	ne
 80122f0:	2301      	movne	r3, #1
 80122f2:	2300      	moveq	r3, #0
 80122f4:	b2db      	uxtb	r3, r3
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d006      	beq.n	8012308 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2206      	movs	r2, #6
 80122fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8012302:	2300      	movs	r3, #0
 8012304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 8012308:	697b      	ldr	r3, [r7, #20]
 801230a:	3304      	adds	r3, #4
 801230c:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 801230e:	2304      	movs	r3, #4
 8012310:	4a69      	ldr	r2, [pc, #420]	; (80124b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8012312:	6979      	ldr	r1, [r7, #20]
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7ff fcfd 	bl	8011d14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 801231a:	4603      	mov	r3, r0
 801231c:	2b00      	cmp	r3, #0
 801231e:	bf14      	ite	ne
 8012320:	2301      	movne	r3, #1
 8012322:	2300      	moveq	r3, #0
 8012324:	b2db      	uxtb	r3, r3
 8012326:	2b00      	cmp	r3, #0
 8012328:	d006      	beq.n	8012338 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	2207      	movs	r2, #7
 801232e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8012332:	2300      	movs	r3, #0
 8012334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8012338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801233c:	2b00      	cmp	r3, #0
 801233e:	d028      	beq.n	8012392 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8012340:	697b      	ldr	r3, [r7, #20]
 8012342:	3308      	adds	r3, #8
 8012344:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 8012346:	6979      	ldr	r1, [r7, #20]
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7ff fd06 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 801234e:	4603      	mov	r3, r0
 8012350:	4a5a      	ldr	r2, [pc, #360]	; (80124bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 8012352:	fba2 2303 	umull	r2, r3, r2, r3
 8012356:	099a      	lsrs	r2, r3, #6
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	3310      	adds	r3, #16
 8012360:	4619      	mov	r1, r3
 8012362:	6878      	ldr	r0, [r7, #4]
 8012364:	f7ff fcf9 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012368:	4602      	mov	r2, r0
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	3320      	adds	r3, #32
 8012372:	4619      	mov	r1, r3
 8012374:	6878      	ldr	r0, [r7, #4]
 8012376:	f7ff fcf0 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 801237a:	4602      	mov	r2, r0
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8012380:	697b      	ldr	r3, [r7, #20]
 8012382:	3324      	adds	r3, #36	; 0x24
 8012384:	4619      	mov	r1, r3
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f7ff fce7 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 801238c:	4602      	mov	r2, r0
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8012392:	69ba      	ldr	r2, [r7, #24]
 8012394:	69fb      	ldr	r3, [r7, #28]
 8012396:	4413      	add	r3, r2
 8012398:	3308      	adds	r3, #8
 801239a:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 801239c:	220c      	movs	r2, #12
 801239e:	6a39      	ldr	r1, [r7, #32]
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f7ff fd55 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80123a6:	6a3b      	ldr	r3, [r7, #32]
 80123a8:	f103 0108 	add.w	r1, r3, #8
 80123ac:	2304      	movs	r3, #4
 80123ae:	4a44      	ldr	r2, [pc, #272]	; (80124c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 80123b0:	6878      	ldr	r0, [r7, #4]
 80123b2:	f7ff fcaf 	bl	8011d14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80123b6:	4603      	mov	r3, r0
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d00b      	beq.n	80123d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d106      	bne.n	80123d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123ca:	6a3a      	ldr	r2, [r7, #32]
 80123cc:	429a      	cmp	r2, r3
 80123ce:	d201      	bcs.n	80123d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 80123d0:	2301      	movs	r3, #1
 80123d2:	e000      	b.n	80123d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 80123d4:	2300      	movs	r3, #0
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d012      	beq.n	8012400 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80123da:	6a3b      	ldr	r3, [r7, #32]
 80123dc:	3304      	adds	r3, #4
 80123de:	4619      	mov	r1, r3
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f7ff fcba 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80123e6:	4603      	mov	r3, r0
 80123e8:	3308      	adds	r3, #8
 80123ea:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 80123ec:	6a3a      	ldr	r2, [r7, #32]
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	4413      	add	r3, r2
 80123f2:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 80123f4:	220c      	movs	r2, #12
 80123f6:	6a39      	ldr	r1, [r7, #32]
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f7ff fd29 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80123fe:	e7d2      	b.n	80123a6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012406:	2b00      	cmp	r3, #0
 8012408:	d004      	beq.n	8012414 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	220a      	movs	r2, #10
 801240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8012412:	e05e      	b.n	80124d2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8012414:	6a3b      	ldr	r3, [r7, #32]
 8012416:	f103 020c 	add.w	r2, r3, #12
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 801241e:	6a3b      	ldr	r3, [r7, #32]
 8012420:	3304      	adds	r3, #4
 8012422:	4619      	mov	r1, r3
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f7ff fc98 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 801242a:	4602      	mov	r2, r0
 801242c:	6a3b      	ldr	r3, [r7, #32]
 801242e:	4413      	add	r3, r2
 8012430:	f103 0208 	add.w	r2, r3, #8
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 8012438:	6a3b      	ldr	r3, [r7, #32]
 801243a:	3304      	adds	r3, #4
 801243c:	4619      	mov	r1, r3
 801243e:	6878      	ldr	r0, [r7, #4]
 8012440:	f7ff fc8b 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012444:	4603      	mov	r3, r0
 8012446:	3308      	adds	r3, #8
 8012448:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 801244a:	6a3a      	ldr	r2, [r7, #32]
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	4413      	add	r3, r2
 8012450:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 8012452:	2204      	movs	r2, #4
 8012454:	6a39      	ldr	r1, [r7, #32]
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f7ff fcfa 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 801245c:	2304      	movs	r3, #4
 801245e:	4a19      	ldr	r2, [pc, #100]	; (80124c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 8012460:	6a39      	ldr	r1, [r7, #32]
 8012462:	6878      	ldr	r0, [r7, #4]
 8012464:	f7ff fc56 	bl	8011d14 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8012468:	4603      	mov	r3, r0
 801246a:	2b00      	cmp	r3, #0
 801246c:	bf0c      	ite	eq
 801246e:	2301      	moveq	r3, #1
 8012470:	2300      	movne	r3, #0
 8012472:	b2db      	uxtb	r3, r3
 8012474:	2b00      	cmp	r3, #0
 8012476:	d027      	beq.n	80124c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6a3a      	ldr	r2, [r7, #32]
 801247c:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	2201      	movs	r2, #1
 8012482:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	699a      	ldr	r2, [r3, #24]
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	621a      	str	r2, [r3, #32]
 801248c:	e021      	b.n	80124d2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 801248e:	bf00      	nop
 8012490:	0802cd14 	.word	0x0802cd14
 8012494:	0802cd1c 	.word	0x0802cd1c
 8012498:	0802cd38 	.word	0x0802cd38
 801249c:	0802cc00 	.word	0x0802cc00
 80124a0:	0802cd68 	.word	0x0802cd68
 80124a4:	0802cd70 	.word	0x0802cd70
 80124a8:	0802cd88 	.word	0x0802cd88
 80124ac:	0802cd90 	.word	0x0802cd90
 80124b0:	0802cda8 	.word	0x0802cda8
 80124b4:	0802cdb4 	.word	0x0802cdb4
 80124b8:	0802cdbc 	.word	0x0802cdbc
 80124bc:	10624dd3 	.word	0x10624dd3
 80124c0:	0802cdc4 	.word	0x0802cdc4
 80124c4:	0802cdcc 	.word	0x0802cdcc
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	220b      	movs	r2, #11
 80124cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 80124d0:	bf00      	nop
}
 80124d2:	3728      	adds	r7, #40	; 0x28
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}

080124d8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b084      	sub	sp, #16
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
 80124e4:	603b      	str	r3, [r7, #0]
    if (length == 0)
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d04c      	beq.n	8012586 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xae>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d04a      	beq.n	8012588 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb0>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 4;
 80124f2:	4b27      	ldr	r3, [pc, #156]	; (8012590 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 80124f4:	2204      	movs	r2, #4
 80124f6:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	68db      	ldr	r3, [r3, #12]
 80124fc:	4a24      	ldr	r2, [pc, #144]	; (8012590 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 80124fe:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8012500:	4b23      	ldr	r3, [pc, #140]	; (8012590 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	f003 030f 	and.w	r3, r3, #15
 8012508:	2b00      	cmp	r3, #0
 801250a:	d006      	beq.n	801251a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 801250c:	4b20      	ldr	r3, [pc, #128]	; (8012590 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f023 030f 	bic.w	r3, r3, #15
 8012514:	3310      	adds	r3, #16
 8012516:	4a1e      	ldr	r2, [pc, #120]	; (8012590 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012518:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 0 * JPEG_ConvertorParams.bytes_pr_pixel;
 801251a:	4b1d      	ldr	r3, [pc, #116]	; (8012590 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 801251c:	2200      	movs	r2, #0
 801251e:	605a      	str	r2, [r3, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8012520:	4b1b      	ldr	r3, [pc, #108]	; (8012590 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012522:	681b      	ldr	r3, [r3, #0]
 8012524:	091b      	lsrs	r3, r3, #4
 8012526:	4a1a      	ldr	r2, [pc, #104]	; (8012590 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012528:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	691b      	ldr	r3, [r3, #16]
 801252e:	f003 030f 	and.w	r3, r3, #15
 8012532:	f1c3 0310 	rsb	r3, r3, #16
 8012536:	4a16      	ldr	r2, [pc, #88]	; (8012590 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8012538:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 801253a:	683b      	ldr	r3, [r7, #0]
 801253c:	687a      	ldr	r2, [r7, #4]
 801253e:	68b9      	ldr	r1, [r7, #8]
 8012540:	4814      	ldr	r0, [pc, #80]	; (8012594 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xbc>)
 8012542:	f000 f8ed 	bl	8012720 <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8012546:	4813      	ldr	r0, [pc, #76]	; (8012594 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xbc>)
 8012548:	f000 fa08 	bl	801295c <JPEG_OutputHandler>
 801254c:	4603      	mov	r3, r0
 801254e:	4a12      	ldr	r2, [pc, #72]	; (8012598 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8012550:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 8012552:	4b11      	ldr	r3, [pc, #68]	; (8012598 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b02      	cmp	r3, #2
 8012558:	bf0c      	ite	eq
 801255a:	2301      	moveq	r3, #1
 801255c:	2300      	movne	r3, #0
 801255e:	b2db      	uxtb	r3, r3
 8012560:	2b00      	cmp	r3, #0
 8012562:	d006      	beq.n	8012572 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x9a>
        {
          SEM_WAIT(semDecodingDone);
 8012564:	4b0d      	ldr	r3, [pc, #52]	; (801259c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	f04f 31ff 	mov.w	r1, #4294967295
 801256c:	4618      	mov	r0, r3
 801256e:	f7f7 f9a1 	bl	80098b4 <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 8012572:	4b09      	ldr	r3, [pc, #36]	; (8012598 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 8012574:	681b      	ldr	r3, [r3, #0]
 8012576:	2b01      	cmp	r3, #1
 8012578:	bf14      	ite	ne
 801257a:	2301      	movne	r3, #1
 801257c:	2300      	moveq	r3, #0
 801257e:	b2db      	uxtb	r3, r3
 8012580:	2b00      	cmp	r3, #0
 8012582:	d001      	beq.n	8012588 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb0>
      do
 8012584:	e7df      	b.n	8012546 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6e>
        return;
 8012586:	bf00      	nop
    }
}
 8012588:	3710      	adds	r7, #16
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	2003367c 	.word	0x2003367c
 8012594:	20000474 	.word	0x20000474
 8012598:	20033668 	.word	0x20033668
 801259c:	20033678 	.word	0x20033678

080125a0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 80125a0:	b580      	push	{r7, lr}
 80125a2:	b086      	sub	sp, #24
 80125a4:	af00      	add	r7, sp, #0
 80125a6:	60f8      	str	r0, [r7, #12]
 80125a8:	60b9      	str	r1, [r7, #8]
 80125aa:	607a      	str	r2, [r7, #4]
 80125ac:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	699b      	ldr	r3, [r3, #24]
 80125b2:	2208      	movs	r2, #8
 80125b4:	4619      	mov	r1, r3
 80125b6:	68f8      	ldr	r0, [r7, #12]
 80125b8:	f7ff fc4a 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	699b      	ldr	r3, [r3, #24]
 80125c0:	3304      	adds	r3, #4
 80125c2:	4619      	mov	r1, r3
 80125c4:	68f8      	ldr	r0, [r7, #12]
 80125c6:	f7ff fbc8 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80125ca:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	699b      	ldr	r3, [r3, #24]
 80125d0:	3308      	adds	r3, #8
 80125d2:	697a      	ldr	r2, [r7, #20]
 80125d4:	4619      	mov	r1, r3
 80125d6:	68f8      	ldr	r0, [r7, #12]
 80125d8:	f7ff fc3a 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80125dc:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d015      	beq.n	8012610 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	697a      	ldr	r2, [r7, #20]
 80125e8:	6939      	ldr	r1, [r7, #16]
 80125ea:	480c      	ldr	r0, [pc, #48]	; (801261c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 80125ec:	f000 f898 	bl	8012720 <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80125f0:	480a      	ldr	r0, [pc, #40]	; (801261c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 80125f2:	f000 f9b3 	bl	801295c <JPEG_OutputHandler>
 80125f6:	4603      	mov	r3, r0
 80125f8:	4a09      	ldr	r2, [pc, #36]	; (8012620 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 80125fa:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 80125fc:	4b08      	ldr	r3, [pc, #32]	; (8012620 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2b00      	cmp	r3, #0
 8012602:	bf0c      	ite	eq
 8012604:	2301      	moveq	r3, #1
 8012606:	2300      	movne	r3, #0
 8012608:	b2db      	uxtb	r3, r3
 801260a:	2b00      	cmp	r3, #0
 801260c:	d000      	beq.n	8012610 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
      do
 801260e:	e7ef      	b.n	80125f0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8012610:	2301      	movs	r3, #1
}
 8012612:	4618      	mov	r0, r3
 8012614:	3718      	adds	r7, #24
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	20000474 	.word	0x20000474
 8012620:	20033668 	.word	0x20033668

08012624 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	60f8      	str	r0, [r7, #12]
 801262c:	60b9      	str	r1, [r7, #8]
 801262e:	607a      	str	r2, [r7, #4]
 8012630:	807b      	strh	r3, [r7, #2]
    assert(0);
 8012632:	4b03      	ldr	r3, [pc, #12]	; (8012640 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8012634:	4a03      	ldr	r2, [pc, #12]	; (8012644 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8012636:	f240 11d1 	movw	r1, #465	; 0x1d1
 801263a:	4803      	ldr	r0, [pc, #12]	; (8012648 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 801263c:	f016 fb64 	bl	8028d08 <__assert_func>
 8012640:	0802cdd4 	.word	0x0802cdd4
 8012644:	0802cdd8 	.word	0x0802cdd8
 8012648:	0802cc00 	.word	0x0802cc00

0801264c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b084      	sub	sp, #16
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d101      	bne.n	8012660 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 801265c:	2301      	movs	r3, #1
 801265e:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	681b      	ldr	r3, [r3, #0]
 8012664:	332c      	adds	r3, #44	; 0x2c
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	6878      	ldr	r0, [r7, #4]
 801266a:	4798      	blx	r3
 801266c:	4602      	mov	r2, r0
 801266e:	683b      	ldr	r3, [r7, #0]
 8012670:	4293      	cmp	r3, r2
 8012672:	bf8c      	ite	hi
 8012674:	2301      	movhi	r3, #1
 8012676:	2300      	movls	r3, #0
 8012678:	b2db      	uxtb	r3, r3
 801267a:	2b00      	cmp	r3, #0
 801267c:	d006      	beq.n	801268c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	681b      	ldr	r3, [r3, #0]
 8012682:	332c      	adds	r3, #44	; 0x2c
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	6878      	ldr	r0, [r7, #4]
 8012688:	4798      	blx	r3
 801268a:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	69da      	ldr	r2, [r3, #28]
 8012690:	683b      	ldr	r3, [r7, #0]
 8012692:	3b01      	subs	r3, #1
 8012694:	011b      	lsls	r3, r3, #4
 8012696:	4413      	add	r3, r2
 8012698:	3308      	adds	r3, #8
 801269a:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 801269c:	2210      	movs	r2, #16
 801269e:	68f9      	ldr	r1, [r7, #12]
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7ff fbd5 	bl	8011e50 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	3308      	adds	r3, #8
 80126aa:	4619      	mov	r1, r3
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7ff fb54 	bl	8011d5a <_ZN20HardwareMJPEGDecoder6getU32Em>
 80126b2:	4602      	mov	r2, r0
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6a1b      	ldr	r3, [r3, #32]
 80126b8:	4413      	add	r3, r2
 80126ba:	1f1a      	subs	r2, r3, #4
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	683a      	ldr	r2, [r7, #0]
 80126c4:	615a      	str	r2, [r3, #20]
}
 80126c6:	bf00      	nop
 80126c8:	3710      	adds	r7, #16
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}

080126ce <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 80126ce:	b480      	push	{r7}
 80126d0:	b083      	sub	sp, #12
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	689b      	ldr	r3, [r3, #8]
}
 80126da:	4618      	mov	r0, r3
 80126dc:	370c      	adds	r7, #12
 80126de:	46bd      	mov	sp, r7
 80126e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e4:	4770      	bx	lr

080126e6 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 80126e6:	b480      	push	{r7}
 80126e8:	b083      	sub	sp, #12
 80126ea:	af00      	add	r7, sp, #0
 80126ec:	6078      	str	r0, [r7, #4]
 80126ee:	460b      	mov	r3, r1
 80126f0:	70fb      	strb	r3, [r7, #3]

}
 80126f2:	bf00      	nop
 80126f4:	370c      	adds	r7, #12
 80126f6:	46bd      	mov	sp, r7
 80126f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126fc:	4770      	bx	lr

080126fe <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 80126fe:	b490      	push	{r4, r7}
 8012700:	b082      	sub	sp, #8
 8012702:	af00      	add	r7, sp, #0
 8012704:	6078      	str	r0, [r7, #4]
 8012706:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8012708:	683a      	ldr	r2, [r7, #0]
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4614      	mov	r4, r2
 801270e:	3304      	adds	r3, #4
 8012710:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012712:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8012716:	bf00      	nop
 8012718:	3708      	adds	r7, #8
 801271a:	46bd      	mov	sp, r7
 801271c:	bc90      	pop	{r4, r7}
 801271e:	4770      	bx	lr

08012720 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b088      	sub	sp, #32
 8012724:	af02      	add	r7, sp, #8
 8012726:	60f8      	str	r0, [r7, #12]
 8012728:	60b9      	str	r1, [r7, #8]
 801272a:	607a      	str	r2, [r7, #4]
 801272c:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 801272e:	4a28      	ldr	r2, [pc, #160]	; (80127d0 <JPEG_Decode_DMA+0xb0>)
 8012730:	683b      	ldr	r3, [r7, #0]
 8012732:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 8012734:	4b27      	ldr	r3, [pc, #156]	; (80127d4 <JPEG_Decode_DMA+0xb4>)
 8012736:	2200      	movs	r2, #0
 8012738:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 801273a:	4b27      	ldr	r3, [pc, #156]	; (80127d8 <JPEG_Decode_DMA+0xb8>)
 801273c:	2200      	movs	r2, #0
 801273e:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8012740:	4b26      	ldr	r3, [pc, #152]	; (80127dc <JPEG_Decode_DMA+0xbc>)
 8012742:	2200      	movs	r2, #0
 8012744:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 8012746:	4b26      	ldr	r3, [pc, #152]	; (80127e0 <JPEG_Decode_DMA+0xc0>)
 8012748:	2200      	movs	r2, #0
 801274a:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	4a25      	ldr	r2, [pc, #148]	; (80127e4 <JPEG_Decode_DMA+0xc4>)
 8012750:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 8012752:	4a25      	ldr	r2, [pc, #148]	; (80127e8 <JPEG_Decode_DMA+0xc8>)
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 8012758:	4b24      	ldr	r3, [pc, #144]	; (80127ec <JPEG_Decode_DMA+0xcc>)
 801275a:	2200      	movs	r2, #0
 801275c:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 801275e:	2300      	movs	r3, #0
 8012760:	617b      	str	r3, [r7, #20]
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	2b01      	cmp	r3, #1
 8012766:	d816      	bhi.n	8012796 <JPEG_Decode_DMA+0x76>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8012768:	4921      	ldr	r1, [pc, #132]	; (80127f0 <JPEG_Decode_DMA+0xd0>)
 801276a:	697a      	ldr	r2, [r7, #20]
 801276c:	4613      	mov	r3, r2
 801276e:	005b      	lsls	r3, r3, #1
 8012770:	4413      	add	r3, r2
 8012772:	009b      	lsls	r3, r3, #2
 8012774:	440b      	add	r3, r1
 8012776:	2200      	movs	r2, #0
 8012778:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 801277a:	491d      	ldr	r1, [pc, #116]	; (80127f0 <JPEG_Decode_DMA+0xd0>)
 801277c:	697a      	ldr	r2, [r7, #20]
 801277e:	4613      	mov	r3, r2
 8012780:	005b      	lsls	r3, r3, #1
 8012782:	4413      	add	r3, r2
 8012784:	009b      	lsls	r3, r3, #2
 8012786:	440b      	add	r3, r1
 8012788:	3308      	adds	r3, #8
 801278a:	2200      	movs	r2, #0
 801278c:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	3301      	adds	r3, #1
 8012792:	617b      	str	r3, [r7, #20]
 8012794:	e7e5      	b.n	8012762 <JPEG_Decode_DMA+0x42>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8012796:	4b11      	ldr	r3, [pc, #68]	; (80127dc <JPEG_Decode_DMA+0xbc>)
 8012798:	681a      	ldr	r2, [r3, #0]
 801279a:	4915      	ldr	r1, [pc, #84]	; (80127f0 <JPEG_Decode_DMA+0xd0>)
 801279c:	4613      	mov	r3, r2
 801279e:	005b      	lsls	r3, r3, #1
 80127a0:	4413      	add	r3, r2
 80127a2:	009b      	lsls	r3, r3, #2
 80127a4:	440b      	add	r3, r1
 80127a6:	3304      	adds	r3, #4
 80127a8:	6819      	ldr	r1, [r3, #0]
 80127aa:	4b12      	ldr	r3, [pc, #72]	; (80127f4 <JPEG_Decode_DMA+0xd4>)
 80127ac:	68da      	ldr	r2, [r3, #12]
 80127ae:	4613      	mov	r3, r2
 80127b0:	005b      	lsls	r3, r3, #1
 80127b2:	4413      	add	r3, r2
 80127b4:	01db      	lsls	r3, r3, #7
 80127b6:	9300      	str	r3, [sp, #0]
 80127b8:	460b      	mov	r3, r1
 80127ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80127be:	68b9      	ldr	r1, [r7, #8]
 80127c0:	68f8      	ldr	r0, [r7, #12]
 80127c2:	f7f1 fddf 	bl	8004384 <HAL_JPEG_Decode_DMA>

    return 0;
 80127c6:	2300      	movs	r3, #0
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3718      	adds	r7, #24
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	20033648 	.word	0x20033648
 80127d4:	20033664 	.word	0x20033664
 80127d8:	2003365c 	.word	0x2003365c
 80127dc:	20033660 	.word	0x20033660
 80127e0:	2003364c 	.word	0x2003364c
 80127e4:	20033654 	.word	0x20033654
 80127e8:	20033650 	.word	0x20033650
 80127ec:	20033674 	.word	0x20033674
 80127f0:	20000018 	.word	0x20000018
 80127f4:	2003367c 	.word	0x2003367c

080127f8 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b084      	sub	sp, #16
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
 8012800:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8012802:	4b14      	ldr	r3, [pc, #80]	; (8012854 <HAL_JPEG_GetDataCallback+0x5c>)
 8012804:	681a      	ldr	r2, [r3, #0]
 8012806:	683b      	ldr	r3, [r7, #0]
 8012808:	4413      	add	r3, r2
 801280a:	4a12      	ldr	r2, [pc, #72]	; (8012854 <HAL_JPEG_GetDataCallback+0x5c>)
 801280c:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 801280e:	4b11      	ldr	r3, [pc, #68]	; (8012854 <HAL_JPEG_GetDataCallback+0x5c>)
 8012810:	681a      	ldr	r2, [r3, #0]
 8012812:	4b11      	ldr	r3, [pc, #68]	; (8012858 <HAL_JPEG_GetDataCallback+0x60>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	429a      	cmp	r2, r3
 8012818:	d218      	bcs.n	801284c <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 801281a:	4b10      	ldr	r3, [pc, #64]	; (801285c <HAL_JPEG_GetDataCallback+0x64>)
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	683b      	ldr	r3, [r7, #0]
 8012820:	4413      	add	r3, r2
 8012822:	4a0e      	ldr	r2, [pc, #56]	; (801285c <HAL_JPEG_GetDataCallback+0x64>)
 8012824:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8012826:	4b0c      	ldr	r3, [pc, #48]	; (8012858 <HAL_JPEG_GetDataCallback+0x60>)
 8012828:	681a      	ldr	r2, [r3, #0]
 801282a:	4b0a      	ldr	r3, [pc, #40]	; (8012854 <HAL_JPEG_GetDataCallback+0x5c>)
 801282c:	681b      	ldr	r3, [r3, #0]
 801282e:	1ad3      	subs	r3, r2, r3
 8012830:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8012832:	4b0a      	ldr	r3, [pc, #40]	; (801285c <HAL_JPEG_GetDataCallback+0x64>)
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	4619      	mov	r1, r3
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801283e:	bf28      	it	cs
 8012840:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8012844:	461a      	mov	r2, r3
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7f1 ff27 	bl	800469a <HAL_JPEG_ConfigInputBuffer>
  }
}
 801284c:	bf00      	nop
 801284e:	3710      	adds	r7, #16
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	2003364c 	.word	0x2003364c
 8012858:	20033650 	.word	0x20033650
 801285c:	20033654 	.word	0x20033654

08012860 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b084      	sub	sp, #16
 8012864:	af00      	add	r7, sp, #0
 8012866:	60f8      	str	r0, [r7, #12]
 8012868:	60b9      	str	r1, [r7, #8]
 801286a:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 801286c:	4b27      	ldr	r3, [pc, #156]	; (801290c <HAL_JPEG_DataReadyCallback+0xac>)
 801286e:	681a      	ldr	r2, [r3, #0]
 8012870:	4927      	ldr	r1, [pc, #156]	; (8012910 <HAL_JPEG_DataReadyCallback+0xb0>)
 8012872:	4613      	mov	r3, r2
 8012874:	005b      	lsls	r3, r3, #1
 8012876:	4413      	add	r3, r2
 8012878:	009b      	lsls	r3, r3, #2
 801287a:	440b      	add	r3, r1
 801287c:	2201      	movs	r2, #1
 801287e:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8012880:	4b22      	ldr	r3, [pc, #136]	; (801290c <HAL_JPEG_DataReadyCallback+0xac>)
 8012882:	681a      	ldr	r2, [r3, #0]
 8012884:	4922      	ldr	r1, [pc, #136]	; (8012910 <HAL_JPEG_DataReadyCallback+0xb0>)
 8012886:	4613      	mov	r3, r2
 8012888:	005b      	lsls	r3, r3, #1
 801288a:	4413      	add	r3, r2
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	440b      	add	r3, r1
 8012890:	3308      	adds	r3, #8
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 8012896:	4b1d      	ldr	r3, [pc, #116]	; (801290c <HAL_JPEG_DataReadyCallback+0xac>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	3301      	adds	r3, #1
 801289c:	4a1b      	ldr	r2, [pc, #108]	; (801290c <HAL_JPEG_DataReadyCallback+0xac>)
 801289e:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80128a0:	4b1a      	ldr	r3, [pc, #104]	; (801290c <HAL_JPEG_DataReadyCallback+0xac>)
 80128a2:	681b      	ldr	r3, [r3, #0]
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d902      	bls.n	80128ae <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 80128a8:	4b18      	ldr	r3, [pc, #96]	; (801290c <HAL_JPEG_DataReadyCallback+0xac>)
 80128aa:	2200      	movs	r2, #0
 80128ac:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80128ae:	4b17      	ldr	r3, [pc, #92]	; (801290c <HAL_JPEG_DataReadyCallback+0xac>)
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	4917      	ldr	r1, [pc, #92]	; (8012910 <HAL_JPEG_DataReadyCallback+0xb0>)
 80128b4:	4613      	mov	r3, r2
 80128b6:	005b      	lsls	r3, r3, #1
 80128b8:	4413      	add	r3, r2
 80128ba:	009b      	lsls	r3, r3, #2
 80128bc:	440b      	add	r3, r1
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d006      	beq.n	80128d2 <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80128c4:	2102      	movs	r1, #2
 80128c6:	68f8      	ldr	r0, [r7, #12]
 80128c8:	f7f1 fdbf 	bl	800444a <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 80128cc:	4b11      	ldr	r3, [pc, #68]	; (8012914 <HAL_JPEG_DataReadyCallback+0xb4>)
 80128ce:	2201      	movs	r2, #1
 80128d0:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80128d2:	4b0e      	ldr	r3, [pc, #56]	; (801290c <HAL_JPEG_DataReadyCallback+0xac>)
 80128d4:	681a      	ldr	r2, [r3, #0]
 80128d6:	490e      	ldr	r1, [pc, #56]	; (8012910 <HAL_JPEG_DataReadyCallback+0xb0>)
 80128d8:	4613      	mov	r3, r2
 80128da:	005b      	lsls	r3, r3, #1
 80128dc:	4413      	add	r3, r2
 80128de:	009b      	lsls	r3, r3, #2
 80128e0:	440b      	add	r3, r1
 80128e2:	3304      	adds	r3, #4
 80128e4:	6819      	ldr	r1, [r3, #0]
 80128e6:	4b0c      	ldr	r3, [pc, #48]	; (8012918 <HAL_JPEG_DataReadyCallback+0xb8>)
 80128e8:	68da      	ldr	r2, [r3, #12]
 80128ea:	4613      	mov	r3, r2
 80128ec:	005b      	lsls	r3, r3, #1
 80128ee:	4413      	add	r3, r2
 80128f0:	01db      	lsls	r3, r3, #7
 80128f2:	461a      	mov	r2, r3
 80128f4:	68f8      	ldr	r0, [r7, #12]
 80128f6:	f7f1 fee2 	bl	80046be <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 80128fa:	4b08      	ldr	r3, [pc, #32]	; (801291c <HAL_JPEG_DataReadyCallback+0xbc>)
 80128fc:	681b      	ldr	r3, [r3, #0]
 80128fe:	4618      	mov	r0, r3
 8012900:	f7f7 f83e 	bl	8009980 <osSemaphoreRelease>
}
 8012904:	bf00      	nop
 8012906:	3710      	adds	r7, #16
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	20033660 	.word	0x20033660
 8012910:	20000018 	.word	0x20000018
 8012914:	20033664 	.word	0x20033664
 8012918:	2003367c 	.word	0x2003367c
 801291c:	20033678 	.word	0x20033678

08012920 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8012920:	b580      	push	{r7, lr}
 8012922:	b084      	sub	sp, #16
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
  HAL_JPEG_STATETypeDef  state = HAL_JPEG_GetState(hjpeg);
 8012928:	6878      	ldr	r0, [r7, #4]
 801292a:	f7f1 fee4 	bl	80046f6 <HAL_JPEG_GetState>
 801292e:	4603      	mov	r3, r0
 8012930:	73fb      	strb	r3, [r7, #15]
  uint32_t error = HAL_JPEG_GetError(hjpeg);
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f7f1 feed 	bl	8004712 <HAL_JPEG_GetError>
 8012938:	60b8      	str	r0, [r7, #8]
  while(1){}
 801293a:	e7fe      	b.n	801293a <HAL_JPEG_ErrorCallback+0x1a>

0801293c <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 801293c:	b480      	push	{r7}
 801293e:	b083      	sub	sp, #12
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 8012944:	4b04      	ldr	r3, [pc, #16]	; (8012958 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8012946:	2201      	movs	r2, #1
 8012948:	601a      	str	r2, [r3, #0]
}
 801294a:	bf00      	nop
 801294c:	370c      	adds	r7, #12
 801294e:	46bd      	mov	sp, r7
 8012950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012954:	4770      	bx	lr
 8012956:	bf00      	nop
 8012958:	20033658 	.word	0x20033658

0801295c <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 801295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801295e:	b087      	sub	sp, #28
 8012960:	af02      	add	r7, sp, #8
 8012962:	6078      	str	r0, [r7, #4]
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 8012964:	4b55      	ldr	r3, [pc, #340]	; (8012abc <JPEG_OutputHandler+0x160>)
 8012966:	681a      	ldr	r2, [r3, #0]
 8012968:	4955      	ldr	r1, [pc, #340]	; (8012ac0 <JPEG_OutputHandler+0x164>)
 801296a:	4613      	mov	r3, r2
 801296c:	005b      	lsls	r3, r3, #1
 801296e:	4413      	add	r3, r2
 8012970:	009b      	lsls	r3, r3, #2
 8012972:	440b      	add	r3, r1
 8012974:	781b      	ldrb	r3, [r3, #0]
 8012976:	2b01      	cmp	r3, #1
 8012978:	d160      	bne.n	8012a3c <JPEG_OutputHandler+0xe0>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801297a:	4b52      	ldr	r3, [pc, #328]	; (8012ac4 <JPEG_OutputHandler+0x168>)
 801297c:	695b      	ldr	r3, [r3, #20]
 801297e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012982:	2b00      	cmp	r3, #0
 8012984:	bf14      	ite	ne
 8012986:	2301      	movne	r3, #1
 8012988:	2300      	moveq	r3, #0
 801298a:	b2db      	uxtb	r3, r3
 801298c:	2b00      	cmp	r3, #0
 801298e:	d001      	beq.n	8012994 <JPEG_OutputHandler+0x38>
    {
      SCB_CleanInvalidateDCache();
 8012990:	f7ff f918 	bl	8011bc4 <SCB_CleanInvalidateDCache>
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 8012994:	4b4c      	ldr	r3, [pc, #304]	; (8012ac8 <JPEG_OutputHandler+0x16c>)
 8012996:	681c      	ldr	r4, [r3, #0]
 8012998:	4b48      	ldr	r3, [pc, #288]	; (8012abc <JPEG_OutputHandler+0x160>)
 801299a:	681a      	ldr	r2, [r3, #0]
 801299c:	4948      	ldr	r1, [pc, #288]	; (8012ac0 <JPEG_OutputHandler+0x164>)
 801299e:	4613      	mov	r3, r2
 80129a0:	005b      	lsls	r3, r3, #1
 80129a2:	4413      	add	r3, r2
 80129a4:	009b      	lsls	r3, r3, #2
 80129a6:	440b      	add	r3, r1
 80129a8:	3304      	adds	r3, #4
 80129aa:	6818      	ldr	r0, [r3, #0]
 80129ac:	4b47      	ldr	r3, [pc, #284]	; (8012acc <JPEG_OutputHandler+0x170>)
 80129ae:	6819      	ldr	r1, [r3, #0]
 80129b0:	4b47      	ldr	r3, [pc, #284]	; (8012ad0 <JPEG_OutputHandler+0x174>)
 80129b2:	681d      	ldr	r5, [r3, #0]
 80129b4:	4b41      	ldr	r3, [pc, #260]	; (8012abc <JPEG_OutputHandler+0x160>)
 80129b6:	681a      	ldr	r2, [r3, #0]
 80129b8:	4e41      	ldr	r6, [pc, #260]	; (8012ac0 <JPEG_OutputHandler+0x164>)
 80129ba:	4613      	mov	r3, r2
 80129bc:	005b      	lsls	r3, r3, #1
 80129be:	4413      	add	r3, r2
 80129c0:	009b      	lsls	r3, r3, #2
 80129c2:	4433      	add	r3, r6
 80129c4:	3308      	adds	r3, #8
 80129c6:	681a      	ldr	r2, [r3, #0]
 80129c8:	f107 030c 	add.w	r3, r7, #12
 80129cc:	9300      	str	r3, [sp, #0]
 80129ce:	4613      	mov	r3, r2
 80129d0:	462a      	mov	r2, r5
 80129d2:	47a0      	blx	r4
 80129d4:	4602      	mov	r2, r0
 80129d6:	4b3e      	ldr	r3, [pc, #248]	; (8012ad0 <JPEG_OutputHandler+0x174>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	4413      	add	r3, r2
 80129dc:	4a3c      	ldr	r2, [pc, #240]	; (8012ad0 <JPEG_OutputHandler+0x174>)
 80129de:	6013      	str	r3, [r2, #0]

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 80129e0:	4b36      	ldr	r3, [pc, #216]	; (8012abc <JPEG_OutputHandler+0x160>)
 80129e2:	681a      	ldr	r2, [r3, #0]
 80129e4:	4936      	ldr	r1, [pc, #216]	; (8012ac0 <JPEG_OutputHandler+0x164>)
 80129e6:	4613      	mov	r3, r2
 80129e8:	005b      	lsls	r3, r3, #1
 80129ea:	4413      	add	r3, r2
 80129ec:	009b      	lsls	r3, r3, #2
 80129ee:	440b      	add	r3, r1
 80129f0:	2200      	movs	r2, #0
 80129f2:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 80129f4:	4b31      	ldr	r3, [pc, #196]	; (8012abc <JPEG_OutputHandler+0x160>)
 80129f6:	681a      	ldr	r2, [r3, #0]
 80129f8:	4931      	ldr	r1, [pc, #196]	; (8012ac0 <JPEG_OutputHandler+0x164>)
 80129fa:	4613      	mov	r3, r2
 80129fc:	005b      	lsls	r3, r3, #1
 80129fe:	4413      	add	r3, r2
 8012a00:	009b      	lsls	r3, r3, #2
 8012a02:	440b      	add	r3, r1
 8012a04:	3308      	adds	r3, #8
 8012a06:	2200      	movs	r2, #0
 8012a08:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Read_BufferIndex++;
 8012a0a:	4b2c      	ldr	r3, [pc, #176]	; (8012abc <JPEG_OutputHandler+0x160>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	4a2a      	ldr	r2, [pc, #168]	; (8012abc <JPEG_OutputHandler+0x160>)
 8012a12:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8012a14:	4b29      	ldr	r3, [pc, #164]	; (8012abc <JPEG_OutputHandler+0x160>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d902      	bls.n	8012a22 <JPEG_OutputHandler+0xc6>
    {
      JPEG_OUT_Read_BufferIndex = 0;
 8012a1c:	4b27      	ldr	r3, [pc, #156]	; (8012abc <JPEG_OutputHandler+0x160>)
 8012a1e:	2200      	movs	r2, #0
 8012a20:	601a      	str	r2, [r3, #0]
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 8012a22:	4b2b      	ldr	r3, [pc, #172]	; (8012ad0 <JPEG_OutputHandler+0x174>)
 8012a24:	681a      	ldr	r2, [r3, #0]
 8012a26:	4b2b      	ldr	r3, [pc, #172]	; (8012ad4 <JPEG_OutputHandler+0x178>)
 8012a28:	681b      	ldr	r3, [r3, #0]
 8012a2a:	429a      	cmp	r2, r3
 8012a2c:	bf0c      	ite	eq
 8012a2e:	2301      	moveq	r3, #1
 8012a30:	2300      	movne	r3, #0
 8012a32:	b2db      	uxtb	r3, r3
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d02a      	beq.n	8012a8e <JPEG_OutputHandler+0x132>
    {
      return 1;
 8012a38:	2301      	movs	r3, #1
 8012a3a:	e03a      	b.n	8012ab2 <JPEG_OutputHandler+0x156>
    }
  }
  else if((Output_Is_Paused == 1) && \
 8012a3c:	4b26      	ldr	r3, [pc, #152]	; (8012ad8 <JPEG_OutputHandler+0x17c>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8012a40:	2b01      	cmp	r3, #1
 8012a42:	d117      	bne.n	8012a74 <JPEG_OutputHandler+0x118>
 8012a44:	4b25      	ldr	r3, [pc, #148]	; (8012adc <JPEG_OutputHandler+0x180>)
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	491d      	ldr	r1, [pc, #116]	; (8012ac0 <JPEG_OutputHandler+0x164>)
 8012a4a:	4613      	mov	r3, r2
 8012a4c:	005b      	lsls	r3, r3, #1
 8012a4e:	4413      	add	r3, r2
 8012a50:	009b      	lsls	r3, r3, #2
 8012a52:	440b      	add	r3, r1
 8012a54:	781b      	ldrb	r3, [r3, #0]
  else if((Output_Is_Paused == 1) && \
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d10c      	bne.n	8012a74 <JPEG_OutputHandler+0x118>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 8012a5a:	4b18      	ldr	r3, [pc, #96]	; (8012abc <JPEG_OutputHandler+0x160>)
 8012a5c:	681a      	ldr	r2, [r3, #0]
 8012a5e:	4918      	ldr	r1, [pc, #96]	; (8012ac0 <JPEG_OutputHandler+0x164>)
 8012a60:	4613      	mov	r3, r2
 8012a62:	005b      	lsls	r3, r3, #1
 8012a64:	4413      	add	r3, r2
 8012a66:	009b      	lsls	r3, r3, #2
 8012a68:	440b      	add	r3, r1
 8012a6a:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d101      	bne.n	8012a74 <JPEG_OutputHandler+0x118>
 8012a70:	2301      	movs	r3, #1
 8012a72:	e000      	b.n	8012a76 <JPEG_OutputHandler+0x11a>
 8012a74:	2300      	movs	r3, #0
  else if((Output_Is_Paused == 1) && \
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d007      	beq.n	8012a8a <JPEG_OutputHandler+0x12e>
  {
    Output_Is_Paused = 0;
 8012a7a:	4b17      	ldr	r3, [pc, #92]	; (8012ad8 <JPEG_OutputHandler+0x17c>)
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8012a80:	2102      	movs	r1, #2
 8012a82:	6878      	ldr	r0, [r7, #4]
 8012a84:	f7f1 fd4c 	bl	8004520 <HAL_JPEG_Resume>
 8012a88:	e001      	b.n	8012a8e <JPEG_OutputHandler+0x132>
  }
  else
  {
    return 2;
 8012a8a:	2302      	movs	r3, #2
 8012a8c:	e011      	b.n	8012ab2 <JPEG_OutputHandler+0x156>
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 8012a8e:	4b10      	ldr	r3, [pc, #64]	; (8012ad0 <JPEG_OutputHandler+0x174>)
 8012a90:	681a      	ldr	r2, [r3, #0]
 8012a92:	4b10      	ldr	r3, [pc, #64]	; (8012ad4 <JPEG_OutputHandler+0x178>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	429a      	cmp	r2, r3
 8012a98:	d105      	bne.n	8012aa6 <JPEG_OutputHandler+0x14a>
 8012a9a:	4b11      	ldr	r3, [pc, #68]	; (8012ae0 <JPEG_OutputHandler+0x184>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d001      	beq.n	8012aa6 <JPEG_OutputHandler+0x14a>
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e000      	b.n	8012aa8 <JPEG_OutputHandler+0x14c>
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d001      	beq.n	8012ab0 <JPEG_OutputHandler+0x154>
  {
    return 1;
 8012aac:	2301      	movs	r3, #1
 8012aae:	e000      	b.n	8012ab2 <JPEG_OutputHandler+0x156>
  }

  return 0;
 8012ab0:	2300      	movs	r3, #0
}
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	3714      	adds	r7, #20
 8012ab6:	46bd      	mov	sp, r7
 8012ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012aba:	bf00      	nop
 8012abc:	2003365c 	.word	0x2003365c
 8012ac0:	20000018 	.word	0x20000018
 8012ac4:	e000ed00 	.word	0xe000ed00
 8012ac8:	20033670 	.word	0x20033670
 8012acc:	20033648 	.word	0x20033648
 8012ad0:	20033674 	.word	0x20033674
 8012ad4:	2003366c 	.word	0x2003366c
 8012ad8:	20033664 	.word	0x20033664
 8012adc:	20033660 	.word	0x20033660
 8012ae0:	20033658 	.word	0x20033658

08012ae4 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b082      	sub	sp, #8
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	6078      	str	r0, [r7, #4]
 8012aec:	4a05      	ldr	r2, [pc, #20]	; (8012b04 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	601a      	str	r2, [r3, #0]
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	4618      	mov	r0, r3
 8012af6:	f7ff f82b 	bl	8011b50 <_ZN12MJPEGDecoderD1Ev>
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	4618      	mov	r0, r3
 8012afe:	3708      	adds	r7, #8
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}
 8012b04:	0802ee9c 	.word	0x0802ee9c

08012b08 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	6878      	ldr	r0, [r7, #4]
 8012b12:	f7ff ffe7 	bl	8012ae4 <_ZN20HardwareMJPEGDecoderD1Ev>
 8012b16:	2144      	movs	r1, #68	; 0x44
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f016 f8c7 	bl	8028cac <_ZdlPvj>
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	4618      	mov	r0, r3
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	2101      	movs	r1, #1
 8012b30:	2001      	movs	r0, #1
 8012b32:	f7f6 fe23 	bl	800977c <osSemaphoreNew>
 8012b36:	4603      	mov	r3, r0
 8012b38:	4a0f      	ldr	r2, [pc, #60]	; (8012b78 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012b3a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8012b3c:	4b0e      	ldr	r3, [pc, #56]	; (8012b78 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8012b3e:	681b      	ldr	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d105      	bne.n	8012b50 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8012b44:	4b0d      	ldr	r3, [pc, #52]	; (8012b7c <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8012b46:	4a0e      	ldr	r2, [pc, #56]	; (8012b80 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012b48:	2128      	movs	r1, #40	; 0x28
 8012b4a:	480e      	ldr	r0, [pc, #56]	; (8012b84 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012b4c:	f016 f8dc 	bl	8028d08 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8012b50:	2200      	movs	r2, #0
 8012b52:	2104      	movs	r1, #4
 8012b54:	2001      	movs	r0, #1
 8012b56:	f7f6 ff6b 	bl	8009a30 <osMessageQueueNew>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	4a0a      	ldr	r2, [pc, #40]	; (8012b88 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8012b5e:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8012b60:	4b09      	ldr	r3, [pc, #36]	; (8012b88 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d105      	bne.n	8012b74 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8012b68:	4b08      	ldr	r3, [pc, #32]	; (8012b8c <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8012b6a:	4a05      	ldr	r2, [pc, #20]	; (8012b80 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8012b6c:	212c      	movs	r1, #44	; 0x2c
 8012b6e:	4805      	ldr	r0, [pc, #20]	; (8012b84 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8012b70:	f016 f8ca 	bl	8028d08 <__assert_func>
}
 8012b74:	bf00      	nop
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	20033690 	.word	0x20033690
 8012b7c:	0802ce90 	.word	0x0802ce90
 8012b80:	0802cedc 	.word	0x0802cedc
 8012b84:	0802cf0c 	.word	0x0802cf0c
 8012b88:	20033694 	.word	0x20033694
 8012b8c:	0802cf38 	.word	0x0802cf38

08012b90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8012b90:	b580      	push	{r7, lr}
 8012b92:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8012b94:	4b04      	ldr	r3, [pc, #16]	; (8012ba8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	f04f 31ff 	mov.w	r1, #4294967295
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7f6 fe89 	bl	80098b4 <osSemaphoreAcquire>
}
 8012ba2:	bf00      	nop
 8012ba4:	bd80      	pop	{r7, pc}
 8012ba6:	bf00      	nop
 8012ba8:	20033690 	.word	0x20033690

08012bac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012bb0:	4b03      	ldr	r3, [pc, #12]	; (8012bc0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	f7f6 fee3 	bl	8009980 <osSemaphoreRelease>
}
 8012bba:	bf00      	nop
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20033690 	.word	0x20033690

08012bc4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8012bc8:	4b03      	ldr	r3, [pc, #12]	; (8012bd8 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	2100      	movs	r1, #0
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7f6 fe70 	bl	80098b4 <osSemaphoreAcquire>
}
 8012bd4:	bf00      	nop
 8012bd6:	bd80      	pop	{r7, pc}
 8012bd8:	20033690 	.word	0x20033690

08012bdc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8012be0:	4b03      	ldr	r3, [pc, #12]	; (8012bf0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	4618      	mov	r0, r3
 8012be6:	f7f6 fecb 	bl	8009980 <osSemaphoreRelease>
}
 8012bea:	bf00      	nop
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	20033690 	.word	0x20033690

08012bf4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8012bf8:	4b04      	ldr	r3, [pc, #16]	; (8012c0c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8012bfa:	6818      	ldr	r0, [r3, #0]
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	2200      	movs	r2, #0
 8012c00:	4903      	ldr	r1, [pc, #12]	; (8012c10 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8012c02:	f7f6 ff9b 	bl	8009b3c <osMessageQueuePut>
}
 8012c06:	bf00      	nop
 8012c08:	bd80      	pop	{r7, pc}
 8012c0a:	bf00      	nop
 8012c0c:	20033694 	.word	0x20033694
 8012c10:	20000030 	.word	0x20000030

08012c14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b082      	sub	sp, #8
 8012c18:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8012c1a:	4b09      	ldr	r3, [pc, #36]	; (8012c40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012c1c:	6818      	ldr	r0, [r3, #0]
 8012c1e:	1d39      	adds	r1, r7, #4
 8012c20:	2300      	movs	r3, #0
 8012c22:	2200      	movs	r2, #0
 8012c24:	f7f6 fffe 	bl	8009c24 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8012c28:	4b05      	ldr	r3, [pc, #20]	; (8012c40 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8012c2a:	6818      	ldr	r0, [r3, #0]
 8012c2c:	1d39      	adds	r1, r7, #4
 8012c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c32:	2200      	movs	r2, #0
 8012c34:	f7f6 fff6 	bl	8009c24 <osMessageQueueGet>
}
 8012c38:	bf00      	nop
 8012c3a:	3708      	adds	r7, #8
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	20033694 	.word	0x20033694

08012c44 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b082      	sub	sp, #8
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8012c4e:	88fb      	ldrh	r3, [r7, #6]
 8012c50:	4618      	mov	r0, r3
 8012c52:	f7f6 fc1d 	bl	8009490 <osDelay>
}
 8012c56:	bf00      	nop
 8012c58:	3708      	adds	r7, #8
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	bd80      	pop	{r7, pc}
	...

08012c60 <__NVIC_DisableIRQ>:
{
 8012c60:	b480      	push	{r7}
 8012c62:	b083      	sub	sp, #12
 8012c64:	af00      	add	r7, sp, #0
 8012c66:	4603      	mov	r3, r0
 8012c68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	db12      	blt.n	8012c98 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012c72:	79fb      	ldrb	r3, [r7, #7]
 8012c74:	f003 021f 	and.w	r2, r3, #31
 8012c78:	490a      	ldr	r1, [pc, #40]	; (8012ca4 <__NVIC_DisableIRQ+0x44>)
 8012c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012c7e:	095b      	lsrs	r3, r3, #5
 8012c80:	2001      	movs	r0, #1
 8012c82:	fa00 f202 	lsl.w	r2, r0, r2
 8012c86:	3320      	adds	r3, #32
 8012c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8012c8c:	f3bf 8f4f 	dsb	sy
}
 8012c90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012c92:	f3bf 8f6f 	isb	sy
}
 8012c96:	bf00      	nop
}
 8012c98:	bf00      	nop
 8012c9a:	370c      	adds	r7, #12
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr
 8012ca4:	e000e100 	.word	0xe000e100

08012ca8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8012ca8:	b480      	push	{r7}
 8012caa:	b083      	sub	sp, #12
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
    {
 8012cb0:	4a04      	ldr	r2, [pc, #16]	; (8012cc4 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8012cb2:	687b      	ldr	r3, [r7, #4]
 8012cb4:	601a      	str	r2, [r3, #0]
    }
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	4618      	mov	r0, r3
 8012cba:	370c      	adds	r7, #12
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc2:	4770      	bx	lr
 8012cc4:	0802ef70 	.word	0x0802ef70

08012cc8 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
    }
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ff ffe9 	bl	8012ca8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8012cd6:	2104      	movs	r1, #4
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f015 ffe7 	bl	8028cac <_ZdlPvj>
 8012cde:	687b      	ldr	r3, [r7, #4]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3708      	adds	r7, #8
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	bd80      	pop	{r7, pc}

08012ce8 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8012ce8:	b580      	push	{r7, lr}
 8012cea:	b082      	sub	sp, #8
 8012cec:	af00      	add	r7, sp, #0
 8012cee:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	3344      	adds	r3, #68	; 0x44
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	6878      	ldr	r0, [r7, #4]
 8012cfa:	4798      	blx	r3
    }
 8012cfc:	bf00      	nop
 8012cfe:	3708      	adds	r7, #8
 8012d00:	46bd      	mov	sp, r7
 8012d02:	bd80      	pop	{r7, pc}

08012d04 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8012d04:	b480      	push	{r7}
 8012d06:	b083      	sub	sp, #12
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	6078      	str	r0, [r7, #4]
    {
 8012d0c:	4a04      	ldr	r2, [pc, #16]	; (8012d20 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	601a      	str	r2, [r3, #0]
    }
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	4618      	mov	r0, r3
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr
 8012d20:	0802f364 	.word	0x0802f364

08012d24 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b082      	sub	sp, #8
 8012d28:	af00      	add	r7, sp, #0
 8012d2a:	6078      	str	r0, [r7, #4]
    }
 8012d2c:	6878      	ldr	r0, [r7, #4]
 8012d2e:	f7ff ffe9 	bl	8012d04 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8012d32:	210c      	movs	r1, #12
 8012d34:	6878      	ldr	r0, [r7, #4]
 8012d36:	f015 ffb9 	bl	8028cac <_ZdlPvj>
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3708      	adds	r7, #8
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8012d44:	b480      	push	{r7}
 8012d46:	b083      	sub	sp, #12
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
 8012d4c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8012d4e:	4a09      	ldr	r2, [pc, #36]	; (8012d74 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	601a      	str	r2, [r3, #0]
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	683a      	ldr	r2, [r7, #0]
 8012d58:	605a      	str	r2, [r3, #4]
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	2200      	movs	r2, #0
 8012d5e:	721a      	strb	r2, [r3, #8]
 8012d60:	687b      	ldr	r3, [r7, #4]
 8012d62:	2200      	movs	r2, #0
 8012d64:	725a      	strb	r2, [r3, #9]
    {
    }
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	4618      	mov	r0, r3
 8012d6a:	370c      	adds	r7, #12
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d72:	4770      	bx	lr
 8012d74:	0802f364 	.word	0x0802f364

08012d78 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8012d78:	b480      	push	{r7}
 8012d7a:	b083      	sub	sp, #12
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8012d80:	2301      	movs	r3, #1
    }
 8012d82:	4618      	mov	r0, r3
 8012d84:	370c      	adds	r7, #12
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr

08012d8e <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8012d8e:	b580      	push	{r7, lr}
 8012d90:	b082      	sub	sp, #8
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8012d96:	687a      	ldr	r2, [r7, #4]
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	3328      	adds	r3, #40	; 0x28
 8012d9e:	681b      	ldr	r3, [r3, #0]
 8012da0:	4610      	mov	r0, r2
 8012da2:	4798      	blx	r3
    }
 8012da4:	bf00      	nop
 8012da6:	3708      	adds	r7, #8
 8012da8:	46bd      	mov	sp, r7
 8012daa:	bd80      	pop	{r7, pc}

08012dac <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	685a      	ldr	r2, [r3, #4]
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	685b      	ldr	r3, [r3, #4]
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	3314      	adds	r3, #20
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	4610      	mov	r0, r2
 8012dc4:	4798      	blx	r3
    }
 8012dc6:	bf00      	nop
 8012dc8:	3708      	adds	r7, #8
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bd80      	pop	{r7, pc}
	...

08012dd0 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8012dd4:	4b13      	ldr	r3, [pc, #76]	; (8012e24 <DMA2D_IRQHandler+0x54>)
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	f003 0302 	and.w	r3, r3, #2
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	bf14      	ite	ne
 8012de0:	2301      	movne	r3, #1
 8012de2:	2300      	moveq	r3, #0
 8012de4:	b2db      	uxtb	r3, r3
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d019      	beq.n	8012e1e <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8012dea:	4b0e      	ldr	r3, [pc, #56]	; (8012e24 <DMA2D_IRQHandler+0x54>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	bf14      	ite	ne
 8012df6:	2301      	movne	r3, #1
 8012df8:	2300      	moveq	r3, #0
 8012dfa:	b2db      	uxtb	r3, r3
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d00e      	beq.n	8012e1e <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8012e00:	4b08      	ldr	r3, [pc, #32]	; (8012e24 <DMA2D_IRQHandler+0x54>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4a07      	ldr	r2, [pc, #28]	; (8012e24 <DMA2D_IRQHandler+0x54>)
 8012e06:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8012e0a:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8012e0c:	4b05      	ldr	r3, [pc, #20]	; (8012e24 <DMA2D_IRQHandler+0x54>)
 8012e0e:	2202      	movs	r2, #2
 8012e10:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8012e12:	f7fa fedb 	bl	800dbcc <_ZN8touchgfx3HAL11getInstanceEv>
 8012e16:	4603      	mov	r3, r0
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7ff ffc7 	bl	8012dac <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8012e1e:	bf00      	nop
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	4002b000 	.word	0x4002b000

08012e28 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	330c      	adds	r3, #12
 8012e34:	4618      	mov	r0, r3
 8012e36:	f7fc f9ab 	bl	800f190 <_ZN8touchgfx9colortypeC1Ev>
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	3708      	adds	r7, #8
 8012e40:	46bd      	mov	sp, r7
 8012e42:	bd80      	pop	{r7, pc}

08012e44 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 8012e44:	b5b0      	push	{r4, r5, r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8012e4c:	687a      	ldr	r2, [r7, #4]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	330c      	adds	r3, #12
 8012e52:	4619      	mov	r1, r3
 8012e54:	4610      	mov	r0, r2
 8012e56:	f7ff ff75 	bl	8012d44 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8012e5a:	4a0e      	ldr	r2, [pc, #56]	; (8012e94 <_ZN8STM32DMAC1Ev+0x50>)
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	601a      	str	r2, [r3, #0]
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	f103 000c 	add.w	r0, r3, #12
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	3320      	adds	r3, #32
 8012e6a:	2260      	movs	r2, #96	; 0x60
 8012e6c:	4619      	mov	r1, r3
 8012e6e:	f003 fb9b 	bl	80165a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	3320      	adds	r3, #32
 8012e76:	245f      	movs	r4, #95	; 0x5f
 8012e78:	461d      	mov	r5, r3
 8012e7a:	2c00      	cmp	r4, #0
 8012e7c:	db05      	blt.n	8012e8a <_ZN8STM32DMAC1Ev+0x46>
 8012e7e:	4628      	mov	r0, r5
 8012e80:	f7ff ffd2 	bl	8012e28 <_ZN8touchgfx6BlitOpC1Ev>
 8012e84:	3524      	adds	r5, #36	; 0x24
 8012e86:	3c01      	subs	r4, #1
 8012e88:	e7f7      	b.n	8012e7a <_ZN8STM32DMAC1Ev+0x36>
{
}
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3708      	adds	r7, #8
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bdb0      	pop	{r4, r5, r7, pc}
 8012e94:	0802ef20 	.word	0x0802ef20

08012e98 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
 8012ea0:	4a09      	ldr	r2, [pc, #36]	; (8012ec8 <_ZN8STM32DMAD1Ev+0x30>)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8012ea6:	205a      	movs	r0, #90	; 0x5a
 8012ea8:	f7ff feda 	bl	8012c60 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	330c      	adds	r3, #12
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f000 fb3b 	bl	801352c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7ff ff23 	bl	8012d04 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	3708      	adds	r7, #8
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bd80      	pop	{r7, pc}
 8012ec8:	0802ef20 	.word	0x0802ef20

08012ecc <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b082      	sub	sp, #8
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
}
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f7ff ffdf 	bl	8012e98 <_ZN8STM32DMAD1Ev>
 8012eda:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8012ede:	6878      	ldr	r0, [r7, #4]
 8012ee0:	f015 fee4 	bl	8028cac <_ZdlPvj>
 8012ee4:	687b      	ldr	r3, [r7, #4]
 8012ee6:	4618      	mov	r0, r3
 8012ee8:	3708      	adds	r7, #8
 8012eea:	46bd      	mov	sp, r7
 8012eec:	bd80      	pop	{r7, pc}
	...

08012ef0 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b084      	sub	sp, #16
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8012ef8:	4b11      	ldr	r3, [pc, #68]	; (8012f40 <_ZN8STM32DMA10initializeEv+0x50>)
 8012efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012efc:	4a10      	ldr	r2, [pc, #64]	; (8012f40 <_ZN8STM32DMA10initializeEv+0x50>)
 8012efe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012f02:	6313      	str	r3, [r2, #48]	; 0x30
 8012f04:	4b0e      	ldr	r3, [pc, #56]	; (8012f40 <_ZN8STM32DMA10initializeEv+0x50>)
 8012f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012f0c:	60fb      	str	r3, [r7, #12]
 8012f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8012f10:	4b0b      	ldr	r3, [pc, #44]	; (8012f40 <_ZN8STM32DMA10initializeEv+0x50>)
 8012f12:	691b      	ldr	r3, [r3, #16]
 8012f14:	4a0a      	ldr	r2, [pc, #40]	; (8012f40 <_ZN8STM32DMA10initializeEv+0x50>)
 8012f16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012f1a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8012f1c:	4b08      	ldr	r3, [pc, #32]	; (8012f40 <_ZN8STM32DMA10initializeEv+0x50>)
 8012f1e:	691b      	ldr	r3, [r3, #16]
 8012f20:	4a07      	ldr	r2, [pc, #28]	; (8012f40 <_ZN8STM32DMA10initializeEv+0x50>)
 8012f22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8012f26:	6113      	str	r3, [r2, #16]

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8012f28:	2200      	movs	r2, #0
 8012f2a:	2105      	movs	r1, #5
 8012f2c:	205a      	movs	r0, #90	; 0x5a
 8012f2e:	f7f0 f935 	bl	800319c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8012f32:	205a      	movs	r0, #90	; 0x5a
 8012f34:	f7f0 f94e 	bl	80031d4 <HAL_NVIC_EnableIRQ>
}
 8012f38:	bf00      	nop
 8012f3a:	3710      	adds	r7, #16
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	bd80      	pop	{r7, pc}
 8012f40:	40023800 	.word	0x40023800

08012f44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b084      	sub	sp, #16
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	460b      	mov	r3, r1
 8012f4e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012f50:	2300      	movs	r3, #0
 8012f52:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012f54:	78fb      	ldrb	r3, [r7, #3]
 8012f56:	2b0b      	cmp	r3, #11
 8012f58:	d826      	bhi.n	8012fa8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8012f5a:	a201      	add	r2, pc, #4	; (adr r2, 8012f60 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f60:	08012f9d 	.word	0x08012f9d
 8012f64:	08012f97 	.word	0x08012f97
 8012f68:	08012f91 	.word	0x08012f91
 8012f6c:	08012fa9 	.word	0x08012fa9
 8012f70:	08012fa9 	.word	0x08012fa9
 8012f74:	08012fa9 	.word	0x08012fa9
 8012f78:	08012fa9 	.word	0x08012fa9
 8012f7c:	08012fa3 	.word	0x08012fa3
 8012f80:	08012fa3 	.word	0x08012fa3
 8012f84:	08012fa3 	.word	0x08012fa3
 8012f88:	08012fa3 	.word	0x08012fa3
 8012f8c:	08012fa3 	.word	0x08012fa3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8012f90:	2300      	movs	r3, #0
 8012f92:	60fb      	str	r3, [r7, #12]
        break;
 8012f94:	e00e      	b.n	8012fb4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8012f96:	2301      	movs	r3, #1
 8012f98:	60fb      	str	r3, [r7, #12]
        break;
 8012f9a:	e00b      	b.n	8012fb4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8012f9c:	2302      	movs	r3, #2
 8012f9e:	60fb      	str	r3, [r7, #12]
        break;
 8012fa0:	e008      	b.n	8012fb4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8012fa2:	2305      	movs	r3, #5
 8012fa4:	60fb      	str	r3, [r7, #12]
        break;
 8012fa6:	e005      	b.n	8012fb4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8012fa8:	4b05      	ldr	r3, [pc, #20]	; (8012fc0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8012faa:	4a06      	ldr	r2, [pc, #24]	; (8012fc4 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8012fac:	216e      	movs	r1, #110	; 0x6e
 8012fae:	4806      	ldr	r0, [pc, #24]	; (8012fc8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8012fb0:	f015 feaa 	bl	8028d08 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8012fb4:	68fb      	ldr	r3, [r7, #12]
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3710      	adds	r7, #16
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}
 8012fbe:	bf00      	nop
 8012fc0:	0802cf7c 	.word	0x0802cf7c
 8012fc4:	0802cf98 	.word	0x0802cf98
 8012fc8:	0802cfe4 	.word	0x0802cfe4

08012fcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b084      	sub	sp, #16
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	460b      	mov	r3, r1
 8012fd6:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8012fd8:	2300      	movs	r3, #0
 8012fda:	60fb      	str	r3, [r7, #12]

    switch (format)
 8012fdc:	78fb      	ldrb	r3, [r7, #3]
 8012fde:	2b0a      	cmp	r3, #10
 8012fe0:	d821      	bhi.n	8013026 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8012fe2:	a201      	add	r2, pc, #4	; (adr r2, 8012fe8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8012fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fe8:	08013021 	.word	0x08013021
 8012fec:	0801301b 	.word	0x0801301b
 8012ff0:	08013015 	.word	0x08013015
 8012ff4:	08013027 	.word	0x08013027
 8012ff8:	08013027 	.word	0x08013027
 8012ffc:	08013027 	.word	0x08013027
 8013000:	08013027 	.word	0x08013027
 8013004:	0801301b 	.word	0x0801301b
 8013008:	0801301b 	.word	0x0801301b
 801300c:	0801301b 	.word	0x0801301b
 8013010:	0801301b 	.word	0x0801301b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8013014:	2300      	movs	r3, #0
 8013016:	60fb      	str	r3, [r7, #12]
        break;
 8013018:	e00b      	b.n	8013032 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 801301a:	2301      	movs	r3, #1
 801301c:	60fb      	str	r3, [r7, #12]
        break;
 801301e:	e008      	b.n	8013032 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8013020:	2302      	movs	r3, #2
 8013022:	60fb      	str	r3, [r7, #12]
        break;
 8013024:	e005      	b.n	8013032 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8013026:	4b05      	ldr	r3, [pc, #20]	; (801303c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8013028:	4a05      	ldr	r2, [pc, #20]	; (8013040 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 801302a:	218f      	movs	r1, #143	; 0x8f
 801302c:	4805      	ldr	r0, [pc, #20]	; (8013044 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 801302e:	f015 fe6b 	bl	8028d08 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8013032:	68fb      	ldr	r3, [r7, #12]
}
 8013034:	4618      	mov	r0, r3
 8013036:	3710      	adds	r7, #16
 8013038:	46bd      	mov	sp, r7
 801303a:	bd80      	pop	{r7, pc}
 801303c:	0802cf7c 	.word	0x0802cf7c
 8013040:	0802d010 	.word	0x0802d010
 8013044:	0802cfe4 	.word	0x0802cfe4

08013048 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8013048:	b480      	push	{r7}
 801304a:	b083      	sub	sp, #12
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_16BIT
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8013050:	f640 73ef 	movw	r3, #4079	; 0xfef
}
 8013054:	4618      	mov	r0, r3
 8013056:	370c      	adds	r7, #12
 8013058:	46bd      	mov	sp, r7
 801305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801305e:	4770      	bx	lr

08013060 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013060:	b580      	push	{r7, lr}
 8013062:	b088      	sub	sp, #32
 8013064:	af00      	add	r7, sp, #0
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 801306a:	683b      	ldr	r3, [r7, #0]
 801306c:	7f5b      	ldrb	r3, [r3, #29]
 801306e:	4619      	mov	r1, r3
 8013070:	6878      	ldr	r0, [r7, #4]
 8013072:	f7ff ff67 	bl	8012f44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013076:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	7f9b      	ldrb	r3, [r3, #30]
 801307c:	4619      	mov	r1, r3
 801307e:	6878      	ldr	r0, [r7, #4]
 8013080:	f7ff ff60 	bl	8012f44 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013084:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	7f9b      	ldrb	r3, [r3, #30]
 801308a:	4619      	mov	r1, r3
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f7ff ff9d 	bl	8012fcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013092:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	8b5b      	ldrh	r3, [r3, #26]
 8013098:	461a      	mov	r2, r3
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	8a9b      	ldrh	r3, [r3, #20]
 801309e:	1ad2      	subs	r2, r2, r3
 80130a0:	4b91      	ldr	r3, [pc, #580]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80130a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	8b5b      	ldrh	r3, [r3, #26]
 80130a8:	461a      	mov	r2, r3
 80130aa:	683b      	ldr	r3, [r7, #0]
 80130ac:	8a9b      	ldrh	r3, [r3, #20]
 80130ae:	1ad2      	subs	r2, r2, r3
 80130b0:	4b8d      	ldr	r3, [pc, #564]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80130b2:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	8b1b      	ldrh	r3, [r3, #24]
 80130b8:	461a      	mov	r2, r3
 80130ba:	683b      	ldr	r3, [r7, #0]
 80130bc:	8a9b      	ldrh	r3, [r3, #20]
 80130be:	1ad2      	subs	r2, r2, r3
 80130c0:	4b89      	ldr	r3, [pc, #548]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80130c2:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80130c4:	4a88      	ldr	r2, [pc, #544]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80130c6:	693b      	ldr	r3, [r7, #16]
 80130c8:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	8adb      	ldrh	r3, [r3, #22]
 80130ce:	461a      	mov	r2, r3
 80130d0:	683b      	ldr	r3, [r7, #0]
 80130d2:	8a9b      	ldrh	r3, [r3, #20]
 80130d4:	041b      	lsls	r3, r3, #16
 80130d6:	431a      	orrs	r2, r3
 80130d8:	4b83      	ldr	r3, [pc, #524]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80130da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	691a      	ldr	r2, [r3, #16]
 80130e0:	4b81      	ldr	r3, [pc, #516]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80130e2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	685a      	ldr	r2, [r3, #4]
 80130e8:	4b7f      	ldr	r3, [pc, #508]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80130ea:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 80130ec:	683b      	ldr	r3, [r7, #0]
 80130ee:	681b      	ldr	r3, [r3, #0]
 80130f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130f4:	d042      	beq.n	801317c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 80130f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80130fa:	f200 8152 	bhi.w	80133a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 80130fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013102:	d014      	beq.n	801312e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8013104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013108:	f200 814b 	bhi.w	80133a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 801310c:	2b80      	cmp	r3, #128	; 0x80
 801310e:	d07b      	beq.n	8013208 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8013110:	2b80      	cmp	r3, #128	; 0x80
 8013112:	f200 8146 	bhi.w	80133a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8013116:	2b40      	cmp	r3, #64	; 0x40
 8013118:	f000 8124 	beq.w	8013364 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x304>
 801311c:	2b40      	cmp	r3, #64	; 0x40
 801311e:	f200 8140 	bhi.w	80133a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8013122:	2b04      	cmp	r3, #4
 8013124:	d051      	beq.n	80131ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16a>
 8013126:	2b20      	cmp	r3, #32
 8013128:	f000 80f4 	beq.w	8013314 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>
 801312c:	e139      	b.n	80133a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	7f1b      	ldrb	r3, [r3, #28]
 8013132:	061b      	lsls	r3, r3, #24
 8013134:	4619      	mov	r1, r3
 8013136:	4a6c      	ldr	r2, [pc, #432]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013138:	4b6c      	ldr	r3, [pc, #432]	; (80132ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801313a:	430b      	orrs	r3, r1
 801313c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 801313e:	683b      	ldr	r3, [r7, #0]
 8013140:	330c      	adds	r3, #12
 8013142:	4618      	mov	r0, r3
 8013144:	f7fc f832 	bl	800f1ac <_ZNK8touchgfx9colortypecvmEv>
 8013148:	4603      	mov	r3, r0
 801314a:	4a67      	ldr	r2, [pc, #412]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801314c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013150:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	7fdb      	ldrb	r3, [r3, #31]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d005      	beq.n	8013166 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 801315a:	4963      	ldr	r1, [pc, #396]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801315c:	697a      	ldr	r2, [r7, #20]
 801315e:	4b64      	ldr	r3, [pc, #400]	; (80132f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 8013160:	4313      	orrs	r3, r2
 8013162:	624b      	str	r3, [r1, #36]	; 0x24
 8013164:	e002      	b.n	801316c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10c>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013166:	4a60      	ldr	r2, [pc, #384]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013168:	697b      	ldr	r3, [r7, #20]
 801316a:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	691a      	ldr	r2, [r3, #16]
 8013170:	4b5d      	ldr	r3, [pc, #372]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013172:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013174:	4b5c      	ldr	r3, [pc, #368]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013176:	4a5f      	ldr	r2, [pc, #380]	; (80132f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8013178:	601a      	str	r2, [r3, #0]
        break;
 801317a:	e133      	b.n	80133e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	7f1b      	ldrb	r3, [r3, #28]
 8013180:	061b      	lsls	r3, r3, #24
 8013182:	4619      	mov	r1, r3
 8013184:	4a58      	ldr	r2, [pc, #352]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013186:	4b5c      	ldr	r3, [pc, #368]	; (80132f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 8013188:	430b      	orrs	r3, r1
 801318a:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	330c      	adds	r3, #12
 8013190:	4618      	mov	r0, r3
 8013192:	f7fc f80b 	bl	800f1ac <_ZNK8touchgfx9colortypecvmEv>
 8013196:	4603      	mov	r3, r0
 8013198:	4a53      	ldr	r2, [pc, #332]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801319a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801319e:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	7fdb      	ldrb	r3, [r3, #31]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d005      	beq.n	80131b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80131a8:	494f      	ldr	r1, [pc, #316]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80131aa:	697a      	ldr	r2, [r7, #20]
 80131ac:	4b50      	ldr	r3, [pc, #320]	; (80132f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80131ae:	4313      	orrs	r3, r2
 80131b0:	624b      	str	r3, [r1, #36]	; 0x24
 80131b2:	e002      	b.n	80131ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80131b4:	4a4c      	ldr	r2, [pc, #304]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80131ba:	683b      	ldr	r3, [r7, #0]
 80131bc:	691a      	ldr	r2, [r3, #16]
 80131be:	4b4a      	ldr	r3, [pc, #296]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80131c0:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80131c2:	4b49      	ldr	r3, [pc, #292]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80131c4:	4a4b      	ldr	r2, [pc, #300]	; (80132f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80131c6:	601a      	str	r2, [r3, #0]
        break;
 80131c8:	e10c      	b.n	80133e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	7f1b      	ldrb	r3, [r3, #28]
 80131ce:	061b      	lsls	r3, r3, #24
 80131d0:	461a      	mov	r2, r3
 80131d2:	69bb      	ldr	r3, [r7, #24]
 80131d4:	4313      	orrs	r3, r2
 80131d6:	4a44      	ldr	r2, [pc, #272]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80131d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80131dc:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	7fdb      	ldrb	r3, [r3, #31]
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d005      	beq.n	80131f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x192>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80131e6:	4940      	ldr	r1, [pc, #256]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80131e8:	697a      	ldr	r2, [r7, #20]
 80131ea:	4b41      	ldr	r3, [pc, #260]	; (80132f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80131ec:	4313      	orrs	r3, r2
 80131ee:	624b      	str	r3, [r1, #36]	; 0x24
 80131f0:	e002      	b.n	80131f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80131f2:	4a3d      	ldr	r2, [pc, #244]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80131f8:	683b      	ldr	r3, [r7, #0]
 80131fa:	691a      	ldr	r2, [r3, #16]
 80131fc:	4b3a      	ldr	r3, [pc, #232]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80131fe:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8013200:	4b39      	ldr	r3, [pc, #228]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013202:	4a3c      	ldr	r2, [pc, #240]	; (80132f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8013204:	601a      	str	r2, [r3, #0]
        break;
 8013206:	e0ed      	b.n	80133e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8013208:	2301      	movs	r3, #1
 801320a:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	689b      	ldr	r3, [r3, #8]
 8013210:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	1d1a      	adds	r2, r3, #4
 8013216:	4b34      	ldr	r3, [pc, #208]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013218:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	7f1b      	ldrb	r3, [r3, #28]
 801321e:	061b      	lsls	r3, r3, #24
 8013220:	461a      	mov	r2, r3
 8013222:	69bb      	ldr	r3, [r7, #24]
 8013224:	4313      	orrs	r3, r2
 8013226:	4a30      	ldr	r2, [pc, #192]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013228:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801322c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            if (blitOp.replaceBgAlpha)
 801322e:	683b      	ldr	r3, [r7, #0]
 8013230:	7fdb      	ldrb	r3, [r3, #31]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d005      	beq.n	8013242 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013236:	492c      	ldr	r1, [pc, #176]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013238:	697a      	ldr	r2, [r7, #20]
 801323a:	4b2d      	ldr	r3, [pc, #180]	; (80132f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801323c:	4313      	orrs	r3, r2
 801323e:	624b      	str	r3, [r1, #36]	; 0x24
 8013240:	e002      	b.n	8013248 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e8>
            }
            else
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013242:	4a29      	ldr	r2, [pc, #164]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	6253      	str	r3, [r2, #36]	; 0x24
            }

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013248:	683b      	ldr	r3, [r7, #0]
 801324a:	691a      	ldr	r2, [r3, #16]
 801324c:	4b26      	ldr	r3, [pc, #152]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801324e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	881b      	ldrh	r3, [r3, #0]
 8013254:	b2db      	uxtb	r3, r3
 8013256:	2b00      	cmp	r3, #0
 8013258:	d002      	beq.n	8013260 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x200>
 801325a:	2b01      	cmp	r3, #1
 801325c:	d00d      	beq.n	801327a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21a>
 801325e:	e020      	b.n	80132a2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x242>
            {
                case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                    /* Write foreground CLUT size and CLUT color mode */
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8013260:	4b21      	ldr	r3, [pc, #132]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013262:	69da      	ldr	r2, [r3, #28]
 8013264:	4b25      	ldr	r3, [pc, #148]	; (80132fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8013266:	4013      	ands	r3, r2
 8013268:	68fa      	ldr	r2, [r7, #12]
 801326a:	8852      	ldrh	r2, [r2, #2]
 801326c:	3a01      	subs	r2, #1
 801326e:	0212      	lsls	r2, r2, #8
 8013270:	4611      	mov	r1, r2
 8013272:	4a1d      	ldr	r2, [pc, #116]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013274:	430b      	orrs	r3, r1
 8013276:	61d3      	str	r3, [r2, #28]
                    break;
 8013278:	e01a      	b.n	80132b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>
                case Bitmap::CLUT_FORMAT_L8_RGB888:
                    if(blitOp.alpha == 255)
 801327a:	683b      	ldr	r3, [r7, #0]
 801327c:	7f1b      	ldrb	r3, [r3, #28]
 801327e:	2bff      	cmp	r3, #255	; 0xff
 8013280:	d101      	bne.n	8013286 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
                    {
                        blend = false;
 8013282:	2300      	movs	r3, #0
 8013284:	77fb      	strb	r3, [r7, #31]
                    }
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8013286:	4b18      	ldr	r3, [pc, #96]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013288:	69da      	ldr	r2, [r3, #28]
 801328a:	4b1c      	ldr	r3, [pc, #112]	; (80132fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801328c:	4013      	ands	r3, r2
 801328e:	68fa      	ldr	r2, [r7, #12]
 8013290:	8852      	ldrh	r2, [r2, #2]
 8013292:	3a01      	subs	r2, #1
 8013294:	0212      	lsls	r2, r2, #8
 8013296:	4313      	orrs	r3, r2
 8013298:	4a13      	ldr	r2, [pc, #76]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801329a:	f043 0310 	orr.w	r3, r3, #16
 801329e:	61d3      	str	r3, [r2, #28]
                    break;
 80132a0:	e006      	b.n	80132b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>
                case Bitmap::CLUT_FORMAT_L8_RGB565:
                default:
                    assert(0 && "Unsupported format");
 80132a2:	4b17      	ldr	r3, [pc, #92]	; (8013300 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80132a4:	4a17      	ldr	r2, [pc, #92]	; (8013304 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80132a6:	f240 1137 	movw	r1, #311	; 0x137
 80132aa:	4817      	ldr	r0, [pc, #92]	; (8013308 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80132ac:	f015 fd2c 	bl	8028d08 <__assert_func>
                    break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 80132b0:	4b0d      	ldr	r3, [pc, #52]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80132b2:	69db      	ldr	r3, [r3, #28]
 80132b4:	4a0c      	ldr	r2, [pc, #48]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80132b6:	f043 0320 	orr.w	r3, r3, #32
 80132ba:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 80132bc:	4b0a      	ldr	r3, [pc, #40]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80132be:	69db      	ldr	r3, [r3, #28]
 80132c0:	f003 0320 	and.w	r3, r3, #32
 80132c4:	2b00      	cmp	r3, #0
 80132c6:	bf14      	ite	ne
 80132c8:	2301      	movne	r3, #1
 80132ca:	2300      	moveq	r3, #0
 80132cc:	b2db      	uxtb	r3, r3
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d000      	beq.n	80132d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>
 80132d2:	e7f3      	b.n	80132bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25c>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 80132d4:	4b04      	ldr	r3, [pc, #16]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80132d6:	2210      	movs	r2, #16
 80132d8:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 80132da:	7ffb      	ldrb	r3, [r7, #31]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d015      	beq.n	801330c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80132e0:	4b01      	ldr	r3, [pc, #4]	; (80132e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80132e2:	4a04      	ldr	r2, [pc, #16]	; (80132f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80132e4:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 80132e6:	e07d      	b.n	80133e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
 80132e8:	4002b000 	.word	0x4002b000
 80132ec:	0002000a 	.word	0x0002000a
 80132f0:	ff010000 	.word	0xff010000
 80132f4:	00020201 	.word	0x00020201
 80132f8:	00020009 	.word	0x00020009
 80132fc:	ffff00ef 	.word	0xffff00ef
 8013300:	0802d05c 	.word	0x0802d05c
 8013304:	0802d078 	.word	0x0802d078
 8013308:	0802cfe4 	.word	0x0802cfe4
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 801330c:	4b37      	ldr	r3, [pc, #220]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801330e:	4a38      	ldr	r2, [pc, #224]	; (80133f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 8013310:	601a      	str	r2, [r3, #0]
        break;
 8013312:	e067      	b.n	80133e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_ARGB8888:
        /* Write DMA2D FGPFCCR register */
        if (blitOp.replaceFgAlpha)
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	f893 3020 	ldrb.w	r3, [r3, #32]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d00a      	beq.n	8013334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	7f1b      	ldrb	r3, [r3, #28]
 8013322:	061b      	lsls	r3, r3, #24
 8013324:	461a      	mov	r2, r3
 8013326:	69bb      	ldr	r3, [r7, #24]
 8013328:	4313      	orrs	r3, r2
 801332a:	4a30      	ldr	r2, [pc, #192]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013330:	61d3      	str	r3, [r2, #28]
 8013332:	e002      	b.n	801333a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2da>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8013334:	4a2d      	ldr	r2, [pc, #180]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013336:	69bb      	ldr	r3, [r7, #24]
 8013338:	61d3      	str	r3, [r2, #28]
        }

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	7fdb      	ldrb	r3, [r3, #31]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d005      	beq.n	801334e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ee>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013342:	492a      	ldr	r1, [pc, #168]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013344:	697a      	ldr	r2, [r7, #20]
 8013346:	4b2b      	ldr	r3, [pc, #172]	; (80133f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8013348:	4313      	orrs	r3, r2
 801334a:	624b      	str	r3, [r1, #36]	; 0x24
 801334c:	e002      	b.n	8013354 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2f4>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801334e:	4a27      	ldr	r2, [pc, #156]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013350:	697b      	ldr	r3, [r7, #20]
 8013352:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013354:	683b      	ldr	r3, [r7, #0]
 8013356:	691a      	ldr	r2, [r3, #16]
 8013358:	4b24      	ldr	r3, [pc, #144]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801335a:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801335c:	4b23      	ldr	r3, [pc, #140]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801335e:	4a26      	ldr	r2, [pc, #152]	; (80133f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>)
 8013360:	601a      	str	r2, [r3, #0]
        break;
 8013362:	e03f      	b.n	80133e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>

    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	7f1b      	ldrb	r3, [r3, #28]
 8013368:	061b      	lsls	r3, r3, #24
 801336a:	461a      	mov	r2, r3
 801336c:	69bb      	ldr	r3, [r7, #24]
 801336e:	4313      	orrs	r3, r2
 8013370:	4a1e      	ldr	r2, [pc, #120]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013372:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013376:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	7fdb      	ldrb	r3, [r3, #31]
 801337c:	2b00      	cmp	r3, #0
 801337e:	d005      	beq.n	801338c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32c>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013380:	491a      	ldr	r1, [pc, #104]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013382:	697a      	ldr	r2, [r7, #20]
 8013384:	4b1b      	ldr	r3, [pc, #108]	; (80133f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8013386:	4313      	orrs	r3, r2
 8013388:	624b      	str	r3, [r1, #36]	; 0x24
 801338a:	e002      	b.n	8013392 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x332>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801338c:	4a17      	ldr	r2, [pc, #92]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	691a      	ldr	r2, [r3, #16]
 8013396:	4b15      	ldr	r3, [pc, #84]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8013398:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 801339a:	4b14      	ldr	r3, [pc, #80]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801339c:	4a16      	ldr	r2, [pc, #88]	; (80133f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>)
 801339e:	601a      	str	r2, [r3, #0]
        break;
 80133a0:	e020      	b.n	80133e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    default: /* BLIT_OP_COPY & BLIT_OP_COPY_16BIT */
        /* Set DMA2D color mode and alpha mode */
        if (blitOp.replaceFgAlpha)
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d005      	beq.n	80133b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x358>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80133ac:	490f      	ldr	r1, [pc, #60]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80133ae:	69ba      	ldr	r2, [r7, #24]
 80133b0:	4b10      	ldr	r3, [pc, #64]	; (80133f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 80133b2:	4313      	orrs	r3, r2
 80133b4:	61cb      	str	r3, [r1, #28]
 80133b6:	e002      	b.n	80133be <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x35e>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80133b8:	4a0c      	ldr	r2, [pc, #48]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	61d3      	str	r3, [r2, #28]
        }

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 80133be:	683b      	ldr	r3, [r7, #0]
 80133c0:	7f5a      	ldrb	r2, [r3, #29]
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	7f9b      	ldrb	r3, [r3, #30]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d007      	beq.n	80133da <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37a>
        {
            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	691a      	ldr	r2, [r3, #16]
 80133ce:	4b07      	ldr	r3, [pc, #28]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80133d0:	615a      	str	r2, [r3, #20]

            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 80133d2:	4b06      	ldr	r3, [pc, #24]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80133d4:	4a06      	ldr	r2, [pc, #24]	; (80133f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 80133d6:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 80133d8:	e003      	b.n	80133e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x382>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 80133da:	4b04      	ldr	r3, [pc, #16]	; (80133ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80133dc:	f240 2201 	movw	r2, #513	; 0x201
 80133e0:	601a      	str	r2, [r3, #0]
        break;
 80133e2:	bf00      	nop
    }
}
 80133e4:	bf00      	nop
 80133e6:	3720      	adds	r7, #32
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}
 80133ec:	4002b000 	.word	0x4002b000
 80133f0:	00010201 	.word	0x00010201
 80133f4:	ff010000 	.word	0xff010000
 80133f8:	00020201 	.word	0x00020201

080133fc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * BLIT_OP_FILL
 * BLIT_OP_FILL_16BIT
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80133fc:	b590      	push	{r4, r7, lr}
 80133fe:	b085      	sub	sp, #20
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	7f9b      	ldrb	r3, [r3, #30]
 801340a:	4619      	mov	r1, r3
 801340c:	6878      	ldr	r0, [r7, #4]
 801340e:	f7ff fddd 	bl	8012fcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013412:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8013414:	4a40      	ldr	r2, [pc, #256]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801341a:	683b      	ldr	r3, [r7, #0]
 801341c:	8adb      	ldrh	r3, [r3, #22]
 801341e:	461a      	mov	r2, r3
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	8a9b      	ldrh	r3, [r3, #20]
 8013424:	041b      	lsls	r3, r3, #16
 8013426:	431a      	orrs	r2, r3
 8013428:	4b3b      	ldr	r3, [pc, #236]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801342a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	691a      	ldr	r2, [r3, #16]
 8013430:	4b39      	ldr	r3, [pc, #228]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013432:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	8b5b      	ldrh	r3, [r3, #26]
 8013438:	461a      	mov	r2, r3
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	8a9b      	ldrh	r3, [r3, #20]
 801343e:	1ad2      	subs	r2, r2, r3
 8013440:	4b35      	ldr	r3, [pc, #212]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013442:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	2b08      	cmp	r3, #8
 801344a:	d13a      	bne.n	80134c2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xc6>
    {
        /* DMA2D BGOR register configuration -*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801344c:	683b      	ldr	r3, [r7, #0]
 801344e:	8b5b      	ldrh	r3, [r3, #26]
 8013450:	461a      	mov	r2, r3
 8013452:	683b      	ldr	r3, [r7, #0]
 8013454:	8a9b      	ldrh	r3, [r3, #20]
 8013456:	1ad2      	subs	r2, r2, r3
 8013458:	4b2f      	ldr	r3, [pc, #188]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801345a:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	8b5b      	ldrh	r3, [r3, #26]
 8013460:	461a      	mov	r2, r3
 8013462:	683b      	ldr	r3, [r7, #0]
 8013464:	8a9b      	ldrh	r3, [r3, #20]
 8013466:	1ad2      	subs	r2, r2, r3
 8013468:	4b2b      	ldr	r3, [pc, #172]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801346a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	7fdb      	ldrb	r3, [r3, #31]
 8013470:	2b00      	cmp	r3, #0
 8013472:	d005      	beq.n	8013480 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8013474:	4928      	ldr	r1, [pc, #160]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013476:	68fa      	ldr	r2, [r7, #12]
 8013478:	4b28      	ldr	r3, [pc, #160]	; (801351c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 801347a:	4313      	orrs	r3, r2
 801347c:	624b      	str	r3, [r1, #36]	; 0x24
 801347e:	e002      	b.n	8013486 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8013480:	4a25      	ldr	r2, [pc, #148]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	7f1b      	ldrb	r3, [r3, #28]
 801348a:	061b      	lsls	r3, r3, #24
 801348c:	4619      	mov	r1, r3
 801348e:	4a22      	ldr	r2, [pc, #136]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013490:	4b23      	ldr	r3, [pc, #140]	; (8013520 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x124>)
 8013492:	430b      	orrs	r3, r1
 8013494:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8013496:	683b      	ldr	r3, [r7, #0]
 8013498:	330c      	adds	r3, #12
 801349a:	4618      	mov	r0, r3
 801349c:	f7fb fe86 	bl	800f1ac <_ZNK8touchgfx9colortypecvmEv>
 80134a0:	4603      	mov	r3, r0
 80134a2:	4a1d      	ldr	r2, [pc, #116]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80134a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80134a8:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	691a      	ldr	r2, [r3, #16]
 80134ae:	4b1a      	ldr	r3, [pc, #104]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80134b0:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	691a      	ldr	r2, [r3, #16]
 80134b6:	4b18      	ldr	r3, [pc, #96]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80134b8:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 80134ba:	4b17      	ldr	r3, [pc, #92]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80134bc:	4a19      	ldr	r2, [pc, #100]	; (8013524 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x128>)
 80134be:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 80134c0:	e025      	b.n	801350e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80134c2:	4a15      	ldr	r2, [pc, #84]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80134c8:	4b13      	ldr	r3, [pc, #76]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80134ca:	2200      	movs	r2, #0
 80134cc:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	7f9b      	ldrb	r3, [r3, #30]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d109      	bne.n	80134ea <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xee>
            WRITE_REG(DMA2D->OCOLR, blitOp.color & (DMA2D_OCOLR_BLUE_2 | DMA2D_OCOLR_GREEN_2 | DMA2D_OCOLR_RED_2));
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	330c      	adds	r3, #12
 80134da:	4618      	mov	r0, r3
 80134dc:	f7fb fe66 	bl	800f1ac <_ZNK8touchgfx9colortypecvmEv>
 80134e0:	4603      	mov	r3, r0
 80134e2:	4a0d      	ldr	r2, [pc, #52]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80134e4:	b29b      	uxth	r3, r3
 80134e6:	6393      	str	r3, [r2, #56]	; 0x38
 80134e8:	e00e      	b.n	8013508 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	7f1b      	ldrb	r3, [r3, #28]
 80134ee:	061b      	lsls	r3, r3, #24
 80134f0:	461c      	mov	r4, r3
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	330c      	adds	r3, #12
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7fb fe58 	bl	800f1ac <_ZNK8touchgfx9colortypecvmEv>
 80134fc:	4603      	mov	r3, r0
 80134fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013502:	4a05      	ldr	r2, [pc, #20]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8013504:	4323      	orrs	r3, r4
 8013506:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8013508:	4b03      	ldr	r3, [pc, #12]	; (8013518 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801350a:	4a07      	ldr	r2, [pc, #28]	; (8013528 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>)
 801350c:	601a      	str	r2, [r3, #0]
}
 801350e:	bf00      	nop
 8013510:	3714      	adds	r7, #20
 8013512:	46bd      	mov	sp, r7
 8013514:	bd90      	pop	{r4, r7, pc}
 8013516:	bf00      	nop
 8013518:	4002b000 	.word	0x4002b000
 801351c:	ff010000 	.word	0xff010000
 8013520:	00010009 	.word	0x00010009
 8013524:	00020201 	.word	0x00020201
 8013528:	00030201 	.word	0x00030201

0801352c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801352c:	b580      	push	{r7, lr}
 801352e:	b082      	sub	sp, #8
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	4a05      	ldr	r2, [pc, #20]	; (801354c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	601a      	str	r2, [r3, #0]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	4618      	mov	r0, r3
 801353e:	f7ff fbb3 	bl	8012ca8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013542:	687b      	ldr	r3, [r7, #4]
 8013544:	4618      	mov	r0, r3
 8013546:	3708      	adds	r7, #8
 8013548:	46bd      	mov	sp, r7
 801354a:	bd80      	pop	{r7, pc}
 801354c:	0802f3b4 	.word	0x0802f3b4

08013550 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8013550:	b580      	push	{r7, lr}
 8013552:	b082      	sub	sp, #8
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	6878      	ldr	r0, [r7, #4]
 801355a:	f7ff ffe7 	bl	801352c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801355e:	2114      	movs	r1, #20
 8013560:	6878      	ldr	r0, [r7, #4]
 8013562:	f015 fba3 	bl	8028cac <_ZdlPvj>
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	4618      	mov	r0, r3
 801356a:	3708      	adds	r7, #8
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 8013578:	4a04      	ldr	r2, [pc, #16]	; (801358c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6013      	str	r3, [r2, #0]
    }
 801357e:	bf00      	nop
 8013580:	370c      	adds	r7, #12
 8013582:	46bd      	mov	sp, r7
 8013584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013588:	4770      	bx	lr
 801358a:	bf00      	nop
 801358c:	2003bf44 	.word	0x2003bf44

08013590 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8013590:	b480      	push	{r7}
 8013592:	b085      	sub	sp, #20
 8013594:	af00      	add	r7, sp, #0
 8013596:	60f8      	str	r0, [r7, #12]
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	607a      	str	r2, [r7, #4]
 801359c:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 801359e:	4a0b      	ldr	r2, [pc, #44]	; (80135cc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	601a      	str	r2, [r3, #0]
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	68ba      	ldr	r2, [r7, #8]
 80135a8:	605a      	str	r2, [r3, #4]
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	609a      	str	r2, [r3, #8]
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	683a      	ldr	r2, [r7, #0]
 80135b4:	60da      	str	r2, [r3, #12]
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	69ba      	ldr	r2, [r7, #24]
 80135ba:	611a      	str	r2, [r3, #16]
    {
    }
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	4618      	mov	r0, r3
 80135c0:	3714      	adds	r7, #20
 80135c2:	46bd      	mov	sp, r7
 80135c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c8:	4770      	bx	lr
 80135ca:	bf00      	nop
 80135cc:	0802f058 	.word	0x0802f058

080135d0 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
    {
 80135d8:	4a04      	ldr	r2, [pc, #16]	; (80135ec <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	601a      	str	r2, [r3, #0]
    }
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	4618      	mov	r0, r3
 80135e2:	370c      	adds	r7, #12
 80135e4:	46bd      	mov	sp, r7
 80135e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ea:	4770      	bx	lr
 80135ec:	0802f058 	.word	0x0802f058

080135f0 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	6078      	str	r0, [r7, #4]
    }
 80135f8:	6878      	ldr	r0, [r7, #4]
 80135fa:	f7ff ffe9 	bl	80135d0 <_ZN8touchgfx7MVPHeapD1Ev>
 80135fe:	2114      	movs	r1, #20
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f015 fb53 	bl	8028cac <_ZdlPvj>
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	4618      	mov	r0, r3
 801360a:	3708      	adds	r7, #8
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}

08013610 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8013610:	b480      	push	{r7}
 8013612:	b083      	sub	sp, #12
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
    {
 8013618:	4a04      	ldr	r2, [pc, #16]	; (801362c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	601a      	str	r2, [r3, #0]
    }
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	4618      	mov	r0, r3
 8013622:	370c      	adds	r7, #12
 8013624:	46bd      	mov	sp, r7
 8013626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801362a:	4770      	bx	lr
 801362c:	0802f824 	.word	0x0802f824

08013630 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
    }
 8013638:	6878      	ldr	r0, [r7, #4]
 801363a:	f7ff ffe9 	bl	8013610 <_ZN8touchgfx3LCDD1Ev>
 801363e:	2108      	movs	r1, #8
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f015 fb33 	bl	8028cac <_ZdlPvj>
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	4618      	mov	r0, r3
 801364a:	3708      	adds	r7, #8
 801364c:	46bd      	mov	sp, r7
 801364e:	bd80      	pop	{r7, pc}

08013650 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 8013650:	b480      	push	{r7}
 8013652:	b083      	sub	sp, #12
 8013654:	af00      	add	r7, sp, #0
 8013656:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	2200      	movs	r2, #0
 801365c:	801a      	strh	r2, [r3, #0]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	2200      	movs	r2, #0
 8013662:	805a      	strh	r2, [r3, #2]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	2200      	movs	r2, #0
 8013668:	809a      	strh	r2, [r3, #4]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2200      	movs	r2, #0
 801366e:	80da      	strh	r2, [r3, #6]
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	2200      	movs	r2, #0
 8013674:	811a      	strh	r2, [r3, #8]
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	2200      	movs	r2, #0
 801367a:	815a      	strh	r2, [r3, #10]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2200      	movs	r2, #0
 8013680:	819a      	strh	r2, [r3, #12]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	2200      	movs	r2, #0
 8013686:	739a      	strb	r2, [r3, #14]
        {
        }
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	4618      	mov	r0, r3
 801368c:	370c      	adds	r7, #12
 801368e:	46bd      	mov	sp, r7
 8013690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013694:	4770      	bx	lr

08013696 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 8013696:	b580      	push	{r7, lr}
 8013698:	b082      	sub	sp, #8
 801369a:	af00      	add	r7, sp, #0
 801369c:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	4618      	mov	r0, r3
 80136a2:	f7ff ffd5 	bl	8013650 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	2200      	movs	r2, #0
 80136aa:	611a      	str	r2, [r3, #16]
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	2200      	movs	r2, #0
 80136b0:	829a      	strh	r2, [r3, #20]
    {
    }
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	4618      	mov	r0, r3
 80136b6:	3708      	adds	r7, #8
 80136b8:	46bd      	mov	sp, r7
 80136ba:	bd80      	pop	{r7, pc}

080136bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	607a      	str	r2, [r7, #4]
 80136c8:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80136ca:	4a55      	ldr	r2, [pc, #340]	; (8013820 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	601a      	str	r2, [r3, #0]
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	68ba      	ldr	r2, [r7, #8]
 80136d4:	605a      	str	r2, [r3, #4]
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	687a      	ldr	r2, [r7, #4]
 80136da:	609a      	str	r2, [r3, #8]
 80136dc:	68fb      	ldr	r3, [r7, #12]
 80136de:	683a      	ldr	r2, [r7, #0]
 80136e0:	60da      	str	r2, [r3, #12]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	2200      	movs	r2, #0
 80136e6:	611a      	str	r2, [r3, #16]
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	2200      	movs	r2, #0
 80136ec:	615a      	str	r2, [r3, #20]
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	2200      	movs	r2, #0
 80136f2:	619a      	str	r2, [r3, #24]
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	331c      	adds	r3, #28
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7ff ffcc 	bl	8013696 <_ZN8touchgfx8GesturesC1Ev>
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2200      	movs	r2, #0
 8013702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8013706:	68fb      	ldr	r3, [r7, #12]
 8013708:	2200      	movs	r2, #0
 801370a:	639a      	str	r2, [r3, #56]	; 0x38
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	2200      	movs	r2, #0
 8013710:	63da      	str	r2, [r3, #60]	; 0x3c
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	2200      	movs	r2, #0
 8013716:	641a      	str	r2, [r3, #64]	; 0x40
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	2200      	movs	r2, #0
 801371c:	645a      	str	r2, [r3, #68]	; 0x44
 801371e:	68fb      	ldr	r3, [r7, #12]
 8013720:	2200      	movs	r2, #0
 8013722:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	2201      	movs	r2, #1
 801372a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801372e:	68fb      	ldr	r3, [r7, #12]
 8013730:	2200      	movs	r2, #0
 8013732:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	2200      	movs	r2, #0
 801373a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801373e:	68fb      	ldr	r3, [r7, #12]
 8013740:	2200      	movs	r2, #0
 8013742:	64da      	str	r2, [r3, #76]	; 0x4c
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	3350      	adds	r3, #80	; 0x50
 8013748:	4618      	mov	r0, r3
 801374a:	f7fa fec5 	bl	800e4d8 <_ZN8touchgfx4RectC1Ev>
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	2200      	movs	r2, #0
 8013752:	659a      	str	r2, [r3, #88]	; 0x58
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	2200      	movs	r2, #0
 8013758:	65da      	str	r2, [r3, #92]	; 0x5c
 801375a:	68fb      	ldr	r3, [r7, #12]
 801375c:	2200      	movs	r2, #0
 801375e:	661a      	str	r2, [r3, #96]	; 0x60
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2201      	movs	r2, #1
 8013764:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	2200      	movs	r2, #0
 801376c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	2200      	movs	r2, #0
 8013774:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	2201      	movs	r2, #1
 801377c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2200      	movs	r2, #0
 8013784:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	2200      	movs	r2, #0
 801378c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 8013790:	68fb      	ldr	r3, [r7, #12]
 8013792:	2200      	movs	r2, #0
 8013794:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	2200      	movs	r2, #0
 801379c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	2200      	movs	r2, #0
 80137a4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	2200      	movs	r2, #0
 80137ac:	671a      	str	r2, [r3, #112]	; 0x70
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	2200      	movs	r2, #0
 80137b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	2200      	movs	r2, #0
 80137ba:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80137be:	68fb      	ldr	r3, [r7, #12]
 80137c0:	2200      	movs	r2, #0
 80137c2:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80137c6:	68fb      	ldr	r3, [r7, #12]
 80137c8:	2201      	movs	r2, #1
 80137ca:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	2201      	movs	r2, #1
 80137d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 80137d6:	4a13      	ldr	r2, [pc, #76]	; (8013824 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 80137d8:	68fb      	ldr	r3, [r7, #12]
 80137da:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 80137dc:	4a12      	ldr	r2, [pc, #72]	; (8013828 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80137de:	8b3b      	ldrh	r3, [r7, #24]
 80137e0:	8013      	strh	r3, [r2, #0]
 80137e2:	4b11      	ldr	r3, [pc, #68]	; (8013828 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 80137e4:	881a      	ldrh	r2, [r3, #0]
 80137e6:	4b11      	ldr	r3, [pc, #68]	; (801382c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 80137e8:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 80137ea:	4a11      	ldr	r2, [pc, #68]	; (8013830 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80137ec:	8bbb      	ldrh	r3, [r7, #28]
 80137ee:	8013      	strh	r3, [r2, #0]
 80137f0:	4b0f      	ldr	r3, [pc, #60]	; (8013830 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 80137f2:	881a      	ldrh	r2, [r3, #0]
 80137f4:	4b0f      	ldr	r3, [pc, #60]	; (8013834 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 80137f6:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 80137f8:	4b0f      	ldr	r3, [pc, #60]	; (8013838 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 80137fa:	2200      	movs	r2, #0
 80137fc:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 80137fe:	8b3a      	ldrh	r2, [r7, #24]
 8013800:	8bbb      	ldrh	r3, [r7, #28]
 8013802:	429a      	cmp	r2, r3
 8013804:	bf34      	ite	cc
 8013806:	2301      	movcc	r3, #1
 8013808:	2300      	movcs	r3, #0
 801380a:	b2db      	uxtb	r3, r3
 801380c:	461a      	mov	r2, r3
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	4618      	mov	r0, r3
 8013818:	3710      	adds	r7, #16
 801381a:	46bd      	mov	sp, r7
 801381c:	bd80      	pop	{r7, pc}
 801381e:	bf00      	nop
 8013820:	0802f28c 	.word	0x0802f28c
 8013824:	2003bee0 	.word	0x2003bee0
 8013828:	2003bed4 	.word	0x2003bed4
 801382c:	2003beda 	.word	0x2003beda
 8013830:	2003bed6 	.word	0x2003bed6
 8013834:	2003bedc 	.word	0x2003bedc
 8013838:	2003bed8 	.word	0x2003bed8

0801383c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801383c:	b580      	push	{r7, lr}
 801383e:	b082      	sub	sp, #8
 8013840:	af00      	add	r7, sp, #0
 8013842:	6078      	str	r0, [r7, #4]
 8013844:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	4618      	mov	r0, r3
 801384a:	f7fa fbb3 	bl	800dfb4 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801384e:	bf00      	nop
 8013850:	3708      	adds	r7, #8
 8013852:	46bd      	mov	sp, r7
 8013854:	bd80      	pop	{r7, pc}
	...

08013858 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8013858:	b580      	push	{r7, lr}
 801385a:	b086      	sub	sp, #24
 801385c:	af02      	add	r7, sp, #8
 801385e:	60f8      	str	r0, [r7, #12]
 8013860:	60b9      	str	r1, [r7, #8]
 8013862:	607a      	str	r2, [r7, #4]
 8013864:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8013866:	68f8      	ldr	r0, [r7, #12]
 8013868:	69bb      	ldr	r3, [r7, #24]
 801386a:	9300      	str	r3, [sp, #0]
 801386c:	683b      	ldr	r3, [r7, #0]
 801386e:	687a      	ldr	r2, [r7, #4]
 8013870:	68b9      	ldr	r1, [r7, #8]
 8013872:	f7ff fe8d 	bl	8013590 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8013876:	4a04      	ldr	r2, [pc, #16]	; (8013888 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8013878:	68fb      	ldr	r3, [r7, #12]
 801387a:	601a      	str	r2, [r3, #0]
    {

    }
 801387c:	68fb      	ldr	r3, [r7, #12]
 801387e:	4618      	mov	r0, r3
 8013880:	3710      	adds	r7, #16
 8013882:	46bd      	mov	sp, r7
 8013884:	bd80      	pop	{r7, pc}
 8013886:	bf00      	nop
 8013888:	0802f044 	.word	0x0802f044

0801388c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 801388c:	b580      	push	{r7, lr}
 801388e:	af00      	add	r7, sp, #0
 8013890:	4801      	ldr	r0, [pc, #4]	; (8013898 <__tcf_0+0xc>)
 8013892:	f000 f95d 	bl	8013b50 <_ZN12FrontendHeapD1Ev>
 8013896:	bd80      	pop	{r7, pc}
 8013898:	20033698 	.word	0x20033698

0801389c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 801389c:	b580      	push	{r7, lr}
 801389e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80138a0:	4b12      	ldr	r3, [pc, #72]	; (80138ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80138a2:	781b      	ldrb	r3, [r3, #0]
 80138a4:	f3bf 8f5b 	dmb	ish
 80138a8:	b2db      	uxtb	r3, r3
 80138aa:	f003 0301 	and.w	r3, r3, #1
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	bf0c      	ite	eq
 80138b2:	2301      	moveq	r3, #1
 80138b4:	2300      	movne	r3, #0
 80138b6:	b2db      	uxtb	r3, r3
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d013      	beq.n	80138e4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80138bc:	480b      	ldr	r0, [pc, #44]	; (80138ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80138be:	f015 f9f7 	bl	8028cb0 <__cxa_guard_acquire>
 80138c2:	4603      	mov	r3, r0
 80138c4:	2b00      	cmp	r3, #0
 80138c6:	bf14      	ite	ne
 80138c8:	2301      	movne	r3, #1
 80138ca:	2300      	moveq	r3, #0
 80138cc:	b2db      	uxtb	r3, r3
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d008      	beq.n	80138e4 <_ZN12FrontendHeap11getInstanceEv+0x48>
 80138d2:	4807      	ldr	r0, [pc, #28]	; (80138f0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 80138d4:	f000 f868 	bl	80139a8 <_ZN12FrontendHeapC1Ev>
 80138d8:	4806      	ldr	r0, [pc, #24]	; (80138f4 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 80138da:	f015 fa33 	bl	8028d44 <atexit>
 80138de:	4803      	ldr	r0, [pc, #12]	; (80138ec <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80138e0:	f015 f9f2 	bl	8028cc8 <__cxa_guard_release>
        return instance;
 80138e4:	4b02      	ldr	r3, [pc, #8]	; (80138f0 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 80138e6:	4618      	mov	r0, r3
 80138e8:	bd80      	pop	{r7, pc}
 80138ea:	bf00      	nop
 80138ec:	20036fa0 	.word	0x20036fa0
 80138f0:	20033698 	.word	0x20033698
 80138f4:	0801388d 	.word	0x0801388d

080138f8 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b082      	sub	sp, #8
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
 8013900:	4a05      	ldr	r2, [pc, #20]	; (8013918 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	601a      	str	r2, [r3, #0]
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	4618      	mov	r0, r3
 801390a:	f7ff fe61 	bl	80135d0 <_ZN8touchgfx7MVPHeapD1Ev>
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	4618      	mov	r0, r3
 8013912:	3708      	adds	r7, #8
 8013914:	46bd      	mov	sp, r7
 8013916:	bd80      	pop	{r7, pc}
 8013918:	0802f044 	.word	0x0802f044

0801391c <_ZN16FrontendHeapBaseD0Ev>:
 801391c:	b580      	push	{r7, lr}
 801391e:	b082      	sub	sp, #8
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f7ff ffe7 	bl	80138f8 <_ZN16FrontendHeapBaseD1Ev>
 801392a:	2114      	movs	r1, #20
 801392c:	6878      	ldr	r0, [r7, #4]
 801392e:	f015 f9bd 	bl	8028cac <_ZdlPvj>
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	4618      	mov	r0, r3
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}

0801393c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af00      	add	r7, sp, #0
 8013942:	6078      	str	r0, [r7, #4]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	4618      	mov	r0, r3
 8013948:	f001 fc94 	bl	8015274 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801394c:	4a03      	ldr	r2, [pc, #12]	; (801395c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	601a      	str	r2, [r3, #0]
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	4618      	mov	r0, r3
 8013956:	3708      	adds	r7, #8
 8013958:	46bd      	mov	sp, r7
 801395a:	bd80      	pop	{r7, pc}
 801395c:	0802f010 	.word	0x0802f010

08013960 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	4618      	mov	r0, r3
 801396c:	f001 fc82 	bl	8015274 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013970:	4a03      	ldr	r2, [pc, #12]	; (8013980 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	601a      	str	r2, [r3, #0]
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	4618      	mov	r0, r3
 801397a:	3708      	adds	r7, #8
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}
 8013980:	0802efdc 	.word	0x0802efdc

08013984 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8013984:	b580      	push	{r7, lr}
 8013986:	b082      	sub	sp, #8
 8013988:	af00      	add	r7, sp, #0
 801398a:	6078      	str	r0, [r7, #4]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	4618      	mov	r0, r3
 8013990:	f001 fc70 	bl	8015274 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8013994:	4a03      	ldr	r2, [pc, #12]	; (80139a4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	601a      	str	r2, [r3, #0]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	4618      	mov	r0, r3
 801399e:	3708      	adds	r7, #8
 80139a0:	46bd      	mov	sp, r7
 80139a2:	bd80      	pop	{r7, pc}
 80139a4:	0802efa8 	.word	0x0802efa8

080139a8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80139a8:	b5b0      	push	{r4, r5, r7, lr}
 80139aa:	b084      	sub	sp, #16
 80139ac:	af02      	add	r7, sp, #8
 80139ae:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80139b0:	6878      	ldr	r0, [r7, #4]
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	f103 0414 	add.w	r4, r3, #20
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f243 7298 	movw	r2, #14232	; 0x3798
 80139c4:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80139c6:	6879      	ldr	r1, [r7, #4]
 80139c8:	f243 73b0 	movw	r3, #14256	; 0x37b0
 80139cc:	440b      	add	r3, r1
                     app(model, *this)
 80139ce:	9300      	str	r3, [sp, #0]
 80139d0:	4613      	mov	r3, r2
 80139d2:	462a      	mov	r2, r5
 80139d4:	4621      	mov	r1, r4
 80139d6:	f7ff ff3f 	bl	8013858 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80139da:	4a1a      	ldr	r2, [pc, #104]	; (8013a44 <_ZN12FrontendHeapC1Ev+0x9c>)
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	601a      	str	r2, [r3, #0]
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	3314      	adds	r3, #20
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7ff ffa9 	bl	801393c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	332c      	adds	r3, #44	; 0x2c
 80139ee:	4618      	mov	r0, r3
 80139f0:	f7ff ffb6 	bl	8013960 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	f243 7398 	movw	r3, #14232	; 0x3798
 80139fa:	4413      	add	r3, r2
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7ff ffc1 	bl	8013984 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8013a02:	687a      	ldr	r2, [r7, #4]
 8013a04:	f243 73ac 	movw	r3, #14252	; 0x37ac
 8013a08:	4413      	add	r3, r2
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	f7fd fd9e 	bl	801154c <_ZN5ModelC1Ev>
 8013a10:	687a      	ldr	r2, [r7, #4]
 8013a12:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8013a16:	4413      	add	r3, r2
 8013a18:	687a      	ldr	r2, [r7, #4]
 8013a1a:	f243 71ac 	movw	r1, #14252	; 0x37ac
 8013a1e:	4411      	add	r1, r2
 8013a20:	687a      	ldr	r2, [r7, #4]
 8013a22:	4618      	mov	r0, r3
 8013a24:	f7fd fc12 	bl	801124c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8013a28:	6878      	ldr	r0, [r7, #4]
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8013a30:	4413      	add	r3, r2
 8013a32:	4619      	mov	r1, r3
 8013a34:	f7ff ff02 	bl	801383c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	3708      	adds	r7, #8
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	bdb0      	pop	{r4, r5, r7, pc}
 8013a42:	bf00      	nop
 8013a44:	0802ef94 	.word	0x0802ef94

08013a48 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8013a48:	b580      	push	{r7, lr}
 8013a4a:	b086      	sub	sp, #24
 8013a4c:	af02      	add	r7, sp, #8
 8013a4e:	60f8      	str	r0, [r7, #12]
 8013a50:	60b9      	str	r1, [r7, #8]
 8013a52:	607a      	str	r2, [r7, #4]
 8013a54:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8013a56:	68f8      	ldr	r0, [r7, #12]
 8013a58:	8bbb      	ldrh	r3, [r7, #28]
 8013a5a:	9301      	str	r3, [sp, #4]
 8013a5c:	8b3b      	ldrh	r3, [r7, #24]
 8013a5e:	9300      	str	r3, [sp, #0]
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	687a      	ldr	r2, [r7, #4]
 8013a64:	68b9      	ldr	r1, [r7, #8]
 8013a66:	f7ff fe29 	bl	80136bc <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8013a6a:	4a04      	ldr	r2, [pc, #16]	; (8013a7c <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	601a      	str	r2, [r3, #0]
    }
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	4618      	mov	r0, r3
 8013a74:	3710      	adds	r7, #16
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	0802f0e4 	.word	0x0802f0e4

08013a80 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8013a80:	b580      	push	{r7, lr}
 8013a82:	b086      	sub	sp, #24
 8013a84:	af02      	add	r7, sp, #8
 8013a86:	60f8      	str	r0, [r7, #12]
 8013a88:	60b9      	str	r1, [r7, #8]
 8013a8a:	607a      	str	r2, [r7, #4]
 8013a8c:	603b      	str	r3, [r7, #0]
 8013a8e:	68f8      	ldr	r0, [r7, #12]
 8013a90:	8bbb      	ldrh	r3, [r7, #28]
 8013a92:	9301      	str	r3, [sp, #4]
 8013a94:	8b3b      	ldrh	r3, [r7, #24]
 8013a96:	9300      	str	r3, [sp, #0]
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	687a      	ldr	r2, [r7, #4]
 8013a9c:	68b9      	ldr	r1, [r7, #8]
 8013a9e:	f7ff ffd3 	bl	8013a48 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013aa2:	4a04      	ldr	r2, [pc, #16]	; (8013ab4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	601a      	str	r2, [r3, #0]
    }
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3710      	adds	r7, #16
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	0802edc4 	.word	0x0802edc4

08013ab8 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8013ab8:	b480      	push	{r7}
 8013aba:	b083      	sub	sp, #12
 8013abc:	af00      	add	r7, sp, #0
 8013abe:	6078      	str	r0, [r7, #4]
 8013ac0:	4a04      	ldr	r2, [pc, #16]	; (8013ad4 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	601a      	str	r2, [r3, #0]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	4618      	mov	r0, r3
 8013aca:	370c      	adds	r7, #12
 8013acc:	46bd      	mov	sp, r7
 8013ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad2:	4770      	bx	lr
 8013ad4:	0802edac 	.word	0x0802edac

08013ad8 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8013ad8:	b580      	push	{r7, lr}
 8013ada:	b082      	sub	sp, #8
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7ff ffe8 	bl	8013ab8 <_ZN8touchgfx15TouchControllerC1Ev>
 8013ae8:	4a03      	ldr	r2, [pc, #12]	; (8013af8 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	601a      	str	r2, [r3, #0]
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	4618      	mov	r0, r3
 8013af2:	3708      	adds	r7, #8
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	0802ed94 	.word	0x0802ed94

08013afc <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8013afc:	b590      	push	{r4, r7, lr}
 8013afe:	b085      	sub	sp, #20
 8013b00:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8013b02:	f7fd f959 	bl	8010db8 <_ZN14BitmapDatabase11getInstanceEv>
 8013b06:	4604      	mov	r4, r0
 8013b08:	f7fd f960 	bl	8010dcc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	4619      	mov	r1, r3
 8013b10:	2300      	movs	r3, #0
 8013b12:	9300      	str	r3, [sp, #0]
 8013b14:	2300      	movs	r3, #0
 8013b16:	2200      	movs	r2, #0
 8013b18:	4620      	mov	r0, r4
 8013b1a:	f009 fb85 	bl	801d228 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8013b1e:	4809      	ldr	r0, [pc, #36]	; (8013b44 <touchgfx_init+0x48>)
 8013b20:	f7ff fd26 	bl	8013570 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8013b24:	2000      	movs	r0, #0
 8013b26:	f7fd fa95 	bl	8011054 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8013b2a:	4807      	ldr	r0, [pc, #28]	; (8013b48 <touchgfx_init+0x4c>)
 8013b2c:	f009 fa34 	bl	801cf98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8013b30:	f7ff feb4 	bl	801389c <_ZN12FrontendHeap11getInstanceEv>
 8013b34:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8013b36:	4805      	ldr	r0, [pc, #20]	; (8013b4c <touchgfx_init+0x50>)
 8013b38:	f7fd ff58 	bl	80119ec <_ZN11TouchGFXHAL10initializeEv>
}
 8013b3c:	bf00      	nop
 8013b3e:	370c      	adds	r7, #12
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bd90      	pop	{r4, r7, pc}
 8013b44:	20037dc0 	.word	0x20037dc0
 8013b48:	20000034 	.word	0x20000034
 8013b4c:	20037dc4 	.word	0x20037dc4

08013b50 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	4a11      	ldr	r2, [pc, #68]	; (8013ba0 <_ZN12FrontendHeapD1Ev+0x50>)
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	601a      	str	r2, [r3, #0]
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8013b64:	4413      	add	r3, r2
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7fd fb3a 	bl	80111e0 <_ZN19FrontendApplicationD1Ev>
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	f243 7398 	movw	r3, #14232	; 0x3798
 8013b72:	4413      	add	r3, r2
 8013b74:	4618      	mov	r0, r3
 8013b76:	f000 f827 	bl	8013bc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	332c      	adds	r3, #44	; 0x2c
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f000 f844 	bl	8013c0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	3314      	adds	r3, #20
 8013b88:	4618      	mov	r0, r3
 8013b8a:	f000 f863 	bl	8013c54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	4618      	mov	r0, r3
 8013b92:	f7ff feb1 	bl	80138f8 <_ZN16FrontendHeapBaseD1Ev>
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3708      	adds	r7, #8
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	0802ef94 	.word	0x0802ef94

08013ba4 <_ZN12FrontendHeapD0Ev>:
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b082      	sub	sp, #8
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	6878      	ldr	r0, [r7, #4]
 8013bae:	f7ff ffcf 	bl	8013b50 <_ZN12FrontendHeapD1Ev>
 8013bb2:	f643 1108 	movw	r1, #14600	; 0x3908
 8013bb6:	6878      	ldr	r0, [r7, #4]
 8013bb8:	f015 f878 	bl	8028cac <_ZdlPvj>
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	3708      	adds	r7, #8
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
	...

08013bc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b082      	sub	sp, #8
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	4a05      	ldr	r2, [pc, #20]	; (8013be8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	601a      	str	r2, [r3, #0]
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	4618      	mov	r0, r3
 8013bda:	f001 fb4a 	bl	8015272 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	4618      	mov	r0, r3
 8013be2:	3708      	adds	r7, #8
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	0802efa8 	.word	0x0802efa8

08013bec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b082      	sub	sp, #8
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f7ff ffe7 	bl	8013bc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013bfa:	2114      	movs	r1, #20
 8013bfc:	6878      	ldr	r0, [r7, #4]
 8013bfe:	f015 f855 	bl	8028cac <_ZdlPvj>
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	4618      	mov	r0, r3
 8013c06:	3708      	adds	r7, #8
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
 8013c14:	4a05      	ldr	r2, [pc, #20]	; (8013c2c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	601a      	str	r2, [r3, #0]
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	f001 fb28 	bl	8015272 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	4618      	mov	r0, r3
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	0802efdc 	.word	0x0802efdc

08013c30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	6078      	str	r0, [r7, #4]
 8013c38:	6878      	ldr	r0, [r7, #4]
 8013c3a:	f7ff ffe7 	bl	8013c0c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013c3e:	f243 716c 	movw	r1, #14188	; 0x376c
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f015 f832 	bl	8028cac <_ZdlPvj>
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	4618      	mov	r0, r3
 8013c4c:	3708      	adds	r7, #8
 8013c4e:	46bd      	mov	sp, r7
 8013c50:	bd80      	pop	{r7, pc}
	...

08013c54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8013c54:	b580      	push	{r7, lr}
 8013c56:	b082      	sub	sp, #8
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
 8013c5c:	4a05      	ldr	r2, [pc, #20]	; (8013c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	601a      	str	r2, [r3, #0]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	4618      	mov	r0, r3
 8013c66:	f001 fb04 	bl	8015272 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3708      	adds	r7, #8
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}
 8013c74:	0802f010 	.word	0x0802f010

08013c78 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8013c78:	b580      	push	{r7, lr}
 8013c7a:	b082      	sub	sp, #8
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
 8013c80:	6878      	ldr	r0, [r7, #4]
 8013c82:	f7ff ffe7 	bl	8013c54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8013c86:	2118      	movs	r1, #24
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f015 f80f 	bl	8028cac <_ZdlPvj>
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	4618      	mov	r0, r3
 8013c92:	3708      	adds	r7, #8
 8013c94:	46bd      	mov	sp, r7
 8013c96:	bd80      	pop	{r7, pc}

08013c98 <_ZN8touchgfx8LCD32bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD32bpp : public LCD
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
 8013ca0:	4a05      	ldr	r2, [pc, #20]	; (8013cb8 <_ZN8touchgfx8LCD32bppD1Ev+0x20>)
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	601a      	str	r2, [r3, #0]
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f7ff fcb1 	bl	8013610 <_ZN8touchgfx3LCDD1Ev>
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3708      	adds	r7, #8
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}
 8013cb8:	0802fc28 	.word	0x0802fc28

08013cbc <_ZN8touchgfx8LCD32bppD0Ev>:
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b082      	sub	sp, #8
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f7ff ffe7 	bl	8013c98 <_ZN8touchgfx8LCD32bppD1Ev>
 8013cca:	2178      	movs	r1, #120	; 0x78
 8013ccc:	6878      	ldr	r0, [r7, #4]
 8013cce:	f014 ffed 	bl	8028cac <_ZdlPvj>
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	3708      	adds	r7, #8
 8013cd8:	46bd      	mov	sp, r7
 8013cda:	bd80      	pop	{r7, pc}

08013cdc <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b084      	sub	sp, #16
 8013ce0:	af02      	add	r7, sp, #8
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	6039      	str	r1, [r7, #0]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2b01      	cmp	r3, #1
 8013cea:	d119      	bne.n	8013d20 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8013cec:	683b      	ldr	r3, [r7, #0]
 8013cee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013cf2:	4293      	cmp	r3, r2
 8013cf4:	d114      	bne.n	8013d20 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8013cf6:	4818      	ldr	r0, [pc, #96]	; (8013d58 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013cf8:	f7ff feee 	bl	8013ad8 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8013cfc:	4817      	ldr	r0, [pc, #92]	; (8013d5c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013cfe:	f7ff f8a1 	bl	8012e44 <_ZN8STM32DMAC1Ev>
static LCD32bpp display;
 8013d02:	4817      	ldr	r0, [pc, #92]	; (8013d60 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013d04:	f00c fb56 	bl	80203b4 <_ZN8touchgfx8LCD32bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8013d08:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8013d0c:	9301      	str	r3, [sp, #4]
 8013d0e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8013d12:	9300      	str	r3, [sp, #0]
 8013d14:	4b10      	ldr	r3, [pc, #64]	; (8013d58 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013d16:	4a12      	ldr	r2, [pc, #72]	; (8013d60 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013d18:	4910      	ldr	r1, [pc, #64]	; (8013d5c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013d1a:	4812      	ldr	r0, [pc, #72]	; (8013d64 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013d1c:	f7ff feb0 	bl	8013a80 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d113      	bne.n	8013d4e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013d26:	683b      	ldr	r3, [r7, #0]
 8013d28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d2c:	4293      	cmp	r3, r2
 8013d2e:	d10e      	bne.n	8013d4e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8013d30:	480c      	ldr	r0, [pc, #48]	; (8013d64 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8013d32:	f7fd feeb 	bl	8011b0c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8013d36:	480c      	ldr	r0, [pc, #48]	; (8013d68 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8013d38:	f7f9 fa14 	bl	800d164 <_ZN23ApplicationFontProviderD1Ev>
static LCD32bpp display;
 8013d3c:	4808      	ldr	r0, [pc, #32]	; (8013d60 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8013d3e:	f7ff ffab 	bl	8013c98 <_ZN8touchgfx8LCD32bppD1Ev>
static STM32DMA dma;
 8013d42:	4806      	ldr	r0, [pc, #24]	; (8013d5c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8013d44:	f7ff f8a8 	bl	8012e98 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8013d48:	4803      	ldr	r0, [pc, #12]	; (8013d58 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8013d4a:	f7fd fc4f 	bl	80115ec <_ZN20STM32TouchControllerD1Ev>
}
 8013d4e:	bf00      	nop
 8013d50:	3708      	adds	r7, #8
 8013d52:	46bd      	mov	sp, r7
 8013d54:	bd80      	pop	{r7, pc}
 8013d56:	bf00      	nop
 8013d58:	20036fa4 	.word	0x20036fa4
 8013d5c:	20036fa8 	.word	0x20036fa8
 8013d60:	20037d48 	.word	0x20037d48
 8013d64:	20037dc4 	.word	0x20037dc4
 8013d68:	20000034 	.word	0x20000034

08013d6c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8013d6c:	b480      	push	{r7}
 8013d6e:	b083      	sub	sp, #12
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8013d74:	2301      	movs	r3, #1
    }
 8013d76:	4618      	mov	r0, r3
 8013d78:	370c      	adds	r7, #12
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d80:	4770      	bx	lr

08013d82 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8013d82:	b480      	push	{r7}
 8013d84:	b083      	sub	sp, #12
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8013d8a:	230c      	movs	r3, #12
    }
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	370c      	adds	r7, #12
 8013d90:	46bd      	mov	sp, r7
 8013d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d96:	4770      	bx	lr

08013d98 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8013d98:	b480      	push	{r7}
 8013d9a:	b083      	sub	sp, #12
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	460b      	mov	r3, r1
 8013da2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013da4:	887a      	ldrh	r2, [r7, #2]
 8013da6:	4613      	mov	r3, r2
 8013da8:	005b      	lsls	r3, r3, #1
 8013daa:	4413      	add	r3, r2
 8013dac:	009b      	lsls	r3, r3, #2
 8013dae:	3308      	adds	r3, #8
 8013db0:	687a      	ldr	r2, [r7, #4]
 8013db2:	4413      	add	r3, r2
    }
 8013db4:	4618      	mov	r0, r3
 8013db6:	370c      	adds	r7, #12
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr

08013dc0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8013dc0:	b480      	push	{r7}
 8013dc2:	b083      	sub	sp, #12
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	460b      	mov	r3, r1
 8013dca:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8013dcc:	887a      	ldrh	r2, [r7, #2]
 8013dce:	4613      	mov	r3, r2
 8013dd0:	005b      	lsls	r3, r3, #1
 8013dd2:	4413      	add	r3, r2
 8013dd4:	009b      	lsls	r3, r3, #2
 8013dd6:	3308      	adds	r3, #8
 8013dd8:	687a      	ldr	r2, [r7, #4]
 8013dda:	4413      	add	r3, r2
    }
 8013ddc:	4618      	mov	r0, r3
 8013dde:	370c      	adds	r7, #12
 8013de0:	46bd      	mov	sp, r7
 8013de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013de6:	4770      	bx	lr

08013de8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013de8:	b480      	push	{r7}
 8013dea:	b083      	sub	sp, #12
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013df0:	2301      	movs	r3, #1
    }
 8013df2:	4618      	mov	r0, r3
 8013df4:	370c      	adds	r7, #12
 8013df6:	46bd      	mov	sp, r7
 8013df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dfc:	4770      	bx	lr

08013dfe <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013dfe:	b480      	push	{r7}
 8013e00:	b083      	sub	sp, #12
 8013e02:	af00      	add	r7, sp, #0
 8013e04:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013e06:	f243 7364 	movw	r3, #14180	; 0x3764
    }
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	370c      	adds	r7, #12
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e14:	4770      	bx	lr

08013e16 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013e16:	b480      	push	{r7}
 8013e18:	b083      	sub	sp, #12
 8013e1a:	af00      	add	r7, sp, #0
 8013e1c:	6078      	str	r0, [r7, #4]
 8013e1e:	460b      	mov	r3, r1
 8013e20:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013e22:	887b      	ldrh	r3, [r7, #2]
 8013e24:	f243 7264 	movw	r2, #14180	; 0x3764
 8013e28:	fb02 f303 	mul.w	r3, r2, r3
 8013e2c:	3308      	adds	r3, #8
 8013e2e:	687a      	ldr	r2, [r7, #4]
 8013e30:	4413      	add	r3, r2
    }
 8013e32:	4618      	mov	r0, r3
 8013e34:	370c      	adds	r7, #12
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr

08013e3e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013e3e:	b480      	push	{r7}
 8013e40:	b083      	sub	sp, #12
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	6078      	str	r0, [r7, #4]
 8013e46:	460b      	mov	r3, r1
 8013e48:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013e4a:	887b      	ldrh	r3, [r7, #2]
 8013e4c:	f243 7264 	movw	r2, #14180	; 0x3764
 8013e50:	fb02 f303 	mul.w	r3, r2, r3
 8013e54:	3308      	adds	r3, #8
 8013e56:	687a      	ldr	r2, [r7, #4]
 8013e58:	4413      	add	r3, r2
    }
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	370c      	adds	r7, #12
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e64:	4770      	bx	lr

08013e66 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8013e66:	b480      	push	{r7}
 8013e68:	b083      	sub	sp, #12
 8013e6a:	af00      	add	r7, sp, #0
 8013e6c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8013e6e:	2301      	movs	r3, #1
    }
 8013e70:	4618      	mov	r0, r3
 8013e72:	370c      	adds	r7, #12
 8013e74:	46bd      	mov	sp, r7
 8013e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e7a:	4770      	bx	lr

08013e7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8013e7c:	b480      	push	{r7}
 8013e7e:	b083      	sub	sp, #12
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8013e84:	2310      	movs	r3, #16
    }
 8013e86:	4618      	mov	r0, r3
 8013e88:	370c      	adds	r7, #12
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e90:	4770      	bx	lr

08013e92 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8013e92:	b480      	push	{r7}
 8013e94:	b083      	sub	sp, #12
 8013e96:	af00      	add	r7, sp, #0
 8013e98:	6078      	str	r0, [r7, #4]
 8013e9a:	460b      	mov	r3, r1
 8013e9c:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013e9e:	887b      	ldrh	r3, [r7, #2]
 8013ea0:	011b      	lsls	r3, r3, #4
 8013ea2:	3308      	adds	r3, #8
 8013ea4:	687a      	ldr	r2, [r7, #4]
 8013ea6:	4413      	add	r3, r2
    }
 8013ea8:	4618      	mov	r0, r3
 8013eaa:	370c      	adds	r7, #12
 8013eac:	46bd      	mov	sp, r7
 8013eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb2:	4770      	bx	lr

08013eb4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8013eb4:	b480      	push	{r7}
 8013eb6:	b083      	sub	sp, #12
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
 8013ebc:	460b      	mov	r3, r1
 8013ebe:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8013ec0:	887b      	ldrh	r3, [r7, #2]
 8013ec2:	011b      	lsls	r3, r3, #4
 8013ec4:	3308      	adds	r3, #8
 8013ec6:	687a      	ldr	r2, [r7, #4]
 8013ec8:	4413      	add	r3, r2
    }
 8013eca:	4618      	mov	r0, r3
 8013ecc:	370c      	adds	r7, #12
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed4:	4770      	bx	lr

08013ed6 <_GLOBAL__sub_I_touchgfx_init>:
 8013ed6:	b580      	push	{r7, lr}
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013ede:	2001      	movs	r0, #1
 8013ee0:	f7ff fefc 	bl	8013cdc <_Z41__static_initialization_and_destruction_0ii>
 8013ee4:	bd80      	pop	{r7, pc}

08013ee6 <_GLOBAL__sub_D_touchgfx_init>:
 8013ee6:	b580      	push	{r7, lr}
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8013eee:	2000      	movs	r0, #0
 8013ef0:	f7ff fef4 	bl	8013cdc <_Z41__static_initialization_and_destruction_0ii>
 8013ef4:	bd80      	pop	{r7, pc}

08013ef6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8013ef6:	b580      	push	{r7, lr}
 8013ef8:	b082      	sub	sp, #8
 8013efa:	af00      	add	r7, sp, #0
 8013efc:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	3320      	adds	r3, #32
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	6878      	ldr	r0, [r7, #4]
 8013f08:	4798      	blx	r3
    }
 8013f0a:	bf00      	nop
 8013f0c:	3708      	adds	r7, #8
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	bd80      	pop	{r7, pc}

08013f12 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8013f12:	b480      	push	{r7}
 8013f14:	b083      	sub	sp, #12
 8013f16:	af00      	add	r7, sp, #0
 8013f18:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8013f20:	4618      	mov	r0, r3
 8013f22:	370c      	adds	r7, #12
 8013f24:	46bd      	mov	sp, r7
 8013f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f2a:	4770      	bx	lr

08013f2c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8013f2c:	b480      	push	{r7}
 8013f2e:	b083      	sub	sp, #12
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8013f3a:	3301      	adds	r3, #1
 8013f3c:	b2da      	uxtb	r2, r3
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8013f44:	bf00      	nop
 8013f46:	370c      	adds	r7, #12
 8013f48:	46bd      	mov	sp, r7
 8013f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4e:	4770      	bx	lr

08013f50 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
 8013f58:	460b      	mov	r3, r1
 8013f5a:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8013f5c:	78fb      	ldrb	r3, [r7, #3]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d002      	beq.n	8013f68 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8013f62:	78fb      	ldrb	r3, [r7, #3]
 8013f64:	2b02      	cmp	r3, #2
 8013f66:	d105      	bne.n	8013f74 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	78fa      	ldrb	r2, [r7, #3]
 8013f6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8013f70:	2301      	movs	r3, #1
 8013f72:	e027      	b.n	8013fc4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8013f74:	78fb      	ldrb	r3, [r7, #3]
 8013f76:	2b01      	cmp	r3, #1
 8013f78:	d123      	bne.n	8013fc2 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d014      	beq.n	8013fac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	681b      	ldr	r3, [r3, #0]
 8013f86:	339c      	adds	r3, #156	; 0x9c
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	6878      	ldr	r0, [r7, #4]
 8013f8c:	4798      	blx	r3
 8013f8e:	4603      	mov	r3, r0
 8013f90:	461a      	mov	r2, r3
 8013f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d008      	beq.n	8013fac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013f9a:	4b0c      	ldr	r3, [pc, #48]	; (8013fcc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	f083 0301 	eor.w	r3, r3, #1
 8013fa2:	b2db      	uxtb	r3, r3
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d001      	beq.n	8013fac <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8013fa8:	2301      	movs	r3, #1
 8013faa:	e000      	b.n	8013fae <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8013fac:	2300      	movs	r3, #0
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d005      	beq.n	8013fbe <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	78fa      	ldrb	r2, [r7, #3]
 8013fb6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8013fba:	2301      	movs	r3, #1
 8013fbc:	e002      	b.n	8013fc4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	e000      	b.n	8013fc4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8013fc2:	2300      	movs	r3, #0
    }
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	3708      	adds	r7, #8
 8013fc8:	46bd      	mov	sp, r7
 8013fca:	bd80      	pop	{r7, pc}
 8013fcc:	2003bede 	.word	0x2003bede

08013fd0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8013fd0:	b480      	push	{r7}
 8013fd2:	b083      	sub	sp, #12
 8013fd4:	af00      	add	r7, sp, #0
 8013fd6:	6078      	str	r0, [r7, #4]
 8013fd8:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	683a      	ldr	r2, [r7, #0]
 8013fde:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8013fe0:	bf00      	nop
 8013fe2:	370c      	adds	r7, #12
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fea:	4770      	bx	lr

08013fec <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 8013fec:	b480      	push	{r7}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
    {
 8013ff4:	4a04      	ldr	r2, [pc, #16]	; (8014008 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	601a      	str	r2, [r3, #0]
    }
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	370c      	adds	r7, #12
 8014000:	46bd      	mov	sp, r7
 8014002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014006:	4770      	bx	lr
 8014008:	0802f0a8 	.word	0x0802f0a8

0801400c <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 801400c:	b580      	push	{r7, lr}
 801400e:	b082      	sub	sp, #8
 8014010:	af00      	add	r7, sp, #0
 8014012:	6078      	str	r0, [r7, #4]
    }
 8014014:	6878      	ldr	r0, [r7, #4]
 8014016:	f7ff ffe9 	bl	8013fec <_ZN8touchgfx15VideoControllerD1Ev>
 801401a:	2104      	movs	r1, #4
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f014 fe45 	bl	8028cac <_ZdlPvj>
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	4618      	mov	r0, r3
 8014026:	3708      	adds	r7, #8
 8014028:	46bd      	mov	sp, r7
 801402a:	bd80      	pop	{r7, pc}

0801402c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 801402c:	b480      	push	{r7}
 801402e:	b083      	sub	sp, #12
 8014030:	af00      	add	r7, sp, #0
 8014032:	6078      	str	r0, [r7, #4]
 8014034:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	683a      	ldr	r2, [r7, #0]
 801403a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801403c:	bf00      	nop
 801403e:	370c      	adds	r7, #12
 8014040:	46bd      	mov	sp, r7
 8014042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014046:	4770      	bx	lr

08014048 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8014048:	b480      	push	{r7}
 801404a:	b085      	sub	sp, #20
 801404c:	af00      	add	r7, sp, #0
 801404e:	60f8      	str	r0, [r7, #12]
 8014050:	4608      	mov	r0, r1
 8014052:	4611      	mov	r1, r2
 8014054:	461a      	mov	r2, r3
 8014056:	4603      	mov	r3, r0
 8014058:	72fb      	strb	r3, [r7, #11]
 801405a:	460b      	mov	r3, r1
 801405c:	813b      	strh	r3, [r7, #8]
 801405e:	4613      	mov	r3, r2
 8014060:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 8014062:	68fb      	ldr	r3, [r7, #12]
 8014064:	7afa      	ldrb	r2, [r7, #11]
 8014066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	893a      	ldrh	r2, [r7, #8]
 801406e:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8014070:	68fb      	ldr	r3, [r7, #12]
 8014072:	88fa      	ldrh	r2, [r7, #6]
 8014074:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8014076:	bf00      	nop
 8014078:	3714      	adds	r7, #20
 801407a:	46bd      	mov	sp, r7
 801407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014080:	4770      	bx	lr
	...

08014084 <__NVIC_EnableIRQ>:
{
 8014084:	b480      	push	{r7}
 8014086:	b083      	sub	sp, #12
 8014088:	af00      	add	r7, sp, #0
 801408a:	4603      	mov	r3, r0
 801408c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014092:	2b00      	cmp	r3, #0
 8014094:	db0b      	blt.n	80140ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014096:	79fb      	ldrb	r3, [r7, #7]
 8014098:	f003 021f 	and.w	r2, r3, #31
 801409c:	4907      	ldr	r1, [pc, #28]	; (80140bc <__NVIC_EnableIRQ+0x38>)
 801409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140a2:	095b      	lsrs	r3, r3, #5
 80140a4:	2001      	movs	r0, #1
 80140a6:	fa00 f202 	lsl.w	r2, r0, r2
 80140aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80140ae:	bf00      	nop
 80140b0:	370c      	adds	r7, #12
 80140b2:	46bd      	mov	sp, r7
 80140b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b8:	4770      	bx	lr
 80140ba:	bf00      	nop
 80140bc:	e000e100 	.word	0xe000e100

080140c0 <__NVIC_DisableIRQ>:
{
 80140c0:	b480      	push	{r7}
 80140c2:	b083      	sub	sp, #12
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	4603      	mov	r3, r0
 80140c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80140ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140ce:	2b00      	cmp	r3, #0
 80140d0:	db12      	blt.n	80140f8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80140d2:	79fb      	ldrb	r3, [r7, #7]
 80140d4:	f003 021f 	and.w	r2, r3, #31
 80140d8:	490a      	ldr	r1, [pc, #40]	; (8014104 <__NVIC_DisableIRQ+0x44>)
 80140da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80140de:	095b      	lsrs	r3, r3, #5
 80140e0:	2001      	movs	r0, #1
 80140e2:	fa00 f202 	lsl.w	r2, r0, r2
 80140e6:	3320      	adds	r3, #32
 80140e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80140ec:	f3bf 8f4f 	dsb	sy
}
 80140f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80140f2:	f3bf 8f6f 	isb	sy
}
 80140f6:	bf00      	nop
}
 80140f8:	bf00      	nop
 80140fa:	370c      	adds	r7, #12
 80140fc:	46bd      	mov	sp, r7
 80140fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014102:	4770      	bx	lr
 8014104:	e000e100 	.word	0xe000e100

08014108 <__NVIC_SetPriority>:
{
 8014108:	b480      	push	{r7}
 801410a:	b083      	sub	sp, #12
 801410c:	af00      	add	r7, sp, #0
 801410e:	4603      	mov	r3, r0
 8014110:	6039      	str	r1, [r7, #0]
 8014112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014118:	2b00      	cmp	r3, #0
 801411a:	db0a      	blt.n	8014132 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801411c:	683b      	ldr	r3, [r7, #0]
 801411e:	b2da      	uxtb	r2, r3
 8014120:	490c      	ldr	r1, [pc, #48]	; (8014154 <__NVIC_SetPriority+0x4c>)
 8014122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014126:	0112      	lsls	r2, r2, #4
 8014128:	b2d2      	uxtb	r2, r2
 801412a:	440b      	add	r3, r1
 801412c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8014130:	e00a      	b.n	8014148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014132:	683b      	ldr	r3, [r7, #0]
 8014134:	b2da      	uxtb	r2, r3
 8014136:	4908      	ldr	r1, [pc, #32]	; (8014158 <__NVIC_SetPriority+0x50>)
 8014138:	79fb      	ldrb	r3, [r7, #7]
 801413a:	f003 030f 	and.w	r3, r3, #15
 801413e:	3b04      	subs	r3, #4
 8014140:	0112      	lsls	r2, r2, #4
 8014142:	b2d2      	uxtb	r2, r2
 8014144:	440b      	add	r3, r1
 8014146:	761a      	strb	r2, [r3, #24]
}
 8014148:	bf00      	nop
 801414a:	370c      	adds	r7, #12
 801414c:	46bd      	mov	sp, r7
 801414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014152:	4770      	bx	lr
 8014154:	e000e100 	.word	0xe000e100
 8014158:	e000ed00 	.word	0xe000ed00

0801415c <SCB_CleanInvalidateDCache>:
{
 801415c:	b480      	push	{r7}
 801415e:	b085      	sub	sp, #20
 8014160:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8014162:	4b21      	ldr	r3, [pc, #132]	; (80141e8 <SCB_CleanInvalidateDCache+0x8c>)
 8014164:	2200      	movs	r2, #0
 8014166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801416a:	f3bf 8f4f 	dsb	sy
}
 801416e:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8014170:	4b1d      	ldr	r3, [pc, #116]	; (80141e8 <SCB_CleanInvalidateDCache+0x8c>)
 8014172:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014176:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	0b5b      	lsrs	r3, r3, #13
 801417c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8014180:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8014182:	687b      	ldr	r3, [r7, #4]
 8014184:	08db      	lsrs	r3, r3, #3
 8014186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801418a:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	015a      	lsls	r2, r3, #5
 8014190:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8014194:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8014196:	68ba      	ldr	r2, [r7, #8]
 8014198:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 801419a:	4913      	ldr	r1, [pc, #76]	; (80141e8 <SCB_CleanInvalidateDCache+0x8c>)
 801419c:	4313      	orrs	r3, r2
 801419e:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	1e5a      	subs	r2, r3, #1
 80141a6:	60ba      	str	r2, [r7, #8]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	bf14      	ite	ne
 80141ac:	2301      	movne	r3, #1
 80141ae:	2300      	moveq	r3, #0
 80141b0:	b2db      	uxtb	r3, r3
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d000      	beq.n	80141b8 <SCB_CleanInvalidateDCache+0x5c>
      do {
 80141b6:	e7e9      	b.n	801418c <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	1e5a      	subs	r2, r3, #1
 80141bc:	60fa      	str	r2, [r7, #12]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	bf14      	ite	ne
 80141c2:	2301      	movne	r3, #1
 80141c4:	2300      	moveq	r3, #0
 80141c6:	b2db      	uxtb	r3, r3
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d000      	beq.n	80141ce <SCB_CleanInvalidateDCache+0x72>
    do {
 80141cc:	e7d9      	b.n	8014182 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80141ce:	f3bf 8f4f 	dsb	sy
}
 80141d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80141d4:	f3bf 8f6f 	isb	sy
}
 80141d8:	bf00      	nop
}
 80141da:	bf00      	nop
 80141dc:	3714      	adds	r7, #20
 80141de:	46bd      	mov	sp, r7
 80141e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop
 80141e8:	e000ed00 	.word	0xe000ed00

080141ec <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 80141ec:	b5b0      	push	{r4, r5, r7, lr}
 80141ee:	b082      	sub	sp, #8
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	4618      	mov	r0, r3
 80141f8:	f001 fb3f 	bl	801587a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80141fc:	687d      	ldr	r5, [r7, #4]
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	3364      	adds	r3, #100	; 0x64
 8014204:	681c      	ldr	r4, [r3, #0]
 8014206:	f005 ff33 	bl	801a070 <_ZN8touchgfx11Application11getInstanceEv>
 801420a:	4603      	mov	r3, r0
 801420c:	4619      	mov	r1, r3
 801420e:	4628      	mov	r0, r5
 8014210:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	4910      	ldr	r1, [pc, #64]	; (8014258 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 8014216:	4618      	mov	r0, r3
 8014218:	f7ff feda 	bl	8013fd0 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	2101      	movs	r1, #1
 8014220:	4618      	mov	r0, r3
 8014222:	f7ff fe95 	bl	8013f50 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8014226:	6878      	ldr	r0, [r7, #4]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	3388      	adds	r3, #136	; 0x88
 801422e:	681c      	ldr	r4, [r3, #0]
 8014230:	2300      	movs	r3, #0
 8014232:	2200      	movs	r2, #0
 8014234:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8014238:	47a0      	blx	r4
    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 801423a:	2200      	movs	r2, #0
 801423c:	4907      	ldr	r1, [pc, #28]	; (801425c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 801423e:	4808      	ldr	r0, [pc, #32]	; (8014260 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8014240:	f000 f9ee 	bl	8014620 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 8014244:	2200      	movs	r2, #0
 8014246:	4907      	ldr	r1, [pc, #28]	; (8014264 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
 8014248:	4805      	ldr	r0, [pc, #20]	; (8014260 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 801424a:	f000 fa09 	bl	8014660 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setRGBBufferEPhj>
}
 801424e:	bf00      	nop
 8014250:	3708      	adds	r7, #8
 8014252:	46bd      	mov	sp, r7
 8014254:	bdb0      	pop	{r4, r5, r7, pc}
 8014256:	bf00      	nop
 8014258:	08012c45 	.word	0x08012c45
 801425c:	20037e40 	.word	0x20037e40
 8014260:	20037e84 	.word	0x20037e84
 8014264:	200002e4 	.word	0x200002e4

08014268 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8014268:	b580      	push	{r7, lr}
 801426a:	b082      	sub	sp, #8
 801426c:	af00      	add	r7, sp, #0
 801426e:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8014270:	2109      	movs	r1, #9
 8014272:	205a      	movs	r0, #90	; 0x5a
 8014274:	f7ff ff48 	bl	8014108 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8014278:	2109      	movs	r1, #9
 801427a:	2058      	movs	r0, #88	; 0x58
 801427c:	f7ff ff44 	bl	8014108 <__NVIC_SetPriority>
}
 8014280:	bf00      	nop
 8014282:	3708      	adds	r7, #8
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}

08014288 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 8014290:	205a      	movs	r0, #90	; 0x5a
 8014292:	f7ff fef7 	bl	8014084 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 8014296:	2058      	movs	r0, #88	; 0x58
 8014298:	f7ff fef4 	bl	8014084 <__NVIC_EnableIRQ>
}
 801429c:	bf00      	nop
 801429e:	3708      	adds	r7, #8
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b082      	sub	sp, #8
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80142ac:	205a      	movs	r0, #90	; 0x5a
 80142ae:	f7ff ff07 	bl	80140c0 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 80142b2:	2058      	movs	r0, #88	; 0x58
 80142b4:	f7ff ff04 	bl	80140c0 <__NVIC_DisableIRQ>
}
 80142b8:	bf00      	nop
 80142ba:	3708      	adds	r7, #8
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 80142c8:	4b11      	ldr	r3, [pc, #68]	; (8014310 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80142ca:	68db      	ldr	r3, [r3, #12]
 80142cc:	b29b      	uxth	r3, r3
 80142ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80142d2:	b29b      	uxth	r3, r3
 80142d4:	3b01      	subs	r3, #1
 80142d6:	b29a      	uxth	r2, r3
 80142d8:	4b0e      	ldr	r3, [pc, #56]	; (8014314 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80142da:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 80142dc:	4b0c      	ldr	r3, [pc, #48]	; (8014310 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80142de:	691b      	ldr	r3, [r3, #16]
 80142e0:	b29b      	uxth	r3, r3
 80142e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80142e6:	b29b      	uxth	r3, r3
 80142e8:	3b01      	subs	r3, #1
 80142ea:	b29a      	uxth	r2, r3
 80142ec:	4b0a      	ldr	r3, [pc, #40]	; (8014318 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 80142ee:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 80142f0:	4b08      	ldr	r3, [pc, #32]	; (8014314 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 80142f2:	881a      	ldrh	r2, [r3, #0]
 80142f4:	4b06      	ldr	r3, [pc, #24]	; (8014310 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80142f6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 80142f8:	4b05      	ldr	r3, [pc, #20]	; (8014310 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80142fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80142fc:	4a04      	ldr	r2, [pc, #16]	; (8014310 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 80142fe:	f043 0301 	orr.w	r3, r3, #1
 8014302:	6353      	str	r3, [r2, #52]	; 0x34
}
 8014304:	bf00      	nop
 8014306:	370c      	adds	r7, #12
 8014308:	46bd      	mov	sp, r7
 801430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801430e:	4770      	bx	lr
 8014310:	40016800 	.word	0x40016800
 8014314:	20037ece 	.word	0x20037ece
 8014318:	20037ed0 	.word	0x20037ed0

0801431c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	4618      	mov	r0, r3
 8014328:	f001 fa8e 	bl	8015848 <_ZN8touchgfx3HAL10beginFrameEv>
 801432c:	4603      	mov	r3, r0
}
 801432e:	4618      	mov	r0, r3
 8014330:	3708      	adds	r7, #8
 8014332:	46bd      	mov	sp, r7
 8014334:	bd80      	pop	{r7, pc}
	...

08014338 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b082      	sub	sp, #8
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8014346:	2b00      	cmp	r3, #0
 8014348:	d002      	beq.n	8014350 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 801434a:	4b07      	ldr	r3, [pc, #28]	; (8014368 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 801434c:	2201      	movs	r2, #1
 801434e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	4618      	mov	r0, r3
 8014354:	f001 fa84 	bl	8015860 <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 8014358:	4804      	ldr	r0, [pc, #16]	; (801436c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 801435a:	f000 f997 	bl	801468c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv>
}
 801435e:	bf00      	nop
 8014360:	3708      	adds	r7, #8
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	20037ecc 	.word	0x20037ecc
 801436c:	20037e84 	.word	0x20037e84

08014370 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8014370:	b480      	push	{r7}
 8014372:	b083      	sub	sp, #12
 8014374:	af00      	add	r7, sp, #0
 8014376:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8014378:	4b03      	ldr	r3, [pc, #12]	; (8014388 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 801437a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 801437c:	4618      	mov	r0, r3
 801437e:	370c      	adds	r7, #12
 8014380:	46bd      	mov	sp, r7
 8014382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014386:	4770      	bx	lr
 8014388:	40016884 	.word	0x40016884

0801438c <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 801438c:	b480      	push	{r7}
 801438e:	b083      	sub	sp, #12
 8014390:	af00      	add	r7, sp, #0
 8014392:	6078      	str	r0, [r7, #4]
 8014394:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8014396:	4a06      	ldr	r2, [pc, #24]	; (80143b0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 8014398:	683b      	ldr	r3, [r7, #0]
 801439a:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 801439c:	4b05      	ldr	r3, [pc, #20]	; (80143b4 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 801439e:	2201      	movs	r2, #1
 80143a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80143a2:	bf00      	nop
 80143a4:	370c      	adds	r7, #12
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr
 80143ae:	bf00      	nop
 80143b0:	40016884 	.word	0x40016884
 80143b4:	40016800 	.word	0x40016800

080143b8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b082      	sub	sp, #8
 80143bc:	af00      	add	r7, sp, #0
 80143be:	6078      	str	r0, [r7, #4]
 80143c0:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	6839      	ldr	r1, [r7, #0]
 80143c6:	4618      	mov	r0, r3
 80143c8:	f001 fa07 	bl	80157da <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80143cc:	4b08      	ldr	r3, [pc, #32]	; (80143f0 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 80143ce:	695b      	ldr	r3, [r3, #20]
 80143d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	bf14      	ite	ne
 80143d8:	2301      	movne	r3, #1
 80143da:	2300      	moveq	r3, #0
 80143dc:	b2db      	uxtb	r3, r3
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d001      	beq.n	80143e6 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 80143e2:	f7ff febb 	bl	801415c <SCB_CleanInvalidateDCache>
    }
}
 80143e6:	bf00      	nop
 80143e8:	3708      	adds	r7, #8
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	e000ed00 	.word	0xe000ed00

080143f4 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b084      	sub	sp, #16
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	60f8      	str	r0, [r7, #12]
 80143fc:	60b9      	str	r1, [r7, #8]
 80143fe:	607a      	str	r2, [r7, #4]
 8014400:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8014402:	68f8      	ldr	r0, [r7, #12]
 8014404:	683b      	ldr	r3, [r7, #0]
 8014406:	687a      	ldr	r2, [r7, #4]
 8014408:	68b9      	ldr	r1, [r7, #8]
 801440a:	f001 fb50 	bl	8015aae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801440e:	4603      	mov	r3, r0
}
 8014410:	4618      	mov	r0, r3
 8014412:	3710      	adds	r7, #16
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}

08014418 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8014418:	b480      	push	{r7}
 801441a:	b085      	sub	sp, #20
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8014420:	4b0d      	ldr	r3, [pc, #52]	; (8014458 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014424:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8014426:	4b0c      	ldr	r3, [pc, #48]	; (8014458 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8014428:	68db      	ldr	r3, [r3, #12]
 801442a:	b29b      	uxth	r3, r3
 801442c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8014430:	b29b      	uxth	r3, r3
 8014432:	3301      	adds	r3, #1
 8014434:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8014436:	89fa      	ldrh	r2, [r7, #14]
 8014438:	89bb      	ldrh	r3, [r7, #12]
 801443a:	429a      	cmp	r2, r3
 801443c:	d304      	bcc.n	8014448 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 801443e:	89fa      	ldrh	r2, [r7, #14]
 8014440:	89bb      	ldrh	r3, [r7, #12]
 8014442:	1ad3      	subs	r3, r2, r3
 8014444:	b29b      	uxth	r3, r3
 8014446:	e000      	b.n	801444a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8014448:	2300      	movs	r3, #0
}
 801444a:	4618      	mov	r0, r3
 801444c:	3714      	adds	r7, #20
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr
 8014456:	bf00      	nop
 8014458:	40016800 	.word	0x40016800

0801445c <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8014464:	4b08      	ldr	r3, [pc, #32]	; (8014488 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 8014466:	695b      	ldr	r3, [r3, #20]
 8014468:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801446c:	2b00      	cmp	r3, #0
 801446e:	bf14      	ite	ne
 8014470:	2301      	movne	r3, #1
 8014472:	2300      	moveq	r3, #0
 8014474:	b2db      	uxtb	r3, r3
 8014476:	2b00      	cmp	r3, #0
 8014478:	d001      	beq.n	801447e <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 801447a:	f7ff fe6f 	bl	801415c <SCB_CleanInvalidateDCache>
    }
}
 801447e:	bf00      	nop
 8014480:	3708      	adds	r7, #8
 8014482:	46bd      	mov	sp, r7
 8014484:	bd80      	pop	{r7, pc}
 8014486:	bf00      	nop
 8014488:	e000ed00 	.word	0xe000ed00

0801448c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b082      	sub	sp, #8
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8014494:	4b08      	ldr	r3, [pc, #32]	; (80144b8 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 8014496:	695b      	ldr	r3, [r3, #20]
 8014498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801449c:	2b00      	cmp	r3, #0
 801449e:	bf14      	ite	ne
 80144a0:	2301      	movne	r3, #1
 80144a2:	2300      	moveq	r3, #0
 80144a4:	b2db      	uxtb	r3, r3
 80144a6:	2b00      	cmp	r3, #0
 80144a8:	d001      	beq.n	80144ae <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 80144aa:	f7ff fe57 	bl	801415c <SCB_CleanInvalidateDCache>
    }
}
 80144ae:	bf00      	nop
 80144b0:	3708      	adds	r7, #8
 80144b2:	46bd      	mov	sp, r7
 80144b4:	bd80      	pop	{r7, pc}
 80144b6:	bf00      	nop
 80144b8:	e000ed00 	.word	0xe000ed00

080144bc <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 80144bc:	b580      	push	{r7, lr}
 80144be:	b082      	sub	sp, #8
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 80144c4:	f7f9 fb82 	bl	800dbcc <_ZN8touchgfx3HAL11getInstanceEv>
 80144c8:	4603      	mov	r3, r0
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	bf0c      	ite	eq
 80144ce:	2301      	moveq	r3, #1
 80144d0:	2300      	movne	r3, #0
 80144d2:	b2db      	uxtb	r3, r3
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d132      	bne.n	801453e <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 80144d8:	4b1b      	ldr	r3, [pc, #108]	; (8014548 <HAL_LTDC_LineEventCallback+0x8c>)
 80144da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144dc:	4a1b      	ldr	r2, [pc, #108]	; (801454c <HAL_LTDC_LineEventCallback+0x90>)
 80144de:	8812      	ldrh	r2, [r2, #0]
 80144e0:	4293      	cmp	r3, r2
 80144e2:	bf0c      	ite	eq
 80144e4:	2301      	moveq	r3, #1
 80144e6:	2300      	movne	r3, #0
 80144e8:	b2db      	uxtb	r3, r3
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d017      	beq.n	801451e <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 80144ee:	4b18      	ldr	r3, [pc, #96]	; (8014550 <HAL_LTDC_LineEventCallback+0x94>)
 80144f0:	881b      	ldrh	r3, [r3, #0]
 80144f2:	4619      	mov	r1, r3
 80144f4:	6878      	ldr	r0, [r7, #4]
 80144f6:	f7f1 fbb9 	bl	8005c6c <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 80144fa:	f7f9 fb67 	bl	800dbcc <_ZN8touchgfx3HAL11getInstanceEv>
 80144fe:	4603      	mov	r3, r0
 8014500:	4618      	mov	r0, r3
 8014502:	f7ff fd13 	bl	8013f2c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8014506:	f7fe fb75 	bl	8012bf4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801450a:	f7f9 fb5f 	bl	800dbcc <_ZN8touchgfx3HAL11getInstanceEv>
 801450e:	4603      	mov	r3, r0
 8014510:	4618      	mov	r0, r3
 8014512:	f001 fef7 	bl	8016304 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8014516:	2000      	movs	r0, #0
 8014518:	f7fd f88a 	bl	8011630 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801451c:	e010      	b.n	8014540 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801451e:	4b0b      	ldr	r3, [pc, #44]	; (801454c <HAL_LTDC_LineEventCallback+0x90>)
 8014520:	881b      	ldrh	r3, [r3, #0]
 8014522:	4619      	mov	r1, r3
 8014524:	6878      	ldr	r0, [r7, #4]
 8014526:	f7f1 fba1 	bl	8005c6c <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 801452a:	f7f9 fb4f 	bl	800dbcc <_ZN8touchgfx3HAL11getInstanceEv>
 801452e:	4603      	mov	r3, r0
 8014530:	4618      	mov	r0, r3
 8014532:	f7ff fce0 	bl	8013ef6 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8014536:	2000      	movs	r0, #0
 8014538:	f7fd f896 	bl	8011668 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801453c:	e000      	b.n	8014540 <HAL_LTDC_LineEventCallback+0x84>
            return;
 801453e:	bf00      	nop
        }
    }
 8014540:	3708      	adds	r7, #8
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	40016800 	.word	0x40016800
 801454c:	20037ece 	.word	0x20037ece
 8014550:	20037ed0 	.word	0x20037ed0

08014554 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 8014554:	b480      	push	{r7}
 8014556:	b083      	sub	sp, #12
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
 801455c:	4a04      	ldr	r2, [pc, #16]	; (8014570 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	601a      	str	r2, [r3, #0]
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	4618      	mov	r0, r3
 8014566:	370c      	adds	r7, #12
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr
 8014570:	0802f0a8 	.word	0x0802f0a8

08014574 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 8014574:	b5b0      	push	{r4, r5, r7, lr}
 8014576:	b082      	sub	sp, #8
 8014578:	af00      	add	r7, sp, #0
 801457a:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	4618      	mov	r0, r3
 8014580:	f7ff ffe8 	bl	8014554 <_ZN8touchgfx15VideoControllerC1Ev>
 8014584:	4a25      	ldr	r2, [pc, #148]	; (801461c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0xa8>)
 8014586:	687b      	ldr	r3, [r7, #4]
 8014588:	601a      	str	r2, [r3, #0]
 801458a:	687b      	ldr	r3, [r7, #4]
 801458c:	330c      	adds	r3, #12
 801458e:	2400      	movs	r4, #0
 8014590:	461d      	mov	r5, r3
 8014592:	2c00      	cmp	r4, #0
 8014594:	db05      	blt.n	80145a2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0x2e>
 8014596:	4628      	mov	r0, r5
 8014598:	f000 f8bd 	bl	8014716 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>
 801459c:	3524      	adds	r5, #36	; 0x24
 801459e:	3c01      	subs	r4, #1
 80145a0:	e7f7      	b.n	8014592 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0x1e>
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2200      	movs	r2, #0
 80145a6:	631a      	str	r2, [r3, #48]	; 0x30
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2200      	movs	r2, #0
 80145ac:	635a      	str	r2, [r3, #52]	; 0x34
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2200      	movs	r2, #0
 80145b2:	639a      	str	r2, [r3, #56]	; 0x38
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2200      	movs	r2, #0
 80145b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2201      	movs	r2, #1
 80145c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	2200      	movs	r2, #0
 80145c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2200      	movs	r2, #0
 80145d0:	641a      	str	r2, [r3, #64]	; 0x40
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2200      	movs	r2, #0
 80145d6:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	3308      	adds	r3, #8
 80145dc:	2204      	movs	r2, #4
 80145de:	2100      	movs	r1, #0
 80145e0:	4618      	mov	r0, r3
 80145e2:	f014 fc1d 	bl	8028e20 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	3304      	adds	r3, #4
 80145ea:	2204      	movs	r2, #4
 80145ec:	2100      	movs	r1, #0
 80145ee:	4618      	mov	r0, r3
 80145f0:	f014 fc16 	bl	8028e20 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 80145f4:	2200      	movs	r2, #0
 80145f6:	2100      	movs	r1, #0
 80145f8:	2001      	movs	r0, #1
 80145fa:	f7f5 f8bf 	bl	800977c <osSemaphoreNew>
 80145fe:	4602      	mov	r2, r0
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8014604:	2000      	movs	r0, #0
 8014606:	f7f4 ff71 	bl	80094ec <osMutexNew>
 801460a:	4602      	mov	r2, r0
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	4618      	mov	r0, r3
 8014614:	3708      	adds	r7, #8
 8014616:	46bd      	mov	sp, r7
 8014618:	bdb0      	pop	{r4, r5, r7, pc}
 801461a:	bf00      	nop
 801461c:	0802f068 	.word	0x0802f068

08014620 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8014620:	b580      	push	{r7, lr}
 8014622:	b084      	sub	sp, #16
 8014624:	af00      	add	r7, sp, #0
 8014626:	60f8      	str	r0, [r7, #12]
 8014628:	60b9      	str	r1, [r7, #8]
 801462a:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d006      	beq.n	8014640 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x20>
 8014632:	4b08      	ldr	r3, [pc, #32]	; (8014654 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x34>)
 8014634:	4a08      	ldr	r2, [pc, #32]	; (8014658 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x38>)
 8014636:	f240 1103 	movw	r1, #259	; 0x103
 801463a:	4808      	ldr	r0, [pc, #32]	; (801465c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x3c>)
 801463c:	f014 fb64 	bl	8028d08 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8014640:	68fa      	ldr	r2, [r7, #12]
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	009b      	lsls	r3, r3, #2
 8014646:	4413      	add	r3, r2
 8014648:	68ba      	ldr	r2, [r7, #8]
 801464a:	605a      	str	r2, [r3, #4]
    }
 801464c:	bf00      	nop
 801464e:	3710      	adds	r7, #16
 8014650:	46bd      	mov	sp, r7
 8014652:	bd80      	pop	{r7, pc}
 8014654:	0802d22c 	.word	0x0802d22c
 8014658:	0802d240 	.word	0x0802d240
 801465c:	0802d3a0 	.word	0x0802d3a0

08014660 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 8014660:	b480      	push	{r7}
 8014662:	b085      	sub	sp, #20
 8014664:	af00      	add	r7, sp, #0
 8014666:	60f8      	str	r0, [r7, #12]
 8014668:	60b9      	str	r1, [r7, #8]
 801466a:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	68ba      	ldr	r2, [r7, #8]
 8014670:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 801467a:	68fb      	ldr	r3, [r7, #12]
 801467c:	687a      	ldr	r2, [r7, #4]
 801467e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 8014680:	bf00      	nop
 8014682:	3714      	adds	r7, #20
 8014684:	46bd      	mov	sp, r7
 8014686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468a:	4770      	bx	lr

0801468c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv>:

    void endFrame()
 801468c:	b580      	push	{r7, lr}
 801468e:	b084      	sub	sp, #16
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 8014694:	2300      	movs	r3, #0
 8014696:	60fb      	str	r3, [r7, #12]
 8014698:	68fb      	ldr	r3, [r7, #12]
 801469a:	2b00      	cmp	r3, #0
 801469c:	d120      	bne.n	80146e0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 801469e:	68fa      	ldr	r2, [r7, #12]
 80146a0:	4613      	mov	r3, r2
 80146a2:	00db      	lsls	r3, r3, #3
 80146a4:	4413      	add	r3, r2
 80146a6:	009b      	lsls	r3, r3, #2
 80146a8:	3308      	adds	r3, #8
 80146aa:	687a      	ldr	r2, [r7, #4]
 80146ac:	4413      	add	r3, r2
 80146ae:	3304      	adds	r3, #4
 80146b0:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 80146b2:	68bb      	ldr	r3, [r7, #8]
 80146b4:	7f5b      	ldrb	r3, [r3, #29]
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d103      	bne.n	80146c2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x36>
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	7f9b      	ldrb	r3, [r3, #30]
 80146be:	2b00      	cmp	r3, #0
 80146c0:	d00a      	beq.n	80146d8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 80146c2:	68b9      	ldr	r1, [r7, #8]
 80146c4:	6878      	ldr	r0, [r7, #4]
 80146c6:	f000 f85e 	bl	8014786 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d003      	beq.n	80146d8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 80146d0:	68bb      	ldr	r3, [r7, #8]
 80146d2:	2201      	movs	r2, #1
 80146d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	3301      	adds	r3, #1
 80146dc:	60fb      	str	r3, [r7, #12]
 80146de:	e7db      	b.n	8014698 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	2201      	movs	r2, #1
 80146e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146ec:	4618      	mov	r0, r3
 80146ee:	f7f5 f947 	bl	8009980 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d008      	beq.n	801470e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014700:	4618      	mov	r0, r3
 8014702:	f7f4 ffeb 	bl	80096dc <osMutexRelease>
            uiHasMutex = false;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	2200      	movs	r2, #0
 801470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 801470e:	bf00      	nop
 8014710:	3710      	adds	r7, #16
 8014712:	46bd      	mov	sp, r7
 8014714:	bd80      	pop	{r7, pc}

08014716 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8014716:	b480      	push	{r7}
 8014718:	b083      	sub	sp, #12
 801471a:	af00      	add	r7, sp, #0
 801471c:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2200      	movs	r2, #0
 8014722:	601a      	str	r2, [r3, #0]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	2200      	movs	r2, #0
 8014728:	605a      	str	r2, [r3, #4]
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	2200      	movs	r2, #0
 801472e:	609a      	str	r2, [r3, #8]
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2200      	movs	r2, #0
 8014734:	60da      	str	r2, [r3, #12]
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2200      	movs	r2, #0
 801473a:	611a      	str	r2, [r3, #16]
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	2200      	movs	r2, #0
 8014740:	615a      	str	r2, [r3, #20]
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	2200      	movs	r2, #0
 8014746:	619a      	str	r2, [r3, #24]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2200      	movs	r2, #0
 801474c:	771a      	strb	r2, [r3, #28]
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	2200      	movs	r2, #0
 8014752:	775a      	strb	r2, [r3, #29]
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2200      	movs	r2, #0
 8014758:	779a      	strb	r2, [r3, #30]
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	2200      	movs	r2, #0
 801475e:	77da      	strb	r2, [r3, #31]
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	2200      	movs	r2, #0
 8014764:	f883 2020 	strb.w	r2, [r3, #32]
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2201      	movs	r2, #1
 801476c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	2200      	movs	r2, #0
 8014774:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	4618      	mov	r0, r3
 801477c:	370c      	adds	r7, #12
 801477e:	46bd      	mov	sp, r7
 8014780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014784:	4770      	bx	lr

08014786 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 8014786:	b480      	push	{r7}
 8014788:	b083      	sub	sp, #12
 801478a:	af00      	add	r7, sp, #0
 801478c:	6078      	str	r0, [r7, #4]
 801478e:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8014790:	683b      	ldr	r3, [r7, #0]
 8014792:	689b      	ldr	r3, [r3, #8]
 8014794:	683a      	ldr	r2, [r7, #0]
 8014796:	68d2      	ldr	r2, [r2, #12]
 8014798:	fb03 f202 	mul.w	r2, r3, r2
 801479c:	683b      	ldr	r3, [r7, #0]
 801479e:	691b      	ldr	r3, [r3, #16]
 80147a0:	6839      	ldr	r1, [r7, #0]
 80147a2:	6849      	ldr	r1, [r1, #4]
 80147a4:	fb01 f303 	mul.w	r3, r1, r3
 80147a8:	429a      	cmp	r2, r3
 80147aa:	d322      	bcc.n	80147f2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80147b2:	2b00      	cmp	r3, #0
 80147b4:	d01b      	beq.n	80147ee <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80147b6:	683b      	ldr	r3, [r7, #0]
 80147b8:	689b      	ldr	r3, [r3, #8]
 80147ba:	683a      	ldr	r2, [r7, #0]
 80147bc:	68d2      	ldr	r2, [r2, #12]
 80147be:	fb03 f202 	mul.w	r2, r3, r2
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	691b      	ldr	r3, [r3, #16]
 80147c6:	6839      	ldr	r1, [r7, #0]
 80147c8:	6849      	ldr	r1, [r1, #4]
 80147ca:	fb01 f303 	mul.w	r3, r1, r3
 80147ce:	1ad2      	subs	r2, r2, r3
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	691b      	ldr	r3, [r3, #16]
 80147d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80147d8:	683b      	ldr	r3, [r7, #0]
 80147da:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 80147dc:	683b      	ldr	r3, [r7, #0]
 80147de:	699b      	ldr	r3, [r3, #24]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	d004      	beq.n	80147ee <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 80147e4:	683b      	ldr	r3, [r7, #0]
 80147e6:	699b      	ldr	r3, [r3, #24]
 80147e8:	1e5a      	subs	r2, r3, #1
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 80147ee:	2301      	movs	r3, #1
 80147f0:	e000      	b.n	80147f4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 80147f2:	2300      	movs	r3, #0
    }
 80147f4:	4618      	mov	r0, r3
 80147f6:	370c      	adds	r7, #12
 80147f8:	46bd      	mov	sp, r7
 80147fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fe:	4770      	bx	lr

08014800 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8014800:	b580      	push	{r7, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
 8014808:	4a05      	ldr	r2, [pc, #20]	; (8014820 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev+0x20>)
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	601a      	str	r2, [r3, #0]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	4618      	mov	r0, r3
 8014812:	f7ff fbeb 	bl	8013fec <_ZN8touchgfx15VideoControllerD1Ev>
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	4618      	mov	r0, r3
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	0802f068 	.word	0x0802f068

08014824 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED0Ev>:
 8014824:	b580      	push	{r7, lr}
 8014826:	b082      	sub	sp, #8
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f7ff ffe7 	bl	8014800 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>
 8014832:	2148      	movs	r1, #72	; 0x48
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f014 fa39 	bl	8028cac <_ZdlPvj>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	4618      	mov	r0, r3
 801483e:	3708      	adds	r7, #8
 8014840:	46bd      	mov	sp, r7
 8014842:	bd80      	pop	{r7, pc}

08014844 <_Z41__static_initialization_and_destruction_0ii>:
}
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
 801484c:	6039      	str	r1, [r7, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2b01      	cmp	r3, #1
 8014852:	d10a      	bne.n	801486a <_Z41__static_initialization_and_destruction_0ii+0x26>
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801485a:	4293      	cmp	r3, r2
 801485c:	d105      	bne.n	801486a <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 801485e:	480c      	ldr	r0, [pc, #48]	; (8014890 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8014860:	f7fd fa08 	bl	8011c74 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 0, 0, 0*4U, Bitmap::ARGB8888> videoController;
 8014864:	480b      	ldr	r0, [pc, #44]	; (8014894 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8014866:	f7ff fe85 	bl	8014574 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev>
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d10a      	bne.n	8014886 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8014870:	683b      	ldr	r3, [r7, #0]
 8014872:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014876:	4293      	cmp	r3, r2
 8014878:	d105      	bne.n	8014886 <_Z41__static_initialization_and_destruction_0ii+0x42>
 801487a:	4806      	ldr	r0, [pc, #24]	; (8014894 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 801487c:	f7ff ffc0 	bl	8014800 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 8014880:	4803      	ldr	r0, [pc, #12]	; (8014890 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8014882:	f7fe f92f 	bl	8012ae4 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 8014886:	bf00      	nop
 8014888:	3708      	adds	r7, #8
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}
 801488e:	bf00      	nop
 8014890:	20037e40 	.word	0x20037e40
 8014894:	20037e84 	.word	0x20037e84

08014898 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8014898:	b580      	push	{r7, lr}
 801489a:	b084      	sub	sp, #16
 801489c:	af00      	add	r7, sp, #0
 801489e:	6078      	str	r0, [r7, #4]
 80148a0:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 80148a2:	2300      	movs	r3, #0
 80148a4:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 80148a6:	6878      	ldr	r0, [r7, #4]
 80148a8:	f000 fa7a 	bl	8014da0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv>
 80148ac:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 80148ae:	6879      	ldr	r1, [r7, #4]
 80148b0:	68ba      	ldr	r2, [r7, #8]
 80148b2:	4613      	mov	r3, r2
 80148b4:	00db      	lsls	r3, r3, #3
 80148b6:	4413      	add	r3, r2
 80148b8:	009b      	lsls	r3, r3, #2
 80148ba:	440b      	add	r3, r1
 80148bc:	3328      	adds	r3, #40	; 0x28
 80148be:	2201      	movs	r2, #1
 80148c0:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80148ce:	440b      	add	r3, r1
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d905      	bls.n	80148e0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 80148d4:	4b0f      	ldr	r3, [pc, #60]	; (8014914 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 80148d6:	4a10      	ldr	r2, [pc, #64]	; (8014918 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
 80148d8:	2152      	movs	r1, #82	; 0x52
 80148da:	4810      	ldr	r0, [pc, #64]	; (801491c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 80148dc:	f014 fa14 	bl	8028d08 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	68ba      	ldr	r2, [r7, #8]
 80148e8:	3202      	adds	r2, #2
 80148ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	639a      	str	r2, [r3, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 80148f6:	2300      	movs	r3, #0
 80148f8:	2200      	movs	r2, #0
 80148fa:	2102      	movs	r1, #2
 80148fc:	6838      	ldr	r0, [r7, #0]
 80148fe:	f7ff fba3 	bl	8014048 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8014902:	2100      	movs	r1, #0
 8014904:	6838      	ldr	r0, [r7, #0]
 8014906:	f7ff fb91 	bl	801402c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 801490a:	68bb      	ldr	r3, [r7, #8]
    }
 801490c:	4618      	mov	r0, r3
 801490e:	3710      	adds	r7, #16
 8014910:	46bd      	mov	sp, r7
 8014912:	bd80      	pop	{r7, pc}
 8014914:	0802d3e0 	.word	0x0802d3e0
 8014918:	0802d41c 	.word	0x0802d41c
 801491c:	0802d3a0 	.word	0x0802d3a0

08014920 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8014920:	b580      	push	{r7, lr}
 8014922:	b084      	sub	sp, #16
 8014924:	af00      	add	r7, sp, #0
 8014926:	6078      	str	r0, [r7, #4]
 8014928:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801492e:	f04f 31ff 	mov.w	r1, #4294967295
 8014932:	4618      	mov	r0, r3
 8014934:	f7f4 fe74 	bl	8009620 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801493c:	4618      	mov	r0, r3
 801493e:	f7f4 fecd 	bl	80096dc <osMutexRelease>
        streams[handle].isActive = false;
 8014942:	6879      	ldr	r1, [r7, #4]
 8014944:	683a      	ldr	r2, [r7, #0]
 8014946:	4613      	mov	r3, r2
 8014948:	00db      	lsls	r3, r3, #3
 801494a:	4413      	add	r3, r2
 801494c:	009b      	lsls	r3, r3, #2
 801494e:	440b      	add	r3, r1
 8014950:	3328      	adds	r3, #40	; 0x28
 8014952:	2200      	movs	r2, #0
 8014954:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 8014956:	2300      	movs	r3, #0
 8014958:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 801495a:	2300      	movs	r3, #0
 801495c:	60bb      	str	r3, [r7, #8]
 801495e:	68bb      	ldr	r3, [r7, #8]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d114      	bne.n	801498e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 8014964:	6879      	ldr	r1, [r7, #4]
 8014966:	68ba      	ldr	r2, [r7, #8]
 8014968:	4613      	mov	r3, r2
 801496a:	00db      	lsls	r3, r3, #3
 801496c:	4413      	add	r3, r2
 801496e:	009b      	lsls	r3, r3, #2
 8014970:	440b      	add	r3, r1
 8014972:	3328      	adds	r3, #40	; 0x28
 8014974:	781a      	ldrb	r2, [r3, #0]
 8014976:	7bfb      	ldrb	r3, [r7, #15]
 8014978:	4313      	orrs	r3, r2
 801497a:	b2db      	uxtb	r3, r3
 801497c:	2b00      	cmp	r3, #0
 801497e:	bf14      	ite	ne
 8014980:	2301      	movne	r3, #1
 8014982:	2300      	moveq	r3, #0
 8014984:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 8014986:	68bb      	ldr	r3, [r7, #8]
 8014988:	3301      	adds	r3, #1
 801498a:	60bb      	str	r3, [r7, #8]
 801498c:	e7e7      	b.n	801495e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 801498e:	7bfb      	ldrb	r3, [r7, #15]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d103      	bne.n	801499c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	639a      	str	r2, [r3, #56]	; 0x38
    }
 801499c:	bf00      	nop
 801499e:	3710      	adds	r7, #16
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b086      	sub	sp, #24
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	60f8      	str	r0, [r7, #12]
 80149ac:	60b9      	str	r1, [r7, #8]
 80149ae:	607a      	str	r2, [r7, #4]
 80149b0:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	2b00      	cmp	r3, #0
 80149b6:	d005      	beq.n	80149c4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x20>
 80149b8:	4b0f      	ldr	r3, [pc, #60]	; (80149f8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x54>)
 80149ba:	4a10      	ldr	r2, [pc, #64]	; (80149fc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x58>)
 80149bc:	2182      	movs	r1, #130	; 0x82
 80149be:	4810      	ldr	r0, [pc, #64]	; (8014a00 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x5c>)
 80149c0:	f014 f9a2 	bl	8028d08 <__assert_func>
        Stream& stream = streams[handle];
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	4613      	mov	r3, r2
 80149c8:	00db      	lsls	r3, r3, #3
 80149ca:	4413      	add	r3, r2
 80149cc:	009b      	lsls	r3, r3, #2
 80149ce:	3308      	adds	r3, #8
 80149d0:	68fa      	ldr	r2, [r7, #12]
 80149d2:	4413      	add	r3, r2
 80149d4:	3304      	adds	r3, #4
 80149d6:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 80149d8:	697b      	ldr	r3, [r7, #20]
 80149da:	2200      	movs	r2, #0
 80149dc:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 80149de:	697b      	ldr	r3, [r7, #20]
 80149e0:	2200      	movs	r2, #0
 80149e2:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	687a      	ldr	r2, [r7, #4]
 80149e8:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	683a      	ldr	r2, [r7, #0]
 80149ee:	60da      	str	r2, [r3, #12]
    }
 80149f0:	bf00      	nop
 80149f2:	3718      	adds	r7, #24
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	0802d5bc 	.word	0x0802d5bc
 80149fc:	0802d5d0 	.word	0x0802d5d0
 8014a00:	0802d3a0 	.word	0x0802d3a0

08014a04 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b086      	sub	sp, #24
 8014a08:	af00      	add	r7, sp, #0
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8014a10:	68bb      	ldr	r3, [r7, #8]
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d005      	beq.n	8014a22 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8014a16:	4b29      	ldr	r3, [pc, #164]	; (8014abc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8014a18:	4a29      	ldr	r2, [pc, #164]	; (8014ac0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 8014a1a:	21d0      	movs	r1, #208	; 0xd0
 8014a1c:	4829      	ldr	r0, [pc, #164]	; (8014ac4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 8014a1e:	f014 f973 	bl	8028d08 <__assert_func>
        Stream& stream = streams[handle];
 8014a22:	68ba      	ldr	r2, [r7, #8]
 8014a24:	4613      	mov	r3, r2
 8014a26:	00db      	lsls	r3, r3, #3
 8014a28:	4413      	add	r3, r2
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	3308      	adds	r3, #8
 8014a2e:	68fa      	ldr	r2, [r7, #12]
 8014a30:	4413      	add	r3, r2
 8014a32:	3304      	adds	r3, #4
 8014a34:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	7f5b      	ldrb	r3, [r3, #29]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d00b      	beq.n	8014a56 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 8014a3e:	f7f9 f8c5 	bl	800dbcc <_ZN8touchgfx3HAL11getInstanceEv>
 8014a42:	4603      	mov	r3, r0
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7ff fa64 	bl	8013f12 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 8014a4a:	4602      	mov	r2, r0
 8014a4c:	697b      	ldr	r3, [r7, #20]
 8014a4e:	689b      	ldr	r3, [r3, #8]
 8014a50:	441a      	add	r2, r3
 8014a52:	697b      	ldr	r3, [r7, #20]
 8014a54:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 8014a56:	697b      	ldr	r3, [r7, #20]
 8014a58:	7fdb      	ldrb	r3, [r3, #31]
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d029      	beq.n	8014ab2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	68ba      	ldr	r2, [r7, #8]
 8014a62:	3202      	adds	r2, #2
 8014a64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a68:	4619      	mov	r1, r3
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7ff fade 	bl	801402c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	681b      	ldr	r3, [r3, #0]
 8014a76:	3314      	adds	r3, #20
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	4610      	mov	r0, r2
 8014a7c:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	2200      	movs	r2, #0
 8014a82:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014a8a:	f083 0301 	eor.w	r3, r3, #1
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d00a      	beq.n	8014aaa <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 8014a94:	697b      	ldr	r3, [r7, #20]
 8014a96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8014a9a:	f083 0301 	eor.w	r3, r3, #1
 8014a9e:	b2db      	uxtb	r3, r3
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d002      	beq.n	8014aaa <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 8014aa4:	697b      	ldr	r3, [r7, #20]
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014ab0:	e000      	b.n	8014ab4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 8014ab2:	2301      	movs	r3, #1
    }
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	3718      	adds	r7, #24
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	bd80      	pop	{r7, pc}
 8014abc:	0802d5bc 	.word	0x0802d5bc
 8014ac0:	0802d788 	.word	0x0802d788
 8014ac4:	0802d3a0 	.word	0x0802d3a0

08014ac8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b084      	sub	sp, #16
 8014acc:	af00      	add	r7, sp, #0
 8014ace:	60f8      	str	r0, [r7, #12]
 8014ad0:	60b9      	str	r1, [r7, #8]
 8014ad2:	607a      	str	r2, [r7, #4]
 8014ad4:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d00e      	beq.n	8014afe <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7f4 fd99 	bl	8009620 <osMutexAcquire>
            firstDrawThisFrame = false;
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	2200      	movs	r2, #0
 8014af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	2201      	movs	r2, #1
 8014afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8014afe:	bf00      	nop
 8014b00:	3710      	adds	r7, #16
 8014b02:	46bd      	mov	sp, r7
 8014b04:	bd80      	pop	{r7, pc}
	...

08014b08 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b086      	sub	sp, #24
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	607a      	str	r2, [r7, #4]
 8014b14:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d005      	beq.n	8014b28 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x20>
 8014b1c:	4b13      	ldr	r3, [pc, #76]	; (8014b6c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x64>)
 8014b1e:	4a14      	ldr	r2, [pc, #80]	; (8014b70 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x68>)
 8014b20:	2190      	movs	r1, #144	; 0x90
 8014b22:	4814      	ldr	r0, [pc, #80]	; (8014b74 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x6c>)
 8014b24:	f014 f8f0 	bl	8028d08 <__assert_func>
        Stream& stream = streams[handle];
 8014b28:	68ba      	ldr	r2, [r7, #8]
 8014b2a:	4613      	mov	r3, r2
 8014b2c:	00db      	lsls	r3, r3, #3
 8014b2e:	4413      	add	r3, r2
 8014b30:	009b      	lsls	r3, r3, #2
 8014b32:	3308      	adds	r3, #8
 8014b34:	68fa      	ldr	r2, [r7, #12]
 8014b36:	4413      	add	r3, r2
 8014b38:	3304      	adds	r3, #4
 8014b3a:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8014b3c:	697b      	ldr	r3, [r7, #20]
 8014b3e:	2200      	movs	r2, #0
 8014b40:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8014b42:	68fa      	ldr	r2, [r7, #12]
 8014b44:	68bb      	ldr	r3, [r7, #8]
 8014b46:	009b      	lsls	r3, r3, #2
 8014b48:	4413      	add	r3, r2
 8014b4a:	6858      	ldr	r0, [r3, #4]
 8014b4c:	68fa      	ldr	r2, [r7, #12]
 8014b4e:	68bb      	ldr	r3, [r7, #8]
 8014b50:	009b      	lsls	r3, r3, #2
 8014b52:	4413      	add	r3, r2
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	3308      	adds	r3, #8
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	683a      	ldr	r2, [r7, #0]
 8014b5e:	6879      	ldr	r1, [r7, #4]
 8014b60:	4798      	blx	r3
    }
 8014b62:	bf00      	nop
 8014b64:	3718      	adds	r7, #24
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	0802d5bc 	.word	0x0802d5bc
 8014b70:	0802d924 	.word	0x0802d924
 8014b74:	0802d3a0 	.word	0x0802d3a0

08014b78 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b084      	sub	sp, #16
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	60f8      	str	r0, [r7, #12]
 8014b80:	60b9      	str	r1, [r7, #8]
 8014b82:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8014b84:	68fa      	ldr	r2, [r7, #12]
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	009b      	lsls	r3, r3, #2
 8014b8a:	4413      	add	r3, r2
 8014b8c:	6858      	ldr	r0, [r3, #4]
 8014b8e:	68fa      	ldr	r2, [r7, #12]
 8014b90:	68bb      	ldr	r3, [r7, #8]
 8014b92:	009b      	lsls	r3, r3, #2
 8014b94:	4413      	add	r3, r2
 8014b96:	685b      	ldr	r3, [r3, #4]
 8014b98:	681b      	ldr	r3, [r3, #0]
 8014b9a:	330c      	adds	r3, #12
 8014b9c:	681b      	ldr	r3, [r3, #0]
 8014b9e:	6879      	ldr	r1, [r7, #4]
 8014ba0:	4798      	blx	r3
    }
 8014ba2:	bf00      	nop
 8014ba4:	3710      	adds	r7, #16
 8014ba6:	46bd      	mov	sp, r7
 8014ba8:	bd80      	pop	{r7, pc}
	...

08014bac <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b086      	sub	sp, #24
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	60b9      	str	r1, [r7, #8]
 8014bb6:	603b      	str	r3, [r7, #0]
 8014bb8:	4613      	mov	r3, r2
 8014bba:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8014bbc:	68bb      	ldr	r3, [r7, #8]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d005      	beq.n	8014bce <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8014bc2:	4b3a      	ldr	r3, [pc, #232]	; (8014cac <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8014bc4:	4a3a      	ldr	r2, [pc, #232]	; (8014cb0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8014bc6:	21a2      	movs	r1, #162	; 0xa2
 8014bc8:	483a      	ldr	r0, [pc, #232]	; (8014cb4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8014bca:	f014 f89d 	bl	8028d08 <__assert_func>
        Stream& stream = streams[handle];
 8014bce:	68ba      	ldr	r2, [r7, #8]
 8014bd0:	4613      	mov	r3, r2
 8014bd2:	00db      	lsls	r3, r3, #3
 8014bd4:	4413      	add	r3, r2
 8014bd6:	009b      	lsls	r3, r3, #2
 8014bd8:	3308      	adds	r3, #8
 8014bda:	68fa      	ldr	r2, [r7, #12]
 8014bdc:	4413      	add	r3, r2
 8014bde:	3304      	adds	r3, #4
 8014be0:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8014be2:	79fb      	ldrb	r3, [r7, #7]
 8014be4:	2b05      	cmp	r3, #5
 8014be6:	d85c      	bhi.n	8014ca2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8014be8:	a201      	add	r2, pc, #4	; (adr r2, 8014bf0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8014bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bee:	bf00      	nop
 8014bf0:	08014c09 	.word	0x08014c09
 8014bf4:	08014c49 	.word	0x08014c49
 8014bf8:	08014c51 	.word	0x08014c51
 8014bfc:	08014c65 	.word	0x08014c65
 8014c00:	08014c7f 	.word	0x08014c7f
 8014c04:	08014c8d 	.word	0x08014c8d
            if (mjpegDecoders[handle]->hasVideo())
 8014c08:	68fa      	ldr	r2, [r7, #12]
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	009b      	lsls	r3, r3, #2
 8014c0e:	4413      	add	r3, r2
 8014c10:	6859      	ldr	r1, [r3, #4]
 8014c12:	68fa      	ldr	r2, [r7, #12]
 8014c14:	68bb      	ldr	r3, [r7, #8]
 8014c16:	009b      	lsls	r3, r3, #2
 8014c18:	4413      	add	r3, r2
 8014c1a:	685b      	ldr	r3, [r3, #4]
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	3310      	adds	r3, #16
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	4608      	mov	r0, r1
 8014c24:	4798      	blx	r3
 8014c26:	4603      	mov	r3, r0
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d039      	beq.n	8014ca0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	2201      	movs	r2, #1
 8014c30:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8014c32:	697b      	ldr	r3, [r7, #20]
 8014c34:	2201      	movs	r2, #1
 8014c36:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	2200      	movs	r2, #0
 8014c3e:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8014c40:	697b      	ldr	r3, [r7, #20]
 8014c42:	2200      	movs	r2, #0
 8014c44:	609a      	str	r2, [r3, #8]
            break;
 8014c46:	e02b      	b.n	8014ca0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	775a      	strb	r2, [r3, #29]
            break;
 8014c4e:	e028      	b.n	8014ca2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8014c50:	697b      	ldr	r3, [r7, #20]
 8014c52:	683a      	ldr	r2, [r7, #0]
 8014c54:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	2200      	movs	r2, #0
 8014c5a:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	2200      	movs	r2, #0
 8014c60:	609a      	str	r2, [r3, #8]
            break;
 8014c62:	e01e      	b.n	8014ca2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	683a      	ldr	r2, [r7, #0]
 8014c68:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 8014c6a:	697b      	ldr	r3, [r7, #20]
 8014c6c:	2201      	movs	r2, #1
 8014c6e:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	2200      	movs	r2, #0
 8014c74:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8014c76:	697b      	ldr	r3, [r7, #20]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	609a      	str	r2, [r3, #8]
            break;
 8014c7c:	e011      	b.n	8014ca2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8014c7e:	697b      	ldr	r3, [r7, #20]
 8014c80:	2200      	movs	r2, #0
 8014c82:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8014c84:	697b      	ldr	r3, [r7, #20]
 8014c86:	2201      	movs	r2, #1
 8014c88:	615a      	str	r2, [r3, #20]
            break;
 8014c8a:	e00a      	b.n	8014ca2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8014c8c:	683b      	ldr	r3, [r7, #0]
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	bf14      	ite	ne
 8014c92:	2301      	movne	r3, #1
 8014c94:	2300      	moveq	r3, #0
 8014c96:	b2da      	uxtb	r2, r3
 8014c98:	697b      	ldr	r3, [r7, #20]
 8014c9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8014c9e:	e000      	b.n	8014ca2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 8014ca0:	bf00      	nop
    }
 8014ca2:	bf00      	nop
 8014ca4:	3718      	adds	r7, #24
 8014ca6:	46bd      	mov	sp, r7
 8014ca8:	bd80      	pop	{r7, pc}
 8014caa:	bf00      	nop
 8014cac:	0802d5bc 	.word	0x0802d5bc
 8014cb0:	0802dafc 	.word	0x0802dafc
 8014cb4:	0802d3a0 	.word	0x0802d3a0

08014cb8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b084      	sub	sp, #16
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
 8014cc0:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8014cc2:	683b      	ldr	r3, [r7, #0]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d005      	beq.n	8014cd4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x1c>
 8014cc8:	4b0a      	ldr	r3, [pc, #40]	; (8014cf4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x3c>)
 8014cca:	4a0b      	ldr	r2, [pc, #44]	; (8014cf8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x40>)
 8014ccc:	2179      	movs	r1, #121	; 0x79
 8014cce:	480b      	ldr	r0, [pc, #44]	; (8014cfc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x44>)
 8014cd0:	f014 f81a 	bl	8028d08 <__assert_func>
        const Stream& stream = streams[handle];
 8014cd4:	683a      	ldr	r2, [r7, #0]
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	00db      	lsls	r3, r3, #3
 8014cda:	4413      	add	r3, r2
 8014cdc:	009b      	lsls	r3, r3, #2
 8014cde:	3308      	adds	r3, #8
 8014ce0:	687a      	ldr	r2, [r7, #4]
 8014ce2:	4413      	add	r3, r2
 8014ce4:	3304      	adds	r3, #4
 8014ce6:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	681b      	ldr	r3, [r3, #0]
    }
 8014cec:	4618      	mov	r0, r3
 8014cee:	3710      	adds	r7, #16
 8014cf0:	46bd      	mov	sp, r7
 8014cf2:	bd80      	pop	{r7, pc}
 8014cf4:	0802d5bc 	.word	0x0802d5bc
 8014cf8:	0802dccc 	.word	0x0802dccc
 8014cfc:	0802d3a0 	.word	0x0802d3a0

08014d00 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	60f8      	str	r0, [r7, #12]
 8014d08:	60b9      	str	r1, [r7, #8]
 8014d0a:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8014d0c:	68bb      	ldr	r3, [r7, #8]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d006      	beq.n	8014d20 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8014d12:	4b0d      	ldr	r3, [pc, #52]	; (8014d48 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8014d14:	4a0d      	ldr	r2, [pc, #52]	; (8014d4c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8014d16:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8014d1a:	480d      	ldr	r0, [pc, #52]	; (8014d50 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 8014d1c:	f013 fff4 	bl	8028d08 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8014d20:	68fa      	ldr	r2, [r7, #12]
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	009b      	lsls	r3, r3, #2
 8014d26:	4413      	add	r3, r2
 8014d28:	6858      	ldr	r0, [r3, #4]
 8014d2a:	68fa      	ldr	r2, [r7, #12]
 8014d2c:	68bb      	ldr	r3, [r7, #8]
 8014d2e:	009b      	lsls	r3, r3, #2
 8014d30:	4413      	add	r3, r2
 8014d32:	685b      	ldr	r3, [r3, #4]
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	3330      	adds	r3, #48	; 0x30
 8014d38:	681b      	ldr	r3, [r3, #0]
 8014d3a:	6879      	ldr	r1, [r7, #4]
 8014d3c:	4798      	blx	r3
    }
 8014d3e:	bf00      	nop
 8014d40:	3710      	adds	r7, #16
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	bf00      	nop
 8014d48:	0802d5bc 	.word	0x0802d5bc
 8014d4c:	0802de7c 	.word	0x0802de7c
 8014d50:	0802d3a0 	.word	0x0802d3a0

08014d54 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8014d54:	b580      	push	{r7, lr}
 8014d56:	b084      	sub	sp, #16
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
 8014d5c:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8014d5e:	683b      	ldr	r3, [r7, #0]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	d006      	beq.n	8014d72 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x1e>
 8014d64:	4b0b      	ldr	r3, [pc, #44]	; (8014d94 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x40>)
 8014d66:	4a0c      	ldr	r2, [pc, #48]	; (8014d98 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x44>)
 8014d68:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8014d6c:	480b      	ldr	r0, [pc, #44]	; (8014d9c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x48>)
 8014d6e:	f013 ffcb 	bl	8028d08 <__assert_func>
        Stream& stream = streams[handle];
 8014d72:	683a      	ldr	r2, [r7, #0]
 8014d74:	4613      	mov	r3, r2
 8014d76:	00db      	lsls	r3, r3, #3
 8014d78:	4413      	add	r3, r2
 8014d7a:	009b      	lsls	r3, r3, #2
 8014d7c:	3308      	adds	r3, #8
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	4413      	add	r3, r2
 8014d82:	3304      	adds	r3, #4
 8014d84:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	7f5b      	ldrb	r3, [r3, #29]
    }
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3710      	adds	r7, #16
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	bd80      	pop	{r7, pc}
 8014d92:	bf00      	nop
 8014d94:	0802d5bc 	.word	0x0802d5bc
 8014d98:	0802e028 	.word	0x0802e028
 8014d9c:	0802d3a0 	.word	0x0802d3a0

08014da0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv>:

    Handle getFreeHandle()
 8014da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014da2:	b08d      	sub	sp, #52	; 0x34
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 8014da8:	2300      	movs	r3, #0
 8014daa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d135      	bne.n	8014e1e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 8014db2:	6879      	ldr	r1, [r7, #4]
 8014db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014db6:	4613      	mov	r3, r2
 8014db8:	00db      	lsls	r3, r3, #3
 8014dba:	4413      	add	r3, r2
 8014dbc:	009b      	lsls	r3, r3, #2
 8014dbe:	440b      	add	r3, r1
 8014dc0:	3328      	adds	r3, #40	; 0x28
 8014dc2:	781b      	ldrb	r3, [r3, #0]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d126      	bne.n	8014e16 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8014dc8:	f107 0308 	add.w	r3, r7, #8
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7ff fca2 	bl	8014716 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>
 8014dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014dd4:	4613      	mov	r3, r2
 8014dd6:	00db      	lsls	r3, r3, #3
 8014dd8:	4413      	add	r3, r2
 8014dda:	009b      	lsls	r3, r3, #2
 8014ddc:	3308      	adds	r3, #8
 8014dde:	687a      	ldr	r2, [r7, #4]
 8014de0:	4413      	add	r3, r2
 8014de2:	3304      	adds	r3, #4
 8014de4:	f107 0408 	add.w	r4, r7, #8
 8014de8:	469c      	mov	ip, r3
 8014dea:	f104 0e20 	add.w	lr, r4, #32
 8014dee:	4665      	mov	r5, ip
 8014df0:	4626      	mov	r6, r4
 8014df2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014df4:	6028      	str	r0, [r5, #0]
 8014df6:	6069      	str	r1, [r5, #4]
 8014df8:	60aa      	str	r2, [r5, #8]
 8014dfa:	60eb      	str	r3, [r5, #12]
 8014dfc:	3410      	adds	r4, #16
 8014dfe:	f10c 0c10 	add.w	ip, ip, #16
 8014e02:	4574      	cmp	r4, lr
 8014e04:	d1f3      	bne.n	8014dee <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x4e>
 8014e06:	4663      	mov	r3, ip
 8014e08:	4622      	mov	r2, r4
 8014e0a:	8811      	ldrh	r1, [r2, #0]
 8014e0c:	7892      	ldrb	r2, [r2, #2]
 8014e0e:	8019      	strh	r1, [r3, #0]
 8014e10:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8014e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e14:	e00a      	b.n	8014e2c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8014e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e18:	3301      	adds	r3, #1
 8014e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014e1c:	e7c6      	b.n	8014dac <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8014e1e:	4b05      	ldr	r3, [pc, #20]	; (8014e34 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x94>)
 8014e20:	4a05      	ldr	r2, [pc, #20]	; (8014e38 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x98>)
 8014e22:	f240 11c5 	movw	r1, #453	; 0x1c5
 8014e26:	4805      	ldr	r0, [pc, #20]	; (8014e3c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x9c>)
 8014e28:	f013 ff6e 	bl	8028d08 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	3734      	adds	r7, #52	; 0x34
 8014e30:	46bd      	mov	sp, r7
 8014e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e34:	0802e1b0 	.word	0x0802e1b0
 8014e38:	0802e1e0 	.word	0x0802e1e0
 8014e3c:	0802d3a0 	.word	0x0802d3a0

08014e40 <_GLOBAL__sub_I_mjpegdecoder1>:
 8014e40:	b580      	push	{r7, lr}
 8014e42:	af00      	add	r7, sp, #0
 8014e44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014e48:	2001      	movs	r0, #1
 8014e4a:	f7ff fcfb 	bl	8014844 <_Z41__static_initialization_and_destruction_0ii>
 8014e4e:	bd80      	pop	{r7, pc}

08014e50 <_GLOBAL__sub_D_mjpegdecoder1>:
 8014e50:	b580      	push	{r7, lr}
 8014e52:	af00      	add	r7, sp, #0
 8014e54:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014e58:	2000      	movs	r0, #0
 8014e5a:	f7ff fcf3 	bl	8014844 <_Z41__static_initialization_and_destruction_0ii>
 8014e5e:	bd80      	pop	{r7, pc}

08014e60 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8014e60:	b480      	push	{r7}
 8014e62:	b083      	sub	sp, #12
 8014e64:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8014e66:	2300      	movs	r3, #0
 8014e68:	607b      	str	r3, [r7, #4]
 8014e6a:	e02e      	b.n	8014eca <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	3b80      	subs	r3, #128	; 0x80
 8014e70:	005b      	lsls	r3, r3, #1
 8014e72:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8014e74:	683b      	ldr	r3, [r7, #0]
 8014e76:	f24b 3274 	movw	r2, #45940	; 0xb374
 8014e7a:	fb02 f303 	mul.w	r3, r2, r3
 8014e7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014e82:	141a      	asrs	r2, r3, #16
 8014e84:	4916      	ldr	r1, [pc, #88]	; (8014ee0 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8014e8c:	683b      	ldr	r3, [r7, #0]
 8014e8e:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8014e92:	fb02 f303 	mul.w	r3, r2, r3
 8014e96:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014e9a:	141a      	asrs	r2, r3, #16
 8014e9c:	4911      	ldr	r1, [pc, #68]	; (8014ee4 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	4a10      	ldr	r2, [pc, #64]	; (8014ee8 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8014ea8:	fb03 f202 	mul.w	r2, r3, r2
 8014eac:	490f      	ldr	r1, [pc, #60]	; (8014eec <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	4a0e      	ldr	r2, [pc, #56]	; (8014ef0 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8014eb8:	fb03 f202 	mul.w	r2, r3, r2
 8014ebc:	490d      	ldr	r1, [pc, #52]	; (8014ef4 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	3301      	adds	r3, #1
 8014ec8:	607b      	str	r3, [r7, #4]
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	2bff      	cmp	r3, #255	; 0xff
 8014ece:	ddcd      	ble.n	8014e6c <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8014ed0:	bf00      	nop
 8014ed2:	bf00      	nop
 8014ed4:	370c      	adds	r7, #12
 8014ed6:	46bd      	mov	sp, r7
 8014ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014edc:	4770      	bx	lr
 8014ede:	bf00      	nop
 8014ee0:	20037ed4 	.word	0x20037ed4
 8014ee4:	200382d4 	.word	0x200382d4
 8014ee8:	ffffa498 	.word	0xffffa498
 8014eec:	200386d4 	.word	0x200386d4
 8014ef0:	ffffd3f4 	.word	0xffffd3f4
 8014ef4:	20038ad4 	.word	0x20038ad4

08014ef8 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8014efc:	f000 f806 	bl	8014f0c <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8014f00:	f000 f888 	bl	8015014 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8014f04:	f7ff ffac 	bl	8014e60 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8014f08:	bf00      	nop
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b083      	sub	sp, #12
 8014f10:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8014f12:	2300      	movs	r3, #0
 8014f14:	607b      	str	r3, [r7, #4]
 8014f16:	e05a      	b.n	8014fce <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8014f1e:	fb02 f303 	mul.w	r3, r2, r3
 8014f22:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014f26:	141a      	asrs	r2, r3, #16
 8014f28:	492e      	ldr	r1, [pc, #184]	; (8014fe4 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f249 6245 	movw	r2, #38469	; 0x9645
 8014f36:	fb02 f303 	mul.w	r3, r2, r3
 8014f3a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014f3e:	141a      	asrs	r2, r3, #16
 8014f40:	4929      	ldr	r1, [pc, #164]	; (8014fe8 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8014f4e:	fb02 f303 	mul.w	r3, r2, r3
 8014f52:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014f56:	141a      	asrs	r2, r3, #16
 8014f58:	4924      	ldr	r1, [pc, #144]	; (8014fec <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	4a23      	ldr	r2, [pc, #140]	; (8014ff0 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8014f64:	fb02 f303 	mul.w	r3, r2, r3
 8014f68:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014f6c:	141a      	asrs	r2, r3, #16
 8014f6e:	4921      	ldr	r1, [pc, #132]	; (8014ff4 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	4a1f      	ldr	r2, [pc, #124]	; (8014ff8 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8014f7a:	fb02 f303 	mul.w	r3, r2, r3
 8014f7e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014f82:	141a      	asrs	r2, r3, #16
 8014f84:	491d      	ldr	r1, [pc, #116]	; (8014ffc <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	3301      	adds	r3, #1
 8014f90:	03db      	lsls	r3, r3, #15
 8014f92:	141a      	asrs	r2, r3, #16
 8014f94:	491a      	ldr	r1, [pc, #104]	; (8015000 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	4a19      	ldr	r2, [pc, #100]	; (8015004 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8014fa0:	fb02 f303 	mul.w	r3, r2, r3
 8014fa4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014fa8:	141a      	asrs	r2, r3, #16
 8014faa:	4917      	ldr	r1, [pc, #92]	; (8015008 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	4a15      	ldr	r2, [pc, #84]	; (801500c <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8014fb6:	fb02 f303 	mul.w	r3, r2, r3
 8014fba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8014fbe:	141a      	asrs	r2, r3, #16
 8014fc0:	4913      	ldr	r1, [pc, #76]	; (8015010 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	3301      	adds	r3, #1
 8014fcc:	607b      	str	r3, [r7, #4]
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	2bff      	cmp	r3, #255	; 0xff
 8014fd2:	dda1      	ble.n	8014f18 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8014fd4:	bf00      	nop
 8014fd6:	bf00      	nop
 8014fd8:	370c      	adds	r7, #12
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fe0:	4770      	bx	lr
 8014fe2:	bf00      	nop
 8014fe4:	20038ed4 	.word	0x20038ed4
 8014fe8:	20039ad4 	.word	0x20039ad4
 8014fec:	2003a6d4 	.word	0x2003a6d4
 8014ff0:	ffffd4d1 	.word	0xffffd4d1
 8014ff4:	200392d4 	.word	0x200392d4
 8014ff8:	ffffab30 	.word	0xffffab30
 8014ffc:	2003a2d4 	.word	0x2003a2d4
 8015000:	200396d4 	.word	0x200396d4
 8015004:	ffff94d1 	.word	0xffff94d1
 8015008:	20039ed4 	.word	0x20039ed4
 801500c:	ffffeb30 	.word	0xffffeb30
 8015010:	2003aad4 	.word	0x2003aad4

08015014 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8015014:	b480      	push	{r7}
 8015016:	b085      	sub	sp, #20
 8015018:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 801501a:	2300      	movs	r3, #0
 801501c:	60fb      	str	r3, [r7, #12]
 801501e:	e036      	b.n	801508e <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8015020:	2300      	movs	r3, #0
 8015022:	60bb      	str	r3, [r7, #8]
 8015024:	e02d      	b.n	8015082 <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	00db      	lsls	r3, r3, #3
 801502a:	68ba      	ldr	r2, [r7, #8]
 801502c:	4413      	add	r3, r2
 801502e:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8015030:	68bb      	ldr	r3, [r7, #8]
 8015032:	2b07      	cmp	r3, #7
 8015034:	d906      	bls.n	8015044 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	2b07      	cmp	r3, #7
 801503a:	d903      	bls.n	8015044 <TGFX_JPEG_Init_MCU_LUT+0x30>
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	3378      	adds	r3, #120	; 0x78
 8015040:	607b      	str	r3, [r7, #4]
 8015042:	e012      	b.n	801506a <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	2b07      	cmp	r3, #7
 8015048:	d906      	bls.n	8015058 <TGFX_JPEG_Init_MCU_LUT+0x44>
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	2b07      	cmp	r3, #7
 801504e:	d803      	bhi.n	8015058 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	3338      	adds	r3, #56	; 0x38
 8015054:	607b      	str	r3, [r7, #4]
 8015056:	e008      	b.n	801506a <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8015058:	68bb      	ldr	r3, [r7, #8]
 801505a:	2b07      	cmp	r3, #7
 801505c:	d805      	bhi.n	801506a <TGFX_JPEG_Init_MCU_LUT+0x56>
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	2b07      	cmp	r3, #7
 8015062:	d902      	bls.n	801506a <TGFX_JPEG_Init_MCU_LUT+0x56>
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	3340      	adds	r3, #64	; 0x40
 8015068:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	011a      	lsls	r2, r3, #4
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	4413      	add	r3, r2
 8015072:	687a      	ldr	r2, [r7, #4]
 8015074:	b291      	uxth	r1, r2
 8015076:	4a62      	ldr	r2, [pc, #392]	; (8015200 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8015078:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	3301      	adds	r3, #1
 8015080:	60bb      	str	r3, [r7, #8]
 8015082:	68bb      	ldr	r3, [r7, #8]
 8015084:	2b0f      	cmp	r3, #15
 8015086:	d9ce      	bls.n	8015026 <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	3301      	adds	r3, #1
 801508c:	60fb      	str	r3, [r7, #12]
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	2b0f      	cmp	r3, #15
 8015092:	d9c5      	bls.n	8015020 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8015094:	2300      	movs	r3, #0
 8015096:	60fb      	str	r3, [r7, #12]
 8015098:	e072      	b.n	8015180 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 801509a:	2300      	movs	r3, #0
 801509c:	60bb      	str	r3, [r7, #8]
 801509e:	e069      	b.n	8015174 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	011b      	lsls	r3, r3, #4
 80150a4:	68ba      	ldr	r2, [r7, #8]
 80150a6:	4413      	add	r3, r2
 80150a8:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 80150aa:	68bb      	ldr	r3, [r7, #8]
 80150ac:	085b      	lsrs	r3, r3, #1
 80150ae:	b29a      	uxth	r2, r3
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	085b      	lsrs	r3, r3, #1
 80150b4:	b29b      	uxth	r3, r3
 80150b6:	00db      	lsls	r3, r3, #3
 80150b8:	b29b      	uxth	r3, r3
 80150ba:	4413      	add	r3, r2
 80150bc:	b29b      	uxth	r3, r3
 80150be:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80150c2:	b299      	uxth	r1, r3
 80150c4:	4a4f      	ldr	r2, [pc, #316]	; (8015204 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 80150cc:	68bb      	ldr	r3, [r7, #8]
 80150ce:	085b      	lsrs	r3, r3, #1
 80150d0:	b29a      	uxth	r2, r3
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	b29b      	uxth	r3, r3
 80150d6:	00db      	lsls	r3, r3, #3
 80150d8:	b29b      	uxth	r3, r3
 80150da:	4413      	add	r3, r2
 80150dc:	b29b      	uxth	r3, r3
 80150de:	3380      	adds	r3, #128	; 0x80
 80150e0:	b299      	uxth	r1, r3
 80150e2:	4a49      	ldr	r2, [pc, #292]	; (8015208 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 80150ea:	68bb      	ldr	r3, [r7, #8]
 80150ec:	085b      	lsrs	r3, r3, #1
 80150ee:	b29a      	uxth	r2, r3
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	085b      	lsrs	r3, r3, #1
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	00db      	lsls	r3, r3, #3
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	4413      	add	r3, r2
 80150fc:	b29b      	uxth	r3, r3
 80150fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8015102:	b299      	uxth	r1, r3
 8015104:	4a41      	ldr	r2, [pc, #260]	; (801520c <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8015106:	687b      	ldr	r3, [r7, #4]
 8015108:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 801510c:	68bb      	ldr	r3, [r7, #8]
 801510e:	085b      	lsrs	r3, r3, #1
 8015110:	b29a      	uxth	r2, r3
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	b29b      	uxth	r3, r3
 8015116:	00db      	lsls	r3, r3, #3
 8015118:	b29b      	uxth	r3, r3
 801511a:	4413      	add	r3, r2
 801511c:	b29b      	uxth	r3, r3
 801511e:	33c0      	adds	r3, #192	; 0xc0
 8015120:	b299      	uxth	r1, r3
 8015122:	4a3b      	ldr	r2, [pc, #236]	; (8015210 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	085b      	lsrs	r3, r3, #1
 801512e:	b29a      	uxth	r2, r3
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	085b      	lsrs	r3, r3, #1
 8015134:	b29b      	uxth	r3, r3
 8015136:	00db      	lsls	r3, r3, #3
 8015138:	b29b      	uxth	r3, r3
 801513a:	4413      	add	r3, r2
 801513c:	b29b      	uxth	r3, r3
 801513e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8015142:	b299      	uxth	r1, r3
 8015144:	4a33      	ldr	r2, [pc, #204]	; (8015214 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 801514c:	68bb      	ldr	r3, [r7, #8]
 801514e:	085b      	lsrs	r3, r3, #1
 8015150:	b29a      	uxth	r2, r3
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	085b      	lsrs	r3, r3, #1
 8015156:	b29b      	uxth	r3, r3
 8015158:	00db      	lsls	r3, r3, #3
 801515a:	b29b      	uxth	r3, r3
 801515c:	4413      	add	r3, r2
 801515e:	b29b      	uxth	r3, r3
 8015160:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015164:	b299      	uxth	r1, r3
 8015166:	4a2c      	ldr	r2, [pc, #176]	; (8015218 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 801516e:	68bb      	ldr	r3, [r7, #8]
 8015170:	3301      	adds	r3, #1
 8015172:	60bb      	str	r3, [r7, #8]
 8015174:	68bb      	ldr	r3, [r7, #8]
 8015176:	2b0f      	cmp	r3, #15
 8015178:	d992      	bls.n	80150a0 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	3301      	adds	r3, #1
 801517e:	60fb      	str	r3, [r7, #12]
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	2b0f      	cmp	r3, #15
 8015184:	d989      	bls.n	801509a <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 8015186:	2300      	movs	r3, #0
 8015188:	60fb      	str	r3, [r7, #12]
 801518a:	e02e      	b.n	80151ea <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 801518c:	2300      	movs	r3, #0
 801518e:	60bb      	str	r3, [r7, #8]
 8015190:	e025      	b.n	80151de <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	00db      	lsls	r3, r3, #3
 8015196:	68ba      	ldr	r2, [r7, #8]
 8015198:	4413      	add	r3, r2
 801519a:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	b299      	uxth	r1, r3
 80151a0:	4a1e      	ldr	r2, [pc, #120]	; (801521c <TGFX_JPEG_Init_MCU_LUT+0x208>)
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	3340      	adds	r3, #64	; 0x40
 80151ae:	b299      	uxth	r1, r3
 80151b0:	4a1b      	ldr	r2, [pc, #108]	; (8015220 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	b29b      	uxth	r3, r3
 80151bc:	3380      	adds	r3, #128	; 0x80
 80151be:	b299      	uxth	r1, r3
 80151c0:	4a18      	ldr	r2, [pc, #96]	; (8015224 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 80151c8:	687b      	ldr	r3, [r7, #4]
 80151ca:	b29b      	uxth	r3, r3
 80151cc:	33c0      	adds	r3, #192	; 0xc0
 80151ce:	b299      	uxth	r1, r3
 80151d0:	4a15      	ldr	r2, [pc, #84]	; (8015228 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 80151d8:	68bb      	ldr	r3, [r7, #8]
 80151da:	3301      	adds	r3, #1
 80151dc:	60bb      	str	r3, [r7, #8]
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	2b07      	cmp	r3, #7
 80151e2:	d9d6      	bls.n	8015192 <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 80151e4:	68fb      	ldr	r3, [r7, #12]
 80151e6:	3301      	adds	r3, #1
 80151e8:	60fb      	str	r3, [r7, #12]
 80151ea:	68fb      	ldr	r3, [r7, #12]
 80151ec:	2b07      	cmp	r3, #7
 80151ee:	d9cd      	bls.n	801518c <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 80151f0:	bf00      	nop
 80151f2:	bf00      	nop
 80151f4:	3714      	adds	r7, #20
 80151f6:	46bd      	mov	sp, r7
 80151f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151fc:	4770      	bx	lr
 80151fe:	bf00      	nop
 8015200:	2003aed4 	.word	0x2003aed4
 8015204:	2003b154 	.word	0x2003b154
 8015208:	2003b354 	.word	0x2003b354
 801520c:	2003b5d4 	.word	0x2003b5d4
 8015210:	2003b7d4 	.word	0x2003b7d4
 8015214:	2003ba54 	.word	0x2003ba54
 8015218:	2003bc54 	.word	0x2003bc54
 801521c:	2003b0d4 	.word	0x2003b0d4
 8015220:	2003b554 	.word	0x2003b554
 8015224:	2003b9d4 	.word	0x2003b9d4
 8015228:	2003be54 	.word	0x2003be54

0801522c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801522c:	8880      	ldrh	r0, [r0, #4]
 801522e:	4770      	bx	lr

08015230 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8015230:	b570      	push	{r4, r5, r6, lr}
 8015232:	6803      	ldr	r3, [r0, #0]
 8015234:	460c      	mov	r4, r1
 8015236:	2100      	movs	r1, #0
 8015238:	4605      	mov	r5, r0
 801523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801523c:	4798      	blx	r3
 801523e:	4606      	mov	r6, r0
 8015240:	682b      	ldr	r3, [r5, #0]
 8015242:	4628      	mov	r0, r5
 8015244:	1ba4      	subs	r4, r4, r6
 8015246:	6a1b      	ldr	r3, [r3, #32]
 8015248:	b2a4      	uxth	r4, r4
 801524a:	4798      	blx	r3
 801524c:	fbb4 f0f0 	udiv	r0, r4, r0
 8015250:	bd70      	pop	{r4, r5, r6, pc}

08015252 <_ZN8touchgfx17AbstractPartition5clearEv>:
 8015252:	2300      	movs	r3, #0
 8015254:	8083      	strh	r3, [r0, #4]
 8015256:	4770      	bx	lr

08015258 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8015258:	b510      	push	{r4, lr}
 801525a:	6803      	ldr	r3, [r0, #0]
 801525c:	4604      	mov	r4, r0
 801525e:	8881      	ldrh	r1, [r0, #4]
 8015260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015262:	4798      	blx	r3
 8015264:	88a3      	ldrh	r3, [r4, #4]
 8015266:	3301      	adds	r3, #1
 8015268:	80a3      	strh	r3, [r4, #4]
 801526a:	bd10      	pop	{r4, pc}

0801526c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801526c:	6803      	ldr	r3, [r0, #0]
 801526e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015270:	4718      	bx	r3

08015272 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 8015272:	4770      	bx	lr

08015274 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8015274:	4a02      	ldr	r2, [pc, #8]	; (8015280 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8015276:	6002      	str	r2, [r0, #0]
 8015278:	2200      	movs	r2, #0
 801527a:	8082      	strh	r2, [r0, #4]
 801527c:	4770      	bx	lr
 801527e:	bf00      	nop
 8015280:	0802f1bc 	.word	0x0802f1bc

08015284 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 8015284:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015286:	2000      	movs	r0, #0
 8015288:	b12b      	cbz	r3, 8015296 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801528a:	b920      	cbnz	r0, 8015296 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 801528c:	1a5a      	subs	r2, r3, r1
 801528e:	699b      	ldr	r3, [r3, #24]
 8015290:	4250      	negs	r0, r2
 8015292:	4150      	adcs	r0, r2
 8015294:	e7f8      	b.n	8015288 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 8015296:	4770      	bx	lr

08015298 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 8015298:	2300      	movs	r3, #0
 801529a:	6148      	str	r0, [r1, #20]
 801529c:	618b      	str	r3, [r1, #24]
 801529e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80152a0:	b913      	cbnz	r3, 80152a8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80152a2:	6281      	str	r1, [r0, #40]	; 0x28
 80152a4:	4770      	bx	lr
 80152a6:	4613      	mov	r3, r2
 80152a8:	699a      	ldr	r2, [r3, #24]
 80152aa:	2a00      	cmp	r2, #0
 80152ac:	d1fb      	bne.n	80152a6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80152ae:	6199      	str	r1, [r3, #24]
 80152b0:	4770      	bx	lr

080152b2 <_ZN8touchgfx9Container9removeAllEv>:
 80152b2:	2200      	movs	r2, #0
 80152b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80152b6:	b123      	cbz	r3, 80152c2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80152b8:	6999      	ldr	r1, [r3, #24]
 80152ba:	6281      	str	r1, [r0, #40]	; 0x28
 80152bc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80152c0:	e7f8      	b.n	80152b4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80152c2:	4770      	bx	lr

080152c4 <_ZN8touchgfx9Container6unlinkEv>:
 80152c4:	2300      	movs	r3, #0
 80152c6:	6283      	str	r3, [r0, #40]	; 0x28
 80152c8:	4770      	bx	lr

080152ca <_ZNK8touchgfx9Container12getSolidRectEv>:
 80152ca:	2200      	movs	r2, #0
 80152cc:	8002      	strh	r2, [r0, #0]
 80152ce:	8042      	strh	r2, [r0, #2]
 80152d0:	8082      	strh	r2, [r0, #4]
 80152d2:	80c2      	strh	r2, [r0, #6]
 80152d4:	4770      	bx	lr

080152d6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80152d6:	b570      	push	{r4, r5, r6, lr}
 80152d8:	460d      	mov	r5, r1
 80152da:	4616      	mov	r6, r2
 80152dc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80152de:	b13c      	cbz	r4, 80152f0 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 80152e0:	6823      	ldr	r3, [r4, #0]
 80152e2:	4620      	mov	r0, r4
 80152e4:	4632      	mov	r2, r6
 80152e6:	4629      	mov	r1, r5
 80152e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80152ea:	4798      	blx	r3
 80152ec:	69a4      	ldr	r4, [r4, #24]
 80152ee:	e7f6      	b.n	80152de <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 80152f0:	bd70      	pop	{r4, r5, r6, pc}

080152f2 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 80152f2:	b538      	push	{r3, r4, r5, lr}
 80152f4:	460d      	mov	r5, r1
 80152f6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80152f8:	b134      	cbz	r4, 8015308 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 80152fa:	682b      	ldr	r3, [r5, #0]
 80152fc:	4621      	mov	r1, r4
 80152fe:	4628      	mov	r0, r5
 8015300:	689b      	ldr	r3, [r3, #8]
 8015302:	4798      	blx	r3
 8015304:	69a4      	ldr	r4, [r4, #24]
 8015306:	e7f7      	b.n	80152f8 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8015308:	bd38      	pop	{r3, r4, r5, pc}

0801530a <_ZNK8touchgfx9Container17invalidateContentEv>:
 801530a:	b510      	push	{r4, lr}
 801530c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801530e:	b12c      	cbz	r4, 801531c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8015310:	6823      	ldr	r3, [r4, #0]
 8015312:	4620      	mov	r0, r4
 8015314:	699b      	ldr	r3, [r3, #24]
 8015316:	4798      	blx	r3
 8015318:	69a4      	ldr	r4, [r4, #24]
 801531a:	e7f8      	b.n	801530e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 801531c:	bd10      	pop	{r4, pc}

0801531e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801531e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015320:	b19b      	cbz	r3, 801534a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8015322:	428b      	cmp	r3, r1
 8015324:	d109      	bne.n	801533a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8015326:	699a      	ldr	r2, [r3, #24]
 8015328:	2100      	movs	r1, #0
 801532a:	6159      	str	r1, [r3, #20]
 801532c:	6282      	str	r2, [r0, #40]	; 0x28
 801532e:	b902      	cbnz	r2, 8015332 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8015330:	4770      	bx	lr
 8015332:	6199      	str	r1, [r3, #24]
 8015334:	4770      	bx	lr
 8015336:	4613      	mov	r3, r2
 8015338:	b13a      	cbz	r2, 801534a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801533a:	699a      	ldr	r2, [r3, #24]
 801533c:	428a      	cmp	r2, r1
 801533e:	d1fa      	bne.n	8015336 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8015340:	698a      	ldr	r2, [r1, #24]
 8015342:	619a      	str	r2, [r3, #24]
 8015344:	2300      	movs	r3, #0
 8015346:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801534a:	4770      	bx	lr

0801534c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801534c:	b410      	push	{r4}
 801534e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8015350:	4604      	mov	r4, r0
 8015352:	b92b      	cbnz	r3, 8015360 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8015354:	6803      	ldr	r3, [r0, #0]
 8015356:	4611      	mov	r1, r2
 8015358:	f85d 4b04 	ldr.w	r4, [sp], #4
 801535c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801535e:	4718      	bx	r3
 8015360:	b941      	cbnz	r1, 8015374 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 8015362:	6193      	str	r3, [r2, #24]
 8015364:	6282      	str	r2, [r0, #40]	; 0x28
 8015366:	6154      	str	r4, [r2, #20]
 8015368:	f85d 4b04 	ldr.w	r4, [sp], #4
 801536c:	4770      	bx	lr
 801536e:	4603      	mov	r3, r0
 8015370:	2800      	cmp	r0, #0
 8015372:	d0f9      	beq.n	8015368 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8015374:	4299      	cmp	r1, r3
 8015376:	6998      	ldr	r0, [r3, #24]
 8015378:	d1f9      	bne.n	801536e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 801537a:	6190      	str	r0, [r2, #24]
 801537c:	618a      	str	r2, [r1, #24]
 801537e:	e7f2      	b.n	8015366 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

08015380 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 8015380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015384:	461f      	mov	r7, r3
 8015386:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 801538a:	460d      	mov	r5, r1
 801538c:	4616      	mov	r6, r2
 801538e:	b103      	cbz	r3, 8015392 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 8015390:	6038      	str	r0, [r7, #0]
 8015392:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015394:	b314      	cbz	r4, 80153dc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 8015396:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801539a:	b1eb      	cbz	r3, 80153d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 801539c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80153a0:	428d      	cmp	r5, r1
 80153a2:	db19      	blt.n	80153d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80153a4:	b289      	uxth	r1, r1
 80153a6:	8923      	ldrh	r3, [r4, #8]
 80153a8:	440b      	add	r3, r1
 80153aa:	b21b      	sxth	r3, r3
 80153ac:	429d      	cmp	r5, r3
 80153ae:	da13      	bge.n	80153d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80153b0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80153b4:	4296      	cmp	r6, r2
 80153b6:	db0f      	blt.n	80153d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80153b8:	b292      	uxth	r2, r2
 80153ba:	8963      	ldrh	r3, [r4, #10]
 80153bc:	4413      	add	r3, r2
 80153be:	b21b      	sxth	r3, r3
 80153c0:	429e      	cmp	r6, r3
 80153c2:	da09      	bge.n	80153d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80153c4:	6823      	ldr	r3, [r4, #0]
 80153c6:	1ab2      	subs	r2, r6, r2
 80153c8:	1a69      	subs	r1, r5, r1
 80153ca:	4620      	mov	r0, r4
 80153cc:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80153d0:	b212      	sxth	r2, r2
 80153d2:	463b      	mov	r3, r7
 80153d4:	b209      	sxth	r1, r1
 80153d6:	47c0      	blx	r8
 80153d8:	69a4      	ldr	r4, [r4, #24]
 80153da:	e7db      	b.n	8015394 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80153dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080153e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80153e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153e4:	4c6d      	ldr	r4, [pc, #436]	; (801559c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 80153e6:	b0a1      	sub	sp, #132	; 0x84
 80153e8:	4606      	mov	r6, r0
 80153ea:	6824      	ldr	r4, [r4, #0]
 80153ec:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80153ee:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80153f2:	2400      	movs	r4, #0
 80153f4:	9303      	str	r3, [sp, #12]
 80153f6:	802c      	strh	r4, [r5, #0]
 80153f8:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 80153fa:	802c      	strh	r4, [r5, #0]
 80153fc:	601c      	str	r4, [r3, #0]
 80153fe:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8015402:	f7ff ffbd 	bl	8015380 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015406:	f1b9 0f03 	cmp.w	r9, #3
 801540a:	f340 80c1 	ble.w	8015590 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801540e:	4631      	mov	r1, r6
 8015410:	a80c      	add	r0, sp, #48	; 0x30
 8015412:	f005 fe61 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015416:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801541a:	9306      	str	r3, [sp, #24]
 801541c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8015420:	9307      	str	r3, [sp, #28]
 8015422:	9b03      	ldr	r3, [sp, #12]
 8015424:	f8d3 a000 	ldr.w	sl, [r3]
 8015428:	f1ba 0f00 	cmp.w	sl, #0
 801542c:	f000 80b3 	beq.w	8015596 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8015430:	4651      	mov	r1, sl
 8015432:	a810      	add	r0, sp, #64	; 0x40
 8015434:	f005 fe50 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015438:	2002      	movs	r0, #2
 801543a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801543e:	9b01      	ldr	r3, [sp, #4]
 8015440:	9a06      	ldr	r2, [sp, #24]
 8015442:	fb91 f1f0 	sdiv	r1, r1, r0
 8015446:	189d      	adds	r5, r3, r2
 8015448:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801544c:	9a07      	ldr	r2, [sp, #28]
 801544e:	4419      	add	r1, r3
 8015450:	9b02      	ldr	r3, [sp, #8]
 8015452:	4413      	add	r3, r2
 8015454:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8015458:	1a6d      	subs	r5, r5, r1
 801545a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801545e:	fb92 f2f0 	sdiv	r2, r2, r0
 8015462:	440a      	add	r2, r1
 8015464:	1a9b      	subs	r3, r3, r2
 8015466:	435b      	muls	r3, r3
 8015468:	fb05 3505 	mla	r5, r5, r5, r3
 801546c:	4f4c      	ldr	r7, [pc, #304]	; (80155a0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 801546e:	ac10      	add	r4, sp, #64	; 0x40
 8015470:	f1b9 0f0c 	cmp.w	r9, #12
 8015474:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8015476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015478:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801547a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801547c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801547e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8015480:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 8015484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8015488:	f04f 0303 	mov.w	r3, #3
 801548c:	bfd8      	it	le
 801548e:	f109 32ff 	addle.w	r2, r9, #4294967295
 8015492:	f04f 0400 	mov.w	r4, #0
 8015496:	f8cd 9000 	str.w	r9, [sp]
 801549a:	bfcc      	ite	gt
 801549c:	4698      	movgt	r8, r3
 801549e:	fb92 f8f3 	sdivle	r8, r2, r3
 80154a2:	1c63      	adds	r3, r4, #1
 80154a4:	aa10      	add	r2, sp, #64	; 0x40
 80154a6:	f004 0401 	and.w	r4, r4, #1
 80154aa:	f04f 0b00 	mov.w	fp, #0
 80154ae:	9308      	str	r3, [sp, #32]
 80154b0:	9b00      	ldr	r3, [sp, #0]
 80154b2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80154b6:	fb93 f3f8 	sdiv	r3, r3, r8
 80154ba:	3404      	adds	r4, #4
 80154bc:	b29b      	uxth	r3, r3
 80154be:	9304      	str	r3, [sp, #16]
 80154c0:	9a04      	ldr	r2, [sp, #16]
 80154c2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80154c6:	fb13 f302 	smulbb	r3, r3, r2
 80154ca:	9a01      	ldr	r2, [sp, #4]
 80154cc:	b29b      	uxth	r3, r3
 80154ce:	1899      	adds	r1, r3, r2
 80154d0:	9305      	str	r3, [sp, #20]
 80154d2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80154d6:	b209      	sxth	r1, r1
 80154d8:	4299      	cmp	r1, r3
 80154da:	db4d      	blt.n	8015578 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80154dc:	8932      	ldrh	r2, [r6, #8]
 80154de:	4413      	add	r3, r2
 80154e0:	b21b      	sxth	r3, r3
 80154e2:	4299      	cmp	r1, r3
 80154e4:	da48      	bge.n	8015578 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80154e6:	9b04      	ldr	r3, [sp, #16]
 80154e8:	6827      	ldr	r7, [r4, #0]
 80154ea:	fb17 f703 	smulbb	r7, r7, r3
 80154ee:	9b02      	ldr	r3, [sp, #8]
 80154f0:	b2bf      	uxth	r7, r7
 80154f2:	18fa      	adds	r2, r7, r3
 80154f4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80154f8:	b212      	sxth	r2, r2
 80154fa:	429a      	cmp	r2, r3
 80154fc:	db3c      	blt.n	8015578 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 80154fe:	8970      	ldrh	r0, [r6, #10]
 8015500:	4403      	add	r3, r0
 8015502:	b21b      	sxth	r3, r3
 8015504:	429a      	cmp	r2, r3
 8015506:	da37      	bge.n	8015578 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015508:	2300      	movs	r3, #0
 801550a:	4630      	mov	r0, r6
 801550c:	930b      	str	r3, [sp, #44]	; 0x2c
 801550e:	ab0b      	add	r3, sp, #44	; 0x2c
 8015510:	f7ff ff36 	bl	8015380 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8015514:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8015516:	b37a      	cbz	r2, 8015578 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8015518:	4552      	cmp	r2, sl
 801551a:	d02d      	beq.n	8015578 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801551c:	4611      	mov	r1, r2
 801551e:	a80e      	add	r0, sp, #56	; 0x38
 8015520:	9209      	str	r2, [sp, #36]	; 0x24
 8015522:	f005 fdd9 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015526:	f04f 0e02 	mov.w	lr, #2
 801552a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801552e:	9a06      	ldr	r2, [sp, #24]
 8015530:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8015534:	9b01      	ldr	r3, [sp, #4]
 8015536:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801553a:	4413      	add	r3, r2
 801553c:	9a07      	ldr	r2, [sp, #28]
 801553e:	fb91 f1fe 	sdiv	r1, r1, lr
 8015542:	fb9c fcfe 	sdiv	ip, ip, lr
 8015546:	4401      	add	r1, r0
 8015548:	1a58      	subs	r0, r3, r1
 801554a:	9b02      	ldr	r3, [sp, #8]
 801554c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8015550:	4413      	add	r3, r2
 8015552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015554:	448c      	add	ip, r1
 8015556:	eba3 030c 	sub.w	r3, r3, ip
 801555a:	435b      	muls	r3, r3
 801555c:	fb00 3300 	mla	r3, r0, r0, r3
 8015560:	42ab      	cmp	r3, r5
 8015562:	d208      	bcs.n	8015576 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 8015564:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015566:	461d      	mov	r5, r3
 8015568:	9803      	ldr	r0, [sp, #12]
 801556a:	6001      	str	r1, [r0, #0]
 801556c:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801556e:	9805      	ldr	r0, [sp, #20]
 8015570:	8008      	strh	r0, [r1, #0]
 8015572:	992b      	ldr	r1, [sp, #172]	; 0xac
 8015574:	800f      	strh	r7, [r1, #0]
 8015576:	4692      	mov	sl, r2
 8015578:	f10b 0b01 	add.w	fp, fp, #1
 801557c:	3408      	adds	r4, #8
 801557e:	f1bb 0f04 	cmp.w	fp, #4
 8015582:	d19d      	bne.n	80154c0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 8015584:	9b00      	ldr	r3, [sp, #0]
 8015586:	9c08      	ldr	r4, [sp, #32]
 8015588:	444b      	add	r3, r9
 801558a:	4544      	cmp	r4, r8
 801558c:	9300      	str	r3, [sp, #0]
 801558e:	d188      	bne.n	80154a2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 8015590:	b021      	add	sp, #132	; 0x84
 8015592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015596:	f04f 35ff 	mov.w	r5, #4294967295
 801559a:	e767      	b.n	801546c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 801559c:	2003bee0 	.word	0x2003bee0
 80155a0:	0802e364 	.word	0x0802e364

080155a4 <_ZN8touchgfx4RectaNERKS0_>:
 80155a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80155a8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80155ac:	888c      	ldrh	r4, [r1, #4]
 80155ae:	f9b0 9000 	ldrsh.w	r9, [r0]
 80155b2:	443c      	add	r4, r7
 80155b4:	b2a4      	uxth	r4, r4
 80155b6:	fa0f f884 	sxth.w	r8, r4
 80155ba:	45c1      	cmp	r9, r8
 80155bc:	da2f      	bge.n	801561e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80155be:	8882      	ldrh	r2, [r0, #4]
 80155c0:	444a      	add	r2, r9
 80155c2:	b292      	uxth	r2, r2
 80155c4:	fa0f fe82 	sxth.w	lr, r2
 80155c8:	4577      	cmp	r7, lr
 80155ca:	da28      	bge.n	801561e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80155cc:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80155d0:	88cb      	ldrh	r3, [r1, #6]
 80155d2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80155d6:	442b      	add	r3, r5
 80155d8:	b21b      	sxth	r3, r3
 80155da:	429e      	cmp	r6, r3
 80155dc:	da1f      	bge.n	801561e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80155de:	88c3      	ldrh	r3, [r0, #6]
 80155e0:	4433      	add	r3, r6
 80155e2:	b29b      	uxth	r3, r3
 80155e4:	fa0f fc83 	sxth.w	ip, r3
 80155e8:	4565      	cmp	r5, ip
 80155ea:	da18      	bge.n	801561e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80155ec:	454f      	cmp	r7, r9
 80155ee:	bfb8      	it	lt
 80155f0:	464f      	movlt	r7, r9
 80155f2:	42b5      	cmp	r5, r6
 80155f4:	bfb8      	it	lt
 80155f6:	4635      	movlt	r5, r6
 80155f8:	45f0      	cmp	r8, lr
 80155fa:	bfd8      	it	le
 80155fc:	4622      	movle	r2, r4
 80155fe:	1bd2      	subs	r2, r2, r7
 8015600:	8082      	strh	r2, [r0, #4]
 8015602:	884a      	ldrh	r2, [r1, #2]
 8015604:	88c9      	ldrh	r1, [r1, #6]
 8015606:	8007      	strh	r7, [r0, #0]
 8015608:	440a      	add	r2, r1
 801560a:	8045      	strh	r5, [r0, #2]
 801560c:	b292      	uxth	r2, r2
 801560e:	b211      	sxth	r1, r2
 8015610:	458c      	cmp	ip, r1
 8015612:	bfa8      	it	ge
 8015614:	4613      	movge	r3, r2
 8015616:	1b5b      	subs	r3, r3, r5
 8015618:	80c3      	strh	r3, [r0, #6]
 801561a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801561e:	2300      	movs	r3, #0
 8015620:	8003      	strh	r3, [r0, #0]
 8015622:	8043      	strh	r3, [r0, #2]
 8015624:	8083      	strh	r3, [r0, #4]
 8015626:	80c3      	strh	r3, [r0, #6]
 8015628:	e7f7      	b.n	801561a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801562a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801562a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801562e:	2b00      	cmp	r3, #0
 8015630:	dd06      	ble.n	8015640 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8015632:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8015636:	2800      	cmp	r0, #0
 8015638:	bfcc      	ite	gt
 801563a:	2000      	movgt	r0, #0
 801563c:	2001      	movle	r0, #1
 801563e:	4770      	bx	lr
 8015640:	2001      	movs	r0, #1
 8015642:	4770      	bx	lr

08015644 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8015644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015648:	2300      	movs	r3, #0
 801564a:	4604      	mov	r4, r0
 801564c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801564e:	8003      	strh	r3, [r0, #0]
 8015650:	8043      	strh	r3, [r0, #2]
 8015652:	8083      	strh	r3, [r0, #4]
 8015654:	80c3      	strh	r3, [r0, #6]
 8015656:	2d00      	cmp	r5, #0
 8015658:	d040      	beq.n	80156dc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 801565a:	1d28      	adds	r0, r5, #4
 801565c:	f7ff ffe5 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015660:	b988      	cbnz	r0, 8015686 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 8015662:	4620      	mov	r0, r4
 8015664:	f7ff ffe1 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015668:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 801566c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8015670:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 8015674:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8015678:	b138      	cbz	r0, 801568a <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 801567a:	8022      	strh	r2, [r4, #0]
 801567c:	8063      	strh	r3, [r4, #2]
 801567e:	f8a4 e004 	strh.w	lr, [r4, #4]
 8015682:	f8a4 c006 	strh.w	ip, [r4, #6]
 8015686:	69ad      	ldr	r5, [r5, #24]
 8015688:	e7e5      	b.n	8015656 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 801568a:	f9b4 0000 	ldrsh.w	r0, [r4]
 801568e:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015692:	4290      	cmp	r0, r2
 8015694:	4607      	mov	r7, r0
 8015696:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801569a:	460e      	mov	r6, r1
 801569c:	bfa8      	it	ge
 801569e:	4617      	movge	r7, r2
 80156a0:	4299      	cmp	r1, r3
 80156a2:	4472      	add	r2, lr
 80156a4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80156a8:	bfa8      	it	ge
 80156aa:	461e      	movge	r6, r3
 80156ac:	4440      	add	r0, r8
 80156ae:	4471      	add	r1, lr
 80156b0:	4463      	add	r3, ip
 80156b2:	b200      	sxth	r0, r0
 80156b4:	8027      	strh	r7, [r4, #0]
 80156b6:	b212      	sxth	r2, r2
 80156b8:	8066      	strh	r6, [r4, #2]
 80156ba:	b209      	sxth	r1, r1
 80156bc:	b21b      	sxth	r3, r3
 80156be:	4290      	cmp	r0, r2
 80156c0:	bfac      	ite	ge
 80156c2:	ebc7 0200 	rsbge	r2, r7, r0
 80156c6:	ebc7 0202 	rsblt	r2, r7, r2
 80156ca:	4299      	cmp	r1, r3
 80156cc:	bfac      	ite	ge
 80156ce:	ebc6 0301 	rsbge	r3, r6, r1
 80156d2:	ebc6 0303 	rsblt	r3, r6, r3
 80156d6:	80a2      	strh	r2, [r4, #4]
 80156d8:	80e3      	strh	r3, [r4, #6]
 80156da:	e7d4      	b.n	8015686 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80156dc:	4620      	mov	r0, r4
 80156de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080156e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80156e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80156e6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80156ea:	b383      	cbz	r3, 801574e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80156ec:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80156ee:	b374      	cbz	r4, 801574e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80156f0:	f9b1 5000 	ldrsh.w	r5, [r1]
 80156f4:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 80156f8:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 80156fc:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8015700:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015704:	b303      	cbz	r3, 8015748 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015706:	4668      	mov	r0, sp
 8015708:	1d21      	adds	r1, r4, #4
 801570a:	f8ad 5000 	strh.w	r5, [sp]
 801570e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8015712:	f8ad 7004 	strh.w	r7, [sp, #4]
 8015716:	f8ad 8006 	strh.w	r8, [sp, #6]
 801571a:	f7ff ff43 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 801571e:	4668      	mov	r0, sp
 8015720:	f7ff ff83 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015724:	b980      	cbnz	r0, 8015748 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8015726:	f8bd 3000 	ldrh.w	r3, [sp]
 801572a:	4669      	mov	r1, sp
 801572c:	88a2      	ldrh	r2, [r4, #4]
 801572e:	4620      	mov	r0, r4
 8015730:	1a9b      	subs	r3, r3, r2
 8015732:	88e2      	ldrh	r2, [r4, #6]
 8015734:	f8ad 3000 	strh.w	r3, [sp]
 8015738:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801573c:	1a9b      	subs	r3, r3, r2
 801573e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015742:	6823      	ldr	r3, [r4, #0]
 8015744:	689b      	ldr	r3, [r3, #8]
 8015746:	4798      	blx	r3
 8015748:	69a4      	ldr	r4, [r4, #24]
 801574a:	2c00      	cmp	r4, #0
 801574c:	d1d8      	bne.n	8015700 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801574e:	b002      	add	sp, #8
 8015750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015754 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8015754:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015756:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801575a:	460d      	mov	r5, r1
 801575c:	4616      	mov	r6, r2
 801575e:	b323      	cbz	r3, 80157aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015760:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8015762:	b314      	cbz	r4, 80157aa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8015764:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8015768:	b1eb      	cbz	r3, 80157a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801576a:	6828      	ldr	r0, [r5, #0]
 801576c:	466b      	mov	r3, sp
 801576e:	6869      	ldr	r1, [r5, #4]
 8015770:	c303      	stmia	r3!, {r0, r1}
 8015772:	4668      	mov	r0, sp
 8015774:	1d21      	adds	r1, r4, #4
 8015776:	f7ff ff15 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 801577a:	4668      	mov	r0, sp
 801577c:	f7ff ff55 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 8015780:	b988      	cbnz	r0, 80157a6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8015782:	f8bd 3000 	ldrh.w	r3, [sp]
 8015786:	4669      	mov	r1, sp
 8015788:	88a2      	ldrh	r2, [r4, #4]
 801578a:	4620      	mov	r0, r4
 801578c:	1a9b      	subs	r3, r3, r2
 801578e:	88e2      	ldrh	r2, [r4, #6]
 8015790:	f8ad 3000 	strh.w	r3, [sp]
 8015794:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8015798:	1a9b      	subs	r3, r3, r2
 801579a:	4632      	mov	r2, r6
 801579c:	f8ad 3002 	strh.w	r3, [sp, #2]
 80157a0:	6823      	ldr	r3, [r4, #0]
 80157a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80157a4:	4798      	blx	r3
 80157a6:	69a4      	ldr	r4, [r4, #24]
 80157a8:	e7db      	b.n	8015762 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80157aa:	b002      	add	sp, #8
 80157ac:	bd70      	pop	{r4, r5, r6, pc}

080157ae <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80157ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80157b2:	4770      	bx	lr

080157b4 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 80157b4:	4770      	bx	lr

080157b6 <_ZN8touchgfx3HAL10FlushCacheEv>:
 80157b6:	4770      	bx	lr

080157b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80157b8:	6803      	ldr	r3, [r0, #0]
 80157ba:	b513      	push	{r0, r1, r4, lr}
 80157bc:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80157c0:	2300      	movs	r3, #0
 80157c2:	e9cd 3300 	strd	r3, r3, [sp]
 80157c6:	466b      	mov	r3, sp
 80157c8:	47a0      	blx	r4
 80157ca:	b002      	add	sp, #8
 80157cc:	bd10      	pop	{r4, pc}

080157ce <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80157ce:	2301      	movs	r3, #1
 80157d0:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80157d4:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80157d8:	4770      	bx	lr

080157da <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80157da:	2301      	movs	r3, #1
 80157dc:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80157e0:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80157e4:	4770      	bx	lr

080157e6 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80157e6:	6843      	ldr	r3, [r0, #4]
 80157e8:	2201      	movs	r2, #1
 80157ea:	725a      	strb	r2, [r3, #9]
 80157ec:	6840      	ldr	r0, [r0, #4]
 80157ee:	6803      	ldr	r3, [r0, #0]
 80157f0:	691b      	ldr	r3, [r3, #16]
 80157f2:	4718      	bx	r3

080157f4 <_ZN8touchgfx3HAL8flushDMAEv>:
 80157f4:	6840      	ldr	r0, [r0, #4]
 80157f6:	6803      	ldr	r3, [r0, #0]
 80157f8:	689b      	ldr	r3, [r3, #8]
 80157fa:	4718      	bx	r3

080157fc <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80157fc:	b530      	push	{r4, r5, lr}
 80157fe:	b08b      	sub	sp, #44	; 0x2c
 8015800:	6804      	ldr	r4, [r0, #0]
 8015802:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8015806:	9509      	str	r5, [sp, #36]	; 0x24
 8015808:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801580c:	9508      	str	r5, [sp, #32]
 801580e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8015812:	9507      	str	r5, [sp, #28]
 8015814:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8015818:	9506      	str	r5, [sp, #24]
 801581a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801581e:	9505      	str	r5, [sp, #20]
 8015820:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8015824:	9504      	str	r5, [sp, #16]
 8015826:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801582a:	9503      	str	r5, [sp, #12]
 801582c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8015830:	9502      	str	r5, [sp, #8]
 8015832:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8015836:	e9cd 3500 	strd	r3, r5, [sp]
 801583a:	4613      	mov	r3, r2
 801583c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801583e:	2200      	movs	r2, #0
 8015840:	47a0      	blx	r4
 8015842:	b00b      	add	sp, #44	; 0x2c
 8015844:	bd30      	pop	{r4, r5, pc}
	...

08015848 <_ZN8touchgfx3HAL10beginFrameEv>:
 8015848:	4b04      	ldr	r3, [pc, #16]	; (801585c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801584a:	781b      	ldrb	r3, [r3, #0]
 801584c:	b123      	cbz	r3, 8015858 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801584e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8015852:	f080 0001 	eor.w	r0, r0, #1
 8015856:	4770      	bx	lr
 8015858:	2001      	movs	r0, #1
 801585a:	4770      	bx	lr
 801585c:	2003bede 	.word	0x2003bede

08015860 <_ZN8touchgfx3HAL8endFrameEv>:
 8015860:	b510      	push	{r4, lr}
 8015862:	4604      	mov	r4, r0
 8015864:	6840      	ldr	r0, [r0, #4]
 8015866:	6803      	ldr	r3, [r0, #0]
 8015868:	689b      	ldr	r3, [r3, #8]
 801586a:	4798      	blx	r3
 801586c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8015870:	b113      	cbz	r3, 8015878 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 8015872:	2301      	movs	r3, #1
 8015874:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8015878:	bd10      	pop	{r4, pc}

0801587a <_ZN8touchgfx3HAL10initializeEv>:
 801587a:	b510      	push	{r4, lr}
 801587c:	4604      	mov	r4, r0
 801587e:	f7fd f953 	bl	8012b28 <_ZN8touchgfx10OSWrappers10initializeEv>
 8015882:	6860      	ldr	r0, [r4, #4]
 8015884:	6803      	ldr	r3, [r0, #0]
 8015886:	68db      	ldr	r3, [r3, #12]
 8015888:	4798      	blx	r3
 801588a:	68e0      	ldr	r0, [r4, #12]
 801588c:	6803      	ldr	r3, [r0, #0]
 801588e:	689b      	ldr	r3, [r3, #8]
 8015890:	4798      	blx	r3
 8015892:	6823      	ldr	r3, [r4, #0]
 8015894:	4620      	mov	r0, r4
 8015896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801589c:	4718      	bx	r3

0801589e <_ZN8touchgfx3HAL9taskEntryEv>:
 801589e:	b508      	push	{r3, lr}
 80158a0:	6803      	ldr	r3, [r0, #0]
 80158a2:	4604      	mov	r4, r0
 80158a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80158a8:	4798      	blx	r3
 80158aa:	6823      	ldr	r3, [r4, #0]
 80158ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80158ae:	4620      	mov	r0, r4
 80158b0:	4798      	blx	r3
 80158b2:	f7fd f9af 	bl	8012c14 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80158b6:	6823      	ldr	r3, [r4, #0]
 80158b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80158ba:	e7f8      	b.n	80158ae <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080158bc <_ZN8touchgfx3HAL4tickEv>:
 80158bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80158be:	6803      	ldr	r3, [r0, #0]
 80158c0:	4604      	mov	r4, r0
 80158c2:	4d5b      	ldr	r5, [pc, #364]	; (8015a30 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80158c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80158c8:	4798      	blx	r3
 80158ca:	2800      	cmp	r0, #0
 80158cc:	f000 8095 	beq.w	80159fa <_ZN8touchgfx3HAL4tickEv+0x13e>
 80158d0:	2001      	movs	r0, #1
 80158d2:	2600      	movs	r6, #0
 80158d4:	f7fb feac 	bl	8011630 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80158d8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80158dc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80158e0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80158e4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80158e8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80158ec:	b133      	cbz	r3, 80158fc <_ZN8touchgfx3HAL4tickEv+0x40>
 80158ee:	6823      	ldr	r3, [r4, #0]
 80158f0:	4620      	mov	r0, r4
 80158f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80158f6:	4798      	blx	r3
 80158f8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80158fc:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8015900:	2601      	movs	r6, #1
 8015902:	6862      	ldr	r2, [r4, #4]
 8015904:	f083 0301 	eor.w	r3, r3, #1
 8015908:	702e      	strb	r6, [r5, #0]
 801590a:	7253      	strb	r3, [r2, #9]
 801590c:	f004 fbb0 	bl	801a070 <_ZN8touchgfx11Application11getInstanceEv>
 8015910:	6803      	ldr	r3, [r0, #0]
 8015912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015914:	4798      	blx	r3
 8015916:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801591a:	b90b      	cbnz	r3, 8015920 <_ZN8touchgfx3HAL4tickEv+0x64>
 801591c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8015920:	f004 fba6 	bl	801a070 <_ZN8touchgfx11Application11getInstanceEv>
 8015924:	6803      	ldr	r3, [r0, #0]
 8015926:	695b      	ldr	r3, [r3, #20]
 8015928:	4798      	blx	r3
 801592a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801592c:	6803      	ldr	r3, [r0, #0]
 801592e:	691b      	ldr	r3, [r3, #16]
 8015930:	4798      	blx	r3
 8015932:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8015936:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801593a:	3b01      	subs	r3, #1
 801593c:	b2db      	uxtb	r3, r3
 801593e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8015942:	b10a      	cbz	r2, 8015948 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8015944:	2b00      	cmp	r3, #0
 8015946:	d1eb      	bne.n	8015920 <_ZN8touchgfx3HAL4tickEv+0x64>
 8015948:	4a3a      	ldr	r2, [pc, #232]	; (8015a34 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801594a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801594e:	7813      	ldrb	r3, [r2, #0]
 8015950:	3301      	adds	r3, #1
 8015952:	b25b      	sxtb	r3, r3
 8015954:	4299      	cmp	r1, r3
 8015956:	7013      	strb	r3, [r2, #0]
 8015958:	dc10      	bgt.n	801597c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801595a:	2300      	movs	r3, #0
 801595c:	68e0      	ldr	r0, [r4, #12]
 801595e:	a902      	add	r1, sp, #8
 8015960:	7013      	strb	r3, [r2, #0]
 8015962:	aa03      	add	r2, sp, #12
 8015964:	6803      	ldr	r3, [r0, #0]
 8015966:	68db      	ldr	r3, [r3, #12]
 8015968:	4798      	blx	r3
 801596a:	6823      	ldr	r3, [r4, #0]
 801596c:	2800      	cmp	r0, #0
 801596e:	d050      	beq.n	8015a12 <_ZN8touchgfx3HAL4tickEv+0x156>
 8015970:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8015974:	4620      	mov	r0, r4
 8015976:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801597a:	4798      	blx	r3
 801597c:	2300      	movs	r3, #0
 801597e:	6960      	ldr	r0, [r4, #20]
 8015980:	f88d 3007 	strb.w	r3, [sp, #7]
 8015984:	b158      	cbz	r0, 801599e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015986:	6803      	ldr	r3, [r0, #0]
 8015988:	f10d 0107 	add.w	r1, sp, #7
 801598c:	68db      	ldr	r3, [r3, #12]
 801598e:	4798      	blx	r3
 8015990:	b128      	cbz	r0, 801599e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8015992:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015994:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8015998:	6803      	ldr	r3, [r0, #0]
 801599a:	68db      	ldr	r3, [r3, #12]
 801599c:	4798      	blx	r3
 801599e:	f104 001c 	add.w	r0, r4, #28
 80159a2:	f012 fdbf 	bl	8028524 <_ZN8touchgfx8Gestures4tickEv>
 80159a6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80159aa:	b30b      	cbz	r3, 80159f0 <_ZN8touchgfx3HAL4tickEv+0x134>
 80159ac:	6920      	ldr	r0, [r4, #16]
 80159ae:	6803      	ldr	r3, [r0, #0]
 80159b0:	691b      	ldr	r3, [r3, #16]
 80159b2:	4798      	blx	r3
 80159b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80159b6:	4606      	mov	r6, r0
 80159b8:	b903      	cbnz	r3, 80159bc <_ZN8touchgfx3HAL4tickEv+0x100>
 80159ba:	6720      	str	r0, [r4, #112]	; 0x70
 80159bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80159be:	4a1e      	ldr	r2, [pc, #120]	; (8015a38 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80159c0:	1af3      	subs	r3, r6, r3
 80159c2:	4293      	cmp	r3, r2
 80159c4:	d914      	bls.n	80159f0 <_ZN8touchgfx3HAL4tickEv+0x134>
 80159c6:	6920      	ldr	r0, [r4, #16]
 80159c8:	6803      	ldr	r3, [r0, #0]
 80159ca:	699b      	ldr	r3, [r3, #24]
 80159cc:	4798      	blx	r3
 80159ce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80159d0:	2264      	movs	r2, #100	; 0x64
 80159d2:	1af3      	subs	r3, r6, r3
 80159d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80159d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80159dc:	2800      	cmp	r0, #0
 80159de:	dc1d      	bgt.n	8015a1c <_ZN8touchgfx3HAL4tickEv+0x160>
 80159e0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80159e4:	6920      	ldr	r0, [r4, #16]
 80159e6:	2100      	movs	r1, #0
 80159e8:	6803      	ldr	r3, [r0, #0]
 80159ea:	69db      	ldr	r3, [r3, #28]
 80159ec:	4798      	blx	r3
 80159ee:	6726      	str	r6, [r4, #112]	; 0x70
 80159f0:	f004 fb3e 	bl	801a070 <_ZN8touchgfx11Application11getInstanceEv>
 80159f4:	6803      	ldr	r3, [r0, #0]
 80159f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80159f8:	4798      	blx	r3
 80159fa:	6823      	ldr	r3, [r4, #0]
 80159fc:	4620      	mov	r0, r4
 80159fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8015a02:	4798      	blx	r3
 8015a04:	2001      	movs	r0, #1
 8015a06:	f7fb fe2f 	bl	8011668 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8015a0a:	2300      	movs	r3, #0
 8015a0c:	702b      	strb	r3, [r5, #0]
 8015a0e:	b004      	add	sp, #16
 8015a10:	bd70      	pop	{r4, r5, r6, pc}
 8015a12:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8015a16:	4620      	mov	r0, r4
 8015a18:	4798      	blx	r3
 8015a1a:	e7af      	b.n	801597c <_ZN8touchgfx3HAL4tickEv+0xc0>
 8015a1c:	2863      	cmp	r0, #99	; 0x63
 8015a1e:	bfcb      	itete	gt
 8015a20:	2300      	movgt	r3, #0
 8015a22:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8015a26:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 8015a2a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 8015a2e:	e7d9      	b.n	80159e4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8015a30:	2003bee4 	.word	0x2003bee4
 8015a34:	2003bee5 	.word	0x2003bee5
 8015a38:	05f5e100 	.word	0x05f5e100

08015a3c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8015a3c:	f7fd b8b6 	b.w	8012bac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08015a40 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8015a40:	6581      	str	r1, [r0, #88]	; 0x58
 8015a42:	301c      	adds	r0, #28
 8015a44:	f012 bd6c 	b.w	8028520 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08015a48 <_ZN8touchgfx3HAL5touchEll>:
 8015a48:	b530      	push	{r4, r5, lr}
 8015a4a:	b087      	sub	sp, #28
 8015a4c:	4604      	mov	r4, r0
 8015a4e:	a804      	add	r0, sp, #16
 8015a50:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8015a54:	f004 f892 	bl	8019b7c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8015a58:	9b04      	ldr	r3, [sp, #16]
 8015a5a:	a906      	add	r1, sp, #24
 8015a5c:	a803      	add	r0, sp, #12
 8015a5e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015a62:	9b05      	ldr	r3, [sp, #20]
 8015a64:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8015a68:	f004 f8da 	bl	8019c20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 8015a6c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8015a70:	f104 001c 	add.w	r0, r4, #28
 8015a74:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8015a78:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8015a7c:	b189      	cbz	r1, 8015aa2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 8015a7e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8015a82:	9300      	str	r3, [sp, #0]
 8015a84:	4613      	mov	r3, r2
 8015a86:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8015a8a:	462a      	mov	r2, r5
 8015a8c:	f012 fd58 	bl	8028540 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8015a90:	b128      	cbz	r0, 8015a9e <_ZN8touchgfx3HAL5touchEll+0x56>
 8015a92:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8015a96:	65e3      	str	r3, [r4, #92]	; 0x5c
 8015a98:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8015a9c:	6623      	str	r3, [r4, #96]	; 0x60
 8015a9e:	b007      	add	sp, #28
 8015aa0:	bd30      	pop	{r4, r5, pc}
 8015aa2:	f012 fd8d 	bl	80285c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015aa6:	2301      	movs	r3, #1
 8015aa8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015aac:	e7f1      	b.n	8015a92 <_ZN8touchgfx3HAL5touchEll+0x4a>

08015aae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8015aae:	b510      	push	{r4, lr}
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d046      	beq.n	8015b42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015ab4:	ea81 0002 	eor.w	r0, r1, r2
 8015ab8:	07c4      	lsls	r4, r0, #31
 8015aba:	d508      	bpl.n	8015ace <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8015abc:	440b      	add	r3, r1
 8015abe:	3a01      	subs	r2, #1
 8015ac0:	428b      	cmp	r3, r1
 8015ac2:	d93e      	bls.n	8015b42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015ac4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015ac8:	f801 0b01 	strb.w	r0, [r1], #1
 8015acc:	e7f8      	b.n	8015ac0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8015ace:	07d0      	lsls	r0, r2, #31
 8015ad0:	bf42      	ittt	mi
 8015ad2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8015ad6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8015ada:	f801 0b01 	strbmi.w	r0, [r1], #1
 8015ade:	2b01      	cmp	r3, #1
 8015ae0:	d911      	bls.n	8015b06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015ae2:	ea81 0402 	eor.w	r4, r1, r2
 8015ae6:	4610      	mov	r0, r2
 8015ae8:	07a4      	lsls	r4, r4, #30
 8015aea:	d022      	beq.n	8015b32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8015aec:	f023 0401 	bic.w	r4, r3, #1
 8015af0:	440c      	add	r4, r1
 8015af2:	428c      	cmp	r4, r1
 8015af4:	4602      	mov	r2, r0
 8015af6:	d904      	bls.n	8015b02 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8015af8:	8812      	ldrh	r2, [r2, #0]
 8015afa:	3002      	adds	r0, #2
 8015afc:	f821 2b02 	strh.w	r2, [r1], #2
 8015b00:	e7f7      	b.n	8015af2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8015b02:	f003 0301 	and.w	r3, r3, #1
 8015b06:	f023 0003 	bic.w	r0, r3, #3
 8015b0a:	4408      	add	r0, r1
 8015b0c:	4288      	cmp	r0, r1
 8015b0e:	4614      	mov	r4, r2
 8015b10:	d904      	bls.n	8015b1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8015b12:	6824      	ldr	r4, [r4, #0]
 8015b14:	3204      	adds	r2, #4
 8015b16:	f841 4b04 	str.w	r4, [r1], #4
 8015b1a:	e7f7      	b.n	8015b0c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8015b1c:	f003 0303 	and.w	r3, r3, #3
 8015b20:	3a01      	subs	r2, #1
 8015b22:	440b      	add	r3, r1
 8015b24:	428b      	cmp	r3, r1
 8015b26:	d90c      	bls.n	8015b42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8015b28:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8015b2c:	f801 0b01 	strb.w	r0, [r1], #1
 8015b30:	e7f8      	b.n	8015b24 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8015b32:	0790      	lsls	r0, r2, #30
 8015b34:	d0e7      	beq.n	8015b06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015b36:	f832 0b02 	ldrh.w	r0, [r2], #2
 8015b3a:	3b02      	subs	r3, #2
 8015b3c:	f821 0b02 	strh.w	r0, [r1], #2
 8015b40:	e7e1      	b.n	8015b06 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8015b42:	2001      	movs	r0, #1
 8015b44:	bd10      	pop	{r4, pc}

08015b46 <_ZN8touchgfx3HAL7noTouchEv>:
 8015b46:	b510      	push	{r4, lr}
 8015b48:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8015b4c:	4604      	mov	r4, r0
 8015b4e:	b153      	cbz	r3, 8015b66 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8015b50:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8015b54:	2101      	movs	r1, #1
 8015b56:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8015b5a:	301c      	adds	r0, #28
 8015b5c:	f012 fd30 	bl	80285c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8015b60:	2300      	movs	r3, #0
 8015b62:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8015b66:	bd10      	pop	{r4, pc}

08015b68 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8015b68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015b6c:	b085      	sub	sp, #20
 8015b6e:	4604      	mov	r4, r0
 8015b70:	2000      	movs	r0, #0
 8015b72:	4699      	mov	r9, r3
 8015b74:	ad04      	add	r5, sp, #16
 8015b76:	460f      	mov	r7, r1
 8015b78:	4690      	mov	r8, r2
 8015b7a:	f845 0d04 	str.w	r0, [r5, #-4]!
 8015b7e:	69a0      	ldr	r0, [r4, #24]
 8015b80:	6806      	ldr	r6, [r0, #0]
 8015b82:	9501      	str	r5, [sp, #4]
 8015b84:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8015b88:	9500      	str	r5, [sp, #0]
 8015b8a:	6835      	ldr	r5, [r6, #0]
 8015b8c:	47a8      	blx	r5
 8015b8e:	4d10      	ldr	r5, [pc, #64]	; (8015bd0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8015b90:	4606      	mov	r6, r0
 8015b92:	f8a5 9000 	strh.w	r9, [r5]
 8015b96:	f7f8 f825 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8015b9a:	6803      	ldr	r3, [r0, #0]
 8015b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b9e:	4798      	blx	r3
 8015ba0:	b128      	cbz	r0, 8015bae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8015ba2:	2801      	cmp	r0, #1
 8015ba4:	d00b      	beq.n	8015bbe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8015ba6:	4630      	mov	r0, r6
 8015ba8:	b005      	add	sp, #20
 8015baa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015bae:	882b      	ldrh	r3, [r5, #0]
 8015bb0:	fb08 7203 	mla	r2, r8, r3, r7
 8015bb4:	9b03      	ldr	r3, [sp, #12]
 8015bb6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8015bba:	63e3      	str	r3, [r4, #60]	; 0x3c
 8015bbc:	e7f3      	b.n	8015ba6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015bbe:	882a      	ldrh	r2, [r5, #0]
 8015bc0:	9b03      	ldr	r3, [sp, #12]
 8015bc2:	fb08 7202 	mla	r2, r8, r2, r7
 8015bc6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8015bca:	1a9a      	subs	r2, r3, r2
 8015bcc:	63e2      	str	r2, [r4, #60]	; 0x3c
 8015bce:	e7ea      	b.n	8015ba6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8015bd0:	2003beda 	.word	0x2003beda

08015bd4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8015bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015bd6:	b08b      	sub	sp, #44	; 0x2c
 8015bd8:	4617      	mov	r7, r2
 8015bda:	4604      	mov	r4, r0
 8015bdc:	460e      	mov	r6, r1
 8015bde:	461d      	mov	r5, r3
 8015be0:	f7f8 f800 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8015be4:	6803      	ldr	r3, [r0, #0]
 8015be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015be8:	4798      	blx	r3
 8015bea:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015bee:	9007      	str	r0, [sp, #28]
 8015bf0:	4631      	mov	r1, r6
 8015bf2:	6822      	ldr	r2, [r4, #0]
 8015bf4:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015bf8:	4b0c      	ldr	r3, [pc, #48]	; (8015c2c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8015bfa:	4620      	mov	r0, r4
 8015bfc:	881b      	ldrh	r3, [r3, #0]
 8015bfe:	9306      	str	r3, [sp, #24]
 8015c00:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8015c04:	9305      	str	r3, [sp, #20]
 8015c06:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8015c0a:	9304      	str	r3, [sp, #16]
 8015c0c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015c10:	9303      	str	r3, [sp, #12]
 8015c12:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015c16:	9302      	str	r3, [sp, #8]
 8015c18:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015c1c:	e9cd 5300 	strd	r5, r3, [sp]
 8015c20:	463b      	mov	r3, r7
 8015c22:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8015c24:	2200      	movs	r2, #0
 8015c26:	47a8      	blx	r5
 8015c28:	b00b      	add	sp, #44	; 0x2c
 8015c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015c2c:	2003beda 	.word	0x2003beda

08015c30 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8015c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c34:	4698      	mov	r8, r3
 8015c36:	6803      	ldr	r3, [r0, #0]
 8015c38:	b08b      	sub	sp, #44	; 0x2c
 8015c3a:	4617      	mov	r7, r2
 8015c3c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8015c3e:	460e      	mov	r6, r1
 8015c40:	4b13      	ldr	r3, [pc, #76]	; (8015c90 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8015c42:	4604      	mov	r4, r0
 8015c44:	f8b3 9000 	ldrh.w	r9, [r3]
 8015c48:	f7f7 ffcc 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8015c4c:	6803      	ldr	r3, [r0, #0]
 8015c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c50:	4798      	blx	r3
 8015c52:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8015c56:	2200      	movs	r2, #0
 8015c58:	4631      	mov	r1, r6
 8015c5a:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8015c5e:	2302      	movs	r3, #2
 8015c60:	4620      	mov	r0, r4
 8015c62:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8015c66:	2301      	movs	r3, #1
 8015c68:	9305      	str	r3, [sp, #20]
 8015c6a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8015c6e:	9304      	str	r3, [sp, #16]
 8015c70:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8015c74:	9303      	str	r3, [sp, #12]
 8015c76:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015c7a:	9302      	str	r3, [sp, #8]
 8015c7c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015c80:	e9cd 8300 	strd	r8, r3, [sp]
 8015c84:	463b      	mov	r3, r7
 8015c86:	47a8      	blx	r5
 8015c88:	b00b      	add	sp, #44	; 0x2c
 8015c8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c8e:	bf00      	nop
 8015c90:	2003beda 	.word	0x2003beda

08015c94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8015c94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015c98:	4698      	mov	r8, r3
 8015c9a:	6803      	ldr	r3, [r0, #0]
 8015c9c:	b087      	sub	sp, #28
 8015c9e:	460e      	mov	r6, r1
 8015ca0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8015ca2:	4617      	mov	r7, r2
 8015ca4:	4b0f      	ldr	r3, [pc, #60]	; (8015ce4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8015ca6:	4604      	mov	r4, r0
 8015ca8:	f8b3 9000 	ldrh.w	r9, [r3]
 8015cac:	f7f7 ff9a 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8015cb0:	6803      	ldr	r3, [r0, #0]
 8015cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cb4:	4798      	blx	r3
 8015cb6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8015cba:	463a      	mov	r2, r7
 8015cbc:	4631      	mov	r1, r6
 8015cbe:	f8cd 900c 	str.w	r9, [sp, #12]
 8015cc2:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8015cc6:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8015cca:	4620      	mov	r0, r4
 8015ccc:	9302      	str	r3, [sp, #8]
 8015cce:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8015cd2:	9301      	str	r3, [sp, #4]
 8015cd4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8015cd8:	9300      	str	r3, [sp, #0]
 8015cda:	4643      	mov	r3, r8
 8015cdc:	47a8      	blx	r5
 8015cde:	b007      	add	sp, #28
 8015ce0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015ce4:	2003beda 	.word	0x2003beda

08015ce8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8015ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cec:	4604      	mov	r4, r0
 8015cee:	b08f      	sub	sp, #60	; 0x3c
 8015cf0:	4610      	mov	r0, r2
 8015cf2:	460d      	mov	r5, r1
 8015cf4:	4691      	mov	r9, r2
 8015cf6:	461e      	mov	r6, r3
 8015cf8:	f007 f966 	bl	801cfc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015cfc:	2800      	cmp	r0, #0
 8015cfe:	f000 809d 	beq.w	8015e3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8015d02:	6823      	ldr	r3, [r4, #0]
 8015d04:	4620      	mov	r0, r4
 8015d06:	f8df b198 	ldr.w	fp, [pc, #408]	; 8015ea0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8015d0a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8015d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015d10:	4798      	blx	r3
 8015d12:	6823      	ldr	r3, [r4, #0]
 8015d14:	4620      	mov	r0, r4
 8015d16:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8015ea4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8015d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d1c:	4798      	blx	r3
 8015d1e:	f8bb 3000 	ldrh.w	r3, [fp]
 8015d22:	4f5c      	ldr	r7, [pc, #368]	; (8015e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015d24:	9301      	str	r3, [sp, #4]
 8015d26:	f8ba 3000 	ldrh.w	r3, [sl]
 8015d2a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8015d2e:	4640      	mov	r0, r8
 8015d30:	9302      	str	r3, [sp, #8]
 8015d32:	883b      	ldrh	r3, [r7, #0]
 8015d34:	9303      	str	r3, [sp, #12]
 8015d36:	4b58      	ldr	r3, [pc, #352]	; (8015e98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015d38:	881a      	ldrh	r2, [r3, #0]
 8015d3a:	9305      	str	r3, [sp, #20]
 8015d3c:	9204      	str	r2, [sp, #16]
 8015d3e:	f007 fa87 	bl	801d250 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8015d42:	8038      	strh	r0, [r7, #0]
 8015d44:	4640      	mov	r0, r8
 8015d46:	f007 fab7 	bl	801d2b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8015d4a:	9b05      	ldr	r3, [sp, #20]
 8015d4c:	b280      	uxth	r0, r0
 8015d4e:	8018      	strh	r0, [r3, #0]
 8015d50:	4b52      	ldr	r3, [pc, #328]	; (8015e9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8015d52:	781b      	ldrb	r3, [r3, #0]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d174      	bne.n	8015e42 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8015d58:	883b      	ldrh	r3, [r7, #0]
 8015d5a:	f8aa 0000 	strh.w	r0, [sl]
 8015d5e:	f8ab 3000 	strh.w	r3, [fp]
 8015d62:	4648      	mov	r0, r9
 8015d64:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8015d68:	f007 f92e 	bl	801cfc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8015d72:	4611      	mov	r1, r2
 8015d74:	4628      	mov	r0, r5
 8015d76:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8015d7a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8015d7e:	f7f8 fd59 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>
 8015d82:	2301      	movs	r3, #1
 8015d84:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8015d88:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8015d8c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	dd5c      	ble.n	8015e4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015d94:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	dd58      	ble.n	8015e4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8015d9c:	462a      	mov	r2, r5
 8015d9e:	ab0a      	add	r3, sp, #40	; 0x28
 8015da0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015da4:	6851      	ldr	r1, [r2, #4]
 8015da6:	c303      	stmia	r3!, {r0, r1}
 8015da8:	4631      	mov	r1, r6
 8015daa:	a80a      	add	r0, sp, #40	; 0x28
 8015dac:	f7ff fbfa 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 8015db0:	4b38      	ldr	r3, [pc, #224]	; (8015e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015db2:	2100      	movs	r1, #0
 8015db4:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015db8:	4b37      	ldr	r3, [pc, #220]	; (8015e98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015dba:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8015dbe:	aa0a      	add	r2, sp, #40	; 0x28
 8015dc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015dc4:	910c      	str	r1, [sp, #48]	; 0x30
 8015dc6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8015dca:	ab08      	add	r3, sp, #32
 8015dcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015dd0:	e883 0003 	stmia.w	r3, {r0, r1}
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	a90c      	add	r1, sp, #48	; 0x30
 8015dd8:	f7ff fbe4 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 8015ddc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d13c      	bne.n	8015e5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8015de2:	2000      	movs	r0, #0
 8015de4:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8015de8:	2600      	movs	r6, #0
 8015dea:	696b      	ldr	r3, [r5, #20]
 8015dec:	a908      	add	r1, sp, #32
 8015dee:	682a      	ldr	r2, [r5, #0]
 8015df0:	4628      	mov	r0, r5
 8015df2:	9305      	str	r3, [sp, #20]
 8015df4:	616e      	str	r6, [r5, #20]
 8015df6:	6892      	ldr	r2, [r2, #8]
 8015df8:	4790      	blx	r2
 8015dfa:	9b05      	ldr	r3, [sp, #20]
 8015dfc:	4652      	mov	r2, sl
 8015dfe:	4649      	mov	r1, r9
 8015e00:	616b      	str	r3, [r5, #20]
 8015e02:	4628      	mov	r0, r5
 8015e04:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8015e08:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8015e0c:	f7f8 fd12 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>
 8015e10:	9a01      	ldr	r2, [sp, #4]
 8015e12:	4b23      	ldr	r3, [pc, #140]	; (8015ea0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8015e14:	4620      	mov	r0, r4
 8015e16:	801a      	strh	r2, [r3, #0]
 8015e18:	9a02      	ldr	r2, [sp, #8]
 8015e1a:	4b22      	ldr	r3, [pc, #136]	; (8015ea4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8015e1c:	801a      	strh	r2, [r3, #0]
 8015e1e:	9a03      	ldr	r2, [sp, #12]
 8015e20:	4b1c      	ldr	r3, [pc, #112]	; (8015e94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8015e22:	801a      	strh	r2, [r3, #0]
 8015e24:	4b1c      	ldr	r3, [pc, #112]	; (8015e98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8015e26:	9a04      	ldr	r2, [sp, #16]
 8015e28:	801a      	strh	r2, [r3, #0]
 8015e2a:	6823      	ldr	r3, [r4, #0]
 8015e2c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8015e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015e32:	4798      	blx	r3
 8015e34:	6823      	ldr	r3, [r4, #0]
 8015e36:	4620      	mov	r0, r4
 8015e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e3a:	4798      	blx	r3
 8015e3c:	b00f      	add	sp, #60	; 0x3c
 8015e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e42:	883b      	ldrh	r3, [r7, #0]
 8015e44:	f8ab 0000 	strh.w	r0, [fp]
 8015e48:	f8aa 3000 	strh.w	r3, [sl]
 8015e4c:	e789      	b.n	8015d62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8015e4e:	462a      	mov	r2, r5
 8015e50:	ab0a      	add	r3, sp, #40	; 0x28
 8015e52:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8015e56:	6851      	ldr	r1, [r2, #4]
 8015e58:	c303      	stmia	r3!, {r0, r1}
 8015e5a:	e7a9      	b.n	8015db0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8015e5c:	a807      	add	r0, sp, #28
 8015e5e:	f007 fb1b 	bl	801d498 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015e62:	4606      	mov	r6, r0
 8015e64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8015e66:	6803      	ldr	r3, [r0, #0]
 8015e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e6a:	4798      	blx	r3
 8015e6c:	4286      	cmp	r6, r0
 8015e6e:	d1b8      	bne.n	8015de2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8015e70:	f7f7 feb8 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8015e74:	6803      	ldr	r3, [r0, #0]
 8015e76:	4606      	mov	r6, r0
 8015e78:	a807      	add	r0, sp, #28
 8015e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e7c:	9305      	str	r3, [sp, #20]
 8015e7e:	f007 fb0b 	bl	801d498 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8015e82:	9b05      	ldr	r3, [sp, #20]
 8015e84:	4601      	mov	r1, r0
 8015e86:	4630      	mov	r0, r6
 8015e88:	4798      	blx	r3
 8015e8a:	f080 0001 	eor.w	r0, r0, #1
 8015e8e:	b2c0      	uxtb	r0, r0
 8015e90:	e7a8      	b.n	8015de4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8015e92:	bf00      	nop
 8015e94:	2003bed4 	.word	0x2003bed4
 8015e98:	2003bed6 	.word	0x2003bed6
 8015e9c:	2003bed8 	.word	0x2003bed8
 8015ea0:	2003beda 	.word	0x2003beda
 8015ea4:	2003bedc 	.word	0x2003bedc

08015ea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8015ea8:	4b07      	ldr	r3, [pc, #28]	; (8015ec8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8015eaa:	b510      	push	{r4, lr}
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	4604      	mov	r4, r0
 8015eb0:	b13b      	cbz	r3, 8015ec2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015eb2:	6803      	ldr	r3, [r0, #0]
 8015eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015eb6:	4798      	blx	r3
 8015eb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015eba:	4283      	cmp	r3, r0
 8015ebc:	d101      	bne.n	8015ec2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8015ebe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8015ec0:	bd10      	pop	{r4, pc}
 8015ec2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8015ec4:	e7fc      	b.n	8015ec0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8015ec6:	bf00      	nop
 8015ec8:	2003bede 	.word	0x2003bede

08015ecc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8015ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ed0:	461d      	mov	r5, r3
 8015ed2:	b08a      	sub	sp, #40	; 0x28
 8015ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ed8:	4690      	mov	r8, r2
 8015eda:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8015ede:	2400      	movs	r4, #0
 8015ee0:	4607      	mov	r7, r0
 8015ee2:	fb06 8505 	mla	r5, r6, r5, r8
 8015ee6:	9404      	str	r4, [sp, #16]
 8015ee8:	f88d 4020 	strb.w	r4, [sp, #32]
 8015eec:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015ef0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8015ef4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015ef8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015efc:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015f04:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015f08:	f7ff ffce 	bl	8015ea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015f0c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015f10:	6878      	ldr	r0, [r7, #4]
 8015f12:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015f16:	a901      	add	r1, sp, #4
 8015f18:	9505      	str	r5, [sp, #20]
 8015f1a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015f1e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8015f22:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8015f26:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8015f2a:	6803      	ldr	r3, [r0, #0]
 8015f2c:	685b      	ldr	r3, [r3, #4]
 8015f2e:	4798      	blx	r3
 8015f30:	b00a      	add	sp, #40	; 0x28
 8015f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015f36 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8015f36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015f3a:	b08b      	sub	sp, #44	; 0x2c
 8015f3c:	2400      	movs	r4, #0
 8015f3e:	4691      	mov	r9, r2
 8015f40:	461d      	mov	r5, r3
 8015f42:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8015f46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f4a:	4688      	mov	r8, r1
 8015f4c:	4607      	mov	r7, r0
 8015f4e:	9404      	str	r4, [sp, #16]
 8015f50:	fb06 9505 	mla	r5, r6, r5, r9
 8015f54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015f58:	f7ff ffa6 	bl	8015ea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015f5c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015f60:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8015f64:	6878      	ldr	r0, [r7, #4]
 8015f66:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015f6a:	a901      	add	r1, sp, #4
 8015f6c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015f70:	9505      	str	r5, [sp, #20]
 8015f72:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015f76:	f8ad 401c 	strh.w	r4, [sp, #28]
 8015f7a:	f8ad 601e 	strh.w	r6, [sp, #30]
 8015f7e:	f8cd 8010 	str.w	r8, [sp, #16]
 8015f82:	f8ad 4020 	strh.w	r4, [sp, #32]
 8015f86:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8015f8a:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8015f8e:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8015f92:	6803      	ldr	r3, [r0, #0]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	4798      	blx	r3
 8015f98:	b00b      	add	sp, #44	; 0x2c
 8015f9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08015fa0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8015fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fa4:	b08a      	sub	sp, #40	; 0x28
 8015fa6:	4698      	mov	r8, r3
 8015fa8:	2300      	movs	r3, #0
 8015faa:	4606      	mov	r6, r0
 8015fac:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8015fb0:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8015fb4:	2d0b      	cmp	r5, #11
 8015fb6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8015fba:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8015fbe:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8015fc2:	9304      	str	r3, [sp, #16]
 8015fc4:	d137      	bne.n	8016036 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8015fc6:	2380      	movs	r3, #128	; 0x80
 8015fc8:	f88d 0020 	strb.w	r0, [sp, #32]
 8015fcc:	4630      	mov	r0, r6
 8015fce:	9203      	str	r2, [sp, #12]
 8015fd0:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8015fd4:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8015fd8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8015fdc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8015fe0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8015fe4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8015fe8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015fec:	f7ff ff5c 	bl	8015ea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8015ff0:	2c0b      	cmp	r4, #11
 8015ff2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8015ff6:	f8ad 701e 	strh.w	r7, [sp, #30]
 8015ffa:	bf94      	ite	ls
 8015ffc:	4b19      	ldrls	r3, [pc, #100]	; (8016064 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8015ffe:	2100      	movhi	r1, #0
 8016000:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8016004:	bf98      	it	ls
 8016006:	5d19      	ldrbls	r1, [r3, r4]
 8016008:	fb02 8307 	mla	r3, r2, r7, r8
 801600c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016010:	10c9      	asrs	r1, r1, #3
 8016012:	fb01 0003 	mla	r0, r1, r3, r0
 8016016:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801601a:	a901      	add	r1, sp, #4
 801601c:	9005      	str	r0, [sp, #20]
 801601e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016022:	2300      	movs	r3, #0
 8016024:	6870      	ldr	r0, [r6, #4]
 8016026:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801602a:	6803      	ldr	r3, [r0, #0]
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	4798      	blx	r3
 8016030:	b00a      	add	sp, #40	; 0x28
 8016032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016036:	2d02      	cmp	r5, #2
 8016038:	d109      	bne.n	801604e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 801603a:	28ff      	cmp	r0, #255	; 0xff
 801603c:	d105      	bne.n	801604a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 801603e:	f1bc 0f00 	cmp.w	ip, #0
 8016042:	bf14      	ite	ne
 8016044:	2340      	movne	r3, #64	; 0x40
 8016046:	2320      	moveq	r3, #32
 8016048:	e7be      	b.n	8015fc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801604a:	2340      	movs	r3, #64	; 0x40
 801604c:	e7bc      	b.n	8015fc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801604e:	28ff      	cmp	r0, #255	; 0xff
 8016050:	d105      	bne.n	801605e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8016052:	f1bc 0f00 	cmp.w	ip, #0
 8016056:	bf14      	ite	ne
 8016058:	2304      	movne	r3, #4
 801605a:	2301      	moveq	r3, #1
 801605c:	e7b4      	b.n	8015fc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 801605e:	2304      	movs	r3, #4
 8016060:	e7b2      	b.n	8015fc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016062:	bf00      	nop
 8016064:	0802f278 	.word	0x0802f278

08016068 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8016068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801606c:	b08b      	sub	sp, #44	; 0x2c
 801606e:	461d      	mov	r5, r3
 8016070:	2400      	movs	r4, #0
 8016072:	4688      	mov	r8, r1
 8016074:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8016078:	4693      	mov	fp, r2
 801607a:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 801607e:	4607      	mov	r7, r0
 8016080:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016084:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8016088:	9404      	str	r4, [sp, #16]
 801608a:	bf14      	ite	ne
 801608c:	2308      	movne	r3, #8
 801608e:	2302      	moveq	r3, #2
 8016090:	fb05 b50a 	mla	r5, r5, sl, fp
 8016094:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016098:	f7ff ff06 	bl	8015ea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801609c:	2e0b      	cmp	r6, #11
 801609e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80160a2:	a901      	add	r1, sp, #4
 80160a4:	bf98      	it	ls
 80160a6:	4b13      	ldrls	r3, [pc, #76]	; (80160f4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 80160a8:	f8ad a01e 	strh.w	sl, [sp, #30]
 80160ac:	bf98      	it	ls
 80160ae:	5d9c      	ldrbls	r4, [r3, r6]
 80160b0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 80160b4:	10e4      	asrs	r4, r4, #3
 80160b6:	f8cd 8010 	str.w	r8, [sp, #16]
 80160ba:	f8ad 3018 	strh.w	r3, [sp, #24]
 80160be:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 80160c2:	fb04 0405 	mla	r4, r4, r5, r0
 80160c6:	6878      	ldr	r0, [r7, #4]
 80160c8:	f8ad 301a 	strh.w	r3, [sp, #26]
 80160cc:	2300      	movs	r3, #0
 80160ce:	9405      	str	r4, [sp, #20]
 80160d0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80160d4:	f88d 9020 	strb.w	r9, [sp, #32]
 80160d8:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80160dc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80160e0:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 80160e4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80160e8:	6803      	ldr	r3, [r0, #0]
 80160ea:	685b      	ldr	r3, [r3, #4]
 80160ec:	4798      	blx	r3
 80160ee:	b00b      	add	sp, #44	; 0x2c
 80160f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160f4:	0802f278 	.word	0x0802f278

080160f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 80160f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160fc:	461e      	mov	r6, r3
 80160fe:	4b0a      	ldr	r3, [pc, #40]	; (8016128 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8016100:	460f      	mov	r7, r1
 8016102:	4690      	mov	r8, r2
 8016104:	881d      	ldrh	r5, [r3, #0]
 8016106:	f7f7 fd6d 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 801610a:	6803      	ldr	r3, [r0, #0]
 801610c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801610e:	4798      	blx	r3
 8016110:	280b      	cmp	r0, #11
 8016112:	bf96      	itet	ls
 8016114:	4b05      	ldrls	r3, [pc, #20]	; (801612c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8016116:	2400      	movhi	r4, #0
 8016118:	5c1c      	ldrbls	r4, [r3, r0]
 801611a:	fb08 7005 	mla	r0, r8, r5, r7
 801611e:	10e4      	asrs	r4, r4, #3
 8016120:	fb04 6000 	mla	r0, r4, r0, r6
 8016124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016128:	2003beda 	.word	0x2003beda
 801612c:	0802f278 	.word	0x0802f278

08016130 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8016130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016132:	b08b      	sub	sp, #44	; 0x2c
 8016134:	461f      	mov	r7, r3
 8016136:	4604      	mov	r4, r0
 8016138:	4616      	mov	r6, r2
 801613a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801613e:	2500      	movs	r5, #0
 8016140:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016144:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016148:	9504      	str	r5, [sp, #16]
 801614a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801614e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016152:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016156:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801615a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801615e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016162:	f88d 3020 	strb.w	r3, [sp, #32]
 8016166:	f7ff fe9f 	bl	8015ea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801616a:	463a      	mov	r2, r7
 801616c:	4631      	mov	r1, r6
 801616e:	4603      	mov	r3, r0
 8016170:	4620      	mov	r0, r4
 8016172:	f7ff ffc1 	bl	80160f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8016176:	4b0e      	ldr	r3, [pc, #56]	; (80161b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8016178:	9005      	str	r0, [sp, #20]
 801617a:	881b      	ldrh	r3, [r3, #0]
 801617c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8016180:	f7f7 fd30 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8016184:	6803      	ldr	r3, [r0, #0]
 8016186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016188:	4798      	blx	r3
 801618a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801618c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8016190:	a901      	add	r1, sp, #4
 8016192:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8016196:	9304      	str	r3, [sp, #16]
 8016198:	6860      	ldr	r0, [r4, #4]
 801619a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 801619e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80161a2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80161a6:	6803      	ldr	r3, [r0, #0]
 80161a8:	685b      	ldr	r3, [r3, #4]
 80161aa:	4798      	blx	r3
 80161ac:	b00b      	add	sp, #44	; 0x2c
 80161ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80161b0:	2003beda 	.word	0x2003beda

080161b4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 80161b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161b6:	b08d      	sub	sp, #52	; 0x34
 80161b8:	2501      	movs	r5, #1
 80161ba:	4604      	mov	r4, r0
 80161bc:	466b      	mov	r3, sp
 80161be:	9503      	str	r5, [sp, #12]
 80161c0:	e883 0006 	stmia.w	r3, {r1, r2}
 80161c4:	2300      	movs	r3, #0
 80161c6:	f8bd 6000 	ldrh.w	r6, [sp]
 80161ca:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80161ce:	9306      	str	r3, [sp, #24]
 80161d0:	6803      	ldr	r3, [r0, #0]
 80161d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80161d4:	4798      	blx	r3
 80161d6:	463a      	mov	r2, r7
 80161d8:	4631      	mov	r1, r6
 80161da:	4603      	mov	r3, r0
 80161dc:	4620      	mov	r0, r4
 80161de:	f7ff ff8b 	bl	80160f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80161e2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80161e4:	9004      	str	r0, [sp, #16]
 80161e6:	9307      	str	r3, [sp, #28]
 80161e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80161ec:	f8ad 3020 	strh.w	r3, [sp, #32]
 80161f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80161f4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80161f8:	4b0e      	ldr	r3, [pc, #56]	; (8016234 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 80161fa:	881b      	ldrh	r3, [r3, #0]
 80161fc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016200:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8016204:	f7f7 fcee 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8016208:	6803      	ldr	r3, [r0, #0]
 801620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801620c:	4798      	blx	r3
 801620e:	23ff      	movs	r3, #255	; 0xff
 8016210:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8016214:	a903      	add	r1, sp, #12
 8016216:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801621a:	6860      	ldr	r0, [r4, #4]
 801621c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8016220:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8016224:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8016228:	6803      	ldr	r3, [r0, #0]
 801622a:	685b      	ldr	r3, [r3, #4]
 801622c:	4798      	blx	r3
 801622e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016230:	b00d      	add	sp, #52	; 0x34
 8016232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016234:	2003beda 	.word	0x2003beda

08016238 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8016238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801623c:	b08c      	sub	sp, #48	; 0x30
 801623e:	461e      	mov	r6, r3
 8016240:	2300      	movs	r3, #0
 8016242:	4604      	mov	r4, r0
 8016244:	466d      	mov	r5, sp
 8016246:	9306      	str	r3, [sp, #24]
 8016248:	6803      	ldr	r3, [r0, #0]
 801624a:	e885 0006 	stmia.w	r5, {r1, r2}
 801624e:	2501      	movs	r5, #1
 8016250:	f8bd 7000 	ldrh.w	r7, [sp]
 8016254:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8016258:	9503      	str	r5, [sp, #12]
 801625a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801625c:	4798      	blx	r3
 801625e:	4642      	mov	r2, r8
 8016260:	4639      	mov	r1, r7
 8016262:	4603      	mov	r3, r0
 8016264:	4620      	mov	r0, r4
 8016266:	f7ff ff47 	bl	80160f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801626a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801626e:	9004      	str	r0, [sp, #16]
 8016270:	f8ad 3020 	strh.w	r3, [sp, #32]
 8016274:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8016278:	9607      	str	r6, [sp, #28]
 801627a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801627e:	4b10      	ldr	r3, [pc, #64]	; (80162c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8016280:	881b      	ldrh	r3, [r3, #0]
 8016282:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8016286:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016288:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801628c:	f7f7 fcaa 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8016290:	6803      	ldr	r3, [r0, #0]
 8016292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016294:	4798      	blx	r3
 8016296:	23ff      	movs	r3, #255	; 0xff
 8016298:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801629c:	a903      	add	r1, sp, #12
 801629e:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80162a2:	6860      	ldr	r0, [r4, #4]
 80162a4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80162a8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80162ac:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80162b0:	6803      	ldr	r3, [r0, #0]
 80162b2:	685b      	ldr	r3, [r3, #4]
 80162b4:	4798      	blx	r3
 80162b6:	4630      	mov	r0, r6
 80162b8:	b00c      	add	sp, #48	; 0x30
 80162ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80162be:	bf00      	nop
 80162c0:	2003beda 	.word	0x2003beda

080162c4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80162c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162c6:	b085      	sub	sp, #20
 80162c8:	4605      	mov	r5, r0
 80162ca:	ac02      	add	r4, sp, #8
 80162cc:	e884 0006 	stmia.w	r4, {r1, r2}
 80162d0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80162d4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80162d8:	f7ff fde6 	bl	8015ea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80162dc:	4631      	mov	r1, r6
 80162de:	4603      	mov	r3, r0
 80162e0:	463a      	mov	r2, r7
 80162e2:	4628      	mov	r0, r5
 80162e4:	f7ff ff08 	bl	80160f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80162e8:	4a05      	ldr	r2, [pc, #20]	; (8016300 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80162ea:	682b      	ldr	r3, [r5, #0]
 80162ec:	8812      	ldrh	r2, [r2, #0]
 80162ee:	9200      	str	r2, [sp, #0]
 80162f0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80162f2:	4603      	mov	r3, r0
 80162f4:	4628      	mov	r0, r5
 80162f6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80162fa:	47b0      	blx	r6
 80162fc:	b005      	add	sp, #20
 80162fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016300:	2003beda 	.word	0x2003beda

08016304 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8016304:	b570      	push	{r4, r5, r6, lr}
 8016306:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801630a:	4604      	mov	r4, r0
 801630c:	b19b      	cbz	r3, 8016336 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801630e:	2002      	movs	r0, #2
 8016310:	f7fb f9c6 	bl	80116a0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8016314:	2300      	movs	r3, #0
 8016316:	4620      	mov	r0, r4
 8016318:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801631c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8016320:	6823      	ldr	r3, [r4, #0]
 8016322:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8016326:	f7ff fdbf 	bl	8015ea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801632a:	4601      	mov	r1, r0
 801632c:	4620      	mov	r0, r4
 801632e:	462b      	mov	r3, r5
 8016330:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016334:	4718      	bx	r3
 8016336:	bd70      	pop	{r4, r5, r6, pc}

08016338 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8016338:	b538      	push	{r3, r4, r5, lr}
 801633a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801633e:	4604      	mov	r4, r0
 8016340:	460d      	mov	r5, r1
 8016342:	428b      	cmp	r3, r1
 8016344:	d006      	beq.n	8016354 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8016346:	6803      	ldr	r3, [r0, #0]
 8016348:	b929      	cbnz	r1, 8016356 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801634a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801634e:	4798      	blx	r3
 8016350:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8016354:	bd38      	pop	{r3, r4, r5, pc}
 8016356:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801635a:	e7f8      	b.n	801634e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801635c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801635c:	4b0d      	ldr	r3, [pc, #52]	; (8016394 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 801635e:	b510      	push	{r4, lr}
 8016360:	781b      	ldrb	r3, [r3, #0]
 8016362:	4604      	mov	r4, r0
 8016364:	b95b      	cbnz	r3, 801637e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016366:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801636a:	2b02      	cmp	r3, #2
 801636c:	d007      	beq.n	801637e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801636e:	6840      	ldr	r0, [r0, #4]
 8016370:	f000 f926 	bl	80165c0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8016374:	b118      	cbz	r0, 801637e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8016376:	6862      	ldr	r2, [r4, #4]
 8016378:	7a53      	ldrb	r3, [r2, #9]
 801637a:	2b00      	cmp	r3, #0
 801637c:	d0fc      	beq.n	8016378 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801637e:	f7fc fc07 	bl	8012b90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8016382:	4620      	mov	r0, r4
 8016384:	2100      	movs	r1, #0
 8016386:	f7ff ffd7 	bl	8016338 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801638a:	4620      	mov	r0, r4
 801638c:	f7ff fd8c 	bl	8015ea8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016390:	bd10      	pop	{r4, pc}
 8016392:	bf00      	nop
 8016394:	2003bede 	.word	0x2003bede

08016398 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8016398:	b570      	push	{r4, r5, r6, lr}
 801639a:	4604      	mov	r4, r0
 801639c:	6803      	ldr	r3, [r0, #0]
 801639e:	b919      	cbnz	r1, 80163a8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80163a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80163a6:	4718      	bx	r3
 80163a8:	2200      	movs	r2, #0
 80163aa:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 80163ae:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 80163b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163b4:	4798      	blx	r3
 80163b6:	4605      	mov	r5, r0
 80163b8:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 80163bc:	4620      	mov	r0, r4
 80163be:	2101      	movs	r1, #1
 80163c0:	f7ff ffba 	bl	8016338 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80163c4:	4628      	mov	r0, r5
 80163c6:	bd70      	pop	{r4, r5, r6, pc}

080163c8 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 80163c8:	4770      	bx	lr

080163ca <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 80163ca:	2000      	movs	r0, #0
 80163cc:	4770      	bx	lr

080163ce <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 80163ce:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80163d2:	1a13      	subs	r3, r2, r0
 80163d4:	4258      	negs	r0, r3
 80163d6:	4158      	adcs	r0, r3
 80163d8:	4770      	bx	lr

080163da <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80163da:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80163de:	1a9b      	subs	r3, r3, r2
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	bfdc      	itt	le
 80163e4:	6882      	ldrle	r2, [r0, #8]
 80163e6:	189b      	addle	r3, r3, r2
 80163e8:	2b01      	cmp	r3, #1
 80163ea:	bfcc      	ite	gt
 80163ec:	2000      	movgt	r0, #0
 80163ee:	2001      	movle	r0, #1
 80163f0:	4770      	bx	lr

080163f2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80163f2:	6902      	ldr	r2, [r0, #16]
 80163f4:	6843      	ldr	r3, [r0, #4]
 80163f6:	2024      	movs	r0, #36	; 0x24
 80163f8:	fb00 3002 	mla	r0, r0, r2, r3
 80163fc:	4770      	bx	lr

080163fe <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80163fe:	6803      	ldr	r3, [r0, #0]
 8016400:	691b      	ldr	r3, [r3, #16]
 8016402:	4718      	bx	r3

08016404 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8016404:	2301      	movs	r3, #1
 8016406:	b570      	push	{r4, r5, r6, lr}
 8016408:	7203      	strb	r3, [r0, #8]
 801640a:	4604      	mov	r4, r0
 801640c:	6840      	ldr	r0, [r0, #4]
 801640e:	6803      	ldr	r3, [r0, #0]
 8016410:	699b      	ldr	r3, [r3, #24]
 8016412:	4798      	blx	r3
 8016414:	6803      	ldr	r3, [r0, #0]
 8016416:	4605      	mov	r5, r0
 8016418:	2b40      	cmp	r3, #64	; 0x40
 801641a:	d00c      	beq.n	8016436 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801641c:	d810      	bhi.n	8016440 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801641e:	2b04      	cmp	r3, #4
 8016420:	d01d      	beq.n	801645e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8016422:	d804      	bhi.n	801642e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8016424:	2b01      	cmp	r3, #1
 8016426:	d006      	beq.n	8016436 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016428:	2b02      	cmp	r3, #2
 801642a:	d02c      	beq.n	8016486 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801642c:	bd70      	pop	{r4, r5, r6, pc}
 801642e:	2b08      	cmp	r3, #8
 8016430:	d01d      	beq.n	801646e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8016432:	2b20      	cmp	r3, #32
 8016434:	d1fa      	bne.n	801642c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8016436:	6823      	ldr	r3, [r4, #0]
 8016438:	4620      	mov	r0, r4
 801643a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801643c:	4798      	blx	r3
 801643e:	e013      	b.n	8016468 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8016440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016444:	d0f7      	beq.n	8016436 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016446:	d804      	bhi.n	8016452 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8016448:	2b80      	cmp	r3, #128	; 0x80
 801644a:	d0f4      	beq.n	8016436 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801644c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016450:	e7f0      	b.n	8016434 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8016452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016456:	d0ee      	beq.n	8016436 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8016458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801645c:	e7e5      	b.n	801642a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801645e:	6823      	ldr	r3, [r4, #0]
 8016460:	7f01      	ldrb	r1, [r0, #28]
 8016462:	4620      	mov	r0, r4
 8016464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016466:	4798      	blx	r3
 8016468:	6823      	ldr	r3, [r4, #0]
 801646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801646c:	e006      	b.n	801647c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801646e:	6823      	ldr	r3, [r4, #0]
 8016470:	7f01      	ldrb	r1, [r0, #28]
 8016472:	4620      	mov	r0, r4
 8016474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016476:	4798      	blx	r3
 8016478:	6823      	ldr	r3, [r4, #0]
 801647a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801647c:	4629      	mov	r1, r5
 801647e:	4620      	mov	r0, r4
 8016480:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016484:	4718      	bx	r3
 8016486:	6823      	ldr	r3, [r4, #0]
 8016488:	4620      	mov	r0, r4
 801648a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801648c:	4798      	blx	r3
 801648e:	e7f3      	b.n	8016478 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08016490 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8016490:	4770      	bx	lr

08016492 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8016492:	4770      	bx	lr

08016494 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8016494:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8016498:	b510      	push	{r4, lr}
 801649a:	1ad2      	subs	r2, r2, r3
 801649c:	2a00      	cmp	r2, #0
 801649e:	bfdc      	itt	le
 80164a0:	6884      	ldrle	r4, [r0, #8]
 80164a2:	1912      	addle	r2, r2, r4
 80164a4:	2a01      	cmp	r2, #1
 80164a6:	dd16      	ble.n	80164d6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80164a8:	6842      	ldr	r2, [r0, #4]
 80164aa:	2424      	movs	r4, #36	; 0x24
 80164ac:	fb04 2303 	mla	r3, r4, r3, r2
 80164b0:	f101 0220 	add.w	r2, r1, #32
 80164b4:	f851 4b04 	ldr.w	r4, [r1], #4
 80164b8:	4291      	cmp	r1, r2
 80164ba:	f843 4b04 	str.w	r4, [r3], #4
 80164be:	d1f9      	bne.n	80164b4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 80164c0:	780a      	ldrb	r2, [r1, #0]
 80164c2:	701a      	strb	r2, [r3, #0]
 80164c4:	68c3      	ldr	r3, [r0, #12]
 80164c6:	6882      	ldr	r2, [r0, #8]
 80164c8:	f3bf 8f5b 	dmb	ish
 80164cc:	3301      	adds	r3, #1
 80164ce:	429a      	cmp	r2, r3
 80164d0:	bfd8      	it	le
 80164d2:	1a9b      	suble	r3, r3, r2
 80164d4:	60c3      	str	r3, [r0, #12]
 80164d6:	bd10      	pop	{r4, pc}

080164d8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80164d8:	6903      	ldr	r3, [r0, #16]
 80164da:	6882      	ldr	r2, [r0, #8]
 80164dc:	f3bf 8f5b 	dmb	ish
 80164e0:	3301      	adds	r3, #1
 80164e2:	429a      	cmp	r2, r3
 80164e4:	bfd8      	it	le
 80164e6:	1a9b      	suble	r3, r3, r2
 80164e8:	6103      	str	r3, [r0, #16]
 80164ea:	4770      	bx	lr

080164ec <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80164ec:	b570      	push	{r4, r5, r6, lr}
 80164ee:	4604      	mov	r4, r0
 80164f0:	460e      	mov	r6, r1
 80164f2:	6860      	ldr	r0, [r4, #4]
 80164f4:	6803      	ldr	r3, [r0, #0]
 80164f6:	685b      	ldr	r3, [r3, #4]
 80164f8:	4798      	blx	r3
 80164fa:	2800      	cmp	r0, #0
 80164fc:	d1f9      	bne.n	80164f2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80164fe:	4d0d      	ldr	r5, [pc, #52]	; (8016534 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8016500:	6828      	ldr	r0, [r5, #0]
 8016502:	6803      	ldr	r3, [r0, #0]
 8016504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016506:	4798      	blx	r3
 8016508:	f7fc fb5c 	bl	8012bc4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801650c:	6828      	ldr	r0, [r5, #0]
 801650e:	2101      	movs	r1, #1
 8016510:	f7ff ff12 	bl	8016338 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8016514:	6860      	ldr	r0, [r4, #4]
 8016516:	4631      	mov	r1, r6
 8016518:	6803      	ldr	r3, [r0, #0]
 801651a:	689b      	ldr	r3, [r3, #8]
 801651c:	4798      	blx	r3
 801651e:	6823      	ldr	r3, [r4, #0]
 8016520:	4620      	mov	r0, r4
 8016522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016524:	4798      	blx	r3
 8016526:	6828      	ldr	r0, [r5, #0]
 8016528:	6803      	ldr	r3, [r0, #0]
 801652a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801652e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016530:	4718      	bx	r3
 8016532:	bf00      	nop
 8016534:	2003bee0 	.word	0x2003bee0

08016538 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8016538:	b508      	push	{r3, lr}
 801653a:	f7fc fb29 	bl	8012b90 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801653e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8016542:	f7fc bb33 	b.w	8012bac <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016546 <_ZN8touchgfx13DMA_Interface5startEv>:
 8016546:	b510      	push	{r4, lr}
 8016548:	4604      	mov	r4, r0
 801654a:	6840      	ldr	r0, [r0, #4]
 801654c:	6803      	ldr	r3, [r0, #0]
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	4798      	blx	r3
 8016552:	b948      	cbnz	r0, 8016568 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016554:	7a63      	ldrb	r3, [r4, #9]
 8016556:	b13b      	cbz	r3, 8016568 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8016558:	7a23      	ldrb	r3, [r4, #8]
 801655a:	b92b      	cbnz	r3, 8016568 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801655c:	6823      	ldr	r3, [r4, #0]
 801655e:	4620      	mov	r0, r4
 8016560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016566:	4718      	bx	r3
 8016568:	bd10      	pop	{r4, pc}

0801656a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801656a:	b570      	push	{r4, r5, r6, lr}
 801656c:	4604      	mov	r4, r0
 801656e:	6840      	ldr	r0, [r0, #4]
 8016570:	6803      	ldr	r3, [r0, #0]
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	4798      	blx	r3
 8016576:	4605      	mov	r5, r0
 8016578:	b930      	cbnz	r0, 8016588 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801657a:	7a23      	ldrb	r3, [r4, #8]
 801657c:	b123      	cbz	r3, 8016588 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801657e:	6860      	ldr	r0, [r4, #4]
 8016580:	6803      	ldr	r3, [r0, #0]
 8016582:	695b      	ldr	r3, [r3, #20]
 8016584:	4798      	blx	r3
 8016586:	7225      	strb	r5, [r4, #8]
 8016588:	6860      	ldr	r0, [r4, #4]
 801658a:	6803      	ldr	r3, [r0, #0]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	4798      	blx	r3
 8016590:	b928      	cbnz	r0, 801659e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8016592:	6823      	ldr	r3, [r4, #0]
 8016594:	4620      	mov	r0, r4
 8016596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016598:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801659c:	4718      	bx	r3
 801659e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80165a2:	f7fc bb1b 	b.w	8012bdc <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080165a8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80165a8:	b510      	push	{r4, lr}
 80165aa:	6082      	str	r2, [r0, #8]
 80165ac:	2200      	movs	r2, #0
 80165ae:	4c03      	ldr	r4, [pc, #12]	; (80165bc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 80165b0:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80165b4:	e9c0 4100 	strd	r4, r1, [r0]
 80165b8:	bd10      	pop	{r4, pc}
 80165ba:	bf00      	nop
 80165bc:	0802f3b4 	.word	0x0802f3b4

080165c0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 80165c0:	6840      	ldr	r0, [r0, #4]
 80165c2:	6803      	ldr	r3, [r0, #0]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	4718      	bx	r3

080165c8 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh>:
 80165c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80165d0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80165d4:	68c1      	ldr	r1, [r0, #12]
 80165d6:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 80165da:	2fff      	cmp	r7, #255	; 0xff
 80165dc:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80165e0:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80165e4:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
 80165e8:	d105      	bne.n	80165f6 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 80165ea:	f842 1b04 	str.w	r1, [r2], #4
 80165ee:	4594      	cmp	ip, r2
 80165f0:	d8fb      	bhi.n	80165ea <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x22>
 80165f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80165f6:	6816      	ldr	r6, [r2, #0]
 80165f8:	ea5f 6916 	movs.w	r9, r6, lsr #24
 80165fc:	d104      	bne.n	8016608 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x40>
 80165fe:	6011      	str	r1, [r2, #0]
 8016600:	3204      	adds	r2, #4
 8016602:	4594      	cmp	ip, r2
 8016604:	d8f7      	bhi.n	80165f6 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 8016606:	e7f4      	b.n	80165f2 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2a>
 8016608:	2f00      	cmp	r7, #0
 801660a:	d0f9      	beq.n	8016600 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>
 801660c:	fb07 f809 	mul.w	r8, r7, r9
 8016610:	b2f5      	uxtb	r5, r6
 8016612:	f3c6 2407 	ubfx	r4, r6, #8, #8
 8016616:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801661a:	f108 0301 	add.w	r3, r8, #1
 801661e:	fb09 fa05 	mul.w	sl, r9, r5
 8016622:	eb03 2328 	add.w	r3, r3, r8, asr #8
 8016626:	ea4f 2823 	mov.w	r8, r3, asr #8
 801662a:	eb07 0309 	add.w	r3, r7, r9
 801662e:	eba3 0308 	sub.w	r3, r3, r8
 8016632:	fa5f fe83 	uxtb.w	lr, r3
 8016636:	7c83      	ldrb	r3, [r0, #18]
 8016638:	fb03 a307 	mla	r3, r3, r7, sl
 801663c:	fb04 fa09 	mul.w	sl, r4, r9
 8016640:	fb08 3515 	mls	r5, r8, r5, r3
 8016644:	7c43      	ldrb	r3, [r0, #17]
 8016646:	fb03 a307 	mla	r3, r3, r7, sl
 801664a:	fb95 f5fe 	sdiv	r5, r5, lr
 801664e:	fb08 3414 	mls	r4, r8, r4, r3
 8016652:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
 8016656:	fb06 f309 	mul.w	r3, r6, r9
 801665a:	fb94 f4fe 	sdiv	r4, r4, lr
 801665e:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 8016662:	7c05      	ldrb	r5, [r0, #16]
 8016664:	fb05 3307 	mla	r3, r5, r7, r3
 8016668:	fb08 3316 	mls	r3, r8, r6, r3
 801666c:	fb93 f3fe 	sdiv	r3, r3, lr
 8016670:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8016674:	6013      	str	r3, [r2, #0]
 8016676:	e7c3      	b.n	8016600 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>

08016678 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 8016678:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 801667c:	4770      	bx	lr

0801667e <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 801667e:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8016682:	4770      	bx	lr

08016684 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 8016684:	b510      	push	{r4, lr}
 8016686:	2200      	movs	r2, #0
 8016688:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 801668c:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8016690:	8002      	strh	r2, [r0, #0]
 8016692:	8042      	strh	r2, [r0, #2]
 8016694:	8084      	strh	r4, [r0, #4]
 8016696:	80c1      	strh	r1, [r0, #6]
 8016698:	bd10      	pop	{r4, pc}

0801669a <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 801669a:	2200      	movs	r2, #0
 801669c:	8002      	strh	r2, [r0, #0]
 801669e:	8042      	strh	r2, [r0, #2]
 80166a0:	8082      	strh	r2, [r0, #4]
 80166a2:	80c2      	strh	r2, [r0, #6]
 80166a4:	4770      	bx	lr
	...

080166a8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80166a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80166aa:	6803      	ldr	r3, [r0, #0]
 80166ac:	460d      	mov	r5, r1
 80166ae:	4604      	mov	r4, r0
 80166b0:	4601      	mov	r1, r0
 80166b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80166b4:	a802      	add	r0, sp, #8
 80166b6:	4798      	blx	r3
 80166b8:	6828      	ldr	r0, [r5, #0]
 80166ba:	6869      	ldr	r1, [r5, #4]
 80166bc:	466b      	mov	r3, sp
 80166be:	c303      	stmia	r3!, {r0, r1}
 80166c0:	4668      	mov	r0, sp
 80166c2:	4619      	mov	r1, r3
 80166c4:	f7fe ff6e 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 80166c8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80166ca:	b1a8      	cbz	r0, 80166f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80166cc:	6803      	ldr	r3, [r0, #0]
 80166ce:	1d21      	adds	r1, r4, #4
 80166d0:	68db      	ldr	r3, [r3, #12]
 80166d2:	4798      	blx	r3
 80166d4:	b180      	cbz	r0, 80166f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80166d6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	dd0c      	ble.n	80166f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80166de:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80166e2:	2d00      	cmp	r5, #0
 80166e4:	dd08      	ble.n	80166f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 80166e6:	4a2d      	ldr	r2, [pc, #180]	; (801679c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 80166e8:	7812      	ldrb	r2, [r2, #0]
 80166ea:	b13a      	cbz	r2, 80166fc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 80166ec:	2a01      	cmp	r2, #1
 80166ee:	d02d      	beq.n	801674c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 80166f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80166f2:	6803      	ldr	r3, [r0, #0]
 80166f4:	691b      	ldr	r3, [r3, #16]
 80166f6:	4798      	blx	r3
 80166f8:	b004      	add	sp, #16
 80166fa:	bd70      	pop	{r4, r5, r6, pc}
 80166fc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016700:	441d      	add	r5, r3
 8016702:	b2ad      	uxth	r5, r5
 8016704:	b22e      	sxth	r6, r5
 8016706:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801670a:	42b3      	cmp	r3, r6
 801670c:	daf0      	bge.n	80166f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801670e:	6823      	ldr	r3, [r4, #0]
 8016710:	4669      	mov	r1, sp
 8016712:	4620      	mov	r0, r4
 8016714:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016716:	4798      	blx	r3
 8016718:	b940      	cbnz	r0, 801672c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801671a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801671e:	2b01      	cmp	r3, #1
 8016720:	d004      	beq.n	801672c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8016722:	3301      	adds	r3, #1
 8016724:	105b      	asrs	r3, r3, #1
 8016726:	f8ad 3006 	strh.w	r3, [sp, #6]
 801672a:	e7f0      	b.n	801670e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 801672c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8016730:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8016734:	4413      	add	r3, r2
 8016736:	b29b      	uxth	r3, r3
 8016738:	441a      	add	r2, r3
 801673a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801673e:	b212      	sxth	r2, r2
 8016740:	4296      	cmp	r6, r2
 8016742:	dae0      	bge.n	8016706 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8016744:	1aeb      	subs	r3, r5, r3
 8016746:	f8ad 3006 	strh.w	r3, [sp, #6]
 801674a:	e7dc      	b.n	8016706 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801674c:	f8bd 5000 	ldrh.w	r5, [sp]
 8016750:	441d      	add	r5, r3
 8016752:	b2ad      	uxth	r5, r5
 8016754:	b22e      	sxth	r6, r5
 8016756:	f9bd 3000 	ldrsh.w	r3, [sp]
 801675a:	42b3      	cmp	r3, r6
 801675c:	dac8      	bge.n	80166f0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801675e:	6823      	ldr	r3, [r4, #0]
 8016760:	4669      	mov	r1, sp
 8016762:	4620      	mov	r0, r4
 8016764:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016766:	4798      	blx	r3
 8016768:	b940      	cbnz	r0, 801677c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 801676a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801676e:	2b01      	cmp	r3, #1
 8016770:	d004      	beq.n	801677c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 8016772:	3301      	adds	r3, #1
 8016774:	105b      	asrs	r3, r3, #1
 8016776:	f8ad 3004 	strh.w	r3, [sp, #4]
 801677a:	e7f0      	b.n	801675e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 801677c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8016780:	f8bd 3000 	ldrh.w	r3, [sp]
 8016784:	4413      	add	r3, r2
 8016786:	b29b      	uxth	r3, r3
 8016788:	441a      	add	r2, r3
 801678a:	f8ad 3000 	strh.w	r3, [sp]
 801678e:	b212      	sxth	r2, r2
 8016790:	4296      	cmp	r6, r2
 8016792:	dae0      	bge.n	8016756 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8016794:	1aeb      	subs	r3, r5, r3
 8016796:	f8ad 3004 	strh.w	r3, [sp, #4]
 801679a:	e7dc      	b.n	8016756 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801679c:	2003bed8 	.word	0x2003bed8

080167a0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80167a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80167a2:	6803      	ldr	r3, [r0, #0]
 80167a4:	4604      	mov	r4, r0
 80167a6:	4601      	mov	r1, r0
 80167a8:	4668      	mov	r0, sp
 80167aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80167ac:	4798      	blx	r3
 80167ae:	2100      	movs	r1, #0
 80167b0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80167b4:	4668      	mov	r0, sp
 80167b6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80167ba:	9102      	str	r1, [sp, #8]
 80167bc:	a902      	add	r1, sp, #8
 80167be:	f8ad 200c 	strh.w	r2, [sp, #12]
 80167c2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80167c6:	f7fe feed 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 80167ca:	6823      	ldr	r3, [r4, #0]
 80167cc:	4669      	mov	r1, sp
 80167ce:	4620      	mov	r0, r4
 80167d0:	691b      	ldr	r3, [r3, #16]
 80167d2:	4798      	blx	r3
 80167d4:	b004      	add	sp, #16
 80167d6:	bd10      	pop	{r4, pc}

080167d8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80167d8:	2101      	movs	r1, #1
 80167da:	2200      	movs	r2, #0
 80167dc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 80167e0:	490a      	ldr	r1, [pc, #40]	; (801680c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80167e2:	8082      	strh	r2, [r0, #4]
 80167e4:	6001      	str	r1, [r0, #0]
 80167e6:	21ff      	movs	r1, #255	; 0xff
 80167e8:	80c2      	strh	r2, [r0, #6]
 80167ea:	8102      	strh	r2, [r0, #8]
 80167ec:	8142      	strh	r2, [r0, #10]
 80167ee:	8182      	strh	r2, [r0, #12]
 80167f0:	81c2      	strh	r2, [r0, #14]
 80167f2:	8202      	strh	r2, [r0, #16]
 80167f4:	8242      	strh	r2, [r0, #18]
 80167f6:	61c2      	str	r2, [r0, #28]
 80167f8:	8402      	strh	r2, [r0, #32]
 80167fa:	8442      	strh	r2, [r0, #34]	; 0x22
 80167fc:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8016800:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8016804:	6282      	str	r2, [r0, #40]	; 0x28
 8016806:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801680a:	4770      	bx	lr
 801680c:	0802f410 	.word	0x0802f410

08016810 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8016810:	f101 0364 	add.w	r3, r1, #100	; 0x64
 8016814:	4602      	mov	r2, r0
 8016816:	cb03      	ldmia	r3!, {r0, r1}
 8016818:	6010      	str	r0, [r2, #0]
 801681a:	4610      	mov	r0, r2
 801681c:	6051      	str	r1, [r2, #4]
 801681e:	4770      	bx	lr

08016820 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8016820:	b507      	push	{r0, r1, r2, lr}
 8016822:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8016826:	ab01      	add	r3, sp, #4
 8016828:	6809      	ldr	r1, [r1, #0]
 801682a:	6800      	ldr	r0, [r0, #0]
 801682c:	f004 fd5b 	bl	801b2e6 <_ZN8touchgfx6muldivElllRl>
 8016830:	b003      	add	sp, #12
 8016832:	f85d fb04 	ldr.w	pc, [sp], #4

08016836 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8016836:	6800      	ldr	r0, [r0, #0]
 8016838:	2800      	cmp	r0, #0
 801683a:	bfb9      	ittee	lt
 801683c:	2320      	movlt	r3, #32
 801683e:	fb90 f0f3 	sdivlt	r0, r0, r3
 8016842:	301f      	addge	r0, #31
 8016844:	1140      	asrge	r0, r0, #5
 8016846:	4770      	bx	lr

08016848 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8016848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801684c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 8016850:	b089      	sub	sp, #36	; 0x24
 8016852:	4604      	mov	r4, r0
 8016854:	b353      	cbz	r3, 80168ac <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 8016856:	6803      	ldr	r3, [r0, #0]
 8016858:	4601      	mov	r1, r0
 801685a:	a802      	add	r0, sp, #8
 801685c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801685e:	4798      	blx	r3
 8016860:	2220      	movs	r2, #32
 8016862:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 8016866:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016868:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801686a:	f8d4 b000 	ldr.w	fp, [r4]
 801686e:	fb9a f0f2 	sdiv	r0, sl, r2
 8016872:	fb91 f5f2 	sdiv	r5, r1, r2
 8016876:	fb93 f6f2 	sdiv	r6, r3, r2
 801687a:	1b40      	subs	r0, r0, r5
 801687c:	0076      	lsls	r6, r6, #1
 801687e:	2800      	cmp	r0, #0
 8016880:	bfb8      	it	lt
 8016882:	4240      	neglt	r0, r0
 8016884:	4286      	cmp	r6, r0
 8016886:	dc0c      	bgt.n	80168a2 <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 8016888:	6b25      	ldr	r5, [r4, #48]	; 0x30
 801688a:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 801688e:	fb95 f0f2 	sdiv	r0, r5, r2
 8016892:	fb98 f7f2 	sdiv	r7, r8, r2
 8016896:	1bc0      	subs	r0, r0, r7
 8016898:	2800      	cmp	r0, #0
 801689a:	bfb8      	it	lt
 801689c:	4240      	neglt	r0, r0
 801689e:	4286      	cmp	r6, r0
 80168a0:	dd07      	ble.n	80168b2 <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 80168a2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80168a6:	a902      	add	r1, sp, #8
 80168a8:	4620      	mov	r0, r4
 80168aa:	4798      	blx	r3
 80168ac:	b009      	add	sp, #36	; 0x24
 80168ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168b2:	eb01 060a 	add.w	r6, r1, sl
 80168b6:	2002      	movs	r0, #2
 80168b8:	eb08 0705 	add.w	r7, r8, r5
 80168bc:	3301      	adds	r3, #1
 80168be:	f10d 0920 	add.w	r9, sp, #32
 80168c2:	9101      	str	r1, [sp, #4]
 80168c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80168c8:	fb96 f6f0 	sdiv	r6, r6, r0
 80168cc:	fb97 f7f0 	sdiv	r7, r7, r0
 80168d0:	4103      	asrs	r3, r0
 80168d2:	b236      	sxth	r6, r6
 80168d4:	b23f      	sxth	r7, r7
 80168d6:	f849 3d08 	str.w	r3, [r9, #-8]!
 80168da:	4648      	mov	r0, r9
 80168dc:	fb96 f6f2 	sdiv	r6, r6, r2
 80168e0:	fb97 f7f2 	sdiv	r7, r7, r2
 80168e4:	f7ff ffa7 	bl	8016836 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 80168e8:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80168ec:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 80168f0:	fa1f fe87 	uxth.w	lr, r7
 80168f4:	9901      	ldr	r1, [sp, #4]
 80168f6:	fa1f fc86 	uxth.w	ip, r6
 80168fa:	4293      	cmp	r3, r2
 80168fc:	b280      	uxth	r0, r0
 80168fe:	eba1 0a0a 	sub.w	sl, r1, sl
 8016902:	da54      	bge.n	80169ae <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8016904:	ebac 0100 	sub.w	r1, ip, r0
 8016908:	f1ba 0f00 	cmp.w	sl, #0
 801690c:	4460      	add	r0, ip
 801690e:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8016912:	b289      	uxth	r1, r1
 8016914:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8016918:	b280      	uxth	r0, r0
 801691a:	b20e      	sxth	r6, r1
 801691c:	da29      	bge.n	8016972 <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801691e:	eba8 0505 	sub.w	r5, r8, r5
 8016922:	2d00      	cmp	r5, #0
 8016924:	da2a      	bge.n	801697c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8016926:	fa1f f88a 	uxth.w	r8, sl
 801692a:	f8ad a010 	strh.w	sl, [sp, #16]
 801692e:	fa1f f58c 	uxth.w	r5, ip
 8016932:	f8ad c012 	strh.w	ip, [sp, #18]
 8016936:	eba0 0008 	sub.w	r0, r0, r8
 801693a:	4443      	add	r3, r8
 801693c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016940:	f8ad 0014 	strh.w	r0, [sp, #20]
 8016944:	1a59      	subs	r1, r3, r1
 8016946:	ebae 0005 	sub.w	r0, lr, r5
 801694a:	f8ad 701a 	strh.w	r7, [sp, #26]
 801694e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8016952:	f8ad 0016 	strh.w	r0, [sp, #22]
 8016956:	442a      	add	r2, r5
 8016958:	eba2 0e0e 	sub.w	lr, r2, lr
 801695c:	f8ad e01e 	strh.w	lr, [sp, #30]
 8016960:	f8db 3010 	ldr.w	r3, [fp, #16]
 8016964:	a904      	add	r1, sp, #16
 8016966:	4620      	mov	r0, r4
 8016968:	4798      	blx	r3
 801696a:	6823      	ldr	r3, [r4, #0]
 801696c:	4649      	mov	r1, r9
 801696e:	691b      	ldr	r3, [r3, #16]
 8016970:	e79a      	b.n	80168a8 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 8016972:	d003      	beq.n	801697c <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8016974:	eba8 0505 	sub.w	r5, r8, r5
 8016978:	2d00      	cmp	r5, #0
 801697a:	dcd4      	bgt.n	8016926 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 801697c:	fa1f f88a 	uxth.w	r8, sl
 8016980:	f8ad 6010 	strh.w	r6, [sp, #16]
 8016984:	fa1f f58c 	uxth.w	r5, ip
 8016988:	f8ad c012 	strh.w	ip, [sp, #18]
 801698c:	4443      	add	r3, r8
 801698e:	eba0 0008 	sub.w	r0, r0, r8
 8016992:	f8ad a018 	strh.w	sl, [sp, #24]
 8016996:	1a59      	subs	r1, r3, r1
 8016998:	ebae 0305 	sub.w	r3, lr, r5
 801699c:	f8ad 701a 	strh.w	r7, [sp, #26]
 80169a0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80169a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80169a8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80169ac:	e7d3      	b.n	8016956 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 80169ae:	ebae 0100 	sub.w	r1, lr, r0
 80169b2:	f1ba 0f00 	cmp.w	sl, #0
 80169b6:	4470      	add	r0, lr
 80169b8:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 80169bc:	b289      	uxth	r1, r1
 80169be:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 80169c2:	b280      	uxth	r0, r0
 80169c4:	b20f      	sxth	r7, r1
 80169c6:	da20      	bge.n	8016a0a <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 80169c8:	eba8 0505 	sub.w	r5, r8, r5
 80169cc:	2d00      	cmp	r5, #0
 80169ce:	da21      	bge.n	8016a14 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 80169d0:	fa1f f88e 	uxth.w	r8, lr
 80169d4:	f8ad e010 	strh.w	lr, [sp, #16]
 80169d8:	fa1f f58a 	uxth.w	r5, sl
 80169dc:	f8ad a012 	strh.w	sl, [sp, #18]
 80169e0:	4443      	add	r3, r8
 80169e2:	ebac 0e08 	sub.w	lr, ip, r8
 80169e6:	442a      	add	r2, r5
 80169e8:	1b40      	subs	r0, r0, r5
 80169ea:	eba3 0c0c 	sub.w	ip, r3, ip
 80169ee:	f8ad e014 	strh.w	lr, [sp, #20]
 80169f2:	1a51      	subs	r1, r2, r1
 80169f4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80169f8:	f8ad 6018 	strh.w	r6, [sp, #24]
 80169fc:	f8ad 701a 	strh.w	r7, [sp, #26]
 8016a00:	f8ad c01c 	strh.w	ip, [sp, #28]
 8016a04:	f8ad 101e 	strh.w	r1, [sp, #30]
 8016a08:	e7aa      	b.n	8016960 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 8016a0a:	d003      	beq.n	8016a14 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8016a0c:	eba8 0505 	sub.w	r5, r8, r5
 8016a10:	2d00      	cmp	r5, #0
 8016a12:	dcdd      	bgt.n	80169d0 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8016a14:	fa1f f58e 	uxth.w	r5, lr
 8016a18:	f8ad 7012 	strh.w	r7, [sp, #18]
 8016a1c:	fa1f f88a 	uxth.w	r8, sl
 8016a20:	f8ad e010 	strh.w	lr, [sp, #16]
 8016a24:	442b      	add	r3, r5
 8016a26:	ebac 0705 	sub.w	r7, ip, r5
 8016a2a:	4442      	add	r2, r8
 8016a2c:	eba0 0008 	sub.w	r0, r0, r8
 8016a30:	eba3 0c0c 	sub.w	ip, r3, ip
 8016a34:	f8ad 7014 	strh.w	r7, [sp, #20]
 8016a38:	1a51      	subs	r1, r2, r1
 8016a3a:	f8ad 6018 	strh.w	r6, [sp, #24]
 8016a3e:	f8ad a01a 	strh.w	sl, [sp, #26]
 8016a42:	f8ad 1016 	strh.w	r1, [sp, #22]
 8016a46:	f8ad c01c 	strh.w	ip, [sp, #28]
 8016a4a:	f8ad 001e 	strh.w	r0, [sp, #30]
 8016a4e:	e787      	b.n	8016960 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

08016a50 <_ZN8touchgfx7CWRUtil4sineEi>:
 8016a50:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8016a54:	fb90 f2f3 	sdiv	r2, r0, r3
 8016a58:	fb02 0013 	mls	r0, r2, r3, r0
 8016a5c:	2800      	cmp	r0, #0
 8016a5e:	bfb8      	it	lt
 8016a60:	18c0      	addlt	r0, r0, r3
 8016a62:	4b0a      	ldr	r3, [pc, #40]	; (8016a8c <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8016a64:	285a      	cmp	r0, #90	; 0x5a
 8016a66:	dc02      	bgt.n	8016a6e <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8016a68:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016a6c:	4770      	bx	lr
 8016a6e:	28b4      	cmp	r0, #180	; 0xb4
 8016a70:	dc02      	bgt.n	8016a78 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 8016a72:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 8016a76:	e7f7      	b.n	8016a68 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8016a78:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 8016a7c:	bfd4      	ite	le
 8016a7e:	38b4      	suble	r0, #180	; 0xb4
 8016a80:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 8016a84:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8016a88:	4240      	negs	r0, r0
 8016a8a:	4770      	bx	lr
 8016a8c:	0802f4ec 	.word	0x0802f4ec

08016a90 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 8016a90:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8016a94:	f04f 0300 	mov.w	r3, #0
 8016a98:	bf2c      	ite	cs
 8016a9a:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 8016a9e:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 8016aa2:	1899      	adds	r1, r3, r2
 8016aa4:	4288      	cmp	r0, r1
 8016aa6:	bf24      	itt	cs
 8016aa8:	1853      	addcs	r3, r2, r1
 8016aaa:	1a40      	subcs	r0, r0, r1
 8016aac:	0892      	lsrs	r2, r2, #2
 8016aae:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8016ab2:	d1f6      	bne.n	8016aa2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	4770      	bx	lr

08016ab8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8016ab8:	b510      	push	{r4, lr}
 8016aba:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8016abe:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8016ac2:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8016ac6:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8016aca:	139b      	asrs	r3, r3, #14
 8016acc:	13a4      	asrs	r4, r4, #14
 8016ace:	429c      	cmp	r4, r3
 8016ad0:	bfb8      	it	lt
 8016ad2:	461c      	movlt	r4, r3
 8016ad4:	2c01      	cmp	r4, #1
 8016ad6:	dd07      	ble.n	8016ae8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8016ad8:	fb91 f1f4 	sdiv	r1, r1, r4
 8016adc:	fb90 f0f4 	sdiv	r0, r0, r4
 8016ae0:	f7ff ffea 	bl	8016ab8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016ae4:	4360      	muls	r0, r4
 8016ae6:	bd10      	pop	{r4, pc}
 8016ae8:	4340      	muls	r0, r0
 8016aea:	fb01 0001 	mla	r0, r1, r1, r0
 8016aee:	f7ff ffcf 	bl	8016a90 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016af2:	e7f8      	b.n	8016ae6 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08016af4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8016af4:	2800      	cmp	r0, #0
 8016af6:	b508      	push	{r3, lr}
 8016af8:	da05      	bge.n	8016b06 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8016afa:	4240      	negs	r0, r0
 8016afc:	f7ff fffa 	bl	8016af4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016b00:	4240      	negs	r0, r0
 8016b02:	b240      	sxtb	r0, r0
 8016b04:	bd08      	pop	{r3, pc}
 8016b06:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8016b0a:	dc11      	bgt.n	8016b30 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8016b0c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8016b10:	dd09      	ble.n	8016b26 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8016b12:	4340      	muls	r0, r0
 8016b14:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8016b18:	f7ff ffba 	bl	8016a90 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8016b1c:	f7ff ffea 	bl	8016af4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016b20:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016b24:	e7ed      	b.n	8016b02 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8016b26:	3003      	adds	r0, #3
 8016b28:	4b02      	ldr	r3, [pc, #8]	; (8016b34 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8016b2a:	10c0      	asrs	r0, r0, #3
 8016b2c:	5618      	ldrsb	r0, [r3, r0]
 8016b2e:	e7e9      	b.n	8016b04 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016b30:	2000      	movs	r0, #0
 8016b32:	e7e7      	b.n	8016b04 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8016b34:	0802f490 	.word	0x0802f490

08016b38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8016b38:	4281      	cmp	r1, r0
 8016b3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b3c:	460c      	mov	r4, r1
 8016b3e:	4615      	mov	r5, r2
 8016b40:	dd07      	ble.n	8016b52 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8016b42:	4601      	mov	r1, r0
 8016b44:	4620      	mov	r0, r4
 8016b46:	f7ff fff7 	bl	8016b38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016b4a:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8016b4e:	b003      	add	sp, #12
 8016b50:	bd30      	pop	{r4, r5, pc}
 8016b52:	f7ff ffb1 	bl	8016ab8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016b56:	6028      	str	r0, [r5, #0]
 8016b58:	2800      	cmp	r0, #0
 8016b5a:	d0f8      	beq.n	8016b4e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 8016b5c:	4602      	mov	r2, r0
 8016b5e:	ab01      	add	r3, sp, #4
 8016b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016b64:	4620      	mov	r0, r4
 8016b66:	f004 fbbe 	bl	801b2e6 <_ZN8touchgfx6muldivElllRl>
 8016b6a:	f7ff ffc3 	bl	8016af4 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8016b6e:	e7ee      	b.n	8016b4e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08016b70 <_ZN8touchgfx4LineC1Ev>:
 8016b70:	b510      	push	{r4, lr}
 8016b72:	4604      	mov	r4, r0
 8016b74:	f7ff fe30 	bl	80167d8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8016b78:	4b0c      	ldr	r3, [pc, #48]	; (8016bac <_ZN8touchgfx4LineC1Ev+0x3c>)
 8016b7a:	2220      	movs	r2, #32
 8016b7c:	4620      	mov	r0, r4
 8016b7e:	6023      	str	r3, [r4, #0]
 8016b80:	2300      	movs	r3, #0
 8016b82:	63e2      	str	r2, [r4, #60]	; 0x3c
 8016b84:	2212      	movs	r2, #18
 8016b86:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8016b8a:	66e2      	str	r2, [r4, #108]	; 0x6c
 8016b8c:	60a3      	str	r3, [r4, #8]
 8016b8e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8016b92:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8016b96:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8016b9a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8016b9e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8016ba2:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8016ba6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8016baa:	bd10      	pop	{r4, pc}
 8016bac:	0802f5ac 	.word	0x0802f5ac

08016bb0 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8016bb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016bb4:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8016bb6:	4604      	mov	r4, r0
 8016bb8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016bba:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8016bbc:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8016bbe:	1aff      	subs	r7, r7, r3
 8016bc0:	eba5 0502 	sub.w	r5, r5, r2
 8016bc4:	d142      	bne.n	8016c4c <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8016bc6:	b955      	cbnz	r5, 8016bde <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8016bc8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 8016bcc:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8016bd0:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 8016bd4:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 8016bd8:	b002      	add	sp, #8
 8016bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016bde:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8016be2:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8016be6:	4629      	mov	r1, r5
 8016be8:	2502      	movs	r5, #2
 8016bea:	4642      	mov	r2, r8
 8016bec:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016bee:	f004 fb99 	bl	801b324 <_ZN8touchgfx6muldivElll>
 8016bf2:	4642      	mov	r2, r8
 8016bf4:	4639      	mov	r1, r7
 8016bf6:	fb90 f6f5 	sdiv	r6, r0, r5
 8016bfa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016bfc:	f004 fb92 	bl	801b324 <_ZN8touchgfx6muldivElll>
 8016c00:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8016c04:	fb90 f5f5 	sdiv	r5, r0, r5
 8016c08:	f1b9 0f00 	cmp.w	r9, #0
 8016c0c:	d067      	beq.n	8016cde <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8016c0e:	f1b9 0f02 	cmp.w	r9, #2
 8016c12:	d878      	bhi.n	8016d06 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8016c14:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016c16:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8016c18:	1b93      	subs	r3, r2, r6
 8016c1a:	4432      	add	r2, r6
 8016c1c:	1b5b      	subs	r3, r3, r5
 8016c1e:	1b52      	subs	r2, r2, r5
 8016c20:	6463      	str	r3, [r4, #68]	; 0x44
 8016c22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c24:	6522      	str	r2, [r4, #80]	; 0x50
 8016c26:	18e9      	adds	r1, r5, r3
 8016c28:	1b5b      	subs	r3, r3, r5
 8016c2a:	1b89      	subs	r1, r1, r6
 8016c2c:	1b9b      	subs	r3, r3, r6
 8016c2e:	6561      	str	r1, [r4, #84]	; 0x54
 8016c30:	1b81      	subs	r1, r0, r6
 8016c32:	4430      	add	r0, r6
 8016c34:	4429      	add	r1, r5
 8016c36:	4428      	add	r0, r5
 8016c38:	64a1      	str	r1, [r4, #72]	; 0x48
 8016c3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016c3c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016c3e:	186f      	adds	r7, r5, r1
 8016c40:	1b49      	subs	r1, r1, r5
 8016c42:	4437      	add	r7, r6
 8016c44:	4431      	add	r1, r6
 8016c46:	65a7      	str	r7, [r4, #88]	; 0x58
 8016c48:	65e1      	str	r1, [r4, #92]	; 0x5c
 8016c4a:	e05b      	b.n	8016d04 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8016c4c:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8016c50:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8016c54:	2d00      	cmp	r5, #0
 8016c56:	d0c6      	beq.n	8016be6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8016c58:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8016c5c:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8016c60:	fb93 f2f8 	sdiv	r2, r3, r8
 8016c64:	fb08 3312 	mls	r3, r8, r2, r3
 8016c68:	b353      	cbz	r3, 8016cc0 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8016c6a:	fb98 f2f3 	sdiv	r2, r8, r3
 8016c6e:	fb03 8812 	mls	r8, r3, r2, r8
 8016c72:	f1b8 0f00 	cmp.w	r8, #0
 8016c76:	d1f3      	bne.n	8016c60 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8016c78:	2b01      	cmp	r3, #1
 8016c7a:	f24b 5104 	movw	r1, #46340	; 0xb504
 8016c7e:	bf1c      	itt	ne
 8016c80:	fb97 f7f3 	sdivne	r7, r7, r3
 8016c84:	fb95 f5f3 	sdivne	r5, r5, r3
 8016c88:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8016c8c:	4608      	mov	r0, r1
 8016c8e:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8016c92:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8016c96:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8016c9a:	428b      	cmp	r3, r1
 8016c9c:	dd01      	ble.n	8016ca2 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8016c9e:	428a      	cmp	r2, r1
 8016ca0:	dc10      	bgt.n	8016cc4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8016ca2:	fb90 f3f3 	sdiv	r3, r0, r3
 8016ca6:	fb90 f2f2 	sdiv	r2, r0, r2
 8016caa:	4293      	cmp	r3, r2
 8016cac:	bfa8      	it	ge
 8016cae:	4613      	movge	r3, r2
 8016cb0:	435f      	muls	r7, r3
 8016cb2:	435d      	muls	r5, r3
 8016cb4:	4629      	mov	r1, r5
 8016cb6:	4638      	mov	r0, r7
 8016cb8:	f7ff fefe 	bl	8016ab8 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8016cbc:	4680      	mov	r8, r0
 8016cbe:	e792      	b.n	8016be6 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8016cc0:	4643      	mov	r3, r8
 8016cc2:	e7d9      	b.n	8016c78 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8016cc4:	fb93 f3f1 	sdiv	r3, r3, r1
 8016cc8:	fb92 f2f1 	sdiv	r2, r2, r1
 8016ccc:	4293      	cmp	r3, r2
 8016cce:	bfcc      	ite	gt
 8016cd0:	3301      	addgt	r3, #1
 8016cd2:	1c53      	addle	r3, r2, #1
 8016cd4:	fb97 f7f3 	sdiv	r7, r7, r3
 8016cd8:	fb95 f5f3 	sdiv	r5, r5, r3
 8016cdc:	e7ea      	b.n	8016cb4 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8016cde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016ce0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8016ce2:	1b93      	subs	r3, r2, r6
 8016ce4:	4432      	add	r2, r6
 8016ce6:	6463      	str	r3, [r4, #68]	; 0x44
 8016ce8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016cea:	6522      	str	r2, [r4, #80]	; 0x50
 8016cec:	18e9      	adds	r1, r5, r3
 8016cee:	1b5b      	subs	r3, r3, r5
 8016cf0:	6561      	str	r1, [r4, #84]	; 0x54
 8016cf2:	1b81      	subs	r1, r0, r6
 8016cf4:	4430      	add	r0, r6
 8016cf6:	64a1      	str	r1, [r4, #72]	; 0x48
 8016cf8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016cfa:	64e0      	str	r0, [r4, #76]	; 0x4c
 8016cfc:	186f      	adds	r7, r5, r1
 8016cfe:	1b49      	subs	r1, r1, r5
 8016d00:	65a7      	str	r7, [r4, #88]	; 0x58
 8016d02:	65e1      	str	r1, [r4, #92]	; 0x5c
 8016d04:	6623      	str	r3, [r4, #96]	; 0x60
 8016d06:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8016d08:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8016d0c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8016d0e:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8016d12:	9200      	str	r2, [sp, #0]
 8016d14:	9301      	str	r3, [sp, #4]
 8016d16:	680f      	ldr	r7, [r1, #0]
 8016d18:	3104      	adds	r1, #4
 8016d1a:	9800      	ldr	r0, [sp, #0]
 8016d1c:	42ba      	cmp	r2, r7
 8016d1e:	bfa8      	it	ge
 8016d20:	463a      	movge	r2, r7
 8016d22:	4287      	cmp	r7, r0
 8016d24:	9801      	ldr	r0, [sp, #4]
 8016d26:	bfc8      	it	gt
 8016d28:	9700      	strgt	r7, [sp, #0]
 8016d2a:	68cf      	ldr	r7, [r1, #12]
 8016d2c:	42bb      	cmp	r3, r7
 8016d2e:	bfa8      	it	ge
 8016d30:	463b      	movge	r3, r7
 8016d32:	4287      	cmp	r7, r0
 8016d34:	bfc8      	it	gt
 8016d36:	9701      	strgt	r7, [sp, #4]
 8016d38:	458c      	cmp	ip, r1
 8016d3a:	d1ec      	bne.n	8016d16 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8016d3c:	2720      	movs	r7, #32
 8016d3e:	4668      	mov	r0, sp
 8016d40:	fb92 f8f7 	sdiv	r8, r2, r7
 8016d44:	fb93 f7f7 	sdiv	r7, r3, r7
 8016d48:	f7ff fd75 	bl	8016836 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016d4c:	4682      	mov	sl, r0
 8016d4e:	a801      	add	r0, sp, #4
 8016d50:	f7ff fd71 	bl	8016836 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8016d54:	ebaa 0208 	sub.w	r2, sl, r8
 8016d58:	1bc0      	subs	r0, r0, r7
 8016d5a:	f1b9 0f01 	cmp.w	r9, #1
 8016d5e:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 8016d62:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 8016d66:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 8016d6a:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 8016d6e:	f47f af33 	bne.w	8016bd8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8016d72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016d76:	1b83      	subs	r3, r0, r6
 8016d78:	6463      	str	r3, [r4, #68]	; 0x44
 8016d7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016d7c:	18ea      	adds	r2, r5, r3
 8016d7e:	6562      	str	r2, [r4, #84]	; 0x54
 8016d80:	1b8a      	subs	r2, r1, r6
 8016d82:	4431      	add	r1, r6
 8016d84:	4406      	add	r6, r0
 8016d86:	64a2      	str	r2, [r4, #72]	; 0x48
 8016d88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016d8a:	64e1      	str	r1, [r4, #76]	; 0x4c
 8016d8c:	18af      	adds	r7, r5, r2
 8016d8e:	1b52      	subs	r2, r2, r5
 8016d90:	1b5d      	subs	r5, r3, r5
 8016d92:	6526      	str	r6, [r4, #80]	; 0x50
 8016d94:	65a7      	str	r7, [r4, #88]	; 0x58
 8016d96:	65e2      	str	r2, [r4, #92]	; 0x5c
 8016d98:	6625      	str	r5, [r4, #96]	; 0x60
 8016d9a:	e71d      	b.n	8016bd8 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08016d9c <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8016d9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8016d9e:	428b      	cmp	r3, r1
 8016da0:	d102      	bne.n	8016da8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8016da2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8016da4:	4293      	cmp	r3, r2
 8016da6:	d003      	beq.n	8016db0 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8016da8:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 8016dac:	f7ff bf00 	b.w	8016bb0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016db0:	4770      	bx	lr

08016db2 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8016db2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8016db4:	428b      	cmp	r3, r1
 8016db6:	d102      	bne.n	8016dbe <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8016db8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8016dba:	4293      	cmp	r3, r2
 8016dbc:	d003      	beq.n	8016dc6 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8016dbe:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8016dc2:	f7ff bef5 	b.w	8016bb0 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8016dc6:	4770      	bx	lr

08016dc8 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8016dc8:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8016dcc:	f7ff bef0 	b.w	8016bb0 <_ZN8touchgfx4Line17updateCachedShapeEv>

08016dd0 <_ZN8touchgfx6CanvasD1Ev>:
 8016dd0:	4b04      	ldr	r3, [pc, #16]	; (8016de4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8016dd2:	b510      	push	{r4, lr}
 8016dd4:	4604      	mov	r4, r0
 8016dd6:	f840 3b20 	str.w	r3, [r0], #32
 8016dda:	f000 fdd0 	bl	801797e <_ZN8touchgfx7OutlineD1Ev>
 8016dde:	4620      	mov	r0, r4
 8016de0:	bd10      	pop	{r4, pc}
 8016de2:	bf00      	nop
 8016de4:	0802f488 	.word	0x0802f488

08016de8 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8016de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dec:	b0a0      	sub	sp, #128	; 0x80
 8016dee:	4604      	mov	r4, r0
 8016df0:	460a      	mov	r2, r1
 8016df2:	4601      	mov	r1, r0
 8016df4:	a804      	add	r0, sp, #16
 8016df6:	f011 fd31 	bl	802885c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8016dfa:	2300      	movs	r3, #0
 8016dfc:	9301      	str	r3, [sp, #4]
 8016dfe:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8016e02:	2b01      	cmp	r3, #1
 8016e04:	d17c      	bne.n	8016f00 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8016e06:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8016e08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8016e0a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8016e0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016e0e:	1ac0      	subs	r0, r0, r3
 8016e10:	eba1 0102 	sub.w	r1, r1, r2
 8016e14:	d437      	bmi.n	8016e86 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8016e16:	2900      	cmp	r1, #0
 8016e18:	aa01      	add	r2, sp, #4
 8016e1a:	db2e      	blt.n	8016e7a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 8016e1c:	f7ff fe8c 	bl	8016b38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016e20:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8016e24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8016e26:	a804      	add	r0, sp, #16
 8016e28:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016e2a:	f011 feed 	bl	8028c08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016e2e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016e30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016e32:	a804      	add	r0, sp, #16
 8016e34:	f011 fdc0 	bl	80289b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016e38:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8016e3a:	2db3      	cmp	r5, #179	; 0xb3
 8016e3c:	dc33      	bgt.n	8016ea6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 8016e3e:	eba6 0805 	sub.w	r8, r6, r5
 8016e42:	4640      	mov	r0, r8
 8016e44:	f7ff fe04 	bl	8016a50 <_ZN8touchgfx7CWRUtil4sineEi>
 8016e48:	a902      	add	r1, sp, #8
 8016e4a:	9002      	str	r0, [sp, #8]
 8016e4c:	a801      	add	r0, sp, #4
 8016e4e:	f7ff fce7 	bl	8016820 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016e54:	1847      	adds	r7, r0, r1
 8016e56:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8016e5a:	f7ff fdf9 	bl	8016a50 <_ZN8touchgfx7CWRUtil4sineEi>
 8016e5e:	a903      	add	r1, sp, #12
 8016e60:	9003      	str	r0, [sp, #12]
 8016e62:	a801      	add	r0, sp, #4
 8016e64:	f7ff fcdc 	bl	8016820 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016e68:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8016e6a:	4639      	mov	r1, r7
 8016e6c:	1a12      	subs	r2, r2, r0
 8016e6e:	a804      	add	r0, sp, #16
 8016e70:	f011 fda2 	bl	80289b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016e74:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016e76:	441d      	add	r5, r3
 8016e78:	e7df      	b.n	8016e3a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 8016e7a:	4249      	negs	r1, r1
 8016e7c:	f7ff fe5c 	bl	8016b38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016e80:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 8016e84:	e7ce      	b.n	8016e24 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8016e86:	2900      	cmp	r1, #0
 8016e88:	f1c0 0000 	rsb	r0, r0, #0
 8016e8c:	aa01      	add	r2, sp, #4
 8016e8e:	db04      	blt.n	8016e9a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 8016e90:	f7ff fe52 	bl	8016b38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016e94:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 8016e98:	e7c4      	b.n	8016e24 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8016e9a:	4249      	negs	r1, r1
 8016e9c:	f7ff fe4c 	bl	8016b38 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8016ea0:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 8016ea4:	e7be      	b.n	8016e24 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8016ea6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016ea8:	a804      	add	r0, sp, #16
 8016eaa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016eac:	f011 fd84 	bl	80289b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016eb0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8016eb2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016eb4:	a804      	add	r0, sp, #16
 8016eb6:	f011 fd7f 	bl	80289b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016eba:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8016ebc:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 8016ec0:	2d00      	cmp	r5, #0
 8016ec2:	dd31      	ble.n	8016f28 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8016ec4:	eb05 0806 	add.w	r8, r5, r6
 8016ec8:	4640      	mov	r0, r8
 8016eca:	f7ff fdc1 	bl	8016a50 <_ZN8touchgfx7CWRUtil4sineEi>
 8016ece:	a902      	add	r1, sp, #8
 8016ed0:	9002      	str	r0, [sp, #8]
 8016ed2:	a801      	add	r0, sp, #4
 8016ed4:	f7ff fca4 	bl	8016820 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016ed8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016eda:	1847      	adds	r7, r0, r1
 8016edc:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8016ee0:	f7ff fdb6 	bl	8016a50 <_ZN8touchgfx7CWRUtil4sineEi>
 8016ee4:	a903      	add	r1, sp, #12
 8016ee6:	9003      	str	r0, [sp, #12]
 8016ee8:	a801      	add	r0, sp, #4
 8016eea:	f7ff fc99 	bl	8016820 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8016eee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8016ef0:	4639      	mov	r1, r7
 8016ef2:	1a12      	subs	r2, r2, r0
 8016ef4:	a804      	add	r0, sp, #16
 8016ef6:	f011 fd5f 	bl	80289b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016efa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8016efc:	1aed      	subs	r5, r5, r3
 8016efe:	e7df      	b.n	8016ec0 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8016f00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8016f02:	a804      	add	r0, sp, #16
 8016f04:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016f06:	f011 fe7f 	bl	8028c08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8016f0a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8016f0c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016f0e:	a804      	add	r0, sp, #16
 8016f10:	f011 fd52 	bl	80289b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016f14:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8016f16:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8016f18:	a804      	add	r0, sp, #16
 8016f1a:	f011 fd4d 	bl	80289b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016f1e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8016f20:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8016f22:	a804      	add	r0, sp, #16
 8016f24:	f011 fd48 	bl	80289b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8016f28:	21ff      	movs	r1, #255	; 0xff
 8016f2a:	a804      	add	r0, sp, #16
 8016f2c:	f011 fdc0 	bl	8028ab0 <_ZN8touchgfx6Canvas6renderEh>
 8016f30:	4604      	mov	r4, r0
 8016f32:	a804      	add	r0, sp, #16
 8016f34:	f7ff ff4c 	bl	8016dd0 <_ZN8touchgfx6CanvasD1Ev>
 8016f38:	4620      	mov	r0, r4
 8016f3a:	b020      	add	sp, #128	; 0x80
 8016f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f40 <_ZN8touchgfx6CanvasD0Ev>:
 8016f40:	b510      	push	{r4, lr}
 8016f42:	4604      	mov	r4, r0
 8016f44:	f7ff ff44 	bl	8016dd0 <_ZN8touchgfx6CanvasD1Ev>
 8016f48:	2170      	movs	r1, #112	; 0x70
 8016f4a:	4620      	mov	r0, r4
 8016f4c:	f011 feae 	bl	8028cac <_ZdlPvj>
 8016f50:	4620      	mov	r0, r4
 8016f52:	bd10      	pop	{r4, pc}

08016f54 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8016f54:	2000      	movs	r0, #0
 8016f56:	4770      	bx	lr

08016f58 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8016f58:	4b07      	ldr	r3, [pc, #28]	; (8016f78 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8016f5a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8016f5c:	881b      	ldrh	r3, [r3, #0]
 8016f5e:	4293      	cmp	r3, r2
 8016f60:	bf81      	itttt	hi
 8016f62:	4b06      	ldrhi	r3, [pc, #24]	; (8016f7c <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8016f64:	681b      	ldrhi	r3, [r3, #0]
 8016f66:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8016f6a:	7858      	ldrbhi	r0, [r3, #1]
 8016f6c:	bf8c      	ite	hi
 8016f6e:	f000 0003 	andhi.w	r0, r0, #3
 8016f72:	2000      	movls	r0, #0
 8016f74:	4770      	bx	lr
 8016f76:	bf00      	nop
 8016f78:	2003bf3c 	.word	0x2003bf3c
 8016f7c:	2003bf38 	.word	0x2003bf38

08016f80 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8016f80:	4b11      	ldr	r3, [pc, #68]	; (8016fc8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8016f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f86:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016f88:	4604      	mov	r4, r0
 8016f8a:	881b      	ldrh	r3, [r3, #0]
 8016f8c:	428b      	cmp	r3, r1
 8016f8e:	d918      	bls.n	8016fc2 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8016f90:	6803      	ldr	r3, [r0, #0]
 8016f92:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8016f94:	4b0d      	ldr	r3, [pc, #52]	; (8016fcc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8016f96:	6818      	ldr	r0, [r3, #0]
 8016f98:	f7fa f8b2 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 8016f9c:	6823      	ldr	r3, [r4, #0]
 8016f9e:	4606      	mov	r6, r0
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016fa4:	4798      	blx	r3
 8016fa6:	6823      	ldr	r3, [r4, #0]
 8016fa8:	4607      	mov	r7, r0
 8016faa:	4620      	mov	r0, r4
 8016fac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016fb0:	4798      	blx	r3
 8016fb2:	463a      	mov	r2, r7
 8016fb4:	4603      	mov	r3, r0
 8016fb6:	4631      	mov	r1, r6
 8016fb8:	4620      	mov	r0, r4
 8016fba:	46ac      	mov	ip, r5
 8016fbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016fc0:	4760      	bx	ip
 8016fc2:	2000      	movs	r0, #0
 8016fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016fc8:	2003bf3c 	.word	0x2003bf3c
 8016fcc:	2003bf44 	.word	0x2003bf44

08016fd0 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8016fd0:	4b18      	ldr	r3, [pc, #96]	; (8017034 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8016fd2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016fd6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8016fd8:	4604      	mov	r4, r0
 8016fda:	881b      	ldrh	r3, [r3, #0]
 8016fdc:	428b      	cmp	r3, r1
 8016fde:	d926      	bls.n	801702e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8016fe0:	4b15      	ldr	r3, [pc, #84]	; (8017038 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8016fe2:	681b      	ldr	r3, [r3, #0]
 8016fe4:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8016fe8:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8016fec:	4b13      	ldr	r3, [pc, #76]	; (801703c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8016fee:	7855      	ldrb	r5, [r2, #1]
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8016ff6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8016ffa:	6833      	ldr	r3, [r6, #0]
 8016ffc:	69df      	ldr	r7, [r3, #28]
 8016ffe:	4b10      	ldr	r3, [pc, #64]	; (8017040 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017000:	6818      	ldr	r0, [r3, #0]
 8017002:	f7fa f87d 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 8017006:	6823      	ldr	r3, [r4, #0]
 8017008:	4680      	mov	r8, r0
 801700a:	4620      	mov	r0, r4
 801700c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801700e:	4798      	blx	r3
 8017010:	6823      	ldr	r3, [r4, #0]
 8017012:	4681      	mov	r9, r0
 8017014:	4620      	mov	r0, r4
 8017016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801701a:	4798      	blx	r3
 801701c:	464b      	mov	r3, r9
 801701e:	9000      	str	r0, [sp, #0]
 8017020:	4642      	mov	r2, r8
 8017022:	4629      	mov	r1, r5
 8017024:	4630      	mov	r0, r6
 8017026:	47b8      	blx	r7
 8017028:	b003      	add	sp, #12
 801702a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801702e:	2000      	movs	r0, #0
 8017030:	e7fa      	b.n	8017028 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017032:	bf00      	nop
 8017034:	2003bf3c 	.word	0x2003bf3c
 8017038:	2003bf38 	.word	0x2003bf38
 801703c:	2003bf40 	.word	0x2003bf40
 8017040:	2003bf44 	.word	0x2003bf44

08017044 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017044:	b40e      	push	{r1, r2, r3}
 8017046:	4b30      	ldr	r3, [pc, #192]	; (8017108 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801704c:	881a      	ldrh	r2, [r3, #0]
 801704e:	b09d      	sub	sp, #116	; 0x74
 8017050:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017052:	4604      	mov	r4, r0
 8017054:	429a      	cmp	r2, r3
 8017056:	d954      	bls.n	8017102 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017058:	aa26      	add	r2, sp, #152	; 0x98
 801705a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801710c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 801705e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8017110 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017062:	9202      	str	r2, [sp, #8]
 8017064:	f8d9 2000 	ldr.w	r2, [r9]
 8017068:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 801706c:	f8d8 3000 	ldr.w	r3, [r8]
 8017070:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017074:	682b      	ldr	r3, [r5, #0]
 8017076:	4628      	mov	r0, r5
 8017078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801707a:	4798      	blx	r3
 801707c:	4606      	mov	r6, r0
 801707e:	b207      	sxth	r7, r0
 8017080:	a803      	add	r0, sp, #12
 8017082:	f004 fca3 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 8017086:	682b      	ldr	r3, [r5, #0]
 8017088:	4628      	mov	r0, r5
 801708a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801708c:	4798      	blx	r3
 801708e:	682b      	ldr	r3, [r5, #0]
 8017090:	4682      	mov	sl, r0
 8017092:	4628      	mov	r0, r5
 8017094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017096:	4798      	blx	r3
 8017098:	4653      	mov	r3, sl
 801709a:	9000      	str	r0, [sp, #0]
 801709c:	a803      	add	r0, sp, #12
 801709e:	9a02      	ldr	r2, [sp, #8]
 80170a0:	9925      	ldr	r1, [sp, #148]	; 0x94
 80170a2:	f004 fcee 	bl	801ba82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80170a6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80170a8:	f8d9 3000 	ldr.w	r3, [r9]
 80170ac:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 80170b0:	8925      	ldrh	r5, [r4, #8]
 80170b2:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 80170b6:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 80170ba:	eba5 050c 	sub.w	r5, r5, ip
 80170be:	784a      	ldrb	r2, [r1, #1]
 80170c0:	f8d8 3000 	ldr.w	r3, [r8]
 80170c4:	b22d      	sxth	r5, r5
 80170c6:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 80170ca:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80170ce:	9500      	str	r5, [sp, #0]
 80170d0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80170d4:	a803      	add	r0, sp, #12
 80170d6:	f002 fae6 	bl	80196a6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 80170da:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 80170de:	b203      	sxth	r3, r0
 80170e0:	18b9      	adds	r1, r7, r2
 80170e2:	2900      	cmp	r1, #0
 80170e4:	dd0b      	ble.n	80170fe <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 80170e6:	3b01      	subs	r3, #1
 80170e8:	fb13 f302 	smulbb	r3, r3, r2
 80170ec:	fb16 3300 	smlabb	r3, r6, r0, r3
 80170f0:	b21f      	sxth	r7, r3
 80170f2:	4638      	mov	r0, r7
 80170f4:	b01d      	add	sp, #116	; 0x74
 80170f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80170fa:	b003      	add	sp, #12
 80170fc:	4770      	bx	lr
 80170fe:	2b00      	cmp	r3, #0
 8017100:	dcf7      	bgt.n	80170f2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017102:	2700      	movs	r7, #0
 8017104:	e7f5      	b.n	80170f2 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8017106:	bf00      	nop
 8017108:	2003bf3c 	.word	0x2003bf3c
 801710c:	2003bf38 	.word	0x2003bf38
 8017110:	2003bf40 	.word	0x2003bf40

08017114 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8017114:	4bbc      	ldr	r3, [pc, #752]	; (8017408 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8017116:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801711a:	460c      	mov	r4, r1
 801711c:	881b      	ldrh	r3, [r3, #0]
 801711e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8017120:	b0a9      	sub	sp, #164	; 0xa4
 8017122:	4681      	mov	r9, r0
 8017124:	428b      	cmp	r3, r1
 8017126:	d809      	bhi.n	801713c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8017128:	2300      	movs	r3, #0
 801712a:	f04f 32ff 	mov.w	r2, #4294967295
 801712e:	6083      	str	r3, [r0, #8]
 8017130:	e9c0 3200 	strd	r3, r2, [r0]
 8017134:	4648      	mov	r0, r9
 8017136:	b029      	add	sp, #164	; 0xa4
 8017138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801713c:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8017410 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8017140:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8017144:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8017414 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8017148:	f8db 3000 	ldr.w	r3, [fp]
 801714c:	f8d8 0000 	ldr.w	r0, [r8]
 8017150:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8017154:	4bad      	ldr	r3, [pc, #692]	; (801740c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801715c:	f7f9 ffd0 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 8017160:	4607      	mov	r7, r0
 8017162:	682b      	ldr	r3, [r5, #0]
 8017164:	4628      	mov	r0, r5
 8017166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017168:	4798      	blx	r3
 801716a:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 801716c:	f8cd 800c 	str.w	r8, [sp, #12]
 8017170:	4430      	add	r0, r6
 8017172:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 8017176:	b283      	uxth	r3, r0
 8017178:	4650      	mov	r0, sl
 801717a:	9302      	str	r3, [sp, #8]
 801717c:	2e00      	cmp	r6, #0
 801717e:	f040 8090 	bne.w	80172a2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8017182:	f004 fc23 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 8017186:	682b      	ldr	r3, [r5, #0]
 8017188:	4628      	mov	r0, r5
 801718a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801718c:	4798      	blx	r3
 801718e:	682b      	ldr	r3, [r5, #0]
 8017190:	9005      	str	r0, [sp, #20]
 8017192:	4628      	mov	r0, r5
 8017194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017196:	4798      	blx	r3
 8017198:	6823      	ldr	r3, [r4, #0]
 801719a:	4680      	mov	r8, r0
 801719c:	4620      	mov	r0, r4
 801719e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80171a0:	4798      	blx	r3
 80171a2:	6822      	ldr	r2, [r4, #0]
 80171a4:	9004      	str	r0, [sp, #16]
 80171a6:	4620      	mov	r0, r4
 80171a8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80171ac:	4790      	blx	r2
 80171ae:	9905      	ldr	r1, [sp, #20]
 80171b0:	9b04      	ldr	r3, [sp, #16]
 80171b2:	460a      	mov	r2, r1
 80171b4:	4639      	mov	r1, r7
 80171b6:	4637      	mov	r7, r6
 80171b8:	9001      	str	r0, [sp, #4]
 80171ba:	9300      	str	r3, [sp, #0]
 80171bc:	4650      	mov	r0, sl
 80171be:	4643      	mov	r3, r8
 80171c0:	f004 fc74 	bl	801baac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80171c4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 80171c6:	4629      	mov	r1, r5
 80171c8:	f8db 3000 	ldr.w	r3, [fp]
 80171cc:	4650      	mov	r0, sl
 80171ce:	3601      	adds	r6, #1
 80171d0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80171d4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80171d8:	b2b6      	uxth	r6, r6
 80171da:	785b      	ldrb	r3, [r3, #1]
 80171dc:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80171e0:	f001 ffb2 	bl	8019148 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80171e4:	4287      	cmp	r7, r0
 80171e6:	bfb8      	it	lt
 80171e8:	b207      	sxthlt	r7, r0
 80171ea:	4650      	mov	r0, sl
 80171ec:	f004 fc15 	bl	801ba1a <_ZN8touchgfx12TextProvider11endOfStringEv>
 80171f0:	2800      	cmp	r0, #0
 80171f2:	d0e7      	beq.n	80171c4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 80171f4:	9b02      	ldr	r3, [sp, #8]
 80171f6:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 80171fa:	fb13 f606 	smulbb	r6, r3, r6
 80171fe:	eba6 0608 	sub.w	r6, r6, r8
 8017202:	b2b6      	uxth	r6, r6
 8017204:	fa0f f886 	sxth.w	r8, r6
 8017208:	f1b8 0f00 	cmp.w	r8, #0
 801720c:	dd06      	ble.n	801721c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 801720e:	682b      	ldr	r3, [r5, #0]
 8017210:	4628      	mov	r0, r5
 8017212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017214:	4798      	blx	r3
 8017216:	4430      	add	r0, r6
 8017218:	fa0f f880 	sxth.w	r8, r0
 801721c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8017220:	4620      	mov	r0, r4
 8017222:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8017226:	6823      	ldr	r3, [r4, #0]
 8017228:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801722a:	bf0c      	ite	eq
 801722c:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8017230:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8017234:	4798      	blx	r3
 8017236:	2801      	cmp	r0, #1
 8017238:	b2ba      	uxth	r2, r7
 801723a:	f000 80d2 	beq.w	80173e2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 801723e:	2802      	cmp	r0, #2
 8017240:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8017244:	f000 80d3 	beq.w	80173ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8017248:	b21e      	sxth	r6, r3
 801724a:	7a29      	ldrb	r1, [r5, #8]
 801724c:	7a6d      	ldrb	r5, [r5, #9]
 801724e:	1a76      	subs	r6, r6, r1
 8017250:	4429      	add	r1, r5
 8017252:	b2b3      	uxth	r3, r6
 8017254:	440a      	add	r2, r1
 8017256:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 801725a:	b21f      	sxth	r7, r3
 801725c:	b292      	uxth	r2, r2
 801725e:	2902      	cmp	r1, #2
 8017260:	b216      	sxth	r6, r2
 8017262:	f000 80c7 	beq.w	80173f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 8017266:	2903      	cmp	r1, #3
 8017268:	f000 80d6 	beq.w	8017418 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 801726c:	2901      	cmp	r1, #1
 801726e:	f040 80dc 	bne.w	801742a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 8017272:	8923      	ldrh	r3, [r4, #8]
 8017274:	4632      	mov	r2, r6
 8017276:	463d      	mov	r5, r7
 8017278:	4646      	mov	r6, r8
 801727a:	eba3 0308 	sub.w	r3, r3, r8
 801727e:	4690      	mov	r8, r2
 8017280:	b21f      	sxth	r7, r3
 8017282:	9b03      	ldr	r3, [sp, #12]
 8017284:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017286:	6818      	ldr	r0, [r3, #0]
 8017288:	f7f9 ff3a 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 801728c:	f8a9 7000 	strh.w	r7, [r9]
 8017290:	f8a9 5002 	strh.w	r5, [r9, #2]
 8017294:	f8a9 6004 	strh.w	r6, [r9, #4]
 8017298:	f8a9 8006 	strh.w	r8, [r9, #6]
 801729c:	f8c9 0008 	str.w	r0, [r9, #8]
 80172a0:	e748      	b.n	8017134 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80172a2:	f004 fb93 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 80172a6:	682b      	ldr	r3, [r5, #0]
 80172a8:	4628      	mov	r0, r5
 80172aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80172ac:	4798      	blx	r3
 80172ae:	682b      	ldr	r3, [r5, #0]
 80172b0:	4606      	mov	r6, r0
 80172b2:	4628      	mov	r0, r5
 80172b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80172b6:	4798      	blx	r3
 80172b8:	6823      	ldr	r3, [r4, #0]
 80172ba:	4680      	mov	r8, r0
 80172bc:	4620      	mov	r0, r4
 80172be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80172c0:	4798      	blx	r3
 80172c2:	6822      	ldr	r2, [r4, #0]
 80172c4:	9004      	str	r0, [sp, #16]
 80172c6:	4620      	mov	r0, r4
 80172c8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80172cc:	4790      	blx	r2
 80172ce:	9b04      	ldr	r3, [sp, #16]
 80172d0:	4632      	mov	r2, r6
 80172d2:	9001      	str	r0, [sp, #4]
 80172d4:	9300      	str	r3, [sp, #0]
 80172d6:	4639      	mov	r1, r7
 80172d8:	4643      	mov	r3, r8
 80172da:	4650      	mov	r0, sl
 80172dc:	f004 fbe6 	bl	801baac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 80172e0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80172e4:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 80172e8:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80172ec:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80172f0:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80172f2:	bf0a      	itet	eq
 80172f4:	4642      	moveq	r2, r8
 80172f6:	461a      	movne	r2, r3
 80172f8:	4698      	moveq	r8, r3
 80172fa:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80172fe:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8017302:	1ad2      	subs	r2, r2, r3
 8017304:	f8db 3000 	ldr.w	r3, [fp]
 8017308:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801730c:	7859      	ldrb	r1, [r3, #1]
 801730e:	2300      	movs	r3, #0
 8017310:	f8cd a020 	str.w	sl, [sp, #32]
 8017314:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8017318:	f8ad 301c 	strh.w	r3, [sp, #28]
 801731c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8017320:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8017324:	950a      	str	r5, [sp, #40]	; 0x28
 8017326:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801732a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801732e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8017332:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8017336:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801733a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801733e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8017342:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8017346:	b350      	cbz	r0, 801739e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8017348:	682b      	ldr	r3, [r5, #0]
 801734a:	4628      	mov	r0, r5
 801734c:	695b      	ldr	r3, [r3, #20]
 801734e:	4798      	blx	r3
 8017350:	4607      	mov	r7, r0
 8017352:	b320      	cbz	r0, 801739e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8017354:	980a      	ldr	r0, [sp, #40]	; 0x28
 8017356:	4639      	mov	r1, r7
 8017358:	6803      	ldr	r3, [r0, #0]
 801735a:	68db      	ldr	r3, [r3, #12]
 801735c:	4798      	blx	r3
 801735e:	4606      	mov	r6, r0
 8017360:	b1e8      	cbz	r0, 801739e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8017362:	7b43      	ldrb	r3, [r0, #13]
 8017364:	7a82      	ldrb	r2, [r0, #10]
 8017366:	005b      	lsls	r3, r3, #1
 8017368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801736c:	4313      	orrs	r3, r2
 801736e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8017372:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8017376:	2b04      	cmp	r3, #4
 8017378:	d111      	bne.n	801739e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 801737a:	980a      	ldr	r0, [sp, #40]	; 0x28
 801737c:	4632      	mov	r2, r6
 801737e:	4639      	mov	r1, r7
 8017380:	6803      	ldr	r3, [r0, #0]
 8017382:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017384:	4798      	blx	r3
 8017386:	7b73      	ldrb	r3, [r6, #13]
 8017388:	005b      	lsls	r3, r3, #1
 801738a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801738e:	7ab3      	ldrb	r3, [r6, #10]
 8017390:	4313      	orrs	r3, r2
 8017392:	4418      	add	r0, r3
 8017394:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8017398:	4418      	add	r0, r3
 801739a:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 801739e:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 80173a2:	2600      	movs	r6, #0
 80173a4:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 80173a8:	4637      	mov	r7, r6
 80173aa:	45c3      	cmp	fp, r8
 80173ac:	a807      	add	r0, sp, #28
 80173ae:	f106 0601 	add.w	r6, r6, #1
 80173b2:	bfd4      	ite	le
 80173b4:	2100      	movle	r1, #0
 80173b6:	2101      	movgt	r1, #1
 80173b8:	f002 f8a6 	bl	8019508 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80173bc:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 80173c0:	b2b6      	uxth	r6, r6
 80173c2:	429f      	cmp	r7, r3
 80173c4:	bfb8      	it	lt
 80173c6:	b21f      	sxthlt	r7, r3
 80173c8:	9b02      	ldr	r3, [sp, #8]
 80173ca:	eba8 0803 	sub.w	r8, r8, r3
 80173ce:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80173d2:	fa0f f888 	sxth.w	r8, r8
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	f43f af0c 	beq.w	80171f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80173dc:	45c2      	cmp	sl, r8
 80173de:	dbe4      	blt.n	80173aa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 80173e0:	e708      	b.n	80171f4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 80173e2:	1bf6      	subs	r6, r6, r7
 80173e4:	2702      	movs	r7, #2
 80173e6:	fb96 f6f7 	sdiv	r6, r6, r7
 80173ea:	b236      	sxth	r6, r6
 80173ec:	e72d      	b.n	801724a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 80173ee:	4413      	add	r3, r2
 80173f0:	1af6      	subs	r6, r6, r3
 80173f2:	e7fa      	b.n	80173ea <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 80173f4:	8925      	ldrh	r5, [r4, #8]
 80173f6:	1aad      	subs	r5, r5, r2
 80173f8:	1aed      	subs	r5, r5, r3
 80173fa:	b22f      	sxth	r7, r5
 80173fc:	8965      	ldrh	r5, [r4, #10]
 80173fe:	eba5 0508 	sub.w	r5, r5, r8
 8017402:	b22d      	sxth	r5, r5
 8017404:	e73d      	b.n	8017282 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8017406:	bf00      	nop
 8017408:	2003bf3c 	.word	0x2003bf3c
 801740c:	2003bf40 	.word	0x2003bf40
 8017410:	2003bf38 	.word	0x2003bf38
 8017414:	2003bf44 	.word	0x2003bf44
 8017418:	8965      	ldrh	r5, [r4, #10]
 801741a:	2700      	movs	r7, #0
 801741c:	1aad      	subs	r5, r5, r2
 801741e:	1aed      	subs	r5, r5, r3
 8017420:	4633      	mov	r3, r6
 8017422:	4646      	mov	r6, r8
 8017424:	b22d      	sxth	r5, r5
 8017426:	4698      	mov	r8, r3
 8017428:	e72b      	b.n	8017282 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801742a:	2500      	movs	r5, #0
 801742c:	e729      	b.n	8017282 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801742e:	bf00      	nop

08017430 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8017430:	b513      	push	{r0, r1, r4, lr}
 8017432:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8017436:	4604      	mov	r4, r0
 8017438:	b1fb      	cbz	r3, 801747a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801743a:	4b16      	ldr	r3, [pc, #88]	; (8017494 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801743c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801743e:	881b      	ldrh	r3, [r3, #0]
 8017440:	428b      	cmp	r3, r1
 8017442:	d91a      	bls.n	801747a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017444:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017448:	2b00      	cmp	r3, #0
 801744a:	dd16      	ble.n	801747a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801744c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8017450:	2b00      	cmp	r3, #0
 8017452:	dd12      	ble.n	801747a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017454:	4b10      	ldr	r3, [pc, #64]	; (8017498 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8017456:	6818      	ldr	r0, [r3, #0]
 8017458:	f7f9 fe52 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 801745c:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8017460:	6822      	ldr	r2, [r4, #0]
 8017462:	2b00      	cmp	r3, #0
 8017464:	db06      	blt.n	8017474 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8017466:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801746a:	2b00      	cmp	r3, #0
 801746c:	db02      	blt.n	8017474 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 801746e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017470:	4298      	cmp	r0, r3
 8017472:	d004      	beq.n	801747e <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8017474:	6953      	ldr	r3, [r2, #20]
 8017476:	4620      	mov	r0, r4
 8017478:	4798      	blx	r3
 801747a:	b002      	add	sp, #8
 801747c:	bd10      	pop	{r4, pc}
 801747e:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8017482:	466b      	mov	r3, sp
 8017484:	6912      	ldr	r2, [r2, #16]
 8017486:	c903      	ldmia	r1, {r0, r1}
 8017488:	e883 0003 	stmia.w	r3, {r0, r1}
 801748c:	4619      	mov	r1, r3
 801748e:	4620      	mov	r0, r4
 8017490:	4790      	blx	r2
 8017492:	e7f2      	b.n	801747a <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8017494:	2003bf3c 	.word	0x2003bf3c
 8017498:	2003bf44 	.word	0x2003bf44

0801749c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 801749c:	4b45      	ldr	r3, [pc, #276]	; (80175b4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 801749e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174a2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80174a4:	b08e      	sub	sp, #56	; 0x38
 80174a6:	881b      	ldrh	r3, [r3, #0]
 80174a8:	4604      	mov	r4, r0
 80174aa:	4293      	cmp	r3, r2
 80174ac:	d97e      	bls.n	80175ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80174ae:	6808      	ldr	r0, [r1, #0]
 80174b0:	ab05      	add	r3, sp, #20
 80174b2:	6849      	ldr	r1, [r1, #4]
 80174b4:	4d40      	ldr	r5, [pc, #256]	; (80175b8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 80174b6:	c303      	stmia	r3!, {r0, r1}
 80174b8:	4611      	mov	r1, r2
 80174ba:	6828      	ldr	r0, [r5, #0]
 80174bc:	f7f9 fe20 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 80174c0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	db11      	blt.n	80174ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80174c8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	db0d      	blt.n	80174ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80174d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80174d2:	4298      	cmp	r0, r3
 80174d4:	d10a      	bne.n	80174ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 80174d6:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 80174da:	ab09      	add	r3, sp, #36	; 0x24
 80174dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80174e0:	e883 0003 	stmia.w	r3, {r0, r1}
 80174e4:	4619      	mov	r1, r3
 80174e6:	a805      	add	r0, sp, #20
 80174e8:	f7fe f85c 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 80174ec:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	dd5b      	ble.n	80175ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80174f4:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	dd57      	ble.n	80175ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80174fc:	4f2f      	ldr	r7, [pc, #188]	; (80175bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 80174fe:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017500:	683b      	ldr	r3, [r7, #0]
 8017502:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8017506:	4b2e      	ldr	r3, [pc, #184]	; (80175c0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801750e:	2e00      	cmp	r6, #0
 8017510:	d04c      	beq.n	80175ac <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8017512:	6823      	ldr	r3, [r4, #0]
 8017514:	4620      	mov	r0, r4
 8017516:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801751a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801751c:	4798      	blx	r3
 801751e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017520:	683b      	ldr	r3, [r7, #0]
 8017522:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8017526:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801752a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801752e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8017532:	785b      	ldrb	r3, [r3, #1]
 8017534:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8017538:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801753c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801753e:	9609      	str	r6, [sp, #36]	; 0x24
 8017540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017544:	4b1f      	ldr	r3, [pc, #124]	; (80175c4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8017546:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801754a:	681b      	ldr	r3, [r3, #0]
 801754c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 8017550:	910b      	str	r1, [sp, #44]	; 0x2c
 8017552:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 8017556:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 801755a:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 801755e:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8017562:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8017566:	b10a      	cbz	r2, 801756c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 8017568:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 801756a:	b906      	cbnz	r6, 801756e <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 801756c:	689e      	ldr	r6, [r3, #8]
 801756e:	af07      	add	r7, sp, #28
 8017570:	4621      	mov	r1, r4
 8017572:	4638      	mov	r0, r7
 8017574:	f003 fdb0 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017578:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 801757a:	6828      	ldr	r0, [r5, #0]
 801757c:	f7f9 fdc0 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 8017580:	6823      	ldr	r3, [r4, #0]
 8017582:	4605      	mov	r5, r0
 8017584:	4620      	mov	r0, r4
 8017586:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017588:	4798      	blx	r3
 801758a:	6823      	ldr	r3, [r4, #0]
 801758c:	4680      	mov	r8, r0
 801758e:	4620      	mov	r0, r4
 8017590:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017594:	4798      	blx	r3
 8017596:	ab09      	add	r3, sp, #36	; 0x24
 8017598:	9501      	str	r5, [sp, #4]
 801759a:	9300      	str	r3, [sp, #0]
 801759c:	ab05      	add	r3, sp, #20
 801759e:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80175a2:	4630      	mov	r0, r6
 80175a4:	e897 0006 	ldmia.w	r7, {r1, r2}
 80175a8:	f7f9 fd3b 	bl	8011022 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80175ac:	b00e      	add	sp, #56	; 0x38
 80175ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80175b2:	bf00      	nop
 80175b4:	2003bf3c 	.word	0x2003bf3c
 80175b8:	2003bf44 	.word	0x2003bf44
 80175bc:	2003bf38 	.word	0x2003bf38
 80175c0:	2003bf40 	.word	0x2003bf40
 80175c4:	2003bee0 	.word	0x2003bee0

080175c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 80175c8:	b538      	push	{r3, r4, r5, lr}
 80175ca:	4b0e      	ldr	r3, [pc, #56]	; (8017604 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 80175cc:	4604      	mov	r4, r0
 80175ce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80175d0:	881b      	ldrh	r3, [r3, #0]
 80175d2:	429a      	cmp	r2, r3
 80175d4:	d214      	bcs.n	8017600 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 80175d6:	6803      	ldr	r3, [r0, #0]
 80175d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80175da:	4798      	blx	r3
 80175dc:	6823      	ldr	r3, [r4, #0]
 80175de:	4605      	mov	r5, r0
 80175e0:	4620      	mov	r0, r4
 80175e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80175e4:	4798      	blx	r3
 80175e6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80175ea:	b22d      	sxth	r5, r5
 80175ec:	4601      	mov	r1, r0
 80175ee:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80175f2:	bf06      	itte	eq
 80175f4:	4602      	moveq	r2, r0
 80175f6:	4629      	moveq	r1, r5
 80175f8:	462a      	movne	r2, r5
 80175fa:	4620      	mov	r0, r4
 80175fc:	f7f7 f938 	bl	800e870 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8017600:	bd38      	pop	{r3, r4, r5, pc}
 8017602:	bf00      	nop
 8017604:	2003bf3c 	.word	0x2003bf3c

08017608 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8017608:	b530      	push	{r4, r5, lr}
 801760a:	888b      	ldrh	r3, [r1, #4]
 801760c:	b085      	sub	sp, #20
 801760e:	4604      	mov	r4, r0
 8017610:	8583      	strh	r3, [r0, #44]	; 0x2c
 8017612:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8017616:	b923      	cbnz	r3, 8017622 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8017618:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801761c:	b90b      	cbnz	r3, 8017622 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801761e:	f7ff ffd3 	bl	80175c8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8017622:	6823      	ldr	r3, [r4, #0]
 8017624:	466d      	mov	r5, sp
 8017626:	4621      	mov	r1, r4
 8017628:	343c      	adds	r4, #60	; 0x3c
 801762a:	4628      	mov	r0, r5
 801762c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8017630:	4798      	blx	r3
 8017632:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017636:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801763a:	b005      	add	sp, #20
 801763c:	bd30      	pop	{r4, r5, pc}

0801763e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801763e:	2300      	movs	r3, #0
 8017640:	8083      	strh	r3, [r0, #4]
 8017642:	80c3      	strh	r3, [r0, #6]
 8017644:	8003      	strh	r3, [r0, #0]
 8017646:	8043      	strh	r3, [r0, #2]
 8017648:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801764c:	2bff      	cmp	r3, #255	; 0xff
 801764e:	bf01      	itttt	eq
 8017650:	890b      	ldrheq	r3, [r1, #8]
 8017652:	8083      	strheq	r3, [r0, #4]
 8017654:	894b      	ldrheq	r3, [r1, #10]
 8017656:	80c3      	strheq	r3, [r0, #6]
 8017658:	4770      	bx	lr
	...

0801765c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801765c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801765e:	4604      	mov	r4, r0
 8017660:	466b      	mov	r3, sp
 8017662:	6808      	ldr	r0, [r1, #0]
 8017664:	6849      	ldr	r1, [r1, #4]
 8017666:	c303      	stmia	r3!, {r0, r1}
 8017668:	6823      	ldr	r3, [r4, #0]
 801766a:	4669      	mov	r1, sp
 801766c:	4620      	mov	r0, r4
 801766e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017670:	4798      	blx	r3
 8017672:	4b08      	ldr	r3, [pc, #32]	; (8017694 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801767a:	b10a      	cbz	r2, 8017680 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801767c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801767e:	b900      	cbnz	r0, 8017682 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8017680:	6898      	ldr	r0, [r3, #8]
 8017682:	6803      	ldr	r3, [r0, #0]
 8017684:	4669      	mov	r1, sp
 8017686:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8017688:	6a1d      	ldr	r5, [r3, #32]
 801768a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801768e:	47a8      	blx	r5
 8017690:	b003      	add	sp, #12
 8017692:	bd30      	pop	{r4, r5, pc}
 8017694:	2003bee0 	.word	0x2003bee0

08017698 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8017698:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 801769c:	b12a      	cbz	r2, 80176aa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801769e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80176a2:	b112      	cbz	r2, 80176aa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80176a4:	6803      	ldr	r3, [r0, #0]
 80176a6:	695b      	ldr	r3, [r3, #20]
 80176a8:	4718      	bx	r3
 80176aa:	4770      	bx	lr

080176ac <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80176ac:	4b30      	ldr	r3, [pc, #192]	; (8017770 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80176ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80176b2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80176b4:	b08d      	sub	sp, #52	; 0x34
 80176b6:	881b      	ldrh	r3, [r3, #0]
 80176b8:	4604      	mov	r4, r0
 80176ba:	460f      	mov	r7, r1
 80176bc:	4293      	cmp	r3, r2
 80176be:	d954      	bls.n	801776a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80176c0:	4b2c      	ldr	r3, [pc, #176]	; (8017774 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80176c2:	6819      	ldr	r1, [r3, #0]
 80176c4:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80176c8:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80176cc:	4a2a      	ldr	r2, [pc, #168]	; (8017778 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80176ce:	6812      	ldr	r2, [r2, #0]
 80176d0:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80176d4:	2900      	cmp	r1, #0
 80176d6:	d048      	beq.n	801776a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80176d8:	785a      	ldrb	r2, [r3, #1]
 80176da:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80176de:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80176e2:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80176e6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80176ea:	4b24      	ldr	r3, [pc, #144]	; (801777c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 80176ec:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 80176f0:	681a      	ldr	r2, [r3, #0]
 80176f2:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 80176f6:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 80176fa:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 80176fe:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8017700:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8017704:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8017708:	9107      	str	r1, [sp, #28]
 801770a:	f88d 8020 	strb.w	r8, [sp, #32]
 801770e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8017712:	9609      	str	r6, [sp, #36]	; 0x24
 8017714:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8017718:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 801771c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8017720:	b10b      	cbz	r3, 8017726 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8017722:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8017724:	b905      	cbnz	r5, 8017728 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8017726:	6895      	ldr	r5, [r2, #8]
 8017728:	ae05      	add	r6, sp, #20
 801772a:	4621      	mov	r1, r4
 801772c:	4630      	mov	r0, r6
 801772e:	f003 fcd3 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8017732:	4b13      	ldr	r3, [pc, #76]	; (8017780 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8017734:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8017736:	6818      	ldr	r0, [r3, #0]
 8017738:	f7f9 fce2 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 801773c:	6823      	ldr	r3, [r4, #0]
 801773e:	4680      	mov	r8, r0
 8017740:	4620      	mov	r0, r4
 8017742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017744:	4798      	blx	r3
 8017746:	6823      	ldr	r3, [r4, #0]
 8017748:	4681      	mov	r9, r0
 801774a:	4620      	mov	r0, r4
 801774c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017750:	4798      	blx	r3
 8017752:	ab07      	add	r3, sp, #28
 8017754:	f8cd 8004 	str.w	r8, [sp, #4]
 8017758:	9300      	str	r3, [sp, #0]
 801775a:	463b      	mov	r3, r7
 801775c:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8017760:	4628      	mov	r0, r5
 8017762:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017766:	f7f9 fc5c 	bl	8011022 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801776a:	b00d      	add	sp, #52	; 0x34
 801776c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017770:	2003bf3c 	.word	0x2003bf3c
 8017774:	2003bf38 	.word	0x2003bf38
 8017778:	2003bf40 	.word	0x2003bf40
 801777c:	2003bee0 	.word	0x2003bee0
 8017780:	2003bf44 	.word	0x2003bf44

08017784 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 8017784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017788:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 801778c:	b0a0      	sub	sp, #128	; 0x80
 801778e:	4604      	mov	r4, r0
 8017790:	b193      	cbz	r3, 80177b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8017792:	4b30      	ldr	r3, [pc, #192]	; (8017854 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 8017794:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017796:	881b      	ldrh	r3, [r3, #0]
 8017798:	428b      	cmp	r3, r1
 801779a:	d90d      	bls.n	80177b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 801779c:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	dd09      	ble.n	80177b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80177a4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	dd05      	ble.n	80177b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80177ac:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80177b0:	b12b      	cbz	r3, 80177be <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 80177b2:	6803      	ldr	r3, [r0, #0]
 80177b4:	695b      	ldr	r3, [r3, #20]
 80177b6:	4798      	blx	r3
 80177b8:	b020      	add	sp, #128	; 0x80
 80177ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177be:	4b26      	ldr	r3, [pc, #152]	; (8017858 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80177c6:	4b25      	ldr	r3, [pc, #148]	; (801785c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80177ce:	4b24      	ldr	r3, [pc, #144]	; (8017860 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 80177d0:	6818      	ldr	r0, [r3, #0]
 80177d2:	f7f9 fc95 	bl	8011100 <_ZNK8touchgfx5Texts7getTextEt>
 80177d6:	4606      	mov	r6, r0
 80177d8:	a807      	add	r0, sp, #28
 80177da:	f004 f8f7 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 80177de:	682b      	ldr	r3, [r5, #0]
 80177e0:	4628      	mov	r0, r5
 80177e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80177e4:	4798      	blx	r3
 80177e6:	682b      	ldr	r3, [r5, #0]
 80177e8:	4607      	mov	r7, r0
 80177ea:	4628      	mov	r0, r5
 80177ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80177ee:	4798      	blx	r3
 80177f0:	6823      	ldr	r3, [r4, #0]
 80177f2:	4605      	mov	r5, r0
 80177f4:	4620      	mov	r0, r4
 80177f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80177f8:	4798      	blx	r3
 80177fa:	6823      	ldr	r3, [r4, #0]
 80177fc:	4680      	mov	r8, r0
 80177fe:	4620      	mov	r0, r4
 8017800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017804:	4798      	blx	r3
 8017806:	462b      	mov	r3, r5
 8017808:	463a      	mov	r2, r7
 801780a:	4631      	mov	r1, r6
 801780c:	e9cd 8000 	strd	r8, r0, [sp]
 8017810:	a807      	add	r0, sp, #28
 8017812:	f004 f94b 	bl	801baac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8017816:	a807      	add	r0, sp, #28
 8017818:	f004 fd04 	bl	801c224 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801781c:	280a      	cmp	r0, #10
 801781e:	d103      	bne.n	8017828 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8017820:	6823      	ldr	r3, [r4, #0]
 8017822:	4620      	mov	r0, r4
 8017824:	695b      	ldr	r3, [r3, #20]
 8017826:	e7c6      	b.n	80177b6 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8017828:	a807      	add	r0, sp, #28
 801782a:	f004 fcfb 	bl	801c224 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801782e:	2800      	cmp	r0, #0
 8017830:	d1f4      	bne.n	801781c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 8017832:	ad04      	add	r5, sp, #16
 8017834:	4621      	mov	r1, r4
 8017836:	4628      	mov	r0, r5
 8017838:	f7ff fc6c 	bl	8017114 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 801783c:	ab02      	add	r3, sp, #8
 801783e:	6822      	ldr	r2, [r4, #0]
 8017840:	e895 0003 	ldmia.w	r5, {r0, r1}
 8017844:	6912      	ldr	r2, [r2, #16]
 8017846:	e883 0003 	stmia.w	r3, {r0, r1}
 801784a:	4619      	mov	r1, r3
 801784c:	4620      	mov	r0, r4
 801784e:	4790      	blx	r2
 8017850:	e7b2      	b.n	80177b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 8017852:	bf00      	nop
 8017854:	2003bf3c 	.word	0x2003bf3c
 8017858:	2003bf38 	.word	0x2003bf38
 801785c:	2003bf40 	.word	0x2003bf40
 8017860:	2003bf44 	.word	0x2003bf44

08017864 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 8017864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017868:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 801786a:	4604      	mov	r4, r0
 801786c:	460e      	mov	r6, r1
 801786e:	b08e      	sub	sp, #56	; 0x38
 8017870:	b218      	sxth	r0, r3
 8017872:	8921      	ldrh	r1, [r4, #8]
 8017874:	005b      	lsls	r3, r3, #1
 8017876:	8962      	ldrh	r2, [r4, #10]
 8017878:	f8ad 0000 	strh.w	r0, [sp]
 801787c:	b29b      	uxth	r3, r3
 801787e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8017882:	1ac9      	subs	r1, r1, r3
 8017884:	1ad3      	subs	r3, r2, r3
 8017886:	b209      	sxth	r1, r1
 8017888:	b21b      	sxth	r3, r3
 801788a:	2900      	cmp	r1, #0
 801788c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017890:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017894:	dd5e      	ble.n	8017954 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 8017896:	2b00      	cmp	r3, #0
 8017898:	dd5c      	ble.n	8017954 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 801789a:	6830      	ldr	r0, [r6, #0]
 801789c:	ab02      	add	r3, sp, #8
 801789e:	6871      	ldr	r1, [r6, #4]
 80178a0:	c303      	stmia	r3!, {r0, r1}
 80178a2:	4669      	mov	r1, sp
 80178a4:	a802      	add	r0, sp, #8
 80178a6:	f7fd fe7d 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 80178aa:	4620      	mov	r0, r4
 80178ac:	a902      	add	r1, sp, #8
 80178ae:	f7ff fed5 	bl	801765c <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80178b2:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 80178b4:	2800      	cmp	r0, #0
 80178b6:	d05f      	beq.n	8017978 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80178b8:	8963      	ldrh	r3, [r4, #10]
 80178ba:	b202      	sxth	r2, r0
 80178bc:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80178c0:	2500      	movs	r5, #0
 80178c2:	1a1f      	subs	r7, r3, r0
 80178c4:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 80178c8:	f8ad 101c 	strh.w	r1, [sp, #28]
 80178cc:	b21b      	sxth	r3, r3
 80178ce:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 80178d2:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 80178d6:	af04      	add	r7, sp, #16
 80178d8:	1a09      	subs	r1, r1, r0
 80178da:	9506      	str	r5, [sp, #24]
 80178dc:	f8ad 201e 	strh.w	r2, [sp, #30]
 80178e0:	f8ad 5020 	strh.w	r5, [sp, #32]
 80178e4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 80178e8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 80178ec:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 80178f0:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 80178f4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 80178f8:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 80178fc:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8017900:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8017904:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8017908:	ab06      	add	r3, sp, #24
 801790a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801790e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8017912:	e887 0003 	stmia.w	r7, {r0, r1}
 8017916:	4631      	mov	r1, r6
 8017918:	4638      	mov	r0, r7
 801791a:	f7fd fe43 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 801791e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8017922:	2b00      	cmp	r3, #0
 8017924:	dd12      	ble.n	801794c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8017926:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801792a:	2b00      	cmp	r3, #0
 801792c:	dd0e      	ble.n	801794c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801792e:	6823      	ldr	r3, [r4, #0]
 8017930:	4639      	mov	r1, r7
 8017932:	4620      	mov	r0, r4
 8017934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017936:	4798      	blx	r3
 8017938:	f7f6 f954 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 801793c:	6803      	ldr	r3, [r0, #0]
 801793e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017940:	4639      	mov	r1, r7
 8017942:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8017946:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801794a:	47c0      	blx	r8
 801794c:	3501      	adds	r5, #1
 801794e:	2d04      	cmp	r5, #4
 8017950:	d1da      	bne.n	8017908 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8017952:	e011      	b.n	8017978 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8017954:	6830      	ldr	r0, [r6, #0]
 8017956:	ab06      	add	r3, sp, #24
 8017958:	6871      	ldr	r1, [r6, #4]
 801795a:	c303      	stmia	r3!, {r0, r1}
 801795c:	6823      	ldr	r3, [r4, #0]
 801795e:	a906      	add	r1, sp, #24
 8017960:	4620      	mov	r0, r4
 8017962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017964:	4798      	blx	r3
 8017966:	f7f6 f93d 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 801796a:	6803      	ldr	r3, [r0, #0]
 801796c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801796e:	a906      	add	r1, sp, #24
 8017970:	6a1d      	ldr	r5, [r3, #32]
 8017972:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8017976:	47a8      	blx	r5
 8017978:	b00e      	add	sp, #56	; 0x38
 801797a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801797e <_ZN8touchgfx7OutlineD1Ev>:
 801797e:	4770      	bx	lr

08017980 <_ZN8touchgfx7OutlineD0Ev>:
 8017980:	b510      	push	{r4, lr}
 8017982:	4604      	mov	r4, r0
 8017984:	2130      	movs	r1, #48	; 0x30
 8017986:	f011 f991 	bl	8028cac <_ZdlPvj>
 801798a:	4620      	mov	r0, r4
 801798c:	bd10      	pop	{r4, pc}

0801798e <_ZN8touchgfx7Outline5resetEv>:
 801798e:	b510      	push	{r4, lr}
 8017990:	4604      	mov	r4, r0
 8017992:	f000 fe7b 	bl	801868c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8017996:	60e0      	str	r0, [r4, #12]
 8017998:	f000 fe7e 	bl	8018698 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801799c:	68e3      	ldr	r3, [r4, #12]
 801799e:	08c0      	lsrs	r0, r0, #3
 80179a0:	2200      	movs	r2, #0
 80179a2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80179a6:	6123      	str	r3, [r4, #16]
 80179a8:	3801      	subs	r0, #1
 80179aa:	60a2      	str	r2, [r4, #8]
 80179ac:	6060      	str	r0, [r4, #4]
 80179ae:	8019      	strh	r1, [r3, #0]
 80179b0:	8059      	strh	r1, [r3, #2]
 80179b2:	809a      	strh	r2, [r3, #4]
 80179b4:	80da      	strh	r2, [r3, #6]
 80179b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80179b8:	f023 0301 	bic.w	r3, r3, #1
 80179bc:	f043 0302 	orr.w	r3, r3, #2
 80179c0:	6263      	str	r3, [r4, #36]	; 0x24
 80179c2:	bd10      	pop	{r4, pc}

080179c4 <_ZN8touchgfx7OutlineC1Ev>:
 80179c4:	4b0a      	ldr	r3, [pc, #40]	; (80179f0 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80179c6:	b510      	push	{r4, lr}
 80179c8:	6003      	str	r3, [r0, #0]
 80179ca:	2300      	movs	r3, #0
 80179cc:	4604      	mov	r4, r0
 80179ce:	6243      	str	r3, [r0, #36]	; 0x24
 80179d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80179d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80179d8:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80179dc:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80179e0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80179e4:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 80179e8:	f7ff ffd1 	bl	801798e <_ZN8touchgfx7Outline5resetEv>
 80179ec:	4620      	mov	r0, r4
 80179ee:	bd10      	pop	{r4, pc}
 80179f0:	0802f814 	.word	0x0802f814

080179f4 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80179f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179f8:	b093      	sub	sp, #76	; 0x4c
 80179fa:	1156      	asrs	r6, r2, #5
 80179fc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 80179fe:	9305      	str	r3, [sp, #20]
 8017a00:	1153      	asrs	r3, r2, #5
 8017a02:	f004 051f 	and.w	r5, r4, #31
 8017a06:	9303      	str	r3, [sp, #12]
 8017a08:	1163      	asrs	r3, r4, #5
 8017a0a:	9504      	str	r5, [sp, #16]
 8017a0c:	1165      	asrs	r5, r4, #5
 8017a0e:	9306      	str	r3, [sp, #24]
 8017a10:	f002 031f 	and.w	r3, r2, #31
 8017a14:	42ae      	cmp	r6, r5
 8017a16:	f040 80f4 	bne.w	8017c02 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8017a1a:	9c04      	ldr	r4, [sp, #16]
 8017a1c:	9a05      	ldr	r2, [sp, #20]
 8017a1e:	42a3      	cmp	r3, r4
 8017a20:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8017a24:	6902      	ldr	r2, [r0, #16]
 8017a26:	d125      	bne.n	8017a74 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8017a28:	f9b2 3000 	ldrsh.w	r3, [r2]
 8017a2c:	459e      	cmp	lr, r3
 8017a2e:	d103      	bne.n	8017a38 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8017a30:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017a34:	429e      	cmp	r6, r3
 8017a36:	d035      	beq.n	8017aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017a38:	88d1      	ldrh	r1, [r2, #6]
 8017a3a:	8893      	ldrh	r3, [r2, #4]
 8017a3c:	430b      	orrs	r3, r1
 8017a3e:	d010      	beq.n	8017a62 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017a40:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	db0c      	blt.n	8017a62 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017a48:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8017a4a:	428b      	cmp	r3, r1
 8017a4c:	da09      	bge.n	8017a62 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8017a4e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017a52:	428b      	cmp	r3, r1
 8017a54:	f103 0301 	add.w	r3, r3, #1
 8017a58:	bf38      	it	cc
 8017a5a:	3208      	addcc	r2, #8
 8017a5c:	6083      	str	r3, [r0, #8]
 8017a5e:	bf38      	it	cc
 8017a60:	6102      	strcc	r2, [r0, #16]
 8017a62:	6903      	ldr	r3, [r0, #16]
 8017a64:	9a03      	ldr	r2, [sp, #12]
 8017a66:	f8a3 e000 	strh.w	lr, [r3]
 8017a6a:	805a      	strh	r2, [r3, #2]
 8017a6c:	2200      	movs	r2, #0
 8017a6e:	809a      	strh	r2, [r3, #4]
 8017a70:	80da      	strh	r2, [r3, #6]
 8017a72:	e017      	b.n	8017aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017a74:	9c05      	ldr	r4, [sp, #20]
 8017a76:	114e      	asrs	r6, r1, #5
 8017a78:	f001 0c1f 	and.w	ip, r1, #31
 8017a7c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8017a80:	f004 041f 	and.w	r4, r4, #31
 8017a84:	4576      	cmp	r6, lr
 8017a86:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 8017a8a:	9402      	str	r4, [sp, #8]
 8017a8c:	9c04      	ldr	r4, [sp, #16]
 8017a8e:	eba4 0403 	sub.w	r4, r4, r3
 8017a92:	d10a      	bne.n	8017aaa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8017a94:	9b02      	ldr	r3, [sp, #8]
 8017a96:	44a0      	add	r8, r4
 8017a98:	449c      	add	ip, r3
 8017a9a:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017a9e:	fb04 a40c 	mla	r4, r4, ip, sl
 8017aa2:	80d4      	strh	r4, [r2, #6]
 8017aa4:	b013      	add	sp, #76	; 0x4c
 8017aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017aaa:	9d05      	ldr	r5, [sp, #20]
 8017aac:	1a69      	subs	r1, r5, r1
 8017aae:	bf51      	iteee	pl
 8017ab0:	f1cc 0520 	rsbpl	r5, ip, #32
 8017ab4:	fb04 f40c 	mulmi.w	r4, r4, ip
 8017ab8:	4249      	negmi	r1, r1
 8017aba:	2500      	movmi	r5, #0
 8017abc:	bf5d      	ittte	pl
 8017abe:	436c      	mulpl	r4, r5
 8017ac0:	2520      	movpl	r5, #32
 8017ac2:	f04f 0901 	movpl.w	r9, #1
 8017ac6:	f04f 39ff 	movmi.w	r9, #4294967295
 8017aca:	9501      	str	r5, [sp, #4]
 8017acc:	9f01      	ldr	r7, [sp, #4]
 8017ace:	444e      	add	r6, r9
 8017ad0:	fb94 f5f1 	sdiv	r5, r4, r1
 8017ad4:	fb01 4415 	mls	r4, r1, r5, r4
 8017ad8:	44bc      	add	ip, r7
 8017ada:	2c00      	cmp	r4, #0
 8017adc:	bfbc      	itt	lt
 8017ade:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8017ae2:	1864      	addlt	r4, r4, r1
 8017ae4:	44a8      	add	r8, r5
 8017ae6:	fb05 ac0c 	mla	ip, r5, ip, sl
 8017aea:	f8a2 8004 	strh.w	r8, [r2, #4]
 8017aee:	f8a2 c006 	strh.w	ip, [r2, #6]
 8017af2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017af6:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8017afa:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8017afe:	ea58 0202 	orrs.w	r2, r8, r2
 8017b02:	d011      	beq.n	8017b28 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017b04:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8017b08:	f1b8 0f00 	cmp.w	r8, #0
 8017b0c:	db0c      	blt.n	8017b28 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017b0e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8017b10:	4590      	cmp	r8, r2
 8017b12:	da09      	bge.n	8017b28 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8017b14:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8017b18:	4590      	cmp	r8, r2
 8017b1a:	bf3c      	itt	cc
 8017b1c:	f10c 0208 	addcc.w	r2, ip, #8
 8017b20:	6102      	strcc	r2, [r0, #16]
 8017b22:	f108 0201 	add.w	r2, r8, #1
 8017b26:	6082      	str	r2, [r0, #8]
 8017b28:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017b2c:	2700      	movs	r7, #0
 8017b2e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8017b32:	45b6      	cmp	lr, r6
 8017b34:	f8ac 6000 	strh.w	r6, [ip]
 8017b38:	442b      	add	r3, r5
 8017b3a:	f8ac 2002 	strh.w	r2, [ip, #2]
 8017b3e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017b42:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017b46:	d04b      	beq.n	8017be0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8017b48:	9f04      	ldr	r7, [sp, #16]
 8017b4a:	1a64      	subs	r4, r4, r1
 8017b4c:	f04f 0a00 	mov.w	sl, #0
 8017b50:	1aff      	subs	r7, r7, r3
 8017b52:	443d      	add	r5, r7
 8017b54:	016d      	lsls	r5, r5, #5
 8017b56:	fb95 f8f1 	sdiv	r8, r5, r1
 8017b5a:	fb01 5518 	mls	r5, r1, r8, r5
 8017b5e:	2d00      	cmp	r5, #0
 8017b60:	bfbc      	itt	lt
 8017b62:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8017b66:	186d      	addlt	r5, r5, r1
 8017b68:	f108 0701 	add.w	r7, r8, #1
 8017b6c:	9703      	str	r7, [sp, #12]
 8017b6e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017b72:	1964      	adds	r4, r4, r5
 8017b74:	444e      	add	r6, r9
 8017b76:	bf54      	ite	pl
 8017b78:	9f03      	ldrpl	r7, [sp, #12]
 8017b7a:	4647      	movmi	r7, r8
 8017b7c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8017b80:	bf58      	it	pl
 8017b82:	1a64      	subpl	r4, r4, r1
 8017b84:	443b      	add	r3, r7
 8017b86:	44bb      	add	fp, r7
 8017b88:	f8ac b004 	strh.w	fp, [ip, #4]
 8017b8c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017b90:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8017b94:	f8ac b006 	strh.w	fp, [ip, #6]
 8017b98:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017b9c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017ba0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8017ba4:	ea5b 0707 	orrs.w	r7, fp, r7
 8017ba8:	d011      	beq.n	8017bce <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8017baa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8017bae:	f1bb 0f00 	cmp.w	fp, #0
 8017bb2:	db0c      	blt.n	8017bce <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8017bb4:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017bb6:	45bb      	cmp	fp, r7
 8017bb8:	da09      	bge.n	8017bce <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8017bba:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8017bbe:	45bb      	cmp	fp, r7
 8017bc0:	bf3c      	itt	cc
 8017bc2:	f10c 0708 	addcc.w	r7, ip, #8
 8017bc6:	6107      	strcc	r7, [r0, #16]
 8017bc8:	f10b 0701 	add.w	r7, fp, #1
 8017bcc:	6087      	str	r7, [r0, #8]
 8017bce:	6907      	ldr	r7, [r0, #16]
 8017bd0:	45b6      	cmp	lr, r6
 8017bd2:	803e      	strh	r6, [r7, #0]
 8017bd4:	807a      	strh	r2, [r7, #2]
 8017bd6:	f8a7 a004 	strh.w	sl, [r7, #4]
 8017bda:	f8a7 a006 	strh.w	sl, [r7, #6]
 8017bde:	d1c6      	bne.n	8017b6e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8017be0:	9a04      	ldr	r2, [sp, #16]
 8017be2:	1ad3      	subs	r3, r2, r3
 8017be4:	6902      	ldr	r2, [r0, #16]
 8017be6:	8891      	ldrh	r1, [r2, #4]
 8017be8:	88d6      	ldrh	r6, [r2, #6]
 8017bea:	4419      	add	r1, r3
 8017bec:	8091      	strh	r1, [r2, #4]
 8017bee:	9902      	ldr	r1, [sp, #8]
 8017bf0:	f101 0c20 	add.w	ip, r1, #32
 8017bf4:	9901      	ldr	r1, [sp, #4]
 8017bf6:	ebac 0c01 	sub.w	ip, ip, r1
 8017bfa:	fb03 630c 	mla	r3, r3, ip, r6
 8017bfe:	80d3      	strh	r3, [r2, #6]
 8017c00:	e750      	b.n	8017aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017c02:	9d05      	ldr	r5, [sp, #20]
 8017c04:	1aa2      	subs	r2, r4, r2
 8017c06:	eba5 0501 	sub.w	r5, r5, r1
 8017c0a:	9202      	str	r2, [sp, #8]
 8017c0c:	9508      	str	r5, [sp, #32]
 8017c0e:	f140 8128 	bpl.w	8017e62 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8017c12:	9a03      	ldr	r2, [sp, #12]
 8017c14:	2a00      	cmp	r2, #0
 8017c16:	f6ff af45 	blt.w	8017aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017c1a:	9a02      	ldr	r2, [sp, #8]
 8017c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8017c20:	4252      	negs	r2, r2
 8017c22:	940b      	str	r4, [sp, #44]	; 0x2c
 8017c24:	2400      	movs	r4, #0
 8017c26:	9202      	str	r2, [sp, #8]
 8017c28:	9a06      	ldr	r2, [sp, #24]
 8017c2a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8017c2e:	9206      	str	r2, [sp, #24]
 8017c30:	462a      	mov	r2, r5
 8017c32:	435a      	muls	r2, r3
 8017c34:	9401      	str	r4, [sp, #4]
 8017c36:	9c02      	ldr	r4, [sp, #8]
 8017c38:	9d02      	ldr	r5, [sp, #8]
 8017c3a:	fb92 f4f4 	sdiv	r4, r2, r4
 8017c3e:	fb05 2214 	mls	r2, r5, r4, r2
 8017c42:	2a00      	cmp	r2, #0
 8017c44:	9207      	str	r2, [sp, #28]
 8017c46:	bfbc      	itt	lt
 8017c48:	1952      	addlt	r2, r2, r5
 8017c4a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8017c4e:	6905      	ldr	r5, [r0, #16]
 8017c50:	bfb8      	it	lt
 8017c52:	9207      	strlt	r2, [sp, #28]
 8017c54:	eb04 0901 	add.w	r9, r4, r1
 8017c58:	9a01      	ldr	r2, [sp, #4]
 8017c5a:	ea4f 1669 	mov.w	r6, r9, asr #5
 8017c5e:	429a      	cmp	r2, r3
 8017c60:	f040 8111 	bne.w	8017e86 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8017c64:	f9b5 3000 	ldrsh.w	r3, [r5]
 8017c68:	429e      	cmp	r6, r3
 8017c6a:	d104      	bne.n	8017c76 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8017c6c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8017c70:	9a03      	ldr	r2, [sp, #12]
 8017c72:	429a      	cmp	r2, r3
 8017c74:	d01b      	beq.n	8017cae <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8017c76:	88ea      	ldrh	r2, [r5, #6]
 8017c78:	88ab      	ldrh	r3, [r5, #4]
 8017c7a:	4313      	orrs	r3, r2
 8017c7c:	d010      	beq.n	8017ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8017c7e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8017c82:	2a00      	cmp	r2, #0
 8017c84:	db0c      	blt.n	8017ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8017c86:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017c88:	429a      	cmp	r2, r3
 8017c8a:	da09      	bge.n	8017ca0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8017c8c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8017c90:	429a      	cmp	r2, r3
 8017c92:	f102 0201 	add.w	r2, r2, #1
 8017c96:	bf38      	it	cc
 8017c98:	3508      	addcc	r5, #8
 8017c9a:	6082      	str	r2, [r0, #8]
 8017c9c:	bf38      	it	cc
 8017c9e:	6105      	strcc	r5, [r0, #16]
 8017ca0:	6903      	ldr	r3, [r0, #16]
 8017ca2:	9a03      	ldr	r2, [sp, #12]
 8017ca4:	801e      	strh	r6, [r3, #0]
 8017ca6:	805a      	strh	r2, [r3, #2]
 8017ca8:	2200      	movs	r2, #0
 8017caa:	809a      	strh	r2, [r3, #4]
 8017cac:	80da      	strh	r2, [r3, #6]
 8017cae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017cb0:	9a03      	ldr	r2, [sp, #12]
 8017cb2:	6901      	ldr	r1, [r0, #16]
 8017cb4:	441a      	add	r2, r3
 8017cb6:	f9b1 3000 	ldrsh.w	r3, [r1]
 8017cba:	42b3      	cmp	r3, r6
 8017cbc:	d103      	bne.n	8017cc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8017cbe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	d01a      	beq.n	8017cfc <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8017cc6:	88cc      	ldrh	r4, [r1, #6]
 8017cc8:	888b      	ldrh	r3, [r1, #4]
 8017cca:	4323      	orrs	r3, r4
 8017ccc:	d010      	beq.n	8017cf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8017cce:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017cd2:	2c00      	cmp	r4, #0
 8017cd4:	db0c      	blt.n	8017cf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8017cd6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017cd8:	429c      	cmp	r4, r3
 8017cda:	da09      	bge.n	8017cf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8017cdc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017ce0:	429c      	cmp	r4, r3
 8017ce2:	f104 0401 	add.w	r4, r4, #1
 8017ce6:	bf38      	it	cc
 8017ce8:	3108      	addcc	r1, #8
 8017cea:	6084      	str	r4, [r0, #8]
 8017cec:	bf38      	it	cc
 8017cee:	6101      	strcc	r1, [r0, #16]
 8017cf0:	6903      	ldr	r3, [r0, #16]
 8017cf2:	2100      	movs	r1, #0
 8017cf4:	801e      	strh	r6, [r3, #0]
 8017cf6:	805a      	strh	r2, [r3, #2]
 8017cf8:	8099      	strh	r1, [r3, #4]
 8017cfa:	80d9      	strh	r1, [r3, #6]
 8017cfc:	9b06      	ldr	r3, [sp, #24]
 8017cfe:	4293      	cmp	r3, r2
 8017d00:	f000 8082 	beq.w	8017e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8017d04:	9b08      	ldr	r3, [sp, #32]
 8017d06:	9902      	ldr	r1, [sp, #8]
 8017d08:	015b      	lsls	r3, r3, #5
 8017d0a:	9c02      	ldr	r4, [sp, #8]
 8017d0c:	fb93 f1f1 	sdiv	r1, r3, r1
 8017d10:	fb04 3311 	mls	r3, r4, r1, r3
 8017d14:	9103      	str	r1, [sp, #12]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	9308      	str	r3, [sp, #32]
 8017d1a:	da04      	bge.n	8017d26 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8017d1c:	1e4b      	subs	r3, r1, #1
 8017d1e:	9303      	str	r3, [sp, #12]
 8017d20:	9b08      	ldr	r3, [sp, #32]
 8017d22:	4423      	add	r3, r4
 8017d24:	9308      	str	r3, [sp, #32]
 8017d26:	9b07      	ldr	r3, [sp, #28]
 8017d28:	464f      	mov	r7, r9
 8017d2a:	9902      	ldr	r1, [sp, #8]
 8017d2c:	2600      	movs	r6, #0
 8017d2e:	1a5b      	subs	r3, r3, r1
 8017d30:	9307      	str	r3, [sp, #28]
 8017d32:	9b01      	ldr	r3, [sp, #4]
 8017d34:	f1c3 0320 	rsb	r3, r3, #32
 8017d38:	930e      	str	r3, [sp, #56]	; 0x38
 8017d3a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8017d3c:	9b01      	ldr	r3, [sp, #4]
 8017d3e:	1a5b      	subs	r3, r3, r1
 8017d40:	930a      	str	r3, [sp, #40]	; 0x28
 8017d42:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8017d46:	185b      	adds	r3, r3, r1
 8017d48:	bf58      	it	pl
 8017d4a:	9902      	ldrpl	r1, [sp, #8]
 8017d4c:	9307      	str	r3, [sp, #28]
 8017d4e:	bf57      	itett	pl
 8017d50:	1a5b      	subpl	r3, r3, r1
 8017d52:	9903      	ldrmi	r1, [sp, #12]
 8017d54:	9307      	strpl	r3, [sp, #28]
 8017d56:	9b03      	ldrpl	r3, [sp, #12]
 8017d58:	bf58      	it	pl
 8017d5a:	1c59      	addpl	r1, r3, #1
 8017d5c:	2a00      	cmp	r2, #0
 8017d5e:	4489      	add	r9, r1
 8017d60:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8017d64:	db2e      	blt.n	8017dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8017d66:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017d68:	4293      	cmp	r3, r2
 8017d6a:	dd2b      	ble.n	8017dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8017d6c:	9c01      	ldr	r4, [sp, #4]
 8017d6e:	6905      	ldr	r5, [r0, #16]
 8017d70:	46a0      	mov	r8, r4
 8017d72:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8017d74:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8017d78:	45a0      	cmp	r8, r4
 8017d7a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8017d7e:	f040 814c 	bne.w	801801a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8017d82:	f9b5 1000 	ldrsh.w	r1, [r5]
 8017d86:	4551      	cmp	r1, sl
 8017d88:	d103      	bne.n	8017d92 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8017d8a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017d8e:	4291      	cmp	r1, r2
 8017d90:	d018      	beq.n	8017dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8017d92:	ea5c 010e 	orrs.w	r1, ip, lr
 8017d96:	d00f      	beq.n	8017db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8017d98:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8017d9c:	2900      	cmp	r1, #0
 8017d9e:	db0b      	blt.n	8017db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8017da0:	428b      	cmp	r3, r1
 8017da2:	dd09      	ble.n	8017db8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8017da4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8017da8:	4299      	cmp	r1, r3
 8017daa:	f101 0101 	add.w	r1, r1, #1
 8017dae:	bf38      	it	cc
 8017db0:	3508      	addcc	r5, #8
 8017db2:	6081      	str	r1, [r0, #8]
 8017db4:	bf38      	it	cc
 8017db6:	6105      	strcc	r5, [r0, #16]
 8017db8:	6903      	ldr	r3, [r0, #16]
 8017dba:	f8a3 a000 	strh.w	sl, [r3]
 8017dbe:	805a      	strh	r2, [r3, #2]
 8017dc0:	809e      	strh	r6, [r3, #4]
 8017dc2:	80de      	strh	r6, [r3, #6]
 8017dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017dc6:	6901      	ldr	r1, [r0, #16]
 8017dc8:	441a      	add	r2, r3
 8017dca:	88cc      	ldrh	r4, [r1, #6]
 8017dcc:	888b      	ldrh	r3, [r1, #4]
 8017dce:	4323      	orrs	r3, r4
 8017dd0:	d010      	beq.n	8017df4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8017dd2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8017dd6:	2c00      	cmp	r4, #0
 8017dd8:	db0c      	blt.n	8017df4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8017dda:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017ddc:	429c      	cmp	r4, r3
 8017dde:	da09      	bge.n	8017df4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8017de0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8017de4:	429c      	cmp	r4, r3
 8017de6:	f104 0401 	add.w	r4, r4, #1
 8017dea:	bf38      	it	cc
 8017dec:	3108      	addcc	r1, #8
 8017dee:	6084      	str	r4, [r0, #8]
 8017df0:	bf38      	it	cc
 8017df2:	6101      	strcc	r1, [r0, #16]
 8017df4:	6903      	ldr	r3, [r0, #16]
 8017df6:	464f      	mov	r7, r9
 8017df8:	f8a3 a000 	strh.w	sl, [r3]
 8017dfc:	805a      	strh	r2, [r3, #2]
 8017dfe:	809e      	strh	r6, [r3, #4]
 8017e00:	80de      	strh	r6, [r3, #6]
 8017e02:	9b06      	ldr	r3, [sp, #24]
 8017e04:	4293      	cmp	r3, r2
 8017e06:	d19c      	bne.n	8017d42 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8017e08:	9b01      	ldr	r3, [sp, #4]
 8017e0a:	6907      	ldr	r7, [r0, #16]
 8017e0c:	f1c3 0620 	rsb	r6, r3, #32
 8017e10:	9b05      	ldr	r3, [sp, #20]
 8017e12:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8017e16:	9b04      	ldr	r3, [sp, #16]
 8017e18:	429e      	cmp	r6, r3
 8017e1a:	f040 81c7 	bne.w	80181ac <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8017e1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8017e22:	459e      	cmp	lr, r3
 8017e24:	d104      	bne.n	8017e30 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8017e26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017e2a:	429a      	cmp	r2, r3
 8017e2c:	f43f ae3a 	beq.w	8017aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017e30:	88f9      	ldrh	r1, [r7, #6]
 8017e32:	88bb      	ldrh	r3, [r7, #4]
 8017e34:	430b      	orrs	r3, r1
 8017e36:	d010      	beq.n	8017e5a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017e38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	db0c      	blt.n	8017e5a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017e40:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8017e42:	428b      	cmp	r3, r1
 8017e44:	da09      	bge.n	8017e5a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8017e46:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8017e4a:	428b      	cmp	r3, r1
 8017e4c:	f103 0301 	add.w	r3, r3, #1
 8017e50:	bf38      	it	cc
 8017e52:	3708      	addcc	r7, #8
 8017e54:	6083      	str	r3, [r0, #8]
 8017e56:	bf38      	it	cc
 8017e58:	6107      	strcc	r7, [r0, #16]
 8017e5a:	6903      	ldr	r3, [r0, #16]
 8017e5c:	f8a3 e000 	strh.w	lr, [r3]
 8017e60:	e603      	b.n	8017a6a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8017e62:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8017e64:	9c03      	ldr	r4, [sp, #12]
 8017e66:	42a2      	cmp	r2, r4
 8017e68:	f6ff ae1c 	blt.w	8017aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8017e6c:	9c06      	ldr	r4, [sp, #24]
 8017e6e:	42a2      	cmp	r2, r4
 8017e70:	9c08      	ldr	r4, [sp, #32]
 8017e72:	bfbc      	itt	lt
 8017e74:	3201      	addlt	r2, #1
 8017e76:	9206      	strlt	r2, [sp, #24]
 8017e78:	f1c3 0220 	rsb	r2, r3, #32
 8017e7c:	4362      	muls	r2, r4
 8017e7e:	2401      	movs	r4, #1
 8017e80:	940b      	str	r4, [sp, #44]	; 0x2c
 8017e82:	2420      	movs	r4, #32
 8017e84:	e6d6      	b.n	8017c34 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8017e86:	ea4f 1861 	mov.w	r8, r1, asr #5
 8017e8a:	f009 021f 	and.w	r2, r9, #31
 8017e8e:	f001 011f 	and.w	r1, r1, #31
 8017e92:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8017e96:	920c      	str	r2, [sp, #48]	; 0x30
 8017e98:	45b0      	cmp	r8, r6
 8017e9a:	9a01      	ldr	r2, [sp, #4]
 8017e9c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8017ea0:	eba2 0203 	sub.w	r2, r2, r3
 8017ea4:	d108      	bne.n	8017eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8017ea6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017ea8:	4496      	add	lr, r2
 8017eaa:	4419      	add	r1, r3
 8017eac:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017eb0:	fb02 a101 	mla	r1, r2, r1, sl
 8017eb4:	80e9      	strh	r1, [r5, #6]
 8017eb6:	e6fa      	b.n	8017cae <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8017eb8:	2c00      	cmp	r4, #0
 8017eba:	f2c0 80a7 	blt.w	801800c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8017ebe:	2701      	movs	r7, #1
 8017ec0:	f1c1 0c20 	rsb	ip, r1, #32
 8017ec4:	970a      	str	r7, [sp, #40]	; 0x28
 8017ec6:	2720      	movs	r7, #32
 8017ec8:	fb02 f20c 	mul.w	r2, r2, ip
 8017ecc:	9709      	str	r7, [sp, #36]	; 0x24
 8017ece:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8017ed0:	fb92 fcf4 	sdiv	ip, r2, r4
 8017ed4:	fb04 221c 	mls	r2, r4, ip, r2
 8017ed8:	4439      	add	r1, r7
 8017eda:	2a00      	cmp	r2, #0
 8017edc:	bfbc      	itt	lt
 8017ede:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8017ee2:	1912      	addlt	r2, r2, r4
 8017ee4:	fb0c a101 	mla	r1, ip, r1, sl
 8017ee8:	44e6      	add	lr, ip
 8017eea:	80e9      	strh	r1, [r5, #6]
 8017eec:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017eee:	f8a5 e004 	strh.w	lr, [r5, #4]
 8017ef2:	eb08 0501 	add.w	r5, r8, r1
 8017ef6:	6901      	ldr	r1, [r0, #16]
 8017ef8:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8017efc:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8017f00:	ea58 070e 	orrs.w	r7, r8, lr
 8017f04:	d010      	beq.n	8017f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017f06:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8017f0a:	f1be 0f00 	cmp.w	lr, #0
 8017f0e:	db0b      	blt.n	8017f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017f10:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017f12:	45be      	cmp	lr, r7
 8017f14:	da08      	bge.n	8017f28 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8017f16:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8017f1a:	45be      	cmp	lr, r7
 8017f1c:	bf3c      	itt	cc
 8017f1e:	3108      	addcc	r1, #8
 8017f20:	6101      	strcc	r1, [r0, #16]
 8017f22:	f10e 0101 	add.w	r1, lr, #1
 8017f26:	6081      	str	r1, [r0, #8]
 8017f28:	6901      	ldr	r1, [r0, #16]
 8017f2a:	f04f 0e00 	mov.w	lr, #0
 8017f2e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8017f32:	42ae      	cmp	r6, r5
 8017f34:	800d      	strh	r5, [r1, #0]
 8017f36:	4463      	add	r3, ip
 8017f38:	f8a1 8002 	strh.w	r8, [r1, #2]
 8017f3c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8017f40:	f8a1 e006 	strh.w	lr, [r1, #6]
 8017f44:	d053      	beq.n	8017fee <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8017f46:	9901      	ldr	r1, [sp, #4]
 8017f48:	1b12      	subs	r2, r2, r4
 8017f4a:	1ac9      	subs	r1, r1, r3
 8017f4c:	4461      	add	r1, ip
 8017f4e:	0149      	lsls	r1, r1, #5
 8017f50:	fb91 fef4 	sdiv	lr, r1, r4
 8017f54:	fb04 111e 	mls	r1, r4, lr, r1
 8017f58:	2900      	cmp	r1, #0
 8017f5a:	bfbc      	itt	lt
 8017f5c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8017f60:	1909      	addlt	r1, r1, r4
 8017f62:	f10e 0701 	add.w	r7, lr, #1
 8017f66:	970d      	str	r7, [sp, #52]	; 0x34
 8017f68:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8017f6c:	1852      	adds	r2, r2, r1
 8017f6e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8017f70:	bf54      	ite	pl
 8017f72:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8017f76:	46f4      	movmi	ip, lr
 8017f78:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8017f7c:	bf58      	it	pl
 8017f7e:	1b12      	subpl	r2, r2, r4
 8017f80:	4463      	add	r3, ip
 8017f82:	443d      	add	r5, r7
 8017f84:	44e3      	add	fp, ip
 8017f86:	f8aa b004 	strh.w	fp, [sl, #4]
 8017f8a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8017f8e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8017f92:	f8aa b006 	strh.w	fp, [sl, #6]
 8017f96:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017f9a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8017f9e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8017fa2:	ea5b 070a 	orrs.w	r7, fp, sl
 8017fa6:	d014      	beq.n	8017fd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8017fa8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8017fac:	f1ba 0f00 	cmp.w	sl, #0
 8017fb0:	db0f      	blt.n	8017fd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8017fb2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8017fb4:	45ba      	cmp	sl, r7
 8017fb6:	da0c      	bge.n	8017fd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8017fb8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8017fbc:	45ba      	cmp	sl, r7
 8017fbe:	f10a 0a01 	add.w	sl, sl, #1
 8017fc2:	bf38      	it	cc
 8017fc4:	f10c 0c08 	addcc.w	ip, ip, #8
 8017fc8:	f8c0 a008 	str.w	sl, [r0, #8]
 8017fcc:	bf38      	it	cc
 8017fce:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8017fd2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8017fd6:	f04f 0700 	mov.w	r7, #0
 8017fda:	42ae      	cmp	r6, r5
 8017fdc:	f8ac 5000 	strh.w	r5, [ip]
 8017fe0:	f8ac 8002 	strh.w	r8, [ip, #2]
 8017fe4:	f8ac 7004 	strh.w	r7, [ip, #4]
 8017fe8:	f8ac 7006 	strh.w	r7, [ip, #6]
 8017fec:	d1bc      	bne.n	8017f68 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8017fee:	6904      	ldr	r4, [r0, #16]
 8017ff0:	9a01      	ldr	r2, [sp, #4]
 8017ff2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017ff4:	1ad3      	subs	r3, r2, r3
 8017ff6:	88a2      	ldrh	r2, [r4, #4]
 8017ff8:	3120      	adds	r1, #32
 8017ffa:	441a      	add	r2, r3
 8017ffc:	80a2      	strh	r2, [r4, #4]
 8017ffe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018000:	1a89      	subs	r1, r1, r2
 8018002:	88e2      	ldrh	r2, [r4, #6]
 8018004:	fb03 2301 	mla	r3, r3, r1, r2
 8018008:	80e3      	strh	r3, [r4, #6]
 801800a:	e650      	b.n	8017cae <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801800c:	f04f 37ff 	mov.w	r7, #4294967295
 8018010:	434a      	muls	r2, r1
 8018012:	4264      	negs	r4, r4
 8018014:	970a      	str	r7, [sp, #40]	; 0x28
 8018016:	2700      	movs	r7, #0
 8018018:	e758      	b.n	8017ecc <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 801801a:	ea4f 1867 	mov.w	r8, r7, asr #5
 801801e:	f009 031f 	and.w	r3, r9, #31
 8018022:	f007 071f 	and.w	r7, r7, #31
 8018026:	fa1f fc8c 	uxth.w	ip, ip
 801802a:	45d0      	cmp	r8, sl
 801802c:	930f      	str	r3, [sp, #60]	; 0x3c
 801802e:	fa1f fe8e 	uxth.w	lr, lr
 8018032:	d10a      	bne.n	801804a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8018034:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018036:	449c      	add	ip, r3
 8018038:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801803a:	441f      	add	r7, r3
 801803c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801803e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018042:	fb03 e707 	mla	r7, r3, r7, lr
 8018046:	80ef      	strh	r7, [r5, #6]
 8018048:	e6bc      	b.n	8017dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801804a:	2900      	cmp	r1, #0
 801804c:	f2c0 80a6 	blt.w	801819c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8018050:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018052:	f1c7 0320 	rsb	r3, r7, #32
 8018056:	4363      	muls	r3, r4
 8018058:	2401      	movs	r4, #1
 801805a:	940d      	str	r4, [sp, #52]	; 0x34
 801805c:	2420      	movs	r4, #32
 801805e:	940c      	str	r4, [sp, #48]	; 0x30
 8018060:	fb93 f4f1 	sdiv	r4, r3, r1
 8018064:	fb01 3b14 	mls	fp, r1, r4, r3
 8018068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801806a:	f1bb 0f00 	cmp.w	fp, #0
 801806e:	441f      	add	r7, r3
 8018070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018072:	bfbc      	itt	lt
 8018074:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018078:	448b      	addlt	fp, r1
 801807a:	fb04 e707 	mla	r7, r4, r7, lr
 801807e:	44a4      	add	ip, r4
 8018080:	80ef      	strh	r7, [r5, #6]
 8018082:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018086:	eb08 0503 	add.w	r5, r8, r3
 801808a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801808e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8018092:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018096:	ea5e 0307 	orrs.w	r3, lr, r7
 801809a:	d011      	beq.n	80180c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 801809c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 80180a0:	f1be 0f00 	cmp.w	lr, #0
 80180a4:	db0c      	blt.n	80180c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80180a6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80180a8:	45be      	cmp	lr, r7
 80180aa:	da09      	bge.n	80180c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 80180ac:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 80180b0:	45be      	cmp	lr, r7
 80180b2:	bf3c      	itt	cc
 80180b4:	f10c 0708 	addcc.w	r7, ip, #8
 80180b8:	6107      	strcc	r7, [r0, #16]
 80180ba:	f10e 0701 	add.w	r7, lr, #1
 80180be:	6087      	str	r7, [r0, #8]
 80180c0:	6907      	ldr	r7, [r0, #16]
 80180c2:	b213      	sxth	r3, r2
 80180c4:	4555      	cmp	r5, sl
 80180c6:	9310      	str	r3, [sp, #64]	; 0x40
 80180c8:	807b      	strh	r3, [r7, #2]
 80180ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80180cc:	803d      	strh	r5, [r7, #0]
 80180ce:	80be      	strh	r6, [r7, #4]
 80180d0:	eb04 0c03 	add.w	ip, r4, r3
 80180d4:	80fe      	strh	r6, [r7, #6]
 80180d6:	d050      	beq.n	801817a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 80180d8:	9b01      	ldr	r3, [sp, #4]
 80180da:	eba3 070c 	sub.w	r7, r3, ip
 80180de:	ebab 0301 	sub.w	r3, fp, r1
 80180e2:	443c      	add	r4, r7
 80180e4:	9309      	str	r3, [sp, #36]	; 0x24
 80180e6:	0164      	lsls	r4, r4, #5
 80180e8:	fb94 f8f1 	sdiv	r8, r4, r1
 80180ec:	fb01 4418 	mls	r4, r1, r8, r4
 80180f0:	2c00      	cmp	r4, #0
 80180f2:	bfbc      	itt	lt
 80180f4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80180f8:	1864      	addlt	r4, r4, r1
 80180fa:	f108 0701 	add.w	r7, r8, #1
 80180fe:	9711      	str	r7, [sp, #68]	; 0x44
 8018100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018102:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018106:	191b      	adds	r3, r3, r4
 8018108:	f8be b004 	ldrh.w	fp, [lr, #4]
 801810c:	bf54      	ite	pl
 801810e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8018110:	4647      	movmi	r7, r8
 8018112:	9309      	str	r3, [sp, #36]	; 0x24
 8018114:	bf58      	it	pl
 8018116:	1a5b      	subpl	r3, r3, r1
 8018118:	44bb      	add	fp, r7
 801811a:	44bc      	add	ip, r7
 801811c:	bf58      	it	pl
 801811e:	9309      	strpl	r3, [sp, #36]	; 0x24
 8018120:	f8ae b004 	strh.w	fp, [lr, #4]
 8018124:	f8be b006 	ldrh.w	fp, [lr, #6]
 8018128:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801812c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801812e:	f8ae b006 	strh.w	fp, [lr, #6]
 8018132:	443d      	add	r5, r7
 8018134:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8018138:	f8be b006 	ldrh.w	fp, [lr, #6]
 801813c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8018140:	ea5b 0307 	orrs.w	r3, fp, r7
 8018144:	d011      	beq.n	801816a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018146:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801814a:	f1bb 0f00 	cmp.w	fp, #0
 801814e:	db0c      	blt.n	801816a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018150:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018152:	45bb      	cmp	fp, r7
 8018154:	da09      	bge.n	801816a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8018156:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801815a:	45bb      	cmp	fp, r7
 801815c:	bf3c      	itt	cc
 801815e:	f10e 0708 	addcc.w	r7, lr, #8
 8018162:	6107      	strcc	r7, [r0, #16]
 8018164:	f10b 0701 	add.w	r7, fp, #1
 8018168:	6087      	str	r7, [r0, #8]
 801816a:	6907      	ldr	r7, [r0, #16]
 801816c:	4555      	cmp	r5, sl
 801816e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018170:	803d      	strh	r5, [r7, #0]
 8018172:	807b      	strh	r3, [r7, #2]
 8018174:	80be      	strh	r6, [r7, #4]
 8018176:	80fe      	strh	r6, [r7, #6]
 8018178:	d1c2      	bne.n	8018100 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 801817a:	9b01      	ldr	r3, [sp, #4]
 801817c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801817e:	eba3 0c0c 	sub.w	ip, r3, ip
 8018182:	6903      	ldr	r3, [r0, #16]
 8018184:	3720      	adds	r7, #32
 8018186:	8899      	ldrh	r1, [r3, #4]
 8018188:	4461      	add	r1, ip
 801818a:	8099      	strh	r1, [r3, #4]
 801818c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801818e:	1a7f      	subs	r7, r7, r1
 8018190:	88d9      	ldrh	r1, [r3, #6]
 8018192:	fb0c 1c07 	mla	ip, ip, r7, r1
 8018196:	f8a3 c006 	strh.w	ip, [r3, #6]
 801819a:	e613      	b.n	8017dc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801819c:	f04f 34ff 	mov.w	r4, #4294967295
 80181a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80181a2:	4249      	negs	r1, r1
 80181a4:	940d      	str	r4, [sp, #52]	; 0x34
 80181a6:	2400      	movs	r4, #0
 80181a8:	437b      	muls	r3, r7
 80181aa:	e758      	b.n	801805e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80181ac:	9905      	ldr	r1, [sp, #20]
 80181ae:	ea4f 1b69 	mov.w	fp, r9, asr #5
 80181b2:	f009 0c1f 	and.w	ip, r9, #31
 80181b6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 80181ba:	f001 011f 	and.w	r1, r1, #31
 80181be:	45f3      	cmp	fp, lr
 80181c0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 80181c4:	9102      	str	r1, [sp, #8]
 80181c6:	9904      	ldr	r1, [sp, #16]
 80181c8:	eba1 0406 	sub.w	r4, r1, r6
 80181cc:	d108      	bne.n	80181e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 80181ce:	9b02      	ldr	r3, [sp, #8]
 80181d0:	44a0      	add	r8, r4
 80181d2:	449c      	add	ip, r3
 80181d4:	f8a7 8004 	strh.w	r8, [r7, #4]
 80181d8:	fb04 a40c 	mla	r4, r4, ip, sl
 80181dc:	80fc      	strh	r4, [r7, #6]
 80181de:	e461      	b.n	8017aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80181e0:	9905      	ldr	r1, [sp, #20]
 80181e2:	ebb1 0109 	subs.w	r1, r1, r9
 80181e6:	bf51      	iteee	pl
 80181e8:	f1cc 0520 	rsbpl	r5, ip, #32
 80181ec:	fb04 f40c 	mulmi.w	r4, r4, ip
 80181f0:	4249      	negmi	r1, r1
 80181f2:	2500      	movmi	r5, #0
 80181f4:	bf5d      	ittte	pl
 80181f6:	436c      	mulpl	r4, r5
 80181f8:	2520      	movpl	r5, #32
 80181fa:	f04f 0901 	movpl.w	r9, #1
 80181fe:	f04f 39ff 	movmi.w	r9, #4294967295
 8018202:	9501      	str	r5, [sp, #4]
 8018204:	9b01      	ldr	r3, [sp, #4]
 8018206:	fb94 f5f1 	sdiv	r5, r4, r1
 801820a:	fb01 4415 	mls	r4, r1, r5, r4
 801820e:	449c      	add	ip, r3
 8018210:	eb0b 0309 	add.w	r3, fp, r9
 8018214:	2c00      	cmp	r4, #0
 8018216:	bfbc      	itt	lt
 8018218:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801821c:	1864      	addlt	r4, r4, r1
 801821e:	44a8      	add	r8, r5
 8018220:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018224:	f8a7 8004 	strh.w	r8, [r7, #4]
 8018228:	f8a7 c006 	strh.w	ip, [r7, #6]
 801822c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018230:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018234:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018238:	ea58 0707 	orrs.w	r7, r8, r7
 801823c:	d011      	beq.n	8018262 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801823e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018242:	f1b8 0f00 	cmp.w	r8, #0
 8018246:	db0c      	blt.n	8018262 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8018248:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801824a:	45b8      	cmp	r8, r7
 801824c:	da09      	bge.n	8018262 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801824e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8018252:	45b8      	cmp	r8, r7
 8018254:	bf3c      	itt	cc
 8018256:	f10c 0708 	addcc.w	r7, ip, #8
 801825a:	6107      	strcc	r7, [r0, #16]
 801825c:	f108 0701 	add.w	r7, r8, #1
 8018260:	6087      	str	r7, [r0, #8]
 8018262:	6907      	ldr	r7, [r0, #16]
 8018264:	f04f 0c00 	mov.w	ip, #0
 8018268:	b212      	sxth	r2, r2
 801826a:	459e      	cmp	lr, r3
 801826c:	803b      	strh	r3, [r7, #0]
 801826e:	442e      	add	r6, r5
 8018270:	807a      	strh	r2, [r7, #2]
 8018272:	f8a7 c004 	strh.w	ip, [r7, #4]
 8018276:	f8a7 c006 	strh.w	ip, [r7, #6]
 801827a:	d04b      	beq.n	8018314 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801827c:	9f04      	ldr	r7, [sp, #16]
 801827e:	1a64      	subs	r4, r4, r1
 8018280:	f04f 0a00 	mov.w	sl, #0
 8018284:	1bbf      	subs	r7, r7, r6
 8018286:	443d      	add	r5, r7
 8018288:	016d      	lsls	r5, r5, #5
 801828a:	fb95 f8f1 	sdiv	r8, r5, r1
 801828e:	fb01 5518 	mls	r5, r1, r8, r5
 8018292:	4565      	cmp	r5, ip
 8018294:	bfbc      	itt	lt
 8018296:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801829a:	186d      	addlt	r5, r5, r1
 801829c:	f108 0701 	add.w	r7, r8, #1
 80182a0:	9703      	str	r7, [sp, #12]
 80182a2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80182a6:	1964      	adds	r4, r4, r5
 80182a8:	444b      	add	r3, r9
 80182aa:	bf54      	ite	pl
 80182ac:	9f03      	ldrpl	r7, [sp, #12]
 80182ae:	4647      	movmi	r7, r8
 80182b0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80182b4:	bf58      	it	pl
 80182b6:	1a64      	subpl	r4, r4, r1
 80182b8:	443e      	add	r6, r7
 80182ba:	44bb      	add	fp, r7
 80182bc:	f8ac b004 	strh.w	fp, [ip, #4]
 80182c0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80182c4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80182c8:	f8ac b006 	strh.w	fp, [ip, #6]
 80182cc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80182d0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80182d4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80182d8:	ea5b 0707 	orrs.w	r7, fp, r7
 80182dc:	d011      	beq.n	8018302 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80182de:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80182e2:	f1bb 0f00 	cmp.w	fp, #0
 80182e6:	db0c      	blt.n	8018302 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80182e8:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80182ea:	45bb      	cmp	fp, r7
 80182ec:	da09      	bge.n	8018302 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80182ee:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80182f2:	45bb      	cmp	fp, r7
 80182f4:	bf3c      	itt	cc
 80182f6:	f10c 0708 	addcc.w	r7, ip, #8
 80182fa:	6107      	strcc	r7, [r0, #16]
 80182fc:	f10b 0701 	add.w	r7, fp, #1
 8018300:	6087      	str	r7, [r0, #8]
 8018302:	6907      	ldr	r7, [r0, #16]
 8018304:	459e      	cmp	lr, r3
 8018306:	803b      	strh	r3, [r7, #0]
 8018308:	807a      	strh	r2, [r7, #2]
 801830a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801830e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018312:	d1c6      	bne.n	80182a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8018314:	9b04      	ldr	r3, [sp, #16]
 8018316:	1b9e      	subs	r6, r3, r6
 8018318:	6903      	ldr	r3, [r0, #16]
 801831a:	889a      	ldrh	r2, [r3, #4]
 801831c:	4432      	add	r2, r6
 801831e:	809a      	strh	r2, [r3, #4]
 8018320:	9a02      	ldr	r2, [sp, #8]
 8018322:	f102 0c20 	add.w	ip, r2, #32
 8018326:	9a01      	ldr	r2, [sp, #4]
 8018328:	ebac 0c02 	sub.w	ip, ip, r2
 801832c:	88da      	ldrh	r2, [r3, #6]
 801832e:	fb06 260c 	mla	r6, r6, ip, r2
 8018332:	80de      	strh	r6, [r3, #6]
 8018334:	f7ff bbb6 	b.w	8017aa4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08018338 <_ZN8touchgfx7Outline6lineToEii>:
 8018338:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801833a:	079b      	lsls	r3, r3, #30
 801833c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801833e:	460e      	mov	r6, r1
 8018340:	4615      	mov	r5, r2
 8018342:	d511      	bpl.n	8018368 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018344:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8018348:	ea86 0701 	eor.w	r7, r6, r1
 801834c:	ea85 0302 	eor.w	r3, r5, r2
 8018350:	433b      	orrs	r3, r7
 8018352:	d009      	beq.n	8018368 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8018354:	4633      	mov	r3, r6
 8018356:	9500      	str	r5, [sp, #0]
 8018358:	f7ff fb4c 	bl	80179f4 <_ZN8touchgfx7Outline10renderLineEiiii>
 801835c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801835e:	f043 0301 	orr.w	r3, r3, #1
 8018362:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8018366:	6243      	str	r3, [r0, #36]	; 0x24
 8018368:	b003      	add	sp, #12
 801836a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801836c <_ZN8touchgfx7Outline6moveToEii>:
 801836c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801836e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018370:	4615      	mov	r5, r2
 8018372:	4604      	mov	r4, r0
 8018374:	460e      	mov	r6, r1
 8018376:	079a      	lsls	r2, r3, #30
 8018378:	d401      	bmi.n	801837e <_ZN8touchgfx7Outline6moveToEii+0x12>
 801837a:	f7ff fb08 	bl	801798e <_ZN8touchgfx7Outline5resetEv>
 801837e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018380:	07db      	lsls	r3, r3, #31
 8018382:	d504      	bpl.n	801838e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8018384:	4620      	mov	r0, r4
 8018386:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801838a:	f7ff ffd5 	bl	8018338 <_ZN8touchgfx7Outline6lineToEii>
 801838e:	6923      	ldr	r3, [r4, #16]
 8018390:	1170      	asrs	r0, r6, #5
 8018392:	1169      	asrs	r1, r5, #5
 8018394:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018398:	4290      	cmp	r0, r2
 801839a:	d103      	bne.n	80183a4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801839c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80183a0:	4291      	cmp	r1, r2
 80183a2:	d01a      	beq.n	80183da <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80183a4:	88df      	ldrh	r7, [r3, #6]
 80183a6:	889a      	ldrh	r2, [r3, #4]
 80183a8:	433a      	orrs	r2, r7
 80183aa:	d010      	beq.n	80183ce <_ZN8touchgfx7Outline6moveToEii+0x62>
 80183ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80183b0:	2a00      	cmp	r2, #0
 80183b2:	db0c      	blt.n	80183ce <_ZN8touchgfx7Outline6moveToEii+0x62>
 80183b4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80183b6:	42ba      	cmp	r2, r7
 80183b8:	da09      	bge.n	80183ce <_ZN8touchgfx7Outline6moveToEii+0x62>
 80183ba:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80183be:	42ba      	cmp	r2, r7
 80183c0:	f102 0201 	add.w	r2, r2, #1
 80183c4:	bf38      	it	cc
 80183c6:	3308      	addcc	r3, #8
 80183c8:	60a2      	str	r2, [r4, #8]
 80183ca:	bf38      	it	cc
 80183cc:	6123      	strcc	r3, [r4, #16]
 80183ce:	6923      	ldr	r3, [r4, #16]
 80183d0:	2200      	movs	r2, #0
 80183d2:	8018      	strh	r0, [r3, #0]
 80183d4:	8059      	strh	r1, [r3, #2]
 80183d6:	809a      	strh	r2, [r3, #4]
 80183d8:	80da      	strh	r2, [r3, #6]
 80183da:	6166      	str	r6, [r4, #20]
 80183dc:	6225      	str	r5, [r4, #32]
 80183de:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80183e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080183e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80183e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80183e8:	b0d0      	sub	sp, #320	; 0x140
 80183ea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80183ee:	466c      	mov	r4, sp
 80183f0:	4627      	mov	r7, r4
 80183f2:	1a0d      	subs	r5, r1, r0
 80183f4:	f100 0308 	add.w	r3, r0, #8
 80183f8:	2d48      	cmp	r5, #72	; 0x48
 80183fa:	f340 80d5 	ble.w	80185a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80183fe:	112d      	asrs	r5, r5, #4
 8018400:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8018404:	f9b0 9000 	ldrsh.w	r9, [r0]
 8018408:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801840c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8018410:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018414:	6816      	ldr	r6, [r2, #0]
 8018416:	6006      	str	r6, [r0, #0]
 8018418:	6856      	ldr	r6, [r2, #4]
 801841a:	6046      	str	r6, [r0, #4]
 801841c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8018420:	f8a2 8002 	strh.w	r8, [r2, #2]
 8018424:	f8a2 e004 	strh.w	lr, [r2, #4]
 8018428:	f8a2 c006 	strh.w	ip, [r2, #6]
 801842c:	f1a1 0208 	sub.w	r2, r1, #8
 8018430:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8018434:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8018438:	4565      	cmp	r5, ip
 801843a:	db06      	blt.n	801844a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801843c:	d119      	bne.n	8018472 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801843e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8018442:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8018446:	42ae      	cmp	r6, r5
 8018448:	dd13      	ble.n	8018472 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801844a:	460e      	mov	r6, r1
 801844c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8018450:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8018454:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8018458:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801845c:	601d      	str	r5, [r3, #0]
 801845e:	6875      	ldr	r5, [r6, #4]
 8018460:	605d      	str	r5, [r3, #4]
 8018462:	f821 9c08 	strh.w	r9, [r1, #-8]
 8018466:	f821 cc06 	strh.w	ip, [r1, #-6]
 801846a:	f821 8c04 	strh.w	r8, [r1, #-4]
 801846e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8018472:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8018476:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801847a:	42ae      	cmp	r6, r5
 801847c:	db06      	blt.n	801848c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801847e:	d116      	bne.n	80184ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8018480:	f9b0 c000 	ldrsh.w	ip, [r0]
 8018484:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8018488:	45ac      	cmp	ip, r5
 801848a:	da10      	bge.n	80184ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801848c:	681d      	ldr	r5, [r3, #0]
 801848e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8018492:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8018496:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801849a:	6005      	str	r5, [r0, #0]
 801849c:	685d      	ldr	r5, [r3, #4]
 801849e:	f8a0 8008 	strh.w	r8, [r0, #8]
 80184a2:	6045      	str	r5, [r0, #4]
 80184a4:	8146      	strh	r6, [r0, #10]
 80184a6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80184aa:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80184ae:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80184b2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80184b6:	4565      	cmp	r5, ip
 80184b8:	db06      	blt.n	80184c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80184ba:	d119      	bne.n	80184f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80184bc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80184c0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80184c4:	42ae      	cmp	r6, r5
 80184c6:	da13      	bge.n	80184f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80184c8:	460e      	mov	r6, r1
 80184ca:	f9b0 9000 	ldrsh.w	r9, [r0]
 80184ce:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80184d2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80184d6:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80184da:	6005      	str	r5, [r0, #0]
 80184dc:	6875      	ldr	r5, [r6, #4]
 80184de:	6045      	str	r5, [r0, #4]
 80184e0:	f821 9c08 	strh.w	r9, [r1, #-8]
 80184e4:	f821 cc06 	strh.w	ip, [r1, #-6]
 80184e8:	f821 8c04 	strh.w	r8, [r1, #-4]
 80184ec:	f821 ec02 	strh.w	lr, [r1, #-2]
 80184f0:	3308      	adds	r3, #8
 80184f2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80184f6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80184fa:	45e6      	cmp	lr, ip
 80184fc:	dbf8      	blt.n	80184f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80184fe:	d105      	bne.n	801850c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018500:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018504:	f9b0 5000 	ldrsh.w	r5, [r0]
 8018508:	42ae      	cmp	r6, r5
 801850a:	dbf1      	blt.n	80184f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801850c:	4615      	mov	r5, r2
 801850e:	3a08      	subs	r2, #8
 8018510:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8018514:	45b4      	cmp	ip, r6
 8018516:	dbf9      	blt.n	801850c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018518:	d105      	bne.n	8018526 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801851a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801851e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8018522:	45b0      	cmp	r8, r6
 8018524:	dbf2      	blt.n	801850c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8018526:	4293      	cmp	r3, r2
 8018528:	f1a5 0608 	sub.w	r6, r5, #8
 801852c:	d816      	bhi.n	801855c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801852e:	f8d6 c000 	ldr.w	ip, [r6]
 8018532:	f9b3 a000 	ldrsh.w	sl, [r3]
 8018536:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801853a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801853e:	f8c3 c000 	str.w	ip, [r3]
 8018542:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8018546:	f8c3 c004 	str.w	ip, [r3, #4]
 801854a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801854e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8018552:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018556:	f825 8c02 	strh.w	r8, [r5, #-2]
 801855a:	e7c9      	b.n	80184f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801855c:	f8d6 e000 	ldr.w	lr, [r6]
 8018560:	f9b0 a000 	ldrsh.w	sl, [r0]
 8018564:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8018568:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801856c:	f8c0 e000 	str.w	lr, [r0]
 8018570:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8018574:	1a16      	subs	r6, r2, r0
 8018576:	f8c0 e004 	str.w	lr, [r0, #4]
 801857a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801857e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8018582:	f825 9c04 	strh.w	r9, [r5, #-4]
 8018586:	f825 8c02 	strh.w	r8, [r5, #-2]
 801858a:	1acd      	subs	r5, r1, r3
 801858c:	10ed      	asrs	r5, r5, #3
 801858e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8018592:	bfb5      	itete	lt
 8018594:	e9c4 0200 	strdlt	r0, r2, [r4]
 8018598:	e9c4 3100 	strdge	r3, r1, [r4]
 801859c:	460a      	movlt	r2, r1
 801859e:	4603      	movge	r3, r0
 80185a0:	3408      	adds	r4, #8
 80185a2:	4618      	mov	r0, r3
 80185a4:	4611      	mov	r1, r2
 80185a6:	e724      	b.n	80183f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80185a8:	4299      	cmp	r1, r3
 80185aa:	d927      	bls.n	80185fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80185ac:	f1a3 0210 	sub.w	r2, r3, #16
 80185b0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80185b4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80185b8:	45ac      	cmp	ip, r5
 80185ba:	db06      	blt.n	80185ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80185bc:	d11c      	bne.n	80185f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80185be:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80185c2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80185c6:	42ae      	cmp	r6, r5
 80185c8:	da16      	bge.n	80185f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80185ca:	4615      	mov	r5, r2
 80185cc:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 80185d0:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 80185d4:	3a08      	subs	r2, #8
 80185d6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80185da:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80185de:	6196      	str	r6, [r2, #24]
 80185e0:	42a8      	cmp	r0, r5
 80185e2:	686e      	ldr	r6, [r5, #4]
 80185e4:	f8a2 9010 	strh.w	r9, [r2, #16]
 80185e8:	61d6      	str	r6, [r2, #28]
 80185ea:	f8a2 c012 	strh.w	ip, [r2, #18]
 80185ee:	f8a2 8014 	strh.w	r8, [r2, #20]
 80185f2:	f8a2 e016 	strh.w	lr, [r2, #22]
 80185f6:	d1db      	bne.n	80185b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80185f8:	3308      	adds	r3, #8
 80185fa:	e7d5      	b.n	80185a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80185fc:	42bc      	cmp	r4, r7
 80185fe:	d903      	bls.n	8018608 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8018600:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8018604:	3c08      	subs	r4, #8
 8018606:	e6f4      	b.n	80183f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8018608:	b050      	add	sp, #320	; 0x140
 801860a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801860e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801860e:	b510      	push	{r4, lr}
 8018610:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018612:	4604      	mov	r4, r0
 8018614:	07da      	lsls	r2, r3, #31
 8018616:	d507      	bpl.n	8018628 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8018618:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801861c:	f7ff fe8c 	bl	8018338 <_ZN8touchgfx7Outline6lineToEii>
 8018620:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8018622:	f023 0301 	bic.w	r3, r3, #1
 8018626:	6243      	str	r3, [r0, #36]	; 0x24
 8018628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801862a:	079b      	lsls	r3, r3, #30
 801862c:	d521      	bpl.n	8018672 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801862e:	6923      	ldr	r3, [r4, #16]
 8018630:	88d9      	ldrh	r1, [r3, #6]
 8018632:	889a      	ldrh	r2, [r3, #4]
 8018634:	430a      	orrs	r2, r1
 8018636:	d010      	beq.n	801865a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018638:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801863c:	2a00      	cmp	r2, #0
 801863e:	db0c      	blt.n	801865a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018640:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018642:	428a      	cmp	r2, r1
 8018644:	da09      	bge.n	801865a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8018646:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801864a:	4291      	cmp	r1, r2
 801864c:	f102 0201 	add.w	r2, r2, #1
 8018650:	bf88      	it	hi
 8018652:	3308      	addhi	r3, #8
 8018654:	60a2      	str	r2, [r4, #8]
 8018656:	bf88      	it	hi
 8018658:	6123      	strhi	r3, [r4, #16]
 801865a:	68a1      	ldr	r1, [r4, #8]
 801865c:	b129      	cbz	r1, 801866a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801865e:	6863      	ldr	r3, [r4, #4]
 8018660:	4299      	cmp	r1, r3
 8018662:	d802      	bhi.n	801866a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8018664:	68e0      	ldr	r0, [r4, #12]
 8018666:	f7ff febd 	bl	80183e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801866a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801866c:	f023 0302 	bic.w	r3, r3, #2
 8018670:	6263      	str	r3, [r4, #36]	; 0x24
 8018672:	68e0      	ldr	r0, [r4, #12]
 8018674:	bd10      	pop	{r4, pc}
	...

08018678 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 8018678:	4b02      	ldr	r3, [pc, #8]	; (8018684 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 801867a:	6018      	str	r0, [r3, #0]
 801867c:	4b02      	ldr	r3, [pc, #8]	; (8018688 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 801867e:	6019      	str	r1, [r3, #0]
 8018680:	4770      	bx	lr
 8018682:	bf00      	nop
 8018684:	2003bee8 	.word	0x2003bee8
 8018688:	2003beec 	.word	0x2003beec

0801868c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801868c:	4b01      	ldr	r3, [pc, #4]	; (8018694 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801868e:	6818      	ldr	r0, [r3, #0]
 8018690:	4770      	bx	lr
 8018692:	bf00      	nop
 8018694:	2003bee8 	.word	0x2003bee8

08018698 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8018698:	4b01      	ldr	r3, [pc, #4]	; (80186a0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801869a:	6818      	ldr	r0, [r3, #0]
 801869c:	4770      	bx	lr
 801869e:	bf00      	nop
 80186a0:	2003beec 	.word	0x2003beec

080186a4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80186a4:	b510      	push	{r4, lr}
 80186a6:	6803      	ldr	r3, [r0, #0]
 80186a8:	460c      	mov	r4, r1
 80186aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186ac:	4798      	blx	r3
 80186ae:	1b03      	subs	r3, r0, r4
 80186b0:	4258      	negs	r0, r3
 80186b2:	4158      	adcs	r0, r3
 80186b4:	bd10      	pop	{r4, pc}
	...

080186b8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80186b8:	4b01      	ldr	r3, [pc, #4]	; (80186c0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80186ba:	6019      	str	r1, [r3, #0]
 80186bc:	4770      	bx	lr
 80186be:	bf00      	nop
 80186c0:	2003bef0 	.word	0x2003bef0

080186c4 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80186c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186c8:	4696      	mov	lr, r2
 80186ca:	b097      	sub	sp, #92	; 0x5c
 80186cc:	4605      	mov	r5, r0
 80186ce:	4614      	mov	r4, r2
 80186d0:	460e      	mov	r6, r1
 80186d2:	461f      	mov	r7, r3
 80186d4:	f10d 0c1c 	add.w	ip, sp, #28
 80186d8:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 80186dc:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 80186e0:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 80186e4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80186e8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80186ec:	f8de 3000 	ldr.w	r3, [lr]
 80186f0:	f104 0e14 	add.w	lr, r4, #20
 80186f4:	f8cc 3000 	str.w	r3, [ip]
 80186f8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80186fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018704:	f8de 3000 	ldr.w	r3, [lr]
 8018708:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801870c:	f8cc 3000 	str.w	r3, [ip]
 8018710:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018714:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018718:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801871c:	f8de 3000 	ldr.w	r3, [lr]
 8018720:	4631      	mov	r1, r6
 8018722:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018724:	4628      	mov	r0, r5
 8018726:	f8cc 3000 	str.w	r3, [ip]
 801872a:	682b      	ldr	r3, [r5, #0]
 801872c:	9201      	str	r2, [sp, #4]
 801872e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018730:	f8cd 8008 	str.w	r8, [sp, #8]
 8018734:	9200      	str	r2, [sp, #0]
 8018736:	aa07      	add	r2, sp, #28
 8018738:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801873c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8018740:	463b      	mov	r3, r7
 8018742:	47d8      	blx	fp
 8018744:	46a6      	mov	lr, r4
 8018746:	f10d 0c1c 	add.w	ip, sp, #28
 801874a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801874e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018752:	f8de 3000 	ldr.w	r3, [lr]
 8018756:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801875a:	343c      	adds	r4, #60	; 0x3c
 801875c:	f8cc 3000 	str.w	r3, [ip]
 8018760:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8018764:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018768:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801876c:	f8de 3000 	ldr.w	r3, [lr]
 8018770:	f8cc 3000 	str.w	r3, [ip]
 8018774:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8018778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801877a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801877e:	6823      	ldr	r3, [r4, #0]
 8018780:	4631      	mov	r1, r6
 8018782:	4628      	mov	r0, r5
 8018784:	f8cc 3000 	str.w	r3, [ip]
 8018788:	682b      	ldr	r3, [r5, #0]
 801878a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801878e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018790:	f8cd 8008 	str.w	r8, [sp, #8]
 8018794:	9201      	str	r2, [sp, #4]
 8018796:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8018798:	9200      	str	r2, [sp, #0]
 801879a:	aa07      	add	r2, sp, #28
 801879c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 801879e:	463b      	mov	r3, r7
 80187a0:	47a0      	blx	r4
 80187a2:	b017      	add	sp, #92	; 0x5c
 80187a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080187a8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80187a8:	2000      	movs	r0, #0
 80187aa:	4770      	bx	lr

080187ac <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80187ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187b0:	b08d      	sub	sp, #52	; 0x34
 80187b2:	4688      	mov	r8, r1
 80187b4:	f8d3 c000 	ldr.w	ip, [r3]
 80187b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80187ba:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80187be:	680f      	ldr	r7, [r1, #0]
 80187c0:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80187c4:	eba7 070c 	sub.w	r7, r7, ip
 80187c8:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80187cc:	edd3 6a07 	vldr	s13, [r3, #28]
 80187d0:	42bc      	cmp	r4, r7
 80187d2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80187d4:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 80187d8:	bfa8      	it	ge
 80187da:	463c      	movge	r4, r7
 80187dc:	f9b1 9000 	ldrsh.w	r9, [r1]
 80187e0:	f9ba 1000 	ldrsh.w	r1, [sl]
 80187e4:	ee07 4a90 	vmov	s15, r4
 80187e8:	eb09 0e0c 	add.w	lr, r9, ip
 80187ec:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 80187f0:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80187f4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80187f8:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 80187fc:	4571      	cmp	r1, lr
 80187fe:	ee25 4a04 	vmul.f32	s8, s10, s8
 8018802:	ee65 4a24 	vmul.f32	s9, s10, s9
 8018806:	ee25 5a27 	vmul.f32	s10, s10, s15
 801880a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801880e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8018812:	ee32 1a05 	vadd.f32	s2, s4, s10
 8018816:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801881a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801881e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018822:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018826:	f340 808c 	ble.w	8018942 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801882a:	eba1 060e 	sub.w	r6, r1, lr
 801882e:	fb96 f5f4 	sdiv	r5, r6, r4
 8018832:	ee07 5a10 	vmov	s14, r5
 8018836:	2d00      	cmp	r5, #0
 8018838:	fb04 6615 	mls	r6, r4, r5, r6
 801883c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018840:	eea7 0a04 	vfma.f32	s0, s14, s8
 8018844:	eee7 0a24 	vfma.f32	s1, s14, s9
 8018848:	eea7 1a05 	vfma.f32	s2, s14, s10
 801884c:	dd12      	ble.n	8018874 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801884e:	ee70 6a44 	vsub.f32	s13, s0, s8
 8018852:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8018856:	ee31 2a45 	vsub.f32	s4, s2, s10
 801885a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801885e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018862:	bf14      	ite	ne
 8018864:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8018868:	eeb0 7a67 	vmoveq.f32	s14, s15
 801886c:	ee61 1a87 	vmul.f32	s3, s3, s14
 8018870:	ee22 2a07 	vmul.f32	s4, s4, s14
 8018874:	fb05 f204 	mul.w	r2, r5, r4
 8018878:	1abf      	subs	r7, r7, r2
 801887a:	4494      	add	ip, r2
 801887c:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8018880:	4411      	add	r1, r2
 8018882:	eb09 020c 	add.w	r2, r9, ip
 8018886:	b209      	sxth	r1, r1
 8018888:	443a      	add	r2, r7
 801888a:	428a      	cmp	r2, r1
 801888c:	bfc4      	itt	gt
 801888e:	eba1 0209 	subgt.w	r2, r1, r9
 8018892:	eba2 070c 	subgt.w	r7, r2, ip
 8018896:	2f00      	cmp	r7, #0
 8018898:	dd50      	ble.n	801893c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 801889a:	fb97 f1f4 	sdiv	r1, r7, r4
 801889e:	fb04 7211 	mls	r2, r4, r1, r7
 80188a2:	b90a      	cbnz	r2, 80188a8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80188a4:	3901      	subs	r1, #1
 80188a6:	4622      	mov	r2, r4
 80188a8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80188ac:	6840      	ldr	r0, [r0, #4]
 80188ae:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80188b2:	44b6      	add	lr, r6
 80188b4:	f8d0 a000 	ldr.w	sl, [r0]
 80188b8:	2900      	cmp	r1, #0
 80188ba:	bfcc      	ite	gt
 80188bc:	46a1      	movgt	r9, r4
 80188be:	4691      	movle	r9, r2
 80188c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80188c2:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80188c4:	fb04 e505 	mla	r5, r4, r5, lr
 80188c8:	eef0 6a42 	vmov.f32	s13, s4
 80188cc:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80188d0:	9008      	str	r0, [sp, #32]
 80188d2:	eeb0 7a61 	vmov.f32	s14, s3
 80188d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80188d8:	695b      	ldr	r3, [r3, #20]
 80188da:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80188de:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80188e2:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80188e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80188e8:	445b      	add	r3, fp
 80188ea:	9307      	str	r3, [sp, #28]
 80188ec:	ee16 3a90 	vmov	r3, s13
 80188f0:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80188f4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80188f8:	ee21 3a23 	vmul.f32	s6, s2, s7
 80188fc:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8018900:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018904:	ee17 7a90 	vmov	r7, s15
 8018908:	ee73 7a42 	vsub.f32	s15, s6, s4
 801890c:	fb97 f7f4 	sdiv	r7, r7, r4
 8018910:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8018914:	ee17 ca90 	vmov	ip, s15
 8018918:	fb9c fcf4 	sdiv	ip, ip, r4
 801891c:	fb0c 3306 	mla	r3, ip, r6, r3
 8018920:	9302      	str	r3, [sp, #8]
 8018922:	ee17 3a10 	vmov	r3, s14
 8018926:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801892a:	fb07 3706 	mla	r7, r7, r6, r3
 801892e:	eba9 0306 	sub.w	r3, r9, r6
 8018932:	e9cd 4700 	strd	r4, r7, [sp]
 8018936:	f8da 4008 	ldr.w	r4, [sl, #8]
 801893a:	47a0      	blx	r4
 801893c:	b00d      	add	sp, #52	; 0x34
 801893e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018942:	2500      	movs	r5, #0
 8018944:	462e      	mov	r6, r5
 8018946:	e799      	b.n	801887c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08018948 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8018948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801894c:	b0db      	sub	sp, #364	; 0x16c
 801894e:	461d      	mov	r5, r3
 8018950:	4614      	mov	r4, r2
 8018952:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 8018956:	910f      	str	r1, [sp, #60]	; 0x3c
 8018958:	4629      	mov	r1, r5
 801895a:	930a      	str	r3, [sp, #40]	; 0x28
 801895c:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8018960:	9009      	str	r0, [sp, #36]	; 0x24
 8018962:	930b      	str	r3, [sp, #44]	; 0x2c
 8018964:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 8018968:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801896c:	9310      	str	r3, [sp, #64]	; 0x40
 801896e:	6803      	ldr	r3, [r0, #0]
 8018970:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8018972:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018976:	47b8      	blx	r7
 8018978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801897a:	6058      	str	r0, [r3, #4]
 801897c:	2800      	cmp	r0, #0
 801897e:	f000 83a1 	beq.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018982:	682b      	ldr	r3, [r5, #0]
 8018984:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8018988:	ed94 7a02 	vldr	s14, [r4, #8]
 801898c:	9314      	str	r3, [sp, #80]	; 0x50
 801898e:	686b      	ldr	r3, [r5, #4]
 8018990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018994:	9315      	str	r3, [sp, #84]	; 0x54
 8018996:	4bc1      	ldr	r3, [pc, #772]	; (8018c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8018998:	7819      	ldrb	r1, [r3, #0]
 801899a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801899e:	2900      	cmp	r1, #0
 80189a0:	bf16      	itet	ne
 80189a2:	4619      	movne	r1, r3
 80189a4:	4611      	moveq	r1, r2
 80189a6:	4613      	movne	r3, r2
 80189a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ac:	9116      	str	r1, [sp, #88]	; 0x58
 80189ae:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80189b2:	f240 8387 	bls.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189b6:	ed94 7a07 	vldr	s14, [r4, #28]
 80189ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80189be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189c2:	f240 837f 	bls.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189c6:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80189ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80189ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189d2:	f240 8377 	bls.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189d6:	6822      	ldr	r2, [r4, #0]
 80189d8:	4bb1      	ldr	r3, [pc, #708]	; (8018ca0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80189da:	429a      	cmp	r2, r3
 80189dc:	f2c0 8372 	blt.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189e0:	49b0      	ldr	r1, [pc, #704]	; (8018ca4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80189e2:	6963      	ldr	r3, [r4, #20]
 80189e4:	428a      	cmp	r2, r1
 80189e6:	f300 836d 	bgt.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189ea:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 80189ee:	48ae      	ldr	r0, [pc, #696]	; (8018ca8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80189f0:	33ff      	adds	r3, #255	; 0xff
 80189f2:	4283      	cmp	r3, r0
 80189f4:	f200 8366 	bhi.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80189f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80189fa:	4dac      	ldr	r5, [pc, #688]	; (8018cac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80189fc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8018a00:	33ff      	adds	r3, #255	; 0xff
 8018a02:	42ab      	cmp	r3, r5
 8018a04:	f200 835e 	bhi.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a08:	6862      	ldr	r2, [r4, #4]
 8018a0a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8018a0e:	33ff      	adds	r3, #255	; 0xff
 8018a10:	4283      	cmp	r3, r0
 8018a12:	f200 8357 	bhi.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a16:	69a1      	ldr	r1, [r4, #24]
 8018a18:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8018a1c:	33ff      	adds	r3, #255	; 0xff
 8018a1e:	4283      	cmp	r3, r0
 8018a20:	f200 8350 	bhi.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8018a26:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8018a2a:	30ff      	adds	r0, #255	; 0xff
 8018a2c:	42a8      	cmp	r0, r5
 8018a2e:	f200 8349 	bhi.w	80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8018a32:	428a      	cmp	r2, r1
 8018a34:	f280 8110 	bge.w	8018c58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8018a38:	429a      	cmp	r2, r3
 8018a3a:	f300 8119 	bgt.w	8018c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8018a3e:	4299      	cmp	r1, r3
 8018a40:	f280 811d 	bge.w	8018c7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8018a44:	2502      	movs	r5, #2
 8018a46:	2701      	movs	r7, #1
 8018a48:	46a9      	mov	r9, r5
 8018a4a:	46b8      	mov	r8, r7
 8018a4c:	f04f 0a00 	mov.w	sl, #0
 8018a50:	4621      	mov	r1, r4
 8018a52:	a849      	add	r0, sp, #292	; 0x124
 8018a54:	f003 fd04 	bl	801c460 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8018a58:	4622      	mov	r2, r4
 8018a5a:	4653      	mov	r3, sl
 8018a5c:	a949      	add	r1, sp, #292	; 0x124
 8018a5e:	f8cd 9000 	str.w	r9, [sp]
 8018a62:	a819      	add	r0, sp, #100	; 0x64
 8018a64:	f003 fe2c 	bl	801c6c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018a68:	4622      	mov	r2, r4
 8018a6a:	4653      	mov	r3, sl
 8018a6c:	a949      	add	r1, sp, #292	; 0x124
 8018a6e:	f8cd 8000 	str.w	r8, [sp]
 8018a72:	a829      	add	r0, sp, #164	; 0xa4
 8018a74:	f003 fe24 	bl	801c6c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018a78:	4643      	mov	r3, r8
 8018a7a:	4622      	mov	r2, r4
 8018a7c:	a949      	add	r1, sp, #292	; 0x124
 8018a7e:	f8cd 9000 	str.w	r9, [sp]
 8018a82:	a839      	add	r0, sp, #228	; 0xe4
 8018a84:	f003 fe1c 	bl	801c6c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8018a88:	42af      	cmp	r7, r5
 8018a8a:	af12      	add	r7, sp, #72	; 0x48
 8018a8c:	bfb7      	itett	lt
 8018a8e:	2300      	movlt	r3, #0
 8018a90:	2301      	movge	r3, #1
 8018a92:	ad29      	addlt	r5, sp, #164	; 0xa4
 8018a94:	ac19      	addlt	r4, sp, #100	; 0x64
 8018a96:	bfb1      	iteee	lt
 8018a98:	930e      	strlt	r3, [sp, #56]	; 0x38
 8018a9a:	ad19      	addge	r5, sp, #100	; 0x64
 8018a9c:	930e      	strge	r3, [sp, #56]	; 0x38
 8018a9e:	ac29      	addge	r4, sp, #164	; 0xa4
 8018aa0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018aa2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018aa6:	e887 0003 	stmia.w	r7, {r0, r1}
 8018aaa:	b928      	cbnz	r0, 8018ab8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8018aac:	4b80      	ldr	r3, [pc, #512]	; (8018cb0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8018aae:	6818      	ldr	r0, [r3, #0]
 8018ab0:	6803      	ldr	r3, [r0, #0]
 8018ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ab4:	4798      	blx	r3
 8018ab6:	6038      	str	r0, [r7, #0]
 8018ab8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018aba:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018abe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018ac2:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8018ac4:	930c      	str	r3, [sp, #48]	; 0x30
 8018ac6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018ac8:	6963      	ldr	r3, [r4, #20]
 8018aca:	440b      	add	r3, r1
 8018acc:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018ad0:	4408      	add	r0, r1
 8018ad2:	b200      	sxth	r0, r0
 8018ad4:	4283      	cmp	r3, r0
 8018ad6:	900d      	str	r0, [sp, #52]	; 0x34
 8018ad8:	f280 80dd 	bge.w	8018c96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8018adc:	428b      	cmp	r3, r1
 8018ade:	da08      	bge.n	8018af2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018ae0:	2a00      	cmp	r2, #0
 8018ae2:	dd06      	ble.n	8018af2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018ae4:	1acb      	subs	r3, r1, r3
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	f2c0 80e4 	blt.w	8018cb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8018aec:	2b00      	cmp	r3, #0
 8018aee:	f300 80e2 	bgt.w	8018cb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8018af2:	6967      	ldr	r7, [r4, #20]
 8018af4:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018afa:	443b      	add	r3, r7
 8018afc:	461f      	mov	r7, r3
 8018afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018b00:	1bdf      	subs	r7, r3, r7
 8018b02:	4297      	cmp	r7, r2
 8018b04:	bfa8      	it	ge
 8018b06:	4617      	movge	r7, r2
 8018b08:	2f00      	cmp	r7, #0
 8018b0a:	f340 8166 	ble.w	8018dda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8018b0e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018b10:	6829      	ldr	r1, [r5, #0]
 8018b12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018b16:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018b1a:	4411      	add	r1, r2
 8018b1c:	6820      	ldr	r0, [r4, #0]
 8018b1e:	4299      	cmp	r1, r3
 8018b20:	dd1a      	ble.n	8018b58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018b22:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018b26:	4402      	add	r2, r0
 8018b28:	440b      	add	r3, r1
 8018b2a:	b21b      	sxth	r3, r3
 8018b2c:	429a      	cmp	r2, r3
 8018b2e:	dc13      	bgt.n	8018b58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8018b30:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018b32:	a912      	add	r1, sp, #72	; 0x48
 8018b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018b38:	681b      	ldr	r3, [r3, #0]
 8018b3a:	9206      	str	r2, [sp, #24]
 8018b3c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018b3e:	9500      	str	r5, [sp, #0]
 8018b40:	9205      	str	r2, [sp, #20]
 8018b42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b44:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018b48:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018b4a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018b4e:	aa49      	add	r2, sp, #292	; 0x124
 8018b50:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018b54:	4623      	mov	r3, r4
 8018b56:	47c8      	blx	r9
 8018b58:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018b5c:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018b60:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018b68:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018b6c:	68a1      	ldr	r1, [r4, #8]
 8018b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018b72:	ed94 6a08 	vldr	s12, [r4, #32]
 8018b76:	edd4 6a07 	vldr	s13, [r4, #28]
 8018b7a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018b7e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018b82:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018b86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018b8a:	edc4 6a07 	vstr	s13, [r4, #28]
 8018b8e:	441a      	add	r2, r3
 8018b90:	6963      	ldr	r3, [r4, #20]
 8018b92:	3301      	adds	r3, #1
 8018b94:	6022      	str	r2, [r4, #0]
 8018b96:	6163      	str	r3, [r4, #20]
 8018b98:	69a3      	ldr	r3, [r4, #24]
 8018b9a:	3b01      	subs	r3, #1
 8018b9c:	61a3      	str	r3, [r4, #24]
 8018b9e:	6923      	ldr	r3, [r4, #16]
 8018ba0:	440b      	add	r3, r1
 8018ba2:	68e1      	ldr	r1, [r4, #12]
 8018ba4:	428b      	cmp	r3, r1
 8018ba6:	6123      	str	r3, [r4, #16]
 8018ba8:	db15      	blt.n	8018bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8018baa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018bae:	3201      	adds	r2, #1
 8018bb0:	1a5b      	subs	r3, r3, r1
 8018bb2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018bb6:	6022      	str	r2, [r4, #0]
 8018bb8:	6123      	str	r3, [r4, #16]
 8018bba:	edc4 6a07 	vstr	s13, [r4, #28]
 8018bbe:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018bc2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018bc6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018bca:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018bd2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018bd6:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018bda:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018bde:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018be2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018be6:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018bea:	68a9      	ldr	r1, [r5, #8]
 8018bec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018bf0:	ed95 6a08 	vldr	s12, [r5, #32]
 8018bf4:	edd5 6a07 	vldr	s13, [r5, #28]
 8018bf8:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018bfc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018c00:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018c04:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018c08:	edc5 6a07 	vstr	s13, [r5, #28]
 8018c0c:	441a      	add	r2, r3
 8018c0e:	696b      	ldr	r3, [r5, #20]
 8018c10:	3301      	adds	r3, #1
 8018c12:	602a      	str	r2, [r5, #0]
 8018c14:	616b      	str	r3, [r5, #20]
 8018c16:	69ab      	ldr	r3, [r5, #24]
 8018c18:	3b01      	subs	r3, #1
 8018c1a:	61ab      	str	r3, [r5, #24]
 8018c1c:	692b      	ldr	r3, [r5, #16]
 8018c1e:	440b      	add	r3, r1
 8018c20:	68e9      	ldr	r1, [r5, #12]
 8018c22:	428b      	cmp	r3, r1
 8018c24:	612b      	str	r3, [r5, #16]
 8018c26:	db15      	blt.n	8018c54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8018c28:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018c2c:	3201      	adds	r2, #1
 8018c2e:	1a5b      	subs	r3, r3, r1
 8018c30:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018c34:	602a      	str	r2, [r5, #0]
 8018c36:	612b      	str	r3, [r5, #16]
 8018c38:	edc5 6a07 	vstr	s13, [r5, #28]
 8018c3c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018c40:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018c44:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018c48:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018c50:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018c54:	3f01      	subs	r7, #1
 8018c56:	e757      	b.n	8018b08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8018c58:	4299      	cmp	r1, r3
 8018c5a:	dc13      	bgt.n	8018c84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8018c5c:	429a      	cmp	r2, r3
 8018c5e:	da14      	bge.n	8018c8a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8018c60:	2502      	movs	r5, #2
 8018c62:	2703      	movs	r7, #3
 8018c64:	f04f 0800 	mov.w	r8, #0
 8018c68:	46a9      	mov	r9, r5
 8018c6a:	f04f 0a01 	mov.w	sl, #1
 8018c6e:	e6ef      	b.n	8018a50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018c70:	2501      	movs	r5, #1
 8018c72:	2700      	movs	r7, #0
 8018c74:	46a9      	mov	r9, r5
 8018c76:	46b8      	mov	r8, r7
 8018c78:	f04f 0a02 	mov.w	sl, #2
 8018c7c:	e6e8      	b.n	8018a50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8018c7e:	2501      	movs	r5, #1
 8018c80:	2702      	movs	r7, #2
 8018c82:	e6e1      	b.n	8018a48 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8018c84:	2500      	movs	r5, #0
 8018c86:	2701      	movs	r7, #1
 8018c88:	e7f4      	b.n	8018c74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8018c8a:	2702      	movs	r7, #2
 8018c8c:	2503      	movs	r5, #3
 8018c8e:	f04f 0900 	mov.w	r9, #0
 8018c92:	46b8      	mov	r8, r7
 8018c94:	e7e9      	b.n	8018c6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8018c96:	4613      	mov	r3, r2
 8018c98:	e728      	b.n	8018aec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8018c9a:	bf00      	nop
 8018c9c:	2003bed8 	.word	0x2003bed8
 8018ca0:	fffd8f01 	.word	0xfffd8f01
 8018ca4:	00027100 	.word	0x00027100
 8018ca8:	0004e1ff 	.word	0x0004e1ff
 8018cac:	0004e1fe 	.word	0x0004e1fe
 8018cb0:	2003bee0 	.word	0x2003bee0
 8018cb4:	4613      	mov	r3, r2
 8018cb6:	992b      	ldr	r1, [sp, #172]	; 0xac
 8018cb8:	469e      	mov	lr, r3
 8018cba:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8018cbc:	469c      	mov	ip, r3
 8018cbe:	9111      	str	r1, [sp, #68]	; 0x44
 8018cc0:	f04f 0900 	mov.w	r9, #0
 8018cc4:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8018cc8:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8018ccc:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8018cd0:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8018cd4:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8018cd8:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8018cdc:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8018ce0:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8018ce4:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8018ce8:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8018cec:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8018cf0:	f1bc 0f00 	cmp.w	ip, #0
 8018cf4:	d147      	bne.n	8018d86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8018cf6:	eb03 0c07 	add.w	ip, r3, r7
 8018cfa:	1ad7      	subs	r7, r2, r3
 8018cfc:	f1b9 0f00 	cmp.w	r9, #0
 8018d00:	d009      	beq.n	8018d16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8018d02:	9029      	str	r0, [sp, #164]	; 0xa4
 8018d04:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8018d08:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8018d0c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8018d10:	912d      	str	r1, [sp, #180]	; 0xb4
 8018d12:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8018d16:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018d18:	f04f 0800 	mov.w	r8, #0
 8018d1c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018d20:	9111      	str	r1, [sp, #68]	; 0x44
 8018d22:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8018d26:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8018d2a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8018d2e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8018d32:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8018d36:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8018d3a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8018d3e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8018d42:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8018d46:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8018d4a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8018d4e:	f1be 0f00 	cmp.w	lr, #0
 8018d52:	d031      	beq.n	8018db8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8018d54:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018d56:	4450      	add	r0, sl
 8018d58:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8018d5c:	4431      	add	r1, r6
 8018d5e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8018d62:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8018d66:	4549      	cmp	r1, r9
 8018d68:	db08      	blt.n	8018d7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8018d6a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8018d6e:	3001      	adds	r0, #1
 8018d70:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8018d74:	eba1 0109 	sub.w	r1, r1, r9
 8018d78:	ee37 7a06 	vadd.f32	s14, s14, s12
 8018d7c:	f10e 3eff 	add.w	lr, lr, #4294967295
 8018d80:	f04f 0801 	mov.w	r8, #1
 8018d84:	e7e3      	b.n	8018d4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8018d86:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8018d88:	4450      	add	r0, sl
 8018d8a:	ee37 7a24 	vadd.f32	s14, s14, s9
 8018d8e:	4431      	add	r1, r6
 8018d90:	ee77 7a84 	vadd.f32	s15, s15, s8
 8018d94:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8018d98:	4541      	cmp	r1, r8
 8018d9a:	db08      	blt.n	8018dae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8018d9c:	ee76 6a85 	vadd.f32	s13, s13, s10
 8018da0:	3001      	adds	r0, #1
 8018da2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8018da6:	eba1 0108 	sub.w	r1, r1, r8
 8018daa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8018dae:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018db2:	f04f 0901 	mov.w	r9, #1
 8018db6:	e79b      	b.n	8018cf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8018db8:	449c      	add	ip, r3
 8018dba:	1aff      	subs	r7, r7, r3
 8018dbc:	f1b8 0f00 	cmp.w	r8, #0
 8018dc0:	d009      	beq.n	8018dd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8018dc2:	9019      	str	r0, [sp, #100]	; 0x64
 8018dc4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8018dc8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8018dcc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8018dd0:	911d      	str	r1, [sp, #116]	; 0x74
 8018dd2:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8018dd6:	1ad2      	subs	r2, r2, r3
 8018dd8:	e68b      	b.n	8018af2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8018dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018ddc:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8018dde:	2b00      	cmp	r3, #0
 8018de0:	f000 80d1 	beq.w	8018f86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8018de4:	ad19      	add	r5, sp, #100	; 0x64
 8018de6:	ac39      	add	r4, sp, #228	; 0xe4
 8018de8:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018dea:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8018dee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018df2:	930c      	str	r3, [sp, #48]	; 0x30
 8018df4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018df6:	6963      	ldr	r3, [r4, #20]
 8018df8:	440b      	add	r3, r1
 8018dfa:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8018dfe:	4408      	add	r0, r1
 8018e00:	b200      	sxth	r0, r0
 8018e02:	4283      	cmp	r3, r0
 8018e04:	900d      	str	r0, [sp, #52]	; 0x34
 8018e06:	f280 80c1 	bge.w	8018f8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8018e0a:	428b      	cmp	r3, r1
 8018e0c:	da08      	bge.n	8018e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018e0e:	2a00      	cmp	r2, #0
 8018e10:	dd06      	ble.n	8018e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8018e12:	1acb      	subs	r3, r1, r3
 8018e14:	429a      	cmp	r2, r3
 8018e16:	f2c0 80bb 	blt.w	8018f90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	f300 80b9 	bgt.w	8018f92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8018e20:	6967      	ldr	r7, [r4, #20]
 8018e22:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8018e26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018e28:	443b      	add	r3, r7
 8018e2a:	461f      	mov	r7, r3
 8018e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018e2e:	1bdf      	subs	r7, r3, r7
 8018e30:	4297      	cmp	r7, r2
 8018e32:	bfa8      	it	ge
 8018e34:	4617      	movge	r7, r2
 8018e36:	2f00      	cmp	r7, #0
 8018e38:	f340 813c 	ble.w	80190b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8018e3c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8018e3e:	6829      	ldr	r1, [r5, #0]
 8018e40:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018e44:	f9bb 3000 	ldrsh.w	r3, [fp]
 8018e48:	4411      	add	r1, r2
 8018e4a:	6820      	ldr	r0, [r4, #0]
 8018e4c:	4299      	cmp	r1, r3
 8018e4e:	dd1a      	ble.n	8018e86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018e50:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8018e54:	4402      	add	r2, r0
 8018e56:	440b      	add	r3, r1
 8018e58:	b21b      	sxth	r3, r3
 8018e5a:	429a      	cmp	r2, r3
 8018e5c:	dc13      	bgt.n	8018e86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8018e5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018e60:	a912      	add	r1, sp, #72	; 0x48
 8018e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	9206      	str	r2, [sp, #24]
 8018e6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018e6c:	9500      	str	r5, [sp, #0]
 8018e6e:	9205      	str	r2, [sp, #20]
 8018e70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018e72:	e9cd b203 	strd	fp, r2, [sp, #12]
 8018e76:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8018e78:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8018e7c:	aa49      	add	r2, sp, #292	; 0x124
 8018e7e:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8018e82:	4623      	mov	r3, r4
 8018e84:	47c8      	blx	r9
 8018e86:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8018e8a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8018e8e:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8018e92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018e96:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8018e9a:	68a1      	ldr	r1, [r4, #8]
 8018e9c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ea0:	ed94 6a08 	vldr	s12, [r4, #32]
 8018ea4:	edd4 6a07 	vldr	s13, [r4, #28]
 8018ea8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018eac:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018eb0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018eb4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8018eb8:	edc4 6a07 	vstr	s13, [r4, #28]
 8018ebc:	441a      	add	r2, r3
 8018ebe:	6963      	ldr	r3, [r4, #20]
 8018ec0:	3301      	adds	r3, #1
 8018ec2:	6022      	str	r2, [r4, #0]
 8018ec4:	6163      	str	r3, [r4, #20]
 8018ec6:	69a3      	ldr	r3, [r4, #24]
 8018ec8:	3b01      	subs	r3, #1
 8018eca:	61a3      	str	r3, [r4, #24]
 8018ecc:	6923      	ldr	r3, [r4, #16]
 8018ece:	440b      	add	r3, r1
 8018ed0:	68e1      	ldr	r1, [r4, #12]
 8018ed2:	428b      	cmp	r3, r1
 8018ed4:	6123      	str	r3, [r4, #16]
 8018ed6:	db15      	blt.n	8018f04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8018ed8:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8018edc:	3201      	adds	r2, #1
 8018ede:	1a5b      	subs	r3, r3, r1
 8018ee0:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018ee4:	6022      	str	r2, [r4, #0]
 8018ee6:	6123      	str	r3, [r4, #16]
 8018ee8:	edc4 6a07 	vstr	s13, [r4, #28]
 8018eec:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8018ef0:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018ef4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8018ef8:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8018efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f00:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8018f04:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8018f08:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8018f0c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8018f10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018f14:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8018f18:	68a9      	ldr	r1, [r5, #8]
 8018f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018f1e:	ed95 6a08 	vldr	s12, [r5, #32]
 8018f22:	edd5 6a07 	vldr	s13, [r5, #28]
 8018f26:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018f2a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8018f2e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018f32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8018f36:	edc5 6a07 	vstr	s13, [r5, #28]
 8018f3a:	441a      	add	r2, r3
 8018f3c:	696b      	ldr	r3, [r5, #20]
 8018f3e:	3301      	adds	r3, #1
 8018f40:	602a      	str	r2, [r5, #0]
 8018f42:	616b      	str	r3, [r5, #20]
 8018f44:	69ab      	ldr	r3, [r5, #24]
 8018f46:	3b01      	subs	r3, #1
 8018f48:	61ab      	str	r3, [r5, #24]
 8018f4a:	692b      	ldr	r3, [r5, #16]
 8018f4c:	440b      	add	r3, r1
 8018f4e:	68e9      	ldr	r1, [r5, #12]
 8018f50:	428b      	cmp	r3, r1
 8018f52:	612b      	str	r3, [r5, #16]
 8018f54:	db15      	blt.n	8018f82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8018f56:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8018f5a:	3201      	adds	r2, #1
 8018f5c:	1a5b      	subs	r3, r3, r1
 8018f5e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8018f62:	602a      	str	r2, [r5, #0]
 8018f64:	612b      	str	r3, [r5, #16]
 8018f66:	edc5 6a07 	vstr	s13, [r5, #28]
 8018f6a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8018f6e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8018f72:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8018f76:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8018f7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8018f7e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8018f82:	3f01      	subs	r7, #1
 8018f84:	e757      	b.n	8018e36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8018f86:	ad39      	add	r5, sp, #228	; 0xe4
 8018f88:	ac19      	add	r4, sp, #100	; 0x64
 8018f8a:	e72d      	b.n	8018de8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8018f8c:	4613      	mov	r3, r2
 8018f8e:	e744      	b.n	8018e1a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8018f90:	4613      	mov	r3, r2
 8018f92:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8018f94:	469e      	mov	lr, r3
 8018f96:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8018f9a:	461f      	mov	r7, r3
 8018f9c:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8018fa0:	f04f 0900 	mov.w	r9, #0
 8018fa4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8018fa8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8018fac:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8018fb0:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8018fb4:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8018fb8:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8018fba:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8018fbe:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8018fc2:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8018fc6:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8018fca:	960e      	str	r6, [sp, #56]	; 0x38
 8018fcc:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8018fd0:	2f00      	cmp	r7, #0
 8018fd2:	d146      	bne.n	8019062 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8018fd4:	449c      	add	ip, r3
 8018fd6:	1ad7      	subs	r7, r2, r3
 8018fd8:	f1b9 0f00 	cmp.w	r9, #0
 8018fdc:	d009      	beq.n	8018ff2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8018fde:	9039      	str	r0, [sp, #228]	; 0xe4
 8018fe0:	913d      	str	r1, [sp, #244]	; 0xf4
 8018fe2:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8018fe6:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8018fea:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8018fee:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8018ff2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8018ff4:	f04f 0800 	mov.w	r8, #0
 8018ff8:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8018ffc:	910e      	str	r1, [sp, #56]	; 0x38
 8018ffe:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019002:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019006:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 801900a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 801900e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019012:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019016:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 801901a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 801901e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019022:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019026:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 801902a:	f1be 0f00 	cmp.w	lr, #0
 801902e:	d030      	beq.n	8019092 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019030:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019032:	4450      	add	r0, sl
 8019034:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019038:	4431      	add	r1, r6
 801903a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801903e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019042:	4549      	cmp	r1, r9
 8019044:	db08      	blt.n	8019058 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019046:	ee77 7a85 	vadd.f32	s15, s15, s10
 801904a:	3001      	adds	r0, #1
 801904c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019050:	eba1 0109 	sub.w	r1, r1, r9
 8019054:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019058:	f10e 3eff 	add.w	lr, lr, #4294967295
 801905c:	f04f 0801 	mov.w	r8, #1
 8019060:	e7e3      	b.n	801902a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019062:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019064:	4450      	add	r0, sl
 8019066:	ee37 7a24 	vadd.f32	s14, s14, s9
 801906a:	4431      	add	r1, r6
 801906c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019070:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019074:	4541      	cmp	r1, r8
 8019076:	db08      	blt.n	801908a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019078:	ee76 6a85 	vadd.f32	s13, s13, s10
 801907c:	3001      	adds	r0, #1
 801907e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019082:	eba1 0108 	sub.w	r1, r1, r8
 8019086:	ee77 7a86 	vadd.f32	s15, s15, s12
 801908a:	3f01      	subs	r7, #1
 801908c:	f04f 0901 	mov.w	r9, #1
 8019090:	e79e      	b.n	8018fd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019092:	449c      	add	ip, r3
 8019094:	1aff      	subs	r7, r7, r3
 8019096:	f1b8 0f00 	cmp.w	r8, #0
 801909a:	d009      	beq.n	80190b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 801909c:	9019      	str	r0, [sp, #100]	; 0x64
 801909e:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80190a2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80190a6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80190aa:	911d      	str	r1, [sp, #116]	; 0x74
 80190ac:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80190b0:	1ad2      	subs	r2, r2, r3
 80190b2:	e6b5      	b.n	8018e20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80190b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	b923      	cbnz	r3, 80190c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80190ba:	4b04      	ldr	r3, [pc, #16]	; (80190cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80190bc:	6818      	ldr	r0, [r3, #0]
 80190be:	6803      	ldr	r3, [r0, #0]
 80190c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80190c2:	4798      	blx	r3
 80190c4:	b05b      	add	sp, #364	; 0x16c
 80190c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190ca:	bf00      	nop
 80190cc:	2003bee0 	.word	0x2003bee0

080190d0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 80190d0:	b570      	push	{r4, r5, r6, lr}
 80190d2:	4604      	mov	r4, r0
 80190d4:	2500      	movs	r5, #0
 80190d6:	9804      	ldr	r0, [sp, #16]
 80190d8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80190dc:	8025      	strh	r5, [r4, #0]
 80190de:	6061      	str	r1, [r4, #4]
 80190e0:	7223      	strb	r3, [r4, #8]
 80190e2:	7266      	strb	r6, [r4, #9]
 80190e4:	60e0      	str	r0, [r4, #12]
 80190e6:	8222      	strh	r2, [r4, #16]
 80190e8:	8265      	strh	r5, [r4, #18]
 80190ea:	82a5      	strh	r5, [r4, #20]
 80190ec:	82e5      	strh	r5, [r4, #22]
 80190ee:	8325      	strh	r5, [r4, #24]
 80190f0:	8365      	strh	r5, [r4, #26]
 80190f2:	83a5      	strh	r5, [r4, #28]
 80190f4:	77a5      	strb	r5, [r4, #30]
 80190f6:	b32e      	cbz	r6, 8019144 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 80190f8:	6803      	ldr	r3, [r0, #0]
 80190fa:	695b      	ldr	r3, [r3, #20]
 80190fc:	4798      	blx	r3
 80190fe:	4606      	mov	r6, r0
 8019100:	b300      	cbz	r0, 8019144 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019102:	68e0      	ldr	r0, [r4, #12]
 8019104:	4631      	mov	r1, r6
 8019106:	6803      	ldr	r3, [r0, #0]
 8019108:	68db      	ldr	r3, [r3, #12]
 801910a:	4798      	blx	r3
 801910c:	4605      	mov	r5, r0
 801910e:	b1c8      	cbz	r0, 8019144 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019110:	7b43      	ldrb	r3, [r0, #13]
 8019112:	7a82      	ldrb	r2, [r0, #10]
 8019114:	005b      	lsls	r3, r3, #1
 8019116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801911a:	4313      	orrs	r3, r2
 801911c:	83a3      	strh	r3, [r4, #28]
 801911e:	7a63      	ldrb	r3, [r4, #9]
 8019120:	2b04      	cmp	r3, #4
 8019122:	d10f      	bne.n	8019144 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 8019124:	68e0      	ldr	r0, [r4, #12]
 8019126:	462a      	mov	r2, r5
 8019128:	4631      	mov	r1, r6
 801912a:	6803      	ldr	r3, [r0, #0]
 801912c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801912e:	4798      	blx	r3
 8019130:	7b6b      	ldrb	r3, [r5, #13]
 8019132:	005b      	lsls	r3, r3, #1
 8019134:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8019138:	7aab      	ldrb	r3, [r5, #10]
 801913a:	4313      	orrs	r3, r2
 801913c:	4418      	add	r0, r3
 801913e:	8ba3      	ldrh	r3, [r4, #28]
 8019140:	4418      	add	r0, r3
 8019142:	83a0      	strh	r0, [r4, #28]
 8019144:	4620      	mov	r0, r4
 8019146:	bd70      	pop	{r4, r5, r6, pc}

08019148 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8019148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801914c:	2400      	movs	r4, #0
 801914e:	b085      	sub	sp, #20
 8019150:	4681      	mov	r9, r0
 8019152:	4688      	mov	r8, r1
 8019154:	4692      	mov	sl, r2
 8019156:	469b      	mov	fp, r3
 8019158:	4627      	mov	r7, r4
 801915a:	4625      	mov	r5, r4
 801915c:	4626      	mov	r6, r4
 801915e:	4554      	cmp	r4, sl
 8019160:	da2a      	bge.n	80191b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019162:	2300      	movs	r3, #0
 8019164:	9303      	str	r3, [sp, #12]
 8019166:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801916a:	429d      	cmp	r5, r3
 801916c:	d004      	beq.n	8019178 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801916e:	f242 030b 	movw	r3, #8203	; 0x200b
 8019172:	429d      	cmp	r5, r3
 8019174:	bf18      	it	ne
 8019176:	462f      	movne	r7, r5
 8019178:	ab03      	add	r3, sp, #12
 801917a:	4642      	mov	r2, r8
 801917c:	4659      	mov	r1, fp
 801917e:	4648      	mov	r0, r9
 8019180:	f002 ff84 	bl	801c08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019184:	4605      	mov	r5, r0
 8019186:	b1b8      	cbz	r0, 80191b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8019188:	280a      	cmp	r0, #10
 801918a:	d015      	beq.n	80191b8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801918c:	9a03      	ldr	r2, [sp, #12]
 801918e:	b18a      	cbz	r2, 80191b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8019190:	7b50      	ldrb	r0, [r2, #13]
 8019192:	4639      	mov	r1, r7
 8019194:	7a93      	ldrb	r3, [r2, #10]
 8019196:	0040      	lsls	r0, r0, #1
 8019198:	8895      	ldrh	r5, [r2, #4]
 801919a:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801919e:	4303      	orrs	r3, r0
 80191a0:	4640      	mov	r0, r8
 80191a2:	9301      	str	r3, [sp, #4]
 80191a4:	f8d8 3000 	ldr.w	r3, [r8]
 80191a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80191aa:	4798      	blx	r3
 80191ac:	9b01      	ldr	r3, [sp, #4]
 80191ae:	4418      	add	r0, r3
 80191b0:	4406      	add	r6, r0
 80191b2:	b2b6      	uxth	r6, r6
 80191b4:	3401      	adds	r4, #1
 80191b6:	e7d2      	b.n	801915e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 80191b8:	4630      	mov	r0, r6
 80191ba:	b005      	add	sp, #20
 80191bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080191c0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 80191c0:	2a02      	cmp	r2, #2
 80191c2:	b530      	push	{r4, r5, lr}
 80191c4:	d011      	beq.n	80191ea <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 80191c6:	2a03      	cmp	r2, #3
 80191c8:	d01c      	beq.n	8019204 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 80191ca:	2a01      	cmp	r2, #1
 80191cc:	d10c      	bne.n	80191e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 80191ce:	888b      	ldrh	r3, [r1, #4]
 80191d0:	8801      	ldrh	r1, [r0, #0]
 80191d2:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 80191d6:	1a5b      	subs	r3, r3, r1
 80191d8:	8844      	ldrh	r4, [r0, #2]
 80191da:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80191de:	1a9b      	subs	r3, r3, r2
 80191e0:	8004      	strh	r4, [r0, #0]
 80191e2:	8081      	strh	r1, [r0, #4]
 80191e4:	8043      	strh	r3, [r0, #2]
 80191e6:	80c2      	strh	r2, [r0, #6]
 80191e8:	bd30      	pop	{r4, r5, pc}
 80191ea:	88cb      	ldrh	r3, [r1, #6]
 80191ec:	8842      	ldrh	r2, [r0, #2]
 80191ee:	1a9b      	subs	r3, r3, r2
 80191f0:	88c2      	ldrh	r2, [r0, #6]
 80191f2:	1a9b      	subs	r3, r3, r2
 80191f4:	888a      	ldrh	r2, [r1, #4]
 80191f6:	8801      	ldrh	r1, [r0, #0]
 80191f8:	8043      	strh	r3, [r0, #2]
 80191fa:	1a52      	subs	r2, r2, r1
 80191fc:	8881      	ldrh	r1, [r0, #4]
 80191fe:	1a52      	subs	r2, r2, r1
 8019200:	8002      	strh	r2, [r0, #0]
 8019202:	e7f1      	b.n	80191e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8019204:	88cb      	ldrh	r3, [r1, #6]
 8019206:	8841      	ldrh	r1, [r0, #2]
 8019208:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801920c:	1a5b      	subs	r3, r3, r1
 801920e:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019212:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8019216:	1a9b      	subs	r3, r3, r2
 8019218:	8045      	strh	r5, [r0, #2]
 801921a:	8082      	strh	r2, [r0, #4]
 801921c:	8003      	strh	r3, [r0, #0]
 801921e:	80c4      	strh	r4, [r0, #6]
 8019220:	e7e2      	b.n	80191e8 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08019222 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8019222:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019226:	b09f      	sub	sp, #124	; 0x7c
 8019228:	9116      	str	r1, [sp, #88]	; 0x58
 801922a:	9317      	str	r3, [sp, #92]	; 0x5c
 801922c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801922e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8019230:	8809      	ldrh	r1, [r1, #0]
 8019232:	889b      	ldrh	r3, [r3, #4]
 8019234:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 8019238:	440b      	add	r3, r1
 801923a:	9212      	str	r2, [sp, #72]	; 0x48
 801923c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 8019240:	b21b      	sxth	r3, r3
 8019242:	9011      	str	r0, [sp, #68]	; 0x44
 8019244:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 8019248:	9310      	str	r3, [sp, #64]	; 0x40
 801924a:	f8d8 3000 	ldr.w	r3, [r8]
 801924e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 8019252:	7a59      	ldrb	r1, [r3, #9]
 8019254:	7a1b      	ldrb	r3, [r3, #8]
 8019256:	9114      	str	r1, [sp, #80]	; 0x50
 8019258:	9315      	str	r3, [sp, #84]	; 0x54
 801925a:	2a00      	cmp	r2, #0
 801925c:	d06a      	beq.n	8019334 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801925e:	f898 3010 	ldrb.w	r3, [r8, #16]
 8019262:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8019264:	2b04      	cmp	r3, #4
 8019266:	bf14      	ite	ne
 8019268:	2301      	movne	r3, #1
 801926a:	2302      	moveq	r3, #2
 801926c:	4413      	add	r3, r2
 801926e:	f04f 0900 	mov.w	r9, #0
 8019272:	930f      	str	r3, [sp, #60]	; 0x3c
 8019274:	464c      	mov	r4, r9
 8019276:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801927a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801927e:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8019282:	4293      	cmp	r3, r2
 8019284:	f280 808f 	bge.w	80193a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019288:	2300      	movs	r3, #0
 801928a:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801928e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8019292:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 8019296:	429c      	cmp	r4, r3
 8019298:	d006      	beq.n	80192a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801929a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801929c:	f242 020b 	movw	r2, #8203	; 0x200b
 80192a0:	4294      	cmp	r4, r2
 80192a2:	bf18      	it	ne
 80192a4:	4623      	movne	r3, r4
 80192a6:	930d      	str	r3, [sp, #52]	; 0x34
 80192a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80192aa:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80192ac:	f8d8 2000 	ldr.w	r2, [r8]
 80192b0:	428b      	cmp	r3, r1
 80192b2:	db41      	blt.n	8019338 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 80192b4:	6813      	ldr	r3, [r2, #0]
 80192b6:	4610      	mov	r0, r2
 80192b8:	695b      	ldr	r3, [r3, #20]
 80192ba:	4798      	blx	r3
 80192bc:	4604      	mov	r4, r0
 80192be:	f8d8 0000 	ldr.w	r0, [r8]
 80192c2:	aa1d      	add	r2, sp, #116	; 0x74
 80192c4:	4621      	mov	r1, r4
 80192c6:	6803      	ldr	r3, [r0, #0]
 80192c8:	689e      	ldr	r6, [r3, #8]
 80192ca:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 80192ce:	47b0      	blx	r6
 80192d0:	901c      	str	r0, [sp, #112]	; 0x70
 80192d2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80192d6:	429c      	cmp	r4, r3
 80192d8:	f000 80ea 	beq.w	80194b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80192dc:	f242 030b 	movw	r3, #8203	; 0x200b
 80192e0:	429c      	cmp	r4, r3
 80192e2:	f000 80e5 	beq.w	80194b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80192e6:	2c00      	cmp	r4, #0
 80192e8:	f000 80f7 	beq.w	80194da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80192ec:	2c0a      	cmp	r4, #10
 80192ee:	d060      	beq.n	80193b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80192f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80192f2:	b36a      	cbz	r2, 8019350 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 80192f4:	8894      	ldrh	r4, [r2, #4]
 80192f6:	f1bb 0f00 	cmp.w	fp, #0
 80192fa:	d03b      	beq.n	8019374 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 80192fc:	f892 900d 	ldrb.w	r9, [r2, #13]
 8019300:	f1bb 0f01 	cmp.w	fp, #1
 8019304:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8019308:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801930c:	f892 900a 	ldrb.w	r9, [r2, #10]
 8019310:	ea49 0903 	orr.w	r9, r9, r3
 8019314:	d134      	bne.n	8019380 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 8019316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019318:	eba5 0509 	sub.w	r5, r5, r9
 801931c:	2b00      	cmp	r3, #0
 801931e:	d14f      	bne.n	80193c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 8019320:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8019322:	eb09 0305 	add.w	r3, r9, r5
 8019326:	4413      	add	r3, r2
 8019328:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801932a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801932e:	4293      	cmp	r3, r2
 8019330:	da51      	bge.n	80193d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 8019332:	e038      	b.n	80193a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 8019334:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8019336:	e79a      	b.n	801926e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 8019338:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801933c:	4659      	mov	r1, fp
 801933e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8019340:	9301      	str	r3, [sp, #4]
 8019342:	ab1d      	add	r3, sp, #116	; 0x74
 8019344:	9300      	str	r3, [sp, #0]
 8019346:	ab1c      	add	r3, sp, #112	; 0x70
 8019348:	f002 fee9 	bl	801c11e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801934c:	4604      	mov	r4, r0
 801934e:	e7c0      	b.n	80192d2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8019350:	f8d8 0000 	ldr.w	r0, [r8]
 8019354:	6803      	ldr	r3, [r0, #0]
 8019356:	691b      	ldr	r3, [r3, #16]
 8019358:	4798      	blx	r3
 801935a:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801935e:	4298      	cmp	r0, r3
 8019360:	f000 80a6 	beq.w	80194b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019364:	f242 030b 	movw	r3, #8203	; 0x200b
 8019368:	4298      	cmp	r0, r3
 801936a:	f000 80a1 	beq.w	80194b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801936e:	f1bb 0f00 	cmp.w	fp, #0
 8019372:	d100      	bne.n	8019376 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 8019374:	444d      	add	r5, r9
 8019376:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8019378:	2a00      	cmp	r2, #0
 801937a:	d1bf      	bne.n	80192fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801937c:	4691      	mov	r9, r2
 801937e:	e097      	b.n	80194b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019380:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019382:	2b00      	cmp	r3, #0
 8019384:	f000 80ab 	beq.w	80194de <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 8019388:	f1bb 0f00 	cmp.w	fp, #0
 801938c:	d118      	bne.n	80193c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801938e:	f8d8 0000 	ldr.w	r0, [r8]
 8019392:	990d      	ldr	r1, [sp, #52]	; 0x34
 8019394:	6803      	ldr	r3, [r0, #0]
 8019396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019398:	4798      	blx	r3
 801939a:	4405      	add	r5, r0
 801939c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801939e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80193a0:	1aeb      	subs	r3, r5, r3
 80193a2:	4293      	cmp	r3, r2
 80193a4:	dd17      	ble.n	80193d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 80193a6:	2c00      	cmp	r4, #0
 80193a8:	f000 8097 	beq.w	80194da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80193ac:	2c0a      	cmp	r4, #10
 80193ae:	f040 8085 	bne.w	80194bc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 80193b2:	240a      	movs	r4, #10
 80193b4:	fab4 f084 	clz	r0, r4
 80193b8:	0940      	lsrs	r0, r0, #5
 80193ba:	b01f      	add	sp, #124	; 0x7c
 80193bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80193c0:	f8d8 0000 	ldr.w	r0, [r8]
 80193c4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80193c6:	6803      	ldr	r3, [r0, #0]
 80193c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80193ca:	4798      	blx	r3
 80193cc:	f1bb 0f01 	cmp.w	fp, #1
 80193d0:	eba5 0500 	sub.w	r5, r5, r0
 80193d4:	d0a4      	beq.n	8019320 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 80193d6:	981c      	ldr	r0, [sp, #112]	; 0x70
 80193d8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80193da:	f990 1009 	ldrsb.w	r1, [r0, #9]
 80193de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80193e2:	7b43      	ldrb	r3, [r0, #13]
 80193e4:	4429      	add	r1, r5
 80193e6:	015b      	lsls	r3, r3, #5
 80193e8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80193ec:	7983      	ldrb	r3, [r0, #6]
 80193ee:	4313      	orrs	r3, r2
 80193f0:	440b      	add	r3, r1
 80193f2:	42b3      	cmp	r3, r6
 80193f4:	db5c      	blt.n	80194b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80193f6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80193f8:	4299      	cmp	r1, r3
 80193fa:	da59      	bge.n	80194b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 80193fc:	f8d8 0000 	ldr.w	r0, [r8]
 8019400:	42ae      	cmp	r6, r5
 8019402:	6803      	ldr	r3, [r0, #0]
 8019404:	bfcc      	ite	gt
 8019406:	1b76      	subgt	r6, r6, r5
 8019408:	2600      	movle	r6, #0
 801940a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801940c:	bfc8      	it	gt
 801940e:	b2b6      	uxthgt	r6, r6
 8019410:	4798      	blx	r3
 8019412:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8019414:	7b5a      	ldrb	r2, [r3, #13]
 8019416:	00d1      	lsls	r1, r2, #3
 8019418:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801941c:	7a19      	ldrb	r1, [r3, #8]
 801941e:	4339      	orrs	r1, r7
 8019420:	0657      	lsls	r7, r2, #25
 8019422:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8019424:	bf48      	it	mi
 8019426:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801942a:	4407      	add	r7, r0
 801942c:	bf48      	it	mi
 801942e:	b209      	sxthmi	r1, r1
 8019430:	1a7f      	subs	r7, r7, r1
 8019432:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8019434:	b2bf      	uxth	r7, r7
 8019436:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801943a:	fa0f fa87 	sxth.w	sl, r7
 801943e:	4551      	cmp	r1, sl
 8019440:	dd3a      	ble.n	80194b8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 8019442:	0112      	lsls	r2, r2, #4
 8019444:	79d8      	ldrb	r0, [r3, #7]
 8019446:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801944a:	4302      	orrs	r2, r0
 801944c:	4492      	add	sl, r2
 801944e:	4551      	cmp	r1, sl
 8019450:	dc2e      	bgt.n	80194b0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 8019452:	1bcf      	subs	r7, r1, r7
 8019454:	468a      	mov	sl, r1
 8019456:	b2bf      	uxth	r7, r7
 8019458:	9319      	str	r3, [sp, #100]	; 0x64
 801945a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801945c:	f8d8 0000 	ldr.w	r0, [r8]
 8019460:	681a      	ldr	r2, [r3, #0]
 8019462:	6801      	ldr	r1, [r0, #0]
 8019464:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8019466:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8019468:	9313      	str	r3, [sp, #76]	; 0x4c
 801946a:	9218      	str	r2, [sp, #96]	; 0x60
 801946c:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801946e:	4788      	blx	r1
 8019470:	f898 1006 	ldrb.w	r1, [r8, #6]
 8019474:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8019476:	910b      	str	r1, [sp, #44]	; 0x2c
 8019478:	f898 100e 	ldrb.w	r1, [r8, #14]
 801947c:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801947e:	910a      	str	r1, [sp, #40]	; 0x28
 8019480:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 8019484:	9109      	str	r1, [sp, #36]	; 0x24
 8019486:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801948a:	9305      	str	r3, [sp, #20]
 801948c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801948e:	9206      	str	r2, [sp, #24]
 8019490:	e9cd a601 	strd	sl, r6, [sp, #4]
 8019494:	442e      	add	r6, r5
 8019496:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801949a:	b236      	sxth	r6, r6
 801949c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801949e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80194a2:	9600      	str	r6, [sp, #0]
 80194a4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80194a6:	681a      	ldr	r2, [r3, #0]
 80194a8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80194aa:	685b      	ldr	r3, [r3, #4]
 80194ac:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80194ae:	47b0      	blx	r6
 80194b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80194b2:	3301      	adds	r3, #1
 80194b4:	930e      	str	r3, [sp, #56]	; 0x38
 80194b6:	e6e2      	b.n	801927e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 80194b8:	2700      	movs	r7, #0
 80194ba:	e7cd      	b.n	8019458 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 80194bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80194be:	3501      	adds	r5, #1
 80194c0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80194c2:	429d      	cmp	r5, r3
 80194c4:	f6bf af76 	bge.w	80193b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80194c8:	4659      	mov	r1, fp
 80194ca:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80194cc:	f7f7 fcf8 	bl	8010ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80194d0:	4604      	mov	r4, r0
 80194d2:	b110      	cbz	r0, 80194da <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 80194d4:	280a      	cmp	r0, #10
 80194d6:	d1f2      	bne.n	80194be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 80194d8:	e76b      	b.n	80193b2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 80194da:	2400      	movs	r4, #0
 80194dc:	e76a      	b.n	80193b4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 80194de:	f1bb 0f00 	cmp.w	fp, #0
 80194e2:	f43f af5b 	beq.w	801939c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 80194e6:	e776      	b.n	80193d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

080194e8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80194e8:	b530      	push	{r4, r5, lr}
 80194ea:	8a44      	ldrh	r4, [r0, #18]
 80194ec:	8ac5      	ldrh	r5, [r0, #22]
 80194ee:	82c3      	strh	r3, [r0, #22]
 80194f0:	442c      	add	r4, r5
 80194f2:	1ae4      	subs	r4, r4, r3
 80194f4:	8b03      	ldrh	r3, [r0, #24]
 80194f6:	8244      	strh	r4, [r0, #18]
 80194f8:	8a84      	ldrh	r4, [r0, #20]
 80194fa:	4422      	add	r2, r4
 80194fc:	440c      	add	r4, r1
 80194fe:	1a59      	subs	r1, r3, r1
 8019500:	8342      	strh	r2, [r0, #26]
 8019502:	8284      	strh	r4, [r0, #20]
 8019504:	8301      	strh	r1, [r0, #24]
 8019506:	bd30      	pop	{r4, r5, pc}

08019508 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 8019508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801950c:	7a43      	ldrb	r3, [r0, #9]
 801950e:	b087      	sub	sp, #28
 8019510:	4604      	mov	r4, r0
 8019512:	460f      	mov	r7, r1
 8019514:	1eda      	subs	r2, r3, #3
 8019516:	b2d2      	uxtb	r2, r2
 8019518:	2900      	cmp	r1, #0
 801951a:	d036      	beq.n	801958a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801951c:	2a01      	cmp	r2, #1
 801951e:	d932      	bls.n	8019586 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 8019520:	1e58      	subs	r0, r3, #1
 8019522:	f1d0 0b00 	rsbs	fp, r0, #0
 8019526:	eb4b 0b00 	adc.w	fp, fp, r0
 801952a:	1e99      	subs	r1, r3, #2
 801952c:	424b      	negs	r3, r1
 801952e:	414b      	adcs	r3, r1
 8019530:	9303      	str	r3, [sp, #12]
 8019532:	2300      	movs	r3, #0
 8019534:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8019538:	2500      	movs	r5, #0
 801953a:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801953e:	46a9      	mov	r9, r5
 8019540:	8265      	strh	r5, [r4, #18]
 8019542:	82a5      	strh	r5, [r4, #20]
 8019544:	2300      	movs	r3, #0
 8019546:	9305      	str	r3, [sp, #20]
 8019548:	8823      	ldrh	r3, [r4, #0]
 801954a:	2b20      	cmp	r3, #32
 801954c:	d02b      	beq.n	80195a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801954e:	eba3 020a 	sub.w	r2, r3, sl
 8019552:	4256      	negs	r6, r2
 8019554:	4156      	adcs	r6, r2
 8019556:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801955a:	4293      	cmp	r3, r2
 801955c:	d004      	beq.n	8019568 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801955e:	4553      	cmp	r3, sl
 8019560:	bf16      	itet	ne
 8019562:	4699      	movne	r9, r3
 8019564:	2601      	moveq	r6, #1
 8019566:	2600      	movne	r6, #0
 8019568:	ab05      	add	r3, sp, #20
 801956a:	68e2      	ldr	r2, [r4, #12]
 801956c:	7a21      	ldrb	r1, [r4, #8]
 801956e:	6860      	ldr	r0, [r4, #4]
 8019570:	f002 fd8c 	bl	801c08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8019574:	8020      	strh	r0, [r4, #0]
 8019576:	b9c8      	cbnz	r0, 80195ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 8019578:	8b22      	ldrh	r2, [r4, #24]
 801957a:	2300      	movs	r3, #0
 801957c:	4611      	mov	r1, r2
 801957e:	4620      	mov	r0, r4
 8019580:	f7ff ffb2 	bl	80194e8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019584:	e066      	b.n	8019654 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019586:	468b      	mov	fp, r1
 8019588:	e7cf      	b.n	801952a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801958a:	3b01      	subs	r3, #1
 801958c:	2a01      	cmp	r2, #1
 801958e:	9103      	str	r1, [sp, #12]
 8019590:	468b      	mov	fp, r1
 8019592:	bf8c      	ite	hi
 8019594:	2200      	movhi	r2, #0
 8019596:	2201      	movls	r2, #1
 8019598:	2b01      	cmp	r3, #1
 801959a:	9202      	str	r2, [sp, #8]
 801959c:	bf8c      	ite	hi
 801959e:	2300      	movhi	r3, #0
 80195a0:	2301      	movls	r3, #1
 80195a2:	9301      	str	r3, [sp, #4]
 80195a4:	e7c8      	b.n	8019538 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 80195a6:	4699      	mov	r9, r3
 80195a8:	2601      	movs	r6, #1
 80195aa:	e7dd      	b.n	8019568 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 80195ac:	8ae3      	ldrh	r3, [r4, #22]
 80195ae:	280a      	cmp	r0, #10
 80195b0:	f103 0301 	add.w	r3, r3, #1
 80195b4:	82e3      	strh	r3, [r4, #22]
 80195b6:	d0df      	beq.n	8019578 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 80195b8:	9a05      	ldr	r2, [sp, #20]
 80195ba:	bb42      	cbnz	r2, 801960e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 80195bc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80195c0:	4298      	cmp	r0, r3
 80195c2:	d001      	beq.n	80195c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 80195c4:	4550      	cmp	r0, sl
 80195c6:	d1bd      	bne.n	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80195c8:	8823      	ldrh	r3, [r4, #0]
 80195ca:	8b21      	ldrh	r1, [r4, #24]
 80195cc:	2b20      	cmp	r3, #32
 80195ce:	d001      	beq.n	80195d4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 80195d0:	4553      	cmp	r3, sl
 80195d2:	d131      	bne.n	8019638 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 80195d4:	2e00      	cmp	r6, #0
 80195d6:	bf0a      	itet	eq
 80195d8:	460d      	moveq	r5, r1
 80195da:	4630      	movne	r0, r6
 80195dc:	2001      	moveq	r0, #1
 80195de:	440a      	add	r2, r1
 80195e0:	8aa3      	ldrh	r3, [r4, #20]
 80195e2:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80195e6:	b292      	uxth	r2, r2
 80195e8:	8322      	strh	r2, [r4, #24]
 80195ea:	4413      	add	r3, r2
 80195ec:	2f00      	cmp	r7, #0
 80195ee:	d03a      	beq.n	8019666 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 80195f0:	f1bb 0f00 	cmp.w	fp, #0
 80195f4:	d102      	bne.n	80195fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 80195f6:	9903      	ldr	r1, [sp, #12]
 80195f8:	b301      	cbz	r1, 801963c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80195fa:	b1f8      	cbz	r0, 801963c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 80195fc:	8ba1      	ldrh	r1, [r4, #28]
 80195fe:	4419      	add	r1, r3
 8019600:	458c      	cmp	ip, r1
 8019602:	da2a      	bge.n	801965a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019604:	8a61      	ldrh	r1, [r4, #18]
 8019606:	b341      	cbz	r1, 801965a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 8019608:	4563      	cmp	r3, ip
 801960a:	dd9b      	ble.n	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801960c:	e01c      	b.n	8019648 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801960e:	8893      	ldrh	r3, [r2, #4]
 8019610:	4649      	mov	r1, r9
 8019612:	8023      	strh	r3, [r4, #0]
 8019614:	f892 800d 	ldrb.w	r8, [r2, #13]
 8019618:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801961c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8019620:	f892 800a 	ldrb.w	r8, [r2, #10]
 8019624:	ea48 0800 	orr.w	r8, r8, r0
 8019628:	68e0      	ldr	r0, [r4, #12]
 801962a:	6803      	ldr	r3, [r0, #0]
 801962c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801962e:	4798      	blx	r3
 8019630:	eb08 0200 	add.w	r2, r8, r0
 8019634:	b292      	uxth	r2, r2
 8019636:	e7c7      	b.n	80195c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 8019638:	2000      	movs	r0, #0
 801963a:	e7d0      	b.n	80195de <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801963c:	4563      	cmp	r3, ip
 801963e:	dd81      	ble.n	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019640:	8a63      	ldrh	r3, [r4, #18]
 8019642:	2b00      	cmp	r3, #0
 8019644:	f43f af7e 	beq.w	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019648:	2301      	movs	r3, #1
 801964a:	8ba2      	ldrh	r2, [r4, #28]
 801964c:	77a3      	strb	r3, [r4, #30]
 801964e:	8b63      	ldrh	r3, [r4, #26]
 8019650:	4413      	add	r3, r2
 8019652:	8363      	strh	r3, [r4, #26]
 8019654:	b007      	add	sp, #28
 8019656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801965a:	2300      	movs	r3, #0
 801965c:	4611      	mov	r1, r2
 801965e:	4620      	mov	r0, r4
 8019660:	f7ff ff42 	bl	80194e8 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 8019664:	e76e      	b.n	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019666:	4563      	cmp	r3, ip
 8019668:	dd14      	ble.n	8019694 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801966a:	9b02      	ldr	r3, [sp, #8]
 801966c:	b113      	cbz	r3, 8019674 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801966e:	2301      	movs	r3, #1
 8019670:	460a      	mov	r2, r1
 8019672:	e783      	b.n	801957c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 8019674:	9b01      	ldr	r3, [sp, #4]
 8019676:	2b00      	cmp	r3, #0
 8019678:	f43f af64 	beq.w	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801967c:	2800      	cmp	r0, #0
 801967e:	f47f af61 	bne.w	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019682:	b116      	cbz	r6, 801968a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 8019684:	2301      	movs	r3, #1
 8019686:	462a      	mov	r2, r5
 8019688:	e779      	b.n	801957e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801968a:	8a63      	ldrh	r3, [r4, #18]
 801968c:	2b00      	cmp	r3, #0
 801968e:	f43f af59 	beq.w	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 8019692:	e7df      	b.n	8019654 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 8019694:	2800      	cmp	r0, #0
 8019696:	f47f af55 	bne.w	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801969a:	2e00      	cmp	r6, #0
 801969c:	f43f af52 	beq.w	8019544 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 80196a0:	2301      	movs	r3, #1
 80196a2:	462a      	mov	r2, r5
 80196a4:	e7db      	b.n	801965e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

080196a6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80196a6:	b530      	push	{r4, r5, lr}
 80196a8:	4605      	mov	r5, r0
 80196aa:	b08b      	sub	sp, #44	; 0x2c
 80196ac:	b191      	cbz	r1, 80196d4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 80196ae:	2401      	movs	r4, #1
 80196b0:	e9cd 3100 	strd	r3, r1, [sp]
 80196b4:	4613      	mov	r3, r2
 80196b6:	4601      	mov	r1, r0
 80196b8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80196bc:	a802      	add	r0, sp, #8
 80196be:	f7ff fd07 	bl	80190d0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80196c2:	2100      	movs	r1, #0
 80196c4:	a802      	add	r0, sp, #8
 80196c6:	f7ff ff1f 	bl	8019508 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 80196ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80196ce:	b163      	cbz	r3, 80196ea <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 80196d0:	3401      	adds	r4, #1
 80196d2:	e7f6      	b.n	80196c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 80196d4:	2401      	movs	r4, #1
 80196d6:	f002 fda5 	bl	801c224 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80196da:	280a      	cmp	r0, #10
 80196dc:	4628      	mov	r0, r5
 80196de:	bf08      	it	eq
 80196e0:	3401      	addeq	r4, #1
 80196e2:	f002 fd9f 	bl	801c224 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80196e6:	2800      	cmp	r0, #0
 80196e8:	d1f7      	bne.n	80196da <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 80196ea:	b2a0      	uxth	r0, r4
 80196ec:	b00b      	add	sp, #44	; 0x2c
 80196ee:	bd30      	pop	{r4, r5, pc}

080196f0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 80196f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80196f4:	b0e5      	sub	sp, #404	; 0x194
 80196f6:	4689      	mov	r9, r1
 80196f8:	461c      	mov	r4, r3
 80196fa:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 80196fe:	900a      	str	r0, [sp, #40]	; 0x28
 8019700:	f1ba 0f00 	cmp.w	sl, #0
 8019704:	f000 80b4 	beq.w	8019870 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019708:	681b      	ldr	r3, [r3, #0]
 801970a:	2b00      	cmp	r3, #0
 801970c:	f000 80b0 	beq.w	8019870 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019710:	7ba3      	ldrb	r3, [r4, #14]
 8019712:	2b00      	cmp	r3, #0
 8019714:	f000 80ac 	beq.w	8019870 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019718:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801971c:	6810      	ldr	r0, [r2, #0]
 801971e:	6851      	ldr	r1, [r2, #4]
 8019720:	2500      	movs	r5, #0
 8019722:	4643      	mov	r3, r8
 8019724:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 8019728:	950f      	str	r5, [sp, #60]	; 0x3c
 801972a:	af19      	add	r7, sp, #100	; 0x64
 801972c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8019730:	79a2      	ldrb	r2, [r4, #6]
 8019732:	c303      	stmia	r3!, {r0, r1}
 8019734:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 8019738:	a90f      	add	r1, sp, #60	; 0x3c
 801973a:	4640      	mov	r0, r8
 801973c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019740:	f7ff fd3e 	bl	80191c0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 8019744:	a90f      	add	r1, sp, #60	; 0x3c
 8019746:	79a2      	ldrb	r2, [r4, #6]
 8019748:	4608      	mov	r0, r1
 801974a:	f7ff fd39 	bl	80191c0 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801974e:	4638      	mov	r0, r7
 8019750:	f002 f93c 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 8019754:	6820      	ldr	r0, [r4, #0]
 8019756:	6803      	ldr	r3, [r0, #0]
 8019758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801975a:	4798      	blx	r3
 801975c:	4606      	mov	r6, r0
 801975e:	6820      	ldr	r0, [r4, #0]
 8019760:	6803      	ldr	r3, [r0, #0]
 8019762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019764:	4798      	blx	r3
 8019766:	4633      	mov	r3, r6
 8019768:	9000      	str	r0, [sp, #0]
 801976a:	4651      	mov	r1, sl
 801976c:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801976e:	4638      	mov	r0, r7
 8019770:	f002 f987 	bl	801ba82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8019774:	7923      	ldrb	r3, [r4, #4]
 8019776:	6820      	ldr	r0, [r4, #0]
 8019778:	9308      	str	r3, [sp, #32]
 801977a:	6803      	ldr	r3, [r0, #0]
 801977c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801977e:	4798      	blx	r3
 8019780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019784:	181e      	adds	r6, r3, r0
 8019786:	42ae      	cmp	r6, r5
 8019788:	dd06      	ble.n	8019798 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801978a:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801978e:	4282      	cmp	r2, r0
 8019790:	bfa4      	itt	ge
 8019792:	189d      	addge	r5, r3, r2
 8019794:	fb95 f5f6 	sdivge	r5, r5, r6
 8019798:	a832      	add	r0, sp, #200	; 0xc8
 801979a:	f002 f917 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 801979e:	7c23      	ldrb	r3, [r4, #16]
 80197a0:	b17b      	cbz	r3, 80197c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 80197a2:	6820      	ldr	r0, [r4, #0]
 80197a4:	6803      	ldr	r3, [r0, #0]
 80197a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80197a8:	4798      	blx	r3
 80197aa:	4683      	mov	fp, r0
 80197ac:	6820      	ldr	r0, [r4, #0]
 80197ae:	6803      	ldr	r3, [r0, #0]
 80197b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80197b2:	4798      	blx	r3
 80197b4:	465b      	mov	r3, fp
 80197b6:	9000      	str	r0, [sp, #0]
 80197b8:	4651      	mov	r1, sl
 80197ba:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 80197bc:	a832      	add	r0, sp, #200	; 0xc8
 80197be:	f002 f960 	bl	801ba82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80197c2:	7be1      	ldrb	r1, [r4, #15]
 80197c4:	a811      	add	r0, sp, #68	; 0x44
 80197c6:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 80197ca:	7963      	ldrb	r3, [r4, #5]
 80197cc:	1a52      	subs	r2, r2, r1
 80197ce:	7c21      	ldrb	r1, [r4, #16]
 80197d0:	9101      	str	r1, [sp, #4]
 80197d2:	b292      	uxth	r2, r2
 80197d4:	6821      	ldr	r1, [r4, #0]
 80197d6:	9100      	str	r1, [sp, #0]
 80197d8:	a932      	add	r1, sp, #200	; 0xc8
 80197da:	f7ff fc79 	bl	80190d0 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 80197de:	7c23      	ldrb	r3, [r4, #16]
 80197e0:	b9bb      	cbnz	r3, 8019812 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 80197e2:	fa1f fa86 	uxth.w	sl, r6
 80197e6:	2d00      	cmp	r5, #0
 80197e8:	dd45      	ble.n	8019876 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 80197ea:	4638      	mov	r0, r7
 80197ec:	f002 fd1a 	bl	801c224 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80197f0:	2800      	cmp	r0, #0
 80197f2:	d03d      	beq.n	8019870 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80197f4:	280a      	cmp	r0, #10
 80197f6:	d1f6      	bne.n	80197e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 80197f8:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 80197fc:	3d01      	subs	r5, #1
 80197fe:	4453      	add	r3, sl
 8019800:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019804:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8019808:	eba3 030a 	sub.w	r3, r3, sl
 801980c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019810:	e7e9      	b.n	80197e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 8019812:	0073      	lsls	r3, r6, #1
 8019814:	f64f 7bff 	movw	fp, #65535	; 0xffff
 8019818:	fa1f fa86 	uxth.w	sl, r6
 801981c:	9309      	str	r3, [sp, #36]	; 0x24
 801981e:	2d00      	cmp	r5, #0
 8019820:	dd29      	ble.n	8019876 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 8019822:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019826:	a811      	add	r0, sp, #68	; 0x44
 8019828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801982a:	428b      	cmp	r3, r1
 801982c:	bfd4      	ite	le
 801982e:	2100      	movle	r1, #0
 8019830:	2101      	movgt	r1, #1
 8019832:	f7ff fe69 	bl	8019508 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019836:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801983a:	3b01      	subs	r3, #1
 801983c:	b29b      	uxth	r3, r3
 801983e:	455b      	cmp	r3, fp
 8019840:	930b      	str	r3, [sp, #44]	; 0x2c
 8019842:	d005      	beq.n	8019850 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 8019844:	7961      	ldrb	r1, [r4, #5]
 8019846:	4638      	mov	r0, r7
 8019848:	f7f7 fb3a 	bl	8010ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801984c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801984e:	e7f4      	b.n	801983a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 8019850:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019854:	3d01      	subs	r5, #1
 8019856:	4453      	add	r3, sl
 8019858:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801985c:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 8019860:	eba3 030a 	sub.w	r3, r3, sl
 8019864:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8019868:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801986c:	2b00      	cmp	r3, #0
 801986e:	d1d6      	bne.n	801981e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 8019870:	b065      	add	sp, #404	; 0x194
 8019872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019876:	0075      	lsls	r5, r6, #1
 8019878:	f04f 0a00 	mov.w	sl, #0
 801987c:	7c23      	ldrb	r3, [r4, #16]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d066      	beq.n	8019950 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 8019882:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 8019886:	a811      	add	r0, sp, #68	; 0x44
 8019888:	428d      	cmp	r5, r1
 801988a:	bfd4      	ite	le
 801988c:	2100      	movle	r1, #0
 801988e:	2101      	movgt	r1, #1
 8019890:	f7ff fe3a 	bl	8019508 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 8019894:	9b08      	ldr	r3, [sp, #32]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d055      	beq.n	8019946 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801989a:	f894 b010 	ldrb.w	fp, [r4, #16]
 801989e:	2264      	movs	r2, #100	; 0x64
 80198a0:	4639      	mov	r1, r7
 80198a2:	a84b      	add	r0, sp, #300	; 0x12c
 80198a4:	f00f faae 	bl	8028e04 <memcpy>
 80198a8:	f1bb 0f00 	cmp.w	fp, #0
 80198ac:	d058      	beq.n	8019960 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 80198ae:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80198b2:	7922      	ldrb	r2, [r4, #4]
 80198b4:	2a01      	cmp	r2, #1
 80198b6:	d13c      	bne.n	8019932 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 80198b8:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 80198bc:	1ac0      	subs	r0, r0, r3
 80198be:	2302      	movs	r3, #2
 80198c0:	fb90 f0f3 	sdiv	r0, r0, r3
 80198c4:	b200      	sxth	r0, r0
 80198c6:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 80198ca:	4418      	add	r0, r3
 80198cc:	7c23      	ldrb	r3, [r4, #16]
 80198ce:	b200      	sxth	r0, r0
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d03a      	beq.n	801994a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 80198d4:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 80198d8:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 80198dc:	9000      	str	r0, [sp, #0]
 80198de:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 80198e2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80198e4:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80198e8:	e9cd a703 	strd	sl, r7, [sp, #12]
 80198ec:	e9cd 8401 	strd	r8, r4, [sp, #4]
 80198f0:	464a      	mov	r2, r9
 80198f2:	2100      	movs	r1, #0
 80198f4:	f7ff fc95 	bl	8019222 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80198f8:	2800      	cmp	r0, #0
 80198fa:	d1b9      	bne.n	8019870 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 80198fc:	b2b2      	uxth	r2, r6
 80198fe:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 8019902:	4611      	mov	r1, r2
 8019904:	4413      	add	r3, r2
 8019906:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801990a:	b21b      	sxth	r3, r3
 801990c:	1a52      	subs	r2, r2, r1
 801990e:	7c21      	ldrb	r1, [r4, #16]
 8019910:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 8019914:	b212      	sxth	r2, r2
 8019916:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801991a:	b109      	cbz	r1, 8019920 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801991c:	42b2      	cmp	r2, r6
 801991e:	dba7      	blt.n	8019870 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019920:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 8019924:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 8019928:	440a      	add	r2, r1
 801992a:	b212      	sxth	r2, r2
 801992c:	4293      	cmp	r3, r2
 801992e:	dda5      	ble.n	801987c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 8019930:	e79e      	b.n	8019870 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 8019932:	2a02      	cmp	r2, #2
 8019934:	d105      	bne.n	8019942 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 8019936:	7be2      	ldrb	r2, [r4, #15]
 8019938:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801993c:	1a80      	subs	r0, r0, r2
 801993e:	1ac0      	subs	r0, r0, r3
 8019940:	e7c0      	b.n	80198c4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 8019942:	2000      	movs	r0, #0
 8019944:	e7bf      	b.n	80198c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 8019946:	7be0      	ldrb	r0, [r4, #15]
 8019948:	e7bd      	b.n	80198c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801994a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801994e:	e7c3      	b.n	80198d8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 8019950:	9b08      	ldr	r3, [sp, #32]
 8019952:	2b00      	cmp	r3, #0
 8019954:	d0f7      	beq.n	8019946 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8019956:	2264      	movs	r2, #100	; 0x64
 8019958:	4639      	mov	r1, r7
 801995a:	a84b      	add	r0, sp, #300	; 0x12c
 801995c:	f00f fa52 	bl	8028e04 <memcpy>
 8019960:	2300      	movs	r3, #0
 8019962:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019966:	6821      	ldr	r1, [r4, #0]
 8019968:	a84b      	add	r0, sp, #300	; 0x12c
 801996a:	f7ff fbed 	bl	8019148 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801996e:	b203      	sxth	r3, r0
 8019970:	e79f      	b.n	80198b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

08019972 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8019972:	2b03      	cmp	r3, #3
 8019974:	d818      	bhi.n	80199a8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8019976:	e8df f003 	tbb	[pc, r3]
 801997a:	0602      	.short	0x0602
 801997c:	130d      	.short	0x130d
 801997e:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019982:	1850      	adds	r0, r2, r1
 8019984:	4770      	bx	lr
 8019986:	8803      	ldrh	r3, [r0, #0]
 8019988:	8880      	ldrh	r0, [r0, #4]
 801998a:	4418      	add	r0, r3
 801998c:	b200      	sxth	r0, r0
 801998e:	1a80      	subs	r0, r0, r2
 8019990:	3801      	subs	r0, #1
 8019992:	4770      	bx	lr
 8019994:	8803      	ldrh	r3, [r0, #0]
 8019996:	8880      	ldrh	r0, [r0, #4]
 8019998:	4418      	add	r0, r3
 801999a:	b200      	sxth	r0, r0
 801999c:	1a40      	subs	r0, r0, r1
 801999e:	e7f7      	b.n	8019990 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 80199a0:	f9b0 0000 	ldrsh.w	r0, [r0]
 80199a4:	4410      	add	r0, r2
 80199a6:	4770      	bx	lr
 80199a8:	2000      	movs	r0, #0
 80199aa:	4770      	bx	lr

080199ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 80199ac:	2b03      	cmp	r3, #3
 80199ae:	d817      	bhi.n	80199e0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 80199b0:	e8df f003 	tbb	[pc, r3]
 80199b4:	10090602 	.word	0x10090602
 80199b8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80199bc:	1850      	adds	r0, r2, r1
 80199be:	4770      	bx	lr
 80199c0:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80199c4:	e7fa      	b.n	80199bc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 80199c6:	8843      	ldrh	r3, [r0, #2]
 80199c8:	88c0      	ldrh	r0, [r0, #6]
 80199ca:	4418      	add	r0, r3
 80199cc:	b200      	sxth	r0, r0
 80199ce:	1a80      	subs	r0, r0, r2
 80199d0:	3801      	subs	r0, #1
 80199d2:	4770      	bx	lr
 80199d4:	8843      	ldrh	r3, [r0, #2]
 80199d6:	88c0      	ldrh	r0, [r0, #6]
 80199d8:	4418      	add	r0, r3
 80199da:	b200      	sxth	r0, r0
 80199dc:	1a40      	subs	r0, r0, r1
 80199de:	e7f7      	b.n	80199d0 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 80199e0:	2000      	movs	r0, #0
 80199e2:	4770      	bx	lr

080199e4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 80199e4:	4b01      	ldr	r3, [pc, #4]	; (80199ec <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 80199e6:	2200      	movs	r2, #0
 80199e8:	601a      	str	r2, [r3, #0]
 80199ea:	4770      	bx	lr
 80199ec:	2003bef0 	.word	0x2003bef0

080199f0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 80199f0:	4603      	mov	r3, r0
 80199f2:	b1c8      	cbz	r0, 8019a28 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 80199f4:	0c02      	lsrs	r2, r0, #16
 80199f6:	0412      	lsls	r2, r2, #16
 80199f8:	b9a2      	cbnz	r2, 8019a24 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 80199fa:	0403      	lsls	r3, r0, #16
 80199fc:	2010      	movs	r0, #16
 80199fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8019a02:	bf04      	itt	eq
 8019a04:	021b      	lsleq	r3, r3, #8
 8019a06:	3008      	addeq	r0, #8
 8019a08:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8019a0c:	bf04      	itt	eq
 8019a0e:	011b      	lsleq	r3, r3, #4
 8019a10:	3004      	addeq	r0, #4
 8019a12:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8019a16:	bf04      	itt	eq
 8019a18:	009b      	lsleq	r3, r3, #2
 8019a1a:	3002      	addeq	r0, #2
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	db04      	blt.n	8019a2a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8019a20:	3001      	adds	r0, #1
 8019a22:	4770      	bx	lr
 8019a24:	2000      	movs	r0, #0
 8019a26:	e7ea      	b.n	80199fe <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8019a28:	2020      	movs	r0, #32
 8019a2a:	4770      	bx	lr

08019a2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8019a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a30:	b087      	sub	sp, #28
 8019a32:	4681      	mov	r9, r0
 8019a34:	4698      	mov	r8, r3
 8019a36:	4610      	mov	r0, r2
 8019a38:	460d      	mov	r5, r1
 8019a3a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 8019a3e:	b981      	cbnz	r1, 8019a62 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 8019a40:	b14b      	cbz	r3, 8019a56 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 8019a42:	460b      	mov	r3, r1
 8019a44:	464a      	mov	r2, r9
 8019a46:	4641      	mov	r1, r8
 8019a48:	e9cd 4700 	strd	r4, r7, [sp]
 8019a4c:	f7ff ffee 	bl	8019a2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019a50:	b007      	add	sp, #28
 8019a52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a56:	f04f 33ff 	mov.w	r3, #4294967295
 8019a5a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8019a5e:	603b      	str	r3, [r7, #0]
 8019a60:	e7f6      	b.n	8019a50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019a62:	fa32 fa01 	lsrs.w	sl, r2, r1
 8019a66:	d107      	bne.n	8019a78 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 8019a68:	fb09 f602 	mul.w	r6, r9, r2
 8019a6c:	fbb6 f0f4 	udiv	r0, r6, r4
 8019a70:	fb04 6610 	mls	r6, r4, r0, r6
 8019a74:	603e      	str	r6, [r7, #0]
 8019a76:	e7eb      	b.n	8019a50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 8019a78:	2601      	movs	r6, #1
 8019a7a:	fa09 fb01 	lsl.w	fp, r9, r1
 8019a7e:	408e      	lsls	r6, r1
 8019a80:	fbbb f3f4 	udiv	r3, fp, r4
 8019a84:	3e01      	subs	r6, #1
 8019a86:	9302      	str	r3, [sp, #8]
 8019a88:	fb0a f303 	mul.w	r3, sl, r3
 8019a8c:	4016      	ands	r6, r2
 8019a8e:	9303      	str	r3, [sp, #12]
 8019a90:	4630      	mov	r0, r6
 8019a92:	f7ff ffad 	bl	80199f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019a96:	464a      	mov	r2, r9
 8019a98:	460b      	mov	r3, r1
 8019a9a:	4601      	mov	r1, r0
 8019a9c:	4630      	mov	r0, r6
 8019a9e:	e9cd 4700 	strd	r4, r7, [sp]
 8019aa2:	f7ff ffc3 	bl	8019a2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019aa6:	9b02      	ldr	r3, [sp, #8]
 8019aa8:	4606      	mov	r6, r0
 8019aaa:	eb05 0108 	add.w	r1, r5, r8
 8019aae:	fb04 bb13 	mls	fp, r4, r3, fp
 8019ab2:	4658      	mov	r0, fp
 8019ab4:	f7ff ff9c 	bl	80199f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019ab8:	ab05      	add	r3, sp, #20
 8019aba:	465a      	mov	r2, fp
 8019abc:	e9cd 4300 	strd	r4, r3, [sp]
 8019ac0:	4603      	mov	r3, r0
 8019ac2:	4650      	mov	r0, sl
 8019ac4:	f7ff ffb2 	bl	8019a2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019ac8:	6839      	ldr	r1, [r7, #0]
 8019aca:	9a05      	ldr	r2, [sp, #20]
 8019acc:	9b03      	ldr	r3, [sp, #12]
 8019ace:	4411      	add	r1, r2
 8019ad0:	fbb1 f2f4 	udiv	r2, r1, r4
 8019ad4:	18d3      	adds	r3, r2, r3
 8019ad6:	fb04 1412 	mls	r4, r4, r2, r1
 8019ada:	441e      	add	r6, r3
 8019adc:	603c      	str	r4, [r7, #0]
 8019ade:	4430      	add	r0, r6
 8019ae0:	e7b6      	b.n	8019a50 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

08019ae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8019ae2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ae6:	b085      	sub	sp, #20
 8019ae8:	f1b0 0900 	subs.w	r9, r0, #0
 8019aec:	461d      	mov	r5, r3
 8019aee:	4617      	mov	r7, r2
 8019af0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019af2:	bfbb      	ittet	lt
 8019af4:	f1c9 0900 	rsblt	r9, r9, #0
 8019af8:	f04f 36ff 	movlt.w	r6, #4294967295
 8019afc:	2601      	movge	r6, #1
 8019afe:	6823      	ldrlt	r3, [r4, #0]
 8019b00:	bfbc      	itt	lt
 8019b02:	425b      	neglt	r3, r3
 8019b04:	6023      	strlt	r3, [r4, #0]
 8019b06:	2a00      	cmp	r2, #0
 8019b08:	da04      	bge.n	8019b14 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8019b0a:	6823      	ldr	r3, [r4, #0]
 8019b0c:	4257      	negs	r7, r2
 8019b0e:	4276      	negs	r6, r6
 8019b10:	425b      	negs	r3, r3
 8019b12:	6023      	str	r3, [r4, #0]
 8019b14:	2d00      	cmp	r5, #0
 8019b16:	4638      	mov	r0, r7
 8019b18:	bfba      	itte	lt
 8019b1a:	426d      	neglt	r5, r5
 8019b1c:	f04f 38ff 	movlt.w	r8, #4294967295
 8019b20:	f04f 0801 	movge.w	r8, #1
 8019b24:	f7ff ff64 	bl	80199f0 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8019b28:	ab03      	add	r3, sp, #12
 8019b2a:	463a      	mov	r2, r7
 8019b2c:	e9cd 5300 	strd	r5, r3, [sp]
 8019b30:	4603      	mov	r3, r0
 8019b32:	4648      	mov	r0, r9
 8019b34:	f7ff ff7a 	bl	8019a2c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8019b38:	6823      	ldr	r3, [r4, #0]
 8019b3a:	9a03      	ldr	r2, [sp, #12]
 8019b3c:	4546      	cmp	r6, r8
 8019b3e:	441a      	add	r2, r3
 8019b40:	fb92 f3f5 	sdiv	r3, r2, r5
 8019b44:	4418      	add	r0, r3
 8019b46:	fb05 2313 	mls	r3, r5, r3, r2
 8019b4a:	bf18      	it	ne
 8019b4c:	4240      	negne	r0, r0
 8019b4e:	1c72      	adds	r2, r6, #1
 8019b50:	6023      	str	r3, [r4, #0]
 8019b52:	d105      	bne.n	8019b60 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	f1c3 0200 	rsb	r2, r3, #0
 8019b5a:	db0b      	blt.n	8019b74 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8019b5c:	6022      	str	r2, [r4, #0]
 8019b5e:	e006      	b.n	8019b6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019b60:	2e01      	cmp	r6, #1
 8019b62:	d104      	bne.n	8019b6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019b64:	2b00      	cmp	r3, #0
 8019b66:	da02      	bge.n	8019b6e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8019b68:	442b      	add	r3, r5
 8019b6a:	3801      	subs	r0, #1
 8019b6c:	6023      	str	r3, [r4, #0]
 8019b6e:	b005      	add	sp, #20
 8019b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019b74:	3801      	subs	r0, #1
 8019b76:	1b52      	subs	r2, r2, r5
 8019b78:	e7f0      	b.n	8019b5c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

08019b7c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8019b7c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8019b80:	4c1c      	ldr	r4, [pc, #112]	; (8019bf4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8019b82:	4605      	mov	r5, r0
 8019b84:	6807      	ldr	r7, [r0, #0]
 8019b86:	69a3      	ldr	r3, [r4, #24]
 8019b88:	b92b      	cbnz	r3, 8019b96 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8019b8a:	6840      	ldr	r0, [r0, #4]
 8019b8c:	e9c5 7000 	strd	r7, r0, [r5]
 8019b90:	b004      	add	sp, #16
 8019b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019b96:	f04f 0802 	mov.w	r8, #2
 8019b9a:	68a2      	ldr	r2, [r4, #8]
 8019b9c:	ae04      	add	r6, sp, #16
 8019b9e:	6820      	ldr	r0, [r4, #0]
 8019ba0:	fb93 f1f8 	sdiv	r1, r3, r8
 8019ba4:	440a      	add	r2, r1
 8019ba6:	69e1      	ldr	r1, [r4, #28]
 8019ba8:	f846 2d04 	str.w	r2, [r6, #-4]!
 8019bac:	463a      	mov	r2, r7
 8019bae:	9600      	str	r6, [sp, #0]
 8019bb0:	f7ff ff97 	bl	8019ae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019bb4:	69a3      	ldr	r3, [r4, #24]
 8019bb6:	4607      	mov	r7, r0
 8019bb8:	686a      	ldr	r2, [r5, #4]
 8019bba:	6a21      	ldr	r1, [r4, #32]
 8019bbc:	9600      	str	r6, [sp, #0]
 8019bbe:	6860      	ldr	r0, [r4, #4]
 8019bc0:	f7ff ff8f 	bl	8019ae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019bc4:	69a3      	ldr	r3, [r4, #24]
 8019bc6:	6962      	ldr	r2, [r4, #20]
 8019bc8:	4407      	add	r7, r0
 8019bca:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019bcc:	9600      	str	r6, [sp, #0]
 8019bce:	68e0      	ldr	r0, [r4, #12]
 8019bd0:	fb93 f8f8 	sdiv	r8, r3, r8
 8019bd4:	4442      	add	r2, r8
 8019bd6:	9203      	str	r2, [sp, #12]
 8019bd8:	682a      	ldr	r2, [r5, #0]
 8019bda:	f7ff ff82 	bl	8019ae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019bde:	4680      	mov	r8, r0
 8019be0:	9600      	str	r6, [sp, #0]
 8019be2:	69a3      	ldr	r3, [r4, #24]
 8019be4:	686a      	ldr	r2, [r5, #4]
 8019be6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8019be8:	6920      	ldr	r0, [r4, #16]
 8019bea:	f7ff ff7a 	bl	8019ae2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8019bee:	4440      	add	r0, r8
 8019bf0:	e7cc      	b.n	8019b8c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8019bf2:	bf00      	nop
 8019bf4:	2003bef4 	.word	0x2003bef4

08019bf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8019bf8:	4b07      	ldr	r3, [pc, #28]	; (8019c18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8019bfa:	781b      	ldrb	r3, [r3, #0]
 8019bfc:	2b01      	cmp	r3, #1
 8019bfe:	d109      	bne.n	8019c14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8019c00:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019c04:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019c08:	8003      	strh	r3, [r0, #0]
 8019c0a:	4b04      	ldr	r3, [pc, #16]	; (8019c1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8019c0c:	881b      	ldrh	r3, [r3, #0]
 8019c0e:	3b01      	subs	r3, #1
 8019c10:	1a9b      	subs	r3, r3, r2
 8019c12:	800b      	strh	r3, [r1, #0]
 8019c14:	4770      	bx	lr
 8019c16:	bf00      	nop
 8019c18:	2003bed8 	.word	0x2003bed8
 8019c1c:	2003bed4 	.word	0x2003bed4

08019c20 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8019c20:	4b07      	ldr	r3, [pc, #28]	; (8019c40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8019c22:	b510      	push	{r4, lr}
 8019c24:	781b      	ldrb	r3, [r3, #0]
 8019c26:	2b01      	cmp	r3, #1
 8019c28:	d108      	bne.n	8019c3c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8019c2a:	4b06      	ldr	r3, [pc, #24]	; (8019c44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8019c2c:	880c      	ldrh	r4, [r1, #0]
 8019c2e:	881b      	ldrh	r3, [r3, #0]
 8019c30:	f9b0 2000 	ldrsh.w	r2, [r0]
 8019c34:	3b01      	subs	r3, #1
 8019c36:	1b1b      	subs	r3, r3, r4
 8019c38:	8003      	strh	r3, [r0, #0]
 8019c3a:	800a      	strh	r2, [r1, #0]
 8019c3c:	bd10      	pop	{r4, pc}
 8019c3e:	bf00      	nop
 8019c40:	2003bed8 	.word	0x2003bed8
 8019c44:	2003bed4 	.word	0x2003bed4

08019c48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8019c48:	4b0a      	ldr	r3, [pc, #40]	; (8019c74 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8019c4a:	b510      	push	{r4, lr}
 8019c4c:	781b      	ldrb	r3, [r3, #0]
 8019c4e:	2b01      	cmp	r3, #1
 8019c50:	d10e      	bne.n	8019c70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8019c52:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8019c56:	8843      	ldrh	r3, [r0, #2]
 8019c58:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019c5c:	18ca      	adds	r2, r1, r3
 8019c5e:	4b06      	ldr	r3, [pc, #24]	; (8019c78 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8019c60:	8044      	strh	r4, [r0, #2]
 8019c62:	881b      	ldrh	r3, [r3, #0]
 8019c64:	1a9b      	subs	r3, r3, r2
 8019c66:	8003      	strh	r3, [r0, #0]
 8019c68:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019c6c:	8081      	strh	r1, [r0, #4]
 8019c6e:	80c3      	strh	r3, [r0, #6]
 8019c70:	bd10      	pop	{r4, pc}
 8019c72:	bf00      	nop
 8019c74:	2003bed8 	.word	0x2003bed8
 8019c78:	2003bed4 	.word	0x2003bed4

08019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8019c7c:	4b08      	ldr	r3, [pc, #32]	; (8019ca0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8019c7e:	781b      	ldrb	r3, [r3, #0]
 8019c80:	2b01      	cmp	r3, #1
 8019c82:	d10c      	bne.n	8019c9e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8019c84:	8803      	ldrh	r3, [r0, #0]
 8019c86:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8019c8a:	8842      	ldrh	r2, [r0, #2]
 8019c8c:	8002      	strh	r2, [r0, #0]
 8019c8e:	185a      	adds	r2, r3, r1
 8019c90:	4b04      	ldr	r3, [pc, #16]	; (8019ca4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8019c92:	881b      	ldrh	r3, [r3, #0]
 8019c94:	1a9b      	subs	r3, r3, r2
 8019c96:	8043      	strh	r3, [r0, #2]
 8019c98:	88c3      	ldrh	r3, [r0, #6]
 8019c9a:	80c1      	strh	r1, [r0, #6]
 8019c9c:	8083      	strh	r3, [r0, #4]
 8019c9e:	4770      	bx	lr
 8019ca0:	2003bed8 	.word	0x2003bed8
 8019ca4:	2003bed4 	.word	0x2003bed4

08019ca8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8019ca8:	4b07      	ldr	r3, [pc, #28]	; (8019cc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8019caa:	b510      	push	{r4, lr}
 8019cac:	781b      	ldrb	r3, [r3, #0]
 8019cae:	2b01      	cmp	r3, #1
 8019cb0:	d108      	bne.n	8019cc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8019cb2:	f9b1 3000 	ldrsh.w	r3, [r1]
 8019cb6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019cba:	8003      	strh	r3, [r0, #0]
 8019cbc:	8893      	ldrh	r3, [r2, #4]
 8019cbe:	3b01      	subs	r3, #1
 8019cc0:	1b1b      	subs	r3, r3, r4
 8019cc2:	800b      	strh	r3, [r1, #0]
 8019cc4:	bd10      	pop	{r4, pc}
 8019cc6:	bf00      	nop
 8019cc8:	2003bed8 	.word	0x2003bed8

08019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8019ccc:	4b0a      	ldr	r3, [pc, #40]	; (8019cf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8019cce:	460a      	mov	r2, r1
 8019cd0:	b510      	push	{r4, lr}
 8019cd2:	781b      	ldrb	r3, [r3, #0]
 8019cd4:	2b01      	cmp	r3, #1
 8019cd6:	d10d      	bne.n	8019cf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8019cd8:	8881      	ldrh	r1, [r0, #4]
 8019cda:	8803      	ldrh	r3, [r0, #0]
 8019cdc:	440b      	add	r3, r1
 8019cde:	4601      	mov	r1, r0
 8019ce0:	3b01      	subs	r3, #1
 8019ce2:	f821 3b02 	strh.w	r3, [r1], #2
 8019ce6:	f7ff ffdf 	bl	8019ca8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8019cea:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019cee:	88c2      	ldrh	r2, [r0, #6]
 8019cf0:	80c3      	strh	r3, [r0, #6]
 8019cf2:	8082      	strh	r2, [r0, #4]
 8019cf4:	bd10      	pop	{r4, pc}
 8019cf6:	bf00      	nop
 8019cf8:	2003bed8 	.word	0x2003bed8

08019cfc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8019cfc:	b570      	push	{r4, r5, r6, lr}
 8019cfe:	2300      	movs	r3, #0
 8019d00:	4c0a      	ldr	r4, [pc, #40]	; (8019d2c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8019d02:	4605      	mov	r5, r0
 8019d04:	460e      	mov	r6, r1
 8019d06:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 8019d0a:	6820      	ldr	r0, [r4, #0]
 8019d0c:	b110      	cbz	r0, 8019d14 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 8019d0e:	6803      	ldr	r3, [r0, #0]
 8019d10:	695b      	ldr	r3, [r3, #20]
 8019d12:	4798      	blx	r3
 8019d14:	6026      	str	r6, [r4, #0]
 8019d16:	4630      	mov	r0, r6
 8019d18:	6833      	ldr	r3, [r6, #0]
 8019d1a:	68db      	ldr	r3, [r3, #12]
 8019d1c:	4798      	blx	r3
 8019d1e:	682b      	ldr	r3, [r5, #0]
 8019d20:	4628      	mov	r0, r5
 8019d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019d24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019d28:	4718      	bx	r3
 8019d2a:	bf00      	nop
 8019d2c:	2003bf24 	.word	0x2003bf24

08019d30 <_ZN8touchgfx11Application13requestRedrawEv>:
 8019d30:	4b06      	ldr	r3, [pc, #24]	; (8019d4c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8019d32:	2100      	movs	r1, #0
 8019d34:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d38:	4b05      	ldr	r3, [pc, #20]	; (8019d50 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8019d3a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 8019d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d42:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 8019d46:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 8019d4a:	4770      	bx	lr
 8019d4c:	2003bed4 	.word	0x2003bed4
 8019d50:	2003bed6 	.word	0x2003bed6

08019d54 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8019d54:	4b03      	ldr	r3, [pc, #12]	; (8019d64 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8019d56:	6818      	ldr	r0, [r3, #0]
 8019d58:	b110      	cbz	r0, 8019d60 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 8019d5a:	6803      	ldr	r3, [r0, #0]
 8019d5c:	699b      	ldr	r3, [r3, #24]
 8019d5e:	4718      	bx	r3
 8019d60:	4770      	bx	lr
 8019d62:	bf00      	nop
 8019d64:	2003bf24 	.word	0x2003bf24

08019d68 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8019d68:	4770      	bx	lr
	...

08019d6c <_ZN8touchgfx11Application4drawEv>:
 8019d6c:	4b09      	ldr	r3, [pc, #36]	; (8019d94 <_ZN8touchgfx11Application4drawEv+0x28>)
 8019d6e:	b507      	push	{r0, r1, r2, lr}
 8019d70:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d74:	2100      	movs	r1, #0
 8019d76:	4b08      	ldr	r3, [pc, #32]	; (8019d98 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8019d78:	9100      	str	r1, [sp, #0]
 8019d7a:	4669      	mov	r1, sp
 8019d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019d80:	f8ad 2004 	strh.w	r2, [sp, #4]
 8019d84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8019d88:	6803      	ldr	r3, [r0, #0]
 8019d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019d8c:	4798      	blx	r3
 8019d8e:	b003      	add	sp, #12
 8019d90:	f85d fb04 	ldr.w	pc, [sp], #4
 8019d94:	2003bed4 	.word	0x2003bed4
 8019d98:	2003bed6 	.word	0x2003bed6

08019d9c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8019d9c:	4b03      	ldr	r3, [pc, #12]	; (8019dac <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8019d9e:	6818      	ldr	r0, [r3, #0]
 8019da0:	b110      	cbz	r0, 8019da8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8019da2:	6803      	ldr	r3, [r0, #0]
 8019da4:	69db      	ldr	r3, [r3, #28]
 8019da6:	4718      	bx	r3
 8019da8:	4770      	bx	lr
 8019daa:	bf00      	nop
 8019dac:	2003bf24 	.word	0x2003bf24

08019db0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8019db0:	4b03      	ldr	r3, [pc, #12]	; (8019dc0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8019db2:	6818      	ldr	r0, [r3, #0]
 8019db4:	b110      	cbz	r0, 8019dbc <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8019db6:	6803      	ldr	r3, [r0, #0]
 8019db8:	6a1b      	ldr	r3, [r3, #32]
 8019dba:	4718      	bx	r3
 8019dbc:	4770      	bx	lr
 8019dbe:	bf00      	nop
 8019dc0:	2003bf24 	.word	0x2003bf24

08019dc4 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8019dc4:	2300      	movs	r3, #0
 8019dc6:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 8019dca:	4770      	bx	lr

08019dcc <_ZN8touchgfx11Application14handleKeyEventEh>:
 8019dcc:	4b03      	ldr	r3, [pc, #12]	; (8019ddc <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8019dce:	6818      	ldr	r0, [r3, #0]
 8019dd0:	b110      	cbz	r0, 8019dd8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8019dd2:	6803      	ldr	r3, [r0, #0]
 8019dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019dd6:	4718      	bx	r3
 8019dd8:	4770      	bx	lr
 8019dda:	bf00      	nop
 8019ddc:	2003bf24 	.word	0x2003bf24

08019de0 <_ZN8touchgfx11Application15handleTickEventEv>:
 8019de0:	b570      	push	{r4, r5, r6, lr}
 8019de2:	4d32      	ldr	r5, [pc, #200]	; (8019eac <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 8019de4:	4604      	mov	r4, r0
 8019de6:	6828      	ldr	r0, [r5, #0]
 8019de8:	b140      	cbz	r0, 8019dfc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019dea:	7a03      	ldrb	r3, [r0, #8]
 8019dec:	b933      	cbnz	r3, 8019dfc <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8019dee:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8019df2:	6803      	ldr	r3, [r0, #0]
 8019df4:	689b      	ldr	r3, [r3, #8]
 8019df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019dfa:	4718      	bx	r3
 8019dfc:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 8019e00:	b97b      	cbnz	r3, 8019e22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019e02:	b170      	cbz	r0, 8019e22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019e04:	7a03      	ldrb	r3, [r0, #8]
 8019e06:	b163      	cbz	r3, 8019e22 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8019e08:	4b29      	ldr	r3, [pc, #164]	; (8019eb0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8019e0a:	6818      	ldr	r0, [r3, #0]
 8019e0c:	b110      	cbz	r0, 8019e14 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8019e0e:	6803      	ldr	r3, [r0, #0]
 8019e10:	691b      	ldr	r3, [r3, #16]
 8019e12:	4798      	blx	r3
 8019e14:	6828      	ldr	r0, [r5, #0]
 8019e16:	6803      	ldr	r3, [r0, #0]
 8019e18:	68db      	ldr	r3, [r3, #12]
 8019e1a:	4798      	blx	r3
 8019e1c:	2301      	movs	r3, #1
 8019e1e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 8019e22:	2500      	movs	r5, #0
 8019e24:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 8019e28:	42a8      	cmp	r0, r5
 8019e2a:	dd0c      	ble.n	8019e46 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 8019e2c:	1963      	adds	r3, r4, r5
 8019e2e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 8019e32:	b132      	cbz	r2, 8019e42 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 8019e34:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 8019e38:	4413      	add	r3, r2
 8019e3a:	6858      	ldr	r0, [r3, #4]
 8019e3c:	6803      	ldr	r3, [r0, #0]
 8019e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019e40:	4798      	blx	r3
 8019e42:	3501      	adds	r5, #1
 8019e44:	e7ee      	b.n	8019e24 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 8019e46:	2300      	movs	r3, #0
 8019e48:	461a      	mov	r2, r3
 8019e4a:	4298      	cmp	r0, r3
 8019e4c:	d015      	beq.n	8019e7a <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 8019e4e:	18e1      	adds	r1, r4, r3
 8019e50:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 8019e54:	b16d      	cbz	r5, 8019e72 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 8019e56:	429a      	cmp	r2, r3
 8019e58:	d00a      	beq.n	8019e70 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 8019e5a:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8019e5e:	4431      	add	r1, r6
 8019e60:	684e      	ldr	r6, [r1, #4]
 8019e62:	b291      	uxth	r1, r2
 8019e64:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019e68:	604e      	str	r6, [r1, #4]
 8019e6a:	18a1      	adds	r1, r4, r2
 8019e6c:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 8019e70:	3201      	adds	r2, #1
 8019e72:	3301      	adds	r3, #1
 8019e74:	e7e9      	b.n	8019e4a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 8019e76:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 8019e7a:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 8019e7e:	4295      	cmp	r5, r2
 8019e80:	dd0d      	ble.n	8019e9e <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 8019e82:	1e6b      	subs	r3, r5, #1
 8019e84:	b29b      	uxth	r3, r3
 8019e86:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8019e8a:	4618      	mov	r0, r3
 8019e8c:	3104      	adds	r1, #4
 8019e8e:	4285      	cmp	r5, r0
 8019e90:	ddf1      	ble.n	8019e76 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 8019e92:	f851 6f04 	ldr.w	r6, [r1, #4]!
 8019e96:	3001      	adds	r0, #1
 8019e98:	f841 6c04 	str.w	r6, [r1, #-4]
 8019e9c:	e7f7      	b.n	8019e8e <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 8019e9e:	4b04      	ldr	r3, [pc, #16]	; (8019eb0 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 8019ea0:	6818      	ldr	r0, [r3, #0]
 8019ea2:	b110      	cbz	r0, 8019eaa <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 8019ea4:	6803      	ldr	r3, [r0, #0]
 8019ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ea8:	e7a5      	b.n	8019df6 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8019eaa:	bd70      	pop	{r4, r5, r6, pc}
 8019eac:	2003bf28 	.word	0x2003bf28
 8019eb0:	2003bf24 	.word	0x2003bf24

08019eb4 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8019eb4:	b510      	push	{r4, lr}
 8019eb6:	f9b1 4000 	ldrsh.w	r4, [r1]
 8019eba:	888a      	ldrh	r2, [r1, #4]
 8019ebc:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019ec0:	4422      	add	r2, r4
 8019ec2:	b212      	sxth	r2, r2
 8019ec4:	4293      	cmp	r3, r2
 8019ec6:	da15      	bge.n	8019ef4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019ec8:	8882      	ldrh	r2, [r0, #4]
 8019eca:	4413      	add	r3, r2
 8019ecc:	b21b      	sxth	r3, r3
 8019ece:	429c      	cmp	r4, r3
 8019ed0:	da10      	bge.n	8019ef4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019ed2:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8019ed6:	88c9      	ldrh	r1, [r1, #6]
 8019ed8:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8019edc:	4419      	add	r1, r3
 8019ede:	b209      	sxth	r1, r1
 8019ee0:	428a      	cmp	r2, r1
 8019ee2:	da07      	bge.n	8019ef4 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8019ee4:	88c0      	ldrh	r0, [r0, #6]
 8019ee6:	4410      	add	r0, r2
 8019ee8:	b200      	sxth	r0, r0
 8019eea:	4283      	cmp	r3, r0
 8019eec:	bfac      	ite	ge
 8019eee:	2000      	movge	r0, #0
 8019ef0:	2001      	movlt	r0, #1
 8019ef2:	bd10      	pop	{r4, pc}
 8019ef4:	2000      	movs	r0, #0
 8019ef6:	e7fc      	b.n	8019ef2 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08019ef8 <_ZN8touchgfx4Rect10restrictToEss>:
 8019ef8:	f9b0 3000 	ldrsh.w	r3, [r0]
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	b510      	push	{r4, lr}
 8019f00:	da04      	bge.n	8019f0c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8019f02:	8884      	ldrh	r4, [r0, #4]
 8019f04:	4423      	add	r3, r4
 8019f06:	8083      	strh	r3, [r0, #4]
 8019f08:	2300      	movs	r3, #0
 8019f0a:	8003      	strh	r3, [r0, #0]
 8019f0c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8019f10:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8019f14:	1b09      	subs	r1, r1, r4
 8019f16:	428b      	cmp	r3, r1
 8019f18:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8019f1c:	bfc8      	it	gt
 8019f1e:	8081      	strhgt	r1, [r0, #4]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	da04      	bge.n	8019f2e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8019f24:	88c1      	ldrh	r1, [r0, #6]
 8019f26:	440b      	add	r3, r1
 8019f28:	80c3      	strh	r3, [r0, #6]
 8019f2a:	2300      	movs	r3, #0
 8019f2c:	8043      	strh	r3, [r0, #2]
 8019f2e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8019f32:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8019f36:	1a52      	subs	r2, r2, r1
 8019f38:	4293      	cmp	r3, r2
 8019f3a:	bfc8      	it	gt
 8019f3c:	80c2      	strhgt	r2, [r0, #6]
 8019f3e:	bd10      	pop	{r4, pc}

08019f40 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8019f40:	4b10      	ldr	r3, [pc, #64]	; (8019f84 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8019f42:	b510      	push	{r4, lr}
 8019f44:	460c      	mov	r4, r1
 8019f46:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f4a:	4b0f      	ldr	r3, [pc, #60]	; (8019f88 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8019f4c:	4620      	mov	r0, r4
 8019f4e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8019f52:	f7ff ffd1 	bl	8019ef8 <_ZN8touchgfx4Rect10restrictToEss>
 8019f56:	4b0d      	ldr	r3, [pc, #52]	; (8019f8c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8019f58:	6818      	ldr	r0, [r3, #0]
 8019f5a:	b190      	cbz	r0, 8019f82 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8019f5c:	6803      	ldr	r3, [r0, #0]
 8019f5e:	4621      	mov	r1, r4
 8019f60:	689b      	ldr	r3, [r3, #8]
 8019f62:	4798      	blx	r3
 8019f64:	4b0a      	ldr	r3, [pc, #40]	; (8019f90 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8019f66:	6818      	ldr	r0, [r3, #0]
 8019f68:	b118      	cbz	r0, 8019f72 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8019f6a:	6803      	ldr	r3, [r0, #0]
 8019f6c:	4621      	mov	r1, r4
 8019f6e:	689b      	ldr	r3, [r3, #8]
 8019f70:	4798      	blx	r3
 8019f72:	4b08      	ldr	r3, [pc, #32]	; (8019f94 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8019f74:	4621      	mov	r1, r4
 8019f76:	6818      	ldr	r0, [r3, #0]
 8019f78:	6803      	ldr	r3, [r0, #0]
 8019f7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019f7e:	69db      	ldr	r3, [r3, #28]
 8019f80:	4718      	bx	r3
 8019f82:	bd10      	pop	{r4, pc}
 8019f84:	2003bed6 	.word	0x2003bed6
 8019f88:	2003bed4 	.word	0x2003bed4
 8019f8c:	2003bf24 	.word	0x2003bf24
 8019f90:	2003bf20 	.word	0x2003bf20
 8019f94:	2003bee0 	.word	0x2003bee0

08019f98 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8019f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f9a:	4606      	mov	r6, r0
 8019f9c:	4608      	mov	r0, r1
 8019f9e:	460f      	mov	r7, r1
 8019fa0:	f7fb fb43 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019fa4:	b9e8      	cbnz	r0, 8019fe2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019fa6:	f9b7 5000 	ldrsh.w	r5, [r7]
 8019faa:	f9b6 4000 	ldrsh.w	r4, [r6]
 8019fae:	42a5      	cmp	r5, r4
 8019fb0:	db17      	blt.n	8019fe2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019fb2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8019fb6:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8019fba:	429a      	cmp	r2, r3
 8019fbc:	db11      	blt.n	8019fe2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019fbe:	88b9      	ldrh	r1, [r7, #4]
 8019fc0:	440d      	add	r5, r1
 8019fc2:	88b1      	ldrh	r1, [r6, #4]
 8019fc4:	440c      	add	r4, r1
 8019fc6:	b22d      	sxth	r5, r5
 8019fc8:	b224      	sxth	r4, r4
 8019fca:	42a5      	cmp	r5, r4
 8019fcc:	dc09      	bgt.n	8019fe2 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8019fce:	88f8      	ldrh	r0, [r7, #6]
 8019fd0:	4410      	add	r0, r2
 8019fd2:	88f2      	ldrh	r2, [r6, #6]
 8019fd4:	4413      	add	r3, r2
 8019fd6:	b200      	sxth	r0, r0
 8019fd8:	b21b      	sxth	r3, r3
 8019fda:	4298      	cmp	r0, r3
 8019fdc:	bfcc      	ite	gt
 8019fde:	2000      	movgt	r0, #0
 8019fe0:	2001      	movle	r0, #1
 8019fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019fe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8019fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fe6:	4604      	mov	r4, r0
 8019fe8:	4608      	mov	r0, r1
 8019fea:	460d      	mov	r5, r1
 8019fec:	f7fb fb1d 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ff0:	b978      	cbnz	r0, 801a012 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8019ff2:	4620      	mov	r0, r4
 8019ff4:	f7fb fb19 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 8019ff8:	f9b5 6000 	ldrsh.w	r6, [r5]
 8019ffc:	b150      	cbz	r0, 801a014 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8019ffe:	8026      	strh	r6, [r4, #0]
 801a000:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801a004:	8063      	strh	r3, [r4, #2]
 801a006:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801a00a:	80a3      	strh	r3, [r4, #4]
 801a00c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801a010:	80e3      	strh	r3, [r4, #6]
 801a012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a014:	f9b4 1000 	ldrsh.w	r1, [r4]
 801a018:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801a01c:	42b1      	cmp	r1, r6
 801a01e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801a022:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801a026:	460f      	mov	r7, r1
 801a028:	88ed      	ldrh	r5, [r5, #6]
 801a02a:	bfa8      	it	ge
 801a02c:	4637      	movge	r7, r6
 801a02e:	4293      	cmp	r3, r2
 801a030:	4618      	mov	r0, r3
 801a032:	4466      	add	r6, ip
 801a034:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801a038:	bfa8      	it	ge
 801a03a:	4610      	movge	r0, r2
 801a03c:	442a      	add	r2, r5
 801a03e:	88e5      	ldrh	r5, [r4, #6]
 801a040:	4461      	add	r1, ip
 801a042:	b236      	sxth	r6, r6
 801a044:	8027      	strh	r7, [r4, #0]
 801a046:	442b      	add	r3, r5
 801a048:	b209      	sxth	r1, r1
 801a04a:	b212      	sxth	r2, r2
 801a04c:	8060      	strh	r0, [r4, #2]
 801a04e:	b21b      	sxth	r3, r3
 801a050:	428e      	cmp	r6, r1
 801a052:	bfac      	ite	ge
 801a054:	ebc7 0106 	rsbge	r1, r7, r6
 801a058:	ebc7 0101 	rsblt	r1, r7, r1
 801a05c:	429a      	cmp	r2, r3
 801a05e:	bfac      	ite	ge
 801a060:	ebc0 0202 	rsbge	r2, r0, r2
 801a064:	ebc0 0203 	rsblt	r2, r0, r3
 801a068:	80a1      	strh	r1, [r4, #4]
 801a06a:	80e2      	strh	r2, [r4, #6]
 801a06c:	e7d1      	b.n	801a012 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801a070 <_ZN8touchgfx11Application11getInstanceEv>:
 801a070:	4b01      	ldr	r3, [pc, #4]	; (801a078 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801a072:	6818      	ldr	r0, [r3, #0]
 801a074:	4770      	bx	lr
 801a076:	bf00      	nop
 801a078:	2003bf34 	.word	0x2003bf34

0801a07c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801a07c:	2300      	movs	r3, #0
 801a07e:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801a082:	30a8      	adds	r0, #168	; 0xa8
 801a084:	f820 3c24 	strh.w	r3, [r0, #-36]
 801a088:	f802 3b01 	strb.w	r3, [r2], #1
 801a08c:	4282      	cmp	r2, r0
 801a08e:	d1fb      	bne.n	801a088 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801a090:	4770      	bx	lr

0801a092 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801a092:	4603      	mov	r3, r0
 801a094:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801a098:	2200      	movs	r2, #0
 801a09a:	801a      	strh	r2, [r3, #0]
 801a09c:	3308      	adds	r3, #8
 801a09e:	f823 2c06 	strh.w	r2, [r3, #-6]
 801a0a2:	f823 2c04 	strh.w	r2, [r3, #-4]
 801a0a6:	f823 2c02 	strh.w	r2, [r3, #-2]
 801a0aa:	428b      	cmp	r3, r1
 801a0ac:	d1f5      	bne.n	801a09a <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801a0ae:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801a0b2:	4770      	bx	lr

0801a0b4 <_ZN8touchgfx11ApplicationC1Ev>:
 801a0b4:	b570      	push	{r4, r5, r6, lr}
 801a0b6:	4b19      	ldr	r3, [pc, #100]	; (801a11c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801a0b8:	2500      	movs	r5, #0
 801a0ba:	4604      	mov	r4, r0
 801a0bc:	30a8      	adds	r0, #168	; 0xa8
 801a0be:	f840 3ca8 	str.w	r3, [r0, #-168]
 801a0c2:	f820 5c24 	strh.w	r5, [r0, #-36]
 801a0c6:	f7ff ffe4 	bl	801a092 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a0ca:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801a0ce:	f7ff ffe0 	bl	801a092 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a0d2:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801a0d6:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801a0da:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801a0de:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801a0e2:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801a0e6:	490e      	ldr	r1, [pc, #56]	; (801a120 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801a0e8:	480e      	ldr	r0, [pc, #56]	; (801a124 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801a0ea:	f00e f9c7 	bl	802847c <CRC_Lock>
 801a0ee:	4e0e      	ldr	r6, [pc, #56]	; (801a128 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801a0f0:	4b0e      	ldr	r3, [pc, #56]	; (801a12c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801a0f2:	b158      	cbz	r0, 801a10c <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801a0f4:	801d      	strh	r5, [r3, #0]
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	4a0d      	ldr	r2, [pc, #52]	; (801a130 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801a0fa:	4620      	mov	r0, r4
 801a0fc:	6013      	str	r3, [r2, #0]
 801a0fe:	4a0d      	ldr	r2, [pc, #52]	; (801a134 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801a100:	6033      	str	r3, [r6, #0]
 801a102:	6013      	str	r3, [r2, #0]
 801a104:	f7ff ffba 	bl	801a07c <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801a108:	4620      	mov	r0, r4
 801a10a:	bd70      	pop	{r4, r5, r6, pc}
 801a10c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a110:	2002      	movs	r0, #2
 801a112:	801a      	strh	r2, [r3, #0]
 801a114:	6030      	str	r0, [r6, #0]
 801a116:	f001 fadf 	bl	801b6d8 <_ZN8touchgfx6Screen4drawEv>
 801a11a:	e7ec      	b.n	801a0f6 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801a11c:	0802f87c 	.word	0x0802f87c
 801a120:	b5e8b5cd 	.word	0xb5e8b5cd
 801a124:	f407a5c2 	.word	0xf407a5c2
 801a128:	2003bf24 	.word	0x2003bf24
 801a12c:	20000038 	.word	0x20000038
 801a130:	2003bf34 	.word	0x2003bf34
 801a134:	2003bf28 	.word	0x2003bf28

0801a138 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801a138:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801a13c:	3b01      	subs	r3, #1
 801a13e:	b29b      	uxth	r3, r3
 801a140:	428b      	cmp	r3, r1
 801a142:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801a146:	b510      	push	{r4, lr}
 801a148:	d908      	bls.n	801a15c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801a14a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801a14e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801a152:	681a      	ldr	r2, [r3, #0]
 801a154:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801a158:	685a      	ldr	r2, [r3, #4]
 801a15a:	6062      	str	r2, [r4, #4]
 801a15c:	bd10      	pop	{r4, pc}
	...

0801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801a160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a164:	b08f      	sub	sp, #60	; 0x3c
 801a166:	4b94      	ldr	r3, [pc, #592]	; (801a3b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801a168:	4683      	mov	fp, r0
 801a16a:	ac0a      	add	r4, sp, #40	; 0x28
 801a16c:	e884 0006 	stmia.w	r4, {r1, r2}
 801a170:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a174:	4620      	mov	r0, r4
 801a176:	4b91      	ldr	r3, [pc, #580]	; (801a3bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801a178:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a17c:	f7ff febc 	bl	8019ef8 <_ZN8touchgfx4Rect10restrictToEss>
 801a180:	4620      	mov	r0, r4
 801a182:	f7fb fa52 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a186:	2800      	cmp	r0, #0
 801a188:	d16a      	bne.n	801a260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a18a:	9403      	str	r4, [sp, #12]
 801a18c:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801a190:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a194:	2400      	movs	r4, #0
 801a196:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801a19a:	9301      	str	r3, [sp, #4]
 801a19c:	36a0      	adds	r6, #160	; 0xa0
 801a19e:	42a5      	cmp	r5, r4
 801a1a0:	d00d      	beq.n	801a1be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801a1a2:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801a1a6:	9803      	ldr	r0, [sp, #12]
 801a1a8:	f7ff fef6 	bl	8019f98 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a1ac:	b128      	cbz	r0, 801a1ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801a1ae:	1e69      	subs	r1, r5, #1
 801a1b0:	9801      	ldr	r0, [sp, #4]
 801a1b2:	1b09      	subs	r1, r1, r4
 801a1b4:	b289      	uxth	r1, r1
 801a1b6:	f7ff ffbf 	bl	801a138 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a1ba:	3401      	adds	r4, #1
 801a1bc:	e7ef      	b.n	801a19e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801a1be:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801a1c2:	1e7b      	subs	r3, r7, #1
 801a1c4:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801a1c8:	9704      	str	r7, [sp, #16]
 801a1ca:	9302      	str	r3, [sp, #8]
 801a1cc:	2400      	movs	r4, #0
 801a1ce:	4655      	mov	r5, sl
 801a1d0:	9705      	str	r7, [sp, #20]
 801a1d2:	4626      	mov	r6, r4
 801a1d4:	9b05      	ldr	r3, [sp, #20]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d078      	beq.n	801a2cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801a1da:	9903      	ldr	r1, [sp, #12]
 801a1dc:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a1e0:	f7ff fe68 	bl	8019eb4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a1e4:	b360      	cbz	r0, 801a240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801a1e6:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801a1ea:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801a1ee:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801a1f2:	45e6      	cmp	lr, ip
 801a1f4:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801a1f8:	db35      	blt.n	801a266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801a1fa:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a1fe:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a202:	4472      	add	r2, lr
 801a204:	4463      	add	r3, ip
 801a206:	b212      	sxth	r2, r2
 801a208:	b21b      	sxth	r3, r3
 801a20a:	429a      	cmp	r2, r3
 801a20c:	dc2b      	bgt.n	801a266 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801a20e:	fa1f f288 	uxth.w	r2, r8
 801a212:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a216:	45c1      	cmp	r9, r8
 801a218:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a21c:	4413      	add	r3, r2
 801a21e:	fa1f fc89 	uxth.w	ip, r9
 801a222:	b29b      	uxth	r3, r3
 801a224:	fa0f fe83 	sxth.w	lr, r3
 801a228:	db0f      	blt.n	801a24a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801a22a:	eba3 030c 	sub.w	r3, r3, ip
 801a22e:	1ac9      	subs	r1, r1, r3
 801a230:	b209      	sxth	r1, r1
 801a232:	2900      	cmp	r1, #0
 801a234:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a238:	dd12      	ble.n	801a260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a23a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801a23e:	4604      	mov	r4, r0
 801a240:	9b05      	ldr	r3, [sp, #20]
 801a242:	3d08      	subs	r5, #8
 801a244:	3b01      	subs	r3, #1
 801a246:	9305      	str	r3, [sp, #20]
 801a248:	e7c4      	b.n	801a1d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801a24a:	4461      	add	r1, ip
 801a24c:	b209      	sxth	r1, r1
 801a24e:	4571      	cmp	r1, lr
 801a250:	dc3a      	bgt.n	801a2c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a252:	eba2 020c 	sub.w	r2, r2, ip
 801a256:	b212      	sxth	r2, r2
 801a258:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801a25c:	2a00      	cmp	r2, #0
 801a25e:	dcee      	bgt.n	801a23e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801a260:	b00f      	add	sp, #60	; 0x3c
 801a262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a266:	45c1      	cmp	r9, r8
 801a268:	db2e      	blt.n	801a2c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a26a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801a26e:	4499      	add	r9, r3
 801a270:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801a274:	4498      	add	r8, r3
 801a276:	fa0f f989 	sxth.w	r9, r9
 801a27a:	fa0f f888 	sxth.w	r8, r8
 801a27e:	45c1      	cmp	r9, r8
 801a280:	dc22      	bgt.n	801a2c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a282:	fa1f f28c 	uxth.w	r2, ip
 801a286:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801a28a:	45e6      	cmp	lr, ip
 801a28c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801a290:	4413      	add	r3, r2
 801a292:	fa1f f88e 	uxth.w	r8, lr
 801a296:	b29b      	uxth	r3, r3
 801a298:	fa0f f983 	sxth.w	r9, r3
 801a29c:	db0a      	blt.n	801a2b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801a29e:	eba3 0308 	sub.w	r3, r3, r8
 801a2a2:	1ac9      	subs	r1, r1, r3
 801a2a4:	b209      	sxth	r1, r1
 801a2a6:	2900      	cmp	r1, #0
 801a2a8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801a2ac:	ddd8      	ble.n	801a260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a2ae:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801a2b2:	e7c4      	b.n	801a23e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801a2b4:	4441      	add	r1, r8
 801a2b6:	b209      	sxth	r1, r1
 801a2b8:	4549      	cmp	r1, r9
 801a2ba:	dc05      	bgt.n	801a2c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801a2bc:	eba2 0208 	sub.w	r2, r2, r8
 801a2c0:	b212      	sxth	r2, r2
 801a2c2:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801a2c6:	e7c9      	b.n	801a25c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801a2c8:	4606      	mov	r6, r0
 801a2ca:	e7b9      	b.n	801a240 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801a2cc:	2c00      	cmp	r4, #0
 801a2ce:	f47f af7d 	bne.w	801a1cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801a2d2:	2e00      	cmp	r6, #0
 801a2d4:	f000 81e1 	beq.w	801a69a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801a2d8:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801a2dc:	4655      	mov	r5, sl
 801a2de:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801a2e2:	b2b9      	uxth	r1, r7
 801a2e4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801a2e8:	b2b3      	uxth	r3, r6
 801a2ea:	9105      	str	r1, [sp, #20]
 801a2ec:	9805      	ldr	r0, [sp, #20]
 801a2ee:	441a      	add	r2, r3
 801a2f0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801a2f4:	b292      	uxth	r2, r2
 801a2f6:	4401      	add	r1, r0
 801a2f8:	fa0f f882 	sxth.w	r8, r2
 801a2fc:	b289      	uxth	r1, r1
 801a2fe:	9106      	str	r1, [sp, #24]
 801a300:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801a304:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801a308:	9b04      	ldr	r3, [sp, #16]
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d058      	beq.n	801a3c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801a30e:	9903      	ldr	r1, [sp, #12]
 801a310:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801a314:	f7ff fdce 	bl	8019eb4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a318:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801a31c:	b1d8      	cbz	r0, 801a356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a31e:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801a322:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801a326:	4576      	cmp	r6, lr
 801a328:	dc26      	bgt.n	801a378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801a32a:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801a32e:	44f4      	add	ip, lr
 801a330:	fa0f fc8c 	sxth.w	ip, ip
 801a334:	45e0      	cmp	r8, ip
 801a336:	db1f      	blt.n	801a378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801a338:	428f      	cmp	r7, r1
 801a33a:	fa1f fc81 	uxth.w	ip, r1
 801a33e:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801a342:	dc0f      	bgt.n	801a364 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801a344:	9806      	ldr	r0, [sp, #24]
 801a346:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801a34a:	eba0 0c0c 	sub.w	ip, r0, ip
 801a34e:	eba1 010c 	sub.w	r1, r1, ip
 801a352:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801a356:	4620      	mov	r0, r4
 801a358:	9904      	ldr	r1, [sp, #16]
 801a35a:	3d08      	subs	r5, #8
 801a35c:	4604      	mov	r4, r0
 801a35e:	3901      	subs	r1, #1
 801a360:	9104      	str	r1, [sp, #16]
 801a362:	e7cf      	b.n	801a304 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801a364:	4461      	add	r1, ip
 801a366:	b209      	sxth	r1, r1
 801a368:	4549      	cmp	r1, r9
 801a36a:	dcf5      	bgt.n	801a358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a36c:	9905      	ldr	r1, [sp, #20]
 801a36e:	eba1 0c0c 	sub.w	ip, r1, ip
 801a372:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801a376:	e7ee      	b.n	801a356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a378:	428f      	cmp	r7, r1
 801a37a:	dced      	bgt.n	801a358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a37c:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801a380:	4461      	add	r1, ip
 801a382:	b209      	sxth	r1, r1
 801a384:	4589      	cmp	r9, r1
 801a386:	dbe7      	blt.n	801a358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a388:	4576      	cmp	r6, lr
 801a38a:	fa1f fc8e 	uxth.w	ip, lr
 801a38e:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801a392:	dc08      	bgt.n	801a3a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801a394:	eba2 0c0c 	sub.w	ip, r2, ip
 801a398:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801a39c:	eba1 010c 	sub.w	r1, r1, ip
 801a3a0:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801a3a4:	e7d7      	b.n	801a356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a3a6:	4461      	add	r1, ip
 801a3a8:	b209      	sxth	r1, r1
 801a3aa:	4588      	cmp	r8, r1
 801a3ac:	dbd4      	blt.n	801a358 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801a3ae:	eba3 0c0c 	sub.w	ip, r3, ip
 801a3b2:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801a3b6:	e7ce      	b.n	801a356 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801a3b8:	2003bed6 	.word	0x2003bed6
 801a3bc:	2003bed4 	.word	0x2003bed4
 801a3c0:	2c00      	cmp	r4, #0
 801a3c2:	f000 816a 	beq.w	801a69a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801a3c6:	9b02      	ldr	r3, [sp, #8]
 801a3c8:	3301      	adds	r3, #1
 801a3ca:	f000 8166 	beq.w	801a69a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801a3ce:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801a3d2:	9803      	ldr	r0, [sp, #12]
 801a3d4:	4621      	mov	r1, r4
 801a3d6:	f7ff fddf 	bl	8019f98 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a3da:	b120      	cbz	r0, 801a3e6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801a3dc:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801a3e0:	9801      	ldr	r0, [sp, #4]
 801a3e2:	f7ff fea9 	bl	801a138 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a3e6:	9903      	ldr	r1, [sp, #12]
 801a3e8:	4620      	mov	r0, r4
 801a3ea:	f7ff fd63 	bl	8019eb4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a3ee:	2800      	cmp	r0, #0
 801a3f0:	f000 809b 	beq.w	801a52a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801a3f4:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801a3f8:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801a3fc:	b281      	uxth	r1, r0
 801a3fe:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801a402:	9309      	str	r3, [sp, #36]	; 0x24
 801a404:	eb01 0c03 	add.w	ip, r1, r3
 801a408:	b2ab      	uxth	r3, r5
 801a40a:	4285      	cmp	r5, r0
 801a40c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801a410:	fa1f f98c 	uxth.w	r9, ip
 801a414:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801a418:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801a41c:	eb03 040c 	add.w	r4, r3, ip
 801a420:	b2a4      	uxth	r4, r4
 801a422:	9405      	str	r4, [sp, #20]
 801a424:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801a428:	9404      	str	r4, [sp, #16]
 801a42a:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801a42e:	f340 809a 	ble.w	801a566 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801a432:	1a5b      	subs	r3, r3, r1
 801a434:	4596      	cmp	lr, r2
 801a436:	fa0f f589 	sxth.w	r5, r9
 801a43a:	b29b      	uxth	r3, r3
 801a43c:	b21e      	sxth	r6, r3
 801a43e:	dd2e      	ble.n	801a49e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801a440:	9f02      	ldr	r7, [sp, #8]
 801a442:	fa1f fe8e 	uxth.w	lr, lr
 801a446:	b292      	uxth	r2, r2
 801a448:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801a44c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801a450:	9f04      	ldr	r7, [sp, #16]
 801a452:	ebae 0102 	sub.w	r1, lr, r2
 801a456:	4486      	add	lr, r0
 801a458:	1b7f      	subs	r7, r7, r5
 801a45a:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801a45e:	b289      	uxth	r1, r1
 801a460:	442a      	add	r2, r5
 801a462:	fa0f fe8e 	sxth.w	lr, lr
 801a466:	b20c      	sxth	r4, r1
 801a468:	b212      	sxth	r2, r2
 801a46a:	4367      	muls	r7, r4
 801a46c:	ebae 0202 	sub.w	r2, lr, r2
 801a470:	4372      	muls	r2, r6
 801a472:	4297      	cmp	r7, r2
 801a474:	db09      	blt.n	801a48a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801a476:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801a47a:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801a47e:	449c      	add	ip, r3
 801a480:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801a484:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801a488:	e680      	b.n	801a18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a48a:	4401      	add	r1, r0
 801a48c:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801a490:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801a494:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a498:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a49c:	e676      	b.n	801a18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a49e:	9f04      	ldr	r7, [sp, #16]
 801a4a0:	42bd      	cmp	r5, r7
 801a4a2:	da27      	bge.n	801a4f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801a4a4:	9902      	ldr	r1, [sp, #8]
 801a4a6:	1b7f      	subs	r7, r7, r5
 801a4a8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801a4ac:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801a4b0:	eb04 010e 	add.w	r1, r4, lr
 801a4b4:	fa1f f881 	uxth.w	r8, r1
 801a4b8:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801a4bc:	4411      	add	r1, r2
 801a4be:	fa0f f988 	sxth.w	r9, r8
 801a4c2:	eba2 020e 	sub.w	r2, r2, lr
 801a4c6:	eba1 0108 	sub.w	r1, r1, r8
 801a4ca:	4372      	muls	r2, r6
 801a4cc:	b289      	uxth	r1, r1
 801a4ce:	fa0f f881 	sxth.w	r8, r1
 801a4d2:	fb08 f707 	mul.w	r7, r8, r7
 801a4d6:	42ba      	cmp	r2, r7
 801a4d8:	dc06      	bgt.n	801a4e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801a4da:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801a4de:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801a4e2:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801a4e6:	e7ca      	b.n	801a47e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801a4e8:	4421      	add	r1, r4
 801a4ea:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801a4ee:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a4f2:	e64b      	b.n	801a18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a4f4:	9d05      	ldr	r5, [sp, #20]
 801a4f6:	2c06      	cmp	r4, #6
 801a4f8:	eba9 0505 	sub.w	r5, r9, r5
 801a4fc:	b2ad      	uxth	r5, r5
 801a4fe:	fa0f fe85 	sxth.w	lr, r5
 801a502:	d818      	bhi.n	801a536 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801a504:	9b04      	ldr	r3, [sp, #16]
 801a506:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801a50a:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801a50e:	1c63      	adds	r3, r4, #1
 801a510:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801a514:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801a518:	9b01      	ldr	r3, [sp, #4]
 801a51a:	9d01      	ldr	r5, [sp, #4]
 801a51c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a520:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801a524:	805a      	strh	r2, [r3, #2]
 801a526:	809e      	strh	r6, [r3, #4]
 801a528:	80d9      	strh	r1, [r3, #6]
 801a52a:	9b02      	ldr	r3, [sp, #8]
 801a52c:	f1aa 0a08 	sub.w	sl, sl, #8
 801a530:	3b01      	subs	r3, #1
 801a532:	9302      	str	r3, [sp, #8]
 801a534:	e747      	b.n	801a3c6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801a536:	9a02      	ldr	r2, [sp, #8]
 801a538:	45b6      	cmp	lr, r6
 801a53a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a53e:	db0d      	blt.n	801a55c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801a540:	449c      	add	ip, r3
 801a542:	445a      	add	r2, fp
 801a544:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801a548:	fa1f fc8c 	uxth.w	ip, ip
 801a54c:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801a550:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801a554:	448c      	add	ip, r1
 801a556:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801a55a:	e617      	b.n	801a18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a55c:	445a      	add	r2, fp
 801a55e:	44ac      	add	ip, r5
 801a560:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801a564:	e78e      	b.n	801a484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a566:	fa1f f18e 	uxth.w	r1, lr
 801a56a:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801a56e:	b293      	uxth	r3, r2
 801a570:	4596      	cmp	lr, r2
 801a572:	eb01 0806 	add.w	r8, r1, r6
 801a576:	9306      	str	r3, [sp, #24]
 801a578:	fa1f f888 	uxth.w	r8, r8
 801a57c:	9f06      	ldr	r7, [sp, #24]
 801a57e:	fa0f f388 	sxth.w	r3, r8
 801a582:	9307      	str	r3, [sp, #28]
 801a584:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801a588:	443b      	add	r3, r7
 801a58a:	b29b      	uxth	r3, r3
 801a58c:	9308      	str	r3, [sp, #32]
 801a58e:	da25      	bge.n	801a5dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801a590:	9905      	ldr	r1, [sp, #20]
 801a592:	eba3 0308 	sub.w	r3, r3, r8
 801a596:	eba2 020e 	sub.w	r2, r2, lr
 801a59a:	1b40      	subs	r0, r0, r5
 801a59c:	eba9 0401 	sub.w	r4, r9, r1
 801a5a0:	b29b      	uxth	r3, r3
 801a5a2:	b2a4      	uxth	r4, r4
 801a5a4:	b219      	sxth	r1, r3
 801a5a6:	fa0f f984 	sxth.w	r9, r4
 801a5aa:	4348      	muls	r0, r1
 801a5ac:	fb09 f202 	mul.w	r2, r9, r2
 801a5b0:	4282      	cmp	r2, r0
 801a5b2:	9a02      	ldr	r2, [sp, #8]
 801a5b4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801a5b8:	445a      	add	r2, fp
 801a5ba:	dc06      	bgt.n	801a5ca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801a5bc:	9b07      	ldr	r3, [sp, #28]
 801a5be:	44a4      	add	ip, r4
 801a5c0:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801a5c4:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801a5c8:	e75c      	b.n	801a484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a5ca:	9904      	ldr	r1, [sp, #16]
 801a5cc:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801a5d0:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801a5d4:	4433      	add	r3, r6
 801a5d6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801a5da:	e5d7      	b.n	801a18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a5dc:	9f06      	ldr	r7, [sp, #24]
 801a5de:	9b04      	ldr	r3, [sp, #16]
 801a5e0:	1bc9      	subs	r1, r1, r7
 801a5e2:	fa0f f789 	sxth.w	r7, r9
 801a5e6:	b289      	uxth	r1, r1
 801a5e8:	429f      	cmp	r7, r3
 801a5ea:	fa0f fe81 	sxth.w	lr, r1
 801a5ee:	dd22      	ble.n	801a636 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801a5f0:	9a05      	ldr	r2, [sp, #20]
 801a5f2:	1b40      	subs	r0, r0, r5
 801a5f4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801a5f8:	eba9 0202 	sub.w	r2, r9, r2
 801a5fc:	9d07      	ldr	r5, [sp, #28]
 801a5fe:	fb0e f000 	mul.w	r0, lr, r0
 801a602:	b292      	uxth	r2, r2
 801a604:	eba5 0a03 	sub.w	sl, r5, r3
 801a608:	9b02      	ldr	r3, [sp, #8]
 801a60a:	b214      	sxth	r4, r2
 801a60c:	00db      	lsls	r3, r3, #3
 801a60e:	fb04 fa0a 	mul.w	sl, r4, sl
 801a612:	445b      	add	r3, fp
 801a614:	4550      	cmp	r0, sl
 801a616:	db03      	blt.n	801a620 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801a618:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801a61c:	4494      	add	ip, r2
 801a61e:	e731      	b.n	801a484 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801a620:	9a04      	ldr	r2, [sp, #16]
 801a622:	4431      	add	r1, r6
 801a624:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801a628:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801a62c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801a630:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801a634:	e75b      	b.n	801a4ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801a636:	9b08      	ldr	r3, [sp, #32]
 801a638:	2c06      	cmp	r4, #6
 801a63a:	eba3 0308 	sub.w	r3, r3, r8
 801a63e:	b29b      	uxth	r3, r3
 801a640:	b21d      	sxth	r5, r3
 801a642:	d813      	bhi.n	801a66c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801a644:	9b07      	ldr	r3, [sp, #28]
 801a646:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801a64a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801a64e:	1c63      	adds	r3, r4, #1
 801a650:	9901      	ldr	r1, [sp, #4]
 801a652:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801a656:	9b01      	ldr	r3, [sp, #4]
 801a658:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801a65c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a660:	805a      	strh	r2, [r3, #2]
 801a662:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a664:	f8a3 e006 	strh.w	lr, [r3, #6]
 801a668:	809a      	strh	r2, [r3, #4]
 801a66a:	e75e      	b.n	801a52a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801a66c:	9802      	ldr	r0, [sp, #8]
 801a66e:	4575      	cmp	r5, lr
 801a670:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801a674:	db0d      	blt.n	801a692 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801a676:	4431      	add	r1, r6
 801a678:	9b06      	ldr	r3, [sp, #24]
 801a67a:	4458      	add	r0, fp
 801a67c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801a680:	b289      	uxth	r1, r1
 801a682:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801a686:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801a68a:	4419      	add	r1, r3
 801a68c:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801a690:	e57c      	b.n	801a18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a692:	4458      	add	r0, fp
 801a694:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801a698:	e79c      	b.n	801a5d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801a69a:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801a69e:	2e07      	cmp	r6, #7
 801a6a0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801a6a4:	d812      	bhi.n	801a6cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801a6a6:	1c75      	adds	r5, r6, #1
 801a6a8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801a6ac:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801a6b0:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801a6b4:	9d01      	ldr	r5, [sp, #4]
 801a6b6:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801a6ba:	442c      	add	r4, r5
 801a6bc:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801a6c0:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801a6c4:	8061      	strh	r1, [r4, #2]
 801a6c6:	80a2      	strh	r2, [r4, #4]
 801a6c8:	80e3      	strh	r3, [r4, #6]
 801a6ca:	e5c9      	b.n	801a260 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801a6cc:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801a6d0:	3e01      	subs	r6, #1
 801a6d2:	445c      	add	r4, fp
 801a6d4:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801a6d8:	f04f 37ff 	mov.w	r7, #4294967295
 801a6dc:	2500      	movs	r5, #0
 801a6de:	9305      	str	r3, [sp, #20]
 801a6e0:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801a6e4:	1e72      	subs	r2, r6, #1
 801a6e6:	9302      	str	r3, [sp, #8]
 801a6e8:	4691      	mov	r9, r2
 801a6ea:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801a6ee:	9304      	str	r3, [sp, #16]
 801a6f0:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801a6f4:	f1b9 3fff 	cmp.w	r9, #4294967295
 801a6f8:	6818      	ldr	r0, [r3, #0]
 801a6fa:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801a6fe:	9207      	str	r2, [sp, #28]
 801a700:	bf16      	itet	ne
 801a702:	9905      	ldrne	r1, [sp, #20]
 801a704:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801a708:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801a70c:	9306      	str	r3, [sp, #24]
 801a70e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801a712:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801a716:	fb18 f801 	smulbb	r8, r8, r1
 801a71a:	6859      	ldr	r1, [r3, #4]
 801a71c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801a720:	4671      	mov	r1, lr
 801a722:	a80c      	add	r0, sp, #48	; 0x30
 801a724:	f7ff fc5e 	bl	8019fe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a728:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801a72c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801a730:	f04f 0c08 	mov.w	ip, #8
 801a734:	9b04      	ldr	r3, [sp, #16]
 801a736:	9a02      	ldr	r2, [sp, #8]
 801a738:	fb10 f001 	smulbb	r0, r0, r1
 801a73c:	fb02 8803 	mla	r8, r2, r3, r8
 801a740:	eba0 0108 	sub.w	r1, r0, r8
 801a744:	fb90 f0fc 	sdiv	r0, r0, ip
 801a748:	4288      	cmp	r0, r1
 801a74a:	dc20      	bgt.n	801a78e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801a74c:	4551      	cmp	r1, sl
 801a74e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801a752:	da03      	bge.n	801a75c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801a754:	b1d9      	cbz	r1, 801a78e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801a756:	468a      	mov	sl, r1
 801a758:	464f      	mov	r7, r9
 801a75a:	4635      	mov	r5, r6
 801a75c:	f109 39ff 	add.w	r9, r9, #4294967295
 801a760:	f119 0f02 	cmn.w	r9, #2
 801a764:	d1c6      	bne.n	801a6f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801a766:	4616      	mov	r6, r2
 801a768:	3201      	adds	r2, #1
 801a76a:	f1a4 0408 	sub.w	r4, r4, #8
 801a76e:	d1b7      	bne.n	801a6e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801a770:	9b01      	ldr	r3, [sp, #4]
 801a772:	b2ac      	uxth	r4, r5
 801a774:	00ed      	lsls	r5, r5, #3
 801a776:	1958      	adds	r0, r3, r5
 801a778:	1c7b      	adds	r3, r7, #1
 801a77a:	d10b      	bne.n	801a794 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801a77c:	4601      	mov	r1, r0
 801a77e:	9803      	ldr	r0, [sp, #12]
 801a780:	f7ff fc30 	bl	8019fe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a784:	4621      	mov	r1, r4
 801a786:	9801      	ldr	r0, [sp, #4]
 801a788:	f7ff fcd6 	bl	801a138 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801a78c:	e4fe      	b.n	801a18c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801a78e:	464f      	mov	r7, r9
 801a790:	4635      	mov	r5, r6
 801a792:	e7ed      	b.n	801a770 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801a794:	9b01      	ldr	r3, [sp, #4]
 801a796:	00ff      	lsls	r7, r7, #3
 801a798:	445d      	add	r5, fp
 801a79a:	19d9      	adds	r1, r3, r7
 801a79c:	445f      	add	r7, fp
 801a79e:	f7ff fc21 	bl	8019fe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a7a2:	9b03      	ldr	r3, [sp, #12]
 801a7a4:	cb03      	ldmia	r3!, {r0, r1}
 801a7a6:	9b03      	ldr	r3, [sp, #12]
 801a7a8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801a7ac:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801a7b0:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801a7b4:	6869      	ldr	r1, [r5, #4]
 801a7b6:	c303      	stmia	r3!, {r0, r1}
 801a7b8:	e7e4      	b.n	801a784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801a7ba:	bf00      	nop

0801a7bc <_ZN8touchgfx11Application10invalidateEv>:
 801a7bc:	4b09      	ldr	r3, [pc, #36]	; (801a7e4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801a7be:	b082      	sub	sp, #8
 801a7c0:	2100      	movs	r1, #0
 801a7c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a7c6:	4b08      	ldr	r3, [pc, #32]	; (801a7e8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801a7c8:	9100      	str	r1, [sp, #0]
 801a7ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a7ce:	f8ad 2004 	strh.w	r2, [sp, #4]
 801a7d2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801a7d6:	ab02      	add	r3, sp, #8
 801a7d8:	e913 0006 	ldmdb	r3, {r1, r2}
 801a7dc:	b002      	add	sp, #8
 801a7de:	f7ff bcbf 	b.w	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a7e2:	bf00      	nop
 801a7e4:	2003bed4 	.word	0x2003bed4
 801a7e8:	2003bed6 	.word	0x2003bed6

0801a7ec <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801a7ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a7f0:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801a7f4:	b09b      	sub	sp, #108	; 0x6c
 801a7f6:	4604      	mov	r4, r0
 801a7f8:	4630      	mov	r0, r6
 801a7fa:	f7fa ff16 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a7fe:	4605      	mov	r5, r0
 801a800:	b940      	cbnz	r0, 801a814 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801a802:	4620      	mov	r0, r4
 801a804:	e896 0006 	ldmia.w	r6, {r1, r2}
 801a808:	f7ff fcaa 	bl	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a80c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801a810:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801a814:	4bc8      	ldr	r3, [pc, #800]	; (801ab38 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801a816:	681b      	ldr	r3, [r3, #0]
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d03e      	beq.n	801a89a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801a81c:	4dc7      	ldr	r5, [pc, #796]	; (801ab3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801a81e:	4628      	mov	r0, r5
 801a820:	f7fa ff03 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a824:	4606      	mov	r6, r0
 801a826:	2800      	cmp	r0, #0
 801a828:	d137      	bne.n	801a89a <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801a82a:	4628      	mov	r0, r5
 801a82c:	f7ff fa0c 	bl	8019c48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801a830:	6829      	ldr	r1, [r5, #0]
 801a832:	686a      	ldr	r2, [r5, #4]
 801a834:	4620      	mov	r0, r4
 801a836:	f7ff fc93 	bl	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a83a:	802e      	strh	r6, [r5, #0]
 801a83c:	806e      	strh	r6, [r5, #2]
 801a83e:	80ae      	strh	r6, [r5, #4]
 801a840:	80ee      	strh	r6, [r5, #6]
 801a842:	ae09      	add	r6, sp, #36	; 0x24
 801a844:	4630      	mov	r0, r6
 801a846:	f7ff fc24 	bl	801a092 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801a84a:	4abd      	ldr	r2, [pc, #756]	; (801ab40 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801a84c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801a850:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801a854:	8815      	ldrh	r5, [r2, #0]
 801a856:	9202      	str	r2, [sp, #8]
 801a858:	462b      	mov	r3, r5
 801a85a:	429f      	cmp	r7, r3
 801a85c:	d924      	bls.n	801a8a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801a85e:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801a862:	2907      	cmp	r1, #7
 801a864:	d816      	bhi.n	801a894 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801a866:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801a86a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801a86e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801a872:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801a876:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801a87a:	1c4a      	adds	r2, r1, #1
 801a87c:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801a880:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801a884:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801a888:	f8a2 9002 	strh.w	r9, [r2, #2]
 801a88c:	f8a2 e004 	strh.w	lr, [r2, #4]
 801a890:	f8a2 c006 	strh.w	ip, [r2, #6]
 801a894:	3301      	adds	r3, #1
 801a896:	b29b      	uxth	r3, r3
 801a898:	e7df      	b.n	801a85a <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801a89a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a89e:	2b00      	cmp	r3, #0
 801a8a0:	d1cf      	bne.n	801a842 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801a8a2:	b01b      	add	sp, #108	; 0x6c
 801a8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8a8:	462f      	mov	r7, r5
 801a8aa:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801a8ae:	42bb      	cmp	r3, r7
 801a8b0:	d90b      	bls.n	801a8ca <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801a8b2:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801a8b6:	3701      	adds	r7, #1
 801a8b8:	4620      	mov	r0, r4
 801a8ba:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801a8be:	b2bf      	uxth	r7, r7
 801a8c0:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801a8c4:	f7ff fc4c 	bl	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801a8c8:	e7ef      	b.n	801a8aa <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801a8ca:	4a9e      	ldr	r2, [pc, #632]	; (801ab44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801a8cc:	6813      	ldr	r3, [r2, #0]
 801a8ce:	4690      	mov	r8, r2
 801a8d0:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801a8d4:	2b01      	cmp	r3, #1
 801a8d6:	f040 80e4 	bne.w	801aaa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801a8da:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801a8de:	4629      	mov	r1, r5
 801a8e0:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801a8e4:	2500      	movs	r5, #0
 801a8e6:	33aa      	adds	r3, #170	; 0xaa
 801a8e8:	428f      	cmp	r7, r1
 801a8ea:	f103 0308 	add.w	r3, r3, #8
 801a8ee:	dd0a      	ble.n	801a906 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801a8f0:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801a8f4:	3101      	adds	r1, #1
 801a8f6:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801a8fa:	4402      	add	r2, r0
 801a8fc:	b212      	sxth	r2, r2
 801a8fe:	4295      	cmp	r5, r2
 801a900:	bfb8      	it	lt
 801a902:	4615      	movlt	r5, r2
 801a904:	e7f0      	b.n	801a8e8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801a906:	4b90      	ldr	r3, [pc, #576]	; (801ab48 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801a908:	f8df b238 	ldr.w	fp, [pc, #568]	; 801ab44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801a90c:	881b      	ldrh	r3, [r3, #0]
 801a90e:	46d8      	mov	r8, fp
 801a910:	2b0f      	cmp	r3, #15
 801a912:	bf8c      	ite	hi
 801a914:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801a918:	f04f 0a01 	movls.w	sl, #1
 801a91c:	2300      	movs	r3, #0
 801a91e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801a922:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801a926:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801a92a:	4438      	add	r0, r7
 801a92c:	b207      	sxth	r7, r0
 801a92e:	f8db 0000 	ldr.w	r0, [fp]
 801a932:	42bd      	cmp	r5, r7
 801a934:	6803      	ldr	r3, [r0, #0]
 801a936:	f340 8084 	ble.w	801aa42 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801a93a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a93e:	4798      	blx	r3
 801a940:	eb07 030a 	add.w	r3, r7, sl
 801a944:	4298      	cmp	r0, r3
 801a946:	da07      	bge.n	801a958 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801a948:	4285      	cmp	r5, r0
 801a94a:	dd05      	ble.n	801a958 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801a94c:	4287      	cmp	r7, r0
 801a94e:	dd6d      	ble.n	801aa2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a950:	2f00      	cmp	r7, #0
 801a952:	dd6b      	ble.n	801aa2c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801a954:	4628      	mov	r0, r5
 801a956:	e004      	b.n	801a962 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801a958:	4287      	cmp	r7, r0
 801a95a:	dcfb      	bgt.n	801a954 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801a95c:	42a8      	cmp	r0, r5
 801a95e:	bfa8      	it	ge
 801a960:	4628      	movge	r0, r5
 801a962:	4b7a      	ldr	r3, [pc, #488]	; (801ab4c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801a964:	1bc0      	subs	r0, r0, r7
 801a966:	2200      	movs	r2, #0
 801a968:	f8ad 7016 	strh.w	r7, [sp, #22]
 801a96c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a970:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a974:	f8ad 3018 	strh.w	r3, [sp, #24]
 801a978:	9b02      	ldr	r3, [sp, #8]
 801a97a:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a97e:	881f      	ldrh	r7, [r3, #0]
 801a980:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801a984:	42bb      	cmp	r3, r7
 801a986:	d9cc      	bls.n	801a922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801a988:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801a98c:	ab07      	add	r3, sp, #28
 801a98e:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801a992:	6851      	ldr	r1, [r2, #4]
 801a994:	c303      	stmia	r3!, {r0, r1}
 801a996:	a905      	add	r1, sp, #20
 801a998:	a807      	add	r0, sp, #28
 801a99a:	f7ff fa8b 	bl	8019eb4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801a99e:	2800      	cmp	r0, #0
 801a9a0:	d04c      	beq.n	801aa3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801a9a2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801a9a6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801a9aa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801a9ae:	4686      	mov	lr, r0
 801a9b0:	4290      	cmp	r0, r2
 801a9b2:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801a9b6:	4448      	add	r0, r9
 801a9b8:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801a9bc:	bfb8      	it	lt
 801a9be:	4696      	movlt	lr, r2
 801a9c0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801a9c4:	444a      	add	r2, r9
 801a9c6:	b280      	uxth	r0, r0
 801a9c8:	4299      	cmp	r1, r3
 801a9ca:	468c      	mov	ip, r1
 801a9cc:	b292      	uxth	r2, r2
 801a9ce:	9303      	str	r3, [sp, #12]
 801a9d0:	bfb8      	it	lt
 801a9d2:	469c      	movlt	ip, r3
 801a9d4:	b203      	sxth	r3, r0
 801a9d6:	fa0f f982 	sxth.w	r9, r2
 801a9da:	f8ad e01c 	strh.w	lr, [sp, #28]
 801a9de:	f8ad c01e 	strh.w	ip, [sp, #30]
 801a9e2:	454b      	cmp	r3, r9
 801a9e4:	bfb8      	it	lt
 801a9e6:	4602      	movlt	r2, r0
 801a9e8:	9b03      	ldr	r3, [sp, #12]
 801a9ea:	eba2 020e 	sub.w	r2, r2, lr
 801a9ee:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a9f2:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801a9f6:	4411      	add	r1, r2
 801a9f8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a9fc:	4413      	add	r3, r2
 801a9fe:	b289      	uxth	r1, r1
 801aa00:	b29b      	uxth	r3, r3
 801aa02:	b208      	sxth	r0, r1
 801aa04:	b21a      	sxth	r2, r3
 801aa06:	4290      	cmp	r0, r2
 801aa08:	bfb8      	it	lt
 801aa0a:	460b      	movlt	r3, r1
 801aa0c:	eba3 030c 	sub.w	r3, r3, ip
 801aa10:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801aa14:	a807      	add	r0, sp, #28
 801aa16:	f7fa fe08 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801aa1a:	b920      	cbnz	r0, 801aa26 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801aa1c:	6823      	ldr	r3, [r4, #0]
 801aa1e:	a907      	add	r1, sp, #28
 801aa20:	4620      	mov	r0, r4
 801aa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa24:	4798      	blx	r3
 801aa26:	3701      	adds	r7, #1
 801aa28:	b2bf      	uxth	r7, r7
 801aa2a:	e7a9      	b.n	801a980 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801aa2c:	f8d8 0000 	ldr.w	r0, [r8]
 801aa30:	2101      	movs	r1, #1
 801aa32:	6803      	ldr	r3, [r0, #0]
 801aa34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801aa38:	4798      	blx	r3
 801aa3a:	e772      	b.n	801a922 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801aa3c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801aa40:	e7e8      	b.n	801aa14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801aa42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801aa44:	4798      	blx	r3
 801aa46:	4b42      	ldr	r3, [pc, #264]	; (801ab50 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801aa48:	781b      	ldrb	r3, [r3, #0]
 801aa4a:	2b00      	cmp	r3, #0
 801aa4c:	f43f af29 	beq.w	801a8a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801aa50:	2300      	movs	r3, #0
 801aa52:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801aa56:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801aa5a:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801aa5e:	9b02      	ldr	r3, [sp, #8]
 801aa60:	881b      	ldrh	r3, [r3, #0]
 801aa62:	429d      	cmp	r5, r3
 801aa64:	f67f af1d 	bls.w	801a8a2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801aa68:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801aa6c:	2907      	cmp	r1, #7
 801aa6e:	d815      	bhi.n	801aa9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801aa70:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801aa74:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801aa78:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801aa7c:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801aa80:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801aa84:	1c4a      	adds	r2, r1, #1
 801aa86:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801aa8a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801aa8e:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801aa92:	f8a2 e002 	strh.w	lr, [r2, #2]
 801aa96:	f8a2 c004 	strh.w	ip, [r2, #4]
 801aa9a:	80d7      	strh	r7, [r2, #6]
 801aa9c:	3301      	adds	r3, #1
 801aa9e:	b29b      	uxth	r3, r3
 801aaa0:	e7df      	b.n	801aa62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801aaa2:	2b02      	cmp	r3, #2
 801aaa4:	f040 8135 	bne.w	801ad12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801aaa8:	4b2a      	ldr	r3, [pc, #168]	; (801ab54 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801aaaa:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801aaae:	781b      	ldrb	r3, [r3, #0]
 801aab0:	2b01      	cmp	r3, #1
 801aab2:	f000 809c 	beq.w	801abee <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801aab6:	9b02      	ldr	r3, [sp, #8]
 801aab8:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801aabc:	f8b3 b000 	ldrh.w	fp, [r3]
 801aac0:	f10b 0b01 	add.w	fp, fp, #1
 801aac4:	fa1f fb8b 	uxth.w	fp, fp
 801aac8:	2a00      	cmp	r2, #0
 801aaca:	d0bc      	beq.n	801aa46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801aacc:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801aad0:	4659      	mov	r1, fp
 801aad2:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801aad6:	f04f 0800 	mov.w	r8, #0
 801aada:	441d      	add	r5, r3
 801aadc:	b22d      	sxth	r5, r5
 801aade:	b28b      	uxth	r3, r1
 801aae0:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801aae4:	429a      	cmp	r2, r3
 801aae6:	f240 80c0 	bls.w	801ac6a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801aaea:	4427      	add	r7, r4
 801aaec:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801aaf0:	4608      	mov	r0, r1
 801aaf2:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801aaf6:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801aafa:	4563      	cmp	r3, ip
 801aafc:	f340 80a2 	ble.w	801ac44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801ab00:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801ab04:	4465      	add	r5, ip
 801ab06:	b22d      	sxth	r5, r5
 801ab08:	429d      	cmp	r5, r3
 801ab0a:	bfa8      	it	ge
 801ab0c:	461d      	movge	r5, r3
 801ab0e:	3101      	adds	r1, #1
 801ab10:	4680      	mov	r8, r0
 801ab12:	e7e4      	b.n	801aade <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801ab14:	d10b      	bne.n	801ab2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801ab16:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801ab1a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801ab1e:	458c      	cmp	ip, r1
 801ab20:	bfb4      	ite	lt
 801ab22:	469c      	movlt	ip, r3
 801ab24:	46bc      	movge	ip, r7
 801ab26:	4572      	cmp	r2, lr
 801ab28:	bfb8      	it	lt
 801ab2a:	4672      	movlt	r2, lr
 801ab2c:	e087      	b.n	801ac3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801ab2e:	428a      	cmp	r2, r1
 801ab30:	46bc      	mov	ip, r7
 801ab32:	bfb8      	it	lt
 801ab34:	460a      	movlt	r2, r1
 801ab36:	e082      	b.n	801ac3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801ab38:	2003bf20 	.word	0x2003bf20
 801ab3c:	2003bf2c 	.word	0x2003bf2c
 801ab40:	20000038 	.word	0x20000038
 801ab44:	2003bee0 	.word	0x2003bee0
 801ab48:	2003bed6 	.word	0x2003bed6
 801ab4c:	2003bed4 	.word	0x2003bed4
 801ab50:	2003bede 	.word	0x2003bede
 801ab54:	2003bed8 	.word	0x2003bed8
 801ab58:	1961      	adds	r1, r4, r5
 801ab5a:	ab07      	add	r3, sp, #28
 801ab5c:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801ab60:	6849      	ldr	r1, [r1, #4]
 801ab62:	c303      	stmia	r3!, {r0, r1}
 801ab64:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801ab68:	a807      	add	r0, sp, #28
 801ab6a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801ab6e:	2b13      	cmp	r3, #19
 801ab70:	440b      	add	r3, r1
 801ab72:	bfd8      	it	le
 801ab74:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801ab78:	1a9b      	subs	r3, r3, r2
 801ab7a:	f8ad 201c 	strh.w	r2, [sp, #28]
 801ab7e:	f8ad 3020 	strh.w	r3, [sp, #32]
 801ab82:	f7ff f87b 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ab86:	a807      	add	r0, sp, #28
 801ab88:	f7fa fd4f 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ab8c:	bb78      	cbnz	r0, 801abee <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801ab8e:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801ab92:	4425      	add	r5, r4
 801ab94:	f8d8 0000 	ldr.w	r0, [r8]
 801ab98:	f1bc 0f14 	cmp.w	ip, #20
 801ab9c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801aba0:	f8d0 e000 	ldr.w	lr, [r0]
 801aba4:	bfa8      	it	ge
 801aba6:	f04f 0c14 	movge.w	ip, #20
 801abaa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801abae:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801abb2:	fa1f fc8c 	uxth.w	ip, ip
 801abb6:	f8cd c000 	str.w	ip, [sp]
 801abba:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801abbe:	47d0      	blx	sl
 801abc0:	4682      	mov	sl, r0
 801abc2:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801abc6:	a807      	add	r0, sp, #28
 801abc8:	f7ff f83e 	bl	8019c48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801abcc:	6823      	ldr	r3, [r4, #0]
 801abce:	4620      	mov	r0, r4
 801abd0:	a907      	add	r1, sp, #28
 801abd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801abd4:	4798      	blx	r3
 801abd6:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801abda:	eba0 000a 	sub.w	r0, r0, sl
 801abde:	b200      	sxth	r0, r0
 801abe0:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801abe4:	b918      	cbnz	r0, 801abee <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801abe6:	b2b9      	uxth	r1, r7
 801abe8:	4648      	mov	r0, r9
 801abea:	f7ff faa5 	bl	801a138 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801abee:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801abf2:	f1bb 0f00 	cmp.w	fp, #0
 801abf6:	f43f af26 	beq.w	801aa46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801abfa:	9b02      	ldr	r3, [sp, #8]
 801abfc:	2700      	movs	r7, #0
 801abfe:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801ac02:	881b      	ldrh	r3, [r3, #0]
 801ac04:	3301      	adds	r3, #1
 801ac06:	b29b      	uxth	r3, r3
 801ac08:	b299      	uxth	r1, r3
 801ac0a:	00fd      	lsls	r5, r7, #3
 801ac0c:	458b      	cmp	fp, r1
 801ac0e:	d9a3      	bls.n	801ab58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801ac10:	4425      	add	r5, r4
 801ac12:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801ac16:	469c      	mov	ip, r3
 801ac18:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801ac1c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801ac20:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801ac24:	4408      	add	r0, r1
 801ac26:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801ac2a:	4471      	add	r1, lr
 801ac2c:	b200      	sxth	r0, r0
 801ac2e:	b209      	sxth	r1, r1
 801ac30:	4288      	cmp	r0, r1
 801ac32:	f6bf af6f 	bge.w	801ab14 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801ac36:	4586      	cmp	lr, r0
 801ac38:	4672      	mov	r2, lr
 801ac3a:	bfb8      	it	lt
 801ac3c:	4602      	movlt	r2, r0
 801ac3e:	3301      	adds	r3, #1
 801ac40:	4667      	mov	r7, ip
 801ac42:	e7e1      	b.n	801ac08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801ac44:	d10c      	bne.n	801ac60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801ac46:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801ac4a:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801ac4e:	4287      	cmp	r7, r0
 801ac50:	bfb4      	ite	lt
 801ac52:	4608      	movlt	r0, r1
 801ac54:	4640      	movge	r0, r8
 801ac56:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801ac5a:	443b      	add	r3, r7
 801ac5c:	b21b      	sxth	r3, r3
 801ac5e:	e753      	b.n	801ab08 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801ac60:	4565      	cmp	r5, ip
 801ac62:	4640      	mov	r0, r8
 801ac64:	bfa8      	it	ge
 801ac66:	4665      	movge	r5, ip
 801ac68:	e751      	b.n	801ab0e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801ac6a:	eb09 0007 	add.w	r0, r9, r7
 801ac6e:	4427      	add	r7, r4
 801ac70:	9203      	str	r2, [sp, #12]
 801ac72:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801ac76:	f1ba 0f13 	cmp.w	sl, #19
 801ac7a:	bfde      	ittt	le
 801ac7c:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801ac80:	4455      	addle	r5, sl
 801ac82:	b22d      	sxthle	r5, r5
 801ac84:	f7fa fcd1 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ac88:	9a03      	ldr	r2, [sp, #12]
 801ac8a:	2800      	cmp	r0, #0
 801ac8c:	f47f af1c 	bne.w	801aac8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801ac90:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801ac94:	fa1f fa8a 	uxth.w	sl, sl
 801ac98:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801ac9c:	1aad      	subs	r5, r5, r2
 801ac9e:	4829      	ldr	r0, [pc, #164]	; (801ad44 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801aca0:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801aca4:	2d14      	cmp	r5, #20
 801aca6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801acaa:	6800      	ldr	r0, [r0, #0]
 801acac:	bfa8      	it	ge
 801acae:	2514      	movge	r5, #20
 801acb0:	f8ad 101c 	strh.w	r1, [sp, #28]
 801acb4:	f8ad 201e 	strh.w	r2, [sp, #30]
 801acb8:	b289      	uxth	r1, r1
 801acba:	f8ad 3020 	strh.w	r3, [sp, #32]
 801acbe:	b2ad      	uxth	r5, r5
 801acc0:	f8d0 c000 	ldr.w	ip, [r0]
 801acc4:	b292      	uxth	r2, r2
 801acc6:	4555      	cmp	r5, sl
 801acc8:	bf94      	ite	ls
 801acca:	9500      	strls	r5, [sp, #0]
 801accc:	f8cd a000 	strhi.w	sl, [sp]
 801acd0:	b29b      	uxth	r3, r3
 801acd2:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801acd6:	47a8      	blx	r5
 801acd8:	6823      	ldr	r3, [r4, #0]
 801acda:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801acde:	a907      	add	r1, sp, #28
 801ace0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ace2:	4620      	mov	r0, r4
 801ace4:	4798      	blx	r3
 801ace6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801acea:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801acee:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801acf2:	1a5b      	subs	r3, r3, r1
 801acf4:	440a      	add	r2, r1
 801acf6:	b21b      	sxth	r3, r3
 801acf8:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801acfc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801ad00:	2b00      	cmp	r3, #0
 801ad02:	f47f aed8 	bne.w	801aab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801ad06:	fa1f f188 	uxth.w	r1, r8
 801ad0a:	4648      	mov	r0, r9
 801ad0c:	f7ff fa14 	bl	801a138 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ad10:	e6d1      	b.n	801aab6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801ad12:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ad16:	42ab      	cmp	r3, r5
 801ad18:	f67f ae95 	bls.w	801aa46 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801ad1c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ad20:	ab07      	add	r3, sp, #28
 801ad22:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ad26:	6851      	ldr	r1, [r2, #4]
 801ad28:	c303      	stmia	r3!, {r0, r1}
 801ad2a:	a807      	add	r0, sp, #28
 801ad2c:	f7fa fc7d 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801ad30:	b920      	cbnz	r0, 801ad3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801ad32:	6823      	ldr	r3, [r4, #0]
 801ad34:	a907      	add	r1, sp, #28
 801ad36:	4620      	mov	r0, r4
 801ad38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ad3a:	4798      	blx	r3
 801ad3c:	3501      	adds	r5, #1
 801ad3e:	b2ad      	uxth	r5, r5
 801ad40:	e7e7      	b.n	801ad12 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801ad42:	bf00      	nop
 801ad44:	2003bee0 	.word	0x2003bee0

0801ad48 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801ad48:	4b03      	ldr	r3, [pc, #12]	; (801ad58 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801ad4a:	2200      	movs	r2, #0
 801ad4c:	801a      	strh	r2, [r3, #0]
 801ad4e:	805a      	strh	r2, [r3, #2]
 801ad50:	809a      	strh	r2, [r3, #4]
 801ad52:	80da      	strh	r2, [r3, #6]
 801ad54:	4770      	bx	lr
 801ad56:	bf00      	nop
 801ad58:	2003bf2c 	.word	0x2003bf2c

0801ad5c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801ad5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad60:	b09d      	sub	sp, #116	; 0x74
 801ad62:	4606      	mov	r6, r0
 801ad64:	4614      	mov	r4, r2
 801ad66:	468a      	mov	sl, r1
 801ad68:	a803      	add	r0, sp, #12
 801ad6a:	461d      	mov	r5, r3
 801ad6c:	f000 fe2e 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 801ad70:	6833      	ldr	r3, [r6, #0]
 801ad72:	4630      	mov	r0, r6
 801ad74:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801ad78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ad7a:	4798      	blx	r3
 801ad7c:	6833      	ldr	r3, [r6, #0]
 801ad7e:	4607      	mov	r7, r0
 801ad80:	4630      	mov	r0, r6
 801ad82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ad84:	4798      	blx	r3
 801ad86:	462a      	mov	r2, r5
 801ad88:	2500      	movs	r5, #0
 801ad8a:	4621      	mov	r1, r4
 801ad8c:	9000      	str	r0, [sp, #0]
 801ad8e:	463b      	mov	r3, r7
 801ad90:	462c      	mov	r4, r5
 801ad92:	46a9      	mov	r9, r5
 801ad94:	46a8      	mov	r8, r5
 801ad96:	a803      	add	r0, sp, #12
 801ad98:	f000 fe73 	bl	801ba82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ad9c:	2300      	movs	r3, #0
 801ad9e:	9302      	str	r3, [sp, #8]
 801ada0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801ada4:	429c      	cmp	r4, r3
 801ada6:	d002      	beq.n	801adae <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801ada8:	455c      	cmp	r4, fp
 801adaa:	bf18      	it	ne
 801adac:	4625      	movne	r5, r4
 801adae:	ab02      	add	r3, sp, #8
 801adb0:	4632      	mov	r2, r6
 801adb2:	4651      	mov	r1, sl
 801adb4:	a803      	add	r0, sp, #12
 801adb6:	f001 f969 	bl	801c08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801adba:	4604      	mov	r4, r0
 801adbc:	b108      	cbz	r0, 801adc2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801adbe:	280a      	cmp	r0, #10
 801adc0:	d10a      	bne.n	801add8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801adc2:	45c1      	cmp	r9, r8
 801adc4:	bf38      	it	cc
 801adc6:	46c1      	movcc	r9, r8
 801adc8:	f04f 0800 	mov.w	r8, #0
 801adcc:	2c00      	cmp	r4, #0
 801adce:	d1e5      	bne.n	801ad9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801add0:	4648      	mov	r0, r9
 801add2:	b01d      	add	sp, #116	; 0x74
 801add4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801add8:	9a02      	ldr	r2, [sp, #8]
 801adda:	2a00      	cmp	r2, #0
 801addc:	d0de      	beq.n	801ad9c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801adde:	7b57      	ldrb	r7, [r2, #13]
 801ade0:	4629      	mov	r1, r5
 801ade2:	6833      	ldr	r3, [r6, #0]
 801ade4:	007f      	lsls	r7, r7, #1
 801ade6:	8894      	ldrh	r4, [r2, #4]
 801ade8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801adea:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801adee:	7a97      	ldrb	r7, [r2, #10]
 801adf0:	4307      	orrs	r7, r0
 801adf2:	4630      	mov	r0, r6
 801adf4:	4798      	blx	r3
 801adf6:	4438      	add	r0, r7
 801adf8:	4480      	add	r8, r0
 801adfa:	fa1f f888 	uxth.w	r8, r8
 801adfe:	e7e5      	b.n	801adcc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801ae00 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ae00:	b508      	push	{r3, lr}
 801ae02:	6803      	ldr	r3, [r0, #0]
 801ae04:	68db      	ldr	r3, [r3, #12]
 801ae06:	4798      	blx	r3
 801ae08:	b128      	cbz	r0, 801ae16 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801ae0a:	7b43      	ldrb	r3, [r0, #13]
 801ae0c:	7a80      	ldrb	r0, [r0, #10]
 801ae0e:	005b      	lsls	r3, r3, #1
 801ae10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ae14:	4318      	orrs	r0, r3
 801ae16:	bd08      	pop	{r3, pc}

0801ae18 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ae18:	b40e      	push	{r1, r2, r3}
 801ae1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ae1c:	b09e      	sub	sp, #120	; 0x78
 801ae1e:	4605      	mov	r5, r0
 801ae20:	ab23      	add	r3, sp, #140	; 0x8c
 801ae22:	a805      	add	r0, sp, #20
 801ae24:	f853 4b04 	ldr.w	r4, [r3], #4
 801ae28:	9303      	str	r3, [sp, #12]
 801ae2a:	f000 fdcf 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 801ae2e:	682b      	ldr	r3, [r5, #0]
 801ae30:	4628      	mov	r0, r5
 801ae32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ae34:	4798      	blx	r3
 801ae36:	682b      	ldr	r3, [r5, #0]
 801ae38:	4606      	mov	r6, r0
 801ae3a:	4628      	mov	r0, r5
 801ae3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801ae3e:	4798      	blx	r3
 801ae40:	4633      	mov	r3, r6
 801ae42:	4621      	mov	r1, r4
 801ae44:	ae1e      	add	r6, sp, #120	; 0x78
 801ae46:	2400      	movs	r4, #0
 801ae48:	9000      	str	r0, [sp, #0]
 801ae4a:	9a03      	ldr	r2, [sp, #12]
 801ae4c:	a805      	add	r0, sp, #20
 801ae4e:	f000 fe18 	bl	801ba82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ae52:	f846 4d68 	str.w	r4, [r6, #-104]!
 801ae56:	462a      	mov	r2, r5
 801ae58:	4633      	mov	r3, r6
 801ae5a:	4621      	mov	r1, r4
 801ae5c:	a805      	add	r0, sp, #20
 801ae5e:	f001 f915 	bl	801c08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801ae62:	b300      	cbz	r0, 801aea6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801ae64:	280a      	cmp	r0, #10
 801ae66:	d01a      	beq.n	801ae9e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ae68:	9f04      	ldr	r7, [sp, #16]
 801ae6a:	b1c7      	cbz	r7, 801ae9e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801ae6c:	7b78      	ldrb	r0, [r7, #13]
 801ae6e:	7a3b      	ldrb	r3, [r7, #8]
 801ae70:	00c1      	lsls	r1, r0, #3
 801ae72:	88aa      	ldrh	r2, [r5, #4]
 801ae74:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801ae78:	4319      	orrs	r1, r3
 801ae7a:	0643      	lsls	r3, r0, #25
 801ae7c:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801ae80:	bf48      	it	mi
 801ae82:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801ae86:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801ae8a:	bf48      	it	mi
 801ae8c:	b219      	sxthmi	r1, r3
 801ae8e:	79fb      	ldrb	r3, [r7, #7]
 801ae90:	4303      	orrs	r3, r0
 801ae92:	4413      	add	r3, r2
 801ae94:	1a5b      	subs	r3, r3, r1
 801ae96:	b29b      	uxth	r3, r3
 801ae98:	42a3      	cmp	r3, r4
 801ae9a:	bfc8      	it	gt
 801ae9c:	b21c      	sxthgt	r4, r3
 801ae9e:	4633      	mov	r3, r6
 801aea0:	462a      	mov	r2, r5
 801aea2:	2100      	movs	r1, #0
 801aea4:	e7da      	b.n	801ae5c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801aea6:	b2a0      	uxth	r0, r4
 801aea8:	b01e      	add	sp, #120	; 0x78
 801aeaa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801aeae:	b003      	add	sp, #12
 801aeb0:	4770      	bx	lr

0801aeb2 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801aeb2:	b40e      	push	{r1, r2, r3}
 801aeb4:	b570      	push	{r4, r5, r6, lr}
 801aeb6:	b09d      	sub	sp, #116	; 0x74
 801aeb8:	4604      	mov	r4, r0
 801aeba:	ab21      	add	r3, sp, #132	; 0x84
 801aebc:	a803      	add	r0, sp, #12
 801aebe:	f853 5b04 	ldr.w	r5, [r3], #4
 801aec2:	9302      	str	r3, [sp, #8]
 801aec4:	f000 fd82 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 801aec8:	6823      	ldr	r3, [r4, #0]
 801aeca:	4620      	mov	r0, r4
 801aecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aece:	4798      	blx	r3
 801aed0:	6823      	ldr	r3, [r4, #0]
 801aed2:	4606      	mov	r6, r0
 801aed4:	4620      	mov	r0, r4
 801aed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aed8:	2401      	movs	r4, #1
 801aeda:	4798      	blx	r3
 801aedc:	4633      	mov	r3, r6
 801aede:	9000      	str	r0, [sp, #0]
 801aee0:	4629      	mov	r1, r5
 801aee2:	9a02      	ldr	r2, [sp, #8]
 801aee4:	a803      	add	r0, sp, #12
 801aee6:	f000 fdcc 	bl	801ba82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801aeea:	a803      	add	r0, sp, #12
 801aeec:	f001 f99a 	bl	801c224 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801aef0:	b2a3      	uxth	r3, r4
 801aef2:	b138      	cbz	r0, 801af04 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801aef4:	280a      	cmp	r0, #10
 801aef6:	a803      	add	r0, sp, #12
 801aef8:	bf04      	itt	eq
 801aefa:	3301      	addeq	r3, #1
 801aefc:	b21c      	sxtheq	r4, r3
 801aefe:	f001 f991 	bl	801c224 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801af02:	e7f5      	b.n	801aef0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801af04:	4618      	mov	r0, r3
 801af06:	b01d      	add	sp, #116	; 0x74
 801af08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801af0c:	b003      	add	sp, #12
 801af0e:	4770      	bx	lr

0801af10 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801af10:	b40e      	push	{r1, r2, r3}
 801af12:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af14:	b09e      	sub	sp, #120	; 0x78
 801af16:	4604      	mov	r4, r0
 801af18:	ab23      	add	r3, sp, #140	; 0x8c
 801af1a:	a805      	add	r0, sp, #20
 801af1c:	f853 5b04 	ldr.w	r5, [r3], #4
 801af20:	9303      	str	r3, [sp, #12]
 801af22:	f000 fd53 	bl	801b9cc <_ZN8touchgfx12TextProviderC1Ev>
 801af26:	6823      	ldr	r3, [r4, #0]
 801af28:	4620      	mov	r0, r4
 801af2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801af2c:	4798      	blx	r3
 801af2e:	6823      	ldr	r3, [r4, #0]
 801af30:	4606      	mov	r6, r0
 801af32:	4620      	mov	r0, r4
 801af34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801af36:	4798      	blx	r3
 801af38:	4633      	mov	r3, r6
 801af3a:	4629      	mov	r1, r5
 801af3c:	9000      	str	r0, [sp, #0]
 801af3e:	9a03      	ldr	r2, [sp, #12]
 801af40:	a805      	add	r0, sp, #20
 801af42:	f000 fd9e 	bl	801ba82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801af46:	ad1e      	add	r5, sp, #120	; 0x78
 801af48:	2100      	movs	r1, #0
 801af4a:	26ff      	movs	r6, #255	; 0xff
 801af4c:	4622      	mov	r2, r4
 801af4e:	a805      	add	r0, sp, #20
 801af50:	f845 1d68 	str.w	r1, [r5, #-104]!
 801af54:	462b      	mov	r3, r5
 801af56:	f001 f899 	bl	801c08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801af5a:	b1d8      	cbz	r0, 801af94 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801af5c:	280a      	cmp	r0, #10
 801af5e:	d012      	beq.n	801af86 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801af60:	9804      	ldr	r0, [sp, #16]
 801af62:	b180      	cbz	r0, 801af86 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801af64:	7b47      	ldrb	r7, [r0, #13]
 801af66:	7922      	ldrb	r2, [r4, #4]
 801af68:	00fb      	lsls	r3, r7, #3
 801af6a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801af6e:	7a03      	ldrb	r3, [r0, #8]
 801af70:	430b      	orrs	r3, r1
 801af72:	0679      	lsls	r1, r7, #25
 801af74:	bf44      	itt	mi
 801af76:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801af7a:	b21b      	sxthmi	r3, r3
 801af7c:	1ad3      	subs	r3, r2, r3
 801af7e:	b2db      	uxtb	r3, r3
 801af80:	429e      	cmp	r6, r3
 801af82:	bf28      	it	cs
 801af84:	461e      	movcs	r6, r3
 801af86:	462b      	mov	r3, r5
 801af88:	4622      	mov	r2, r4
 801af8a:	2100      	movs	r1, #0
 801af8c:	a805      	add	r0, sp, #20
 801af8e:	f001 f87d 	bl	801c08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801af92:	e7e2      	b.n	801af5a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801af94:	4630      	mov	r0, r6
 801af96:	b01e      	add	sp, #120	; 0x78
 801af98:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801af9c:	b003      	add	sp, #12
 801af9e:	4770      	bx	lr

0801afa0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801afa0:	b513      	push	{r0, r1, r4, lr}
 801afa2:	6803      	ldr	r3, [r0, #0]
 801afa4:	2400      	movs	r4, #0
 801afa6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801afaa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801afae:	f8ad 1004 	strh.w	r1, [sp, #4]
 801afb2:	4669      	mov	r1, sp
 801afb4:	691b      	ldr	r3, [r3, #16]
 801afb6:	9400      	str	r4, [sp, #0]
 801afb8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801afbc:	4798      	blx	r3
 801afbe:	b002      	add	sp, #8
 801afc0:	bd10      	pop	{r4, pc}

0801afc2 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801afc2:	b538      	push	{r3, r4, r5, lr}
 801afc4:	680b      	ldr	r3, [r1, #0]
 801afc6:	460c      	mov	r4, r1
 801afc8:	4605      	mov	r5, r0
 801afca:	68db      	ldr	r3, [r3, #12]
 801afcc:	4798      	blx	r3
 801afce:	6823      	ldr	r3, [r4, #0]
 801afd0:	4620      	mov	r0, r4
 801afd2:	4629      	mov	r1, r5
 801afd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801afd6:	4798      	blx	r3
 801afd8:	4628      	mov	r0, r5
 801afda:	bd38      	pop	{r3, r4, r5, pc}

0801afdc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801afdc:	b410      	push	{r4}
 801afde:	880a      	ldrh	r2, [r1, #0]
 801afe0:	8884      	ldrh	r4, [r0, #4]
 801afe2:	4422      	add	r2, r4
 801afe4:	800a      	strh	r2, [r1, #0]
 801afe6:	884a      	ldrh	r2, [r1, #2]
 801afe8:	88c4      	ldrh	r4, [r0, #6]
 801afea:	4422      	add	r2, r4
 801afec:	804a      	strh	r2, [r1, #2]
 801afee:	6940      	ldr	r0, [r0, #20]
 801aff0:	b120      	cbz	r0, 801affc <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801aff2:	6803      	ldr	r3, [r0, #0]
 801aff4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801aff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801affa:	4718      	bx	r3
 801affc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b000:	4770      	bx	lr

0801b002 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801b002:	b570      	push	{r4, r5, r6, lr}
 801b004:	8882      	ldrh	r2, [r0, #4]
 801b006:	460c      	mov	r4, r1
 801b008:	880b      	ldrh	r3, [r1, #0]
 801b00a:	4605      	mov	r5, r0
 801b00c:	4413      	add	r3, r2
 801b00e:	800b      	strh	r3, [r1, #0]
 801b010:	884b      	ldrh	r3, [r1, #2]
 801b012:	88c2      	ldrh	r2, [r0, #6]
 801b014:	4413      	add	r3, r2
 801b016:	804b      	strh	r3, [r1, #2]
 801b018:	1d01      	adds	r1, r0, #4
 801b01a:	4620      	mov	r0, r4
 801b01c:	f7fa fac2 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 801b020:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b024:	2b00      	cmp	r3, #0
 801b026:	dd0b      	ble.n	801b040 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b028:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	dd07      	ble.n	801b040 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b030:	6968      	ldr	r0, [r5, #20]
 801b032:	b128      	cbz	r0, 801b040 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801b034:	6803      	ldr	r3, [r0, #0]
 801b036:	4621      	mov	r1, r4
 801b038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b03a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b03e:	4718      	bx	r3
 801b040:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b044 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801b044:	b570      	push	{r4, r5, r6, lr}
 801b046:	8882      	ldrh	r2, [r0, #4]
 801b048:	460c      	mov	r4, r1
 801b04a:	880b      	ldrh	r3, [r1, #0]
 801b04c:	4605      	mov	r5, r0
 801b04e:	4413      	add	r3, r2
 801b050:	800b      	strh	r3, [r1, #0]
 801b052:	884b      	ldrh	r3, [r1, #2]
 801b054:	88c2      	ldrh	r2, [r0, #6]
 801b056:	4413      	add	r3, r2
 801b058:	804b      	strh	r3, [r1, #2]
 801b05a:	1d01      	adds	r1, r0, #4
 801b05c:	4620      	mov	r0, r4
 801b05e:	f7fa faa1 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 801b062:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801b066:	2b00      	cmp	r3, #0
 801b068:	dd18      	ble.n	801b09c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801b06a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801b06e:	2b00      	cmp	r3, #0
 801b070:	dd14      	ble.n	801b09c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801b072:	6968      	ldr	r0, [r5, #20]
 801b074:	b128      	cbz	r0, 801b082 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801b076:	6803      	ldr	r3, [r0, #0]
 801b078:	4621      	mov	r1, r4
 801b07a:	691b      	ldr	r3, [r3, #16]
 801b07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b080:	4718      	bx	r3
 801b082:	4b07      	ldr	r3, [pc, #28]	; (801b0a0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	3304      	adds	r3, #4
 801b088:	429d      	cmp	r5, r3
 801b08a:	d107      	bne.n	801b09c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801b08c:	f7fe fff0 	bl	801a070 <_ZN8touchgfx11Application11getInstanceEv>
 801b090:	6821      	ldr	r1, [r4, #0]
 801b092:	6862      	ldr	r2, [r4, #4]
 801b094:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b098:	f7ff b862 	b.w	801a160 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b09c:	bd70      	pop	{r4, r5, r6, pc}
 801b09e:	bf00      	nop
 801b0a0:	2003bf24 	.word	0x2003bf24

0801b0a4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801b0a4:	b570      	push	{r4, r5, r6, lr}
 801b0a6:	4604      	mov	r4, r0
 801b0a8:	4616      	mov	r6, r2
 801b0aa:	460d      	mov	r5, r1
 801b0ac:	b901      	cbnz	r1, 801b0b0 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801b0ae:	b192      	cbz	r2, 801b0d6 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801b0b0:	6823      	ldr	r3, [r4, #0]
 801b0b2:	4620      	mov	r0, r4
 801b0b4:	699b      	ldr	r3, [r3, #24]
 801b0b6:	4798      	blx	r3
 801b0b8:	88e2      	ldrh	r2, [r4, #6]
 801b0ba:	88a1      	ldrh	r1, [r4, #4]
 801b0bc:	4620      	mov	r0, r4
 801b0be:	4432      	add	r2, r6
 801b0c0:	4429      	add	r1, r5
 801b0c2:	b212      	sxth	r2, r2
 801b0c4:	b209      	sxth	r1, r1
 801b0c6:	f7f3 fbb5 	bl	800e834 <_ZN8touchgfx8Drawable5setXYEss>
 801b0ca:	6823      	ldr	r3, [r4, #0]
 801b0cc:	4620      	mov	r0, r4
 801b0ce:	699b      	ldr	r3, [r3, #24]
 801b0d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b0d4:	4718      	bx	r3
 801b0d6:	bd70      	pop	{r4, r5, r6, pc}

0801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801b0d8:	b510      	push	{r4, lr}
 801b0da:	2300      	movs	r3, #0
 801b0dc:	4604      	mov	r4, r0
 801b0de:	4608      	mov	r0, r1
 801b0e0:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801b0e4:	8023      	strh	r3, [r4, #0]
 801b0e6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b0ea:	8063      	strh	r3, [r4, #2]
 801b0ec:	6803      	ldr	r3, [r0, #0]
 801b0ee:	80a1      	strh	r1, [r4, #4]
 801b0f0:	4621      	mov	r1, r4
 801b0f2:	80e2      	strh	r2, [r4, #6]
 801b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b0f6:	4798      	blx	r3
 801b0f8:	4620      	mov	r0, r4
 801b0fa:	bd10      	pop	{r4, pc}

0801b0fc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801b0fc:	b530      	push	{r4, r5, lr}
 801b0fe:	8083      	strh	r3, [r0, #4]
 801b100:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801b104:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801b108:	7183      	strb	r3, [r0, #6]
 801b10a:	79c3      	ldrb	r3, [r0, #7]
 801b10c:	6101      	str	r1, [r0, #16]
 801b10e:	f365 0306 	bfi	r3, r5, #0, #7
 801b112:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801b116:	8282      	strh	r2, [r0, #20]
 801b118:	f365 13c7 	bfi	r3, r5, #7, #1
 801b11c:	71c3      	strb	r3, [r0, #7]
 801b11e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801b122:	7203      	strb	r3, [r0, #8]
 801b124:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801b128:	7243      	strb	r3, [r0, #9]
 801b12a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801b12e:	8143      	strh	r3, [r0, #10]
 801b130:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801b134:	8183      	strh	r3, [r0, #12]
 801b136:	4b01      	ldr	r3, [pc, #4]	; (801b13c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801b138:	6003      	str	r3, [r0, #0]
 801b13a:	bd30      	pop	{r4, r5, pc}
 801b13c:	0802f930 	.word	0x0802f930

0801b140 <_ZNK8touchgfx9ConstFont4findEt>:
 801b140:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b142:	6904      	ldr	r4, [r0, #16]
 801b144:	b3bc      	cbz	r4, 801b1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b146:	88a3      	ldrh	r3, [r4, #4]
 801b148:	8a82      	ldrh	r2, [r0, #20]
 801b14a:	1acb      	subs	r3, r1, r3
 801b14c:	f102 32ff 	add.w	r2, r2, #4294967295
 801b150:	d431      	bmi.n	801b1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b152:	4293      	cmp	r3, r2
 801b154:	dd0c      	ble.n	801b170 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801b156:	230e      	movs	r3, #14
 801b158:	fb03 4302 	mla	r3, r3, r2, r4
 801b15c:	889b      	ldrh	r3, [r3, #4]
 801b15e:	1a5b      	subs	r3, r3, r1
 801b160:	1ad3      	subs	r3, r2, r3
 801b162:	429a      	cmp	r2, r3
 801b164:	db27      	blt.n	801b1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b166:	2b00      	cmp	r3, #0
 801b168:	bfbc      	itt	lt
 801b16a:	2302      	movlt	r3, #2
 801b16c:	fb92 f3f3 	sdivlt	r3, r2, r3
 801b170:	2500      	movs	r5, #0
 801b172:	260e      	movs	r6, #14
 801b174:	4295      	cmp	r5, r2
 801b176:	dc1e      	bgt.n	801b1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b178:	fb06 4003 	mla	r0, r6, r3, r4
 801b17c:	8887      	ldrh	r7, [r0, #4]
 801b17e:	42b9      	cmp	r1, r7
 801b180:	d01a      	beq.n	801b1b8 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801b182:	d20d      	bcs.n	801b1a0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801b184:	1e5a      	subs	r2, r3, #1
 801b186:	4295      	cmp	r5, r2
 801b188:	dc15      	bgt.n	801b1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b18a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801b18e:	1a5b      	subs	r3, r3, r1
 801b190:	1ad3      	subs	r3, r2, r3
 801b192:	429a      	cmp	r2, r3
 801b194:	db0f      	blt.n	801b1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b196:	429d      	cmp	r5, r3
 801b198:	ddec      	ble.n	801b174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b19a:	1953      	adds	r3, r2, r5
 801b19c:	105b      	asrs	r3, r3, #1
 801b19e:	e7e9      	b.n	801b174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b1a0:	1c5d      	adds	r5, r3, #1
 801b1a2:	42aa      	cmp	r2, r5
 801b1a4:	db07      	blt.n	801b1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b1a6:	8a43      	ldrh	r3, [r0, #18]
 801b1a8:	1acb      	subs	r3, r1, r3
 801b1aa:	442b      	add	r3, r5
 801b1ac:	429d      	cmp	r5, r3
 801b1ae:	dc02      	bgt.n	801b1b6 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801b1b0:	429a      	cmp	r2, r3
 801b1b2:	dadf      	bge.n	801b174 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801b1b4:	e7f1      	b.n	801b19a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801b1b6:	2000      	movs	r0, #0
 801b1b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b1ba <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801b1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b1bc:	4604      	mov	r4, r0
 801b1be:	4617      	mov	r7, r2
 801b1c0:	461e      	mov	r6, r3
 801b1c2:	b911      	cbnz	r1, 801b1ca <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801b1c4:	2500      	movs	r5, #0
 801b1c6:	4628      	mov	r0, r5
 801b1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b1ca:	290a      	cmp	r1, #10
 801b1cc:	d0fa      	beq.n	801b1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b1ce:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801b1d2:	4291      	cmp	r1, r2
 801b1d4:	d0f6      	beq.n	801b1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b1d6:	f242 020b 	movw	r2, #8203	; 0x200b
 801b1da:	4291      	cmp	r1, r2
 801b1dc:	d0f2      	beq.n	801b1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b1de:	f7ff ffaf 	bl	801b140 <_ZNK8touchgfx9ConstFont4findEt>
 801b1e2:	4605      	mov	r5, r0
 801b1e4:	b950      	cbnz	r0, 801b1fc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801b1e6:	6823      	ldr	r3, [r4, #0]
 801b1e8:	4620      	mov	r0, r4
 801b1ea:	691b      	ldr	r3, [r3, #16]
 801b1ec:	4798      	blx	r3
 801b1ee:	4601      	mov	r1, r0
 801b1f0:	4620      	mov	r0, r4
 801b1f2:	f7ff ffa5 	bl	801b140 <_ZNK8touchgfx9ConstFont4findEt>
 801b1f6:	4605      	mov	r5, r0
 801b1f8:	2800      	cmp	r0, #0
 801b1fa:	d0e3      	beq.n	801b1c4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801b1fc:	6823      	ldr	r3, [r4, #0]
 801b1fe:	4629      	mov	r1, r5
 801b200:	4620      	mov	r0, r4
 801b202:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b204:	4798      	blx	r3
 801b206:	6038      	str	r0, [r7, #0]
 801b208:	6823      	ldr	r3, [r4, #0]
 801b20a:	4620      	mov	r0, r4
 801b20c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b20e:	4798      	blx	r3
 801b210:	7030      	strb	r0, [r6, #0]
 801b212:	e7d8      	b.n	801b1c6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801b214 <_ZN8touchgfx4clzuEm>:
 801b214:	4603      	mov	r3, r0
 801b216:	b1c8      	cbz	r0, 801b24c <_ZN8touchgfx4clzuEm+0x38>
 801b218:	0c02      	lsrs	r2, r0, #16
 801b21a:	0412      	lsls	r2, r2, #16
 801b21c:	b9a2      	cbnz	r2, 801b248 <_ZN8touchgfx4clzuEm+0x34>
 801b21e:	0403      	lsls	r3, r0, #16
 801b220:	2010      	movs	r0, #16
 801b222:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801b226:	bf04      	itt	eq
 801b228:	021b      	lsleq	r3, r3, #8
 801b22a:	3008      	addeq	r0, #8
 801b22c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801b230:	bf04      	itt	eq
 801b232:	011b      	lsleq	r3, r3, #4
 801b234:	3004      	addeq	r0, #4
 801b236:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801b23a:	bf04      	itt	eq
 801b23c:	009b      	lsleq	r3, r3, #2
 801b23e:	3002      	addeq	r0, #2
 801b240:	2b00      	cmp	r3, #0
 801b242:	db04      	blt.n	801b24e <_ZN8touchgfx4clzuEm+0x3a>
 801b244:	3001      	adds	r0, #1
 801b246:	4770      	bx	lr
 801b248:	2000      	movs	r0, #0
 801b24a:	e7ea      	b.n	801b222 <_ZN8touchgfx4clzuEm+0xe>
 801b24c:	2020      	movs	r0, #32
 801b24e:	4770      	bx	lr

0801b250 <_ZN8touchgfx7muldivuEmmmRm>:
 801b250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b254:	4680      	mov	r8, r0
 801b256:	460f      	mov	r7, r1
 801b258:	4615      	mov	r5, r2
 801b25a:	461e      	mov	r6, r3
 801b25c:	f7ff ffda 	bl	801b214 <_ZN8touchgfx4clzuEm>
 801b260:	b998      	cbnz	r0, 801b28a <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801b262:	4608      	mov	r0, r1
 801b264:	f7ff ffd6 	bl	801b214 <_ZN8touchgfx4clzuEm>
 801b268:	2800      	cmp	r0, #0
 801b26a:	dd08      	ble.n	801b27e <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801b26c:	4633      	mov	r3, r6
 801b26e:	462a      	mov	r2, r5
 801b270:	4641      	mov	r1, r8
 801b272:	4638      	mov	r0, r7
 801b274:	f7ff ffec 	bl	801b250 <_ZN8touchgfx7muldivuEmmmRm>
 801b278:	b003      	add	sp, #12
 801b27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b27e:	f04f 33ff 	mov.w	r3, #4294967295
 801b282:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801b286:	6033      	str	r3, [r6, #0]
 801b288:	e7f6      	b.n	801b278 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b28a:	fa31 f900 	lsrs.w	r9, r1, r0
 801b28e:	fb01 f308 	mul.w	r3, r1, r8
 801b292:	d105      	bne.n	801b2a0 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801b294:	fbb3 f0f5 	udiv	r0, r3, r5
 801b298:	fb05 3510 	mls	r5, r5, r0, r3
 801b29c:	6035      	str	r5, [r6, #0]
 801b29e:	e7eb      	b.n	801b278 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801b2a0:	2301      	movs	r3, #1
 801b2a2:	fa08 fb00 	lsl.w	fp, r8, r0
 801b2a6:	462a      	mov	r2, r5
 801b2a8:	4641      	mov	r1, r8
 801b2aa:	fa03 f000 	lsl.w	r0, r3, r0
 801b2ae:	4633      	mov	r3, r6
 801b2b0:	fbbb faf5 	udiv	sl, fp, r5
 801b2b4:	3801      	subs	r0, #1
 801b2b6:	fb09 f40a 	mul.w	r4, r9, sl
 801b2ba:	4038      	ands	r0, r7
 801b2bc:	f7ff ffc8 	bl	801b250 <_ZN8touchgfx7muldivuEmmmRm>
 801b2c0:	462a      	mov	r2, r5
 801b2c2:	4607      	mov	r7, r0
 801b2c4:	ab01      	add	r3, sp, #4
 801b2c6:	fb05 b11a 	mls	r1, r5, sl, fp
 801b2ca:	4648      	mov	r0, r9
 801b2cc:	f7ff ffc0 	bl	801b250 <_ZN8touchgfx7muldivuEmmmRm>
 801b2d0:	9b01      	ldr	r3, [sp, #4]
 801b2d2:	6832      	ldr	r2, [r6, #0]
 801b2d4:	441a      	add	r2, r3
 801b2d6:	fbb2 f3f5 	udiv	r3, r2, r5
 801b2da:	441c      	add	r4, r3
 801b2dc:	fb05 2513 	mls	r5, r5, r3, r2
 801b2e0:	443c      	add	r4, r7
 801b2e2:	4420      	add	r0, r4
 801b2e4:	e7da      	b.n	801b29c <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801b2e6 <_ZN8touchgfx6muldivElllRl>:
 801b2e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b2e8:	2800      	cmp	r0, #0
 801b2ea:	461e      	mov	r6, r3
 801b2ec:	bfba      	itte	lt
 801b2ee:	4240      	neglt	r0, r0
 801b2f0:	f04f 34ff 	movlt.w	r4, #4294967295
 801b2f4:	2401      	movge	r4, #1
 801b2f6:	2900      	cmp	r1, #0
 801b2f8:	bfbc      	itt	lt
 801b2fa:	4249      	neglt	r1, r1
 801b2fc:	4264      	neglt	r4, r4
 801b2fe:	2a00      	cmp	r2, #0
 801b300:	bfb6      	itet	lt
 801b302:	4265      	neglt	r5, r4
 801b304:	4625      	movge	r5, r4
 801b306:	4252      	neglt	r2, r2
 801b308:	4288      	cmp	r0, r1
 801b30a:	bfc2      	ittt	gt
 801b30c:	4603      	movgt	r3, r0
 801b30e:	4608      	movgt	r0, r1
 801b310:	4619      	movgt	r1, r3
 801b312:	ab01      	add	r3, sp, #4
 801b314:	f7ff ff9c 	bl	801b250 <_ZN8touchgfx7muldivuEmmmRm>
 801b318:	9b01      	ldr	r3, [sp, #4]
 801b31a:	4368      	muls	r0, r5
 801b31c:	435c      	muls	r4, r3
 801b31e:	6034      	str	r4, [r6, #0]
 801b320:	b002      	add	sp, #8
 801b322:	bd70      	pop	{r4, r5, r6, pc}

0801b324 <_ZN8touchgfx6muldivElll>:
 801b324:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b326:	4606      	mov	r6, r0
 801b328:	ab01      	add	r3, sp, #4
 801b32a:	460d      	mov	r5, r1
 801b32c:	4614      	mov	r4, r2
 801b32e:	f7ff ffda 	bl	801b2e6 <_ZN8touchgfx6muldivElllRl>
 801b332:	2e00      	cmp	r6, #0
 801b334:	db20      	blt.n	801b378 <_ZN8touchgfx6muldivElll+0x54>
 801b336:	bf14      	ite	ne
 801b338:	2301      	movne	r3, #1
 801b33a:	2300      	moveq	r3, #0
 801b33c:	2d00      	cmp	r5, #0
 801b33e:	db1e      	blt.n	801b37e <_ZN8touchgfx6muldivElll+0x5a>
 801b340:	bf14      	ite	ne
 801b342:	2201      	movne	r2, #1
 801b344:	2200      	moveq	r2, #0
 801b346:	2c00      	cmp	r4, #0
 801b348:	fb03 f202 	mul.w	r2, r3, r2
 801b34c:	db1a      	blt.n	801b384 <_ZN8touchgfx6muldivElll+0x60>
 801b34e:	bf14      	ite	ne
 801b350:	2301      	movne	r3, #1
 801b352:	2300      	moveq	r3, #0
 801b354:	4353      	muls	r3, r2
 801b356:	2b01      	cmp	r3, #1
 801b358:	d117      	bne.n	801b38a <_ZN8touchgfx6muldivElll+0x66>
 801b35a:	2c00      	cmp	r4, #0
 801b35c:	9b01      	ldr	r3, [sp, #4]
 801b35e:	bfb8      	it	lt
 801b360:	4264      	neglt	r4, r4
 801b362:	2b00      	cmp	r3, #0
 801b364:	f104 0401 	add.w	r4, r4, #1
 801b368:	bfb8      	it	lt
 801b36a:	425b      	neglt	r3, r3
 801b36c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801b370:	db00      	blt.n	801b374 <_ZN8touchgfx6muldivElll+0x50>
 801b372:	3001      	adds	r0, #1
 801b374:	b002      	add	sp, #8
 801b376:	bd70      	pop	{r4, r5, r6, pc}
 801b378:	f04f 33ff 	mov.w	r3, #4294967295
 801b37c:	e7de      	b.n	801b33c <_ZN8touchgfx6muldivElll+0x18>
 801b37e:	f04f 32ff 	mov.w	r2, #4294967295
 801b382:	e7e0      	b.n	801b346 <_ZN8touchgfx6muldivElll+0x22>
 801b384:	f04f 33ff 	mov.w	r3, #4294967295
 801b388:	e7e4      	b.n	801b354 <_ZN8touchgfx6muldivElll+0x30>
 801b38a:	3301      	adds	r3, #1
 801b38c:	d1f2      	bne.n	801b374 <_ZN8touchgfx6muldivElll+0x50>
 801b38e:	9b01      	ldr	r3, [sp, #4]
 801b390:	2c00      	cmp	r4, #0
 801b392:	bfb8      	it	lt
 801b394:	4264      	neglt	r4, r4
 801b396:	2b00      	cmp	r3, #0
 801b398:	bfb8      	it	lt
 801b39a:	425b      	neglt	r3, r3
 801b39c:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801b3a0:	bfc8      	it	gt
 801b3a2:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801b3a6:	e7e5      	b.n	801b374 <_ZN8touchgfx6muldivElll+0x50>

0801b3a8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801b3a8:	2000      	movs	r0, #0
 801b3aa:	4770      	bx	lr

0801b3ac <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801b3ac:	2001      	movs	r0, #1
 801b3ae:	4770      	bx	lr

0801b3b0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801b3b0:	2002      	movs	r0, #2
 801b3b2:	4770      	bx	lr

0801b3b4 <_ZN8touchgfx12GestureEventD1Ev>:
 801b3b4:	4770      	bx	lr

0801b3b6 <_ZN8touchgfx9DragEventD1Ev>:
 801b3b6:	4770      	bx	lr

0801b3b8 <_ZN8touchgfx10ClickEventD1Ev>:
 801b3b8:	4770      	bx	lr

0801b3ba <_ZN8touchgfx10ClickEventD0Ev>:
 801b3ba:	b510      	push	{r4, lr}
 801b3bc:	4604      	mov	r4, r0
 801b3be:	210c      	movs	r1, #12
 801b3c0:	f00d fc74 	bl	8028cac <_ZdlPvj>
 801b3c4:	4620      	mov	r0, r4
 801b3c6:	bd10      	pop	{r4, pc}

0801b3c8 <_ZN8touchgfx9DragEventD0Ev>:
 801b3c8:	b510      	push	{r4, lr}
 801b3ca:	4604      	mov	r4, r0
 801b3cc:	2110      	movs	r1, #16
 801b3ce:	f00d fc6d 	bl	8028cac <_ZdlPvj>
 801b3d2:	4620      	mov	r0, r4
 801b3d4:	bd10      	pop	{r4, pc}

0801b3d6 <_ZN8touchgfx12GestureEventD0Ev>:
 801b3d6:	b510      	push	{r4, lr}
 801b3d8:	4604      	mov	r4, r0
 801b3da:	210c      	movs	r1, #12
 801b3dc:	f00d fc66 	bl	8028cac <_ZdlPvj>
 801b3e0:	4620      	mov	r0, r4
 801b3e2:	bd10      	pop	{r4, pc}

0801b3e4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801b3e4:	b530      	push	{r4, r5, lr}
 801b3e6:	460d      	mov	r5, r1
 801b3e8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b3ea:	b087      	sub	sp, #28
 801b3ec:	4604      	mov	r4, r0
 801b3ee:	b301      	cbz	r1, 801b432 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801b3f0:	a801      	add	r0, sp, #4
 801b3f2:	f7ff fe71 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b3f6:	892a      	ldrh	r2, [r5, #8]
 801b3f8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801b3fc:	7928      	ldrb	r0, [r5, #4]
 801b3fe:	1ad2      	subs	r2, r2, r3
 801b400:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801b402:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801b406:	441a      	add	r2, r3
 801b408:	896b      	ldrh	r3, [r5, #10]
 801b40a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801b40e:	f88d 0010 	strb.w	r0, [sp, #16]
 801b412:	1b5b      	subs	r3, r3, r5
 801b414:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801b416:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b418:	442b      	add	r3, r5
 801b41a:	4d07      	ldr	r5, [pc, #28]	; (801b438 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801b41c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801b420:	a903      	add	r1, sp, #12
 801b422:	9503      	str	r5, [sp, #12]
 801b424:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b428:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b42c:	6803      	ldr	r3, [r0, #0]
 801b42e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b430:	4798      	blx	r3
 801b432:	b007      	add	sp, #28
 801b434:	bd30      	pop	{r4, r5, pc}
 801b436:	bf00      	nop
 801b438:	0802f9b0 	.word	0x0802f9b0

0801b43c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801b43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b440:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801b442:	b08a      	sub	sp, #40	; 0x28
 801b444:	4604      	mov	r4, r0
 801b446:	460d      	mov	r5, r1
 801b448:	b113      	cbz	r3, 801b450 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801b44a:	790b      	ldrb	r3, [r1, #4]
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d044      	beq.n	801b4da <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b450:	f104 0804 	add.w	r8, r4, #4
 801b454:	a803      	add	r0, sp, #12
 801b456:	4641      	mov	r1, r8
 801b458:	f7ff fe3e 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b45c:	792b      	ldrb	r3, [r5, #4]
 801b45e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801b462:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801b466:	b983      	cbnz	r3, 801b48a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801b468:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801b46c:	892a      	ldrh	r2, [r5, #8]
 801b46e:	88e9      	ldrh	r1, [r5, #6]
 801b470:	4640      	mov	r0, r8
 801b472:	1b92      	subs	r2, r2, r6
 801b474:	9301      	str	r3, [sp, #4]
 801b476:	1bc9      	subs	r1, r1, r7
 801b478:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801b47c:	b212      	sxth	r2, r2
 801b47e:	9300      	str	r3, [sp, #0]
 801b480:	b209      	sxth	r1, r1
 801b482:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801b486:	f7f9 ffab 	bl	80153e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801b48a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801b48c:	b329      	cbz	r1, 801b4da <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b48e:	a805      	add	r0, sp, #20
 801b490:	f7ff fe22 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b494:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801b498:	792b      	ldrb	r3, [r5, #4]
 801b49a:	a907      	add	r1, sp, #28
 801b49c:	1abf      	subs	r7, r7, r2
 801b49e:	88ea      	ldrh	r2, [r5, #6]
 801b4a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801b4a2:	4417      	add	r7, r2
 801b4a4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801b4a6:	f88d 3020 	strb.w	r3, [sp, #32]
 801b4aa:	4417      	add	r7, r2
 801b4ac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801b4b0:	1ab6      	subs	r6, r6, r2
 801b4b2:	892a      	ldrh	r2, [r5, #8]
 801b4b4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801b4b8:	4416      	add	r6, r2
 801b4ba:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801b4bc:	4416      	add	r6, r2
 801b4be:	4a08      	ldr	r2, [pc, #32]	; (801b4e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801b4c0:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801b4c4:	2600      	movs	r6, #0
 801b4c6:	9207      	str	r2, [sp, #28]
 801b4c8:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801b4cc:	6803      	ldr	r3, [r0, #0]
 801b4ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b4d0:	4798      	blx	r3
 801b4d2:	792b      	ldrb	r3, [r5, #4]
 801b4d4:	b10b      	cbz	r3, 801b4da <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801b4d6:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801b4da:	b00a      	add	sp, #40	; 0x28
 801b4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b4e0:	0802f988 	.word	0x0802f988

0801b4e4 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801b4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b4e8:	460c      	mov	r4, r1
 801b4ea:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801b4ec:	b088      	sub	sp, #32
 801b4ee:	4605      	mov	r5, r0
 801b4f0:	2900      	cmp	r1, #0
 801b4f2:	d06d      	beq.n	801b5d0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801b4f4:	4668      	mov	r0, sp
 801b4f6:	f7ff fdef 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b4fa:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801b4fc:	88e3      	ldrh	r3, [r4, #6]
 801b4fe:	f9bd 8000 	ldrsh.w	r8, [sp]
 801b502:	440b      	add	r3, r1
 801b504:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801b508:	b21b      	sxth	r3, r3
 801b50a:	4543      	cmp	r3, r8
 801b50c:	db31      	blt.n	801b572 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b50e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801b512:	44c4      	add	ip, r8
 801b514:	fa0f fc8c 	sxth.w	ip, ip
 801b518:	4563      	cmp	r3, ip
 801b51a:	da2a      	bge.n	801b572 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b51c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801b51e:	8926      	ldrh	r6, [r4, #8]
 801b520:	4416      	add	r6, r2
 801b522:	b236      	sxth	r6, r6
 801b524:	42be      	cmp	r6, r7
 801b526:	db24      	blt.n	801b572 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b528:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801b52c:	4438      	add	r0, r7
 801b52e:	b200      	sxth	r0, r0
 801b530:	4286      	cmp	r6, r0
 801b532:	da1e      	bge.n	801b572 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b534:	8963      	ldrh	r3, [r4, #10]
 801b536:	4419      	add	r1, r3
 801b538:	b209      	sxth	r1, r1
 801b53a:	4541      	cmp	r1, r8
 801b53c:	db08      	blt.n	801b550 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b53e:	4561      	cmp	r1, ip
 801b540:	da06      	bge.n	801b550 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b542:	89a3      	ldrh	r3, [r4, #12]
 801b544:	441a      	add	r2, r3
 801b546:	b212      	sxth	r2, r2
 801b548:	42ba      	cmp	r2, r7
 801b54a:	db01      	blt.n	801b550 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801b54c:	4282      	cmp	r2, r0
 801b54e:	db10      	blt.n	801b572 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801b550:	4b21      	ldr	r3, [pc, #132]	; (801b5d8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801b552:	a904      	add	r1, sp, #16
 801b554:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b556:	9304      	str	r3, [sp, #16]
 801b558:	2302      	movs	r3, #2
 801b55a:	f88d 3014 	strb.w	r3, [sp, #20]
 801b55e:	2300      	movs	r3, #0
 801b560:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b564:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b568:	f8ad 301a 	strh.w	r3, [sp, #26]
 801b56c:	6803      	ldr	r3, [r0, #0]
 801b56e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b570:	4798      	blx	r3
 801b572:	1d29      	adds	r1, r5, #4
 801b574:	a802      	add	r0, sp, #8
 801b576:	f7ff fdaf 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b57a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b57e:	88e0      	ldrh	r0, [r4, #6]
 801b580:	eba3 0808 	sub.w	r8, r3, r8
 801b584:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b588:	7921      	ldrb	r1, [r4, #4]
 801b58a:	fa1f f888 	uxth.w	r8, r8
 801b58e:	1bdf      	subs	r7, r3, r7
 801b590:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801b594:	b2bb      	uxth	r3, r7
 801b596:	4440      	add	r0, r8
 801b598:	8922      	ldrh	r2, [r4, #8]
 801b59a:	8967      	ldrh	r7, [r4, #10]
 801b59c:	4460      	add	r0, ip
 801b59e:	89a4      	ldrh	r4, [r4, #12]
 801b5a0:	441a      	add	r2, r3
 801b5a2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801b5a4:	44b8      	add	r8, r7
 801b5a6:	4423      	add	r3, r4
 801b5a8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801b5ac:	4432      	add	r2, r6
 801b5ae:	44e0      	add	r8, ip
 801b5b0:	4433      	add	r3, r6
 801b5b2:	4c0a      	ldr	r4, [pc, #40]	; (801b5dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801b5b4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801b5b6:	f88d 1014 	strb.w	r1, [sp, #20]
 801b5ba:	a904      	add	r1, sp, #16
 801b5bc:	9404      	str	r4, [sp, #16]
 801b5be:	f8ad 2018 	strh.w	r2, [sp, #24]
 801b5c2:	f8ad 801a 	strh.w	r8, [sp, #26]
 801b5c6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801b5ca:	6803      	ldr	r3, [r0, #0]
 801b5cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801b5ce:	4798      	blx	r3
 801b5d0:	b008      	add	sp, #32
 801b5d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b5d6:	bf00      	nop
 801b5d8:	0802f988 	.word	0x0802f988
 801b5dc:	0802f99c 	.word	0x0802f99c

0801b5e0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801b5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b5e2:	4604      	mov	r4, r0
 801b5e4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801b5e8:	3201      	adds	r2, #1
 801b5ea:	d112      	bne.n	801b612 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801b5ec:	2500      	movs	r5, #0
 801b5ee:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801b5f2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801b5f6:	6803      	ldr	r3, [r0, #0]
 801b5f8:	9500      	str	r5, [sp, #0]
 801b5fa:	466d      	mov	r5, sp
 801b5fc:	f8ad 1004 	strh.w	r1, [sp, #4]
 801b600:	f8ad 2006 	strh.w	r2, [sp, #6]
 801b604:	4629      	mov	r1, r5
 801b606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b608:	4798      	blx	r3
 801b60a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801b60e:	e884 0003 	stmia.w	r4, {r0, r1}
 801b612:	4620      	mov	r0, r4
 801b614:	b003      	add	sp, #12
 801b616:	bd30      	pop	{r4, r5, pc}

0801b618 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801b618:	b513      	push	{r0, r1, r4, lr}
 801b61a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801b61e:	4604      	mov	r4, r0
 801b620:	3301      	adds	r3, #1
 801b622:	d109      	bne.n	801b638 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801b624:	4601      	mov	r1, r0
 801b626:	4668      	mov	r0, sp
 801b628:	f7ff fd56 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b62c:	f8bd 3000 	ldrh.w	r3, [sp]
 801b630:	8423      	strh	r3, [r4, #32]
 801b632:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b636:	8463      	strh	r3, [r4, #34]	; 0x22
 801b638:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801b63c:	b002      	add	sp, #8
 801b63e:	bd10      	pop	{r4, pc}

0801b640 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801b640:	b513      	push	{r0, r1, r4, lr}
 801b642:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801b646:	4604      	mov	r4, r0
 801b648:	3301      	adds	r3, #1
 801b64a:	d109      	bne.n	801b660 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801b64c:	4601      	mov	r1, r0
 801b64e:	4668      	mov	r0, sp
 801b650:	f7ff fd42 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b654:	f8bd 3000 	ldrh.w	r3, [sp]
 801b658:	8423      	strh	r3, [r4, #32]
 801b65a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b65e:	8463      	strh	r3, [r4, #34]	; 0x22
 801b660:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801b664:	b002      	add	sp, #8
 801b666:	bd10      	pop	{r4, pc}

0801b668 <_ZN8touchgfx6ScreenC1Ev>:
 801b668:	b570      	push	{r4, r5, r6, lr}
 801b66a:	4b17      	ldr	r3, [pc, #92]	; (801b6c8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801b66c:	4605      	mov	r5, r0
 801b66e:	4a17      	ldr	r2, [pc, #92]	; (801b6cc <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801b670:	2101      	movs	r1, #1
 801b672:	f845 3b04 	str.w	r3, [r5], #4
 801b676:	2300      	movs	r3, #0
 801b678:	6042      	str	r2, [r0, #4]
 801b67a:	4604      	mov	r4, r0
 801b67c:	8103      	strh	r3, [r0, #8]
 801b67e:	8143      	strh	r3, [r0, #10]
 801b680:	8183      	strh	r3, [r0, #12]
 801b682:	81c3      	strh	r3, [r0, #14]
 801b684:	8203      	strh	r3, [r0, #16]
 801b686:	8243      	strh	r3, [r0, #18]
 801b688:	8283      	strh	r3, [r0, #20]
 801b68a:	82c3      	strh	r3, [r0, #22]
 801b68c:	6203      	str	r3, [r0, #32]
 801b68e:	8483      	strh	r3, [r0, #36]	; 0x24
 801b690:	84c3      	strh	r3, [r0, #38]	; 0x26
 801b692:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801b696:	6343      	str	r3, [r0, #52]	; 0x34
 801b698:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801b69c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801b6a0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801b6a4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801b6a8:	4b09      	ldr	r3, [pc, #36]	; (801b6d0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801b6aa:	4628      	mov	r0, r5
 801b6ac:	f9b3 6000 	ldrsh.w	r6, [r3]
 801b6b0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801b6b2:	4a08      	ldr	r2, [pc, #32]	; (801b6d4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801b6b4:	f9b2 1000 	ldrsh.w	r1, [r2]
 801b6b8:	4798      	blx	r3
 801b6ba:	6863      	ldr	r3, [r4, #4]
 801b6bc:	4628      	mov	r0, r5
 801b6be:	4631      	mov	r1, r6
 801b6c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b6c2:	4798      	blx	r3
 801b6c4:	4620      	mov	r0, r4
 801b6c6:	bd70      	pop	{r4, r5, r6, pc}
 801b6c8:	0802f9c4 	.word	0x0802f9c4
 801b6cc:	0802f1f0 	.word	0x0802f1f0
 801b6d0:	2003bed6 	.word	0x2003bed6
 801b6d4:	2003bed4 	.word	0x2003bed4

0801b6d8 <_ZN8touchgfx6Screen4drawEv>:
 801b6d8:	4b09      	ldr	r3, [pc, #36]	; (801b700 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801b6da:	b507      	push	{r0, r1, r2, lr}
 801b6dc:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b6e0:	2100      	movs	r1, #0
 801b6e2:	4b08      	ldr	r3, [pc, #32]	; (801b704 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801b6e4:	9100      	str	r1, [sp, #0]
 801b6e6:	4669      	mov	r1, sp
 801b6e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b6ec:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b6f0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b6f4:	6803      	ldr	r3, [r0, #0]
 801b6f6:	689b      	ldr	r3, [r3, #8]
 801b6f8:	4798      	blx	r3
 801b6fa:	b003      	add	sp, #12
 801b6fc:	f85d fb04 	ldr.w	pc, [sp], #4
 801b700:	2003bed4 	.word	0x2003bed4
 801b704:	2003bed6 	.word	0x2003bed6

0801b708 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801b708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b70c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801b710:	b089      	sub	sp, #36	; 0x24
 801b712:	4680      	mov	r8, r0
 801b714:	460c      	mov	r4, r1
 801b716:	2b00      	cmp	r3, #0
 801b718:	4615      	mov	r5, r2
 801b71a:	dd0e      	ble.n	801b73a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b71c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801b720:	2b00      	cmp	r3, #0
 801b722:	dd0a      	ble.n	801b73a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b724:	4628      	mov	r0, r5
 801b726:	f7ff ff5b 	bl	801b5e0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b72a:	4621      	mov	r1, r4
 801b72c:	f7fe fbc2 	bl	8019eb4 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b730:	69eb      	ldr	r3, [r5, #28]
 801b732:	b928      	cbnz	r0, 801b740 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801b734:	461d      	mov	r5, r3
 801b736:	2b00      	cmp	r3, #0
 801b738:	d1f4      	bne.n	801b724 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801b73a:	b009      	add	sp, #36	; 0x24
 801b73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b740:	ae04      	add	r6, sp, #16
 801b742:	2b00      	cmp	r3, #0
 801b744:	f000 80b5 	beq.w	801b8b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b748:	682b      	ldr	r3, [r5, #0]
 801b74a:	4629      	mov	r1, r5
 801b74c:	a802      	add	r0, sp, #8
 801b74e:	68db      	ldr	r3, [r3, #12]
 801b750:	4798      	blx	r3
 801b752:	4628      	mov	r0, r5
 801b754:	f7ff ff60 	bl	801b618 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b758:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801b75c:	4407      	add	r7, r0
 801b75e:	4628      	mov	r0, r5
 801b760:	f7ff ff6e 	bl	801b640 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b764:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801b768:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801b76c:	b23f      	sxth	r7, r7
 801b76e:	4418      	add	r0, r3
 801b770:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801b774:	4621      	mov	r1, r4
 801b776:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b77a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b77e:	4630      	mov	r0, r6
 801b780:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b784:	f8ad 7010 	strh.w	r7, [sp, #16]
 801b788:	f7f9 ff0c 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 801b78c:	4628      	mov	r0, r5
 801b78e:	f7ff ff27 	bl	801b5e0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b792:	ab06      	add	r3, sp, #24
 801b794:	4602      	mov	r2, r0
 801b796:	e896 0003 	ldmia.w	r6, {r0, r1}
 801b79a:	e883 0003 	stmia.w	r3, {r0, r1}
 801b79e:	4611      	mov	r1, r2
 801b7a0:	4618      	mov	r0, r3
 801b7a2:	f7f9 feff 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 801b7a6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801b7aa:	f9b4 1000 	ldrsh.w	r1, [r4]
 801b7ae:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801b7b2:	4299      	cmp	r1, r3
 801b7b4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801b7b8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801b7bc:	d10b      	bne.n	801b7d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b7be:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b7c2:	4552      	cmp	r2, sl
 801b7c4:	d107      	bne.n	801b7d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b7c6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801b7ca:	455a      	cmp	r2, fp
 801b7cc:	d103      	bne.n	801b7d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801b7ce:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801b7d2:	454a      	cmp	r2, r9
 801b7d4:	d06d      	beq.n	801b8b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b7d6:	f1bb 0f00 	cmp.w	fp, #0
 801b7da:	dd65      	ble.n	801b8a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b7dc:	f1b9 0f00 	cmp.w	r9, #0
 801b7e0:	dd62      	ble.n	801b8a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801b7e2:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801b7e6:	fa1f f08a 	uxth.w	r0, sl
 801b7ea:	4552      	cmp	r2, sl
 801b7ec:	9000      	str	r0, [sp, #0]
 801b7ee:	da12      	bge.n	801b816 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801b7f0:	9301      	str	r3, [sp, #4]
 801b7f2:	9b00      	ldr	r3, [sp, #0]
 801b7f4:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b7f8:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b7fc:	1a9a      	subs	r2, r3, r2
 801b7fe:	f8ad 1010 	strh.w	r1, [sp, #16]
 801b802:	4631      	mov	r1, r6
 801b804:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b808:	4640      	mov	r0, r8
 801b80a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801b80e:	69ea      	ldr	r2, [r5, #28]
 801b810:	f7ff ff7a 	bl	801b708 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b814:	9b01      	ldr	r3, [sp, #4]
 801b816:	f9b4 2000 	ldrsh.w	r2, [r4]
 801b81a:	b29f      	uxth	r7, r3
 801b81c:	429a      	cmp	r2, r3
 801b81e:	da0d      	bge.n	801b83c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801b820:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b824:	1aba      	subs	r2, r7, r2
 801b826:	f8ad a012 	strh.w	sl, [sp, #18]
 801b82a:	4631      	mov	r1, r6
 801b82c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b830:	4640      	mov	r0, r8
 801b832:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b836:	69ea      	ldr	r2, [r5, #28]
 801b838:	f7ff ff66 	bl	801b708 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b83c:	8822      	ldrh	r2, [r4, #0]
 801b83e:	445f      	add	r7, fp
 801b840:	88a3      	ldrh	r3, [r4, #4]
 801b842:	b2bf      	uxth	r7, r7
 801b844:	4413      	add	r3, r2
 801b846:	b23a      	sxth	r2, r7
 801b848:	b29b      	uxth	r3, r3
 801b84a:	b219      	sxth	r1, r3
 801b84c:	4291      	cmp	r1, r2
 801b84e:	dd0d      	ble.n	801b86c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801b850:	1bdb      	subs	r3, r3, r7
 801b852:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b856:	f8ad a012 	strh.w	sl, [sp, #18]
 801b85a:	4631      	mov	r1, r6
 801b85c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801b860:	4640      	mov	r0, r8
 801b862:	f8ad 9016 	strh.w	r9, [sp, #22]
 801b866:	69ea      	ldr	r2, [r5, #28]
 801b868:	f7ff ff4e 	bl	801b708 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b86c:	88e2      	ldrh	r2, [r4, #6]
 801b86e:	8863      	ldrh	r3, [r4, #2]
 801b870:	4413      	add	r3, r2
 801b872:	9a00      	ldr	r2, [sp, #0]
 801b874:	444a      	add	r2, r9
 801b876:	b29b      	uxth	r3, r3
 801b878:	fa1f f982 	uxth.w	r9, r2
 801b87c:	b219      	sxth	r1, r3
 801b87e:	fa0f f289 	sxth.w	r2, r9
 801b882:	428a      	cmp	r2, r1
 801b884:	da15      	bge.n	801b8b2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801b886:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801b88a:	eba3 0309 	sub.w	r3, r3, r9
 801b88e:	f9b4 0000 	ldrsh.w	r0, [r4]
 801b892:	f8ad 1014 	strh.w	r1, [sp, #20]
 801b896:	4631      	mov	r1, r6
 801b898:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b89c:	f8ad 2012 	strh.w	r2, [sp, #18]
 801b8a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b8a4:	69ea      	ldr	r2, [r5, #28]
 801b8a6:	e001      	b.n	801b8ac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801b8a8:	69ea      	ldr	r2, [r5, #28]
 801b8aa:	4621      	mov	r1, r4
 801b8ac:	4640      	mov	r0, r8
 801b8ae:	f7ff ff2b 	bl	801b708 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b8b2:	4628      	mov	r0, r5
 801b8b4:	f7ff fe94 	bl	801b5e0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801b8b8:	6861      	ldr	r1, [r4, #4]
 801b8ba:	4602      	mov	r2, r0
 801b8bc:	4633      	mov	r3, r6
 801b8be:	6820      	ldr	r0, [r4, #0]
 801b8c0:	c303      	stmia	r3!, {r0, r1}
 801b8c2:	4611      	mov	r1, r2
 801b8c4:	4630      	mov	r0, r6
 801b8c6:	f7f9 fe6d 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 801b8ca:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	f77f af33 	ble.w	801b73a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b8d4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b8d8:	2b00      	cmp	r3, #0
 801b8da:	f77f af2e 	ble.w	801b73a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801b8de:	4628      	mov	r0, r5
 801b8e0:	f7ff fe9a 	bl	801b618 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801b8e4:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801b8e8:	1a18      	subs	r0, r3, r0
 801b8ea:	f8ad 0010 	strh.w	r0, [sp, #16]
 801b8ee:	4628      	mov	r0, r5
 801b8f0:	f7ff fea6 	bl	801b640 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801b8f4:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801b8f8:	4631      	mov	r1, r6
 801b8fa:	1a18      	subs	r0, r3, r0
 801b8fc:	f8ad 0012 	strh.w	r0, [sp, #18]
 801b900:	4628      	mov	r0, r5
 801b902:	682b      	ldr	r3, [r5, #0]
 801b904:	689b      	ldr	r3, [r3, #8]
 801b906:	4798      	blx	r3
 801b908:	e717      	b.n	801b73a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801b90a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801b90a:	b570      	push	{r4, r5, r6, lr}
 801b90c:	1d06      	adds	r6, r0, #4
 801b90e:	b086      	sub	sp, #24
 801b910:	460c      	mov	r4, r1
 801b912:	2300      	movs	r3, #0
 801b914:	4631      	mov	r1, r6
 801b916:	4605      	mov	r5, r0
 801b918:	a802      	add	r0, sp, #8
 801b91a:	9301      	str	r3, [sp, #4]
 801b91c:	f7ff fbdc 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b920:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801b924:	8822      	ldrh	r2, [r4, #0]
 801b926:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801b92a:	1ad2      	subs	r2, r2, r3
 801b92c:	8863      	ldrh	r3, [r4, #2]
 801b92e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801b932:	1a5b      	subs	r3, r3, r1
 801b934:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801b938:	f8ad 2010 	strh.w	r2, [sp, #16]
 801b93c:	aa01      	add	r2, sp, #4
 801b93e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801b942:	4630      	mov	r0, r6
 801b944:	f8ad 1016 	strh.w	r1, [sp, #22]
 801b948:	a904      	add	r1, sp, #16
 801b94a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801b94e:	f7f9 ff01 	bl	8015754 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801b952:	9a01      	ldr	r2, [sp, #4]
 801b954:	b11a      	cbz	r2, 801b95e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801b956:	4621      	mov	r1, r4
 801b958:	4628      	mov	r0, r5
 801b95a:	f7ff fed5 	bl	801b708 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801b95e:	b006      	add	sp, #24
 801b960:	bd70      	pop	{r4, r5, r6, pc}

0801b962 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801b962:	4602      	mov	r2, r0
 801b964:	b530      	push	{r4, r5, lr}
 801b966:	4604      	mov	r4, r0
 801b968:	b085      	sub	sp, #20
 801b96a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801b96e:	460d      	mov	r5, r1
 801b970:	466b      	mov	r3, sp
 801b972:	6851      	ldr	r1, [r2, #4]
 801b974:	c303      	stmia	r3!, {r0, r1}
 801b976:	4629      	mov	r1, r5
 801b978:	4668      	mov	r0, sp
 801b97a:	f7f9 fe13 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 801b97e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801b982:	b12b      	cbz	r3, 801b990 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801b984:	4669      	mov	r1, sp
 801b986:	4620      	mov	r0, r4
 801b988:	f7ff ffbf 	bl	801b90a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801b98c:	b005      	add	sp, #20
 801b98e:	bd30      	pop	{r4, r5, pc}
 801b990:	3404      	adds	r4, #4
 801b992:	a802      	add	r0, sp, #8
 801b994:	4621      	mov	r1, r4
 801b996:	f7ff fb9f 	bl	801b0d8 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801b99a:	f8bd 3000 	ldrh.w	r3, [sp]
 801b99e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801b9a2:	4669      	mov	r1, sp
 801b9a4:	4620      	mov	r0, r4
 801b9a6:	1a9b      	subs	r3, r3, r2
 801b9a8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801b9ac:	f8ad 3000 	strh.w	r3, [sp]
 801b9b0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801b9b4:	1a9b      	subs	r3, r3, r2
 801b9b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801b9ba:	f7f9 fe92 	bl	80156e2 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801b9be:	e7e5      	b.n	801b98c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801b9c0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801b9c0:	460b      	mov	r3, r1
 801b9c2:	680a      	ldr	r2, [r1, #0]
 801b9c4:	1d01      	adds	r1, r0, #4
 801b9c6:	6992      	ldr	r2, [r2, #24]
 801b9c8:	4618      	mov	r0, r3
 801b9ca:	4710      	bx	r2

0801b9cc <_ZN8touchgfx12TextProviderC1Ev>:
 801b9cc:	b538      	push	{r3, r4, r5, lr}
 801b9ce:	2500      	movs	r5, #0
 801b9d0:	2302      	movs	r3, #2
 801b9d2:	4604      	mov	r4, r0
 801b9d4:	220e      	movs	r2, #14
 801b9d6:	7403      	strb	r3, [r0, #16]
 801b9d8:	4629      	mov	r1, r5
 801b9da:	6145      	str	r5, [r0, #20]
 801b9dc:	7605      	strb	r5, [r0, #24]
 801b9de:	83c5      	strh	r5, [r0, #30]
 801b9e0:	8405      	strh	r5, [r0, #32]
 801b9e2:	86c5      	strh	r5, [r0, #54]	; 0x36
 801b9e4:	8705      	strh	r5, [r0, #56]	; 0x38
 801b9e6:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801b9e8:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801b9ec:	e9c0 5500 	strd	r5, r5, [r0]
 801b9f0:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801b9f4:	304c      	adds	r0, #76	; 0x4c
 801b9f6:	f00d fa13 	bl	8028e20 <memset>
 801b9fa:	2301      	movs	r3, #1
 801b9fc:	4620      	mov	r0, r4
 801b9fe:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801ba02:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801ba06:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801ba0a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801ba0e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801ba12:	f7f5 fafb 	bl	801100c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801ba16:	4620      	mov	r0, r4
 801ba18:	bd38      	pop	{r3, r4, r5, pc}

0801ba1a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801ba1a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801ba1c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801ba20:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801ba22:	fab0 f080 	clz	r0, r0
 801ba26:	0940      	lsrs	r0, r0, #5
 801ba28:	4770      	bx	lr

0801ba2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801ba2a:	b530      	push	{r4, r5, lr}
 801ba2c:	2500      	movs	r5, #0
 801ba2e:	2401      	movs	r4, #1
 801ba30:	6843      	ldr	r3, [r0, #4]
 801ba32:	b913      	cbnz	r3, 801ba3a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801ba34:	6803      	ldr	r3, [r0, #0]
 801ba36:	b313      	cbz	r3, 801ba7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ba38:	6043      	str	r3, [r0, #4]
 801ba3a:	7e03      	ldrb	r3, [r0, #24]
 801ba3c:	b143      	cbz	r3, 801ba50 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801ba3e:	6943      	ldr	r3, [r0, #20]
 801ba40:	b12b      	cbz	r3, 801ba4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ba42:	881a      	ldrh	r2, [r3, #0]
 801ba44:	b11a      	cbz	r2, 801ba4e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801ba46:	1c9a      	adds	r2, r3, #2
 801ba48:	6142      	str	r2, [r0, #20]
 801ba4a:	8818      	ldrh	r0, [r3, #0]
 801ba4c:	bd30      	pop	{r4, r5, pc}
 801ba4e:	7605      	strb	r5, [r0, #24]
 801ba50:	6843      	ldr	r3, [r0, #4]
 801ba52:	8819      	ldrh	r1, [r3, #0]
 801ba54:	b199      	cbz	r1, 801ba7e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801ba56:	1c9a      	adds	r2, r3, #2
 801ba58:	2902      	cmp	r1, #2
 801ba5a:	6042      	str	r2, [r0, #4]
 801ba5c:	d1f5      	bne.n	801ba4a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801ba5e:	7c03      	ldrb	r3, [r0, #16]
 801ba60:	2b01      	cmp	r3, #1
 801ba62:	d8e5      	bhi.n	801ba30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ba64:	1c5a      	adds	r2, r3, #1
 801ba66:	3302      	adds	r3, #2
 801ba68:	7402      	strb	r2, [r0, #16]
 801ba6a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801ba6e:	6143      	str	r3, [r0, #20]
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d0dd      	beq.n	801ba30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ba74:	881b      	ldrh	r3, [r3, #0]
 801ba76:	2b00      	cmp	r3, #0
 801ba78:	d0da      	beq.n	801ba30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ba7a:	7604      	strb	r4, [r0, #24]
 801ba7c:	e7d8      	b.n	801ba30 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801ba7e:	2000      	movs	r0, #0
 801ba80:	e7e4      	b.n	801ba4c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801ba82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801ba82:	6001      	str	r1, [r0, #0]
 801ba84:	2100      	movs	r1, #0
 801ba86:	b430      	push	{r4, r5}
 801ba88:	6041      	str	r1, [r0, #4]
 801ba8a:	6815      	ldr	r5, [r2, #0]
 801ba8c:	6085      	str	r5, [r0, #8]
 801ba8e:	6852      	ldr	r2, [r2, #4]
 801ba90:	6443      	str	r3, [r0, #68]	; 0x44
 801ba92:	9b02      	ldr	r3, [sp, #8]
 801ba94:	60c2      	str	r2, [r0, #12]
 801ba96:	7401      	strb	r1, [r0, #16]
 801ba98:	6141      	str	r1, [r0, #20]
 801ba9a:	7601      	strb	r1, [r0, #24]
 801ba9c:	8701      	strh	r1, [r0, #56]	; 0x38
 801ba9e:	8401      	strh	r1, [r0, #32]
 801baa0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801baa4:	6483      	str	r3, [r0, #72]	; 0x48
 801baa6:	bc30      	pop	{r4, r5}
 801baa8:	f7f5 bab0 	b.w	801100c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801baac <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801baac:	b408      	push	{r3}
 801baae:	b510      	push	{r4, lr}
 801bab0:	b085      	sub	sp, #20
 801bab2:	ac07      	add	r4, sp, #28
 801bab4:	f854 3b04 	ldr.w	r3, [r4], #4
 801bab8:	9300      	str	r3, [sp, #0]
 801baba:	4613      	mov	r3, r2
 801babc:	4622      	mov	r2, r4
 801babe:	9403      	str	r4, [sp, #12]
 801bac0:	f7ff ffdf 	bl	801ba82 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bac4:	b005      	add	sp, #20
 801bac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801baca:	b001      	add	sp, #4
 801bacc:	4770      	bx	lr

0801bace <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801bace:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bad0:	4605      	mov	r5, r0
 801bad2:	4608      	mov	r0, r1
 801bad4:	b1f1      	cbz	r1, 801bb14 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801bad6:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801bada:	460b      	mov	r3, r1
 801badc:	f101 0708 	add.w	r7, r1, #8
 801bae0:	4622      	mov	r2, r4
 801bae2:	6818      	ldr	r0, [r3, #0]
 801bae4:	3308      	adds	r3, #8
 801bae6:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801baea:	4626      	mov	r6, r4
 801baec:	42bb      	cmp	r3, r7
 801baee:	c603      	stmia	r6!, {r0, r1}
 801baf0:	4634      	mov	r4, r6
 801baf2:	d1f6      	bne.n	801bae2 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801baf4:	6818      	ldr	r0, [r3, #0]
 801baf6:	6030      	str	r0, [r6, #0]
 801baf8:	4610      	mov	r0, r2
 801bafa:	889b      	ldrh	r3, [r3, #4]
 801bafc:	80b3      	strh	r3, [r6, #4]
 801bafe:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801bb02:	015b      	lsls	r3, r3, #5
 801bb04:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bb08:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801bb0c:	430b      	orrs	r3, r1
 801bb0e:	425b      	negs	r3, r3
 801bb10:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801bb14:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801bb16 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801bb16:	b538      	push	{r3, r4, r5, lr}
 801bb18:	460c      	mov	r4, r1
 801bb1a:	6811      	ldr	r1, [r2, #0]
 801bb1c:	4610      	mov	r0, r2
 801bb1e:	68cd      	ldr	r5, [r1, #12]
 801bb20:	4619      	mov	r1, r3
 801bb22:	47a8      	blx	r5
 801bb24:	2800      	cmp	r0, #0
 801bb26:	bf08      	it	eq
 801bb28:	4620      	moveq	r0, r4
 801bb2a:	bd38      	pop	{r3, r4, r5, pc}

0801bb2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801bb2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb2e:	4604      	mov	r4, r0
 801bb30:	4615      	mov	r5, r2
 801bb32:	4608      	mov	r0, r1
 801bb34:	b93a      	cbnz	r2, 801bb46 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801bb36:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801bb3a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801bb3e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801bb42:	4628      	mov	r0, r5
 801bb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bb46:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801bb4a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801bb4e:	8893      	ldrh	r3, [r2, #4]
 801bb50:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801bb54:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bb58:	79ee      	ldrb	r6, [r5, #7]
 801bb5a:	4316      	orrs	r6, r2
 801bb5c:	19da      	adds	r2, r3, r7
 801bb5e:	b291      	uxth	r1, r2
 801bb60:	b2b7      	uxth	r7, r6
 801bb62:	291d      	cmp	r1, #29
 801bb64:	d87b      	bhi.n	801bc5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801bb66:	2201      	movs	r2, #1
 801bb68:	10f6      	asrs	r6, r6, #3
 801bb6a:	408a      	lsls	r2, r1
 801bb6c:	4974      	ldr	r1, [pc, #464]	; (801bd40 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801bb6e:	420a      	tst	r2, r1
 801bb70:	d12e      	bne.n	801bbd0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801bb72:	f412 7f60 	tst.w	r2, #896	; 0x380
 801bb76:	d072      	beq.n	801bc5e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801bb78:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801bb7c:	462b      	mov	r3, r5
 801bb7e:	f105 0e08 	add.w	lr, r5, #8
 801bb82:	4615      	mov	r5, r2
 801bb84:	6818      	ldr	r0, [r3, #0]
 801bb86:	3308      	adds	r3, #8
 801bb88:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801bb8c:	4694      	mov	ip, r2
 801bb8e:	4573      	cmp	r3, lr
 801bb90:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801bb94:	4662      	mov	r2, ip
 801bb96:	d1f5      	bne.n	801bb84 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801bb98:	6818      	ldr	r0, [r3, #0]
 801bb9a:	f8cc 0000 	str.w	r0, [ip]
 801bb9e:	889b      	ldrh	r3, [r3, #4]
 801bba0:	f8ac 3004 	strh.w	r3, [ip, #4]
 801bba4:	b2b3      	uxth	r3, r6
 801bba6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801bbaa:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801bbae:	1aca      	subs	r2, r1, r3
 801bbb0:	1bcf      	subs	r7, r1, r7
 801bbb2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801bbb6:	b292      	uxth	r2, r2
 801bbb8:	1afb      	subs	r3, r7, r3
 801bbba:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801bbbe:	10d2      	asrs	r2, r2, #3
 801bbc0:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801bbc4:	4302      	orrs	r2, r0
 801bbc6:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801bbca:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801bbce:	e7b8      	b.n	801bb42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bbd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801bbd2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801bbd6:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801bbd8:	f640 6333 	movw	r3, #3635	; 0xe33
 801bbdc:	4299      	cmp	r1, r3
 801bbde:	d110      	bne.n	801bc02 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801bbe0:	6803      	ldr	r3, [r0, #0]
 801bbe2:	68db      	ldr	r3, [r3, #12]
 801bbe4:	4798      	blx	r3
 801bbe6:	7b41      	ldrb	r1, [r0, #13]
 801bbe8:	00cb      	lsls	r3, r1, #3
 801bbea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bbee:	7a03      	ldrb	r3, [r0, #8]
 801bbf0:	0648      	lsls	r0, r1, #25
 801bbf2:	ea43 0302 	orr.w	r3, r3, r2
 801bbf6:	bf44      	itt	mi
 801bbf8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bbfc:	b21b      	sxthmi	r3, r3
 801bbfe:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bc02:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801bc06:	462a      	mov	r2, r5
 801bc08:	f105 0c08 	add.w	ip, r5, #8
 801bc0c:	443b      	add	r3, r7
 801bc0e:	4433      	add	r3, r6
 801bc10:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801bc14:	b29b      	uxth	r3, r3
 801bc16:	4635      	mov	r5, r6
 801bc18:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bc1c:	6810      	ldr	r0, [r2, #0]
 801bc1e:	3208      	adds	r2, #8
 801bc20:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801bc24:	4637      	mov	r7, r6
 801bc26:	4562      	cmp	r2, ip
 801bc28:	c703      	stmia	r7!, {r0, r1}
 801bc2a:	463e      	mov	r6, r7
 801bc2c:	d1f6      	bne.n	801bc1c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801bc2e:	6810      	ldr	r0, [r2, #0]
 801bc30:	6038      	str	r0, [r7, #0]
 801bc32:	8892      	ldrh	r2, [r2, #4]
 801bc34:	80ba      	strh	r2, [r7, #4]
 801bc36:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801bc3a:	10db      	asrs	r3, r3, #3
 801bc3c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801bc40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bc44:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bc48:	4313      	orrs	r3, r2
 801bc4a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801bc4e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801bc52:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801bc56:	1a9b      	subs	r3, r3, r2
 801bc58:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801bc5c:	e771      	b.n	801bb42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801bc5e:	f023 0204 	bic.w	r2, r3, #4
 801bc62:	f640 611b 	movw	r1, #3611	; 0xe1b
 801bc66:	428a      	cmp	r2, r1
 801bc68:	d003      	beq.n	801bc72 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801bc6a:	f640 621d 	movw	r2, #3613	; 0xe1d
 801bc6e:	4293      	cmp	r3, r2
 801bc70:	d120      	bne.n	801bcb4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801bc72:	3b01      	subs	r3, #1
 801bc74:	4602      	mov	r2, r0
 801bc76:	4629      	mov	r1, r5
 801bc78:	4620      	mov	r0, r4
 801bc7a:	b29b      	uxth	r3, r3
 801bc7c:	f7ff ff4b 	bl	801bb16 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bc80:	7b41      	ldrb	r1, [r0, #13]
 801bc82:	00cb      	lsls	r3, r1, #3
 801bc84:	0649      	lsls	r1, r1, #25
 801bc86:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bc8a:	7a03      	ldrb	r3, [r0, #8]
 801bc8c:	ea43 0302 	orr.w	r3, r3, r2
 801bc90:	bf44      	itt	mi
 801bc92:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bc96:	b21b      	sxthmi	r3, r3
 801bc98:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bc9c:	7b6b      	ldrb	r3, [r5, #13]
 801bc9e:	7aaa      	ldrb	r2, [r5, #10]
 801bca0:	005b      	lsls	r3, r3, #1
 801bca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bca6:	4313      	orrs	r3, r2
 801bca8:	115a      	asrs	r2, r3, #5
 801bcaa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801bcae:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801bcb2:	e035      	b.n	801bd20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801bcb4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801bcb8:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801bcbc:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801bcc0:	7a2a      	ldrb	r2, [r5, #8]
 801bcc2:	ea42 0201 	orr.w	r2, r2, r1
 801bcc6:	f640 6109 	movw	r1, #3593	; 0xe09
 801bcca:	bf1c      	itt	ne
 801bccc:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801bcd0:	b212      	sxthne	r2, r2
 801bcd2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801bcd6:	f023 0210 	bic.w	r2, r3, #16
 801bcda:	428a      	cmp	r2, r1
 801bcdc:	d003      	beq.n	801bce6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801bcde:	f640 6213 	movw	r2, #3603	; 0xe13
 801bce2:	4293      	cmp	r3, r2
 801bce4:	d129      	bne.n	801bd3a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801bce6:	7b6e      	ldrb	r6, [r5, #13]
 801bce8:	4629      	mov	r1, r5
 801bcea:	0076      	lsls	r6, r6, #1
 801bcec:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801bcf0:	7aae      	ldrb	r6, [r5, #10]
 801bcf2:	4316      	orrs	r6, r2
 801bcf4:	f640 6213 	movw	r2, #3603	; 0xe13
 801bcf8:	4293      	cmp	r3, r2
 801bcfa:	4602      	mov	r2, r0
 801bcfc:	4620      	mov	r0, r4
 801bcfe:	bf16      	itet	ne
 801bd00:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bd04:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801bd08:	b29b      	uxthne	r3, r3
 801bd0a:	f7ff ff04 	bl	801bb16 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801bd0e:	7b43      	ldrb	r3, [r0, #13]
 801bd10:	7a82      	ldrb	r2, [r0, #10]
 801bd12:	005b      	lsls	r3, r3, #1
 801bd14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd18:	4313      	orrs	r3, r2
 801bd1a:	1af6      	subs	r6, r6, r3
 801bd1c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801bd20:	7b69      	ldrb	r1, [r5, #13]
 801bd22:	00cb      	lsls	r3, r1, #3
 801bd24:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bd28:	7a2b      	ldrb	r3, [r5, #8]
 801bd2a:	4313      	orrs	r3, r2
 801bd2c:	064a      	lsls	r2, r1, #25
 801bd2e:	bf44      	itt	mi
 801bd30:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bd34:	b21b      	sxthmi	r3, r3
 801bd36:	1bdb      	subs	r3, r3, r7
 801bd38:	e747      	b.n	801bbca <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801bd3a:	2300      	movs	r3, #0
 801bd3c:	e7b7      	b.n	801bcae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801bd3e:	bf00      	nop
 801bd40:	3fc00079 	.word	0x3fc00079

0801bd44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801bd44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801bd48:	4604      	mov	r4, r0
 801bd4a:	b942      	cbnz	r2, 801bd5e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801bd4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bd50:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801bd54:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801bd58:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801bd5c:	e047      	b.n	801bdee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bd5e:	7b51      	ldrb	r1, [r2, #13]
 801bd60:	8893      	ldrh	r3, [r2, #4]
 801bd62:	010d      	lsls	r5, r1, #4
 801bd64:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801bd68:	79d5      	ldrb	r5, [r2, #7]
 801bd6a:	4305      	orrs	r5, r0
 801bd6c:	2d04      	cmp	r5, #4
 801bd6e:	bfcc      	ite	gt
 801bd70:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801bd74:	f04f 0e01 	movle.w	lr, #1
 801bd78:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801bd7c:	f200 80ab 	bhi.w	801bed6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801bd80:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801bd84:	4283      	cmp	r3, r0
 801bd86:	d216      	bcs.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd88:	f240 605b 	movw	r0, #1627	; 0x65b
 801bd8c:	4283      	cmp	r3, r0
 801bd8e:	d859      	bhi.n	801be44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801bd90:	f240 6057 	movw	r0, #1623	; 0x657
 801bd94:	4283      	cmp	r3, r0
 801bd96:	d20e      	bcs.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bd98:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801bd9c:	d24a      	bcs.n	801be34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801bd9e:	f240 604e 	movw	r0, #1614	; 0x64e
 801bda2:	4283      	cmp	r3, r0
 801bda4:	d207      	bcs.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bda6:	f240 601a 	movw	r0, #1562	; 0x61a
 801bdaa:	4283      	cmp	r3, r0
 801bdac:	d02a      	beq.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bdae:	d821      	bhi.n	801bdf4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801bdb0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801bdb4:	d35b      	bcc.n	801be6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bdb6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801bdba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bdbe:	f040 80d0 	bne.w	801bf62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bdc2:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801bdc6:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bdca:	f040 80ca 	bne.w	801bf62 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801bdce:	00cb      	lsls	r3, r1, #3
 801bdd0:	0649      	lsls	r1, r1, #25
 801bdd2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801bdd6:	7a13      	ldrb	r3, [r2, #8]
 801bdd8:	ea43 0300 	orr.w	r3, r3, r0
 801bddc:	bf44      	itt	mi
 801bdde:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bde2:	b21b      	sxthmi	r3, r3
 801bde4:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bde8:	1b5d      	subs	r5, r3, r5
 801bdea:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801bdee:	4610      	mov	r0, r2
 801bdf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdf4:	f240 604b 	movw	r0, #1611	; 0x64b
 801bdf8:	4283      	cmp	r3, r0
 801bdfa:	d338      	bcc.n	801be6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bdfc:	f240 604c 	movw	r0, #1612	; 0x64c
 801be00:	4283      	cmp	r3, r0
 801be02:	d9d8      	bls.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be04:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801be08:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801be0c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801be10:	f040 80f3 	bne.w	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801be14:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801be18:	f040 80ef 	bne.w	801bffa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801be1c:	00cb      	lsls	r3, r1, #3
 801be1e:	064e      	lsls	r6, r1, #25
 801be20:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801be24:	7a13      	ldrb	r3, [r2, #8]
 801be26:	ea43 0300 	orr.w	r3, r3, r0
 801be2a:	bf44      	itt	mi
 801be2c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801be30:	b21b      	sxthmi	r3, r3
 801be32:	e7d9      	b.n	801bde8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801be34:	f240 6054 	movw	r0, #1620	; 0x654
 801be38:	4283      	cmp	r3, r0
 801be3a:	d8e3      	bhi.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801be3c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801be40:	d9e0      	bls.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801be42:	e7b8      	b.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be44:	f240 6074 	movw	r0, #1652	; 0x674
 801be48:	4283      	cmp	r3, r0
 801be4a:	d0b4      	beq.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be4c:	d82d      	bhi.n	801beaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801be4e:	f240 605e 	movw	r0, #1630	; 0x65e
 801be52:	4283      	cmp	r3, r0
 801be54:	d804      	bhi.n	801be60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801be56:	f240 605d 	movw	r0, #1629	; 0x65d
 801be5a:	4283      	cmp	r3, r0
 801be5c:	d3d2      	bcc.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801be5e:	e7aa      	b.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be60:	f240 605f 	movw	r0, #1631	; 0x65f
 801be64:	4283      	cmp	r3, r0
 801be66:	d0cd      	beq.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801be68:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801be6c:	d0a3      	beq.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801be6e:	00cb      	lsls	r3, r1, #3
 801be70:	0649      	lsls	r1, r1, #25
 801be72:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801be76:	7a13      	ldrb	r3, [r2, #8]
 801be78:	ea43 0300 	orr.w	r3, r3, r0
 801be7c:	bf44      	itt	mi
 801be7e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801be82:	b21b      	sxthmi	r3, r3
 801be84:	1b5d      	subs	r5, r3, r5
 801be86:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801be8a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801be8e:	7b53      	ldrb	r3, [r2, #13]
 801be90:	015b      	lsls	r3, r3, #5
 801be92:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801be96:	7993      	ldrb	r3, [r2, #6]
 801be98:	430b      	orrs	r3, r1
 801be9a:	2105      	movs	r1, #5
 801be9c:	005b      	lsls	r3, r3, #1
 801be9e:	fb93 f3f1 	sdiv	r3, r3, r1
 801bea2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801bea6:	440b      	add	r3, r1
 801bea8:	e756      	b.n	801bd58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801beaa:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801beae:	4283      	cmp	r3, r0
 801beb0:	d809      	bhi.n	801bec6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801beb2:	f240 60df 	movw	r0, #1759	; 0x6df
 801beb6:	4283      	cmp	r3, r0
 801beb8:	f4bf af7d 	bcs.w	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bebc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801bec0:	2b05      	cmp	r3, #5
 801bec2:	d8d4      	bhi.n	801be6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bec4:	e777      	b.n	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bec6:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801beca:	4283      	cmp	r3, r0
 801becc:	d09a      	beq.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bece:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801bed2:	4283      	cmp	r3, r0
 801bed4:	e7ca      	b.n	801be6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801bed6:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801beda:	d22b      	bcs.n	801bf34 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801bedc:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801bee0:	4283      	cmp	r3, r0
 801bee2:	d28f      	bcs.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bee4:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801bee8:	4283      	cmp	r3, r0
 801beea:	d816      	bhi.n	801bf1a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801beec:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801bef0:	4283      	cmp	r3, r0
 801bef2:	f4bf af60 	bcs.w	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bef6:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801befa:	4283      	cmp	r3, r0
 801befc:	d80a      	bhi.n	801bf14 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801befe:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801bf02:	4283      	cmp	r3, r0
 801bf04:	f4bf af57 	bcs.w	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf08:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801bf0c:	4283      	cmp	r3, r0
 801bf0e:	f43f af79 	beq.w	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf12:	e7ac      	b.n	801be6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801bf14:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801bf18:	e7f8      	b.n	801bf0c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801bf1a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801bf1e:	4283      	cmp	r3, r0
 801bf20:	d802      	bhi.n	801bf28 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801bf22:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801bf26:	e798      	b.n	801be5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801bf28:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801bf2c:	4283      	cmp	r3, r0
 801bf2e:	f47f af42 	bne.w	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf32:	e767      	b.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf34:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801bf38:	4283      	cmp	r3, r0
 801bf3a:	f43f af63 	beq.w	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf3e:	d802      	bhi.n	801bf46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801bf40:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801bf44:	e7f2      	b.n	801bf2c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801bf46:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801bf4a:	4283      	cmp	r3, r0
 801bf4c:	d805      	bhi.n	801bf5a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801bf4e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801bf52:	4283      	cmp	r3, r0
 801bf54:	f4ff af2f 	bcc.w	801bdb6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801bf58:	e754      	b.n	801be04 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801bf5a:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801bf5e:	4283      	cmp	r3, r0
 801bf60:	e7af      	b.n	801bec2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801bf62:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801bf66:	4617      	mov	r7, r2
 801bf68:	f102 0808 	add.w	r8, r2, #8
 801bf6c:	4666      	mov	r6, ip
 801bf6e:	6838      	ldr	r0, [r7, #0]
 801bf70:	3708      	adds	r7, #8
 801bf72:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801bf76:	46e6      	mov	lr, ip
 801bf78:	4547      	cmp	r7, r8
 801bf7a:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801bf7e:	46f4      	mov	ip, lr
 801bf80:	d1f5      	bne.n	801bf6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801bf82:	6838      	ldr	r0, [r7, #0]
 801bf84:	f8ce 0000 	str.w	r0, [lr]
 801bf88:	88b9      	ldrh	r1, [r7, #4]
 801bf8a:	f8ae 1004 	strh.w	r1, [lr, #4]
 801bf8e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801bf92:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801bf96:	d009      	beq.n	801bfac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801bf98:	7b51      	ldrb	r1, [r2, #13]
 801bf9a:	7992      	ldrb	r2, [r2, #6]
 801bf9c:	0149      	lsls	r1, r1, #5
 801bf9e:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bfa2:	4311      	orrs	r1, r2
 801bfa4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801bfa8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801bfac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801bfb0:	b2ad      	uxth	r5, r5
 801bfb2:	d00d      	beq.n	801bfd0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801bfb4:	442b      	add	r3, r5
 801bfb6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801bfba:	b29b      	uxth	r3, r3
 801bfbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801bfc0:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801bfc4:	10db      	asrs	r3, r3, #3
 801bfc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bfca:	4313      	orrs	r3, r2
 801bfcc:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801bfd0:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801bfd4:	00cb      	lsls	r3, r1, #3
 801bfd6:	064f      	lsls	r7, r1, #25
 801bfd8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801bfdc:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801bfe0:	ea43 0302 	orr.w	r3, r3, r2
 801bfe4:	bf44      	itt	mi
 801bfe6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801bfea:	b21b      	sxthmi	r3, r3
 801bfec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801bff0:	1b5b      	subs	r3, r3, r5
 801bff2:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801bff6:	4632      	mov	r2, r6
 801bff8:	e6f9      	b.n	801bdee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801bffa:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801bffe:	4617      	mov	r7, r2
 801c000:	f102 0908 	add.w	r9, r2, #8
 801c004:	4666      	mov	r6, ip
 801c006:	6838      	ldr	r0, [r7, #0]
 801c008:	3708      	adds	r7, #8
 801c00a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801c00e:	46e0      	mov	r8, ip
 801c010:	454f      	cmp	r7, r9
 801c012:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801c016:	46c4      	mov	ip, r8
 801c018:	d1f5      	bne.n	801c006 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801c01a:	6838      	ldr	r0, [r7, #0]
 801c01c:	f8c8 0000 	str.w	r0, [r8]
 801c020:	88b9      	ldrh	r1, [r7, #4]
 801c022:	f8a8 1004 	strh.w	r1, [r8, #4]
 801c026:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801c02a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801c02e:	d009      	beq.n	801c044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801c030:	7b51      	ldrb	r1, [r2, #13]
 801c032:	7992      	ldrb	r2, [r2, #6]
 801c034:	0149      	lsls	r1, r1, #5
 801c036:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801c03a:	4311      	orrs	r1, r2
 801c03c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801c040:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801c044:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801c048:	d00e      	beq.n	801c068 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801c04a:	eba3 030e 	sub.w	r3, r3, lr
 801c04e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801c052:	b29b      	uxth	r3, r3
 801c054:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801c058:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801c05c:	10db      	asrs	r3, r3, #3
 801c05e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c062:	4313      	orrs	r3, r2
 801c064:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801c068:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801c06c:	00cb      	lsls	r3, r1, #3
 801c06e:	0648      	lsls	r0, r1, #25
 801c070:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801c074:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801c078:	ea43 0302 	orr.w	r3, r3, r2
 801c07c:	bf44      	itt	mi
 801c07e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801c082:	b21b      	sxthmi	r3, r3
 801c084:	1b5d      	subs	r5, r3, r5
 801c086:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c08a:	e7b4      	b.n	801bff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801c08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801c08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c090:	461e      	mov	r6, r3
 801c092:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c094:	4604      	mov	r4, r0
 801c096:	4617      	mov	r7, r2
 801c098:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c09c:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801c0a0:	f7f4 ff0e 	bl	8010ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c0a4:	4605      	mov	r5, r0
 801c0a6:	b918      	cbnz	r0, 801c0b0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801c0a8:	6030      	str	r0, [r6, #0]
 801c0aa:	4628      	mov	r0, r5
 801c0ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c0b0:	683b      	ldr	r3, [r7, #0]
 801c0b2:	4601      	mov	r1, r0
 801c0b4:	4638      	mov	r0, r7
 801c0b6:	68db      	ldr	r3, [r3, #12]
 801c0b8:	4798      	blx	r3
 801c0ba:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c0be:	4602      	mov	r2, r0
 801c0c0:	6030      	str	r0, [r6, #0]
 801c0c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c0c6:	d213      	bcs.n	801c0f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801c0c8:	4643      	mov	r3, r8
 801c0ca:	4639      	mov	r1, r7
 801c0cc:	4620      	mov	r0, r4
 801c0ce:	f7ff fe39 	bl	801bd44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c0d2:	6030      	str	r0, [r6, #0]
 801c0d4:	6833      	ldr	r3, [r6, #0]
 801c0d6:	b143      	cbz	r3, 801c0ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801c0d8:	7b5a      	ldrb	r2, [r3, #13]
 801c0da:	7a9b      	ldrb	r3, [r3, #10]
 801c0dc:	0052      	lsls	r2, r2, #1
 801c0de:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c0e2:	4313      	orrs	r3, r2
 801c0e4:	bf0c      	ite	eq
 801c0e6:	2301      	moveq	r3, #1
 801c0e8:	2300      	movne	r3, #0
 801c0ea:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801c0ee:	e7dc      	b.n	801c0aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801c0f0:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c0f4:	b29b      	uxth	r3, r3
 801c0f6:	2b7f      	cmp	r3, #127	; 0x7f
 801c0f8:	d804      	bhi.n	801c104 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801c0fa:	4639      	mov	r1, r7
 801c0fc:	4620      	mov	r0, r4
 801c0fe:	f7ff fd15 	bl	801bb2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c102:	e7e6      	b.n	801c0d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801c104:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801c108:	2b00      	cmp	r3, #0
 801c10a:	d0e3      	beq.n	801c0d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c10c:	f640 1302 	movw	r3, #2306	; 0x902
 801c110:	429d      	cmp	r5, r3
 801c112:	d1df      	bne.n	801c0d4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801c114:	4601      	mov	r1, r0
 801c116:	4620      	mov	r0, r4
 801c118:	f7ff fcd9 	bl	801bace <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c11c:	e7d9      	b.n	801c0d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801c11e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801c11e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c122:	461e      	mov	r6, r3
 801c124:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c126:	4604      	mov	r4, r0
 801c128:	4617      	mov	r7, r2
 801c12a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801c12e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801c132:	f7f4 fec5 	bl	8010ec0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801c136:	4605      	mov	r5, r0
 801c138:	b918      	cbnz	r0, 801c142 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801c13a:	6030      	str	r0, [r6, #0]
 801c13c:	4628      	mov	r0, r5
 801c13e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c142:	683b      	ldr	r3, [r7, #0]
 801c144:	4601      	mov	r1, r0
 801c146:	4638      	mov	r0, r7
 801c148:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801c14c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801c150:	47c8      	blx	r9
 801c152:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801c156:	4602      	mov	r2, r0
 801c158:	6030      	str	r0, [r6, #0]
 801c15a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c15e:	d213      	bcs.n	801c188 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801c160:	4643      	mov	r3, r8
 801c162:	4639      	mov	r1, r7
 801c164:	4620      	mov	r0, r4
 801c166:	f7ff fded 	bl	801bd44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801c16a:	6030      	str	r0, [r6, #0]
 801c16c:	6833      	ldr	r3, [r6, #0]
 801c16e:	b143      	cbz	r3, 801c182 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801c170:	7b5a      	ldrb	r2, [r3, #13]
 801c172:	7a9b      	ldrb	r3, [r3, #10]
 801c174:	0052      	lsls	r2, r2, #1
 801c176:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801c17a:	4313      	orrs	r3, r2
 801c17c:	bf0c      	ite	eq
 801c17e:	2301      	moveq	r3, #1
 801c180:	2300      	movne	r3, #0
 801c182:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801c186:	e7d9      	b.n	801c13c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801c188:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801c18c:	b29b      	uxth	r3, r3
 801c18e:	2b7f      	cmp	r3, #127	; 0x7f
 801c190:	d804      	bhi.n	801c19c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801c192:	4639      	mov	r1, r7
 801c194:	4620      	mov	r0, r4
 801c196:	f7ff fcc9 	bl	801bb2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801c19a:	e7e6      	b.n	801c16a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801c19c:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801c1a0:	2b00      	cmp	r3, #0
 801c1a2:	d0e3      	beq.n	801c16c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c1a4:	f640 1302 	movw	r3, #2306	; 0x902
 801c1a8:	429d      	cmp	r5, r3
 801c1aa:	d1df      	bne.n	801c16c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801c1ac:	4601      	mov	r1, r0
 801c1ae:	4620      	mov	r0, r4
 801c1b0:	f7ff fc8d 	bl	801bace <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801c1b4:	e7d9      	b.n	801c16a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801c1b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801c1b6:	b510      	push	{r4, lr}
 801c1b8:	4604      	mov	r4, r0
 801c1ba:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801c1be:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c1c0:	b1e1      	cbz	r1, 801c1fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c1c2:	2b0a      	cmp	r3, #10
 801c1c4:	d02d      	beq.n	801c222 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c1c6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801c1c8:	3901      	subs	r1, #1
 801c1ca:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801c1ce:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801c1d0:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801c1d4:	1c51      	adds	r1, r2, #1
 801c1d6:	b289      	uxth	r1, r1
 801c1d8:	2901      	cmp	r1, #1
 801c1da:	bf8a      	itet	hi
 801c1dc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c1e0:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801c1e2:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801c1e4:	1c5a      	adds	r2, r3, #1
 801c1e6:	8722      	strh	r2, [r4, #56]	; 0x38
 801c1e8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c1ea:	4413      	add	r3, r2
 801c1ec:	b29b      	uxth	r3, r3
 801c1ee:	2b09      	cmp	r3, #9
 801c1f0:	bf88      	it	hi
 801c1f2:	3b0a      	subhi	r3, #10
 801c1f4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c1f8:	8458      	strh	r0, [r3, #34]	; 0x22
 801c1fa:	e7de      	b.n	801c1ba <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801c1fc:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c1fe:	2b0a      	cmp	r3, #10
 801c200:	d00f      	beq.n	801c222 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801c202:	4620      	mov	r0, r4
 801c204:	f7ff fc11 	bl	801ba2a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801c208:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801c20a:	1c5a      	adds	r2, r3, #1
 801c20c:	8722      	strh	r2, [r4, #56]	; 0x38
 801c20e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c210:	4413      	add	r3, r2
 801c212:	b29b      	uxth	r3, r3
 801c214:	2b09      	cmp	r3, #9
 801c216:	bf88      	it	hi
 801c218:	3b0a      	subhi	r3, #10
 801c21a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c21e:	8458      	strh	r0, [r3, #34]	; 0x22
 801c220:	e7ec      	b.n	801c1fc <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801c222:	bd10      	pop	{r4, pc}

0801c224 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801c224:	b538      	push	{r3, r4, r5, lr}
 801c226:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c228:	4604      	mov	r4, r0
 801c22a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801c22e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801c230:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801c232:	3a01      	subs	r2, #1
 801c234:	8702      	strh	r2, [r0, #56]	; 0x38
 801c236:	1c5a      	adds	r2, r3, #1
 801c238:	b292      	uxth	r2, r2
 801c23a:	2a09      	cmp	r2, #9
 801c23c:	bf8a      	itet	hi
 801c23e:	3b09      	subhi	r3, #9
 801c240:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801c242:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801c244:	f7ff ffb7 	bl	801c1b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801c248:	8c23      	ldrh	r3, [r4, #32]
 801c24a:	2b01      	cmp	r3, #1
 801c24c:	bf9c      	itt	ls
 801c24e:	3301      	addls	r3, #1
 801c250:	8423      	strhls	r3, [r4, #32]
 801c252:	8be3      	ldrh	r3, [r4, #30]
 801c254:	b90b      	cbnz	r3, 801c25a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801c256:	2302      	movs	r3, #2
 801c258:	83e3      	strh	r3, [r4, #30]
 801c25a:	8be3      	ldrh	r3, [r4, #30]
 801c25c:	4628      	mov	r0, r5
 801c25e:	3b01      	subs	r3, #1
 801c260:	b29b      	uxth	r3, r3
 801c262:	83e3      	strh	r3, [r4, #30]
 801c264:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801c268:	8365      	strh	r5, [r4, #26]
 801c26a:	bd38      	pop	{r3, r4, r5, pc}

0801c26c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801c26c:	428a      	cmp	r2, r1
 801c26e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c272:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801c274:	d932      	bls.n	801c2dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801c276:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801c278:	1a54      	subs	r4, r2, r1
 801c27a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801c27e:	19ee      	adds	r6, r5, r7
 801c280:	fa1f fe84 	uxth.w	lr, r4
 801c284:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801c288:	3e01      	subs	r6, #1
 801c28a:	b2b4      	uxth	r4, r6
 801c28c:	eba4 090e 	sub.w	r9, r4, lr
 801c290:	fa1f f989 	uxth.w	r9, r9
 801c294:	2c09      	cmp	r4, #9
 801c296:	4626      	mov	r6, r4
 801c298:	bf88      	it	hi
 801c29a:	f1a4 060a 	subhi.w	r6, r4, #10
 801c29e:	f1bc 0f00 	cmp.w	ip, #0
 801c2a2:	f104 34ff 	add.w	r4, r4, #4294967295
 801c2a6:	bf08      	it	eq
 801c2a8:	f04f 0c02 	moveq.w	ip, #2
 801c2ac:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801c2b0:	b2a4      	uxth	r4, r4
 801c2b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c2b6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801c2ba:	454c      	cmp	r4, r9
 801c2bc:	fa1f fc8c 	uxth.w	ip, ip
 801c2c0:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801c2c4:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801c2c8:	d1e4      	bne.n	801c294 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801c2ca:	eba5 050e 	sub.w	r5, r5, lr
 801c2ce:	eb0e 0408 	add.w	r4, lr, r8
 801c2d2:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801c2d6:	8705      	strh	r5, [r0, #56]	; 0x38
 801c2d8:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801c2dc:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801c2de:	250a      	movs	r5, #10
 801c2e0:	1a64      	subs	r4, r4, r1
 801c2e2:	4439      	add	r1, r7
 801c2e4:	b289      	uxth	r1, r1
 801c2e6:	8704      	strh	r4, [r0, #56]	; 0x38
 801c2e8:	2909      	cmp	r1, #9
 801c2ea:	bf88      	it	hi
 801c2ec:	390a      	subhi	r1, #10
 801c2ee:	86c1      	strh	r1, [r0, #54]	; 0x36
 801c2f0:	b18a      	cbz	r2, 801c316 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801c2f2:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801c2f4:	3a01      	subs	r2, #1
 801c2f6:	3101      	adds	r1, #1
 801c2f8:	b292      	uxth	r2, r2
 801c2fa:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801c2fe:	8701      	strh	r1, [r0, #56]	; 0x38
 801c300:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801c302:	b901      	cbnz	r1, 801c306 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801c304:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c306:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801c308:	3901      	subs	r1, #1
 801c30a:	b289      	uxth	r1, r1
 801c30c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801c30e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801c312:	844c      	strh	r4, [r1, #34]	; 0x22
 801c314:	e7ec      	b.n	801c2f0 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801c316:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c31a:	f7ff bf4c 	b.w	801c1b6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801c31e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801c31e:	b570      	push	{r4, r5, r6, lr}
 801c320:	2500      	movs	r5, #0
 801c322:	4295      	cmp	r5, r2
 801c324:	d011      	beq.n	801c34a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801c326:	8bc4      	ldrh	r4, [r0, #30]
 801c328:	f831 6b02 	ldrh.w	r6, [r1], #2
 801c32c:	4414      	add	r4, r2
 801c32e:	3c01      	subs	r4, #1
 801c330:	1b64      	subs	r4, r4, r5
 801c332:	b2a4      	uxth	r4, r4
 801c334:	2c01      	cmp	r4, #1
 801c336:	bf88      	it	hi
 801c338:	3c02      	subhi	r4, #2
 801c33a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801c33e:	8b64      	ldrh	r4, [r4, #26]
 801c340:	42b4      	cmp	r4, r6
 801c342:	d117      	bne.n	801c374 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801c344:	3501      	adds	r5, #1
 801c346:	b2ad      	uxth	r5, r5
 801c348:	e7eb      	b.n	801c322 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801c34a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c34e:	2400      	movs	r4, #0
 801c350:	4413      	add	r3, r2
 801c352:	b2a2      	uxth	r2, r4
 801c354:	429a      	cmp	r2, r3
 801c356:	da0f      	bge.n	801c378 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801c358:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801c35a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801c35e:	3401      	adds	r4, #1
 801c360:	4432      	add	r2, r6
 801c362:	b292      	uxth	r2, r2
 801c364:	2a09      	cmp	r2, #9
 801c366:	bf88      	it	hi
 801c368:	3a0a      	subhi	r2, #10
 801c36a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801c36e:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801c370:	42aa      	cmp	r2, r5
 801c372:	d0ee      	beq.n	801c352 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801c374:	2000      	movs	r0, #0
 801c376:	bd70      	pop	{r4, r5, r6, pc}
 801c378:	2001      	movs	r0, #1
 801c37a:	e7fc      	b.n	801c376 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801c37c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801c37c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c380:	4605      	mov	r5, r0
 801c382:	4616      	mov	r6, r2
 801c384:	1c8c      	adds	r4, r1, #2
 801c386:	8809      	ldrh	r1, [r1, #0]
 801c388:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801c38c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801c390:	42b3      	cmp	r3, r6
 801c392:	d124      	bne.n	801c3de <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801c394:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801c398:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801c39c:	f001 070f 	and.w	r7, r1, #15
 801c3a0:	4652      	mov	r2, sl
 801c3a2:	f8cd 8000 	str.w	r8, [sp]
 801c3a6:	464b      	mov	r3, r9
 801c3a8:	4621      	mov	r1, r4
 801c3aa:	4628      	mov	r0, r5
 801c3ac:	f7ff ffb7 	bl	801c31e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801c3b0:	4683      	mov	fp, r0
 801c3b2:	b168      	cbz	r0, 801c3d0 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801c3b4:	eb0a 0109 	add.w	r1, sl, r9
 801c3b8:	463a      	mov	r2, r7
 801c3ba:	4628      	mov	r0, r5
 801c3bc:	4441      	add	r1, r8
 801c3be:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801c3c2:	4649      	mov	r1, r9
 801c3c4:	f7ff ff52 	bl	801c26c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801c3c8:	4658      	mov	r0, fp
 801c3ca:	b003      	add	sp, #12
 801c3cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3d0:	eb07 010a 	add.w	r1, r7, sl
 801c3d4:	4449      	add	r1, r9
 801c3d6:	4441      	add	r1, r8
 801c3d8:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801c3dc:	e7d2      	b.n	801c384 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801c3de:	f04f 0b00 	mov.w	fp, #0
 801c3e2:	e7f1      	b.n	801c3c8 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801c3e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801c3e4:	b570      	push	{r4, r5, r6, lr}
 801c3e6:	8810      	ldrh	r0, [r2, #0]
 801c3e8:	4298      	cmp	r0, r3
 801c3ea:	d817      	bhi.n	801c41c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c3ec:	1e48      	subs	r0, r1, #1
 801c3ee:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801c3f2:	4298      	cmp	r0, r3
 801c3f4:	d312      	bcc.n	801c41c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c3f6:	2400      	movs	r4, #0
 801c3f8:	428c      	cmp	r4, r1
 801c3fa:	d20f      	bcs.n	801c41c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801c3fc:	1860      	adds	r0, r4, r1
 801c3fe:	1040      	asrs	r0, r0, #1
 801c400:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801c404:	0085      	lsls	r5, r0, #2
 801c406:	42b3      	cmp	r3, r6
 801c408:	d902      	bls.n	801c410 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801c40a:	3001      	adds	r0, #1
 801c40c:	b284      	uxth	r4, r0
 801c40e:	e7f3      	b.n	801c3f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c410:	d201      	bcs.n	801c416 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801c412:	b281      	uxth	r1, r0
 801c414:	e7f0      	b.n	801c3f8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801c416:	442a      	add	r2, r5
 801c418:	8850      	ldrh	r0, [r2, #2]
 801c41a:	bd70      	pop	{r4, r5, r6, pc}
 801c41c:	2000      	movs	r0, #0
 801c41e:	e7fc      	b.n	801c41a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801c420 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801c420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c424:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801c426:	4604      	mov	r4, r0
 801c428:	260b      	movs	r6, #11
 801c42a:	886f      	ldrh	r7, [r5, #2]
 801c42c:	087f      	lsrs	r7, r7, #1
 801c42e:	3e01      	subs	r6, #1
 801c430:	d013      	beq.n	801c45a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c432:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801c434:	462a      	mov	r2, r5
 801c436:	4639      	mov	r1, r7
 801c438:	4620      	mov	r0, r4
 801c43a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801c43e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801c442:	4643      	mov	r3, r8
 801c444:	f7ff ffce 	bl	801c3e4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801c448:	b138      	cbz	r0, 801c45a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801c44a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801c44e:	4642      	mov	r2, r8
 801c450:	4620      	mov	r0, r4
 801c452:	f7ff ff93 	bl	801c37c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801c456:	2800      	cmp	r0, #0
 801c458:	d1e9      	bne.n	801c42e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801c45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801c460 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801c460:	b570      	push	{r4, r5, r6, lr}
 801c462:	694a      	ldr	r2, [r1, #20]
 801c464:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801c466:	684b      	ldr	r3, [r1, #4]
 801c468:	1b54      	subs	r4, r2, r5
 801c46a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801c46c:	f000 8106 	beq.w	801c67c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801c470:	1b9b      	subs	r3, r3, r6
 801c472:	d003      	beq.n	801c47c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c474:	4363      	muls	r3, r4
 801c476:	2210      	movs	r2, #16
 801c478:	fb93 f3f2 	sdiv	r3, r3, r2
 801c47c:	680c      	ldr	r4, [r1, #0]
 801c47e:	698a      	ldr	r2, [r1, #24]
 801c480:	1b65      	subs	r5, r4, r5
 801c482:	f000 80fd 	beq.w	801c680 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801c486:	1b92      	subs	r2, r2, r6
 801c488:	d003      	beq.n	801c492 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c48a:	436a      	muls	r2, r5
 801c48c:	2410      	movs	r4, #16
 801c48e:	fb92 f2f4 	sdiv	r2, r2, r4
 801c492:	1a9b      	subs	r3, r3, r2
 801c494:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801c6bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801c498:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c49c:	460a      	mov	r2, r1
 801c49e:	ee07 3a90 	vmov	s15, r3
 801c4a2:	f100 040c 	add.w	r4, r0, #12
 801c4a6:	4603      	mov	r3, r0
 801c4a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c4ac:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c4b0:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801c4b4:	eeb1 6a43 	vneg.f32	s12, s6
 801c4b8:	edd2 7a02 	vldr	s15, [r2, #8]
 801c4bc:	3214      	adds	r2, #20
 801c4be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801c4c2:	ece3 6a01 	vstmia	r3!, {s13}
 801c4c6:	429c      	cmp	r4, r3
 801c4c8:	ed52 7a02 	vldr	s15, [r2, #-8]
 801c4cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c4d0:	edc3 7a02 	vstr	s15, [r3, #8]
 801c4d4:	ed52 7a01 	vldr	s15, [r2, #-4]
 801c4d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c4dc:	edc3 7a05 	vstr	s15, [r3, #20]
 801c4e0:	d1ea      	bne.n	801c4b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801c4e2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c4e4:	698b      	ldr	r3, [r1, #24]
 801c4e6:	edd0 4a02 	vldr	s9, [r0, #8]
 801c4ea:	1a9b      	subs	r3, r3, r2
 801c4ec:	edd0 3a00 	vldr	s7, [r0]
 801c4f0:	edd0 6a01 	vldr	s13, [r0, #4]
 801c4f4:	ee07 3a90 	vmov	s15, r3
 801c4f8:	684b      	ldr	r3, [r1, #4]
 801c4fa:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801c4fe:	ed90 5a05 	vldr	s10, [r0, #20]
 801c502:	1a9b      	subs	r3, r3, r2
 801c504:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c508:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801c50c:	ed90 2a03 	vldr	s4, [r0, #12]
 801c510:	ee07 3a10 	vmov	s14, r3
 801c514:	edd0 5a04 	vldr	s11, [r0, #16]
 801c518:	ee67 7a84 	vmul.f32	s15, s15, s8
 801c51c:	ed90 1a07 	vldr	s2, [r0, #28]
 801c520:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c524:	edd0 2a06 	vldr	s5, [r0, #24]
 801c528:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801c52c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801c530:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c534:	ee32 5a45 	vsub.f32	s10, s4, s10
 801c538:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c53c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801c540:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801c544:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c546:	694a      	ldr	r2, [r1, #20]
 801c548:	1b13      	subs	r3, r2, r4
 801c54a:	ee07 3a10 	vmov	s14, r3
 801c54e:	680b      	ldr	r3, [r1, #0]
 801c550:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c554:	1b1b      	subs	r3, r3, r4
 801c556:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c55a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801c55e:	ee07 3a10 	vmov	s14, r3
 801c562:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c566:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c56a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801c56e:	ee64 4a86 	vmul.f32	s9, s9, s12
 801c572:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801c576:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c578:	698b      	ldr	r3, [r1, #24]
 801c57a:	1a9b      	subs	r3, r3, r2
 801c57c:	ee06 3a90 	vmov	s13, r3
 801c580:	684b      	ldr	r3, [r1, #4]
 801c582:	1a9b      	subs	r3, r3, r2
 801c584:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c588:	ee07 3a10 	vmov	s14, r3
 801c58c:	ee66 6a84 	vmul.f32	s13, s13, s8
 801c590:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c594:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801c598:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c59c:	eee5 6a87 	vfma.f32	s13, s11, s14
 801c5a0:	ee66 6a83 	vmul.f32	s13, s13, s6
 801c5a4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801c5a8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c5aa:	694a      	ldr	r2, [r1, #20]
 801c5ac:	1b13      	subs	r3, r2, r4
 801c5ae:	ee07 3a10 	vmov	s14, r3
 801c5b2:	680b      	ldr	r3, [r1, #0]
 801c5b4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5b8:	1b1b      	subs	r3, r3, r4
 801c5ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5be:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801c5c2:	ee07 3a10 	vmov	s14, r3
 801c5c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5ca:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c5ce:	eea5 5a87 	vfma.f32	s10, s11, s14
 801c5d2:	edd0 5a08 	vldr	s11, [r0, #32]
 801c5d6:	ee31 1a65 	vsub.f32	s2, s2, s11
 801c5da:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801c5de:	ee25 5a06 	vmul.f32	s10, s10, s12
 801c5e2:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801c5e6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c5e8:	698b      	ldr	r3, [r1, #24]
 801c5ea:	1a9b      	subs	r3, r3, r2
 801c5ec:	ee07 3a10 	vmov	s14, r3
 801c5f0:	684b      	ldr	r3, [r1, #4]
 801c5f2:	1a9b      	subs	r3, r3, r2
 801c5f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c5f8:	ee01 3a90 	vmov	s3, r3
 801c5fc:	ee27 7a04 	vmul.f32	s14, s14, s8
 801c600:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801c604:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801c608:	ee61 1a84 	vmul.f32	s3, s3, s8
 801c60c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801c610:	ee27 7a03 	vmul.f32	s14, s14, s6
 801c614:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c618:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801c61a:	694a      	ldr	r2, [r1, #20]
 801c61c:	1b13      	subs	r3, r2, r4
 801c61e:	ee03 3a10 	vmov	s6, r3
 801c622:	680b      	ldr	r3, [r1, #0]
 801c624:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c628:	1b1b      	subs	r3, r3, r4
 801c62a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801c62e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801c632:	ee03 3a10 	vmov	s6, r3
 801c636:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801c63a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801c63e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801c642:	ee25 6a86 	vmul.f32	s12, s11, s12
 801c646:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801c64a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801c64e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801c652:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801c656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c65a:	dd13      	ble.n	801c684 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801c65c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c660:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801c664:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c666:	eee3 7a87 	vfma.f32	s15, s7, s14
 801c66a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801c66e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c672:	dd15      	ble.n	801c6a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801c674:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c678:	6403      	str	r3, [r0, #64]	; 0x40
 801c67a:	bd70      	pop	{r4, r5, r6, pc}
 801c67c:	4623      	mov	r3, r4
 801c67e:	e6fd      	b.n	801c47c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801c680:	462a      	mov	r2, r5
 801c682:	e706      	b.n	801c492 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801c684:	d502      	bpl.n	801c68c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801c686:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c68a:	e7e9      	b.n	801c660 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801c68c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801c690:	eea3 2a85 	vfma.f32	s4, s7, s10
 801c694:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801c698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c69c:	dade      	bge.n	801c65c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801c69e:	e7f2      	b.n	801c686 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801c6a0:	d502      	bpl.n	801c6a8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801c6a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801c6a6:	e7e7      	b.n	801c678 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801c6a8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801c6ac:	eee3 4a86 	vfma.f32	s9, s7, s12
 801c6b0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801c6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6b8:	dadc      	bge.n	801c674 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801c6ba:	e7f2      	b.n	801c6a2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801c6bc:	3d800000 	.word	0x3d800000

0801c6c0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801c6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c6c4:	2714      	movs	r7, #20
 801c6c6:	435f      	muls	r7, r3
 801c6c8:	eb02 0c07 	add.w	ip, r2, r7
 801c6cc:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801c6d0:	f115 0e0f 	adds.w	lr, r5, #15
 801c6d4:	f100 80a2 	bmi.w	801c81c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801c6d8:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801c6dc:	9c08      	ldr	r4, [sp, #32]
 801c6de:	2614      	movs	r6, #20
 801c6e0:	f8c0 e014 	str.w	lr, [r0, #20]
 801c6e4:	4366      	muls	r6, r4
 801c6e6:	eb02 0806 	add.w	r8, r2, r6
 801c6ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c6ee:	f115 040f 	adds.w	r4, r5, #15
 801c6f2:	f100 809f 	bmi.w	801c834 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801c6f6:	1124      	asrs	r4, r4, #4
 801c6f8:	eba4 040e 	sub.w	r4, r4, lr
 801c6fc:	6184      	str	r4, [r0, #24]
 801c6fe:	2c00      	cmp	r4, #0
 801c700:	f000 808a 	beq.w	801c818 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801c704:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801c708:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801c70c:	5995      	ldr	r5, [r2, r6]
 801c70e:	eba4 0809 	sub.w	r8, r4, r9
 801c712:	59d4      	ldr	r4, [r2, r7]
 801c714:	eba5 0a04 	sub.w	sl, r5, r4
 801c718:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801c71c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801c720:	fb0e fe05 	mul.w	lr, lr, r5
 801c724:	fb0a ee19 	mls	lr, sl, r9, lr
 801c728:	fb08 e404 	mla	r4, r8, r4, lr
 801c72c:	3c01      	subs	r4, #1
 801c72e:	19a4      	adds	r4, r4, r6
 801c730:	f100 808c 	bmi.w	801c84c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801c734:	fb94 fef6 	sdiv	lr, r4, r6
 801c738:	fb06 441e 	mls	r4, r6, lr, r4
 801c73c:	f8c0 e000 	str.w	lr, [r0]
 801c740:	6104      	str	r4, [r0, #16]
 801c742:	2d00      	cmp	r5, #0
 801c744:	f2c0 8095 	blt.w	801c872 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801c748:	fb95 f4f6 	sdiv	r4, r5, r6
 801c74c:	fb06 5514 	mls	r5, r6, r4, r5
 801c750:	6044      	str	r4, [r0, #4]
 801c752:	6085      	str	r5, [r0, #8]
 801c754:	60c6      	str	r6, [r0, #12]
 801c756:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801c75a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801c75e:	6945      	ldr	r5, [r0, #20]
 801c760:	59d2      	ldr	r2, [r2, r7]
 801c762:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801c766:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801c894 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801c76a:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c76e:	ee07 4a10 	vmov	s14, r4
 801c772:	6804      	ldr	r4, [r0, #0]
 801c774:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801c778:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c77c:	ee07 2a90 	vmov	s15, r2
 801c780:	ee27 7a26 	vmul.f32	s14, s14, s13
 801c784:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c788:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c78c:	edd3 6a00 	vldr	s13, [r3]
 801c790:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c794:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801c798:	eee6 6a27 	vfma.f32	s13, s12, s15
 801c79c:	edc0 6a07 	vstr	s13, [r0, #28]
 801c7a0:	edd0 6a01 	vldr	s13, [r0, #4]
 801c7a4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801c7a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801c7ac:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801c7b0:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c7b4:	ed80 6a08 	vstr	s12, [r0, #32]
 801c7b8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801c7ba:	6242      	str	r2, [r0, #36]	; 0x24
 801c7bc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801c7c0:	ed93 6a03 	vldr	s12, [r3, #12]
 801c7c4:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c7c8:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c7cc:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801c7d0:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801c7d4:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801c7d8:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801c7dc:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801c7e0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801c7e4:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801c7e6:	6302      	str	r2, [r0, #48]	; 0x30
 801c7e8:	ed93 6a06 	vldr	s12, [r3, #24]
 801c7ec:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801c7f0:	eea5 6a87 	vfma.f32	s12, s11, s14
 801c7f4:	eeb0 7a46 	vmov.f32	s14, s12
 801c7f8:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801c7fc:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c800:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801c804:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801c808:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801c80c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801c810:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801c814:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801c816:	63c3      	str	r3, [r0, #60]	; 0x3c
 801c818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c81c:	2410      	movs	r4, #16
 801c81e:	f1c5 0501 	rsb	r5, r5, #1
 801c822:	fb9e fef4 	sdiv	lr, lr, r4
 801c826:	f015 050f 	ands.w	r5, r5, #15
 801c82a:	bf18      	it	ne
 801c82c:	2501      	movne	r5, #1
 801c82e:	ebae 0e05 	sub.w	lr, lr, r5
 801c832:	e753      	b.n	801c6dc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801c834:	f04f 0910 	mov.w	r9, #16
 801c838:	f1c5 0501 	rsb	r5, r5, #1
 801c83c:	fb94 f4f9 	sdiv	r4, r4, r9
 801c840:	f015 050f 	ands.w	r5, r5, #15
 801c844:	bf18      	it	ne
 801c846:	2501      	movne	r5, #1
 801c848:	1b64      	subs	r4, r4, r5
 801c84a:	e755      	b.n	801c6f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801c84c:	4264      	negs	r4, r4
 801c84e:	fb94 fef6 	sdiv	lr, r4, r6
 801c852:	f1ce 0800 	rsb	r8, lr, #0
 801c856:	fb06 441e 	mls	r4, r6, lr, r4
 801c85a:	f8c0 8000 	str.w	r8, [r0]
 801c85e:	6104      	str	r4, [r0, #16]
 801c860:	2c00      	cmp	r4, #0
 801c862:	f43f af6e 	beq.w	801c742 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801c866:	ea6f 0e0e 	mvn.w	lr, lr
 801c86a:	1b34      	subs	r4, r6, r4
 801c86c:	f8c0 e000 	str.w	lr, [r0]
 801c870:	e766      	b.n	801c740 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801c872:	426d      	negs	r5, r5
 801c874:	fb95 f4f6 	sdiv	r4, r5, r6
 801c878:	f1c4 0e00 	rsb	lr, r4, #0
 801c87c:	fb06 5514 	mls	r5, r6, r4, r5
 801c880:	f8c0 e004 	str.w	lr, [r0, #4]
 801c884:	6085      	str	r5, [r0, #8]
 801c886:	2d00      	cmp	r5, #0
 801c888:	f43f af64 	beq.w	801c754 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801c88c:	43e4      	mvns	r4, r4
 801c88e:	1b75      	subs	r5, r6, r5
 801c890:	6044      	str	r4, [r0, #4]
 801c892:	e75e      	b.n	801c752 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801c894:	3d800000 	.word	0x3d800000

0801c898 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801c898:	4602      	mov	r2, r0
 801c89a:	b148      	cbz	r0, 801c8b0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801c89c:	2300      	movs	r3, #0
 801c89e:	b298      	uxth	r0, r3
 801c8a0:	3301      	adds	r3, #1
 801c8a2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801c8a6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801c8aa:	2900      	cmp	r1, #0
 801c8ac:	d1f7      	bne.n	801c89e <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801c8ae:	4770      	bx	lr
 801c8b0:	4770      	bx	lr

0801c8b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801c8b2:	b530      	push	{r4, r5, lr}
 801c8b4:	4604      	mov	r4, r0
 801c8b6:	b159      	cbz	r1, 801c8d0 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801c8b8:	b148      	cbz	r0, 801c8ce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	b298      	uxth	r0, r3
 801c8be:	4282      	cmp	r2, r0
 801c8c0:	d905      	bls.n	801c8ce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801c8c2:	5ccd      	ldrb	r5, [r1, r3]
 801c8c4:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801c8c8:	3301      	adds	r3, #1
 801c8ca:	2d00      	cmp	r5, #0
 801c8cc:	d1f6      	bne.n	801c8bc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801c8ce:	bd30      	pop	{r4, r5, pc}
 801c8d0:	4608      	mov	r0, r1
 801c8d2:	e7fc      	b.n	801c8ce <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801c8d4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801c8d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c8d6:	468c      	mov	ip, r1
 801c8d8:	b08b      	sub	sp, #44	; 0x2c
 801c8da:	2100      	movs	r1, #0
 801c8dc:	ae01      	add	r6, sp, #4
 801c8de:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c8e2:	211f      	movs	r1, #31
 801c8e4:	fbb0 f7f3 	udiv	r7, r0, r3
 801c8e8:	fb03 0517 	mls	r5, r3, r7, r0
 801c8ec:	4638      	mov	r0, r7
 801c8ee:	b2ec      	uxtb	r4, r5
 801c8f0:	2d09      	cmp	r5, #9
 801c8f2:	bfd4      	ite	le
 801c8f4:	3430      	addle	r4, #48	; 0x30
 801c8f6:	3457      	addgt	r4, #87	; 0x57
 801c8f8:	b2e4      	uxtb	r4, r4
 801c8fa:	558c      	strb	r4, [r1, r6]
 801c8fc:	1e4c      	subs	r4, r1, #1
 801c8fe:	b92f      	cbnz	r7, 801c90c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801c900:	4431      	add	r1, r6
 801c902:	4660      	mov	r0, ip
 801c904:	f7ff ffd5 	bl	801c8b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c908:	b00b      	add	sp, #44	; 0x2c
 801c90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c90c:	4621      	mov	r1, r4
 801c90e:	e7e9      	b.n	801c8e4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801c910 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801c910:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c912:	4607      	mov	r7, r0
 801c914:	b08b      	sub	sp, #44	; 0x2c
 801c916:	4608      	mov	r0, r1
 801c918:	b341      	cbz	r1, 801c96c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c91a:	1e99      	subs	r1, r3, #2
 801c91c:	2922      	cmp	r1, #34	; 0x22
 801c91e:	d825      	bhi.n	801c96c <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801c920:	2100      	movs	r1, #0
 801c922:	463c      	mov	r4, r7
 801c924:	261f      	movs	r6, #31
 801c926:	f10d 0c04 	add.w	ip, sp, #4
 801c92a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801c92e:	1e71      	subs	r1, r6, #1
 801c930:	fb94 fef3 	sdiv	lr, r4, r3
 801c934:	fb03 441e 	mls	r4, r3, lr, r4
 801c938:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801c93c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801c940:	b2ec      	uxtb	r4, r5
 801c942:	2d09      	cmp	r5, #9
 801c944:	bfd4      	ite	le
 801c946:	3430      	addle	r4, #48	; 0x30
 801c948:	3457      	addgt	r4, #87	; 0x57
 801c94a:	b2e4      	uxtb	r4, r4
 801c94c:	f80c 4006 	strb.w	r4, [ip, r6]
 801c950:	4674      	mov	r4, lr
 801c952:	b96c      	cbnz	r4, 801c970 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801c954:	2f00      	cmp	r7, #0
 801c956:	da05      	bge.n	801c964 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801c958:	ab0a      	add	r3, sp, #40	; 0x28
 801c95a:	4419      	add	r1, r3
 801c95c:	232d      	movs	r3, #45	; 0x2d
 801c95e:	f801 3c24 	strb.w	r3, [r1, #-36]
 801c962:	1eb1      	subs	r1, r6, #2
 801c964:	3101      	adds	r1, #1
 801c966:	4461      	add	r1, ip
 801c968:	f7ff ffa3 	bl	801c8b2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801c96c:	b00b      	add	sp, #44	; 0x2c
 801c96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c970:	460e      	mov	r6, r1
 801c972:	e7dc      	b.n	801c92e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801c974 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c978:	b085      	sub	sp, #20
 801c97a:	4691      	mov	r9, r2
 801c97c:	6802      	ldr	r2, [r0, #0]
 801c97e:	4688      	mov	r8, r1
 801c980:	461c      	mov	r4, r3
 801c982:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801c986:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801c98a:	4683      	mov	fp, r0
 801c98c:	4610      	mov	r0, r2
 801c98e:	9103      	str	r1, [sp, #12]
 801c990:	9302      	str	r3, [sp, #8]
 801c992:	9201      	str	r2, [sp, #4]
 801c994:	f7ff ff80 	bl	801c898 <_ZN8touchgfx7Unicode6strlenEPKt>
 801c998:	f1b8 0f00 	cmp.w	r8, #0
 801c99c:	bf0c      	ite	eq
 801c99e:	4684      	moveq	ip, r0
 801c9a0:	f100 0c01 	addne.w	ip, r0, #1
 801c9a4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801c9a8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801c9ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801c9ae:	fa1f fc8c 	uxth.w	ip, ip
 801c9b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801c9b4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801c9b8:	9903      	ldr	r1, [sp, #12]
 801c9ba:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801c9be:	d041      	beq.n	801ca44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c9c0:	d834      	bhi.n	801ca2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801c9c2:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801c9c6:	d059      	beq.n	801ca7c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801c9c8:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801c9cc:	d03a      	beq.n	801ca44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801c9ce:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801c9d2:	d034      	beq.n	801ca3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801c9d4:	2400      	movs	r4, #0
 801c9d6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801c9da:	3a01      	subs	r2, #1
 801c9dc:	b169      	cbz	r1, 801c9fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c9de:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c9e0:	458c      	cmp	ip, r1
 801c9e2:	da09      	bge.n	801c9f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801c9e4:	eba1 010c 	sub.w	r1, r1, ip
 801c9e8:	b289      	uxth	r1, r1
 801c9ea:	b933      	cbnz	r3, 801c9fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801c9ec:	2e00      	cmp	r6, #0
 801c9ee:	d051      	beq.n	801ca94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c9f0:	2800      	cmp	r0, #0
 801c9f2:	d04f      	beq.n	801ca94 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801c9f4:	440c      	add	r4, r1
 801c9f6:	b2a4      	uxth	r4, r4
 801c9f8:	2100      	movs	r1, #0
 801c9fa:	682b      	ldr	r3, [r5, #0]
 801c9fc:	4293      	cmp	r3, r2
 801c9fe:	da07      	bge.n	801ca10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ca00:	f1b8 0f00 	cmp.w	r8, #0
 801ca04:	d004      	beq.n	801ca10 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801ca06:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801ca0a:	682b      	ldr	r3, [r5, #0]
 801ca0c:	3301      	adds	r3, #1
 801ca0e:	602b      	str	r3, [r5, #0]
 801ca10:	2730      	movs	r7, #48	; 0x30
 801ca12:	2c00      	cmp	r4, #0
 801ca14:	d04e      	beq.n	801cab4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ca16:	682e      	ldr	r6, [r5, #0]
 801ca18:	3c01      	subs	r4, #1
 801ca1a:	42b2      	cmp	r2, r6
 801ca1c:	b2a4      	uxth	r4, r4
 801ca1e:	dd49      	ble.n	801cab4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801ca20:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801ca24:	682b      	ldr	r3, [r5, #0]
 801ca26:	3301      	adds	r3, #1
 801ca28:	602b      	str	r3, [r5, #0]
 801ca2a:	e7f2      	b.n	801ca12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801ca2c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801ca30:	d01d      	beq.n	801ca6e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801ca32:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801ca36:	d002      	beq.n	801ca3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801ca38:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801ca3c:	e7c9      	b.n	801c9d2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801ca3e:	4684      	mov	ip, r0
 801ca40:	f04f 0800 	mov.w	r8, #0
 801ca44:	2c00      	cmp	r4, #0
 801ca46:	d0c6      	beq.n	801c9d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ca48:	b947      	cbnz	r7, 801ca5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ca4a:	2801      	cmp	r0, #1
 801ca4c:	d106      	bne.n	801ca5c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801ca4e:	8814      	ldrh	r4, [r2, #0]
 801ca50:	2c30      	cmp	r4, #48	; 0x30
 801ca52:	bf02      	ittt	eq
 801ca54:	3202      	addeq	r2, #2
 801ca56:	4638      	moveq	r0, r7
 801ca58:	f8cb 2000 	streq.w	r2, [fp]
 801ca5c:	45bc      	cmp	ip, r7
 801ca5e:	da14      	bge.n	801ca8a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801ca60:	b2bf      	uxth	r7, r7
 801ca62:	eba7 040c 	sub.w	r4, r7, ip
 801ca66:	46bc      	mov	ip, r7
 801ca68:	b2a4      	uxth	r4, r4
 801ca6a:	2600      	movs	r6, #0
 801ca6c:	e7b3      	b.n	801c9d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ca6e:	4684      	mov	ip, r0
 801ca70:	b16c      	cbz	r4, 801ca8e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801ca72:	42b8      	cmp	r0, r7
 801ca74:	dd00      	ble.n	801ca78 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801ca76:	b2b8      	uxth	r0, r7
 801ca78:	2400      	movs	r4, #0
 801ca7a:	e003      	b.n	801ca84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801ca7c:	f04f 0c01 	mov.w	ip, #1
 801ca80:	2400      	movs	r4, #0
 801ca82:	4660      	mov	r0, ip
 801ca84:	4626      	mov	r6, r4
 801ca86:	46a0      	mov	r8, r4
 801ca88:	e7a5      	b.n	801c9d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ca8a:	2400      	movs	r4, #0
 801ca8c:	e7ed      	b.n	801ca6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801ca8e:	4626      	mov	r6, r4
 801ca90:	46a0      	mov	r8, r4
 801ca92:	e7a0      	b.n	801c9d6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801ca94:	2900      	cmp	r1, #0
 801ca96:	d0b0      	beq.n	801c9fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801ca98:	2720      	movs	r7, #32
 801ca9a:	682e      	ldr	r6, [r5, #0]
 801ca9c:	2900      	cmp	r1, #0
 801ca9e:	d0ac      	beq.n	801c9fa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801caa0:	3901      	subs	r1, #1
 801caa2:	4296      	cmp	r6, r2
 801caa4:	b289      	uxth	r1, r1
 801caa6:	daa7      	bge.n	801c9f8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801caa8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801caac:	682b      	ldr	r3, [r5, #0]
 801caae:	3301      	adds	r3, #1
 801cab0:	602b      	str	r3, [r5, #0]
 801cab2:	e7f2      	b.n	801ca9a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801cab4:	b188      	cbz	r0, 801cada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801cab6:	682b      	ldr	r3, [r5, #0]
 801cab8:	3801      	subs	r0, #1
 801caba:	429a      	cmp	r2, r3
 801cabc:	b280      	uxth	r0, r0
 801cabe:	dd0c      	ble.n	801cada <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801cac0:	f8db 3000 	ldr.w	r3, [fp]
 801cac4:	1c9c      	adds	r4, r3, #2
 801cac6:	f8cb 4000 	str.w	r4, [fp]
 801caca:	881c      	ldrh	r4, [r3, #0]
 801cacc:	682b      	ldr	r3, [r5, #0]
 801cace:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801cad2:	682b      	ldr	r3, [r5, #0]
 801cad4:	3301      	adds	r3, #1
 801cad6:	602b      	str	r3, [r5, #0]
 801cad8:	e7ec      	b.n	801cab4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801cada:	2620      	movs	r6, #32
 801cadc:	b151      	cbz	r1, 801caf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801cade:	6828      	ldr	r0, [r5, #0]
 801cae0:	3901      	subs	r1, #1
 801cae2:	4282      	cmp	r2, r0
 801cae4:	b289      	uxth	r1, r1
 801cae6:	dd05      	ble.n	801caf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801cae8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801caec:	682b      	ldr	r3, [r5, #0]
 801caee:	3301      	adds	r3, #1
 801caf0:	602b      	str	r3, [r5, #0]
 801caf2:	e7f3      	b.n	801cadc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801caf4:	b005      	add	sp, #20
 801caf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cafa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801cafa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cafe:	2400      	movs	r4, #0
 801cb00:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801cb04:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801cb08:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801cb0c:	8014      	strh	r4, [r2, #0]
 801cb0e:	701c      	strb	r4, [r3, #0]
 801cb10:	f888 4000 	strb.w	r4, [r8]
 801cb14:	f88c 4000 	strb.w	r4, [ip]
 801cb18:	f88e 4000 	strb.w	r4, [lr]
 801cb1c:	703c      	strb	r4, [r7, #0]
 801cb1e:	6804      	ldr	r4, [r0, #0]
 801cb20:	b1a4      	cbz	r4, 801cb4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801cb22:	8824      	ldrh	r4, [r4, #0]
 801cb24:	f04f 0901 	mov.w	r9, #1
 801cb28:	b314      	cbz	r4, 801cb70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cb2a:	2c2b      	cmp	r4, #43	; 0x2b
 801cb2c:	d001      	beq.n	801cb32 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801cb2e:	2c20      	cmp	r4, #32
 801cb30:	d110      	bne.n	801cb54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801cb32:	8014      	strh	r4, [r2, #0]
 801cb34:	6804      	ldr	r4, [r0, #0]
 801cb36:	b10c      	cbz	r4, 801cb3c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801cb38:	3402      	adds	r4, #2
 801cb3a:	6004      	str	r4, [r0, #0]
 801cb3c:	680c      	ldr	r4, [r1, #0]
 801cb3e:	b10c      	cbz	r4, 801cb44 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801cb40:	3401      	adds	r4, #1
 801cb42:	600c      	str	r4, [r1, #0]
 801cb44:	6804      	ldr	r4, [r0, #0]
 801cb46:	b17c      	cbz	r4, 801cb68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801cb48:	8824      	ldrh	r4, [r4, #0]
 801cb4a:	e7ed      	b.n	801cb28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cb4c:	680c      	ldr	r4, [r1, #0]
 801cb4e:	b17c      	cbz	r4, 801cb70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cb50:	7824      	ldrb	r4, [r4, #0]
 801cb52:	e7e7      	b.n	801cb24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801cb54:	2c2d      	cmp	r4, #45	; 0x2d
 801cb56:	d102      	bne.n	801cb5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801cb58:	f883 9000 	strb.w	r9, [r3]
 801cb5c:	e7ea      	b.n	801cb34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cb5e:	2c23      	cmp	r4, #35	; 0x23
 801cb60:	d107      	bne.n	801cb72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801cb62:	f888 9000 	strb.w	r9, [r8]
 801cb66:	e7e5      	b.n	801cb34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801cb68:	680c      	ldr	r4, [r1, #0]
 801cb6a:	b10c      	cbz	r4, 801cb70 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801cb6c:	7824      	ldrb	r4, [r4, #0]
 801cb6e:	e7db      	b.n	801cb28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801cb70:	2400      	movs	r4, #0
 801cb72:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801cb76:	2b09      	cmp	r3, #9
 801cb78:	d901      	bls.n	801cb7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801cb7a:	2c2a      	cmp	r4, #42	; 0x2a
 801cb7c:	d122      	bne.n	801cbc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801cb7e:	2301      	movs	r3, #1
 801cb80:	2c30      	cmp	r4, #48	; 0x30
 801cb82:	f88e 3000 	strb.w	r3, [lr]
 801cb86:	d10d      	bne.n	801cba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801cb88:	f88c 3000 	strb.w	r3, [ip]
 801cb8c:	6803      	ldr	r3, [r0, #0]
 801cb8e:	b10b      	cbz	r3, 801cb94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801cb90:	3302      	adds	r3, #2
 801cb92:	6003      	str	r3, [r0, #0]
 801cb94:	680b      	ldr	r3, [r1, #0]
 801cb96:	b10b      	cbz	r3, 801cb9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801cb98:	3301      	adds	r3, #1
 801cb9a:	600b      	str	r3, [r1, #0]
 801cb9c:	6803      	ldr	r3, [r0, #0]
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d02f      	beq.n	801cc02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801cba2:	881c      	ldrh	r4, [r3, #0]
 801cba4:	2c2a      	cmp	r4, #42	; 0x2a
 801cba6:	d135      	bne.n	801cc14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801cba8:	f04f 33ff 	mov.w	r3, #4294967295
 801cbac:	6033      	str	r3, [r6, #0]
 801cbae:	6803      	ldr	r3, [r0, #0]
 801cbb0:	b10b      	cbz	r3, 801cbb6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801cbb2:	3302      	adds	r3, #2
 801cbb4:	6003      	str	r3, [r0, #0]
 801cbb6:	680b      	ldr	r3, [r1, #0]
 801cbb8:	b10b      	cbz	r3, 801cbbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801cbba:	3301      	adds	r3, #1
 801cbbc:	600b      	str	r3, [r1, #0]
 801cbbe:	6803      	ldr	r3, [r0, #0]
 801cbc0:	b31b      	cbz	r3, 801cc0a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801cbc2:	881c      	ldrh	r4, [r3, #0]
 801cbc4:	2c2e      	cmp	r4, #46	; 0x2e
 801cbc6:	d11a      	bne.n	801cbfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801cbc8:	2301      	movs	r3, #1
 801cbca:	703b      	strb	r3, [r7, #0]
 801cbcc:	6803      	ldr	r3, [r0, #0]
 801cbce:	b10b      	cbz	r3, 801cbd4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801cbd0:	3302      	adds	r3, #2
 801cbd2:	6003      	str	r3, [r0, #0]
 801cbd4:	680b      	ldr	r3, [r1, #0]
 801cbd6:	b10b      	cbz	r3, 801cbdc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801cbd8:	3301      	adds	r3, #1
 801cbda:	600b      	str	r3, [r1, #0]
 801cbdc:	6803      	ldr	r3, [r0, #0]
 801cbde:	2b00      	cmp	r3, #0
 801cbe0:	d036      	beq.n	801cc50 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801cbe2:	881b      	ldrh	r3, [r3, #0]
 801cbe4:	2b2a      	cmp	r3, #42	; 0x2a
 801cbe6:	d137      	bne.n	801cc58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801cbe8:	f04f 33ff 	mov.w	r3, #4294967295
 801cbec:	602b      	str	r3, [r5, #0]
 801cbee:	6803      	ldr	r3, [r0, #0]
 801cbf0:	b10b      	cbz	r3, 801cbf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801cbf2:	3302      	adds	r3, #2
 801cbf4:	6003      	str	r3, [r0, #0]
 801cbf6:	680b      	ldr	r3, [r1, #0]
 801cbf8:	b10b      	cbz	r3, 801cbfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801cbfa:	3301      	adds	r3, #1
 801cbfc:	600b      	str	r3, [r1, #0]
 801cbfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cc02:	680c      	ldr	r4, [r1, #0]
 801cc04:	b134      	cbz	r4, 801cc14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801cc06:	7824      	ldrb	r4, [r4, #0]
 801cc08:	e7cc      	b.n	801cba4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801cc0a:	680b      	ldr	r3, [r1, #0]
 801cc0c:	2b00      	cmp	r3, #0
 801cc0e:	d0f6      	beq.n	801cbfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801cc10:	781c      	ldrb	r4, [r3, #0]
 801cc12:	e7d7      	b.n	801cbc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801cc14:	2300      	movs	r3, #0
 801cc16:	220a      	movs	r2, #10
 801cc18:	6033      	str	r3, [r6, #0]
 801cc1a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801cc1e:	fa1f f38c 	uxth.w	r3, ip
 801cc22:	2b09      	cmp	r3, #9
 801cc24:	d8ce      	bhi.n	801cbc4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801cc26:	6833      	ldr	r3, [r6, #0]
 801cc28:	fb02 c303 	mla	r3, r2, r3, ip
 801cc2c:	6033      	str	r3, [r6, #0]
 801cc2e:	6803      	ldr	r3, [r0, #0]
 801cc30:	b10b      	cbz	r3, 801cc36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801cc32:	3302      	adds	r3, #2
 801cc34:	6003      	str	r3, [r0, #0]
 801cc36:	680b      	ldr	r3, [r1, #0]
 801cc38:	b10b      	cbz	r3, 801cc3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801cc3a:	3301      	adds	r3, #1
 801cc3c:	600b      	str	r3, [r1, #0]
 801cc3e:	6803      	ldr	r3, [r0, #0]
 801cc40:	b10b      	cbz	r3, 801cc46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801cc42:	881c      	ldrh	r4, [r3, #0]
 801cc44:	e7e9      	b.n	801cc1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801cc46:	680c      	ldr	r4, [r1, #0]
 801cc48:	2c00      	cmp	r4, #0
 801cc4a:	d0e6      	beq.n	801cc1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801cc4c:	7824      	ldrb	r4, [r4, #0]
 801cc4e:	e7e4      	b.n	801cc1a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801cc50:	680b      	ldr	r3, [r1, #0]
 801cc52:	b10b      	cbz	r3, 801cc58 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801cc54:	781b      	ldrb	r3, [r3, #0]
 801cc56:	e7c5      	b.n	801cbe4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801cc58:	2200      	movs	r2, #0
 801cc5a:	240a      	movs	r4, #10
 801cc5c:	602a      	str	r2, [r5, #0]
 801cc5e:	3b30      	subs	r3, #48	; 0x30
 801cc60:	682a      	ldr	r2, [r5, #0]
 801cc62:	b29e      	uxth	r6, r3
 801cc64:	2e09      	cmp	r6, #9
 801cc66:	d813      	bhi.n	801cc90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801cc68:	fb04 3302 	mla	r3, r4, r2, r3
 801cc6c:	602b      	str	r3, [r5, #0]
 801cc6e:	6803      	ldr	r3, [r0, #0]
 801cc70:	b10b      	cbz	r3, 801cc76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801cc72:	3302      	adds	r3, #2
 801cc74:	6003      	str	r3, [r0, #0]
 801cc76:	680b      	ldr	r3, [r1, #0]
 801cc78:	b10b      	cbz	r3, 801cc7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801cc7a:	3301      	adds	r3, #1
 801cc7c:	600b      	str	r3, [r1, #0]
 801cc7e:	6803      	ldr	r3, [r0, #0]
 801cc80:	b10b      	cbz	r3, 801cc86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801cc82:	881b      	ldrh	r3, [r3, #0]
 801cc84:	e7eb      	b.n	801cc5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801cc86:	680b      	ldr	r3, [r1, #0]
 801cc88:	2b00      	cmp	r3, #0
 801cc8a:	d0e8      	beq.n	801cc5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801cc8c:	781b      	ldrb	r3, [r3, #0]
 801cc8e:	e7e6      	b.n	801cc5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801cc90:	2a06      	cmp	r2, #6
 801cc92:	bfa8      	it	ge
 801cc94:	2206      	movge	r2, #6
 801cc96:	602a      	str	r2, [r5, #0]
 801cc98:	e7b1      	b.n	801cbfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801cc9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801cc9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc9e:	b0a3      	sub	sp, #140	; 0x8c
 801cca0:	2600      	movs	r6, #0
 801cca2:	4607      	mov	r7, r0
 801cca4:	4688      	mov	r8, r1
 801cca6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801ccaa:	4631      	mov	r1, r6
 801ccac:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801ccae:	4648      	mov	r0, r9
 801ccb0:	960d      	str	r6, [sp, #52]	; 0x34
 801ccb2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801ccb6:	2242      	movs	r2, #66	; 0x42
 801ccb8:	f00c f8b2 	bl	8028e20 <memset>
 801ccbc:	b15f      	cbz	r7, 801ccd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801ccbe:	f108 3aff 	add.w	sl, r8, #4294967295
 801ccc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ccc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ccc6:	b152      	cbz	r2, 801ccde <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801ccc8:	8812      	ldrh	r2, [r2, #0]
 801ccca:	b10a      	cbz	r2, 801ccd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cccc:	459a      	cmp	sl, r3
 801ccce:	dc2e      	bgt.n	801cd2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801ccd0:	2200      	movs	r2, #0
 801ccd2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801ccd6:	4638      	mov	r0, r7
 801ccd8:	b023      	add	sp, #140	; 0x8c
 801ccda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccde:	9a08      	ldr	r2, [sp, #32]
 801cce0:	2a00      	cmp	r2, #0
 801cce2:	d0f5      	beq.n	801ccd0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801cce4:	7812      	ldrb	r2, [r2, #0]
 801cce6:	e7f0      	b.n	801ccca <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801cce8:	2d00      	cmp	r5, #0
 801ccea:	d0ea      	beq.n	801ccc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ccec:	782a      	ldrb	r2, [r5, #0]
 801ccee:	b142      	cbz	r2, 801cd02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801ccf0:	2a25      	cmp	r2, #37	; 0x25
 801ccf2:	d001      	beq.n	801ccf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801ccf4:	459a      	cmp	sl, r3
 801ccf6:	dc08      	bgt.n	801cd0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801ccf8:	f1bb 0f00 	cmp.w	fp, #0
 801ccfc:	d121      	bne.n	801cd42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801ccfe:	2d00      	cmp	r5, #0
 801cd00:	d0df      	beq.n	801ccc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cd02:	782a      	ldrb	r2, [r5, #0]
 801cd04:	f04f 0b00 	mov.w	fp, #0
 801cd08:	e01d      	b.n	801cd46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801cd0a:	f1bb 0f00 	cmp.w	fp, #0
 801cd0e:	d077      	beq.n	801ce00 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801cd10:	f8bb 2000 	ldrh.w	r2, [fp]
 801cd14:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801cd18:	f1bb 0f00 	cmp.w	fp, #0
 801cd1c:	d002      	beq.n	801cd24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801cd1e:	f10b 0202 	add.w	r2, fp, #2
 801cd22:	9209      	str	r2, [sp, #36]	; 0x24
 801cd24:	b10d      	cbz	r5, 801cd2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801cd26:	3501      	adds	r5, #1
 801cd28:	9508      	str	r5, [sp, #32]
 801cd2a:	3301      	adds	r3, #1
 801cd2c:	930d      	str	r3, [sp, #52]	; 0x34
 801cd2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd30:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801cd34:	f1bb 0f00 	cmp.w	fp, #0
 801cd38:	d0d6      	beq.n	801cce8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801cd3a:	f8bb 2000 	ldrh.w	r2, [fp]
 801cd3e:	2a00      	cmp	r2, #0
 801cd40:	d1d6      	bne.n	801ccf0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801cd42:	f8bb 2000 	ldrh.w	r2, [fp]
 801cd46:	2a00      	cmp	r2, #0
 801cd48:	d0bb      	beq.n	801ccc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cd4a:	459a      	cmp	sl, r3
 801cd4c:	ddb9      	ble.n	801ccc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801cd4e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801cd52:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801cd56:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801cd5a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801cd5e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801cd62:	960e      	str	r6, [sp, #56]	; 0x38
 801cd64:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801cd68:	960f      	str	r6, [sp, #60]	; 0x3c
 801cd6a:	f1bb 0f00 	cmp.w	fp, #0
 801cd6e:	d002      	beq.n	801cd76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801cd70:	f10b 0302 	add.w	r3, fp, #2
 801cd74:	9309      	str	r3, [sp, #36]	; 0x24
 801cd76:	b10d      	cbz	r5, 801cd7c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801cd78:	1c6b      	adds	r3, r5, #1
 801cd7a:	9308      	str	r3, [sp, #32]
 801cd7c:	ab0f      	add	r3, sp, #60	; 0x3c
 801cd7e:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801cd82:	a908      	add	r1, sp, #32
 801cd84:	a809      	add	r0, sp, #36	; 0x24
 801cd86:	9305      	str	r3, [sp, #20]
 801cd88:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801cd8c:	9304      	str	r3, [sp, #16]
 801cd8e:	ab0e      	add	r3, sp, #56	; 0x38
 801cd90:	9303      	str	r3, [sp, #12]
 801cd92:	ab0c      	add	r3, sp, #48	; 0x30
 801cd94:	9302      	str	r3, [sp, #8]
 801cd96:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801cd9a:	9301      	str	r3, [sp, #4]
 801cd9c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801cda0:	9300      	str	r3, [sp, #0]
 801cda2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801cda6:	f7ff fea8 	bl	801cafa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801cdaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	bfbf      	itttt	lt
 801cdb0:	6823      	ldrlt	r3, [r4, #0]
 801cdb2:	3404      	addlt	r4, #4
 801cdb4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cdb8:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cdba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801cdbc:	2b00      	cmp	r3, #0
 801cdbe:	bfbe      	ittt	lt
 801cdc0:	6823      	ldrlt	r3, [r4, #0]
 801cdc2:	3404      	addlt	r4, #4
 801cdc4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801cdc8:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801cdcc:	bfb8      	it	lt
 801cdce:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801cdd0:	b1d9      	cbz	r1, 801ce0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801cdd2:	880b      	ldrh	r3, [r1, #0]
 801cdd4:	2b69      	cmp	r3, #105	; 0x69
 801cdd6:	d01f      	beq.n	801ce18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801cdd8:	d82f      	bhi.n	801ce3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801cdda:	2b58      	cmp	r3, #88	; 0x58
 801cddc:	d01c      	beq.n	801ce18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801cdde:	d818      	bhi.n	801ce12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801cde0:	2b25      	cmp	r3, #37	; 0x25
 801cde2:	d034      	beq.n	801ce4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801cde4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cde6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801cdea:	f1bb 0f00 	cmp.w	fp, #0
 801cdee:	f000 80b7 	beq.w	801cf60 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801cdf2:	f8bb 5000 	ldrh.w	r5, [fp]
 801cdf6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801cdfa:	3301      	adds	r3, #1
 801cdfc:	930d      	str	r3, [sp, #52]	; 0x34
 801cdfe:	e029      	b.n	801ce54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801ce00:	b10d      	cbz	r5, 801ce06 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801ce02:	782a      	ldrb	r2, [r5, #0]
 801ce04:	e786      	b.n	801cd14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ce06:	462a      	mov	r2, r5
 801ce08:	e784      	b.n	801cd14 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801ce0a:	2a00      	cmp	r2, #0
 801ce0c:	d0ea      	beq.n	801cde4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ce0e:	7813      	ldrb	r3, [r2, #0]
 801ce10:	e7e0      	b.n	801cdd4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801ce12:	3b63      	subs	r3, #99	; 0x63
 801ce14:	2b01      	cmp	r3, #1
 801ce16:	d8e5      	bhi.n	801cde4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ce18:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801ce1c:	b329      	cbz	r1, 801ce6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801ce1e:	880b      	ldrh	r3, [r1, #0]
 801ce20:	2b69      	cmp	r3, #105	; 0x69
 801ce22:	d063      	beq.n	801ceec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ce24:	d825      	bhi.n	801ce72 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801ce26:	2b63      	cmp	r3, #99	; 0x63
 801ce28:	d038      	beq.n	801ce9c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801ce2a:	2b64      	cmp	r3, #100	; 0x64
 801ce2c:	d05e      	beq.n	801ceec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801ce2e:	2b58      	cmp	r3, #88	; 0x58
 801ce30:	d07a      	beq.n	801cf28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801ce32:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801ce36:	4625      	mov	r5, r4
 801ce38:	e036      	b.n	801cea8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ce3a:	2b73      	cmp	r3, #115	; 0x73
 801ce3c:	d0ec      	beq.n	801ce18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ce3e:	d802      	bhi.n	801ce46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801ce40:	2b6f      	cmp	r3, #111	; 0x6f
 801ce42:	d1cf      	bne.n	801cde4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801ce44:	e7e8      	b.n	801ce18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ce46:	2b75      	cmp	r3, #117	; 0x75
 801ce48:	d0e6      	beq.n	801ce18 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801ce4a:	2b78      	cmp	r3, #120	; 0x78
 801ce4c:	e7f9      	b.n	801ce42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801ce4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ce50:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801ce54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce56:	b10b      	cbz	r3, 801ce5c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801ce58:	3302      	adds	r3, #2
 801ce5a:	9309      	str	r3, [sp, #36]	; 0x24
 801ce5c:	9b08      	ldr	r3, [sp, #32]
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	f43f af2f 	beq.w	801ccc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ce64:	3301      	adds	r3, #1
 801ce66:	9308      	str	r3, [sp, #32]
 801ce68:	e72b      	b.n	801ccc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ce6a:	2a00      	cmp	r2, #0
 801ce6c:	d0e1      	beq.n	801ce32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ce6e:	7813      	ldrb	r3, [r2, #0]
 801ce70:	e7d6      	b.n	801ce20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801ce72:	2b73      	cmp	r3, #115	; 0x73
 801ce74:	d036      	beq.n	801cee4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ce76:	d807      	bhi.n	801ce88 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ce78:	2b6f      	cmp	r3, #111	; 0x6f
 801ce7a:	d1da      	bne.n	801ce32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ce7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ce7e:	1d25      	adds	r5, r4, #4
 801ce80:	2308      	movs	r3, #8
 801ce82:	eba8 0202 	sub.w	r2, r8, r2
 801ce86:	e049      	b.n	801cf1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ce88:	2b75      	cmp	r3, #117	; 0x75
 801ce8a:	d042      	beq.n	801cf12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801ce8c:	2b78      	cmp	r3, #120	; 0x78
 801ce8e:	d1d0      	bne.n	801ce32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ce90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ce92:	1d25      	adds	r5, r4, #4
 801ce94:	2310      	movs	r3, #16
 801ce96:	eba8 0202 	sub.w	r2, r8, r2
 801ce9a:	e03f      	b.n	801cf1c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ce9c:	6823      	ldr	r3, [r4, #0]
 801ce9e:	1d25      	adds	r5, r4, #4
 801cea0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801cea4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801cea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ceaa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d051      	beq.n	801cf56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801ceb2:	881a      	ldrh	r2, [r3, #0]
 801ceb4:	a80d      	add	r0, sp, #52	; 0x34
 801ceb6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801ceba:	462c      	mov	r4, r5
 801cebc:	9005      	str	r0, [sp, #20]
 801cebe:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801cec2:	9004      	str	r0, [sp, #16]
 801cec4:	980e      	ldr	r0, [sp, #56]	; 0x38
 801cec6:	9003      	str	r0, [sp, #12]
 801cec8:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801cecc:	9002      	str	r0, [sp, #8]
 801cece:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801ced0:	9001      	str	r0, [sp, #4]
 801ced2:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801ced6:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801ceda:	9000      	str	r0, [sp, #0]
 801cedc:	a810      	add	r0, sp, #64	; 0x40
 801cede:	f7ff fd49 	bl	801c974 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801cee2:	e7b7      	b.n	801ce54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801cee4:	1d25      	adds	r5, r4, #4
 801cee6:	6823      	ldr	r3, [r4, #0]
 801cee8:	9310      	str	r3, [sp, #64]	; 0x40
 801ceea:	e7dd      	b.n	801cea8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801ceec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ceee:	230a      	movs	r3, #10
 801cef0:	4649      	mov	r1, r9
 801cef2:	6820      	ldr	r0, [r4, #0]
 801cef4:	eba8 0202 	sub.w	r2, r8, r2
 801cef8:	1d25      	adds	r5, r4, #4
 801cefa:	b292      	uxth	r2, r2
 801cefc:	f7ff fd08 	bl	801c910 <_ZN8touchgfx7Unicode4itoaElPtti>
 801cf00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801cf04:	2b2d      	cmp	r3, #45	; 0x2d
 801cf06:	d1cf      	bne.n	801cea8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801cf08:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801cf0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801cf0e:	3302      	adds	r3, #2
 801cf10:	e7ea      	b.n	801cee8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801cf12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cf14:	1d25      	adds	r5, r4, #4
 801cf16:	230a      	movs	r3, #10
 801cf18:	eba8 0202 	sub.w	r2, r8, r2
 801cf1c:	b292      	uxth	r2, r2
 801cf1e:	4649      	mov	r1, r9
 801cf20:	6820      	ldr	r0, [r4, #0]
 801cf22:	f7ff fcd7 	bl	801c8d4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801cf26:	e7bf      	b.n	801cea8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801cf28:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801cf2a:	2310      	movs	r3, #16
 801cf2c:	4649      	mov	r1, r9
 801cf2e:	6820      	ldr	r0, [r4, #0]
 801cf30:	eba8 0202 	sub.w	r2, r8, r2
 801cf34:	1d25      	adds	r5, r4, #4
 801cf36:	b292      	uxth	r2, r2
 801cf38:	f7ff fccc 	bl	801c8d4 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801cf3c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801cf40:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801cf44:	2b00      	cmp	r3, #0
 801cf46:	d0af      	beq.n	801cea8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801cf48:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801cf4c:	2919      	cmp	r1, #25
 801cf4e:	d8f7      	bhi.n	801cf40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801cf50:	3b20      	subs	r3, #32
 801cf52:	8013      	strh	r3, [r2, #0]
 801cf54:	e7f4      	b.n	801cf40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801cf56:	9a08      	ldr	r2, [sp, #32]
 801cf58:	2a00      	cmp	r2, #0
 801cf5a:	d0ab      	beq.n	801ceb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801cf5c:	7812      	ldrb	r2, [r2, #0]
 801cf5e:	e7a9      	b.n	801ceb4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801cf60:	2d00      	cmp	r5, #0
 801cf62:	f43f af48 	beq.w	801cdf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801cf66:	782d      	ldrb	r5, [r5, #0]
 801cf68:	e745      	b.n	801cdf6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801cf6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801cf6a:	b507      	push	{r0, r1, r2, lr}
 801cf6c:	9300      	str	r3, [sp, #0]
 801cf6e:	4613      	mov	r3, r2
 801cf70:	2200      	movs	r2, #0
 801cf72:	f7ff fe92 	bl	801cc9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801cf76:	b003      	add	sp, #12
 801cf78:	f85d fb04 	ldr.w	pc, [sp], #4

0801cf7c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801cf7c:	b40c      	push	{r2, r3}
 801cf7e:	b507      	push	{r0, r1, r2, lr}
 801cf80:	ab04      	add	r3, sp, #16
 801cf82:	f853 2b04 	ldr.w	r2, [r3], #4
 801cf86:	9301      	str	r3, [sp, #4]
 801cf88:	f7ff ffef 	bl	801cf6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801cf8c:	b003      	add	sp, #12
 801cf8e:	f85d eb04 	ldr.w	lr, [sp], #4
 801cf92:	b002      	add	sp, #8
 801cf94:	4770      	bx	lr
	...

0801cf98 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801cf98:	4b01      	ldr	r3, [pc, #4]	; (801cfa0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801cf9a:	6018      	str	r0, [r3, #0]
 801cf9c:	4770      	bx	lr
 801cf9e:	bf00      	nop
 801cfa0:	2003bf48 	.word	0x2003bf48

0801cfa4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801cfa4:	4b06      	ldr	r3, [pc, #24]	; (801cfc0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801cfa6:	881a      	ldrh	r2, [r3, #0]
 801cfa8:	4282      	cmp	r2, r0
 801cfaa:	d807      	bhi.n	801cfbc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801cfac:	4b05      	ldr	r3, [pc, #20]	; (801cfc4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801cfae:	881b      	ldrh	r3, [r3, #0]
 801cfb0:	4413      	add	r3, r2
 801cfb2:	4298      	cmp	r0, r3
 801cfb4:	bfac      	ite	ge
 801cfb6:	2000      	movge	r0, #0
 801cfb8:	2001      	movlt	r0, #1
 801cfba:	4770      	bx	lr
 801cfbc:	2000      	movs	r0, #0
 801cfbe:	4770      	bx	lr
 801cfc0:	2003bf68 	.word	0x2003bf68
 801cfc4:	2003bf6c 	.word	0x2003bf6c

0801cfc8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801cfc8:	b508      	push	{r3, lr}
 801cfca:	4601      	mov	r1, r0
 801cfcc:	f7ff ffea 	bl	801cfa4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801cfd0:	b118      	cbz	r0, 801cfda <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801cfd2:	4b02      	ldr	r3, [pc, #8]	; (801cfdc <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801cfd4:	681b      	ldr	r3, [r3, #0]
 801cfd6:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801cfda:	bd08      	pop	{r3, pc}
 801cfdc:	2003bf4c 	.word	0x2003bf4c

0801cfe0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801cfe0:	b538      	push	{r3, r4, r5, lr}
 801cfe2:	4604      	mov	r4, r0
 801cfe4:	f7ff ffde 	bl	801cfa4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801cfe8:	b188      	cbz	r0, 801d00e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801cfea:	4b09      	ldr	r3, [pc, #36]	; (801d010 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801cfec:	881a      	ldrh	r2, [r3, #0]
 801cfee:	4b09      	ldr	r3, [pc, #36]	; (801d014 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801cff0:	1aa4      	subs	r4, r4, r2
 801cff2:	220e      	movs	r2, #14
 801cff4:	681d      	ldr	r5, [r3, #0]
 801cff6:	4362      	muls	r2, r4
 801cff8:	18ac      	adds	r4, r5, r2
 801cffa:	7b23      	ldrb	r3, [r4, #12]
 801cffc:	f013 0320 	ands.w	r3, r3, #32
 801d000:	bf17      	itett	ne
 801d002:	680b      	ldrne	r3, [r1, #0]
 801d004:	4618      	moveq	r0, r3
 801d006:	50ab      	strne	r3, [r5, r2]
 801d008:	684b      	ldrne	r3, [r1, #4]
 801d00a:	bf18      	it	ne
 801d00c:	6063      	strne	r3, [r4, #4]
 801d00e:	bd38      	pop	{r3, r4, r5, pc}
 801d010:	2003bf68 	.word	0x2003bf68
 801d014:	2003bf50 	.word	0x2003bf50

0801d018 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801d018:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801d01c:	4606      	mov	r6, r0
 801d01e:	460c      	mov	r4, r1
 801d020:	f7ff ffc0 	bl	801cfa4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801d024:	b918      	cbnz	r0, 801d02e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801d026:	2000      	movs	r0, #0
 801d028:	b002      	add	sp, #8
 801d02a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d02e:	4608      	mov	r0, r1
 801d030:	f7f8 fafb 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d034:	2800      	cmp	r0, #0
 801d036:	d1f6      	bne.n	801d026 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d038:	4b3f      	ldr	r3, [pc, #252]	; (801d138 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801d03a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801d13c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801d03e:	881d      	ldrh	r5, [r3, #0]
 801d040:	f8d9 a000 	ldr.w	sl, [r9]
 801d044:	46c8      	mov	r8, r9
 801d046:	1b73      	subs	r3, r6, r5
 801d048:	250e      	movs	r5, #14
 801d04a:	435d      	muls	r5, r3
 801d04c:	eb0a 0705 	add.w	r7, sl, r5
 801d050:	7b3b      	ldrb	r3, [r7, #12]
 801d052:	f013 0f20 	tst.w	r3, #32
 801d056:	d0e6      	beq.n	801d026 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d058:	4621      	mov	r1, r4
 801d05a:	4638      	mov	r0, r7
 801d05c:	f7fc ff9c 	bl	8019f98 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d060:	2800      	cmp	r0, #0
 801d062:	d1e1      	bne.n	801d028 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801d064:	4639      	mov	r1, r7
 801d066:	4620      	mov	r0, r4
 801d068:	f7fc ff96 	bl	8019f98 <_ZNK8touchgfx4Rect8includesERKS0_>
 801d06c:	b108      	cbz	r0, 801d072 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801d06e:	4621      	mov	r1, r4
 801d070:	e020      	b.n	801d0b4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801d072:	f9b4 2000 	ldrsh.w	r2, [r4]
 801d076:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801d07a:	429a      	cmp	r2, r3
 801d07c:	d11e      	bne.n	801d0bc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d07e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d082:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801d086:	429a      	cmp	r2, r3
 801d088:	d118      	bne.n	801d0bc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d08a:	6820      	ldr	r0, [r4, #0]
 801d08c:	466b      	mov	r3, sp
 801d08e:	6861      	ldr	r1, [r4, #4]
 801d090:	c303      	stmia	r3!, {r0, r1}
 801d092:	4639      	mov	r1, r7
 801d094:	4668      	mov	r0, sp
 801d096:	f7fc ffa5 	bl	8019fe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d09a:	f8d9 3000 	ldr.w	r3, [r9]
 801d09e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801d0a2:	442b      	add	r3, r5
 801d0a4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801d0a8:	4413      	add	r3, r2
 801d0aa:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801d0ae:	4293      	cmp	r3, r2
 801d0b0:	dc04      	bgt.n	801d0bc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801d0b2:	4669      	mov	r1, sp
 801d0b4:	4630      	mov	r0, r6
 801d0b6:	f7ff ff93 	bl	801cfe0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801d0ba:	e7b5      	b.n	801d028 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801d0bc:	f8d8 3000 	ldr.w	r3, [r8]
 801d0c0:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801d0c4:	442b      	add	r3, r5
 801d0c6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801d0ca:	4291      	cmp	r1, r2
 801d0cc:	d119      	bne.n	801d102 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801d0ce:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801d0d2:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801d0d6:	4291      	cmp	r1, r2
 801d0d8:	d113      	bne.n	801d102 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801d0da:	6820      	ldr	r0, [r4, #0]
 801d0dc:	466a      	mov	r2, sp
 801d0de:	6861      	ldr	r1, [r4, #4]
 801d0e0:	c203      	stmia	r2!, {r0, r1}
 801d0e2:	4619      	mov	r1, r3
 801d0e4:	4668      	mov	r0, sp
 801d0e6:	f7fc ff7d 	bl	8019fe4 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801d0ea:	f8d8 3000 	ldr.w	r3, [r8]
 801d0ee:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801d0f2:	442b      	add	r3, r5
 801d0f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801d0f8:	4413      	add	r3, r2
 801d0fa:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801d0fe:	4293      	cmp	r3, r2
 801d100:	ddd7      	ble.n	801d0b2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801d102:	4620      	mov	r0, r4
 801d104:	f7f8 fa91 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d108:	b990      	cbnz	r0, 801d130 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801d10a:	88a7      	ldrh	r7, [r4, #4]
 801d10c:	88e3      	ldrh	r3, [r4, #6]
 801d10e:	fb17 f703 	smulbb	r7, r7, r3
 801d112:	f8d8 3000 	ldr.w	r3, [r8]
 801d116:	441d      	add	r5, r3
 801d118:	4628      	mov	r0, r5
 801d11a:	f7f8 fa86 	bl	801562a <_ZNK8touchgfx4Rect7isEmptyEv>
 801d11e:	b948      	cbnz	r0, 801d134 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801d120:	88ab      	ldrh	r3, [r5, #4]
 801d122:	88ea      	ldrh	r2, [r5, #6]
 801d124:	fb13 f302 	smulbb	r3, r3, r2
 801d128:	42bb      	cmp	r3, r7
 801d12a:	f6bf af7c 	bge.w	801d026 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801d12e:	e79e      	b.n	801d06e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801d130:	2700      	movs	r7, #0
 801d132:	e7ee      	b.n	801d112 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801d134:	2300      	movs	r3, #0
 801d136:	e7f7      	b.n	801d128 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801d138:	2003bf68 	.word	0x2003bf68
 801d13c:	2003bf50 	.word	0x2003bf50

0801d140 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801d140:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d142:	4c24      	ldr	r4, [pc, #144]	; (801d1d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801d144:	6823      	ldr	r3, [r4, #0]
 801d146:	2b00      	cmp	r3, #0
 801d148:	d042      	beq.n	801d1d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d14a:	4a23      	ldr	r2, [pc, #140]	; (801d1d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801d14c:	4d23      	ldr	r5, [pc, #140]	; (801d1dc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801d14e:	8811      	ldrh	r1, [r2, #0]
 801d150:	f8b5 c000 	ldrh.w	ip, [r5]
 801d154:	4822      	ldr	r0, [pc, #136]	; (801d1e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801d156:	4461      	add	r1, ip
 801d158:	1c4a      	adds	r2, r1, #1
 801d15a:	008f      	lsls	r7, r1, #2
 801d15c:	f022 0201 	bic.w	r2, r2, #1
 801d160:	19de      	adds	r6, r3, r7
 801d162:	0412      	lsls	r2, r2, #16
 801d164:	6006      	str	r6, [r0, #0]
 801d166:	4e1f      	ldr	r6, [pc, #124]	; (801d1e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801d168:	0c12      	lsrs	r2, r2, #16
 801d16a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801d16e:	19da      	adds	r2, r3, r7
 801d170:	6032      	str	r2, [r6, #0]
 801d172:	220e      	movs	r2, #14
 801d174:	fb02 f20c 	mul.w	r2, r2, ip
 801d178:	3203      	adds	r2, #3
 801d17a:	f022 0203 	bic.w	r2, r2, #3
 801d17e:	443a      	add	r2, r7
 801d180:	4f19      	ldr	r7, [pc, #100]	; (801d1e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801d182:	4413      	add	r3, r2
 801d184:	603b      	str	r3, [r7, #0]
 801d186:	2300      	movs	r3, #0
 801d188:	4f18      	ldr	r7, [pc, #96]	; (801d1ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801d18a:	469c      	mov	ip, r3
 801d18c:	803b      	strh	r3, [r7, #0]
 801d18e:	4f18      	ldr	r7, [pc, #96]	; (801d1f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801d190:	683f      	ldr	r7, [r7, #0]
 801d192:	1aba      	subs	r2, r7, r2
 801d194:	4f17      	ldr	r7, [pc, #92]	; (801d1f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801d196:	603a      	str	r2, [r7, #0]
 801d198:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801d19c:	4a16      	ldr	r2, [pc, #88]	; (801d1f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801d19e:	8013      	strh	r3, [r2, #0]
 801d1a0:	428b      	cmp	r3, r1
 801d1a2:	d10d      	bne.n	801d1c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801d1a4:	882d      	ldrh	r5, [r5, #0]
 801d1a6:	2300      	movs	r3, #0
 801d1a8:	6830      	ldr	r0, [r6, #0]
 801d1aa:	240e      	movs	r4, #14
 801d1ac:	429d      	cmp	r5, r3
 801d1ae:	d90f      	bls.n	801d1d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801d1b0:	fb04 0203 	mla	r2, r4, r3, r0
 801d1b4:	3301      	adds	r3, #1
 801d1b6:	7b11      	ldrb	r1, [r2, #12]
 801d1b8:	f36f 1145 	bfc	r1, #5, #1
 801d1bc:	7311      	strb	r1, [r2, #12]
 801d1be:	e7f5      	b.n	801d1ac <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801d1c0:	6822      	ldr	r2, [r4, #0]
 801d1c2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801d1c6:	6802      	ldr	r2, [r0, #0]
 801d1c8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801d1cc:	3301      	adds	r3, #1
 801d1ce:	e7e7      	b.n	801d1a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801d1d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d1d2:	bf00      	nop
 801d1d4:	2003bf4c 	.word	0x2003bf4c
 801d1d8:	2003bf68 	.word	0x2003bf68
 801d1dc:	2003bf6c 	.word	0x2003bf6c
 801d1e0:	2003bf60 	.word	0x2003bf60
 801d1e4:	2003bf50 	.word	0x2003bf50
 801d1e8:	2003bf58 	.word	0x2003bf58
 801d1ec:	2003bf6a 	.word	0x2003bf6a
 801d1f0:	2003bf54 	.word	0x2003bf54
 801d1f4:	2003bf64 	.word	0x2003bf64
 801d1f8:	2003bf5c 	.word	0x2003bf5c

0801d1fc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801d1fc:	4b06      	ldr	r3, [pc, #24]	; (801d218 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	b943      	cbnz	r3, 801d214 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d202:	b139      	cbz	r1, 801d214 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801d204:	4b05      	ldr	r3, [pc, #20]	; (801d21c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801d206:	801a      	strh	r2, [r3, #0]
 801d208:	4b05      	ldr	r3, [pc, #20]	; (801d220 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801d20a:	6019      	str	r1, [r3, #0]
 801d20c:	4b05      	ldr	r3, [pc, #20]	; (801d224 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801d20e:	6018      	str	r0, [r3, #0]
 801d210:	f7ff bf96 	b.w	801d140 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801d214:	4770      	bx	lr
 801d216:	bf00      	nop
 801d218:	2003bf58 	.word	0x2003bf58
 801d21c:	2003bf6c 	.word	0x2003bf6c
 801d220:	2003bf54 	.word	0x2003bf54
 801d224:	2003bf4c 	.word	0x2003bf4c

0801d228 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801d228:	b470      	push	{r4, r5, r6}
 801d22a:	4c07      	ldr	r4, [pc, #28]	; (801d248 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801d22c:	4605      	mov	r5, r0
 801d22e:	4610      	mov	r0, r2
 801d230:	9a03      	ldr	r2, [sp, #12]
 801d232:	6826      	ldr	r6, [r4, #0]
 801d234:	b936      	cbnz	r6, 801d244 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801d236:	6025      	str	r5, [r4, #0]
 801d238:	4c04      	ldr	r4, [pc, #16]	; (801d24c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801d23a:	8021      	strh	r1, [r4, #0]
 801d23c:	4619      	mov	r1, r3
 801d23e:	bc70      	pop	{r4, r5, r6}
 801d240:	f7ff bfdc 	b.w	801d1fc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801d244:	bc70      	pop	{r4, r5, r6}
 801d246:	4770      	bx	lr
 801d248:	2003bf70 	.word	0x2003bf70
 801d24c:	2003bf68 	.word	0x2003bf68

0801d250 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801d250:	4a12      	ldr	r2, [pc, #72]	; (801d29c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801d252:	8803      	ldrh	r3, [r0, #0]
 801d254:	8812      	ldrh	r2, [r2, #0]
 801d256:	4293      	cmp	r3, r2
 801d258:	d207      	bcs.n	801d26a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801d25a:	4a11      	ldr	r2, [pc, #68]	; (801d2a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801d25c:	2114      	movs	r1, #20
 801d25e:	6812      	ldr	r2, [r2, #0]
 801d260:	fb01 2303 	mla	r3, r1, r3, r2
 801d264:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801d268:	4770      	bx	lr
 801d26a:	490e      	ldr	r1, [pc, #56]	; (801d2a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801d26c:	8809      	ldrh	r1, [r1, #0]
 801d26e:	4411      	add	r1, r2
 801d270:	428b      	cmp	r3, r1
 801d272:	da04      	bge.n	801d27e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801d274:	1a9b      	subs	r3, r3, r2
 801d276:	4a0c      	ldr	r2, [pc, #48]	; (801d2a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801d278:	210e      	movs	r1, #14
 801d27a:	6812      	ldr	r2, [r2, #0]
 801d27c:	e7f0      	b.n	801d260 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801d27e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d282:	4293      	cmp	r3, r2
 801d284:	d108      	bne.n	801d298 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801d286:	4b09      	ldr	r3, [pc, #36]	; (801d2ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801d288:	781b      	ldrb	r3, [r3, #0]
 801d28a:	b91b      	cbnz	r3, 801d294 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801d28c:	4b08      	ldr	r3, [pc, #32]	; (801d2b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801d28e:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d292:	4770      	bx	lr
 801d294:	4b07      	ldr	r3, [pc, #28]	; (801d2b4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801d296:	e7fa      	b.n	801d28e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801d298:	2000      	movs	r0, #0
 801d29a:	4770      	bx	lr
 801d29c:	2003bf68 	.word	0x2003bf68
 801d2a0:	2003bf70 	.word	0x2003bf70
 801d2a4:	2003bf6c 	.word	0x2003bf6c
 801d2a8:	2003bf50 	.word	0x2003bf50
 801d2ac:	2003bed8 	.word	0x2003bed8
 801d2b0:	2003beda 	.word	0x2003beda
 801d2b4:	2003bedc 	.word	0x2003bedc

0801d2b8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801d2b8:	4a12      	ldr	r2, [pc, #72]	; (801d304 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801d2ba:	8803      	ldrh	r3, [r0, #0]
 801d2bc:	8812      	ldrh	r2, [r2, #0]
 801d2be:	4293      	cmp	r3, r2
 801d2c0:	d207      	bcs.n	801d2d2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801d2c2:	4a11      	ldr	r2, [pc, #68]	; (801d308 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801d2c4:	2114      	movs	r1, #20
 801d2c6:	6812      	ldr	r2, [r2, #0]
 801d2c8:	fb01 2303 	mla	r3, r1, r3, r2
 801d2cc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801d2d0:	4770      	bx	lr
 801d2d2:	490e      	ldr	r1, [pc, #56]	; (801d30c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801d2d4:	8809      	ldrh	r1, [r1, #0]
 801d2d6:	4411      	add	r1, r2
 801d2d8:	428b      	cmp	r3, r1
 801d2da:	da04      	bge.n	801d2e6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801d2dc:	1a9b      	subs	r3, r3, r2
 801d2de:	4a0c      	ldr	r2, [pc, #48]	; (801d310 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801d2e0:	210e      	movs	r1, #14
 801d2e2:	6812      	ldr	r2, [r2, #0]
 801d2e4:	e7f0      	b.n	801d2c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801d2e6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d2ea:	4293      	cmp	r3, r2
 801d2ec:	d108      	bne.n	801d300 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801d2ee:	4b09      	ldr	r3, [pc, #36]	; (801d314 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801d2f0:	781b      	ldrb	r3, [r3, #0]
 801d2f2:	b91b      	cbnz	r3, 801d2fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801d2f4:	4b08      	ldr	r3, [pc, #32]	; (801d318 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801d2f6:	f9b3 0000 	ldrsh.w	r0, [r3]
 801d2fa:	4770      	bx	lr
 801d2fc:	4b07      	ldr	r3, [pc, #28]	; (801d31c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801d2fe:	e7fa      	b.n	801d2f6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801d300:	2000      	movs	r0, #0
 801d302:	4770      	bx	lr
 801d304:	2003bf68 	.word	0x2003bf68
 801d308:	2003bf70 	.word	0x2003bf70
 801d30c:	2003bf6c 	.word	0x2003bf6c
 801d310:	2003bf50 	.word	0x2003bf50
 801d314:	2003bed8 	.word	0x2003bed8
 801d318:	2003bedc 	.word	0x2003bedc
 801d31c:	2003beda 	.word	0x2003beda

0801d320 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801d320:	4a17      	ldr	r2, [pc, #92]	; (801d380 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801d322:	8803      	ldrh	r3, [r0, #0]
 801d324:	8812      	ldrh	r2, [r2, #0]
 801d326:	4293      	cmp	r3, r2
 801d328:	d213      	bcs.n	801d352 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801d32a:	4a16      	ldr	r2, [pc, #88]	; (801d384 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801d32c:	2114      	movs	r1, #20
 801d32e:	6812      	ldr	r2, [r2, #0]
 801d330:	fb01 2303 	mla	r3, r1, r3, r2
 801d334:	8a1a      	ldrh	r2, [r3, #16]
 801d336:	8919      	ldrh	r1, [r3, #8]
 801d338:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801d33c:	428a      	cmp	r2, r1
 801d33e:	db1d      	blt.n	801d37c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d340:	8a58      	ldrh	r0, [r3, #18]
 801d342:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801d346:	895b      	ldrh	r3, [r3, #10]
 801d348:	4298      	cmp	r0, r3
 801d34a:	bfac      	ite	ge
 801d34c:	2000      	movge	r0, #0
 801d34e:	2001      	movlt	r0, #1
 801d350:	4770      	bx	lr
 801d352:	490d      	ldr	r1, [pc, #52]	; (801d388 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801d354:	8809      	ldrh	r1, [r1, #0]
 801d356:	4411      	add	r1, r2
 801d358:	428b      	cmp	r3, r1
 801d35a:	da0d      	bge.n	801d378 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801d35c:	1a9b      	subs	r3, r3, r2
 801d35e:	4a0b      	ldr	r2, [pc, #44]	; (801d38c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801d360:	210e      	movs	r1, #14
 801d362:	6812      	ldr	r2, [r2, #0]
 801d364:	fb01 2303 	mla	r3, r1, r3, r2
 801d368:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801d36c:	891a      	ldrh	r2, [r3, #8]
 801d36e:	4291      	cmp	r1, r2
 801d370:	db04      	blt.n	801d37c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801d372:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801d376:	e7e6      	b.n	801d346 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801d378:	2000      	movs	r0, #0
 801d37a:	4770      	bx	lr
 801d37c:	2001      	movs	r0, #1
 801d37e:	4770      	bx	lr
 801d380:	2003bf68 	.word	0x2003bf68
 801d384:	2003bf70 	.word	0x2003bf70
 801d388:	2003bf6c 	.word	0x2003bf6c
 801d38c:	2003bf50 	.word	0x2003bf50

0801d390 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801d390:	4a12      	ldr	r2, [pc, #72]	; (801d3dc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801d392:	8803      	ldrh	r3, [r0, #0]
 801d394:	8811      	ldrh	r1, [r2, #0]
 801d396:	428b      	cmp	r3, r1
 801d398:	d20b      	bcs.n	801d3b2 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801d39a:	4a11      	ldr	r2, [pc, #68]	; (801d3e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d39c:	6812      	ldr	r2, [r2, #0]
 801d39e:	b112      	cbz	r2, 801d3a6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801d3a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d3a4:	b9c0      	cbnz	r0, 801d3d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801d3a6:	4a0f      	ldr	r2, [pc, #60]	; (801d3e4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801d3a8:	6811      	ldr	r1, [r2, #0]
 801d3aa:	2214      	movs	r2, #20
 801d3ac:	4353      	muls	r3, r2
 801d3ae:	58c8      	ldr	r0, [r1, r3]
 801d3b0:	4770      	bx	lr
 801d3b2:	4a0d      	ldr	r2, [pc, #52]	; (801d3e8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801d3b4:	8812      	ldrh	r2, [r2, #0]
 801d3b6:	440a      	add	r2, r1
 801d3b8:	4293      	cmp	r3, r2
 801d3ba:	da04      	bge.n	801d3c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801d3bc:	4a08      	ldr	r2, [pc, #32]	; (801d3e0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801d3be:	6812      	ldr	r2, [r2, #0]
 801d3c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801d3c4:	4770      	bx	lr
 801d3c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d3ca:	4293      	cmp	r3, r2
 801d3cc:	d103      	bne.n	801d3d6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801d3ce:	4b07      	ldr	r3, [pc, #28]	; (801d3ec <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801d3d4:	4770      	bx	lr
 801d3d6:	2000      	movs	r0, #0
 801d3d8:	4770      	bx	lr
 801d3da:	bf00      	nop
 801d3dc:	2003bf68 	.word	0x2003bf68
 801d3e0:	2003bf4c 	.word	0x2003bf4c
 801d3e4:	2003bf70 	.word	0x2003bf70
 801d3e8:	2003bf6c 	.word	0x2003bf6c
 801d3ec:	2003bee0 	.word	0x2003bee0

0801d3f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801d3f0:	4b24      	ldr	r3, [pc, #144]	; (801d484 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801d3f2:	8802      	ldrh	r2, [r0, #0]
 801d3f4:	8818      	ldrh	r0, [r3, #0]
 801d3f6:	4282      	cmp	r2, r0
 801d3f8:	d221      	bcs.n	801d43e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801d3fa:	4b23      	ldr	r3, [pc, #140]	; (801d488 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801d3fc:	6819      	ldr	r1, [r3, #0]
 801d3fe:	2314      	movs	r3, #20
 801d400:	fb03 1302 	mla	r3, r3, r2, r1
 801d404:	6858      	ldr	r0, [r3, #4]
 801d406:	2800      	cmp	r0, #0
 801d408:	d03a      	beq.n	801d480 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d40a:	4920      	ldr	r1, [pc, #128]	; (801d48c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d40c:	6809      	ldr	r1, [r1, #0]
 801d40e:	2900      	cmp	r1, #0
 801d410:	d036      	beq.n	801d480 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d412:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801d416:	2900      	cmp	r1, #0
 801d418:	d032      	beq.n	801d480 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801d41a:	891a      	ldrh	r2, [r3, #8]
 801d41c:	8958      	ldrh	r0, [r3, #10]
 801d41e:	4350      	muls	r0, r2
 801d420:	7c5a      	ldrb	r2, [r3, #17]
 801d422:	7cdb      	ldrb	r3, [r3, #19]
 801d424:	0952      	lsrs	r2, r2, #5
 801d426:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801d42a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801d42e:	2b0b      	cmp	r3, #11
 801d430:	bf18      	it	ne
 801d432:	0040      	lslne	r0, r0, #1
 801d434:	3003      	adds	r0, #3
 801d436:	f020 0003 	bic.w	r0, r0, #3
 801d43a:	4408      	add	r0, r1
 801d43c:	4770      	bx	lr
 801d43e:	4b14      	ldr	r3, [pc, #80]	; (801d490 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801d440:	881b      	ldrh	r3, [r3, #0]
 801d442:	4403      	add	r3, r0
 801d444:	429a      	cmp	r2, r3
 801d446:	da1a      	bge.n	801d47e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d448:	4b12      	ldr	r3, [pc, #72]	; (801d494 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801d44a:	1a10      	subs	r0, r2, r0
 801d44c:	210e      	movs	r1, #14
 801d44e:	681b      	ldr	r3, [r3, #0]
 801d450:	fb01 3000 	mla	r0, r1, r0, r3
 801d454:	7b03      	ldrb	r3, [r0, #12]
 801d456:	f003 031f 	and.w	r3, r3, #31
 801d45a:	2b0b      	cmp	r3, #11
 801d45c:	d10b      	bne.n	801d476 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801d45e:	8903      	ldrh	r3, [r0, #8]
 801d460:	8940      	ldrh	r0, [r0, #10]
 801d462:	4358      	muls	r0, r3
 801d464:	4b09      	ldr	r3, [pc, #36]	; (801d48c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801d466:	3003      	adds	r0, #3
 801d468:	6819      	ldr	r1, [r3, #0]
 801d46a:	f020 0303 	bic.w	r3, r0, #3
 801d46e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801d472:	4418      	add	r0, r3
 801d474:	4770      	bx	lr
 801d476:	2b0d      	cmp	r3, #13
 801d478:	d101      	bne.n	801d47e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801d47a:	300d      	adds	r0, #13
 801d47c:	4770      	bx	lr
 801d47e:	2000      	movs	r0, #0
 801d480:	4770      	bx	lr
 801d482:	bf00      	nop
 801d484:	2003bf68 	.word	0x2003bf68
 801d488:	2003bf70 	.word	0x2003bf70
 801d48c:	2003bf4c 	.word	0x2003bf4c
 801d490:	2003bf6c 	.word	0x2003bf6c
 801d494:	2003bf50 	.word	0x2003bf50

0801d498 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801d498:	4a17      	ldr	r2, [pc, #92]	; (801d4f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801d49a:	b510      	push	{r4, lr}
 801d49c:	8803      	ldrh	r3, [r0, #0]
 801d49e:	8812      	ldrh	r2, [r2, #0]
 801d4a0:	4293      	cmp	r3, r2
 801d4a2:	d20c      	bcs.n	801d4be <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801d4a4:	4a15      	ldr	r2, [pc, #84]	; (801d4fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801d4a6:	2114      	movs	r1, #20
 801d4a8:	6812      	ldr	r2, [r2, #0]
 801d4aa:	fb01 2303 	mla	r3, r1, r3, r2
 801d4ae:	7c58      	ldrb	r0, [r3, #17]
 801d4b0:	0942      	lsrs	r2, r0, #5
 801d4b2:	7cd8      	ldrb	r0, [r3, #19]
 801d4b4:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801d4b8:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801d4bc:	bd10      	pop	{r4, pc}
 801d4be:	4910      	ldr	r1, [pc, #64]	; (801d500 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801d4c0:	8809      	ldrh	r1, [r1, #0]
 801d4c2:	4411      	add	r1, r2
 801d4c4:	428b      	cmp	r3, r1
 801d4c6:	da09      	bge.n	801d4dc <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801d4c8:	1a9b      	subs	r3, r3, r2
 801d4ca:	4a0e      	ldr	r2, [pc, #56]	; (801d504 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801d4cc:	210e      	movs	r1, #14
 801d4ce:	6812      	ldr	r2, [r2, #0]
 801d4d0:	fb01 2303 	mla	r3, r1, r3, r2
 801d4d4:	7b18      	ldrb	r0, [r3, #12]
 801d4d6:	f000 001f 	and.w	r0, r0, #31
 801d4da:	e7ef      	b.n	801d4bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801d4dc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801d4e0:	4293      	cmp	r3, r2
 801d4e2:	d106      	bne.n	801d4f2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801d4e4:	f7f0 fb7e 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 801d4e8:	6803      	ldr	r3, [r0, #0]
 801d4ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4f0:	4718      	bx	r3
 801d4f2:	2000      	movs	r0, #0
 801d4f4:	e7e2      	b.n	801d4bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801d4f6:	bf00      	nop
 801d4f8:	2003bf68 	.word	0x2003bf68
 801d4fc:	2003bf70 	.word	0x2003bf70
 801d500:	2003bf6c 	.word	0x2003bf6c
 801d504:	2003bf50 	.word	0x2003bf50

0801d508 <_ZNK8touchgfx8LCD32bpp8bitDepthEv>:
 801d508:	2020      	movs	r0, #32
 801d50a:	4770      	bx	lr

0801d50c <_ZNK8touchgfx8LCD32bpp17framebufferFormatEv>:
 801d50c:	2002      	movs	r0, #2
 801d50e:	4770      	bx	lr

0801d510 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv>:
 801d510:	4b02      	ldr	r3, [pc, #8]	; (801d51c <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0xc>)
 801d512:	8818      	ldrh	r0, [r3, #0]
 801d514:	0080      	lsls	r0, r0, #2
 801d516:	b280      	uxth	r0, r0
 801d518:	4770      	bx	lr
 801d51a:	bf00      	nop
 801d51c:	2003beda 	.word	0x2003beda

0801d520 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801d520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d524:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801d528:	980c      	ldr	r0, [sp, #48]	; 0x30
 801d52a:	f1bc 0f00 	cmp.w	ip, #0
 801d52e:	d073      	beq.n	801d618 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d530:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801d534:	2c00      	cmp	r4, #0
 801d536:	dd6f      	ble.n	801d618 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d538:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 801d53c:	2e00      	cmp	r6, #0
 801d53e:	dd6b      	ble.n	801d618 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d540:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801d544:	4356      	muls	r6, r2
 801d546:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d54a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d54e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801d552:	fb02 3305 	mla	r3, r2, r5, r3
 801d556:	eba2 0204 	sub.w	r2, r2, r4
 801d55a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801d55e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801d562:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801d566:	d10a      	bne.n	801d57e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5e>
 801d568:	42b1      	cmp	r1, r6
 801d56a:	d255      	bcs.n	801d618 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d56c:	eb01 030a 	add.w	r3, r1, sl
 801d570:	4299      	cmp	r1, r3
 801d572:	d202      	bcs.n	801d57a <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5a>
 801d574:	f841 0b04 	str.w	r0, [r1], #4
 801d578:	e7fa      	b.n	801d570 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x50>
 801d57a:	4411      	add	r1, r2
 801d57c:	e7f4      	b.n	801d568 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x48>
 801d57e:	fa1f fe8c 	uxth.w	lr, ip
 801d582:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801d586:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801d58a:	fa5f f980 	uxtb.w	r9, r0
 801d58e:	fb03 f30e 	mul.w	r3, r3, lr
 801d592:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801d596:	fb08 f80e 	mul.w	r8, r8, lr
 801d59a:	9301      	str	r3, [sp, #4]
 801d59c:	ea40 630c 	orr.w	r3, r0, ip, lsl #24
 801d5a0:	fb09 f90e 	mul.w	r9, r9, lr
 801d5a4:	9300      	str	r3, [sp, #0]
 801d5a6:	42b1      	cmp	r1, r6
 801d5a8:	d236      	bcs.n	801d618 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801d5aa:	eb01 0b0a 	add.w	fp, r1, sl
 801d5ae:	4559      	cmp	r1, fp
 801d5b0:	d230      	bcs.n	801d614 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801d5b2:	680b      	ldr	r3, [r1, #0]
 801d5b4:	0e1c      	lsrs	r4, r3, #24
 801d5b6:	d102      	bne.n	801d5be <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 801d5b8:	9b00      	ldr	r3, [sp, #0]
 801d5ba:	600b      	str	r3, [r1, #0]
 801d5bc:	e7f7      	b.n	801d5ae <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801d5be:	fb04 f00e 	mul.w	r0, r4, lr
 801d5c2:	eb0c 0504 	add.w	r5, ip, r4
 801d5c6:	3104      	adds	r1, #4
 801d5c8:	1c47      	adds	r7, r0, #1
 801d5ca:	eb07 2720 	add.w	r7, r7, r0, asr #8
 801d5ce:	1238      	asrs	r0, r7, #8
 801d5d0:	1a27      	subs	r7, r4, r0
 801d5d2:	1a2d      	subs	r5, r5, r0
 801d5d4:	f3c3 4407 	ubfx	r4, r3, #16, #8
 801d5d8:	9801      	ldr	r0, [sp, #4]
 801d5da:	b2ed      	uxtb	r5, r5
 801d5dc:	fb07 0404 	mla	r4, r7, r4, r0
 801d5e0:	b2d8      	uxtb	r0, r3
 801d5e2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d5e6:	fb07 9000 	mla	r0, r7, r0, r9
 801d5ea:	fbb4 f4f5 	udiv	r4, r4, r5
 801d5ee:	fbb0 f0f5 	udiv	r0, r0, r5
 801d5f2:	0424      	lsls	r4, r4, #16
 801d5f4:	b2c0      	uxtb	r0, r0
 801d5f6:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 801d5fa:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 801d5fe:	4320      	orrs	r0, r4
 801d600:	fb07 8403 	mla	r4, r7, r3, r8
 801d604:	fbb4 f4f5 	udiv	r4, r4, r5
 801d608:	0224      	lsls	r4, r4, #8
 801d60a:	b2a4      	uxth	r4, r4
 801d60c:	4320      	orrs	r0, r4
 801d60e:	f841 0c04 	str.w	r0, [r1, #-4]
 801d612:	e7cc      	b.n	801d5ae <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801d614:	4411      	add	r1, r2
 801d616:	e7c6      	b.n	801d5a6 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x86>
 801d618:	b003      	add	sp, #12
 801d61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801d620 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801d620:	2bff      	cmp	r3, #255	; 0xff
 801d622:	d061      	beq.n	801d6e8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801d624:	2a33      	cmp	r2, #51	; 0x33
 801d626:	d83d      	bhi.n	801d6a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d628:	e8df f012 	tbh	[pc, r2, lsl #1]
 801d62c:	00500054 	.word	0x00500054
 801d630:	004e0052 	.word	0x004e0052
 801d634:	00560058 	.word	0x00560058
 801d638:	003c003c 	.word	0x003c003c
 801d63c:	010000fe 	.word	0x010000fe
 801d640:	010000fe 	.word	0x010000fe
 801d644:	003c003c 	.word	0x003c003c
 801d648:	003c003c 	.word	0x003c003c
 801d64c:	003c003c 	.word	0x003c003c
 801d650:	003c003c 	.word	0x003c003c
 801d654:	003c003c 	.word	0x003c003c
 801d658:	003c003c 	.word	0x003c003c
 801d65c:	003c003c 	.word	0x003c003c
 801d660:	003c003c 	.word	0x003c003c
 801d664:	003c003c 	.word	0x003c003c
 801d668:	003c003c 	.word	0x003c003c
 801d66c:	003c003c 	.word	0x003c003c
 801d670:	003c003c 	.word	0x003c003c
 801d674:	003c003c 	.word	0x003c003c
 801d678:	003c003c 	.word	0x003c003c
 801d67c:	003c003c 	.word	0x003c003c
 801d680:	003c003c 	.word	0x003c003c
 801d684:	00340042 	.word	0x00340042
 801d688:	00e400eb 	.word	0x00e400eb
 801d68c:	005a005c 	.word	0x005a005c
 801d690:	005a005c 	.word	0x005a005c
 801d694:	684b      	ldr	r3, [r1, #4]
 801d696:	781b      	ldrb	r3, [r3, #0]
 801d698:	2b01      	cmp	r3, #1
 801d69a:	d005      	beq.n	801d6a8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801d69c:	f0c0 80af 	bcc.w	801d7fe <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801d6a0:	2b02      	cmp	r3, #2
 801d6a2:	d003      	beq.n	801d6ac <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801d6a4:	2000      	movs	r0, #0
 801d6a6:	4770      	bx	lr
 801d6a8:	6a00      	ldr	r0, [r0, #32]
 801d6aa:	4770      	bx	lr
 801d6ac:	6900      	ldr	r0, [r0, #16]
 801d6ae:	4770      	bx	lr
 801d6b0:	684b      	ldr	r3, [r1, #4]
 801d6b2:	781b      	ldrb	r3, [r3, #0]
 801d6b4:	2b01      	cmp	r3, #1
 801d6b6:	d005      	beq.n	801d6c4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa4>
 801d6b8:	f0c0 80a8 	bcc.w	801d80c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801d6bc:	2b02      	cmp	r3, #2
 801d6be:	d1f1      	bne.n	801d6a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d6c0:	6880      	ldr	r0, [r0, #8]
 801d6c2:	4770      	bx	lr
 801d6c4:	6980      	ldr	r0, [r0, #24]
 801d6c6:	4770      	bx	lr
 801d6c8:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801d6ca:	4770      	bx	lr
 801d6cc:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801d6ce:	4770      	bx	lr
 801d6d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801d6d2:	4770      	bx	lr
 801d6d4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801d6d6:	4770      	bx	lr
 801d6d8:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801d6da:	4770      	bx	lr
 801d6dc:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801d6de:	4770      	bx	lr
 801d6e0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801d6e2:	4770      	bx	lr
 801d6e4:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801d6e6:	4770      	bx	lr
 801d6e8:	2a33      	cmp	r2, #51	; 0x33
 801d6ea:	d8db      	bhi.n	801d6a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d6ec:	a301      	add	r3, pc, #4	; (adr r3, 801d6f4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd4>)
 801d6ee:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 801d6f2:	bf00      	nop
 801d6f4:	0801d81d 	.word	0x0801d81d
 801d6f8:	0801d815 	.word	0x0801d815
 801d6fc:	0801d819 	.word	0x0801d819
 801d700:	0801d811 	.word	0x0801d811
 801d704:	0801d825 	.word	0x0801d825
 801d708:	0801d821 	.word	0x0801d821
 801d70c:	0801d6a5 	.word	0x0801d6a5
 801d710:	0801d6a5 	.word	0x0801d6a5
 801d714:	0801d829 	.word	0x0801d829
 801d718:	0801d82d 	.word	0x0801d82d
 801d71c:	0801d829 	.word	0x0801d829
 801d720:	0801d82d 	.word	0x0801d82d
 801d724:	0801d6a5 	.word	0x0801d6a5
 801d728:	0801d6a5 	.word	0x0801d6a5
 801d72c:	0801d6a5 	.word	0x0801d6a5
 801d730:	0801d6a5 	.word	0x0801d6a5
 801d734:	0801d6a5 	.word	0x0801d6a5
 801d738:	0801d6a5 	.word	0x0801d6a5
 801d73c:	0801d6a5 	.word	0x0801d6a5
 801d740:	0801d6a5 	.word	0x0801d6a5
 801d744:	0801d6a5 	.word	0x0801d6a5
 801d748:	0801d6a5 	.word	0x0801d6a5
 801d74c:	0801d6a5 	.word	0x0801d6a5
 801d750:	0801d6a5 	.word	0x0801d6a5
 801d754:	0801d6a5 	.word	0x0801d6a5
 801d758:	0801d6a5 	.word	0x0801d6a5
 801d75c:	0801d6a5 	.word	0x0801d6a5
 801d760:	0801d6a5 	.word	0x0801d6a5
 801d764:	0801d6a5 	.word	0x0801d6a5
 801d768:	0801d6a5 	.word	0x0801d6a5
 801d76c:	0801d6a5 	.word	0x0801d6a5
 801d770:	0801d6a5 	.word	0x0801d6a5
 801d774:	0801d6a5 	.word	0x0801d6a5
 801d778:	0801d6a5 	.word	0x0801d6a5
 801d77c:	0801d6a5 	.word	0x0801d6a5
 801d780:	0801d6a5 	.word	0x0801d6a5
 801d784:	0801d6a5 	.word	0x0801d6a5
 801d788:	0801d6a5 	.word	0x0801d6a5
 801d78c:	0801d6a5 	.word	0x0801d6a5
 801d790:	0801d6a5 	.word	0x0801d6a5
 801d794:	0801d6a5 	.word	0x0801d6a5
 801d798:	0801d6a5 	.word	0x0801d6a5
 801d79c:	0801d6a5 	.word	0x0801d6a5
 801d7a0:	0801d6a5 	.word	0x0801d6a5
 801d7a4:	0801d7dd 	.word	0x0801d7dd
 801d7a8:	0801d7c5 	.word	0x0801d7c5
 801d7ac:	0801d803 	.word	0x0801d803
 801d7b0:	0801d7f5 	.word	0x0801d7f5
 801d7b4:	0801d835 	.word	0x0801d835
 801d7b8:	0801d831 	.word	0x0801d831
 801d7bc:	0801d835 	.word	0x0801d835
 801d7c0:	0801d831 	.word	0x0801d831
 801d7c4:	684b      	ldr	r3, [r1, #4]
 801d7c6:	781b      	ldrb	r3, [r3, #0]
 801d7c8:	2b01      	cmp	r3, #1
 801d7ca:	d005      	beq.n	801d7d8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1b8>
 801d7cc:	d317      	bcc.n	801d7fe <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801d7ce:	2b02      	cmp	r3, #2
 801d7d0:	f47f af68 	bne.w	801d6a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d7d4:	6940      	ldr	r0, [r0, #20]
 801d7d6:	4770      	bx	lr
 801d7d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801d7da:	4770      	bx	lr
 801d7dc:	684b      	ldr	r3, [r1, #4]
 801d7de:	781b      	ldrb	r3, [r3, #0]
 801d7e0:	2b01      	cmp	r3, #1
 801d7e2:	d005      	beq.n	801d7f0 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1d0>
 801d7e4:	d312      	bcc.n	801d80c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801d7e6:	2b02      	cmp	r3, #2
 801d7e8:	f47f af5c 	bne.w	801d6a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d7ec:	68c0      	ldr	r0, [r0, #12]
 801d7ee:	4770      	bx	lr
 801d7f0:	69c0      	ldr	r0, [r0, #28]
 801d7f2:	4770      	bx	lr
 801d7f4:	684b      	ldr	r3, [r1, #4]
 801d7f6:	781b      	ldrb	r3, [r3, #0]
 801d7f8:	2b00      	cmp	r3, #0
 801d7fa:	f47f af53 	bne.w	801d6a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d7fe:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801d800:	4770      	bx	lr
 801d802:	684b      	ldr	r3, [r1, #4]
 801d804:	781b      	ldrb	r3, [r3, #0]
 801d806:	2b00      	cmp	r3, #0
 801d808:	f47f af4c 	bne.w	801d6a4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801d80c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801d80e:	4770      	bx	lr
 801d810:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801d812:	4770      	bx	lr
 801d814:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801d816:	4770      	bx	lr
 801d818:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801d81a:	4770      	bx	lr
 801d81c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801d81e:	4770      	bx	lr
 801d820:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801d822:	4770      	bx	lr
 801d824:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801d826:	4770      	bx	lr
 801d828:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801d82a:	4770      	bx	lr
 801d82c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801d82e:	4770      	bx	lr
 801d830:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801d832:	4770      	bx	lr
 801d834:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801d836:	4770      	bx	lr

0801d838 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d83c:	b087      	sub	sp, #28
 801d83e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801d842:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801d844:	9100      	str	r1, [sp, #0]
 801d846:	6868      	ldr	r0, [r5, #4]
 801d848:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801d84c:	9204      	str	r2, [sp, #16]
 801d84e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801d852:	e9dd 1416 	ldrd	r1, r4, [sp, #88]	; 0x58
 801d856:	fb00 1404 	mla	r4, r0, r4, r1
 801d85a:	6829      	ldr	r1, [r5, #0]
 801d85c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801d860:	f8db 1000 	ldr.w	r1, [fp]
 801d864:	9101      	str	r1, [sp, #4]
 801d866:	f8db 1004 	ldr.w	r1, [fp, #4]
 801d86a:	3104      	adds	r1, #4
 801d86c:	9102      	str	r1, [sp, #8]
 801d86e:	9900      	ldr	r1, [sp, #0]
 801d870:	2900      	cmp	r1, #0
 801d872:	dc03      	bgt.n	801d87c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801d874:	9904      	ldr	r1, [sp, #16]
 801d876:	2900      	cmp	r1, #0
 801d878:	f340 815a 	ble.w	801db30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d87c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d87e:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801d882:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801d886:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d888:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 801d88c:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801d890:	2b00      	cmp	r3, #0
 801d892:	dd0e      	ble.n	801d8b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801d894:	1405      	asrs	r5, r0, #16
 801d896:	d405      	bmi.n	801d8a4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d898:	4565      	cmp	r5, ip
 801d89a:	da03      	bge.n	801d8a4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d89c:	140d      	asrs	r5, r1, #16
 801d89e:	d401      	bmi.n	801d8a4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d8a0:	42bd      	cmp	r5, r7
 801d8a2:	db07      	blt.n	801d8b4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801d8a4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d8a6:	3b01      	subs	r3, #1
 801d8a8:	3404      	adds	r4, #4
 801d8aa:	4428      	add	r0, r5
 801d8ac:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801d8ae:	4429      	add	r1, r5
 801d8b0:	e7ee      	b.n	801d890 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d8b2:	d04d      	beq.n	801d950 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d8b4:	1e5d      	subs	r5, r3, #1
 801d8b6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d8b8:	fb06 0605 	mla	r6, r6, r5, r0
 801d8bc:	1436      	asrs	r6, r6, #16
 801d8be:	d43d      	bmi.n	801d93c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d8c0:	4566      	cmp	r6, ip
 801d8c2:	da3b      	bge.n	801d93c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d8c4:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d8c6:	fb06 1505 	mla	r5, r6, r5, r1
 801d8ca:	142d      	asrs	r5, r5, #16
 801d8cc:	d436      	bmi.n	801d93c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d8ce:	42bd      	cmp	r5, r7
 801d8d0:	da34      	bge.n	801d93c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801d8d2:	1d25      	adds	r5, r4, #4
 801d8d4:	4699      	mov	r9, r3
 801d8d6:	f1b9 0f00 	cmp.w	r9, #0
 801d8da:	dd35      	ble.n	801d948 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801d8dc:	140e      	asrs	r6, r1, #16
 801d8de:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801d8e2:	1407      	asrs	r7, r0, #16
 801d8e4:	2aff      	cmp	r2, #255	; 0xff
 801d8e6:	46b6      	mov	lr, r6
 801d8e8:	9e01      	ldr	r6, [sp, #4]
 801d8ea:	fb0c 660e 	mla	r6, ip, lr, r6
 801d8ee:	5df6      	ldrb	r6, [r6, r7]
 801d8f0:	9f02      	ldr	r7, [sp, #8]
 801d8f2:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801d8f6:	ea4f 2726 	mov.w	r7, r6, asr #8
 801d8fa:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801d8fe:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801d902:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801d906:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801d90a:	b2f6      	uxtb	r6, r6
 801d90c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801d910:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801d914:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801d918:	f040 80d4 	bne.w	801dac4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801d91c:	f805 6c04 	strb.w	r6, [r5, #-4]
 801d920:	f805 cc03 	strb.w	ip, [r5, #-3]
 801d924:	f805 7c02 	strb.w	r7, [r5, #-2]
 801d928:	f805 2c01 	strb.w	r2, [r5, #-1]
 801d92c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801d92e:	3504      	adds	r5, #4
 801d930:	f109 39ff 	add.w	r9, r9, #4294967295
 801d934:	4430      	add	r0, r6
 801d936:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801d938:	4431      	add	r1, r6
 801d93a:	e7cc      	b.n	801d8d6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801d93c:	f04f 0c00 	mov.w	ip, #0
 801d940:	eb03 050c 	add.w	r5, r3, ip
 801d944:	2d00      	cmp	r5, #0
 801d946:	dc3f      	bgt.n	801d9c8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801d948:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d94c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801d950:	9b00      	ldr	r3, [sp, #0]
 801d952:	2b00      	cmp	r3, #0
 801d954:	f340 80ec 	ble.w	801db30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801d958:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d95c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d95e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d962:	eeb0 6a62 	vmov.f32	s12, s5
 801d966:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d96a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d96e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d972:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801d976:	eeb0 6a43 	vmov.f32	s12, s6
 801d97a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d97e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801d982:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d986:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d98a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d98e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d992:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d996:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d99a:	ee12 1a90 	vmov	r1, s5
 801d99e:	eef0 2a47 	vmov.f32	s5, s14
 801d9a2:	fb91 f3f3 	sdiv	r3, r1, r3
 801d9a6:	ee13 1a10 	vmov	r1, s6
 801d9aa:	9313      	str	r3, [sp, #76]	; 0x4c
 801d9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9ae:	eeb0 3a67 	vmov.f32	s6, s15
 801d9b2:	fb91 f3f3 	sdiv	r3, r1, r3
 801d9b6:	9314      	str	r3, [sp, #80]	; 0x50
 801d9b8:	9b00      	ldr	r3, [sp, #0]
 801d9ba:	9904      	ldr	r1, [sp, #16]
 801d9bc:	3b01      	subs	r3, #1
 801d9be:	9300      	str	r3, [sp, #0]
 801d9c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9c2:	bf08      	it	eq
 801d9c4:	460b      	moveq	r3, r1
 801d9c6:	e752      	b.n	801d86e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d9c8:	1407      	asrs	r7, r0, #16
 801d9ca:	d435      	bmi.n	801da38 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d9cc:	f8db 6008 	ldr.w	r6, [fp, #8]
 801d9d0:	42be      	cmp	r6, r7
 801d9d2:	dd31      	ble.n	801da38 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d9d4:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801d9d8:	d42e      	bmi.n	801da38 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d9da:	f8db 500c 	ldr.w	r5, [fp, #12]
 801d9de:	4575      	cmp	r5, lr
 801d9e0:	dd2a      	ble.n	801da38 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801d9e2:	9d01      	ldr	r5, [sp, #4]
 801d9e4:	b236      	sxth	r6, r6
 801d9e6:	2aff      	cmp	r2, #255	; 0xff
 801d9e8:	fb0e 5606 	mla	r6, lr, r6, r5
 801d9ec:	5df5      	ldrb	r5, [r6, r7]
 801d9ee:	9e02      	ldr	r6, [sp, #8]
 801d9f0:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 801d9f4:	ea4f 2625 	mov.w	r6, r5, asr #8
 801d9f8:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801d9fc:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801da00:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801da04:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801da08:	b2ed      	uxtb	r5, r5
 801da0a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801da0e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801da12:	9603      	str	r6, [sp, #12]
 801da14:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801da18:	462e      	mov	r6, r5
 801da1a:	d114      	bne.n	801da46 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801da1c:	f06f 0503 	mvn.w	r5, #3
 801da20:	fb05 fe0c 	mul.w	lr, r5, ip
 801da24:	9d03      	ldr	r5, [sp, #12]
 801da26:	f804 600e 	strb.w	r6, [r4, lr]
 801da2a:	44a6      	add	lr, r4
 801da2c:	f88e 7001 	strb.w	r7, [lr, #1]
 801da30:	f88e 5002 	strb.w	r5, [lr, #2]
 801da34:	f88e 2003 	strb.w	r2, [lr, #3]
 801da38:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801da3a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801da3e:	4428      	add	r0, r5
 801da40:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801da42:	4429      	add	r1, r5
 801da44:	e77c      	b.n	801d940 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801da46:	2a00      	cmp	r2, #0
 801da48:	d0f6      	beq.n	801da38 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801da4a:	fb12 f707 	smulbb	r7, r2, r7
 801da4e:	f06f 0503 	mvn.w	r5, #3
 801da52:	fb05 fa0c 	mul.w	sl, r5, ip
 801da56:	eb04 090a 	add.w	r9, r4, sl
 801da5a:	f899 5003 	ldrb.w	r5, [r9, #3]
 801da5e:	fb02 fe05 	mul.w	lr, r2, r5
 801da62:	f10e 0801 	add.w	r8, lr, #1
 801da66:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801da6a:	eb02 0e05 	add.w	lr, r2, r5
 801da6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801da72:	ebae 0e08 	sub.w	lr, lr, r8
 801da76:	eba5 0808 	sub.w	r8, r5, r8
 801da7a:	f814 500a 	ldrb.w	r5, [r4, sl]
 801da7e:	fa5f fe8e 	uxtb.w	lr, lr
 801da82:	9505      	str	r5, [sp, #20]
 801da84:	fb16 f502 	smulbb	r5, r6, r2
 801da88:	462e      	mov	r6, r5
 801da8a:	9d05      	ldr	r5, [sp, #20]
 801da8c:	fb08 6505 	mla	r5, r8, r5, r6
 801da90:	9e03      	ldr	r6, [sp, #12]
 801da92:	fb95 f5fe 	sdiv	r5, r5, lr
 801da96:	f804 500a 	strb.w	r5, [r4, sl]
 801da9a:	fb12 f606 	smulbb	r6, r2, r6
 801da9e:	f899 5001 	ldrb.w	r5, [r9, #1]
 801daa2:	f889 e003 	strb.w	lr, [r9, #3]
 801daa6:	fb08 7705 	mla	r7, r8, r5, r7
 801daaa:	f899 5002 	ldrb.w	r5, [r9, #2]
 801daae:	fb08 6605 	mla	r6, r8, r5, r6
 801dab2:	fb97 f7fe 	sdiv	r7, r7, lr
 801dab6:	fb96 f6fe 	sdiv	r6, r6, lr
 801daba:	f889 7001 	strb.w	r7, [r9, #1]
 801dabe:	f889 6002 	strb.w	r6, [r9, #2]
 801dac2:	e7b9      	b.n	801da38 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801dac4:	2a00      	cmp	r2, #0
 801dac6:	f43f af31 	beq.w	801d92c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801daca:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801dace:	fb16 f602 	smulbb	r6, r6, r2
 801dad2:	fb12 fc0c 	smulbb	ip, r2, ip
 801dad6:	fb12 f707 	smulbb	r7, r2, r7
 801dada:	fb02 fe0a 	mul.w	lr, r2, sl
 801dade:	f10e 0801 	add.w	r8, lr, #1
 801dae2:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801dae6:	eb02 0e0a 	add.w	lr, r2, sl
 801daea:	ea4f 2828 	mov.w	r8, r8, asr #8
 801daee:	ebae 0e08 	sub.w	lr, lr, r8
 801daf2:	ebaa 0808 	sub.w	r8, sl, r8
 801daf6:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801dafa:	fa5f fe8e 	uxtb.w	lr, lr
 801dafe:	fb08 660a 	mla	r6, r8, sl, r6
 801db02:	f805 ec01 	strb.w	lr, [r5, #-1]
 801db06:	fb96 f6fe 	sdiv	r6, r6, lr
 801db0a:	f805 6c04 	strb.w	r6, [r5, #-4]
 801db0e:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801db12:	fb08 cc06 	mla	ip, r8, r6, ip
 801db16:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801db1a:	fb08 7706 	mla	r7, r8, r6, r7
 801db1e:	fb9c fcfe 	sdiv	ip, ip, lr
 801db22:	fb97 f7fe 	sdiv	r7, r7, lr
 801db26:	f805 cc03 	strb.w	ip, [r5, #-3]
 801db2a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801db2e:	e6fd      	b.n	801d92c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801db30:	b007      	add	sp, #28
 801db32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801db36 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db3a:	b085      	sub	sp, #20
 801db3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801db40:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801db42:	9203      	str	r2, [sp, #12]
 801db44:	6860      	ldr	r0, [r4, #4]
 801db46:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801db48:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801db4c:	e9dd 8e11 	ldrd	r8, lr, [sp, #68]	; 0x44
 801db50:	fb00 2505 	mla	r5, r0, r5, r2
 801db54:	6822      	ldr	r2, [r4, #0]
 801db56:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801db5a:	683a      	ldr	r2, [r7, #0]
 801db5c:	9201      	str	r2, [sp, #4]
 801db5e:	687a      	ldr	r2, [r7, #4]
 801db60:	3204      	adds	r2, #4
 801db62:	9202      	str	r2, [sp, #8]
 801db64:	2900      	cmp	r1, #0
 801db66:	dc03      	bgt.n	801db70 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801db68:	9a03      	ldr	r2, [sp, #12]
 801db6a:	2a00      	cmp	r2, #0
 801db6c:	f340 80c4 	ble.w	801dcf8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801db70:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801db72:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801db76:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801db7a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801db7c:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801db80:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801db84:	2b00      	cmp	r3, #0
 801db86:	dd0c      	ble.n	801dba2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801db88:	1404      	asrs	r4, r0, #16
 801db8a:	d405      	bmi.n	801db98 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801db8c:	454c      	cmp	r4, r9
 801db8e:	da03      	bge.n	801db98 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801db90:	1414      	asrs	r4, r2, #16
 801db92:	d401      	bmi.n	801db98 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801db94:	4564      	cmp	r4, ip
 801db96:	db05      	blt.n	801dba4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801db98:	4440      	add	r0, r8
 801db9a:	4472      	add	r2, lr
 801db9c:	3b01      	subs	r3, #1
 801db9e:	3504      	adds	r5, #4
 801dba0:	e7f0      	b.n	801db84 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801dba2:	d00e      	beq.n	801dbc2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801dba4:	1e5c      	subs	r4, r3, #1
 801dba6:	fb08 0604 	mla	r6, r8, r4, r0
 801dbaa:	1436      	asrs	r6, r6, #16
 801dbac:	d53e      	bpl.n	801dc2c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801dbae:	4699      	mov	r9, r3
 801dbb0:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801dbb4:	f1b9 0f00 	cmp.w	r9, #0
 801dbb8:	dc6b      	bgt.n	801dc92 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801dbba:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801dbbe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801dbc2:	2900      	cmp	r1, #0
 801dbc4:	f340 8098 	ble.w	801dcf8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801dbc8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dbcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dbce:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dbd2:	3901      	subs	r1, #1
 801dbd4:	eeb0 6a62 	vmov.f32	s12, s5
 801dbd8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801dbdc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dbe0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dbe4:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801dbe8:	eeb0 6a43 	vmov.f32	s12, s6
 801dbec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801dbf0:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801dbf4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dbf8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dbfc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dc00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dc04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dc08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dc0c:	ee12 2a90 	vmov	r2, s5
 801dc10:	eef0 2a47 	vmov.f32	s5, s14
 801dc14:	fb92 f8f3 	sdiv	r8, r2, r3
 801dc18:	ee13 2a10 	vmov	r2, s6
 801dc1c:	eeb0 3a67 	vmov.f32	s6, s15
 801dc20:	fb92 fef3 	sdiv	lr, r2, r3
 801dc24:	9a03      	ldr	r2, [sp, #12]
 801dc26:	bf08      	it	eq
 801dc28:	4613      	moveq	r3, r2
 801dc2a:	e79b      	b.n	801db64 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801dc2c:	454e      	cmp	r6, r9
 801dc2e:	dabe      	bge.n	801dbae <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dc30:	fb0e 2404 	mla	r4, lr, r4, r2
 801dc34:	1424      	asrs	r4, r4, #16
 801dc36:	d4ba      	bmi.n	801dbae <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dc38:	4564      	cmp	r4, ip
 801dc3a:	dab8      	bge.n	801dbae <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dc3c:	4699      	mov	r9, r3
 801dc3e:	46aa      	mov	sl, r5
 801dc40:	f1b9 0f00 	cmp.w	r9, #0
 801dc44:	ddb9      	ble.n	801dbba <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801dc46:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801dc4a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801dc4e:	9c01      	ldr	r4, [sp, #4]
 801dc50:	1406      	asrs	r6, r0, #16
 801dc52:	4472      	add	r2, lr
 801dc54:	4440      	add	r0, r8
 801dc56:	fb0c 440b 	mla	r4, ip, fp, r4
 801dc5a:	f109 39ff 	add.w	r9, r9, #4294967295
 801dc5e:	5da4      	ldrb	r4, [r4, r6]
 801dc60:	9e02      	ldr	r6, [sp, #8]
 801dc62:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801dc66:	10f4      	asrs	r4, r6, #3
 801dc68:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801dc6c:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801dc70:	00f6      	lsls	r6, r6, #3
 801dc72:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dc76:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801dc7a:	b2f6      	uxtb	r6, r6
 801dc7c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801dc80:	0224      	lsls	r4, r4, #8
 801dc82:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801dc86:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801dc8a:	4334      	orrs	r4, r6
 801dc8c:	f84a 4b04 	str.w	r4, [sl], #4
 801dc90:	e7d6      	b.n	801dc40 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801dc92:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801dc96:	d42a      	bmi.n	801dcee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801dc98:	68be      	ldr	r6, [r7, #8]
 801dc9a:	4566      	cmp	r6, ip
 801dc9c:	dd27      	ble.n	801dcee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801dc9e:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801dca2:	d424      	bmi.n	801dcee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801dca4:	68fc      	ldr	r4, [r7, #12]
 801dca6:	455c      	cmp	r4, fp
 801dca8:	dd21      	ble.n	801dcee <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801dcaa:	9c01      	ldr	r4, [sp, #4]
 801dcac:	b236      	sxth	r6, r6
 801dcae:	fb0b 4606 	mla	r6, fp, r6, r4
 801dcb2:	f06f 0b03 	mvn.w	fp, #3
 801dcb6:	f816 400c 	ldrb.w	r4, [r6, ip]
 801dcba:	fb0b fb09 	mul.w	fp, fp, r9
 801dcbe:	9e02      	ldr	r6, [sp, #8]
 801dcc0:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801dcc4:	10f4      	asrs	r4, r6, #3
 801dcc6:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801dcca:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801dcce:	00f6      	lsls	r6, r6, #3
 801dcd0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801dcd4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801dcd8:	b2f6      	uxtb	r6, r6
 801dcda:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801dcde:	0224      	lsls	r4, r4, #8
 801dce0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801dce4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801dce8:	4334      	orrs	r4, r6
 801dcea:	f84a 400b 	str.w	r4, [sl, fp]
 801dcee:	4440      	add	r0, r8
 801dcf0:	4472      	add	r2, lr
 801dcf2:	f109 39ff 	add.w	r9, r9, #4294967295
 801dcf6:	e75d      	b.n	801dbb4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801dcf8:	b005      	add	sp, #20
 801dcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dcfe <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dcfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd02:	b085      	sub	sp, #20
 801dd04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd08:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801dd0a:	9101      	str	r1, [sp, #4]
 801dd0c:	6868      	ldr	r0, [r5, #4]
 801dd0e:	9203      	str	r2, [sp, #12]
 801dd10:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801dd14:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801dd18:	fb00 1404 	mla	r4, r0, r4, r1
 801dd1c:	6829      	ldr	r1, [r5, #0]
 801dd1e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801dd22:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dd24:	6809      	ldr	r1, [r1, #0]
 801dd26:	9102      	str	r1, [sp, #8]
 801dd28:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dd2a:	6849      	ldr	r1, [r1, #4]
 801dd2c:	3104      	adds	r1, #4
 801dd2e:	9100      	str	r1, [sp, #0]
 801dd30:	9901      	ldr	r1, [sp, #4]
 801dd32:	2900      	cmp	r1, #0
 801dd34:	dc03      	bgt.n	801dd3e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801dd36:	9903      	ldr	r1, [sp, #12]
 801dd38:	2900      	cmp	r1, #0
 801dd3a:	f340 813d 	ble.w	801dfb8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801dd3e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801dd40:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801dd44:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801dd48:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801dd4a:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801dd4e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801dd50:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801dd54:	2b00      	cmp	r3, #0
 801dd56:	dd0e      	ble.n	801dd76 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801dd58:	1405      	asrs	r5, r0, #16
 801dd5a:	d405      	bmi.n	801dd68 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dd5c:	4565      	cmp	r5, ip
 801dd5e:	da03      	bge.n	801dd68 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dd60:	140d      	asrs	r5, r1, #16
 801dd62:	d401      	bmi.n	801dd68 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dd64:	42bd      	cmp	r5, r7
 801dd66:	db07      	blt.n	801dd78 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801dd68:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801dd6a:	3b01      	subs	r3, #1
 801dd6c:	3404      	adds	r4, #4
 801dd6e:	4428      	add	r0, r5
 801dd70:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801dd72:	4429      	add	r1, r5
 801dd74:	e7ee      	b.n	801dd54 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801dd76:	d044      	beq.n	801de02 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801dd78:	1e5d      	subs	r5, r3, #1
 801dd7a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dd7c:	fb06 0605 	mla	r6, r6, r5, r0
 801dd80:	1436      	asrs	r6, r6, #16
 801dd82:	d436      	bmi.n	801ddf2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801dd84:	4566      	cmp	r6, ip
 801dd86:	da34      	bge.n	801ddf2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801dd88:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801dd8a:	fb06 1505 	mla	r5, r6, r5, r1
 801dd8e:	142d      	asrs	r5, r5, #16
 801dd90:	d42f      	bmi.n	801ddf2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801dd92:	42bd      	cmp	r5, r7
 801dd94:	da2d      	bge.n	801ddf2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801dd96:	1d25      	adds	r5, r4, #4
 801dd98:	469a      	mov	sl, r3
 801dd9a:	f1ba 0f00 	cmp.w	sl, #0
 801dd9e:	dd2c      	ble.n	801ddfa <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801dda0:	140e      	asrs	r6, r1, #16
 801dda2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801dda4:	2aff      	cmp	r2, #255	; 0xff
 801dda6:	46b6      	mov	lr, r6
 801dda8:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801ddac:	9e02      	ldr	r6, [sp, #8]
 801ddae:	ea4f 4720 	mov.w	r7, r0, asr #16
 801ddb2:	fb0c 660e 	mla	r6, ip, lr, r6
 801ddb6:	5df6      	ldrb	r6, [r6, r7]
 801ddb8:	9f00      	ldr	r7, [sp, #0]
 801ddba:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ddbe:	4437      	add	r7, r6
 801ddc0:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ddc4:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ddc8:	9f00      	ldr	r7, [sp, #0]
 801ddca:	f817 9006 	ldrb.w	r9, [r7, r6]
 801ddce:	f040 80be 	bne.w	801df4e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ddd2:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ddd6:	f805 8c03 	strb.w	r8, [r5, #-3]
 801ddda:	f805 ec02 	strb.w	lr, [r5, #-2]
 801ddde:	f805 2c01 	strb.w	r2, [r5, #-1]
 801dde2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dde4:	3504      	adds	r5, #4
 801dde6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ddea:	4430      	add	r0, r6
 801ddec:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ddee:	4431      	add	r1, r6
 801ddf0:	e7d3      	b.n	801dd9a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ddf2:	2500      	movs	r5, #0
 801ddf4:	195e      	adds	r6, r3, r5
 801ddf6:	2e00      	cmp	r6, #0
 801ddf8:	dc3f      	bgt.n	801de7a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ddfa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ddfe:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801de02:	9b01      	ldr	r3, [sp, #4]
 801de04:	2b00      	cmp	r3, #0
 801de06:	f340 80d7 	ble.w	801dfb8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801de0a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801de0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de10:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801de14:	eeb0 6a62 	vmov.f32	s12, s5
 801de18:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801de1c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801de20:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de24:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801de28:	eeb0 6a43 	vmov.f32	s12, s6
 801de2c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801de30:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801de34:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801de38:	ee61 7a27 	vmul.f32	s15, s2, s15
 801de3c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801de40:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801de44:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801de48:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801de4c:	ee12 1a90 	vmov	r1, s5
 801de50:	eef0 2a47 	vmov.f32	s5, s14
 801de54:	fb91 f3f3 	sdiv	r3, r1, r3
 801de58:	ee13 1a10 	vmov	r1, s6
 801de5c:	9311      	str	r3, [sp, #68]	; 0x44
 801de5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de60:	eeb0 3a67 	vmov.f32	s6, s15
 801de64:	fb91 f3f3 	sdiv	r3, r1, r3
 801de68:	9312      	str	r3, [sp, #72]	; 0x48
 801de6a:	9b01      	ldr	r3, [sp, #4]
 801de6c:	9903      	ldr	r1, [sp, #12]
 801de6e:	3b01      	subs	r3, #1
 801de70:	9301      	str	r3, [sp, #4]
 801de72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801de74:	bf08      	it	eq
 801de76:	460b      	moveq	r3, r1
 801de78:	e75a      	b.n	801dd30 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801de7a:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801de7e:	d427      	bmi.n	801ded0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801de80:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801de82:	68b7      	ldr	r7, [r6, #8]
 801de84:	4567      	cmp	r7, ip
 801de86:	dd23      	ble.n	801ded0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801de88:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801de8c:	d420      	bmi.n	801ded0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801de8e:	68f6      	ldr	r6, [r6, #12]
 801de90:	4576      	cmp	r6, lr
 801de92:	dd1d      	ble.n	801ded0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801de94:	9e02      	ldr	r6, [sp, #8]
 801de96:	b23f      	sxth	r7, r7
 801de98:	2aff      	cmp	r2, #255	; 0xff
 801de9a:	fb0e 6707 	mla	r7, lr, r7, r6
 801de9e:	f817 600c 	ldrb.w	r6, [r7, ip]
 801dea2:	9f00      	ldr	r7, [sp, #0]
 801dea4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801dea8:	4437      	add	r7, r6
 801deaa:	f897 8002 	ldrb.w	r8, [r7, #2]
 801deae:	f897 9001 	ldrb.w	r9, [r7, #1]
 801deb2:	9f00      	ldr	r7, [sp, #0]
 801deb4:	f817 a006 	ldrb.w	sl, [r7, r6]
 801deb8:	d110      	bne.n	801dedc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801deba:	f06f 0603 	mvn.w	r6, #3
 801debe:	436e      	muls	r6, r5
 801dec0:	f804 a006 	strb.w	sl, [r4, r6]
 801dec4:	4426      	add	r6, r4
 801dec6:	f886 9001 	strb.w	r9, [r6, #1]
 801deca:	f886 8002 	strb.w	r8, [r6, #2]
 801dece:	70f2      	strb	r2, [r6, #3]
 801ded0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ded2:	3d01      	subs	r5, #1
 801ded4:	4430      	add	r0, r6
 801ded6:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ded8:	4431      	add	r1, r6
 801deda:	e78b      	b.n	801ddf4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801dedc:	2a00      	cmp	r2, #0
 801dede:	d0f7      	beq.n	801ded0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801dee0:	fb1a fa02 	smulbb	sl, sl, r2
 801dee4:	f06f 0603 	mvn.w	r6, #3
 801dee8:	fb12 f909 	smulbb	r9, r2, r9
 801deec:	fb12 f808 	smulbb	r8, r2, r8
 801def0:	fb06 fb05 	mul.w	fp, r6, r5
 801def4:	eb04 0c0b 	add.w	ip, r4, fp
 801def8:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801defc:	fb02 f607 	mul.w	r6, r2, r7
 801df00:	f106 0e01 	add.w	lr, r6, #1
 801df04:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801df08:	19d6      	adds	r6, r2, r7
 801df0a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801df0e:	eba7 070e 	sub.w	r7, r7, lr
 801df12:	eba6 060e 	sub.w	r6, r6, lr
 801df16:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801df1a:	b2f6      	uxtb	r6, r6
 801df1c:	fb07 aa0e 	mla	sl, r7, lr, sl
 801df20:	fb9a faf6 	sdiv	sl, sl, r6
 801df24:	f804 a00b 	strb.w	sl, [r4, fp]
 801df28:	f89c e001 	ldrb.w	lr, [ip, #1]
 801df2c:	f88c 6003 	strb.w	r6, [ip, #3]
 801df30:	fb07 990e 	mla	r9, r7, lr, r9
 801df34:	f89c e002 	ldrb.w	lr, [ip, #2]
 801df38:	fb07 880e 	mla	r8, r7, lr, r8
 801df3c:	fb99 f9f6 	sdiv	r9, r9, r6
 801df40:	fb98 f8f6 	sdiv	r8, r8, r6
 801df44:	f88c 9001 	strb.w	r9, [ip, #1]
 801df48:	f88c 8002 	strb.w	r8, [ip, #2]
 801df4c:	e7c0      	b.n	801ded0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801df4e:	2a00      	cmp	r2, #0
 801df50:	f43f af47 	beq.w	801dde2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801df54:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801df58:	fb19 f902 	smulbb	r9, r9, r2
 801df5c:	fb12 f808 	smulbb	r8, r2, r8
 801df60:	fb02 fc0b 	mul.w	ip, r2, fp
 801df64:	eb02 060b 	add.w	r6, r2, fp
 801df68:	fb12 fe0e 	smulbb	lr, r2, lr
 801df6c:	f10c 0701 	add.w	r7, ip, #1
 801df70:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801df74:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801df78:	ebab 070c 	sub.w	r7, fp, ip
 801df7c:	eba6 060c 	sub.w	r6, r6, ip
 801df80:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801df84:	b2f6      	uxtb	r6, r6
 801df86:	fb07 990c 	mla	r9, r7, ip, r9
 801df8a:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801df8e:	f805 6c01 	strb.w	r6, [r5, #-1]
 801df92:	fb07 880c 	mla	r8, r7, ip, r8
 801df96:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801df9a:	fb07 ee0c 	mla	lr, r7, ip, lr
 801df9e:	fb99 f9f6 	sdiv	r9, r9, r6
 801dfa2:	fb98 f8f6 	sdiv	r8, r8, r6
 801dfa6:	fb9e fef6 	sdiv	lr, lr, r6
 801dfaa:	f805 9c04 	strb.w	r9, [r5, #-4]
 801dfae:	f805 8c03 	strb.w	r8, [r5, #-3]
 801dfb2:	f805 ec02 	strb.w	lr, [r5, #-2]
 801dfb6:	e714      	b.n	801dde2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801dfb8:	b005      	add	sp, #20
 801dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dfbe <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dfbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfc2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801dfc4:	4693      	mov	fp, r2
 801dfc6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801dfc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dfcc:	6870      	ldr	r0, [r6, #4]
 801dfce:	686f      	ldr	r7, [r5, #4]
 801dfd0:	9100      	str	r1, [sp, #0]
 801dfd2:	3704      	adds	r7, #4
 801dfd4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801dfd8:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801dfdc:	fb00 2404 	mla	r4, r0, r4, r2
 801dfe0:	6832      	ldr	r2, [r6, #0]
 801dfe2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801dfe6:	682a      	ldr	r2, [r5, #0]
 801dfe8:	9201      	str	r2, [sp, #4]
 801dfea:	9a00      	ldr	r2, [sp, #0]
 801dfec:	2a00      	cmp	r2, #0
 801dfee:	dc03      	bgt.n	801dff8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801dff0:	f1bb 0f00 	cmp.w	fp, #0
 801dff4:	f340 80bd 	ble.w	801e172 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801dff8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dffa:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801dffe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801e002:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e004:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 801e008:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e00c:	2b00      	cmp	r3, #0
 801e00e:	dd0c      	ble.n	801e02a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e010:	1406      	asrs	r6, r0, #16
 801e012:	d405      	bmi.n	801e020 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e014:	4556      	cmp	r6, sl
 801e016:	da03      	bge.n	801e020 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e018:	1416      	asrs	r6, r2, #16
 801e01a:	d401      	bmi.n	801e020 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801e01c:	454e      	cmp	r6, r9
 801e01e:	db05      	blt.n	801e02c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e020:	4440      	add	r0, r8
 801e022:	4472      	add	r2, lr
 801e024:	3b01      	subs	r3, #1
 801e026:	3404      	adds	r4, #4
 801e028:	e7f0      	b.n	801e00c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801e02a:	d03e      	beq.n	801e0aa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801e02c:	1e5e      	subs	r6, r3, #1
 801e02e:	fb08 0c06 	mla	ip, r8, r6, r0
 801e032:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801e036:	d42e      	bmi.n	801e096 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801e038:	45d4      	cmp	ip, sl
 801e03a:	da2c      	bge.n	801e096 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801e03c:	fb0e 2606 	mla	r6, lr, r6, r2
 801e040:	1436      	asrs	r6, r6, #16
 801e042:	d428      	bmi.n	801e096 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801e044:	454e      	cmp	r6, r9
 801e046:	da26      	bge.n	801e096 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801e048:	1d26      	adds	r6, r4, #4
 801e04a:	469c      	mov	ip, r3
 801e04c:	f1bc 0f00 	cmp.w	ip, #0
 801e050:	f106 0604 	add.w	r6, r6, #4
 801e054:	dd25      	ble.n	801e0a2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801e056:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801e05a:	ea4f 4922 	mov.w	r9, r2, asr #16
 801e05e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e062:	4472      	add	r2, lr
 801e064:	468a      	mov	sl, r1
 801e066:	9901      	ldr	r1, [sp, #4]
 801e068:	fb0a 1909 	mla	r9, sl, r9, r1
 801e06c:	1401      	asrs	r1, r0, #16
 801e06e:	4440      	add	r0, r8
 801e070:	f819 9001 	ldrb.w	r9, [r9, r1]
 801e074:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801e078:	eb07 0a09 	add.w	sl, r7, r9
 801e07c:	f817 9009 	ldrb.w	r9, [r7, r9]
 801e080:	f806 9c08 	strb.w	r9, [r6, #-8]
 801e084:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801e088:	f806 9c07 	strb.w	r9, [r6, #-7]
 801e08c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801e090:	f806 9c06 	strb.w	r9, [r6, #-6]
 801e094:	e7da      	b.n	801e04c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e096:	2600      	movs	r6, #0
 801e098:	eb03 0c06 	add.w	ip, r3, r6
 801e09c:	f1bc 0f00 	cmp.w	ip, #0
 801e0a0:	dc3a      	bgt.n	801e118 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801e0a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e0a6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801e0aa:	9b00      	ldr	r3, [sp, #0]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	dd60      	ble.n	801e172 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801e0b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e0b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e0b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e0ba:	eeb0 6a62 	vmov.f32	s12, s5
 801e0be:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e0c2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e0c6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0ca:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801e0ce:	eeb0 6a43 	vmov.f32	s12, s6
 801e0d2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e0d6:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801e0da:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e0de:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e0e2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e0e6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e0ea:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e0ee:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e0f2:	ee12 2a90 	vmov	r2, s5
 801e0f6:	eef0 2a47 	vmov.f32	s5, s14
 801e0fa:	fb92 f8f3 	sdiv	r8, r2, r3
 801e0fe:	ee13 2a10 	vmov	r2, s6
 801e102:	eeb0 3a67 	vmov.f32	s6, s15
 801e106:	fb92 fef3 	sdiv	lr, r2, r3
 801e10a:	9b00      	ldr	r3, [sp, #0]
 801e10c:	3b01      	subs	r3, #1
 801e10e:	9300      	str	r3, [sp, #0]
 801e110:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e112:	bf08      	it	eq
 801e114:	465b      	moveq	r3, fp
 801e116:	e768      	b.n	801dfea <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801e118:	ea5f 4920 	movs.w	r9, r0, asr #16
 801e11c:	d425      	bmi.n	801e16a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e11e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801e122:	45cc      	cmp	ip, r9
 801e124:	dd21      	ble.n	801e16a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e126:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801e12a:	d41e      	bmi.n	801e16a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e12c:	68e9      	ldr	r1, [r5, #12]
 801e12e:	4551      	cmp	r1, sl
 801e130:	dd1b      	ble.n	801e16a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801e132:	9901      	ldr	r1, [sp, #4]
 801e134:	fa0f fc8c 	sxth.w	ip, ip
 801e138:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801e13c:	f06f 0103 	mvn.w	r1, #3
 801e140:	f81c c009 	ldrb.w	ip, [ip, r9]
 801e144:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e148:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801e14c:	eb07 090c 	add.w	r9, r7, ip
 801e150:	fb01 fc06 	mul.w	ip, r1, r6
 801e154:	f804 a00c 	strb.w	sl, [r4, ip]
 801e158:	44a4      	add	ip, r4
 801e15a:	f899 a001 	ldrb.w	sl, [r9, #1]
 801e15e:	f88c a001 	strb.w	sl, [ip, #1]
 801e162:	f899 9002 	ldrb.w	r9, [r9, #2]
 801e166:	f88c 9002 	strb.w	r9, [ip, #2]
 801e16a:	4440      	add	r0, r8
 801e16c:	4472      	add	r2, lr
 801e16e:	3e01      	subs	r6, #1
 801e170:	e792      	b.n	801e098 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801e172:	b003      	add	sp, #12
 801e174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e178 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e17c:	b089      	sub	sp, #36	; 0x24
 801e17e:	469b      	mov	fp, r3
 801e180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e184:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801e186:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801e18a:	9101      	str	r1, [sp, #4]
 801e18c:	9205      	str	r2, [sp, #20]
 801e18e:	9306      	str	r3, [sp, #24]
 801e190:	6842      	ldr	r2, [r0, #4]
 801e192:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801e196:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 801e19a:	fb02 3101 	mla	r1, r2, r1, r3
 801e19e:	6803      	ldr	r3, [r0, #0]
 801e1a0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801e1a4:	f8da 3000 	ldr.w	r3, [sl]
 801e1a8:	9302      	str	r3, [sp, #8]
 801e1aa:	f8da 3004 	ldr.w	r3, [sl, #4]
 801e1ae:	3304      	adds	r3, #4
 801e1b0:	9303      	str	r3, [sp, #12]
 801e1b2:	9b01      	ldr	r3, [sp, #4]
 801e1b4:	2b00      	cmp	r3, #0
 801e1b6:	dc03      	bgt.n	801e1c0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e1b8:	9b05      	ldr	r3, [sp, #20]
 801e1ba:	2b00      	cmp	r3, #0
 801e1bc:	f340 814e 	ble.w	801e45c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801e1c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e1c2:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801e1c6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801e1ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801e1cc:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 801e1d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801e1d4:	f1bb 0f00 	cmp.w	fp, #0
 801e1d8:	dd0f      	ble.n	801e1fa <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801e1da:	1410      	asrs	r0, r2, #16
 801e1dc:	d405      	bmi.n	801e1ea <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e1de:	42b0      	cmp	r0, r6
 801e1e0:	da03      	bge.n	801e1ea <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e1e2:	1418      	asrs	r0, r3, #16
 801e1e4:	d401      	bmi.n	801e1ea <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801e1e6:	42a8      	cmp	r0, r5
 801e1e8:	db08      	blt.n	801e1fc <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e1ea:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e1ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e1f0:	3104      	adds	r1, #4
 801e1f2:	4402      	add	r2, r0
 801e1f4:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e1f6:	4403      	add	r3, r0
 801e1f8:	e7ec      	b.n	801e1d4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e1fa:	d04a      	beq.n	801e292 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801e1fc:	f10b 30ff 	add.w	r0, fp, #4294967295
 801e200:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e202:	fb04 2400 	mla	r4, r4, r0, r2
 801e206:	1424      	asrs	r4, r4, #16
 801e208:	d43a      	bmi.n	801e280 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801e20a:	42b4      	cmp	r4, r6
 801e20c:	da38      	bge.n	801e280 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801e20e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e210:	fb04 3000 	mla	r0, r4, r0, r3
 801e214:	1400      	asrs	r0, r0, #16
 801e216:	d433      	bmi.n	801e280 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801e218:	42a8      	cmp	r0, r5
 801e21a:	da31      	bge.n	801e280 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801e21c:	1d08      	adds	r0, r1, #4
 801e21e:	46dc      	mov	ip, fp
 801e220:	f1bc 0f00 	cmp.w	ip, #0
 801e224:	dd31      	ble.n	801e28a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801e226:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801e22a:	141c      	asrs	r4, r3, #16
 801e22c:	9f02      	ldr	r7, [sp, #8]
 801e22e:	1415      	asrs	r5, r2, #16
 801e230:	fb06 7404 	mla	r4, r6, r4, r7
 801e234:	5d64      	ldrb	r4, [r4, r5]
 801e236:	9d03      	ldr	r5, [sp, #12]
 801e238:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 801e23c:	9d06      	ldr	r5, [sp, #24]
 801e23e:	0e34      	lsrs	r4, r6, #24
 801e240:	436c      	muls	r4, r5
 801e242:	1c65      	adds	r5, r4, #1
 801e244:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801e248:	f3c6 4507 	ubfx	r5, r6, #16, #8
 801e24c:	1224      	asrs	r4, r4, #8
 801e24e:	b2ef      	uxtb	r7, r5
 801e250:	2cff      	cmp	r4, #255	; 0xff
 801e252:	9704      	str	r7, [sp, #16]
 801e254:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801e258:	fa5f fe87 	uxtb.w	lr, r7
 801e25c:	f040 80ca 	bne.w	801e3f4 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e260:	f800 6c04 	strb.w	r6, [r0, #-4]
 801e264:	f800 7c03 	strb.w	r7, [r0, #-3]
 801e268:	f800 5c02 	strb.w	r5, [r0, #-2]
 801e26c:	f800 4c01 	strb.w	r4, [r0, #-1]
 801e270:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e272:	3004      	adds	r0, #4
 801e274:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e278:	4422      	add	r2, r4
 801e27a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801e27c:	4423      	add	r3, r4
 801e27e:	e7cf      	b.n	801e220 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801e280:	2700      	movs	r7, #0
 801e282:	eb0b 0007 	add.w	r0, fp, r7
 801e286:	2800      	cmp	r0, #0
 801e288:	dc41      	bgt.n	801e30e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801e28a:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801e28e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e292:	9b01      	ldr	r3, [sp, #4]
 801e294:	2b00      	cmp	r3, #0
 801e296:	f340 80e1 	ble.w	801e45c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801e29a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e29e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e2a0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e2a4:	eeb0 6a62 	vmov.f32	s12, s5
 801e2a8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e2ac:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e2b0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2b4:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801e2b8:	eeb0 6a43 	vmov.f32	s12, s6
 801e2bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e2c0:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 801e2c4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e2c8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e2cc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e2d0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e2d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e2d8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e2dc:	ee12 2a90 	vmov	r2, s5
 801e2e0:	eef0 2a47 	vmov.f32	s5, s14
 801e2e4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2e8:	ee13 2a10 	vmov	r2, s6
 801e2ec:	9315      	str	r3, [sp, #84]	; 0x54
 801e2ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e2f0:	eeb0 3a67 	vmov.f32	s6, s15
 801e2f4:	fb92 f3f3 	sdiv	r3, r2, r3
 801e2f8:	9316      	str	r3, [sp, #88]	; 0x58
 801e2fa:	9b01      	ldr	r3, [sp, #4]
 801e2fc:	9a05      	ldr	r2, [sp, #20]
 801e2fe:	3b01      	subs	r3, #1
 801e300:	9301      	str	r3, [sp, #4]
 801e302:	bf08      	it	eq
 801e304:	4693      	moveq	fp, r2
 801e306:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e308:	bf18      	it	ne
 801e30a:	469b      	movne	fp, r3
 801e30c:	e751      	b.n	801e1b2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e30e:	1415      	asrs	r5, r2, #16
 801e310:	d42f      	bmi.n	801e372 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e312:	f8da 4008 	ldr.w	r4, [sl, #8]
 801e316:	42ac      	cmp	r4, r5
 801e318:	dd2b      	ble.n	801e372 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e31a:	141e      	asrs	r6, r3, #16
 801e31c:	d429      	bmi.n	801e372 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e31e:	f8da 000c 	ldr.w	r0, [sl, #12]
 801e322:	42b0      	cmp	r0, r6
 801e324:	dd25      	ble.n	801e372 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e326:	9802      	ldr	r0, [sp, #8]
 801e328:	b224      	sxth	r4, r4
 801e32a:	fb06 0404 	mla	r4, r6, r4, r0
 801e32e:	5d60      	ldrb	r0, [r4, r5]
 801e330:	9c03      	ldr	r4, [sp, #12]
 801e332:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 801e336:	9c06      	ldr	r4, [sp, #24]
 801e338:	0e28      	lsrs	r0, r5, #24
 801e33a:	4360      	muls	r0, r4
 801e33c:	1c44      	adds	r4, r0, #1
 801e33e:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801e342:	f3c5 4407 	ubfx	r4, r5, #16, #8
 801e346:	1200      	asrs	r0, r0, #8
 801e348:	b2e6      	uxtb	r6, r4
 801e34a:	28ff      	cmp	r0, #255	; 0xff
 801e34c:	9607      	str	r6, [sp, #28]
 801e34e:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801e352:	fa5f fe86 	uxtb.w	lr, r6
 801e356:	d112      	bne.n	801e37e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e358:	f06f 0c03 	mvn.w	ip, #3
 801e35c:	fb0c fc07 	mul.w	ip, ip, r7
 801e360:	f801 500c 	strb.w	r5, [r1, ip]
 801e364:	448c      	add	ip, r1
 801e366:	f88c 6001 	strb.w	r6, [ip, #1]
 801e36a:	f88c 4002 	strb.w	r4, [ip, #2]
 801e36e:	f88c 0003 	strb.w	r0, [ip, #3]
 801e372:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e374:	3f01      	subs	r7, #1
 801e376:	4402      	add	r2, r0
 801e378:	9816      	ldr	r0, [sp, #88]	; 0x58
 801e37a:	4403      	add	r3, r0
 801e37c:	e781      	b.n	801e282 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e37e:	b2c4      	uxtb	r4, r0
 801e380:	9404      	str	r4, [sp, #16]
 801e382:	2800      	cmp	r0, #0
 801e384:	d0f5      	beq.n	801e372 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e386:	f06f 0403 	mvn.w	r4, #3
 801e38a:	b2ed      	uxtb	r5, r5
 801e38c:	fb00 fe0e 	mul.w	lr, r0, lr
 801e390:	fb04 f807 	mul.w	r8, r4, r7
 801e394:	9c04      	ldr	r4, [sp, #16]
 801e396:	eb01 0c08 	add.w	ip, r1, r8
 801e39a:	f89c 9003 	ldrb.w	r9, [ip, #3]
 801e39e:	fb04 f609 	mul.w	r6, r4, r9
 801e3a2:	1c74      	adds	r4, r6, #1
 801e3a4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801e3a8:	9c04      	ldr	r4, [sp, #16]
 801e3aa:	1236      	asrs	r6, r6, #8
 801e3ac:	444c      	add	r4, r9
 801e3ae:	1ba4      	subs	r4, r4, r6
 801e3b0:	eba9 0606 	sub.w	r6, r9, r6
 801e3b4:	f811 9008 	ldrb.w	r9, [r1, r8]
 801e3b8:	b2e4      	uxtb	r4, r4
 801e3ba:	fb06 f909 	mul.w	r9, r6, r9
 801e3be:	fb00 9505 	mla	r5, r0, r5, r9
 801e3c2:	fb95 f5f4 	sdiv	r5, r5, r4
 801e3c6:	f801 5008 	strb.w	r5, [r1, r8]
 801e3ca:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801e3ce:	f89c 9002 	ldrb.w	r9, [ip, #2]
 801e3d2:	fb06 ee05 	mla	lr, r6, r5, lr
 801e3d6:	9d07      	ldr	r5, [sp, #28]
 801e3d8:	f88c 4003 	strb.w	r4, [ip, #3]
 801e3dc:	4368      	muls	r0, r5
 801e3de:	fb06 0609 	mla	r6, r6, r9, r0
 801e3e2:	fb9e fef4 	sdiv	lr, lr, r4
 801e3e6:	fb96 f6f4 	sdiv	r6, r6, r4
 801e3ea:	f88c e001 	strb.w	lr, [ip, #1]
 801e3ee:	f88c 6002 	strb.w	r6, [ip, #2]
 801e3f2:	e7be      	b.n	801e372 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801e3f4:	b2e5      	uxtb	r5, r4
 801e3f6:	2c00      	cmp	r4, #0
 801e3f8:	f43f af3a 	beq.w	801e270 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e3fc:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801e400:	b2f6      	uxtb	r6, r6
 801e402:	fb04 fe0e 	mul.w	lr, r4, lr
 801e406:	fb05 f908 	mul.w	r9, r5, r8
 801e40a:	4445      	add	r5, r8
 801e40c:	f109 0701 	add.w	r7, r9, #1
 801e410:	eb07 2719 	add.w	r7, r7, r9, lsr #8
 801e414:	123f      	asrs	r7, r7, #8
 801e416:	1bed      	subs	r5, r5, r7
 801e418:	eba8 0707 	sub.w	r7, r8, r7
 801e41c:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801e420:	b2ed      	uxtb	r5, r5
 801e422:	fb07 f808 	mul.w	r8, r7, r8
 801e426:	f800 5c01 	strb.w	r5, [r0, #-1]
 801e42a:	fb04 8606 	mla	r6, r4, r6, r8
 801e42e:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801e432:	fb96 f6f5 	sdiv	r6, r6, r5
 801e436:	f800 6c04 	strb.w	r6, [r0, #-4]
 801e43a:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 801e43e:	fb07 ee06 	mla	lr, r7, r6, lr
 801e442:	9e04      	ldr	r6, [sp, #16]
 801e444:	4374      	muls	r4, r6
 801e446:	fb07 4708 	mla	r7, r7, r8, r4
 801e44a:	fb9e fef5 	sdiv	lr, lr, r5
 801e44e:	fb97 f7f5 	sdiv	r7, r7, r5
 801e452:	f800 ec03 	strb.w	lr, [r0, #-3]
 801e456:	f800 7c02 	strb.w	r7, [r0, #-2]
 801e45a:	e709      	b.n	801e270 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801e45c:	b009      	add	sp, #36	; 0x24
 801e45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e462 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e466:	b087      	sub	sp, #28
 801e468:	469b      	mov	fp, r3
 801e46a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e46e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801e470:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801e474:	9100      	str	r1, [sp, #0]
 801e476:	9204      	str	r2, [sp, #16]
 801e478:	9305      	str	r3, [sp, #20]
 801e47a:	6842      	ldr	r2, [r0, #4]
 801e47c:	e9dd 3116 	ldrd	r3, r1, [sp, #88]	; 0x58
 801e480:	fb02 3101 	mla	r1, r2, r1, r3
 801e484:	6803      	ldr	r3, [r0, #0]
 801e486:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801e48a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	9301      	str	r3, [sp, #4]
 801e490:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e492:	685b      	ldr	r3, [r3, #4]
 801e494:	9302      	str	r3, [sp, #8]
 801e496:	9b00      	ldr	r3, [sp, #0]
 801e498:	2b00      	cmp	r3, #0
 801e49a:	dc03      	bgt.n	801e4a4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801e49c:	9b04      	ldr	r3, [sp, #16]
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	f340 8156 	ble.w	801e750 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801e4a4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801e4a6:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 801e4aa:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 801e4ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801e4b0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801e4b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801e4b6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801e4ba:	f1bb 0f00 	cmp.w	fp, #0
 801e4be:	dd0f      	ble.n	801e4e0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801e4c0:	1410      	asrs	r0, r2, #16
 801e4c2:	d405      	bmi.n	801e4d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e4c4:	42b0      	cmp	r0, r6
 801e4c6:	da03      	bge.n	801e4d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e4c8:	1418      	asrs	r0, r3, #16
 801e4ca:	d401      	bmi.n	801e4d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801e4cc:	42a8      	cmp	r0, r5
 801e4ce:	db08      	blt.n	801e4e2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801e4d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e4d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e4d6:	3104      	adds	r1, #4
 801e4d8:	4402      	add	r2, r0
 801e4da:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e4dc:	4403      	add	r3, r0
 801e4de:	e7ec      	b.n	801e4ba <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e4e0:	d053      	beq.n	801e58a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801e4e2:	f10b 30ff 	add.w	r0, fp, #4294967295
 801e4e6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e4e8:	fb04 2400 	mla	r4, r4, r0, r2
 801e4ec:	1424      	asrs	r4, r4, #16
 801e4ee:	d442      	bmi.n	801e576 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e4f0:	42b4      	cmp	r4, r6
 801e4f2:	da40      	bge.n	801e576 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e4f4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e4f6:	fb04 3000 	mla	r0, r4, r0, r3
 801e4fa:	1400      	asrs	r0, r0, #16
 801e4fc:	d43b      	bmi.n	801e576 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e4fe:	42a8      	cmp	r0, r5
 801e500:	da39      	bge.n	801e576 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801e502:	1d08      	adds	r0, r1, #4
 801e504:	46d8      	mov	r8, fp
 801e506:	f1b8 0f00 	cmp.w	r8, #0
 801e50a:	dd3a      	ble.n	801e582 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801e50c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801e50e:	141c      	asrs	r4, r3, #16
 801e510:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801e514:	1415      	asrs	r5, r2, #16
 801e516:	fb06 5404 	mla	r4, r6, r4, r5
 801e51a:	9e02      	ldr	r6, [sp, #8]
 801e51c:	9d01      	ldr	r5, [sp, #4]
 801e51e:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
 801e522:	5d34      	ldrb	r4, [r6, r4]
 801e524:	9e05      	ldr	r6, [sp, #20]
 801e526:	ea4f 2e25 	mov.w	lr, r5, asr #8
 801e52a:	ea4f 0ce5 	mov.w	ip, r5, asr #3
 801e52e:	4374      	muls	r4, r6
 801e530:	00ed      	lsls	r5, r5, #3
 801e532:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e536:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e53a:	1c66      	adds	r6, r4, #1
 801e53c:	b2ed      	uxtb	r5, r5
 801e53e:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801e542:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 801e546:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801e54a:	1224      	asrs	r4, r4, #8
 801e54c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e550:	2cff      	cmp	r4, #255	; 0xff
 801e552:	f040 80cb 	bne.w	801e6ec <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801e556:	f800 5c04 	strb.w	r5, [r0, #-4]
 801e55a:	f800 cc03 	strb.w	ip, [r0, #-3]
 801e55e:	f800 ec02 	strb.w	lr, [r0, #-2]
 801e562:	f800 4c01 	strb.w	r4, [r0, #-1]
 801e566:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e568:	3004      	adds	r0, #4
 801e56a:	f108 38ff 	add.w	r8, r8, #4294967295
 801e56e:	4422      	add	r2, r4
 801e570:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e572:	4423      	add	r3, r4
 801e574:	e7c7      	b.n	801e506 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801e576:	f04f 0c00 	mov.w	ip, #0
 801e57a:	eb0b 000c 	add.w	r0, fp, ip
 801e57e:	2800      	cmp	r0, #0
 801e580:	dc41      	bgt.n	801e606 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801e582:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801e586:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e58a:	9b00      	ldr	r3, [sp, #0]
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	f340 80df 	ble.w	801e750 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801e592:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e596:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e598:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e59c:	eeb0 6a62 	vmov.f32	s12, s5
 801e5a0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e5a4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e5a8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e5ac:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e5b0:	eeb0 6a43 	vmov.f32	s12, s6
 801e5b4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e5b8:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e5bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e5c0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e5c4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e5c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e5cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e5d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e5d4:	ee12 2a90 	vmov	r2, s5
 801e5d8:	eef0 2a47 	vmov.f32	s5, s14
 801e5dc:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5e0:	ee13 2a10 	vmov	r2, s6
 801e5e4:	9313      	str	r3, [sp, #76]	; 0x4c
 801e5e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5e8:	eeb0 3a67 	vmov.f32	s6, s15
 801e5ec:	fb92 f3f3 	sdiv	r3, r2, r3
 801e5f0:	9314      	str	r3, [sp, #80]	; 0x50
 801e5f2:	9b00      	ldr	r3, [sp, #0]
 801e5f4:	9a04      	ldr	r2, [sp, #16]
 801e5f6:	3b01      	subs	r3, #1
 801e5f8:	9300      	str	r3, [sp, #0]
 801e5fa:	bf08      	it	eq
 801e5fc:	4693      	moveq	fp, r2
 801e5fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e600:	bf18      	it	ne
 801e602:	469b      	movne	fp, r3
 801e604:	e747      	b.n	801e496 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801e606:	1415      	asrs	r5, r2, #16
 801e608:	d433      	bmi.n	801e672 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e60a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801e60c:	6884      	ldr	r4, [r0, #8]
 801e60e:	42ac      	cmp	r4, r5
 801e610:	dd2f      	ble.n	801e672 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e612:	141e      	asrs	r6, r3, #16
 801e614:	d42d      	bmi.n	801e672 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e616:	68c0      	ldr	r0, [r0, #12]
 801e618:	42b0      	cmp	r0, r6
 801e61a:	dd2a      	ble.n	801e672 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e61c:	b224      	sxth	r4, r4
 801e61e:	9801      	ldr	r0, [sp, #4]
 801e620:	fb06 5504 	mla	r5, r6, r4, r5
 801e624:	f830 4015 	ldrh.w	r4, [r0, r5, lsl #1]
 801e628:	9802      	ldr	r0, [sp, #8]
 801e62a:	ea4f 2e24 	mov.w	lr, r4, asr #8
 801e62e:	5d40      	ldrb	r0, [r0, r5]
 801e630:	10e7      	asrs	r7, r4, #3
 801e632:	9d05      	ldr	r5, [sp, #20]
 801e634:	00e4      	lsls	r4, r4, #3
 801e636:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801e63a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e63e:	4368      	muls	r0, r5
 801e640:	b2e4      	uxtb	r4, r4
 801e642:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801e646:	1c45      	adds	r5, r0, #1
 801e648:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e64c:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e650:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801e654:	9403      	str	r4, [sp, #12]
 801e656:	1200      	asrs	r0, r0, #8
 801e658:	28ff      	cmp	r0, #255	; 0xff
 801e65a:	d111      	bne.n	801e680 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801e65c:	f06f 0403 	mvn.w	r4, #3
 801e660:	fb04 f50c 	mul.w	r5, r4, ip
 801e664:	9c03      	ldr	r4, [sp, #12]
 801e666:	554c      	strb	r4, [r1, r5]
 801e668:	440d      	add	r5, r1
 801e66a:	706f      	strb	r7, [r5, #1]
 801e66c:	f885 e002 	strb.w	lr, [r5, #2]
 801e670:	70e8      	strb	r0, [r5, #3]
 801e672:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801e674:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e678:	4402      	add	r2, r0
 801e67a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801e67c:	4403      	add	r3, r0
 801e67e:	e77c      	b.n	801e57a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e680:	b2c5      	uxtb	r5, r0
 801e682:	2800      	cmp	r0, #0
 801e684:	d0f5      	beq.n	801e672 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e686:	f06f 0403 	mvn.w	r4, #3
 801e68a:	4347      	muls	r7, r0
 801e68c:	fb04 f90c 	mul.w	r9, r4, ip
 801e690:	eb01 0809 	add.w	r8, r1, r9
 801e694:	f898 a003 	ldrb.w	sl, [r8, #3]
 801e698:	fb05 f60a 	mul.w	r6, r5, sl
 801e69c:	4455      	add	r5, sl
 801e69e:	1c74      	adds	r4, r6, #1
 801e6a0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801e6a4:	9c03      	ldr	r4, [sp, #12]
 801e6a6:	1236      	asrs	r6, r6, #8
 801e6a8:	4344      	muls	r4, r0
 801e6aa:	fb00 f00e 	mul.w	r0, r0, lr
 801e6ae:	1bad      	subs	r5, r5, r6
 801e6b0:	ebaa 0606 	sub.w	r6, sl, r6
 801e6b4:	f811 a009 	ldrb.w	sl, [r1, r9]
 801e6b8:	b2ed      	uxtb	r5, r5
 801e6ba:	fb06 440a 	mla	r4, r6, sl, r4
 801e6be:	fb94 f4f5 	sdiv	r4, r4, r5
 801e6c2:	f801 4009 	strb.w	r4, [r1, r9]
 801e6c6:	f898 4001 	ldrb.w	r4, [r8, #1]
 801e6ca:	f898 a002 	ldrb.w	sl, [r8, #2]
 801e6ce:	fb06 7704 	mla	r7, r6, r4, r7
 801e6d2:	fb06 060a 	mla	r6, r6, sl, r0
 801e6d6:	f888 5003 	strb.w	r5, [r8, #3]
 801e6da:	fb97 f7f5 	sdiv	r7, r7, r5
 801e6de:	fb96 f6f5 	sdiv	r6, r6, r5
 801e6e2:	f888 7001 	strb.w	r7, [r8, #1]
 801e6e6:	f888 6002 	strb.w	r6, [r8, #2]
 801e6ea:	e7c2      	b.n	801e672 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801e6ec:	b2e6      	uxtb	r6, r4
 801e6ee:	2c00      	cmp	r4, #0
 801e6f0:	f43f af39 	beq.w	801e566 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e6f4:	f810 9c01 	ldrb.w	r9, [r0, #-1]
 801e6f8:	4365      	muls	r5, r4
 801e6fa:	fb04 fc0c 	mul.w	ip, r4, ip
 801e6fe:	fb06 fa09 	mul.w	sl, r6, r9
 801e702:	444e      	add	r6, r9
 801e704:	fb04 f40e 	mul.w	r4, r4, lr
 801e708:	f10a 0701 	add.w	r7, sl, #1
 801e70c:	eb07 271a 	add.w	r7, r7, sl, lsr #8
 801e710:	123f      	asrs	r7, r7, #8
 801e712:	1bf6      	subs	r6, r6, r7
 801e714:	eba9 0707 	sub.w	r7, r9, r7
 801e718:	f810 9c04 	ldrb.w	r9, [r0, #-4]
 801e71c:	b2f6      	uxtb	r6, r6
 801e71e:	fb07 5509 	mla	r5, r7, r9, r5
 801e722:	f810 9c02 	ldrb.w	r9, [r0, #-2]
 801e726:	f800 6c01 	strb.w	r6, [r0, #-1]
 801e72a:	fb95 f5f6 	sdiv	r5, r5, r6
 801e72e:	f800 5c04 	strb.w	r5, [r0, #-4]
 801e732:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 801e736:	fb07 cc05 	mla	ip, r7, r5, ip
 801e73a:	fb07 4709 	mla	r7, r7, r9, r4
 801e73e:	fb9c fcf6 	sdiv	ip, ip, r6
 801e742:	fb97 f7f6 	sdiv	r7, r7, r6
 801e746:	f800 cc03 	strb.w	ip, [r0, #-3]
 801e74a:	f800 7c02 	strb.w	r7, [r0, #-2]
 801e74e:	e70a      	b.n	801e566 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e750:	b007      	add	sp, #28
 801e752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e756 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e756:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e75a:	b087      	sub	sp, #28
 801e75c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e760:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801e762:	9101      	str	r1, [sp, #4]
 801e764:	9205      	str	r2, [sp, #20]
 801e766:	6861      	ldr	r1, [r4, #4]
 801e768:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801e76c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801e770:	fb01 2000 	mla	r0, r1, r0, r2
 801e774:	6822      	ldr	r2, [r4, #0]
 801e776:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801e77a:	f8db 2000 	ldr.w	r2, [fp]
 801e77e:	9202      	str	r2, [sp, #8]
 801e780:	f8db 2004 	ldr.w	r2, [fp, #4]
 801e784:	9203      	str	r2, [sp, #12]
 801e786:	9a01      	ldr	r2, [sp, #4]
 801e788:	2a00      	cmp	r2, #0
 801e78a:	dc03      	bgt.n	801e794 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e78c:	9a05      	ldr	r2, [sp, #20]
 801e78e:	2a00      	cmp	r2, #0
 801e790:	f340 8151 	ble.w	801ea36 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e794:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e796:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801e79a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801e79e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801e7a0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801e7a4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801e7a8:	2b00      	cmp	r3, #0
 801e7aa:	dd0e      	ble.n	801e7ca <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801e7ac:	140c      	asrs	r4, r1, #16
 801e7ae:	d405      	bmi.n	801e7bc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e7b0:	42bc      	cmp	r4, r7
 801e7b2:	da03      	bge.n	801e7bc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e7b4:	1414      	asrs	r4, r2, #16
 801e7b6:	d401      	bmi.n	801e7bc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801e7b8:	42b4      	cmp	r4, r6
 801e7ba:	db07      	blt.n	801e7cc <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e7bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e7be:	3b01      	subs	r3, #1
 801e7c0:	3004      	adds	r0, #4
 801e7c2:	4421      	add	r1, r4
 801e7c4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e7c6:	4422      	add	r2, r4
 801e7c8:	e7ee      	b.n	801e7a8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801e7ca:	d049      	beq.n	801e860 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801e7cc:	1e5c      	subs	r4, r3, #1
 801e7ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e7d0:	fb05 1504 	mla	r5, r5, r4, r1
 801e7d4:	142d      	asrs	r5, r5, #16
 801e7d6:	d43b      	bmi.n	801e850 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e7d8:	42bd      	cmp	r5, r7
 801e7da:	da39      	bge.n	801e850 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e7dc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e7de:	fb05 2404 	mla	r4, r5, r4, r2
 801e7e2:	1424      	asrs	r4, r4, #16
 801e7e4:	d434      	bmi.n	801e850 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e7e6:	42b4      	cmp	r4, r6
 801e7e8:	da32      	bge.n	801e850 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801e7ea:	1d04      	adds	r4, r0, #4
 801e7ec:	4699      	mov	r9, r3
 801e7ee:	f1b9 0f00 	cmp.w	r9, #0
 801e7f2:	dd31      	ble.n	801e858 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801e7f4:	1415      	asrs	r5, r2, #16
 801e7f6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801e7fa:	140e      	asrs	r6, r1, #16
 801e7fc:	fb07 6605 	mla	r6, r7, r5, r6
 801e800:	9d02      	ldr	r5, [sp, #8]
 801e802:	9f03      	ldr	r7, [sp, #12]
 801e804:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801e808:	5dbe      	ldrb	r6, [r7, r6]
 801e80a:	ea4f 2825 	mov.w	r8, r5, asr #8
 801e80e:	10ef      	asrs	r7, r5, #3
 801e810:	2eff      	cmp	r6, #255	; 0xff
 801e812:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801e816:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e81a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e81e:	b2ed      	uxtb	r5, r5
 801e820:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801e824:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e828:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e82c:	f040 80cd 	bne.w	801e9ca <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801e830:	f804 5c04 	strb.w	r5, [r4, #-4]
 801e834:	f804 7c03 	strb.w	r7, [r4, #-3]
 801e838:	f804 8c02 	strb.w	r8, [r4, #-2]
 801e83c:	f804 6c01 	strb.w	r6, [r4, #-1]
 801e840:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e842:	3404      	adds	r4, #4
 801e844:	f109 39ff 	add.w	r9, r9, #4294967295
 801e848:	4429      	add	r1, r5
 801e84a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e84c:	442a      	add	r2, r5
 801e84e:	e7ce      	b.n	801e7ee <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801e850:	2700      	movs	r7, #0
 801e852:	19dc      	adds	r4, r3, r7
 801e854:	2c00      	cmp	r4, #0
 801e856:	dc3f      	bgt.n	801e8d8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x182>
 801e858:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e85c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801e860:	9b01      	ldr	r3, [sp, #4]
 801e862:	2b00      	cmp	r3, #0
 801e864:	f340 80e7 	ble.w	801ea36 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e868:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e86c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e86e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e872:	eeb0 6a62 	vmov.f32	s12, s5
 801e876:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e87a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e87e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e882:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e886:	eeb0 6a43 	vmov.f32	s12, s6
 801e88a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e88e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e892:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e896:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e89a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e89e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8a6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e8aa:	ee12 2a90 	vmov	r2, s5
 801e8ae:	eef0 2a47 	vmov.f32	s5, s14
 801e8b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8b6:	ee13 2a10 	vmov	r2, s6
 801e8ba:	9313      	str	r3, [sp, #76]	; 0x4c
 801e8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8be:	eeb0 3a67 	vmov.f32	s6, s15
 801e8c2:	fb92 f3f3 	sdiv	r3, r2, r3
 801e8c6:	9314      	str	r3, [sp, #80]	; 0x50
 801e8c8:	9b01      	ldr	r3, [sp, #4]
 801e8ca:	9a05      	ldr	r2, [sp, #20]
 801e8cc:	3b01      	subs	r3, #1
 801e8ce:	9301      	str	r3, [sp, #4]
 801e8d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8d2:	bf08      	it	eq
 801e8d4:	4613      	moveq	r3, r2
 801e8d6:	e756      	b.n	801e786 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801e8d8:	140e      	asrs	r6, r1, #16
 801e8da:	d434      	bmi.n	801e946 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e8dc:	f8db 5008 	ldr.w	r5, [fp, #8]
 801e8e0:	42b5      	cmp	r5, r6
 801e8e2:	dd30      	ble.n	801e946 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e8e4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801e8e8:	d42d      	bmi.n	801e946 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e8ea:	f8db 400c 	ldr.w	r4, [fp, #12]
 801e8ee:	4564      	cmp	r4, ip
 801e8f0:	dd29      	ble.n	801e946 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e8f2:	b22d      	sxth	r5, r5
 801e8f4:	9c02      	ldr	r4, [sp, #8]
 801e8f6:	fb0c 6505 	mla	r5, ip, r5, r6
 801e8fa:	9e03      	ldr	r6, [sp, #12]
 801e8fc:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801e900:	5d75      	ldrb	r5, [r6, r5]
 801e902:	ea4f 2824 	mov.w	r8, r4, asr #8
 801e906:	2dff      	cmp	r5, #255	; 0xff
 801e908:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801e90c:	ea48 1658 	orr.w	r6, r8, r8, lsr #5
 801e910:	9604      	str	r6, [sp, #16]
 801e912:	ea4f 06e4 	mov.w	r6, r4, asr #3
 801e916:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801e91a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801e91e:	b2e4      	uxtb	r4, r4
 801e920:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801e924:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801e928:	d113      	bne.n	801e952 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801e92a:	f06f 0c03 	mvn.w	ip, #3
 801e92e:	fb0c fc07 	mul.w	ip, ip, r7
 801e932:	f800 400c 	strb.w	r4, [r0, ip]
 801e936:	4484      	add	ip, r0
 801e938:	9c04      	ldr	r4, [sp, #16]
 801e93a:	f88c 6001 	strb.w	r6, [ip, #1]
 801e93e:	f88c 4002 	strb.w	r4, [ip, #2]
 801e942:	f88c 5003 	strb.w	r5, [ip, #3]
 801e946:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801e948:	3f01      	subs	r7, #1
 801e94a:	4421      	add	r1, r4
 801e94c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801e94e:	4422      	add	r2, r4
 801e950:	e77f      	b.n	801e852 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801e952:	2d00      	cmp	r5, #0
 801e954:	d0f7      	beq.n	801e946 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e956:	fb14 f405 	smulbb	r4, r4, r5
 801e95a:	f06f 0c03 	mvn.w	ip, #3
 801e95e:	fb15 f606 	smulbb	r6, r5, r6
 801e962:	fb0c fa07 	mul.w	sl, ip, r7
 801e966:	eb00 090a 	add.w	r9, r0, sl
 801e96a:	f899 8003 	ldrb.w	r8, [r9, #3]
 801e96e:	fb05 fc08 	mul.w	ip, r5, r8
 801e972:	f10c 0e01 	add.w	lr, ip, #1
 801e976:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e97a:	eb05 0c08 	add.w	ip, r5, r8
 801e97e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e982:	ebac 0c0e 	sub.w	ip, ip, lr
 801e986:	eba8 0e0e 	sub.w	lr, r8, lr
 801e98a:	f810 800a 	ldrb.w	r8, [r0, sl]
 801e98e:	fa5f fc8c 	uxtb.w	ip, ip
 801e992:	fb0e 4408 	mla	r4, lr, r8, r4
 801e996:	fb94 f4fc 	sdiv	r4, r4, ip
 801e99a:	f800 400a 	strb.w	r4, [r0, sl]
 801e99e:	f899 4001 	ldrb.w	r4, [r9, #1]
 801e9a2:	f889 c003 	strb.w	ip, [r9, #3]
 801e9a6:	fb0e 6604 	mla	r6, lr, r4, r6
 801e9aa:	f899 4002 	ldrb.w	r4, [r9, #2]
 801e9ae:	fb96 f6fc 	sdiv	r6, r6, ip
 801e9b2:	f889 6001 	strb.w	r6, [r9, #1]
 801e9b6:	9e04      	ldr	r6, [sp, #16]
 801e9b8:	fb15 f506 	smulbb	r5, r5, r6
 801e9bc:	fb0e 5504 	mla	r5, lr, r4, r5
 801e9c0:	fb95 f5fc 	sdiv	r5, r5, ip
 801e9c4:	f889 5002 	strb.w	r5, [r9, #2]
 801e9c8:	e7bd      	b.n	801e946 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801e9ca:	2e00      	cmp	r6, #0
 801e9cc:	f43f af38 	beq.w	801e840 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801e9d0:	f814 ac01 	ldrb.w	sl, [r4, #-1]
 801e9d4:	fb15 f506 	smulbb	r5, r5, r6
 801e9d8:	fb16 f707 	smulbb	r7, r6, r7
 801e9dc:	fb06 fc0a 	mul.w	ip, r6, sl
 801e9e0:	f10c 0e01 	add.w	lr, ip, #1
 801e9e4:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801e9e8:	eb06 0c0a 	add.w	ip, r6, sl
 801e9ec:	fb16 f608 	smulbb	r6, r6, r8
 801e9f0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e9f4:	ebac 0c0e 	sub.w	ip, ip, lr
 801e9f8:	ebaa 0e0e 	sub.w	lr, sl, lr
 801e9fc:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 801ea00:	fa5f fc8c 	uxtb.w	ip, ip
 801ea04:	fb0e 550a 	mla	r5, lr, sl, r5
 801ea08:	f804 cc01 	strb.w	ip, [r4, #-1]
 801ea0c:	fb95 f5fc 	sdiv	r5, r5, ip
 801ea10:	f804 5c04 	strb.w	r5, [r4, #-4]
 801ea14:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 801ea18:	fb0e 7705 	mla	r7, lr, r5, r7
 801ea1c:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 801ea20:	fb0e 6605 	mla	r6, lr, r5, r6
 801ea24:	fb97 f7fc 	sdiv	r7, r7, ip
 801ea28:	fb96 f6fc 	sdiv	r6, r6, ip
 801ea2c:	f804 7c03 	strb.w	r7, [r4, #-3]
 801ea30:	f804 6c02 	strb.w	r6, [r4, #-2]
 801ea34:	e704      	b.n	801e840 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801ea36:	b007      	add	sp, #28
 801ea38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea3c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea40:	b085      	sub	sp, #20
 801ea42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea46:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ea48:	9101      	str	r1, [sp, #4]
 801ea4a:	6868      	ldr	r0, [r5, #4]
 801ea4c:	9203      	str	r2, [sp, #12]
 801ea4e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801ea52:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801ea56:	fb00 1404 	mla	r4, r0, r4, r1
 801ea5a:	6829      	ldr	r1, [r5, #0]
 801ea5c:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ea60:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ea62:	6809      	ldr	r1, [r1, #0]
 801ea64:	9102      	str	r1, [sp, #8]
 801ea66:	9901      	ldr	r1, [sp, #4]
 801ea68:	2900      	cmp	r1, #0
 801ea6a:	dc03      	bgt.n	801ea74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801ea6c:	9903      	ldr	r1, [sp, #12]
 801ea6e:	2900      	cmp	r1, #0
 801ea70:	f340 8150 	ble.w	801ed14 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ea74:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ea76:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801ea7a:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801ea7e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ea80:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801ea84:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ea86:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	dd0e      	ble.n	801eaac <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ea8e:	1405      	asrs	r5, r0, #16
 801ea90:	d405      	bmi.n	801ea9e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea92:	4565      	cmp	r5, ip
 801ea94:	da03      	bge.n	801ea9e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea96:	140d      	asrs	r5, r1, #16
 801ea98:	d401      	bmi.n	801ea9e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ea9a:	42bd      	cmp	r5, r7
 801ea9c:	db07      	blt.n	801eaae <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ea9e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801eaa0:	3b01      	subs	r3, #1
 801eaa2:	3404      	adds	r4, #4
 801eaa4:	4428      	add	r0, r5
 801eaa6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801eaa8:	4429      	add	r1, r5
 801eaaa:	e7ee      	b.n	801ea8a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801eaac:	d04c      	beq.n	801eb48 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801eaae:	1e5d      	subs	r5, r3, #1
 801eab0:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801eab2:	fb06 0605 	mla	r6, r6, r5, r0
 801eab6:	1436      	asrs	r6, r6, #16
 801eab8:	d43c      	bmi.n	801eb34 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801eaba:	4566      	cmp	r6, ip
 801eabc:	da3a      	bge.n	801eb34 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801eabe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801eac0:	fb06 1505 	mla	r5, r6, r5, r1
 801eac4:	142d      	asrs	r5, r5, #16
 801eac6:	d435      	bmi.n	801eb34 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801eac8:	42bd      	cmp	r5, r7
 801eaca:	da33      	bge.n	801eb34 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801eacc:	1d25      	adds	r5, r4, #4
 801eace:	4699      	mov	r9, r3
 801ead0:	f1b9 0f00 	cmp.w	r9, #0
 801ead4:	dd34      	ble.n	801eb40 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801ead6:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801ead8:	140e      	asrs	r6, r1, #16
 801eada:	2aff      	cmp	r2, #255	; 0xff
 801eadc:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801eae0:	ea4f 4720 	mov.w	r7, r0, asr #16
 801eae4:	fb0c 7606 	mla	r6, ip, r6, r7
 801eae8:	9f02      	ldr	r7, [sp, #8]
 801eaea:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801eaee:	ea4f 2726 	mov.w	r7, r6, asr #8
 801eaf2:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801eaf6:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801eafa:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801eafe:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801eb02:	b2f6      	uxtb	r6, r6
 801eb04:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801eb08:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801eb0c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801eb10:	f040 80ca 	bne.w	801eca8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801eb14:	f805 6c04 	strb.w	r6, [r5, #-4]
 801eb18:	f805 cc03 	strb.w	ip, [r5, #-3]
 801eb1c:	f805 7c02 	strb.w	r7, [r5, #-2]
 801eb20:	f805 2c01 	strb.w	r2, [r5, #-1]
 801eb24:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801eb26:	3504      	adds	r5, #4
 801eb28:	f109 39ff 	add.w	r9, r9, #4294967295
 801eb2c:	4430      	add	r0, r6
 801eb2e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801eb30:	4431      	add	r1, r6
 801eb32:	e7cd      	b.n	801ead0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801eb34:	f04f 0c00 	mov.w	ip, #0
 801eb38:	eb03 050c 	add.w	r5, r3, ip
 801eb3c:	2d00      	cmp	r5, #0
 801eb3e:	dc3f      	bgt.n	801ebc0 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801eb40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb44:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801eb48:	9b01      	ldr	r3, [sp, #4]
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	f340 80e2 	ble.w	801ed14 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801eb50:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb54:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb56:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb5a:	eeb0 6a62 	vmov.f32	s12, s5
 801eb5e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb62:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb66:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb6a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eb6e:	eeb0 6a43 	vmov.f32	s12, s6
 801eb72:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb76:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eb7a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb7e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb82:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb86:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb8a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb8e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb92:	ee12 1a90 	vmov	r1, s5
 801eb96:	eef0 2a47 	vmov.f32	s5, s14
 801eb9a:	fb91 f3f3 	sdiv	r3, r1, r3
 801eb9e:	ee13 1a10 	vmov	r1, s6
 801eba2:	9311      	str	r3, [sp, #68]	; 0x44
 801eba4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eba6:	eeb0 3a67 	vmov.f32	s6, s15
 801ebaa:	fb91 f3f3 	sdiv	r3, r1, r3
 801ebae:	9312      	str	r3, [sp, #72]	; 0x48
 801ebb0:	9b01      	ldr	r3, [sp, #4]
 801ebb2:	9903      	ldr	r1, [sp, #12]
 801ebb4:	3b01      	subs	r3, #1
 801ebb6:	9301      	str	r3, [sp, #4]
 801ebb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ebba:	bf08      	it	eq
 801ebbc:	460b      	moveq	r3, r1
 801ebbe:	e752      	b.n	801ea66 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ebc0:	1407      	asrs	r7, r0, #16
 801ebc2:	d42f      	bmi.n	801ec24 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebc4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ebc6:	68ae      	ldr	r6, [r5, #8]
 801ebc8:	42be      	cmp	r6, r7
 801ebca:	dd2b      	ble.n	801ec24 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebcc:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801ebd0:	d428      	bmi.n	801ec24 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebd2:	68ed      	ldr	r5, [r5, #12]
 801ebd4:	4575      	cmp	r5, lr
 801ebd6:	dd25      	ble.n	801ec24 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ebd8:	b236      	sxth	r6, r6
 801ebda:	9d02      	ldr	r5, [sp, #8]
 801ebdc:	2aff      	cmp	r2, #255	; 0xff
 801ebde:	fb0e 7606 	mla	r6, lr, r6, r7
 801ebe2:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801ebe6:	ea4f 2625 	mov.w	r6, r5, asr #8
 801ebea:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801ebee:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801ebf2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ebf6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ebfa:	b2ed      	uxtb	r5, r5
 801ebfc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ec00:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801ec04:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801ec08:	d113      	bne.n	801ec32 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801ec0a:	f06f 0e03 	mvn.w	lr, #3
 801ec0e:	fb0e fe0c 	mul.w	lr, lr, ip
 801ec12:	f804 500e 	strb.w	r5, [r4, lr]
 801ec16:	44a6      	add	lr, r4
 801ec18:	f88e 7001 	strb.w	r7, [lr, #1]
 801ec1c:	f88e 6002 	strb.w	r6, [lr, #2]
 801ec20:	f88e 2003 	strb.w	r2, [lr, #3]
 801ec24:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ec26:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ec2a:	4428      	add	r0, r5
 801ec2c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ec2e:	4429      	add	r1, r5
 801ec30:	e782      	b.n	801eb38 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801ec32:	2a00      	cmp	r2, #0
 801ec34:	d0f6      	beq.n	801ec24 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801ec36:	fb15 f502 	smulbb	r5, r5, r2
 801ec3a:	f06f 0e03 	mvn.w	lr, #3
 801ec3e:	fb12 f707 	smulbb	r7, r2, r7
 801ec42:	fb12 f606 	smulbb	r6, r2, r6
 801ec46:	fb0e fa0c 	mul.w	sl, lr, ip
 801ec4a:	eb04 090a 	add.w	r9, r4, sl
 801ec4e:	f899 b003 	ldrb.w	fp, [r9, #3]
 801ec52:	fb02 fe0b 	mul.w	lr, r2, fp
 801ec56:	f10e 0801 	add.w	r8, lr, #1
 801ec5a:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801ec5e:	eb02 0e0b 	add.w	lr, r2, fp
 801ec62:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ec66:	ebae 0e08 	sub.w	lr, lr, r8
 801ec6a:	ebab 0808 	sub.w	r8, fp, r8
 801ec6e:	f814 b00a 	ldrb.w	fp, [r4, sl]
 801ec72:	fa5f fe8e 	uxtb.w	lr, lr
 801ec76:	fb08 550b 	mla	r5, r8, fp, r5
 801ec7a:	fb95 f5fe 	sdiv	r5, r5, lr
 801ec7e:	f804 500a 	strb.w	r5, [r4, sl]
 801ec82:	f899 5001 	ldrb.w	r5, [r9, #1]
 801ec86:	f889 e003 	strb.w	lr, [r9, #3]
 801ec8a:	fb08 7705 	mla	r7, r8, r5, r7
 801ec8e:	f899 5002 	ldrb.w	r5, [r9, #2]
 801ec92:	fb08 6605 	mla	r6, r8, r5, r6
 801ec96:	fb97 f7fe 	sdiv	r7, r7, lr
 801ec9a:	fb96 f6fe 	sdiv	r6, r6, lr
 801ec9e:	f889 7001 	strb.w	r7, [r9, #1]
 801eca2:	f889 6002 	strb.w	r6, [r9, #2]
 801eca6:	e7bd      	b.n	801ec24 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801eca8:	2a00      	cmp	r2, #0
 801ecaa:	f43f af3b 	beq.w	801eb24 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801ecae:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801ecb2:	fb16 f602 	smulbb	r6, r6, r2
 801ecb6:	fb12 fc0c 	smulbb	ip, r2, ip
 801ecba:	fb12 f707 	smulbb	r7, r2, r7
 801ecbe:	fb02 fe0a 	mul.w	lr, r2, sl
 801ecc2:	f10e 0801 	add.w	r8, lr, #1
 801ecc6:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801ecca:	eb02 0e0a 	add.w	lr, r2, sl
 801ecce:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ecd2:	ebae 0e08 	sub.w	lr, lr, r8
 801ecd6:	ebaa 0808 	sub.w	r8, sl, r8
 801ecda:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801ecde:	fa5f fe8e 	uxtb.w	lr, lr
 801ece2:	fb08 660a 	mla	r6, r8, sl, r6
 801ece6:	f805 ec01 	strb.w	lr, [r5, #-1]
 801ecea:	fb96 f6fe 	sdiv	r6, r6, lr
 801ecee:	f805 6c04 	strb.w	r6, [r5, #-4]
 801ecf2:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801ecf6:	fb08 cc06 	mla	ip, r8, r6, ip
 801ecfa:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801ecfe:	fb08 7706 	mla	r7, r8, r6, r7
 801ed02:	fb9c fcfe 	sdiv	ip, ip, lr
 801ed06:	fb97 f7fe 	sdiv	r7, r7, lr
 801ed0a:	f805 cc03 	strb.w	ip, [r5, #-3]
 801ed0e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ed12:	e707      	b.n	801eb24 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801ed14:	b005      	add	sp, #20
 801ed16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ed1a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ed1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed1e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ed20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ed24:	9201      	str	r2, [sp, #4]
 801ed26:	6860      	ldr	r0, [r4, #4]
 801ed28:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801ed2a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801ed2e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801ed32:	fb00 2505 	mla	r5, r0, r5, r2
 801ed36:	6822      	ldr	r2, [r4, #0]
 801ed38:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801ed3c:	683a      	ldr	r2, [r7, #0]
 801ed3e:	9200      	str	r2, [sp, #0]
 801ed40:	2900      	cmp	r1, #0
 801ed42:	dc03      	bgt.n	801ed4c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801ed44:	9a01      	ldr	r2, [sp, #4]
 801ed46:	2a00      	cmp	r2, #0
 801ed48:	f340 80be 	ble.w	801eec8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801ed4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ed4e:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801ed52:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ed56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ed58:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801ed5c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ed60:	2b00      	cmp	r3, #0
 801ed62:	dd0c      	ble.n	801ed7e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801ed64:	1404      	asrs	r4, r0, #16
 801ed66:	d405      	bmi.n	801ed74 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ed68:	454c      	cmp	r4, r9
 801ed6a:	da03      	bge.n	801ed74 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ed6c:	1414      	asrs	r4, r2, #16
 801ed6e:	d401      	bmi.n	801ed74 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801ed70:	4564      	cmp	r4, ip
 801ed72:	db05      	blt.n	801ed80 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801ed74:	4440      	add	r0, r8
 801ed76:	4472      	add	r2, lr
 801ed78:	3b01      	subs	r3, #1
 801ed7a:	3504      	adds	r5, #4
 801ed7c:	e7f0      	b.n	801ed60 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801ed7e:	d00e      	beq.n	801ed9e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ed80:	1e5c      	subs	r4, r3, #1
 801ed82:	fb08 0604 	mla	r6, r8, r4, r0
 801ed86:	1436      	asrs	r6, r6, #16
 801ed88:	d53e      	bpl.n	801ee08 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801ed8a:	4699      	mov	r9, r3
 801ed8c:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801ed90:	f1b9 0f00 	cmp.w	r9, #0
 801ed94:	dc68      	bgt.n	801ee68 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ed96:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed9a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801ed9e:	2900      	cmp	r1, #0
 801eda0:	f340 8092 	ble.w	801eec8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801eda4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801edaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801edae:	3901      	subs	r1, #1
 801edb0:	eeb0 6a62 	vmov.f32	s12, s5
 801edb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801edb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801edbc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edc0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801edc4:	eeb0 6a43 	vmov.f32	s12, s6
 801edc8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801edcc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801edd0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801edd4:	ee61 7a27 	vmul.f32	s15, s2, s15
 801edd8:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eddc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ede0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ede4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ede8:	ee12 2a90 	vmov	r2, s5
 801edec:	eef0 2a47 	vmov.f32	s5, s14
 801edf0:	fb92 f8f3 	sdiv	r8, r2, r3
 801edf4:	ee13 2a10 	vmov	r2, s6
 801edf8:	eeb0 3a67 	vmov.f32	s6, s15
 801edfc:	fb92 fef3 	sdiv	lr, r2, r3
 801ee00:	9a01      	ldr	r2, [sp, #4]
 801ee02:	bf08      	it	eq
 801ee04:	4613      	moveq	r3, r2
 801ee06:	e79b      	b.n	801ed40 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 801ee08:	454e      	cmp	r6, r9
 801ee0a:	dabe      	bge.n	801ed8a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee0c:	fb0e 2404 	mla	r4, lr, r4, r2
 801ee10:	1424      	asrs	r4, r4, #16
 801ee12:	d4ba      	bmi.n	801ed8a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee14:	4564      	cmp	r4, ip
 801ee16:	dab8      	bge.n	801ed8a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ee18:	4699      	mov	r9, r3
 801ee1a:	46aa      	mov	sl, r5
 801ee1c:	f1b9 0f00 	cmp.w	r9, #0
 801ee20:	ddb9      	ble.n	801ed96 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801ee22:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801ee26:	1406      	asrs	r6, r0, #16
 801ee28:	1414      	asrs	r4, r2, #16
 801ee2a:	4440      	add	r0, r8
 801ee2c:	4472      	add	r2, lr
 801ee2e:	f109 39ff 	add.w	r9, r9, #4294967295
 801ee32:	fb0c 6404 	mla	r4, ip, r4, r6
 801ee36:	9e00      	ldr	r6, [sp, #0]
 801ee38:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801ee3c:	10f4      	asrs	r4, r6, #3
 801ee3e:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801ee42:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ee46:	00f6      	lsls	r6, r6, #3
 801ee48:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ee4c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801ee50:	b2f6      	uxtb	r6, r6
 801ee52:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801ee56:	0224      	lsls	r4, r4, #8
 801ee58:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ee5c:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801ee60:	4334      	orrs	r4, r6
 801ee62:	f84a 4b04 	str.w	r4, [sl], #4
 801ee66:	e7d9      	b.n	801ee1c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801ee68:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801ee6c:	d427      	bmi.n	801eebe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ee6e:	68be      	ldr	r6, [r7, #8]
 801ee70:	4566      	cmp	r6, ip
 801ee72:	dd24      	ble.n	801eebe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ee74:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ee78:	d421      	bmi.n	801eebe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ee7a:	68fc      	ldr	r4, [r7, #12]
 801ee7c:	455c      	cmp	r4, fp
 801ee7e:	dd1e      	ble.n	801eebe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801ee80:	b236      	sxth	r6, r6
 801ee82:	9c00      	ldr	r4, [sp, #0]
 801ee84:	fb0b c606 	mla	r6, fp, r6, ip
 801ee88:	f06f 0b03 	mvn.w	fp, #3
 801ee8c:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
 801ee90:	fb0b fb09 	mul.w	fp, fp, r9
 801ee94:	10f4      	asrs	r4, r6, #3
 801ee96:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801ee9a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ee9e:	00f6      	lsls	r6, r6, #3
 801eea0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801eea4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801eea8:	b2f6      	uxtb	r6, r6
 801eeaa:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801eeae:	0224      	lsls	r4, r4, #8
 801eeb0:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801eeb4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801eeb8:	4334      	orrs	r4, r6
 801eeba:	f84a 400b 	str.w	r4, [sl, fp]
 801eebe:	4440      	add	r0, r8
 801eec0:	4472      	add	r2, lr
 801eec2:	f109 39ff 	add.w	r9, r9, #4294967295
 801eec6:	e763      	b.n	801ed90 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801eec8:	b003      	add	sp, #12
 801eeca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801eece <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eece:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eed2:	b085      	sub	sp, #20
 801eed4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801eed8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801eeda:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801eede:	6868      	ldr	r0, [r5, #4]
 801eee0:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801eee4:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801eee8:	fb00 1404 	mla	r4, r0, r4, r1
 801eeec:	6829      	ldr	r1, [r5, #0]
 801eeee:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801eef2:	9916      	ldr	r1, [sp, #88]	; 0x58
 801eef4:	6809      	ldr	r1, [r1, #0]
 801eef6:	9101      	str	r1, [sp, #4]
 801eef8:	9902      	ldr	r1, [sp, #8]
 801eefa:	2900      	cmp	r1, #0
 801eefc:	dc03      	bgt.n	801ef06 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801eefe:	9903      	ldr	r1, [sp, #12]
 801ef00:	2900      	cmp	r1, #0
 801ef02:	f340 8137 	ble.w	801f174 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ef06:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ef08:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801ef0c:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801ef10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ef12:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801ef16:	9910      	ldr	r1, [sp, #64]	; 0x40
 801ef18:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801ef1c:	2b00      	cmp	r3, #0
 801ef1e:	dd0e      	ble.n	801ef3e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801ef20:	1405      	asrs	r5, r0, #16
 801ef22:	d405      	bmi.n	801ef30 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef24:	4565      	cmp	r5, ip
 801ef26:	da03      	bge.n	801ef30 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef28:	140d      	asrs	r5, r1, #16
 801ef2a:	d401      	bmi.n	801ef30 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef2c:	42bd      	cmp	r5, r7
 801ef2e:	db07      	blt.n	801ef40 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801ef30:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ef32:	3b01      	subs	r3, #1
 801ef34:	3404      	adds	r4, #4
 801ef36:	4428      	add	r0, r5
 801ef38:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ef3a:	4429      	add	r1, r5
 801ef3c:	e7ee      	b.n	801ef1c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ef3e:	d041      	beq.n	801efc4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801ef40:	1e5d      	subs	r5, r3, #1
 801ef42:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ef44:	fb06 0605 	mla	r6, r6, r5, r0
 801ef48:	1436      	asrs	r6, r6, #16
 801ef4a:	d433      	bmi.n	801efb4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ef4c:	4566      	cmp	r6, ip
 801ef4e:	da31      	bge.n	801efb4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ef50:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ef52:	fb06 1505 	mla	r5, r6, r5, r1
 801ef56:	142d      	asrs	r5, r5, #16
 801ef58:	d42c      	bmi.n	801efb4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ef5a:	42bd      	cmp	r5, r7
 801ef5c:	da2a      	bge.n	801efb4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ef5e:	1d25      	adds	r5, r4, #4
 801ef60:	469a      	mov	sl, r3
 801ef62:	f1ba 0f00 	cmp.w	sl, #0
 801ef66:	dd29      	ble.n	801efbc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801ef68:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801ef6a:	140e      	asrs	r6, r1, #16
 801ef6c:	2aff      	cmp	r2, #255	; 0xff
 801ef6e:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801ef72:	ea4f 4720 	mov.w	r7, r0, asr #16
 801ef76:	fb0c 7606 	mla	r6, ip, r6, r7
 801ef7a:	9f01      	ldr	r7, [sp, #4]
 801ef7c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ef80:	4437      	add	r7, r6
 801ef82:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ef86:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ef8a:	9f01      	ldr	r7, [sp, #4]
 801ef8c:	f817 9006 	ldrb.w	r9, [r7, r6]
 801ef90:	f040 80bb 	bne.w	801f10a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 801ef94:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ef98:	f805 8c03 	strb.w	r8, [r5, #-3]
 801ef9c:	f805 ec02 	strb.w	lr, [r5, #-2]
 801efa0:	f805 2c01 	strb.w	r2, [r5, #-1]
 801efa4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801efa6:	3504      	adds	r5, #4
 801efa8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801efac:	4430      	add	r0, r6
 801efae:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801efb0:	4431      	add	r1, r6
 801efb2:	e7d6      	b.n	801ef62 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801efb4:	2500      	movs	r5, #0
 801efb6:	195e      	adds	r6, r3, r5
 801efb8:	2e00      	cmp	r6, #0
 801efba:	dc3f      	bgt.n	801f03c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801efbc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801efc0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801efc4:	9b02      	ldr	r3, [sp, #8]
 801efc6:	2b00      	cmp	r3, #0
 801efc8:	f340 80d4 	ble.w	801f174 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801efcc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801efd0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801efd2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801efd6:	eeb0 6a62 	vmov.f32	s12, s5
 801efda:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801efde:	ee31 1a05 	vadd.f32	s2, s2, s10
 801efe2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801efe6:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801efea:	eeb0 6a43 	vmov.f32	s12, s6
 801efee:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eff2:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eff6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801effa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801effe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f002:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f006:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f00a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f00e:	ee12 1a90 	vmov	r1, s5
 801f012:	eef0 2a47 	vmov.f32	s5, s14
 801f016:	fb91 f3f3 	sdiv	r3, r1, r3
 801f01a:	ee13 1a10 	vmov	r1, s6
 801f01e:	9311      	str	r3, [sp, #68]	; 0x44
 801f020:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f022:	eeb0 3a67 	vmov.f32	s6, s15
 801f026:	fb91 f3f3 	sdiv	r3, r1, r3
 801f02a:	9312      	str	r3, [sp, #72]	; 0x48
 801f02c:	9b02      	ldr	r3, [sp, #8]
 801f02e:	9903      	ldr	r1, [sp, #12]
 801f030:	3b01      	subs	r3, #1
 801f032:	9302      	str	r3, [sp, #8]
 801f034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f036:	bf08      	it	eq
 801f038:	460b      	moveq	r3, r1
 801f03a:	e75d      	b.n	801eef8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f03c:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801f040:	d424      	bmi.n	801f08c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f042:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801f044:	68b7      	ldr	r7, [r6, #8]
 801f046:	4567      	cmp	r7, ip
 801f048:	dd20      	ble.n	801f08c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f04a:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801f04e:	d41d      	bmi.n	801f08c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f050:	68f6      	ldr	r6, [r6, #12]
 801f052:	4576      	cmp	r6, lr
 801f054:	dd1a      	ble.n	801f08c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f056:	b23f      	sxth	r7, r7
 801f058:	9e01      	ldr	r6, [sp, #4]
 801f05a:	2aff      	cmp	r2, #255	; 0xff
 801f05c:	fb0e cc07 	mla	ip, lr, r7, ip
 801f060:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f064:	4466      	add	r6, ip
 801f066:	f896 8002 	ldrb.w	r8, [r6, #2]
 801f06a:	f896 9001 	ldrb.w	r9, [r6, #1]
 801f06e:	9e01      	ldr	r6, [sp, #4]
 801f070:	f816 a00c 	ldrb.w	sl, [r6, ip]
 801f074:	d110      	bne.n	801f098 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801f076:	f06f 0603 	mvn.w	r6, #3
 801f07a:	436e      	muls	r6, r5
 801f07c:	f804 a006 	strb.w	sl, [r4, r6]
 801f080:	4426      	add	r6, r4
 801f082:	f886 9001 	strb.w	r9, [r6, #1]
 801f086:	f886 8002 	strb.w	r8, [r6, #2]
 801f08a:	70f2      	strb	r2, [r6, #3]
 801f08c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801f08e:	3d01      	subs	r5, #1
 801f090:	4430      	add	r0, r6
 801f092:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801f094:	4431      	add	r1, r6
 801f096:	e78e      	b.n	801efb6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801f098:	2a00      	cmp	r2, #0
 801f09a:	d0f7      	beq.n	801f08c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f09c:	fb1a fa02 	smulbb	sl, sl, r2
 801f0a0:	f06f 0603 	mvn.w	r6, #3
 801f0a4:	fb12 f909 	smulbb	r9, r2, r9
 801f0a8:	fb12 f808 	smulbb	r8, r2, r8
 801f0ac:	fb06 fb05 	mul.w	fp, r6, r5
 801f0b0:	eb04 0c0b 	add.w	ip, r4, fp
 801f0b4:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801f0b8:	fb02 f607 	mul.w	r6, r2, r7
 801f0bc:	f106 0e01 	add.w	lr, r6, #1
 801f0c0:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801f0c4:	19d6      	adds	r6, r2, r7
 801f0c6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f0ca:	eba7 070e 	sub.w	r7, r7, lr
 801f0ce:	eba6 060e 	sub.w	r6, r6, lr
 801f0d2:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801f0d6:	b2f6      	uxtb	r6, r6
 801f0d8:	fb07 aa0e 	mla	sl, r7, lr, sl
 801f0dc:	fb9a faf6 	sdiv	sl, sl, r6
 801f0e0:	f804 a00b 	strb.w	sl, [r4, fp]
 801f0e4:	f89c e001 	ldrb.w	lr, [ip, #1]
 801f0e8:	f88c 6003 	strb.w	r6, [ip, #3]
 801f0ec:	fb07 990e 	mla	r9, r7, lr, r9
 801f0f0:	f89c e002 	ldrb.w	lr, [ip, #2]
 801f0f4:	fb07 880e 	mla	r8, r7, lr, r8
 801f0f8:	fb99 f9f6 	sdiv	r9, r9, r6
 801f0fc:	fb98 f8f6 	sdiv	r8, r8, r6
 801f100:	f88c 9001 	strb.w	r9, [ip, #1]
 801f104:	f88c 8002 	strb.w	r8, [ip, #2]
 801f108:	e7c0      	b.n	801f08c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801f10a:	2a00      	cmp	r2, #0
 801f10c:	f43f af4a 	beq.w	801efa4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801f110:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801f114:	fb19 f902 	smulbb	r9, r9, r2
 801f118:	fb12 f808 	smulbb	r8, r2, r8
 801f11c:	fb02 fc0b 	mul.w	ip, r2, fp
 801f120:	eb02 060b 	add.w	r6, r2, fp
 801f124:	fb12 fe0e 	smulbb	lr, r2, lr
 801f128:	f10c 0701 	add.w	r7, ip, #1
 801f12c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801f130:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801f134:	ebab 070c 	sub.w	r7, fp, ip
 801f138:	eba6 060c 	sub.w	r6, r6, ip
 801f13c:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801f140:	b2f6      	uxtb	r6, r6
 801f142:	fb07 990c 	mla	r9, r7, ip, r9
 801f146:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801f14a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801f14e:	fb07 880c 	mla	r8, r7, ip, r8
 801f152:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801f156:	fb07 ee0c 	mla	lr, r7, ip, lr
 801f15a:	fb99 f9f6 	sdiv	r9, r9, r6
 801f15e:	fb98 f8f6 	sdiv	r8, r8, r6
 801f162:	fb9e fef6 	sdiv	lr, lr, r6
 801f166:	f805 9c04 	strb.w	r9, [r5, #-4]
 801f16a:	f805 8c03 	strb.w	r8, [r5, #-3]
 801f16e:	f805 ec02 	strb.w	lr, [r5, #-2]
 801f172:	e717      	b.n	801efa4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801f174:	b005      	add	sp, #20
 801f176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f17a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f17a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f17e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f180:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f184:	9201      	str	r2, [sp, #4]
 801f186:	6868      	ldr	r0, [r5, #4]
 801f188:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801f18a:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801f18e:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 801f192:	fb00 2404 	mla	r4, r0, r4, r2
 801f196:	682a      	ldr	r2, [r5, #0]
 801f198:	f8d7 8000 	ldr.w	r8, [r7]
 801f19c:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801f1a0:	2900      	cmp	r1, #0
 801f1a2:	dc03      	bgt.n	801f1ac <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801f1a4:	9a01      	ldr	r2, [sp, #4]
 801f1a6:	2a00      	cmp	r2, #0
 801f1a8:	f340 80af 	ble.w	801f30a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801f1ac:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801f1ae:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801f1b2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801f1b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f1b8:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801f1bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f1c0:	2b00      	cmp	r3, #0
 801f1c2:	dd0c      	ble.n	801f1de <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801f1c4:	1405      	asrs	r5, r0, #16
 801f1c6:	d405      	bmi.n	801f1d4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f1c8:	4555      	cmp	r5, sl
 801f1ca:	da03      	bge.n	801f1d4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f1cc:	1415      	asrs	r5, r2, #16
 801f1ce:	d401      	bmi.n	801f1d4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f1d0:	454d      	cmp	r5, r9
 801f1d2:	db05      	blt.n	801f1e0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f1d4:	4470      	add	r0, lr
 801f1d6:	4462      	add	r2, ip
 801f1d8:	3b01      	subs	r3, #1
 801f1da:	3404      	adds	r4, #4
 801f1dc:	e7f0      	b.n	801f1c0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801f1de:	d037      	beq.n	801f250 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 801f1e0:	1e5d      	subs	r5, r3, #1
 801f1e2:	fb0e 0605 	mla	r6, lr, r5, r0
 801f1e6:	1436      	asrs	r6, r6, #16
 801f1e8:	d42a      	bmi.n	801f240 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801f1ea:	4556      	cmp	r6, sl
 801f1ec:	da28      	bge.n	801f240 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801f1ee:	fb0c 2505 	mla	r5, ip, r5, r2
 801f1f2:	142d      	asrs	r5, r5, #16
 801f1f4:	d424      	bmi.n	801f240 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801f1f6:	454d      	cmp	r5, r9
 801f1f8:	da22      	bge.n	801f240 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 801f1fa:	1d26      	adds	r6, r4, #4
 801f1fc:	4699      	mov	r9, r3
 801f1fe:	f1b9 0f00 	cmp.w	r9, #0
 801f202:	f106 0604 	add.w	r6, r6, #4
 801f206:	dd1f      	ble.n	801f248 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xce>
 801f208:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801f20c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801f210:	1415      	asrs	r5, r2, #16
 801f212:	4470      	add	r0, lr
 801f214:	4462      	add	r2, ip
 801f216:	f109 39ff 	add.w	r9, r9, #4294967295
 801f21a:	fb0b a505 	mla	r5, fp, r5, sl
 801f21e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f222:	eb08 0a05 	add.w	sl, r8, r5
 801f226:	f818 5005 	ldrb.w	r5, [r8, r5]
 801f22a:	f806 5c08 	strb.w	r5, [r6, #-8]
 801f22e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801f232:	f806 5c07 	strb.w	r5, [r6, #-7]
 801f236:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801f23a:	f806 5c06 	strb.w	r5, [r6, #-6]
 801f23e:	e7de      	b.n	801f1fe <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f240:	2600      	movs	r6, #0
 801f242:	199d      	adds	r5, r3, r6
 801f244:	2d00      	cmp	r5, #0
 801f246:	dc37      	bgt.n	801f2b8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801f248:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f24c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801f250:	2900      	cmp	r1, #0
 801f252:	dd5a      	ble.n	801f30a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801f254:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f258:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f25a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f25e:	3901      	subs	r1, #1
 801f260:	eeb0 6a62 	vmov.f32	s12, s5
 801f264:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f268:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f26c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f270:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801f274:	eeb0 6a43 	vmov.f32	s12, s6
 801f278:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f27c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801f280:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f284:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f288:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f28c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f290:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f294:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f298:	ee12 2a90 	vmov	r2, s5
 801f29c:	eef0 2a47 	vmov.f32	s5, s14
 801f2a0:	fb92 fef3 	sdiv	lr, r2, r3
 801f2a4:	ee13 2a10 	vmov	r2, s6
 801f2a8:	eeb0 3a67 	vmov.f32	s6, s15
 801f2ac:	fb92 fcf3 	sdiv	ip, r2, r3
 801f2b0:	9a01      	ldr	r2, [sp, #4]
 801f2b2:	bf08      	it	eq
 801f2b4:	4613      	moveq	r3, r2
 801f2b6:	e773      	b.n	801f1a0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 801f2b8:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f2bc:	d421      	bmi.n	801f302 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801f2be:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801f2c2:	45cb      	cmp	fp, r9
 801f2c4:	dd1d      	ble.n	801f302 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801f2c6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f2ca:	d41a      	bmi.n	801f302 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801f2cc:	68fd      	ldr	r5, [r7, #12]
 801f2ce:	4555      	cmp	r5, sl
 801f2d0:	dd17      	ble.n	801f302 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 801f2d2:	fa0f f58b 	sxth.w	r5, fp
 801f2d6:	fb0a 9505 	mla	r5, sl, r5, r9
 801f2da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f2de:	f818 9005 	ldrb.w	r9, [r8, r5]
 801f2e2:	eb08 0b05 	add.w	fp, r8, r5
 801f2e6:	f06f 0503 	mvn.w	r5, #3
 801f2ea:	4375      	muls	r5, r6
 801f2ec:	f804 9005 	strb.w	r9, [r4, r5]
 801f2f0:	4425      	add	r5, r4
 801f2f2:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801f2f6:	f885 9001 	strb.w	r9, [r5, #1]
 801f2fa:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801f2fe:	f885 9002 	strb.w	r9, [r5, #2]
 801f302:	4470      	add	r0, lr
 801f304:	4462      	add	r2, ip
 801f306:	3e01      	subs	r6, #1
 801f308:	e79b      	b.n	801f242 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801f30a:	b003      	add	sp, #12
 801f30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f310 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f314:	b087      	sub	sp, #28
 801f316:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f31a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f31c:	9203      	str	r2, [sp, #12]
 801f31e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801f322:	9100      	str	r1, [sp, #0]
 801f324:	9204      	str	r2, [sp, #16]
 801f326:	6861      	ldr	r1, [r4, #4]
 801f328:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801f32c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f330:	fb01 2000 	mla	r0, r1, r0, r2
 801f334:	6822      	ldr	r2, [r4, #0]
 801f336:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801f33a:	f8db 2000 	ldr.w	r2, [fp]
 801f33e:	9201      	str	r2, [sp, #4]
 801f340:	9a00      	ldr	r2, [sp, #0]
 801f342:	2a00      	cmp	r2, #0
 801f344:	dc03      	bgt.n	801f34e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f346:	9a03      	ldr	r2, [sp, #12]
 801f348:	2a00      	cmp	r2, #0
 801f34a:	f340 8147 	ble.w	801f5dc <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801f34e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f350:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f354:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f358:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f35a:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f35e:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f362:	2b00      	cmp	r3, #0
 801f364:	dd0e      	ble.n	801f384 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f366:	140c      	asrs	r4, r1, #16
 801f368:	d405      	bmi.n	801f376 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f36a:	42bc      	cmp	r4, r7
 801f36c:	da03      	bge.n	801f376 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f36e:	1414      	asrs	r4, r2, #16
 801f370:	d401      	bmi.n	801f376 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f372:	42b4      	cmp	r4, r6
 801f374:	db07      	blt.n	801f386 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f376:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f378:	3b01      	subs	r3, #1
 801f37a:	3004      	adds	r0, #4
 801f37c:	4421      	add	r1, r4
 801f37e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f380:	4422      	add	r2, r4
 801f382:	e7ee      	b.n	801f362 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f384:	d048      	beq.n	801f418 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f386:	1e5c      	subs	r4, r3, #1
 801f388:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f38a:	fb05 1504 	mla	r5, r5, r4, r1
 801f38e:	142d      	asrs	r5, r5, #16
 801f390:	d438      	bmi.n	801f404 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f392:	42bd      	cmp	r5, r7
 801f394:	da36      	bge.n	801f404 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f396:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f398:	fb05 2404 	mla	r4, r5, r4, r2
 801f39c:	1424      	asrs	r4, r4, #16
 801f39e:	d431      	bmi.n	801f404 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f3a0:	42b4      	cmp	r4, r6
 801f3a2:	da2f      	bge.n	801f404 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801f3a4:	469e      	mov	lr, r3
 801f3a6:	4604      	mov	r4, r0
 801f3a8:	f1be 0f00 	cmp.w	lr, #0
 801f3ac:	dd30      	ble.n	801f410 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801f3ae:	140e      	asrs	r6, r1, #16
 801f3b0:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f3b4:	1415      	asrs	r5, r2, #16
 801f3b6:	fb07 6505 	mla	r5, r7, r5, r6
 801f3ba:	9e01      	ldr	r6, [sp, #4]
 801f3bc:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 801f3c0:	0e35      	lsrs	r5, r6, #24
 801f3c2:	d017      	beq.n	801f3f4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f3c4:	9f04      	ldr	r7, [sp, #16]
 801f3c6:	f3c6 4907 	ubfx	r9, r6, #16, #8
 801f3ca:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 801f3ce:	437d      	muls	r5, r7
 801f3d0:	fa5f f88c 	uxtb.w	r8, ip
 801f3d4:	1c6f      	adds	r7, r5, #1
 801f3d6:	eb07 2525 	add.w	r5, r7, r5, asr #8
 801f3da:	fa5f f789 	uxtb.w	r7, r9
 801f3de:	122d      	asrs	r5, r5, #8
 801f3e0:	9702      	str	r7, [sp, #8]
 801f3e2:	2dff      	cmp	r5, #255	; 0xff
 801f3e4:	f040 80c7 	bne.w	801f576 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 801f3e8:	7026      	strb	r6, [r4, #0]
 801f3ea:	f884 c001 	strb.w	ip, [r4, #1]
 801f3ee:	f884 9002 	strb.w	r9, [r4, #2]
 801f3f2:	70e5      	strb	r5, [r4, #3]
 801f3f4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f3f6:	3404      	adds	r4, #4
 801f3f8:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f3fc:	4429      	add	r1, r5
 801f3fe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f400:	442a      	add	r2, r5
 801f402:	e7d1      	b.n	801f3a8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f404:	f04f 0c00 	mov.w	ip, #0
 801f408:	eb03 040c 	add.w	r4, r3, ip
 801f40c:	2c00      	cmp	r4, #0
 801f40e:	dc3f      	bgt.n	801f490 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 801f410:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f414:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f418:	9b00      	ldr	r3, [sp, #0]
 801f41a:	2b00      	cmp	r3, #0
 801f41c:	f340 80de 	ble.w	801f5dc <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 801f420:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f424:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f426:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f42a:	eeb0 6a62 	vmov.f32	s12, s5
 801f42e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f432:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f436:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f43a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f43e:	eeb0 6a43 	vmov.f32	s12, s6
 801f442:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f446:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f44a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f44e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f452:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f456:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f45a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f45e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f462:	ee12 2a90 	vmov	r2, s5
 801f466:	eef0 2a47 	vmov.f32	s5, s14
 801f46a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f46e:	ee13 2a10 	vmov	r2, s6
 801f472:	9313      	str	r3, [sp, #76]	; 0x4c
 801f474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f476:	eeb0 3a67 	vmov.f32	s6, s15
 801f47a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f47e:	9314      	str	r3, [sp, #80]	; 0x50
 801f480:	9b00      	ldr	r3, [sp, #0]
 801f482:	9a03      	ldr	r2, [sp, #12]
 801f484:	3b01      	subs	r3, #1
 801f486:	9300      	str	r3, [sp, #0]
 801f488:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f48a:	bf08      	it	eq
 801f48c:	4613      	moveq	r3, r2
 801f48e:	e757      	b.n	801f340 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f490:	140e      	asrs	r6, r1, #16
 801f492:	d42e      	bmi.n	801f4f2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f494:	f8db 5008 	ldr.w	r5, [fp, #8]
 801f498:	42b5      	cmp	r5, r6
 801f49a:	dd2a      	ble.n	801f4f2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f49c:	1417      	asrs	r7, r2, #16
 801f49e:	d428      	bmi.n	801f4f2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f4a0:	f8db 400c 	ldr.w	r4, [fp, #12]
 801f4a4:	42bc      	cmp	r4, r7
 801f4a6:	dd24      	ble.n	801f4f2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f4a8:	b22d      	sxth	r5, r5
 801f4aa:	9c01      	ldr	r4, [sp, #4]
 801f4ac:	fb07 6505 	mla	r5, r7, r5, r6
 801f4b0:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 801f4b4:	0e2c      	lsrs	r4, r5, #24
 801f4b6:	d01c      	beq.n	801f4f2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f4b8:	9e04      	ldr	r6, [sp, #16]
 801f4ba:	4374      	muls	r4, r6
 801f4bc:	1c66      	adds	r6, r4, #1
 801f4be:	eb06 2424 	add.w	r4, r6, r4, asr #8
 801f4c2:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801f4c6:	1224      	asrs	r4, r4, #8
 801f4c8:	b2f7      	uxtb	r7, r6
 801f4ca:	2cff      	cmp	r4, #255	; 0xff
 801f4cc:	9705      	str	r7, [sp, #20]
 801f4ce:	f3c5 2707 	ubfx	r7, r5, #8, #8
 801f4d2:	fa5f f887 	uxtb.w	r8, r7
 801f4d6:	d113      	bne.n	801f500 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f4d8:	f06f 0e03 	mvn.w	lr, #3
 801f4dc:	fb0e fe0c 	mul.w	lr, lr, ip
 801f4e0:	f800 500e 	strb.w	r5, [r0, lr]
 801f4e4:	4486      	add	lr, r0
 801f4e6:	f88e 7001 	strb.w	r7, [lr, #1]
 801f4ea:	f88e 6002 	strb.w	r6, [lr, #2]
 801f4ee:	f88e 4003 	strb.w	r4, [lr, #3]
 801f4f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f4f4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f4f8:	4421      	add	r1, r4
 801f4fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f4fc:	4422      	add	r2, r4
 801f4fe:	e783      	b.n	801f408 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f500:	b2e6      	uxtb	r6, r4
 801f502:	9602      	str	r6, [sp, #8]
 801f504:	2c00      	cmp	r4, #0
 801f506:	d0f4      	beq.n	801f4f2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f508:	f06f 0603 	mvn.w	r6, #3
 801f50c:	b2ed      	uxtb	r5, r5
 801f50e:	fb04 f808 	mul.w	r8, r4, r8
 801f512:	fb06 f90c 	mul.w	r9, r6, ip
 801f516:	9e02      	ldr	r6, [sp, #8]
 801f518:	eb00 0e09 	add.w	lr, r0, r9
 801f51c:	f89e a003 	ldrb.w	sl, [lr, #3]
 801f520:	fb06 f70a 	mul.w	r7, r6, sl
 801f524:	1c7e      	adds	r6, r7, #1
 801f526:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 801f52a:	9e02      	ldr	r6, [sp, #8]
 801f52c:	123f      	asrs	r7, r7, #8
 801f52e:	4456      	add	r6, sl
 801f530:	1bf6      	subs	r6, r6, r7
 801f532:	ebaa 0707 	sub.w	r7, sl, r7
 801f536:	f810 a009 	ldrb.w	sl, [r0, r9]
 801f53a:	b2f6      	uxtb	r6, r6
 801f53c:	fb07 fa0a 	mul.w	sl, r7, sl
 801f540:	fb04 a505 	mla	r5, r4, r5, sl
 801f544:	fb95 f5f6 	sdiv	r5, r5, r6
 801f548:	f800 5009 	strb.w	r5, [r0, r9]
 801f54c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 801f550:	f89e a002 	ldrb.w	sl, [lr, #2]
 801f554:	fb07 8805 	mla	r8, r7, r5, r8
 801f558:	9d05      	ldr	r5, [sp, #20]
 801f55a:	f88e 6003 	strb.w	r6, [lr, #3]
 801f55e:	436c      	muls	r4, r5
 801f560:	fb07 470a 	mla	r7, r7, sl, r4
 801f564:	fb98 f8f6 	sdiv	r8, r8, r6
 801f568:	fb97 f7f6 	sdiv	r7, r7, r6
 801f56c:	f88e 8001 	strb.w	r8, [lr, #1]
 801f570:	f88e 7002 	strb.w	r7, [lr, #2]
 801f574:	e7bd      	b.n	801f4f2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801f576:	b2ef      	uxtb	r7, r5
 801f578:	2d00      	cmp	r5, #0
 801f57a:	f43f af3b 	beq.w	801f3f4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f57e:	f894 9003 	ldrb.w	r9, [r4, #3]
 801f582:	b2f6      	uxtb	r6, r6
 801f584:	fb05 f808 	mul.w	r8, r5, r8
 801f588:	fb07 fa09 	mul.w	sl, r7, r9
 801f58c:	444f      	add	r7, r9
 801f58e:	f10a 0c01 	add.w	ip, sl, #1
 801f592:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801f596:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f59a:	eba7 070c 	sub.w	r7, r7, ip
 801f59e:	eba9 0c0c 	sub.w	ip, r9, ip
 801f5a2:	f894 9000 	ldrb.w	r9, [r4]
 801f5a6:	b2ff      	uxtb	r7, r7
 801f5a8:	fb0c f909 	mul.w	r9, ip, r9
 801f5ac:	70e7      	strb	r7, [r4, #3]
 801f5ae:	fb05 9606 	mla	r6, r5, r6, r9
 801f5b2:	f894 9002 	ldrb.w	r9, [r4, #2]
 801f5b6:	fb96 f6f7 	sdiv	r6, r6, r7
 801f5ba:	7026      	strb	r6, [r4, #0]
 801f5bc:	7866      	ldrb	r6, [r4, #1]
 801f5be:	fb0c 8806 	mla	r8, ip, r6, r8
 801f5c2:	9e02      	ldr	r6, [sp, #8]
 801f5c4:	4375      	muls	r5, r6
 801f5c6:	fb0c 5c09 	mla	ip, ip, r9, r5
 801f5ca:	fb98 f8f7 	sdiv	r8, r8, r7
 801f5ce:	fb9c fcf7 	sdiv	ip, ip, r7
 801f5d2:	f884 8001 	strb.w	r8, [r4, #1]
 801f5d6:	f884 c002 	strb.w	ip, [r4, #2]
 801f5da:	e70b      	b.n	801f3f4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801f5dc:	b007      	add	sp, #28
 801f5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f5e4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5e8:	b089      	sub	sp, #36	; 0x24
 801f5ea:	469a      	mov	sl, r3
 801f5ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f5f0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f5f2:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801f5f6:	9102      	str	r1, [sp, #8]
 801f5f8:	9206      	str	r2, [sp, #24]
 801f5fa:	9307      	str	r3, [sp, #28]
 801f5fc:	6842      	ldr	r2, [r0, #4]
 801f5fe:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801f602:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 801f606:	fb02 3101 	mla	r1, r2, r1, r3
 801f60a:	6803      	ldr	r3, [r0, #0]
 801f60c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f610:	f8db 3008 	ldr.w	r3, [fp, #8]
 801f614:	3301      	adds	r3, #1
 801f616:	f023 0301 	bic.w	r3, r3, #1
 801f61a:	9303      	str	r3, [sp, #12]
 801f61c:	f8db 3000 	ldr.w	r3, [fp]
 801f620:	9304      	str	r3, [sp, #16]
 801f622:	9b02      	ldr	r3, [sp, #8]
 801f624:	2b00      	cmp	r3, #0
 801f626:	dc03      	bgt.n	801f630 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f628:	9b06      	ldr	r3, [sp, #24]
 801f62a:	2b00      	cmp	r3, #0
 801f62c:	f340 8154 	ble.w	801f8d8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f630:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f632:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 801f636:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801f63a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f63c:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 801f640:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801f644:	9301      	str	r3, [sp, #4]
 801f646:	f1ba 0f00 	cmp.w	sl, #0
 801f64a:	dd12      	ble.n	801f672 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801f64c:	1410      	asrs	r0, r2, #16
 801f64e:	d406      	bmi.n	801f65e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f650:	42b0      	cmp	r0, r6
 801f652:	da04      	bge.n	801f65e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f654:	9b01      	ldr	r3, [sp, #4]
 801f656:	1418      	asrs	r0, r3, #16
 801f658:	d401      	bmi.n	801f65e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801f65a:	42a8      	cmp	r0, r5
 801f65c:	db0a      	blt.n	801f674 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f65e:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f660:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f664:	9b01      	ldr	r3, [sp, #4]
 801f666:	3104      	adds	r1, #4
 801f668:	4402      	add	r2, r0
 801f66a:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f66c:	4403      	add	r3, r0
 801f66e:	9301      	str	r3, [sp, #4]
 801f670:	e7e9      	b.n	801f646 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f672:	d050      	beq.n	801f716 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 801f674:	f10a 30ff 	add.w	r0, sl, #4294967295
 801f678:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f67a:	fb04 2400 	mla	r4, r4, r0, r2
 801f67e:	1424      	asrs	r4, r4, #16
 801f680:	d440      	bmi.n	801f704 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f682:	42b4      	cmp	r4, r6
 801f684:	da3e      	bge.n	801f704 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f686:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f688:	9b01      	ldr	r3, [sp, #4]
 801f68a:	fb04 3000 	mla	r0, r4, r0, r3
 801f68e:	1400      	asrs	r0, r0, #16
 801f690:	d438      	bmi.n	801f704 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f692:	42a8      	cmp	r0, r5
 801f694:	da36      	bge.n	801f704 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f696:	1d08      	adds	r0, r1, #4
 801f698:	46d6      	mov	lr, sl
 801f69a:	f1be 0f00 	cmp.w	lr, #0
 801f69e:	dd36      	ble.n	801f70e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801f6a0:	9b01      	ldr	r3, [sp, #4]
 801f6a2:	1414      	asrs	r4, r2, #16
 801f6a4:	141d      	asrs	r5, r3, #16
 801f6a6:	9b03      	ldr	r3, [sp, #12]
 801f6a8:	fb03 4505 	mla	r5, r3, r5, r4
 801f6ac:	9b04      	ldr	r3, [sp, #16]
 801f6ae:	086c      	lsrs	r4, r5, #1
 801f6b0:	5d1c      	ldrb	r4, [r3, r4]
 801f6b2:	07eb      	lsls	r3, r5, #31
 801f6b4:	9b07      	ldr	r3, [sp, #28]
 801f6b6:	bf54      	ite	pl
 801f6b8:	f004 040f 	andpl.w	r4, r4, #15
 801f6bc:	1124      	asrmi	r4, r4, #4
 801f6be:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f6c2:	b2e4      	uxtb	r4, r4
 801f6c4:	435c      	muls	r4, r3
 801f6c6:	1c65      	adds	r5, r4, #1
 801f6c8:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801f6cc:	4d84      	ldr	r5, [pc, #528]	; (801f8e0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801f6ce:	1224      	asrs	r4, r4, #8
 801f6d0:	f895 9002 	ldrb.w	r9, [r5, #2]
 801f6d4:	786f      	ldrb	r7, [r5, #1]
 801f6d6:	2cff      	cmp	r4, #255	; 0xff
 801f6d8:	f895 c000 	ldrb.w	ip, [r5]
 801f6dc:	f040 80cb 	bne.w	801f876 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801f6e0:	f800 cc04 	strb.w	ip, [r0, #-4]
 801f6e4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f6e8:	f800 9c02 	strb.w	r9, [r0, #-2]
 801f6ec:	f800 4c01 	strb.w	r4, [r0, #-1]
 801f6f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f6f2:	3004      	adds	r0, #4
 801f6f4:	9c01      	ldr	r4, [sp, #4]
 801f6f6:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f6fa:	441a      	add	r2, r3
 801f6fc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f6fe:	441c      	add	r4, r3
 801f700:	9401      	str	r4, [sp, #4]
 801f702:	e7ca      	b.n	801f69a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 801f704:	2600      	movs	r6, #0
 801f706:	eb0a 0006 	add.w	r0, sl, r6
 801f70a:	2800      	cmp	r0, #0
 801f70c:	dc41      	bgt.n	801f792 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801f70e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801f712:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f716:	9b02      	ldr	r3, [sp, #8]
 801f718:	2b00      	cmp	r3, #0
 801f71a:	f340 80dd 	ble.w	801f8d8 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801f71e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f722:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f724:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f728:	eeb0 6a62 	vmov.f32	s12, s5
 801f72c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f730:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f734:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f738:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801f73c:	eeb0 6a43 	vmov.f32	s12, s6
 801f740:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f744:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 801f748:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f74c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f750:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f754:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f758:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f75c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f760:	ee12 2a90 	vmov	r2, s5
 801f764:	eef0 2a47 	vmov.f32	s5, s14
 801f768:	fb92 f3f3 	sdiv	r3, r2, r3
 801f76c:	ee13 2a10 	vmov	r2, s6
 801f770:	9315      	str	r3, [sp, #84]	; 0x54
 801f772:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f774:	eeb0 3a67 	vmov.f32	s6, s15
 801f778:	fb92 f3f3 	sdiv	r3, r2, r3
 801f77c:	9316      	str	r3, [sp, #88]	; 0x58
 801f77e:	9b02      	ldr	r3, [sp, #8]
 801f780:	9a06      	ldr	r2, [sp, #24]
 801f782:	3b01      	subs	r3, #1
 801f784:	9302      	str	r3, [sp, #8]
 801f786:	bf08      	it	eq
 801f788:	4692      	moveq	sl, r2
 801f78a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f78c:	bf18      	it	ne
 801f78e:	469a      	movne	sl, r3
 801f790:	e747      	b.n	801f622 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f792:	1414      	asrs	r4, r2, #16
 801f794:	d432      	bmi.n	801f7fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f796:	f8db 0008 	ldr.w	r0, [fp, #8]
 801f79a:	42a0      	cmp	r0, r4
 801f79c:	dd2e      	ble.n	801f7fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f79e:	9b01      	ldr	r3, [sp, #4]
 801f7a0:	141d      	asrs	r5, r3, #16
 801f7a2:	d42b      	bmi.n	801f7fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f7a4:	f8db 000c 	ldr.w	r0, [fp, #12]
 801f7a8:	42a8      	cmp	r0, r5
 801f7aa:	dd27      	ble.n	801f7fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f7ac:	9803      	ldr	r0, [sp, #12]
 801f7ae:	fb05 4400 	mla	r4, r5, r0, r4
 801f7b2:	9d04      	ldr	r5, [sp, #16]
 801f7b4:	0860      	lsrs	r0, r4, #1
 801f7b6:	07e4      	lsls	r4, r4, #31
 801f7b8:	9c07      	ldr	r4, [sp, #28]
 801f7ba:	5c28      	ldrb	r0, [r5, r0]
 801f7bc:	bf54      	ite	pl
 801f7be:	f000 000f 	andpl.w	r0, r0, #15
 801f7c2:	1100      	asrmi	r0, r0, #4
 801f7c4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f7c8:	b2c0      	uxtb	r0, r0
 801f7ca:	4360      	muls	r0, r4
 801f7cc:	1c44      	adds	r4, r0, #1
 801f7ce:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801f7d2:	4c43      	ldr	r4, [pc, #268]	; (801f8e0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 801f7d4:	1200      	asrs	r0, r0, #8
 801f7d6:	78a5      	ldrb	r5, [r4, #2]
 801f7d8:	f894 c001 	ldrb.w	ip, [r4, #1]
 801f7dc:	28ff      	cmp	r0, #255	; 0xff
 801f7de:	9505      	str	r5, [sp, #20]
 801f7e0:	f894 e000 	ldrb.w	lr, [r4]
 801f7e4:	d112      	bne.n	801f80c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801f7e6:	f06f 0303 	mvn.w	r3, #3
 801f7ea:	fb03 f406 	mul.w	r4, r3, r6
 801f7ee:	f801 e004 	strb.w	lr, [r1, r4]
 801f7f2:	440c      	add	r4, r1
 801f7f4:	f884 c001 	strb.w	ip, [r4, #1]
 801f7f8:	70a5      	strb	r5, [r4, #2]
 801f7fa:	70e0      	strb	r0, [r4, #3]
 801f7fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f7fe:	3e01      	subs	r6, #1
 801f800:	9801      	ldr	r0, [sp, #4]
 801f802:	441a      	add	r2, r3
 801f804:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f806:	4418      	add	r0, r3
 801f808:	9001      	str	r0, [sp, #4]
 801f80a:	e77c      	b.n	801f706 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801f80c:	b2c4      	uxtb	r4, r0
 801f80e:	2800      	cmp	r0, #0
 801f810:	d0f4      	beq.n	801f7fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f812:	f06f 0303 	mvn.w	r3, #3
 801f816:	fb00 fe0e 	mul.w	lr, r0, lr
 801f81a:	fb00 fc0c 	mul.w	ip, r0, ip
 801f81e:	fb03 f806 	mul.w	r8, r3, r6
 801f822:	eb01 0708 	add.w	r7, r1, r8
 801f826:	f897 9003 	ldrb.w	r9, [r7, #3]
 801f82a:	fb04 f509 	mul.w	r5, r4, r9
 801f82e:	444c      	add	r4, r9
 801f830:	1c6b      	adds	r3, r5, #1
 801f832:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f836:	9b05      	ldr	r3, [sp, #20]
 801f838:	122d      	asrs	r5, r5, #8
 801f83a:	4358      	muls	r0, r3
 801f83c:	1b64      	subs	r4, r4, r5
 801f83e:	eba9 0505 	sub.w	r5, r9, r5
 801f842:	f811 9008 	ldrb.w	r9, [r1, r8]
 801f846:	b2e4      	uxtb	r4, r4
 801f848:	fb05 ee09 	mla	lr, r5, r9, lr
 801f84c:	fb9e fef4 	sdiv	lr, lr, r4
 801f850:	f801 e008 	strb.w	lr, [r1, r8]
 801f854:	f897 e001 	ldrb.w	lr, [r7, #1]
 801f858:	f897 9002 	ldrb.w	r9, [r7, #2]
 801f85c:	fb05 cc0e 	mla	ip, r5, lr, ip
 801f860:	fb05 0509 	mla	r5, r5, r9, r0
 801f864:	70fc      	strb	r4, [r7, #3]
 801f866:	fb9c fcf4 	sdiv	ip, ip, r4
 801f86a:	fb95 f5f4 	sdiv	r5, r5, r4
 801f86e:	f887 c001 	strb.w	ip, [r7, #1]
 801f872:	70bd      	strb	r5, [r7, #2]
 801f874:	e7c2      	b.n	801f7fc <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 801f876:	b2e5      	uxtb	r5, r4
 801f878:	2c00      	cmp	r4, #0
 801f87a:	f43f af39 	beq.w	801f6f0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f87e:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801f882:	fb04 fc0c 	mul.w	ip, r4, ip
 801f886:	4367      	muls	r7, r4
 801f888:	fb05 f608 	mul.w	r6, r5, r8
 801f88c:	4445      	add	r5, r8
 801f88e:	fb04 f409 	mul.w	r4, r4, r9
 801f892:	1c73      	adds	r3, r6, #1
 801f894:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801f898:	1236      	asrs	r6, r6, #8
 801f89a:	1bad      	subs	r5, r5, r6
 801f89c:	eba8 0606 	sub.w	r6, r8, r6
 801f8a0:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801f8a4:	b2ed      	uxtb	r5, r5
 801f8a6:	fb06 cc08 	mla	ip, r6, r8, ip
 801f8aa:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801f8ae:	f800 5c01 	strb.w	r5, [r0, #-1]
 801f8b2:	fb9c fcf5 	sdiv	ip, ip, r5
 801f8b6:	f800 cc04 	strb.w	ip, [r0, #-4]
 801f8ba:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 801f8be:	fb06 770c 	mla	r7, r6, ip, r7
 801f8c2:	fb06 4608 	mla	r6, r6, r8, r4
 801f8c6:	fb97 f7f5 	sdiv	r7, r7, r5
 801f8ca:	fb96 f6f5 	sdiv	r6, r6, r5
 801f8ce:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f8d2:	f800 6c02 	strb.w	r6, [r0, #-2]
 801f8d6:	e70b      	b.n	801f6f0 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f8d8:	b009      	add	sp, #36	; 0x24
 801f8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8de:	bf00      	nop
 801f8e0:	2003bef0 	.word	0x2003bef0

0801f8e4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f8e8:	b089      	sub	sp, #36	; 0x24
 801f8ea:	469a      	mov	sl, r3
 801f8ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f8f0:	4cb8      	ldr	r4, [pc, #736]	; (801fbd4 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>)
 801f8f2:	9102      	str	r1, [sp, #8]
 801f8f4:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801f8f6:	9205      	str	r2, [sp, #20]
 801f8f8:	684a      	ldr	r2, [r1, #4]
 801f8fa:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 801f8fe:	e9dd 3018 	ldrd	r3, r0, [sp, #96]	; 0x60
 801f902:	fb02 3000 	mla	r0, r2, r0, r3
 801f906:	680b      	ldr	r3, [r1, #0]
 801f908:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801f90c:	f8db 3008 	ldr.w	r3, [fp, #8]
 801f910:	3301      	adds	r3, #1
 801f912:	f023 0301 	bic.w	r3, r3, #1
 801f916:	9303      	str	r3, [sp, #12]
 801f918:	f8db 3000 	ldr.w	r3, [fp]
 801f91c:	9304      	str	r3, [sp, #16]
 801f91e:	9b02      	ldr	r3, [sp, #8]
 801f920:	2b00      	cmp	r3, #0
 801f922:	dc03      	bgt.n	801f92c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f924:	9b05      	ldr	r3, [sp, #20]
 801f926:	2b00      	cmp	r3, #0
 801f928:	f340 8150 	ble.w	801fbcc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801f92c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f92e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f932:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 801f936:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f938:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f93c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801f940:	9301      	str	r3, [sp, #4]
 801f942:	f1ba 0f00 	cmp.w	sl, #0
 801f946:	dd12      	ble.n	801f96e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801f948:	140b      	asrs	r3, r1, #16
 801f94a:	d406      	bmi.n	801f95a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f94c:	42bb      	cmp	r3, r7
 801f94e:	da04      	bge.n	801f95a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f950:	9b01      	ldr	r3, [sp, #4]
 801f952:	141b      	asrs	r3, r3, #16
 801f954:	d401      	bmi.n	801f95a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f956:	42b3      	cmp	r3, r6
 801f958:	db0a      	blt.n	801f970 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801f95a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f95c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f960:	9a01      	ldr	r2, [sp, #4]
 801f962:	3004      	adds	r0, #4
 801f964:	4419      	add	r1, r3
 801f966:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f968:	441a      	add	r2, r3
 801f96a:	9201      	str	r2, [sp, #4]
 801f96c:	e7e9      	b.n	801f942 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801f96e:	d046      	beq.n	801f9fe <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801f970:	f10a 33ff 	add.w	r3, sl, #4294967295
 801f974:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801f976:	fb05 1503 	mla	r5, r5, r3, r1
 801f97a:	142d      	asrs	r5, r5, #16
 801f97c:	d436      	bmi.n	801f9ec <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f97e:	42bd      	cmp	r5, r7
 801f980:	da34      	bge.n	801f9ec <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f982:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801f984:	9a01      	ldr	r2, [sp, #4]
 801f986:	fb05 2303 	mla	r3, r5, r3, r2
 801f98a:	141b      	asrs	r3, r3, #16
 801f98c:	d42e      	bmi.n	801f9ec <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f98e:	42b3      	cmp	r3, r6
 801f990:	da2c      	bge.n	801f9ec <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f992:	1d05      	adds	r5, r0, #4
 801f994:	46d0      	mov	r8, sl
 801f996:	f1b8 0f00 	cmp.w	r8, #0
 801f99a:	dd2c      	ble.n	801f9f6 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f99c:	9b01      	ldr	r3, [sp, #4]
 801f99e:	9a03      	ldr	r2, [sp, #12]
 801f9a0:	141e      	asrs	r6, r3, #16
 801f9a2:	f894 e000 	ldrb.w	lr, [r4]
 801f9a6:	140b      	asrs	r3, r1, #16
 801f9a8:	fb02 3606 	mla	r6, r2, r6, r3
 801f9ac:	9a04      	ldr	r2, [sp, #16]
 801f9ae:	0873      	lsrs	r3, r6, #1
 801f9b0:	5cd3      	ldrb	r3, [r2, r3]
 801f9b2:	07f2      	lsls	r2, r6, #31
 801f9b4:	bf54      	ite	pl
 801f9b6:	f003 030f 	andpl.w	r3, r3, #15
 801f9ba:	111b      	asrmi	r3, r3, #4
 801f9bc:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f9c0:	b2db      	uxtb	r3, r3
 801f9c2:	2bff      	cmp	r3, #255	; 0xff
 801f9c4:	f040 80c9 	bne.w	801fb5a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801f9c8:	f805 ec04 	strb.w	lr, [r5, #-4]
 801f9cc:	7863      	ldrb	r3, [r4, #1]
 801f9ce:	f805 3c03 	strb.w	r3, [r5, #-3]
 801f9d2:	78a3      	ldrb	r3, [r4, #2]
 801f9d4:	f805 3c02 	strb.w	r3, [r5, #-2]
 801f9d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801f9da:	3504      	adds	r5, #4
 801f9dc:	9a01      	ldr	r2, [sp, #4]
 801f9de:	f108 38ff 	add.w	r8, r8, #4294967295
 801f9e2:	4419      	add	r1, r3
 801f9e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801f9e6:	441a      	add	r2, r3
 801f9e8:	9201      	str	r2, [sp, #4]
 801f9ea:	e7d4      	b.n	801f996 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801f9ec:	2500      	movs	r5, #0
 801f9ee:	eb0a 0305 	add.w	r3, sl, r5
 801f9f2:	2b00      	cmp	r3, #0
 801f9f4:	dc41      	bgt.n	801fa7a <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f9f6:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 801f9fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f9fe:	9b02      	ldr	r3, [sp, #8]
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	f340 80e3 	ble.w	801fbcc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 801fa06:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fa0c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa10:	eeb0 6a62 	vmov.f32	s12, s5
 801fa14:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fa18:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa1c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa20:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801fa24:	eeb0 6a43 	vmov.f32	s12, s6
 801fa28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fa2c:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 801fa30:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa34:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa38:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa3c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa40:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa44:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa48:	ee12 2a90 	vmov	r2, s5
 801fa4c:	eef0 2a47 	vmov.f32	s5, s14
 801fa50:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa54:	ee13 2a10 	vmov	r2, s6
 801fa58:	9315      	str	r3, [sp, #84]	; 0x54
 801fa5a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fa5c:	eeb0 3a67 	vmov.f32	s6, s15
 801fa60:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa64:	9316      	str	r3, [sp, #88]	; 0x58
 801fa66:	9b02      	ldr	r3, [sp, #8]
 801fa68:	9a05      	ldr	r2, [sp, #20]
 801fa6a:	3b01      	subs	r3, #1
 801fa6c:	9302      	str	r3, [sp, #8]
 801fa6e:	bf08      	it	eq
 801fa70:	4692      	moveq	sl, r2
 801fa72:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801fa74:	bf18      	it	ne
 801fa76:	469a      	movne	sl, r3
 801fa78:	e751      	b.n	801f91e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fa7a:	140e      	asrs	r6, r1, #16
 801fa7c:	d426      	bmi.n	801facc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa7e:	f8db 3008 	ldr.w	r3, [fp, #8]
 801fa82:	42b3      	cmp	r3, r6
 801fa84:	dd22      	ble.n	801facc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa86:	9b01      	ldr	r3, [sp, #4]
 801fa88:	141f      	asrs	r7, r3, #16
 801fa8a:	d41f      	bmi.n	801facc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa8c:	f8db 300c 	ldr.w	r3, [fp, #12]
 801fa90:	42bb      	cmp	r3, r7
 801fa92:	dd1b      	ble.n	801facc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fa94:	9b03      	ldr	r3, [sp, #12]
 801fa96:	f894 8000 	ldrb.w	r8, [r4]
 801fa9a:	fb07 6603 	mla	r6, r7, r3, r6
 801fa9e:	9f04      	ldr	r7, [sp, #16]
 801faa0:	0873      	lsrs	r3, r6, #1
 801faa2:	07f6      	lsls	r6, r6, #31
 801faa4:	5cfb      	ldrb	r3, [r7, r3]
 801faa6:	bf54      	ite	pl
 801faa8:	f003 030f 	andpl.w	r3, r3, #15
 801faac:	111b      	asrmi	r3, r3, #4
 801faae:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fab2:	b2db      	uxtb	r3, r3
 801fab4:	2bff      	cmp	r3, #255	; 0xff
 801fab6:	d111      	bne.n	801fadc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 801fab8:	f06f 0303 	mvn.w	r3, #3
 801fabc:	436b      	muls	r3, r5
 801fabe:	f800 8003 	strb.w	r8, [r0, r3]
 801fac2:	4403      	add	r3, r0
 801fac4:	7866      	ldrb	r6, [r4, #1]
 801fac6:	705e      	strb	r6, [r3, #1]
 801fac8:	78a6      	ldrb	r6, [r4, #2]
 801faca:	709e      	strb	r6, [r3, #2]
 801facc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801face:	3d01      	subs	r5, #1
 801fad0:	9a01      	ldr	r2, [sp, #4]
 801fad2:	4419      	add	r1, r3
 801fad4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801fad6:	441a      	add	r2, r3
 801fad8:	9201      	str	r2, [sp, #4]
 801fada:	e788      	b.n	801f9ee <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801fadc:	2b00      	cmp	r3, #0
 801fade:	d0f5      	beq.n	801facc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fae0:	f06f 0203 	mvn.w	r2, #3
 801fae4:	78a6      	ldrb	r6, [r4, #2]
 801fae6:	fb18 f803 	smulbb	r8, r8, r3
 801faea:	fb02 f905 	mul.w	r9, r2, r5
 801faee:	9606      	str	r6, [sp, #24]
 801faf0:	eb00 0c09 	add.w	ip, r0, r9
 801faf4:	7866      	ldrb	r6, [r4, #1]
 801faf6:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801fafa:	9607      	str	r6, [sp, #28]
 801fafc:	fb03 f607 	mul.w	r6, r3, r7
 801fb00:	9a07      	ldr	r2, [sp, #28]
 801fb02:	f106 0e01 	add.w	lr, r6, #1
 801fb06:	eb0e 2e26 	add.w	lr, lr, r6, asr #8
 801fb0a:	18fe      	adds	r6, r7, r3
 801fb0c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fb10:	eba7 070e 	sub.w	r7, r7, lr
 801fb14:	eba6 060e 	sub.w	r6, r6, lr
 801fb18:	f810 e009 	ldrb.w	lr, [r0, r9]
 801fb1c:	b2f6      	uxtb	r6, r6
 801fb1e:	fb07 880e 	mla	r8, r7, lr, r8
 801fb22:	fb98 f8f6 	sdiv	r8, r8, r6
 801fb26:	f800 8009 	strb.w	r8, [r0, r9]
 801fb2a:	fb13 f902 	smulbb	r9, r3, r2
 801fb2e:	f89c e001 	ldrb.w	lr, [ip, #1]
 801fb32:	9a06      	ldr	r2, [sp, #24]
 801fb34:	fb07 990e 	mla	r9, r7, lr, r9
 801fb38:	f89c e002 	ldrb.w	lr, [ip, #2]
 801fb3c:	fb13 f302 	smulbb	r3, r3, r2
 801fb40:	f88c 6003 	strb.w	r6, [ip, #3]
 801fb44:	fb07 330e 	mla	r3, r7, lr, r3
 801fb48:	fb99 f9f6 	sdiv	r9, r9, r6
 801fb4c:	fb93 f3f6 	sdiv	r3, r3, r6
 801fb50:	f88c 9001 	strb.w	r9, [ip, #1]
 801fb54:	f88c 3002 	strb.w	r3, [ip, #2]
 801fb58:	e7b8      	b.n	801facc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	f43f af3c 	beq.w	801f9d8 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801fb60:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801fb64:	fb1e fe03 	smulbb	lr, lr, r3
 801fb68:	78a2      	ldrb	r2, [r4, #2]
 801fb6a:	fb03 fc09 	mul.w	ip, r3, r9
 801fb6e:	eb09 0603 	add.w	r6, r9, r3
 801fb72:	9206      	str	r2, [sp, #24]
 801fb74:	f10c 0701 	add.w	r7, ip, #1
 801fb78:	7862      	ldrb	r2, [r4, #1]
 801fb7a:	eb07 272c 	add.w	r7, r7, ip, asr #8
 801fb7e:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801fb82:	eba9 070c 	sub.w	r7, r9, ip
 801fb86:	eba6 060c 	sub.w	r6, r6, ip
 801fb8a:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801fb8e:	fb13 f902 	smulbb	r9, r3, r2
 801fb92:	9a06      	ldr	r2, [sp, #24]
 801fb94:	b2f6      	uxtb	r6, r6
 801fb96:	fb07 ee0c 	mla	lr, r7, ip, lr
 801fb9a:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801fb9e:	fb13 f302 	smulbb	r3, r3, r2
 801fba2:	f805 6c01 	strb.w	r6, [r5, #-1]
 801fba6:	fb07 990c 	mla	r9, r7, ip, r9
 801fbaa:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801fbae:	fb07 330c 	mla	r3, r7, ip, r3
 801fbb2:	fb9e fef6 	sdiv	lr, lr, r6
 801fbb6:	fb99 f9f6 	sdiv	r9, r9, r6
 801fbba:	fb93 f3f6 	sdiv	r3, r3, r6
 801fbbe:	f805 ec04 	strb.w	lr, [r5, #-4]
 801fbc2:	f805 9c03 	strb.w	r9, [r5, #-3]
 801fbc6:	f805 3c02 	strb.w	r3, [r5, #-2]
 801fbca:	e705      	b.n	801f9d8 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801fbcc:	b009      	add	sp, #36	; 0x24
 801fbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbd2:	bf00      	nop
 801fbd4:	2003bef0 	.word	0x2003bef0

0801fbd8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801fbd8:	4770      	bx	lr

0801fbda <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801fbda:	4770      	bx	lr

0801fbdc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801fbdc:	4770      	bx	lr

0801fbde <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801fbde:	4770      	bx	lr

0801fbe0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fbe0:	4770      	bx	lr

0801fbe2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fbe2:	4770      	bx	lr

0801fbe4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fbe4:	4770      	bx	lr

0801fbe6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801fbe6:	4770      	bx	lr

0801fbe8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fbe8:	4770      	bx	lr

0801fbea <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801fbea:	4770      	bx	lr

0801fbec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fbec:	4770      	bx	lr

0801fbee <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801fbee:	4770      	bx	lr

0801fbf0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fbf0:	4770      	bx	lr

0801fbf2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801fbf2:	4770      	bx	lr

0801fbf4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801fbf4:	4770      	bx	lr

0801fbf6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fbf6:	4770      	bx	lr

0801fbf8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801fbf8:	4770      	bx	lr

0801fbfa <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fbfa:	4770      	bx	lr

0801fbfc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801fbfc:	4770      	bx	lr

0801fbfe <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801fbfe:	4770      	bx	lr

0801fc00 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fc00:	4770      	bx	lr

0801fc02 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801fc02:	4770      	bx	lr

0801fc04 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fc04:	4770      	bx	lr

0801fc06 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801fc06:	4770      	bx	lr

0801fc08 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801fc08:	4770      	bx	lr

0801fc0a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801fc0a:	4770      	bx	lr

0801fc0c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 801fc0c:	4770      	bx	lr

0801fc0e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 801fc0e:	4770      	bx	lr

0801fc10 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801fc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc14:	b091      	sub	sp, #68	; 0x44
 801fc16:	460f      	mov	r7, r1
 801fc18:	4614      	mov	r4, r2
 801fc1a:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 801fc1e:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 801fc22:	f1b8 0f00 	cmp.w	r8, #0
 801fc26:	d054      	beq.n	801fcd2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 801fc28:	6810      	ldr	r0, [r2, #0]
 801fc2a:	ae0c      	add	r6, sp, #48	; 0x30
 801fc2c:	6851      	ldr	r1, [r2, #4]
 801fc2e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801fe04 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>
 801fc32:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 801fe08 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 801fc36:	c603      	stmia	r6!, {r0, r1}
 801fc38:	6818      	ldr	r0, [r3, #0]
 801fc3a:	ae0e      	add	r6, sp, #56	; 0x38
 801fc3c:	6859      	ldr	r1, [r3, #4]
 801fc3e:	c603      	stmia	r6!, {r0, r1}
 801fc40:	a80c      	add	r0, sp, #48	; 0x30
 801fc42:	f7fa f81b 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fc46:	4621      	mov	r1, r4
 801fc48:	a80e      	add	r0, sp, #56	; 0x38
 801fc4a:	f7fa f83f 	bl	8019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fc4e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801fc52:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801fc56:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801fc5a:	f8d9 0000 	ldr.w	r0, [r9]
 801fc5e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801fc62:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 801fc66:	eb07 0481 	add.w	r4, r7, r1, lsl #2
 801fc6a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 801fc6e:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 801fc72:	440a      	add	r2, r1
 801fc74:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 801fc78:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 801fc7c:	4413      	add	r3, r2
 801fc7e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801fc82:	6803      	ldr	r3, [r0, #0]
 801fc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fc86:	4798      	blx	r3
 801fc88:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fc8c:	d024      	beq.n	801fcd8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc8>
 801fc8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 801fc92:	f8d9 0000 	ldr.w	r0, [r9]
 801fc96:	d022      	beq.n	801fcde <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 801fc98:	2102      	movs	r1, #2
 801fc9a:	f04f 0e00 	mov.w	lr, #0
 801fc9e:	f8d0 c000 	ldr.w	ip, [r0]
 801fca2:	b2b6      	uxth	r6, r6
 801fca4:	9106      	str	r1, [sp, #24]
 801fca6:	b2bf      	uxth	r7, r7
 801fca8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801fcac:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801fcb0:	e9cd 1e07 	strd	r1, lr, [sp, #28]
 801fcb4:	f8ba 1000 	ldrh.w	r1, [sl]
 801fcb8:	f8cd 800c 	str.w	r8, [sp, #12]
 801fcbc:	9601      	str	r6, [sp, #4]
 801fcbe:	9700      	str	r7, [sp, #0]
 801fcc0:	e9cd 5104 	strd	r5, r1, [sp, #16]
 801fcc4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 801fcc8:	9102      	str	r1, [sp, #8]
 801fcca:	4621      	mov	r1, r4
 801fccc:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 801fcd0:	47a8      	blx	r5
 801fcd2:	b011      	add	sp, #68	; 0x44
 801fcd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcd8:	f010 0f20 	tst.w	r0, #32
 801fcdc:	e7d9      	b.n	801fc92 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 801fcde:	6803      	ldr	r3, [r0, #0]
 801fce0:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 801fce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fce6:	4798      	blx	r3
 801fce8:	f8ba c000 	ldrh.w	ip, [sl]
 801fcec:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 801fcf0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801fcf4:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 801fcf8:	fb0c f606 	mul.w	r6, ip, r6
 801fcfc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801fd00:	fb0c 2303 	mla	r3, ip, r3, r2
 801fd04:	ebac 0c07 	sub.w	ip, ip, r7
 801fd08:	eba9 0907 	sub.w	r9, r9, r7
 801fd0c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fd10:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801fd14:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801fd18:	ea4f 0989 	mov.w	r9, r9, lsl #2
 801fd1c:	d148      	bne.n	801fdb0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801fd1e:	2d00      	cmp	r5, #0
 801fd20:	d146      	bne.n	801fdb0 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 801fd22:	42b0      	cmp	r0, r6
 801fd24:	d268      	bcs.n	801fdf8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 801fd26:	eb00 020b 	add.w	r2, r0, fp
 801fd2a:	4290      	cmp	r0, r2
 801fd2c:	d204      	bcs.n	801fd38 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801fd2e:	f854 3b04 	ldr.w	r3, [r4], #4
 801fd32:	f840 3b04 	str.w	r3, [r0], #4
 801fd36:	e7f8      	b.n	801fd2a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11a>
 801fd38:	4460      	add	r0, ip
 801fd3a:	444c      	add	r4, r9
 801fd3c:	e7f1      	b.n	801fd22 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x112>
 801fd3e:	fb04 f70a 	mul.w	r7, r4, sl
 801fd42:	4454      	add	r4, sl
 801fd44:	1c7a      	adds	r2, r7, #1
 801fd46:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801fd4a:	1212      	asrs	r2, r2, #8
 801fd4c:	ebaa 0702 	sub.w	r7, sl, r2
 801fd50:	f3ce 4a07 	ubfx	sl, lr, #16, #8
 801fd54:	1aa4      	subs	r4, r4, r2
 801fd56:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801fd5a:	fb07 fa0a 	mul.w	sl, r7, sl
 801fd5e:	b2e4      	uxtb	r4, r4
 801fd60:	fb05 a202 	mla	r2, r5, r2, sl
 801fd64:	fa5f fa8e 	uxtb.w	sl, lr
 801fd68:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fd6c:	fb07 fa0a 	mul.w	sl, r7, sl
 801fd70:	fb07 fe0e 	mul.w	lr, r7, lr
 801fd74:	fbb2 f2f4 	udiv	r2, r2, r4
 801fd78:	0412      	lsls	r2, r2, #16
 801fd7a:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 801fd7e:	4611      	mov	r1, r2
 801fd80:	b2da      	uxtb	r2, r3
 801fd82:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fd86:	fb05 a202 	mla	r2, r5, r2, sl
 801fd8a:	fb05 e503 	mla	r5, r5, r3, lr
 801fd8e:	fbb2 f2f4 	udiv	r2, r2, r4
 801fd92:	b2d2      	uxtb	r2, r2
 801fd94:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 801fd98:	fbb5 f4f4 	udiv	r4, r5, r4
 801fd9c:	0224      	lsls	r4, r4, #8
 801fd9e:	430a      	orrs	r2, r1
 801fda0:	b2a4      	uxth	r4, r4
 801fda2:	4322      	orrs	r2, r4
 801fda4:	6002      	str	r2, [r0, #0]
 801fda6:	e025      	b.n	801fdf4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 801fda8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fdaa:	4460      	add	r0, ip
 801fdac:	444b      	add	r3, r9
 801fdae:	461c      	mov	r4, r3
 801fdb0:	42b0      	cmp	r0, r6
 801fdb2:	d221      	bcs.n	801fdf8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 801fdb4:	eb00 030b 	add.w	r3, r0, fp
 801fdb8:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
 801fdbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801fdbe:	4298      	cmp	r0, r3
 801fdc0:	d2f2      	bcs.n	801fda8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 801fdc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801fdc4:	f852 3b04 	ldr.w	r3, [r2], #4
 801fdc8:	0e1d      	lsrs	r5, r3, #24
 801fdca:	920a      	str	r2, [sp, #40]	; 0x28
 801fdcc:	fb05 f408 	mul.w	r4, r5, r8
 801fdd0:	1c65      	adds	r5, r4, #1
 801fdd2:	eb05 2524 	add.w	r5, r5, r4, asr #8
 801fdd6:	122d      	asrs	r5, r5, #8
 801fdd8:	d00c      	beq.n	801fdf4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 801fdda:	2dff      	cmp	r5, #255	; 0xff
 801fddc:	b2ec      	uxtb	r4, r5
 801fdde:	d004      	beq.n	801fdea <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1da>
 801fde0:	f8d0 e000 	ldr.w	lr, [r0]
 801fde4:	ea5f 6a1e 	movs.w	sl, lr, lsr #24
 801fde8:	d1a9      	bne.n	801fd3e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 801fdea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801fdee:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 801fdf2:	6005      	str	r5, [r0, #0]
 801fdf4:	3004      	adds	r0, #4
 801fdf6:	e7e1      	b.n	801fdbc <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ac>
 801fdf8:	4b02      	ldr	r3, [pc, #8]	; (801fe04 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>)
 801fdfa:	6818      	ldr	r0, [r3, #0]
 801fdfc:	6803      	ldr	r3, [r0, #0]
 801fdfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801fe00:	4798      	blx	r3
 801fe02:	e766      	b.n	801fcd2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 801fe04:	2003bee0 	.word	0x2003bee0
 801fe08:	2003beda 	.word	0x2003beda

0801fe0c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801fe0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801fe10:	2300      	movs	r3, #0
 801fe12:	9300      	str	r3, [sp, #0]
 801fe14:	4b3e      	ldr	r3, [pc, #248]	; (801ff10 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801fe16:	781b      	ldrb	r3, [r3, #0]
 801fe18:	2b00      	cmp	r3, #0
 801fe1a:	d137      	bne.n	801fe8c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 801fe1c:	4a3d      	ldr	r2, [pc, #244]	; (801ff14 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801fe1e:	f9b2 2000 	ldrsh.w	r2, [r2]
 801fe22:	f8ad 2004 	strh.w	r2, [sp, #4]
 801fe26:	2b00      	cmp	r3, #0
 801fe28:	d132      	bne.n	801fe90 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 801fe2a:	4b3b      	ldr	r3, [pc, #236]	; (801ff18 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801fe2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801fe30:	ac02      	add	r4, sp, #8
 801fe32:	6808      	ldr	r0, [r1, #0]
 801fe34:	f8ad 3006 	strh.w	r3, [sp, #6]
 801fe38:	ab02      	add	r3, sp, #8
 801fe3a:	6849      	ldr	r1, [r1, #4]
 801fe3c:	4d37      	ldr	r5, [pc, #220]	; (801ff1c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801fe3e:	c303      	stmia	r3!, {r0, r1}
 801fe40:	4669      	mov	r1, sp
 801fe42:	4620      	mov	r0, r4
 801fe44:	f7f9 ff42 	bl	8019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801fe48:	4668      	mov	r0, sp
 801fe4a:	f7f9 ff17 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801fe4e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801fe52:	f8bd 2000 	ldrh.w	r2, [sp]
 801fe56:	462f      	mov	r7, r5
 801fe58:	6828      	ldr	r0, [r5, #0]
 801fe5a:	4413      	add	r3, r2
 801fe5c:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801fe60:	f8ad 3008 	strh.w	r3, [sp, #8]
 801fe64:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801fe68:	4413      	add	r3, r2
 801fe6a:	f8ad 300a 	strh.w	r3, [sp, #10]
 801fe6e:	6803      	ldr	r3, [r0, #0]
 801fe70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe72:	4798      	blx	r3
 801fe74:	f010 0f01 	tst.w	r0, #1
 801fe78:	d00c      	beq.n	801fe94 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 801fe7a:	6828      	ldr	r0, [r5, #0]
 801fe7c:	6803      	ldr	r3, [r0, #0]
 801fe7e:	e894 0006 	ldmia.w	r4, {r1, r2}
 801fe82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801fe84:	4798      	blx	r3
 801fe86:	b004      	add	sp, #16
 801fe88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fe8c:	4a22      	ldr	r2, [pc, #136]	; (801ff18 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 801fe8e:	e7c6      	b.n	801fe1e <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801fe90:	4b20      	ldr	r3, [pc, #128]	; (801ff14 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801fe92:	e7cb      	b.n	801fe2c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801fe94:	6828      	ldr	r0, [r5, #0]
 801fe96:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 801fe9a:	6803      	ldr	r3, [r0, #0]
 801fe9c:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801fea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fea2:	4798      	blx	r3
 801fea4:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 801fea8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801feac:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 801feb0:	fb15 3404 	smlabb	r4, r5, r4, r3
 801feb4:	eba5 0508 	sub.w	r5, r5, r8
 801feb8:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 801febc:	6838      	ldr	r0, [r7, #0]
 801febe:	00ad      	lsls	r5, r5, #2
 801fec0:	6803      	ldr	r3, [r0, #0]
 801fec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801fec4:	4798      	blx	r3
 801fec6:	4b13      	ldr	r3, [pc, #76]	; (801ff14 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801fec8:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801fecc:	881a      	ldrh	r2, [r3, #0]
 801fece:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801fed2:	4356      	muls	r6, r2
 801fed4:	fb02 1303 	mla	r3, r2, r3, r1
 801fed8:	eba2 0208 	sub.w	r2, r2, r8
 801fedc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801fee0:	0092      	lsls	r2, r2, #2
 801fee2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801fee6:	ea4f 0388 	mov.w	r3, r8, lsl #2
 801feea:	42b0      	cmp	r0, r6
 801feec:	d20b      	bcs.n	801ff06 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 801feee:	eb00 0c03 	add.w	ip, r0, r3
 801fef2:	4560      	cmp	r0, ip
 801fef4:	d204      	bcs.n	801ff00 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xf4>
 801fef6:	f854 1b04 	ldr.w	r1, [r4], #4
 801fefa:	f840 1b04 	str.w	r1, [r0], #4
 801fefe:	e7f8      	b.n	801fef2 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xe6>
 801ff00:	4410      	add	r0, r2
 801ff02:	442c      	add	r4, r5
 801ff04:	e7f1      	b.n	801feea <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801ff06:	6838      	ldr	r0, [r7, #0]
 801ff08:	6803      	ldr	r3, [r0, #0]
 801ff0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ff0c:	4798      	blx	r3
 801ff0e:	e7ba      	b.n	801fe86 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801ff10:	2003bed8 	.word	0x2003bed8
 801ff14:	2003beda 	.word	0x2003beda
 801ff18:	2003bedc 	.word	0x2003bedc
 801ff1c:	2003bee0 	.word	0x2003bee0

0801ff20 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801ff20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff24:	b089      	sub	sp, #36	; 0x24
 801ff26:	4607      	mov	r7, r0
 801ff28:	4689      	mov	r9, r1
 801ff2a:	4692      	mov	sl, r2
 801ff2c:	ac08      	add	r4, sp, #32
 801ff2e:	461e      	mov	r6, r3
 801ff30:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801ff34:	4620      	mov	r0, r4
 801ff36:	f7fd fa2b 	bl	801d390 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ff3a:	683b      	ldr	r3, [r7, #0]
 801ff3c:	4605      	mov	r5, r0
 801ff3e:	4620      	mov	r0, r4
 801ff40:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801ff44:	f7fd f984 	bl	801d250 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ff48:	4683      	mov	fp, r0
 801ff4a:	4620      	mov	r0, r4
 801ff4c:	f7fd f9b4 	bl	801d2b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ff50:	4653      	mov	r3, sl
 801ff52:	464a      	mov	r2, r9
 801ff54:	4639      	mov	r1, r7
 801ff56:	9500      	str	r5, [sp, #0]
 801ff58:	e9cd b001 	strd	fp, r0, [sp, #4]
 801ff5c:	a806      	add	r0, sp, #24
 801ff5e:	47c0      	blx	r8
 801ff60:	a906      	add	r1, sp, #24
 801ff62:	4630      	mov	r0, r6
 801ff64:	f7fd f858 	bl	801d018 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801ff68:	4628      	mov	r0, r5
 801ff6a:	b009      	add	sp, #36	; 0x24
 801ff6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ff70 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ff70:	b510      	push	{r4, lr}
 801ff72:	4604      	mov	r4, r0
 801ff74:	2104      	movs	r1, #4
 801ff76:	f008 fe99 	bl	8028cac <_ZdlPvj>
 801ff7a:	4620      	mov	r0, r4
 801ff7c:	bd10      	pop	{r4, pc}

0801ff7e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 801ff7e:	b510      	push	{r4, lr}
 801ff80:	4604      	mov	r4, r0
 801ff82:	2104      	movs	r1, #4
 801ff84:	f008 fe92 	bl	8028cac <_ZdlPvj>
 801ff88:	4620      	mov	r0, r4
 801ff8a:	bd10      	pop	{r4, pc}

0801ff8c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ff8c:	b510      	push	{r4, lr}
 801ff8e:	4604      	mov	r4, r0
 801ff90:	2104      	movs	r1, #4
 801ff92:	f008 fe8b 	bl	8028cac <_ZdlPvj>
 801ff96:	4620      	mov	r0, r4
 801ff98:	bd10      	pop	{r4, pc}

0801ff9a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 801ff9a:	b510      	push	{r4, lr}
 801ff9c:	4604      	mov	r4, r0
 801ff9e:	2104      	movs	r1, #4
 801ffa0:	f008 fe84 	bl	8028cac <_ZdlPvj>
 801ffa4:	4620      	mov	r0, r4
 801ffa6:	bd10      	pop	{r4, pc}

0801ffa8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801ffa8:	b510      	push	{r4, lr}
 801ffaa:	4604      	mov	r4, r0
 801ffac:	2104      	movs	r1, #4
 801ffae:	f008 fe7d 	bl	8028cac <_ZdlPvj>
 801ffb2:	4620      	mov	r0, r4
 801ffb4:	bd10      	pop	{r4, pc}

0801ffb6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801ffb6:	b510      	push	{r4, lr}
 801ffb8:	4604      	mov	r4, r0
 801ffba:	2104      	movs	r1, #4
 801ffbc:	f008 fe76 	bl	8028cac <_ZdlPvj>
 801ffc0:	4620      	mov	r0, r4
 801ffc2:	bd10      	pop	{r4, pc}

0801ffc4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801ffc4:	b510      	push	{r4, lr}
 801ffc6:	4604      	mov	r4, r0
 801ffc8:	2104      	movs	r1, #4
 801ffca:	f008 fe6f 	bl	8028cac <_ZdlPvj>
 801ffce:	4620      	mov	r0, r4
 801ffd0:	bd10      	pop	{r4, pc}

0801ffd2 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801ffd2:	b510      	push	{r4, lr}
 801ffd4:	4604      	mov	r4, r0
 801ffd6:	2104      	movs	r1, #4
 801ffd8:	f008 fe68 	bl	8028cac <_ZdlPvj>
 801ffdc:	4620      	mov	r0, r4
 801ffde:	bd10      	pop	{r4, pc}

0801ffe0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801ffe0:	b510      	push	{r4, lr}
 801ffe2:	4604      	mov	r4, r0
 801ffe4:	2104      	movs	r1, #4
 801ffe6:	f008 fe61 	bl	8028cac <_ZdlPvj>
 801ffea:	4620      	mov	r0, r4
 801ffec:	bd10      	pop	{r4, pc}

0801ffee <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801ffee:	b510      	push	{r4, lr}
 801fff0:	4604      	mov	r4, r0
 801fff2:	2104      	movs	r1, #4
 801fff4:	f008 fe5a 	bl	8028cac <_ZdlPvj>
 801fff8:	4620      	mov	r0, r4
 801fffa:	bd10      	pop	{r4, pc}

0801fffc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801fffc:	b510      	push	{r4, lr}
 801fffe:	4604      	mov	r4, r0
 8020000:	2104      	movs	r1, #4
 8020002:	f008 fe53 	bl	8028cac <_ZdlPvj>
 8020006:	4620      	mov	r0, r4
 8020008:	bd10      	pop	{r4, pc}

0802000a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 802000a:	b510      	push	{r4, lr}
 802000c:	4604      	mov	r4, r0
 802000e:	2104      	movs	r1, #4
 8020010:	f008 fe4c 	bl	8028cac <_ZdlPvj>
 8020014:	4620      	mov	r0, r4
 8020016:	bd10      	pop	{r4, pc}

08020018 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020018:	b510      	push	{r4, lr}
 802001a:	4604      	mov	r4, r0
 802001c:	2104      	movs	r1, #4
 802001e:	f008 fe45 	bl	8028cac <_ZdlPvj>
 8020022:	4620      	mov	r0, r4
 8020024:	bd10      	pop	{r4, pc}

08020026 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020026:	b510      	push	{r4, lr}
 8020028:	4604      	mov	r4, r0
 802002a:	2104      	movs	r1, #4
 802002c:	f008 fe3e 	bl	8028cac <_ZdlPvj>
 8020030:	4620      	mov	r0, r4
 8020032:	bd10      	pop	{r4, pc}

08020034 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020034:	b510      	push	{r4, lr}
 8020036:	4604      	mov	r4, r0
 8020038:	2104      	movs	r1, #4
 802003a:	f008 fe37 	bl	8028cac <_ZdlPvj>
 802003e:	4620      	mov	r0, r4
 8020040:	bd10      	pop	{r4, pc}

08020042 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020042:	b510      	push	{r4, lr}
 8020044:	4604      	mov	r4, r0
 8020046:	2104      	movs	r1, #4
 8020048:	f008 fe30 	bl	8028cac <_ZdlPvj>
 802004c:	4620      	mov	r0, r4
 802004e:	bd10      	pop	{r4, pc}

08020050 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020050:	b510      	push	{r4, lr}
 8020052:	4604      	mov	r4, r0
 8020054:	2104      	movs	r1, #4
 8020056:	f008 fe29 	bl	8028cac <_ZdlPvj>
 802005a:	4620      	mov	r0, r4
 802005c:	bd10      	pop	{r4, pc}

0802005e <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 802005e:	b510      	push	{r4, lr}
 8020060:	4604      	mov	r4, r0
 8020062:	2104      	movs	r1, #4
 8020064:	f008 fe22 	bl	8028cac <_ZdlPvj>
 8020068:	4620      	mov	r0, r4
 802006a:	bd10      	pop	{r4, pc}

0802006c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 802006c:	b510      	push	{r4, lr}
 802006e:	4604      	mov	r4, r0
 8020070:	2104      	movs	r1, #4
 8020072:	f008 fe1b 	bl	8028cac <_ZdlPvj>
 8020076:	4620      	mov	r0, r4
 8020078:	bd10      	pop	{r4, pc}

0802007a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 802007a:	b510      	push	{r4, lr}
 802007c:	4604      	mov	r4, r0
 802007e:	2104      	movs	r1, #4
 8020080:	f008 fe14 	bl	8028cac <_ZdlPvj>
 8020084:	4620      	mov	r0, r4
 8020086:	bd10      	pop	{r4, pc}

08020088 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020088:	b510      	push	{r4, lr}
 802008a:	4604      	mov	r4, r0
 802008c:	2104      	movs	r1, #4
 802008e:	f008 fe0d 	bl	8028cac <_ZdlPvj>
 8020092:	4620      	mov	r0, r4
 8020094:	bd10      	pop	{r4, pc}

08020096 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020096:	b510      	push	{r4, lr}
 8020098:	4604      	mov	r4, r0
 802009a:	2104      	movs	r1, #4
 802009c:	f008 fe06 	bl	8028cac <_ZdlPvj>
 80200a0:	4620      	mov	r0, r4
 80200a2:	bd10      	pop	{r4, pc}

080200a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80200a4:	b510      	push	{r4, lr}
 80200a6:	4604      	mov	r4, r0
 80200a8:	2104      	movs	r1, #4
 80200aa:	f008 fdff 	bl	8028cac <_ZdlPvj>
 80200ae:	4620      	mov	r0, r4
 80200b0:	bd10      	pop	{r4, pc}

080200b2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80200b2:	b510      	push	{r4, lr}
 80200b4:	4604      	mov	r4, r0
 80200b6:	2104      	movs	r1, #4
 80200b8:	f008 fdf8 	bl	8028cac <_ZdlPvj>
 80200bc:	4620      	mov	r0, r4
 80200be:	bd10      	pop	{r4, pc}

080200c0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 80200c0:	b510      	push	{r4, lr}
 80200c2:	4604      	mov	r4, r0
 80200c4:	2104      	movs	r1, #4
 80200c6:	f008 fdf1 	bl	8028cac <_ZdlPvj>
 80200ca:	4620      	mov	r0, r4
 80200cc:	bd10      	pop	{r4, pc}

080200ce <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 80200ce:	b510      	push	{r4, lr}
 80200d0:	4604      	mov	r4, r0
 80200d2:	2104      	movs	r1, #4
 80200d4:	f008 fdea 	bl	8028cac <_ZdlPvj>
 80200d8:	4620      	mov	r0, r4
 80200da:	bd10      	pop	{r4, pc}

080200dc <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80200dc:	b510      	push	{r4, lr}
 80200de:	4604      	mov	r4, r0
 80200e0:	2104      	movs	r1, #4
 80200e2:	f008 fde3 	bl	8028cac <_ZdlPvj>
 80200e6:	4620      	mov	r0, r4
 80200e8:	bd10      	pop	{r4, pc}

080200ea <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80200ea:	b510      	push	{r4, lr}
 80200ec:	4604      	mov	r4, r0
 80200ee:	2104      	movs	r1, #4
 80200f0:	f008 fddc 	bl	8028cac <_ZdlPvj>
 80200f4:	4620      	mov	r0, r4
 80200f6:	bd10      	pop	{r4, pc}

080200f8 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 80200f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80200fa:	4606      	mov	r6, r0
 80200fc:	b087      	sub	sp, #28
 80200fe:	4615      	mov	r5, r2
 8020100:	461f      	mov	r7, r3
 8020102:	b353      	cbz	r3, 802015a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020104:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020108:	2b00      	cmp	r3, #0
 802010a:	dd26      	ble.n	802015a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802010c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020110:	2b00      	cmp	r3, #0
 8020112:	dd22      	ble.n	802015a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020114:	6808      	ldr	r0, [r1, #0]
 8020116:	aa04      	add	r2, sp, #16
 8020118:	6849      	ldr	r1, [r1, #4]
 802011a:	4c1b      	ldr	r4, [pc, #108]	; (8020188 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 802011c:	c203      	stmia	r2!, {r0, r1}
 802011e:	a804      	add	r0, sp, #16
 8020120:	f7f9 fdac 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020124:	6820      	ldr	r0, [r4, #0]
 8020126:	6803      	ldr	r3, [r0, #0]
 8020128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802012a:	4798      	blx	r3
 802012c:	2fff      	cmp	r7, #255	; 0xff
 802012e:	d016      	beq.n	802015e <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8020130:	f010 0f08 	tst.w	r0, #8
 8020134:	6820      	ldr	r0, [r4, #0]
 8020136:	d015      	beq.n	8020164 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8020138:	2400      	movs	r4, #0
 802013a:	6801      	ldr	r1, [r0, #0]
 802013c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8020140:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8020144:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8020148:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802014c:	9401      	str	r4, [sp, #4]
 802014e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8020152:	9400      	str	r4, [sp, #0]
 8020154:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8020156:	4629      	mov	r1, r5
 8020158:	47a0      	blx	r4
 802015a:	b007      	add	sp, #28
 802015c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802015e:	f010 0f02 	tst.w	r0, #2
 8020162:	e7e7      	b.n	8020134 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 8020164:	6803      	ldr	r3, [r0, #0]
 8020166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020168:	4798      	blx	r3
 802016a:	4b08      	ldr	r3, [pc, #32]	; (802018c <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 802016c:	4601      	mov	r1, r0
 802016e:	4630      	mov	r0, r6
 8020170:	881a      	ldrh	r2, [r3, #0]
 8020172:	6833      	ldr	r3, [r6, #0]
 8020174:	e9cd 5700 	strd	r5, r7, [sp]
 8020178:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 802017a:	ab04      	add	r3, sp, #16
 802017c:	47a8      	blx	r5
 802017e:	6820      	ldr	r0, [r4, #0]
 8020180:	6803      	ldr	r3, [r0, #0]
 8020182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020184:	4798      	blx	r3
 8020186:	e7e8      	b.n	802015a <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8020188:	2003bee0 	.word	0x2003bee0
 802018c:	2003beda 	.word	0x2003beda

08020190 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8020190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020194:	b08d      	sub	sp, #52	; 0x34
 8020196:	469b      	mov	fp, r3
 8020198:	4617      	mov	r7, r2
 802019a:	f9b3 2000 	ldrsh.w	r2, [r3]
 802019e:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
 80201a2:	4605      	mov	r5, r0
 80201a4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80201a8:	a806      	add	r0, sp, #24
 80201aa:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	; 0x60
 80201ae:	460c      	mov	r4, r1
 80201b0:	4659      	mov	r1, fp
 80201b2:	f8ad 2018 	strh.w	r2, [sp, #24]
 80201b6:	f8ad 301a 	strh.w	r3, [sp, #26]
 80201ba:	f8ad a01c 	strh.w	sl, [sp, #28]
 80201be:	f8ad 601e 	strh.w	r6, [sp, #30]
 80201c2:	f7f5 f9ef 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 80201c6:	4639      	mov	r1, r7
 80201c8:	a806      	add	r0, sp, #24
 80201ca:	f7f5 f9eb 	bl	80155a4 <_ZN8touchgfx4RectaNERKS0_>
 80201ce:	4b74      	ldr	r3, [pc, #464]	; (80203a0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x210>)
 80201d0:	f8b3 9000 	ldrh.w	r9, [r3]
 80201d4:	4b73      	ldr	r3, [pc, #460]	; (80203a4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 80201d6:	fa0f f289 	sxth.w	r2, r9
 80201da:	8819      	ldrh	r1, [r3, #0]
 80201dc:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80201e0:	b208      	sxth	r0, r1
 80201e2:	2b00      	cmp	r3, #0
 80201e4:	da07      	bge.n	80201f6 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 80201e6:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 80201ea:	443b      	add	r3, r7
 80201ec:	f8ad 301c 	strh.w	r3, [sp, #28]
 80201f0:	2300      	movs	r3, #0
 80201f2:	f8ad 3018 	strh.w	r3, [sp, #24]
 80201f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80201fa:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 80201fe:	1ad2      	subs	r2, r2, r3
 8020200:	4297      	cmp	r7, r2
 8020202:	bfc4      	itt	gt
 8020204:	eba9 0203 	subgt.w	r2, r9, r3
 8020208:	f8ad 201c 	strhgt.w	r2, [sp, #28]
 802020c:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8020210:	2a00      	cmp	r2, #0
 8020212:	da07      	bge.n	8020224 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 8020214:	f8bd 701e 	ldrh.w	r7, [sp, #30]
 8020218:	443a      	add	r2, r7
 802021a:	f8ad 201e 	strh.w	r2, [sp, #30]
 802021e:	2200      	movs	r2, #0
 8020220:	f8ad 201a 	strh.w	r2, [sp, #26]
 8020224:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8020228:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 802022c:	1a80      	subs	r0, r0, r2
 802022e:	4287      	cmp	r7, r0
 8020230:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8020234:	bfc4      	itt	gt
 8020236:	1a88      	subgt	r0, r1, r2
 8020238:	f8ad 001e 	strhgt.w	r0, [sp, #30]
 802023c:	485a      	ldr	r0, [pc, #360]	; (80203a8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 802023e:	7800      	ldrb	r0, [r0, #0]
 8020240:	2800      	cmp	r0, #0
 8020242:	f040 8082 	bne.w	802034a <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ba>
 8020246:	454f      	cmp	r7, r9
 8020248:	bf14      	ite	ne
 802024a:	f04f 0900 	movne.w	r9, #0
 802024e:	f04f 0901 	moveq.w	r9, #1
 8020252:	2f00      	cmp	r7, #0
 8020254:	dd7d      	ble.n	8020352 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8020256:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 802025a:	f1b8 0f00 	cmp.w	r8, #0
 802025e:	dd78      	ble.n	8020352 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 8020260:	f8bb 1000 	ldrh.w	r1, [fp]
 8020264:	a808      	add	r0, sp, #32
 8020266:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
 802026a:	1a5b      	subs	r3, r3, r1
 802026c:	a90a      	add	r1, sp, #40	; 0x28
 802026e:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
 8020272:	b21b      	sxth	r3, r3
 8020274:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 8020278:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 802027c:	9302      	str	r3, [sp, #8]
 802027e:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8020282:	1ad2      	subs	r2, r2, r3
 8020284:	b213      	sxth	r3, r2
 8020286:	9303      	str	r3, [sp, #12]
 8020288:	9b02      	ldr	r3, [sp, #8]
 802028a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802028e:	9b03      	ldr	r3, [sp, #12]
 8020290:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8020294:	2300      	movs	r3, #0
 8020296:	930a      	str	r3, [sp, #40]	; 0x28
 8020298:	f7f9 fd18 	bl	8019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802029c:	a806      	add	r0, sp, #24
 802029e:	f7f9 fced 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80202a2:	a80a      	add	r0, sp, #40	; 0x28
 80202a4:	f7f9 fcea 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80202a8:	4b40      	ldr	r3, [pc, #256]	; (80203ac <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80202aa:	4620      	mov	r0, r4
 80202ac:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 80202b0:	881a      	ldrh	r2, [r3, #0]
 80202b2:	6823      	ldr	r3, [r4, #0]
 80202b4:	9205      	str	r2, [sp, #20]
 80202b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80202b8:	4798      	blx	r3
 80202ba:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 80202be:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80202c2:	f3c0 0b8f 	ubfx	fp, r0, #2, #16
 80202c6:	fb1a 3304 	smlabb	r3, sl, r4, r3
 80202ca:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80202cc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80202d0:	4b37      	ldr	r3, [pc, #220]	; (80203b0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 80202d2:	6818      	ldr	r0, [r3, #0]
 80202d4:	9304      	str	r3, [sp, #16]
 80202d6:	6801      	ldr	r1, [r0, #0]
 80202d8:	6b09      	ldr	r1, [r1, #48]	; 0x30
 80202da:	4788      	blx	r1
 80202dc:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 80202e0:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 80202e4:	fb0b 1606 	mla	r6, fp, r6, r1
 80202e8:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 80202ec:	9301      	str	r3, [sp, #4]
 80202ee:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80202f2:	f1b9 0f00 	cmp.w	r9, #0
 80202f6:	d135      	bne.n	8020364 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d4>
 80202f8:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80202fc:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8020300:	f04f 0900 	mov.w	r9, #0
 8020304:	ebaa 0a03 	sub.w	sl, sl, r3
 8020308:	ea4f 038a 	mov.w	r3, sl, lsl #2
 802030c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 80203b0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>
 8020310:	9304      	str	r3, [sp, #16]
 8020312:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8020316:	454b      	cmp	r3, r9
 8020318:	dd32      	ble.n	8020380 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 802031a:	f8da 0000 	ldr.w	r0, [sl]
 802031e:	4621      	mov	r1, r4
 8020320:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020324:	6802      	ldr	r2, [r0, #0]
 8020326:	009b      	lsls	r3, r3, #2
 8020328:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802032a:	4616      	mov	r6, r2
 802032c:	9a01      	ldr	r2, [sp, #4]
 802032e:	47b0      	blx	r6
 8020330:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8020334:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8020338:	4294      	cmp	r4, r2
 802033a:	d229      	bcs.n	8020390 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x200>
 802033c:	f854 3b04 	ldr.w	r3, [r4], #4
 8020340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8020344:	f844 3c04 	str.w	r3, [r4, #-4]
 8020348:	e7f6      	b.n	8020338 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 802034a:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 802034e:	4589      	cmp	r9, r1
 8020350:	e77a      	b.n	8020248 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 8020352:	2300      	movs	r3, #0
 8020354:	802b      	strh	r3, [r5, #0]
 8020356:	806b      	strh	r3, [r5, #2]
 8020358:	80ab      	strh	r3, [r5, #4]
 802035a:	80eb      	strh	r3, [r5, #6]
 802035c:	4628      	mov	r0, r5
 802035e:	b00d      	add	sp, #52	; 0x34
 8020360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020364:	4592      	cmp	sl, r2
 8020366:	d1c7      	bne.n	80202f8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x168>
 8020368:	6818      	ldr	r0, [r3, #0]
 802036a:	4621      	mov	r1, r4
 802036c:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8020370:	6802      	ldr	r2, [r0, #0]
 8020372:	fb0b f303 	mul.w	r3, fp, r3
 8020376:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 802037a:	009b      	lsls	r3, r3, #2
 802037c:	9a01      	ldr	r2, [sp, #4]
 802037e:	47c8      	blx	r9
 8020380:	9b02      	ldr	r3, [sp, #8]
 8020382:	80af      	strh	r7, [r5, #4]
 8020384:	802b      	strh	r3, [r5, #0]
 8020386:	9b03      	ldr	r3, [sp, #12]
 8020388:	f8a5 8006 	strh.w	r8, [r5, #6]
 802038c:	806b      	strh	r3, [r5, #2]
 802038e:	e7e5      	b.n	802035c <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1cc>
 8020390:	9b01      	ldr	r3, [sp, #4]
 8020392:	f109 0901 	add.w	r9, r9, #1
 8020396:	445b      	add	r3, fp
 8020398:	9301      	str	r3, [sp, #4]
 802039a:	9b04      	ldr	r3, [sp, #16]
 802039c:	441c      	add	r4, r3
 802039e:	e7b8      	b.n	8020312 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x182>
 80203a0:	2003bed4 	.word	0x2003bed4
 80203a4:	2003bed6 	.word	0x2003bed6
 80203a8:	2003bed8 	.word	0x2003bed8
 80203ac:	2003beda 	.word	0x2003beda
 80203b0:	2003bee0 	.word	0x2003bee0

080203b4 <_ZN8touchgfx8LCD32bppC1Ev>:
 80203b4:	2200      	movs	r2, #0
 80203b6:	4910      	ldr	r1, [pc, #64]	; (80203f8 <_ZN8touchgfx8LCD32bppC1Ev+0x44>)
 80203b8:	6042      	str	r2, [r0, #4]
 80203ba:	6001      	str	r1, [r0, #0]
 80203bc:	e9c0 2202 	strd	r2, r2, [r0, #8]
 80203c0:	e9c0 2204 	strd	r2, r2, [r0, #16]
 80203c4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 80203c8:	e9c0 2208 	strd	r2, r2, [r0, #32]
 80203cc:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 80203d0:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 80203d4:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 80203d8:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 80203dc:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 80203e0:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 80203e4:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 80203e8:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 80203ec:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 80203f0:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 80203f4:	4770      	bx	lr
 80203f6:	bf00      	nop
 80203f8:	0802fc28 	.word	0x0802fc28

080203fc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>:
 80203fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020400:	4604      	mov	r4, r0
 8020402:	b08f      	sub	sp, #60	; 0x3c
 8020404:	460d      	mov	r5, r1
 8020406:	461e      	mov	r6, r3
 8020408:	2b00      	cmp	r3, #0
 802040a:	d052      	beq.n	80204b2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 802040c:	6808      	ldr	r0, [r1, #0]
 802040e:	ab0a      	add	r3, sp, #40	; 0x28
 8020410:	6849      	ldr	r1, [r1, #4]
 8020412:	4f70      	ldr	r7, [pc, #448]	; (80205d4 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8020414:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 80205d8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1dc>
 8020418:	c303      	stmia	r3!, {r0, r1}
 802041a:	6810      	ldr	r0, [r2, #0]
 802041c:	ab0c      	add	r3, sp, #48	; 0x30
 802041e:	6851      	ldr	r1, [r2, #4]
 8020420:	c303      	stmia	r3!, {r0, r1}
 8020422:	a80a      	add	r0, sp, #40	; 0x28
 8020424:	f7f9 fc2a 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020428:	4629      	mov	r1, r5
 802042a:	a80c      	add	r0, sp, #48	; 0x30
 802042c:	f7f9 fc4e 	bl	8019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020430:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8020434:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8020438:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802043c:	6838      	ldr	r0, [r7, #0]
 802043e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020442:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8020446:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	; 0x36
 802044a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802044e:	440c      	add	r4, r1
 8020450:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8020454:	440a      	add	r2, r1
 8020456:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 802045a:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 802045e:	4413      	add	r3, r2
 8020460:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020464:	6803      	ldr	r3, [r0, #0]
 8020466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020468:	4798      	blx	r3
 802046a:	2eff      	cmp	r6, #255	; 0xff
 802046c:	d024      	beq.n	80204b8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xbc>
 802046e:	f010 0f04 	tst.w	r0, #4
 8020472:	6838      	ldr	r0, [r7, #0]
 8020474:	d023      	beq.n	80204be <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xc2>
 8020476:	2100      	movs	r1, #0
 8020478:	f04f 0c02 	mov.w	ip, #2
 802047c:	6807      	ldr	r7, [r0, #0]
 802047e:	b2ad      	uxth	r5, r5
 8020480:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8020484:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8020488:	e9cd c107 	strd	ip, r1, [sp, #28]
 802048c:	f04f 0c01 	mov.w	ip, #1
 8020490:	f8cd c018 	str.w	ip, [sp, #24]
 8020494:	f8b9 c000 	ldrh.w	ip, [r9]
 8020498:	9603      	str	r6, [sp, #12]
 802049a:	9501      	str	r5, [sp, #4]
 802049c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80204a0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80204a4:	9102      	str	r1, [sp, #8]
 80204a6:	fa1f f188 	uxth.w	r1, r8
 80204aa:	9100      	str	r1, [sp, #0]
 80204ac:	4621      	mov	r1, r4
 80204ae:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80204b0:	47a8      	blx	r5
 80204b2:	b00f      	add	sp, #60	; 0x3c
 80204b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80204b8:	f010 0f01 	tst.w	r0, #1
 80204bc:	e7d9      	b.n	8020472 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x76>
 80204be:	6803      	ldr	r3, [r0, #0]
 80204c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80204c2:	4798      	blx	r3
 80204c4:	f8b9 3000 	ldrh.w	r3, [r9]
 80204c8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80204cc:	2eff      	cmp	r6, #255	; 0xff
 80204ce:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 80204d2:	fb03 f505 	mul.w	r5, r3, r5
 80204d6:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 80204da:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 80204de:	fb03 1202 	mla	r2, r3, r2, r1
 80204e2:	eba3 0308 	sub.w	r3, r3, r8
 80204e6:	eba7 0708 	sub.w	r7, r7, r8
 80204ea:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80204ee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80204f2:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80204f6:	ea4f 0383 	mov.w	r3, r3, lsl #2
 80204fa:	d04c      	beq.n	8020596 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x19a>
 80204fc:	42a8      	cmp	r0, r5
 80204fe:	d263      	bcs.n	80205c8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8020500:	eb00 0e0c 	add.w	lr, r0, ip
 8020504:	4621      	mov	r1, r4
 8020506:	4570      	cmp	r0, lr
 8020508:	460c      	mov	r4, r1
 802050a:	f101 0103 	add.w	r1, r1, #3
 802050e:	d23d      	bcs.n	802058c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x190>
 8020510:	6802      	ldr	r2, [r0, #0]
 8020512:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8020516:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802051a:	fb1b fb06 	smulbb	fp, fp, r6
 802051e:	fa5f fa82 	uxtb.w	sl, r2
 8020522:	fb06 f809 	mul.w	r8, r6, r9
 8020526:	f108 0401 	add.w	r4, r8, #1
 802052a:	eb04 2428 	add.w	r4, r4, r8, asr #8
 802052e:	eb06 0809 	add.w	r8, r6, r9
 8020532:	1224      	asrs	r4, r4, #8
 8020534:	eba9 0904 	sub.w	r9, r9, r4
 8020538:	eba8 0804 	sub.w	r8, r8, r4
 802053c:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 8020540:	fb09 fa0a 	mul.w	sl, r9, sl
 8020544:	fa5f f888 	uxtb.w	r8, r8
 8020548:	fb04 a406 	mla	r4, r4, r6, sl
 802054c:	fbb4 f4f8 	udiv	r4, r4, r8
 8020550:	b2e4      	uxtb	r4, r4
 8020552:	ea44 6a08 	orr.w	sl, r4, r8, lsl #24
 8020556:	f3c2 4407 	ubfx	r4, r2, #16, #8
 802055a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802055e:	fb09 b404 	mla	r4, r9, r4, fp
 8020562:	fbb4 f4f8 	udiv	r4, r4, r8
 8020566:	0424      	lsls	r4, r4, #16
 8020568:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 802056c:	ea4a 0404 	orr.w	r4, sl, r4
 8020570:	f811 ac02 	ldrb.w	sl, [r1, #-2]
 8020574:	fb1a fa06 	smulbb	sl, sl, r6
 8020578:	fb09 a202 	mla	r2, r9, r2, sl
 802057c:	fbb2 f2f8 	udiv	r2, r2, r8
 8020580:	0212      	lsls	r2, r2, #8
 8020582:	b292      	uxth	r2, r2
 8020584:	4322      	orrs	r2, r4
 8020586:	f840 2b04 	str.w	r2, [r0], #4
 802058a:	e7bc      	b.n	8020506 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x10a>
 802058c:	4418      	add	r0, r3
 802058e:	443c      	add	r4, r7
 8020590:	e7b4      	b.n	80204fc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x100>
 8020592:	4418      	add	r0, r3
 8020594:	443c      	add	r4, r7
 8020596:	42a8      	cmp	r0, r5
 8020598:	d216      	bcs.n	80205c8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 802059a:	eb00 060c 	add.w	r6, r0, ip
 802059e:	4621      	mov	r1, r4
 80205a0:	42b0      	cmp	r0, r6
 80205a2:	460c      	mov	r4, r1
 80205a4:	f101 0103 	add.w	r1, r1, #3
 80205a8:	d2f3      	bcs.n	8020592 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x196>
 80205aa:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80205ae:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 80205b2:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80205b6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80205ba:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 80205be:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80205c2:	f840 2b04 	str.w	r2, [r0], #4
 80205c6:	e7eb      	b.n	80205a0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1a4>
 80205c8:	4b02      	ldr	r3, [pc, #8]	; (80205d4 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 80205ca:	6818      	ldr	r0, [r3, #0]
 80205cc:	6803      	ldr	r3, [r0, #0]
 80205ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80205d0:	4798      	blx	r3
 80205d2:	e76e      	b.n	80204b2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 80205d4:	2003bee0 	.word	0x2003bee0
 80205d8:	2003beda 	.word	0x2003beda

080205dc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 80205dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205e0:	4607      	mov	r7, r0
 80205e2:	b091      	sub	sp, #68	; 0x44
 80205e4:	460c      	mov	r4, r1
 80205e6:	4698      	mov	r8, r3
 80205e8:	2b00      	cmp	r3, #0
 80205ea:	d04f      	beq.n	802068c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 80205ec:	6808      	ldr	r0, [r1, #0]
 80205ee:	ab0c      	add	r3, sp, #48	; 0x30
 80205f0:	6849      	ldr	r1, [r1, #4]
 80205f2:	4e7e      	ldr	r6, [pc, #504]	; (80207ec <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 80205f4:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80207f0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x214>
 80205f8:	c303      	stmia	r3!, {r0, r1}
 80205fa:	6810      	ldr	r0, [r2, #0]
 80205fc:	ab0e      	add	r3, sp, #56	; 0x38
 80205fe:	6851      	ldr	r1, [r2, #4]
 8020600:	c303      	stmia	r3!, {r0, r1}
 8020602:	a80c      	add	r0, sp, #48	; 0x30
 8020604:	f7f9 fb3a 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020608:	4621      	mov	r1, r4
 802060a:	a80e      	add	r0, sp, #56	; 0x38
 802060c:	f7f9 fb5e 	bl	8019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020610:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020614:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020618:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802061c:	6830      	ldr	r0, [r6, #0]
 802061e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020622:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8020626:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 802062a:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 802062e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020632:	440a      	add	r2, r1
 8020634:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020638:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802063c:	4413      	add	r3, r2
 802063e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020642:	6803      	ldr	r3, [r0, #0]
 8020644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020646:	4798      	blx	r3
 8020648:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802064c:	d021      	beq.n	8020692 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802064e:	f010 0f04 	tst.w	r0, #4
 8020652:	6830      	ldr	r0, [r6, #0]
 8020654:	d020      	beq.n	8020698 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 8020656:	2100      	movs	r1, #0
 8020658:	f04f 0c02 	mov.w	ip, #2
 802065c:	6806      	ldr	r6, [r0, #0]
 802065e:	b2a4      	uxth	r4, r4
 8020660:	9106      	str	r1, [sp, #24]
 8020662:	b2ad      	uxth	r5, r5
 8020664:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8020668:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 802066c:	e9cd c107 	strd	ip, r1, [sp, #28]
 8020670:	f8b9 c000 	ldrh.w	ip, [r9]
 8020674:	f8cd 800c 	str.w	r8, [sp, #12]
 8020678:	9501      	str	r5, [sp, #4]
 802067a:	9400      	str	r4, [sp, #0]
 802067c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8020680:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020684:	9102      	str	r1, [sp, #8]
 8020686:	4639      	mov	r1, r7
 8020688:	6c34      	ldr	r4, [r6, #64]	; 0x40
 802068a:	47a0      	blx	r4
 802068c:	b011      	add	sp, #68	; 0x44
 802068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020692:	f010 0f01 	tst.w	r0, #1
 8020696:	e7dc      	b.n	8020652 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x76>
 8020698:	6803      	ldr	r3, [r0, #0]
 802069a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802069e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80206a0:	4798      	blx	r3
 80206a2:	f8b9 c000 	ldrh.w	ip, [r9]
 80206a6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80206aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80206ae:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80206b2:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 80206b6:	fb0c 2303 	mla	r3, ip, r3, r2
 80206ba:	ebaa 0a04 	sub.w	sl, sl, r4
 80206be:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80206c2:	fb0c f305 	mul.w	r3, ip, r5
 80206c6:	ebac 0c04 	sub.w	ip, ip, r4
 80206ca:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 80206ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80206d2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80206d6:	d02d      	beq.n	8020734 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x158>
 80206d8:	ea4f 6208 	mov.w	r2, r8, lsl #24
 80206dc:	920a      	str	r2, [sp, #40]	; 0x28
 80206de:	4298      	cmp	r0, r3
 80206e0:	d27d      	bcs.n	80207de <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 80206e2:	eb00 020b 	add.w	r2, r0, fp
 80206e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80206e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80206ea:	4290      	cmp	r0, r2
 80206ec:	d274      	bcs.n	80207d8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1fc>
 80206ee:	f837 eb02 	ldrh.w	lr, [r7], #2
 80206f2:	f850 4b04 	ldr.w	r4, [r0], #4
 80206f6:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 80206fa:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80206fe:	ea4f 262e 	mov.w	r6, lr, asr #8
 8020702:	b2ed      	uxtb	r5, r5
 8020704:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8020708:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802070c:	ea5f 6914 	movs.w	r9, r4, lsr #24
 8020710:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020714:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020718:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802071c:	d129      	bne.n	8020772 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 802071e:	0212      	lsls	r2, r2, #8
 8020720:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8020724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020726:	4335      	orrs	r5, r6
 8020728:	4315      	orrs	r5, r2
 802072a:	f840 5c04 	str.w	r5, [r0, #-4]
 802072e:	e7db      	b.n	80206e8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8020730:	4460      	add	r0, ip
 8020732:	4457      	add	r7, sl
 8020734:	4298      	cmp	r0, r3
 8020736:	d252      	bcs.n	80207de <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8020738:	eb00 040b 	add.w	r4, r0, fp
 802073c:	42a0      	cmp	r0, r4
 802073e:	d2f7      	bcs.n	8020730 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x154>
 8020740:	f837 5b02 	ldrh.w	r5, [r7], #2
 8020744:	10e9      	asrs	r1, r5, #3
 8020746:	122e      	asrs	r6, r5, #8
 8020748:	f001 02fc 	and.w	r2, r1, #252	; 0xfc
 802074c:	00ed      	lsls	r5, r5, #3
 802074e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8020752:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8020756:	b2ed      	uxtb	r5, r5
 8020758:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802075c:	0212      	lsls	r2, r2, #8
 802075e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020762:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8020766:	432a      	orrs	r2, r5
 8020768:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 802076c:	f840 2b04 	str.w	r2, [r0], #4
 8020770:	e7e4      	b.n	802073c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x160>
 8020772:	fb18 f505 	smulbb	r5, r8, r5
 8020776:	fb08 fe09 	mul.w	lr, r8, r9
 802077a:	fb18 f606 	smulbb	r6, r8, r6
 802077e:	fb18 f202 	smulbb	r2, r8, r2
 8020782:	f10e 0101 	add.w	r1, lr, #1
 8020786:	eb01 212e 	add.w	r1, r1, lr, asr #8
 802078a:	eb08 0e09 	add.w	lr, r8, r9
 802078e:	1209      	asrs	r1, r1, #8
 8020790:	eba9 0901 	sub.w	r9, r9, r1
 8020794:	ebae 0e01 	sub.w	lr, lr, r1
 8020798:	b2e1      	uxtb	r1, r4
 802079a:	fa5f fe8e 	uxtb.w	lr, lr
 802079e:	fb09 5101 	mla	r1, r9, r1, r5
 80207a2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80207a6:	fb09 6605 	mla	r6, r9, r5, r6
 80207aa:	fbb1 f1fe 	udiv	r1, r1, lr
 80207ae:	fbb6 f6fe 	udiv	r6, r6, lr
 80207b2:	b2c9      	uxtb	r1, r1
 80207b4:	0436      	lsls	r6, r6, #16
 80207b6:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 80207ba:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 80207be:	4331      	orrs	r1, r6
 80207c0:	f3c4 2607 	ubfx	r6, r4, #8, #8
 80207c4:	fb09 2606 	mla	r6, r9, r6, r2
 80207c8:	fbb6 f6fe 	udiv	r6, r6, lr
 80207cc:	0236      	lsls	r6, r6, #8
 80207ce:	b2b6      	uxth	r6, r6
 80207d0:	4331      	orrs	r1, r6
 80207d2:	f840 1c04 	str.w	r1, [r0, #-4]
 80207d6:	e787      	b.n	80206e8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 80207d8:	4460      	add	r0, ip
 80207da:	4457      	add	r7, sl
 80207dc:	e77f      	b.n	80206de <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x102>
 80207de:	4b03      	ldr	r3, [pc, #12]	; (80207ec <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 80207e0:	6818      	ldr	r0, [r3, #0]
 80207e2:	6803      	ldr	r3, [r0, #0]
 80207e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80207e6:	4798      	blx	r3
 80207e8:	e750      	b.n	802068c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 80207ea:	bf00      	nop
 80207ec:	2003bee0 	.word	0x2003bee0
 80207f0:	2003beda 	.word	0x2003beda

080207f4 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 80207f4:	b4f0      	push	{r4, r5, r6, r7}
 80207f6:	4616      	mov	r6, r2
 80207f8:	461c      	mov	r4, r3
 80207fa:	460d      	mov	r5, r1
 80207fc:	9a04      	ldr	r2, [sp, #16]
 80207fe:	2e01      	cmp	r6, #1
 8020800:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8020804:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8020808:	d012      	beq.n	8020830 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802080a:	d303      	bcc.n	8020814 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 802080c:	2e02      	cmp	r6, #2
 802080e:	d006      	beq.n	802081e <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8020810:	bcf0      	pop	{r4, r5, r6, r7}
 8020812:	4770      	bx	lr
 8020814:	4621      	mov	r1, r4
 8020816:	4628      	mov	r0, r5
 8020818:	bcf0      	pop	{r4, r5, r6, r7}
 802081a:	f7ff bedf 	b.w	80205dc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 802081e:	6805      	ldr	r5, [r0, #0]
 8020820:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8020824:	68ed      	ldr	r5, [r5, #12]
 8020826:	4613      	mov	r3, r2
 8020828:	4622      	mov	r2, r4
 802082a:	46ac      	mov	ip, r5
 802082c:	bcf0      	pop	{r4, r5, r6, r7}
 802082e:	4760      	bx	ip
 8020830:	4621      	mov	r1, r4
 8020832:	4628      	mov	r0, r5
 8020834:	bcf0      	pop	{r4, r5, r6, r7}
 8020836:	f7ff bde1 	b.w	80203fc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
	...

0802083c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020840:	b093      	sub	sp, #76	; 0x4c
 8020842:	4681      	mov	r9, r0
 8020844:	460f      	mov	r7, r1
 8020846:	6810      	ldr	r0, [r2, #0]
 8020848:	6851      	ldr	r1, [r2, #4]
 802084a:	ac0e      	add	r4, sp, #56	; 0x38
 802084c:	4616      	mov	r6, r2
 802084e:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8020852:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8020a00 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 8020856:	c403      	stmia	r4!, {r0, r1}
 8020858:	6818      	ldr	r0, [r3, #0]
 802085a:	ac10      	add	r4, sp, #64	; 0x40
 802085c:	6859      	ldr	r1, [r3, #4]
 802085e:	c403      	stmia	r4!, {r0, r1}
 8020860:	a80e      	add	r0, sp, #56	; 0x38
 8020862:	f7f9 fa0b 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020866:	4631      	mov	r1, r6
 8020868:	a810      	add	r0, sp, #64	; 0x40
 802086a:	4e64      	ldr	r6, [pc, #400]	; (80209fc <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 802086c:	f7f9 fa2e 	bl	8019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020870:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020874:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020878:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 802087c:	6830      	ldr	r0, [r6, #0]
 802087e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020882:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8020886:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 802088a:	4489      	add	r9, r1
 802088c:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020890:	440a      	add	r2, r1
 8020892:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020896:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 802089a:	4413      	add	r3, r2
 802089c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80208a0:	6803      	ldr	r3, [r0, #0]
 80208a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80208a4:	4798      	blx	r3
 80208a6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80208aa:	6830      	ldr	r0, [r6, #0]
 80208ac:	d01f      	beq.n	80208ee <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80208ae:	2102      	movs	r1, #2
 80208b0:	2600      	movs	r6, #0
 80208b2:	6802      	ldr	r2, [r0, #0]
 80208b4:	b2a4      	uxth	r4, r4
 80208b6:	b2ad      	uxth	r5, r5
 80208b8:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80208bc:	e9cd 1608 	strd	r1, r6, [sp, #32]
 80208c0:	210b      	movs	r1, #11
 80208c2:	9107      	str	r1, [sp, #28]
 80208c4:	f8ba 1000 	ldrh.w	r1, [sl]
 80208c8:	9502      	str	r5, [sp, #8]
 80208ca:	9106      	str	r1, [sp, #24]
 80208cc:	2101      	movs	r1, #1
 80208ce:	9401      	str	r4, [sp, #4]
 80208d0:	e9cd 8104 	strd	r8, r1, [sp, #16]
 80208d4:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80208d8:	9103      	str	r1, [sp, #12]
 80208da:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 80208de:	9100      	str	r1, [sp, #0]
 80208e0:	4649      	mov	r1, r9
 80208e2:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 80208e4:	463a      	mov	r2, r7
 80208e6:	47a0      	blx	r4
 80208e8:	b013      	add	sp, #76	; 0x4c
 80208ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208ee:	6803      	ldr	r3, [r0, #0]
 80208f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80208f2:	4798      	blx	r3
 80208f4:	f8ba 3000 	ldrh.w	r3, [sl]
 80208f8:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 80208fc:	f04f 0e04 	mov.w	lr, #4
 8020900:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8020904:	435d      	muls	r5, r3
 8020906:	fb03 1202 	mla	r2, r3, r2, r1
 802090a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802090e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8020912:	920c      	str	r2, [sp, #48]	; 0x30
 8020914:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8020918:	1b12      	subs	r2, r2, r4
 802091a:	920d      	str	r2, [sp, #52]	; 0x34
 802091c:	00a2      	lsls	r2, r4, #2
 802091e:	1b1c      	subs	r4, r3, r4
 8020920:	920a      	str	r2, [sp, #40]	; 0x28
 8020922:	00a3      	lsls	r3, r4, #2
 8020924:	930b      	str	r3, [sp, #44]	; 0x2c
 8020926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020928:	4298      	cmp	r0, r3
 802092a:	d261      	bcs.n	80209f0 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802092c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802092e:	eb00 0a03 	add.w	sl, r0, r3
 8020932:	4550      	cmp	r0, sl
 8020934:	d257      	bcs.n	80209e6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8020936:	f819 2b01 	ldrb.w	r2, [r9], #1
 802093a:	fb1e e202 	smlabb	r2, lr, r2, lr
 802093e:	eb07 0c02 	add.w	ip, r7, r2
 8020942:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8020946:	fb03 f308 	mul.w	r3, r3, r8
 802094a:	1c5c      	adds	r4, r3, #1
 802094c:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 8020950:	1224      	asrs	r4, r4, #8
 8020952:	2cff      	cmp	r4, #255	; 0xff
 8020954:	d003      	beq.n	802095e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x122>
 8020956:	6803      	ldr	r3, [r0, #0]
 8020958:	ea5f 6b13 	movs.w	fp, r3, lsr #24
 802095c:	d10d      	bne.n	802097a <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 802095e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8020962:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8020966:	021b      	lsls	r3, r3, #8
 8020968:	5cba      	ldrb	r2, [r7, r2]
 802096a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 802096e:	4313      	orrs	r3, r2
 8020970:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
 8020974:	6004      	str	r4, [r0, #0]
 8020976:	3004      	adds	r0, #4
 8020978:	e7db      	b.n	8020932 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 802097a:	b2e5      	uxtb	r5, r4
 802097c:	2c00      	cmp	r4, #0
 802097e:	d0fa      	beq.n	8020976 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8020980:	fb05 f10b 	mul.w	r1, r5, fp
 8020984:	445d      	add	r5, fp
 8020986:	5cba      	ldrb	r2, [r7, r2]
 8020988:	1c4e      	adds	r6, r1, #1
 802098a:	eb06 2121 	add.w	r1, r6, r1, asr #8
 802098e:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8020992:	1209      	asrs	r1, r1, #8
 8020994:	1a6d      	subs	r5, r5, r1
 8020996:	ebab 0101 	sub.w	r1, fp, r1
 802099a:	f89c b002 	ldrb.w	fp, [ip, #2]
 802099e:	b2ed      	uxtb	r5, r5
 80209a0:	fb04 fb0b 	mul.w	fp, r4, fp
 80209a4:	fb01 b606 	mla	r6, r1, r6, fp
 80209a8:	fa5f fb83 	uxtb.w	fp, r3
 80209ac:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80209b0:	fb01 fb0b 	mul.w	fp, r1, fp
 80209b4:	fb04 b202 	mla	r2, r4, r2, fp
 80209b8:	fbb6 f6f5 	udiv	r6, r6, r5
 80209bc:	fbb2 f2f5 	udiv	r2, r2, r5
 80209c0:	0436      	lsls	r6, r6, #16
 80209c2:	b2d2      	uxtb	r2, r2
 80209c4:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 80209c8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 80209cc:	4316      	orrs	r6, r2
 80209ce:	f89c 2001 	ldrb.w	r2, [ip, #1]
 80209d2:	4354      	muls	r4, r2
 80209d4:	fb01 4203 	mla	r2, r1, r3, r4
 80209d8:	fbb2 f2f5 	udiv	r2, r2, r5
 80209dc:	0212      	lsls	r2, r2, #8
 80209de:	b292      	uxth	r2, r2
 80209e0:	4316      	orrs	r6, r2
 80209e2:	6006      	str	r6, [r0, #0]
 80209e4:	e7c7      	b.n	8020976 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 80209e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80209e8:	4418      	add	r0, r3
 80209ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80209ec:	4499      	add	r9, r3
 80209ee:	e79a      	b.n	8020926 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 80209f0:	4b02      	ldr	r3, [pc, #8]	; (80209fc <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80209f2:	6818      	ldr	r0, [r3, #0]
 80209f4:	6803      	ldr	r3, [r0, #0]
 80209f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80209f8:	4798      	blx	r3
 80209fa:	e775      	b.n	80208e8 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80209fc:	2003bee0 	.word	0x2003bee0
 8020a00:	2003beda 	.word	0x2003beda

08020a04 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8020a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020a08:	b093      	sub	sp, #76	; 0x4c
 8020a0a:	4606      	mov	r6, r0
 8020a0c:	4689      	mov	r9, r1
 8020a0e:	6810      	ldr	r0, [r2, #0]
 8020a10:	6851      	ldr	r1, [r2, #4]
 8020a12:	ac0e      	add	r4, sp, #56	; 0x38
 8020a14:	4615      	mov	r5, r2
 8020a16:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 8020a1a:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8020c00 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>
 8020a1e:	c403      	stmia	r4!, {r0, r1}
 8020a20:	6818      	ldr	r0, [r3, #0]
 8020a22:	ac10      	add	r4, sp, #64	; 0x40
 8020a24:	6859      	ldr	r1, [r3, #4]
 8020a26:	c403      	stmia	r4!, {r0, r1}
 8020a28:	a80e      	add	r0, sp, #56	; 0x38
 8020a2a:	f7f9 f927 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a2e:	4629      	mov	r1, r5
 8020a30:	a810      	add	r0, sp, #64	; 0x40
 8020a32:	f7f9 f94b 	bl	8019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020a36:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020a3a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020a3e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8020a42:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8020a46:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020a4a:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	; 0x46
 8020a4e:	1875      	adds	r5, r6, r1
 8020a50:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 8020a54:	4e69      	ldr	r6, [pc, #420]	; (8020bfc <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8020a56:	440a      	add	r2, r1
 8020a58:	6830      	ldr	r0, [r6, #0]
 8020a5a:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 8020a5e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8020a62:	4413      	add	r3, r2
 8020a64:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 8020a68:	6803      	ldr	r3, [r0, #0]
 8020a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a6c:	4798      	blx	r3
 8020a6e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8020a72:	d020      	beq.n	8020ab6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb2>
 8020a74:	6830      	ldr	r0, [r6, #0]
 8020a76:	2200      	movs	r2, #0
 8020a78:	2602      	movs	r6, #2
 8020a7a:	b2a4      	uxth	r4, r4
 8020a7c:	6801      	ldr	r1, [r0, #0]
 8020a7e:	b2bf      	uxth	r7, r7
 8020a80:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8020a84:	e9cd 6208 	strd	r6, r2, [sp, #32]
 8020a88:	260b      	movs	r6, #11
 8020a8a:	9607      	str	r6, [sp, #28]
 8020a8c:	f8ba 6000 	ldrh.w	r6, [sl]
 8020a90:	f8cd 8010 	str.w	r8, [sp, #16]
 8020a94:	9702      	str	r7, [sp, #8]
 8020a96:	9401      	str	r4, [sp, #4]
 8020a98:	e9cd 2605 	strd	r2, r6, [sp, #20]
 8020a9c:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 8020aa0:	9203      	str	r2, [sp, #12]
 8020aa2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 8020aa6:	9200      	str	r2, [sp, #0]
 8020aa8:	464a      	mov	r2, r9
 8020aaa:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8020aac:	4629      	mov	r1, r5
 8020aae:	47a0      	blx	r4
 8020ab0:	b013      	add	sp, #76	; 0x4c
 8020ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ab6:	6830      	ldr	r0, [r6, #0]
 8020ab8:	f109 0904 	add.w	r9, r9, #4
 8020abc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8020ac0:	6803      	ldr	r3, [r0, #0]
 8020ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020ac4:	4798      	blx	r3
 8020ac6:	f8ba c000 	ldrh.w	ip, [sl]
 8020aca:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8020ace:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020ad2:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8020ad6:	fb0c f707 	mul.w	r7, ip, r7
 8020ada:	fb0c 2303 	mla	r3, ip, r3, r2
 8020ade:	ebac 0c04 	sub.w	ip, ip, r4
 8020ae2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020ae6:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8020aea:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020aee:	eba3 0304 	sub.w	r3, r3, r4
 8020af2:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8020af6:	930b      	str	r3, [sp, #44]	; 0x2c
 8020af8:	d025      	beq.n	8020b46 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x142>
 8020afa:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8020afe:	930c      	str	r3, [sp, #48]	; 0x30
 8020b00:	42b8      	cmp	r0, r7
 8020b02:	d274      	bcs.n	8020bee <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 8020b04:	eb00 030b 	add.w	r3, r0, fp
 8020b08:	930d      	str	r3, [sp, #52]	; 0x34
 8020b0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020b0c:	4298      	cmp	r0, r3
 8020b0e:	d26a      	bcs.n	8020be6 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e2>
 8020b10:	f815 1b01 	ldrb.w	r1, [r5], #1
 8020b14:	f850 3b04 	ldr.w	r3, [r0], #4
 8020b18:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020b1c:	0e1c      	lsrs	r4, r3, #24
 8020b1e:	eb09 0201 	add.w	r2, r9, r1
 8020b22:	f819 6001 	ldrb.w	r6, [r9, r1]
 8020b26:	f892 a002 	ldrb.w	sl, [r2, #2]
 8020b2a:	7851      	ldrb	r1, [r2, #1]
 8020b2c:	d124      	bne.n	8020b78 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x174>
 8020b2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020b30:	431e      	orrs	r6, r3
 8020b32:	ea46 4a0a 	orr.w	sl, r6, sl, lsl #16
 8020b36:	ea4a 2101 	orr.w	r1, sl, r1, lsl #8
 8020b3a:	f840 1c04 	str.w	r1, [r0, #-4]
 8020b3e:	e7e4      	b.n	8020b0a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8020b40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020b42:	4460      	add	r0, ip
 8020b44:	441d      	add	r5, r3
 8020b46:	42b8      	cmp	r0, r7
 8020b48:	d251      	bcs.n	8020bee <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 8020b4a:	eb00 010b 	add.w	r1, r0, fp
 8020b4e:	4288      	cmp	r0, r1
 8020b50:	d2f6      	bcs.n	8020b40 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13c>
 8020b52:	f815 2b01 	ldrb.w	r2, [r5], #1
 8020b56:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020b5a:	f819 3002 	ldrb.w	r3, [r9, r2]
 8020b5e:	eb09 0402 	add.w	r4, r9, r2
 8020b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8020b66:	78a6      	ldrb	r6, [r4, #2]
 8020b68:	7862      	ldrb	r2, [r4, #1]
 8020b6a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020b6e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8020b72:	f840 3b04 	str.w	r3, [r0], #4
 8020b76:	e7ea      	b.n	8020b4e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x14a>
 8020b78:	fb18 f606 	smulbb	r6, r8, r6
 8020b7c:	fb08 fe04 	mul.w	lr, r8, r4
 8020b80:	fb18 fa0a 	smulbb	sl, r8, sl
 8020b84:	fb18 f101 	smulbb	r1, r8, r1
 8020b88:	f10e 0201 	add.w	r2, lr, #1
 8020b8c:	eb02 222e 	add.w	r2, r2, lr, asr #8
 8020b90:	eb08 0e04 	add.w	lr, r8, r4
 8020b94:	1212      	asrs	r2, r2, #8
 8020b96:	ebae 0e02 	sub.w	lr, lr, r2
 8020b9a:	1aa2      	subs	r2, r4, r2
 8020b9c:	b2dc      	uxtb	r4, r3
 8020b9e:	fa5f fe8e 	uxtb.w	lr, lr
 8020ba2:	fb02 6604 	mla	r6, r2, r4, r6
 8020ba6:	f3c3 4407 	ubfx	r4, r3, #16, #8
 8020baa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020bae:	fb02 aa04 	mla	sl, r2, r4, sl
 8020bb2:	fb02 1303 	mla	r3, r2, r3, r1
 8020bb6:	fbb6 f6fe 	udiv	r6, r6, lr
 8020bba:	fbba fafe 	udiv	sl, sl, lr
 8020bbe:	b2f6      	uxtb	r6, r6
 8020bc0:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8020bc4:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8020bc8:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8020bcc:	ea46 060a 	orr.w	r6, r6, sl
 8020bd0:	fbb3 fafe 	udiv	sl, r3, lr
 8020bd4:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8020bd8:	fa1f fa8a 	uxth.w	sl, sl
 8020bdc:	ea46 060a 	orr.w	r6, r6, sl
 8020be0:	f840 6c04 	str.w	r6, [r0, #-4]
 8020be4:	e791      	b.n	8020b0a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8020be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020be8:	4460      	add	r0, ip
 8020bea:	441d      	add	r5, r3
 8020bec:	e788      	b.n	8020b00 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfc>
 8020bee:	4b03      	ldr	r3, [pc, #12]	; (8020bfc <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8020bf0:	6818      	ldr	r0, [r3, #0]
 8020bf2:	6803      	ldr	r3, [r0, #0]
 8020bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020bf6:	4798      	blx	r3
 8020bf8:	e75a      	b.n	8020ab0 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xac>
 8020bfa:	bf00      	nop
 8020bfc:	2003bee0 	.word	0x2003bee0
 8020c00:	2003beda 	.word	0x2003beda

08020c04 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8020c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c08:	b089      	sub	sp, #36	; 0x24
 8020c0a:	4605      	mov	r5, r0
 8020c0c:	4689      	mov	r9, r1
 8020c0e:	6810      	ldr	r0, [r2, #0]
 8020c10:	6851      	ldr	r1, [r2, #4]
 8020c12:	ac04      	add	r4, sp, #16
 8020c14:	4616      	mov	r6, r2
 8020c16:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8020c1a:	f109 0904 	add.w	r9, r9, #4
 8020c1e:	c403      	stmia	r4!, {r0, r1}
 8020c20:	6818      	ldr	r0, [r3, #0]
 8020c22:	ac06      	add	r4, sp, #24
 8020c24:	6859      	ldr	r1, [r3, #4]
 8020c26:	c403      	stmia	r4!, {r0, r1}
 8020c28:	a804      	add	r0, sp, #16
 8020c2a:	f7f9 f827 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020c2e:	4631      	mov	r1, r6
 8020c30:	a806      	add	r0, sp, #24
 8020c32:	f7f9 f84b 	bl	8019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020c36:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8020c3a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020c3e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8020c42:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8020c46:	fb16 2103 	smlabb	r1, r6, r3, r2
 8020c4a:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 8020c4e:	186e      	adds	r6, r5, r1
 8020c50:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8020c54:	440a      	add	r2, r1
 8020c56:	f8ad 2018 	strh.w	r2, [sp, #24]
 8020c5a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8020c5e:	4413      	add	r3, r2
 8020c60:	f8ad 301a 	strh.w	r3, [sp, #26]
 8020c64:	4b57      	ldr	r3, [pc, #348]	; (8020dc4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8020c66:	6818      	ldr	r0, [r3, #0]
 8020c68:	6803      	ldr	r3, [r0, #0]
 8020c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020c6c:	4798      	blx	r3
 8020c6e:	4b56      	ldr	r3, [pc, #344]	; (8020dc8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8020c70:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8020c74:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020c78:	f8b3 c000 	ldrh.w	ip, [r3]
 8020c7c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8020c80:	fb0a fa0c 	mul.w	sl, sl, ip
 8020c84:	fb0c 2303 	mla	r3, ip, r3, r2
 8020c88:	ebac 0c0b 	sub.w	ip, ip, fp
 8020c8c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020c90:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8020c94:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020c98:	eba3 030b 	sub.w	r3, r3, fp
 8020c9c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8020ca0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8020ca4:	9301      	str	r3, [sp, #4]
 8020ca6:	d02e      	beq.n	8020d06 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8020ca8:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8020cac:	9302      	str	r3, [sp, #8]
 8020cae:	4550      	cmp	r0, sl
 8020cb0:	d27f      	bcs.n	8020db2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 8020cb2:	eb00 030b 	add.w	r3, r0, fp
 8020cb6:	9303      	str	r3, [sp, #12]
 8020cb8:	9b03      	ldr	r3, [sp, #12]
 8020cba:	4298      	cmp	r0, r3
 8020cbc:	d275      	bcs.n	8020daa <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a6>
 8020cbe:	f816 3b01 	ldrb.w	r3, [r6], #1
 8020cc2:	6802      	ldr	r2, [r0, #0]
 8020cc4:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 8020cc8:	0e17      	lsrs	r7, r2, #24
 8020cca:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 8020cce:	ea4f 03e1 	mov.w	r3, r1, asr #3
 8020cd2:	ea4f 2521 	mov.w	r5, r1, asr #8
 8020cd6:	b2e4      	uxtb	r4, r4
 8020cd8:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8020cdc:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8020ce0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020ce4:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8020ce8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8020cec:	d12c      	bne.n	8020d48 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x144>
 8020cee:	021b      	lsls	r3, r3, #8
 8020cf0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8020cf4:	9b02      	ldr	r3, [sp, #8]
 8020cf6:	432c      	orrs	r4, r5
 8020cf8:	431c      	orrs	r4, r3
 8020cfa:	6004      	str	r4, [r0, #0]
 8020cfc:	3004      	adds	r0, #4
 8020cfe:	e7db      	b.n	8020cb8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb4>
 8020d00:	9b01      	ldr	r3, [sp, #4]
 8020d02:	4460      	add	r0, ip
 8020d04:	441e      	add	r6, r3
 8020d06:	4550      	cmp	r0, sl
 8020d08:	d253      	bcs.n	8020db2 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 8020d0a:	eb00 020b 	add.w	r2, r0, fp
 8020d0e:	4290      	cmp	r0, r2
 8020d10:	d2f6      	bcs.n	8020d00 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfc>
 8020d12:	f816 3b01 	ldrb.w	r3, [r6], #1
 8020d16:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
 8020d1a:	10e9      	asrs	r1, r5, #3
 8020d1c:	122c      	asrs	r4, r5, #8
 8020d1e:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8020d22:	00e9      	lsls	r1, r5, #3
 8020d24:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020d28:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8020d2c:	b2c9      	uxtb	r1, r1
 8020d2e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8020d32:	021b      	lsls	r3, r3, #8
 8020d34:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8020d38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8020d3c:	430b      	orrs	r3, r1
 8020d3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8020d42:	f840 3b04 	str.w	r3, [r0], #4
 8020d46:	e7e2      	b.n	8020d0e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8020d48:	fb18 f404 	smulbb	r4, r8, r4
 8020d4c:	fb08 fe07 	mul.w	lr, r8, r7
 8020d50:	fb18 f505 	smulbb	r5, r8, r5
 8020d54:	fb18 f303 	smulbb	r3, r8, r3
 8020d58:	f10e 0101 	add.w	r1, lr, #1
 8020d5c:	eb01 212e 	add.w	r1, r1, lr, asr #8
 8020d60:	eb08 0e07 	add.w	lr, r8, r7
 8020d64:	1209      	asrs	r1, r1, #8
 8020d66:	ebae 0e01 	sub.w	lr, lr, r1
 8020d6a:	1a79      	subs	r1, r7, r1
 8020d6c:	b2d7      	uxtb	r7, r2
 8020d6e:	fa5f fe8e 	uxtb.w	lr, lr
 8020d72:	fb01 4707 	mla	r7, r1, r7, r4
 8020d76:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8020d7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8020d7e:	fb01 5504 	mla	r5, r1, r4, r5
 8020d82:	fb01 3202 	mla	r2, r1, r2, r3
 8020d86:	fbb7 f7fe 	udiv	r7, r7, lr
 8020d8a:	fbb5 f5fe 	udiv	r5, r5, lr
 8020d8e:	b2ff      	uxtb	r7, r7
 8020d90:	042d      	lsls	r5, r5, #16
 8020d92:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 8020d96:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8020d9a:	432f      	orrs	r7, r5
 8020d9c:	fbb2 f5fe 	udiv	r5, r2, lr
 8020da0:	022d      	lsls	r5, r5, #8
 8020da2:	b2ad      	uxth	r5, r5
 8020da4:	432f      	orrs	r7, r5
 8020da6:	6007      	str	r7, [r0, #0]
 8020da8:	e7a8      	b.n	8020cfc <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 8020daa:	9b01      	ldr	r3, [sp, #4]
 8020dac:	4460      	add	r0, ip
 8020dae:	441e      	add	r6, r3
 8020db0:	e77d      	b.n	8020cae <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xaa>
 8020db2:	4b04      	ldr	r3, [pc, #16]	; (8020dc4 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8020db4:	6818      	ldr	r0, [r3, #0]
 8020db6:	6803      	ldr	r3, [r0, #0]
 8020db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020dba:	4798      	blx	r3
 8020dbc:	b009      	add	sp, #36	; 0x24
 8020dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020dc2:	bf00      	nop
 8020dc4:	2003bee0 	.word	0x2003bee0
 8020dc8:	2003beda 	.word	0x2003beda

08020dcc <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8020dcc:	b430      	push	{r4, r5}
 8020dce:	780d      	ldrb	r5, [r1, #0]
 8020dd0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8020dd4:	2d01      	cmp	r5, #1
 8020dd6:	d00a      	beq.n	8020dee <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8020dd8:	d305      	bcc.n	8020de6 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8020dda:	2d02      	cmp	r5, #2
 8020ddc:	d10b      	bne.n	8020df6 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8020dde:	9402      	str	r4, [sp, #8]
 8020de0:	bc30      	pop	{r4, r5}
 8020de2:	f7ff bf0f 	b.w	8020c04 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8020de6:	9402      	str	r4, [sp, #8]
 8020de8:	bc30      	pop	{r4, r5}
 8020dea:	f7ff bd27 	b.w	802083c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8020dee:	9402      	str	r4, [sp, #8]
 8020df0:	bc30      	pop	{r4, r5}
 8020df2:	f7ff be07 	b.w	8020a04 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8020df6:	bc30      	pop	{r4, r5}
 8020df8:	4770      	bx	lr

08020dfa <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8020dfa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020dfe:	b085      	sub	sp, #20
 8020e00:	4606      	mov	r6, r0
 8020e02:	460c      	mov	r4, r1
 8020e04:	4691      	mov	r9, r2
 8020e06:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8020e0a:	4698      	mov	r8, r3
 8020e0c:	b1d5      	cbz	r5, 8020e44 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8020e0e:	4608      	mov	r0, r1
 8020e10:	f7fc fa1e 	bl	801d250 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020e14:	4607      	mov	r7, r0
 8020e16:	4620      	mov	r0, r4
 8020e18:	f7fc fa4e 	bl	801d2b8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020e1c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8020e20:	4620      	mov	r0, r4
 8020e22:	f8ad 9008 	strh.w	r9, [sp, #8]
 8020e26:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020e2a:	f8ad 700c 	strh.w	r7, [sp, #12]
 8020e2e:	f7fc fb33 	bl	801d498 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8020e32:	b950      	cbnz	r0, 8020e4a <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x50>
 8020e34:	4620      	mov	r0, r4
 8020e36:	f7fc faab 	bl	801d390 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020e3a:	462b      	mov	r3, r5
 8020e3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020e3e:	a902      	add	r1, sp, #8
 8020e40:	f7ff fbcc 	bl	80205dc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8020e44:	b005      	add	sp, #20
 8020e46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020e4a:	2801      	cmp	r0, #1
 8020e4c:	d108      	bne.n	8020e60 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 8020e4e:	4620      	mov	r0, r4
 8020e50:	f7fc fa9e 	bl	801d390 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020e54:	462b      	mov	r3, r5
 8020e56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8020e58:	a902      	add	r1, sp, #8
 8020e5a:	f7ff facf 	bl	80203fc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 8020e5e:	e7f1      	b.n	8020e44 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8020e60:	2802      	cmp	r0, #2
 8020e62:	d110      	bne.n	8020e86 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8020e64:	6833      	ldr	r3, [r6, #0]
 8020e66:	4620      	mov	r0, r4
 8020e68:	68df      	ldr	r7, [r3, #12]
 8020e6a:	f7fc fa91 	bl	801d390 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020e6e:	4680      	mov	r8, r0
 8020e70:	4620      	mov	r0, r4
 8020e72:	f7fc fa55 	bl	801d320 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8020e76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e78:	aa02      	add	r2, sp, #8
 8020e7a:	4641      	mov	r1, r8
 8020e7c:	e9cd 5000 	strd	r5, r0, [sp]
 8020e80:	4630      	mov	r0, r6
 8020e82:	47b8      	blx	r7
 8020e84:	e7de      	b.n	8020e44 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8020e86:	280b      	cmp	r0, #11
 8020e88:	d1dc      	bne.n	8020e44 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8020e8a:	4620      	mov	r0, r4
 8020e8c:	f7fc fa80 	bl	801d390 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020e90:	4606      	mov	r6, r0
 8020e92:	4620      	mov	r0, r4
 8020e94:	f7fc faac 	bl	801d3f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8020e98:	9500      	str	r5, [sp, #0]
 8020e9a:	4601      	mov	r1, r0
 8020e9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e9e:	aa02      	add	r2, sp, #8
 8020ea0:	4630      	mov	r0, r6
 8020ea2:	f7ff ff93 	bl	8020dcc <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8020ea6:	e7cd      	b.n	8020e44 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>

08020ea8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>:
 8020ea8:	b160      	cbz	r0, 8020ec4 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8020eaa:	2903      	cmp	r1, #3
 8020eac:	d818      	bhi.n	8020ee0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8020eae:	e8df f001 	tbb	[pc, r1]
 8020eb2:	1902      	.short	0x1902
 8020eb4:	1b06      	.short	0x1b06
 8020eb6:	4b0e      	ldr	r3, [pc, #56]	; (8020ef0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8020eb8:	8818      	ldrh	r0, [r3, #0]
 8020eba:	4240      	negs	r0, r0
 8020ebc:	4770      	bx	lr
 8020ebe:	4b0c      	ldr	r3, [pc, #48]	; (8020ef0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8020ec0:	8818      	ldrh	r0, [r3, #0]
 8020ec2:	4770      	bx	lr
 8020ec4:	2903      	cmp	r1, #3
 8020ec6:	d80b      	bhi.n	8020ee0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8020ec8:	a301      	add	r3, pc, #4	; (adr r3, 8020ed0 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8020eca:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020ece:	bf00      	nop
 8020ed0:	08020ee5 	.word	0x08020ee5
 8020ed4:	08020ebf 	.word	0x08020ebf
 8020ed8:	08020ee9 	.word	0x08020ee9
 8020edc:	08020eb7 	.word	0x08020eb7
 8020ee0:	2000      	movs	r0, #0
 8020ee2:	4770      	bx	lr
 8020ee4:	2001      	movs	r0, #1
 8020ee6:	4770      	bx	lr
 8020ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8020eec:	4770      	bx	lr
 8020eee:	bf00      	nop
 8020ef0:	2003beda 	.word	0x2003beda

08020ef4 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>:
 8020ef4:	b160      	cbz	r0, 8020f10 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x1c>
 8020ef6:	2903      	cmp	r1, #3
 8020ef8:	d818      	bhi.n	8020f2c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8020efa:	e8df f001 	tbb	[pc, r1]
 8020efe:	0219      	.short	0x0219
 8020f00:	051b      	.short	0x051b
 8020f02:	4b0e      	ldr	r3, [pc, #56]	; (8020f3c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8020f04:	8818      	ldrh	r0, [r3, #0]
 8020f06:	4770      	bx	lr
 8020f08:	4b0c      	ldr	r3, [pc, #48]	; (8020f3c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8020f0a:	8818      	ldrh	r0, [r3, #0]
 8020f0c:	4240      	negs	r0, r0
 8020f0e:	4770      	bx	lr
 8020f10:	2903      	cmp	r1, #3
 8020f12:	d80b      	bhi.n	8020f2c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8020f14:	a301      	add	r3, pc, #4	; (adr r3, 8020f1c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x28>)
 8020f16:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8020f1a:	bf00      	nop
 8020f1c:	08020f03 	.word	0x08020f03
 8020f20:	08020f35 	.word	0x08020f35
 8020f24:	08020f09 	.word	0x08020f09
 8020f28:	08020f31 	.word	0x08020f31
 8020f2c:	2000      	movs	r0, #0
 8020f2e:	4770      	bx	lr
 8020f30:	2001      	movs	r0, #1
 8020f32:	4770      	bx	lr
 8020f34:	f04f 30ff 	mov.w	r0, #4294967295
 8020f38:	4770      	bx	lr
 8020f3a:	bf00      	nop
 8020f3c:	2003beda 	.word	0x2003beda

08020f40 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8020f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020f44:	b099      	sub	sp, #100	; 0x64
 8020f46:	910b      	str	r1, [sp, #44]	; 0x2c
 8020f48:	a914      	add	r1, sp, #80	; 0x50
 8020f4a:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8020f4e:	f8bd 7090 	ldrh.w	r7, [sp, #144]	; 0x90
 8020f52:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 8020f56:	f89d 90b4 	ldrb.w	r9, [sp, #180]	; 0xb4
 8020f5a:	e881 000c 	stmia.w	r1, {r2, r3}
 8020f5e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8020f62:	930a      	str	r3, [sp, #40]	; 0x28
 8020f64:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020f68:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8020f6c:	9310      	str	r3, [sp, #64]	; 0x40
 8020f6e:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8020f72:	9309      	str	r3, [sp, #36]	; 0x24
 8020f74:	7b4b      	ldrb	r3, [r1, #13]
 8020f76:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8020f7a:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8020f7e:	f891 8006 	ldrb.w	r8, [r1, #6]
 8020f82:	ea58 0800 	orrs.w	r8, r8, r0
 8020f86:	f000 815b 	beq.w	8021240 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8020f8a:	011b      	lsls	r3, r3, #4
 8020f8c:	79c8      	ldrb	r0, [r1, #7]
 8020f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8020f92:	4303      	orrs	r3, r0
 8020f94:	930d      	str	r3, [sp, #52]	; 0x34
 8020f96:	f000 8153 	beq.w	8021240 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8020f9a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8020f9e:	b29b      	uxth	r3, r3
 8020fa0:	2f00      	cmp	r7, #0
 8020fa2:	f000 80f3 	beq.w	802118c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24c>
 8020fa6:	1aff      	subs	r7, r7, r3
 8020fa8:	b2bf      	uxth	r7, r7
 8020faa:	043d      	lsls	r5, r7, #16
 8020fac:	d502      	bpl.n	8020fb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8020fae:	1bf6      	subs	r6, r6, r7
 8020fb0:	2700      	movs	r7, #0
 8020fb2:	b236      	sxth	r6, r6
 8020fb4:	f9b2 1000 	ldrsh.w	r1, [r2]
 8020fb8:	fa1f f588 	uxth.w	r5, r8
 8020fbc:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8020fc0:	428e      	cmp	r6, r1
 8020fc2:	b28b      	uxth	r3, r1
 8020fc4:	bfbf      	itttt	lt
 8020fc6:	18ff      	addlt	r7, r7, r3
 8020fc8:	1bbe      	sublt	r6, r7, r6
 8020fca:	b2b7      	uxthlt	r7, r6
 8020fcc:	460e      	movlt	r6, r1
 8020fce:	8891      	ldrh	r1, [r2, #4]
 8020fd0:	440b      	add	r3, r1
 8020fd2:	4631      	mov	r1, r6
 8020fd4:	b21b      	sxth	r3, r3
 8020fd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8020fd8:	88d3      	ldrh	r3, [r2, #6]
 8020fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020fdc:	449a      	add	sl, r3
 8020fde:	fa0f f38a 	sxth.w	r3, sl
 8020fe2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8020fe6:	930e      	str	r3, [sp, #56]	; 0x38
 8020fe8:	4bb1      	ldr	r3, [pc, #708]	; (80212b0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 8020fea:	f893 b000 	ldrb.w	fp, [r3]
 8020fee:	f10b 30ff 	add.w	r0, fp, #4294967295
 8020ff2:	4243      	negs	r3, r0
 8020ff4:	4143      	adcs	r3, r0
 8020ff6:	a814      	add	r0, sp, #80	; 0x50
 8020ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8020ffa:	464b      	mov	r3, r9
 8020ffc:	f7f8 fcb9 	bl	8019972 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021000:	4631      	mov	r1, r6
 8021002:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8021006:	464b      	mov	r3, r9
 8021008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802100a:	a814      	add	r0, sp, #80	; 0x50
 802100c:	f7f8 fcce 	bl	80199ac <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021010:	a918      	add	r1, sp, #96	; 0x60
 8021012:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021016:	a817      	add	r0, sp, #92	; 0x5c
 8021018:	f7f8 fdee 	bl	8019bf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802101c:	f1b9 0f00 	cmp.w	r9, #0
 8021020:	f040 80b7 	bne.w	8021192 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x252>
 8021024:	f1bb 0f01 	cmp.w	fp, #1
 8021028:	f040 80bb 	bne.w	80211a2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x262>
 802102c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802102e:	b153      	cbz	r3, 8021046 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x106>
 8021030:	2508      	movs	r5, #8
 8021032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021034:	fb95 f3f3 	sdiv	r3, r5, r3
 8021038:	1e5d      	subs	r5, r3, #1
 802103a:	4445      	add	r5, r8
 802103c:	fb95 f5f3 	sdiv	r5, r5, r3
 8021040:	fb15 f503 	smulbb	r5, r5, r3
 8021044:	b2ad      	uxth	r5, r5
 8021046:	b907      	cbnz	r7, 802104a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8021048:	b16c      	cbz	r4, 8021066 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 802104a:	fb04 7305 	mla	r3, r4, r5, r7
 802104e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021050:	ebaa 0a04 	sub.w	sl, sl, r4
 8021054:	4353      	muls	r3, r2
 8021056:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021058:	fa1f fa8a 	uxth.w	sl, sl
 802105c:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8021060:	f003 0407 	and.w	r4, r3, #7
 8021064:	9228      	str	r2, [sp, #160]	; 0xa0
 8021066:	4649      	mov	r1, r9
 8021068:	980c      	ldr	r0, [sp, #48]	; 0x30
 802106a:	f7ff ff1d 	bl	8020ea8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>
 802106e:	4683      	mov	fp, r0
 8021070:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021072:	f7ff ff3f 	bl	8020ef4 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>
 8021076:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021078:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802107a:	4681      	mov	r9, r0
 802107c:	1a9b      	subs	r3, r3, r2
 802107e:	459a      	cmp	sl, r3
 8021080:	bfa8      	it	ge
 8021082:	469a      	movge	sl, r3
 8021084:	f1ba 0f00 	cmp.w	sl, #0
 8021088:	f340 80da 	ble.w	8021240 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 802108c:	1bf6      	subs	r6, r6, r7
 802108e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021090:	1b9e      	subs	r6, r3, r6
 8021092:	4546      	cmp	r6, r8
 8021094:	bfd4      	ite	le
 8021096:	ebc7 0706 	rsble	r7, r7, r6
 802109a:	ebc7 0708 	rsbgt	r7, r7, r8
 802109e:	2f00      	cmp	r7, #0
 80210a0:	f340 80ce 	ble.w	8021240 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 80210a4:	1bed      	subs	r5, r5, r7
 80210a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80210a8:	436b      	muls	r3, r5
 80210aa:	930e      	str	r3, [sp, #56]	; 0x38
 80210ac:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80210ae:	ea4f 6813 	mov.w	r8, r3, lsr #24
 80210b2:	0c1d      	lsrs	r5, r3, #16
 80210b4:	0a1e      	lsrs	r6, r3, #8
 80210b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80210ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80210bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80210be:	2b00      	cmp	r3, #0
 80210c0:	f040 80c3 	bne.w	802124a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 80210c4:	4b7b      	ldr	r3, [pc, #492]	; (80212b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 80210c6:	6818      	ldr	r0, [r3, #0]
 80210c8:	6803      	ldr	r3, [r0, #0]
 80210ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80210cc:	4798      	blx	r3
 80210ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80210d0:	2301      	movs	r3, #1
 80210d2:	4093      	lsls	r3, r2
 80210d4:	4a78      	ldr	r2, [pc, #480]	; (80212b8 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 80210d6:	3b01      	subs	r3, #1
 80210d8:	8811      	ldrh	r1, [r2, #0]
 80210da:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 80210de:	b2db      	uxtb	r3, r3
 80210e0:	930d      	str	r3, [sp, #52]	; 0x34
 80210e2:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 80210e6:	fb01 2303 	mla	r3, r1, r3, r2
 80210ea:	22ff      	movs	r2, #255	; 0xff
 80210ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80210ee:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80210f2:	fb92 f2f1 	sdiv	r2, r2, r1
 80210f6:	fb02 f208 	mul.w	r2, r2, r8
 80210fa:	930a      	str	r3, [sp, #40]	; 0x28
 80210fc:	9210      	str	r2, [sp, #64]	; 0x40
 80210fe:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8021102:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021104:	fb07 9b1b 	mls	fp, r7, fp, r9
 8021108:	920c      	str	r2, [sp, #48]	; 0x30
 802110a:	fb02 f907 	mul.w	r9, r2, r7
 802110e:	b2f2      	uxtb	r2, r6
 8021110:	781b      	ldrb	r3, [r3, #0]
 8021112:	9211      	str	r2, [sp, #68]	; 0x44
 8021114:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8021118:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802111a:	4123      	asrs	r3, r4
 802111c:	b2d2      	uxtb	r2, r2
 802111e:	b2db      	uxtb	r3, r3
 8021120:	9212      	str	r2, [sp, #72]	; 0x48
 8021122:	b2ea      	uxtb	r2, r5
 8021124:	9213      	str	r2, [sp, #76]	; 0x4c
 8021126:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802112a:	f0c0 80d8 	bcc.w	80212de <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 802112e:	46b8      	mov	r8, r7
 8021130:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8021134:	f118 38ff 	adds.w	r8, r8, #4294967295
 8021138:	f0c0 80c0 	bcc.w	80212bc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 802113c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802113e:	401a      	ands	r2, r3
 8021140:	d013      	beq.n	802116a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8021142:	9910      	ldr	r1, [sp, #64]	; 0x40
 8021144:	fb12 f201 	smulbb	r2, r2, r1
 8021148:	b292      	uxth	r2, r2
 802114a:	1c51      	adds	r1, r2, #1
 802114c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8021150:	1209      	asrs	r1, r1, #8
 8021152:	b2ce      	uxtb	r6, r1
 8021154:	2eff      	cmp	r6, #255	; 0xff
 8021156:	d003      	beq.n	8021160 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 8021158:	f8dc 5000 	ldr.w	r5, [ip]
 802115c:	0e2a      	lsrs	r2, r5, #24
 802115e:	d176      	bne.n	802124e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30e>
 8021160:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8021162:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8021166:	f8cc 1000 	str.w	r1, [ip]
 802116a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802116c:	4414      	add	r4, r2
 802116e:	b2a4      	uxth	r4, r4
 8021170:	2c07      	cmp	r4, #7
 8021172:	bf89      	itett	hi
 8021174:	9a28      	ldrhi	r2, [sp, #160]	; 0xa0
 8021176:	4113      	asrls	r3, r2
 8021178:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 802117a:	2400      	movhi	r4, #0
 802117c:	bf89      	itett	hi
 802117e:	3201      	addhi	r2, #1
 8021180:	b2db      	uxtbls	r3, r3
 8021182:	785b      	ldrbhi	r3, [r3, #1]
 8021184:	9228      	strhi	r2, [sp, #160]	; 0xa0
 8021186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021188:	4494      	add	ip, r2
 802118a:	e7d3      	b.n	8021134 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 802118c:	441e      	add	r6, r3
 802118e:	b236      	sxth	r6, r6
 8021190:	e710      	b.n	8020fb4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021192:	f1b9 0f01 	cmp.w	r9, #1
 8021196:	f47f af49 	bne.w	802102c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 802119a:	f1bb 0f01 	cmp.w	fp, #1
 802119e:	f47f af45 	bne.w	802102c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80211a2:	f8df b110 	ldr.w	fp, [pc, #272]	; 80212b4 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80211a6:	f8db 0000 	ldr.w	r0, [fp]
 80211aa:	6803      	ldr	r3, [r0, #0]
 80211ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80211ae:	4798      	blx	r3
 80211b0:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 80211b4:	465a      	mov	r2, fp
 80211b6:	d006      	beq.n	80211c6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 80211b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80211ba:	2b04      	cmp	r3, #4
 80211bc:	d143      	bne.n	8021246 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x306>
 80211be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80211c0:	3300      	adds	r3, #0
 80211c2:	bf18      	it	ne
 80211c4:	2301      	movne	r3, #1
 80211c6:	0581      	lsls	r1, r0, #22
 80211c8:	f140 8092 	bpl.w	80212f0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80211cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80211ce:	2908      	cmp	r1, #8
 80211d0:	f040 808e 	bne.w	80212f0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 80211d4:	2b00      	cmp	r3, #0
 80211d6:	bf0c      	ite	eq
 80211d8:	f44f 7100 	moveq.w	r1, #512	; 0x200
 80211dc:	f44f 7180 	movne.w	r1, #256	; 0x100
 80211e0:	2f00      	cmp	r7, #0
 80211e2:	f47f af23 	bne.w	802102c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80211e6:	2c00      	cmp	r4, #0
 80211e8:	f47f af20 	bne.w	802102c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80211ec:	eb08 0306 	add.w	r3, r8, r6
 80211f0:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80211f2:	4283      	cmp	r3, r0
 80211f4:	f73f af1a 	bgt.w	802102c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80211f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80211fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80211fc:	4403      	add	r3, r0
 80211fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8021200:	4283      	cmp	r3, r0
 8021202:	f73f af13 	bgt.w	802102c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8021206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021208:	2600      	movs	r6, #0
 802120a:	6810      	ldr	r0, [r2, #0]
 802120c:	2b08      	cmp	r3, #8
 802120e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8021212:	6804      	ldr	r4, [r0, #0]
 8021214:	bf18      	it	ne
 8021216:	3501      	addne	r5, #1
 8021218:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 802121c:	bf18      	it	ne
 802121e:	f025 0501 	bicne.w	r5, r5, #1
 8021222:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8021226:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 802122a:	bf18      	it	ne
 802122c:	b2ad      	uxthne	r5, r5
 802122e:	9104      	str	r1, [sp, #16]
 8021230:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8021232:	e9cd 5a00 	strd	r5, sl, [sp]
 8021236:	e9cd 5102 	strd	r5, r1, [sp, #8]
 802123a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802123c:	6d64      	ldr	r4, [r4, #84]	; 0x54
 802123e:	47a0      	blx	r4
 8021240:	b019      	add	sp, #100	; 0x64
 8021242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021246:	2300      	movs	r3, #0
 8021248:	e7bd      	b.n	80211c6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 802124a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802124c:	e73f      	b.n	80210ce <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 802124e:	2e00      	cmp	r6, #0
 8021250:	d08b      	beq.n	802116a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8021252:	fb06 f102 	mul.w	r1, r6, r2
 8021256:	9812      	ldr	r0, [sp, #72]	; 0x48
 8021258:	f101 0e01 	add.w	lr, r1, #1
 802125c:	eb0e 2e21 	add.w	lr, lr, r1, asr #8
 8021260:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8021264:	eba2 090e 	sub.w	r9, r2, lr
 8021268:	4432      	add	r2, r6
 802126a:	eba2 020e 	sub.w	r2, r2, lr
 802126e:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8021272:	b2d1      	uxtb	r1, r2
 8021274:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8021276:	4372      	muls	r2, r6
 8021278:	fb09 2e0e 	mla	lr, r9, lr, r2
 802127c:	b2ea      	uxtb	r2, r5
 802127e:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8021282:	fb09 f202 	mul.w	r2, r9, r2
 8021286:	fb06 2200 	mla	r2, r6, r0, r2
 802128a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802128c:	fb92 f2f1 	sdiv	r2, r2, r1
 8021290:	4346      	muls	r6, r0
 8021292:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8021296:	fb9e fef1 	sdiv	lr, lr, r1
 802129a:	fb09 6505 	mla	r5, r9, r5, r6
 802129e:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 80212a2:	fb95 f5f1 	sdiv	r5, r5, r1
 80212a6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80212aa:	f8cc 5000 	str.w	r5, [ip]
 80212ae:	e75c      	b.n	802116a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 80212b0:	2003bed8 	.word	0x2003bed8
 80212b4:	2003bee0 	.word	0x2003bee0
 80212b8:	2003beda 	.word	0x2003beda
 80212bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80212be:	b152      	cbz	r2, 80212d6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 80212c0:	4414      	add	r4, r2
 80212c2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80212c4:	b2a4      	uxth	r4, r4
 80212c6:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 80212ca:	f004 0407 	and.w	r4, r4, #7
 80212ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80212d0:	781b      	ldrb	r3, [r3, #0]
 80212d2:	4123      	asrs	r3, r4
 80212d4:	b2db      	uxtb	r3, r3
 80212d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80212d8:	445a      	add	r2, fp
 80212da:	920a      	str	r2, [sp, #40]	; 0x28
 80212dc:	e723      	b.n	8021126 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e6>
 80212de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80212e0:	2b00      	cmp	r3, #0
 80212e2:	d1ad      	bne.n	8021240 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 80212e4:	4b05      	ldr	r3, [pc, #20]	; (80212fc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3bc>)
 80212e6:	6818      	ldr	r0, [r3, #0]
 80212e8:	6803      	ldr	r3, [r0, #0]
 80212ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80212ec:	4798      	blx	r3
 80212ee:	e7a7      	b.n	8021240 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 80212f0:	2b00      	cmp	r3, #0
 80212f2:	f43f ae9b 	beq.w	802102c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80212f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80212fa:	e771      	b.n	80211e0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 80212fc:	2003bee0 	.word	0x2003bee0

08021300 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8021300:	b538      	push	{r3, r4, r5, lr}
 8021302:	4c15      	ldr	r4, [pc, #84]	; (8021358 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8021304:	4605      	mov	r5, r0
 8021306:	7823      	ldrb	r3, [r4, #0]
 8021308:	f3bf 8f5b 	dmb	ish
 802130c:	07da      	lsls	r2, r3, #31
 802130e:	d40b      	bmi.n	8021328 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021310:	4620      	mov	r0, r4
 8021312:	f007 fccd 	bl	8028cb0 <__cxa_guard_acquire>
 8021316:	b138      	cbz	r0, 8021328 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8021318:	4620      	mov	r0, r4
 802131a:	f007 fcd5 	bl	8028cc8 <__cxa_guard_release>
 802131e:	4a0f      	ldr	r2, [pc, #60]	; (802135c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021320:	490f      	ldr	r1, [pc, #60]	; (8021360 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8021322:	4810      	ldr	r0, [pc, #64]	; (8021364 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8021324:	f007 fcbd 	bl	8028ca2 <__aeabi_atexit>
 8021328:	4c0f      	ldr	r4, [pc, #60]	; (8021368 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802132a:	7823      	ldrb	r3, [r4, #0]
 802132c:	f3bf 8f5b 	dmb	ish
 8021330:	07db      	lsls	r3, r3, #31
 8021332:	d40b      	bmi.n	802134c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8021334:	4620      	mov	r0, r4
 8021336:	f007 fcbb 	bl	8028cb0 <__cxa_guard_acquire>
 802133a:	b138      	cbz	r0, 802134c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802133c:	4620      	mov	r0, r4
 802133e:	f007 fcc3 	bl	8028cc8 <__cxa_guard_release>
 8021342:	4a06      	ldr	r2, [pc, #24]	; (802135c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8021344:	4909      	ldr	r1, [pc, #36]	; (802136c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8021346:	480a      	ldr	r0, [pc, #40]	; (8021370 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021348:	f007 fcab 	bl	8028ca2 <__aeabi_atexit>
 802134c:	4b05      	ldr	r3, [pc, #20]	; (8021364 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802134e:	612b      	str	r3, [r5, #16]
 8021350:	4b07      	ldr	r3, [pc, #28]	; (8021370 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8021352:	616b      	str	r3, [r5, #20]
 8021354:	bd38      	pop	{r3, r4, r5, pc}
 8021356:	bf00      	nop
 8021358:	2003bfb8 	.word	0x2003bfb8
 802135c:	20000000 	.word	0x20000000
 8021360:	0801fc0b 	.word	0x0801fc0b
 8021364:	20000080 	.word	0x20000080
 8021368:	2003bfbc 	.word	0x2003bfbc
 802136c:	0801fc09 	.word	0x0801fc09
 8021370:	20000084 	.word	0x20000084

08021374 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 8021374:	b538      	push	{r3, r4, r5, lr}
 8021376:	4c15      	ldr	r4, [pc, #84]	; (80213cc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 8021378:	4605      	mov	r5, r0
 802137a:	7823      	ldrb	r3, [r4, #0]
 802137c:	f3bf 8f5b 	dmb	ish
 8021380:	07da      	lsls	r2, r3, #31
 8021382:	d40b      	bmi.n	802139c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 8021384:	4620      	mov	r0, r4
 8021386:	f007 fc93 	bl	8028cb0 <__cxa_guard_acquire>
 802138a:	b138      	cbz	r0, 802139c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 802138c:	4620      	mov	r0, r4
 802138e:	f007 fc9b 	bl	8028cc8 <__cxa_guard_release>
 8021392:	4a0f      	ldr	r2, [pc, #60]	; (80213d0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8021394:	490f      	ldr	r1, [pc, #60]	; (80213d4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 8021396:	4810      	ldr	r0, [pc, #64]	; (80213d8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8021398:	f007 fc83 	bl	8028ca2 <__aeabi_atexit>
 802139c:	4c0f      	ldr	r4, [pc, #60]	; (80213dc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 802139e:	7823      	ldrb	r3, [r4, #0]
 80213a0:	f3bf 8f5b 	dmb	ish
 80213a4:	07db      	lsls	r3, r3, #31
 80213a6:	d40b      	bmi.n	80213c0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80213a8:	4620      	mov	r0, r4
 80213aa:	f007 fc81 	bl	8028cb0 <__cxa_guard_acquire>
 80213ae:	b138      	cbz	r0, 80213c0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80213b0:	4620      	mov	r0, r4
 80213b2:	f007 fc89 	bl	8028cc8 <__cxa_guard_release>
 80213b6:	4a06      	ldr	r2, [pc, #24]	; (80213d0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80213b8:	4909      	ldr	r1, [pc, #36]	; (80213e0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 80213ba:	480a      	ldr	r0, [pc, #40]	; (80213e4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80213bc:	f007 fc71 	bl	8028ca2 <__aeabi_atexit>
 80213c0:	4b05      	ldr	r3, [pc, #20]	; (80213d8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80213c2:	60ab      	str	r3, [r5, #8]
 80213c4:	4b07      	ldr	r3, [pc, #28]	; (80213e4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 80213c6:	60eb      	str	r3, [r5, #12]
 80213c8:	bd38      	pop	{r3, r4, r5, pc}
 80213ca:	bf00      	nop
 80213cc:	2003bf90 	.word	0x2003bf90
 80213d0:	20000000 	.word	0x20000000
 80213d4:	0801fc0f 	.word	0x0801fc0f
 80213d8:	20000058 	.word	0x20000058
 80213dc:	2003bf94 	.word	0x2003bf94
 80213e0:	0801fc0d 	.word	0x0801fc0d
 80213e4:	2000005c 	.word	0x2000005c

080213e8 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>:
 80213e8:	b510      	push	{r4, lr}
 80213ea:	4604      	mov	r4, r0
 80213ec:	f7ff ff88 	bl	8021300 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 80213f0:	4620      	mov	r0, r4
 80213f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80213f6:	f7ff bfbd 	b.w	8021374 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

080213fc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 80213fc:	b538      	push	{r3, r4, r5, lr}
 80213fe:	4c15      	ldr	r4, [pc, #84]	; (8021454 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8021400:	4605      	mov	r5, r0
 8021402:	7823      	ldrb	r3, [r4, #0]
 8021404:	f3bf 8f5b 	dmb	ish
 8021408:	07da      	lsls	r2, r3, #31
 802140a:	d40b      	bmi.n	8021424 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802140c:	4620      	mov	r0, r4
 802140e:	f007 fc4f 	bl	8028cb0 <__cxa_guard_acquire>
 8021412:	b138      	cbz	r0, 8021424 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8021414:	4620      	mov	r0, r4
 8021416:	f007 fc57 	bl	8028cc8 <__cxa_guard_release>
 802141a:	4a0f      	ldr	r2, [pc, #60]	; (8021458 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802141c:	490f      	ldr	r1, [pc, #60]	; (802145c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802141e:	4810      	ldr	r0, [pc, #64]	; (8021460 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8021420:	f007 fc3f 	bl	8028ca2 <__aeabi_atexit>
 8021424:	4c0f      	ldr	r4, [pc, #60]	; (8021464 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8021426:	7823      	ldrb	r3, [r4, #0]
 8021428:	f3bf 8f5b 	dmb	ish
 802142c:	07db      	lsls	r3, r3, #31
 802142e:	d40b      	bmi.n	8021448 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021430:	4620      	mov	r0, r4
 8021432:	f007 fc3d 	bl	8028cb0 <__cxa_guard_acquire>
 8021436:	b138      	cbz	r0, 8021448 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8021438:	4620      	mov	r0, r4
 802143a:	f007 fc45 	bl	8028cc8 <__cxa_guard_release>
 802143e:	4a06      	ldr	r2, [pc, #24]	; (8021458 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8021440:	4909      	ldr	r1, [pc, #36]	; (8021468 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8021442:	480a      	ldr	r0, [pc, #40]	; (802146c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8021444:	f007 fc2d 	bl	8028ca2 <__aeabi_atexit>
 8021448:	4b05      	ldr	r3, [pc, #20]	; (8021460 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802144a:	622b      	str	r3, [r5, #32]
 802144c:	4b07      	ldr	r3, [pc, #28]	; (802146c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802144e:	626b      	str	r3, [r5, #36]	; 0x24
 8021450:	bd38      	pop	{r3, r4, r5, pc}
 8021452:	bf00      	nop
 8021454:	2003bfc0 	.word	0x2003bfc0
 8021458:	20000000 	.word	0x20000000
 802145c:	0801fc03 	.word	0x0801fc03
 8021460:	20000088 	.word	0x20000088
 8021464:	2003bfc4 	.word	0x2003bfc4
 8021468:	0801fc01 	.word	0x0801fc01
 802146c:	2000008c 	.word	0x2000008c

08021470 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8021470:	b538      	push	{r3, r4, r5, lr}
 8021472:	4c15      	ldr	r4, [pc, #84]	; (80214c8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8021474:	4605      	mov	r5, r0
 8021476:	7823      	ldrb	r3, [r4, #0]
 8021478:	f3bf 8f5b 	dmb	ish
 802147c:	07da      	lsls	r2, r3, #31
 802147e:	d40b      	bmi.n	8021498 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021480:	4620      	mov	r0, r4
 8021482:	f007 fc15 	bl	8028cb0 <__cxa_guard_acquire>
 8021486:	b138      	cbz	r0, 8021498 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8021488:	4620      	mov	r0, r4
 802148a:	f007 fc1d 	bl	8028cc8 <__cxa_guard_release>
 802148e:	4a0f      	ldr	r2, [pc, #60]	; (80214cc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8021490:	490f      	ldr	r1, [pc, #60]	; (80214d0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8021492:	4810      	ldr	r0, [pc, #64]	; (80214d4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8021494:	f007 fc05 	bl	8028ca2 <__aeabi_atexit>
 8021498:	4c0f      	ldr	r4, [pc, #60]	; (80214d8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 802149a:	7823      	ldrb	r3, [r4, #0]
 802149c:	f3bf 8f5b 	dmb	ish
 80214a0:	07db      	lsls	r3, r3, #31
 80214a2:	d40b      	bmi.n	80214bc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80214a4:	4620      	mov	r0, r4
 80214a6:	f007 fc03 	bl	8028cb0 <__cxa_guard_acquire>
 80214aa:	b138      	cbz	r0, 80214bc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80214ac:	4620      	mov	r0, r4
 80214ae:	f007 fc0b 	bl	8028cc8 <__cxa_guard_release>
 80214b2:	4a06      	ldr	r2, [pc, #24]	; (80214cc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80214b4:	4909      	ldr	r1, [pc, #36]	; (80214dc <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 80214b6:	480a      	ldr	r0, [pc, #40]	; (80214e0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80214b8:	f007 fbf3 	bl	8028ca2 <__aeabi_atexit>
 80214bc:	4b05      	ldr	r3, [pc, #20]	; (80214d4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80214be:	61ab      	str	r3, [r5, #24]
 80214c0:	4b07      	ldr	r3, [pc, #28]	; (80214e0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 80214c2:	61eb      	str	r3, [r5, #28]
 80214c4:	bd38      	pop	{r3, r4, r5, pc}
 80214c6:	bf00      	nop
 80214c8:	2003bf98 	.word	0x2003bf98
 80214cc:	20000000 	.word	0x20000000
 80214d0:	0801fc07 	.word	0x0801fc07
 80214d4:	20000060 	.word	0x20000060
 80214d8:	2003bf9c 	.word	0x2003bf9c
 80214dc:	0801fc05 	.word	0x0801fc05
 80214e0:	20000064 	.word	0x20000064

080214e4 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>:
 80214e4:	b510      	push	{r4, lr}
 80214e6:	4604      	mov	r4, r0
 80214e8:	f7ff ff88 	bl	80213fc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 80214ec:	4620      	mov	r0, r4
 80214ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80214f2:	f7ff bfbd 	b.w	8021470 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

080214f8 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 80214f8:	b538      	push	{r3, r4, r5, lr}
 80214fa:	4c0b      	ldr	r4, [pc, #44]	; (8021528 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x30>)
 80214fc:	4605      	mov	r5, r0
 80214fe:	7823      	ldrb	r3, [r4, #0]
 8021500:	f3bf 8f5b 	dmb	ish
 8021504:	07db      	lsls	r3, r3, #31
 8021506:	d40b      	bmi.n	8021520 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021508:	4620      	mov	r0, r4
 802150a:	f007 fbd1 	bl	8028cb0 <__cxa_guard_acquire>
 802150e:	b138      	cbz	r0, 8021520 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8021510:	4620      	mov	r0, r4
 8021512:	f007 fbd9 	bl	8028cc8 <__cxa_guard_release>
 8021516:	4a05      	ldr	r2, [pc, #20]	; (802152c <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x34>)
 8021518:	4905      	ldr	r1, [pc, #20]	; (8021530 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x38>)
 802151a:	4806      	ldr	r0, [pc, #24]	; (8021534 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 802151c:	f007 fbc1 	bl	8028ca2 <__aeabi_atexit>
 8021520:	4b04      	ldr	r3, [pc, #16]	; (8021534 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 8021522:	62eb      	str	r3, [r5, #44]	; 0x2c
 8021524:	bd38      	pop	{r3, r4, r5, pc}
 8021526:	bf00      	nop
 8021528:	2003bfd0 	.word	0x2003bfd0
 802152c:	20000000 	.word	0x20000000
 8021530:	0801fbfd 	.word	0x0801fbfd
 8021534:	20000098 	.word	0x20000098

08021538 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8021538:	b538      	push	{r3, r4, r5, lr}
 802153a:	4c0b      	ldr	r4, [pc, #44]	; (8021568 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x30>)
 802153c:	4605      	mov	r5, r0
 802153e:	7823      	ldrb	r3, [r4, #0]
 8021540:	f3bf 8f5b 	dmb	ish
 8021544:	07db      	lsls	r3, r3, #31
 8021546:	d40b      	bmi.n	8021560 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021548:	4620      	mov	r0, r4
 802154a:	f007 fbb1 	bl	8028cb0 <__cxa_guard_acquire>
 802154e:	b138      	cbz	r0, 8021560 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8021550:	4620      	mov	r0, r4
 8021552:	f007 fbb9 	bl	8028cc8 <__cxa_guard_release>
 8021556:	4a05      	ldr	r2, [pc, #20]	; (802156c <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x34>)
 8021558:	4905      	ldr	r1, [pc, #20]	; (8021570 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x38>)
 802155a:	4806      	ldr	r0, [pc, #24]	; (8021574 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 802155c:	f007 fba1 	bl	8028ca2 <__aeabi_atexit>
 8021560:	4b04      	ldr	r3, [pc, #16]	; (8021574 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 8021562:	62ab      	str	r3, [r5, #40]	; 0x28
 8021564:	bd38      	pop	{r3, r4, r5, pc}
 8021566:	bf00      	nop
 8021568:	2003bfa0 	.word	0x2003bfa0
 802156c:	20000000 	.word	0x20000000
 8021570:	0801fbff 	.word	0x0801fbff
 8021574:	20000068 	.word	0x20000068

08021578 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>:
 8021578:	b510      	push	{r4, lr}
 802157a:	4604      	mov	r4, r0
 802157c:	f7ff ffbc 	bl	80214f8 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 8021580:	4620      	mov	r0, r4
 8021582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021586:	f7ff bfd7 	b.w	8021538 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0802158c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 802158c:	b538      	push	{r3, r4, r5, lr}
 802158e:	4c15      	ldr	r4, [pc, #84]	; (80215e4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 8021590:	4605      	mov	r5, r0
 8021592:	7823      	ldrb	r3, [r4, #0]
 8021594:	f3bf 8f5b 	dmb	ish
 8021598:	07da      	lsls	r2, r3, #31
 802159a:	d40b      	bmi.n	80215b4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 802159c:	4620      	mov	r0, r4
 802159e:	f007 fb87 	bl	8028cb0 <__cxa_guard_acquire>
 80215a2:	b138      	cbz	r0, 80215b4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80215a4:	4620      	mov	r0, r4
 80215a6:	f007 fb8f 	bl	8028cc8 <__cxa_guard_release>
 80215aa:	4a0f      	ldr	r2, [pc, #60]	; (80215e8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80215ac:	490f      	ldr	r1, [pc, #60]	; (80215ec <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80215ae:	4810      	ldr	r0, [pc, #64]	; (80215f0 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80215b0:	f007 fb77 	bl	8028ca2 <__aeabi_atexit>
 80215b4:	4c0f      	ldr	r4, [pc, #60]	; (80215f4 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 80215b6:	7823      	ldrb	r3, [r4, #0]
 80215b8:	f3bf 8f5b 	dmb	ish
 80215bc:	07db      	lsls	r3, r3, #31
 80215be:	d40b      	bmi.n	80215d8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80215c0:	4620      	mov	r0, r4
 80215c2:	f007 fb75 	bl	8028cb0 <__cxa_guard_acquire>
 80215c6:	b138      	cbz	r0, 80215d8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 80215c8:	4620      	mov	r0, r4
 80215ca:	f007 fb7d 	bl	8028cc8 <__cxa_guard_release>
 80215ce:	4a06      	ldr	r2, [pc, #24]	; (80215e8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80215d0:	4909      	ldr	r1, [pc, #36]	; (80215f8 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 80215d2:	480a      	ldr	r0, [pc, #40]	; (80215fc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80215d4:	f007 fb65 	bl	8028ca2 <__aeabi_atexit>
 80215d8:	4b05      	ldr	r3, [pc, #20]	; (80215f0 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 80215da:	64ab      	str	r3, [r5, #72]	; 0x48
 80215dc:	4b07      	ldr	r3, [pc, #28]	; (80215fc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 80215de:	64eb      	str	r3, [r5, #76]	; 0x4c
 80215e0:	bd38      	pop	{r3, r4, r5, pc}
 80215e2:	bf00      	nop
 80215e4:	2003bfd4 	.word	0x2003bfd4
 80215e8:	20000000 	.word	0x20000000
 80215ec:	0801fbef 	.word	0x0801fbef
 80215f0:	2000009c 	.word	0x2000009c
 80215f4:	2003bfd8 	.word	0x2003bfd8
 80215f8:	0801fbed 	.word	0x0801fbed
 80215fc:	200000a0 	.word	0x200000a0

08021600 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8021600:	b538      	push	{r3, r4, r5, lr}
 8021602:	4c15      	ldr	r4, [pc, #84]	; (8021658 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8021604:	4605      	mov	r5, r0
 8021606:	7823      	ldrb	r3, [r4, #0]
 8021608:	f3bf 8f5b 	dmb	ish
 802160c:	07da      	lsls	r2, r3, #31
 802160e:	d40b      	bmi.n	8021628 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021610:	4620      	mov	r0, r4
 8021612:	f007 fb4d 	bl	8028cb0 <__cxa_guard_acquire>
 8021616:	b138      	cbz	r0, 8021628 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8021618:	4620      	mov	r0, r4
 802161a:	f007 fb55 	bl	8028cc8 <__cxa_guard_release>
 802161e:	4a0f      	ldr	r2, [pc, #60]	; (802165c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021620:	490f      	ldr	r1, [pc, #60]	; (8021660 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8021622:	4810      	ldr	r0, [pc, #64]	; (8021664 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8021624:	f007 fb3d 	bl	8028ca2 <__aeabi_atexit>
 8021628:	4c0f      	ldr	r4, [pc, #60]	; (8021668 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802162a:	7823      	ldrb	r3, [r4, #0]
 802162c:	f3bf 8f5b 	dmb	ish
 8021630:	07db      	lsls	r3, r3, #31
 8021632:	d40b      	bmi.n	802164c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8021634:	4620      	mov	r0, r4
 8021636:	f007 fb3b 	bl	8028cb0 <__cxa_guard_acquire>
 802163a:	b138      	cbz	r0, 802164c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802163c:	4620      	mov	r0, r4
 802163e:	f007 fb43 	bl	8028cc8 <__cxa_guard_release>
 8021642:	4a06      	ldr	r2, [pc, #24]	; (802165c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8021644:	4909      	ldr	r1, [pc, #36]	; (802166c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8021646:	480a      	ldr	r0, [pc, #40]	; (8021670 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021648:	f007 fb2b 	bl	8028ca2 <__aeabi_atexit>
 802164c:	4b05      	ldr	r3, [pc, #20]	; (8021664 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802164e:	642b      	str	r3, [r5, #64]	; 0x40
 8021650:	4b07      	ldr	r3, [pc, #28]	; (8021670 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8021652:	646b      	str	r3, [r5, #68]	; 0x44
 8021654:	bd38      	pop	{r3, r4, r5, pc}
 8021656:	bf00      	nop
 8021658:	2003bfdc 	.word	0x2003bfdc
 802165c:	20000000 	.word	0x20000000
 8021660:	0801fbf7 	.word	0x0801fbf7
 8021664:	200000a4 	.word	0x200000a4
 8021668:	2003bfe0 	.word	0x2003bfe0
 802166c:	0801fbf5 	.word	0x0801fbf5
 8021670:	200000a8 	.word	0x200000a8

08021674 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 8021674:	b538      	push	{r3, r4, r5, lr}
 8021676:	4c15      	ldr	r4, [pc, #84]	; (80216cc <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 8021678:	4605      	mov	r5, r0
 802167a:	7823      	ldrb	r3, [r4, #0]
 802167c:	f3bf 8f5b 	dmb	ish
 8021680:	07da      	lsls	r2, r3, #31
 8021682:	d40b      	bmi.n	802169c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 8021684:	4620      	mov	r0, r4
 8021686:	f007 fb13 	bl	8028cb0 <__cxa_guard_acquire>
 802168a:	b138      	cbz	r0, 802169c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 802168c:	4620      	mov	r0, r4
 802168e:	f007 fb1b 	bl	8028cc8 <__cxa_guard_release>
 8021692:	4a0f      	ldr	r2, [pc, #60]	; (80216d0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8021694:	490f      	ldr	r1, [pc, #60]	; (80216d4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 8021696:	4810      	ldr	r0, [pc, #64]	; (80216d8 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8021698:	f007 fb03 	bl	8028ca2 <__aeabi_atexit>
 802169c:	4c0f      	ldr	r4, [pc, #60]	; (80216dc <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 802169e:	7823      	ldrb	r3, [r4, #0]
 80216a0:	f3bf 8f5b 	dmb	ish
 80216a4:	07db      	lsls	r3, r3, #31
 80216a6:	d40b      	bmi.n	80216c0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80216a8:	4620      	mov	r0, r4
 80216aa:	f007 fb01 	bl	8028cb0 <__cxa_guard_acquire>
 80216ae:	b138      	cbz	r0, 80216c0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80216b0:	4620      	mov	r0, r4
 80216b2:	f007 fb09 	bl	8028cc8 <__cxa_guard_release>
 80216b6:	4a06      	ldr	r2, [pc, #24]	; (80216d0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80216b8:	4909      	ldr	r1, [pc, #36]	; (80216e0 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 80216ba:	480a      	ldr	r0, [pc, #40]	; (80216e4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80216bc:	f007 faf1 	bl	8028ca2 <__aeabi_atexit>
 80216c0:	4b05      	ldr	r3, [pc, #20]	; (80216d8 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80216c2:	63ab      	str	r3, [r5, #56]	; 0x38
 80216c4:	4b07      	ldr	r3, [pc, #28]	; (80216e4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 80216c6:	63eb      	str	r3, [r5, #60]	; 0x3c
 80216c8:	bd38      	pop	{r3, r4, r5, pc}
 80216ca:	bf00      	nop
 80216cc:	2003bfac 	.word	0x2003bfac
 80216d0:	20000000 	.word	0x20000000
 80216d4:	0801fbf3 	.word	0x0801fbf3
 80216d8:	20000074 	.word	0x20000074
 80216dc:	2003bfb0 	.word	0x2003bfb0
 80216e0:	0801fbf1 	.word	0x0801fbf1
 80216e4:	20000078 	.word	0x20000078

080216e8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 80216e8:	b538      	push	{r3, r4, r5, lr}
 80216ea:	4c15      	ldr	r4, [pc, #84]	; (8021740 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 80216ec:	4605      	mov	r5, r0
 80216ee:	7823      	ldrb	r3, [r4, #0]
 80216f0:	f3bf 8f5b 	dmb	ish
 80216f4:	07da      	lsls	r2, r3, #31
 80216f6:	d40b      	bmi.n	8021710 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 80216f8:	4620      	mov	r0, r4
 80216fa:	f007 fad9 	bl	8028cb0 <__cxa_guard_acquire>
 80216fe:	b138      	cbz	r0, 8021710 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8021700:	4620      	mov	r0, r4
 8021702:	f007 fae1 	bl	8028cc8 <__cxa_guard_release>
 8021706:	4a0f      	ldr	r2, [pc, #60]	; (8021744 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8021708:	490f      	ldr	r1, [pc, #60]	; (8021748 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802170a:	4810      	ldr	r0, [pc, #64]	; (802174c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802170c:	f007 fac9 	bl	8028ca2 <__aeabi_atexit>
 8021710:	4c0f      	ldr	r4, [pc, #60]	; (8021750 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8021712:	7823      	ldrb	r3, [r4, #0]
 8021714:	f3bf 8f5b 	dmb	ish
 8021718:	07db      	lsls	r3, r3, #31
 802171a:	d40b      	bmi.n	8021734 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802171c:	4620      	mov	r0, r4
 802171e:	f007 fac7 	bl	8028cb0 <__cxa_guard_acquire>
 8021722:	b138      	cbz	r0, 8021734 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8021724:	4620      	mov	r0, r4
 8021726:	f007 facf 	bl	8028cc8 <__cxa_guard_release>
 802172a:	4a06      	ldr	r2, [pc, #24]	; (8021744 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802172c:	4909      	ldr	r1, [pc, #36]	; (8021754 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802172e:	480a      	ldr	r0, [pc, #40]	; (8021758 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8021730:	f007 fab7 	bl	8028ca2 <__aeabi_atexit>
 8021734:	4b05      	ldr	r3, [pc, #20]	; (802174c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8021736:	632b      	str	r3, [r5, #48]	; 0x30
 8021738:	4b07      	ldr	r3, [pc, #28]	; (8021758 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802173a:	636b      	str	r3, [r5, #52]	; 0x34
 802173c:	bd38      	pop	{r3, r4, r5, pc}
 802173e:	bf00      	nop
 8021740:	2003bfc8 	.word	0x2003bfc8
 8021744:	20000000 	.word	0x20000000
 8021748:	0801fbfb 	.word	0x0801fbfb
 802174c:	20000090 	.word	0x20000090
 8021750:	2003bfcc 	.word	0x2003bfcc
 8021754:	0801fbf9 	.word	0x0801fbf9
 8021758:	20000094 	.word	0x20000094

0802175c <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>:
 802175c:	b510      	push	{r4, lr}
 802175e:	4604      	mov	r4, r0
 8021760:	f7ff ff14 	bl	802158c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 8021764:	4620      	mov	r0, r4
 8021766:	f7ff ff85 	bl	8021674 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 802176a:	4620      	mov	r0, r4
 802176c:	f7ff ff48 	bl	8021600 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 8021770:	4620      	mov	r0, r4
 8021772:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021776:	f7ff bfb7 	b.w	80216e8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0802177c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 802177c:	b538      	push	{r3, r4, r5, lr}
 802177e:	4c15      	ldr	r4, [pc, #84]	; (80217d4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 8021780:	4605      	mov	r5, r0
 8021782:	7823      	ldrb	r3, [r4, #0]
 8021784:	f3bf 8f5b 	dmb	ish
 8021788:	07da      	lsls	r2, r3, #31
 802178a:	d40b      	bmi.n	80217a4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 802178c:	4620      	mov	r0, r4
 802178e:	f007 fa8f 	bl	8028cb0 <__cxa_guard_acquire>
 8021792:	b138      	cbz	r0, 80217a4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 8021794:	4620      	mov	r0, r4
 8021796:	f007 fa97 	bl	8028cc8 <__cxa_guard_release>
 802179a:	4a0f      	ldr	r2, [pc, #60]	; (80217d8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 802179c:	490f      	ldr	r1, [pc, #60]	; (80217dc <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 802179e:	4810      	ldr	r0, [pc, #64]	; (80217e0 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80217a0:	f007 fa7f 	bl	8028ca2 <__aeabi_atexit>
 80217a4:	4c0f      	ldr	r4, [pc, #60]	; (80217e4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80217a6:	7823      	ldrb	r3, [r4, #0]
 80217a8:	f3bf 8f5b 	dmb	ish
 80217ac:	07db      	lsls	r3, r3, #31
 80217ae:	d40b      	bmi.n	80217c8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80217b0:	4620      	mov	r0, r4
 80217b2:	f007 fa7d 	bl	8028cb0 <__cxa_guard_acquire>
 80217b6:	b138      	cbz	r0, 80217c8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 80217b8:	4620      	mov	r0, r4
 80217ba:	f007 fa85 	bl	8028cc8 <__cxa_guard_release>
 80217be:	4a06      	ldr	r2, [pc, #24]	; (80217d8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80217c0:	4909      	ldr	r1, [pc, #36]	; (80217e8 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 80217c2:	480a      	ldr	r0, [pc, #40]	; (80217ec <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80217c4:	f007 fa6d 	bl	8028ca2 <__aeabi_atexit>
 80217c8:	4b05      	ldr	r3, [pc, #20]	; (80217e0 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80217ca:	65ab      	str	r3, [r5, #88]	; 0x58
 80217cc:	4b07      	ldr	r3, [pc, #28]	; (80217ec <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 80217ce:	65eb      	str	r3, [r5, #92]	; 0x5c
 80217d0:	bd38      	pop	{r3, r4, r5, pc}
 80217d2:	bf00      	nop
 80217d4:	2003bfa4 	.word	0x2003bfa4
 80217d8:	20000000 	.word	0x20000000
 80217dc:	0801fbe7 	.word	0x0801fbe7
 80217e0:	2000006c 	.word	0x2000006c
 80217e4:	2003bfa8 	.word	0x2003bfa8
 80217e8:	0801fbe5 	.word	0x0801fbe5
 80217ec:	20000070 	.word	0x20000070

080217f0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 80217f0:	b538      	push	{r3, r4, r5, lr}
 80217f2:	4c15      	ldr	r4, [pc, #84]	; (8021848 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 80217f4:	4605      	mov	r5, r0
 80217f6:	7823      	ldrb	r3, [r4, #0]
 80217f8:	f3bf 8f5b 	dmb	ish
 80217fc:	07da      	lsls	r2, r3, #31
 80217fe:	d40b      	bmi.n	8021818 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021800:	4620      	mov	r0, r4
 8021802:	f007 fa55 	bl	8028cb0 <__cxa_guard_acquire>
 8021806:	b138      	cbz	r0, 8021818 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8021808:	4620      	mov	r0, r4
 802180a:	f007 fa5d 	bl	8028cc8 <__cxa_guard_release>
 802180e:	4a0f      	ldr	r2, [pc, #60]	; (802184c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021810:	490f      	ldr	r1, [pc, #60]	; (8021850 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8021812:	4810      	ldr	r0, [pc, #64]	; (8021854 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8021814:	f007 fa45 	bl	8028ca2 <__aeabi_atexit>
 8021818:	4c0f      	ldr	r4, [pc, #60]	; (8021858 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802181a:	7823      	ldrb	r3, [r4, #0]
 802181c:	f3bf 8f5b 	dmb	ish
 8021820:	07db      	lsls	r3, r3, #31
 8021822:	d40b      	bmi.n	802183c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8021824:	4620      	mov	r0, r4
 8021826:	f007 fa43 	bl	8028cb0 <__cxa_guard_acquire>
 802182a:	b138      	cbz	r0, 802183c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802182c:	4620      	mov	r0, r4
 802182e:	f007 fa4b 	bl	8028cc8 <__cxa_guard_release>
 8021832:	4a06      	ldr	r2, [pc, #24]	; (802184c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8021834:	4909      	ldr	r1, [pc, #36]	; (802185c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8021836:	480a      	ldr	r0, [pc, #40]	; (8021860 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021838:	f007 fa33 	bl	8028ca2 <__aeabi_atexit>
 802183c:	4b05      	ldr	r3, [pc, #20]	; (8021854 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802183e:	652b      	str	r3, [r5, #80]	; 0x50
 8021840:	4b07      	ldr	r3, [pc, #28]	; (8021860 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8021842:	656b      	str	r3, [r5, #84]	; 0x54
 8021844:	bd38      	pop	{r3, r4, r5, pc}
 8021846:	bf00      	nop
 8021848:	2003bf7c 	.word	0x2003bf7c
 802184c:	20000000 	.word	0x20000000
 8021850:	0801fbeb 	.word	0x0801fbeb
 8021854:	20000044 	.word	0x20000044
 8021858:	2003bf80 	.word	0x2003bf80
 802185c:	0801fbe9 	.word	0x0801fbe9
 8021860:	20000048 	.word	0x20000048

08021864 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>:
 8021864:	b510      	push	{r4, lr}
 8021866:	4604      	mov	r4, r0
 8021868:	f7ff ff88 	bl	802177c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 802186c:	4620      	mov	r0, r4
 802186e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021872:	f7ff bfbd 	b.w	80217f0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

08021878 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 8021878:	b538      	push	{r3, r4, r5, lr}
 802187a:	4c0b      	ldr	r4, [pc, #44]	; (80218a8 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x30>)
 802187c:	4605      	mov	r5, r0
 802187e:	7823      	ldrb	r3, [r4, #0]
 8021880:	f3bf 8f5b 	dmb	ish
 8021884:	07db      	lsls	r3, r3, #31
 8021886:	d40b      	bmi.n	80218a0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021888:	4620      	mov	r0, r4
 802188a:	f007 fa11 	bl	8028cb0 <__cxa_guard_acquire>
 802188e:	b138      	cbz	r0, 80218a0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 8021890:	4620      	mov	r0, r4
 8021892:	f007 fa19 	bl	8028cc8 <__cxa_guard_release>
 8021896:	4a05      	ldr	r2, [pc, #20]	; (80218ac <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x34>)
 8021898:	4905      	ldr	r1, [pc, #20]	; (80218b0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x38>)
 802189a:	4806      	ldr	r0, [pc, #24]	; (80218b4 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 802189c:	f007 fa01 	bl	8028ca2 <__aeabi_atexit>
 80218a0:	4b04      	ldr	r3, [pc, #16]	; (80218b4 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 80218a2:	666b      	str	r3, [r5, #100]	; 0x64
 80218a4:	bd38      	pop	{r3, r4, r5, pc}
 80218a6:	bf00      	nop
 80218a8:	2003bfb4 	.word	0x2003bfb4
 80218ac:	20000000 	.word	0x20000000
 80218b0:	0801fbe1 	.word	0x0801fbe1
 80218b4:	2000007c 	.word	0x2000007c

080218b8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 80218b8:	b538      	push	{r3, r4, r5, lr}
 80218ba:	4c0b      	ldr	r4, [pc, #44]	; (80218e8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x30>)
 80218bc:	4605      	mov	r5, r0
 80218be:	7823      	ldrb	r3, [r4, #0]
 80218c0:	f3bf 8f5b 	dmb	ish
 80218c4:	07db      	lsls	r3, r3, #31
 80218c6:	d40b      	bmi.n	80218e0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80218c8:	4620      	mov	r0, r4
 80218ca:	f007 f9f1 	bl	8028cb0 <__cxa_guard_acquire>
 80218ce:	b138      	cbz	r0, 80218e0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 80218d0:	4620      	mov	r0, r4
 80218d2:	f007 f9f9 	bl	8028cc8 <__cxa_guard_release>
 80218d6:	4a05      	ldr	r2, [pc, #20]	; (80218ec <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x34>)
 80218d8:	4905      	ldr	r1, [pc, #20]	; (80218f0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x38>)
 80218da:	4806      	ldr	r0, [pc, #24]	; (80218f4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 80218dc:	f007 f9e1 	bl	8028ca2 <__aeabi_atexit>
 80218e0:	4b04      	ldr	r3, [pc, #16]	; (80218f4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 80218e2:	662b      	str	r3, [r5, #96]	; 0x60
 80218e4:	bd38      	pop	{r3, r4, r5, pc}
 80218e6:	bf00      	nop
 80218e8:	2003bf8c 	.word	0x2003bf8c
 80218ec:	20000000 	.word	0x20000000
 80218f0:	0801fbe3 	.word	0x0801fbe3
 80218f4:	20000054 	.word	0x20000054

080218f8 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>:
 80218f8:	b510      	push	{r4, lr}
 80218fa:	4604      	mov	r4, r0
 80218fc:	f7ff ffbc 	bl	8021878 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8021900:	4620      	mov	r0, r4
 8021902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021906:	f7ff bfd7 	b.w	80218b8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802190c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802190c:	b538      	push	{r3, r4, r5, lr}
 802190e:	4c15      	ldr	r4, [pc, #84]	; (8021964 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8021910:	4605      	mov	r5, r0
 8021912:	7823      	ldrb	r3, [r4, #0]
 8021914:	f3bf 8f5b 	dmb	ish
 8021918:	07da      	lsls	r2, r3, #31
 802191a:	d40b      	bmi.n	8021934 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802191c:	4620      	mov	r0, r4
 802191e:	f007 f9c7 	bl	8028cb0 <__cxa_guard_acquire>
 8021922:	b138      	cbz	r0, 8021934 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8021924:	4620      	mov	r0, r4
 8021926:	f007 f9cf 	bl	8028cc8 <__cxa_guard_release>
 802192a:	4a0f      	ldr	r2, [pc, #60]	; (8021968 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802192c:	490f      	ldr	r1, [pc, #60]	; (802196c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802192e:	4810      	ldr	r0, [pc, #64]	; (8021970 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8021930:	f007 f9b7 	bl	8028ca2 <__aeabi_atexit>
 8021934:	4c0f      	ldr	r4, [pc, #60]	; (8021974 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8021936:	7823      	ldrb	r3, [r4, #0]
 8021938:	f3bf 8f5b 	dmb	ish
 802193c:	07db      	lsls	r3, r3, #31
 802193e:	d40b      	bmi.n	8021958 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021940:	4620      	mov	r0, r4
 8021942:	f007 f9b5 	bl	8028cb0 <__cxa_guard_acquire>
 8021946:	b138      	cbz	r0, 8021958 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8021948:	4620      	mov	r0, r4
 802194a:	f007 f9bd 	bl	8028cc8 <__cxa_guard_release>
 802194e:	4a06      	ldr	r2, [pc, #24]	; (8021968 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 8021950:	4909      	ldr	r1, [pc, #36]	; (8021978 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 8021952:	480a      	ldr	r0, [pc, #40]	; (802197c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 8021954:	f007 f9a5 	bl	8028ca2 <__aeabi_atexit>
 8021958:	4b05      	ldr	r3, [pc, #20]	; (8021970 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 802195a:	672b      	str	r3, [r5, #112]	; 0x70
 802195c:	4b07      	ldr	r3, [pc, #28]	; (802197c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 802195e:	676b      	str	r3, [r5, #116]	; 0x74
 8021960:	bd38      	pop	{r3, r4, r5, pc}
 8021962:	bf00      	nop
 8021964:	2003bf84 	.word	0x2003bf84
 8021968:	20000000 	.word	0x20000000
 802196c:	0801fbdb 	.word	0x0801fbdb
 8021970:	2000004c 	.word	0x2000004c
 8021974:	2003bf88 	.word	0x2003bf88
 8021978:	0801fbd9 	.word	0x0801fbd9
 802197c:	20000050 	.word	0x20000050

08021980 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>:
 8021980:	b538      	push	{r3, r4, r5, lr}
 8021982:	4c15      	ldr	r4, [pc, #84]	; (80219d8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 8021984:	4605      	mov	r5, r0
 8021986:	7823      	ldrb	r3, [r4, #0]
 8021988:	f3bf 8f5b 	dmb	ish
 802198c:	07da      	lsls	r2, r3, #31
 802198e:	d40b      	bmi.n	80219a8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021990:	4620      	mov	r0, r4
 8021992:	f007 f98d 	bl	8028cb0 <__cxa_guard_acquire>
 8021996:	b138      	cbz	r0, 80219a8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 8021998:	4620      	mov	r0, r4
 802199a:	f007 f995 	bl	8028cc8 <__cxa_guard_release>
 802199e:	4a0f      	ldr	r2, [pc, #60]	; (80219dc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80219a0:	490f      	ldr	r1, [pc, #60]	; (80219e0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80219a2:	4810      	ldr	r0, [pc, #64]	; (80219e4 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80219a4:	f007 f97d 	bl	8028ca2 <__aeabi_atexit>
 80219a8:	4c0f      	ldr	r4, [pc, #60]	; (80219e8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80219aa:	7823      	ldrb	r3, [r4, #0]
 80219ac:	f3bf 8f5b 	dmb	ish
 80219b0:	07db      	lsls	r3, r3, #31
 80219b2:	d40b      	bmi.n	80219cc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80219b4:	4620      	mov	r0, r4
 80219b6:	f007 f97b 	bl	8028cb0 <__cxa_guard_acquire>
 80219ba:	b138      	cbz	r0, 80219cc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 80219bc:	4620      	mov	r0, r4
 80219be:	f007 f983 	bl	8028cc8 <__cxa_guard_release>
 80219c2:	4a06      	ldr	r2, [pc, #24]	; (80219dc <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80219c4:	4909      	ldr	r1, [pc, #36]	; (80219ec <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 80219c6:	480a      	ldr	r0, [pc, #40]	; (80219f0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80219c8:	f007 f96b 	bl	8028ca2 <__aeabi_atexit>
 80219cc:	4b05      	ldr	r3, [pc, #20]	; (80219e4 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80219ce:	66ab      	str	r3, [r5, #104]	; 0x68
 80219d0:	4b07      	ldr	r3, [pc, #28]	; (80219f0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 80219d2:	66eb      	str	r3, [r5, #108]	; 0x6c
 80219d4:	bd38      	pop	{r3, r4, r5, pc}
 80219d6:	bf00      	nop
 80219d8:	2003bf74 	.word	0x2003bf74
 80219dc:	20000000 	.word	0x20000000
 80219e0:	0801fbdf 	.word	0x0801fbdf
 80219e4:	2000003c 	.word	0x2000003c
 80219e8:	2003bf78 	.word	0x2003bf78
 80219ec:	0801fbdd 	.word	0x0801fbdd
 80219f0:	20000040 	.word	0x20000040

080219f4 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>:
 80219f4:	b510      	push	{r4, lr}
 80219f6:	4604      	mov	r4, r0
 80219f8:	f7ff ff88 	bl	802190c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>
 80219fc:	4620      	mov	r0, r4
 80219fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a02:	f7ff bfbd 	b.w	8021980 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>

08021a06 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>:
 8021a06:	b510      	push	{r4, lr}
 8021a08:	4604      	mov	r4, r0
 8021a0a:	f7ff fff3 	bl	80219f4 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>
 8021a0e:	4620      	mov	r0, r4
 8021a10:	f7ff ff72 	bl	80218f8 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>
 8021a14:	4620      	mov	r0, r4
 8021a16:	f7ff fdaf 	bl	8021578 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>
 8021a1a:	4620      	mov	r0, r4
 8021a1c:	f7ff fce4 	bl	80213e8 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>
 8021a20:	4620      	mov	r0, r4
 8021a22:	f7ff fd5f 	bl	80214e4 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>
 8021a26:	4620      	mov	r0, r4
 8021a28:	f7ff fe98 	bl	802175c <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>
 8021a2c:	4620      	mov	r0, r4
 8021a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a32:	f7ff bf17 	b.w	8021864 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>

08021a36 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>:
 8021a36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a3a:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	; 0x38
 8021a3e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8021a42:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8021a46:	f1b8 0f00 	cmp.w	r8, #0
 8021a4a:	fb08 640e 	mla	r4, r8, lr, r6
 8021a4e:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8021a52:	9001      	str	r0, [sp, #4]
 8021a54:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 8021a58:	eb02 0a04 	add.w	sl, r2, r4
 8021a5c:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 8021a60:	6808      	ldr	r0, [r1, #0]
 8021a62:	f2c0 80dc 	blt.w	8021c1e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 8021a66:	45c3      	cmp	fp, r8
 8021a68:	f340 80d9 	ble.w	8021c1e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 8021a6c:	2e00      	cmp	r6, #0
 8021a6e:	f2c0 80d4 	blt.w	8021c1a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8021a72:	45b6      	cmp	lr, r6
 8021a74:	f340 80d1 	ble.w	8021c1a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 8021a78:	5d12      	ldrb	r2, [r2, r4]
 8021a7a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 8021a7e:	ea4f 222c 	mov.w	r2, ip, asr #8
 8021a82:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8021a86:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021a8a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021a8e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021a92:	ea42 1952 	orr.w	r9, r2, r2, lsr #5
 8021a96:	ea44 1294 	orr.w	r2, r4, r4, lsr #6
 8021a9a:	fa5f fc8c 	uxtb.w	ip, ip
 8021a9e:	0212      	lsls	r2, r2, #8
 8021aa0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8021aa4:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8021aa8:	ea42 020c 	orr.w	r2, r2, ip
 8021aac:	1c74      	adds	r4, r6, #1
 8021aae:	f100 80b7 	bmi.w	8021c20 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8021ab2:	45a6      	cmp	lr, r4
 8021ab4:	f340 80b4 	ble.w	8021c20 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8021ab8:	2d00      	cmp	r5, #0
 8021aba:	f000 80b1 	beq.w	8021c20 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8021abe:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8021ac2:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 8021ac6:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8021aca:	ea4f 292c 	mov.w	r9, ip, asr #8
 8021ace:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021ad2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021ad6:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8021ada:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021ade:	fa5f fc8c 	uxtb.w	ip, ip
 8021ae2:	ea49 1959 	orr.w	r9, r9, r9, lsr #5
 8021ae6:	0224      	lsls	r4, r4, #8
 8021ae8:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8021aec:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8021af0:	ea49 090c 	orr.w	r9, r9, ip
 8021af4:	f118 0801 	adds.w	r8, r8, #1
 8021af8:	f100 8096 	bmi.w	8021c28 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 8021afc:	45c3      	cmp	fp, r8
 8021afe:	f340 8093 	ble.w	8021c28 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 8021b02:	9c01      	ldr	r4, [sp, #4]
 8021b04:	2c00      	cmp	r4, #0
 8021b06:	f000 808f 	beq.w	8021c28 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 8021b0a:	2e00      	cmp	r6, #0
 8021b0c:	f2c0 808a 	blt.w	8021c24 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 8021b10:	45b6      	cmp	lr, r6
 8021b12:	f340 8087 	ble.w	8021c24 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 8021b16:	f81a 400e 	ldrb.w	r4, [sl, lr]
 8021b1a:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
 8021b1e:	ea4f 2824 	mov.w	r8, r4, asr #8
 8021b22:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 8021b26:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8021b2a:	00e4      	lsls	r4, r4, #3
 8021b2c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8021b30:	ea48 1b58 	orr.w	fp, r8, r8, lsr #5
 8021b34:	ea4c 189c 	orr.w	r8, ip, ip, lsr #6
 8021b38:	b2e4      	uxtb	r4, r4
 8021b3a:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8021b3e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021b42:	ea48 480b 	orr.w	r8, r8, fp, lsl #16
 8021b46:	ea48 0804 	orr.w	r8, r8, r4
 8021b4a:	3601      	adds	r6, #1
 8021b4c:	d419      	bmi.n	8021b82 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8021b4e:	45b6      	cmp	lr, r6
 8021b50:	dd17      	ble.n	8021b82 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8021b52:	b1b5      	cbz	r5, 8021b82 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8021b54:	44d6      	add	lr, sl
 8021b56:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8021b5a:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8021b5e:	10dc      	asrs	r4, r3, #3
 8021b60:	1218      	asrs	r0, r3, #8
 8021b62:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8021b66:	00db      	lsls	r3, r3, #3
 8021b68:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8021b6c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8021b70:	ea40 1650 	orr.w	r6, r0, r0, lsr #5
 8021b74:	b2db      	uxtb	r3, r3
 8021b76:	0220      	lsls	r0, r4, #8
 8021b78:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021b7c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8021b80:	4318      	orrs	r0, r3
 8021b82:	b2ad      	uxth	r5, r5
 8021b84:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8021b88:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8021b8c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8021b90:	fb05 fa03 	mul.w	sl, r5, r3
 8021b94:	012d      	lsls	r5, r5, #4
 8021b96:	2fff      	cmp	r7, #255	; 0xff
 8021b98:	ebca 1303 	rsb	r3, sl, r3, lsl #4
 8021b9c:	f5c5 7b80 	rsb	fp, r5, #256	; 0x100
 8021ba0:	eba5 050a 	sub.w	r5, r5, sl
 8021ba4:	fa1f fe83 	uxth.w	lr, r3
 8021ba8:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 8021bac:	b2ad      	uxth	r5, r5
 8021bae:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8021bb2:	ebab 0b0e 	sub.w	fp, fp, lr
 8021bb6:	fb05 f303 	mul.w	r3, r5, r3
 8021bba:	fa1f fb8b 	uxth.w	fp, fp
 8021bbe:	fb05 f509 	mul.w	r5, r5, r9
 8021bc2:	fb0b 3606 	mla	r6, fp, r6, r3
 8021bc6:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8021bca:	fb0b 5502 	mla	r5, fp, r2, r5
 8021bce:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021bd2:	fb0a 6603 	mla	r6, sl, r3, r6
 8021bd6:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 8021bda:	fb0a 5000 	mla	r0, sl, r0, r5
 8021bde:	fb0e 6303 	mla	r3, lr, r3, r6
 8021be2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8021be6:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8021bea:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 8021bee:	fb0e 0303 	mla	r3, lr, r3, r0
 8021bf2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8021bf6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021bfa:	ea43 0306 	orr.w	r3, r3, r6
 8021bfe:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8021c02:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8021c06:	b2d4      	uxtb	r4, r2
 8021c08:	b2c5      	uxtb	r5, r0
 8021c0a:	d10f      	bne.n	8021c2c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f6>
 8021c0c:	700b      	strb	r3, [r1, #0]
 8021c0e:	7048      	strb	r0, [r1, #1]
 8021c10:	708a      	strb	r2, [r1, #2]
 8021c12:	70cf      	strb	r7, [r1, #3]
 8021c14:	b003      	add	sp, #12
 8021c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c1a:	4602      	mov	r2, r0
 8021c1c:	e746      	b.n	8021aac <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x76>
 8021c1e:	4602      	mov	r2, r0
 8021c20:	4681      	mov	r9, r0
 8021c22:	e767      	b.n	8021af4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0xbe>
 8021c24:	4680      	mov	r8, r0
 8021c26:	e790      	b.n	8021b4a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x114>
 8021c28:	4680      	mov	r8, r0
 8021c2a:	e7aa      	b.n	8021b82 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8021c2c:	2f00      	cmp	r7, #0
 8021c2e:	d0f1      	beq.n	8021c14 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>
 8021c30:	78ce      	ldrb	r6, [r1, #3]
 8021c32:	b2db      	uxtb	r3, r3
 8021c34:	fb17 f505 	smulbb	r5, r7, r5
 8021c38:	fb07 f206 	mul.w	r2, r7, r6
 8021c3c:	1c50      	adds	r0, r2, #1
 8021c3e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8021c42:	19ba      	adds	r2, r7, r6
 8021c44:	1200      	asrs	r0, r0, #8
 8021c46:	1a12      	subs	r2, r2, r0
 8021c48:	1a30      	subs	r0, r6, r0
 8021c4a:	780e      	ldrb	r6, [r1, #0]
 8021c4c:	b2d2      	uxtb	r2, r2
 8021c4e:	4346      	muls	r6, r0
 8021c50:	70ca      	strb	r2, [r1, #3]
 8021c52:	fb07 6303 	mla	r3, r7, r3, r6
 8021c56:	fb17 f704 	smulbb	r7, r7, r4
 8021c5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8021c5e:	700b      	strb	r3, [r1, #0]
 8021c60:	784b      	ldrb	r3, [r1, #1]
 8021c62:	fb00 5303 	mla	r3, r0, r3, r5
 8021c66:	fb93 f3f2 	sdiv	r3, r3, r2
 8021c6a:	704b      	strb	r3, [r1, #1]
 8021c6c:	788b      	ldrb	r3, [r1, #2]
 8021c6e:	fb00 7703 	mla	r7, r0, r3, r7
 8021c72:	fb97 f7f2 	sdiv	r7, r7, r2
 8021c76:	708f      	strb	r7, [r1, #2]
 8021c78:	e7cc      	b.n	8021c14 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>

08021c7a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021c7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c7e:	b097      	sub	sp, #92	; 0x5c
 8021c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8021c84:	9213      	str	r2, [sp, #76]	; 0x4c
 8021c86:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8021c88:	9014      	str	r0, [sp, #80]	; 0x50
 8021c8a:	910c      	str	r1, [sp, #48]	; 0x30
 8021c8c:	6850      	ldr	r0, [r2, #4]
 8021c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8021c90:	6812      	ldr	r2, [r2, #0]
 8021c92:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
 8021c96:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8021c9a:	e9dd a621 	ldrd	sl, r6, [sp, #132]	; 0x84
 8021c9e:	fb00 1303 	mla	r3, r0, r3, r1
 8021ca2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021ca6:	930a      	str	r3, [sp, #40]	; 0x28
 8021ca8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021caa:	681b      	ldr	r3, [r3, #0]
 8021cac:	930b      	str	r3, [sp, #44]	; 0x2c
 8021cae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021cb0:	685f      	ldr	r7, [r3, #4]
 8021cb2:	3704      	adds	r7, #4
 8021cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021cb6:	2b00      	cmp	r3, #0
 8021cb8:	dc03      	bgt.n	8021cc2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8021cba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8021cbc:	2b00      	cmp	r3, #0
 8021cbe:	f340 826a 	ble.w	8022196 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8021cc2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021cc4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021cc8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021ccc:	1e48      	subs	r0, r1, #1
 8021cce:	f102 3cff 	add.w	ip, r2, #4294967295
 8021cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021cd4:	2b00      	cmp	r3, #0
 8021cd6:	f340 80ce 	ble.w	8021e76 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8021cda:	ea5f 4e2a 	movs.w	lr, sl, asr #16
 8021cde:	ea4f 4326 	mov.w	r3, r6, asr #16
 8021ce2:	d406      	bmi.n	8021cf2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021ce4:	4586      	cmp	lr, r0
 8021ce6:	da04      	bge.n	8021cf2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021ce8:	2b00      	cmp	r3, #0
 8021cea:	db02      	blt.n	8021cf2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021cec:	4563      	cmp	r3, ip
 8021cee:	f2c0 80c3 	blt.w	8021e78 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8021cf2:	f11e 0e01 	adds.w	lr, lr, #1
 8021cf6:	f100 80b3 	bmi.w	8021e60 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021cfa:	4571      	cmp	r1, lr
 8021cfc:	f2c0 80b0 	blt.w	8021e60 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021d00:	3301      	adds	r3, #1
 8021d02:	f100 80ad 	bmi.w	8021e60 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021d06:	429a      	cmp	r2, r3
 8021d08:	f2c0 80aa 	blt.w	8021e60 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8021d0c:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
 8021d10:	f1bb 0f00 	cmp.w	fp, #0
 8021d14:	f340 80ce 	ble.w	8021eb4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8021d18:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021d1a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8021d1e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8021d20:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8021d24:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8021d28:	ea5f 422a 	movs.w	r2, sl, asr #16
 8021d2c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021d30:	689b      	ldr	r3, [r3, #8]
 8021d32:	f100 8141 	bmi.w	8021fb8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d36:	f103 39ff 	add.w	r9, r3, #4294967295
 8021d3a:	454a      	cmp	r2, r9
 8021d3c:	f280 813c 	bge.w	8021fb8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d40:	f1bc 0f00 	cmp.w	ip, #0
 8021d44:	f2c0 8138 	blt.w	8021fb8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d48:	f10e 39ff 	add.w	r9, lr, #4294967295
 8021d4c:	45cc      	cmp	ip, r9
 8021d4e:	f280 8133 	bge.w	8021fb8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8021d52:	b21b      	sxth	r3, r3
 8021d54:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8021d56:	fb0c 2203 	mla	r2, ip, r3, r2
 8021d5a:	eb05 0902 	add.w	r9, r5, r2
 8021d5e:	5caa      	ldrb	r2, [r5, r2]
 8021d60:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8021d64:	2800      	cmp	r0, #0
 8021d66:	f000 80e9 	beq.w	8021f3c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8021d6a:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021d6e:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8021d72:	920f      	str	r2, [sp, #60]	; 0x3c
 8021d74:	b151      	cbz	r1, 8021d8c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021d76:	eb09 0203 	add.w	r2, r9, r3
 8021d7a:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021d7e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021d82:	930d      	str	r3, [sp, #52]	; 0x34
 8021d84:	7853      	ldrb	r3, [r2, #1]
 8021d86:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021d8a:	9310      	str	r3, [sp, #64]	; 0x40
 8021d8c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021d8e:	fb10 f201 	smulbb	r2, r0, r1
 8021d92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8021d94:	2cff      	cmp	r4, #255	; 0xff
 8021d96:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8021d9a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021d9e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8021da2:	ea4f 02e2 	mov.w	r2, r2, asr #3
 8021da6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021daa:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8021dae:	ea4c 0c03 	orr.w	ip, ip, r3
 8021db2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021db4:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8021db8:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8021dbc:	ea43 0305 	orr.w	r3, r3, r5
 8021dc0:	fb02 f303 	mul.w	r3, r2, r3
 8021dc4:	fb09 330c 	mla	r3, r9, ip, r3
 8021dc8:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8021dcc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8021dd0:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8021dd4:	ea4c 0e0e 	orr.w	lr, ip, lr
 8021dd8:	f1c1 0c10 	rsb	ip, r1, #16
 8021ddc:	ebac 0c00 	sub.w	ip, ip, r0
 8021de0:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8021de4:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8021de8:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8021dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021dee:	ea4f 4003 	mov.w	r0, r3, lsl #16
 8021df2:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021df6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8021dfa:	ea40 0003 	orr.w	r0, r0, r3
 8021dfe:	fb02 c200 	mla	r2, r2, r0, ip
 8021e02:	ea4f 5352 	mov.w	r3, r2, lsr #21
 8021e06:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8021e0a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021e0e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8021e12:	ea42 0203 	orr.w	r2, r2, r3
 8021e16:	b293      	uxth	r3, r2
 8021e18:	ea4f 2223 	mov.w	r2, r3, asr #8
 8021e1c:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8021e20:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8021e24:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8021e28:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8021e2c:	b2db      	uxtb	r3, r3
 8021e2e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8021e32:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8021e36:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8021e3a:	f040 8088 	bne.w	8021f4e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8021e3e:	f888 3000 	strb.w	r3, [r8]
 8021e42:	f888 1001 	strb.w	r1, [r8, #1]
 8021e46:	f888 2002 	strb.w	r2, [r8, #2]
 8021e4a:	f888 4003 	strb.w	r4, [r8, #3]
 8021e4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021e50:	f108 0804 	add.w	r8, r8, #4
 8021e54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021e58:	449a      	add	sl, r3
 8021e5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e5c:	441e      	add	r6, r3
 8021e5e:	e757      	b.n	8021d10 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8021e60:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8021e62:	449a      	add	sl, r3
 8021e64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021e66:	441e      	add	r6, r3
 8021e68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e6a:	3b01      	subs	r3, #1
 8021e6c:	9309      	str	r3, [sp, #36]	; 0x24
 8021e6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021e70:	3304      	adds	r3, #4
 8021e72:	930a      	str	r3, [sp, #40]	; 0x28
 8021e74:	e72d      	b.n	8021cd2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8021e76:	d024      	beq.n	8021ec2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8021e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021e7a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8021e7c:	3b01      	subs	r3, #1
 8021e7e:	fb00 a003 	mla	r0, r0, r3, sl
 8021e82:	1400      	asrs	r0, r0, #16
 8021e84:	f53f af42 	bmi.w	8021d0c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021e88:	3901      	subs	r1, #1
 8021e8a:	4288      	cmp	r0, r1
 8021e8c:	f6bf af3e 	bge.w	8021d0c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021e90:	9924      	ldr	r1, [sp, #144]	; 0x90
 8021e92:	fb01 6303 	mla	r3, r1, r3, r6
 8021e96:	141b      	asrs	r3, r3, #16
 8021e98:	f53f af38 	bmi.w	8021d0c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021e9c:	3a01      	subs	r2, #1
 8021e9e:	4293      	cmp	r3, r2
 8021ea0:	f6bf af34 	bge.w	8021d0c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021ea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ea6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8021eaa:	3304      	adds	r3, #4
 8021eac:	f1b9 0f00 	cmp.w	r9, #0
 8021eb0:	f300 80a1 	bgt.w	8021ff6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8021eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021eb6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8021eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8021ebc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8021ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8021ec2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021ec4:	2b00      	cmp	r3, #0
 8021ec6:	f340 8166 	ble.w	8022196 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8021eca:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021ece:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021ed0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021ed4:	eeb0 6a62 	vmov.f32	s12, s5
 8021ed8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021edc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021ee0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021ee4:	ee16 aa10 	vmov	sl, s12
 8021ee8:	eeb0 6a43 	vmov.f32	s12, s6
 8021eec:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8021ef0:	ee16 6a10 	vmov	r6, s12
 8021ef4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021ef8:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021efc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021f00:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021f04:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021f08:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021f0c:	ee12 2a90 	vmov	r2, s5
 8021f10:	eef0 2a47 	vmov.f32	s5, s14
 8021f14:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f18:	ee13 2a10 	vmov	r2, s6
 8021f1c:	9323      	str	r3, [sp, #140]	; 0x8c
 8021f1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f20:	eeb0 3a67 	vmov.f32	s6, s15
 8021f24:	fb92 f3f3 	sdiv	r3, r2, r3
 8021f28:	9324      	str	r3, [sp, #144]	; 0x90
 8021f2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021f2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8021f2e:	3b01      	subs	r3, #1
 8021f30:	930c      	str	r3, [sp, #48]	; 0x30
 8021f32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021f34:	bf08      	it	eq
 8021f36:	4613      	moveq	r3, r2
 8021f38:	9309      	str	r3, [sp, #36]	; 0x24
 8021f3a:	e6bb      	b.n	8021cb4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8021f3c:	2900      	cmp	r1, #0
 8021f3e:	f43f af25 	beq.w	8021d8c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021f42:	f819 3003 	ldrb.w	r3, [r9, r3]
 8021f46:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8021f4a:	930d      	str	r3, [sp, #52]	; 0x34
 8021f4c:	e71e      	b.n	8021d8c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8021f4e:	2c00      	cmp	r4, #0
 8021f50:	f43f af7d 	beq.w	8021e4e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021f54:	f898 e003 	ldrb.w	lr, [r8, #3]
 8021f58:	fb13 f304 	smulbb	r3, r3, r4
 8021f5c:	fb14 f101 	smulbb	r1, r4, r1
 8021f60:	fb14 f202 	smulbb	r2, r4, r2
 8021f64:	fb04 fc0e 	mul.w	ip, r4, lr
 8021f68:	f10c 0001 	add.w	r0, ip, #1
 8021f6c:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8021f70:	eb04 0c0e 	add.w	ip, r4, lr
 8021f74:	1200      	asrs	r0, r0, #8
 8021f76:	ebac 0c00 	sub.w	ip, ip, r0
 8021f7a:	ebae 0000 	sub.w	r0, lr, r0
 8021f7e:	f898 e000 	ldrb.w	lr, [r8]
 8021f82:	fa5f fc8c 	uxtb.w	ip, ip
 8021f86:	fb00 330e 	mla	r3, r0, lr, r3
 8021f8a:	f888 c003 	strb.w	ip, [r8, #3]
 8021f8e:	fb93 f3fc 	sdiv	r3, r3, ip
 8021f92:	f888 3000 	strb.w	r3, [r8]
 8021f96:	f898 3001 	ldrb.w	r3, [r8, #1]
 8021f9a:	fb00 1103 	mla	r1, r0, r3, r1
 8021f9e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8021fa2:	fb00 2003 	mla	r0, r0, r3, r2
 8021fa6:	fb91 f1fc 	sdiv	r1, r1, ip
 8021faa:	fb90 f0fc 	sdiv	r0, r0, ip
 8021fae:	f888 1001 	strb.w	r1, [r8, #1]
 8021fb2:	f888 0002 	strb.w	r0, [r8, #2]
 8021fb6:	e74a      	b.n	8021e4e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021fb8:	f112 0901 	adds.w	r9, r2, #1
 8021fbc:	f53f af47 	bmi.w	8021e4e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021fc0:	454b      	cmp	r3, r9
 8021fc2:	f6ff af44 	blt.w	8021e4e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021fc6:	f11c 0901 	adds.w	r9, ip, #1
 8021fca:	f53f af40 	bmi.w	8021e4e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021fce:	45ce      	cmp	lr, r9
 8021fd0:	f6ff af3d 	blt.w	8021e4e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021fd4:	9202      	str	r2, [sp, #8]
 8021fd6:	b21b      	sxth	r3, r3
 8021fd8:	fa0f f28e 	sxth.w	r2, lr
 8021fdc:	9300      	str	r3, [sp, #0]
 8021fde:	463b      	mov	r3, r7
 8021fe0:	9201      	str	r2, [sp, #4]
 8021fe2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021fe4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8021fe8:	e9cd c003 	strd	ip, r0, [sp, #12]
 8021fec:	4641      	mov	r1, r8
 8021fee:	9814      	ldr	r0, [sp, #80]	; 0x50
 8021ff0:	f7ff fd21 	bl	8021a36 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>
 8021ff4:	e72b      	b.n	8021e4e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8021ff6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021ff8:	ea4f 412a 	mov.w	r1, sl, asr #16
 8021ffc:	1430      	asrs	r0, r6, #16
 8021ffe:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022000:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022004:	f3ca 3803 	ubfx	r8, sl, #12, #4
 8022008:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802200c:	fb02 1000 	mla	r0, r2, r0, r1
 8022010:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022012:	4401      	add	r1, r0
 8022014:	5c28      	ldrb	r0, [r5, r0]
 8022016:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
 802201a:	f1b8 0f00 	cmp.w	r8, #0
 802201e:	d07d      	beq.n	802211c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a2>
 8022020:	f891 e001 	ldrb.w	lr, [r1, #1]
 8022024:	f837 501e 	ldrh.w	r5, [r7, lr, lsl #1]
 8022028:	9511      	str	r5, [sp, #68]	; 0x44
 802202a:	f1bc 0f00 	cmp.w	ip, #0
 802202e:	d00a      	beq.n	8022046 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022030:	eb01 0e02 	add.w	lr, r1, r2
 8022034:	5c8a      	ldrb	r2, [r1, r2]
 8022036:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 802203a:	920e      	str	r2, [sp, #56]	; 0x38
 802203c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022040:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022044:	9212      	str	r2, [sp, #72]	; 0x48
 8022046:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022048:	fb18 f10c 	smulbb	r1, r8, ip
 802204c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802204e:	2cff      	cmp	r4, #255	; 0xff
 8022050:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8022054:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022058:	ea4f 01e1 	mov.w	r1, r1, asr #3
 802205c:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8022060:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022064:	ea4e 0e02 	orr.w	lr, lr, r2
 8022068:	ebc1 0248 	rsb	r2, r1, r8, lsl #1
 802206c:	9215      	str	r2, [sp, #84]	; 0x54
 802206e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022070:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022072:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8022076:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802207a:	ea42 020b 	orr.w	r2, r2, fp
 802207e:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022082:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022086:	fb01 f202 	mul.w	r2, r1, r2
 802208a:	fb05 2e0e 	mla	lr, r5, lr, r2
 802208e:	f00b 62fc 	and.w	r2, fp, #132120576	; 0x7e00000
 8022092:	ea42 0b00 	orr.w	fp, r2, r0
 8022096:	f1cc 0010 	rsb	r0, ip, #16
 802209a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802209c:	eba0 0808 	sub.w	r8, r0, r8
 80220a0:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 80220a4:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
 80220a8:	fb08 ee0b 	mla	lr, r8, fp, lr
 80220ac:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 80220b0:	f422 68fc 	bic.w	r8, r2, #2016	; 0x7e0
 80220b4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80220b8:	ea4b 0808 	orr.w	r8, fp, r8
 80220bc:	fb01 ee08 	mla	lr, r1, r8, lr
 80220c0:	ea4f 525e 	mov.w	r2, lr, lsr #21
 80220c4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80220c8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80220cc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80220d0:	ea42 0e0e 	orr.w	lr, r2, lr
 80220d4:	fa1f f28e 	uxth.w	r2, lr
 80220d8:	ea4f 2122 	mov.w	r1, r2, asr #8
 80220dc:	ea4f 00e2 	mov.w	r0, r2, asr #3
 80220e0:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80220e4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80220e8:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80220ec:	b2d2      	uxtb	r2, r2
 80220ee:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80220f2:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80220f6:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80220fa:	d117      	bne.n	802212c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 80220fc:	f803 2c04 	strb.w	r2, [r3, #-4]
 8022100:	f803 0c03 	strb.w	r0, [r3, #-3]
 8022104:	f803 1c02 	strb.w	r1, [r3, #-2]
 8022108:	f803 4c01 	strb.w	r4, [r3, #-1]
 802210c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802210e:	3304      	adds	r3, #4
 8022110:	f109 39ff 	add.w	r9, r9, #4294967295
 8022114:	4492      	add	sl, r2
 8022116:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8022118:	4416      	add	r6, r2
 802211a:	e6c7      	b.n	8021eac <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802211c:	f1bc 0f00 	cmp.w	ip, #0
 8022120:	d091      	beq.n	8022046 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022122:	5c8a      	ldrb	r2, [r1, r2]
 8022124:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022128:	920e      	str	r2, [sp, #56]	; 0x38
 802212a:	e78c      	b.n	8022046 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802212c:	2c00      	cmp	r4, #0
 802212e:	d0ed      	beq.n	802210c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8022130:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 8022134:	fb12 f204 	smulbb	r2, r2, r4
 8022138:	fb14 f000 	smulbb	r0, r4, r0
 802213c:	fb14 f101 	smulbb	r1, r4, r1
 8022140:	fb04 fc08 	mul.w	ip, r4, r8
 8022144:	f10c 0e01 	add.w	lr, ip, #1
 8022148:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802214c:	eb04 0c08 	add.w	ip, r4, r8
 8022150:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022154:	ebac 0c0e 	sub.w	ip, ip, lr
 8022158:	eba8 0e0e 	sub.w	lr, r8, lr
 802215c:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 8022160:	fa5f fc8c 	uxtb.w	ip, ip
 8022164:	fb0e 2208 	mla	r2, lr, r8, r2
 8022168:	f803 cc01 	strb.w	ip, [r3, #-1]
 802216c:	fb92 f2fc 	sdiv	r2, r2, ip
 8022170:	f803 2c04 	strb.w	r2, [r3, #-4]
 8022174:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8022178:	fb0e 0002 	mla	r0, lr, r2, r0
 802217c:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8022180:	fb0e 1e02 	mla	lr, lr, r2, r1
 8022184:	fb90 f0fc 	sdiv	r0, r0, ip
 8022188:	fb9e fefc 	sdiv	lr, lr, ip
 802218c:	f803 0c03 	strb.w	r0, [r3, #-3]
 8022190:	f803 ec02 	strb.w	lr, [r3, #-2]
 8022194:	e7ba      	b.n	802210c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8022196:	b017      	add	sp, #92	; 0x5c
 8022198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802219c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>:
 802219c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80221a0:	e9dd 7e0b 	ldrd	r7, lr, [sp, #44]	; 0x2c
 80221a4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80221a8:	f1be 0f00 	cmp.w	lr, #0
 80221ac:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80221b0:	fb0e 7409 	mla	r4, lr, r9, r7
 80221b4:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80221b8:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80221bc:	eb02 0a04 	add.w	sl, r2, r4
 80221c0:	6808      	ldr	r0, [r1, #0]
 80221c2:	f2c0 80c5 	blt.w	8022350 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 80221c6:	45f0      	cmp	r8, lr
 80221c8:	f340 80c2 	ble.w	8022350 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 80221cc:	2f00      	cmp	r7, #0
 80221ce:	f2c0 80bd 	blt.w	802234c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 80221d2:	45b9      	cmp	r9, r7
 80221d4:	f340 80ba 	ble.w	802234c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 80221d8:	5d12      	ldrb	r2, [r2, r4]
 80221da:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 80221de:	122c      	asrs	r4, r5, #8
 80221e0:	10ea      	asrs	r2, r5, #3
 80221e2:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 80221e6:	00ed      	lsls	r5, r5, #3
 80221e8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80221ec:	ea44 1b54 	orr.w	fp, r4, r4, lsr #5
 80221f0:	ea42 1492 	orr.w	r4, r2, r2, lsr #6
 80221f4:	b2ed      	uxtb	r5, r5
 80221f6:	0224      	lsls	r4, r4, #8
 80221f8:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80221fc:	ea44 440b 	orr.w	r4, r4, fp, lsl #16
 8022200:	432c      	orrs	r4, r5
 8022202:	1c7a      	adds	r2, r7, #1
 8022204:	f100 80a7 	bmi.w	8022356 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8022208:	4591      	cmp	r9, r2
 802220a:	f340 80a4 	ble.w	8022356 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 802220e:	2e00      	cmp	r6, #0
 8022210:	f000 80a1 	beq.w	8022356 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8022214:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022218:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
 802221c:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8022220:	ea4f 252b 	mov.w	r5, fp, asr #8
 8022224:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8022228:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802222c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8022230:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8022234:	fa5f fb8b 	uxtb.w	fp, fp
 8022238:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802223c:	0212      	lsls	r2, r2, #8
 802223e:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8022242:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8022246:	ea45 050b 	orr.w	r5, r5, fp
 802224a:	f11e 0e01 	adds.w	lr, lr, #1
 802224e:	f100 8086 	bmi.w	802235e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8022252:	45f0      	cmp	r8, lr
 8022254:	f340 8083 	ble.w	802235e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 8022258:	f1bc 0f00 	cmp.w	ip, #0
 802225c:	d07f      	beq.n	802235e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 802225e:	2f00      	cmp	r7, #0
 8022260:	db7b      	blt.n	802235a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8022262:	45b9      	cmp	r9, r7
 8022264:	dd79      	ble.n	802235a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 8022266:	f81a 2009 	ldrb.w	r2, [sl, r9]
 802226a:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 802226e:	ea4f 222e 	mov.w	r2, lr, asr #8
 8022272:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8022276:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802227a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802227e:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8022282:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 8022286:	ea48 1298 	orr.w	r2, r8, r8, lsr #6
 802228a:	fa5f fe8e 	uxtb.w	lr, lr
 802228e:	0212      	lsls	r2, r2, #8
 8022290:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8022294:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 8022298:	ea42 020e 	orr.w	r2, r2, lr
 802229c:	3701      	adds	r7, #1
 802229e:	d419      	bmi.n	80222d4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 80222a0:	45b9      	cmp	r9, r7
 80222a2:	dd17      	ble.n	80222d4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 80222a4:	b1b6      	cbz	r6, 80222d4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 80222a6:	44d1      	add	r9, sl
 80222a8:	f899 0001 	ldrb.w	r0, [r9, #1]
 80222ac:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 80222b0:	10df      	asrs	r7, r3, #3
 80222b2:	1218      	asrs	r0, r3, #8
 80222b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80222b8:	00db      	lsls	r3, r3, #3
 80222ba:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80222be:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 80222c2:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 80222c6:	b2db      	uxtb	r3, r3
 80222c8:	0238      	lsls	r0, r7, #8
 80222ca:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80222ce:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80222d2:	4318      	orrs	r0, r3
 80222d4:	b2b6      	uxth	r6, r6
 80222d6:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 80222da:	fa1f f78c 	uxth.w	r7, ip
 80222de:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80222e2:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80222e6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80222ea:	fb06 fc07 	mul.w	ip, r6, r7
 80222ee:	0136      	lsls	r6, r6, #4
 80222f0:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80222f4:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 80222f8:	eba6 060c 	sub.w	r6, r6, ip
 80222fc:	b2bf      	uxth	r7, r7
 80222fe:	b2b6      	uxth	r6, r6
 8022300:	ebae 0e07 	sub.w	lr, lr, r7
 8022304:	4373      	muls	r3, r6
 8022306:	fa1f fe8e 	uxth.w	lr, lr
 802230a:	4375      	muls	r5, r6
 802230c:	fb0e 3808 	mla	r8, lr, r8, r3
 8022310:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022314:	fb0e 5404 	mla	r4, lr, r4, r5
 8022318:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802231c:	fb0c 8803 	mla	r8, ip, r3, r8
 8022320:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022324:	fb0c 4000 	mla	r0, ip, r0, r4
 8022328:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802232c:	fb07 8303 	mla	r3, r7, r3, r8
 8022330:	fb07 0002 	mla	r0, r7, r2, r0
 8022334:	0a1b      	lsrs	r3, r3, #8
 8022336:	0a00      	lsrs	r0, r0, #8
 8022338:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802233c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022340:	4318      	orrs	r0, r3
 8022342:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022346:	6008      	str	r0, [r1, #0]
 8022348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802234c:	4604      	mov	r4, r0
 802234e:	e758      	b.n	8022202 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x66>
 8022350:	4605      	mov	r5, r0
 8022352:	4604      	mov	r4, r0
 8022354:	e779      	b.n	802224a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 8022356:	4605      	mov	r5, r0
 8022358:	e777      	b.n	802224a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 802235a:	4602      	mov	r2, r0
 802235c:	e79e      	b.n	802229c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x100>
 802235e:	4602      	mov	r2, r0
 8022360:	e7b8      	b.n	80222d4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>

08022362 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022362:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022366:	b093      	sub	sp, #76	; 0x4c
 8022368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802236c:	920f      	str	r2, [sp, #60]	; 0x3c
 802236e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8022370:	9010      	str	r0, [sp, #64]	; 0x40
 8022372:	9108      	str	r1, [sp, #32]
 8022374:	6850      	ldr	r0, [r2, #4]
 8022376:	9306      	str	r3, [sp, #24]
 8022378:	6812      	ldr	r2, [r2, #0]
 802237a:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 802237e:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 8022382:	fb00 1303 	mla	r3, r0, r3, r1
 8022386:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 802238a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802238c:	681b      	ldr	r3, [r3, #0]
 802238e:	9307      	str	r3, [sp, #28]
 8022390:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022392:	685f      	ldr	r7, [r3, #4]
 8022394:	3704      	adds	r7, #4
 8022396:	9b08      	ldr	r3, [sp, #32]
 8022398:	2b00      	cmp	r3, #0
 802239a:	dc03      	bgt.n	80223a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802239c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802239e:	2b00      	cmp	r3, #0
 80223a0:	f340 81d9 	ble.w	8022756 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80223a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80223a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80223aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80223ae:	1e48      	subs	r0, r1, #1
 80223b0:	f102 3cff 	add.w	ip, r2, #4294967295
 80223b4:	9b06      	ldr	r3, [sp, #24]
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	f340 80bc 	ble.w	8022534 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 80223bc:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80223c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80223c4:	d406      	bmi.n	80223d4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80223c6:	4586      	cmp	lr, r0
 80223c8:	da04      	bge.n	80223d4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	db02      	blt.n	80223d4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80223ce:	4563      	cmp	r3, ip
 80223d0:	f2c0 80b1 	blt.w	8022536 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 80223d4:	f11e 0e01 	adds.w	lr, lr, #1
 80223d8:	f100 80a2 	bmi.w	8022520 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80223dc:	4571      	cmp	r1, lr
 80223de:	f2c0 809f 	blt.w	8022520 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80223e2:	3301      	adds	r3, #1
 80223e4:	f100 809c 	bmi.w	8022520 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80223e8:	429a      	cmp	r2, r3
 80223ea:	f2c0 8099 	blt.w	8022520 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 80223ee:	f8dd b018 	ldr.w	fp, [sp, #24]
 80223f2:	46c8      	mov	r8, r9
 80223f4:	f1bb 0f00 	cmp.w	fp, #0
 80223f8:	f340 80b9 	ble.w	802256e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80223fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80223fe:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022402:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022404:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8022408:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802240c:	1422      	asrs	r2, r4, #16
 802240e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022412:	689b      	ldr	r3, [r3, #8]
 8022414:	f100 80f6 	bmi.w	8022604 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022418:	f103 3aff 	add.w	sl, r3, #4294967295
 802241c:	4552      	cmp	r2, sl
 802241e:	f280 80f1 	bge.w	8022604 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022422:	f1bc 0f00 	cmp.w	ip, #0
 8022426:	f2c0 80ed 	blt.w	8022604 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802242a:	f10e 3aff 	add.w	sl, lr, #4294967295
 802242e:	45d4      	cmp	ip, sl
 8022430:	f280 80e8 	bge.w	8022604 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8022434:	b21b      	sxth	r3, r3
 8022436:	9d07      	ldr	r5, [sp, #28]
 8022438:	fb0c 2203 	mla	r2, ip, r3, r2
 802243c:	eb05 0a02 	add.w	sl, r5, r2
 8022440:	5caa      	ldrb	r2, [r5, r2]
 8022442:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022446:	2800      	cmp	r0, #0
 8022448:	f000 80d3 	beq.w	80225f2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802244c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8022450:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022454:	920b      	str	r2, [sp, #44]	; 0x2c
 8022456:	b151      	cbz	r1, 802246e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022458:	eb0a 0203 	add.w	r2, sl, r3
 802245c:	f81a 3003 	ldrb.w	r3, [sl, r3]
 8022460:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022464:	9309      	str	r3, [sp, #36]	; 0x24
 8022466:	7853      	ldrb	r3, [r2, #1]
 8022468:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802246c:	930c      	str	r3, [sp, #48]	; 0x30
 802246e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022470:	fb10 f201 	smulbb	r2, r0, r1
 8022474:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8022476:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 802247a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802247e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022482:	10d2      	asrs	r2, r2, #3
 8022484:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022488:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 802248c:	ea4c 0c03 	orr.w	ip, ip, r3
 8022490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022492:	041b      	lsls	r3, r3, #16
 8022494:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022498:	432b      	orrs	r3, r5
 802249a:	4353      	muls	r3, r2
 802249c:	fb0a 330c 	mla	r3, sl, ip, r3
 80224a0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80224a4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80224a8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80224ac:	ea4c 0e0e 	orr.w	lr, ip, lr
 80224b0:	f1c1 0c10 	rsb	ip, r1, #16
 80224b4:	ebac 0c00 	sub.w	ip, ip, r0
 80224b8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 80224bc:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 80224c0:	fb0c 3c0e 	mla	ip, ip, lr, r3
 80224c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80224c6:	0418      	lsls	r0, r3, #16
 80224c8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80224cc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80224d0:	4318      	orrs	r0, r3
 80224d2:	fb02 c200 	mla	r2, r2, r0, ip
 80224d6:	0d51      	lsrs	r1, r2, #21
 80224d8:	0952      	lsrs	r2, r2, #5
 80224da:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80224de:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80224e2:	430a      	orrs	r2, r1
 80224e4:	b291      	uxth	r1, r2
 80224e6:	10ca      	asrs	r2, r1, #3
 80224e8:	1208      	asrs	r0, r1, #8
 80224ea:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 80224ee:	00c9      	lsls	r1, r1, #3
 80224f0:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80224f4:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80224f8:	b2c9      	uxtb	r1, r1
 80224fa:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80224fe:	021b      	lsls	r3, r3, #8
 8022500:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8022504:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8022508:	430b      	orrs	r3, r1
 802250a:	f8c8 3000 	str.w	r3, [r8]
 802250e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022510:	f108 0804 	add.w	r8, r8, #4
 8022514:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022518:	441c      	add	r4, r3
 802251a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802251c:	441e      	add	r6, r3
 802251e:	e769      	b.n	80223f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022520:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8022522:	f109 0904 	add.w	r9, r9, #4
 8022526:	441c      	add	r4, r3
 8022528:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802252a:	441e      	add	r6, r3
 802252c:	9b06      	ldr	r3, [sp, #24]
 802252e:	3b01      	subs	r3, #1
 8022530:	9306      	str	r3, [sp, #24]
 8022532:	e73f      	b.n	80223b4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022534:	d020      	beq.n	8022578 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8022536:	9b06      	ldr	r3, [sp, #24]
 8022538:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802253a:	3b01      	subs	r3, #1
 802253c:	fb00 4003 	mla	r0, r0, r3, r4
 8022540:	1400      	asrs	r0, r0, #16
 8022542:	f53f af54 	bmi.w	80223ee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022546:	3901      	subs	r1, #1
 8022548:	4288      	cmp	r0, r1
 802254a:	f6bf af50 	bge.w	80223ee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802254e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8022550:	fb01 6303 	mla	r3, r1, r3, r6
 8022554:	141b      	asrs	r3, r3, #16
 8022556:	f53f af4a 	bmi.w	80223ee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802255a:	3a01      	subs	r2, #1
 802255c:	4293      	cmp	r3, r2
 802255e:	f6bf af46 	bge.w	80223ee <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022562:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022566:	46ca      	mov	sl, r9
 8022568:	f1b8 0f00 	cmp.w	r8, #0
 802256c:	dc67      	bgt.n	802263e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 802256e:	9b06      	ldr	r3, [sp, #24]
 8022570:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022574:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 8022578:	9b08      	ldr	r3, [sp, #32]
 802257a:	2b00      	cmp	r3, #0
 802257c:	f340 80eb 	ble.w	8022756 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 8022580:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022584:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022586:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802258a:	eeb0 6a62 	vmov.f32	s12, s5
 802258e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022592:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022596:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802259a:	ee16 4a10 	vmov	r4, s12
 802259e:	eeb0 6a43 	vmov.f32	s12, s6
 80225a2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80225a6:	ee16 6a10 	vmov	r6, s12
 80225aa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80225ae:	ee61 7a27 	vmul.f32	s15, s2, s15
 80225b2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80225b6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80225ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80225be:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80225c2:	ee12 2a90 	vmov	r2, s5
 80225c6:	eef0 2a47 	vmov.f32	s5, s14
 80225ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80225ce:	ee13 2a10 	vmov	r2, s6
 80225d2:	931f      	str	r3, [sp, #124]	; 0x7c
 80225d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80225d6:	eeb0 3a67 	vmov.f32	s6, s15
 80225da:	fb92 f3f3 	sdiv	r3, r2, r3
 80225de:	9320      	str	r3, [sp, #128]	; 0x80
 80225e0:	9b08      	ldr	r3, [sp, #32]
 80225e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80225e4:	3b01      	subs	r3, #1
 80225e6:	9308      	str	r3, [sp, #32]
 80225e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80225ea:	bf08      	it	eq
 80225ec:	4613      	moveq	r3, r2
 80225ee:	9306      	str	r3, [sp, #24]
 80225f0:	e6d1      	b.n	8022396 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80225f2:	2900      	cmp	r1, #0
 80225f4:	f43f af3b 	beq.w	802246e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80225f8:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80225fc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022600:	9309      	str	r3, [sp, #36]	; 0x24
 8022602:	e734      	b.n	802246e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8022604:	f112 0a01 	adds.w	sl, r2, #1
 8022608:	d481      	bmi.n	802250e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802260a:	4553      	cmp	r3, sl
 802260c:	f6ff af7f 	blt.w	802250e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022610:	f11c 0a01 	adds.w	sl, ip, #1
 8022614:	f53f af7b 	bmi.w	802250e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8022618:	45d6      	cmp	lr, sl
 802261a:	f6ff af78 	blt.w	802250e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802261e:	b21b      	sxth	r3, r3
 8022620:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8022624:	fa0f f28e 	sxth.w	r2, lr
 8022628:	9300      	str	r3, [sp, #0]
 802262a:	463b      	mov	r3, r7
 802262c:	9201      	str	r2, [sp, #4]
 802262e:	9a07      	ldr	r2, [sp, #28]
 8022630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8022634:	4641      	mov	r1, r8
 8022636:	9810      	ldr	r0, [sp, #64]	; 0x40
 8022638:	f7ff fdb0 	bl	802219c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>
 802263c:	e767      	b.n	802250e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802263e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022640:	1422      	asrs	r2, r4, #16
 8022642:	1431      	asrs	r1, r6, #16
 8022644:	9d07      	ldr	r5, [sp, #28]
 8022646:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802264a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802264e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022652:	fb03 2101 	mla	r1, r3, r1, r2
 8022656:	9a07      	ldr	r2, [sp, #28]
 8022658:	440a      	add	r2, r1
 802265a:	5c69      	ldrb	r1, [r5, r1]
 802265c:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 8022660:	f1be 0f00 	cmp.w	lr, #0
 8022664:	d070      	beq.n	8022748 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 8022666:	f892 c001 	ldrb.w	ip, [r2, #1]
 802266a:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 802266e:	950d      	str	r5, [sp, #52]	; 0x34
 8022670:	b150      	cbz	r0, 8022688 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022672:	eb02 0c03 	add.w	ip, r2, r3
 8022676:	5cd3      	ldrb	r3, [r2, r3]
 8022678:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 802267c:	930a      	str	r3, [sp, #40]	; 0x28
 802267e:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8022682:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022686:	930e      	str	r3, [sp, #56]	; 0x38
 8022688:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802268a:	fb1e f200 	smulbb	r2, lr, r0
 802268e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8022690:	f108 38ff 	add.w	r8, r8, #4294967295
 8022694:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022698:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802269c:	10d2      	asrs	r2, r2, #3
 802269e:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80226a2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80226a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80226aa:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80226ae:	9311      	str	r3, [sp, #68]	; 0x44
 80226b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80226b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80226b4:	041b      	lsls	r3, r3, #16
 80226b6:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80226ba:	ea43 030b 	orr.w	r3, r3, fp
 80226be:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80226c2:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80226c6:	4353      	muls	r3, r2
 80226c8:	fb05 3c0c 	mla	ip, r5, ip, r3
 80226cc:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 80226d0:	ea43 0b01 	orr.w	fp, r3, r1
 80226d4:	f1c0 0110 	rsb	r1, r0, #16
 80226d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80226da:	eba1 0e0e 	sub.w	lr, r1, lr
 80226de:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80226e2:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 80226e6:	fb0e cc0b 	mla	ip, lr, fp, ip
 80226ea:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 80226ee:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 80226f2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80226f6:	ea4b 0e0e 	orr.w	lr, fp, lr
 80226fa:	fb02 cc0e 	mla	ip, r2, lr, ip
 80226fe:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8022702:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8022706:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802270a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802270e:	ea42 0c0c 	orr.w	ip, r2, ip
 8022712:	fa1f f28c 	uxth.w	r2, ip
 8022716:	10d3      	asrs	r3, r2, #3
 8022718:	1211      	asrs	r1, r2, #8
 802271a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802271e:	00d2      	lsls	r2, r2, #3
 8022720:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8022724:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8022728:	b2d2      	uxtb	r2, r2
 802272a:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802272e:	021b      	lsls	r3, r3, #8
 8022730:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022734:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8022738:	431a      	orrs	r2, r3
 802273a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802273c:	441c      	add	r4, r3
 802273e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022740:	f84a 2b04 	str.w	r2, [sl], #4
 8022744:	441e      	add	r6, r3
 8022746:	e70f      	b.n	8022568 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8022748:	2800      	cmp	r0, #0
 802274a:	d09d      	beq.n	8022688 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802274c:	5cd3      	ldrb	r3, [r2, r3]
 802274e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022752:	930a      	str	r3, [sp, #40]	; 0x28
 8022754:	e798      	b.n	8022688 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8022756:	b013      	add	sp, #76	; 0x4c
 8022758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802275c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 802275c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022760:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 8022764:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022768:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 802276c:	f1b8 0f00 	cmp.w	r8, #0
 8022770:	fb08 750e 	mla	r5, r8, lr, r7
 8022774:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 8022778:	9001      	str	r0, [sp, #4]
 802277a:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 802277e:	eb02 0a05 	add.w	sl, r2, r5
 8022782:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 8022786:	6808      	ldr	r0, [r1, #0]
 8022788:	f2c0 80b2 	blt.w	80228f0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 802278c:	45c3      	cmp	fp, r8
 802278e:	f340 80af 	ble.w	80228f0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 8022792:	2f00      	cmp	r7, #0
 8022794:	f2c0 80aa 	blt.w	80228ec <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 8022798:	45be      	cmp	lr, r7
 802279a:	f340 80a7 	ble.w	80228ec <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 802279e:	5d55      	ldrb	r5, [r2, r5]
 80227a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80227a4:	195a      	adds	r2, r3, r5
 80227a6:	5d5d      	ldrb	r5, [r3, r5]
 80227a8:	f892 9001 	ldrb.w	r9, [r2, #1]
 80227ac:	7892      	ldrb	r2, [r2, #2]
 80227ae:	0412      	lsls	r2, r2, #16
 80227b0:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 80227b4:	432a      	orrs	r2, r5
 80227b6:	1c7d      	adds	r5, r7, #1
 80227b8:	f100 809b 	bmi.w	80228f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 80227bc:	45ae      	cmp	lr, r5
 80227be:	f340 8098 	ble.w	80228f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 80227c2:	2c00      	cmp	r4, #0
 80227c4:	f000 8095 	beq.w	80228f2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 80227c8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 80227cc:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 80227d0:	eb03 0509 	add.w	r5, r3, r9
 80227d4:	f813 9009 	ldrb.w	r9, [r3, r9]
 80227d8:	786e      	ldrb	r6, [r5, #1]
 80227da:	78ad      	ldrb	r5, [r5, #2]
 80227dc:	042d      	lsls	r5, r5, #16
 80227de:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 80227e2:	ea45 0509 	orr.w	r5, r5, r9
 80227e6:	f118 0801 	adds.w	r8, r8, #1
 80227ea:	f100 8086 	bmi.w	80228fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80227ee:	45c3      	cmp	fp, r8
 80227f0:	f340 8083 	ble.w	80228fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80227f4:	9e01      	ldr	r6, [sp, #4]
 80227f6:	2e00      	cmp	r6, #0
 80227f8:	d07f      	beq.n	80228fa <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 80227fa:	2f00      	cmp	r7, #0
 80227fc:	eb0a 090e 	add.w	r9, sl, lr
 8022800:	db79      	blt.n	80228f6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 8022802:	45be      	cmp	lr, r7
 8022804:	dd77      	ble.n	80228f6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 8022806:	f81a a00e 	ldrb.w	sl, [sl, lr]
 802280a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802280e:	eb03 080a 	add.w	r8, r3, sl
 8022812:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8022816:	f898 b001 	ldrb.w	fp, [r8, #1]
 802281a:	f898 8002 	ldrb.w	r8, [r8, #2]
 802281e:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8022822:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
 8022826:	ea48 080a 	orr.w	r8, r8, sl
 802282a:	3701      	adds	r7, #1
 802282c:	d411      	bmi.n	8022852 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 802282e:	45be      	cmp	lr, r7
 8022830:	dd0f      	ble.n	8022852 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 8022832:	b174      	cbz	r4, 8022852 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 8022834:	f899 7001 	ldrb.w	r7, [r9, #1]
 8022838:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802283c:	eb03 0e07 	add.w	lr, r3, r7
 8022840:	5ddb      	ldrb	r3, [r3, r7]
 8022842:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8022846:	f89e 9001 	ldrb.w	r9, [lr, #1]
 802284a:	0400      	lsls	r0, r0, #16
 802284c:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 8022850:	4318      	orrs	r0, r3
 8022852:	b2a4      	uxth	r4, r4
 8022854:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 8022858:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 802285c:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 8022860:	fb04 fe06 	mul.w	lr, r4, r6
 8022864:	0124      	lsls	r4, r4, #4
 8022866:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 802286a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802286e:	ebce 1606 	rsb	r6, lr, r6, lsl #4
 8022872:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 8022876:	eba4 040e 	sub.w	r4, r4, lr
 802287a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 802287e:	b2b6      	uxth	r6, r6
 8022880:	b2a4      	uxth	r4, r4
 8022882:	eba9 0906 	sub.w	r9, r9, r6
 8022886:	fb04 f303 	mul.w	r3, r4, r3
 802288a:	fa1f f989 	uxth.w	r9, r9
 802288e:	fb04 f405 	mul.w	r4, r4, r5
 8022892:	fb09 3707 	mla	r7, r9, r7, r3
 8022896:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802289a:	fb09 4402 	mla	r4, r9, r2, r4
 802289e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80228a2:	fb0e 7703 	mla	r7, lr, r3, r7
 80228a6:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 80228aa:	fb0e 4000 	mla	r0, lr, r0, r4
 80228ae:	fb06 7303 	mla	r3, r6, r3, r7
 80228b2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80228b6:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 80228ba:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 80228be:	fb06 0303 	mla	r3, r6, r3, r0
 80228c2:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80228c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80228ca:	ea43 0307 	orr.w	r3, r3, r7
 80228ce:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80228d2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80228d6:	b2d4      	uxtb	r4, r2
 80228d8:	b2c5      	uxtb	r5, r0
 80228da:	d110      	bne.n	80228fe <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a2>
 80228dc:	700b      	strb	r3, [r1, #0]
 80228de:	7048      	strb	r0, [r1, #1]
 80228e0:	708a      	strb	r2, [r1, #2]
 80228e2:	f881 c003 	strb.w	ip, [r1, #3]
 80228e6:	b003      	add	sp, #12
 80228e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228ec:	4602      	mov	r2, r0
 80228ee:	e762      	b.n	80227b6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5a>
 80228f0:	4602      	mov	r2, r0
 80228f2:	4605      	mov	r5, r0
 80228f4:	e777      	b.n	80227e6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x8a>
 80228f6:	4680      	mov	r8, r0
 80228f8:	e797      	b.n	802282a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xce>
 80228fa:	4680      	mov	r8, r0
 80228fc:	e7a9      	b.n	8022852 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 80228fe:	f1bc 0f00 	cmp.w	ip, #0
 8022902:	d0f0      	beq.n	80228e6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>
 8022904:	78ce      	ldrb	r6, [r1, #3]
 8022906:	b2db      	uxtb	r3, r3
 8022908:	fb1c f505 	smulbb	r5, ip, r5
 802290c:	fb0c f206 	mul.w	r2, ip, r6
 8022910:	1c50      	adds	r0, r2, #1
 8022912:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022916:	eb0c 0206 	add.w	r2, ip, r6
 802291a:	1200      	asrs	r0, r0, #8
 802291c:	1a12      	subs	r2, r2, r0
 802291e:	1a30      	subs	r0, r6, r0
 8022920:	780e      	ldrb	r6, [r1, #0]
 8022922:	b2d2      	uxtb	r2, r2
 8022924:	4346      	muls	r6, r0
 8022926:	70ca      	strb	r2, [r1, #3]
 8022928:	fb0c 6303 	mla	r3, ip, r3, r6
 802292c:	fb1c fc04 	smulbb	ip, ip, r4
 8022930:	fb93 f3f2 	sdiv	r3, r3, r2
 8022934:	700b      	strb	r3, [r1, #0]
 8022936:	784b      	ldrb	r3, [r1, #1]
 8022938:	fb00 5303 	mla	r3, r0, r3, r5
 802293c:	fb93 f3f2 	sdiv	r3, r3, r2
 8022940:	704b      	strb	r3, [r1, #1]
 8022942:	788b      	ldrb	r3, [r1, #2]
 8022944:	fb00 cc03 	mla	ip, r0, r3, ip
 8022948:	fb9c fcf2 	sdiv	ip, ip, r2
 802294c:	f881 c002 	strb.w	ip, [r1, #2]
 8022950:	e7c9      	b.n	80228e6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>

08022952 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022952:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022956:	b091      	sub	sp, #68	; 0x44
 8022958:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802295c:	920e      	str	r2, [sp, #56]	; 0x38
 802295e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8022960:	900f      	str	r0, [sp, #60]	; 0x3c
 8022962:	910c      	str	r1, [sp, #48]	; 0x30
 8022964:	6850      	ldr	r0, [r2, #4]
 8022966:	9309      	str	r3, [sp, #36]	; 0x24
 8022968:	6812      	ldr	r2, [r2, #0]
 802296a:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 802296e:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
 8022972:	fb00 1303 	mla	r3, r0, r3, r1
 8022976:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802297a:	930a      	str	r3, [sp, #40]	; 0x28
 802297c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802297e:	681b      	ldr	r3, [r3, #0]
 8022980:	930b      	str	r3, [sp, #44]	; 0x2c
 8022982:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022984:	685d      	ldr	r5, [r3, #4]
 8022986:	3504      	adds	r5, #4
 8022988:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802298a:	2b00      	cmp	r3, #0
 802298c:	dc03      	bgt.n	8022996 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 802298e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022990:	2b00      	cmp	r3, #0
 8022992:	f340 825d 	ble.w	8022e50 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8022996:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8022998:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802299c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80229a0:	1e48      	subs	r0, r1, #1
 80229a2:	1e56      	subs	r6, r2, #1
 80229a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229a6:	2b00      	cmp	r3, #0
 80229a8:	f340 80c9 	ble.w	8022b3e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80229ac:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80229ae:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80229b0:	143f      	asrs	r7, r7, #16
 80229b2:	ea4f 4323 	mov.w	r3, r3, asr #16
 80229b6:	d406      	bmi.n	80229c6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80229b8:	4287      	cmp	r7, r0
 80229ba:	da04      	bge.n	80229c6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80229bc:	2b00      	cmp	r3, #0
 80229be:	db02      	blt.n	80229c6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80229c0:	42b3      	cmp	r3, r6
 80229c2:	f2c0 80bd 	blt.w	8022b40 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80229c6:	3701      	adds	r7, #1
 80229c8:	f100 80aa 	bmi.w	8022b20 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 80229cc:	42b9      	cmp	r1, r7
 80229ce:	f2c0 80a7 	blt.w	8022b20 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 80229d2:	3301      	adds	r3, #1
 80229d4:	f100 80a4 	bmi.w	8022b20 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 80229d8:	429a      	cmp	r2, r3
 80229da:	f2c0 80a1 	blt.w	8022b20 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 80229de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80229e0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80229e2:	930d      	str	r3, [sp, #52]	; 0x34
 80229e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80229e6:	2b00      	cmp	r3, #0
 80229e8:	f340 80ca 	ble.w	8022b80 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 80229ec:	9822      	ldr	r0, [sp, #136]	; 0x88
 80229ee:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80229f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80229f2:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80229f6:	141f      	asrs	r7, r3, #16
 80229f8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80229fa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80229fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022a00:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022a02:	1400      	asrs	r0, r0, #16
 8022a04:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022a08:	6892      	ldr	r2, [r2, #8]
 8022a0a:	f100 8138 	bmi.w	8022c7e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022a0e:	f102 3eff 	add.w	lr, r2, #4294967295
 8022a12:	4570      	cmp	r0, lr
 8022a14:	f280 8133 	bge.w	8022c7e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022a18:	2f00      	cmp	r7, #0
 8022a1a:	f2c0 8130 	blt.w	8022c7e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022a1e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8022a22:	4577      	cmp	r7, lr
 8022a24:	f280 812b 	bge.w	8022c7e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8022a28:	b212      	sxth	r2, r2
 8022a2a:	fb07 0002 	mla	r0, r7, r2, r0
 8022a2e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022a30:	eb07 0c00 	add.w	ip, r7, r0
 8022a34:	5c38      	ldrb	r0, [r7, r0]
 8022a36:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8022a3a:	eb05 0800 	add.w	r8, r5, r0
 8022a3e:	2b00      	cmp	r3, #0
 8022a40:	f000 80e2 	beq.w	8022c08 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8022a44:	f89c e001 	ldrb.w	lr, [ip, #1]
 8022a48:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022a4c:	44ae      	add	lr, r5
 8022a4e:	2900      	cmp	r1, #0
 8022a50:	f000 80e3 	beq.w	8022c1a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8022a54:	eb0c 0702 	add.w	r7, ip, r2
 8022a58:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022a5c:	f897 c001 	ldrb.w	ip, [r7, #1]
 8022a60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022a64:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022a68:	442a      	add	r2, r5
 8022a6a:	44ac      	add	ip, r5
 8022a6c:	b29b      	uxth	r3, r3
 8022a6e:	5c2f      	ldrb	r7, [r5, r0]
 8022a70:	b289      	uxth	r1, r1
 8022a72:	f89e 0000 	ldrb.w	r0, [lr]
 8022a76:	f89e a001 	ldrb.w	sl, [lr, #1]
 8022a7a:	2cff      	cmp	r4, #255	; 0xff
 8022a7c:	fb03 fb01 	mul.w	fp, r3, r1
 8022a80:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022a84:	f89e e002 	ldrb.w	lr, [lr, #2]
 8022a88:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 8022a8c:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8022a90:	eba3 030b 	sub.w	r3, r3, fp
 8022a94:	b289      	uxth	r1, r1
 8022a96:	b29b      	uxth	r3, r3
 8022a98:	eba9 0901 	sub.w	r9, r9, r1
 8022a9c:	fb03 f000 	mul.w	r0, r3, r0
 8022aa0:	fa1f f989 	uxth.w	r9, r9
 8022aa4:	fb03 fa0a 	mul.w	sl, r3, sl
 8022aa8:	fb03 f30e 	mul.w	r3, r3, lr
 8022aac:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022ab0:	fb09 0007 	mla	r0, r9, r7, r0
 8022ab4:	7817      	ldrb	r7, [r2, #0]
 8022ab6:	fb01 0007 	mla	r0, r1, r7, r0
 8022aba:	f89c 7000 	ldrb.w	r7, [ip]
 8022abe:	fb0b 0707 	mla	r7, fp, r7, r0
 8022ac2:	f898 0001 	ldrb.w	r0, [r8, #1]
 8022ac6:	f898 8002 	ldrb.w	r8, [r8, #2]
 8022aca:	fb09 aa00 	mla	sl, r9, r0, sl
 8022ace:	7850      	ldrb	r0, [r2, #1]
 8022ad0:	fb09 3308 	mla	r3, r9, r8, r3
 8022ad4:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8022ad8:	fb01 aa00 	mla	sl, r1, r0, sl
 8022adc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8022ae0:	fb01 330e 	mla	r3, r1, lr, r3
 8022ae4:	ea4f 2727 	mov.w	r7, r7, asr #8
 8022ae8:	fb0b a000 	mla	r0, fp, r0, sl
 8022aec:	fb0b 3b02 	mla	fp, fp, r2, r3
 8022af0:	ea4f 2020 	mov.w	r0, r0, asr #8
 8022af4:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8022af8:	f040 8095 	bne.w	8022c26 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8022afc:	7037      	strb	r7, [r6, #0]
 8022afe:	7070      	strb	r0, [r6, #1]
 8022b00:	f886 b002 	strb.w	fp, [r6, #2]
 8022b04:	70f4      	strb	r4, [r6, #3]
 8022b06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022b08:	3604      	adds	r6, #4
 8022b0a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8022b0c:	4413      	add	r3, r2
 8022b0e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022b10:	931b      	str	r3, [sp, #108]	; 0x6c
 8022b12:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022b14:	4413      	add	r3, r2
 8022b16:	931c      	str	r3, [sp, #112]	; 0x70
 8022b18:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b1a:	3b01      	subs	r3, #1
 8022b1c:	930d      	str	r3, [sp, #52]	; 0x34
 8022b1e:	e761      	b.n	80229e4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022b20:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022b22:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8022b24:	443b      	add	r3, r7
 8022b26:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8022b28:	931b      	str	r3, [sp, #108]	; 0x6c
 8022b2a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022b2c:	443b      	add	r3, r7
 8022b2e:	931c      	str	r3, [sp, #112]	; 0x70
 8022b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b32:	3b01      	subs	r3, #1
 8022b34:	9309      	str	r3, [sp, #36]	; 0x24
 8022b36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b38:	3304      	adds	r3, #4
 8022b3a:	930a      	str	r3, [sp, #40]	; 0x28
 8022b3c:	e732      	b.n	80229a4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8022b3e:	d026      	beq.n	8022b8e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 8022b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b42:	981d      	ldr	r0, [sp, #116]	; 0x74
 8022b44:	3b01      	subs	r3, #1
 8022b46:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8022b48:	fb00 6003 	mla	r0, r0, r3, r6
 8022b4c:	1400      	asrs	r0, r0, #16
 8022b4e:	f53f af46 	bmi.w	80229de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022b52:	3901      	subs	r1, #1
 8022b54:	4288      	cmp	r0, r1
 8022b56:	f6bf af42 	bge.w	80229de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022b5a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8022b5c:	981c      	ldr	r0, [sp, #112]	; 0x70
 8022b5e:	fb01 0303 	mla	r3, r1, r3, r0
 8022b62:	141b      	asrs	r3, r3, #16
 8022b64:	f53f af3b 	bmi.w	80229de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022b68:	3a01      	subs	r2, #1
 8022b6a:	4293      	cmp	r3, r2
 8022b6c:	f6bf af37 	bge.w	80229de <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8022b70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022b72:	1d19      	adds	r1, r3, #4
 8022b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b76:	930d      	str	r3, [sp, #52]	; 0x34
 8022b78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022b7a:	2b00      	cmp	r3, #0
 8022b7c:	f300 809e 	bgt.w	8022cbc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8022b80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022b82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022b84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8022b88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022b8c:	930a      	str	r3, [sp, #40]	; 0x28
 8022b8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	f340 815d 	ble.w	8022e50 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8022b96:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022b9a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022b9c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022ba0:	eeb0 6a62 	vmov.f32	s12, s5
 8022ba4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022ba8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022bac:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022bb0:	ed8d 6a1b 	vstr	s12, [sp, #108]	; 0x6c
 8022bb4:	eeb0 6a43 	vmov.f32	s12, s6
 8022bb8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022bbc:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8022bc0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022bc4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022bc8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022bcc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022bd0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022bd4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022bd8:	ee12 2a90 	vmov	r2, s5
 8022bdc:	eef0 2a47 	vmov.f32	s5, s14
 8022be0:	fb92 f3f3 	sdiv	r3, r2, r3
 8022be4:	ee13 2a10 	vmov	r2, s6
 8022be8:	931d      	str	r3, [sp, #116]	; 0x74
 8022bea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022bec:	eeb0 3a67 	vmov.f32	s6, s15
 8022bf0:	fb92 f3f3 	sdiv	r3, r2, r3
 8022bf4:	931e      	str	r3, [sp, #120]	; 0x78
 8022bf6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022bf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022bfa:	3b01      	subs	r3, #1
 8022bfc:	930c      	str	r3, [sp, #48]	; 0x30
 8022bfe:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8022c00:	bf08      	it	eq
 8022c02:	4613      	moveq	r3, r2
 8022c04:	9309      	str	r3, [sp, #36]	; 0x24
 8022c06:	e6bf      	b.n	8022988 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8022c08:	b151      	cbz	r1, 8022c20 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 8022c0a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022c0e:	46c4      	mov	ip, r8
 8022c10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022c14:	442a      	add	r2, r5
 8022c16:	46c6      	mov	lr, r8
 8022c18:	e728      	b.n	8022a6c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8022c1a:	46c4      	mov	ip, r8
 8022c1c:	4642      	mov	r2, r8
 8022c1e:	e725      	b.n	8022a6c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8022c20:	46c4      	mov	ip, r8
 8022c22:	4642      	mov	r2, r8
 8022c24:	e7f7      	b.n	8022c16 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8022c26:	2c00      	cmp	r4, #0
 8022c28:	f43f af6d 	beq.w	8022b06 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022c2c:	78f1      	ldrb	r1, [r6, #3]
 8022c2e:	b2ff      	uxtb	r7, r7
 8022c30:	f896 a001 	ldrb.w	sl, [r6, #1]
 8022c34:	b2c0      	uxtb	r0, r0
 8022c36:	fb04 f201 	mul.w	r2, r4, r1
 8022c3a:	fa5f fb8b 	uxtb.w	fp, fp
 8022c3e:	1c53      	adds	r3, r2, #1
 8022c40:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022c44:	1862      	adds	r2, r4, r1
 8022c46:	121b      	asrs	r3, r3, #8
 8022c48:	1ad2      	subs	r2, r2, r3
 8022c4a:	1acb      	subs	r3, r1, r3
 8022c4c:	7831      	ldrb	r1, [r6, #0]
 8022c4e:	fb03 fa0a 	mul.w	sl, r3, sl
 8022c52:	b2d2      	uxtb	r2, r2
 8022c54:	4359      	muls	r1, r3
 8022c56:	fb04 a000 	mla	r0, r4, r0, sl
 8022c5a:	fb04 1707 	mla	r7, r4, r7, r1
 8022c5e:	78b1      	ldrb	r1, [r6, #2]
 8022c60:	70f2      	strb	r2, [r6, #3]
 8022c62:	434b      	muls	r3, r1
 8022c64:	fb04 3b0b 	mla	fp, r4, fp, r3
 8022c68:	fb97 f7f2 	sdiv	r7, r7, r2
 8022c6c:	fb90 f0f2 	sdiv	r0, r0, r2
 8022c70:	fb9b fbf2 	sdiv	fp, fp, r2
 8022c74:	7037      	strb	r7, [r6, #0]
 8022c76:	7070      	strb	r0, [r6, #1]
 8022c78:	f886 b002 	strb.w	fp, [r6, #2]
 8022c7c:	e743      	b.n	8022b06 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022c7e:	f110 0e01 	adds.w	lr, r0, #1
 8022c82:	f53f af40 	bmi.w	8022b06 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022c86:	4572      	cmp	r2, lr
 8022c88:	f6ff af3d 	blt.w	8022b06 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022c8c:	f117 0e01 	adds.w	lr, r7, #1
 8022c90:	f53f af39 	bmi.w	8022b06 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022c94:	45f4      	cmp	ip, lr
 8022c96:	f6ff af36 	blt.w	8022b06 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022c9a:	b212      	sxth	r2, r2
 8022c9c:	9002      	str	r0, [sp, #8]
 8022c9e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022ca0:	9200      	str	r2, [sp, #0]
 8022ca2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022ca4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8022ca8:	fa0f f38c 	sxth.w	r3, ip
 8022cac:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022cb0:	9301      	str	r3, [sp, #4]
 8022cb2:	4631      	mov	r1, r6
 8022cb4:	462b      	mov	r3, r5
 8022cb6:	f7ff fd51 	bl	802275c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8022cba:	e724      	b.n	8022b06 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8022cbc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8022cbe:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8022cc0:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8022cc4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8022cc6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8022cc8:	1436      	asrs	r6, r6, #16
 8022cca:	143f      	asrs	r7, r7, #16
 8022ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022cce:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022cd2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8022cd6:	fb02 7606 	mla	r6, r2, r6, r7
 8022cda:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8022cdc:	eb07 0c06 	add.w	ip, r7, r6
 8022ce0:	5dbe      	ldrb	r6, [r7, r6]
 8022ce2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8022ce6:	eb05 0806 	add.w	r8, r5, r6
 8022cea:	2b00      	cmp	r3, #0
 8022cec:	d06d      	beq.n	8022dca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8022cee:	f89c e001 	ldrb.w	lr, [ip, #1]
 8022cf2:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8022cf6:	44ae      	add	lr, r5
 8022cf8:	2800      	cmp	r0, #0
 8022cfa:	d06f      	beq.n	8022ddc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8022cfc:	eb0c 0702 	add.w	r7, ip, r2
 8022d00:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022d04:	f897 c001 	ldrb.w	ip, [r7, #1]
 8022d08:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022d0c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8022d10:	442a      	add	r2, r5
 8022d12:	44ac      	add	ip, r5
 8022d14:	b29b      	uxth	r3, r3
 8022d16:	5daf      	ldrb	r7, [r5, r6]
 8022d18:	b280      	uxth	r0, r0
 8022d1a:	f89e 6000 	ldrb.w	r6, [lr]
 8022d1e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8022d22:	2cff      	cmp	r4, #255	; 0xff
 8022d24:	fb03 fb00 	mul.w	fp, r3, r0
 8022d28:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8022d2c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8022d30:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8022d34:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8022d38:	eba3 030b 	sub.w	r3, r3, fp
 8022d3c:	b280      	uxth	r0, r0
 8022d3e:	b29b      	uxth	r3, r3
 8022d40:	eba9 0900 	sub.w	r9, r9, r0
 8022d44:	fb03 f606 	mul.w	r6, r3, r6
 8022d48:	fa1f f989 	uxth.w	r9, r9
 8022d4c:	fb03 fa0a 	mul.w	sl, r3, sl
 8022d50:	fb03 f30e 	mul.w	r3, r3, lr
 8022d54:	f892 e002 	ldrb.w	lr, [r2, #2]
 8022d58:	fb09 6607 	mla	r6, r9, r7, r6
 8022d5c:	7817      	ldrb	r7, [r2, #0]
 8022d5e:	fb00 6607 	mla	r6, r0, r7, r6
 8022d62:	f89c 7000 	ldrb.w	r7, [ip]
 8022d66:	fb0b 6707 	mla	r7, fp, r7, r6
 8022d6a:	f898 6001 	ldrb.w	r6, [r8, #1]
 8022d6e:	f898 8002 	ldrb.w	r8, [r8, #2]
 8022d72:	fb09 aa06 	mla	sl, r9, r6, sl
 8022d76:	7856      	ldrb	r6, [r2, #1]
 8022d78:	fb09 3308 	mla	r3, r9, r8, r3
 8022d7c:	ea4f 2727 	mov.w	r7, r7, asr #8
 8022d80:	fb00 aa06 	mla	sl, r0, r6, sl
 8022d84:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8022d88:	fb00 330e 	mla	r3, r0, lr, r3
 8022d8c:	f89c e002 	ldrb.w	lr, [ip, #2]
 8022d90:	fb0b a606 	mla	r6, fp, r6, sl
 8022d94:	fb0b 330e 	mla	r3, fp, lr, r3
 8022d98:	ea4f 2626 	mov.w	r6, r6, asr #8
 8022d9c:	ea4f 2b23 	mov.w	fp, r3, asr #8
 8022da0:	d122      	bne.n	8022de8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8022da2:	f801 7c04 	strb.w	r7, [r1, #-4]
 8022da6:	f801 6c03 	strb.w	r6, [r1, #-3]
 8022daa:	f801 bc02 	strb.w	fp, [r1, #-2]
 8022dae:	f801 4c01 	strb.w	r4, [r1, #-1]
 8022db2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8022db4:	3104      	adds	r1, #4
 8022db6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8022db8:	4413      	add	r3, r2
 8022dba:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8022dbc:	931b      	str	r3, [sp, #108]	; 0x6c
 8022dbe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8022dc0:	4413      	add	r3, r2
 8022dc2:	931c      	str	r3, [sp, #112]	; 0x70
 8022dc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022dc6:	3b01      	subs	r3, #1
 8022dc8:	e6d5      	b.n	8022b76 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022dca:	b150      	cbz	r0, 8022de2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8022dcc:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8022dd0:	46c4      	mov	ip, r8
 8022dd2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022dd6:	442a      	add	r2, r5
 8022dd8:	46c6      	mov	lr, r8
 8022dda:	e79b      	b.n	8022d14 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8022ddc:	46c4      	mov	ip, r8
 8022dde:	4642      	mov	r2, r8
 8022de0:	e798      	b.n	8022d14 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8022de2:	46c4      	mov	ip, r8
 8022de4:	4642      	mov	r2, r8
 8022de6:	e7f7      	b.n	8022dd8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8022de8:	2c00      	cmp	r4, #0
 8022dea:	d0e2      	beq.n	8022db2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8022dec:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8022df0:	b2ff      	uxtb	r7, r7
 8022df2:	f811 ac03 	ldrb.w	sl, [r1, #-3]
 8022df6:	b2f6      	uxtb	r6, r6
 8022df8:	fb04 f300 	mul.w	r3, r4, r0
 8022dfc:	eb04 0c00 	add.w	ip, r4, r0
 8022e00:	fa5f fb8b 	uxtb.w	fp, fp
 8022e04:	1c5a      	adds	r2, r3, #1
 8022e06:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022e0a:	1213      	asrs	r3, r2, #8
 8022e0c:	1ac2      	subs	r2, r0, r3
 8022e0e:	ebac 0c03 	sub.w	ip, ip, r3
 8022e12:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8022e16:	fb02 fa0a 	mul.w	sl, r2, sl
 8022e1a:	fa5f fc8c 	uxtb.w	ip, ip
 8022e1e:	4353      	muls	r3, r2
 8022e20:	fb04 a606 	mla	r6, r4, r6, sl
 8022e24:	fb04 3707 	mla	r7, r4, r7, r3
 8022e28:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8022e2c:	f801 cc01 	strb.w	ip, [r1, #-1]
 8022e30:	435a      	muls	r2, r3
 8022e32:	fb04 2b0b 	mla	fp, r4, fp, r2
 8022e36:	fb97 f7fc 	sdiv	r7, r7, ip
 8022e3a:	fb96 f6fc 	sdiv	r6, r6, ip
 8022e3e:	fb9b fbfc 	sdiv	fp, fp, ip
 8022e42:	f801 7c04 	strb.w	r7, [r1, #-4]
 8022e46:	f801 6c03 	strb.w	r6, [r1, #-3]
 8022e4a:	f801 bc02 	strb.w	fp, [r1, #-2]
 8022e4e:	e7b0      	b.n	8022db2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8022e50:	b011      	add	sp, #68	; 0x44
 8022e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022e56 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8022e56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022e5a:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
 8022e5e:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8022e62:	f1b8 0f00 	cmp.w	r8, #0
 8022e66:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8022e6a:	fb08 740e 	mla	r4, r8, lr, r7
 8022e6e:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8022e72:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8022e76:	eb02 0904 	add.w	r9, r2, r4
 8022e7a:	6808      	ldr	r0, [r1, #0]
 8022e7c:	f2c0 8099 	blt.w	8022fb2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8022e80:	45c2      	cmp	sl, r8
 8022e82:	f340 8096 	ble.w	8022fb2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8022e86:	2f00      	cmp	r7, #0
 8022e88:	f2c0 8091 	blt.w	8022fae <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8022e8c:	45be      	cmp	lr, r7
 8022e8e:	f340 808e 	ble.w	8022fae <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8022e92:	5d12      	ldrb	r2, [r2, r4]
 8022e94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022e98:	189c      	adds	r4, r3, r2
 8022e9a:	5c9a      	ldrb	r2, [r3, r2]
 8022e9c:	7866      	ldrb	r6, [r4, #1]
 8022e9e:	78a4      	ldrb	r4, [r4, #2]
 8022ea0:	0424      	lsls	r4, r4, #16
 8022ea2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8022ea6:	4314      	orrs	r4, r2
 8022ea8:	1c7a      	adds	r2, r7, #1
 8022eaa:	f100 8085 	bmi.w	8022fb8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8022eae:	4596      	cmp	lr, r2
 8022eb0:	f340 8082 	ble.w	8022fb8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8022eb4:	2d00      	cmp	r5, #0
 8022eb6:	d07f      	beq.n	8022fb8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8022eb8:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022ebc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8022ec0:	189e      	adds	r6, r3, r2
 8022ec2:	5c9a      	ldrb	r2, [r3, r2]
 8022ec4:	f896 b001 	ldrb.w	fp, [r6, #1]
 8022ec8:	78b6      	ldrb	r6, [r6, #2]
 8022eca:	0436      	lsls	r6, r6, #16
 8022ecc:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 8022ed0:	4316      	orrs	r6, r2
 8022ed2:	f118 0801 	adds.w	r8, r8, #1
 8022ed6:	d473      	bmi.n	8022fc0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8022ed8:	45c2      	cmp	sl, r8
 8022eda:	dd71      	ble.n	8022fc0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8022edc:	f1bc 0f00 	cmp.w	ip, #0
 8022ee0:	d06e      	beq.n	8022fc0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8022ee2:	2f00      	cmp	r7, #0
 8022ee4:	eb09 080e 	add.w	r8, r9, lr
 8022ee8:	db68      	blt.n	8022fbc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8022eea:	45be      	cmp	lr, r7
 8022eec:	dd66      	ble.n	8022fbc <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8022eee:	f819 900e 	ldrb.w	r9, [r9, lr]
 8022ef2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8022ef6:	eb03 0209 	add.w	r2, r3, r9
 8022efa:	f813 9009 	ldrb.w	r9, [r3, r9]
 8022efe:	f892 a001 	ldrb.w	sl, [r2, #1]
 8022f02:	7892      	ldrb	r2, [r2, #2]
 8022f04:	0412      	lsls	r2, r2, #16
 8022f06:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 8022f0a:	ea42 0209 	orr.w	r2, r2, r9
 8022f0e:	3701      	adds	r7, #1
 8022f10:	d411      	bmi.n	8022f36 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8022f12:	45be      	cmp	lr, r7
 8022f14:	dd0f      	ble.n	8022f36 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8022f16:	b175      	cbz	r5, 8022f36 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8022f18:	f898 7001 	ldrb.w	r7, [r8, #1]
 8022f1c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8022f20:	eb03 0e07 	add.w	lr, r3, r7
 8022f24:	5ddb      	ldrb	r3, [r3, r7]
 8022f26:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8022f2a:	f89e 8001 	ldrb.w	r8, [lr, #1]
 8022f2e:	0400      	lsls	r0, r0, #16
 8022f30:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 8022f34:	4318      	orrs	r0, r3
 8022f36:	b2ad      	uxth	r5, r5
 8022f38:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8022f3c:	fa1f f78c 	uxth.w	r7, ip
 8022f40:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8022f44:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8022f48:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8022f4c:	fb05 fc07 	mul.w	ip, r5, r7
 8022f50:	012d      	lsls	r5, r5, #4
 8022f52:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8022f56:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 8022f5a:	eba5 050c 	sub.w	r5, r5, ip
 8022f5e:	b2bf      	uxth	r7, r7
 8022f60:	b2ad      	uxth	r5, r5
 8022f62:	ebae 0e07 	sub.w	lr, lr, r7
 8022f66:	436b      	muls	r3, r5
 8022f68:	fa1f fe8e 	uxth.w	lr, lr
 8022f6c:	436e      	muls	r6, r5
 8022f6e:	fb0e 3808 	mla	r8, lr, r8, r3
 8022f72:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022f76:	fb0e 6404 	mla	r4, lr, r4, r6
 8022f7a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022f7e:	fb0c 8803 	mla	r8, ip, r3, r8
 8022f82:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8022f86:	fb0c 4000 	mla	r0, ip, r0, r4
 8022f8a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022f8e:	fb07 8303 	mla	r3, r7, r3, r8
 8022f92:	fb07 0002 	mla	r0, r7, r2, r0
 8022f96:	0a1b      	lsrs	r3, r3, #8
 8022f98:	0a00      	lsrs	r0, r0, #8
 8022f9a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8022f9e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022fa2:	4318      	orrs	r0, r3
 8022fa4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8022fa8:	6008      	str	r0, [r1, #0]
 8022faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022fae:	4604      	mov	r4, r0
 8022fb0:	e77a      	b.n	8022ea8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8022fb2:	4606      	mov	r6, r0
 8022fb4:	4604      	mov	r4, r0
 8022fb6:	e78c      	b.n	8022ed2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8022fb8:	4606      	mov	r6, r0
 8022fba:	e78a      	b.n	8022ed2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8022fbc:	4602      	mov	r2, r0
 8022fbe:	e7a6      	b.n	8022f0e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xb8>
 8022fc0:	4602      	mov	r2, r0
 8022fc2:	e7b8      	b.n	8022f36 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>

08022fc4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fc8:	b08f      	sub	sp, #60	; 0x3c
 8022fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022fce:	920c      	str	r2, [sp, #48]	; 0x30
 8022fd0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8022fd2:	900d      	str	r0, [sp, #52]	; 0x34
 8022fd4:	910a      	str	r1, [sp, #40]	; 0x28
 8022fd6:	6850      	ldr	r0, [r2, #4]
 8022fd8:	9306      	str	r3, [sp, #24]
 8022fda:	6812      	ldr	r2, [r2, #0]
 8022fdc:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8022fe0:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8022fe4:	fb00 1303 	mla	r3, r0, r3, r1
 8022fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022fec:	9307      	str	r3, [sp, #28]
 8022fee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	9308      	str	r3, [sp, #32]
 8022ff4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022ff6:	685c      	ldr	r4, [r3, #4]
 8022ff8:	3404      	adds	r4, #4
 8022ffa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022ffc:	2b00      	cmp	r3, #0
 8022ffe:	dc03      	bgt.n	8023008 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023000:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023002:	2b00      	cmp	r3, #0
 8023004:	f340 81dc 	ble.w	80233c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8023008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802300a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802300e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023012:	1e48      	subs	r0, r1, #1
 8023014:	1e56      	subs	r6, r2, #1
 8023016:	9b06      	ldr	r3, [sp, #24]
 8023018:	2b00      	cmp	r3, #0
 802301a:	f340 80ba 	ble.w	8023192 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802301e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023022:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023026:	d406      	bmi.n	8023036 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023028:	4287      	cmp	r7, r0
 802302a:	da04      	bge.n	8023036 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802302c:	2b00      	cmp	r3, #0
 802302e:	db02      	blt.n	8023036 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023030:	42b3      	cmp	r3, r6
 8023032:	f2c0 80af 	blt.w	8023194 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023036:	3701      	adds	r7, #1
 8023038:	f100 80a0 	bmi.w	802317c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802303c:	42b9      	cmp	r1, r7
 802303e:	f2c0 809d 	blt.w	802317c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023042:	3301      	adds	r3, #1
 8023044:	f100 809a 	bmi.w	802317c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023048:	429a      	cmp	r2, r3
 802304a:	f2c0 8097 	blt.w	802317c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802304e:	9b06      	ldr	r3, [sp, #24]
 8023050:	930b      	str	r3, [sp, #44]	; 0x2c
 8023052:	9b07      	ldr	r3, [sp, #28]
 8023054:	9309      	str	r3, [sp, #36]	; 0x24
 8023056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023058:	2b00      	cmp	r3, #0
 802305a:	f340 80b8 	ble.w	80231ce <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802305e:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023060:	142e      	asrs	r6, r5, #16
 8023062:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023064:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023068:	68c7      	ldr	r7, [r0, #12]
 802306a:	ea5f 402b 	movs.w	r0, fp, asr #16
 802306e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023072:	6892      	ldr	r2, [r2, #8]
 8023074:	f100 80fe 	bmi.w	8023274 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023078:	f102 3cff 	add.w	ip, r2, #4294967295
 802307c:	4560      	cmp	r0, ip
 802307e:	f280 80f9 	bge.w	8023274 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023082:	2e00      	cmp	r6, #0
 8023084:	f2c0 80f6 	blt.w	8023274 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023088:	f107 3cff 	add.w	ip, r7, #4294967295
 802308c:	4566      	cmp	r6, ip
 802308e:	f280 80f1 	bge.w	8023274 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023092:	b212      	sxth	r2, r2
 8023094:	fb06 0002 	mla	r0, r6, r2, r0
 8023098:	9e08      	ldr	r6, [sp, #32]
 802309a:	5c37      	ldrb	r7, [r6, r0]
 802309c:	eb06 0e00 	add.w	lr, r6, r0
 80230a0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80230a4:	eb04 0c07 	add.w	ip, r4, r7
 80230a8:	2b00      	cmp	r3, #0
 80230aa:	f000 80d4 	beq.w	8023256 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 80230ae:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80230b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80230b6:	4426      	add	r6, r4
 80230b8:	2900      	cmp	r1, #0
 80230ba:	f000 80d5 	beq.w	8023268 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80230be:	eb0e 0002 	add.w	r0, lr, r2
 80230c2:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80230c6:	7840      	ldrb	r0, [r0, #1]
 80230c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80230cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80230d0:	4422      	add	r2, r4
 80230d2:	4420      	add	r0, r4
 80230d4:	b29b      	uxth	r3, r3
 80230d6:	f814 a007 	ldrb.w	sl, [r4, r7]
 80230da:	b289      	uxth	r1, r1
 80230dc:	7837      	ldrb	r7, [r6, #0]
 80230de:	f896 8001 	ldrb.w	r8, [r6, #1]
 80230e2:	fb03 f901 	mul.w	r9, r3, r1
 80230e6:	011b      	lsls	r3, r3, #4
 80230e8:	78b6      	ldrb	r6, [r6, #2]
 80230ea:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80230ee:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 80230f2:	eba3 0309 	sub.w	r3, r3, r9
 80230f6:	b289      	uxth	r1, r1
 80230f8:	b29b      	uxth	r3, r3
 80230fa:	ebae 0e01 	sub.w	lr, lr, r1
 80230fe:	435f      	muls	r7, r3
 8023100:	fa1f fe8e 	uxth.w	lr, lr
 8023104:	fb03 f808 	mul.w	r8, r3, r8
 8023108:	4373      	muls	r3, r6
 802310a:	fb0e 770a 	mla	r7, lr, sl, r7
 802310e:	f892 a000 	ldrb.w	sl, [r2]
 8023112:	fb01 770a 	mla	r7, r1, sl, r7
 8023116:	f890 a000 	ldrb.w	sl, [r0]
 802311a:	fb09 7a0a 	mla	sl, r9, sl, r7
 802311e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8023122:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023126:	fb0e 8807 	mla	r8, lr, r7, r8
 802312a:	7857      	ldrb	r7, [r2, #1]
 802312c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8023130:	fb0e 330c 	mla	r3, lr, ip, r3
 8023134:	fb01 8807 	mla	r8, r1, r7, r8
 8023138:	7847      	ldrb	r7, [r0, #1]
 802313a:	fb09 8707 	mla	r7, r9, r7, r8
 802313e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023142:	ea4a 0707 	orr.w	r7, sl, r7
 8023146:	f892 a002 	ldrb.w	sl, [r2, #2]
 802314a:	fb01 310a 	mla	r1, r1, sl, r3
 802314e:	f890 a002 	ldrb.w	sl, [r0, #2]
 8023152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023154:	fb09 1a0a 	mla	sl, r9, sl, r1
 8023158:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 802315c:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8023160:	ea47 070a 	orr.w	r7, r7, sl
 8023164:	601f      	str	r7, [r3, #0]
 8023166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023168:	3304      	adds	r3, #4
 802316a:	9309      	str	r3, [sp, #36]	; 0x24
 802316c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802316e:	449b      	add	fp, r3
 8023170:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023172:	441d      	add	r5, r3
 8023174:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023176:	3b01      	subs	r3, #1
 8023178:	930b      	str	r3, [sp, #44]	; 0x2c
 802317a:	e76c      	b.n	8023056 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802317c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802317e:	449b      	add	fp, r3
 8023180:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023182:	441d      	add	r5, r3
 8023184:	9b06      	ldr	r3, [sp, #24]
 8023186:	3b01      	subs	r3, #1
 8023188:	9306      	str	r3, [sp, #24]
 802318a:	9b07      	ldr	r3, [sp, #28]
 802318c:	3304      	adds	r3, #4
 802318e:	9307      	str	r3, [sp, #28]
 8023190:	e741      	b.n	8023016 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023192:	d023      	beq.n	80231dc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8023194:	9b06      	ldr	r3, [sp, #24]
 8023196:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023198:	3b01      	subs	r3, #1
 802319a:	fb00 b003 	mla	r0, r0, r3, fp
 802319e:	1400      	asrs	r0, r0, #16
 80231a0:	f53f af55 	bmi.w	802304e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80231a4:	3901      	subs	r1, #1
 80231a6:	4288      	cmp	r0, r1
 80231a8:	f6bf af51 	bge.w	802304e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80231ac:	991c      	ldr	r1, [sp, #112]	; 0x70
 80231ae:	fb01 5303 	mla	r3, r1, r3, r5
 80231b2:	141b      	asrs	r3, r3, #16
 80231b4:	f53f af4b 	bmi.w	802304e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80231b8:	3a01      	subs	r2, #1
 80231ba:	4293      	cmp	r3, r2
 80231bc:	f6bf af47 	bge.w	802304e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80231c0:	9b06      	ldr	r3, [sp, #24]
 80231c2:	9309      	str	r3, [sp, #36]	; 0x24
 80231c4:	9b07      	ldr	r3, [sp, #28]
 80231c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80231c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80231ca:	2b00      	cmp	r3, #0
 80231cc:	dc6f      	bgt.n	80232ae <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 80231ce:	9b06      	ldr	r3, [sp, #24]
 80231d0:	9a07      	ldr	r2, [sp, #28]
 80231d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80231d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80231da:	9307      	str	r3, [sp, #28]
 80231dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80231de:	2b00      	cmp	r3, #0
 80231e0:	f340 80ee 	ble.w	80233c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 80231e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80231e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80231ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80231ee:	eeb0 6a62 	vmov.f32	s12, s5
 80231f2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80231f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80231fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80231fe:	ee16 ba10 	vmov	fp, s12
 8023202:	eeb0 6a43 	vmov.f32	s12, s6
 8023206:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802320a:	ee16 5a10 	vmov	r5, s12
 802320e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023212:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023216:	ee77 2a62 	vsub.f32	s5, s14, s5
 802321a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802321e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023222:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023226:	ee12 2a90 	vmov	r2, s5
 802322a:	eef0 2a47 	vmov.f32	s5, s14
 802322e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023232:	ee13 2a10 	vmov	r2, s6
 8023236:	931b      	str	r3, [sp, #108]	; 0x6c
 8023238:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802323a:	eeb0 3a67 	vmov.f32	s6, s15
 802323e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023242:	931c      	str	r3, [sp, #112]	; 0x70
 8023244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023248:	3b01      	subs	r3, #1
 802324a:	930a      	str	r3, [sp, #40]	; 0x28
 802324c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802324e:	bf08      	it	eq
 8023250:	4613      	moveq	r3, r2
 8023252:	9306      	str	r3, [sp, #24]
 8023254:	e6d1      	b.n	8022ffa <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023256:	b151      	cbz	r1, 802326e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 8023258:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802325c:	4660      	mov	r0, ip
 802325e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023262:	4422      	add	r2, r4
 8023264:	4666      	mov	r6, ip
 8023266:	e735      	b.n	80230d4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8023268:	4660      	mov	r0, ip
 802326a:	4662      	mov	r2, ip
 802326c:	e732      	b.n	80230d4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802326e:	4660      	mov	r0, ip
 8023270:	4662      	mov	r2, ip
 8023272:	e7f7      	b.n	8023264 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 8023274:	f110 0c01 	adds.w	ip, r0, #1
 8023278:	f53f af75 	bmi.w	8023166 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802327c:	4562      	cmp	r2, ip
 802327e:	f6ff af72 	blt.w	8023166 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023282:	f116 0c01 	adds.w	ip, r6, #1
 8023286:	f53f af6e 	bmi.w	8023166 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802328a:	4567      	cmp	r7, ip
 802328c:	f6ff af6b 	blt.w	8023166 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8023290:	b23f      	sxth	r7, r7
 8023292:	b212      	sxth	r2, r2
 8023294:	9701      	str	r7, [sp, #4]
 8023296:	9200      	str	r2, [sp, #0]
 8023298:	e9cd 3104 	strd	r3, r1, [sp, #16]
 802329c:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80232a0:	4623      	mov	r3, r4
 80232a2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80232a4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80232a8:	f7ff fdd5 	bl	8022e56 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 80232ac:	e75b      	b.n	8023166 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80232ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80232b0:	ea4f 462b 	mov.w	r6, fp, asr #16
 80232b4:	1428      	asrs	r0, r5, #16
 80232b6:	f3cb 3303 	ubfx	r3, fp, #12, #4
 80232ba:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80232be:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80232c2:	fb02 6000 	mla	r0, r2, r0, r6
 80232c6:	9e08      	ldr	r6, [sp, #32]
 80232c8:	5c37      	ldrb	r7, [r6, r0]
 80232ca:	eb06 0e00 	add.w	lr, r6, r0
 80232ce:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80232d2:	eb04 0c07 	add.w	ip, r4, r7
 80232d6:	2b00      	cmp	r3, #0
 80232d8:	d063      	beq.n	80233a2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 80232da:	f89e 6001 	ldrb.w	r6, [lr, #1]
 80232de:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80232e2:	4426      	add	r6, r4
 80232e4:	2900      	cmp	r1, #0
 80232e6:	d065      	beq.n	80233b4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80232e8:	eb0e 0002 	add.w	r0, lr, r2
 80232ec:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80232f0:	7840      	ldrb	r0, [r0, #1]
 80232f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80232f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80232fa:	4422      	add	r2, r4
 80232fc:	4420      	add	r0, r4
 80232fe:	b29b      	uxth	r3, r3
 8023300:	f814 a007 	ldrb.w	sl, [r4, r7]
 8023304:	b289      	uxth	r1, r1
 8023306:	7837      	ldrb	r7, [r6, #0]
 8023308:	f896 8001 	ldrb.w	r8, [r6, #1]
 802330c:	fb03 f901 	mul.w	r9, r3, r1
 8023310:	011b      	lsls	r3, r3, #4
 8023312:	78b6      	ldrb	r6, [r6, #2]
 8023314:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8023318:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802331c:	eba3 0309 	sub.w	r3, r3, r9
 8023320:	b289      	uxth	r1, r1
 8023322:	b29b      	uxth	r3, r3
 8023324:	ebae 0e01 	sub.w	lr, lr, r1
 8023328:	435f      	muls	r7, r3
 802332a:	fa1f fe8e 	uxth.w	lr, lr
 802332e:	fb03 f808 	mul.w	r8, r3, r8
 8023332:	4373      	muls	r3, r6
 8023334:	7896      	ldrb	r6, [r2, #2]
 8023336:	fb0e 770a 	mla	r7, lr, sl, r7
 802333a:	f892 a000 	ldrb.w	sl, [r2]
 802333e:	fb01 770a 	mla	r7, r1, sl, r7
 8023342:	f890 a000 	ldrb.w	sl, [r0]
 8023346:	fb09 7a0a 	mla	sl, r9, sl, r7
 802334a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802334e:	f89c c002 	ldrb.w	ip, [ip, #2]
 8023352:	fb0e 8807 	mla	r8, lr, r7, r8
 8023356:	7857      	ldrb	r7, [r2, #1]
 8023358:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 802335c:	fb0e 330c 	mla	r3, lr, ip, r3
 8023360:	fb01 8807 	mla	r8, r1, r7, r8
 8023364:	7847      	ldrb	r7, [r0, #1]
 8023366:	fb01 3306 	mla	r3, r1, r6, r3
 802336a:	fb09 8707 	mla	r7, r9, r7, r8
 802336e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8023372:	ea4a 0707 	orr.w	r7, sl, r7
 8023376:	f890 a002 	ldrb.w	sl, [r0, #2]
 802337a:	fb09 3a0a 	mla	sl, r9, sl, r3
 802337e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023380:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8023384:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8023388:	ea47 070a 	orr.w	r7, r7, sl
 802338c:	f843 7b04 	str.w	r7, [r3], #4
 8023390:	930b      	str	r3, [sp, #44]	; 0x2c
 8023392:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023394:	449b      	add	fp, r3
 8023396:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023398:	441d      	add	r5, r3
 802339a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802339c:	3b01      	subs	r3, #1
 802339e:	9309      	str	r3, [sp, #36]	; 0x24
 80233a0:	e712      	b.n	80231c8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80233a2:	b151      	cbz	r1, 80233ba <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80233a4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80233a8:	4660      	mov	r0, ip
 80233aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80233ae:	4422      	add	r2, r4
 80233b0:	4666      	mov	r6, ip
 80233b2:	e7a4      	b.n	80232fe <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80233b4:	4660      	mov	r0, ip
 80233b6:	4662      	mov	r2, ip
 80233b8:	e7a1      	b.n	80232fe <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 80233ba:	4660      	mov	r0, ip
 80233bc:	4662      	mov	r2, ip
 80233be:	e7f7      	b.n	80233b0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 80233c0:	b00f      	add	sp, #60	; 0x3c
 80233c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080233c6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 80233c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80233ca:	b085      	sub	sp, #20
 80233cc:	6808      	ldr	r0, [r1, #0]
 80233ce:	e9dd 6910 	ldrd	r6, r9, [sp, #64]	; 0x40
 80233d2:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 80233d6:	f1b9 0f00 	cmp.w	r9, #0
 80233da:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 80233de:	fb09 6408 	mla	r4, r9, r8, r6
 80233e2:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 80233e6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 80233ea:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 80233ee:	eb02 0a04 	add.w	sl, r2, r4
 80233f2:	f2c0 8103 	blt.w	80235fc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 80233f6:	45cb      	cmp	fp, r9
 80233f8:	f340 8100 	ble.w	80235fc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 80233fc:	2e00      	cmp	r6, #0
 80233fe:	f2c0 80fb 	blt.w	80235f8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8023402:	45b0      	cmp	r8, r6
 8023404:	f340 80f8 	ble.w	80235f8 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8023408:	5d12      	ldrb	r2, [r2, r4]
 802340a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802340e:	1c72      	adds	r2, r6, #1
 8023410:	f100 80f5 	bmi.w	80235fe <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8023414:	4590      	cmp	r8, r2
 8023416:	f340 80f2 	ble.w	80235fe <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 802341a:	f1bc 0f00 	cmp.w	ip, #0
 802341e:	f000 80ee 	beq.w	80235fe <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8023422:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023426:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802342a:	f119 0901 	adds.w	r9, r9, #1
 802342e:	f100 80ea 	bmi.w	8023606 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8023432:	45cb      	cmp	fp, r9
 8023434:	f340 80e7 	ble.w	8023606 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8023438:	f1be 0f00 	cmp.w	lr, #0
 802343c:	f000 80e3 	beq.w	8023606 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8023440:	2e00      	cmp	r6, #0
 8023442:	f2c0 80de 	blt.w	8023602 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8023446:	45b0      	cmp	r8, r6
 8023448:	f340 80db 	ble.w	8023602 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 802344c:	f81a 2008 	ldrb.w	r2, [sl, r8]
 8023450:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8023454:	3601      	adds	r6, #1
 8023456:	d409      	bmi.n	802346c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8023458:	45b0      	cmp	r8, r6
 802345a:	dd07      	ble.n	802346c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 802345c:	f1bc 0f00 	cmp.w	ip, #0
 8023460:	d004      	beq.n	802346c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 8023462:	44d0      	add	r8, sl
 8023464:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023468:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 802346c:	fa1f fc8c 	uxth.w	ip, ip
 8023470:	fa1f f38e 	uxth.w	r3, lr
 8023474:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8023478:	fb03 fe0c 	mul.w	lr, r3, ip
 802347c:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8023480:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8023484:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 8023488:	ebac 060e 	sub.w	r6, ip, lr
 802348c:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 8023490:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8023494:	b29b      	uxth	r3, r3
 8023496:	b2b6      	uxth	r6, r6
 8023498:	ebac 0c03 	sub.w	ip, ip, r3
 802349c:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80234a0:	9601      	str	r6, [sp, #4]
 80234a2:	fa1f f68c 	uxth.w	r6, ip
 80234a6:	9602      	str	r6, [sp, #8]
 80234a8:	9e01      	ldr	r6, [sp, #4]
 80234aa:	fb06 fc0a 	mul.w	ip, r6, sl
 80234ae:	9e02      	ldr	r6, [sp, #8]
 80234b0:	fb06 cc0b 	mla	ip, r6, fp, ip
 80234b4:	fb03 cc09 	mla	ip, r3, r9, ip
 80234b8:	fb0e cc08 	mla	ip, lr, r8, ip
 80234bc:	f3cc 2607 	ubfx	r6, ip, #8, #8
 80234c0:	9603      	str	r6, [sp, #12]
 80234c2:	2e00      	cmp	r6, #0
 80234c4:	f000 8095 	beq.w	80235f2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 80234c8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80234cc:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80234d0:	fb0b fc0c 	mul.w	ip, fp, ip
 80234d4:	fb0b f505 	mul.w	r5, fp, r5
 80234d8:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80234dc:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80234e0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80234e4:	44dc      	add	ip, fp
 80234e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80234ea:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 80234ee:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 80234f2:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80234f6:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 80234fa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80234fe:	fb0a fc0c 	mul.w	ip, sl, ip
 8023502:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8023506:	fb0a fa04 	mul.w	sl, sl, r4
 802350a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802350e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023512:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8023516:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802351a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802351e:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8023522:	4465      	add	r5, ip
 8023524:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 8023528:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802352c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023530:	fb09 fc0c 	mul.w	ip, r9, ip
 8023534:	0a2d      	lsrs	r5, r5, #8
 8023536:	fb09 f902 	mul.w	r9, r9, r2
 802353a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802353e:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8023542:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8023546:	f509 7280 	add.w	r2, r9, #256	; 0x100
 802354a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802354e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023552:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8023556:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 802355a:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802355e:	4464      	add	r4, ip
 8023560:	fb08 f202 	mul.w	r2, r8, r2
 8023564:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8023568:	fb08 f800 	mul.w	r8, r8, r0
 802356c:	0a24      	lsrs	r4, r4, #8
 802356e:	0a10      	lsrs	r0, r2, #8
 8023570:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8023574:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8023578:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802357c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8023580:	4402      	add	r2, r0
 8023582:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8023586:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 802358a:	9801      	ldr	r0, [sp, #4]
 802358c:	0a12      	lsrs	r2, r2, #8
 802358e:	4345      	muls	r5, r0
 8023590:	9802      	ldr	r0, [sp, #8]
 8023592:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8023596:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802359a:	fb06 5500 	mla	r5, r6, r0, r5
 802359e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80235a2:	fb02 520e 	mla	r2, r2, lr, r5
 80235a6:	fb04 2403 	mla	r4, r4, r3, r2
 80235aa:	9a01      	ldr	r2, [sp, #4]
 80235ac:	fb02 f60a 	mul.w	r6, r2, sl
 80235b0:	0a24      	lsrs	r4, r4, #8
 80235b2:	9a03      	ldr	r2, [sp, #12]
 80235b4:	fb00 660b 	mla	r6, r0, fp, r6
 80235b8:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80235bc:	fb07 fc02 	mul.w	ip, r7, r2
 80235c0:	fb0e 6e08 	mla	lr, lr, r8, r6
 80235c4:	fb03 e309 	mla	r3, r3, r9, lr
 80235c8:	0a1b      	lsrs	r3, r3, #8
 80235ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80235ce:	4323      	orrs	r3, r4
 80235d0:	f10c 0401 	add.w	r4, ip, #1
 80235d4:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 80235d8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80235dc:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80235e0:	1224      	asrs	r4, r4, #8
 80235e2:	b2d5      	uxtb	r5, r2
 80235e4:	2cff      	cmp	r4, #255	; 0xff
 80235e6:	b2c6      	uxtb	r6, r0
 80235e8:	d10f      	bne.n	802360a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x244>
 80235ea:	700b      	strb	r3, [r1, #0]
 80235ec:	7048      	strb	r0, [r1, #1]
 80235ee:	708a      	strb	r2, [r1, #2]
 80235f0:	70cc      	strb	r4, [r1, #3]
 80235f2:	b005      	add	sp, #20
 80235f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80235f8:	4605      	mov	r5, r0
 80235fa:	e708      	b.n	802340e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x48>
 80235fc:	4605      	mov	r5, r0
 80235fe:	4604      	mov	r4, r0
 8023600:	e713      	b.n	802342a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x64>
 8023602:	4602      	mov	r2, r0
 8023604:	e726      	b.n	8023454 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x8e>
 8023606:	4602      	mov	r2, r0
 8023608:	e730      	b.n	802346c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 802360a:	b2e2      	uxtb	r2, r4
 802360c:	2c00      	cmp	r4, #0
 802360e:	d0f0      	beq.n	80235f2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8023610:	78cc      	ldrb	r4, [r1, #3]
 8023612:	b2db      	uxtb	r3, r3
 8023614:	fb17 f606 	smulbb	r6, r7, r6
 8023618:	fb02 fc04 	mul.w	ip, r2, r4
 802361c:	4422      	add	r2, r4
 802361e:	f10c 0001 	add.w	r0, ip, #1
 8023622:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8023626:	1200      	asrs	r0, r0, #8
 8023628:	1a24      	subs	r4, r4, r0
 802362a:	1a12      	subs	r2, r2, r0
 802362c:	7808      	ldrb	r0, [r1, #0]
 802362e:	b2d2      	uxtb	r2, r2
 8023630:	4360      	muls	r0, r4
 8023632:	70ca      	strb	r2, [r1, #3]
 8023634:	fb07 0303 	mla	r3, r7, r3, r0
 8023638:	7848      	ldrb	r0, [r1, #1]
 802363a:	fb17 f705 	smulbb	r7, r7, r5
 802363e:	fb04 6000 	mla	r0, r4, r0, r6
 8023642:	fb93 f3f2 	sdiv	r3, r3, r2
 8023646:	2bff      	cmp	r3, #255	; 0xff
 8023648:	bfd6      	itet	le
 802364a:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802364e:	23ff      	movgt	r3, #255	; 0xff
 8023650:	b2db      	uxtble	r3, r3
 8023652:	fb90 f0f2 	sdiv	r0, r0, r2
 8023656:	700b      	strb	r3, [r1, #0]
 8023658:	28ff      	cmp	r0, #255	; 0xff
 802365a:	788b      	ldrb	r3, [r1, #2]
 802365c:	bfd4      	ite	le
 802365e:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8023662:	20ff      	movgt	r0, #255	; 0xff
 8023664:	fb04 7303 	mla	r3, r4, r3, r7
 8023668:	bfd8      	it	le
 802366a:	b2c0      	uxtble	r0, r0
 802366c:	fb93 f3f2 	sdiv	r3, r3, r2
 8023670:	2bff      	cmp	r3, #255	; 0xff
 8023672:	7048      	strb	r0, [r1, #1]
 8023674:	bfd6      	itet	le
 8023676:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802367a:	23ff      	movgt	r3, #255	; 0xff
 802367c:	b2db      	uxtble	r3, r3
 802367e:	708b      	strb	r3, [r1, #2]
 8023680:	e7b7      	b.n	80235f2 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>

08023682 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023682:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023686:	b09d      	sub	sp, #116	; 0x74
 8023688:	921a      	str	r2, [sp, #104]	; 0x68
 802368a:	9308      	str	r3, [sp, #32]
 802368c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 802368e:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 8023692:	901b      	str	r0, [sp, #108]	; 0x6c
 8023694:	9118      	str	r1, [sp, #96]	; 0x60
 8023696:	6850      	ldr	r0, [r2, #4]
 8023698:	9309      	str	r3, [sp, #36]	; 0x24
 802369a:	6812      	ldr	r2, [r2, #0]
 802369c:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80236a0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80236a4:	fb00 1303 	mla	r3, r0, r3, r1
 80236a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80236ac:	930c      	str	r3, [sp, #48]	; 0x30
 80236ae:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236b0:	681b      	ldr	r3, [r3, #0]
 80236b2:	9311      	str	r3, [sp, #68]	; 0x44
 80236b4:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236b6:	685f      	ldr	r7, [r3, #4]
 80236b8:	3704      	adds	r7, #4
 80236ba:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80236bc:	2b00      	cmp	r3, #0
 80236be:	dc03      	bgt.n	80236c8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 80236c0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80236c2:	2b00      	cmp	r3, #0
 80236c4:	f340 83cd 	ble.w	8023e62 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 80236c8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 80236ca:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80236ce:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80236d2:	1e48      	subs	r0, r1, #1
 80236d4:	f102 3cff 	add.w	ip, r2, #4294967295
 80236d8:	9b08      	ldr	r3, [sp, #32]
 80236da:	2b00      	cmp	r3, #0
 80236dc:	f340 816c 	ble.w	80239b8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 80236e0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80236e4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80236e8:	d406      	bmi.n	80236f8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80236ea:	4586      	cmp	lr, r0
 80236ec:	da04      	bge.n	80236f8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80236ee:	2b00      	cmp	r3, #0
 80236f0:	db02      	blt.n	80236f8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80236f2:	4563      	cmp	r3, ip
 80236f4:	f2c0 8161 	blt.w	80239ba <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 80236f8:	f11e 0e01 	adds.w	lr, lr, #1
 80236fc:	f100 8151 	bmi.w	80239a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8023700:	4571      	cmp	r1, lr
 8023702:	f2c0 814e 	blt.w	80239a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8023706:	3301      	adds	r3, #1
 8023708:	f100 814b 	bmi.w	80239a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802370c:	429a      	cmp	r2, r3
 802370e:	f2c0 8148 	blt.w	80239a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8023712:	9b08      	ldr	r3, [sp, #32]
 8023714:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8023718:	9319      	str	r3, [sp, #100]	; 0x64
 802371a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802371c:	2b00      	cmp	r3, #0
 802371e:	f340 8169 	ble.w	80239f4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8023722:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023724:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023728:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802372c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023730:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8023734:	1423      	asrs	r3, r4, #16
 8023736:	f100 81f7 	bmi.w	8023b28 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 802373a:	f100 39ff 	add.w	r9, r0, #4294967295
 802373e:	454b      	cmp	r3, r9
 8023740:	f280 81f2 	bge.w	8023b28 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8023744:	f1bc 0f00 	cmp.w	ip, #0
 8023748:	f2c0 81ee 	blt.w	8023b28 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 802374c:	f10e 39ff 	add.w	r9, lr, #4294967295
 8023750:	45cc      	cmp	ip, r9
 8023752:	f280 81e9 	bge.w	8023b28 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8023756:	b200      	sxth	r0, r0
 8023758:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802375a:	fb0c 3300 	mla	r3, ip, r0, r3
 802375e:	eb05 0903 	add.w	r9, r5, r3
 8023762:	5ceb      	ldrb	r3, [r5, r3]
 8023764:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8023768:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802376c:	2a00      	cmp	r2, #0
 802376e:	f000 8187 	beq.w	8023a80 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 8023772:	f899 c001 	ldrb.w	ip, [r9, #1]
 8023776:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 802377a:	950d      	str	r5, [sp, #52]	; 0x34
 802377c:	0e2d      	lsrs	r5, r5, #24
 802377e:	9514      	str	r5, [sp, #80]	; 0x50
 8023780:	b179      	cbz	r1, 80237a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8023782:	eb09 0c00 	add.w	ip, r9, r0
 8023786:	f819 0000 	ldrb.w	r0, [r9, r0]
 802378a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802378e:	900a      	str	r0, [sp, #40]	; 0x28
 8023790:	0e00      	lsrs	r0, r0, #24
 8023792:	9012      	str	r0, [sp, #72]	; 0x48
 8023794:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023798:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 802379c:	900e      	str	r0, [sp, #56]	; 0x38
 802379e:	0e00      	lsrs	r0, r0, #24
 80237a0:	9015      	str	r0, [sp, #84]	; 0x54
 80237a2:	b292      	uxth	r2, r2
 80237a4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80237a6:	b289      	uxth	r1, r1
 80237a8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80237aa:	fb02 fa01 	mul.w	sl, r2, r1
 80237ae:	0112      	lsls	r2, r2, #4
 80237b0:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 80237b4:	eba2 090a 	sub.w	r9, r2, sl
 80237b8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80237bc:	b289      	uxth	r1, r1
 80237be:	fa1f f989 	uxth.w	r9, r9
 80237c2:	1a52      	subs	r2, r2, r1
 80237c4:	fb09 f000 	mul.w	r0, r9, r0
 80237c8:	b292      	uxth	r2, r2
 80237ca:	fb02 000e 	mla	r0, r2, lr, r0
 80237ce:	fb01 0005 	mla	r0, r1, r5, r0
 80237d2:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80237d4:	fb0a 0005 	mla	r0, sl, r5, r0
 80237d8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80237dc:	2800      	cmp	r0, #0
 80237de:	f000 80d6 	beq.w	802398e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80237e2:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80237e6:	d01b      	beq.n	8023820 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80237e8:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 80237ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80237f0:	fb0e fb0b 	mul.w	fp, lr, fp
 80237f4:	fb0e fe03 	mul.w	lr, lr, r3
 80237f8:	ea4f 231b 	mov.w	r3, fp, lsr #8
 80237fc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023800:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8023804:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023808:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802380c:	445b      	add	r3, fp
 802380e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023812:	0a1b      	lsrs	r3, r3, #8
 8023814:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8023818:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802381c:	ea43 030c 	orr.w	r3, r3, ip
 8023820:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8023822:	2dff      	cmp	r5, #255	; 0xff
 8023824:	d021      	beq.n	802386a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8023826:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023828:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802382c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802382e:	fb05 fc0c 	mul.w	ip, r5, ip
 8023832:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023834:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023838:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 802383c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802383e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8023842:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023846:	fb05 fb0b 	mul.w	fp, r5, fp
 802384a:	44e6      	add	lr, ip
 802384c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8023850:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023854:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8023858:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802385c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023860:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023864:	ea4e 050b 	orr.w	r5, lr, fp
 8023868:	950d      	str	r5, [sp, #52]	; 0x34
 802386a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802386c:	2dff      	cmp	r5, #255	; 0xff
 802386e:	d021      	beq.n	80238b4 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8023870:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8023872:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8023876:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023878:	fb05 fc0c 	mul.w	ip, r5, ip
 802387c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802387e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8023882:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8023886:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8023888:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802388c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023890:	fb05 fb0b 	mul.w	fp, r5, fp
 8023894:	44e6      	add	lr, ip
 8023896:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 802389a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802389e:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80238a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238a6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80238aa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80238ae:	ea4e 050b 	orr.w	r5, lr, fp
 80238b2:	950a      	str	r5, [sp, #40]	; 0x28
 80238b4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80238b6:	2dff      	cmp	r5, #255	; 0xff
 80238b8:	d021      	beq.n	80238fe <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80238ba:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80238bc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80238c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80238c2:	fb05 fc0c 	mul.w	ip, r5, ip
 80238c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80238c8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80238cc:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80238d0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80238d2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80238d6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238da:	fb05 fb0b 	mul.w	fp, r5, fp
 80238de:	44e6      	add	lr, ip
 80238e0:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80238e4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80238e8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80238ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80238f0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80238f4:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80238f8:	ea4e 050b 	orr.w	r5, lr, fp
 80238fc:	950e      	str	r5, [sp, #56]	; 0x38
 80238fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023900:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8023904:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023908:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802390c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802390e:	fb09 fc0c 	mul.w	ip, r9, ip
 8023912:	fb02 cc0e 	mla	ip, r2, lr, ip
 8023916:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802391a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802391c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8023920:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023924:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8023926:	fb0a cc0e 	mla	ip, sl, lr, ip
 802392a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802392e:	fb09 f90e 	mul.w	r9, r9, lr
 8023932:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023936:	fb02 9303 	mla	r3, r2, r3, r9
 802393a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802393c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8023940:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 8023944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023946:	fb01 330b 	mla	r3, r1, fp, r3
 802394a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802394e:	fb0a 3a01 	mla	sl, sl, r1, r3
 8023952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023954:	4358      	muls	r0, r3
 8023956:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802395a:	1c43      	adds	r3, r0, #1
 802395c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8023960:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023964:	ea4c 0c0a 	orr.w	ip, ip, sl
 8023968:	1200      	asrs	r0, r0, #8
 802396a:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802396e:	f3cc 2207 	ubfx	r2, ip, #8, #8
 8023972:	28ff      	cmp	r0, #255	; 0xff
 8023974:	b2d9      	uxtb	r1, r3
 8023976:	fa5f fe82 	uxtb.w	lr, r2
 802397a:	f040 808c 	bne.w	8023a96 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 802397e:	f888 c000 	strb.w	ip, [r8]
 8023982:	f888 2001 	strb.w	r2, [r8, #1]
 8023986:	f888 3002 	strb.w	r3, [r8, #2]
 802398a:	f888 0003 	strb.w	r0, [r8, #3]
 802398e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023990:	f108 0804 	add.w	r8, r8, #4
 8023994:	441c      	add	r4, r3
 8023996:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023998:	441e      	add	r6, r3
 802399a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802399c:	3b01      	subs	r3, #1
 802399e:	9319      	str	r3, [sp, #100]	; 0x64
 80239a0:	e6bb      	b.n	802371a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80239a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80239a4:	441c      	add	r4, r3
 80239a6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80239a8:	441e      	add	r6, r3
 80239aa:	9b08      	ldr	r3, [sp, #32]
 80239ac:	3b01      	subs	r3, #1
 80239ae:	9308      	str	r3, [sp, #32]
 80239b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80239b2:	3304      	adds	r3, #4
 80239b4:	930c      	str	r3, [sp, #48]	; 0x30
 80239b6:	e68f      	b.n	80236d8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80239b8:	d023      	beq.n	8023a02 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 80239ba:	9b08      	ldr	r3, [sp, #32]
 80239bc:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80239be:	3b01      	subs	r3, #1
 80239c0:	fb00 4003 	mla	r0, r0, r3, r4
 80239c4:	1400      	asrs	r0, r0, #16
 80239c6:	f53f aea4 	bmi.w	8023712 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239ca:	3901      	subs	r1, #1
 80239cc:	4288      	cmp	r0, r1
 80239ce:	f6bf aea0 	bge.w	8023712 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239d2:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80239d4:	fb01 6303 	mla	r3, r1, r3, r6
 80239d8:	141b      	asrs	r3, r3, #16
 80239da:	f53f ae9a 	bmi.w	8023712 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239de:	3a01      	subs	r2, #1
 80239e0:	4293      	cmp	r3, r2
 80239e2:	f6bf ae96 	bge.w	8023712 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80239e6:	9b08      	ldr	r3, [sp, #32]
 80239e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80239ea:	9319      	str	r3, [sp, #100]	; 0x64
 80239ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80239ee:	2b00      	cmp	r3, #0
 80239f0:	f300 80ba 	bgt.w	8023b68 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 80239f4:	9b08      	ldr	r3, [sp, #32]
 80239f6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80239fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80239fc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8023a00:	930c      	str	r3, [sp, #48]	; 0x30
 8023a02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023a04:	2b00      	cmp	r3, #0
 8023a06:	f340 822c 	ble.w	8023e62 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 8023a0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8023a0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a10:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023a14:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023a18:	eef0 6a62 	vmov.f32	s13, s5
 8023a1c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023a20:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023a24:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a28:	ee16 4a90 	vmov	r4, s13
 8023a2c:	eef0 6a43 	vmov.f32	s13, s6
 8023a30:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023a34:	ee16 6a90 	vmov	r6, s13
 8023a38:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023a3c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023a40:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023a44:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023a48:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023a4c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023a50:	ee12 2a90 	vmov	r2, s5
 8023a54:	eef0 2a47 	vmov.f32	s5, s14
 8023a58:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a5c:	ee13 2a10 	vmov	r2, s6
 8023a60:	9329      	str	r3, [sp, #164]	; 0xa4
 8023a62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a64:	eeb0 3a67 	vmov.f32	s6, s15
 8023a68:	fb92 f3f3 	sdiv	r3, r2, r3
 8023a6c:	932a      	str	r3, [sp, #168]	; 0xa8
 8023a6e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023a70:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8023a72:	3b01      	subs	r3, #1
 8023a74:	9318      	str	r3, [sp, #96]	; 0x60
 8023a76:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8023a78:	bf08      	it	eq
 8023a7a:	4613      	moveq	r3, r2
 8023a7c:	9308      	str	r3, [sp, #32]
 8023a7e:	e61c      	b.n	80236ba <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8023a80:	2900      	cmp	r1, #0
 8023a82:	f43f ae8e 	beq.w	80237a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8023a86:	f819 0000 	ldrb.w	r0, [r9, r0]
 8023a8a:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 8023a8e:	900a      	str	r0, [sp, #40]	; 0x28
 8023a90:	0e00      	lsrs	r0, r0, #24
 8023a92:	9012      	str	r0, [sp, #72]	; 0x48
 8023a94:	e685      	b.n	80237a2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 8023a96:	b2c3      	uxtb	r3, r0
 8023a98:	2800      	cmp	r0, #0
 8023a9a:	f43f af78 	beq.w	802398e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023a9e:	f898 0003 	ldrb.w	r0, [r8, #3]
 8023aa2:	fa5f fc8c 	uxtb.w	ip, ip
 8023aa6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023aa8:	fb03 f900 	mul.w	r9, r3, r0
 8023aac:	4403      	add	r3, r0
 8023aae:	f109 0201 	add.w	r2, r9, #1
 8023ab2:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8023ab6:	1212      	asrs	r2, r2, #8
 8023ab8:	1a80      	subs	r0, r0, r2
 8023aba:	1a9b      	subs	r3, r3, r2
 8023abc:	f898 2000 	ldrb.w	r2, [r8]
 8023ac0:	b2db      	uxtb	r3, r3
 8023ac2:	4342      	muls	r2, r0
 8023ac4:	f888 3003 	strb.w	r3, [r8, #3]
 8023ac8:	fb05 220c 	mla	r2, r5, ip, r2
 8023acc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023ace:	fb92 f2f3 	sdiv	r2, r2, r3
 8023ad2:	fb15 fe0e 	smulbb	lr, r5, lr
 8023ad6:	2aff      	cmp	r2, #255	; 0xff
 8023ad8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023ada:	bfd4      	ite	le
 8023adc:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8023ae0:	22ff      	movgt	r2, #255	; 0xff
 8023ae2:	fb15 f101 	smulbb	r1, r5, r1
 8023ae6:	bfd8      	it	le
 8023ae8:	b2d2      	uxtble	r2, r2
 8023aea:	f888 2000 	strb.w	r2, [r8]
 8023aee:	f898 2001 	ldrb.w	r2, [r8, #1]
 8023af2:	fb00 e202 	mla	r2, r0, r2, lr
 8023af6:	fb92 f2f3 	sdiv	r2, r2, r3
 8023afa:	2aff      	cmp	r2, #255	; 0xff
 8023afc:	bfd6      	itet	le
 8023afe:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8023b02:	22ff      	movgt	r2, #255	; 0xff
 8023b04:	b2d2      	uxtble	r2, r2
 8023b06:	f888 2001 	strb.w	r2, [r8, #1]
 8023b0a:	f898 2002 	ldrb.w	r2, [r8, #2]
 8023b0e:	fb00 1202 	mla	r2, r0, r2, r1
 8023b12:	fb92 f2f3 	sdiv	r2, r2, r3
 8023b16:	2aff      	cmp	r2, #255	; 0xff
 8023b18:	bfd6      	itet	le
 8023b1a:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8023b1e:	22ff      	movgt	r2, #255	; 0xff
 8023b20:	b2d2      	uxtble	r2, r2
 8023b22:	f888 2002 	strb.w	r2, [r8, #2]
 8023b26:	e732      	b.n	802398e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023b28:	f113 0901 	adds.w	r9, r3, #1
 8023b2c:	f53f af2f 	bmi.w	802398e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023b30:	4548      	cmp	r0, r9
 8023b32:	f6ff af2c 	blt.w	802398e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023b36:	f11c 0901 	adds.w	r9, ip, #1
 8023b3a:	f53f af28 	bmi.w	802398e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023b3e:	45ce      	cmp	lr, r9
 8023b40:	f6ff af25 	blt.w	802398e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023b44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023b46:	b200      	sxth	r0, r0
 8023b48:	9302      	str	r3, [sp, #8]
 8023b4a:	fa0f f38e 	sxth.w	r3, lr
 8023b4e:	9000      	str	r0, [sp, #0]
 8023b50:	9301      	str	r3, [sp, #4]
 8023b52:	463b      	mov	r3, r7
 8023b54:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8023b56:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8023b5a:	e9cd c203 	strd	ip, r2, [sp, #12]
 8023b5e:	4641      	mov	r1, r8
 8023b60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8023b62:	f7ff fc30 	bl	80233c6 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8023b66:	e712      	b.n	802398e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8023b68:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8023b6a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8023b6e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023b70:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8023b74:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8023b78:	1433      	asrs	r3, r6, #16
 8023b7a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023b7e:	fb0c e303 	mla	r3, ip, r3, lr
 8023b82:	eb05 0e03 	add.w	lr, r5, r3
 8023b86:	5ceb      	ldrb	r3, [r5, r3]
 8023b88:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8023b8c:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8023b90:	2a00      	cmp	r2, #0
 8023b92:	f000 8116 	beq.w	8023dc2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8023b96:	f89e 9001 	ldrb.w	r9, [lr, #1]
 8023b9a:	f857 5029 	ldr.w	r5, [r7, r9, lsl #2]
 8023b9e:	950f      	str	r5, [sp, #60]	; 0x3c
 8023ba0:	0e2d      	lsrs	r5, r5, #24
 8023ba2:	9516      	str	r5, [sp, #88]	; 0x58
 8023ba4:	b178      	cbz	r0, 8023bc6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8023ba6:	eb0e 090c 	add.w	r9, lr, ip
 8023baa:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8023bae:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8023bb2:	f899 c001 	ldrb.w	ip, [r9, #1]
 8023bb6:	950b      	str	r5, [sp, #44]	; 0x2c
 8023bb8:	0e2d      	lsrs	r5, r5, #24
 8023bba:	9513      	str	r5, [sp, #76]	; 0x4c
 8023bbc:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8023bc0:	9510      	str	r5, [sp, #64]	; 0x40
 8023bc2:	0e2d      	lsrs	r5, r5, #24
 8023bc4:	9517      	str	r5, [sp, #92]	; 0x5c
 8023bc6:	b292      	uxth	r2, r2
 8023bc8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023bca:	b280      	uxth	r0, r0
 8023bcc:	fb02 fa00 	mul.w	sl, r2, r0
 8023bd0:	0112      	lsls	r2, r2, #4
 8023bd2:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8023bd6:	eba2 090a 	sub.w	r9, r2, sl
 8023bda:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8023bde:	fa1f fc80 	uxth.w	ip, r0
 8023be2:	9816      	ldr	r0, [sp, #88]	; 0x58
 8023be4:	fa1f f989 	uxth.w	r9, r9
 8023be8:	eba2 020c 	sub.w	r2, r2, ip
 8023bec:	fb09 f000 	mul.w	r0, r9, r0
 8023bf0:	b292      	uxth	r2, r2
 8023bf2:	fb02 0008 	mla	r0, r2, r8, r0
 8023bf6:	fb0c 0005 	mla	r0, ip, r5, r0
 8023bfa:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8023bfc:	fb0a 0005 	mla	r0, sl, r5, r0
 8023c00:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8023c04:	2800      	cmp	r0, #0
 8023c06:	f000 80d3 	beq.w	8023db0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8023c0a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8023c0e:	d01b      	beq.n	8023c48 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8023c10:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8023c14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023c18:	fb08 fb0b 	mul.w	fp, r8, fp
 8023c1c:	fb08 f803 	mul.w	r8, r8, r3
 8023c20:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8023c24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8023c28:	f508 7e80 	add.w	lr, r8, #256	; 0x100
 8023c2c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c30:	eb0e 2e18 	add.w	lr, lr, r8, lsr #8
 8023c34:	445b      	add	r3, fp
 8023c36:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023c3a:	0a1b      	lsrs	r3, r3, #8
 8023c3c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8023c40:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023c44:	ea43 030e 	orr.w	r3, r3, lr
 8023c48:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023c4a:	2dff      	cmp	r5, #255	; 0xff
 8023c4c:	d021      	beq.n	8023c92 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8023c4e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023c50:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023c54:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023c56:	fb05 fe0e 	mul.w	lr, r5, lr
 8023c5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023c5c:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8023c60:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8023c64:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8023c66:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023c6a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023c6e:	fb05 fb0b 	mul.w	fp, r5, fp
 8023c72:	44f0      	add	r8, lr
 8023c74:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8023c78:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023c7c:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8023c80:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023c84:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023c88:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023c8c:	ea48 050b 	orr.w	r5, r8, fp
 8023c90:	950f      	str	r5, [sp, #60]	; 0x3c
 8023c92:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023c94:	2dff      	cmp	r5, #255	; 0xff
 8023c96:	d021      	beq.n	8023cdc <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8023c98:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023c9a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023c9e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023ca0:	fb05 fe0e 	mul.w	lr, r5, lr
 8023ca4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023ca6:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8023caa:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8023cae:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8023cb0:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023cb4:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023cb8:	fb05 fb0b 	mul.w	fp, r5, fp
 8023cbc:	44f0      	add	r8, lr
 8023cbe:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8023cc2:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023cc6:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8023cca:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023cce:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023cd2:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023cd6:	ea48 050b 	orr.w	r5, r8, fp
 8023cda:	950b      	str	r5, [sp, #44]	; 0x2c
 8023cdc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8023cde:	2dff      	cmp	r5, #255	; 0xff
 8023ce0:	d021      	beq.n	8023d26 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a4>
 8023ce2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023ce4:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023ce8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8023cea:	fb05 fe0e 	mul.w	lr, r5, lr
 8023cee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023cf0:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8023cf4:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8023cf8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8023cfa:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8023cfe:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023d02:	fb05 fb0b 	mul.w	fp, r5, fp
 8023d06:	44f0      	add	r8, lr
 8023d08:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8023d0c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023d10:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8023d14:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8023d18:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8023d1c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8023d20:	ea48 050b 	orr.w	r5, r8, fp
 8023d24:	9510      	str	r5, [sp, #64]	; 0x40
 8023d26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023d28:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8023d2c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8023d30:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8023d34:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8023d36:	fb09 fe0e 	mul.w	lr, r9, lr
 8023d3a:	fb02 ee08 	mla	lr, r2, r8, lr
 8023d3e:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 8023d42:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8023d44:	fb0c ee08 	mla	lr, ip, r8, lr
 8023d48:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 8023d4c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8023d4e:	fb0a ee08 	mla	lr, sl, r8, lr
 8023d52:	f405 487f 	and.w	r8, r5, #65280	; 0xff00
 8023d56:	fb09 f908 	mul.w	r9, r9, r8
 8023d5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023d5e:	fb02 9303 	mla	r3, r2, r3, r9
 8023d62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023d64:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8023d68:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 8023d6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8023d6e:	fb0c 330b 	mla	r3, ip, fp, r3
 8023d72:	f402 487f 	and.w	r8, r2, #65280	; 0xff00
 8023d76:	fb0a 3808 	mla	r8, sl, r8, r3
 8023d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023d7c:	4358      	muls	r0, r3
 8023d7e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023d82:	1c43      	adds	r3, r0, #1
 8023d84:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8023d88:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8023d8c:	ea4e 0e08 	orr.w	lr, lr, r8
 8023d90:	1200      	asrs	r0, r0, #8
 8023d92:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8023d96:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8023d9a:	28ff      	cmp	r0, #255	; 0xff
 8023d9c:	fa5f fc83 	uxtb.w	ip, r3
 8023da0:	fa5f f882 	uxtb.w	r8, r2
 8023da4:	d118      	bne.n	8023dd8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8023da6:	f881 e000 	strb.w	lr, [r1]
 8023daa:	704a      	strb	r2, [r1, #1]
 8023dac:	708b      	strb	r3, [r1, #2]
 8023dae:	70c8      	strb	r0, [r1, #3]
 8023db0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8023db2:	3104      	adds	r1, #4
 8023db4:	441c      	add	r4, r3
 8023db6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8023db8:	441e      	add	r6, r3
 8023dba:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023dbc:	3b01      	subs	r3, #1
 8023dbe:	9319      	str	r3, [sp, #100]	; 0x64
 8023dc0:	e614      	b.n	80239ec <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023dc2:	2800      	cmp	r0, #0
 8023dc4:	f43f aeff 	beq.w	8023bc6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8023dc8:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8023dcc:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8023dd0:	950b      	str	r5, [sp, #44]	; 0x2c
 8023dd2:	0e2d      	lsrs	r5, r5, #24
 8023dd4:	9513      	str	r5, [sp, #76]	; 0x4c
 8023dd6:	e6f6      	b.n	8023bc6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8023dd8:	b2c3      	uxtb	r3, r0
 8023dda:	2800      	cmp	r0, #0
 8023ddc:	d0e8      	beq.n	8023db0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8023dde:	78c8      	ldrb	r0, [r1, #3]
 8023de0:	fa5f fe8e 	uxtb.w	lr, lr
 8023de4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023de6:	fb03 f900 	mul.w	r9, r3, r0
 8023dea:	4403      	add	r3, r0
 8023dec:	f109 0201 	add.w	r2, r9, #1
 8023df0:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8023df4:	1212      	asrs	r2, r2, #8
 8023df6:	1a9b      	subs	r3, r3, r2
 8023df8:	1a82      	subs	r2, r0, r2
 8023dfa:	7808      	ldrb	r0, [r1, #0]
 8023dfc:	b2db      	uxtb	r3, r3
 8023dfe:	4350      	muls	r0, r2
 8023e00:	70cb      	strb	r3, [r1, #3]
 8023e02:	fb05 0e0e 	mla	lr, r5, lr, r0
 8023e06:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023e08:	7848      	ldrb	r0, [r1, #1]
 8023e0a:	fb15 f808 	smulbb	r8, r5, r8
 8023e0e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8023e10:	fb9e fef3 	sdiv	lr, lr, r3
 8023e14:	fb02 8000 	mla	r0, r2, r0, r8
 8023e18:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8023e1c:	fb15 fc0c 	smulbb	ip, r5, ip
 8023e20:	bfd4      	ite	le
 8023e22:	ea2e 7eee 	bicle.w	lr, lr, lr, asr #31
 8023e26:	f04f 0eff 	movgt.w	lr, #255	; 0xff
 8023e2a:	fb90 f0f3 	sdiv	r0, r0, r3
 8023e2e:	bfd8      	it	le
 8023e30:	fa5f fe8e 	uxtble.w	lr, lr
 8023e34:	28ff      	cmp	r0, #255	; 0xff
 8023e36:	bfd4      	ite	le
 8023e38:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8023e3c:	20ff      	movgt	r0, #255	; 0xff
 8023e3e:	f881 e000 	strb.w	lr, [r1]
 8023e42:	bfd8      	it	le
 8023e44:	b2c0      	uxtble	r0, r0
 8023e46:	7048      	strb	r0, [r1, #1]
 8023e48:	7888      	ldrb	r0, [r1, #2]
 8023e4a:	fb02 c200 	mla	r2, r2, r0, ip
 8023e4e:	fb92 f2f3 	sdiv	r2, r2, r3
 8023e52:	2aff      	cmp	r2, #255	; 0xff
 8023e54:	bfd6      	itet	le
 8023e56:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8023e5a:	22ff      	movgt	r2, #255	; 0xff
 8023e5c:	b2d2      	uxtble	r2, r2
 8023e5e:	708a      	strb	r2, [r1, #2]
 8023e60:	e7a6      	b.n	8023db0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8023e62:	b01d      	add	sp, #116	; 0x74
 8023e64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023e68 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>:
 8023e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e6c:	b087      	sub	sp, #28
 8023e6e:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	; 0x48
 8023e72:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8023e76:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 8023e7a:	2e00      	cmp	r6, #0
 8023e7c:	9002      	str	r0, [sp, #8]
 8023e7e:	fb06 8005 	mla	r0, r6, r5, r8
 8023e82:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8023e86:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8023e8a:	eb02 0740 	add.w	r7, r2, r0, lsl #1
 8023e8e:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8023e92:	9703      	str	r7, [sp, #12]
 8023e94:	eb03 0700 	add.w	r7, r3, r0
 8023e98:	9704      	str	r7, [sp, #16]
 8023e9a:	f2c0 8133 	blt.w	8024104 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8023e9e:	45b3      	cmp	fp, r6
 8023ea0:	f340 8130 	ble.w	8024104 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8023ea4:	f1b8 0f00 	cmp.w	r8, #0
 8023ea8:	f2c0 8128 	blt.w	80240fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8023eac:	4545      	cmp	r5, r8
 8023eae:	f340 8125 	ble.w	80240fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8023eb2:	f813 c000 	ldrb.w	ip, [r3, r0]
 8023eb6:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8023eba:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8023ebe:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8023ec2:	f423 6afc 	bic.w	sl, r3, #2016	; 0x7e0
 8023ec6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023eca:	fb0c f303 	mul.w	r3, ip, r3
 8023ece:	fb0a f202 	mul.w	r2, sl, r2
 8023ed2:	f103 0a20 	add.w	sl, r3, #32
 8023ed6:	ea07 1052 	and.w	r0, r7, r2, lsr #5
 8023eda:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8023ede:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 8023ee2:	4402      	add	r2, r0
 8023ee4:	0a1b      	lsrs	r3, r3, #8
 8023ee6:	ea07 1752 	and.w	r7, r7, r2, lsr #5
 8023eea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023eee:	ea47 0a03 	orr.w	sl, r7, r3
 8023ef2:	f118 0301 	adds.w	r3, r8, #1
 8023ef6:	f100 810a 	bmi.w	802410e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8023efa:	429d      	cmp	r5, r3
 8023efc:	f340 8107 	ble.w	802410e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8023f00:	2c00      	cmp	r4, #0
 8023f02:	f000 8107 	beq.w	8024114 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2ac>
 8023f06:	9b04      	ldr	r3, [sp, #16]
 8023f08:	785a      	ldrb	r2, [r3, #1]
 8023f0a:	9b03      	ldr	r3, [sp, #12]
 8023f0c:	10d7      	asrs	r7, r2, #3
 8023f0e:	885b      	ldrh	r3, [r3, #2]
 8023f10:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8023f14:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023f18:	4347      	muls	r7, r0
 8023f1a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8023f1e:	4353      	muls	r3, r2
 8023f20:	ea00 1957 	and.w	r9, r0, r7, lsr #5
 8023f24:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8023f28:	444f      	add	r7, r9
 8023f2a:	f103 0920 	add.w	r9, r3, #32
 8023f2e:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 8023f32:	ea00 1057 	and.w	r0, r0, r7, lsr #5
 8023f36:	0a1b      	lsrs	r3, r3, #8
 8023f38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023f3c:	4303      	orrs	r3, r0
 8023f3e:	9301      	str	r3, [sp, #4]
 8023f40:	3601      	adds	r6, #1
 8023f42:	f100 80ed 	bmi.w	8024120 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8023f46:	45b3      	cmp	fp, r6
 8023f48:	f340 80ea 	ble.w	8024120 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8023f4c:	f1be 0f00 	cmp.w	lr, #0
 8023f50:	f000 80eb 	beq.w	802412a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2c2>
 8023f54:	f1b8 0f00 	cmp.w	r8, #0
 8023f58:	f2c0 80df 	blt.w	802411a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8023f5c:	4545      	cmp	r5, r8
 8023f5e:	f340 80dc 	ble.w	802411a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8023f62:	9b04      	ldr	r3, [sp, #16]
 8023f64:	5d5f      	ldrb	r7, [r3, r5]
 8023f66:	9b03      	ldr	r3, [sp, #12]
 8023f68:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8023f6c:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8023f70:	f423 66fc 	bic.w	r6, r3, #2016	; 0x7e0
 8023f74:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023f78:	fb09 f906 	mul.w	r9, r9, r6
 8023f7c:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8023f80:	437b      	muls	r3, r7
 8023f82:	ea06 1b59 	and.w	fp, r6, r9, lsr #5
 8023f86:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8023f8a:	44d9      	add	r9, fp
 8023f8c:	f103 0b20 	add.w	fp, r3, #32
 8023f90:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8023f94:	ea06 1659 	and.w	r6, r6, r9, lsr #5
 8023f98:	0a1b      	lsrs	r3, r3, #8
 8023f9a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8023f9e:	431e      	orrs	r6, r3
 8023fa0:	f118 0801 	adds.w	r8, r8, #1
 8023fa4:	f100 80c6 	bmi.w	8024134 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8023fa8:	4545      	cmp	r5, r8
 8023faa:	f340 80c3 	ble.w	8024134 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8023fae:	2c00      	cmp	r4, #0
 8023fb0:	f000 80c3 	beq.w	802413a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d2>
 8023fb4:	3501      	adds	r5, #1
 8023fb6:	9b04      	ldr	r3, [sp, #16]
 8023fb8:	9803      	ldr	r0, [sp, #12]
 8023fba:	5d5b      	ldrb	r3, [r3, r5]
 8023fbc:	f830 8015 	ldrh.w	r8, [r0, r5, lsl #1]
 8023fc0:	ea4f 09e3 	mov.w	r9, r3, asr #3
 8023fc4:	f428 65fc 	bic.w	r5, r8, #2016	; 0x7e0
 8023fc8:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023fcc:	fb09 f905 	mul.w	r9, r9, r5
 8023fd0:	f64f 051f 	movw	r5, #63519	; 0xf81f
 8023fd4:	fb03 f808 	mul.w	r8, r3, r8
 8023fd8:	ea05 1b59 	and.w	fp, r5, r9, lsr #5
 8023fdc:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8023fe0:	44d9      	add	r9, fp
 8023fe2:	ea05 1559 	and.w	r5, r5, r9, lsr #5
 8023fe6:	f108 0920 	add.w	r9, r8, #32
 8023fea:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8023fee:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8023ff2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8023ff6:	ea45 0508 	orr.w	r5, r5, r8
 8023ffa:	fa1f f984 	uxth.w	r9, r4
 8023ffe:	fa1f f88e 	uxth.w	r8, lr
 8024002:	fb09 f008 	mul.w	r0, r9, r8
 8024006:	9003      	str	r0, [sp, #12]
 8024008:	ea4f 1009 	mov.w	r0, r9, lsl #4
 802400c:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8024010:	f42a 6afc 	bic.w	sl, sl, #2016	; 0x7e0
 8024014:	9004      	str	r0, [sp, #16]
 8024016:	9803      	ldr	r0, [sp, #12]
 8024018:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 802401c:	ebc0 1808 	rsb	r8, r0, r8, lsl #4
 8024020:	ea49 090a 	orr.w	r9, r9, sl
 8024024:	f1ce 0a10 	rsb	sl, lr, #16
 8024028:	fa1f f088 	uxth.w	r0, r8
 802402c:	fb14 f80e 	smulbb	r8, r4, lr
 8024030:	ebaa 0a04 	sub.w	sl, sl, r4
 8024034:	9005      	str	r0, [sp, #20]
 8024036:	9801      	ldr	r0, [sp, #4]
 8024038:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 802403c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024040:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024044:	ebc8 0444 	rsb	r4, r8, r4, lsl #1
 8024048:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802404c:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8024050:	ebc8 0e4e 	rsb	lr, r8, lr, lsl #1
 8024054:	ea4b 0000 	orr.w	r0, fp, r0
 8024058:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 802405c:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024060:	4360      	muls	r0, r4
 8024062:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024066:	9c04      	ldr	r4, [sp, #16]
 8024068:	ea4b 0505 	orr.w	r5, fp, r5
 802406c:	fb0a 0009 	mla	r0, sl, r9, r0
 8024070:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8024074:	fb08 0005 	mla	r0, r8, r5, r0
 8024078:	0435      	lsls	r5, r6, #16
 802407a:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 802407e:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024082:	432e      	orrs	r6, r5
 8024084:	9d05      	ldr	r5, [sp, #20]
 8024086:	fb0e 0e06 	mla	lr, lr, r6, r0
 802408a:	1b64      	subs	r4, r4, r5
 802408c:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8024090:	b2a4      	uxth	r4, r4
 8024092:	1bad      	subs	r5, r5, r6
 8024094:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8024098:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 802409c:	b2ad      	uxth	r5, r5
 802409e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80240a2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80240a6:	436a      	muls	r2, r5
 80240a8:	ea40 0e0e 	orr.w	lr, r0, lr
 80240ac:	fb0c 2204 	mla	r2, ip, r4, r2
 80240b0:	9c05      	ldr	r4, [sp, #20]
 80240b2:	fa1f f08e 	uxth.w	r0, lr
 80240b6:	fb04 2707 	mla	r7, r4, r7, r2
 80240ba:	9a02      	ldr	r2, [sp, #8]
 80240bc:	1205      	asrs	r5, r0, #8
 80240be:	fb06 7303 	mla	r3, r6, r3, r7
 80240c2:	10c7      	asrs	r7, r0, #3
 80240c4:	00c0      	lsls	r0, r0, #3
 80240c6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80240ca:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80240ce:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80240d2:	b2c0      	uxtb	r0, r0
 80240d4:	4353      	muls	r3, r2
 80240d6:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80240da:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 80240de:	1c5a      	adds	r2, r3, #1
 80240e0:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 80240e4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80240e8:	121b      	asrs	r3, r3, #8
 80240ea:	2bff      	cmp	r3, #255	; 0xff
 80240ec:	d128      	bne.n	8024140 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d8>
 80240ee:	7008      	strb	r0, [r1, #0]
 80240f0:	704f      	strb	r7, [r1, #1]
 80240f2:	708d      	strb	r5, [r1, #2]
 80240f4:	70cb      	strb	r3, [r1, #3]
 80240f6:	b007      	add	sp, #28
 80240f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80240fc:	f04f 0c00 	mov.w	ip, #0
 8024100:	46e2      	mov	sl, ip
 8024102:	e6f6      	b.n	8023ef2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x8a>
 8024104:	2200      	movs	r2, #0
 8024106:	4694      	mov	ip, r2
 8024108:	9201      	str	r2, [sp, #4]
 802410a:	4692      	mov	sl, r2
 802410c:	e718      	b.n	8023f40 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 802410e:	2200      	movs	r2, #0
 8024110:	9201      	str	r2, [sp, #4]
 8024112:	e715      	b.n	8023f40 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8024114:	4622      	mov	r2, r4
 8024116:	9401      	str	r4, [sp, #4]
 8024118:	e712      	b.n	8023f40 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 802411a:	2700      	movs	r7, #0
 802411c:	463e      	mov	r6, r7
 802411e:	e73f      	b.n	8023fa0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x138>
 8024120:	2300      	movs	r3, #0
 8024122:	461f      	mov	r7, r3
 8024124:	461d      	mov	r5, r3
 8024126:	461e      	mov	r6, r3
 8024128:	e767      	b.n	8023ffa <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 802412a:	4673      	mov	r3, lr
 802412c:	4677      	mov	r7, lr
 802412e:	4675      	mov	r5, lr
 8024130:	4676      	mov	r6, lr
 8024132:	e762      	b.n	8023ffa <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024134:	2300      	movs	r3, #0
 8024136:	461d      	mov	r5, r3
 8024138:	e75f      	b.n	8023ffa <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 802413a:	4623      	mov	r3, r4
 802413c:	4625      	mov	r5, r4
 802413e:	e75c      	b.n	8023ffa <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8024140:	b2dc      	uxtb	r4, r3
 8024142:	2b00      	cmp	r3, #0
 8024144:	d0d7      	beq.n	80240f6 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28e>
 8024146:	f891 c003 	ldrb.w	ip, [r1, #3]
 802414a:	fb04 f20c 	mul.w	r2, r4, ip
 802414e:	eb0c 0304 	add.w	r3, ip, r4
 8024152:	780c      	ldrb	r4, [r1, #0]
 8024154:	1c56      	adds	r6, r2, #1
 8024156:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 802415a:	1232      	asrs	r2, r6, #8
 802415c:	ebac 0602 	sub.w	r6, ip, r2
 8024160:	1a9b      	subs	r3, r3, r2
 8024162:	9a02      	ldr	r2, [sp, #8]
 8024164:	b2db      	uxtb	r3, r3
 8024166:	fb10 f002 	smulbb	r0, r0, r2
 802416a:	9a02      	ldr	r2, [sp, #8]
 802416c:	fb06 0404 	mla	r4, r6, r4, r0
 8024170:	fb12 f707 	smulbb	r7, r2, r7
 8024174:	7848      	ldrb	r0, [r1, #1]
 8024176:	788a      	ldrb	r2, [r1, #2]
 8024178:	fb06 7000 	mla	r0, r6, r0, r7
 802417c:	fb94 f4f3 	sdiv	r4, r4, r3
 8024180:	fb90 f0f3 	sdiv	r0, r0, r3
 8024184:	2cff      	cmp	r4, #255	; 0xff
 8024186:	bfd6      	itet	le
 8024188:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 802418c:	24ff      	movgt	r4, #255	; 0xff
 802418e:	b2e4      	uxtble	r4, r4
 8024190:	28ff      	cmp	r0, #255	; 0xff
 8024192:	bfd4      	ite	le
 8024194:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8024198:	20ff      	movgt	r0, #255	; 0xff
 802419a:	700c      	strb	r4, [r1, #0]
 802419c:	bfd8      	it	le
 802419e:	b2c0      	uxtble	r0, r0
 80241a0:	7048      	strb	r0, [r1, #1]
 80241a2:	9802      	ldr	r0, [sp, #8]
 80241a4:	fb10 f505 	smulbb	r5, r0, r5
 80241a8:	fb06 5202 	mla	r2, r6, r2, r5
 80241ac:	fb92 f2f3 	sdiv	r2, r2, r3
 80241b0:	2aff      	cmp	r2, #255	; 0xff
 80241b2:	bfd6      	itet	le
 80241b4:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80241b8:	22ff      	movgt	r2, #255	; 0xff
 80241ba:	b2d2      	uxtble	r2, r2
 80241bc:	708a      	strb	r2, [r1, #2]
 80241be:	e799      	b.n	80240f4 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28c>

080241c0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80241c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241c4:	b097      	sub	sp, #92	; 0x5c
 80241c6:	9214      	str	r2, [sp, #80]	; 0x50
 80241c8:	9309      	str	r3, [sp, #36]	; 0x24
 80241ca:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80241cc:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 80241d0:	9015      	str	r0, [sp, #84]	; 0x54
 80241d2:	9112      	str	r1, [sp, #72]	; 0x48
 80241d4:	6850      	ldr	r0, [r2, #4]
 80241d6:	930a      	str	r3, [sp, #40]	; 0x28
 80241d8:	6812      	ldr	r2, [r2, #0]
 80241da:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 80241de:	fb00 1303 	mla	r3, r0, r3, r1
 80241e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80241e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80241e8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80241ea:	681b      	ldr	r3, [r3, #0]
 80241ec:	930c      	str	r3, [sp, #48]	; 0x30
 80241ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80241f0:	685b      	ldr	r3, [r3, #4]
 80241f2:	930d      	str	r3, [sp, #52]	; 0x34
 80241f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80241f6:	2b00      	cmp	r3, #0
 80241f8:	dc03      	bgt.n	8024202 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80241fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80241fc:	2b00      	cmp	r3, #0
 80241fe:	f340 8407 	ble.w	8024a10 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8024202:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024204:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024208:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802420c:	1e48      	subs	r0, r1, #1
 802420e:	1e55      	subs	r5, r2, #1
 8024210:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024212:	2b00      	cmp	r3, #0
 8024214:	f340 81b7 	ble.w	8024586 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8024218:	9e21      	ldr	r6, [sp, #132]	; 0x84
 802421a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802421c:	1436      	asrs	r6, r6, #16
 802421e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024222:	d406      	bmi.n	8024232 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024224:	4286      	cmp	r6, r0
 8024226:	da04      	bge.n	8024232 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8024228:	2b00      	cmp	r3, #0
 802422a:	db02      	blt.n	8024232 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802422c:	42ab      	cmp	r3, r5
 802422e:	f2c0 81ab 	blt.w	8024588 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8024232:	3601      	adds	r6, #1
 8024234:	f100 8198 	bmi.w	8024568 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024238:	42b1      	cmp	r1, r6
 802423a:	f2c0 8195 	blt.w	8024568 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802423e:	3301      	adds	r3, #1
 8024240:	f100 8192 	bmi.w	8024568 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8024244:	429a      	cmp	r2, r3
 8024246:	f2c0 818f 	blt.w	8024568 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802424a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802424c:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8024250:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024252:	9313      	str	r3, [sp, #76]	; 0x4c
 8024254:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024256:	2b00      	cmp	r3, #0
 8024258:	f340 81b7 	ble.w	80245ca <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802425c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802425e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8024260:	1418      	asrs	r0, r3, #16
 8024262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024264:	1436      	asrs	r6, r6, #16
 8024266:	f3c3 3103 	ubfx	r1, r3, #12, #4
 802426a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802426c:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024270:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8024272:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024276:	f100 820f 	bmi.w	8024698 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802427a:	f102 3eff 	add.w	lr, r2, #4294967295
 802427e:	4576      	cmp	r6, lr
 8024280:	f280 820a 	bge.w	8024698 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024284:	2800      	cmp	r0, #0
 8024286:	f2c0 8207 	blt.w	8024698 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802428a:	f103 3eff 	add.w	lr, r3, #4294967295
 802428e:	4570      	cmp	r0, lr
 8024290:	f280 8202 	bge.w	8024698 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 8024294:	b212      	sxth	r2, r2
 8024296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024298:	fa1f fe81 	uxth.w	lr, r1
 802429c:	fb00 6002 	mla	r0, r0, r2, r6
 80242a0:	ea4f 160e 	mov.w	r6, lr, lsl #4
 80242a4:	eb03 0a00 	add.w	sl, r3, r0
 80242a8:	f813 9000 	ldrb.w	r9, [r3, r0]
 80242ac:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80242b0:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80242b4:	b29b      	uxth	r3, r3
 80242b6:	f1bc 0f00 	cmp.w	ip, #0
 80242ba:	f000 81cc 	beq.w	8024656 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 80242be:	f81a 4002 	ldrb.w	r4, [sl, r2]
 80242c2:	eb0a 0b02 	add.w	fp, sl, r2
 80242c6:	fa1f fa8c 	uxth.w	sl, ip
 80242ca:	940e      	str	r4, [sp, #56]	; 0x38
 80242cc:	fb0a fe0e 	mul.w	lr, sl, lr
 80242d0:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80242d4:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80242d8:	eba6 060e 	sub.w	r6, r6, lr
 80242dc:	940f      	str	r4, [sp, #60]	; 0x3c
 80242de:	fa1f fa8a 	uxth.w	sl, sl
 80242e2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80242e4:	b2b6      	uxth	r6, r6
 80242e6:	eba3 030a 	sub.w	r3, r3, sl
 80242ea:	fb08 f606 	mul.w	r6, r8, r6
 80242ee:	b29b      	uxth	r3, r3
 80242f0:	fb09 6303 	mla	r3, r9, r3, r6
 80242f4:	fb0a 3304 	mla	r3, sl, r4, r3
 80242f8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80242fa:	fb0e 3304 	mla	r3, lr, r4, r3
 80242fe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024302:	2b00      	cmp	r3, #0
 8024304:	f000 8123 	beq.w	802454e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024308:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802430a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802430e:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8024312:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024316:	f000 81a3 	beq.w	8024660 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a0>
 802431a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802431e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024322:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024326:	fb0a fe0e 	mul.w	lr, sl, lr
 802432a:	fb09 f000 	mul.w	r0, r9, r0
 802432e:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8024332:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024336:	f100 0b20 	add.w	fp, r0, #32
 802433a:	44ce      	add	lr, r9
 802433c:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024340:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8024344:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024348:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802434c:	ea4e 0909 	orr.w	r9, lr, r9
 8024350:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024354:	8870      	ldrh	r0, [r6, #2]
 8024356:	d019      	beq.n	802438c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 8024358:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802435c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024360:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024364:	fb0a fe0e 	mul.w	lr, sl, lr
 8024368:	fb08 f800 	mul.w	r8, r8, r0
 802436c:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8024370:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024374:	f108 0b20 	add.w	fp, r8, #32
 8024378:	4486      	add	lr, r0
 802437a:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 802437e:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8024382:	0a00      	lsrs	r0, r0, #8
 8024384:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024388:	ea4e 0000 	orr.w	r0, lr, r0
 802438c:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024390:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024394:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024398:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802439c:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80243a0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80243a4:	ea4e 0909 	orr.w	r9, lr, r9
 80243a8:	ea4a 0000 	orr.w	r0, sl, r0
 80243ac:	f1bc 0f00 	cmp.w	ip, #0
 80243b0:	f000 8158 	beq.w	8024664 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 80243b4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80243b8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80243ba:	3a01      	subs	r2, #1
 80243bc:	2cff      	cmp	r4, #255	; 0xff
 80243be:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80243c2:	f102 0202 	add.w	r2, r2, #2
 80243c6:	eb06 0e02 	add.w	lr, r6, r2
 80243ca:	5ab2      	ldrh	r2, [r6, r2]
 80243cc:	d018      	beq.n	8024400 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 80243ce:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 80243d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80243d6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80243da:	fb04 fa02 	mul.w	sl, r4, r2
 80243de:	fb08 f806 	mul.w	r8, r8, r6
 80243e2:	f10a 0620 	add.w	r6, sl, #32
 80243e6:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 80243ea:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80243ee:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 80243f2:	4442      	add	r2, r8
 80243f4:	0a36      	lsrs	r6, r6, #8
 80243f6:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 80243fa:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80243fe:	4332      	orrs	r2, r6
 8024400:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8024402:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8024406:	2cff      	cmp	r4, #255	; 0xff
 8024408:	d01a      	beq.n	8024440 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 802440a:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 802440e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024412:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024416:	fb04 fa06 	mul.w	sl, r4, r6
 802441a:	fb08 f80e 	mul.w	r8, r8, lr
 802441e:	f10a 0e20 	add.w	lr, sl, #32
 8024422:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8024426:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802442a:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802442e:	4446      	add	r6, r8
 8024430:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024434:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8024438:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802443c:	ea46 060e 	orr.w	r6, r6, lr
 8024440:	fb1c fe01 	smulbb	lr, ip, r1
 8024444:	f1cc 0810 	rsb	r8, ip, #16
 8024448:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802444c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024450:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024454:	eba8 0801 	sub.w	r8, r8, r1
 8024458:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 802445c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024460:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8024464:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024468:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 802446c:	ea4a 0202 	orr.w	r2, sl, r2
 8024470:	4341      	muls	r1, r0
 8024472:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8024476:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802447a:	fb09 1108 	mla	r1, r9, r8, r1
 802447e:	ea4b 0606 	orr.w	r6, fp, r6
 8024482:	fb0c 1102 	mla	r1, ip, r2, r1
 8024486:	fb0e 1e06 	mla	lr, lr, r6, r1
 802448a:	ea4f 505e 	mov.w	r0, lr, lsr #21
 802448e:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024492:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024496:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802449a:	ea40 0e0e 	orr.w	lr, r0, lr
 802449e:	fa1f f08e 	uxth.w	r0, lr
 80244a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80244a4:	1206      	asrs	r6, r0, #8
 80244a6:	10c1      	asrs	r1, r0, #3
 80244a8:	4353      	muls	r3, r2
 80244aa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80244ae:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80244b2:	1c5a      	adds	r2, r3, #1
 80244b4:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80244b8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80244bc:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80244c0:	00c2      	lsls	r2, r0, #3
 80244c2:	121b      	asrs	r3, r3, #8
 80244c4:	b2d2      	uxtb	r2, r2
 80244c6:	2bff      	cmp	r3, #255	; 0xff
 80244c8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80244cc:	f000 80de 	beq.w	802468c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 80244d0:	b2d8      	uxtb	r0, r3
 80244d2:	2b00      	cmp	r3, #0
 80244d4:	d03b      	beq.n	802454e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80244d6:	f895 c003 	ldrb.w	ip, [r5, #3]
 80244da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80244dc:	fb00 fe0c 	mul.w	lr, r0, ip
 80244e0:	4460      	add	r0, ip
 80244e2:	fb12 f204 	smulbb	r2, r2, r4
 80244e6:	f10e 0301 	add.w	r3, lr, #1
 80244ea:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80244ee:	121b      	asrs	r3, r3, #8
 80244f0:	ebac 0c03 	sub.w	ip, ip, r3
 80244f4:	1ac0      	subs	r0, r0, r3
 80244f6:	782b      	ldrb	r3, [r5, #0]
 80244f8:	b2c0      	uxtb	r0, r0
 80244fa:	fb0c 2303 	mla	r3, ip, r3, r2
 80244fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024500:	70e8      	strb	r0, [r5, #3]
 8024502:	fb12 f101 	smulbb	r1, r2, r1
 8024506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024508:	fb93 f3f0 	sdiv	r3, r3, r0
 802450c:	fb12 f606 	smulbb	r6, r2, r6
 8024510:	2bff      	cmp	r3, #255	; 0xff
 8024512:	bfd6      	itet	le
 8024514:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024518:	23ff      	movgt	r3, #255	; 0xff
 802451a:	b2db      	uxtble	r3, r3
 802451c:	702b      	strb	r3, [r5, #0]
 802451e:	786b      	ldrb	r3, [r5, #1]
 8024520:	fb0c 1303 	mla	r3, ip, r3, r1
 8024524:	fb93 f3f0 	sdiv	r3, r3, r0
 8024528:	2bff      	cmp	r3, #255	; 0xff
 802452a:	bfd6      	itet	le
 802452c:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024530:	23ff      	movgt	r3, #255	; 0xff
 8024532:	b2db      	uxtble	r3, r3
 8024534:	706b      	strb	r3, [r5, #1]
 8024536:	78ab      	ldrb	r3, [r5, #2]
 8024538:	fb0c 6303 	mla	r3, ip, r3, r6
 802453c:	fb93 f3f0 	sdiv	r3, r3, r0
 8024540:	2bff      	cmp	r3, #255	; 0xff
 8024542:	bfd6      	itet	le
 8024544:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8024548:	23ff      	movgt	r3, #255	; 0xff
 802454a:	b2db      	uxtble	r3, r3
 802454c:	70ab      	strb	r3, [r5, #2]
 802454e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8024550:	3504      	adds	r5, #4
 8024552:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8024554:	4413      	add	r3, r2
 8024556:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8024558:	9321      	str	r3, [sp, #132]	; 0x84
 802455a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802455c:	441a      	add	r2, r3
 802455e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024560:	3b01      	subs	r3, #1
 8024562:	9222      	str	r2, [sp, #136]	; 0x88
 8024564:	9313      	str	r3, [sp, #76]	; 0x4c
 8024566:	e675      	b.n	8024254 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8024568:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802456a:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 802456c:	9c22      	ldr	r4, [sp, #136]	; 0x88
 802456e:	4433      	add	r3, r6
 8024570:	9321      	str	r3, [sp, #132]	; 0x84
 8024572:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024574:	441c      	add	r4, r3
 8024576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024578:	3b01      	subs	r3, #1
 802457a:	9422      	str	r4, [sp, #136]	; 0x88
 802457c:	9309      	str	r3, [sp, #36]	; 0x24
 802457e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8024580:	3304      	adds	r3, #4
 8024582:	930b      	str	r3, [sp, #44]	; 0x2c
 8024584:	e644      	b.n	8024210 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8024586:	d027      	beq.n	80245d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 8024588:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802458a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 802458c:	3b01      	subs	r3, #1
 802458e:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8024590:	fb00 5003 	mla	r0, r0, r3, r5
 8024594:	1400      	asrs	r0, r0, #16
 8024596:	f53f ae58 	bmi.w	802424a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802459a:	3901      	subs	r1, #1
 802459c:	4288      	cmp	r0, r1
 802459e:	f6bf ae54 	bge.w	802424a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80245a2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80245a4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80245a6:	fb01 0303 	mla	r3, r1, r3, r0
 80245aa:	141b      	asrs	r3, r3, #16
 80245ac:	f53f ae4d 	bmi.w	802424a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80245b0:	3a01      	subs	r2, #1
 80245b2:	4293      	cmp	r3, r2
 80245b4:	f6bf ae49 	bge.w	802424a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80245b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245ba:	f64f 071f 	movw	r7, #63519	; 0xf81f
 80245be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80245c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80245c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80245c4:	2b00      	cmp	r3, #0
 80245c6:	f300 8086 	bgt.w	80246d6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80245ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80245cc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80245d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80245d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80245d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80245d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80245da:	2b00      	cmp	r3, #0
 80245dc:	f340 8218 	ble.w	8024a10 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 80245e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80245e4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80245e6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80245ea:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80245ee:	eef0 6a62 	vmov.f32	s13, s5
 80245f2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80245f6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80245fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80245fe:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8024602:	eef0 6a43 	vmov.f32	s13, s6
 8024606:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802460a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802460e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024612:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024616:	ee77 2a62 	vsub.f32	s5, s14, s5
 802461a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802461e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024622:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024626:	ee12 2a90 	vmov	r2, s5
 802462a:	eef0 2a47 	vmov.f32	s5, s14
 802462e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024632:	ee13 2a10 	vmov	r2, s6
 8024636:	9323      	str	r3, [sp, #140]	; 0x8c
 8024638:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802463a:	eeb0 3a67 	vmov.f32	s6, s15
 802463e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024642:	9324      	str	r3, [sp, #144]	; 0x90
 8024644:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8024646:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8024648:	3b01      	subs	r3, #1
 802464a:	9312      	str	r3, [sp, #72]	; 0x48
 802464c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802464e:	bf08      	it	eq
 8024650:	4613      	moveq	r3, r2
 8024652:	9309      	str	r3, [sp, #36]	; 0x24
 8024654:	e5ce      	b.n	80241f4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8024656:	fb08 f606 	mul.w	r6, r8, r6
 802465a:	fb09 6303 	mla	r3, r9, r3, r6
 802465e:	e64e      	b.n	80242fe <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8024660:	4681      	mov	r9, r0
 8024662:	e675      	b.n	8024350 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8024664:	f1c1 0210 	rsb	r2, r1, #16
 8024668:	4341      	muls	r1, r0
 802466a:	fb09 1902 	mla	r9, r9, r2, r1
 802466e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8024672:	ea4f 5059 	mov.w	r0, r9, lsr #21
 8024676:	ea4f 1959 	mov.w	r9, r9, lsr #5
 802467a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802467e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024682:	ea40 0909 	orr.w	r9, r0, r9
 8024686:	fa1f f089 	uxth.w	r0, r9
 802468a:	e70a      	b.n	80244a2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 802468c:	0209      	lsls	r1, r1, #8
 802468e:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 8024692:	4332      	orrs	r2, r6
 8024694:	602a      	str	r2, [r5, #0]
 8024696:	e75a      	b.n	802454e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8024698:	f116 0e01 	adds.w	lr, r6, #1
 802469c:	f53f af57 	bmi.w	802454e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80246a0:	4572      	cmp	r2, lr
 80246a2:	f6ff af54 	blt.w	802454e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80246a6:	f110 0e01 	adds.w	lr, r0, #1
 80246aa:	f53f af50 	bmi.w	802454e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80246ae:	4573      	cmp	r3, lr
 80246b0:	f6ff af4d 	blt.w	802454e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80246b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80246b6:	b21b      	sxth	r3, r3
 80246b8:	b212      	sxth	r2, r2
 80246ba:	9602      	str	r6, [sp, #8]
 80246bc:	9301      	str	r3, [sp, #4]
 80246be:	9200      	str	r2, [sp, #0]
 80246c0:	e9cd 0103 	strd	r0, r1, [sp, #12]
 80246c4:	e9cd c405 	strd	ip, r4, [sp, #20]
 80246c8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80246cc:	4629      	mov	r1, r5
 80246ce:	9815      	ldr	r0, [sp, #84]	; 0x54
 80246d0:	f7ff fbca 	bl	8023e68 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>
 80246d4:	e73b      	b.n	802454e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80246d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80246d8:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80246dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80246de:	f3c3 3603 	ubfx	r6, r3, #12, #4
 80246e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80246e4:	fa1f fe82 	uxth.w	lr, r2
 80246e8:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80246ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80246ee:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80246f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80246f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80246f8:	141b      	asrs	r3, r3, #16
 80246fa:	fb00 3c0c 	mla	ip, r0, ip, r3
 80246fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024700:	eb03 0a0c 	add.w	sl, r3, ip
 8024704:	f813 900c 	ldrb.w	r9, [r3, ip]
 8024708:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802470c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024710:	b29b      	uxth	r3, r3
 8024712:	2e00      	cmp	r6, #0
 8024714:	f000 815c 	beq.w	80249d0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x810>
 8024718:	f81a 4000 	ldrb.w	r4, [sl, r0]
 802471c:	eb0a 0b00 	add.w	fp, sl, r0
 8024720:	fa1f fa86 	uxth.w	sl, r6
 8024724:	9410      	str	r4, [sp, #64]	; 0x40
 8024726:	fb0a fe0e 	mul.w	lr, sl, lr
 802472a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802472e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024732:	eba5 050e 	sub.w	r5, r5, lr
 8024736:	9411      	str	r4, [sp, #68]	; 0x44
 8024738:	fa1f fa8a 	uxth.w	sl, sl
 802473c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802473e:	b2ad      	uxth	r5, r5
 8024740:	eba3 030a 	sub.w	r3, r3, sl
 8024744:	fb08 f505 	mul.w	r5, r8, r5
 8024748:	b29b      	uxth	r3, r3
 802474a:	fb09 5303 	mla	r3, r9, r3, r5
 802474e:	fb0a 3304 	mla	r3, sl, r4, r3
 8024752:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8024754:	fb0e 3304 	mla	r3, lr, r4, r3
 8024758:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802475c:	2b00      	cmp	r3, #0
 802475e:	f000 812a 	beq.w	80249b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8024762:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024764:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024768:	eb04 054c 	add.w	r5, r4, ip, lsl #1
 802476c:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 8024770:	f000 8133 	beq.w	80249da <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81a>
 8024774:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 8024778:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 802477c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8024780:	fb0a fe0e 	mul.w	lr, sl, lr
 8024784:	fb09 fc0c 	mul.w	ip, r9, ip
 8024788:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 802478c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024790:	f10c 0b20 	add.w	fp, ip, #32
 8024794:	44ce      	add	lr, r9
 8024796:	eb0b 291c 	add.w	r9, fp, ip, lsr #8
 802479a:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 802479e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80247a2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80247a6:	ea4e 0909 	orr.w	r9, lr, r9
 80247aa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80247ae:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 80247b2:	d01a      	beq.n	80247ea <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62a>
 80247b4:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 80247b8:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80247bc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80247c0:	fb0a fe0e 	mul.w	lr, sl, lr
 80247c4:	fb08 f80c 	mul.w	r8, r8, ip
 80247c8:	ea07 1c5e 	and.w	ip, r7, lr, lsr #5
 80247cc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80247d0:	f108 0b20 	add.w	fp, r8, #32
 80247d4:	44e6      	add	lr, ip
 80247d6:	eb0b 2c18 	add.w	ip, fp, r8, lsr #8
 80247da:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80247de:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80247e2:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80247e6:	ea4e 0c0c 	orr.w	ip, lr, ip
 80247ea:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80247ee:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80247f2:	ea4f 4a0c 	mov.w	sl, ip, lsl #16
 80247f6:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80247fa:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80247fe:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024802:	ea4e 0909 	orr.w	r9, lr, r9
 8024806:	ea4a 0c0c 	orr.w	ip, sl, ip
 802480a:	2e00      	cmp	r6, #0
 802480c:	f000 80e7 	beq.w	80249de <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81e>
 8024810:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8024814:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8024816:	3801      	subs	r0, #1
 8024818:	2cff      	cmp	r4, #255	; 0xff
 802481a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 802481e:	f100 0002 	add.w	r0, r0, #2
 8024822:	eb05 0e00 	add.w	lr, r5, r0
 8024826:	5a28      	ldrh	r0, [r5, r0]
 8024828:	d018      	beq.n	802485c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802482a:	f420 65fc 	bic.w	r5, r0, #2016	; 0x7e0
 802482e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024832:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024836:	fb04 fa00 	mul.w	sl, r4, r0
 802483a:	fb08 f805 	mul.w	r8, r8, r5
 802483e:	f10a 0520 	add.w	r5, sl, #32
 8024842:	ea07 1058 	and.w	r0, r7, r8, lsr #5
 8024846:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802484a:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802484e:	4440      	add	r0, r8
 8024850:	0a2d      	lsrs	r5, r5, #8
 8024852:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8024856:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802485a:	4328      	orrs	r0, r5
 802485c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 802485e:	f8be 5002 	ldrh.w	r5, [lr, #2]
 8024862:	2cff      	cmp	r4, #255	; 0xff
 8024864:	d01a      	beq.n	802489c <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8024866:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 802486a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802486e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024872:	fb04 fa05 	mul.w	sl, r4, r5
 8024876:	fb08 f80e 	mul.w	r8, r8, lr
 802487a:	f10a 0e20 	add.w	lr, sl, #32
 802487e:	ea07 1558 	and.w	r5, r7, r8, lsr #5
 8024882:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024886:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802488a:	4445      	add	r5, r8
 802488c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024890:	ea07 1555 	and.w	r5, r7, r5, lsr #5
 8024894:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024898:	ea45 050e 	orr.w	r5, r5, lr
 802489c:	fb16 fe02 	smulbb	lr, r6, r2
 80248a0:	f1c6 0810 	rsb	r8, r6, #16
 80248a4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80248a8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80248ac:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80248b0:	eba8 0802 	sub.w	r8, r8, r2
 80248b4:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 80248b8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80248bc:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 80248c0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80248c4:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80248c8:	ea4a 0000 	orr.w	r0, sl, r0
 80248cc:	fb0c f202 	mul.w	r2, ip, r2
 80248d0:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 80248d4:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80248d8:	fb09 2208 	mla	r2, r9, r8, r2
 80248dc:	ea4b 0505 	orr.w	r5, fp, r5
 80248e0:	fb06 2200 	mla	r2, r6, r0, r2
 80248e4:	fb0e 2205 	mla	r2, lr, r5, r2
 80248e8:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 80248ec:	0952      	lsrs	r2, r2, #5
 80248ee:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80248f2:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 80248f6:	ea4c 0c05 	orr.w	ip, ip, r5
 80248fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80248fc:	fa1f fc8c 	uxth.w	ip, ip
 8024900:	4353      	muls	r3, r2
 8024902:	ea4f 262c 	mov.w	r6, ip, asr #8
 8024906:	ea4f 00ec 	mov.w	r0, ip, asr #3
 802490a:	1c5a      	adds	r2, r3, #1
 802490c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8024910:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8024914:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8024918:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 802491c:	121b      	asrs	r3, r3, #8
 802491e:	b2d2      	uxtb	r2, r2
 8024920:	2bff      	cmp	r3, #255	; 0xff
 8024922:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8024926:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802492a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802492e:	d069      	beq.n	8024a04 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x844>
 8024930:	b2dd      	uxtb	r5, r3
 8024932:	2b00      	cmp	r3, #0
 8024934:	d03f      	beq.n	80249b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8024936:	f891 c003 	ldrb.w	ip, [r1, #3]
 802493a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802493c:	fb05 fe0c 	mul.w	lr, r5, ip
 8024940:	4465      	add	r5, ip
 8024942:	f891 8000 	ldrb.w	r8, [r1]
 8024946:	fb12 f204 	smulbb	r2, r2, r4
 802494a:	f10e 0301 	add.w	r3, lr, #1
 802494e:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8024952:	121b      	asrs	r3, r3, #8
 8024954:	1aed      	subs	r5, r5, r3
 8024956:	ebac 0303 	sub.w	r3, ip, r3
 802495a:	f891 c001 	ldrb.w	ip, [r1, #1]
 802495e:	b2ed      	uxtb	r5, r5
 8024960:	fb03 2208 	mla	r2, r3, r8, r2
 8024964:	fb92 f2f5 	sdiv	r2, r2, r5
 8024968:	2aff      	cmp	r2, #255	; 0xff
 802496a:	70cd      	strb	r5, [r1, #3]
 802496c:	bfd6      	itet	le
 802496e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024972:	22ff      	movgt	r2, #255	; 0xff
 8024974:	b2d2      	uxtble	r2, r2
 8024976:	700a      	strb	r2, [r1, #0]
 8024978:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802497a:	fb12 f000 	smulbb	r0, r2, r0
 802497e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024980:	fb03 000c 	mla	r0, r3, ip, r0
 8024984:	fb12 f606 	smulbb	r6, r2, r6
 8024988:	f891 c002 	ldrb.w	ip, [r1, #2]
 802498c:	fb90 f0f5 	sdiv	r0, r0, r5
 8024990:	fb03 630c 	mla	r3, r3, ip, r6
 8024994:	28ff      	cmp	r0, #255	; 0xff
 8024996:	fb93 f3f5 	sdiv	r3, r3, r5
 802499a:	bfd6      	itet	le
 802499c:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80249a0:	20ff      	movgt	r0, #255	; 0xff
 80249a2:	b2c0      	uxtble	r0, r0
 80249a4:	2bff      	cmp	r3, #255	; 0xff
 80249a6:	bfd4      	ite	le
 80249a8:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80249ac:	23ff      	movgt	r3, #255	; 0xff
 80249ae:	7048      	strb	r0, [r1, #1]
 80249b0:	bfd8      	it	le
 80249b2:	b2db      	uxtble	r3, r3
 80249b4:	708b      	strb	r3, [r1, #2]
 80249b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80249b8:	3104      	adds	r1, #4
 80249ba:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80249bc:	4413      	add	r3, r2
 80249be:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80249c0:	9321      	str	r3, [sp, #132]	; 0x84
 80249c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80249c4:	441a      	add	r2, r3
 80249c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80249c8:	3b01      	subs	r3, #1
 80249ca:	9222      	str	r2, [sp, #136]	; 0x88
 80249cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80249ce:	e5f8      	b.n	80245c2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 80249d0:	fb08 f505 	mul.w	r5, r8, r5
 80249d4:	fb09 5303 	mla	r3, r9, r3, r5
 80249d8:	e6be      	b.n	8024758 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 80249da:	46e1      	mov	r9, ip
 80249dc:	e6e5      	b.n	80247aa <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 80249de:	f1c2 0010 	rsb	r0, r2, #16
 80249e2:	fb0c f202 	mul.w	r2, ip, r2
 80249e6:	fb09 2900 	mla	r9, r9, r0, r2
 80249ea:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80249ee:	ea4f 5c59 	mov.w	ip, r9, lsr #21
 80249f2:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80249f6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80249fa:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80249fe:	ea4c 0c09 	orr.w	ip, ip, r9
 8024a02:	e77a      	b.n	80248fa <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8024a04:	0200      	lsls	r0, r0, #8
 8024a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8024a0a:	4302      	orrs	r2, r0
 8024a0c:	600a      	str	r2, [r1, #0]
 8024a0e:	e7d2      	b.n	80249b6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8024a10:	b017      	add	sp, #92	; 0x5c
 8024a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024a16 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>:
 8024a16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024a1a:	b085      	sub	sp, #20
 8024a1c:	e9dd 8010 	ldrd	r8, r0, [sp, #64]	; 0x40
 8024a20:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 8024a24:	2800      	cmp	r0, #0
 8024a26:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8024a2a:	fb00 8504 	mla	r5, r0, r4, r8
 8024a2e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8024a32:	f89d c04c 	ldrb.w	ip, [sp, #76]	; 0x4c
 8024a36:	eb02 0745 	add.w	r7, r2, r5, lsl #1
 8024a3a:	9702      	str	r7, [sp, #8]
 8024a3c:	eb03 0705 	add.w	r7, r3, r5
 8024a40:	9703      	str	r7, [sp, #12]
 8024a42:	f2c0 812e 	blt.w	8024ca2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 8024a46:	4582      	cmp	sl, r0
 8024a48:	f340 812b 	ble.w	8024ca2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 8024a4c:	f1b8 0f00 	cmp.w	r8, #0
 8024a50:	f2c0 8122 	blt.w	8024c98 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 8024a54:	4544      	cmp	r4, r8
 8024a56:	f340 811f 	ble.w	8024c98 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 8024a5a:	f813 e005 	ldrb.w	lr, [r3, r5]
 8024a5e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8024a62:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8024a66:	f423 67fc 	bic.w	r7, r3, #2016	; 0x7e0
 8024a6a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a6e:	4357      	muls	r7, r2
 8024a70:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8024a74:	fb0e f503 	mul.w	r5, lr, r3
 8024a78:	ea02 1357 	and.w	r3, r2, r7, lsr #5
 8024a7c:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8024a80:	441f      	add	r7, r3
 8024a82:	f105 0320 	add.w	r3, r5, #32
 8024a86:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 8024a8a:	ea02 1257 	and.w	r2, r2, r7, lsr #5
 8024a8e:	0a1b      	lsrs	r3, r3, #8
 8024a90:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024a94:	4313      	orrs	r3, r2
 8024a96:	9301      	str	r3, [sp, #4]
 8024a98:	f118 0301 	adds.w	r3, r8, #1
 8024a9c:	f100 8106 	bmi.w	8024cac <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 8024aa0:	429c      	cmp	r4, r3
 8024aa2:	f340 8103 	ble.w	8024cac <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 8024aa6:	2e00      	cmp	r6, #0
 8024aa8:	f000 8103 	beq.w	8024cb2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x29c>
 8024aac:	9b03      	ldr	r3, [sp, #12]
 8024aae:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024ab2:	785a      	ldrb	r2, [r3, #1]
 8024ab4:	9b02      	ldr	r3, [sp, #8]
 8024ab6:	10d7      	asrs	r7, r2, #3
 8024ab8:	885b      	ldrh	r3, [r3, #2]
 8024aba:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8024abe:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ac2:	436f      	muls	r7, r5
 8024ac4:	4353      	muls	r3, r2
 8024ac6:	ea0b 1957 	and.w	r9, fp, r7, lsr #5
 8024aca:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8024ace:	444f      	add	r7, r9
 8024ad0:	ea0b 1557 	and.w	r5, fp, r7, lsr #5
 8024ad4:	f103 0b20 	add.w	fp, r3, #32
 8024ad8:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8024adc:	0a1b      	lsrs	r3, r3, #8
 8024ade:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ae2:	431d      	orrs	r5, r3
 8024ae4:	3001      	adds	r0, #1
 8024ae6:	f100 80ea 	bmi.w	8024cbe <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 8024aea:	4582      	cmp	sl, r0
 8024aec:	f340 80e7 	ble.w	8024cbe <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 8024af0:	f1bc 0f00 	cmp.w	ip, #0
 8024af4:	f000 80e8 	beq.w	8024cc8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2b2>
 8024af8:	f1b8 0f00 	cmp.w	r8, #0
 8024afc:	f2c0 80dc 	blt.w	8024cb8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 8024b00:	4544      	cmp	r4, r8
 8024b02:	f340 80d9 	ble.w	8024cb8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 8024b06:	9b03      	ldr	r3, [sp, #12]
 8024b08:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8024b0c:	5d1f      	ldrb	r7, [r3, r4]
 8024b0e:	9b02      	ldr	r3, [sp, #8]
 8024b10:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024b14:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8024b18:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8024b1c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024b20:	fb09 f900 	mul.w	r9, r9, r0
 8024b24:	437b      	muls	r3, r7
 8024b26:	ea0b 1a59 	and.w	sl, fp, r9, lsr #5
 8024b2a:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8024b2e:	44d1      	add	r9, sl
 8024b30:	ea0b 1059 	and.w	r0, fp, r9, lsr #5
 8024b34:	f103 0b20 	add.w	fp, r3, #32
 8024b38:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8024b3c:	0a1b      	lsrs	r3, r3, #8
 8024b3e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024b42:	4318      	orrs	r0, r3
 8024b44:	f118 0801 	adds.w	r8, r8, #1
 8024b48:	f100 80c3 	bmi.w	8024cd2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 8024b4c:	4544      	cmp	r4, r8
 8024b4e:	f340 80c0 	ble.w	8024cd2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 8024b52:	2e00      	cmp	r6, #0
 8024b54:	f000 80c0 	beq.w	8024cd8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c2>
 8024b58:	f104 0801 	add.w	r8, r4, #1
 8024b5c:	9b03      	ldr	r3, [sp, #12]
 8024b5e:	9c02      	ldr	r4, [sp, #8]
 8024b60:	f813 3008 	ldrb.w	r3, [r3, r8]
 8024b64:	f834 4018 	ldrh.w	r4, [r4, r8, lsl #1]
 8024b68:	ea4f 0ae3 	mov.w	sl, r3, asr #3
 8024b6c:	f424 68fc 	bic.w	r8, r4, #2016	; 0x7e0
 8024b70:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024b74:	fb0a fa08 	mul.w	sl, sl, r8
 8024b78:	fb03 f904 	mul.w	r9, r3, r4
 8024b7c:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8024b80:	ea04 1b5a 	and.w	fp, r4, sl, lsr #5
 8024b84:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8024b88:	44da      	add	sl, fp
 8024b8a:	ea04 185a 	and.w	r8, r4, sl, lsr #5
 8024b8e:	f109 0420 	add.w	r4, r9, #32
 8024b92:	eb04 2419 	add.w	r4, r4, r9, lsr #8
 8024b96:	0a24      	lsrs	r4, r4, #8
 8024b98:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8024b9c:	ea48 0404 	orr.w	r4, r8, r4
 8024ba0:	fa1f f886 	uxth.w	r8, r6
 8024ba4:	fa1f fa8c 	uxth.w	sl, ip
 8024ba8:	fb08 fb0a 	mul.w	fp, r8, sl
 8024bac:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8024bb0:	ebcb 1a0a 	rsb	sl, fp, sl, lsl #4
 8024bb4:	f5c8 7980 	rsb	r9, r8, #256	; 0x100
 8024bb8:	eba8 080b 	sub.w	r8, r8, fp
 8024bbc:	fa1f fa8a 	uxth.w	sl, sl
 8024bc0:	fa1f f888 	uxth.w	r8, r8
 8024bc4:	eba9 090a 	sub.w	r9, r9, sl
 8024bc8:	fb02 f808 	mul.w	r8, r2, r8
 8024bcc:	9a01      	ldr	r2, [sp, #4]
 8024bce:	fa1f f989 	uxth.w	r9, r9
 8024bd2:	0412      	lsls	r2, r2, #16
 8024bd4:	fb0e 8809 	mla	r8, lr, r9, r8
 8024bd8:	f002 6efc 	and.w	lr, r2, #132120576	; 0x7e00000
 8024bdc:	9a01      	ldr	r2, [sp, #4]
 8024bde:	fb0a 8707 	mla	r7, sl, r7, r8
 8024be2:	ea4f 4805 	mov.w	r8, r5, lsl #16
 8024be6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024bea:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024bee:	fb0b 7303 	mla	r3, fp, r3, r7
 8024bf2:	fb16 f70c 	smulbb	r7, r6, ip
 8024bf6:	ea4e 0202 	orr.w	r2, lr, r2
 8024bfa:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8024bfe:	f3c7 07c7 	ubfx	r7, r7, #3, #8
 8024c02:	f1cc 0e10 	rsb	lr, ip, #16
 8024c06:	ea48 0505 	orr.w	r5, r8, r5
 8024c0a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024c0e:	ebae 0e06 	sub.w	lr, lr, r6
 8024c12:	ebc7 0646 	rsb	r6, r7, r6, lsl #1
 8024c16:	ebc7 0c4c 	rsb	ip, r7, ip, lsl #1
 8024c1a:	2bff      	cmp	r3, #255	; 0xff
 8024c1c:	fb06 f605 	mul.w	r6, r6, r5
 8024c20:	eb07 0e4e 	add.w	lr, r7, lr, lsl #1
 8024c24:	fb0e 6202 	mla	r2, lr, r2, r6
 8024c28:	ea4f 4604 	mov.w	r6, r4, lsl #16
 8024c2c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8024c30:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 8024c34:	ea44 0406 	orr.w	r4, r4, r6
 8024c38:	fb07 2604 	mla	r6, r7, r4, r2
 8024c3c:	ea4f 4200 	mov.w	r2, r0, lsl #16
 8024c40:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024c44:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8024c48:	ea40 0002 	orr.w	r0, r0, r2
 8024c4c:	fb0c 6c00 	mla	ip, ip, r0, r6
 8024c50:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8024c54:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8024c58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024c5c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8024c60:	ea42 020c 	orr.w	r2, r2, ip
 8024c64:	b292      	uxth	r2, r2
 8024c66:	ea4f 2022 	mov.w	r0, r2, asr #8
 8024c6a:	ea4f 05e2 	mov.w	r5, r2, asr #3
 8024c6e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8024c72:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8024c76:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8024c7a:	b2d2      	uxtb	r2, r2
 8024c7c:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8024c80:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8024c84:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8024c88:	d129      	bne.n	8024cde <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c8>
 8024c8a:	700a      	strb	r2, [r1, #0]
 8024c8c:	704d      	strb	r5, [r1, #1]
 8024c8e:	7088      	strb	r0, [r1, #2]
 8024c90:	70cb      	strb	r3, [r1, #3]
 8024c92:	b005      	add	sp, #20
 8024c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c98:	f04f 0e00 	mov.w	lr, #0
 8024c9c:	f8cd e004 	str.w	lr, [sp, #4]
 8024ca0:	e6fa      	b.n	8024a98 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x82>
 8024ca2:	2200      	movs	r2, #0
 8024ca4:	4696      	mov	lr, r2
 8024ca6:	4615      	mov	r5, r2
 8024ca8:	9201      	str	r2, [sp, #4]
 8024caa:	e71b      	b.n	8024ae4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8024cac:	2200      	movs	r2, #0
 8024cae:	4615      	mov	r5, r2
 8024cb0:	e718      	b.n	8024ae4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8024cb2:	4632      	mov	r2, r6
 8024cb4:	4635      	mov	r5, r6
 8024cb6:	e715      	b.n	8024ae4 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8024cb8:	2700      	movs	r7, #0
 8024cba:	4638      	mov	r0, r7
 8024cbc:	e742      	b.n	8024b44 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x12e>
 8024cbe:	2300      	movs	r3, #0
 8024cc0:	461f      	mov	r7, r3
 8024cc2:	461c      	mov	r4, r3
 8024cc4:	4618      	mov	r0, r3
 8024cc6:	e76b      	b.n	8024ba0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8024cc8:	4663      	mov	r3, ip
 8024cca:	4667      	mov	r7, ip
 8024ccc:	4664      	mov	r4, ip
 8024cce:	4660      	mov	r0, ip
 8024cd0:	e766      	b.n	8024ba0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8024cd2:	2300      	movs	r3, #0
 8024cd4:	461c      	mov	r4, r3
 8024cd6:	e763      	b.n	8024ba0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8024cd8:	4633      	mov	r3, r6
 8024cda:	4634      	mov	r4, r6
 8024cdc:	e760      	b.n	8024ba0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8024cde:	2b00      	cmp	r3, #0
 8024ce0:	d0d7      	beq.n	8024c92 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27c>
 8024ce2:	78cf      	ldrb	r7, [r1, #3]
 8024ce4:	fb03 f607 	mul.w	r6, r3, r7
 8024ce8:	443b      	add	r3, r7
 8024cea:	1c74      	adds	r4, r6, #1
 8024cec:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8024cf0:	780e      	ldrb	r6, [r1, #0]
 8024cf2:	1224      	asrs	r4, r4, #8
 8024cf4:	1b3f      	subs	r7, r7, r4
 8024cf6:	1b1b      	subs	r3, r3, r4
 8024cf8:	24ff      	movs	r4, #255	; 0xff
 8024cfa:	437e      	muls	r6, r7
 8024cfc:	b2db      	uxtb	r3, r3
 8024cfe:	fb14 6202 	smlabb	r2, r4, r2, r6
 8024d02:	fb92 f6f3 	sdiv	r6, r2, r3
 8024d06:	42a6      	cmp	r6, r4
 8024d08:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8024d0c:	bfc8      	it	gt
 8024d0e:	4626      	movgt	r6, r4
 8024d10:	784c      	ldrb	r4, [r1, #1]
 8024d12:	bfd8      	it	le
 8024d14:	ea26 76e6 	bicle.w	r6, r6, r6, asr #31
 8024d18:	fb07 f404 	mul.w	r4, r7, r4
 8024d1c:	bfd8      	it	le
 8024d1e:	b2f6      	uxtble	r6, r6
 8024d20:	fb12 4505 	smlabb	r5, r2, r5, r4
 8024d24:	700e      	strb	r6, [r1, #0]
 8024d26:	fb95 f4f3 	sdiv	r4, r5, r3
 8024d2a:	4294      	cmp	r4, r2
 8024d2c:	bfd4      	ite	le
 8024d2e:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8024d32:	4614      	movgt	r4, r2
 8024d34:	788a      	ldrb	r2, [r1, #2]
 8024d36:	bfd8      	it	le
 8024d38:	b2e4      	uxtble	r4, r4
 8024d3a:	437a      	muls	r2, r7
 8024d3c:	704c      	strb	r4, [r1, #1]
 8024d3e:	24ff      	movs	r4, #255	; 0xff
 8024d40:	fb14 2000 	smlabb	r0, r4, r0, r2
 8024d44:	fb90 f2f3 	sdiv	r2, r0, r3
 8024d48:	42a2      	cmp	r2, r4
 8024d4a:	bfd6      	itet	le
 8024d4c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024d50:	4622      	movgt	r2, r4
 8024d52:	b2d2      	uxtble	r2, r2
 8024d54:	708a      	strb	r2, [r1, #2]
 8024d56:	e79b      	b.n	8024c90 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27a>

08024d58 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8024d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024d5c:	b093      	sub	sp, #76	; 0x4c
 8024d5e:	9210      	str	r2, [sp, #64]	; 0x40
 8024d60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8024d62:	9011      	str	r0, [sp, #68]	; 0x44
 8024d64:	910e      	str	r1, [sp, #56]	; 0x38
 8024d66:	6850      	ldr	r0, [r2, #4]
 8024d68:	9306      	str	r3, [sp, #24]
 8024d6a:	6812      	ldr	r2, [r2, #0]
 8024d6c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8024d70:	fb00 1303 	mla	r3, r0, r3, r1
 8024d74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8024d78:	9307      	str	r3, [sp, #28]
 8024d7a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024d7c:	681b      	ldr	r3, [r3, #0]
 8024d7e:	9308      	str	r3, [sp, #32]
 8024d80:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024d82:	685b      	ldr	r3, [r3, #4]
 8024d84:	9309      	str	r3, [sp, #36]	; 0x24
 8024d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8024d88:	2b00      	cmp	r3, #0
 8024d8a:	dc03      	bgt.n	8024d94 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8024d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8024d8e:	2b00      	cmp	r3, #0
 8024d90:	f340 83f9 	ble.w	8025586 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8024d94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024d96:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8024d9a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024d9e:	1e48      	subs	r0, r1, #1
 8024da0:	1e55      	subs	r5, r2, #1
 8024da2:	9b06      	ldr	r3, [sp, #24]
 8024da4:	2b00      	cmp	r3, #0
 8024da6:	f340 81b4 	ble.w	8025112 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8024daa:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8024dac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024dae:	1436      	asrs	r6, r6, #16
 8024db0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8024db4:	d406      	bmi.n	8024dc4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024db6:	4286      	cmp	r6, r0
 8024db8:	da04      	bge.n	8024dc4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024dba:	2b00      	cmp	r3, #0
 8024dbc:	db02      	blt.n	8024dc4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8024dbe:	42ab      	cmp	r3, r5
 8024dc0:	f2c0 81a8 	blt.w	8025114 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8024dc4:	3601      	adds	r6, #1
 8024dc6:	f100 8195 	bmi.w	80250f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8024dca:	42b1      	cmp	r1, r6
 8024dcc:	f2c0 8192 	blt.w	80250f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8024dd0:	3301      	adds	r3, #1
 8024dd2:	f100 818f 	bmi.w	80250f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8024dd6:	429a      	cmp	r2, r3
 8024dd8:	f2c0 818c 	blt.w	80250f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8024ddc:	9b06      	ldr	r3, [sp, #24]
 8024dde:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8024de2:	9d07      	ldr	r5, [sp, #28]
 8024de4:	930f      	str	r3, [sp, #60]	; 0x3c
 8024de6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024de8:	2b00      	cmp	r3, #0
 8024dea:	f340 81b5 	ble.w	8025158 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8024dee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024df0:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8024df2:	1418      	asrs	r0, r3, #16
 8024df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024df6:	1436      	asrs	r6, r6, #16
 8024df8:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8024dfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8024dfe:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8024e02:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8024e04:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8024e08:	f100 820e 	bmi.w	8025228 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8024e0c:	f102 3eff 	add.w	lr, r2, #4294967295
 8024e10:	4576      	cmp	r6, lr
 8024e12:	f280 8209 	bge.w	8025228 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8024e16:	2800      	cmp	r0, #0
 8024e18:	f2c0 8206 	blt.w	8025228 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8024e1c:	f103 3eff 	add.w	lr, r3, #4294967295
 8024e20:	4570      	cmp	r0, lr
 8024e22:	f280 8201 	bge.w	8025228 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8024e26:	b212      	sxth	r2, r2
 8024e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024e2a:	fa1f fe81 	uxth.w	lr, r1
 8024e2e:	fb00 6002 	mla	r0, r0, r2, r6
 8024e32:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8024e36:	eb03 0a00 	add.w	sl, r3, r0
 8024e3a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8024e3e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8024e42:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8024e46:	b29b      	uxth	r3, r3
 8024e48:	f1bc 0f00 	cmp.w	ip, #0
 8024e4c:	f000 81ca 	beq.w	80251e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8024e50:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8024e54:	eb0a 0b02 	add.w	fp, sl, r2
 8024e58:	fa1f fa8c 	uxth.w	sl, ip
 8024e5c:	940a      	str	r4, [sp, #40]	; 0x28
 8024e5e:	fb0a fe0e 	mul.w	lr, sl, lr
 8024e62:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8024e66:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8024e6a:	eba6 060e 	sub.w	r6, r6, lr
 8024e6e:	940b      	str	r4, [sp, #44]	; 0x2c
 8024e70:	fa1f fa8a 	uxth.w	sl, sl
 8024e74:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024e76:	b2b6      	uxth	r6, r6
 8024e78:	eba3 030a 	sub.w	r3, r3, sl
 8024e7c:	fb08 f606 	mul.w	r6, r8, r6
 8024e80:	b29b      	uxth	r3, r3
 8024e82:	fb09 6303 	mla	r3, r9, r3, r6
 8024e86:	fb0a 3304 	mla	r3, sl, r4, r3
 8024e8a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024e8c:	fb0e 3304 	mla	r3, lr, r4, r3
 8024e90:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8024e94:	2b00      	cmp	r3, #0
 8024e96:	f000 8120 	beq.w	80250da <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8024e9a:	9c08      	ldr	r4, [sp, #32]
 8024e9c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8024ea0:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8024ea4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8024ea8:	f000 81a1 	beq.w	80251ee <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8024eac:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024eb0:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8024eb4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024eb8:	fb0a fe0e 	mul.w	lr, sl, lr
 8024ebc:	fb09 f000 	mul.w	r0, r9, r0
 8024ec0:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8024ec4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024ec8:	f100 0b20 	add.w	fp, r0, #32
 8024ecc:	44ce      	add	lr, r9
 8024ece:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8024ed2:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8024ed6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8024eda:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8024ede:	ea4e 0909 	orr.w	r9, lr, r9
 8024ee2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024ee6:	8870      	ldrh	r0, [r6, #2]
 8024ee8:	d019      	beq.n	8024f1e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8024eea:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8024eee:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8024ef2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024ef6:	fb0a fe0e 	mul.w	lr, sl, lr
 8024efa:	fb08 f800 	mul.w	r8, r8, r0
 8024efe:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8024f02:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8024f06:	f108 0b20 	add.w	fp, r8, #32
 8024f0a:	4486      	add	lr, r0
 8024f0c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8024f10:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8024f14:	0a00      	lsrs	r0, r0, #8
 8024f16:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024f1a:	ea4e 0000 	orr.w	r0, lr, r0
 8024f1e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8024f22:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8024f26:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8024f2a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024f2e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8024f32:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024f36:	ea4e 0909 	orr.w	r9, lr, r9
 8024f3a:	ea4a 0000 	orr.w	r0, sl, r0
 8024f3e:	f1bc 0f00 	cmp.w	ip, #0
 8024f42:	f000 8156 	beq.w	80251f2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8024f46:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8024f4a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024f4c:	3a01      	subs	r2, #1
 8024f4e:	2cff      	cmp	r4, #255	; 0xff
 8024f50:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8024f54:	f102 0202 	add.w	r2, r2, #2
 8024f58:	eb06 0e02 	add.w	lr, r6, r2
 8024f5c:	5ab2      	ldrh	r2, [r6, r2]
 8024f5e:	d018      	beq.n	8024f92 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8024f60:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8024f64:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8024f68:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024f6c:	fb04 fa02 	mul.w	sl, r4, r2
 8024f70:	fb08 f806 	mul.w	r8, r8, r6
 8024f74:	f10a 0620 	add.w	r6, sl, #32
 8024f78:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8024f7c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024f80:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8024f84:	4442      	add	r2, r8
 8024f86:	0a36      	lsrs	r6, r6, #8
 8024f88:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8024f8c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024f90:	4332      	orrs	r2, r6
 8024f92:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024f94:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8024f98:	2cff      	cmp	r4, #255	; 0xff
 8024f9a:	d01a      	beq.n	8024fd2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8024f9c:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 8024fa0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8024fa4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8024fa8:	fb04 fa06 	mul.w	sl, r4, r6
 8024fac:	fb08 f80e 	mul.w	r8, r8, lr
 8024fb0:	f10a 0e20 	add.w	lr, sl, #32
 8024fb4:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8024fb8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8024fbc:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8024fc0:	4446      	add	r6, r8
 8024fc2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024fc6:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8024fca:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8024fce:	ea46 060e 	orr.w	r6, r6, lr
 8024fd2:	fb1c fe01 	smulbb	lr, ip, r1
 8024fd6:	f1cc 0810 	rsb	r8, ip, #16
 8024fda:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8024fde:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8024fe2:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8024fe6:	eba8 0801 	sub.w	r8, r8, r1
 8024fea:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8024fee:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8024ff2:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8024ff6:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024ffa:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8024ffe:	ea4a 0202 	orr.w	r2, sl, r2
 8025002:	4341      	muls	r1, r0
 8025004:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025008:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802500c:	fb09 1108 	mla	r1, r9, r8, r1
 8025010:	ea4b 0606 	orr.w	r6, fp, r6
 8025014:	fb0c 1102 	mla	r1, ip, r2, r1
 8025018:	fb0e 1e06 	mla	lr, lr, r6, r1
 802501c:	ea4f 515e 	mov.w	r1, lr, lsr #21
 8025020:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025024:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025028:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 802502c:	ea41 0e0e 	orr.w	lr, r1, lr
 8025030:	fa1f f18e 	uxth.w	r1, lr
 8025034:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8025038:	2bff      	cmp	r3, #255	; 0xff
 802503a:	ea4f 00e1 	mov.w	r0, r1, asr #3
 802503e:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8025042:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025046:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802504a:	b2d2      	uxtb	r2, r2
 802504c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025050:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025054:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025058:	f000 80df 	beq.w	802521a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 802505c:	f895 8003 	ldrb.w	r8, [r5, #3]
 8025060:	24ff      	movs	r4, #255	; 0xff
 8025062:	fb03 f608 	mul.w	r6, r3, r8
 8025066:	4443      	add	r3, r8
 8025068:	1c71      	adds	r1, r6, #1
 802506a:	eb01 2126 	add.w	r1, r1, r6, asr #8
 802506e:	782e      	ldrb	r6, [r5, #0]
 8025070:	1209      	asrs	r1, r1, #8
 8025072:	1a5b      	subs	r3, r3, r1
 8025074:	eba8 0101 	sub.w	r1, r8, r1
 8025078:	f895 8002 	ldrb.w	r8, [r5, #2]
 802507c:	434e      	muls	r6, r1
 802507e:	b2db      	uxtb	r3, r3
 8025080:	fb14 6202 	smlabb	r2, r4, r2, r6
 8025084:	24ff      	movs	r4, #255	; 0xff
 8025086:	70eb      	strb	r3, [r5, #3]
 8025088:	fb92 f2f3 	sdiv	r2, r2, r3
 802508c:	2aff      	cmp	r2, #255	; 0xff
 802508e:	bfd6      	itet	le
 8025090:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025094:	22ff      	movgt	r2, #255	; 0xff
 8025096:	b2d2      	uxtble	r2, r2
 8025098:	702a      	strb	r2, [r5, #0]
 802509a:	786a      	ldrb	r2, [r5, #1]
 802509c:	434a      	muls	r2, r1
 802509e:	fb01 f108 	mul.w	r1, r1, r8
 80250a2:	fb14 2000 	smlabb	r0, r4, r0, r2
 80250a6:	22ff      	movs	r2, #255	; 0xff
 80250a8:	fb90 f0f3 	sdiv	r0, r0, r3
 80250ac:	fb12 1c0c 	smlabb	ip, r2, ip, r1
 80250b0:	28ff      	cmp	r0, #255	; 0xff
 80250b2:	fb9c fcf3 	sdiv	ip, ip, r3
 80250b6:	bfd6      	itet	le
 80250b8:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80250bc:	20ff      	movgt	r0, #255	; 0xff
 80250be:	b2c0      	uxtble	r0, r0
 80250c0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80250c4:	bfd4      	ite	le
 80250c6:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 80250ca:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 80250ce:	7068      	strb	r0, [r5, #1]
 80250d0:	bfd8      	it	le
 80250d2:	fa5f fc8c 	uxtble.w	ip, ip
 80250d6:	f885 c002 	strb.w	ip, [r5, #2]
 80250da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80250dc:	3504      	adds	r5, #4
 80250de:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80250e0:	4413      	add	r3, r2
 80250e2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80250e4:	931d      	str	r3, [sp, #116]	; 0x74
 80250e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80250e8:	441a      	add	r2, r3
 80250ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80250ec:	3b01      	subs	r3, #1
 80250ee:	921e      	str	r2, [sp, #120]	; 0x78
 80250f0:	930f      	str	r3, [sp, #60]	; 0x3c
 80250f2:	e678      	b.n	8024de6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80250f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80250f6:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 80250f8:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80250fa:	4433      	add	r3, r6
 80250fc:	931d      	str	r3, [sp, #116]	; 0x74
 80250fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025100:	441c      	add	r4, r3
 8025102:	9b06      	ldr	r3, [sp, #24]
 8025104:	3b01      	subs	r3, #1
 8025106:	941e      	str	r4, [sp, #120]	; 0x78
 8025108:	9306      	str	r3, [sp, #24]
 802510a:	9b07      	ldr	r3, [sp, #28]
 802510c:	3304      	adds	r3, #4
 802510e:	9307      	str	r3, [sp, #28]
 8025110:	e647      	b.n	8024da2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8025112:	d028      	beq.n	8025166 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8025114:	9b06      	ldr	r3, [sp, #24]
 8025116:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8025118:	3b01      	subs	r3, #1
 802511a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802511c:	fb00 5003 	mla	r0, r0, r3, r5
 8025120:	1400      	asrs	r0, r0, #16
 8025122:	f53f ae5b 	bmi.w	8024ddc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025126:	3901      	subs	r1, #1
 8025128:	4288      	cmp	r0, r1
 802512a:	f6bf ae57 	bge.w	8024ddc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802512e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8025130:	981e      	ldr	r0, [sp, #120]	; 0x78
 8025132:	fb01 0303 	mla	r3, r1, r3, r0
 8025136:	141b      	asrs	r3, r3, #16
 8025138:	f53f ae50 	bmi.w	8024ddc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802513c:	3a01      	subs	r2, #1
 802513e:	4293      	cmp	r3, r2
 8025140:	f6bf ae4c 	bge.w	8024ddc <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025144:	9b07      	ldr	r3, [sp, #28]
 8025146:	f64f 071f 	movw	r7, #63519	; 0xf81f
 802514a:	1d19      	adds	r1, r3, #4
 802514c:	9b06      	ldr	r3, [sp, #24]
 802514e:	930f      	str	r3, [sp, #60]	; 0x3c
 8025150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025152:	2b00      	cmp	r3, #0
 8025154:	f300 8085 	bgt.w	8025262 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 8025158:	9b06      	ldr	r3, [sp, #24]
 802515a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 802515e:	9b07      	ldr	r3, [sp, #28]
 8025160:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025164:	9307      	str	r3, [sp, #28]
 8025166:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025168:	2b00      	cmp	r3, #0
 802516a:	f340 820c 	ble.w	8025586 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 802516e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025172:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025174:	ee30 0a04 	vadd.f32	s0, s0, s8
 8025178:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802517c:	eef0 6a62 	vmov.f32	s13, s5
 8025180:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025184:	ee31 1a05 	vadd.f32	s2, s2, s10
 8025188:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802518c:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 8025190:	eef0 6a43 	vmov.f32	s13, s6
 8025194:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8025198:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 802519c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80251a0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80251a4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80251a8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80251ac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80251b0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80251b4:	ee12 2a90 	vmov	r2, s5
 80251b8:	eef0 2a47 	vmov.f32	s5, s14
 80251bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80251c0:	ee13 2a10 	vmov	r2, s6
 80251c4:	931f      	str	r3, [sp, #124]	; 0x7c
 80251c6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80251c8:	eeb0 3a67 	vmov.f32	s6, s15
 80251cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80251d0:	9320      	str	r3, [sp, #128]	; 0x80
 80251d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80251d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80251d6:	3b01      	subs	r3, #1
 80251d8:	930e      	str	r3, [sp, #56]	; 0x38
 80251da:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80251dc:	bf08      	it	eq
 80251de:	4613      	moveq	r3, r2
 80251e0:	9306      	str	r3, [sp, #24]
 80251e2:	e5d0      	b.n	8024d86 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 80251e4:	fb08 f606 	mul.w	r6, r8, r6
 80251e8:	fb09 6303 	mla	r3, r9, r3, r6
 80251ec:	e650      	b.n	8024e90 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 80251ee:	4681      	mov	r9, r0
 80251f0:	e677      	b.n	8024ee2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 80251f2:	f1c1 0210 	rsb	r2, r1, #16
 80251f6:	4341      	muls	r1, r0
 80251f8:	fb09 1902 	mla	r9, r9, r2, r1
 80251fc:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025200:	ea4f 5159 	mov.w	r1, r9, lsr #21
 8025204:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025208:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802520c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025210:	ea41 0909 	orr.w	r9, r1, r9
 8025214:	fa1f f189 	uxth.w	r1, r9
 8025218:	e70c      	b.n	8025034 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 802521a:	0200      	lsls	r0, r0, #8
 802521c:	ea40 4c0c 	orr.w	ip, r0, ip, lsl #16
 8025220:	ea4c 0202 	orr.w	r2, ip, r2
 8025224:	602a      	str	r2, [r5, #0]
 8025226:	e758      	b.n	80250da <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025228:	f116 0e01 	adds.w	lr, r6, #1
 802522c:	f53f af55 	bmi.w	80250da <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025230:	4572      	cmp	r2, lr
 8025232:	f6ff af52 	blt.w	80250da <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025236:	f110 0e01 	adds.w	lr, r0, #1
 802523a:	f53f af4e 	bmi.w	80250da <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802523e:	4573      	cmp	r3, lr
 8025240:	f6ff af4b 	blt.w	80250da <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025244:	b21b      	sxth	r3, r3
 8025246:	b212      	sxth	r2, r2
 8025248:	9301      	str	r3, [sp, #4]
 802524a:	9200      	str	r2, [sp, #0]
 802524c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 8025250:	e9cd 6002 	strd	r6, r0, [sp, #8]
 8025254:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8025258:	4629      	mov	r1, r5
 802525a:	9811      	ldr	r0, [sp, #68]	; 0x44
 802525c:	f7ff fbdb 	bl	8024a16 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>
 8025260:	e73b      	b.n	80250da <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025262:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025264:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8025268:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802526a:	f3c3 3603 	ubfx	r6, r3, #12, #4
 802526e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025270:	fa1f fe82 	uxth.w	lr, r2
 8025274:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8025278:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802527a:	ea4f 150e 	mov.w	r5, lr, lsl #4
 802527e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8025282:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025284:	141b      	asrs	r3, r3, #16
 8025286:	fb00 3c0c 	mla	ip, r0, ip, r3
 802528a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802528c:	eb03 0a0c 	add.w	sl, r3, ip
 8025290:	f813 900c 	ldrb.w	r9, [r3, ip]
 8025294:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 8025298:	f89a 8001 	ldrb.w	r8, [sl, #1]
 802529c:	b29b      	uxth	r3, r3
 802529e:	2e00      	cmp	r6, #0
 80252a0:	f000 8152 	beq.w	8025548 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f0>
 80252a4:	f81a 4000 	ldrb.w	r4, [sl, r0]
 80252a8:	eb0a 0b00 	add.w	fp, sl, r0
 80252ac:	fa1f fa86 	uxth.w	sl, r6
 80252b0:	940c      	str	r4, [sp, #48]	; 0x30
 80252b2:	fb0a fe0e 	mul.w	lr, sl, lr
 80252b6:	f89b 4001 	ldrb.w	r4, [fp, #1]
 80252ba:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 80252be:	eba5 050e 	sub.w	r5, r5, lr
 80252c2:	940d      	str	r4, [sp, #52]	; 0x34
 80252c4:	fa1f fa8a 	uxth.w	sl, sl
 80252c8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80252ca:	b2ad      	uxth	r5, r5
 80252cc:	eba3 030a 	sub.w	r3, r3, sl
 80252d0:	fb08 f505 	mul.w	r5, r8, r5
 80252d4:	b29b      	uxth	r3, r3
 80252d6:	fb09 5303 	mla	r3, r9, r3, r5
 80252da:	fb0a 3304 	mla	r3, sl, r4, r3
 80252de:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80252e0:	fb0e 3304 	mla	r3, lr, r4, r3
 80252e4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80252e8:	2b00      	cmp	r3, #0
 80252ea:	f000 8120 	beq.w	802552e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 80252ee:	9c08      	ldr	r4, [sp, #32]
 80252f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80252f4:	eb04 0e4c 	add.w	lr, r4, ip, lsl #1
 80252f8:	f834 501c 	ldrh.w	r5, [r4, ip, lsl #1]
 80252fc:	f000 8129 	beq.w	8025552 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fa>
 8025300:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 8025304:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025308:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802530c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025310:	fb09 f505 	mul.w	r5, r9, r5
 8025314:	ea07 195c 	and.w	r9, r7, ip, lsr #5
 8025318:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802531c:	f105 0b20 	add.w	fp, r5, #32
 8025320:	44cc      	add	ip, r9
 8025322:	eb0b 2915 	add.w	r9, fp, r5, lsr #8
 8025326:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 802532a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802532e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025332:	ea4c 0909 	orr.w	r9, ip, r9
 8025336:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802533a:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802533e:	d019      	beq.n	8025374 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8025340:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 8025344:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025348:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802534c:	fb0a fc0c 	mul.w	ip, sl, ip
 8025350:	fb08 f805 	mul.w	r8, r8, r5
 8025354:	ea07 155c 	and.w	r5, r7, ip, lsr #5
 8025358:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802535c:	f108 0b20 	add.w	fp, r8, #32
 8025360:	44ac      	add	ip, r5
 8025362:	eb0b 2518 	add.w	r5, fp, r8, lsr #8
 8025366:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 802536a:	0a2d      	lsrs	r5, r5, #8
 802536c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8025370:	ea4c 0505 	orr.w	r5, ip, r5
 8025374:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 8025378:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802537c:	ea4f 4a05 	mov.w	sl, r5, lsl #16
 8025380:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025384:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8025388:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802538c:	ea4c 0909 	orr.w	r9, ip, r9
 8025390:	ea4a 0505 	orr.w	r5, sl, r5
 8025394:	2e00      	cmp	r6, #0
 8025396:	f000 80de 	beq.w	8025556 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fe>
 802539a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 802539e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80253a0:	3801      	subs	r0, #1
 80253a2:	2cff      	cmp	r4, #255	; 0xff
 80253a4:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80253a8:	f100 0002 	add.w	r0, r0, #2
 80253ac:	eb0e 0800 	add.w	r8, lr, r0
 80253b0:	f83e 0000 	ldrh.w	r0, [lr, r0]
 80253b4:	d01a      	beq.n	80253ec <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 80253b6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 80253ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80253be:	ea4f 0ee4 	mov.w	lr, r4, asr #3
 80253c2:	fb04 fa00 	mul.w	sl, r4, r0
 80253c6:	fb0e fe0c 	mul.w	lr, lr, ip
 80253ca:	f10a 0c20 	add.w	ip, sl, #32
 80253ce:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 80253d2:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80253d6:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80253da:	4470      	add	r0, lr
 80253dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80253e0:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 80253e4:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80253e8:	ea40 000c 	orr.w	r0, r0, ip
 80253ec:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80253ee:	f8b8 c002 	ldrh.w	ip, [r8, #2]
 80253f2:	2cff      	cmp	r4, #255	; 0xff
 80253f4:	d01a      	beq.n	802542c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 80253f6:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 80253fa:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80253fe:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025402:	fb04 fa0c 	mul.w	sl, r4, ip
 8025406:	fb08 f80e 	mul.w	r8, r8, lr
 802540a:	f10a 0e20 	add.w	lr, sl, #32
 802540e:	ea07 1c58 	and.w	ip, r7, r8, lsr #5
 8025412:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025416:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802541a:	44c4      	add	ip, r8
 802541c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025420:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8025424:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025428:	ea4c 0c0e 	orr.w	ip, ip, lr
 802542c:	fb16 fe02 	smulbb	lr, r6, r2
 8025430:	f1c6 0810 	rsb	r8, r6, #16
 8025434:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025438:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802543c:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025440:	eba8 0802 	sub.w	r8, r8, r2
 8025444:	ea4f 4b0c 	mov.w	fp, ip, lsl #16
 8025448:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802544c:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8025450:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025454:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025458:	ea4a 0000 	orr.w	r0, sl, r0
 802545c:	436a      	muls	r2, r5
 802545e:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8025462:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025466:	fb09 2208 	mla	r2, r9, r8, r2
 802546a:	ea4b 0c0c 	orr.w	ip, fp, ip
 802546e:	fb06 2200 	mla	r2, r6, r0, r2
 8025472:	fb0e 220c 	mla	r2, lr, ip, r2
 8025476:	0d55      	lsrs	r5, r2, #21
 8025478:	0952      	lsrs	r2, r2, #5
 802547a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802547e:	f422 6cfc 	bic.w	ip, r2, #2016	; 0x7e0
 8025482:	ea45 000c 	orr.w	r0, r5, ip
 8025486:	b280      	uxth	r0, r0
 8025488:	2bff      	cmp	r3, #255	; 0xff
 802548a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 802548e:	ea4f 06e0 	mov.w	r6, r0, asr #3
 8025492:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8025496:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 802549a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 802549e:	b2d2      	uxtb	r2, r2
 80254a0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80254a4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80254a8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80254ac:	d064      	beq.n	8025578 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x820>
 80254ae:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 80254b2:	24ff      	movs	r4, #255	; 0xff
 80254b4:	fb03 f508 	mul.w	r5, r3, r8
 80254b8:	4443      	add	r3, r8
 80254ba:	1c68      	adds	r0, r5, #1
 80254bc:	eb00 2025 	add.w	r0, r0, r5, asr #8
 80254c0:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 80254c4:	1200      	asrs	r0, r0, #8
 80254c6:	1a1b      	subs	r3, r3, r0
 80254c8:	eba8 0000 	sub.w	r0, r8, r0
 80254cc:	f811 8c02 	ldrb.w	r8, [r1, #-2]
 80254d0:	4345      	muls	r5, r0
 80254d2:	b2db      	uxtb	r3, r3
 80254d4:	fb14 5202 	smlabb	r2, r4, r2, r5
 80254d8:	24ff      	movs	r4, #255	; 0xff
 80254da:	f801 3c01 	strb.w	r3, [r1, #-1]
 80254de:	fb92 f2f3 	sdiv	r2, r2, r3
 80254e2:	2aff      	cmp	r2, #255	; 0xff
 80254e4:	bfd6      	itet	le
 80254e6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80254ea:	22ff      	movgt	r2, #255	; 0xff
 80254ec:	b2d2      	uxtble	r2, r2
 80254ee:	f801 2c04 	strb.w	r2, [r1, #-4]
 80254f2:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80254f6:	4342      	muls	r2, r0
 80254f8:	fb00 f008 	mul.w	r0, r0, r8
 80254fc:	fb14 2206 	smlabb	r2, r4, r6, r2
 8025500:	fb92 f2f3 	sdiv	r2, r2, r3
 8025504:	2aff      	cmp	r2, #255	; 0xff
 8025506:	bfd6      	itet	le
 8025508:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802550c:	22ff      	movgt	r2, #255	; 0xff
 802550e:	b2d2      	uxtble	r2, r2
 8025510:	f801 2c03 	strb.w	r2, [r1, #-3]
 8025514:	22ff      	movs	r2, #255	; 0xff
 8025516:	fb12 000c 	smlabb	r0, r2, ip, r0
 802551a:	fb90 f0f3 	sdiv	r0, r0, r3
 802551e:	28ff      	cmp	r0, #255	; 0xff
 8025520:	bfd6      	itet	le
 8025522:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8025526:	20ff      	movgt	r0, #255	; 0xff
 8025528:	b2c0      	uxtble	r0, r0
 802552a:	f801 0c02 	strb.w	r0, [r1, #-2]
 802552e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025530:	3104      	adds	r1, #4
 8025532:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8025534:	4413      	add	r3, r2
 8025536:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8025538:	931d      	str	r3, [sp, #116]	; 0x74
 802553a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802553c:	441a      	add	r2, r3
 802553e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025540:	3b01      	subs	r3, #1
 8025542:	921e      	str	r2, [sp, #120]	; 0x78
 8025544:	930f      	str	r3, [sp, #60]	; 0x3c
 8025546:	e603      	b.n	8025150 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8025548:	fb08 f505 	mul.w	r5, r8, r5
 802554c:	fb09 5303 	mla	r3, r9, r3, r5
 8025550:	e6c8      	b.n	80252e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 8025552:	46a9      	mov	r9, r5
 8025554:	e6ef      	b.n	8025336 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8025556:	f1c2 0010 	rsb	r0, r2, #16
 802555a:	436a      	muls	r2, r5
 802555c:	fb09 2900 	mla	r9, r9, r0, r2
 8025560:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8025564:	ea4f 5659 	mov.w	r6, r9, lsr #21
 8025568:	ea4f 1059 	mov.w	r0, r9, lsr #5
 802556c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025570:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025574:	4330      	orrs	r0, r6
 8025576:	e786      	b.n	8025486 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8025578:	0236      	lsls	r6, r6, #8
 802557a:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 802557e:	4332      	orrs	r2, r6
 8025580:	f841 2c04 	str.w	r2, [r1, #-4]
 8025584:	e7d3      	b.n	802552e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 8025586:	b013      	add	sp, #76	; 0x4c
 8025588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802558c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>:
 802558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025590:	e9dd 680a 	ldrd	r6, r8, [sp, #40]	; 0x28
 8025594:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8025598:	fb08 6703 	mla	r7, r8, r3, r6
 802559c:	f1b8 0f00 	cmp.w	r8, #0
 80255a0:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80255a4:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80255a8:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
 80255ac:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80255b0:	6808      	ldr	r0, [r1, #0]
 80255b2:	f2c0 80d5 	blt.w	8025760 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 80255b6:	45c1      	cmp	r9, r8
 80255b8:	f340 80d2 	ble.w	8025760 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 80255bc:	2e00      	cmp	r6, #0
 80255be:	f2c0 80cd 	blt.w	802575c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 80255c2:	42b3      	cmp	r3, r6
 80255c4:	f340 80ca 	ble.w	802575c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 80255c8:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 80255cc:	ea4f 272c 	mov.w	r7, ip, asr #8
 80255d0:	ea4f 02ec 	mov.w	r2, ip, asr #3
 80255d4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80255d8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80255dc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 80255e0:	ea47 1b57 	orr.w	fp, r7, r7, lsr #5
 80255e4:	ea42 1792 	orr.w	r7, r2, r2, lsr #6
 80255e8:	fa5f fc8c 	uxtb.w	ip, ip
 80255ec:	023f      	lsls	r7, r7, #8
 80255ee:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80255f2:	ea47 470b 	orr.w	r7, r7, fp, lsl #16
 80255f6:	ea47 070c 	orr.w	r7, r7, ip
 80255fa:	1c72      	adds	r2, r6, #1
 80255fc:	f100 80b3 	bmi.w	8025766 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8025600:	4293      	cmp	r3, r2
 8025602:	f340 80b0 	ble.w	8025766 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8025606:	2c00      	cmp	r4, #0
 8025608:	f000 80ad 	beq.w	8025766 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 802560c:	f8ba b002 	ldrh.w	fp, [sl, #2]
 8025610:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8025614:	ea4f 2c2b 	mov.w	ip, fp, asr #8
 8025618:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802561c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8025620:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025624:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8025628:	fa5f fb8b 	uxtb.w	fp, fp
 802562c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025630:	0212      	lsls	r2, r2, #8
 8025632:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8025636:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 802563a:	ea4c 0c0b 	orr.w	ip, ip, fp
 802563e:	f118 0801 	adds.w	r8, r8, #1
 8025642:	f100 8094 	bmi.w	802576e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8025646:	45c1      	cmp	r9, r8
 8025648:	f340 8091 	ble.w	802576e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 802564c:	f1be 0f00 	cmp.w	lr, #0
 8025650:	f000 808d 	beq.w	802576e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8025654:	2e00      	cmp	r6, #0
 8025656:	f2c0 8088 	blt.w	802576a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 802565a:	42b3      	cmp	r3, r6
 802565c:	f340 8085 	ble.w	802576a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 8025660:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 8025664:	ea4f 2228 	mov.w	r2, r8, asr #8
 8025668:	ea4f 09e8 	mov.w	r9, r8, asr #3
 802566c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025670:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8025674:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8025678:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 802567c:	ea49 1299 	orr.w	r2, r9, r9, lsr #6
 8025680:	fa5f f888 	uxtb.w	r8, r8
 8025684:	0212      	lsls	r2, r2, #8
 8025686:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 802568a:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 802568e:	ea42 0208 	orr.w	r2, r2, r8
 8025692:	3601      	adds	r6, #1
 8025694:	d417      	bmi.n	80256c6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8025696:	42b3      	cmp	r3, r6
 8025698:	dd15      	ble.n	80256c6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802569a:	b1a4      	cbz	r4, 80256c6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 802569c:	3301      	adds	r3, #1
 802569e:	f83a 6013 	ldrh.w	r6, [sl, r3, lsl #1]
 80256a2:	10f3      	asrs	r3, r6, #3
 80256a4:	1230      	asrs	r0, r6, #8
 80256a6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80256aa:	00f6      	lsls	r6, r6, #3
 80256ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 80256b0:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80256b4:	ea40 1850 	orr.w	r8, r0, r0, lsr #5
 80256b8:	b2f6      	uxtb	r6, r6
 80256ba:	0218      	lsls	r0, r3, #8
 80256bc:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80256c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80256c4:	4330      	orrs	r0, r6
 80256c6:	b2a4      	uxth	r4, r4
 80256c8:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80256cc:	fa1f fe8e 	uxth.w	lr, lr
 80256d0:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 80256d4:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80256d8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80256dc:	fb04 f80e 	mul.w	r8, r4, lr
 80256e0:	0124      	lsls	r4, r4, #4
 80256e2:	2dff      	cmp	r5, #255	; 0xff
 80256e4:	ebc8 1e0e 	rsb	lr, r8, lr, lsl #4
 80256e8:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80256ec:	eba4 0408 	sub.w	r4, r4, r8
 80256f0:	fa1f fe8e 	uxth.w	lr, lr
 80256f4:	b2a4      	uxth	r4, r4
 80256f6:	eba9 090e 	sub.w	r9, r9, lr
 80256fa:	fb04 f303 	mul.w	r3, r4, r3
 80256fe:	fa1f f989 	uxth.w	r9, r9
 8025702:	fb04 f40c 	mul.w	r4, r4, ip
 8025706:	fb09 3606 	mla	r6, r9, r6, r3
 802570a:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802570e:	fb09 4407 	mla	r4, r9, r7, r4
 8025712:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025716:	fb08 6603 	mla	r6, r8, r3, r6
 802571a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802571e:	fb08 4000 	mla	r0, r8, r0, r4
 8025722:	fb0e 6303 	mla	r3, lr, r3, r6
 8025726:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802572a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802572e:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8025732:	fb0e 0303 	mla	r3, lr, r3, r0
 8025736:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802573a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802573e:	ea43 0306 	orr.w	r3, r3, r6
 8025742:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8025746:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802574a:	b2d4      	uxtb	r4, r2
 802574c:	b2c6      	uxtb	r6, r0
 802574e:	d110      	bne.n	8025772 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e6>
 8025750:	700b      	strb	r3, [r1, #0]
 8025752:	7048      	strb	r0, [r1, #1]
 8025754:	708a      	strb	r2, [r1, #2]
 8025756:	70cd      	strb	r5, [r1, #3]
 8025758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802575c:	4607      	mov	r7, r0
 802575e:	e74c      	b.n	80255fa <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x6e>
 8025760:	4684      	mov	ip, r0
 8025762:	4607      	mov	r7, r0
 8025764:	e76b      	b.n	802563e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 8025766:	4684      	mov	ip, r0
 8025768:	e769      	b.n	802563e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 802576a:	4602      	mov	r2, r0
 802576c:	e791      	b.n	8025692 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x106>
 802576e:	4602      	mov	r2, r0
 8025770:	e7a9      	b.n	80256c6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 8025772:	2d00      	cmp	r5, #0
 8025774:	d0f0      	beq.n	8025758 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>
 8025776:	78cf      	ldrb	r7, [r1, #3]
 8025778:	b2db      	uxtb	r3, r3
 802577a:	fb15 f606 	smulbb	r6, r5, r6
 802577e:	fb05 f207 	mul.w	r2, r5, r7
 8025782:	1c50      	adds	r0, r2, #1
 8025784:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8025788:	19ea      	adds	r2, r5, r7
 802578a:	1200      	asrs	r0, r0, #8
 802578c:	1a12      	subs	r2, r2, r0
 802578e:	1a38      	subs	r0, r7, r0
 8025790:	780f      	ldrb	r7, [r1, #0]
 8025792:	b2d2      	uxtb	r2, r2
 8025794:	4347      	muls	r7, r0
 8025796:	70ca      	strb	r2, [r1, #3]
 8025798:	fb05 7303 	mla	r3, r5, r3, r7
 802579c:	fb15 f504 	smulbb	r5, r5, r4
 80257a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80257a4:	700b      	strb	r3, [r1, #0]
 80257a6:	784b      	ldrb	r3, [r1, #1]
 80257a8:	fb00 6303 	mla	r3, r0, r3, r6
 80257ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80257b0:	704b      	strb	r3, [r1, #1]
 80257b2:	788b      	ldrb	r3, [r1, #2]
 80257b4:	fb00 5503 	mla	r5, r0, r3, r5
 80257b8:	fb95 f5f2 	sdiv	r5, r5, r2
 80257bc:	708d      	strb	r5, [r1, #2]
 80257be:	e7cb      	b.n	8025758 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>

080257c0 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80257c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257c4:	b08f      	sub	sp, #60	; 0x3c
 80257c6:	461f      	mov	r7, r3
 80257c8:	920c      	str	r2, [sp, #48]	; 0x30
 80257ca:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80257cc:	900d      	str	r0, [sp, #52]	; 0x34
 80257ce:	9107      	str	r1, [sp, #28]
 80257d0:	6850      	ldr	r0, [r2, #4]
 80257d2:	6812      	ldr	r2, [r2, #0]
 80257d4:	f89d 4084 	ldrb.w	r4, [sp, #132]	; 0x84
 80257d8:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 80257dc:	e9dd 5819 	ldrd	r5, r8, [sp, #100]	; 0x64
 80257e0:	fb00 1303 	mla	r3, r0, r3, r1
 80257e4:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80257e8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80257ea:	681b      	ldr	r3, [r3, #0]
 80257ec:	9306      	str	r3, [sp, #24]
 80257ee:	9b07      	ldr	r3, [sp, #28]
 80257f0:	2b00      	cmp	r3, #0
 80257f2:	dc03      	bgt.n	80257fc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80257f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80257f6:	2b00      	cmp	r3, #0
 80257f8:	f340 8230 	ble.w	8025c5c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80257fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80257fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025802:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025806:	1e48      	subs	r0, r1, #1
 8025808:	1e56      	subs	r6, r2, #1
 802580a:	2f00      	cmp	r7, #0
 802580c:	f340 80bd 	ble.w	802598a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8025810:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8025814:	ea4f 4328 	mov.w	r3, r8, asr #16
 8025818:	d406      	bmi.n	8025828 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802581a:	4584      	cmp	ip, r0
 802581c:	da04      	bge.n	8025828 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802581e:	2b00      	cmp	r3, #0
 8025820:	db02      	blt.n	8025828 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8025822:	42b3      	cmp	r3, r6
 8025824:	f2c0 80b2 	blt.w	802598c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 8025828:	f11c 0c01 	adds.w	ip, ip, #1
 802582c:	f100 80a5 	bmi.w	802597a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025830:	4561      	cmp	r1, ip
 8025832:	f2c0 80a2 	blt.w	802597a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025836:	3301      	adds	r3, #1
 8025838:	f100 809f 	bmi.w	802597a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802583c:	429a      	cmp	r2, r3
 802583e:	f2c0 809c 	blt.w	802597a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8025842:	46ba      	mov	sl, r7
 8025844:	464e      	mov	r6, r9
 8025846:	f1ba 0f00 	cmp.w	sl, #0
 802584a:	f340 80bb 	ble.w	80259c4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802584e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025850:	1429      	asrs	r1, r5, #16
 8025852:	ea4f 4028 	mov.w	r0, r8, asr #16
 8025856:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802585a:	f3c8 3c03 	ubfx	ip, r8, #12, #4
 802585e:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025862:	f100 8122 	bmi.w	8025aaa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8025866:	f10e 3bff 	add.w	fp, lr, #4294967295
 802586a:	4559      	cmp	r1, fp
 802586c:	f280 811d 	bge.w	8025aaa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8025870:	2800      	cmp	r0, #0
 8025872:	f2c0 811a 	blt.w	8025aaa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8025876:	f103 3bff 	add.w	fp, r3, #4294967295
 802587a:	4558      	cmp	r0, fp
 802587c:	f280 8115 	bge.w	8025aaa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 8025880:	fa0f fe8e 	sxth.w	lr, lr
 8025884:	9b06      	ldr	r3, [sp, #24]
 8025886:	fb00 110e 	mla	r1, r0, lr, r1
 802588a:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 802588e:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
 8025892:	8841      	ldrh	r1, [r0, #2]
 8025894:	f1bc 0f00 	cmp.w	ip, #0
 8025898:	d00b      	beq.n	80258b2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 802589a:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 802589e:	3b01      	subs	r3, #1
 80258a0:	005b      	lsls	r3, r3, #1
 80258a2:	3302      	adds	r3, #2
 80258a4:	eb00 0e03 	add.w	lr, r0, r3
 80258a8:	5ac3      	ldrh	r3, [r0, r3]
 80258aa:	9308      	str	r3, [sp, #32]
 80258ac:	f8be 3002 	ldrh.w	r3, [lr, #2]
 80258b0:	9309      	str	r3, [sp, #36]	; 0x24
 80258b2:	ea4f 400b 	mov.w	r0, fp, lsl #16
 80258b6:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 80258ba:	fb12 f30c 	smulbb	r3, r2, ip
 80258be:	f1cc 0e10 	rsb	lr, ip, #16
 80258c2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 80258c6:	2cff      	cmp	r4, #255	; 0xff
 80258c8:	ea4f 03e3 	mov.w	r3, r3, asr #3
 80258cc:	ebae 0e02 	sub.w	lr, lr, r2
 80258d0:	ea40 000b 	orr.w	r0, r0, fp
 80258d4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 80258d8:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80258dc:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80258e0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80258e4:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 80258e8:	ebc3 0c4c 	rsb	ip, r3, ip, lsl #1
 80258ec:	ea4b 0101 	orr.w	r1, fp, r1
 80258f0:	fb02 f101 	mul.w	r1, r2, r1
 80258f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80258f6:	fb0e 1e00 	mla	lr, lr, r0, r1
 80258fa:	ea4f 4002 	mov.w	r0, r2, lsl #16
 80258fe:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025902:	9908      	ldr	r1, [sp, #32]
 8025904:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025908:	ea40 0002 	orr.w	r0, r0, r2
 802590c:	9a08      	ldr	r2, [sp, #32]
 802590e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8025912:	fb03 e000 	mla	r0, r3, r0, lr
 8025916:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802591a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802591e:	ea42 020e 	orr.w	r2, r2, lr
 8025922:	fb0c 0c02 	mla	ip, ip, r2, r0
 8025926:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802592a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802592e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025932:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025936:	ea43 0c0c 	orr.w	ip, r3, ip
 802593a:	fa1f f38c 	uxth.w	r3, ip
 802593e:	ea4f 2223 	mov.w	r2, r3, asr #8
 8025942:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8025946:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802594a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802594e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025952:	b2db      	uxtb	r3, r3
 8025954:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025958:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802595c:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8025960:	d174      	bne.n	8025a4c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8025962:	7033      	strb	r3, [r6, #0]
 8025964:	7071      	strb	r1, [r6, #1]
 8025966:	70b2      	strb	r2, [r6, #2]
 8025968:	70f4      	strb	r4, [r6, #3]
 802596a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802596c:	3604      	adds	r6, #4
 802596e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025972:	441d      	add	r5, r3
 8025974:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025976:	4498      	add	r8, r3
 8025978:	e765      	b.n	8025846 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802597a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 802597c:	3f01      	subs	r7, #1
 802597e:	f109 0904 	add.w	r9, r9, #4
 8025982:	441d      	add	r5, r3
 8025984:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025986:	4498      	add	r8, r3
 8025988:	e73f      	b.n	802580a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 802598a:	d01f      	beq.n	80259cc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802598c:	1e7b      	subs	r3, r7, #1
 802598e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025990:	fb00 5003 	mla	r0, r0, r3, r5
 8025994:	1400      	asrs	r0, r0, #16
 8025996:	f53f af54 	bmi.w	8025842 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802599a:	3901      	subs	r1, #1
 802599c:	4288      	cmp	r0, r1
 802599e:	f6bf af50 	bge.w	8025842 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80259a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80259a4:	fb01 8303 	mla	r3, r1, r3, r8
 80259a8:	141b      	asrs	r3, r3, #16
 80259aa:	f53f af4a 	bmi.w	8025842 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80259ae:	3a01      	subs	r2, #1
 80259b0:	4293      	cmp	r3, r2
 80259b2:	f6bf af46 	bge.w	8025842 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80259b6:	f109 0304 	add.w	r3, r9, #4
 80259ba:	46ba      	mov	sl, r7
 80259bc:	f1ba 0f00 	cmp.w	sl, #0
 80259c0:	f300 8090 	bgt.w	8025ae4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 80259c4:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 80259c8:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 80259cc:	9b07      	ldr	r3, [sp, #28]
 80259ce:	2b00      	cmp	r3, #0
 80259d0:	f340 8144 	ble.w	8025c5c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80259d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80259d8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80259da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80259de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80259e2:	eef0 6a62 	vmov.f32	s13, s5
 80259e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80259ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 80259ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80259f2:	ee16 5a90 	vmov	r5, s13
 80259f6:	eef0 6a43 	vmov.f32	s13, s6
 80259fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80259fe:	ee16 8a90 	vmov	r8, s13
 8025a02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025a06:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025a0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8025a0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8025a12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025a16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025a1a:	ee12 2a90 	vmov	r2, s5
 8025a1e:	eef0 2a47 	vmov.f32	s5, s14
 8025a22:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a26:	ee13 2a10 	vmov	r2, s6
 8025a2a:	931b      	str	r3, [sp, #108]	; 0x6c
 8025a2c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025a2e:	eeb0 3a67 	vmov.f32	s6, s15
 8025a32:	fb92 f3f3 	sdiv	r3, r2, r3
 8025a36:	931c      	str	r3, [sp, #112]	; 0x70
 8025a38:	9b07      	ldr	r3, [sp, #28]
 8025a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025a3c:	3b01      	subs	r3, #1
 8025a3e:	9307      	str	r3, [sp, #28]
 8025a40:	bf08      	it	eq
 8025a42:	4617      	moveq	r7, r2
 8025a44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8025a46:	bf18      	it	ne
 8025a48:	461f      	movne	r7, r3
 8025a4a:	e6d0      	b.n	80257ee <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8025a4c:	2c00      	cmp	r4, #0
 8025a4e:	d08c      	beq.n	802596a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025a50:	f896 e003 	ldrb.w	lr, [r6, #3]
 8025a54:	fb13 f304 	smulbb	r3, r3, r4
 8025a58:	fb14 f101 	smulbb	r1, r4, r1
 8025a5c:	fb14 f202 	smulbb	r2, r4, r2
 8025a60:	fb04 fc0e 	mul.w	ip, r4, lr
 8025a64:	f10c 0001 	add.w	r0, ip, #1
 8025a68:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8025a6c:	eb04 0c0e 	add.w	ip, r4, lr
 8025a70:	1200      	asrs	r0, r0, #8
 8025a72:	ebac 0c00 	sub.w	ip, ip, r0
 8025a76:	ebae 0000 	sub.w	r0, lr, r0
 8025a7a:	f896 e000 	ldrb.w	lr, [r6]
 8025a7e:	fa5f fc8c 	uxtb.w	ip, ip
 8025a82:	fb00 330e 	mla	r3, r0, lr, r3
 8025a86:	f886 c003 	strb.w	ip, [r6, #3]
 8025a8a:	fb93 f3fc 	sdiv	r3, r3, ip
 8025a8e:	7033      	strb	r3, [r6, #0]
 8025a90:	7873      	ldrb	r3, [r6, #1]
 8025a92:	fb00 1103 	mla	r1, r0, r3, r1
 8025a96:	78b3      	ldrb	r3, [r6, #2]
 8025a98:	fb00 2003 	mla	r0, r0, r3, r2
 8025a9c:	fb91 f1fc 	sdiv	r1, r1, ip
 8025aa0:	fb90 f0fc 	sdiv	r0, r0, ip
 8025aa4:	7071      	strb	r1, [r6, #1]
 8025aa6:	70b0      	strb	r0, [r6, #2]
 8025aa8:	e75f      	b.n	802596a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025aaa:	f111 0b01 	adds.w	fp, r1, #1
 8025aae:	f53f af5c 	bmi.w	802596a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025ab2:	45de      	cmp	lr, fp
 8025ab4:	f6ff af59 	blt.w	802596a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025ab8:	f110 0b01 	adds.w	fp, r0, #1
 8025abc:	f53f af55 	bmi.w	802596a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025ac0:	455b      	cmp	r3, fp
 8025ac2:	f6ff af52 	blt.w	802596a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025ac6:	b21b      	sxth	r3, r3
 8025ac8:	9101      	str	r1, [sp, #4]
 8025aca:	4631      	mov	r1, r6
 8025acc:	9300      	str	r3, [sp, #0]
 8025ace:	fa0f f38e 	sxth.w	r3, lr
 8025ad2:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8025ad6:	e9cd c404 	strd	ip, r4, [sp, #16]
 8025ada:	9a06      	ldr	r2, [sp, #24]
 8025adc:	980d      	ldr	r0, [sp, #52]	; 0x34
 8025ade:	f7ff fd55 	bl	802558c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>
 8025ae2:	e742      	b.n	802596a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8025ae4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025ae6:	142e      	asrs	r6, r5, #16
 8025ae8:	ea4f 4028 	mov.w	r0, r8, asr #16
 8025aec:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8025af0:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 8025af4:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8025af8:	9a06      	ldr	r2, [sp, #24]
 8025afa:	fb0b 6000 	mla	r0, fp, r0, r6
 8025afe:	9e06      	ldr	r6, [sp, #24]
 8025b00:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8025b04:	f832 c010 	ldrh.w	ip, [r2, r0, lsl #1]
 8025b08:	8870      	ldrh	r0, [r6, #2]
 8025b0a:	f1be 0f00 	cmp.w	lr, #0
 8025b0e:	d00b      	beq.n	8025b28 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8025b10:	f10b 4200 	add.w	r2, fp, #2147483648	; 0x80000000
 8025b14:	3a01      	subs	r2, #1
 8025b16:	0052      	lsls	r2, r2, #1
 8025b18:	3202      	adds	r2, #2
 8025b1a:	eb06 0b02 	add.w	fp, r6, r2
 8025b1e:	5ab2      	ldrh	r2, [r6, r2]
 8025b20:	920a      	str	r2, [sp, #40]	; 0x28
 8025b22:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8025b26:	920b      	str	r2, [sp, #44]	; 0x2c
 8025b28:	ea4f 460c 	mov.w	r6, ip, lsl #16
 8025b2c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025b30:	fb11 f20e 	smulbb	r2, r1, lr
 8025b34:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8025b38:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 8025b3c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025b40:	10d2      	asrs	r2, r2, #3
 8025b42:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025b46:	ea46 060c 	orr.w	r6, r6, ip
 8025b4a:	f1ce 0c10 	rsb	ip, lr, #16
 8025b4e:	ea4b 0000 	orr.w	r0, fp, r0
 8025b52:	2cff      	cmp	r4, #255	; 0xff
 8025b54:	ebac 0c01 	sub.w	ip, ip, r1
 8025b58:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
 8025b5c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8025b60:	fb01 f000 	mul.w	r0, r1, r0
 8025b64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025b66:	fb0c 0c06 	mla	ip, ip, r6, r0
 8025b6a:	980a      	ldr	r0, [sp, #40]	; 0x28
 8025b6c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025b70:	f421 66fc 	bic.w	r6, r1, #2016	; 0x7e0
 8025b74:	990a      	ldr	r1, [sp, #40]	; 0x28
 8025b76:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025b7a:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8025b7e:	ea4b 0606 	orr.w	r6, fp, r6
 8025b82:	f420 6bfc 	bic.w	fp, r0, #2016	; 0x7e0
 8025b86:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8025b8a:	fb02 c606 	mla	r6, r2, r6, ip
 8025b8e:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8025b92:	ea41 0b0b 	orr.w	fp, r1, fp
 8025b96:	fb02 660b 	mla	r6, r2, fp, r6
 8025b9a:	ea4f 5256 	mov.w	r2, r6, lsr #21
 8025b9e:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8025ba2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025ba6:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8025baa:	ea46 0602 	orr.w	r6, r6, r2
 8025bae:	b2b2      	uxth	r2, r6
 8025bb0:	ea4f 2122 	mov.w	r1, r2, asr #8
 8025bb4:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8025bb8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8025bbc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8025bc0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025bc4:	b2d2      	uxtb	r2, r2
 8025bc6:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025bca:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025bce:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025bd2:	d10f      	bne.n	8025bf4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8025bd4:	f803 2c04 	strb.w	r2, [r3, #-4]
 8025bd8:	f803 0c03 	strb.w	r0, [r3, #-3]
 8025bdc:	f803 1c02 	strb.w	r1, [r3, #-2]
 8025be0:	f803 4c01 	strb.w	r4, [r3, #-1]
 8025be4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8025be6:	3304      	adds	r3, #4
 8025be8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025bec:	4415      	add	r5, r2
 8025bee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8025bf0:	4490      	add	r8, r2
 8025bf2:	e6e3      	b.n	80259bc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8025bf4:	2c00      	cmp	r4, #0
 8025bf6:	d0f5      	beq.n	8025be4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8025bf8:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 8025bfc:	fb12 f204 	smulbb	r2, r2, r4
 8025c00:	fb14 f000 	smulbb	r0, r4, r0
 8025c04:	fb14 f101 	smulbb	r1, r4, r1
 8025c08:	fb04 f60e 	mul.w	r6, r4, lr
 8025c0c:	f106 0c01 	add.w	ip, r6, #1
 8025c10:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 8025c14:	eb04 060e 	add.w	r6, r4, lr
 8025c18:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8025c1c:	eba6 060c 	sub.w	r6, r6, ip
 8025c20:	ebae 0c0c 	sub.w	ip, lr, ip
 8025c24:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 8025c28:	b2f6      	uxtb	r6, r6
 8025c2a:	fb0c 220e 	mla	r2, ip, lr, r2
 8025c2e:	f803 6c01 	strb.w	r6, [r3, #-1]
 8025c32:	fb92 f2f6 	sdiv	r2, r2, r6
 8025c36:	f803 2c04 	strb.w	r2, [r3, #-4]
 8025c3a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8025c3e:	fb0c 0002 	mla	r0, ip, r2, r0
 8025c42:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8025c46:	fb0c 1c02 	mla	ip, ip, r2, r1
 8025c4a:	fb90 f0f6 	sdiv	r0, r0, r6
 8025c4e:	fb9c fcf6 	sdiv	ip, ip, r6
 8025c52:	f803 0c03 	strb.w	r0, [r3, #-3]
 8025c56:	f803 cc02 	strb.w	ip, [r3, #-2]
 8025c5a:	e7c3      	b.n	8025be4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8025c5c:	b00f      	add	sp, #60	; 0x3c
 8025c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025c62 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>:
 8025c62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025c66:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 8025c6a:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8025c6e:	fb08 7403 	mla	r4, r8, r3, r7
 8025c72:	f1b8 0f00 	cmp.w	r8, #0
 8025c76:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8025c7a:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8025c7e:	eb02 0944 	add.w	r9, r2, r4, lsl #1
 8025c82:	6808      	ldr	r0, [r1, #0]
 8025c84:	f2c0 80be 	blt.w	8025e04 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8025c88:	45c2      	cmp	sl, r8
 8025c8a:	f340 80bb 	ble.w	8025e04 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8025c8e:	2f00      	cmp	r7, #0
 8025c90:	f2c0 80b6 	blt.w	8025e00 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8025c94:	42bb      	cmp	r3, r7
 8025c96:	f340 80b3 	ble.w	8025e00 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8025c9a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8025c9e:	10d5      	asrs	r5, r2, #3
 8025ca0:	1214      	asrs	r4, r2, #8
 8025ca2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025ca6:	00d2      	lsls	r2, r2, #3
 8025ca8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8025cac:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8025cb0:	ea44 1e54 	orr.w	lr, r4, r4, lsr #5
 8025cb4:	b2d2      	uxtb	r2, r2
 8025cb6:	022c      	lsls	r4, r5, #8
 8025cb8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025cbc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8025cc0:	4314      	orrs	r4, r2
 8025cc2:	1c7a      	adds	r2, r7, #1
 8025cc4:	f100 80a1 	bmi.w	8025e0a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8025cc8:	4293      	cmp	r3, r2
 8025cca:	f340 809e 	ble.w	8025e0a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8025cce:	2e00      	cmp	r6, #0
 8025cd0:	f000 809b 	beq.w	8025e0a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8025cd4:	f8b9 e002 	ldrh.w	lr, [r9, #2]
 8025cd8:	ea4f 252e 	mov.w	r5, lr, asr #8
 8025cdc:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8025ce0:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8025ce4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025ce8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8025cec:	ea45 1b55 	orr.w	fp, r5, r5, lsr #5
 8025cf0:	ea42 1592 	orr.w	r5, r2, r2, lsr #6
 8025cf4:	fa5f fe8e 	uxtb.w	lr, lr
 8025cf8:	022d      	lsls	r5, r5, #8
 8025cfa:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8025cfe:	ea45 450b 	orr.w	r5, r5, fp, lsl #16
 8025d02:	ea45 050e 	orr.w	r5, r5, lr
 8025d06:	f118 0801 	adds.w	r8, r8, #1
 8025d0a:	f100 8082 	bmi.w	8025e12 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8025d0e:	45c2      	cmp	sl, r8
 8025d10:	dd7f      	ble.n	8025e12 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8025d12:	f1bc 0f00 	cmp.w	ip, #0
 8025d16:	d07c      	beq.n	8025e12 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8025d18:	2f00      	cmp	r7, #0
 8025d1a:	db78      	blt.n	8025e0e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8025d1c:	42bb      	cmp	r3, r7
 8025d1e:	dd76      	ble.n	8025e0e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8025d20:	f839 e013 	ldrh.w	lr, [r9, r3, lsl #1]
 8025d24:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8025d28:	ea4f 222e 	mov.w	r2, lr, asr #8
 8025d2c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8025d30:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8025d34:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8025d38:	ea48 1898 	orr.w	r8, r8, r8, lsr #6
 8025d3c:	ea42 1a52 	orr.w	sl, r2, r2, lsr #5
 8025d40:	fa5f fe8e 	uxtb.w	lr, lr
 8025d44:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8025d48:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8025d4c:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8025d50:	ea42 020e 	orr.w	r2, r2, lr
 8025d54:	3701      	adds	r7, #1
 8025d56:	d417      	bmi.n	8025d88 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8025d58:	42bb      	cmp	r3, r7
 8025d5a:	dd15      	ble.n	8025d88 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8025d5c:	b1a6      	cbz	r6, 8025d88 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8025d5e:	3301      	adds	r3, #1
 8025d60:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8025d64:	10df      	asrs	r7, r3, #3
 8025d66:	1218      	asrs	r0, r3, #8
 8025d68:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025d6c:	00db      	lsls	r3, r3, #3
 8025d6e:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025d72:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8025d76:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8025d7a:	b2db      	uxtb	r3, r3
 8025d7c:	0238      	lsls	r0, r7, #8
 8025d7e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8025d82:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8025d86:	4318      	orrs	r0, r3
 8025d88:	b2b6      	uxth	r6, r6
 8025d8a:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 8025d8e:	fa1f f78c 	uxth.w	r7, ip
 8025d92:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8025d96:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8025d9a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8025d9e:	fb06 fc07 	mul.w	ip, r6, r7
 8025da2:	0136      	lsls	r6, r6, #4
 8025da4:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8025da8:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 8025dac:	eba6 060c 	sub.w	r6, r6, ip
 8025db0:	b2bf      	uxth	r7, r7
 8025db2:	b2b6      	uxth	r6, r6
 8025db4:	ebae 0e07 	sub.w	lr, lr, r7
 8025db8:	4373      	muls	r3, r6
 8025dba:	fa1f fe8e 	uxth.w	lr, lr
 8025dbe:	4375      	muls	r5, r6
 8025dc0:	fb0e 3808 	mla	r8, lr, r8, r3
 8025dc4:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8025dc8:	fb0e 5404 	mla	r4, lr, r4, r5
 8025dcc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025dd0:	fb0c 8803 	mla	r8, ip, r3, r8
 8025dd4:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8025dd8:	fb0c 4000 	mla	r0, ip, r0, r4
 8025ddc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8025de0:	fb07 8303 	mla	r3, r7, r3, r8
 8025de4:	fb07 0002 	mla	r0, r7, r2, r0
 8025de8:	0a1b      	lsrs	r3, r3, #8
 8025dea:	0a00      	lsrs	r0, r0, #8
 8025dec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8025df0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8025df4:	4318      	orrs	r0, r3
 8025df6:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8025dfa:	6008      	str	r0, [r1, #0]
 8025dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e00:	4604      	mov	r4, r0
 8025e02:	e75e      	b.n	8025cc2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x60>
 8025e04:	4605      	mov	r5, r0
 8025e06:	4604      	mov	r4, r0
 8025e08:	e77d      	b.n	8025d06 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 8025e0a:	4605      	mov	r5, r0
 8025e0c:	e77b      	b.n	8025d06 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 8025e0e:	4602      	mov	r2, r0
 8025e10:	e7a0      	b.n	8025d54 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xf2>
 8025e12:	4602      	mov	r2, r0
 8025e14:	e7b8      	b.n	8025d88 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>

08025e16 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025e16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e1a:	b08f      	sub	sp, #60	; 0x3c
 8025e1c:	461d      	mov	r5, r3
 8025e1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025e20:	9107      	str	r1, [sp, #28]
 8025e22:	920c      	str	r2, [sp, #48]	; 0x30
 8025e24:	6859      	ldr	r1, [r3, #4]
 8025e26:	681b      	ldr	r3, [r3, #0]
 8025e28:	900d      	str	r0, [sp, #52]	; 0x34
 8025e2a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8025e2e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8025e32:	fb01 2707 	mla	r7, r1, r7, r2
 8025e36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8025e3a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025e3c:	f8d3 8000 	ldr.w	r8, [r3]
 8025e40:	9b07      	ldr	r3, [sp, #28]
 8025e42:	2b00      	cmp	r3, #0
 8025e44:	dc03      	bgt.n	8025e4e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8025e46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025e48:	2b00      	cmp	r3, #0
 8025e4a:	f340 81aa 	ble.w	80261a2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8025e4e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025e50:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025e54:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025e58:	1e48      	subs	r0, r1, #1
 8025e5a:	f102 3cff 	add.w	ip, r2, #4294967295
 8025e5e:	2d00      	cmp	r5, #0
 8025e60:	f340 80b0 	ble.w	8025fc4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8025e64:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8025e68:	ea4f 4326 	mov.w	r3, r6, asr #16
 8025e6c:	d406      	bmi.n	8025e7c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025e6e:	4586      	cmp	lr, r0
 8025e70:	da04      	bge.n	8025e7c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025e72:	2b00      	cmp	r3, #0
 8025e74:	db02      	blt.n	8025e7c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8025e76:	4563      	cmp	r3, ip
 8025e78:	f2c0 80a5 	blt.w	8025fc6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8025e7c:	f11e 0e01 	adds.w	lr, lr, #1
 8025e80:	f100 8099 	bmi.w	8025fb6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8025e84:	4571      	cmp	r1, lr
 8025e86:	f2c0 8096 	blt.w	8025fb6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8025e8a:	3301      	adds	r3, #1
 8025e8c:	f100 8093 	bmi.w	8025fb6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8025e90:	429a      	cmp	r2, r3
 8025e92:	f2c0 8090 	blt.w	8025fb6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8025e96:	46aa      	mov	sl, r5
 8025e98:	46b9      	mov	r9, r7
 8025e9a:	f1ba 0f00 	cmp.w	sl, #0
 8025e9e:	f340 80ac 	ble.w	8025ffa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8025ea2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025ea4:	1421      	asrs	r1, r4, #16
 8025ea6:	ea4f 4026 	mov.w	r0, r6, asr #16
 8025eaa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8025eae:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8025eb2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8025eb6:	f100 80e4 	bmi.w	8026082 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025eba:	f10e 3bff 	add.w	fp, lr, #4294967295
 8025ebe:	4559      	cmp	r1, fp
 8025ec0:	f280 80df 	bge.w	8026082 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025ec4:	2800      	cmp	r0, #0
 8025ec6:	f2c0 80dc 	blt.w	8026082 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025eca:	f103 3bff 	add.w	fp, r3, #4294967295
 8025ece:	4558      	cmp	r0, fp
 8025ed0:	f280 80d7 	bge.w	8026082 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8025ed4:	fa0f fe8e 	sxth.w	lr, lr
 8025ed8:	fb00 110e 	mla	r1, r0, lr, r1
 8025edc:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8025ee0:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8025ee4:	8841      	ldrh	r1, [r0, #2]
 8025ee6:	f1bc 0f00 	cmp.w	ip, #0
 8025eea:	d00b      	beq.n	8025f04 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8025eec:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8025ef0:	3b01      	subs	r3, #1
 8025ef2:	005b      	lsls	r3, r3, #1
 8025ef4:	3302      	adds	r3, #2
 8025ef6:	eb00 0e03 	add.w	lr, r0, r3
 8025efa:	5ac3      	ldrh	r3, [r0, r3]
 8025efc:	9308      	str	r3, [sp, #32]
 8025efe:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8025f02:	9309      	str	r3, [sp, #36]	; 0x24
 8025f04:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8025f08:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8025f0c:	fb12 f30c 	smulbb	r3, r2, ip
 8025f10:	f1cc 0e10 	rsb	lr, ip, #16
 8025f14:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025f18:	10db      	asrs	r3, r3, #3
 8025f1a:	ebae 0e02 	sub.w	lr, lr, r2
 8025f1e:	ea40 000b 	orr.w	r0, r0, fp
 8025f22:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8025f26:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8025f2a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8025f2e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025f32:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8025f36:	ea4b 0101 	orr.w	r1, fp, r1
 8025f3a:	4351      	muls	r1, r2
 8025f3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8025f3e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8025f42:	0410      	lsls	r0, r2, #16
 8025f44:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025f48:	9908      	ldr	r1, [sp, #32]
 8025f4a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8025f4e:	4310      	orrs	r0, r2
 8025f50:	9a08      	ldr	r2, [sp, #32]
 8025f52:	0412      	lsls	r2, r2, #16
 8025f54:	fb03 e000 	mla	r0, r3, r0, lr
 8025f58:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8025f5c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8025f60:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025f64:	ea42 020e 	orr.w	r2, r2, lr
 8025f68:	fb03 0302 	mla	r3, r3, r2, r0
 8025f6c:	0d59      	lsrs	r1, r3, #21
 8025f6e:	095b      	lsrs	r3, r3, #5
 8025f70:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025f74:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8025f78:	430b      	orrs	r3, r1
 8025f7a:	b299      	uxth	r1, r3
 8025f7c:	10ca      	asrs	r2, r1, #3
 8025f7e:	1208      	asrs	r0, r1, #8
 8025f80:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 8025f84:	00c9      	lsls	r1, r1, #3
 8025f86:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025f8a:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8025f8e:	b2c9      	uxtb	r1, r1
 8025f90:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8025f94:	021b      	lsls	r3, r3, #8
 8025f96:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8025f9a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8025f9e:	430b      	orrs	r3, r1
 8025fa0:	f8c9 3000 	str.w	r3, [r9]
 8025fa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025fa6:	f109 0904 	add.w	r9, r9, #4
 8025faa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8025fae:	441c      	add	r4, r3
 8025fb0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025fb2:	441e      	add	r6, r3
 8025fb4:	e771      	b.n	8025e9a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8025fb6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8025fb8:	3d01      	subs	r5, #1
 8025fba:	3704      	adds	r7, #4
 8025fbc:	441c      	add	r4, r3
 8025fbe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8025fc0:	441e      	add	r6, r3
 8025fc2:	e74c      	b.n	8025e5e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8025fc4:	d01d      	beq.n	8026002 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8025fc6:	1e6b      	subs	r3, r5, #1
 8025fc8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8025fca:	fb00 4003 	mla	r0, r0, r3, r4
 8025fce:	1400      	asrs	r0, r0, #16
 8025fd0:	f53f af61 	bmi.w	8025e96 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025fd4:	3901      	subs	r1, #1
 8025fd6:	4288      	cmp	r0, r1
 8025fd8:	f6bf af5d 	bge.w	8025e96 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025fdc:	991c      	ldr	r1, [sp, #112]	; 0x70
 8025fde:	fb01 6303 	mla	r3, r1, r3, r6
 8025fe2:	141b      	asrs	r3, r3, #16
 8025fe4:	f53f af57 	bmi.w	8025e96 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025fe8:	3a01      	subs	r2, #1
 8025fea:	4293      	cmp	r3, r2
 8025fec:	f6bf af53 	bge.w	8025e96 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8025ff0:	46a9      	mov	r9, r5
 8025ff2:	46ba      	mov	sl, r7
 8025ff4:	f1b9 0f00 	cmp.w	r9, #0
 8025ff8:	dc5b      	bgt.n	80260b2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8025ffa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8025ffe:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8026002:	9b07      	ldr	r3, [sp, #28]
 8026004:	2b00      	cmp	r3, #0
 8026006:	f340 80cc 	ble.w	80261a2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 802600a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802600e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026010:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026014:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026018:	eef0 6a62 	vmov.f32	s13, s5
 802601c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026020:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026024:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026028:	ee16 4a90 	vmov	r4, s13
 802602c:	eef0 6a43 	vmov.f32	s13, s6
 8026030:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026034:	ee16 6a90 	vmov	r6, s13
 8026038:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802603c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026040:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026044:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026048:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802604c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026050:	ee12 2a90 	vmov	r2, s5
 8026054:	eef0 2a47 	vmov.f32	s5, s14
 8026058:	fb92 f3f3 	sdiv	r3, r2, r3
 802605c:	ee13 2a10 	vmov	r2, s6
 8026060:	931b      	str	r3, [sp, #108]	; 0x6c
 8026062:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026064:	eeb0 3a67 	vmov.f32	s6, s15
 8026068:	fb92 f3f3 	sdiv	r3, r2, r3
 802606c:	931c      	str	r3, [sp, #112]	; 0x70
 802606e:	9b07      	ldr	r3, [sp, #28]
 8026070:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026072:	3b01      	subs	r3, #1
 8026074:	9307      	str	r3, [sp, #28]
 8026076:	bf08      	it	eq
 8026078:	4615      	moveq	r5, r2
 802607a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802607c:	bf18      	it	ne
 802607e:	461d      	movne	r5, r3
 8026080:	e6de      	b.n	8025e40 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8026082:	f111 0b01 	adds.w	fp, r1, #1
 8026086:	d48d      	bmi.n	8025fa4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026088:	45de      	cmp	lr, fp
 802608a:	db8b      	blt.n	8025fa4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 802608c:	f110 0b01 	adds.w	fp, r0, #1
 8026090:	d488      	bmi.n	8025fa4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026092:	455b      	cmp	r3, fp
 8026094:	db86      	blt.n	8025fa4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026096:	b21b      	sxth	r3, r3
 8026098:	e9cd 1001 	strd	r1, r0, [sp, #4]
 802609c:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 80260a0:	9300      	str	r3, [sp, #0]
 80260a2:	4642      	mov	r2, r8
 80260a4:	fa0f f38e 	sxth.w	r3, lr
 80260a8:	4649      	mov	r1, r9
 80260aa:	980d      	ldr	r0, [sp, #52]	; 0x34
 80260ac:	f7ff fdd9 	bl	8025c62 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>
 80260b0:	e778      	b.n	8025fa4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80260b2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80260b4:	1420      	asrs	r0, r4, #16
 80260b6:	1431      	asrs	r1, r6, #16
 80260b8:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 80260bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80260c0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80260c4:	fb03 0101 	mla	r1, r3, r1, r0
 80260c8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 80260cc:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 80260d0:	8841      	ldrh	r1, [r0, #2]
 80260d2:	f1be 0f00 	cmp.w	lr, #0
 80260d6:	d00b      	beq.n	80260f0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 80260d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80260dc:	3b01      	subs	r3, #1
 80260de:	005b      	lsls	r3, r3, #1
 80260e0:	3302      	adds	r3, #2
 80260e2:	eb00 0b03 	add.w	fp, r0, r3
 80260e6:	5ac3      	ldrh	r3, [r0, r3]
 80260e8:	930a      	str	r3, [sp, #40]	; 0x28
 80260ea:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80260ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80260f0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 80260f4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80260f8:	fb12 f30e 	smulbb	r3, r2, lr
 80260fc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026100:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026104:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026108:	10db      	asrs	r3, r3, #3
 802610a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802610e:	ea40 000c 	orr.w	r0, r0, ip
 8026112:	f1ce 0c10 	rsb	ip, lr, #16
 8026116:	ea4b 0101 	orr.w	r1, fp, r1
 802611a:	f109 39ff 	add.w	r9, r9, #4294967295
 802611e:	ebac 0c02 	sub.w	ip, ip, r2
 8026122:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026126:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802612a:	4351      	muls	r1, r2
 802612c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802612e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8026132:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026134:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8026138:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802613c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802613e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026142:	0412      	lsls	r2, r2, #16
 8026144:	ea4b 0000 	orr.w	r0, fp, r0
 8026148:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802614c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026150:	fb03 c000 	mla	r0, r3, r0, ip
 8026154:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 8026158:	ea42 0b0b 	orr.w	fp, r2, fp
 802615c:	fb03 000b 	mla	r0, r3, fp, r0
 8026160:	0d42      	lsrs	r2, r0, #21
 8026162:	0940      	lsrs	r0, r0, #5
 8026164:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026168:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802616c:	4310      	orrs	r0, r2
 802616e:	b282      	uxth	r2, r0
 8026170:	10d3      	asrs	r3, r2, #3
 8026172:	1211      	asrs	r1, r2, #8
 8026174:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8026178:	00d2      	lsls	r2, r2, #3
 802617a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802617e:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8026182:	b2d2      	uxtb	r2, r2
 8026184:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8026188:	021b      	lsls	r3, r3, #8
 802618a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802618e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8026192:	431a      	orrs	r2, r3
 8026194:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026196:	441c      	add	r4, r3
 8026198:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802619a:	f84a 2b04 	str.w	r2, [sl], #4
 802619e:	441e      	add	r6, r3
 80261a0:	e728      	b.n	8025ff4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80261a2:	b00f      	add	sp, #60	; 0x3c
 80261a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080261a8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>:
 80261a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261ac:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 80261b0:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 80261b4:	fb09 6c03 	mla	ip, r9, r3, r6
 80261b8:	f1b9 0f00 	cmp.w	r9, #0
 80261bc:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80261c0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80261c4:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80261c8:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 80261cc:	eb02 080c 	add.w	r8, r2, ip
 80261d0:	6808      	ldr	r0, [r1, #0]
 80261d2:	f2c0 80a0 	blt.w	8026316 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 80261d6:	45ca      	cmp	sl, r9
 80261d8:	f340 809d 	ble.w	8026316 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 80261dc:	2e00      	cmp	r6, #0
 80261de:	f2c0 8098 	blt.w	8026312 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 80261e2:	42b3      	cmp	r3, r6
 80261e4:	f340 8095 	ble.w	8026312 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 80261e8:	f898 7002 	ldrb.w	r7, [r8, #2]
 80261ec:	f898 b001 	ldrb.w	fp, [r8, #1]
 80261f0:	043f      	lsls	r7, r7, #16
 80261f2:	f812 200c 	ldrb.w	r2, [r2, ip]
 80261f6:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 80261fa:	4317      	orrs	r7, r2
 80261fc:	1c72      	adds	r2, r6, #1
 80261fe:	f100 808b 	bmi.w	8026318 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8026202:	4293      	cmp	r3, r2
 8026204:	f340 8088 	ble.w	8026318 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8026208:	2c00      	cmp	r4, #0
 802620a:	f000 8085 	beq.w	8026318 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 802620e:	f898 c005 	ldrb.w	ip, [r8, #5]
 8026212:	f898 2004 	ldrb.w	r2, [r8, #4]
 8026216:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 802621a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 802621e:	f898 2003 	ldrb.w	r2, [r8, #3]
 8026222:	ea4c 0c02 	orr.w	ip, ip, r2
 8026226:	f119 0901 	adds.w	r9, r9, #1
 802622a:	d479      	bmi.n	8026320 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 802622c:	45ca      	cmp	sl, r9
 802622e:	dd77      	ble.n	8026320 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8026230:	f1be 0f00 	cmp.w	lr, #0
 8026234:	d074      	beq.n	8026320 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8026236:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 802623a:	2e00      	cmp	r6, #0
 802623c:	eb08 090a 	add.w	r9, r8, sl
 8026240:	db6c      	blt.n	802631c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8026242:	42b3      	cmp	r3, r6
 8026244:	dd6a      	ble.n	802631c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8026246:	f899 2002 	ldrb.w	r2, [r9, #2]
 802624a:	f899 b001 	ldrb.w	fp, [r9, #1]
 802624e:	0412      	lsls	r2, r2, #16
 8026250:	f818 800a 	ldrb.w	r8, [r8, sl]
 8026254:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
 8026258:	ea42 0208 	orr.w	r2, r2, r8
 802625c:	3601      	adds	r6, #1
 802625e:	d40c      	bmi.n	802627a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8026260:	42b3      	cmp	r3, r6
 8026262:	dd0a      	ble.n	802627a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8026264:	b14c      	cbz	r4, 802627a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8026266:	f899 0005 	ldrb.w	r0, [r9, #5]
 802626a:	f899 3004 	ldrb.w	r3, [r9, #4]
 802626e:	0400      	lsls	r0, r0, #16
 8026270:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8026274:	f899 3003 	ldrb.w	r3, [r9, #3]
 8026278:	4318      	orrs	r0, r3
 802627a:	fa1f f38e 	uxth.w	r3, lr
 802627e:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8026282:	b2a4      	uxth	r4, r4
 8026284:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8026288:	2dff      	cmp	r5, #255	; 0xff
 802628a:	fb04 f803 	mul.w	r8, r4, r3
 802628e:	ea4f 1404 	mov.w	r4, r4, lsl #4
 8026292:	ebc8 1303 	rsb	r3, r8, r3, lsl #4
 8026296:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802629a:	eba4 0408 	sub.w	r4, r4, r8
 802629e:	fa1f fe83 	uxth.w	lr, r3
 80262a2:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80262a6:	b2a4      	uxth	r4, r4
 80262a8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80262ac:	eba9 090e 	sub.w	r9, r9, lr
 80262b0:	fb04 f303 	mul.w	r3, r4, r3
 80262b4:	fa1f f989 	uxth.w	r9, r9
 80262b8:	fb04 f40c 	mul.w	r4, r4, ip
 80262bc:	fb09 3606 	mla	r6, r9, r6, r3
 80262c0:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80262c4:	fb09 4407 	mla	r4, r9, r7, r4
 80262c8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80262cc:	fb08 6603 	mla	r6, r8, r3, r6
 80262d0:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 80262d4:	fb08 4000 	mla	r0, r8, r0, r4
 80262d8:	fb0e 6303 	mla	r3, lr, r3, r6
 80262dc:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80262e0:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 80262e4:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 80262e8:	fb0e 0303 	mla	r3, lr, r3, r0
 80262ec:	ea4f 2313 	mov.w	r3, r3, lsr #8
 80262f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80262f4:	ea43 0306 	orr.w	r3, r3, r6
 80262f8:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80262fc:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8026300:	b2d4      	uxtb	r4, r2
 8026302:	b2c6      	uxtb	r6, r0
 8026304:	d10e      	bne.n	8026324 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x17c>
 8026306:	700b      	strb	r3, [r1, #0]
 8026308:	7048      	strb	r0, [r1, #1]
 802630a:	708a      	strb	r2, [r1, #2]
 802630c:	70cd      	strb	r5, [r1, #3]
 802630e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026312:	4607      	mov	r7, r0
 8026314:	e772      	b.n	80261fc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x54>
 8026316:	4607      	mov	r7, r0
 8026318:	4684      	mov	ip, r0
 802631a:	e784      	b.n	8026226 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x7e>
 802631c:	4602      	mov	r2, r0
 802631e:	e79d      	b.n	802625c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xb4>
 8026320:	4602      	mov	r2, r0
 8026322:	e7aa      	b.n	802627a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8026324:	2d00      	cmp	r5, #0
 8026326:	d0f2      	beq.n	802630e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>
 8026328:	78cf      	ldrb	r7, [r1, #3]
 802632a:	b2db      	uxtb	r3, r3
 802632c:	fb15 f606 	smulbb	r6, r5, r6
 8026330:	fb05 f207 	mul.w	r2, r5, r7
 8026334:	1c50      	adds	r0, r2, #1
 8026336:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802633a:	19ea      	adds	r2, r5, r7
 802633c:	1200      	asrs	r0, r0, #8
 802633e:	1a12      	subs	r2, r2, r0
 8026340:	1a38      	subs	r0, r7, r0
 8026342:	780f      	ldrb	r7, [r1, #0]
 8026344:	b2d2      	uxtb	r2, r2
 8026346:	4347      	muls	r7, r0
 8026348:	70ca      	strb	r2, [r1, #3]
 802634a:	fb05 7303 	mla	r3, r5, r3, r7
 802634e:	fb15 f504 	smulbb	r5, r5, r4
 8026352:	fb93 f3f2 	sdiv	r3, r3, r2
 8026356:	700b      	strb	r3, [r1, #0]
 8026358:	784b      	ldrb	r3, [r1, #1]
 802635a:	fb00 6303 	mla	r3, r0, r3, r6
 802635e:	fb93 f3f2 	sdiv	r3, r3, r2
 8026362:	704b      	strb	r3, [r1, #1]
 8026364:	788b      	ldrb	r3, [r1, #2]
 8026366:	fb00 5503 	mla	r5, r0, r3, r5
 802636a:	fb95 f5f2 	sdiv	r5, r5, r2
 802636e:	708d      	strb	r5, [r1, #2]
 8026370:	e7cd      	b.n	802630e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>

08026372 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026376:	b09b      	sub	sp, #108	; 0x6c
 8026378:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 802637c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802637e:	9019      	str	r0, [sp, #100]	; 0x64
 8026380:	9307      	str	r3, [sp, #28]
 8026382:	6850      	ldr	r0, [r2, #4]
 8026384:	6812      	ldr	r2, [r2, #0]
 8026386:	f89d 40b4 	ldrb.w	r4, [sp, #180]	; 0xb4
 802638a:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802638e:	fb00 1303 	mla	r3, r0, r3, r1
 8026392:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026396:	9308      	str	r3, [sp, #32]
 8026398:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802639a:	681b      	ldr	r3, [r3, #0]
 802639c:	9309      	str	r3, [sp, #36]	; 0x24
 802639e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80263a0:	2b00      	cmp	r3, #0
 80263a2:	dc03      	bgt.n	80263ac <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80263a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80263a6:	2b00      	cmp	r3, #0
 80263a8:	f340 8231 	ble.w	802680e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80263ac:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80263ae:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80263b2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80263b6:	1e48      	subs	r0, r1, #1
 80263b8:	1e55      	subs	r5, r2, #1
 80263ba:	9b07      	ldr	r3, [sp, #28]
 80263bc:	2b00      	cmp	r3, #0
 80263be:	f340 80c3 	ble.w	8026548 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80263c2:	9e25      	ldr	r6, [sp, #148]	; 0x94
 80263c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80263c6:	1436      	asrs	r6, r6, #16
 80263c8:	ea4f 4323 	mov.w	r3, r3, asr #16
 80263cc:	d406      	bmi.n	80263dc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80263ce:	4286      	cmp	r6, r0
 80263d0:	da04      	bge.n	80263dc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80263d2:	2b00      	cmp	r3, #0
 80263d4:	db02      	blt.n	80263dc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 80263d6:	42ab      	cmp	r3, r5
 80263d8:	f2c0 80b7 	blt.w	802654a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80263dc:	3601      	adds	r6, #1
 80263de:	f100 80a4 	bmi.w	802652a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80263e2:	42b1      	cmp	r1, r6
 80263e4:	f2c0 80a1 	blt.w	802652a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80263e8:	3301      	adds	r3, #1
 80263ea:	f100 809e 	bmi.w	802652a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80263ee:	429a      	cmp	r2, r3
 80263f0:	f2c0 809b 	blt.w	802652a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 80263f4:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 80263f8:	f1bb 0f00 	cmp.w	fp, #0
 80263fc:	f340 80c5 	ble.w	802658a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8026400:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026402:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026404:	1418      	asrs	r0, r3, #16
 8026406:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026408:	68cf      	ldr	r7, [r1, #12]
 802640a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802640e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8026410:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026412:	1409      	asrs	r1, r1, #16
 8026414:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8026418:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802641a:	689b      	ldr	r3, [r3, #8]
 802641c:	f100 8127 	bmi.w	802666e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026420:	f103 3cff 	add.w	ip, r3, #4294967295
 8026424:	4561      	cmp	r1, ip
 8026426:	f280 8122 	bge.w	802666e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802642a:	2800      	cmp	r0, #0
 802642c:	f2c0 811f 	blt.w	802666e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8026430:	f107 3cff 	add.w	ip, r7, #4294967295
 8026434:	4560      	cmp	r0, ip
 8026436:	f280 811a 	bge.w	802666e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802643a:	b21b      	sxth	r3, r3
 802643c:	fb00 1103 	mla	r1, r0, r3, r1
 8026440:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026442:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026446:	1847      	adds	r7, r0, r1
 8026448:	5c40      	ldrb	r0, [r0, r1]
 802644a:	7879      	ldrb	r1, [r7, #1]
 802644c:	f897 e002 	ldrb.w	lr, [r7, #2]
 8026450:	910c      	str	r1, [sp, #48]	; 0x30
 8026452:	f897 9003 	ldrb.w	r9, [r7, #3]
 8026456:	f897 8004 	ldrb.w	r8, [r7, #4]
 802645a:	f897 a005 	ldrb.w	sl, [r7, #5]
 802645e:	b1cd      	cbz	r5, 8026494 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8026460:	f04f 0c03 	mov.w	ip, #3
 8026464:	f06f 0104 	mvn.w	r1, #4
 8026468:	3705      	adds	r7, #5
 802646a:	fb13 130c 	smlabb	r3, r3, ip, r1
 802646e:	eb07 0c03 	add.w	ip, r7, r3
 8026472:	5cfb      	ldrb	r3, [r7, r3]
 8026474:	930d      	str	r3, [sp, #52]	; 0x34
 8026476:	f89c 3001 	ldrb.w	r3, [ip, #1]
 802647a:	930f      	str	r3, [sp, #60]	; 0x3c
 802647c:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8026480:	9311      	str	r3, [sp, #68]	; 0x44
 8026482:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8026486:	930e      	str	r3, [sp, #56]	; 0x38
 8026488:	f89c 3004 	ldrb.w	r3, [ip, #4]
 802648c:	9310      	str	r3, [sp, #64]	; 0x40
 802648e:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8026492:	9312      	str	r3, [sp, #72]	; 0x48
 8026494:	b292      	uxth	r2, r2
 8026496:	990c      	ldr	r1, [sp, #48]	; 0x30
 8026498:	b2ad      	uxth	r5, r5
 802649a:	2cff      	cmp	r4, #255	; 0xff
 802649c:	fb02 f305 	mul.w	r3, r2, r5
 80264a0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80264a4:	ebc3 1505 	rsb	r5, r3, r5, lsl #4
 80264a8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80264ac:	eba2 0203 	sub.w	r2, r2, r3
 80264b0:	b2ad      	uxth	r5, r5
 80264b2:	b292      	uxth	r2, r2
 80264b4:	eba7 0705 	sub.w	r7, r7, r5
 80264b8:	fb02 f909 	mul.w	r9, r2, r9
 80264bc:	b2bf      	uxth	r7, r7
 80264be:	fb02 f808 	mul.w	r8, r2, r8
 80264c2:	fb02 fa0a 	mul.w	sl, r2, sl
 80264c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80264c8:	fb07 9900 	mla	r9, r7, r0, r9
 80264cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80264ce:	fb07 8801 	mla	r8, r7, r1, r8
 80264d2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80264d4:	fb07 aa0e 	mla	sl, r7, lr, sl
 80264d8:	fb05 9900 	mla	r9, r5, r0, r9
 80264dc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80264de:	fb05 8801 	mla	r8, r5, r1, r8
 80264e2:	9910      	ldr	r1, [sp, #64]	; 0x40
 80264e4:	fb05 a502 	mla	r5, r5, r2, sl
 80264e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80264ea:	fb03 9900 	mla	r9, r3, r0, r9
 80264ee:	fb03 8801 	mla	r8, r3, r1, r8
 80264f2:	fb03 5302 	mla	r3, r3, r2, r5
 80264f6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80264fa:	ea4f 2828 	mov.w	r8, r8, asr #8
 80264fe:	ea4f 2323 	mov.w	r3, r3, asr #8
 8026502:	f040 8088 	bne.w	8026616 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8026506:	f886 9000 	strb.w	r9, [r6]
 802650a:	f886 8001 	strb.w	r8, [r6, #1]
 802650e:	70b3      	strb	r3, [r6, #2]
 8026510:	70f4      	strb	r4, [r6, #3]
 8026512:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026514:	3604      	adds	r6, #4
 8026516:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026518:	f10b 3bff 	add.w	fp, fp, #4294967295
 802651c:	4413      	add	r3, r2
 802651e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8026520:	9325      	str	r3, [sp, #148]	; 0x94
 8026522:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026524:	4413      	add	r3, r2
 8026526:	9326      	str	r3, [sp, #152]	; 0x98
 8026528:	e766      	b.n	80263f8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802652a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802652c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802652e:	4433      	add	r3, r6
 8026530:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8026532:	9325      	str	r3, [sp, #148]	; 0x94
 8026534:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8026536:	4433      	add	r3, r6
 8026538:	9326      	str	r3, [sp, #152]	; 0x98
 802653a:	9b07      	ldr	r3, [sp, #28]
 802653c:	3b01      	subs	r3, #1
 802653e:	9307      	str	r3, [sp, #28]
 8026540:	9b08      	ldr	r3, [sp, #32]
 8026542:	3304      	adds	r3, #4
 8026544:	9308      	str	r3, [sp, #32]
 8026546:	e738      	b.n	80263ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026548:	d026      	beq.n	8026598 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802654a:	9b07      	ldr	r3, [sp, #28]
 802654c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802654e:	3b01      	subs	r3, #1
 8026550:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8026552:	fb00 5003 	mla	r0, r0, r3, r5
 8026556:	1400      	asrs	r0, r0, #16
 8026558:	f53f af4c 	bmi.w	80263f4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802655c:	3901      	subs	r1, #1
 802655e:	4288      	cmp	r0, r1
 8026560:	f6bf af48 	bge.w	80263f4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026564:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026566:	9826      	ldr	r0, [sp, #152]	; 0x98
 8026568:	fb01 0303 	mla	r3, r1, r3, r0
 802656c:	141b      	asrs	r3, r3, #16
 802656e:	f53f af41 	bmi.w	80263f4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026572:	3a01      	subs	r2, #1
 8026574:	4293      	cmp	r3, r2
 8026576:	f6bf af3d 	bge.w	80263f4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802657a:	9b08      	ldr	r3, [sp, #32]
 802657c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8026580:	1d18      	adds	r0, r3, #4
 8026582:	f1be 0f00 	cmp.w	lr, #0
 8026586:	f300 808e 	bgt.w	80266a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 802658a:	9b07      	ldr	r3, [sp, #28]
 802658c:	9a08      	ldr	r2, [sp, #32]
 802658e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8026592:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026596:	9308      	str	r3, [sp, #32]
 8026598:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802659a:	2b00      	cmp	r3, #0
 802659c:	f340 8137 	ble.w	802680e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80265a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80265a4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80265a6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80265aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80265ae:	eef0 6a62 	vmov.f32	s13, s5
 80265b2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80265b6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80265ba:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265be:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 80265c2:	eef0 6a43 	vmov.f32	s13, s6
 80265c6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80265ca:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 80265ce:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80265d2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80265d6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80265da:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80265de:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80265e2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80265e6:	ee12 2a90 	vmov	r2, s5
 80265ea:	eef0 2a47 	vmov.f32	s5, s14
 80265ee:	fb92 f3f3 	sdiv	r3, r2, r3
 80265f2:	ee13 2a10 	vmov	r2, s6
 80265f6:	9327      	str	r3, [sp, #156]	; 0x9c
 80265f8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80265fa:	eeb0 3a67 	vmov.f32	s6, s15
 80265fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026602:	9328      	str	r3, [sp, #160]	; 0xa0
 8026604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026608:	3b01      	subs	r3, #1
 802660a:	930a      	str	r3, [sp, #40]	; 0x28
 802660c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802660e:	bf08      	it	eq
 8026610:	4613      	moveq	r3, r2
 8026612:	9307      	str	r3, [sp, #28]
 8026614:	e6c3      	b.n	802639e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8026616:	2c00      	cmp	r4, #0
 8026618:	f43f af7b 	beq.w	8026512 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802661c:	78f0      	ldrb	r0, [r6, #3]
 802661e:	fa5f f989 	uxtb.w	r9, r9
 8026622:	fa5f f888 	uxtb.w	r8, r8
 8026626:	fb04 f100 	mul.w	r1, r4, r0
 802662a:	1822      	adds	r2, r4, r0
 802662c:	b2db      	uxtb	r3, r3
 802662e:	1c4d      	adds	r5, r1, #1
 8026630:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8026634:	1229      	asrs	r1, r5, #8
 8026636:	1a45      	subs	r5, r0, r1
 8026638:	1a52      	subs	r2, r2, r1
 802663a:	7831      	ldrb	r1, [r6, #0]
 802663c:	b2d2      	uxtb	r2, r2
 802663e:	4369      	muls	r1, r5
 8026640:	70f2      	strb	r2, [r6, #3]
 8026642:	fb04 1909 	mla	r9, r4, r9, r1
 8026646:	7871      	ldrb	r1, [r6, #1]
 8026648:	4369      	muls	r1, r5
 802664a:	fb04 1808 	mla	r8, r4, r8, r1
 802664e:	78b1      	ldrb	r1, [r6, #2]
 8026650:	434d      	muls	r5, r1
 8026652:	fb04 5303 	mla	r3, r4, r3, r5
 8026656:	fb99 f9f2 	sdiv	r9, r9, r2
 802665a:	fb98 f8f2 	sdiv	r8, r8, r2
 802665e:	fb93 f3f2 	sdiv	r3, r3, r2
 8026662:	f886 9000 	strb.w	r9, [r6]
 8026666:	f886 8001 	strb.w	r8, [r6, #1]
 802666a:	70b3      	strb	r3, [r6, #2]
 802666c:	e751      	b.n	8026512 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802666e:	f111 0c01 	adds.w	ip, r1, #1
 8026672:	f53f af4e 	bmi.w	8026512 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026676:	4563      	cmp	r3, ip
 8026678:	f6ff af4b 	blt.w	8026512 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802667c:	f110 0c01 	adds.w	ip, r0, #1
 8026680:	f53f af47 	bmi.w	8026512 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026684:	4567      	cmp	r7, ip
 8026686:	f6ff af44 	blt.w	8026512 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802668a:	b23f      	sxth	r7, r7
 802668c:	9101      	str	r1, [sp, #4]
 802668e:	b21b      	sxth	r3, r3
 8026690:	4631      	mov	r1, r6
 8026692:	9700      	str	r7, [sp, #0]
 8026694:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026698:	e9cd 5404 	strd	r5, r4, [sp, #16]
 802669c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802669e:	9819      	ldr	r0, [sp, #100]	; 0x64
 80266a0:	f7ff fd82 	bl	80261a8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>
 80266a4:	e735      	b.n	8026512 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80266a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80266a8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80266aa:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80266ae:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80266b0:	1412      	asrs	r2, r2, #16
 80266b2:	f3c3 3503 	ubfx	r5, r3, #12, #4
 80266b6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80266b8:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 80266bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80266be:	141b      	asrs	r3, r3, #16
 80266c0:	fb0c 2303 	mla	r3, ip, r3, r2
 80266c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80266c6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80266ca:	18d6      	adds	r6, r2, r3
 80266cc:	5cd2      	ldrb	r2, [r2, r3]
 80266ce:	7873      	ldrb	r3, [r6, #1]
 80266d0:	f896 8002 	ldrb.w	r8, [r6, #2]
 80266d4:	930c      	str	r3, [sp, #48]	; 0x30
 80266d6:	f896 a003 	ldrb.w	sl, [r6, #3]
 80266da:	f896 9004 	ldrb.w	r9, [r6, #4]
 80266de:	f896 b005 	ldrb.w	fp, [r6, #5]
 80266e2:	b1a5      	cbz	r5, 802670e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 80266e4:	2703      	movs	r7, #3
 80266e6:	f06f 0304 	mvn.w	r3, #4
 80266ea:	3605      	adds	r6, #5
 80266ec:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 80266f0:	eb06 070c 	add.w	r7, r6, ip
 80266f4:	f816 600c 	ldrb.w	r6, [r6, ip]
 80266f8:	9613      	str	r6, [sp, #76]	; 0x4c
 80266fa:	787e      	ldrb	r6, [r7, #1]
 80266fc:	9615      	str	r6, [sp, #84]	; 0x54
 80266fe:	78be      	ldrb	r6, [r7, #2]
 8026700:	9617      	str	r6, [sp, #92]	; 0x5c
 8026702:	78fe      	ldrb	r6, [r7, #3]
 8026704:	9614      	str	r6, [sp, #80]	; 0x50
 8026706:	793e      	ldrb	r6, [r7, #4]
 8026708:	9616      	str	r6, [sp, #88]	; 0x58
 802670a:	797e      	ldrb	r6, [r7, #5]
 802670c:	9618      	str	r6, [sp, #96]	; 0x60
 802670e:	b289      	uxth	r1, r1
 8026710:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026712:	b2ad      	uxth	r5, r5
 8026714:	2cff      	cmp	r4, #255	; 0xff
 8026716:	fb01 f605 	mul.w	r6, r1, r5
 802671a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 802671e:	ebc6 1505 	rsb	r5, r6, r5, lsl #4
 8026722:	f5c1 7780 	rsb	r7, r1, #256	; 0x100
 8026726:	eba1 0106 	sub.w	r1, r1, r6
 802672a:	b2ad      	uxth	r5, r5
 802672c:	b289      	uxth	r1, r1
 802672e:	eba7 0705 	sub.w	r7, r7, r5
 8026732:	fb01 f909 	mul.w	r9, r1, r9
 8026736:	b2bf      	uxth	r7, r7
 8026738:	fb01 fa0a 	mul.w	sl, r1, sl
 802673c:	fb01 fb0b 	mul.w	fp, r1, fp
 8026740:	fb07 9903 	mla	r9, r7, r3, r9
 8026744:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8026746:	fb07 aa02 	mla	sl, r7, r2, sl
 802674a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802674c:	fb05 9903 	mla	r9, r5, r3, r9
 8026750:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026752:	fb07 bb08 	mla	fp, r7, r8, fp
 8026756:	fb06 9903 	mla	r9, r6, r3, r9
 802675a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802675c:	fb05 aa02 	mla	sl, r5, r2, sl
 8026760:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8026762:	fb05 bb03 	mla	fp, r5, r3, fp
 8026766:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026768:	fb06 aa02 	mla	sl, r6, r2, sl
 802676c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8026770:	fb06 b603 	mla	r6, r6, r3, fp
 8026774:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8026778:	ea4f 2626 	mov.w	r6, r6, asr #8
 802677c:	d113      	bne.n	80267a6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 802677e:	f800 ac04 	strb.w	sl, [r0, #-4]
 8026782:	f800 9c03 	strb.w	r9, [r0, #-3]
 8026786:	f800 6c02 	strb.w	r6, [r0, #-2]
 802678a:	f800 4c01 	strb.w	r4, [r0, #-1]
 802678e:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8026790:	3004      	adds	r0, #4
 8026792:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8026794:	f10e 3eff 	add.w	lr, lr, #4294967295
 8026798:	4413      	add	r3, r2
 802679a:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 802679c:	9325      	str	r3, [sp, #148]	; 0x94
 802679e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80267a0:	4413      	add	r3, r2
 80267a2:	9326      	str	r3, [sp, #152]	; 0x98
 80267a4:	e6ed      	b.n	8026582 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80267a6:	2c00      	cmp	r4, #0
 80267a8:	d0f1      	beq.n	802678e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80267aa:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80267ae:	fa5f fa8a 	uxtb.w	sl, sl
 80267b2:	fa5f f989 	uxtb.w	r9, r9
 80267b6:	fb04 f302 	mul.w	r3, r4, r2
 80267ba:	eb04 0c02 	add.w	ip, r4, r2
 80267be:	b2f6      	uxtb	r6, r6
 80267c0:	1c59      	adds	r1, r3, #1
 80267c2:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80267c6:	120b      	asrs	r3, r1, #8
 80267c8:	1ad1      	subs	r1, r2, r3
 80267ca:	ebac 0c03 	sub.w	ip, ip, r3
 80267ce:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 80267d2:	fa5f fc8c 	uxtb.w	ip, ip
 80267d6:	434b      	muls	r3, r1
 80267d8:	f800 cc01 	strb.w	ip, [r0, #-1]
 80267dc:	fb04 3a0a 	mla	sl, r4, sl, r3
 80267e0:	f810 3c03 	ldrb.w	r3, [r0, #-3]
 80267e4:	434b      	muls	r3, r1
 80267e6:	fb04 3909 	mla	r9, r4, r9, r3
 80267ea:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 80267ee:	4359      	muls	r1, r3
 80267f0:	fb04 1606 	mla	r6, r4, r6, r1
 80267f4:	fb9a fafc 	sdiv	sl, sl, ip
 80267f8:	fb99 f9fc 	sdiv	r9, r9, ip
 80267fc:	fb96 f6fc 	sdiv	r6, r6, ip
 8026800:	f800 ac04 	strb.w	sl, [r0, #-4]
 8026804:	f800 9c03 	strb.w	r9, [r0, #-3]
 8026808:	f800 6c02 	strb.w	r6, [r0, #-2]
 802680c:	e7bf      	b.n	802678e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802680e:	b01b      	add	sp, #108	; 0x6c
 8026810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026814 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>:
 8026814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026818:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
 802681c:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8026820:	fb08 7603 	mla	r6, r8, r3, r7
 8026824:	f1b8 0f00 	cmp.w	r8, #0
 8026828:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 802682c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8026830:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8026834:	6808      	ldr	r0, [r1, #0]
 8026836:	eb02 0e06 	add.w	lr, r2, r6
 802683a:	f2c0 8089 	blt.w	8026950 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802683e:	45c1      	cmp	r9, r8
 8026840:	f340 8086 	ble.w	8026950 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 8026844:	2f00      	cmp	r7, #0
 8026846:	f2c0 8081 	blt.w	802694c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802684a:	42bb      	cmp	r3, r7
 802684c:	dd7e      	ble.n	802694c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802684e:	f89e 4002 	ldrb.w	r4, [lr, #2]
 8026852:	f89e a001 	ldrb.w	sl, [lr, #1]
 8026856:	0424      	lsls	r4, r4, #16
 8026858:	5d92      	ldrb	r2, [r2, r6]
 802685a:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
 802685e:	4314      	orrs	r4, r2
 8026860:	1c7a      	adds	r2, r7, #1
 8026862:	d478      	bmi.n	8026956 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 8026864:	4293      	cmp	r3, r2
 8026866:	dd76      	ble.n	8026956 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 8026868:	2d00      	cmp	r5, #0
 802686a:	d074      	beq.n	8026956 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 802686c:	f89e 6005 	ldrb.w	r6, [lr, #5]
 8026870:	f89e 2004 	ldrb.w	r2, [lr, #4]
 8026874:	0436      	lsls	r6, r6, #16
 8026876:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 802687a:	f89e 2003 	ldrb.w	r2, [lr, #3]
 802687e:	4316      	orrs	r6, r2
 8026880:	f118 0801 	adds.w	r8, r8, #1
 8026884:	d46b      	bmi.n	802695e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 8026886:	45c1      	cmp	r9, r8
 8026888:	dd69      	ble.n	802695e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 802688a:	f1bc 0f00 	cmp.w	ip, #0
 802688e:	d066      	beq.n	802695e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 8026890:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 8026894:	2f00      	cmp	r7, #0
 8026896:	eb0e 0809 	add.w	r8, lr, r9
 802689a:	db5e      	blt.n	802695a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 802689c:	42bb      	cmp	r3, r7
 802689e:	dd5c      	ble.n	802695a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 80268a0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80268a4:	f898 a001 	ldrb.w	sl, [r8, #1]
 80268a8:	0412      	lsls	r2, r2, #16
 80268aa:	f81e e009 	ldrb.w	lr, [lr, r9]
 80268ae:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 80268b2:	ea42 020e 	orr.w	r2, r2, lr
 80268b6:	3701      	adds	r7, #1
 80268b8:	d40c      	bmi.n	80268d4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 80268ba:	42bb      	cmp	r3, r7
 80268bc:	dd0a      	ble.n	80268d4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 80268be:	b14d      	cbz	r5, 80268d4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 80268c0:	f898 0005 	ldrb.w	r0, [r8, #5]
 80268c4:	f898 3004 	ldrb.w	r3, [r8, #4]
 80268c8:	0400      	lsls	r0, r0, #16
 80268ca:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80268ce:	f898 3003 	ldrb.w	r3, [r8, #3]
 80268d2:	4318      	orrs	r0, r3
 80268d4:	b2ad      	uxth	r5, r5
 80268d6:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 80268da:	fa1f f78c 	uxth.w	r7, ip
 80268de:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80268e2:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 80268e6:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80268ea:	fb05 fc07 	mul.w	ip, r5, r7
 80268ee:	012d      	lsls	r5, r5, #4
 80268f0:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 80268f4:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 80268f8:	eba5 050c 	sub.w	r5, r5, ip
 80268fc:	b2bf      	uxth	r7, r7
 80268fe:	b2ad      	uxth	r5, r5
 8026900:	ebae 0e07 	sub.w	lr, lr, r7
 8026904:	436b      	muls	r3, r5
 8026906:	fa1f fe8e 	uxth.w	lr, lr
 802690a:	436e      	muls	r6, r5
 802690c:	fb0e 3808 	mla	r8, lr, r8, r3
 8026910:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026914:	fb0e 6404 	mla	r4, lr, r4, r6
 8026918:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802691c:	fb0c 8803 	mla	r8, ip, r3, r8
 8026920:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026924:	fb0c 4000 	mla	r0, ip, r0, r4
 8026928:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802692c:	fb07 8303 	mla	r3, r7, r3, r8
 8026930:	fb07 0002 	mla	r0, r7, r2, r0
 8026934:	0a1b      	lsrs	r3, r3, #8
 8026936:	0a00      	lsrs	r0, r0, #8
 8026938:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802693c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026940:	4318      	orrs	r0, r3
 8026942:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8026946:	6008      	str	r0, [r1, #0]
 8026948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802694c:	4604      	mov	r4, r0
 802694e:	e787      	b.n	8026860 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x4c>
 8026950:	4606      	mov	r6, r0
 8026952:	4604      	mov	r4, r0
 8026954:	e794      	b.n	8026880 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 8026956:	4606      	mov	r6, r0
 8026958:	e792      	b.n	8026880 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 802695a:	4602      	mov	r2, r0
 802695c:	e7ab      	b.n	80268b6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xa2>
 802695e:	4602      	mov	r2, r0
 8026960:	e7b8      	b.n	80268d4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>

08026962 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026962:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026966:	b09b      	sub	sp, #108	; 0x6c
 8026968:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 802696c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 802696e:	9019      	str	r0, [sp, #100]	; 0x64
 8026970:	9306      	str	r3, [sp, #24]
 8026972:	6850      	ldr	r0, [r2, #4]
 8026974:	6812      	ldr	r2, [r2, #0]
 8026976:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 802697a:	e9dd 4a25 	ldrd	r4, sl, [sp, #148]	; 0x94
 802697e:	fb00 1303 	mla	r3, r0, r3, r1
 8026982:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026986:	9307      	str	r3, [sp, #28]
 8026988:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802698a:	681b      	ldr	r3, [r3, #0]
 802698c:	9308      	str	r3, [sp, #32]
 802698e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026990:	2b00      	cmp	r3, #0
 8026992:	dc03      	bgt.n	802699c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8026994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026996:	2b00      	cmp	r3, #0
 8026998:	f340 81a6 	ble.w	8026ce8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 802699c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802699e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80269a2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80269a6:	1e48      	subs	r0, r1, #1
 80269a8:	1e55      	subs	r5, r2, #1
 80269aa:	9b06      	ldr	r3, [sp, #24]
 80269ac:	2b00      	cmp	r3, #0
 80269ae:	f340 80b0 	ble.w	8026b12 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 80269b2:	1426      	asrs	r6, r4, #16
 80269b4:	ea4f 432a 	mov.w	r3, sl, asr #16
 80269b8:	d406      	bmi.n	80269c8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80269ba:	4286      	cmp	r6, r0
 80269bc:	da04      	bge.n	80269c8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80269be:	2b00      	cmp	r3, #0
 80269c0:	db02      	blt.n	80269c8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80269c2:	42ab      	cmp	r3, r5
 80269c4:	f2c0 80a6 	blt.w	8026b14 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 80269c8:	3601      	adds	r6, #1
 80269ca:	f100 8097 	bmi.w	8026afc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80269ce:	42b1      	cmp	r1, r6
 80269d0:	f2c0 8094 	blt.w	8026afc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80269d4:	3301      	adds	r3, #1
 80269d6:	f100 8091 	bmi.w	8026afc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80269da:	429a      	cmp	r2, r3
 80269dc:	f2c0 808e 	blt.w	8026afc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 80269e0:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 80269e4:	f1bb 0f00 	cmp.w	fp, #0
 80269e8:	f340 80af 	ble.w	8026b4a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80269ec:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80269ee:	ea4f 452a 	mov.w	r5, sl, asr #16
 80269f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80269f4:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80269f8:	68c7      	ldr	r7, [r0, #12]
 80269fa:	1420      	asrs	r0, r4, #16
 80269fc:	f3ca 3103 	ubfx	r1, sl, #12, #4
 8026a00:	689b      	ldr	r3, [r3, #8]
 8026a02:	f100 80e8 	bmi.w	8026bd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026a06:	f103 3cff 	add.w	ip, r3, #4294967295
 8026a0a:	4560      	cmp	r0, ip
 8026a0c:	f280 80e3 	bge.w	8026bd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026a10:	2d00      	cmp	r5, #0
 8026a12:	f2c0 80e0 	blt.w	8026bd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026a16:	f107 3cff 	add.w	ip, r7, #4294967295
 8026a1a:	4565      	cmp	r5, ip
 8026a1c:	f280 80db 	bge.w	8026bd6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8026a20:	b21b      	sxth	r3, r3
 8026a22:	fb05 0003 	mla	r0, r5, r3, r0
 8026a26:	9d08      	ldr	r5, [sp, #32]
 8026a28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8026a2c:	182f      	adds	r7, r5, r0
 8026a2e:	5c28      	ldrb	r0, [r5, r0]
 8026a30:	900b      	str	r0, [sp, #44]	; 0x2c
 8026a32:	7978      	ldrb	r0, [r7, #5]
 8026a34:	787d      	ldrb	r5, [r7, #1]
 8026a36:	f897 e002 	ldrb.w	lr, [r7, #2]
 8026a3a:	f897 9003 	ldrb.w	r9, [r7, #3]
 8026a3e:	f897 8004 	ldrb.w	r8, [r7, #4]
 8026a42:	900c      	str	r0, [sp, #48]	; 0x30
 8026a44:	b1c1      	cbz	r1, 8026a78 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8026a46:	f06f 0c04 	mvn.w	ip, #4
 8026a4a:	2003      	movs	r0, #3
 8026a4c:	3705      	adds	r7, #5
 8026a4e:	fb13 c300 	smlabb	r3, r3, r0, ip
 8026a52:	eb07 0c03 	add.w	ip, r7, r3
 8026a56:	5cfb      	ldrb	r3, [r7, r3]
 8026a58:	930d      	str	r3, [sp, #52]	; 0x34
 8026a5a:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8026a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8026a60:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8026a64:	9311      	str	r3, [sp, #68]	; 0x44
 8026a66:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8026a6a:	930e      	str	r3, [sp, #56]	; 0x38
 8026a6c:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8026a70:	9310      	str	r3, [sp, #64]	; 0x40
 8026a72:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8026a76:	9312      	str	r3, [sp, #72]	; 0x48
 8026a78:	b292      	uxth	r2, r2
 8026a7a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8026a7c:	b289      	uxth	r1, r1
 8026a7e:	fb02 f301 	mul.w	r3, r2, r1
 8026a82:	0112      	lsls	r2, r2, #4
 8026a84:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8026a88:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8026a8c:	1ad2      	subs	r2, r2, r3
 8026a8e:	b289      	uxth	r1, r1
 8026a90:	b292      	uxth	r2, r2
 8026a92:	1a7f      	subs	r7, r7, r1
 8026a94:	fb02 f909 	mul.w	r9, r2, r9
 8026a98:	b2bf      	uxth	r7, r7
 8026a9a:	fb02 f808 	mul.w	r8, r2, r8
 8026a9e:	fb07 9900 	mla	r9, r7, r0, r9
 8026aa2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026aa4:	fb07 8805 	mla	r8, r7, r5, r8
 8026aa8:	fb01 9900 	mla	r9, r1, r0, r9
 8026aac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8026aae:	fb03 9900 	mla	r9, r3, r0, r9
 8026ab2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8026ab4:	fb01 8800 	mla	r8, r1, r0, r8
 8026ab8:	9810      	ldr	r0, [sp, #64]	; 0x40
 8026aba:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8026abe:	fb03 8800 	mla	r8, r3, r0, r8
 8026ac2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8026ac4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026ac8:	4342      	muls	r2, r0
 8026aca:	ea49 0908 	orr.w	r9, r9, r8
 8026ace:	fb07 280e 	mla	r8, r7, lr, r2
 8026ad2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8026ad4:	fb01 8802 	mla	r8, r1, r2, r8
 8026ad8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8026ada:	fb03 8802 	mla	r8, r3, r2, r8
 8026ade:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8026ae2:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8026ae6:	ea49 0308 	orr.w	r3, r9, r8
 8026aea:	6033      	str	r3, [r6, #0]
 8026aec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026aee:	3604      	adds	r6, #4
 8026af0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026af4:	441c      	add	r4, r3
 8026af6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026af8:	449a      	add	sl, r3
 8026afa:	e773      	b.n	80269e4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026afc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026afe:	441c      	add	r4, r3
 8026b00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026b02:	449a      	add	sl, r3
 8026b04:	9b06      	ldr	r3, [sp, #24]
 8026b06:	3b01      	subs	r3, #1
 8026b08:	9306      	str	r3, [sp, #24]
 8026b0a:	9b07      	ldr	r3, [sp, #28]
 8026b0c:	3304      	adds	r3, #4
 8026b0e:	9307      	str	r3, [sp, #28]
 8026b10:	e74b      	b.n	80269aa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026b12:	d021      	beq.n	8026b58 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8026b14:	9b06      	ldr	r3, [sp, #24]
 8026b16:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8026b18:	3b01      	subs	r3, #1
 8026b1a:	fb00 4003 	mla	r0, r0, r3, r4
 8026b1e:	1400      	asrs	r0, r0, #16
 8026b20:	f53f af5e 	bmi.w	80269e0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8026b24:	3901      	subs	r1, #1
 8026b26:	4288      	cmp	r0, r1
 8026b28:	f6bf af5a 	bge.w	80269e0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8026b2c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8026b2e:	fb01 a303 	mla	r3, r1, r3, sl
 8026b32:	141b      	asrs	r3, r3, #16
 8026b34:	f53f af54 	bmi.w	80269e0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8026b38:	3a01      	subs	r2, #1
 8026b3a:	4293      	cmp	r3, r2
 8026b3c:	f6bf af50 	bge.w	80269e0 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8026b40:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8026b44:	f1bc 0f00 	cmp.w	ip, #0
 8026b48:	dc5c      	bgt.n	8026c04 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8026b4a:	9b06      	ldr	r3, [sp, #24]
 8026b4c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8026b50:	9b07      	ldr	r3, [sp, #28]
 8026b52:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8026b56:	9307      	str	r3, [sp, #28]
 8026b58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026b5a:	2b00      	cmp	r3, #0
 8026b5c:	f340 80c4 	ble.w	8026ce8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8026b60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026b64:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026b66:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026b6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026b6e:	eef0 6a62 	vmov.f32	s13, s5
 8026b72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026b76:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026b7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b7e:	ee16 4a90 	vmov	r4, s13
 8026b82:	eef0 6a43 	vmov.f32	s13, s6
 8026b86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026b8a:	ee16 aa90 	vmov	sl, s13
 8026b8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026b92:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026b96:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026b9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026b9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026ba2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026ba6:	ee12 2a90 	vmov	r2, s5
 8026baa:	eef0 2a47 	vmov.f32	s5, s14
 8026bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8026bb2:	ee13 2a10 	vmov	r2, s6
 8026bb6:	9327      	str	r3, [sp, #156]	; 0x9c
 8026bb8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026bba:	eeb0 3a67 	vmov.f32	s6, s15
 8026bbe:	fb92 f3f3 	sdiv	r3, r2, r3
 8026bc2:	9328      	str	r3, [sp, #160]	; 0xa0
 8026bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026bc6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026bc8:	3b01      	subs	r3, #1
 8026bca:	9309      	str	r3, [sp, #36]	; 0x24
 8026bcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8026bce:	bf08      	it	eq
 8026bd0:	4613      	moveq	r3, r2
 8026bd2:	9306      	str	r3, [sp, #24]
 8026bd4:	e6db      	b.n	802698e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8026bd6:	f110 0c01 	adds.w	ip, r0, #1
 8026bda:	d487      	bmi.n	8026aec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026bdc:	4563      	cmp	r3, ip
 8026bde:	db85      	blt.n	8026aec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026be0:	f115 0c01 	adds.w	ip, r5, #1
 8026be4:	d482      	bmi.n	8026aec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026be6:	4567      	cmp	r7, ip
 8026be8:	db80      	blt.n	8026aec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026bea:	b23f      	sxth	r7, r7
 8026bec:	b21b      	sxth	r3, r3
 8026bee:	9700      	str	r7, [sp, #0]
 8026bf0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8026bf4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8026bf8:	9a08      	ldr	r2, [sp, #32]
 8026bfa:	4631      	mov	r1, r6
 8026bfc:	9819      	ldr	r0, [sp, #100]	; 0x64
 8026bfe:	f7ff fe09 	bl	8026814 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>
 8026c02:	e773      	b.n	8026aec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026c04:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8026c06:	1420      	asrs	r0, r4, #16
 8026c08:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8026c0c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8026c10:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8026c14:	ea4f 412a 	mov.w	r1, sl, asr #16
 8026c18:	930b      	str	r3, [sp, #44]	; 0x2c
 8026c1a:	fb07 0101 	mla	r1, r7, r1, r0
 8026c1e:	9808      	ldr	r0, [sp, #32]
 8026c20:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8026c24:	1845      	adds	r5, r0, r1
 8026c26:	5c41      	ldrb	r1, [r0, r1]
 8026c28:	78ae      	ldrb	r6, [r5, #2]
 8026c2a:	7868      	ldrb	r0, [r5, #1]
 8026c2c:	960c      	str	r6, [sp, #48]	; 0x30
 8026c2e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8026c32:	f895 8004 	ldrb.w	r8, [r5, #4]
 8026c36:	f895 b005 	ldrb.w	fp, [r5, #5]
 8026c3a:	b192      	cbz	r2, 8026c62 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8026c3c:	2603      	movs	r6, #3
 8026c3e:	f06f 0304 	mvn.w	r3, #4
 8026c42:	3505      	adds	r5, #5
 8026c44:	fb17 3706 	smlabb	r7, r7, r6, r3
 8026c48:	19ee      	adds	r6, r5, r7
 8026c4a:	5ded      	ldrb	r5, [r5, r7]
 8026c4c:	9513      	str	r5, [sp, #76]	; 0x4c
 8026c4e:	7875      	ldrb	r5, [r6, #1]
 8026c50:	9515      	str	r5, [sp, #84]	; 0x54
 8026c52:	78b5      	ldrb	r5, [r6, #2]
 8026c54:	9517      	str	r5, [sp, #92]	; 0x5c
 8026c56:	78f5      	ldrb	r5, [r6, #3]
 8026c58:	9514      	str	r5, [sp, #80]	; 0x50
 8026c5a:	7935      	ldrb	r5, [r6, #4]
 8026c5c:	9516      	str	r5, [sp, #88]	; 0x58
 8026c5e:	7975      	ldrb	r5, [r6, #5]
 8026c60:	9518      	str	r5, [sp, #96]	; 0x60
 8026c62:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8026c66:	b292      	uxth	r2, r2
 8026c68:	f10c 3cff 	add.w	ip, ip, #4294967295
 8026c6c:	fb03 f502 	mul.w	r5, r3, r2
 8026c70:	011b      	lsls	r3, r3, #4
 8026c72:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8026c76:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8026c7a:	1b5b      	subs	r3, r3, r5
 8026c7c:	b292      	uxth	r2, r2
 8026c7e:	b29b      	uxth	r3, r3
 8026c80:	1ab6      	subs	r6, r6, r2
 8026c82:	fb03 f909 	mul.w	r9, r3, r9
 8026c86:	b2b6      	uxth	r6, r6
 8026c88:	fb03 f808 	mul.w	r8, r3, r8
 8026c8c:	fb03 fb0b 	mul.w	fp, r3, fp
 8026c90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026c92:	fb06 9901 	mla	r9, r6, r1, r9
 8026c96:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8026c98:	fb06 8800 	mla	r8, r6, r0, r8
 8026c9c:	fb02 9901 	mla	r9, r2, r1, r9
 8026ca0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8026ca2:	fb06 bb03 	mla	fp, r6, r3, fp
 8026ca6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8026ca8:	fb05 9901 	mla	r9, r5, r1, r9
 8026cac:	9915      	ldr	r1, [sp, #84]	; 0x54
 8026cae:	fb02 bb03 	mla	fp, r2, r3, fp
 8026cb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026cb4:	fb02 8801 	mla	r8, r2, r1, r8
 8026cb8:	9916      	ldr	r1, [sp, #88]	; 0x58
 8026cba:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8026cbe:	fb05 8801 	mla	r8, r5, r1, r8
 8026cc2:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026cc6:	ea49 0908 	orr.w	r9, r9, r8
 8026cca:	fb05 b803 	mla	r8, r5, r3, fp
 8026cce:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8026cd0:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8026cd4:	441c      	add	r4, r3
 8026cd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8026cd8:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8026cdc:	449a      	add	sl, r3
 8026cde:	ea49 0508 	orr.w	r5, r9, r8
 8026ce2:	f84e 5b04 	str.w	r5, [lr], #4
 8026ce6:	e72d      	b.n	8026b44 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8026ce8:	b01b      	add	sp, #108	; 0x6c
 8026cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026cee <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>:
 8026cee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cf2:	b085      	sub	sp, #20
 8026cf4:	6808      	ldr	r0, [r1, #0]
 8026cf6:	e9dd 680f 	ldrd	r6, r8, [sp, #60]	; 0x3c
 8026cfa:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
 8026cfe:	fb08 6403 	mla	r4, r8, r3, r6
 8026d02:	f1b8 0f00 	cmp.w	r8, #0
 8026d06:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8026d0a:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
 8026d0e:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 8026d12:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8026d16:	f2c0 80fc 	blt.w	8026f12 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 8026d1a:	45c2      	cmp	sl, r8
 8026d1c:	f340 80f9 	ble.w	8026f12 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 8026d20:	2e00      	cmp	r6, #0
 8026d22:	f2c0 80f4 	blt.w	8026f0e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 8026d26:	42b3      	cmp	r3, r6
 8026d28:	f340 80f1 	ble.w	8026f0e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 8026d2c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8026d30:	1c72      	adds	r2, r6, #1
 8026d32:	f100 80ef 	bmi.w	8026f14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8026d36:	4293      	cmp	r3, r2
 8026d38:	f340 80ec 	ble.w	8026f14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8026d3c:	f1bc 0f00 	cmp.w	ip, #0
 8026d40:	f000 80e8 	beq.w	8026f14 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8026d44:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8026d48:	f118 0801 	adds.w	r8, r8, #1
 8026d4c:	f100 80e6 	bmi.w	8026f1c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8026d50:	45c2      	cmp	sl, r8
 8026d52:	f340 80e3 	ble.w	8026f1c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8026d56:	f1be 0f00 	cmp.w	lr, #0
 8026d5a:	f000 80df 	beq.w	8026f1c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8026d5e:	2e00      	cmp	r6, #0
 8026d60:	f2c0 80da 	blt.w	8026f18 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 8026d64:	42b3      	cmp	r3, r6
 8026d66:	f340 80d7 	ble.w	8026f18 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 8026d6a:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 8026d6e:	3601      	adds	r6, #1
 8026d70:	d407      	bmi.n	8026d82 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8026d72:	42b3      	cmp	r3, r6
 8026d74:	dd05      	ble.n	8026d82 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8026d76:	f1bc 0f00 	cmp.w	ip, #0
 8026d7a:	d002      	beq.n	8026d82 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8026d7c:	3301      	adds	r3, #1
 8026d7e:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8026d82:	fa1f fc8c 	uxth.w	ip, ip
 8026d86:	fa1f f38e 	uxth.w	r3, lr
 8026d8a:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8026d8e:	fb03 fe0c 	mul.w	lr, r3, ip
 8026d92:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8026d96:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8026d9a:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 8026d9e:	ebac 060e 	sub.w	r6, ip, lr
 8026da2:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 8026da6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8026daa:	b29b      	uxth	r3, r3
 8026dac:	b2b6      	uxth	r6, r6
 8026dae:	ebac 0c03 	sub.w	ip, ip, r3
 8026db2:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8026db6:	9601      	str	r6, [sp, #4]
 8026db8:	fa1f f68c 	uxth.w	r6, ip
 8026dbc:	9602      	str	r6, [sp, #8]
 8026dbe:	9e01      	ldr	r6, [sp, #4]
 8026dc0:	fb06 fc0a 	mul.w	ip, r6, sl
 8026dc4:	9e02      	ldr	r6, [sp, #8]
 8026dc6:	fb06 cc0b 	mla	ip, r6, fp, ip
 8026dca:	fb03 cc09 	mla	ip, r3, r9, ip
 8026dce:	fb0e cc08 	mla	ip, lr, r8, ip
 8026dd2:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8026dd6:	9603      	str	r6, [sp, #12]
 8026dd8:	2e00      	cmp	r6, #0
 8026dda:	f000 8095 	beq.w	8026f08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 8026dde:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8026de2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026de6:	fb0b fc0c 	mul.w	ip, fp, ip
 8026dea:	fb0b f505 	mul.w	r5, fp, r5
 8026dee:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8026df2:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026df6:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8026dfa:	44dc      	add	ip, fp
 8026dfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026e00:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8026e04:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8026e08:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8026e0c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8026e10:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026e14:	fb0a fc0c 	mul.w	ip, sl, ip
 8026e18:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8026e1c:	fb0a fa04 	mul.w	sl, sl, r4
 8026e20:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8026e24:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026e28:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8026e2c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8026e30:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026e34:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8026e38:	4465      	add	r5, ip
 8026e3a:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 8026e3e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026e42:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8026e46:	fb09 fc0c 	mul.w	ip, r9, ip
 8026e4a:	0a2d      	lsrs	r5, r5, #8
 8026e4c:	fb09 f902 	mul.w	r9, r9, r2
 8026e50:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8026e54:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8026e58:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8026e5c:	f509 7280 	add.w	r2, r9, #256	; 0x100
 8026e60:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8026e64:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026e68:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8026e6c:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 8026e70:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026e74:	4464      	add	r4, ip
 8026e76:	fb08 f202 	mul.w	r2, r8, r2
 8026e7a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8026e7e:	fb08 f800 	mul.w	r8, r8, r0
 8026e82:	0a24      	lsrs	r4, r4, #8
 8026e84:	0a10      	lsrs	r0, r2, #8
 8026e86:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8026e8a:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026e8e:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8026e92:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8026e96:	4402      	add	r2, r0
 8026e98:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8026e9c:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8026ea0:	9801      	ldr	r0, [sp, #4]
 8026ea2:	0a12      	lsrs	r2, r2, #8
 8026ea4:	4345      	muls	r5, r0
 8026ea6:	9802      	ldr	r0, [sp, #8]
 8026ea8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8026eac:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8026eb0:	fb06 5500 	mla	r5, r6, r0, r5
 8026eb4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8026eb8:	fb02 520e 	mla	r2, r2, lr, r5
 8026ebc:	fb04 2403 	mla	r4, r4, r3, r2
 8026ec0:	9a01      	ldr	r2, [sp, #4]
 8026ec2:	fb02 f60a 	mul.w	r6, r2, sl
 8026ec6:	0a24      	lsrs	r4, r4, #8
 8026ec8:	9a03      	ldr	r2, [sp, #12]
 8026eca:	fb00 660b 	mla	r6, r0, fp, r6
 8026ece:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8026ed2:	fb07 fc02 	mul.w	ip, r7, r2
 8026ed6:	fb0e 6e08 	mla	lr, lr, r8, r6
 8026eda:	fb03 e309 	mla	r3, r3, r9, lr
 8026ede:	0a1b      	lsrs	r3, r3, #8
 8026ee0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8026ee4:	4323      	orrs	r3, r4
 8026ee6:	f10c 0401 	add.w	r4, ip, #1
 8026eea:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8026eee:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8026ef2:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8026ef6:	1224      	asrs	r4, r4, #8
 8026ef8:	b2d5      	uxtb	r5, r2
 8026efa:	2cff      	cmp	r4, #255	; 0xff
 8026efc:	b2c6      	uxtb	r6, r0
 8026efe:	d10f      	bne.n	8026f20 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x232>
 8026f00:	700b      	strb	r3, [r1, #0]
 8026f02:	7048      	strb	r0, [r1, #1]
 8026f04:	708a      	strb	r2, [r1, #2]
 8026f06:	70cc      	strb	r4, [r1, #3]
 8026f08:	b005      	add	sp, #20
 8026f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f0e:	4605      	mov	r5, r0
 8026f10:	e70e      	b.n	8026d30 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x42>
 8026f12:	4605      	mov	r5, r0
 8026f14:	4604      	mov	r4, r0
 8026f16:	e717      	b.n	8026d48 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x5a>
 8026f18:	4602      	mov	r2, r0
 8026f1a:	e728      	b.n	8026d6e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x80>
 8026f1c:	4602      	mov	r2, r0
 8026f1e:	e730      	b.n	8026d82 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8026f20:	b2e2      	uxtb	r2, r4
 8026f22:	2c00      	cmp	r4, #0
 8026f24:	d0f0      	beq.n	8026f08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 8026f26:	78cc      	ldrb	r4, [r1, #3]
 8026f28:	b2db      	uxtb	r3, r3
 8026f2a:	fb17 f606 	smulbb	r6, r7, r6
 8026f2e:	fb02 fc04 	mul.w	ip, r2, r4
 8026f32:	4422      	add	r2, r4
 8026f34:	f10c 0001 	add.w	r0, ip, #1
 8026f38:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8026f3c:	1200      	asrs	r0, r0, #8
 8026f3e:	1a24      	subs	r4, r4, r0
 8026f40:	1a12      	subs	r2, r2, r0
 8026f42:	7808      	ldrb	r0, [r1, #0]
 8026f44:	b2d2      	uxtb	r2, r2
 8026f46:	4360      	muls	r0, r4
 8026f48:	70ca      	strb	r2, [r1, #3]
 8026f4a:	fb07 0303 	mla	r3, r7, r3, r0
 8026f4e:	7848      	ldrb	r0, [r1, #1]
 8026f50:	fb17 f705 	smulbb	r7, r7, r5
 8026f54:	fb04 6000 	mla	r0, r4, r0, r6
 8026f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8026f5c:	2bff      	cmp	r3, #255	; 0xff
 8026f5e:	bfd6      	itet	le
 8026f60:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8026f64:	23ff      	movgt	r3, #255	; 0xff
 8026f66:	b2db      	uxtble	r3, r3
 8026f68:	fb90 f0f2 	sdiv	r0, r0, r2
 8026f6c:	700b      	strb	r3, [r1, #0]
 8026f6e:	28ff      	cmp	r0, #255	; 0xff
 8026f70:	788b      	ldrb	r3, [r1, #2]
 8026f72:	bfd4      	ite	le
 8026f74:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8026f78:	20ff      	movgt	r0, #255	; 0xff
 8026f7a:	fb04 7303 	mla	r3, r4, r3, r7
 8026f7e:	bfd8      	it	le
 8026f80:	b2c0      	uxtble	r0, r0
 8026f82:	fb93 f3f2 	sdiv	r3, r3, r2
 8026f86:	2bff      	cmp	r3, #255	; 0xff
 8026f88:	7048      	strb	r0, [r1, #1]
 8026f8a:	bfd6      	itet	le
 8026f8c:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8026f90:	23ff      	movgt	r3, #255	; 0xff
 8026f92:	b2db      	uxtble	r3, r3
 8026f94:	708b      	strb	r3, [r1, #2]
 8026f96:	e7b7      	b.n	8026f08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>

08026f98 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026f9c:	b09b      	sub	sp, #108	; 0x6c
 8026f9e:	9218      	str	r2, [sp, #96]	; 0x60
 8026fa0:	9306      	str	r3, [sp, #24]
 8026fa2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8026fa4:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8026fa8:	9019      	str	r0, [sp, #100]	; 0x64
 8026faa:	9116      	str	r1, [sp, #88]	; 0x58
 8026fac:	6850      	ldr	r0, [r2, #4]
 8026fae:	9307      	str	r3, [sp, #28]
 8026fb0:	6812      	ldr	r2, [r2, #0]
 8026fb2:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8026fb6:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8026fba:	fb00 1303 	mla	r3, r0, r3, r1
 8026fbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8026fc2:	930a      	str	r3, [sp, #40]	; 0x28
 8026fc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026fc6:	681b      	ldr	r3, [r3, #0]
 8026fc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8026fca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026fcc:	2b00      	cmp	r3, #0
 8026fce:	dc03      	bgt.n	8026fd8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8026fd0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026fd2:	2b00      	cmp	r3, #0
 8026fd4:	f340 83b3 	ble.w	802773e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 8026fd8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8026fda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026fde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026fe2:	1e48      	subs	r0, r1, #1
 8026fe4:	1e57      	subs	r7, r2, #1
 8026fe6:	9b06      	ldr	r3, [sp, #24]
 8026fe8:	2b00      	cmp	r3, #0
 8026fea:	f340 8167 	ble.w	80272bc <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8026fee:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8026ff2:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026ff6:	d406      	bmi.n	8027006 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026ff8:	4584      	cmp	ip, r0
 8026ffa:	da04      	bge.n	8027006 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8026ffc:	2b00      	cmp	r3, #0
 8026ffe:	db02      	blt.n	8027006 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027000:	42bb      	cmp	r3, r7
 8027002:	f2c0 815c 	blt.w	80272be <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8027006:	f11c 0c01 	adds.w	ip, ip, #1
 802700a:	f100 814c 	bmi.w	80272a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802700e:	4561      	cmp	r1, ip
 8027010:	f2c0 8149 	blt.w	80272a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027014:	3301      	adds	r3, #1
 8027016:	f100 8146 	bmi.w	80272a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 802701a:	429a      	cmp	r2, r3
 802701c:	f2c0 8143 	blt.w	80272a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027020:	9b06      	ldr	r3, [sp, #24]
 8027022:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027024:	9317      	str	r3, [sp, #92]	; 0x5c
 8027026:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027028:	2b00      	cmp	r3, #0
 802702a:	f340 8165 	ble.w	80272f8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 802702e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8027030:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027034:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027036:	f3c4 3003 	ubfx	r0, r4, #12, #4
 802703a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802703e:	1422      	asrs	r2, r4, #16
 8027040:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027044:	689b      	ldr	r3, [r3, #8]
 8027046:	f100 81e7 	bmi.w	8027418 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802704a:	f103 38ff 	add.w	r8, r3, #4294967295
 802704e:	4542      	cmp	r2, r8
 8027050:	f280 81e2 	bge.w	8027418 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027054:	f1bc 0f00 	cmp.w	ip, #0
 8027058:	f2c0 81de 	blt.w	8027418 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 802705c:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027060:	45c4      	cmp	ip, r8
 8027062:	f280 81d9 	bge.w	8027418 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027066:	b21b      	sxth	r3, r3
 8027068:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802706a:	fb0c 2203 	mla	r2, ip, r3, r2
 802706e:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027072:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027076:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802707a:	2800      	cmp	r0, #0
 802707c:	f000 8182 	beq.w	8027384 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8027080:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027084:	950b      	str	r5, [sp, #44]	; 0x2c
 8027086:	0e2d      	lsrs	r5, r5, #24
 8027088:	9512      	str	r5, [sp, #72]	; 0x48
 802708a:	b181      	cbz	r1, 80270ae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802708c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027090:	3b01      	subs	r3, #1
 8027092:	009b      	lsls	r3, r3, #2
 8027094:	3304      	adds	r3, #4
 8027096:	eb08 0c03 	add.w	ip, r8, r3
 802709a:	f858 3003 	ldr.w	r3, [r8, r3]
 802709e:	9308      	str	r3, [sp, #32]
 80270a0:	0e1b      	lsrs	r3, r3, #24
 80270a2:	9310      	str	r3, [sp, #64]	; 0x40
 80270a4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80270a8:	930c      	str	r3, [sp, #48]	; 0x30
 80270aa:	0e1b      	lsrs	r3, r3, #24
 80270ac:	9313      	str	r3, [sp, #76]	; 0x4c
 80270ae:	b280      	uxth	r0, r0
 80270b0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80270b2:	b289      	uxth	r1, r1
 80270b4:	fb00 f901 	mul.w	r9, r0, r1
 80270b8:	0100      	lsls	r0, r0, #4
 80270ba:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 80270be:	eba0 0809 	sub.w	r8, r0, r9
 80270c2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 80270c6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80270c8:	b289      	uxth	r1, r1
 80270ca:	fa1f f888 	uxth.w	r8, r8
 80270ce:	1a5b      	subs	r3, r3, r1
 80270d0:	fb08 f000 	mul.w	r0, r8, r0
 80270d4:	b29b      	uxth	r3, r3
 80270d6:	fb03 000e 	mla	r0, r3, lr, r0
 80270da:	fb01 0005 	mla	r0, r1, r5, r0
 80270de:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80270e0:	fb09 0005 	mla	r0, r9, r5, r0
 80270e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80270e8:	2800      	cmp	r0, #0
 80270ea:	f000 80d3 	beq.w	8027294 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80270ee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80270f2:	d01b      	beq.n	802712c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 80270f4:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80270f8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80270fc:	fb0e fa0a 	mul.w	sl, lr, sl
 8027100:	fb0e fe02 	mul.w	lr, lr, r2
 8027104:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8027108:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802710c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027110:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027114:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027118:	4452      	add	r2, sl
 802711a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802711e:	0a12      	lsrs	r2, r2, #8
 8027120:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027124:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027128:	ea42 020c 	orr.w	r2, r2, ip
 802712c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802712e:	2dff      	cmp	r5, #255	; 0xff
 8027130:	d021      	beq.n	8027176 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8027132:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027134:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027138:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802713a:	fb05 fb0b 	mul.w	fp, r5, fp
 802713e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027140:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027144:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8027146:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802714a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802714e:	fb05 fa0a 	mul.w	sl, r5, sl
 8027152:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027156:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802715a:	44de      	add	lr, fp
 802715c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027160:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027164:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027168:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802716c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027170:	ea4e 050a 	orr.w	r5, lr, sl
 8027174:	950b      	str	r5, [sp, #44]	; 0x2c
 8027176:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027178:	2dff      	cmp	r5, #255	; 0xff
 802717a:	d021      	beq.n	80271c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 802717c:	9d08      	ldr	r5, [sp, #32]
 802717e:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8027182:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027184:	fb05 fb0b 	mul.w	fp, r5, fp
 8027188:	9d08      	ldr	r5, [sp, #32]
 802718a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802718e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8027190:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8027194:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8027198:	fb05 fa0a 	mul.w	sl, r5, sl
 802719c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271a0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80271a4:	44de      	add	lr, fp
 80271a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80271aa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271b2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80271ba:	ea4e 050a 	orr.w	r5, lr, sl
 80271be:	9508      	str	r5, [sp, #32]
 80271c0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80271c2:	2dff      	cmp	r5, #255	; 0xff
 80271c4:	d021      	beq.n	802720a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 80271c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80271c8:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80271cc:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80271ce:	fb05 fb0b 	mul.w	fp, r5, fp
 80271d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80271d4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80271d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80271da:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80271de:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80271e2:	fb05 fa0a 	mul.w	sl, r5, sl
 80271e6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80271ea:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80271ee:	44de      	add	lr, fp
 80271f0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80271f4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80271f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80271fc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027200:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027204:	ea4e 050a 	orr.w	r5, lr, sl
 8027208:	950c      	str	r5, [sp, #48]	; 0x30
 802720a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802720c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8027210:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027214:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027218:	9d08      	ldr	r5, [sp, #32]
 802721a:	fb08 fc0c 	mul.w	ip, r8, ip
 802721e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8027222:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8027228:	fb01 cc0e 	mla	ip, r1, lr, ip
 802722c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027230:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8027232:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027236:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802723a:	fb08 f80e 	mul.w	r8, r8, lr
 802723e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027242:	fb03 8202 	mla	r2, r3, r2, r8
 8027246:	9b08      	ldr	r3, [sp, #32]
 8027248:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802724c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 8027250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027252:	fb01 220a 	mla	r2, r1, sl, r2
 8027256:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 802725a:	9b07      	ldr	r3, [sp, #28]
 802725c:	fb09 2901 	mla	r9, r9, r1, r2
 8027260:	4358      	muls	r0, r3
 8027262:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027266:	1c43      	adds	r3, r0, #1
 8027268:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 802726c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027270:	ea4c 0c09 	orr.w	ip, ip, r9
 8027274:	1200      	asrs	r0, r0, #8
 8027276:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802727a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802727e:	28ff      	cmp	r0, #255	; 0xff
 8027280:	b2d9      	uxtb	r1, r3
 8027282:	fa5f fe82 	uxtb.w	lr, r2
 8027286:	f040 8086 	bne.w	8027396 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 802728a:	f887 c000 	strb.w	ip, [r7]
 802728e:	707a      	strb	r2, [r7, #1]
 8027290:	70bb      	strb	r3, [r7, #2]
 8027292:	70f8      	strb	r0, [r7, #3]
 8027294:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027296:	3704      	adds	r7, #4
 8027298:	441c      	add	r4, r3
 802729a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802729c:	441e      	add	r6, r3
 802729e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80272a0:	3b01      	subs	r3, #1
 80272a2:	9317      	str	r3, [sp, #92]	; 0x5c
 80272a4:	e6bf      	b.n	8027026 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80272a6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80272a8:	441c      	add	r4, r3
 80272aa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80272ac:	441e      	add	r6, r3
 80272ae:	9b06      	ldr	r3, [sp, #24]
 80272b0:	3b01      	subs	r3, #1
 80272b2:	9306      	str	r3, [sp, #24]
 80272b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80272b6:	3304      	adds	r3, #4
 80272b8:	930a      	str	r3, [sp, #40]	; 0x28
 80272ba:	e694      	b.n	8026fe6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80272bc:	d023      	beq.n	8027306 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80272be:	9b06      	ldr	r3, [sp, #24]
 80272c0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80272c2:	3b01      	subs	r3, #1
 80272c4:	fb00 4003 	mla	r0, r0, r3, r4
 80272c8:	1400      	asrs	r0, r0, #16
 80272ca:	f53f aea9 	bmi.w	8027020 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80272ce:	3901      	subs	r1, #1
 80272d0:	4288      	cmp	r0, r1
 80272d2:	f6bf aea5 	bge.w	8027020 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80272d6:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80272d8:	fb01 6303 	mla	r3, r1, r3, r6
 80272dc:	141b      	asrs	r3, r3, #16
 80272de:	f53f ae9f 	bmi.w	8027020 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80272e2:	3a01      	subs	r2, #1
 80272e4:	4293      	cmp	r3, r2
 80272e6:	f6bf ae9b 	bge.w	8027020 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 80272ea:	f8dd b018 	ldr.w	fp, [sp, #24]
 80272ee:	990a      	ldr	r1, [sp, #40]	; 0x28
 80272f0:	f1bb 0f00 	cmp.w	fp, #0
 80272f4:	f300 80ae 	bgt.w	8027454 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 80272f8:	9b06      	ldr	r3, [sp, #24]
 80272fa:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80272fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027300:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8027304:	930a      	str	r3, [sp, #40]	; 0x28
 8027306:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027308:	2b00      	cmp	r3, #0
 802730a:	f340 8218 	ble.w	802773e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 802730e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027312:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027314:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027318:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802731c:	eef0 6a62 	vmov.f32	s13, s5
 8027320:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027324:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027328:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802732c:	ee16 4a90 	vmov	r4, s13
 8027330:	eef0 6a43 	vmov.f32	s13, s6
 8027334:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027338:	ee16 6a90 	vmov	r6, s13
 802733c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027340:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027344:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027348:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802734c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027350:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027354:	ee12 2a90 	vmov	r2, s5
 8027358:	eef0 2a47 	vmov.f32	s5, s14
 802735c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027360:	ee13 2a10 	vmov	r2, s6
 8027364:	9327      	str	r3, [sp, #156]	; 0x9c
 8027366:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027368:	eeb0 3a67 	vmov.f32	s6, s15
 802736c:	fb92 f3f3 	sdiv	r3, r2, r3
 8027370:	9328      	str	r3, [sp, #160]	; 0xa0
 8027372:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027374:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8027376:	3b01      	subs	r3, #1
 8027378:	9316      	str	r3, [sp, #88]	; 0x58
 802737a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802737c:	bf08      	it	eq
 802737e:	4613      	moveq	r3, r2
 8027380:	9306      	str	r3, [sp, #24]
 8027382:	e622      	b.n	8026fca <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8027384:	2900      	cmp	r1, #0
 8027386:	f43f ae92 	beq.w	80270ae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 802738a:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802738e:	9308      	str	r3, [sp, #32]
 8027390:	0e1b      	lsrs	r3, r3, #24
 8027392:	9310      	str	r3, [sp, #64]	; 0x40
 8027394:	e68b      	b.n	80270ae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8027396:	b2c3      	uxtb	r3, r0
 8027398:	2800      	cmp	r0, #0
 802739a:	f43f af7b 	beq.w	8027294 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802739e:	78f8      	ldrb	r0, [r7, #3]
 80273a0:	fa5f fc8c 	uxtb.w	ip, ip
 80273a4:	9d07      	ldr	r5, [sp, #28]
 80273a6:	fb03 f800 	mul.w	r8, r3, r0
 80273aa:	4403      	add	r3, r0
 80273ac:	f108 0201 	add.w	r2, r8, #1
 80273b0:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 80273b4:	1212      	asrs	r2, r2, #8
 80273b6:	1a80      	subs	r0, r0, r2
 80273b8:	1a9b      	subs	r3, r3, r2
 80273ba:	783a      	ldrb	r2, [r7, #0]
 80273bc:	b2db      	uxtb	r3, r3
 80273be:	4342      	muls	r2, r0
 80273c0:	70fb      	strb	r3, [r7, #3]
 80273c2:	fb05 220c 	mla	r2, r5, ip, r2
 80273c6:	9d07      	ldr	r5, [sp, #28]
 80273c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80273cc:	fb15 fe0e 	smulbb	lr, r5, lr
 80273d0:	2aff      	cmp	r2, #255	; 0xff
 80273d2:	9d07      	ldr	r5, [sp, #28]
 80273d4:	bfd4      	ite	le
 80273d6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80273da:	22ff      	movgt	r2, #255	; 0xff
 80273dc:	fb15 f101 	smulbb	r1, r5, r1
 80273e0:	bfd8      	it	le
 80273e2:	b2d2      	uxtble	r2, r2
 80273e4:	703a      	strb	r2, [r7, #0]
 80273e6:	787a      	ldrb	r2, [r7, #1]
 80273e8:	fb00 e202 	mla	r2, r0, r2, lr
 80273ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80273f0:	2aff      	cmp	r2, #255	; 0xff
 80273f2:	bfd6      	itet	le
 80273f4:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80273f8:	22ff      	movgt	r2, #255	; 0xff
 80273fa:	b2d2      	uxtble	r2, r2
 80273fc:	707a      	strb	r2, [r7, #1]
 80273fe:	78ba      	ldrb	r2, [r7, #2]
 8027400:	fb00 1202 	mla	r2, r0, r2, r1
 8027404:	fb92 f2f3 	sdiv	r2, r2, r3
 8027408:	2aff      	cmp	r2, #255	; 0xff
 802740a:	bfd6      	itet	le
 802740c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027410:	22ff      	movgt	r2, #255	; 0xff
 8027412:	b2d2      	uxtble	r2, r2
 8027414:	70ba      	strb	r2, [r7, #2]
 8027416:	e73d      	b.n	8027294 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027418:	f112 0801 	adds.w	r8, r2, #1
 802741c:	f53f af3a 	bmi.w	8027294 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027420:	4543      	cmp	r3, r8
 8027422:	f6ff af37 	blt.w	8027294 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027426:	f11c 0801 	adds.w	r8, ip, #1
 802742a:	f53f af33 	bmi.w	8027294 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802742e:	45c6      	cmp	lr, r8
 8027430:	f6ff af30 	blt.w	8027294 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027434:	9d07      	ldr	r5, [sp, #28]
 8027436:	b21b      	sxth	r3, r3
 8027438:	9201      	str	r2, [sp, #4]
 802743a:	fa0f f28e 	sxth.w	r2, lr
 802743e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8027442:	e9cd c002 	strd	ip, r0, [sp, #8]
 8027446:	9200      	str	r2, [sp, #0]
 8027448:	4639      	mov	r1, r7
 802744a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802744c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802744e:	f7ff fc4e 	bl	8026cee <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>
 8027452:	e71f      	b.n	8027294 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027454:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027456:	ea4f 4c24 	mov.w	ip, r4, asr #16
 802745a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802745c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027460:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8027464:	1433      	asrs	r3, r6, #16
 8027466:	f3c6 3703 	ubfx	r7, r6, #12, #4
 802746a:	fb00 c303 	mla	r3, r0, r3, ip
 802746e:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 8027472:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8027476:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802747a:	2a00      	cmp	r2, #0
 802747c:	f000 8111 	beq.w	80276a2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 8027480:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8027484:	950d      	str	r5, [sp, #52]	; 0x34
 8027486:	0e2d      	lsrs	r5, r5, #24
 8027488:	9514      	str	r5, [sp, #80]	; 0x50
 802748a:	b187      	cbz	r7, 80274ae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802748c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8027490:	3801      	subs	r0, #1
 8027492:	0080      	lsls	r0, r0, #2
 8027494:	3004      	adds	r0, #4
 8027496:	eb0c 0800 	add.w	r8, ip, r0
 802749a:	f85c 0000 	ldr.w	r0, [ip, r0]
 802749e:	9009      	str	r0, [sp, #36]	; 0x24
 80274a0:	0e00      	lsrs	r0, r0, #24
 80274a2:	9011      	str	r0, [sp, #68]	; 0x44
 80274a4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80274a8:	900e      	str	r0, [sp, #56]	; 0x38
 80274aa:	0e00      	lsrs	r0, r0, #24
 80274ac:	9015      	str	r0, [sp, #84]	; 0x54
 80274ae:	b292      	uxth	r2, r2
 80274b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80274b2:	b2bf      	uxth	r7, r7
 80274b4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80274b6:	fb02 f907 	mul.w	r9, r2, r7
 80274ba:	0112      	lsls	r2, r2, #4
 80274bc:	ebc9 1707 	rsb	r7, r9, r7, lsl #4
 80274c0:	eba2 0809 	sub.w	r8, r2, r9
 80274c4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 80274c8:	b2bf      	uxth	r7, r7
 80274ca:	fa1f f888 	uxth.w	r8, r8
 80274ce:	1bd2      	subs	r2, r2, r7
 80274d0:	fb08 f000 	mul.w	r0, r8, r0
 80274d4:	b292      	uxth	r2, r2
 80274d6:	fb02 000e 	mla	r0, r2, lr, r0
 80274da:	fb07 0005 	mla	r0, r7, r5, r0
 80274de:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80274e0:	fb09 0005 	mla	r0, r9, r5, r0
 80274e4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80274e8:	2800      	cmp	r0, #0
 80274ea:	f000 80d2 	beq.w	8027692 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80274ee:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80274f2:	d01b      	beq.n	802752c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 80274f4:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80274f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80274fc:	fb0e fa0a 	mul.w	sl, lr, sl
 8027500:	fb0e fe03 	mul.w	lr, lr, r3
 8027504:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8027508:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802750c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8027510:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027514:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8027518:	4453      	add	r3, sl
 802751a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802751e:	0a1b      	lsrs	r3, r3, #8
 8027520:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8027524:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8027528:	ea43 030c 	orr.w	r3, r3, ip
 802752c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802752e:	2dff      	cmp	r5, #255	; 0xff
 8027530:	d021      	beq.n	8027576 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8027532:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027534:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027538:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802753a:	fb05 fc0c 	mul.w	ip, r5, ip
 802753e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027540:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8027544:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027548:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802754a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802754e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027552:	fb05 fa0a 	mul.w	sl, r5, sl
 8027556:	44e6      	add	lr, ip
 8027558:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802755c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027560:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8027564:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8027568:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802756c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027570:	ea4e 050a 	orr.w	r5, lr, sl
 8027574:	950d      	str	r5, [sp, #52]	; 0x34
 8027576:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027578:	2dff      	cmp	r5, #255	; 0xff
 802757a:	d021      	beq.n	80275c0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 802757c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802757e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027582:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027584:	fb05 fc0c 	mul.w	ip, r5, ip
 8027588:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802758a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802758e:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8027592:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8027594:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027598:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802759c:	fb05 fa0a 	mul.w	sl, r5, sl
 80275a0:	44e6      	add	lr, ip
 80275a2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80275a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275aa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80275ae:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275b2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80275b6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80275ba:	ea4e 050a 	orr.w	r5, lr, sl
 80275be:	9509      	str	r5, [sp, #36]	; 0x24
 80275c0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80275c2:	2dff      	cmp	r5, #255	; 0xff
 80275c4:	d021      	beq.n	802760a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 80275c6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80275c8:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80275cc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80275ce:	fb05 fc0c 	mul.w	ip, r5, ip
 80275d2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80275d4:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80275d8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80275dc:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80275de:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80275e2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275e6:	fb05 fa0a 	mul.w	sl, r5, sl
 80275ea:	44e6      	add	lr, ip
 80275ec:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80275f0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80275f4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80275f8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80275fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027600:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027604:	ea4e 050a 	orr.w	r5, lr, sl
 8027608:	950e      	str	r5, [sp, #56]	; 0x38
 802760a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802760c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8027610:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027614:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027618:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802761a:	fb08 fc0c 	mul.w	ip, r8, ip
 802761e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8027622:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027626:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8027628:	fb07 cc0e 	mla	ip, r7, lr, ip
 802762c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8027630:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8027632:	fb09 cc0e 	mla	ip, r9, lr, ip
 8027636:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802763a:	fb08 f80e 	mul.w	r8, r8, lr
 802763e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027642:	fb02 8303 	mla	r3, r2, r3, r8
 8027646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027648:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802764c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8027650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027652:	fb07 330a 	mla	r3, r7, sl, r3
 8027656:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 802765a:	fb09 3e0e 	mla	lr, r9, lr, r3
 802765e:	9b07      	ldr	r3, [sp, #28]
 8027660:	4358      	muls	r0, r3
 8027662:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8027666:	1c43      	adds	r3, r0, #1
 8027668:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 802766c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8027670:	ea4c 0c0e 	orr.w	ip, ip, lr
 8027674:	1200      	asrs	r0, r0, #8
 8027676:	f3cc 4307 	ubfx	r3, ip, #16, #8
 802767a:	f3cc 2207 	ubfx	r2, ip, #8, #8
 802767e:	28ff      	cmp	r0, #255	; 0xff
 8027680:	b2df      	uxtb	r7, r3
 8027682:	fa5f fe82 	uxtb.w	lr, r2
 8027686:	d115      	bne.n	80276b4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71c>
 8027688:	f881 c000 	strb.w	ip, [r1]
 802768c:	704a      	strb	r2, [r1, #1]
 802768e:	708b      	strb	r3, [r1, #2]
 8027690:	70c8      	strb	r0, [r1, #3]
 8027692:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027694:	3104      	adds	r1, #4
 8027696:	f10b 3bff 	add.w	fp, fp, #4294967295
 802769a:	441c      	add	r4, r3
 802769c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802769e:	441e      	add	r6, r3
 80276a0:	e626      	b.n	80272f0 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80276a2:	2f00      	cmp	r7, #0
 80276a4:	f43f af03 	beq.w	80274ae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80276a8:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80276ac:	9009      	str	r0, [sp, #36]	; 0x24
 80276ae:	0e00      	lsrs	r0, r0, #24
 80276b0:	9011      	str	r0, [sp, #68]	; 0x44
 80276b2:	e6fc      	b.n	80274ae <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80276b4:	b2c3      	uxtb	r3, r0
 80276b6:	2800      	cmp	r0, #0
 80276b8:	d0eb      	beq.n	8027692 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 80276ba:	78c8      	ldrb	r0, [r1, #3]
 80276bc:	fa5f fc8c 	uxtb.w	ip, ip
 80276c0:	9d07      	ldr	r5, [sp, #28]
 80276c2:	fb03 f800 	mul.w	r8, r3, r0
 80276c6:	4403      	add	r3, r0
 80276c8:	f108 0201 	add.w	r2, r8, #1
 80276cc:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 80276d0:	1212      	asrs	r2, r2, #8
 80276d2:	1a9b      	subs	r3, r3, r2
 80276d4:	1a82      	subs	r2, r0, r2
 80276d6:	7808      	ldrb	r0, [r1, #0]
 80276d8:	b2db      	uxtb	r3, r3
 80276da:	4350      	muls	r0, r2
 80276dc:	70cb      	strb	r3, [r1, #3]
 80276de:	fb05 0c0c 	mla	ip, r5, ip, r0
 80276e2:	9d07      	ldr	r5, [sp, #28]
 80276e4:	7848      	ldrb	r0, [r1, #1]
 80276e6:	fb15 fe0e 	smulbb	lr, r5, lr
 80276ea:	9d07      	ldr	r5, [sp, #28]
 80276ec:	fb9c fcf3 	sdiv	ip, ip, r3
 80276f0:	fb02 e000 	mla	r0, r2, r0, lr
 80276f4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80276f8:	fb15 f707 	smulbb	r7, r5, r7
 80276fc:	bfd4      	ite	le
 80276fe:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8027702:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 8027706:	fb90 f0f3 	sdiv	r0, r0, r3
 802770a:	bfd8      	it	le
 802770c:	fa5f fc8c 	uxtble.w	ip, ip
 8027710:	28ff      	cmp	r0, #255	; 0xff
 8027712:	bfd4      	ite	le
 8027714:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027718:	20ff      	movgt	r0, #255	; 0xff
 802771a:	f881 c000 	strb.w	ip, [r1]
 802771e:	bfd8      	it	le
 8027720:	b2c0      	uxtble	r0, r0
 8027722:	7048      	strb	r0, [r1, #1]
 8027724:	7888      	ldrb	r0, [r1, #2]
 8027726:	fb02 7200 	mla	r2, r2, r0, r7
 802772a:	fb92 f2f3 	sdiv	r2, r2, r3
 802772e:	2aff      	cmp	r2, #255	; 0xff
 8027730:	bfd6      	itet	le
 8027732:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8027736:	22ff      	movgt	r2, #255	; 0xff
 8027738:	b2d2      	uxtble	r2, r2
 802773a:	708a      	strb	r2, [r1, #2]
 802773c:	e7a9      	b.n	8027692 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802773e:	b01b      	add	sp, #108	; 0x6c
 8027740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027744 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>:
 8027744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027748:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 802774c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027750:	2c00      	cmp	r4, #0
 8027752:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8027756:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 802775a:	fb00 4e03 	mla	lr, r0, r3, r4
 802775e:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8027762:	f2c0 808f 	blt.w	8027884 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 8027766:	45a1      	cmp	r9, r4
 8027768:	f340 808c 	ble.w	8027884 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 802776c:	2800      	cmp	r0, #0
 802776e:	f2c0 8089 	blt.w	8027884 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 8027772:	4580      	cmp	r8, r0
 8027774:	f340 8086 	ble.w	8027884 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 8027778:	ea4f 055e 	mov.w	r5, lr, lsr #1
 802777c:	f01e 0f01 	tst.w	lr, #1
 8027780:	5d56      	ldrb	r6, [r2, r5]
 8027782:	bf0c      	ite	eq
 8027784:	f006 060f 	andeq.w	r6, r6, #15
 8027788:	1136      	asrne	r6, r6, #4
 802778a:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 802778e:	b2f6      	uxtb	r6, r6
 8027790:	f114 0a01 	adds.w	sl, r4, #1
 8027794:	d478      	bmi.n	8027888 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 8027796:	45d1      	cmp	r9, sl
 8027798:	dd76      	ble.n	8027888 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802779a:	2800      	cmp	r0, #0
 802779c:	db74      	blt.n	8027888 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 802779e:	4580      	cmp	r8, r0
 80277a0:	dd72      	ble.n	8027888 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80277a2:	2f00      	cmp	r7, #0
 80277a4:	d072      	beq.n	802788c <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x148>
 80277a6:	f10e 0b01 	add.w	fp, lr, #1
 80277aa:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80277ae:	f01b 0f01 	tst.w	fp, #1
 80277b2:	5d55      	ldrb	r5, [r2, r5]
 80277b4:	bf0c      	ite	eq
 80277b6:	f005 050f 	andeq.w	r5, r5, #15
 80277ba:	112d      	asrne	r5, r5, #4
 80277bc:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 80277c0:	b2ed      	uxtb	r5, r5
 80277c2:	f1bc 0f00 	cmp.w	ip, #0
 80277c6:	d065      	beq.n	8027894 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x150>
 80277c8:	2c00      	cmp	r4, #0
 80277ca:	f100 0001 	add.w	r0, r0, #1
 80277ce:	db5f      	blt.n	8027890 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 80277d0:	45a1      	cmp	r9, r4
 80277d2:	dd5d      	ble.n	8027890 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 80277d4:	2800      	cmp	r0, #0
 80277d6:	db5b      	blt.n	8027890 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 80277d8:	4580      	cmp	r8, r0
 80277da:	dd59      	ble.n	8027890 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 80277dc:	eb03 0b0e 	add.w	fp, r3, lr
 80277e0:	ea4f 045b 	mov.w	r4, fp, lsr #1
 80277e4:	f01b 0f01 	tst.w	fp, #1
 80277e8:	5d14      	ldrb	r4, [r2, r4]
 80277ea:	bf0c      	ite	eq
 80277ec:	f004 040f 	andeq.w	r4, r4, #15
 80277f0:	1124      	asrne	r4, r4, #4
 80277f2:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80277f6:	b2e4      	uxtb	r4, r4
 80277f8:	f1ba 0f00 	cmp.w	sl, #0
 80277fc:	db4d      	blt.n	802789a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 80277fe:	45d1      	cmp	r9, sl
 8027800:	dd4b      	ble.n	802789a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 8027802:	2800      	cmp	r0, #0
 8027804:	db49      	blt.n	802789a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 8027806:	4580      	cmp	r8, r0
 8027808:	dd47      	ble.n	802789a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802780a:	2f00      	cmp	r7, #0
 802780c:	d047      	beq.n	802789e <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15a>
 802780e:	3301      	adds	r3, #1
 8027810:	449e      	add	lr, r3
 8027812:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027816:	f01e 0f01 	tst.w	lr, #1
 802781a:	5cd0      	ldrb	r0, [r2, r3]
 802781c:	bf0c      	ite	eq
 802781e:	f000 000f 	andeq.w	r0, r0, #15
 8027822:	1100      	asrne	r0, r0, #4
 8027824:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027828:	b2c3      	uxtb	r3, r0
 802782a:	b2ba      	uxth	r2, r7
 802782c:	fa1f fc8c 	uxth.w	ip, ip
 8027830:	fb02 f00c 	mul.w	r0, r2, ip
 8027834:	0112      	lsls	r2, r2, #4
 8027836:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802783a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802783e:	1a12      	subs	r2, r2, r0
 8027840:	fa1f fc8c 	uxth.w	ip, ip
 8027844:	b292      	uxth	r2, r2
 8027846:	eba7 070c 	sub.w	r7, r7, ip
 802784a:	436a      	muls	r2, r5
 802784c:	b2bf      	uxth	r7, r7
 802784e:	fb06 2207 	mla	r2, r6, r7, r2
 8027852:	fb0c 2404 	mla	r4, ip, r4, r2
 8027856:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 802785a:	fb00 4303 	mla	r3, r0, r3, r4
 802785e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027862:	4353      	muls	r3, r2
 8027864:	1c5a      	adds	r2, r3, #1
 8027866:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802786a:	4a21      	ldr	r2, [pc, #132]	; (80278f0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1ac>)
 802786c:	121b      	asrs	r3, r3, #8
 802786e:	7895      	ldrb	r5, [r2, #2]
 8027870:	7857      	ldrb	r7, [r2, #1]
 8027872:	2bff      	cmp	r3, #255	; 0xff
 8027874:	7814      	ldrb	r4, [r2, #0]
 8027876:	d114      	bne.n	80278a2 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15e>
 8027878:	700c      	strb	r4, [r1, #0]
 802787a:	704f      	strb	r7, [r1, #1]
 802787c:	708d      	strb	r5, [r1, #2]
 802787e:	70cb      	strb	r3, [r1, #3]
 8027880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027884:	2600      	movs	r6, #0
 8027886:	e783      	b.n	8027790 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x4c>
 8027888:	2500      	movs	r5, #0
 802788a:	e79a      	b.n	80277c2 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 802788c:	463d      	mov	r5, r7
 802788e:	e798      	b.n	80277c2 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 8027890:	2400      	movs	r4, #0
 8027892:	e7b1      	b.n	80277f8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xb4>
 8027894:	4663      	mov	r3, ip
 8027896:	4664      	mov	r4, ip
 8027898:	e7c7      	b.n	802782a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802789a:	2300      	movs	r3, #0
 802789c:	e7c5      	b.n	802782a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 802789e:	463b      	mov	r3, r7
 80278a0:	e7c3      	b.n	802782a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 80278a2:	b2da      	uxtb	r2, r3
 80278a4:	2b00      	cmp	r3, #0
 80278a6:	d0eb      	beq.n	8027880 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 80278a8:	78ce      	ldrb	r6, [r1, #3]
 80278aa:	435c      	muls	r4, r3
 80278ac:	435f      	muls	r7, r3
 80278ae:	fb02 fc06 	mul.w	ip, r2, r6
 80278b2:	4432      	add	r2, r6
 80278b4:	436b      	muls	r3, r5
 80278b6:	f10c 0001 	add.w	r0, ip, #1
 80278ba:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 80278be:	1200      	asrs	r0, r0, #8
 80278c0:	1a12      	subs	r2, r2, r0
 80278c2:	1a30      	subs	r0, r6, r0
 80278c4:	780e      	ldrb	r6, [r1, #0]
 80278c6:	b2d2      	uxtb	r2, r2
 80278c8:	fb00 4606 	mla	r6, r0, r6, r4
 80278cc:	784c      	ldrb	r4, [r1, #1]
 80278ce:	70ca      	strb	r2, [r1, #3]
 80278d0:	fb00 7404 	mla	r4, r0, r4, r7
 80278d4:	fb94 f4f2 	sdiv	r4, r4, r2
 80278d8:	704c      	strb	r4, [r1, #1]
 80278da:	788c      	ldrb	r4, [r1, #2]
 80278dc:	fb00 3304 	mla	r3, r0, r4, r3
 80278e0:	fb96 f6f2 	sdiv	r6, r6, r2
 80278e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80278e8:	700e      	strb	r6, [r1, #0]
 80278ea:	708b      	strb	r3, [r1, #2]
 80278ec:	e7c8      	b.n	8027880 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 80278ee:	bf00      	nop
 80278f0:	2003bef0 	.word	0x2003bef0

080278f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80278f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278f8:	b097      	sub	sp, #92	; 0x5c
 80278fa:	9214      	str	r2, [sp, #80]	; 0x50
 80278fc:	9309      	str	r3, [sp, #36]	; 0x24
 80278fe:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8027900:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8027904:	9015      	str	r0, [sp, #84]	; 0x54
 8027906:	910d      	str	r1, [sp, #52]	; 0x34
 8027908:	6850      	ldr	r0, [r2, #4]
 802790a:	930e      	str	r3, [sp, #56]	; 0x38
 802790c:	6812      	ldr	r2, [r2, #0]
 802790e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8027912:	e9dd a521 	ldrd	sl, r5, [sp, #132]	; 0x84
 8027916:	fb00 1303 	mla	r3, r0, r3, r1
 802791a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802791e:	930a      	str	r3, [sp, #40]	; 0x28
 8027920:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027922:	689b      	ldr	r3, [r3, #8]
 8027924:	3301      	adds	r3, #1
 8027926:	f023 0301 	bic.w	r3, r3, #1
 802792a:	930f      	str	r3, [sp, #60]	; 0x3c
 802792c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802792e:	681e      	ldr	r6, [r3, #0]
 8027930:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027932:	2b00      	cmp	r3, #0
 8027934:	dc03      	bgt.n	802793e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8027936:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8027938:	2b00      	cmp	r3, #0
 802793a:	f340 8255 	ble.w	8027de8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802793e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027940:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027944:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027948:	1e48      	subs	r0, r1, #1
 802794a:	1e57      	subs	r7, r2, #1
 802794c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802794e:	2b00      	cmp	r3, #0
 8027950:	f340 80bb 	ble.w	8027aca <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027954:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 8027958:	ea4f 4325 	mov.w	r3, r5, asr #16
 802795c:	d406      	bmi.n	802796c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802795e:	4584      	cmp	ip, r0
 8027960:	da04      	bge.n	802796c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027962:	2b00      	cmp	r3, #0
 8027964:	db02      	blt.n	802796c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8027966:	42bb      	cmp	r3, r7
 8027968:	f2c0 80b0 	blt.w	8027acc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802796c:	f11c 0c01 	adds.w	ip, ip, #1
 8027970:	f100 80a0 	bmi.w	8027ab4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8027974:	4561      	cmp	r1, ip
 8027976:	f2c0 809d 	blt.w	8027ab4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 802797a:	3301      	adds	r3, #1
 802797c:	f100 809a 	bmi.w	8027ab4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8027980:	429a      	cmp	r2, r3
 8027982:	f2c0 8097 	blt.w	8027ab4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 8027986:	e9dd b709 	ldrd	fp, r7, [sp, #36]	; 0x24
 802798a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 802798e:	f1bb 0f00 	cmp.w	fp, #0
 8027992:	f340 80bb 	ble.w	8027b0c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8027996:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027998:	1428      	asrs	r0, r5, #16
 802799a:	f3ca 3203 	ubfx	r2, sl, #12, #4
 802799e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80279a2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80279a6:	ea5f 432a 	movs.w	r3, sl, asr #16
 80279aa:	f100 8134 	bmi.w	8027c16 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80279ae:	f10c 39ff 	add.w	r9, ip, #4294967295
 80279b2:	454b      	cmp	r3, r9
 80279b4:	f280 812f 	bge.w	8027c16 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80279b8:	2800      	cmp	r0, #0
 80279ba:	f2c0 812c 	blt.w	8027c16 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80279be:	f10e 39ff 	add.w	r9, lr, #4294967295
 80279c2:	4548      	cmp	r0, r9
 80279c4:	f280 8127 	bge.w	8027c16 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80279c8:	fb00 3308 	mla	r3, r0, r8, r3
 80279cc:	0858      	lsrs	r0, r3, #1
 80279ce:	07dc      	lsls	r4, r3, #31
 80279d0:	f816 c000 	ldrb.w	ip, [r6, r0]
 80279d4:	bf54      	ite	pl
 80279d6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80279da:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80279de:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80279e2:	fa5f fc8c 	uxtb.w	ip, ip
 80279e6:	2a00      	cmp	r2, #0
 80279e8:	f000 80d6 	beq.w	8027b98 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 80279ec:	1c58      	adds	r0, r3, #1
 80279ee:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 80279f2:	07c0      	lsls	r0, r0, #31
 80279f4:	f816 e00e 	ldrb.w	lr, [r6, lr]
 80279f8:	bf54      	ite	pl
 80279fa:	f00e 0e0f 	andpl.w	lr, lr, #15
 80279fe:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8027a02:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8027a06:	fa5f f08e 	uxtb.w	r0, lr
 8027a0a:	9010      	str	r0, [sp, #64]	; 0x40
 8027a0c:	b1d9      	cbz	r1, 8027a46 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8027a0e:	4443      	add	r3, r8
 8027a10:	0858      	lsrs	r0, r3, #1
 8027a12:	07dc      	lsls	r4, r3, #31
 8027a14:	f103 0301 	add.w	r3, r3, #1
 8027a18:	5c30      	ldrb	r0, [r6, r0]
 8027a1a:	bf54      	ite	pl
 8027a1c:	f000 000f 	andpl.w	r0, r0, #15
 8027a20:	1100      	asrmi	r0, r0, #4
 8027a22:	07dc      	lsls	r4, r3, #31
 8027a24:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027a28:	b2c0      	uxtb	r0, r0
 8027a2a:	900b      	str	r0, [sp, #44]	; 0x2c
 8027a2c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8027a30:	f816 e000 	ldrb.w	lr, [r6, r0]
 8027a34:	bf54      	ite	pl
 8027a36:	f00e 030f 	andpl.w	r3, lr, #15
 8027a3a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8027a3e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027a42:	b2db      	uxtb	r3, r3
 8027a44:	9311      	str	r3, [sp, #68]	; 0x44
 8027a46:	b292      	uxth	r2, r2
 8027a48:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8027a4a:	b289      	uxth	r1, r1
 8027a4c:	fb02 f301 	mul.w	r3, r2, r1
 8027a50:	0112      	lsls	r2, r2, #4
 8027a52:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8027a56:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8027a5a:	1ad2      	subs	r2, r2, r3
 8027a5c:	b289      	uxth	r1, r1
 8027a5e:	b292      	uxth	r2, r2
 8027a60:	1a40      	subs	r0, r0, r1
 8027a62:	4362      	muls	r2, r4
 8027a64:	b280      	uxth	r0, r0
 8027a66:	fb0c 2c00 	mla	ip, ip, r0, r2
 8027a6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027a6c:	fb01 c102 	mla	r1, r1, r2, ip
 8027a70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027a72:	fb03 1302 	mla	r3, r3, r2, r1
 8027a76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8027a78:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027a7c:	4353      	muls	r3, r2
 8027a7e:	1c5a      	adds	r2, r3, #1
 8027a80:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8027a84:	4abf      	ldr	r2, [pc, #764]	; (8027d84 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8027a86:	121b      	asrs	r3, r3, #8
 8027a88:	f892 9002 	ldrb.w	r9, [r2, #2]
 8027a8c:	7850      	ldrb	r0, [r2, #1]
 8027a8e:	2bff      	cmp	r3, #255	; 0xff
 8027a90:	f892 c000 	ldrb.w	ip, [r2]
 8027a94:	f040 8091 	bne.w	8027bba <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8027a98:	f887 c000 	strb.w	ip, [r7]
 8027a9c:	7078      	strb	r0, [r7, #1]
 8027a9e:	f887 9002 	strb.w	r9, [r7, #2]
 8027aa2:	70fb      	strb	r3, [r7, #3]
 8027aa4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027aa6:	3704      	adds	r7, #4
 8027aa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027aac:	449a      	add	sl, r3
 8027aae:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027ab0:	441d      	add	r5, r3
 8027ab2:	e76c      	b.n	802798e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8027ab4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8027ab6:	449a      	add	sl, r3
 8027ab8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027aba:	441d      	add	r5, r3
 8027abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027abe:	3b01      	subs	r3, #1
 8027ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8027ac2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027ac4:	3304      	adds	r3, #4
 8027ac6:	930a      	str	r3, [sp, #40]	; 0x28
 8027ac8:	e740      	b.n	802794c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8027aca:	d026      	beq.n	8027b1a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8027acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027ace:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8027ad0:	3b01      	subs	r3, #1
 8027ad2:	fb00 a003 	mla	r0, r0, r3, sl
 8027ad6:	1400      	asrs	r0, r0, #16
 8027ad8:	f53f af55 	bmi.w	8027986 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027adc:	3901      	subs	r1, #1
 8027ade:	4288      	cmp	r0, r1
 8027ae0:	f6bf af51 	bge.w	8027986 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027ae4:	9924      	ldr	r1, [sp, #144]	; 0x90
 8027ae6:	fb01 5303 	mla	r3, r1, r3, r5
 8027aea:	141b      	asrs	r3, r3, #16
 8027aec:	f53f af4b 	bmi.w	8027986 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027af0:	3a01      	subs	r2, #1
 8027af2:	4293      	cmp	r3, r2
 8027af4:	f6bf af47 	bge.w	8027986 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8027af8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027afa:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8027afe:	3304      	adds	r3, #4
 8027b00:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8027b04:	f1be 0f00 	cmp.w	lr, #0
 8027b08:	f300 80a6 	bgt.w	8027c58 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x364>
 8027b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b0e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027b12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027b14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027b18:	930a      	str	r3, [sp, #40]	; 0x28
 8027b1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027b1c:	2b00      	cmp	r3, #0
 8027b1e:	f340 8163 	ble.w	8027de8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8027b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027b26:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b28:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027b2c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027b30:	eef0 6a62 	vmov.f32	s13, s5
 8027b34:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027b38:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027b3c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b40:	ee16 aa90 	vmov	sl, s13
 8027b44:	eef0 6a43 	vmov.f32	s13, s6
 8027b48:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027b4c:	ee16 5a90 	vmov	r5, s13
 8027b50:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027b54:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027b58:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027b5c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027b60:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027b64:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027b68:	ee12 2a90 	vmov	r2, s5
 8027b6c:	eef0 2a47 	vmov.f32	s5, s14
 8027b70:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b74:	ee13 2a10 	vmov	r2, s6
 8027b78:	9323      	str	r3, [sp, #140]	; 0x8c
 8027b7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b7c:	eeb0 3a67 	vmov.f32	s6, s15
 8027b80:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b84:	9324      	str	r3, [sp, #144]	; 0x90
 8027b86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027b88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8027b8a:	3b01      	subs	r3, #1
 8027b8c:	930d      	str	r3, [sp, #52]	; 0x34
 8027b8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027b90:	bf08      	it	eq
 8027b92:	4613      	moveq	r3, r2
 8027b94:	9309      	str	r3, [sp, #36]	; 0x24
 8027b96:	e6cb      	b.n	8027930 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8027b98:	2900      	cmp	r1, #0
 8027b9a:	f43f af54 	beq.w	8027a46 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8027b9e:	eb08 0003 	add.w	r0, r8, r3
 8027ba2:	0843      	lsrs	r3, r0, #1
 8027ba4:	07c0      	lsls	r0, r0, #31
 8027ba6:	5cf3      	ldrb	r3, [r6, r3]
 8027ba8:	bf54      	ite	pl
 8027baa:	f003 030f 	andpl.w	r3, r3, #15
 8027bae:	111b      	asrmi	r3, r3, #4
 8027bb0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027bb4:	b2db      	uxtb	r3, r3
 8027bb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8027bb8:	e745      	b.n	8027a46 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8027bba:	b2da      	uxtb	r2, r3
 8027bbc:	2b00      	cmp	r3, #0
 8027bbe:	f43f af71 	beq.w	8027aa4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027bc2:	f897 e003 	ldrb.w	lr, [r7, #3]
 8027bc6:	fb03 fc0c 	mul.w	ip, r3, ip
 8027bca:	4358      	muls	r0, r3
 8027bcc:	fb02 f10e 	mul.w	r1, r2, lr
 8027bd0:	4472      	add	r2, lr
 8027bd2:	fb03 f309 	mul.w	r3, r3, r9
 8027bd6:	1c4c      	adds	r4, r1, #1
 8027bd8:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8027bdc:	1209      	asrs	r1, r1, #8
 8027bde:	1a52      	subs	r2, r2, r1
 8027be0:	ebae 0101 	sub.w	r1, lr, r1
 8027be4:	f897 e000 	ldrb.w	lr, [r7]
 8027be8:	b2d2      	uxtb	r2, r2
 8027bea:	fb01 cc0e 	mla	ip, r1, lr, ip
 8027bee:	f897 e002 	ldrb.w	lr, [r7, #2]
 8027bf2:	70fa      	strb	r2, [r7, #3]
 8027bf4:	fb9c fcf2 	sdiv	ip, ip, r2
 8027bf8:	f887 c000 	strb.w	ip, [r7]
 8027bfc:	f897 c001 	ldrb.w	ip, [r7, #1]
 8027c00:	fb01 000c 	mla	r0, r1, ip, r0
 8027c04:	fb01 310e 	mla	r1, r1, lr, r3
 8027c08:	fb90 f0f2 	sdiv	r0, r0, r2
 8027c0c:	fb91 f1f2 	sdiv	r1, r1, r2
 8027c10:	7078      	strb	r0, [r7, #1]
 8027c12:	70b9      	strb	r1, [r7, #2]
 8027c14:	e746      	b.n	8027aa4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027c16:	f113 0901 	adds.w	r9, r3, #1
 8027c1a:	f53f af43 	bmi.w	8027aa4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027c1e:	45cc      	cmp	ip, r9
 8027c20:	f6ff af40 	blt.w	8027aa4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027c24:	f110 0901 	adds.w	r9, r0, #1
 8027c28:	f53f af3c 	bmi.w	8027aa4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027c2c:	45ce      	cmp	lr, r9
 8027c2e:	f6ff af39 	blt.w	8027aa4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027c32:	9302      	str	r3, [sp, #8]
 8027c34:	fa0f f38e 	sxth.w	r3, lr
 8027c38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8027c3a:	9301      	str	r3, [sp, #4]
 8027c3c:	fa0f f38c 	sxth.w	r3, ip
 8027c40:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8027c44:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8027c48:	9300      	str	r3, [sp, #0]
 8027c4a:	4632      	mov	r2, r6
 8027c4c:	4643      	mov	r3, r8
 8027c4e:	4639      	mov	r1, r7
 8027c50:	9815      	ldr	r0, [sp, #84]	; 0x54
 8027c52:	f7ff fd77 	bl	8027744 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>
 8027c56:	e725      	b.n	8027aa4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027c58:	ea4f 412a 	mov.w	r1, sl, asr #16
 8027c5c:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8027c60:	142a      	asrs	r2, r5, #16
 8027c62:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8027c66:	fb08 1202 	mla	r2, r8, r2, r1
 8027c6a:	0851      	lsrs	r1, r2, #1
 8027c6c:	07d4      	lsls	r4, r2, #31
 8027c6e:	5c71      	ldrb	r1, [r6, r1]
 8027c70:	bf54      	ite	pl
 8027c72:	f001 010f 	andpl.w	r1, r1, #15
 8027c76:	1109      	asrmi	r1, r1, #4
 8027c78:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8027c7c:	b2c9      	uxtb	r1, r1
 8027c7e:	2800      	cmp	r0, #0
 8027c80:	d06d      	beq.n	8027d5e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8027c82:	f102 0901 	add.w	r9, r2, #1
 8027c86:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 8027c8a:	f019 0f01 	tst.w	r9, #1
 8027c8e:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8027c92:	bf0c      	ite	eq
 8027c94:	f00c 0c0f 	andeq.w	ip, ip, #15
 8027c98:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8027c9c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027ca0:	fa5f f48c 	uxtb.w	r4, ip
 8027ca4:	9412      	str	r4, [sp, #72]	; 0x48
 8027ca6:	b307      	cbz	r7, 8027cea <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027ca8:	4442      	add	r2, r8
 8027caa:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8027cae:	07d4      	lsls	r4, r2, #31
 8027cb0:	f102 0201 	add.w	r2, r2, #1
 8027cb4:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8027cb8:	bf54      	ite	pl
 8027cba:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027cbe:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027cc2:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027cc6:	fa5f f48c 	uxtb.w	r4, ip
 8027cca:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8027cce:	940c      	str	r4, [sp, #48]	; 0x30
 8027cd0:	07d4      	lsls	r4, r2, #31
 8027cd2:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8027cd6:	bf54      	ite	pl
 8027cd8:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027cdc:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027ce0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027ce4:	fa5f f28c 	uxtb.w	r2, ip
 8027ce8:	9213      	str	r2, [sp, #76]	; 0x4c
 8027cea:	b280      	uxth	r0, r0
 8027cec:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8027cee:	b2bf      	uxth	r7, r7
 8027cf0:	fb00 f207 	mul.w	r2, r0, r7
 8027cf4:	0100      	lsls	r0, r0, #4
 8027cf6:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 8027cfa:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8027cfe:	1a80      	subs	r0, r0, r2
 8027d00:	b2bf      	uxth	r7, r7
 8027d02:	b280      	uxth	r0, r0
 8027d04:	ebac 0c07 	sub.w	ip, ip, r7
 8027d08:	4360      	muls	r0, r4
 8027d0a:	fa1f fc8c 	uxth.w	ip, ip
 8027d0e:	fb01 010c 	mla	r1, r1, ip, r0
 8027d12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027d14:	fb07 1700 	mla	r7, r7, r0, r1
 8027d18:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8027d1a:	fb02 7201 	mla	r2, r2, r1, r7
 8027d1e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8027d20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8027d24:	434a      	muls	r2, r1
 8027d26:	1c51      	adds	r1, r2, #1
 8027d28:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8027d2c:	4915      	ldr	r1, [pc, #84]	; (8027d84 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8027d2e:	1212      	asrs	r2, r2, #8
 8027d30:	7888      	ldrb	r0, [r1, #2]
 8027d32:	784f      	ldrb	r7, [r1, #1]
 8027d34:	2aff      	cmp	r2, #255	; 0xff
 8027d36:	4604      	mov	r4, r0
 8027d38:	f891 c000 	ldrb.w	ip, [r1]
 8027d3c:	d124      	bne.n	8027d88 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8027d3e:	f803 cc04 	strb.w	ip, [r3, #-4]
 8027d42:	f803 7c03 	strb.w	r7, [r3, #-3]
 8027d46:	f803 0c02 	strb.w	r0, [r3, #-2]
 8027d4a:	f803 2c01 	strb.w	r2, [r3, #-1]
 8027d4e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027d50:	3304      	adds	r3, #4
 8027d52:	f10e 3eff 	add.w	lr, lr, #4294967295
 8027d56:	4492      	add	sl, r2
 8027d58:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8027d5a:	4415      	add	r5, r2
 8027d5c:	e6d2      	b.n	8027b04 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8027d5e:	2f00      	cmp	r7, #0
 8027d60:	d0c3      	beq.n	8027cea <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027d62:	4442      	add	r2, r8
 8027d64:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8027d68:	07d2      	lsls	r2, r2, #31
 8027d6a:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8027d6e:	bf54      	ite	pl
 8027d70:	f00c 0c0f 	andpl.w	ip, ip, #15
 8027d74:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8027d78:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8027d7c:	fa5f f28c 	uxtb.w	r2, ip
 8027d80:	920c      	str	r2, [sp, #48]	; 0x30
 8027d82:	e7b2      	b.n	8027cea <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8027d84:	2003bef0 	.word	0x2003bef0
 8027d88:	b2d1      	uxtb	r1, r2
 8027d8a:	2a00      	cmp	r2, #0
 8027d8c:	d0df      	beq.n	8027d4e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8027d8e:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 8027d92:	fb02 fc0c 	mul.w	ip, r2, ip
 8027d96:	4357      	muls	r7, r2
 8027d98:	fb01 fb09 	mul.w	fp, r1, r9
 8027d9c:	4449      	add	r1, r9
 8027d9e:	4362      	muls	r2, r4
 8027da0:	f10b 0001 	add.w	r0, fp, #1
 8027da4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8027da8:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 8027dac:	1200      	asrs	r0, r0, #8
 8027dae:	1a09      	subs	r1, r1, r0
 8027db0:	eba9 0000 	sub.w	r0, r9, r0
 8027db4:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 8027db8:	b2c9      	uxtb	r1, r1
 8027dba:	fb00 cc0b 	mla	ip, r0, fp, ip
 8027dbe:	fb9c fcf1 	sdiv	ip, ip, r1
 8027dc2:	f803 cc04 	strb.w	ip, [r3, #-4]
 8027dc6:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 8027dca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8027dce:	fb00 770c 	mla	r7, r0, ip, r7
 8027dd2:	fb00 2009 	mla	r0, r0, r9, r2
 8027dd6:	fb97 f7f1 	sdiv	r7, r7, r1
 8027dda:	fb90 f0f1 	sdiv	r0, r0, r1
 8027dde:	f803 7c03 	strb.w	r7, [r3, #-3]
 8027de2:	f803 0c02 	strb.w	r0, [r3, #-2]
 8027de6:	e7b2      	b.n	8027d4e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8027de8:	b017      	add	sp, #92	; 0x5c
 8027dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027dee:	bf00      	nop

08027df0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>:
 8027df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027df4:	e9dd 0c0b 	ldrd	r0, ip, [sp, #44]	; 0x2c
 8027df8:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8027dfc:	2800      	cmp	r0, #0
 8027dfe:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8027e02:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8027e06:	fb0c 0e03 	mla	lr, ip, r3, r0
 8027e0a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8027e0e:	f2c0 8088 	blt.w	8027f22 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8027e12:	4581      	cmp	r9, r0
 8027e14:	f340 8085 	ble.w	8027f22 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8027e18:	f1bc 0f00 	cmp.w	ip, #0
 8027e1c:	f2c0 8081 	blt.w	8027f22 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8027e20:	45e0      	cmp	r8, ip
 8027e22:	dd7e      	ble.n	8027f22 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8027e24:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8027e28:	f01e 0f01 	tst.w	lr, #1
 8027e2c:	5d15      	ldrb	r5, [r2, r4]
 8027e2e:	bf0c      	ite	eq
 8027e30:	f005 050f 	andeq.w	r5, r5, #15
 8027e34:	112d      	asrne	r5, r5, #4
 8027e36:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8027e3a:	b2ed      	uxtb	r5, r5
 8027e3c:	f110 0a01 	adds.w	sl, r0, #1
 8027e40:	d471      	bmi.n	8027f26 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8027e42:	45d1      	cmp	r9, sl
 8027e44:	dd6f      	ble.n	8027f26 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8027e46:	f1bc 0f00 	cmp.w	ip, #0
 8027e4a:	db6c      	blt.n	8027f26 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8027e4c:	45e0      	cmp	r8, ip
 8027e4e:	dd6a      	ble.n	8027f26 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8027e50:	2e00      	cmp	r6, #0
 8027e52:	d06a      	beq.n	8027f2a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13a>
 8027e54:	f10e 0b01 	add.w	fp, lr, #1
 8027e58:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8027e5c:	f01b 0f01 	tst.w	fp, #1
 8027e60:	5d14      	ldrb	r4, [r2, r4]
 8027e62:	bf0c      	ite	eq
 8027e64:	f004 040f 	andeq.w	r4, r4, #15
 8027e68:	1124      	asrne	r4, r4, #4
 8027e6a:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8027e6e:	b2e4      	uxtb	r4, r4
 8027e70:	2f00      	cmp	r7, #0
 8027e72:	d05e      	beq.n	8027f32 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x142>
 8027e74:	2800      	cmp	r0, #0
 8027e76:	f10c 0c01 	add.w	ip, ip, #1
 8027e7a:	db58      	blt.n	8027f2e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8027e7c:	4581      	cmp	r9, r0
 8027e7e:	dd56      	ble.n	8027f2e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8027e80:	f1bc 0f00 	cmp.w	ip, #0
 8027e84:	db53      	blt.n	8027f2e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8027e86:	45e0      	cmp	r8, ip
 8027e88:	dd51      	ble.n	8027f2e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8027e8a:	eb03 0b0e 	add.w	fp, r3, lr
 8027e8e:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8027e92:	f01b 0f01 	tst.w	fp, #1
 8027e96:	5c10      	ldrb	r0, [r2, r0]
 8027e98:	bf0c      	ite	eq
 8027e9a:	f000 000f 	andeq.w	r0, r0, #15
 8027e9e:	1100      	asrne	r0, r0, #4
 8027ea0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8027ea4:	b2c0      	uxtb	r0, r0
 8027ea6:	f1ba 0f00 	cmp.w	sl, #0
 8027eaa:	db45      	blt.n	8027f38 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8027eac:	45d1      	cmp	r9, sl
 8027eae:	dd43      	ble.n	8027f38 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8027eb0:	f1bc 0f00 	cmp.w	ip, #0
 8027eb4:	db40      	blt.n	8027f38 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8027eb6:	45e0      	cmp	r8, ip
 8027eb8:	dd3e      	ble.n	8027f38 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8027eba:	2e00      	cmp	r6, #0
 8027ebc:	d03e      	beq.n	8027f3c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x14c>
 8027ebe:	3301      	adds	r3, #1
 8027ec0:	449e      	add	lr, r3
 8027ec2:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8027ec6:	f01e 0f01 	tst.w	lr, #1
 8027eca:	5cd3      	ldrb	r3, [r2, r3]
 8027ecc:	bf0c      	ite	eq
 8027ece:	f003 030f 	andeq.w	r3, r3, #15
 8027ed2:	111b      	asrne	r3, r3, #4
 8027ed4:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8027ed8:	b2db      	uxtb	r3, r3
 8027eda:	b2b2      	uxth	r2, r6
 8027edc:	b2bf      	uxth	r7, r7
 8027ede:	fb02 f607 	mul.w	r6, r2, r7
 8027ee2:	0112      	lsls	r2, r2, #4
 8027ee4:	ebc6 1707 	rsb	r7, r6, r7, lsl #4
 8027ee8:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8027eec:	1b92      	subs	r2, r2, r6
 8027eee:	b2bf      	uxth	r7, r7
 8027ef0:	b292      	uxth	r2, r2
 8027ef2:	ebac 0c07 	sub.w	ip, ip, r7
 8027ef6:	4362      	muls	r2, r4
 8027ef8:	fa1f fc8c 	uxth.w	ip, ip
 8027efc:	fb05 220c 	mla	r2, r5, ip, r2
 8027f00:	fb07 2000 	mla	r0, r7, r0, r2
 8027f04:	4a22      	ldr	r2, [pc, #136]	; (8027f90 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1a0>)
 8027f06:	fb06 0303 	mla	r3, r6, r3, r0
 8027f0a:	7817      	ldrb	r7, [r2, #0]
 8027f0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8027f10:	2bff      	cmp	r3, #255	; 0xff
 8027f12:	d115      	bne.n	8027f40 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x150>
 8027f14:	700f      	strb	r7, [r1, #0]
 8027f16:	7853      	ldrb	r3, [r2, #1]
 8027f18:	704b      	strb	r3, [r1, #1]
 8027f1a:	7893      	ldrb	r3, [r2, #2]
 8027f1c:	708b      	strb	r3, [r1, #2]
 8027f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027f22:	2500      	movs	r5, #0
 8027f24:	e78a      	b.n	8027e3c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x4c>
 8027f26:	2400      	movs	r4, #0
 8027f28:	e7a2      	b.n	8027e70 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 8027f2a:	4634      	mov	r4, r6
 8027f2c:	e7a0      	b.n	8027e70 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 8027f2e:	2000      	movs	r0, #0
 8027f30:	e7b9      	b.n	8027ea6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xb6>
 8027f32:	463b      	mov	r3, r7
 8027f34:	4638      	mov	r0, r7
 8027f36:	e7d0      	b.n	8027eda <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8027f38:	2300      	movs	r3, #0
 8027f3a:	e7ce      	b.n	8027eda <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8027f3c:	4633      	mov	r3, r6
 8027f3e:	e7cc      	b.n	8027eda <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8027f40:	2b00      	cmp	r3, #0
 8027f42:	d0ec      	beq.n	8027f1e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8027f44:	78cc      	ldrb	r4, [r1, #3]
 8027f46:	435f      	muls	r7, r3
 8027f48:	7896      	ldrb	r6, [r2, #2]
 8027f4a:	f892 c001 	ldrb.w	ip, [r2, #1]
 8027f4e:	fb03 f204 	mul.w	r2, r3, r4
 8027f52:	780d      	ldrb	r5, [r1, #0]
 8027f54:	1c50      	adds	r0, r2, #1
 8027f56:	fb03 fc0c 	mul.w	ip, r3, ip
 8027f5a:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8027f5e:	191a      	adds	r2, r3, r4
 8027f60:	4373      	muls	r3, r6
 8027f62:	1200      	asrs	r0, r0, #8
 8027f64:	1a12      	subs	r2, r2, r0
 8027f66:	1a20      	subs	r0, r4, r0
 8027f68:	784c      	ldrb	r4, [r1, #1]
 8027f6a:	b2d2      	uxtb	r2, r2
 8027f6c:	fb00 7505 	mla	r5, r0, r5, r7
 8027f70:	fb00 c404 	mla	r4, r0, r4, ip
 8027f74:	70ca      	strb	r2, [r1, #3]
 8027f76:	fb94 f4f2 	sdiv	r4, r4, r2
 8027f7a:	704c      	strb	r4, [r1, #1]
 8027f7c:	788c      	ldrb	r4, [r1, #2]
 8027f7e:	fb00 3304 	mla	r3, r0, r4, r3
 8027f82:	fb95 f5f2 	sdiv	r5, r5, r2
 8027f86:	fb93 f3f2 	sdiv	r3, r3, r2
 8027f8a:	700d      	strb	r5, [r1, #0]
 8027f8c:	708b      	strb	r3, [r1, #2]
 8027f8e:	e7c6      	b.n	8027f1e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8027f90:	2003bef0 	.word	0x2003bef0

08027f94 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027f94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f98:	b095      	sub	sp, #84	; 0x54
 8027f9a:	461c      	mov	r4, r3
 8027f9c:	4fc4      	ldr	r7, [pc, #784]	; (80282b0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>)
 8027f9e:	920d      	str	r2, [sp, #52]	; 0x34
 8027fa0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8027fa2:	9013      	str	r0, [sp, #76]	; 0x4c
 8027fa4:	9108      	str	r1, [sp, #32]
 8027fa6:	6850      	ldr	r0, [r2, #4]
 8027fa8:	6812      	ldr	r2, [r2, #0]
 8027faa:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8027fae:	e9dd b51f 	ldrd	fp, r5, [sp, #124]	; 0x7c
 8027fb2:	fb00 1303 	mla	r3, r0, r3, r1
 8027fb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027fba:	9307      	str	r3, [sp, #28]
 8027fbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027fbe:	689b      	ldr	r3, [r3, #8]
 8027fc0:	3301      	adds	r3, #1
 8027fc2:	f023 0301 	bic.w	r3, r3, #1
 8027fc6:	930a      	str	r3, [sp, #40]	; 0x28
 8027fc8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027fca:	681e      	ldr	r6, [r3, #0]
 8027fcc:	9b08      	ldr	r3, [sp, #32]
 8027fce:	2b00      	cmp	r3, #0
 8027fd0:	dc03      	bgt.n	8027fda <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8027fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8027fd4:	2b00      	cmp	r3, #0
 8027fd6:	f340 824e 	ble.w	8028476 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8027fda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027fdc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027fe0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027fe4:	1e48      	subs	r0, r1, #1
 8027fe6:	f102 3cff 	add.w	ip, r2, #4294967295
 8027fea:	2c00      	cmp	r4, #0
 8027fec:	f340 80b3 	ble.w	8028156 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8027ff0:	ea5f 4e2b 	movs.w	lr, fp, asr #16
 8027ff4:	ea4f 4325 	mov.w	r3, r5, asr #16
 8027ff8:	d406      	bmi.n	8028008 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027ffa:	4586      	cmp	lr, r0
 8027ffc:	da04      	bge.n	8028008 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8027ffe:	2b00      	cmp	r3, #0
 8028000:	db02      	blt.n	8028008 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028002:	4563      	cmp	r3, ip
 8028004:	f2c0 80a8 	blt.w	8028158 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8028008:	f11e 0e01 	adds.w	lr, lr, #1
 802800c:	f100 809a 	bmi.w	8028144 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028010:	4571      	cmp	r1, lr
 8028012:	f2c0 8097 	blt.w	8028144 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028016:	3301      	adds	r3, #1
 8028018:	f100 8094 	bmi.w	8028144 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 802801c:	429a      	cmp	r2, r3
 802801e:	f2c0 8091 	blt.w	8028144 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028022:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028026:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 802802a:	9409      	str	r4, [sp, #36]	; 0x24
 802802c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802802e:	2b00      	cmp	r3, #0
 8028030:	f340 80b0 	ble.w	8028194 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028034:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028036:	1428      	asrs	r0, r5, #16
 8028038:	f3cb 3203 	ubfx	r2, fp, #12, #4
 802803c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028040:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028044:	ea5f 432b 	movs.w	r3, fp, asr #16
 8028048:	f100 8134 	bmi.w	80282b4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802804c:	f10c 3aff 	add.w	sl, ip, #4294967295
 8028050:	4553      	cmp	r3, sl
 8028052:	f280 812f 	bge.w	80282b4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028056:	2800      	cmp	r0, #0
 8028058:	f2c0 812c 	blt.w	80282b4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802805c:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028060:	4550      	cmp	r0, sl
 8028062:	f280 8127 	bge.w	80282b4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028066:	fb00 3309 	mla	r3, r0, r9, r3
 802806a:	0858      	lsrs	r0, r3, #1
 802806c:	f816 c000 	ldrb.w	ip, [r6, r0]
 8028070:	07d8      	lsls	r0, r3, #31
 8028072:	bf54      	ite	pl
 8028074:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028078:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802807c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028080:	fa5f fc8c 	uxtb.w	ip, ip
 8028084:	2a00      	cmp	r2, #0
 8028086:	f000 80cb 	beq.w	8028220 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 802808a:	1c58      	adds	r0, r3, #1
 802808c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028090:	07c0      	lsls	r0, r0, #31
 8028092:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8028096:	bf54      	ite	pl
 8028098:	f00e 0e0f 	andpl.w	lr, lr, #15
 802809c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80280a0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80280a4:	fa5f fe8e 	uxtb.w	lr, lr
 80280a8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80280ac:	b1c1      	cbz	r1, 80280e0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80280ae:	444b      	add	r3, r9
 80280b0:	0858      	lsrs	r0, r3, #1
 80280b2:	f013 0f01 	tst.w	r3, #1
 80280b6:	5c30      	ldrb	r0, [r6, r0]
 80280b8:	bf0c      	ite	eq
 80280ba:	f000 000f 	andeq.w	r0, r0, #15
 80280be:	1100      	asrne	r0, r0, #4
 80280c0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80280c4:	b2c0      	uxtb	r0, r0
 80280c6:	900b      	str	r0, [sp, #44]	; 0x2c
 80280c8:	1c58      	adds	r0, r3, #1
 80280ca:	0843      	lsrs	r3, r0, #1
 80280cc:	07c0      	lsls	r0, r0, #31
 80280ce:	5cf3      	ldrb	r3, [r6, r3]
 80280d0:	bf54      	ite	pl
 80280d2:	f003 030f 	andpl.w	r3, r3, #15
 80280d6:	111b      	asrmi	r3, r3, #4
 80280d8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80280dc:	b2db      	uxtb	r3, r3
 80280de:	930f      	str	r3, [sp, #60]	; 0x3c
 80280e0:	b292      	uxth	r2, r2
 80280e2:	b289      	uxth	r1, r1
 80280e4:	fb02 f301 	mul.w	r3, r2, r1
 80280e8:	0112      	lsls	r2, r2, #4
 80280ea:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80280ee:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80280f2:	1ad2      	subs	r2, r2, r3
 80280f4:	b289      	uxth	r1, r1
 80280f6:	b292      	uxth	r2, r2
 80280f8:	1a40      	subs	r0, r0, r1
 80280fa:	fa1f fe80 	uxth.w	lr, r0
 80280fe:	980e      	ldr	r0, [sp, #56]	; 0x38
 8028100:	4342      	muls	r2, r0
 8028102:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8028106:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8028108:	fb01 c102 	mla	r1, r1, r2, ip
 802810c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802810e:	f897 c000 	ldrb.w	ip, [r7]
 8028112:	fb03 1302 	mla	r3, r3, r2, r1
 8028116:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802811a:	2bff      	cmp	r3, #255	; 0xff
 802811c:	f040 8091 	bne.w	8028242 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8028120:	f888 c000 	strb.w	ip, [r8]
 8028124:	787b      	ldrb	r3, [r7, #1]
 8028126:	f888 3001 	strb.w	r3, [r8, #1]
 802812a:	78bb      	ldrb	r3, [r7, #2]
 802812c:	f888 3002 	strb.w	r3, [r8, #2]
 8028130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028132:	f108 0804 	add.w	r8, r8, #4
 8028136:	449b      	add	fp, r3
 8028138:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802813a:	441d      	add	r5, r3
 802813c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802813e:	3b01      	subs	r3, #1
 8028140:	9309      	str	r3, [sp, #36]	; 0x24
 8028142:	e773      	b.n	802802c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8028144:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8028146:	3c01      	subs	r4, #1
 8028148:	449b      	add	fp, r3
 802814a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802814c:	441d      	add	r5, r3
 802814e:	9b07      	ldr	r3, [sp, #28]
 8028150:	3304      	adds	r3, #4
 8028152:	9307      	str	r3, [sp, #28]
 8028154:	e749      	b.n	8027fea <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8028156:	d023      	beq.n	80281a0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8028158:	1e63      	subs	r3, r4, #1
 802815a:	9821      	ldr	r0, [sp, #132]	; 0x84
 802815c:	fb00 b003 	mla	r0, r0, r3, fp
 8028160:	1400      	asrs	r0, r0, #16
 8028162:	f53f af5e 	bmi.w	8028022 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028166:	3901      	subs	r1, #1
 8028168:	4288      	cmp	r0, r1
 802816a:	f6bf af5a 	bge.w	8028022 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802816e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8028170:	fb01 5303 	mla	r3, r1, r3, r5
 8028174:	141b      	asrs	r3, r3, #16
 8028176:	f53f af54 	bmi.w	8028022 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802817a:	3a01      	subs	r2, #1
 802817c:	4293      	cmp	r3, r2
 802817e:	f6bf af50 	bge.w	8028022 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8028182:	9b07      	ldr	r3, [sp, #28]
 8028184:	46a0      	mov	r8, r4
 8028186:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 802818a:	1d1a      	adds	r2, r3, #4
 802818c:	f1b8 0f00 	cmp.w	r8, #0
 8028190:	f300 80af 	bgt.w	80282f2 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 8028194:	9b07      	ldr	r3, [sp, #28]
 8028196:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 802819a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802819e:	9307      	str	r3, [sp, #28]
 80281a0:	9b08      	ldr	r3, [sp, #32]
 80281a2:	2b00      	cmp	r3, #0
 80281a4:	f340 8167 	ble.w	8028476 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80281a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80281ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80281ae:	ee30 0a04 	vadd.f32	s0, s0, s8
 80281b2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80281b6:	eef0 6a62 	vmov.f32	s13, s5
 80281ba:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80281be:	ee31 1a05 	vadd.f32	s2, s2, s10
 80281c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281c6:	ee16 ba90 	vmov	fp, s13
 80281ca:	eef0 6a43 	vmov.f32	s13, s6
 80281ce:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80281d2:	ee16 5a90 	vmov	r5, s13
 80281d6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80281da:	ee61 7a27 	vmul.f32	s15, s2, s15
 80281de:	ee77 2a62 	vsub.f32	s5, s14, s5
 80281e2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80281e6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80281ea:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80281ee:	ee12 2a90 	vmov	r2, s5
 80281f2:	eef0 2a47 	vmov.f32	s5, s14
 80281f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80281fa:	ee13 2a10 	vmov	r2, s6
 80281fe:	9321      	str	r3, [sp, #132]	; 0x84
 8028200:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8028202:	eeb0 3a67 	vmov.f32	s6, s15
 8028206:	fb92 f3f3 	sdiv	r3, r2, r3
 802820a:	9322      	str	r3, [sp, #136]	; 0x88
 802820c:	9b08      	ldr	r3, [sp, #32]
 802820e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8028210:	3b01      	subs	r3, #1
 8028212:	9308      	str	r3, [sp, #32]
 8028214:	bf08      	it	eq
 8028216:	4614      	moveq	r4, r2
 8028218:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802821a:	bf18      	it	ne
 802821c:	461c      	movne	r4, r3
 802821e:	e6d5      	b.n	8027fcc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8028220:	2900      	cmp	r1, #0
 8028222:	f43f af5d 	beq.w	80280e0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028226:	eb09 0003 	add.w	r0, r9, r3
 802822a:	0843      	lsrs	r3, r0, #1
 802822c:	07c0      	lsls	r0, r0, #31
 802822e:	5cf3      	ldrb	r3, [r6, r3]
 8028230:	bf54      	ite	pl
 8028232:	f003 030f 	andpl.w	r3, r3, #15
 8028236:	111b      	asrmi	r3, r3, #4
 8028238:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802823c:	b2db      	uxtb	r3, r3
 802823e:	930b      	str	r3, [sp, #44]	; 0x2c
 8028240:	e74e      	b.n	80280e0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028242:	2b00      	cmp	r3, #0
 8028244:	f43f af74 	beq.w	8028130 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8028248:	f898 a003 	ldrb.w	sl, [r8, #3]
 802824c:	fb03 fc0c 	mul.w	ip, r3, ip
 8028250:	78ba      	ldrb	r2, [r7, #2]
 8028252:	fb03 f00a 	mul.w	r0, r3, sl
 8028256:	f897 e001 	ldrb.w	lr, [r7, #1]
 802825a:	9210      	str	r2, [sp, #64]	; 0x40
 802825c:	eb03 020a 	add.w	r2, r3, sl
 8028260:	1c41      	adds	r1, r0, #1
 8028262:	fb03 fe0e 	mul.w	lr, r3, lr
 8028266:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802826a:	1208      	asrs	r0, r1, #8
 802826c:	ebaa 0100 	sub.w	r1, sl, r0
 8028270:	1a12      	subs	r2, r2, r0
 8028272:	f898 0000 	ldrb.w	r0, [r8]
 8028276:	b2d2      	uxtb	r2, r2
 8028278:	fb01 cc00 	mla	ip, r1, r0, ip
 802827c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8028280:	f888 2003 	strb.w	r2, [r8, #3]
 8028284:	fb01 ee00 	mla	lr, r1, r0, lr
 8028288:	9810      	ldr	r0, [sp, #64]	; 0x40
 802828a:	fb9c fcf2 	sdiv	ip, ip, r2
 802828e:	4343      	muls	r3, r0
 8028290:	f888 c000 	strb.w	ip, [r8]
 8028294:	f898 c002 	ldrb.w	ip, [r8, #2]
 8028298:	fb01 330c 	mla	r3, r1, ip, r3
 802829c:	fb9e fef2 	sdiv	lr, lr, r2
 80282a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80282a4:	f888 e001 	strb.w	lr, [r8, #1]
 80282a8:	f888 3002 	strb.w	r3, [r8, #2]
 80282ac:	e740      	b.n	8028130 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80282ae:	bf00      	nop
 80282b0:	2003bef0 	.word	0x2003bef0
 80282b4:	f113 0a01 	adds.w	sl, r3, #1
 80282b8:	f53f af3a 	bmi.w	8028130 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80282bc:	45d4      	cmp	ip, sl
 80282be:	f6ff af37 	blt.w	8028130 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80282c2:	f110 0a01 	adds.w	sl, r0, #1
 80282c6:	f53f af33 	bmi.w	8028130 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80282ca:	45d6      	cmp	lr, sl
 80282cc:	f6ff af30 	blt.w	8028130 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80282d0:	e9cd 3002 	strd	r3, r0, [sp, #8]
 80282d4:	fa0f f38e 	sxth.w	r3, lr
 80282d8:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80282da:	9301      	str	r3, [sp, #4]
 80282dc:	fa0f f38c 	sxth.w	r3, ip
 80282e0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 80282e4:	9300      	str	r3, [sp, #0]
 80282e6:	4632      	mov	r2, r6
 80282e8:	464b      	mov	r3, r9
 80282ea:	4641      	mov	r1, r8
 80282ec:	f7ff fd80 	bl	8027df0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>
 80282f0:	e71e      	b.n	8028130 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80282f2:	ea4f 412b 	mov.w	r1, fp, asr #16
 80282f6:	f3cb 3c03 	ubfx	ip, fp, #12, #4
 80282fa:	142b      	asrs	r3, r5, #16
 80282fc:	f3c5 3e03 	ubfx	lr, r5, #12, #4
 8028300:	fb09 1303 	mla	r3, r9, r3, r1
 8028304:	0859      	lsrs	r1, r3, #1
 8028306:	07d8      	lsls	r0, r3, #31
 8028308:	5c71      	ldrb	r1, [r6, r1]
 802830a:	bf54      	ite	pl
 802830c:	f001 010f 	andpl.w	r1, r1, #15
 8028310:	1109      	asrmi	r1, r1, #4
 8028312:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028316:	b2c9      	uxtb	r1, r1
 8028318:	f1bc 0f00 	cmp.w	ip, #0
 802831c:	d062      	beq.n	80283e4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802831e:	f103 0a01 	add.w	sl, r3, #1
 8028322:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8028326:	f01a 0f01 	tst.w	sl, #1
 802832a:	5c30      	ldrb	r0, [r6, r0]
 802832c:	bf0c      	ite	eq
 802832e:	f000 000f 	andeq.w	r0, r0, #15
 8028332:	1100      	asrne	r0, r0, #4
 8028334:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028338:	b2c0      	uxtb	r0, r0
 802833a:	9011      	str	r0, [sp, #68]	; 0x44
 802833c:	f1be 0f00 	cmp.w	lr, #0
 8028340:	d019      	beq.n	8028376 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8028342:	444b      	add	r3, r9
 8028344:	0858      	lsrs	r0, r3, #1
 8028346:	f013 0f01 	tst.w	r3, #1
 802834a:	f103 0301 	add.w	r3, r3, #1
 802834e:	5c30      	ldrb	r0, [r6, r0]
 8028350:	bf0c      	ite	eq
 8028352:	f000 000f 	andeq.w	r0, r0, #15
 8028356:	1100      	asrne	r0, r0, #4
 8028358:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802835c:	b2c0      	uxtb	r0, r0
 802835e:	900c      	str	r0, [sp, #48]	; 0x30
 8028360:	0858      	lsrs	r0, r3, #1
 8028362:	07db      	lsls	r3, r3, #31
 8028364:	5c30      	ldrb	r0, [r6, r0]
 8028366:	bf54      	ite	pl
 8028368:	f000 000f 	andpl.w	r0, r0, #15
 802836c:	1100      	asrmi	r0, r0, #4
 802836e:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028372:	b2c0      	uxtb	r0, r0
 8028374:	9012      	str	r0, [sp, #72]	; 0x48
 8028376:	fa1f fc8c 	uxth.w	ip, ip
 802837a:	fa1f fe8e 	uxth.w	lr, lr
 802837e:	fb0c f30e 	mul.w	r3, ip, lr
 8028382:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8028386:	ebc3 1e0e 	rsb	lr, r3, lr, lsl #4
 802838a:	f5cc 7080 	rsb	r0, ip, #256	; 0x100
 802838e:	ebac 0c03 	sub.w	ip, ip, r3
 8028392:	fa1f fe8e 	uxth.w	lr, lr
 8028396:	fa1f fc8c 	uxth.w	ip, ip
 802839a:	eba0 000e 	sub.w	r0, r0, lr
 802839e:	fa1f fa80 	uxth.w	sl, r0
 80283a2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80283a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80283a8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80283aa:	fb01 c10a 	mla	r1, r1, sl, ip
 80283ae:	fb0e 1e00 	mla	lr, lr, r0, r1
 80283b2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80283b4:	fb03 e301 	mla	r3, r3, r1, lr
 80283b8:	f897 e000 	ldrb.w	lr, [r7]
 80283bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80283c0:	2bff      	cmp	r3, #255	; 0xff
 80283c2:	d11f      	bne.n	8028404 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 80283c4:	f802 ec04 	strb.w	lr, [r2, #-4]
 80283c8:	787b      	ldrb	r3, [r7, #1]
 80283ca:	f802 3c03 	strb.w	r3, [r2, #-3]
 80283ce:	78bb      	ldrb	r3, [r7, #2]
 80283d0:	f802 3c02 	strb.w	r3, [r2, #-2]
 80283d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80283d6:	3204      	adds	r2, #4
 80283d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80283dc:	449b      	add	fp, r3
 80283de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80283e0:	441d      	add	r5, r3
 80283e2:	e6d3      	b.n	802818c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 80283e4:	f1be 0f00 	cmp.w	lr, #0
 80283e8:	d0c5      	beq.n	8028376 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 80283ea:	444b      	add	r3, r9
 80283ec:	0858      	lsrs	r0, r3, #1
 80283ee:	07db      	lsls	r3, r3, #31
 80283f0:	5c30      	ldrb	r0, [r6, r0]
 80283f2:	bf54      	ite	pl
 80283f4:	f000 000f 	andpl.w	r0, r0, #15
 80283f8:	1100      	asrmi	r0, r0, #4
 80283fa:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80283fe:	b2c0      	uxtb	r0, r0
 8028400:	900c      	str	r0, [sp, #48]	; 0x30
 8028402:	e7b8      	b.n	8028376 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8028404:	2b00      	cmp	r3, #0
 8028406:	d0e5      	beq.n	80283d4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8028408:	78b9      	ldrb	r1, [r7, #2]
 802840a:	fb03 fe0e 	mul.w	lr, r3, lr
 802840e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8028412:	9110      	str	r1, [sp, #64]	; 0x40
 8028414:	fb03 f100 	mul.w	r1, r3, r0
 8028418:	f897 a001 	ldrb.w	sl, [r7, #1]
 802841c:	f101 0c01 	add.w	ip, r1, #1
 8028420:	fb03 fa0a 	mul.w	sl, r3, sl
 8028424:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8028428:	1819      	adds	r1, r3, r0
 802842a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802842e:	eba0 000c 	sub.w	r0, r0, ip
 8028432:	eba1 010c 	sub.w	r1, r1, ip
 8028436:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 802843a:	9009      	str	r0, [sp, #36]	; 0x24
 802843c:	b2c9      	uxtb	r1, r1
 802843e:	fb00 ee0c 	mla	lr, r0, ip, lr
 8028442:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8028446:	f802 1c01 	strb.w	r1, [r2, #-1]
 802844a:	fb00 aa0c 	mla	sl, r0, ip, sl
 802844e:	9810      	ldr	r0, [sp, #64]	; 0x40
 8028450:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 8028454:	4343      	muls	r3, r0
 8028456:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028458:	fb00 330c 	mla	r3, r0, ip, r3
 802845c:	fb9e fef1 	sdiv	lr, lr, r1
 8028460:	fb9a faf1 	sdiv	sl, sl, r1
 8028464:	fb93 f3f1 	sdiv	r3, r3, r1
 8028468:	f802 ec04 	strb.w	lr, [r2, #-4]
 802846c:	f802 ac03 	strb.w	sl, [r2, #-3]
 8028470:	f802 3c02 	strb.w	r3, [r2, #-2]
 8028474:	e7ae      	b.n	80283d4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8028476:	b015      	add	sp, #84	; 0x54
 8028478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802847c <CRC_Lock>:
 802847c:	4a20      	ldr	r2, [pc, #128]	; (8028500 <CRC_Lock+0x84>)
 802847e:	b530      	push	{r4, r5, lr}
 8028480:	6813      	ldr	r3, [r2, #0]
 8028482:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8028486:	f24c 2540 	movw	r5, #49728	; 0xc240
 802848a:	f023 0301 	bic.w	r3, r3, #1
 802848e:	6013      	str	r3, [r2, #0]
 8028490:	4b1c      	ldr	r3, [pc, #112]	; (8028504 <CRC_Lock+0x88>)
 8028492:	681a      	ldr	r2, [r3, #0]
 8028494:	4022      	ands	r2, r4
 8028496:	42aa      	cmp	r2, r5
 8028498:	d005      	beq.n	80284a6 <CRC_Lock+0x2a>
 802849a:	681b      	ldr	r3, [r3, #0]
 802849c:	f24c 2270 	movw	r2, #49776	; 0xc270
 80284a0:	4023      	ands	r3, r4
 80284a2:	4293      	cmp	r3, r2
 80284a4:	d124      	bne.n	80284f0 <CRC_Lock+0x74>
 80284a6:	4b18      	ldr	r3, [pc, #96]	; (8028508 <CRC_Lock+0x8c>)
 80284a8:	681b      	ldr	r3, [r3, #0]
 80284aa:	bb0b      	cbnz	r3, 80284f0 <CRC_Lock+0x74>
 80284ac:	4b17      	ldr	r3, [pc, #92]	; (802850c <CRC_Lock+0x90>)
 80284ae:	681a      	ldr	r2, [r3, #0]
 80284b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80284b4:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80284b8:	d00d      	beq.n	80284d6 <CRC_Lock+0x5a>
 80284ba:	681a      	ldr	r2, [r3, #0]
 80284bc:	f240 4483 	movw	r4, #1155	; 0x483
 80284c0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80284c4:	42a2      	cmp	r2, r4
 80284c6:	d006      	beq.n	80284d6 <CRC_Lock+0x5a>
 80284c8:	681b      	ldr	r3, [r3, #0]
 80284ca:	f240 4285 	movw	r2, #1157	; 0x485
 80284ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80284d2:	4293      	cmp	r3, r2
 80284d4:	d10c      	bne.n	80284f0 <CRC_Lock+0x74>
 80284d6:	4b0e      	ldr	r3, [pc, #56]	; (8028510 <CRC_Lock+0x94>)
 80284d8:	2201      	movs	r2, #1
 80284da:	601a      	str	r2, [r3, #0]
 80284dc:	681a      	ldr	r2, [r3, #0]
 80284de:	2a00      	cmp	r2, #0
 80284e0:	d1fc      	bne.n	80284dc <CRC_Lock+0x60>
 80284e2:	4b0c      	ldr	r3, [pc, #48]	; (8028514 <CRC_Lock+0x98>)
 80284e4:	6018      	str	r0, [r3, #0]
 80284e6:	6818      	ldr	r0, [r3, #0]
 80284e8:	1a43      	subs	r3, r0, r1
 80284ea:	4258      	negs	r0, r3
 80284ec:	4158      	adcs	r0, r3
 80284ee:	bd30      	pop	{r4, r5, pc}
 80284f0:	4b09      	ldr	r3, [pc, #36]	; (8028518 <CRC_Lock+0x9c>)
 80284f2:	2201      	movs	r2, #1
 80284f4:	601a      	str	r2, [r3, #0]
 80284f6:	681a      	ldr	r2, [r3, #0]
 80284f8:	2a00      	cmp	r2, #0
 80284fa:	d1fc      	bne.n	80284f6 <CRC_Lock+0x7a>
 80284fc:	4b07      	ldr	r3, [pc, #28]	; (802851c <CRC_Lock+0xa0>)
 80284fe:	e7f1      	b.n	80284e4 <CRC_Lock+0x68>
 8028500:	e0002000 	.word	0xe0002000
 8028504:	e000ed00 	.word	0xe000ed00
 8028508:	e0042000 	.word	0xe0042000
 802850c:	5c001000 	.word	0x5c001000
 8028510:	58024c08 	.word	0x58024c08
 8028514:	58024c00 	.word	0x58024c00
 8028518:	40023008 	.word	0x40023008
 802851c:	40023000 	.word	0x40023000

08028520 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8028520:	6101      	str	r1, [r0, #16]
 8028522:	4770      	bx	lr

08028524 <_ZN8touchgfx8Gestures4tickEv>:
 8028524:	7b83      	ldrb	r3, [r0, #14]
 8028526:	b14b      	cbz	r3, 802853c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8028528:	8903      	ldrh	r3, [r0, #8]
 802852a:	3301      	adds	r3, #1
 802852c:	b29b      	uxth	r3, r3
 802852e:	2b07      	cmp	r3, #7
 8028530:	8103      	strh	r3, [r0, #8]
 8028532:	bf81      	itttt	hi
 8028534:	2300      	movhi	r3, #0
 8028536:	8143      	strhhi	r3, [r0, #10]
 8028538:	8183      	strhhi	r3, [r0, #12]
 802853a:	7383      	strbhi	r3, [r0, #14]
 802853c:	4770      	bx	lr
	...

08028540 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8028540:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8028544:	4698      	mov	r8, r3
 8028546:	8883      	ldrh	r3, [r0, #4]
 8028548:	4604      	mov	r4, r0
 802854a:	4617      	mov	r7, r2
 802854c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028550:	eba8 0303 	sub.w	r3, r8, r3
 8028554:	4a19      	ldr	r2, [pc, #100]	; (80285bc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8028556:	460e      	mov	r6, r1
 8028558:	b21b      	sxth	r3, r3
 802855a:	88c1      	ldrh	r1, [r0, #6]
 802855c:	9200      	str	r2, [sp, #0]
 802855e:	2000      	movs	r0, #0
 8028560:	2b00      	cmp	r3, #0
 8028562:	8aa2      	ldrh	r2, [r4, #20]
 8028564:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 8028568:	bfb8      	it	lt
 802856a:	425b      	neglt	r3, r3
 802856c:	f88d 0004 	strb.w	r0, [sp, #4]
 8028570:	f8ad 1008 	strh.w	r1, [sp, #8]
 8028574:	b21b      	sxth	r3, r3
 8028576:	f8ad 800a 	strh.w	r8, [sp, #10]
 802857a:	f8ad 500c 	strh.w	r5, [sp, #12]
 802857e:	4293      	cmp	r3, r2
 8028580:	dc07      	bgt.n	8028592 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 8028582:	1a69      	subs	r1, r5, r1
 8028584:	b209      	sxth	r1, r1
 8028586:	2900      	cmp	r1, #0
 8028588:	bfb8      	it	lt
 802858a:	4249      	neglt	r1, r1
 802858c:	b209      	sxth	r1, r1
 802858e:	428a      	cmp	r2, r1
 8028590:	da10      	bge.n	80285b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 8028592:	6920      	ldr	r0, [r4, #16]
 8028594:	4669      	mov	r1, sp
 8028596:	eba8 0606 	sub.w	r6, r8, r6
 802859a:	1bef      	subs	r7, r5, r7
 802859c:	6803      	ldr	r3, [r0, #0]
 802859e:	685b      	ldr	r3, [r3, #4]
 80285a0:	4798      	blx	r3
 80285a2:	2300      	movs	r3, #0
 80285a4:	2001      	movs	r0, #1
 80285a6:	8166      	strh	r6, [r4, #10]
 80285a8:	8123      	strh	r3, [r4, #8]
 80285aa:	81a7      	strh	r7, [r4, #12]
 80285ac:	f8a4 8004 	strh.w	r8, [r4, #4]
 80285b0:	80e5      	strh	r5, [r4, #6]
 80285b2:	73a0      	strb	r0, [r4, #14]
 80285b4:	b004      	add	sp, #16
 80285b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80285ba:	bf00      	nop
 80285bc:	0802f99c 	.word	0x0802f99c

080285c0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80285c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80285c2:	461e      	mov	r6, r3
 80285c4:	1e4b      	subs	r3, r1, #1
 80285c6:	b085      	sub	sp, #20
 80285c8:	4604      	mov	r4, r0
 80285ca:	2b01      	cmp	r3, #1
 80285cc:	460d      	mov	r5, r1
 80285ce:	4617      	mov	r7, r2
 80285d0:	d84b      	bhi.n	802866a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80285d2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80285d6:	1cd3      	adds	r3, r2, #3
 80285d8:	b29b      	uxth	r3, r3
 80285da:	2b06      	cmp	r3, #6
 80285dc:	d916      	bls.n	802860c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80285de:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8028680 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80285e2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80285e6:	f8cd c004 	str.w	ip, [sp, #4]
 80285ea:	f04f 0c00 	mov.w	ip, #0
 80285ee:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80285f2:	6900      	ldr	r0, [r0, #16]
 80285f4:	f8ad 100c 	strh.w	r1, [sp, #12]
 80285f8:	a901      	add	r1, sp, #4
 80285fa:	f88d c008 	strb.w	ip, [sp, #8]
 80285fe:	f8ad 200a 	strh.w	r2, [sp, #10]
 8028602:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028606:	6803      	ldr	r3, [r0, #0]
 8028608:	689b      	ldr	r3, [r3, #8]
 802860a:	4798      	blx	r3
 802860c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8028610:	1cd3      	adds	r3, r2, #3
 8028612:	b29b      	uxth	r3, r3
 8028614:	2b06      	cmp	r3, #6
 8028616:	d916      	bls.n	8028646 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8028618:	f8df c064 	ldr.w	ip, [pc, #100]	; 8028680 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802861c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8028620:	f8cd c004 	str.w	ip, [sp, #4]
 8028624:	f04f 0c01 	mov.w	ip, #1
 8028628:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802862c:	6920      	ldr	r0, [r4, #16]
 802862e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8028632:	a901      	add	r1, sp, #4
 8028634:	f88d c008 	strb.w	ip, [sp, #8]
 8028638:	f8ad 200a 	strh.w	r2, [sp, #10]
 802863c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028640:	6803      	ldr	r3, [r0, #0]
 8028642:	689b      	ldr	r3, [r3, #8]
 8028644:	4798      	blx	r3
 8028646:	4b0d      	ldr	r3, [pc, #52]	; (802867c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8028648:	a901      	add	r1, sp, #4
 802864a:	6920      	ldr	r0, [r4, #16]
 802864c:	9301      	str	r3, [sp, #4]
 802864e:	2300      	movs	r3, #0
 8028650:	f88d 5008 	strb.w	r5, [sp, #8]
 8028654:	f8ad 700a 	strh.w	r7, [sp, #10]
 8028658:	f8ad 600c 	strh.w	r6, [sp, #12]
 802865c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8028660:	6803      	ldr	r3, [r0, #0]
 8028662:	681b      	ldr	r3, [r3, #0]
 8028664:	4798      	blx	r3
 8028666:	b005      	add	sp, #20
 8028668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802866a:	2900      	cmp	r1, #0
 802866c:	d1eb      	bne.n	8028646 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802866e:	80a2      	strh	r2, [r4, #4]
 8028670:	80c6      	strh	r6, [r0, #6]
 8028672:	60a1      	str	r1, [r4, #8]
 8028674:	81a1      	strh	r1, [r4, #12]
 8028676:	73a1      	strb	r1, [r4, #14]
 8028678:	e7e5      	b.n	8028646 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802867a:	bf00      	nop
 802867c:	0802f988 	.word	0x0802f988
 8028680:	0802f9b0 	.word	0x0802f9b0

08028684 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 8028684:	10c9      	asrs	r1, r1, #3
 8028686:	2900      	cmp	r1, #0
 8028688:	bfb8      	it	lt
 802868a:	4249      	neglt	r1, r1
 802868c:	2801      	cmp	r0, #1
 802868e:	d108      	bne.n	80286a2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 8028690:	f3c1 0008 	ubfx	r0, r1, #0, #9
 8028694:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8028698:	4601      	mov	r1, r0
 802869a:	dd02      	ble.n	80286a2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 802869c:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80286a0:	4770      	bx	lr
 80286a2:	29ff      	cmp	r1, #255	; 0xff
 80286a4:	bfa8      	it	ge
 80286a6:	21ff      	movge	r1, #255	; 0xff
 80286a8:	4608      	mov	r0, r1
 80286aa:	4770      	bx	lr

080286ac <_ZN8touchgfx10Rasterizer6lineToEii>:
 80286ac:	b410      	push	{r4}
 80286ae:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80286b2:	429c      	cmp	r4, r3
 80286b4:	d803      	bhi.n	80286be <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80286b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80286ba:	f7ef be3d 	b.w	8018338 <_ZN8touchgfx7Outline6lineToEii>
 80286be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80286c2:	4770      	bx	lr

080286c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80286c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286c8:	b08b      	sub	sp, #44	; 0x2c
 80286ca:	4606      	mov	r6, r0
 80286cc:	468a      	mov	sl, r1
 80286ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80286d2:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80286d6:	9308      	str	r3, [sp, #32]
 80286d8:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80286dc:	9309      	str	r3, [sp, #36]	; 0x24
 80286de:	f7ef ff96 	bl	801860e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80286e2:	68b5      	ldr	r5, [r6, #8]
 80286e4:	4604      	mov	r4, r0
 80286e6:	2d00      	cmp	r5, #0
 80286e8:	d044      	beq.n	8028774 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80286ea:	6873      	ldr	r3, [r6, #4]
 80286ec:	42ab      	cmp	r3, r5
 80286ee:	d33d      	bcc.n	802876c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80286f0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80286f4:	f04f 0800 	mov.w	r8, #0
 80286f8:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 80286fc:	eb02 0b03 	add.w	fp, r2, r3
 8028700:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8028704:	fb02 1203 	mla	r2, r2, r3, r1
 8028708:	9205      	str	r2, [sp, #20]
 802870a:	1e6a      	subs	r2, r5, #1
 802870c:	9204      	str	r2, [sp, #16]
 802870e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8028712:	f9b4 7000 	ldrsh.w	r7, [r4]
 8028716:	454b      	cmp	r3, r9
 8028718:	463a      	mov	r2, r7
 802871a:	d008      	beq.n	802872e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802871c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8028720:	eb03 0b09 	add.w	fp, r3, r9
 8028724:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8028728:	fb03 1309 	mla	r3, r3, r9, r1
 802872c:	9305      	str	r3, [sp, #20]
 802872e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8028732:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8028736:	4498      	add	r8, r3
 8028738:	9b04      	ldr	r3, [sp, #16]
 802873a:	3b01      	subs	r3, #1
 802873c:	9304      	str	r3, [sp, #16]
 802873e:	9b04      	ldr	r3, [sp, #16]
 8028740:	3301      	adds	r3, #1
 8028742:	d015      	beq.n	8028770 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8028744:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8028748:	42bb      	cmp	r3, r7
 802874a:	d117      	bne.n	802877c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802874c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8028750:	9b04      	ldr	r3, [sp, #16]
 8028752:	4548      	cmp	r0, r9
 8028754:	f103 33ff 	add.w	r3, r3, #4294967295
 8028758:	d17d      	bne.n	8028856 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 802875a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 802875e:	4401      	add	r1, r0
 8028760:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8028764:	4480      	add	r8, r0
 8028766:	e7e9      	b.n	802873c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8028768:	461f      	mov	r7, r3
 802876a:	e042      	b.n	80287f2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 802876c:	2000      	movs	r0, #0
 802876e:	e002      	b.n	8028776 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8028770:	2900      	cmp	r1, #0
 8028772:	d16d      	bne.n	8028850 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 8028774:	2001      	movs	r0, #1
 8028776:	b00b      	add	sp, #44	; 0x2c
 8028778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802877c:	b379      	cbz	r1, 80287de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 802877e:	2f00      	cmp	r7, #0
 8028780:	db29      	blt.n	80287d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8028782:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8028786:	42bb      	cmp	r3, r7
 8028788:	dd25      	ble.n	80287d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802878a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 802878e:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8028792:	f7ff ff77 	bl	8028684 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 8028796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028798:	fb10 f003 	smulbb	r0, r0, r3
 802879c:	b280      	uxth	r0, r0
 802879e:	1c41      	adds	r1, r0, #1
 80287a0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80287a4:	1209      	asrs	r1, r1, #8
 80287a6:	f011 0fff 	tst.w	r1, #255	; 0xff
 80287aa:	d014      	beq.n	80287d6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80287ac:	b2c9      	uxtb	r1, r1
 80287ae:	9808      	ldr	r0, [sp, #32]
 80287b0:	b2ba      	uxth	r2, r7
 80287b2:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 80287b4:	9102      	str	r1, [sp, #8]
 80287b6:	2101      	movs	r1, #1
 80287b8:	4413      	add	r3, r2
 80287ba:	4402      	add	r2, r0
 80287bc:	9101      	str	r1, [sp, #4]
 80287be:	fa0f f18b 	sxth.w	r1, fp
 80287c2:	f8da 0000 	ldr.w	r0, [sl]
 80287c6:	b21b      	sxth	r3, r3
 80287c8:	9100      	str	r1, [sp, #0]
 80287ca:	b212      	sxth	r2, r2
 80287cc:	6941      	ldr	r1, [r0, #20]
 80287ce:	4650      	mov	r0, sl
 80287d0:	460d      	mov	r5, r1
 80287d2:	9905      	ldr	r1, [sp, #20]
 80287d4:	47a8      	blx	r5
 80287d6:	9b04      	ldr	r3, [sp, #16]
 80287d8:	1c7a      	adds	r2, r7, #1
 80287da:	3301      	adds	r3, #1
 80287dc:	d0ca      	beq.n	8028774 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80287de:	f9b4 7000 	ldrsh.w	r7, [r4]
 80287e2:	1abb      	subs	r3, r7, r2
 80287e4:	2b00      	cmp	r3, #0
 80287e6:	dd31      	ble.n	802884c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80287e8:	2a00      	cmp	r2, #0
 80287ea:	dabd      	bge.n	8028768 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80287ec:	2f00      	cmp	r7, #0
 80287ee:	dd2d      	ble.n	802884c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80287f0:	2200      	movs	r2, #0
 80287f2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80287f6:	19d1      	adds	r1, r2, r7
 80287f8:	4299      	cmp	r1, r3
 80287fa:	db02      	blt.n	8028802 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80287fc:	1a9f      	subs	r7, r3, r2
 80287fe:	2f00      	cmp	r7, #0
 8028800:	dd24      	ble.n	802884c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028802:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8028806:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802880a:	f7ff ff3b 	bl	8028684 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802880e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028810:	fb10 f003 	smulbb	r0, r0, r3
 8028814:	b280      	uxth	r0, r0
 8028816:	1c41      	adds	r1, r0, #1
 8028818:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802881c:	1209      	asrs	r1, r1, #8
 802881e:	f011 0fff 	tst.w	r1, #255	; 0xff
 8028822:	d013      	beq.n	802884c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8028824:	b292      	uxth	r2, r2
 8028826:	9808      	ldr	r0, [sp, #32]
 8028828:	b2c9      	uxtb	r1, r1
 802882a:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802882c:	b23f      	sxth	r7, r7
 802882e:	4413      	add	r3, r2
 8028830:	9102      	str	r1, [sp, #8]
 8028832:	4402      	add	r2, r0
 8028834:	fa0f f18b 	sxth.w	r1, fp
 8028838:	f8da 0000 	ldr.w	r0, [sl]
 802883c:	b21b      	sxth	r3, r3
 802883e:	9100      	str	r1, [sp, #0]
 8028840:	b212      	sxth	r2, r2
 8028842:	9701      	str	r7, [sp, #4]
 8028844:	9905      	ldr	r1, [sp, #20]
 8028846:	6947      	ldr	r7, [r0, #20]
 8028848:	4650      	mov	r0, sl
 802884a:	47b8      	blx	r7
 802884c:	464b      	mov	r3, r9
 802884e:	e75e      	b.n	802870e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8028850:	2f00      	cmp	r7, #0
 8028852:	da96      	bge.n	8028782 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 8028854:	e78e      	b.n	8028774 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8028856:	2900      	cmp	r1, #0
 8028858:	d0f8      	beq.n	802884c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802885a:	e790      	b.n	802877e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0802885c <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 802885c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8028860:	4b4b      	ldr	r3, [pc, #300]	; (8028990 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 8028862:	2500      	movs	r5, #0
 8028864:	f100 0620 	add.w	r6, r0, #32
 8028868:	4604      	mov	r4, r0
 802886a:	f100 0718 	add.w	r7, r0, #24
 802886e:	4690      	mov	r8, r2
 8028870:	e9c0 3100 	strd	r3, r1, [r0]
 8028874:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8028878:	e9c0 5504 	strd	r5, r5, [r0, #16]
 802887c:	e9c0 5506 	strd	r5, r5, [r0, #24]
 8028880:	4630      	mov	r0, r6
 8028882:	f7ef f89f 	bl	80179c4 <_ZN8touchgfx7OutlineC1Ev>
 8028886:	2301      	movs	r3, #1
 8028888:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 802888c:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 8028890:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 8028894:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 8028898:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 802889c:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80288a0:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80288a4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80288a8:	9500      	str	r5, [sp, #0]
 80288aa:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80288ae:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 80288b2:	f9b8 2000 	ldrsh.w	r2, [r8]
 80288b6:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 80288ba:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 80288be:	4410      	add	r0, r2
 80288c0:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 80288c4:	b280      	uxth	r0, r0
 80288c6:	fa0f fa80 	sxth.w	sl, r0
 80288ca:	45aa      	cmp	sl, r5
 80288cc:	dd5c      	ble.n	8028988 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80288ce:	4591      	cmp	r9, r2
 80288d0:	dd5a      	ble.n	8028988 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80288d2:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 80288d6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80288da:	440b      	add	r3, r1
 80288dc:	b29b      	uxth	r3, r3
 80288de:	b21d      	sxth	r5, r3
 80288e0:	2d00      	cmp	r5, #0
 80288e2:	dd51      	ble.n	8028988 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80288e4:	458e      	cmp	lr, r1
 80288e6:	dd4f      	ble.n	8028988 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 80288e8:	45d1      	cmp	r9, sl
 80288ea:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80288ee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80288f2:	bfb8      	it	lt
 80288f4:	fa1f f089 	uxthlt.w	r0, r9
 80288f8:	45ae      	cmp	lr, r5
 80288fa:	f8ad 2000 	strh.w	r2, [sp]
 80288fe:	bfb8      	it	lt
 8028900:	fa1f f38e 	uxthlt.w	r3, lr
 8028904:	1a80      	subs	r0, r0, r2
 8028906:	f8ad 1002 	strh.w	r1, [sp, #2]
 802890a:	1a5b      	subs	r3, r3, r1
 802890c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8028910:	f8ad 3006 	strh.w	r3, [sp, #6]
 8028914:	466d      	mov	r5, sp
 8028916:	e895 0003 	ldmia.w	r5, {r0, r1}
 802891a:	e887 0003 	stmia.w	r7, {r0, r1}
 802891e:	f8dc 3000 	ldr.w	r3, [ip]
 8028922:	4660      	mov	r0, ip
 8028924:	4639      	mov	r1, r7
 8028926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028928:	4798      	blx	r3
 802892a:	6861      	ldr	r1, [r4, #4]
 802892c:	4628      	mov	r0, r5
 802892e:	3104      	adds	r1, #4
 8028930:	f7f1 f9cc 	bl	8019ccc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8028934:	4638      	mov	r0, r7
 8028936:	f7f1 f9a1 	bl	8019c7c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802893a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802893e:	f8bd 2000 	ldrh.w	r2, [sp]
 8028942:	4630      	mov	r0, r6
 8028944:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8028948:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802894c:	f7ef f81f 	bl	801798e <_ZN8touchgfx7Outline5resetEv>
 8028950:	f9bd 3000 	ldrsh.w	r3, [sp]
 8028954:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 8028958:	4620      	mov	r0, r4
 802895a:	015b      	lsls	r3, r3, #5
 802895c:	60a3      	str	r3, [r4, #8]
 802895e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8028962:	015b      	lsls	r3, r3, #5
 8028964:	60e3      	str	r3, [r4, #12]
 8028966:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 802896a:	015b      	lsls	r3, r3, #5
 802896c:	6123      	str	r3, [r4, #16]
 802896e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8028972:	015b      	lsls	r3, r3, #5
 8028974:	6163      	str	r3, [r4, #20]
 8028976:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 802897a:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 802897e:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 8028982:	b002      	add	sp, #8
 8028984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028988:	2300      	movs	r3, #0
 802898a:	9301      	str	r3, [sp, #4]
 802898c:	e7c2      	b.n	8028914 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 802898e:	bf00      	nop
 8028990:	0802f488 	.word	0x0802f488

08028994 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 8028994:	4b07      	ldr	r3, [pc, #28]	; (80289b4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 8028996:	b510      	push	{r4, lr}
 8028998:	781b      	ldrb	r3, [r3, #0]
 802899a:	2b01      	cmp	r3, #1
 802899c:	d108      	bne.n	80289b0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 802899e:	6843      	ldr	r3, [r0, #4]
 80289a0:	6814      	ldr	r4, [r2, #0]
 80289a2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80289a6:	680b      	ldr	r3, [r1, #0]
 80289a8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80289ac:	6013      	str	r3, [r2, #0]
 80289ae:	600c      	str	r4, [r1, #0]
 80289b0:	bd10      	pop	{r4, pc}
 80289b2:	bf00      	nop
 80289b4:	2003bed8 	.word	0x2003bed8

080289b8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 80289b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80289ba:	ab02      	add	r3, sp, #8
 80289bc:	4604      	mov	r4, r0
 80289be:	9101      	str	r1, [sp, #4]
 80289c0:	a901      	add	r1, sp, #4
 80289c2:	f843 2d08 	str.w	r2, [r3, #-8]!
 80289c6:	461a      	mov	r2, r3
 80289c8:	f7ff ffe4 	bl	8028994 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80289cc:	68a3      	ldr	r3, [r4, #8]
 80289ce:	9901      	ldr	r1, [sp, #4]
 80289d0:	9a00      	ldr	r2, [sp, #0]
 80289d2:	1ac9      	subs	r1, r1, r3
 80289d4:	68e3      	ldr	r3, [r4, #12]
 80289d6:	1ad2      	subs	r2, r2, r3
 80289d8:	9101      	str	r1, [sp, #4]
 80289da:	2a00      	cmp	r2, #0
 80289dc:	9200      	str	r2, [sp, #0]
 80289de:	db1c      	blt.n	8028a1a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 80289e0:	6963      	ldr	r3, [r4, #20]
 80289e2:	429a      	cmp	r2, r3
 80289e4:	bfac      	ite	ge
 80289e6:	2002      	movge	r0, #2
 80289e8:	2000      	movlt	r0, #0
 80289ea:	2900      	cmp	r1, #0
 80289ec:	db17      	blt.n	8028a1e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 80289ee:	6923      	ldr	r3, [r4, #16]
 80289f0:	4299      	cmp	r1, r3
 80289f2:	bfac      	ite	ge
 80289f4:	2308      	movge	r3, #8
 80289f6:	2300      	movlt	r3, #0
 80289f8:	4303      	orrs	r3, r0
 80289fa:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 80289fe:	b2dd      	uxtb	r5, r3
 8028a00:	b978      	cbnz	r0, 8028a22 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8028a02:	f104 0020 	add.w	r0, r4, #32
 8028a06:	f7ff fe51 	bl	80286ac <_ZN8touchgfx10Rasterizer6lineToEii>
 8028a0a:	9b01      	ldr	r3, [sp, #4]
 8028a0c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8028a10:	65e3      	str	r3, [r4, #92]	; 0x5c
 8028a12:	9b00      	ldr	r3, [sp, #0]
 8028a14:	6623      	str	r3, [r4, #96]	; 0x60
 8028a16:	b002      	add	sp, #8
 8028a18:	bd70      	pop	{r4, r5, r6, pc}
 8028a1a:	2001      	movs	r0, #1
 8028a1c:	e7e5      	b.n	80289ea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8028a1e:	2304      	movs	r3, #4
 8028a20:	e7ea      	b.n	80289f8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8028a22:	b113      	cbz	r3, 8028a2a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8028a24:	ea10 0305 	ands.w	r3, r0, r5
 8028a28:	d11d      	bne.n	8028a66 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 8028a2a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8028a2e:	f104 0620 	add.w	r6, r4, #32
 8028a32:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8028a36:	b193      	cbz	r3, 8028a5e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8028a38:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8028a3c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8028a40:	4298      	cmp	r0, r3
 8028a42:	d802      	bhi.n	8028a4a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8028a44:	4630      	mov	r0, r6
 8028a46:	f7ef fc91 	bl	801836c <_ZN8touchgfx7Outline6moveToEii>
 8028a4a:	2300      	movs	r3, #0
 8028a4c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8028a50:	2301      	movs	r3, #1
 8028a52:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8028a56:	4630      	mov	r0, r6
 8028a58:	e9dd 2100 	ldrd	r2, r1, [sp]
 8028a5c:	e7d3      	b.n	8028a06 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8028a5e:	4630      	mov	r0, r6
 8028a60:	f7ff fe24 	bl	80286ac <_ZN8touchgfx10Rasterizer6lineToEii>
 8028a64:	e7f7      	b.n	8028a56 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 8028a66:	461d      	mov	r5, r3
 8028a68:	e7cf      	b.n	8028a0a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

08028a6a <_ZN8touchgfx6Canvas5closeEv>:
 8028a6a:	b538      	push	{r3, r4, r5, lr}
 8028a6c:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8028a70:	4604      	mov	r4, r0
 8028a72:	b993      	cbnz	r3, 8028a9a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8028a74:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8028a78:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 8028a7c:	4213      	tst	r3, r2
 8028a7e:	d10c      	bne.n	8028a9a <_ZN8touchgfx6Canvas5closeEv+0x30>
 8028a80:	f100 0520 	add.w	r5, r0, #32
 8028a84:	b123      	cbz	r3, 8028a90 <_ZN8touchgfx6Canvas5closeEv+0x26>
 8028a86:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 8028a8a:	4628      	mov	r0, r5
 8028a8c:	f7ff fe0e 	bl	80286ac <_ZN8touchgfx10Rasterizer6lineToEii>
 8028a90:	4628      	mov	r0, r5
 8028a92:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8028a96:	f7ff fe09 	bl	80286ac <_ZN8touchgfx10Rasterizer6lineToEii>
 8028a9a:	2300      	movs	r3, #0
 8028a9c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8028aa0:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 8028aa4:	4298      	cmp	r0, r3
 8028aa6:	bf34      	ite	cc
 8028aa8:	2000      	movcc	r0, #0
 8028aaa:	2001      	movcs	r0, #1
 8028aac:	bd38      	pop	{r3, r4, r5, pc}
	...

08028ab0 <_ZN8touchgfx6Canvas6renderEh>:
 8028ab0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8028ab4:	4604      	mov	r4, r0
 8028ab6:	6840      	ldr	r0, [r0, #4]
 8028ab8:	460d      	mov	r5, r1
 8028aba:	6803      	ldr	r3, [r0, #0]
 8028abc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8028abe:	4798      	blx	r3
 8028ac0:	fb10 f105 	smulbb	r1, r0, r5
 8028ac4:	b289      	uxth	r1, r1
 8028ac6:	1c4d      	adds	r5, r1, #1
 8028ac8:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8028acc:	122d      	asrs	r5, r5, #8
 8028ace:	f000 8097 	beq.w	8028c00 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8028ad2:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8028ad6:	2b00      	cmp	r3, #0
 8028ad8:	f000 8092 	beq.w	8028c00 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8028adc:	4620      	mov	r0, r4
 8028ade:	f7ff ffc4 	bl	8028a6a <_ZN8touchgfx6Canvas5closeEv>
 8028ae2:	4607      	mov	r7, r0
 8028ae4:	2800      	cmp	r0, #0
 8028ae6:	d043      	beq.n	8028b70 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8028ae8:	6863      	ldr	r3, [r4, #4]
 8028aea:	4e46      	ldr	r6, [pc, #280]	; (8028c04 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 8028aec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8028aee:	6837      	ldr	r7, [r6, #0]
 8028af0:	6803      	ldr	r3, [r0, #0]
 8028af2:	689b      	ldr	r3, [r3, #8]
 8028af4:	4798      	blx	r3
 8028af6:	4601      	mov	r1, r0
 8028af8:	4638      	mov	r0, r7
 8028afa:	f7ed fc4d 	bl	8016398 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8028afe:	4607      	mov	r7, r0
 8028b00:	f7e5 f870 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8028b04:	6803      	ldr	r3, [r0, #0]
 8028b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8028b08:	4798      	blx	r3
 8028b0a:	4680      	mov	r8, r0
 8028b0c:	f7e5 f86a 	bl	800dbe4 <_ZN8touchgfx3HAL3lcdEv>
 8028b10:	6803      	ldr	r3, [r0, #0]
 8028b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028b14:	4798      	blx	r3
 8028b16:	280b      	cmp	r0, #11
 8028b18:	d857      	bhi.n	8028bca <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8028b1a:	e8df f000 	tbb	[pc, r0]
 8028b1e:	584d      	.short	0x584d
 8028b20:	2d560668 	.word	0x2d560668
 8028b24:	6161613d 	.word	0x6161613d
 8028b28:	6161      	.short	0x6161
 8028b2a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8028b2e:	2208      	movs	r2, #8
 8028b30:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028b34:	fb91 f2f2 	sdiv	r2, r1, r2
 8028b38:	fb08 2303 	mla	r3, r8, r3, r2
 8028b3c:	441f      	add	r7, r3
 8028b3e:	424b      	negs	r3, r1
 8028b40:	f001 0107 	and.w	r1, r1, #7
 8028b44:	f003 0307 	and.w	r3, r3, #7
 8028b48:	bf58      	it	pl
 8028b4a:	4259      	negpl	r1, r3
 8028b4c:	b2c9      	uxtb	r1, r1
 8028b4e:	6860      	ldr	r0, [r4, #4]
 8028b50:	b2ed      	uxtb	r5, r5
 8028b52:	fa0f f388 	sxth.w	r3, r8
 8028b56:	463a      	mov	r2, r7
 8028b58:	e9cd 1500 	strd	r1, r5, [sp]
 8028b5c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8028b5e:	f104 0020 	add.w	r0, r4, #32
 8028b62:	f7ff fdaf 	bl	80286c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8028b66:	4607      	mov	r7, r0
 8028b68:	6830      	ldr	r0, [r6, #0]
 8028b6a:	6803      	ldr	r3, [r0, #0]
 8028b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8028b6e:	4798      	blx	r3
 8028b70:	4638      	mov	r0, r7
 8028b72:	b002      	add	sp, #8
 8028b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028b78:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8028b7c:	2204      	movs	r2, #4
 8028b7e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028b82:	fb91 f2f2 	sdiv	r2, r1, r2
 8028b86:	fb08 2303 	mla	r3, r8, r3, r2
 8028b8a:	441f      	add	r7, r3
 8028b8c:	424b      	negs	r3, r1
 8028b8e:	f001 0103 	and.w	r1, r1, #3
 8028b92:	f003 0303 	and.w	r3, r3, #3
 8028b96:	e7d7      	b.n	8028b48 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8028b98:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8028b9c:	2202      	movs	r2, #2
 8028b9e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028ba2:	2900      	cmp	r1, #0
 8028ba4:	fb91 f2f2 	sdiv	r2, r1, r2
 8028ba8:	f001 0101 	and.w	r1, r1, #1
 8028bac:	fb08 2303 	mla	r3, r8, r3, r2
 8028bb0:	bfb8      	it	lt
 8028bb2:	4249      	neglt	r1, r1
 8028bb4:	441f      	add	r7, r3
 8028bb6:	e7c9      	b.n	8028b4c <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8028bb8:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028bbc:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8028bc0:	fb08 f303 	mul.w	r3, r8, r3
 8028bc4:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8028bc8:	441f      	add	r7, r3
 8028bca:	2100      	movs	r1, #0
 8028bcc:	e7bf      	b.n	8028b4e <_ZN8touchgfx6Canvas6renderEh+0x9e>
 8028bce:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028bd2:	2103      	movs	r1, #3
 8028bd4:	fb08 f203 	mul.w	r2, r8, r3
 8028bd8:	8b23      	ldrh	r3, [r4, #24]
 8028bda:	fb13 2301 	smlabb	r3, r3, r1, r2
 8028bde:	e7f3      	b.n	8028bc8 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8028be0:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028be4:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8028be8:	fb08 2303 	mla	r3, r8, r3, r2
 8028bec:	e7ec      	b.n	8028bc8 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8028bee:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8028bf2:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8028bf6:	fb08 f303 	mul.w	r3, r8, r3
 8028bfa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8028bfe:	e7e3      	b.n	8028bc8 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8028c00:	2701      	movs	r7, #1
 8028c02:	e7b5      	b.n	8028b70 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8028c04:	2003bee0 	.word	0x2003bee0

08028c08 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8028c08:	b513      	push	{r0, r1, r4, lr}
 8028c0a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8028c0e:	4604      	mov	r4, r0
 8028c10:	e9cd 2100 	strd	r2, r1, [sp]
 8028c14:	b1a3      	cbz	r3, 8028c40 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8028c16:	466a      	mov	r2, sp
 8028c18:	a901      	add	r1, sp, #4
 8028c1a:	4620      	mov	r0, r4
 8028c1c:	f7ff feba 	bl	8028994 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8028c20:	68a3      	ldr	r3, [r4, #8]
 8028c22:	9901      	ldr	r1, [sp, #4]
 8028c24:	9a00      	ldr	r2, [sp, #0]
 8028c26:	1ac9      	subs	r1, r1, r3
 8028c28:	68e3      	ldr	r3, [r4, #12]
 8028c2a:	1ad2      	subs	r2, r2, r3
 8028c2c:	9101      	str	r1, [sp, #4]
 8028c2e:	2a00      	cmp	r2, #0
 8028c30:	9200      	str	r2, [sp, #0]
 8028c32:	da0b      	bge.n	8028c4c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8028c34:	2301      	movs	r3, #1
 8028c36:	2900      	cmp	r1, #0
 8028c38:	da0e      	bge.n	8028c58 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8028c3a:	f043 0304 	orr.w	r3, r3, #4
 8028c3e:	e013      	b.n	8028c68 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8028c40:	f7ff ff13 	bl	8028a6a <_ZN8touchgfx6Canvas5closeEv>
 8028c44:	2800      	cmp	r0, #0
 8028c46:	d1e6      	bne.n	8028c16 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8028c48:	b002      	add	sp, #8
 8028c4a:	bd10      	pop	{r4, pc}
 8028c4c:	6963      	ldr	r3, [r4, #20]
 8028c4e:	429a      	cmp	r2, r3
 8028c50:	bfac      	ite	ge
 8028c52:	2302      	movge	r3, #2
 8028c54:	2300      	movlt	r3, #0
 8028c56:	e7ee      	b.n	8028c36 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8028c58:	6920      	ldr	r0, [r4, #16]
 8028c5a:	4281      	cmp	r1, r0
 8028c5c:	bfac      	ite	ge
 8028c5e:	2008      	movge	r0, #8
 8028c60:	2000      	movlt	r0, #0
 8028c62:	4318      	orrs	r0, r3
 8028c64:	b2c3      	uxtb	r3, r0
 8028c66:	b158      	cbz	r0, 8028c80 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8028c68:	2201      	movs	r2, #1
 8028c6a:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8028c6e:	9901      	ldr	r1, [sp, #4]
 8028c70:	9a00      	ldr	r2, [sp, #0]
 8028c72:	66a1      	str	r1, [r4, #104]	; 0x68
 8028c74:	66e2      	str	r2, [r4, #108]	; 0x6c
 8028c76:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8028c7a:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8028c7e:	e7e3      	b.n	8028c48 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8028c80:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8028c84:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8028c88:	4298      	cmp	r0, r3
 8028c8a:	d803      	bhi.n	8028c94 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8028c8c:	f104 0020 	add.w	r0, r4, #32
 8028c90:	f7ef fb6c 	bl	801836c <_ZN8touchgfx7Outline6moveToEii>
 8028c94:	2300      	movs	r3, #0
 8028c96:	2201      	movs	r2, #1
 8028c98:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8028c9c:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8028ca0:	e7e5      	b.n	8028c6e <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08028ca2 <__aeabi_atexit>:
 8028ca2:	460b      	mov	r3, r1
 8028ca4:	4601      	mov	r1, r0
 8028ca6:	4618      	mov	r0, r3
 8028ca8:	f000 b852 	b.w	8028d50 <__cxa_atexit>

08028cac <_ZdlPvj>:
 8028cac:	f000 b812 	b.w	8028cd4 <_ZdlPv>

08028cb0 <__cxa_guard_acquire>:
 8028cb0:	6803      	ldr	r3, [r0, #0]
 8028cb2:	07db      	lsls	r3, r3, #31
 8028cb4:	d406      	bmi.n	8028cc4 <__cxa_guard_acquire+0x14>
 8028cb6:	7843      	ldrb	r3, [r0, #1]
 8028cb8:	b103      	cbz	r3, 8028cbc <__cxa_guard_acquire+0xc>
 8028cba:	deff      	udf	#255	; 0xff
 8028cbc:	2301      	movs	r3, #1
 8028cbe:	7043      	strb	r3, [r0, #1]
 8028cc0:	4618      	mov	r0, r3
 8028cc2:	4770      	bx	lr
 8028cc4:	2000      	movs	r0, #0
 8028cc6:	4770      	bx	lr

08028cc8 <__cxa_guard_release>:
 8028cc8:	2301      	movs	r3, #1
 8028cca:	6003      	str	r3, [r0, #0]
 8028ccc:	4770      	bx	lr

08028cce <__cxa_pure_virtual>:
 8028cce:	b508      	push	{r3, lr}
 8028cd0:	f000 f80e 	bl	8028cf0 <_ZSt9terminatev>

08028cd4 <_ZdlPv>:
 8028cd4:	f000 b88e 	b.w	8028df4 <free>

08028cd8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8028cd8:	b508      	push	{r3, lr}
 8028cda:	4780      	blx	r0
 8028cdc:	f000 f80d 	bl	8028cfa <abort>

08028ce0 <_ZSt13get_terminatev>:
 8028ce0:	4b02      	ldr	r3, [pc, #8]	; (8028cec <_ZSt13get_terminatev+0xc>)
 8028ce2:	6818      	ldr	r0, [r3, #0]
 8028ce4:	f3bf 8f5b 	dmb	ish
 8028ce8:	4770      	bx	lr
 8028cea:	bf00      	nop
 8028cec:	200000ac 	.word	0x200000ac

08028cf0 <_ZSt9terminatev>:
 8028cf0:	b508      	push	{r3, lr}
 8028cf2:	f7ff fff5 	bl	8028ce0 <_ZSt13get_terminatev>
 8028cf6:	f7ff ffef 	bl	8028cd8 <_ZN10__cxxabiv111__terminateEPFvvE>

08028cfa <abort>:
 8028cfa:	b508      	push	{r3, lr}
 8028cfc:	2006      	movs	r0, #6
 8028cfe:	f000 ff0f 	bl	8029b20 <raise>
 8028d02:	2001      	movs	r0, #1
 8028d04:	f7d9 f8b8 	bl	8001e78 <_exit>

08028d08 <__assert_func>:
 8028d08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028d0a:	4614      	mov	r4, r2
 8028d0c:	461a      	mov	r2, r3
 8028d0e:	4b09      	ldr	r3, [pc, #36]	; (8028d34 <__assert_func+0x2c>)
 8028d10:	681b      	ldr	r3, [r3, #0]
 8028d12:	4605      	mov	r5, r0
 8028d14:	68d8      	ldr	r0, [r3, #12]
 8028d16:	b14c      	cbz	r4, 8028d2c <__assert_func+0x24>
 8028d18:	4b07      	ldr	r3, [pc, #28]	; (8028d38 <__assert_func+0x30>)
 8028d1a:	9100      	str	r1, [sp, #0]
 8028d1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028d20:	4906      	ldr	r1, [pc, #24]	; (8028d3c <__assert_func+0x34>)
 8028d22:	462b      	mov	r3, r5
 8028d24:	f000 f828 	bl	8028d78 <fiprintf>
 8028d28:	f7ff ffe7 	bl	8028cfa <abort>
 8028d2c:	4b04      	ldr	r3, [pc, #16]	; (8028d40 <__assert_func+0x38>)
 8028d2e:	461c      	mov	r4, r3
 8028d30:	e7f3      	b.n	8028d1a <__assert_func+0x12>
 8028d32:	bf00      	nop
 8028d34:	200000b0 	.word	0x200000b0
 8028d38:	0802fc78 	.word	0x0802fc78
 8028d3c:	0802fc85 	.word	0x0802fc85
 8028d40:	0802fcb3 	.word	0x0802fcb3

08028d44 <atexit>:
 8028d44:	2300      	movs	r3, #0
 8028d46:	4601      	mov	r1, r0
 8028d48:	461a      	mov	r2, r3
 8028d4a:	4618      	mov	r0, r3
 8028d4c:	f001 bf84 	b.w	802ac58 <__register_exitproc>

08028d50 <__cxa_atexit>:
 8028d50:	b510      	push	{r4, lr}
 8028d52:	4c05      	ldr	r4, [pc, #20]	; (8028d68 <__cxa_atexit+0x18>)
 8028d54:	4613      	mov	r3, r2
 8028d56:	b12c      	cbz	r4, 8028d64 <__cxa_atexit+0x14>
 8028d58:	460a      	mov	r2, r1
 8028d5a:	4601      	mov	r1, r0
 8028d5c:	2002      	movs	r0, #2
 8028d5e:	f001 ff7b 	bl	802ac58 <__register_exitproc>
 8028d62:	bd10      	pop	{r4, pc}
 8028d64:	4620      	mov	r0, r4
 8028d66:	e7fc      	b.n	8028d62 <__cxa_atexit+0x12>
 8028d68:	0802ac59 	.word	0x0802ac59

08028d6c <__errno>:
 8028d6c:	4b01      	ldr	r3, [pc, #4]	; (8028d74 <__errno+0x8>)
 8028d6e:	6818      	ldr	r0, [r3, #0]
 8028d70:	4770      	bx	lr
 8028d72:	bf00      	nop
 8028d74:	200000b0 	.word	0x200000b0

08028d78 <fiprintf>:
 8028d78:	b40e      	push	{r1, r2, r3}
 8028d7a:	b503      	push	{r0, r1, lr}
 8028d7c:	4601      	mov	r1, r0
 8028d7e:	ab03      	add	r3, sp, #12
 8028d80:	4805      	ldr	r0, [pc, #20]	; (8028d98 <fiprintf+0x20>)
 8028d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8028d86:	6800      	ldr	r0, [r0, #0]
 8028d88:	9301      	str	r3, [sp, #4]
 8028d8a:	f000 fbcd 	bl	8029528 <_vfiprintf_r>
 8028d8e:	b002      	add	sp, #8
 8028d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8028d94:	b003      	add	sp, #12
 8028d96:	4770      	bx	lr
 8028d98:	200000b0 	.word	0x200000b0

08028d9c <__libc_init_array>:
 8028d9c:	b570      	push	{r4, r5, r6, lr}
 8028d9e:	4d0d      	ldr	r5, [pc, #52]	; (8028dd4 <__libc_init_array+0x38>)
 8028da0:	4c0d      	ldr	r4, [pc, #52]	; (8028dd8 <__libc_init_array+0x3c>)
 8028da2:	1b64      	subs	r4, r4, r5
 8028da4:	10a4      	asrs	r4, r4, #2
 8028da6:	2600      	movs	r6, #0
 8028da8:	42a6      	cmp	r6, r4
 8028daa:	d109      	bne.n	8028dc0 <__libc_init_array+0x24>
 8028dac:	4d0b      	ldr	r5, [pc, #44]	; (8028ddc <__libc_init_array+0x40>)
 8028dae:	4c0c      	ldr	r4, [pc, #48]	; (8028de0 <__libc_init_array+0x44>)
 8028db0:	f003 f8dc 	bl	802bf6c <_init>
 8028db4:	1b64      	subs	r4, r4, r5
 8028db6:	10a4      	asrs	r4, r4, #2
 8028db8:	2600      	movs	r6, #0
 8028dba:	42a6      	cmp	r6, r4
 8028dbc:	d105      	bne.n	8028dca <__libc_init_array+0x2e>
 8028dbe:	bd70      	pop	{r4, r5, r6, pc}
 8028dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8028dc4:	4798      	blx	r3
 8028dc6:	3601      	adds	r6, #1
 8028dc8:	e7ee      	b.n	8028da8 <__libc_init_array+0xc>
 8028dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8028dce:	4798      	blx	r3
 8028dd0:	3601      	adds	r6, #1
 8028dd2:	e7f2      	b.n	8028dba <__libc_init_array+0x1e>
 8028dd4:	08163b3c 	.word	0x08163b3c
 8028dd8:	08163b3c 	.word	0x08163b3c
 8028ddc:	08163b3c 	.word	0x08163b3c
 8028de0:	08163b54 	.word	0x08163b54

08028de4 <malloc>:
 8028de4:	4b02      	ldr	r3, [pc, #8]	; (8028df0 <malloc+0xc>)
 8028de6:	4601      	mov	r1, r0
 8028de8:	6818      	ldr	r0, [r3, #0]
 8028dea:	f000 baff 	b.w	80293ec <_malloc_r>
 8028dee:	bf00      	nop
 8028df0:	200000b0 	.word	0x200000b0

08028df4 <free>:
 8028df4:	4b02      	ldr	r3, [pc, #8]	; (8028e00 <free+0xc>)
 8028df6:	4601      	mov	r1, r0
 8028df8:	6818      	ldr	r0, [r3, #0]
 8028dfa:	f000 ba8b 	b.w	8029314 <_free_r>
 8028dfe:	bf00      	nop
 8028e00:	200000b0 	.word	0x200000b0

08028e04 <memcpy>:
 8028e04:	440a      	add	r2, r1
 8028e06:	4291      	cmp	r1, r2
 8028e08:	f100 33ff 	add.w	r3, r0, #4294967295
 8028e0c:	d100      	bne.n	8028e10 <memcpy+0xc>
 8028e0e:	4770      	bx	lr
 8028e10:	b510      	push	{r4, lr}
 8028e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8028e16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8028e1a:	4291      	cmp	r1, r2
 8028e1c:	d1f9      	bne.n	8028e12 <memcpy+0xe>
 8028e1e:	bd10      	pop	{r4, pc}

08028e20 <memset>:
 8028e20:	4402      	add	r2, r0
 8028e22:	4603      	mov	r3, r0
 8028e24:	4293      	cmp	r3, r2
 8028e26:	d100      	bne.n	8028e2a <memset+0xa>
 8028e28:	4770      	bx	lr
 8028e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8028e2e:	e7f9      	b.n	8028e24 <memset+0x4>

08028e30 <validate_structure>:
 8028e30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028e32:	6801      	ldr	r1, [r0, #0]
 8028e34:	293b      	cmp	r1, #59	; 0x3b
 8028e36:	4604      	mov	r4, r0
 8028e38:	d911      	bls.n	8028e5e <validate_structure+0x2e>
 8028e3a:	223c      	movs	r2, #60	; 0x3c
 8028e3c:	4668      	mov	r0, sp
 8028e3e:	f001 ff7d 	bl	802ad3c <div>
 8028e42:	9a01      	ldr	r2, [sp, #4]
 8028e44:	6863      	ldr	r3, [r4, #4]
 8028e46:	9900      	ldr	r1, [sp, #0]
 8028e48:	2a00      	cmp	r2, #0
 8028e4a:	440b      	add	r3, r1
 8028e4c:	6063      	str	r3, [r4, #4]
 8028e4e:	bfbb      	ittet	lt
 8028e50:	323c      	addlt	r2, #60	; 0x3c
 8028e52:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8028e56:	6022      	strge	r2, [r4, #0]
 8028e58:	6022      	strlt	r2, [r4, #0]
 8028e5a:	bfb8      	it	lt
 8028e5c:	6063      	strlt	r3, [r4, #4]
 8028e5e:	6861      	ldr	r1, [r4, #4]
 8028e60:	293b      	cmp	r1, #59	; 0x3b
 8028e62:	d911      	bls.n	8028e88 <validate_structure+0x58>
 8028e64:	223c      	movs	r2, #60	; 0x3c
 8028e66:	4668      	mov	r0, sp
 8028e68:	f001 ff68 	bl	802ad3c <div>
 8028e6c:	9a01      	ldr	r2, [sp, #4]
 8028e6e:	68a3      	ldr	r3, [r4, #8]
 8028e70:	9900      	ldr	r1, [sp, #0]
 8028e72:	2a00      	cmp	r2, #0
 8028e74:	440b      	add	r3, r1
 8028e76:	60a3      	str	r3, [r4, #8]
 8028e78:	bfbb      	ittet	lt
 8028e7a:	323c      	addlt	r2, #60	; 0x3c
 8028e7c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8028e80:	6062      	strge	r2, [r4, #4]
 8028e82:	6062      	strlt	r2, [r4, #4]
 8028e84:	bfb8      	it	lt
 8028e86:	60a3      	strlt	r3, [r4, #8]
 8028e88:	68a1      	ldr	r1, [r4, #8]
 8028e8a:	2917      	cmp	r1, #23
 8028e8c:	d911      	bls.n	8028eb2 <validate_structure+0x82>
 8028e8e:	2218      	movs	r2, #24
 8028e90:	4668      	mov	r0, sp
 8028e92:	f001 ff53 	bl	802ad3c <div>
 8028e96:	9a01      	ldr	r2, [sp, #4]
 8028e98:	68e3      	ldr	r3, [r4, #12]
 8028e9a:	9900      	ldr	r1, [sp, #0]
 8028e9c:	2a00      	cmp	r2, #0
 8028e9e:	440b      	add	r3, r1
 8028ea0:	60e3      	str	r3, [r4, #12]
 8028ea2:	bfbb      	ittet	lt
 8028ea4:	3218      	addlt	r2, #24
 8028ea6:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8028eaa:	60a2      	strge	r2, [r4, #8]
 8028eac:	60a2      	strlt	r2, [r4, #8]
 8028eae:	bfb8      	it	lt
 8028eb0:	60e3      	strlt	r3, [r4, #12]
 8028eb2:	6921      	ldr	r1, [r4, #16]
 8028eb4:	290b      	cmp	r1, #11
 8028eb6:	d911      	bls.n	8028edc <validate_structure+0xac>
 8028eb8:	220c      	movs	r2, #12
 8028eba:	4668      	mov	r0, sp
 8028ebc:	f001 ff3e 	bl	802ad3c <div>
 8028ec0:	9a01      	ldr	r2, [sp, #4]
 8028ec2:	6963      	ldr	r3, [r4, #20]
 8028ec4:	9900      	ldr	r1, [sp, #0]
 8028ec6:	2a00      	cmp	r2, #0
 8028ec8:	440b      	add	r3, r1
 8028eca:	6163      	str	r3, [r4, #20]
 8028ecc:	bfbb      	ittet	lt
 8028ece:	320c      	addlt	r2, #12
 8028ed0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8028ed4:	6122      	strge	r2, [r4, #16]
 8028ed6:	6122      	strlt	r2, [r4, #16]
 8028ed8:	bfb8      	it	lt
 8028eda:	6163      	strlt	r3, [r4, #20]
 8028edc:	6963      	ldr	r3, [r4, #20]
 8028ede:	0798      	lsls	r0, r3, #30
 8028ee0:	d120      	bne.n	8028f24 <validate_structure+0xf4>
 8028ee2:	2164      	movs	r1, #100	; 0x64
 8028ee4:	fb93 f2f1 	sdiv	r2, r3, r1
 8028ee8:	fb01 3212 	mls	r2, r1, r2, r3
 8028eec:	b9e2      	cbnz	r2, 8028f28 <validate_structure+0xf8>
 8028eee:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8028ef2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8028ef6:	fb93 f1f2 	sdiv	r1, r3, r2
 8028efa:	fb02 3311 	mls	r3, r2, r1, r3
 8028efe:	2b00      	cmp	r3, #0
 8028f00:	bf14      	ite	ne
 8028f02:	231c      	movne	r3, #28
 8028f04:	231d      	moveq	r3, #29
 8028f06:	68e2      	ldr	r2, [r4, #12]
 8028f08:	2a00      	cmp	r2, #0
 8028f0a:	dc0f      	bgt.n	8028f2c <validate_structure+0xfc>
 8028f0c:	4f33      	ldr	r7, [pc, #204]	; (8028fdc <validate_structure+0x1ac>)
 8028f0e:	260b      	movs	r6, #11
 8028f10:	2064      	movs	r0, #100	; 0x64
 8028f12:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8028f16:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8028f1a:	f1bc 0f00 	cmp.w	ip, #0
 8028f1e:	dd31      	ble.n	8028f84 <validate_structure+0x154>
 8028f20:	b003      	add	sp, #12
 8028f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028f24:	231c      	movs	r3, #28
 8028f26:	e7ee      	b.n	8028f06 <validate_structure+0xd6>
 8028f28:	231d      	movs	r3, #29
 8028f2a:	e7ec      	b.n	8028f06 <validate_structure+0xd6>
 8028f2c:	4e2b      	ldr	r6, [pc, #172]	; (8028fdc <validate_structure+0x1ac>)
 8028f2e:	2700      	movs	r7, #0
 8028f30:	2064      	movs	r0, #100	; 0x64
 8028f32:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8028f36:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8028f3a:	2a01      	cmp	r2, #1
 8028f3c:	bf14      	ite	ne
 8028f3e:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8028f42:	469c      	moveq	ip, r3
 8028f44:	4561      	cmp	r1, ip
 8028f46:	ddeb      	ble.n	8028f20 <validate_structure+0xf0>
 8028f48:	3201      	adds	r2, #1
 8028f4a:	eba1 010c 	sub.w	r1, r1, ip
 8028f4e:	2a0c      	cmp	r2, #12
 8028f50:	60e1      	str	r1, [r4, #12]
 8028f52:	6122      	str	r2, [r4, #16]
 8028f54:	d1ef      	bne.n	8028f36 <validate_structure+0x106>
 8028f56:	6963      	ldr	r3, [r4, #20]
 8028f58:	1c5a      	adds	r2, r3, #1
 8028f5a:	0791      	lsls	r1, r2, #30
 8028f5c:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8028f60:	d137      	bne.n	8028fd2 <validate_structure+0x1a2>
 8028f62:	fb92 f1f0 	sdiv	r1, r2, r0
 8028f66:	fb00 2211 	mls	r2, r0, r1, r2
 8028f6a:	2a00      	cmp	r2, #0
 8028f6c:	d133      	bne.n	8028fd6 <validate_structure+0x1a6>
 8028f6e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8028f72:	fb93 f2f5 	sdiv	r2, r3, r5
 8028f76:	fb05 3312 	mls	r3, r5, r2, r3
 8028f7a:	2b00      	cmp	r3, #0
 8028f7c:	bf14      	ite	ne
 8028f7e:	231c      	movne	r3, #28
 8028f80:	231d      	moveq	r3, #29
 8028f82:	e7d8      	b.n	8028f36 <validate_structure+0x106>
 8028f84:	6921      	ldr	r1, [r4, #16]
 8028f86:	3901      	subs	r1, #1
 8028f88:	6121      	str	r1, [r4, #16]
 8028f8a:	3101      	adds	r1, #1
 8028f8c:	d114      	bne.n	8028fb8 <validate_structure+0x188>
 8028f8e:	6963      	ldr	r3, [r4, #20]
 8028f90:	1e5a      	subs	r2, r3, #1
 8028f92:	0791      	lsls	r1, r2, #30
 8028f94:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8028f98:	d117      	bne.n	8028fca <validate_structure+0x19a>
 8028f9a:	fb92 f1f0 	sdiv	r1, r2, r0
 8028f9e:	fb00 2211 	mls	r2, r0, r1, r2
 8028fa2:	b9a2      	cbnz	r2, 8028fce <validate_structure+0x19e>
 8028fa4:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8028fa8:	fb93 f2f5 	sdiv	r2, r3, r5
 8028fac:	fb05 3312 	mls	r3, r5, r2, r3
 8028fb0:	2b00      	cmp	r3, #0
 8028fb2:	bf14      	ite	ne
 8028fb4:	231c      	movne	r3, #28
 8028fb6:	231d      	moveq	r3, #29
 8028fb8:	6922      	ldr	r2, [r4, #16]
 8028fba:	2a01      	cmp	r2, #1
 8028fbc:	bf14      	ite	ne
 8028fbe:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 8028fc2:	461a      	moveq	r2, r3
 8028fc4:	4462      	add	r2, ip
 8028fc6:	60e2      	str	r2, [r4, #12]
 8028fc8:	e7a5      	b.n	8028f16 <validate_structure+0xe6>
 8028fca:	231c      	movs	r3, #28
 8028fcc:	e7f4      	b.n	8028fb8 <validate_structure+0x188>
 8028fce:	231d      	movs	r3, #29
 8028fd0:	e7f2      	b.n	8028fb8 <validate_structure+0x188>
 8028fd2:	231c      	movs	r3, #28
 8028fd4:	e7af      	b.n	8028f36 <validate_structure+0x106>
 8028fd6:	231d      	movs	r3, #29
 8028fd8:	e7ad      	b.n	8028f36 <validate_structure+0x106>
 8028fda:	bf00      	nop
 8028fdc:	0802fcb8 	.word	0x0802fcb8

08028fe0 <mktime>:
 8028fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028fe4:	b085      	sub	sp, #20
 8028fe6:	4607      	mov	r7, r0
 8028fe8:	f002 f8b8 	bl	802b15c <__gettzinfo>
 8028fec:	4681      	mov	r9, r0
 8028fee:	4638      	mov	r0, r7
 8028ff0:	f7ff ff1e 	bl	8028e30 <validate_structure>
 8028ff4:	e9d7 4000 	ldrd	r4, r0, [r7]
 8028ff8:	233c      	movs	r3, #60	; 0x3c
 8028ffa:	fb03 4400 	mla	r4, r3, r0, r4
 8028ffe:	68b8      	ldr	r0, [r7, #8]
 8029000:	4abc      	ldr	r2, [pc, #752]	; (80292f4 <mktime+0x314>)
 8029002:	697e      	ldr	r6, [r7, #20]
 8029004:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8029008:	fb03 4400 	mla	r4, r3, r0, r4
 802900c:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8029010:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8029014:	3d01      	subs	r5, #1
 8029016:	2b01      	cmp	r3, #1
 8029018:	4415      	add	r5, r2
 802901a:	dd11      	ble.n	8029040 <mktime+0x60>
 802901c:	07b1      	lsls	r1, r6, #30
 802901e:	d10f      	bne.n	8029040 <mktime+0x60>
 8029020:	2264      	movs	r2, #100	; 0x64
 8029022:	fb96 f3f2 	sdiv	r3, r6, r2
 8029026:	fb02 6313 	mls	r3, r2, r3, r6
 802902a:	b943      	cbnz	r3, 802903e <mktime+0x5e>
 802902c:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8029030:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8029034:	fb93 f1f2 	sdiv	r1, r3, r2
 8029038:	fb02 3311 	mls	r3, r2, r1, r3
 802903c:	b903      	cbnz	r3, 8029040 <mktime+0x60>
 802903e:	3501      	adds	r5, #1
 8029040:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8029044:	3310      	adds	r3, #16
 8029046:	f644 6220 	movw	r2, #20000	; 0x4e20
 802904a:	4293      	cmp	r3, r2
 802904c:	61fd      	str	r5, [r7, #28]
 802904e:	f200 815d 	bhi.w	802930c <mktime+0x32c>
 8029052:	2e46      	cmp	r6, #70	; 0x46
 8029054:	dd71      	ble.n	802913a <mktime+0x15a>
 8029056:	2346      	movs	r3, #70	; 0x46
 8029058:	f240 1c6d 	movw	ip, #365	; 0x16d
 802905c:	2164      	movs	r1, #100	; 0x64
 802905e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8029062:	079a      	lsls	r2, r3, #30
 8029064:	d163      	bne.n	802912e <mktime+0x14e>
 8029066:	fb93 f2f1 	sdiv	r2, r3, r1
 802906a:	fb01 3212 	mls	r2, r1, r2, r3
 802906e:	2a00      	cmp	r2, #0
 8029070:	d160      	bne.n	8029134 <mktime+0x154>
 8029072:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8029076:	fb92 fef0 	sdiv	lr, r2, r0
 802907a:	fb00 221e 	mls	r2, r0, lr, r2
 802907e:	2a00      	cmp	r2, #0
 8029080:	bf14      	ite	ne
 8029082:	4662      	movne	r2, ip
 8029084:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8029088:	3301      	adds	r3, #1
 802908a:	429e      	cmp	r6, r3
 802908c:	4415      	add	r5, r2
 802908e:	d1e8      	bne.n	8029062 <mktime+0x82>
 8029090:	4b99      	ldr	r3, [pc, #612]	; (80292f8 <mktime+0x318>)
 8029092:	ea4f 78e4 	mov.w	r8, r4, asr #31
 8029096:	fbc5 4803 	smlal	r4, r8, r5, r3
 802909a:	f001 fb79 	bl	802a790 <__tz_lock>
 802909e:	f001 fb83 	bl	802a7a8 <_tzset_unlocked>
 80290a2:	4b96      	ldr	r3, [pc, #600]	; (80292fc <mktime+0x31c>)
 80290a4:	f8d3 b000 	ldr.w	fp, [r3]
 80290a8:	f1bb 0f00 	cmp.w	fp, #0
 80290ac:	d039      	beq.n	8029122 <mktime+0x142>
 80290ae:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80290b2:	6978      	ldr	r0, [r7, #20]
 80290b4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80290b8:	f1bb 0f01 	cmp.w	fp, #1
 80290bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80290c0:	46da      	mov	sl, fp
 80290c2:	bfa8      	it	ge
 80290c4:	f04f 0a01 	movge.w	sl, #1
 80290c8:	4283      	cmp	r3, r0
 80290ca:	d178      	bne.n	80291be <mktime+0x1de>
 80290cc:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80290d0:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80290d4:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80290d8:	1a5b      	subs	r3, r3, r1
 80290da:	9302      	str	r3, [sp, #8]
 80290dc:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80290e0:	9303      	str	r3, [sp, #12]
 80290e2:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80290e6:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80290ea:	9301      	str	r3, [sp, #4]
 80290ec:	ebb3 0c02 	subs.w	ip, r3, r2
 80290f0:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80290f4:	4564      	cmp	r4, ip
 80290f6:	eb78 0300 	sbcs.w	r3, r8, r0
 80290fa:	da66      	bge.n	80291ca <mktime+0x1ea>
 80290fc:	f8d9 3000 	ldr.w	r3, [r9]
 8029100:	2b00      	cmp	r3, #0
 8029102:	d06f      	beq.n	80291e4 <mktime+0x204>
 8029104:	9b02      	ldr	r3, [sp, #8]
 8029106:	429c      	cmp	r4, r3
 8029108:	9b03      	ldr	r3, [sp, #12]
 802910a:	eb78 0303 	sbcs.w	r3, r8, r3
 802910e:	db03      	blt.n	8029118 <mktime+0x138>
 8029110:	4564      	cmp	r4, ip
 8029112:	eb78 0300 	sbcs.w	r3, r8, r0
 8029116:	db6b      	blt.n	80291f0 <mktime+0x210>
 8029118:	f1bb 0f00 	cmp.w	fp, #0
 802911c:	f04f 0b00 	mov.w	fp, #0
 8029120:	da6b      	bge.n	80291fa <mktime+0x21a>
 8029122:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8029126:	190c      	adds	r4, r1, r4
 8029128:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 802912c:	e0a9      	b.n	8029282 <mktime+0x2a2>
 802912e:	f240 126d 	movw	r2, #365	; 0x16d
 8029132:	e7a9      	b.n	8029088 <mktime+0xa8>
 8029134:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8029138:	e7a6      	b.n	8029088 <mktime+0xa8>
 802913a:	d0a9      	beq.n	8029090 <mktime+0xb0>
 802913c:	2345      	movs	r3, #69	; 0x45
 802913e:	f240 1c6d 	movw	ip, #365	; 0x16d
 8029142:	2164      	movs	r1, #100	; 0x64
 8029144:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8029148:	e012      	b.n	8029170 <mktime+0x190>
 802914a:	bb62      	cbnz	r2, 80291a6 <mktime+0x1c6>
 802914c:	fb93 f2f1 	sdiv	r2, r3, r1
 8029150:	fb01 3212 	mls	r2, r1, r2, r3
 8029154:	bb52      	cbnz	r2, 80291ac <mktime+0x1cc>
 8029156:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 802915a:	fb92 fef0 	sdiv	lr, r2, r0
 802915e:	fb00 221e 	mls	r2, r0, lr, r2
 8029162:	2a00      	cmp	r2, #0
 8029164:	bf14      	ite	ne
 8029166:	4662      	movne	r2, ip
 8029168:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802916c:	1aad      	subs	r5, r5, r2
 802916e:	3b01      	subs	r3, #1
 8029170:	429e      	cmp	r6, r3
 8029172:	f003 0203 	and.w	r2, r3, #3
 8029176:	dbe8      	blt.n	802914a <mktime+0x16a>
 8029178:	b9da      	cbnz	r2, 80291b2 <mktime+0x1d2>
 802917a:	2264      	movs	r2, #100	; 0x64
 802917c:	fb96 f3f2 	sdiv	r3, r6, r2
 8029180:	fb02 6313 	mls	r3, r2, r3, r6
 8029184:	b9c3      	cbnz	r3, 80291b8 <mktime+0x1d8>
 8029186:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 802918a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802918e:	fb93 f1f2 	sdiv	r1, r3, r2
 8029192:	fb02 3311 	mls	r3, r2, r1, r3
 8029196:	2b00      	cmp	r3, #0
 8029198:	f240 136d 	movw	r3, #365	; 0x16d
 802919c:	bf08      	it	eq
 802919e:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 80291a2:	1aed      	subs	r5, r5, r3
 80291a4:	e774      	b.n	8029090 <mktime+0xb0>
 80291a6:	f240 126d 	movw	r2, #365	; 0x16d
 80291aa:	e7df      	b.n	802916c <mktime+0x18c>
 80291ac:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80291b0:	e7dc      	b.n	802916c <mktime+0x18c>
 80291b2:	f240 136d 	movw	r3, #365	; 0x16d
 80291b6:	e7f4      	b.n	80291a2 <mktime+0x1c2>
 80291b8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80291bc:	e7f1      	b.n	80291a2 <mktime+0x1c2>
 80291be:	f001 fa3d 	bl	802a63c <__tzcalc_limits>
 80291c2:	2800      	cmp	r0, #0
 80291c4:	d182      	bne.n	80290cc <mktime+0xec>
 80291c6:	46d3      	mov	fp, sl
 80291c8:	e050      	b.n	802926c <mktime+0x28c>
 80291ca:	9b01      	ldr	r3, [sp, #4]
 80291cc:	1a5b      	subs	r3, r3, r1
 80291ce:	9301      	str	r3, [sp, #4]
 80291d0:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80291d4:	eb6e 0e03 	sbc.w	lr, lr, r3
 80291d8:	9b01      	ldr	r3, [sp, #4]
 80291da:	429c      	cmp	r4, r3
 80291dc:	eb78 030e 	sbcs.w	r3, r8, lr
 80291e0:	dbf1      	blt.n	80291c6 <mktime+0x1e6>
 80291e2:	e78b      	b.n	80290fc <mktime+0x11c>
 80291e4:	9b02      	ldr	r3, [sp, #8]
 80291e6:	429c      	cmp	r4, r3
 80291e8:	9b03      	ldr	r3, [sp, #12]
 80291ea:	eb78 0303 	sbcs.w	r3, r8, r3
 80291ee:	db8f      	blt.n	8029110 <mktime+0x130>
 80291f0:	f1bb 0f00 	cmp.w	fp, #0
 80291f4:	db3e      	blt.n	8029274 <mktime+0x294>
 80291f6:	f04f 0b01 	mov.w	fp, #1
 80291fa:	ea8a 0a0b 	eor.w	sl, sl, fp
 80291fe:	f1ba 0f01 	cmp.w	sl, #1
 8029202:	d133      	bne.n	802926c <mktime+0x28c>
 8029204:	f1bb 0f00 	cmp.w	fp, #0
 8029208:	d04e      	beq.n	80292a8 <mktime+0x2c8>
 802920a:	1a52      	subs	r2, r2, r1
 802920c:	683b      	ldr	r3, [r7, #0]
 802920e:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 8029212:	4413      	add	r3, r2
 8029214:	1914      	adds	r4, r2, r4
 8029216:	603b      	str	r3, [r7, #0]
 8029218:	4638      	mov	r0, r7
 802921a:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 802921e:	f7ff fe07 	bl	8028e30 <validate_structure>
 8029222:	68fa      	ldr	r2, [r7, #12]
 8029224:	ebb2 020a 	subs.w	r2, r2, sl
 8029228:	d020      	beq.n	802926c <mktime+0x28c>
 802922a:	2a01      	cmp	r2, #1
 802922c:	dc3e      	bgt.n	80292ac <mktime+0x2cc>
 802922e:	1c90      	adds	r0, r2, #2
 8029230:	bfd8      	it	le
 8029232:	2201      	movle	r2, #1
 8029234:	69fb      	ldr	r3, [r7, #28]
 8029236:	18d3      	adds	r3, r2, r3
 8029238:	4415      	add	r5, r2
 802923a:	d540      	bpl.n	80292be <mktime+0x2de>
 802923c:	1e73      	subs	r3, r6, #1
 802923e:	0799      	lsls	r1, r3, #30
 8029240:	d137      	bne.n	80292b2 <mktime+0x2d2>
 8029242:	2264      	movs	r2, #100	; 0x64
 8029244:	fb93 f1f2 	sdiv	r1, r3, r2
 8029248:	fb02 3311 	mls	r3, r2, r1, r3
 802924c:	bba3      	cbnz	r3, 80292b8 <mktime+0x2d8>
 802924e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8029252:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8029256:	fb96 f2f3 	sdiv	r2, r6, r3
 802925a:	fb03 6612 	mls	r6, r3, r2, r6
 802925e:	2e00      	cmp	r6, #0
 8029260:	f240 136d 	movw	r3, #365	; 0x16d
 8029264:	bf18      	it	ne
 8029266:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 802926a:	61fb      	str	r3, [r7, #28]
 802926c:	f1bb 0f01 	cmp.w	fp, #1
 8029270:	f47f af57 	bne.w	8029122 <mktime+0x142>
 8029274:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8029278:	190c      	adds	r4, r1, r4
 802927a:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 802927e:	f04f 0b01 	mov.w	fp, #1
 8029282:	f001 fa8b 	bl	802a79c <__tz_unlock>
 8029286:	3504      	adds	r5, #4
 8029288:	2307      	movs	r3, #7
 802928a:	fb95 f3f3 	sdiv	r3, r5, r3
 802928e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8029292:	1aed      	subs	r5, r5, r3
 8029294:	bf48      	it	mi
 8029296:	3507      	addmi	r5, #7
 8029298:	f8c7 b020 	str.w	fp, [r7, #32]
 802929c:	61bd      	str	r5, [r7, #24]
 802929e:	4620      	mov	r0, r4
 80292a0:	4641      	mov	r1, r8
 80292a2:	b005      	add	sp, #20
 80292a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80292a8:	1a8a      	subs	r2, r1, r2
 80292aa:	e7af      	b.n	802920c <mktime+0x22c>
 80292ac:	f04f 32ff 	mov.w	r2, #4294967295
 80292b0:	e7c0      	b.n	8029234 <mktime+0x254>
 80292b2:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80292b6:	e7d8      	b.n	802926a <mktime+0x28a>
 80292b8:	f240 136d 	movw	r3, #365	; 0x16d
 80292bc:	e7d5      	b.n	802926a <mktime+0x28a>
 80292be:	07b2      	lsls	r2, r6, #30
 80292c0:	d11e      	bne.n	8029300 <mktime+0x320>
 80292c2:	2164      	movs	r1, #100	; 0x64
 80292c4:	fb96 f2f1 	sdiv	r2, r6, r1
 80292c8:	fb01 6212 	mls	r2, r1, r2, r6
 80292cc:	b9da      	cbnz	r2, 8029306 <mktime+0x326>
 80292ce:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80292d2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80292d6:	fb96 f1f2 	sdiv	r1, r6, r2
 80292da:	fb02 6611 	mls	r6, r2, r1, r6
 80292de:	2e00      	cmp	r6, #0
 80292e0:	f240 126d 	movw	r2, #365	; 0x16d
 80292e4:	bf08      	it	eq
 80292e6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80292ea:	4293      	cmp	r3, r2
 80292ec:	bfa8      	it	ge
 80292ee:	1a9b      	subge	r3, r3, r2
 80292f0:	e7bb      	b.n	802926a <mktime+0x28a>
 80292f2:	bf00      	nop
 80292f4:	0802fce8 	.word	0x0802fce8
 80292f8:	00015180 	.word	0x00015180
 80292fc:	2003c110 	.word	0x2003c110
 8029300:	f240 126d 	movw	r2, #365	; 0x16d
 8029304:	e7f1      	b.n	80292ea <mktime+0x30a>
 8029306:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802930a:	e7ee      	b.n	80292ea <mktime+0x30a>
 802930c:	f04f 34ff 	mov.w	r4, #4294967295
 8029310:	46a0      	mov	r8, r4
 8029312:	e7c4      	b.n	802929e <mktime+0x2be>

08029314 <_free_r>:
 8029314:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8029316:	2900      	cmp	r1, #0
 8029318:	d044      	beq.n	80293a4 <_free_r+0x90>
 802931a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802931e:	9001      	str	r0, [sp, #4]
 8029320:	2b00      	cmp	r3, #0
 8029322:	f1a1 0404 	sub.w	r4, r1, #4
 8029326:	bfb8      	it	lt
 8029328:	18e4      	addlt	r4, r4, r3
 802932a:	f002 f89f 	bl	802b46c <__malloc_lock>
 802932e:	4a1e      	ldr	r2, [pc, #120]	; (80293a8 <_free_r+0x94>)
 8029330:	9801      	ldr	r0, [sp, #4]
 8029332:	6813      	ldr	r3, [r2, #0]
 8029334:	b933      	cbnz	r3, 8029344 <_free_r+0x30>
 8029336:	6063      	str	r3, [r4, #4]
 8029338:	6014      	str	r4, [r2, #0]
 802933a:	b003      	add	sp, #12
 802933c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8029340:	f002 b89a 	b.w	802b478 <__malloc_unlock>
 8029344:	42a3      	cmp	r3, r4
 8029346:	d908      	bls.n	802935a <_free_r+0x46>
 8029348:	6825      	ldr	r5, [r4, #0]
 802934a:	1961      	adds	r1, r4, r5
 802934c:	428b      	cmp	r3, r1
 802934e:	bf01      	itttt	eq
 8029350:	6819      	ldreq	r1, [r3, #0]
 8029352:	685b      	ldreq	r3, [r3, #4]
 8029354:	1949      	addeq	r1, r1, r5
 8029356:	6021      	streq	r1, [r4, #0]
 8029358:	e7ed      	b.n	8029336 <_free_r+0x22>
 802935a:	461a      	mov	r2, r3
 802935c:	685b      	ldr	r3, [r3, #4]
 802935e:	b10b      	cbz	r3, 8029364 <_free_r+0x50>
 8029360:	42a3      	cmp	r3, r4
 8029362:	d9fa      	bls.n	802935a <_free_r+0x46>
 8029364:	6811      	ldr	r1, [r2, #0]
 8029366:	1855      	adds	r5, r2, r1
 8029368:	42a5      	cmp	r5, r4
 802936a:	d10b      	bne.n	8029384 <_free_r+0x70>
 802936c:	6824      	ldr	r4, [r4, #0]
 802936e:	4421      	add	r1, r4
 8029370:	1854      	adds	r4, r2, r1
 8029372:	42a3      	cmp	r3, r4
 8029374:	6011      	str	r1, [r2, #0]
 8029376:	d1e0      	bne.n	802933a <_free_r+0x26>
 8029378:	681c      	ldr	r4, [r3, #0]
 802937a:	685b      	ldr	r3, [r3, #4]
 802937c:	6053      	str	r3, [r2, #4]
 802937e:	4421      	add	r1, r4
 8029380:	6011      	str	r1, [r2, #0]
 8029382:	e7da      	b.n	802933a <_free_r+0x26>
 8029384:	d902      	bls.n	802938c <_free_r+0x78>
 8029386:	230c      	movs	r3, #12
 8029388:	6003      	str	r3, [r0, #0]
 802938a:	e7d6      	b.n	802933a <_free_r+0x26>
 802938c:	6825      	ldr	r5, [r4, #0]
 802938e:	1961      	adds	r1, r4, r5
 8029390:	428b      	cmp	r3, r1
 8029392:	bf04      	itt	eq
 8029394:	6819      	ldreq	r1, [r3, #0]
 8029396:	685b      	ldreq	r3, [r3, #4]
 8029398:	6063      	str	r3, [r4, #4]
 802939a:	bf04      	itt	eq
 802939c:	1949      	addeq	r1, r1, r5
 802939e:	6021      	streq	r1, [r4, #0]
 80293a0:	6054      	str	r4, [r2, #4]
 80293a2:	e7ca      	b.n	802933a <_free_r+0x26>
 80293a4:	b003      	add	sp, #12
 80293a6:	bd30      	pop	{r4, r5, pc}
 80293a8:	2003bfe4 	.word	0x2003bfe4

080293ac <sbrk_aligned>:
 80293ac:	b570      	push	{r4, r5, r6, lr}
 80293ae:	4e0e      	ldr	r6, [pc, #56]	; (80293e8 <sbrk_aligned+0x3c>)
 80293b0:	460c      	mov	r4, r1
 80293b2:	6831      	ldr	r1, [r6, #0]
 80293b4:	4605      	mov	r5, r0
 80293b6:	b911      	cbnz	r1, 80293be <sbrk_aligned+0x12>
 80293b8:	f000 fb7a 	bl	8029ab0 <_sbrk_r>
 80293bc:	6030      	str	r0, [r6, #0]
 80293be:	4621      	mov	r1, r4
 80293c0:	4628      	mov	r0, r5
 80293c2:	f000 fb75 	bl	8029ab0 <_sbrk_r>
 80293c6:	1c43      	adds	r3, r0, #1
 80293c8:	d00a      	beq.n	80293e0 <sbrk_aligned+0x34>
 80293ca:	1cc4      	adds	r4, r0, #3
 80293cc:	f024 0403 	bic.w	r4, r4, #3
 80293d0:	42a0      	cmp	r0, r4
 80293d2:	d007      	beq.n	80293e4 <sbrk_aligned+0x38>
 80293d4:	1a21      	subs	r1, r4, r0
 80293d6:	4628      	mov	r0, r5
 80293d8:	f000 fb6a 	bl	8029ab0 <_sbrk_r>
 80293dc:	3001      	adds	r0, #1
 80293de:	d101      	bne.n	80293e4 <sbrk_aligned+0x38>
 80293e0:	f04f 34ff 	mov.w	r4, #4294967295
 80293e4:	4620      	mov	r0, r4
 80293e6:	bd70      	pop	{r4, r5, r6, pc}
 80293e8:	2003bfe8 	.word	0x2003bfe8

080293ec <_malloc_r>:
 80293ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80293f0:	1ccd      	adds	r5, r1, #3
 80293f2:	f025 0503 	bic.w	r5, r5, #3
 80293f6:	3508      	adds	r5, #8
 80293f8:	2d0c      	cmp	r5, #12
 80293fa:	bf38      	it	cc
 80293fc:	250c      	movcc	r5, #12
 80293fe:	2d00      	cmp	r5, #0
 8029400:	4607      	mov	r7, r0
 8029402:	db01      	blt.n	8029408 <_malloc_r+0x1c>
 8029404:	42a9      	cmp	r1, r5
 8029406:	d905      	bls.n	8029414 <_malloc_r+0x28>
 8029408:	230c      	movs	r3, #12
 802940a:	603b      	str	r3, [r7, #0]
 802940c:	2600      	movs	r6, #0
 802940e:	4630      	mov	r0, r6
 8029410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029414:	4e2e      	ldr	r6, [pc, #184]	; (80294d0 <_malloc_r+0xe4>)
 8029416:	f002 f829 	bl	802b46c <__malloc_lock>
 802941a:	6833      	ldr	r3, [r6, #0]
 802941c:	461c      	mov	r4, r3
 802941e:	bb34      	cbnz	r4, 802946e <_malloc_r+0x82>
 8029420:	4629      	mov	r1, r5
 8029422:	4638      	mov	r0, r7
 8029424:	f7ff ffc2 	bl	80293ac <sbrk_aligned>
 8029428:	1c43      	adds	r3, r0, #1
 802942a:	4604      	mov	r4, r0
 802942c:	d14d      	bne.n	80294ca <_malloc_r+0xde>
 802942e:	6834      	ldr	r4, [r6, #0]
 8029430:	4626      	mov	r6, r4
 8029432:	2e00      	cmp	r6, #0
 8029434:	d140      	bne.n	80294b8 <_malloc_r+0xcc>
 8029436:	6823      	ldr	r3, [r4, #0]
 8029438:	4631      	mov	r1, r6
 802943a:	4638      	mov	r0, r7
 802943c:	eb04 0803 	add.w	r8, r4, r3
 8029440:	f000 fb36 	bl	8029ab0 <_sbrk_r>
 8029444:	4580      	cmp	r8, r0
 8029446:	d13a      	bne.n	80294be <_malloc_r+0xd2>
 8029448:	6821      	ldr	r1, [r4, #0]
 802944a:	3503      	adds	r5, #3
 802944c:	1a6d      	subs	r5, r5, r1
 802944e:	f025 0503 	bic.w	r5, r5, #3
 8029452:	3508      	adds	r5, #8
 8029454:	2d0c      	cmp	r5, #12
 8029456:	bf38      	it	cc
 8029458:	250c      	movcc	r5, #12
 802945a:	4629      	mov	r1, r5
 802945c:	4638      	mov	r0, r7
 802945e:	f7ff ffa5 	bl	80293ac <sbrk_aligned>
 8029462:	3001      	adds	r0, #1
 8029464:	d02b      	beq.n	80294be <_malloc_r+0xd2>
 8029466:	6823      	ldr	r3, [r4, #0]
 8029468:	442b      	add	r3, r5
 802946a:	6023      	str	r3, [r4, #0]
 802946c:	e00e      	b.n	802948c <_malloc_r+0xa0>
 802946e:	6822      	ldr	r2, [r4, #0]
 8029470:	1b52      	subs	r2, r2, r5
 8029472:	d41e      	bmi.n	80294b2 <_malloc_r+0xc6>
 8029474:	2a0b      	cmp	r2, #11
 8029476:	d916      	bls.n	80294a6 <_malloc_r+0xba>
 8029478:	1961      	adds	r1, r4, r5
 802947a:	42a3      	cmp	r3, r4
 802947c:	6025      	str	r5, [r4, #0]
 802947e:	bf18      	it	ne
 8029480:	6059      	strne	r1, [r3, #4]
 8029482:	6863      	ldr	r3, [r4, #4]
 8029484:	bf08      	it	eq
 8029486:	6031      	streq	r1, [r6, #0]
 8029488:	5162      	str	r2, [r4, r5]
 802948a:	604b      	str	r3, [r1, #4]
 802948c:	4638      	mov	r0, r7
 802948e:	f104 060b 	add.w	r6, r4, #11
 8029492:	f001 fff1 	bl	802b478 <__malloc_unlock>
 8029496:	f026 0607 	bic.w	r6, r6, #7
 802949a:	1d23      	adds	r3, r4, #4
 802949c:	1af2      	subs	r2, r6, r3
 802949e:	d0b6      	beq.n	802940e <_malloc_r+0x22>
 80294a0:	1b9b      	subs	r3, r3, r6
 80294a2:	50a3      	str	r3, [r4, r2]
 80294a4:	e7b3      	b.n	802940e <_malloc_r+0x22>
 80294a6:	6862      	ldr	r2, [r4, #4]
 80294a8:	42a3      	cmp	r3, r4
 80294aa:	bf0c      	ite	eq
 80294ac:	6032      	streq	r2, [r6, #0]
 80294ae:	605a      	strne	r2, [r3, #4]
 80294b0:	e7ec      	b.n	802948c <_malloc_r+0xa0>
 80294b2:	4623      	mov	r3, r4
 80294b4:	6864      	ldr	r4, [r4, #4]
 80294b6:	e7b2      	b.n	802941e <_malloc_r+0x32>
 80294b8:	4634      	mov	r4, r6
 80294ba:	6876      	ldr	r6, [r6, #4]
 80294bc:	e7b9      	b.n	8029432 <_malloc_r+0x46>
 80294be:	230c      	movs	r3, #12
 80294c0:	603b      	str	r3, [r7, #0]
 80294c2:	4638      	mov	r0, r7
 80294c4:	f001 ffd8 	bl	802b478 <__malloc_unlock>
 80294c8:	e7a1      	b.n	802940e <_malloc_r+0x22>
 80294ca:	6025      	str	r5, [r4, #0]
 80294cc:	e7de      	b.n	802948c <_malloc_r+0xa0>
 80294ce:	bf00      	nop
 80294d0:	2003bfe4 	.word	0x2003bfe4

080294d4 <__sfputc_r>:
 80294d4:	6893      	ldr	r3, [r2, #8]
 80294d6:	3b01      	subs	r3, #1
 80294d8:	2b00      	cmp	r3, #0
 80294da:	b410      	push	{r4}
 80294dc:	6093      	str	r3, [r2, #8]
 80294de:	da08      	bge.n	80294f2 <__sfputc_r+0x1e>
 80294e0:	6994      	ldr	r4, [r2, #24]
 80294e2:	42a3      	cmp	r3, r4
 80294e4:	db01      	blt.n	80294ea <__sfputc_r+0x16>
 80294e6:	290a      	cmp	r1, #10
 80294e8:	d103      	bne.n	80294f2 <__sfputc_r+0x1e>
 80294ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80294ee:	f001 bae1 	b.w	802aab4 <__swbuf_r>
 80294f2:	6813      	ldr	r3, [r2, #0]
 80294f4:	1c58      	adds	r0, r3, #1
 80294f6:	6010      	str	r0, [r2, #0]
 80294f8:	7019      	strb	r1, [r3, #0]
 80294fa:	4608      	mov	r0, r1
 80294fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029500:	4770      	bx	lr

08029502 <__sfputs_r>:
 8029502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029504:	4606      	mov	r6, r0
 8029506:	460f      	mov	r7, r1
 8029508:	4614      	mov	r4, r2
 802950a:	18d5      	adds	r5, r2, r3
 802950c:	42ac      	cmp	r4, r5
 802950e:	d101      	bne.n	8029514 <__sfputs_r+0x12>
 8029510:	2000      	movs	r0, #0
 8029512:	e007      	b.n	8029524 <__sfputs_r+0x22>
 8029514:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029518:	463a      	mov	r2, r7
 802951a:	4630      	mov	r0, r6
 802951c:	f7ff ffda 	bl	80294d4 <__sfputc_r>
 8029520:	1c43      	adds	r3, r0, #1
 8029522:	d1f3      	bne.n	802950c <__sfputs_r+0xa>
 8029524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08029528 <_vfiprintf_r>:
 8029528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802952c:	460d      	mov	r5, r1
 802952e:	b09d      	sub	sp, #116	; 0x74
 8029530:	4614      	mov	r4, r2
 8029532:	4698      	mov	r8, r3
 8029534:	4606      	mov	r6, r0
 8029536:	b118      	cbz	r0, 8029540 <_vfiprintf_r+0x18>
 8029538:	6983      	ldr	r3, [r0, #24]
 802953a:	b90b      	cbnz	r3, 8029540 <_vfiprintf_r+0x18>
 802953c:	f001 fd2c 	bl	802af98 <__sinit>
 8029540:	4b89      	ldr	r3, [pc, #548]	; (8029768 <_vfiprintf_r+0x240>)
 8029542:	429d      	cmp	r5, r3
 8029544:	d11b      	bne.n	802957e <_vfiprintf_r+0x56>
 8029546:	6875      	ldr	r5, [r6, #4]
 8029548:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802954a:	07d9      	lsls	r1, r3, #31
 802954c:	d405      	bmi.n	802955a <_vfiprintf_r+0x32>
 802954e:	89ab      	ldrh	r3, [r5, #12]
 8029550:	059a      	lsls	r2, r3, #22
 8029552:	d402      	bmi.n	802955a <_vfiprintf_r+0x32>
 8029554:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029556:	f001 fefb 	bl	802b350 <__retarget_lock_acquire_recursive>
 802955a:	89ab      	ldrh	r3, [r5, #12]
 802955c:	071b      	lsls	r3, r3, #28
 802955e:	d501      	bpl.n	8029564 <_vfiprintf_r+0x3c>
 8029560:	692b      	ldr	r3, [r5, #16]
 8029562:	b9eb      	cbnz	r3, 80295a0 <_vfiprintf_r+0x78>
 8029564:	4629      	mov	r1, r5
 8029566:	4630      	mov	r0, r6
 8029568:	f001 fb08 	bl	802ab7c <__swsetup_r>
 802956c:	b1c0      	cbz	r0, 80295a0 <_vfiprintf_r+0x78>
 802956e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029570:	07dc      	lsls	r4, r3, #31
 8029572:	d50e      	bpl.n	8029592 <_vfiprintf_r+0x6a>
 8029574:	f04f 30ff 	mov.w	r0, #4294967295
 8029578:	b01d      	add	sp, #116	; 0x74
 802957a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802957e:	4b7b      	ldr	r3, [pc, #492]	; (802976c <_vfiprintf_r+0x244>)
 8029580:	429d      	cmp	r5, r3
 8029582:	d101      	bne.n	8029588 <_vfiprintf_r+0x60>
 8029584:	68b5      	ldr	r5, [r6, #8]
 8029586:	e7df      	b.n	8029548 <_vfiprintf_r+0x20>
 8029588:	4b79      	ldr	r3, [pc, #484]	; (8029770 <_vfiprintf_r+0x248>)
 802958a:	429d      	cmp	r5, r3
 802958c:	bf08      	it	eq
 802958e:	68f5      	ldreq	r5, [r6, #12]
 8029590:	e7da      	b.n	8029548 <_vfiprintf_r+0x20>
 8029592:	89ab      	ldrh	r3, [r5, #12]
 8029594:	0598      	lsls	r0, r3, #22
 8029596:	d4ed      	bmi.n	8029574 <_vfiprintf_r+0x4c>
 8029598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802959a:	f001 fedb 	bl	802b354 <__retarget_lock_release_recursive>
 802959e:	e7e9      	b.n	8029574 <_vfiprintf_r+0x4c>
 80295a0:	2300      	movs	r3, #0
 80295a2:	9309      	str	r3, [sp, #36]	; 0x24
 80295a4:	2320      	movs	r3, #32
 80295a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80295aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80295ae:	2330      	movs	r3, #48	; 0x30
 80295b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8029774 <_vfiprintf_r+0x24c>
 80295b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80295b8:	f04f 0901 	mov.w	r9, #1
 80295bc:	4623      	mov	r3, r4
 80295be:	469a      	mov	sl, r3
 80295c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80295c4:	b10a      	cbz	r2, 80295ca <_vfiprintf_r+0xa2>
 80295c6:	2a25      	cmp	r2, #37	; 0x25
 80295c8:	d1f9      	bne.n	80295be <_vfiprintf_r+0x96>
 80295ca:	ebba 0b04 	subs.w	fp, sl, r4
 80295ce:	d00b      	beq.n	80295e8 <_vfiprintf_r+0xc0>
 80295d0:	465b      	mov	r3, fp
 80295d2:	4622      	mov	r2, r4
 80295d4:	4629      	mov	r1, r5
 80295d6:	4630      	mov	r0, r6
 80295d8:	f7ff ff93 	bl	8029502 <__sfputs_r>
 80295dc:	3001      	adds	r0, #1
 80295de:	f000 80aa 	beq.w	8029736 <_vfiprintf_r+0x20e>
 80295e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80295e4:	445a      	add	r2, fp
 80295e6:	9209      	str	r2, [sp, #36]	; 0x24
 80295e8:	f89a 3000 	ldrb.w	r3, [sl]
 80295ec:	2b00      	cmp	r3, #0
 80295ee:	f000 80a2 	beq.w	8029736 <_vfiprintf_r+0x20e>
 80295f2:	2300      	movs	r3, #0
 80295f4:	f04f 32ff 	mov.w	r2, #4294967295
 80295f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80295fc:	f10a 0a01 	add.w	sl, sl, #1
 8029600:	9304      	str	r3, [sp, #16]
 8029602:	9307      	str	r3, [sp, #28]
 8029604:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8029608:	931a      	str	r3, [sp, #104]	; 0x68
 802960a:	4654      	mov	r4, sl
 802960c:	2205      	movs	r2, #5
 802960e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8029612:	4858      	ldr	r0, [pc, #352]	; (8029774 <_vfiprintf_r+0x24c>)
 8029614:	f7d6 fe1c 	bl	8000250 <memchr>
 8029618:	9a04      	ldr	r2, [sp, #16]
 802961a:	b9d8      	cbnz	r0, 8029654 <_vfiprintf_r+0x12c>
 802961c:	06d1      	lsls	r1, r2, #27
 802961e:	bf44      	itt	mi
 8029620:	2320      	movmi	r3, #32
 8029622:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029626:	0713      	lsls	r3, r2, #28
 8029628:	bf44      	itt	mi
 802962a:	232b      	movmi	r3, #43	; 0x2b
 802962c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8029630:	f89a 3000 	ldrb.w	r3, [sl]
 8029634:	2b2a      	cmp	r3, #42	; 0x2a
 8029636:	d015      	beq.n	8029664 <_vfiprintf_r+0x13c>
 8029638:	9a07      	ldr	r2, [sp, #28]
 802963a:	4654      	mov	r4, sl
 802963c:	2000      	movs	r0, #0
 802963e:	f04f 0c0a 	mov.w	ip, #10
 8029642:	4621      	mov	r1, r4
 8029644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8029648:	3b30      	subs	r3, #48	; 0x30
 802964a:	2b09      	cmp	r3, #9
 802964c:	d94e      	bls.n	80296ec <_vfiprintf_r+0x1c4>
 802964e:	b1b0      	cbz	r0, 802967e <_vfiprintf_r+0x156>
 8029650:	9207      	str	r2, [sp, #28]
 8029652:	e014      	b.n	802967e <_vfiprintf_r+0x156>
 8029654:	eba0 0308 	sub.w	r3, r0, r8
 8029658:	fa09 f303 	lsl.w	r3, r9, r3
 802965c:	4313      	orrs	r3, r2
 802965e:	9304      	str	r3, [sp, #16]
 8029660:	46a2      	mov	sl, r4
 8029662:	e7d2      	b.n	802960a <_vfiprintf_r+0xe2>
 8029664:	9b03      	ldr	r3, [sp, #12]
 8029666:	1d19      	adds	r1, r3, #4
 8029668:	681b      	ldr	r3, [r3, #0]
 802966a:	9103      	str	r1, [sp, #12]
 802966c:	2b00      	cmp	r3, #0
 802966e:	bfbb      	ittet	lt
 8029670:	425b      	neglt	r3, r3
 8029672:	f042 0202 	orrlt.w	r2, r2, #2
 8029676:	9307      	strge	r3, [sp, #28]
 8029678:	9307      	strlt	r3, [sp, #28]
 802967a:	bfb8      	it	lt
 802967c:	9204      	strlt	r2, [sp, #16]
 802967e:	7823      	ldrb	r3, [r4, #0]
 8029680:	2b2e      	cmp	r3, #46	; 0x2e
 8029682:	d10c      	bne.n	802969e <_vfiprintf_r+0x176>
 8029684:	7863      	ldrb	r3, [r4, #1]
 8029686:	2b2a      	cmp	r3, #42	; 0x2a
 8029688:	d135      	bne.n	80296f6 <_vfiprintf_r+0x1ce>
 802968a:	9b03      	ldr	r3, [sp, #12]
 802968c:	1d1a      	adds	r2, r3, #4
 802968e:	681b      	ldr	r3, [r3, #0]
 8029690:	9203      	str	r2, [sp, #12]
 8029692:	2b00      	cmp	r3, #0
 8029694:	bfb8      	it	lt
 8029696:	f04f 33ff 	movlt.w	r3, #4294967295
 802969a:	3402      	adds	r4, #2
 802969c:	9305      	str	r3, [sp, #20]
 802969e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8029784 <_vfiprintf_r+0x25c>
 80296a2:	7821      	ldrb	r1, [r4, #0]
 80296a4:	2203      	movs	r2, #3
 80296a6:	4650      	mov	r0, sl
 80296a8:	f7d6 fdd2 	bl	8000250 <memchr>
 80296ac:	b140      	cbz	r0, 80296c0 <_vfiprintf_r+0x198>
 80296ae:	2340      	movs	r3, #64	; 0x40
 80296b0:	eba0 000a 	sub.w	r0, r0, sl
 80296b4:	fa03 f000 	lsl.w	r0, r3, r0
 80296b8:	9b04      	ldr	r3, [sp, #16]
 80296ba:	4303      	orrs	r3, r0
 80296bc:	3401      	adds	r4, #1
 80296be:	9304      	str	r3, [sp, #16]
 80296c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80296c4:	482c      	ldr	r0, [pc, #176]	; (8029778 <_vfiprintf_r+0x250>)
 80296c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80296ca:	2206      	movs	r2, #6
 80296cc:	f7d6 fdc0 	bl	8000250 <memchr>
 80296d0:	2800      	cmp	r0, #0
 80296d2:	d03f      	beq.n	8029754 <_vfiprintf_r+0x22c>
 80296d4:	4b29      	ldr	r3, [pc, #164]	; (802977c <_vfiprintf_r+0x254>)
 80296d6:	bb1b      	cbnz	r3, 8029720 <_vfiprintf_r+0x1f8>
 80296d8:	9b03      	ldr	r3, [sp, #12]
 80296da:	3307      	adds	r3, #7
 80296dc:	f023 0307 	bic.w	r3, r3, #7
 80296e0:	3308      	adds	r3, #8
 80296e2:	9303      	str	r3, [sp, #12]
 80296e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80296e6:	443b      	add	r3, r7
 80296e8:	9309      	str	r3, [sp, #36]	; 0x24
 80296ea:	e767      	b.n	80295bc <_vfiprintf_r+0x94>
 80296ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80296f0:	460c      	mov	r4, r1
 80296f2:	2001      	movs	r0, #1
 80296f4:	e7a5      	b.n	8029642 <_vfiprintf_r+0x11a>
 80296f6:	2300      	movs	r3, #0
 80296f8:	3401      	adds	r4, #1
 80296fa:	9305      	str	r3, [sp, #20]
 80296fc:	4619      	mov	r1, r3
 80296fe:	f04f 0c0a 	mov.w	ip, #10
 8029702:	4620      	mov	r0, r4
 8029704:	f810 2b01 	ldrb.w	r2, [r0], #1
 8029708:	3a30      	subs	r2, #48	; 0x30
 802970a:	2a09      	cmp	r2, #9
 802970c:	d903      	bls.n	8029716 <_vfiprintf_r+0x1ee>
 802970e:	2b00      	cmp	r3, #0
 8029710:	d0c5      	beq.n	802969e <_vfiprintf_r+0x176>
 8029712:	9105      	str	r1, [sp, #20]
 8029714:	e7c3      	b.n	802969e <_vfiprintf_r+0x176>
 8029716:	fb0c 2101 	mla	r1, ip, r1, r2
 802971a:	4604      	mov	r4, r0
 802971c:	2301      	movs	r3, #1
 802971e:	e7f0      	b.n	8029702 <_vfiprintf_r+0x1da>
 8029720:	ab03      	add	r3, sp, #12
 8029722:	9300      	str	r3, [sp, #0]
 8029724:	462a      	mov	r2, r5
 8029726:	4b16      	ldr	r3, [pc, #88]	; (8029780 <_vfiprintf_r+0x258>)
 8029728:	a904      	add	r1, sp, #16
 802972a:	4630      	mov	r0, r6
 802972c:	f3af 8000 	nop.w
 8029730:	4607      	mov	r7, r0
 8029732:	1c78      	adds	r0, r7, #1
 8029734:	d1d6      	bne.n	80296e4 <_vfiprintf_r+0x1bc>
 8029736:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8029738:	07d9      	lsls	r1, r3, #31
 802973a:	d405      	bmi.n	8029748 <_vfiprintf_r+0x220>
 802973c:	89ab      	ldrh	r3, [r5, #12]
 802973e:	059a      	lsls	r2, r3, #22
 8029740:	d402      	bmi.n	8029748 <_vfiprintf_r+0x220>
 8029742:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8029744:	f001 fe06 	bl	802b354 <__retarget_lock_release_recursive>
 8029748:	89ab      	ldrh	r3, [r5, #12]
 802974a:	065b      	lsls	r3, r3, #25
 802974c:	f53f af12 	bmi.w	8029574 <_vfiprintf_r+0x4c>
 8029750:	9809      	ldr	r0, [sp, #36]	; 0x24
 8029752:	e711      	b.n	8029578 <_vfiprintf_r+0x50>
 8029754:	ab03      	add	r3, sp, #12
 8029756:	9300      	str	r3, [sp, #0]
 8029758:	462a      	mov	r2, r5
 802975a:	4b09      	ldr	r3, [pc, #36]	; (8029780 <_vfiprintf_r+0x258>)
 802975c:	a904      	add	r1, sp, #16
 802975e:	4630      	mov	r0, r6
 8029760:	f000 f880 	bl	8029864 <_printf_i>
 8029764:	e7e4      	b.n	8029730 <_vfiprintf_r+0x208>
 8029766:	bf00      	nop
 8029768:	0803011c 	.word	0x0803011c
 802976c:	0803013c 	.word	0x0803013c
 8029770:	080300fc 	.word	0x080300fc
 8029774:	0802fd18 	.word	0x0802fd18
 8029778:	0802fd22 	.word	0x0802fd22
 802977c:	00000000 	.word	0x00000000
 8029780:	08029503 	.word	0x08029503
 8029784:	0802fd1e 	.word	0x0802fd1e

08029788 <_printf_common>:
 8029788:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802978c:	4616      	mov	r6, r2
 802978e:	4699      	mov	r9, r3
 8029790:	688a      	ldr	r2, [r1, #8]
 8029792:	690b      	ldr	r3, [r1, #16]
 8029794:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8029798:	4293      	cmp	r3, r2
 802979a:	bfb8      	it	lt
 802979c:	4613      	movlt	r3, r2
 802979e:	6033      	str	r3, [r6, #0]
 80297a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80297a4:	4607      	mov	r7, r0
 80297a6:	460c      	mov	r4, r1
 80297a8:	b10a      	cbz	r2, 80297ae <_printf_common+0x26>
 80297aa:	3301      	adds	r3, #1
 80297ac:	6033      	str	r3, [r6, #0]
 80297ae:	6823      	ldr	r3, [r4, #0]
 80297b0:	0699      	lsls	r1, r3, #26
 80297b2:	bf42      	ittt	mi
 80297b4:	6833      	ldrmi	r3, [r6, #0]
 80297b6:	3302      	addmi	r3, #2
 80297b8:	6033      	strmi	r3, [r6, #0]
 80297ba:	6825      	ldr	r5, [r4, #0]
 80297bc:	f015 0506 	ands.w	r5, r5, #6
 80297c0:	d106      	bne.n	80297d0 <_printf_common+0x48>
 80297c2:	f104 0a19 	add.w	sl, r4, #25
 80297c6:	68e3      	ldr	r3, [r4, #12]
 80297c8:	6832      	ldr	r2, [r6, #0]
 80297ca:	1a9b      	subs	r3, r3, r2
 80297cc:	42ab      	cmp	r3, r5
 80297ce:	dc26      	bgt.n	802981e <_printf_common+0x96>
 80297d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80297d4:	1e13      	subs	r3, r2, #0
 80297d6:	6822      	ldr	r2, [r4, #0]
 80297d8:	bf18      	it	ne
 80297da:	2301      	movne	r3, #1
 80297dc:	0692      	lsls	r2, r2, #26
 80297de:	d42b      	bmi.n	8029838 <_printf_common+0xb0>
 80297e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80297e4:	4649      	mov	r1, r9
 80297e6:	4638      	mov	r0, r7
 80297e8:	47c0      	blx	r8
 80297ea:	3001      	adds	r0, #1
 80297ec:	d01e      	beq.n	802982c <_printf_common+0xa4>
 80297ee:	6823      	ldr	r3, [r4, #0]
 80297f0:	68e5      	ldr	r5, [r4, #12]
 80297f2:	6832      	ldr	r2, [r6, #0]
 80297f4:	f003 0306 	and.w	r3, r3, #6
 80297f8:	2b04      	cmp	r3, #4
 80297fa:	bf08      	it	eq
 80297fc:	1aad      	subeq	r5, r5, r2
 80297fe:	68a3      	ldr	r3, [r4, #8]
 8029800:	6922      	ldr	r2, [r4, #16]
 8029802:	bf0c      	ite	eq
 8029804:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029808:	2500      	movne	r5, #0
 802980a:	4293      	cmp	r3, r2
 802980c:	bfc4      	itt	gt
 802980e:	1a9b      	subgt	r3, r3, r2
 8029810:	18ed      	addgt	r5, r5, r3
 8029812:	2600      	movs	r6, #0
 8029814:	341a      	adds	r4, #26
 8029816:	42b5      	cmp	r5, r6
 8029818:	d11a      	bne.n	8029850 <_printf_common+0xc8>
 802981a:	2000      	movs	r0, #0
 802981c:	e008      	b.n	8029830 <_printf_common+0xa8>
 802981e:	2301      	movs	r3, #1
 8029820:	4652      	mov	r2, sl
 8029822:	4649      	mov	r1, r9
 8029824:	4638      	mov	r0, r7
 8029826:	47c0      	blx	r8
 8029828:	3001      	adds	r0, #1
 802982a:	d103      	bne.n	8029834 <_printf_common+0xac>
 802982c:	f04f 30ff 	mov.w	r0, #4294967295
 8029830:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8029834:	3501      	adds	r5, #1
 8029836:	e7c6      	b.n	80297c6 <_printf_common+0x3e>
 8029838:	18e1      	adds	r1, r4, r3
 802983a:	1c5a      	adds	r2, r3, #1
 802983c:	2030      	movs	r0, #48	; 0x30
 802983e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8029842:	4422      	add	r2, r4
 8029844:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029848:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802984c:	3302      	adds	r3, #2
 802984e:	e7c7      	b.n	80297e0 <_printf_common+0x58>
 8029850:	2301      	movs	r3, #1
 8029852:	4622      	mov	r2, r4
 8029854:	4649      	mov	r1, r9
 8029856:	4638      	mov	r0, r7
 8029858:	47c0      	blx	r8
 802985a:	3001      	adds	r0, #1
 802985c:	d0e6      	beq.n	802982c <_printf_common+0xa4>
 802985e:	3601      	adds	r6, #1
 8029860:	e7d9      	b.n	8029816 <_printf_common+0x8e>
	...

08029864 <_printf_i>:
 8029864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029868:	7e0f      	ldrb	r7, [r1, #24]
 802986a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802986c:	2f78      	cmp	r7, #120	; 0x78
 802986e:	4691      	mov	r9, r2
 8029870:	4680      	mov	r8, r0
 8029872:	460c      	mov	r4, r1
 8029874:	469a      	mov	sl, r3
 8029876:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802987a:	d807      	bhi.n	802988c <_printf_i+0x28>
 802987c:	2f62      	cmp	r7, #98	; 0x62
 802987e:	d80a      	bhi.n	8029896 <_printf_i+0x32>
 8029880:	2f00      	cmp	r7, #0
 8029882:	f000 80d8 	beq.w	8029a36 <_printf_i+0x1d2>
 8029886:	2f58      	cmp	r7, #88	; 0x58
 8029888:	f000 80a3 	beq.w	80299d2 <_printf_i+0x16e>
 802988c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029890:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8029894:	e03a      	b.n	802990c <_printf_i+0xa8>
 8029896:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802989a:	2b15      	cmp	r3, #21
 802989c:	d8f6      	bhi.n	802988c <_printf_i+0x28>
 802989e:	a101      	add	r1, pc, #4	; (adr r1, 80298a4 <_printf_i+0x40>)
 80298a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80298a4:	080298fd 	.word	0x080298fd
 80298a8:	08029911 	.word	0x08029911
 80298ac:	0802988d 	.word	0x0802988d
 80298b0:	0802988d 	.word	0x0802988d
 80298b4:	0802988d 	.word	0x0802988d
 80298b8:	0802988d 	.word	0x0802988d
 80298bc:	08029911 	.word	0x08029911
 80298c0:	0802988d 	.word	0x0802988d
 80298c4:	0802988d 	.word	0x0802988d
 80298c8:	0802988d 	.word	0x0802988d
 80298cc:	0802988d 	.word	0x0802988d
 80298d0:	08029a1d 	.word	0x08029a1d
 80298d4:	08029941 	.word	0x08029941
 80298d8:	080299ff 	.word	0x080299ff
 80298dc:	0802988d 	.word	0x0802988d
 80298e0:	0802988d 	.word	0x0802988d
 80298e4:	08029a3f 	.word	0x08029a3f
 80298e8:	0802988d 	.word	0x0802988d
 80298ec:	08029941 	.word	0x08029941
 80298f0:	0802988d 	.word	0x0802988d
 80298f4:	0802988d 	.word	0x0802988d
 80298f8:	08029a07 	.word	0x08029a07
 80298fc:	682b      	ldr	r3, [r5, #0]
 80298fe:	1d1a      	adds	r2, r3, #4
 8029900:	681b      	ldr	r3, [r3, #0]
 8029902:	602a      	str	r2, [r5, #0]
 8029904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029908:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802990c:	2301      	movs	r3, #1
 802990e:	e0a3      	b.n	8029a58 <_printf_i+0x1f4>
 8029910:	6820      	ldr	r0, [r4, #0]
 8029912:	6829      	ldr	r1, [r5, #0]
 8029914:	0606      	lsls	r6, r0, #24
 8029916:	f101 0304 	add.w	r3, r1, #4
 802991a:	d50a      	bpl.n	8029932 <_printf_i+0xce>
 802991c:	680e      	ldr	r6, [r1, #0]
 802991e:	602b      	str	r3, [r5, #0]
 8029920:	2e00      	cmp	r6, #0
 8029922:	da03      	bge.n	802992c <_printf_i+0xc8>
 8029924:	232d      	movs	r3, #45	; 0x2d
 8029926:	4276      	negs	r6, r6
 8029928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802992c:	485e      	ldr	r0, [pc, #376]	; (8029aa8 <_printf_i+0x244>)
 802992e:	230a      	movs	r3, #10
 8029930:	e019      	b.n	8029966 <_printf_i+0x102>
 8029932:	680e      	ldr	r6, [r1, #0]
 8029934:	602b      	str	r3, [r5, #0]
 8029936:	f010 0f40 	tst.w	r0, #64	; 0x40
 802993a:	bf18      	it	ne
 802993c:	b236      	sxthne	r6, r6
 802993e:	e7ef      	b.n	8029920 <_printf_i+0xbc>
 8029940:	682b      	ldr	r3, [r5, #0]
 8029942:	6820      	ldr	r0, [r4, #0]
 8029944:	1d19      	adds	r1, r3, #4
 8029946:	6029      	str	r1, [r5, #0]
 8029948:	0601      	lsls	r1, r0, #24
 802994a:	d501      	bpl.n	8029950 <_printf_i+0xec>
 802994c:	681e      	ldr	r6, [r3, #0]
 802994e:	e002      	b.n	8029956 <_printf_i+0xf2>
 8029950:	0646      	lsls	r6, r0, #25
 8029952:	d5fb      	bpl.n	802994c <_printf_i+0xe8>
 8029954:	881e      	ldrh	r6, [r3, #0]
 8029956:	4854      	ldr	r0, [pc, #336]	; (8029aa8 <_printf_i+0x244>)
 8029958:	2f6f      	cmp	r7, #111	; 0x6f
 802995a:	bf0c      	ite	eq
 802995c:	2308      	moveq	r3, #8
 802995e:	230a      	movne	r3, #10
 8029960:	2100      	movs	r1, #0
 8029962:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8029966:	6865      	ldr	r5, [r4, #4]
 8029968:	60a5      	str	r5, [r4, #8]
 802996a:	2d00      	cmp	r5, #0
 802996c:	bfa2      	ittt	ge
 802996e:	6821      	ldrge	r1, [r4, #0]
 8029970:	f021 0104 	bicge.w	r1, r1, #4
 8029974:	6021      	strge	r1, [r4, #0]
 8029976:	b90e      	cbnz	r6, 802997c <_printf_i+0x118>
 8029978:	2d00      	cmp	r5, #0
 802997a:	d04d      	beq.n	8029a18 <_printf_i+0x1b4>
 802997c:	4615      	mov	r5, r2
 802997e:	fbb6 f1f3 	udiv	r1, r6, r3
 8029982:	fb03 6711 	mls	r7, r3, r1, r6
 8029986:	5dc7      	ldrb	r7, [r0, r7]
 8029988:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802998c:	4637      	mov	r7, r6
 802998e:	42bb      	cmp	r3, r7
 8029990:	460e      	mov	r6, r1
 8029992:	d9f4      	bls.n	802997e <_printf_i+0x11a>
 8029994:	2b08      	cmp	r3, #8
 8029996:	d10b      	bne.n	80299b0 <_printf_i+0x14c>
 8029998:	6823      	ldr	r3, [r4, #0]
 802999a:	07de      	lsls	r6, r3, #31
 802999c:	d508      	bpl.n	80299b0 <_printf_i+0x14c>
 802999e:	6923      	ldr	r3, [r4, #16]
 80299a0:	6861      	ldr	r1, [r4, #4]
 80299a2:	4299      	cmp	r1, r3
 80299a4:	bfde      	ittt	le
 80299a6:	2330      	movle	r3, #48	; 0x30
 80299a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80299ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80299b0:	1b52      	subs	r2, r2, r5
 80299b2:	6122      	str	r2, [r4, #16]
 80299b4:	f8cd a000 	str.w	sl, [sp]
 80299b8:	464b      	mov	r3, r9
 80299ba:	aa03      	add	r2, sp, #12
 80299bc:	4621      	mov	r1, r4
 80299be:	4640      	mov	r0, r8
 80299c0:	f7ff fee2 	bl	8029788 <_printf_common>
 80299c4:	3001      	adds	r0, #1
 80299c6:	d14c      	bne.n	8029a62 <_printf_i+0x1fe>
 80299c8:	f04f 30ff 	mov.w	r0, #4294967295
 80299cc:	b004      	add	sp, #16
 80299ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80299d2:	4835      	ldr	r0, [pc, #212]	; (8029aa8 <_printf_i+0x244>)
 80299d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80299d8:	6829      	ldr	r1, [r5, #0]
 80299da:	6823      	ldr	r3, [r4, #0]
 80299dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80299e0:	6029      	str	r1, [r5, #0]
 80299e2:	061d      	lsls	r5, r3, #24
 80299e4:	d514      	bpl.n	8029a10 <_printf_i+0x1ac>
 80299e6:	07df      	lsls	r7, r3, #31
 80299e8:	bf44      	itt	mi
 80299ea:	f043 0320 	orrmi.w	r3, r3, #32
 80299ee:	6023      	strmi	r3, [r4, #0]
 80299f0:	b91e      	cbnz	r6, 80299fa <_printf_i+0x196>
 80299f2:	6823      	ldr	r3, [r4, #0]
 80299f4:	f023 0320 	bic.w	r3, r3, #32
 80299f8:	6023      	str	r3, [r4, #0]
 80299fa:	2310      	movs	r3, #16
 80299fc:	e7b0      	b.n	8029960 <_printf_i+0xfc>
 80299fe:	6823      	ldr	r3, [r4, #0]
 8029a00:	f043 0320 	orr.w	r3, r3, #32
 8029a04:	6023      	str	r3, [r4, #0]
 8029a06:	2378      	movs	r3, #120	; 0x78
 8029a08:	4828      	ldr	r0, [pc, #160]	; (8029aac <_printf_i+0x248>)
 8029a0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8029a0e:	e7e3      	b.n	80299d8 <_printf_i+0x174>
 8029a10:	0659      	lsls	r1, r3, #25
 8029a12:	bf48      	it	mi
 8029a14:	b2b6      	uxthmi	r6, r6
 8029a16:	e7e6      	b.n	80299e6 <_printf_i+0x182>
 8029a18:	4615      	mov	r5, r2
 8029a1a:	e7bb      	b.n	8029994 <_printf_i+0x130>
 8029a1c:	682b      	ldr	r3, [r5, #0]
 8029a1e:	6826      	ldr	r6, [r4, #0]
 8029a20:	6961      	ldr	r1, [r4, #20]
 8029a22:	1d18      	adds	r0, r3, #4
 8029a24:	6028      	str	r0, [r5, #0]
 8029a26:	0635      	lsls	r5, r6, #24
 8029a28:	681b      	ldr	r3, [r3, #0]
 8029a2a:	d501      	bpl.n	8029a30 <_printf_i+0x1cc>
 8029a2c:	6019      	str	r1, [r3, #0]
 8029a2e:	e002      	b.n	8029a36 <_printf_i+0x1d2>
 8029a30:	0670      	lsls	r0, r6, #25
 8029a32:	d5fb      	bpl.n	8029a2c <_printf_i+0x1c8>
 8029a34:	8019      	strh	r1, [r3, #0]
 8029a36:	2300      	movs	r3, #0
 8029a38:	6123      	str	r3, [r4, #16]
 8029a3a:	4615      	mov	r5, r2
 8029a3c:	e7ba      	b.n	80299b4 <_printf_i+0x150>
 8029a3e:	682b      	ldr	r3, [r5, #0]
 8029a40:	1d1a      	adds	r2, r3, #4
 8029a42:	602a      	str	r2, [r5, #0]
 8029a44:	681d      	ldr	r5, [r3, #0]
 8029a46:	6862      	ldr	r2, [r4, #4]
 8029a48:	2100      	movs	r1, #0
 8029a4a:	4628      	mov	r0, r5
 8029a4c:	f7d6 fc00 	bl	8000250 <memchr>
 8029a50:	b108      	cbz	r0, 8029a56 <_printf_i+0x1f2>
 8029a52:	1b40      	subs	r0, r0, r5
 8029a54:	6060      	str	r0, [r4, #4]
 8029a56:	6863      	ldr	r3, [r4, #4]
 8029a58:	6123      	str	r3, [r4, #16]
 8029a5a:	2300      	movs	r3, #0
 8029a5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029a60:	e7a8      	b.n	80299b4 <_printf_i+0x150>
 8029a62:	6923      	ldr	r3, [r4, #16]
 8029a64:	462a      	mov	r2, r5
 8029a66:	4649      	mov	r1, r9
 8029a68:	4640      	mov	r0, r8
 8029a6a:	47d0      	blx	sl
 8029a6c:	3001      	adds	r0, #1
 8029a6e:	d0ab      	beq.n	80299c8 <_printf_i+0x164>
 8029a70:	6823      	ldr	r3, [r4, #0]
 8029a72:	079b      	lsls	r3, r3, #30
 8029a74:	d413      	bmi.n	8029a9e <_printf_i+0x23a>
 8029a76:	68e0      	ldr	r0, [r4, #12]
 8029a78:	9b03      	ldr	r3, [sp, #12]
 8029a7a:	4298      	cmp	r0, r3
 8029a7c:	bfb8      	it	lt
 8029a7e:	4618      	movlt	r0, r3
 8029a80:	e7a4      	b.n	80299cc <_printf_i+0x168>
 8029a82:	2301      	movs	r3, #1
 8029a84:	4632      	mov	r2, r6
 8029a86:	4649      	mov	r1, r9
 8029a88:	4640      	mov	r0, r8
 8029a8a:	47d0      	blx	sl
 8029a8c:	3001      	adds	r0, #1
 8029a8e:	d09b      	beq.n	80299c8 <_printf_i+0x164>
 8029a90:	3501      	adds	r5, #1
 8029a92:	68e3      	ldr	r3, [r4, #12]
 8029a94:	9903      	ldr	r1, [sp, #12]
 8029a96:	1a5b      	subs	r3, r3, r1
 8029a98:	42ab      	cmp	r3, r5
 8029a9a:	dcf2      	bgt.n	8029a82 <_printf_i+0x21e>
 8029a9c:	e7eb      	b.n	8029a76 <_printf_i+0x212>
 8029a9e:	2500      	movs	r5, #0
 8029aa0:	f104 0619 	add.w	r6, r4, #25
 8029aa4:	e7f5      	b.n	8029a92 <_printf_i+0x22e>
 8029aa6:	bf00      	nop
 8029aa8:	0802fd29 	.word	0x0802fd29
 8029aac:	0802fd3a 	.word	0x0802fd3a

08029ab0 <_sbrk_r>:
 8029ab0:	b538      	push	{r3, r4, r5, lr}
 8029ab2:	4d06      	ldr	r5, [pc, #24]	; (8029acc <_sbrk_r+0x1c>)
 8029ab4:	2300      	movs	r3, #0
 8029ab6:	4604      	mov	r4, r0
 8029ab8:	4608      	mov	r0, r1
 8029aba:	602b      	str	r3, [r5, #0]
 8029abc:	f7d8 fa54 	bl	8001f68 <_sbrk>
 8029ac0:	1c43      	adds	r3, r0, #1
 8029ac2:	d102      	bne.n	8029aca <_sbrk_r+0x1a>
 8029ac4:	682b      	ldr	r3, [r5, #0]
 8029ac6:	b103      	cbz	r3, 8029aca <_sbrk_r+0x1a>
 8029ac8:	6023      	str	r3, [r4, #0]
 8029aca:	bd38      	pop	{r3, r4, r5, pc}
 8029acc:	2003c1b0 	.word	0x2003c1b0

08029ad0 <_raise_r>:
 8029ad0:	291f      	cmp	r1, #31
 8029ad2:	b538      	push	{r3, r4, r5, lr}
 8029ad4:	4604      	mov	r4, r0
 8029ad6:	460d      	mov	r5, r1
 8029ad8:	d904      	bls.n	8029ae4 <_raise_r+0x14>
 8029ada:	2316      	movs	r3, #22
 8029adc:	6003      	str	r3, [r0, #0]
 8029ade:	f04f 30ff 	mov.w	r0, #4294967295
 8029ae2:	bd38      	pop	{r3, r4, r5, pc}
 8029ae4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8029ae6:	b112      	cbz	r2, 8029aee <_raise_r+0x1e>
 8029ae8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8029aec:	b94b      	cbnz	r3, 8029b02 <_raise_r+0x32>
 8029aee:	4620      	mov	r0, r4
 8029af0:	f000 f830 	bl	8029b54 <_getpid_r>
 8029af4:	462a      	mov	r2, r5
 8029af6:	4601      	mov	r1, r0
 8029af8:	4620      	mov	r0, r4
 8029afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8029afe:	f000 b817 	b.w	8029b30 <_kill_r>
 8029b02:	2b01      	cmp	r3, #1
 8029b04:	d00a      	beq.n	8029b1c <_raise_r+0x4c>
 8029b06:	1c59      	adds	r1, r3, #1
 8029b08:	d103      	bne.n	8029b12 <_raise_r+0x42>
 8029b0a:	2316      	movs	r3, #22
 8029b0c:	6003      	str	r3, [r0, #0]
 8029b0e:	2001      	movs	r0, #1
 8029b10:	e7e7      	b.n	8029ae2 <_raise_r+0x12>
 8029b12:	2400      	movs	r4, #0
 8029b14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8029b18:	4628      	mov	r0, r5
 8029b1a:	4798      	blx	r3
 8029b1c:	2000      	movs	r0, #0
 8029b1e:	e7e0      	b.n	8029ae2 <_raise_r+0x12>

08029b20 <raise>:
 8029b20:	4b02      	ldr	r3, [pc, #8]	; (8029b2c <raise+0xc>)
 8029b22:	4601      	mov	r1, r0
 8029b24:	6818      	ldr	r0, [r3, #0]
 8029b26:	f7ff bfd3 	b.w	8029ad0 <_raise_r>
 8029b2a:	bf00      	nop
 8029b2c:	200000b0 	.word	0x200000b0

08029b30 <_kill_r>:
 8029b30:	b538      	push	{r3, r4, r5, lr}
 8029b32:	4d07      	ldr	r5, [pc, #28]	; (8029b50 <_kill_r+0x20>)
 8029b34:	2300      	movs	r3, #0
 8029b36:	4604      	mov	r4, r0
 8029b38:	4608      	mov	r0, r1
 8029b3a:	4611      	mov	r1, r2
 8029b3c:	602b      	str	r3, [r5, #0]
 8029b3e:	f7d8 f98b 	bl	8001e58 <_kill>
 8029b42:	1c43      	adds	r3, r0, #1
 8029b44:	d102      	bne.n	8029b4c <_kill_r+0x1c>
 8029b46:	682b      	ldr	r3, [r5, #0]
 8029b48:	b103      	cbz	r3, 8029b4c <_kill_r+0x1c>
 8029b4a:	6023      	str	r3, [r4, #0]
 8029b4c:	bd38      	pop	{r3, r4, r5, pc}
 8029b4e:	bf00      	nop
 8029b50:	2003c1b0 	.word	0x2003c1b0

08029b54 <_getpid_r>:
 8029b54:	f7d8 b978 	b.w	8001e48 <_getpid>

08029b58 <siscanf>:
 8029b58:	b40e      	push	{r1, r2, r3}
 8029b5a:	b510      	push	{r4, lr}
 8029b5c:	b09f      	sub	sp, #124	; 0x7c
 8029b5e:	ac21      	add	r4, sp, #132	; 0x84
 8029b60:	f44f 7101 	mov.w	r1, #516	; 0x204
 8029b64:	f854 2b04 	ldr.w	r2, [r4], #4
 8029b68:	9201      	str	r2, [sp, #4]
 8029b6a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8029b6e:	9004      	str	r0, [sp, #16]
 8029b70:	9008      	str	r0, [sp, #32]
 8029b72:	f7d6 fb65 	bl	8000240 <strlen>
 8029b76:	4b0c      	ldr	r3, [pc, #48]	; (8029ba8 <siscanf+0x50>)
 8029b78:	9005      	str	r0, [sp, #20]
 8029b7a:	9009      	str	r0, [sp, #36]	; 0x24
 8029b7c:	930d      	str	r3, [sp, #52]	; 0x34
 8029b7e:	480b      	ldr	r0, [pc, #44]	; (8029bac <siscanf+0x54>)
 8029b80:	9a01      	ldr	r2, [sp, #4]
 8029b82:	6800      	ldr	r0, [r0, #0]
 8029b84:	9403      	str	r4, [sp, #12]
 8029b86:	2300      	movs	r3, #0
 8029b88:	9311      	str	r3, [sp, #68]	; 0x44
 8029b8a:	9316      	str	r3, [sp, #88]	; 0x58
 8029b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8029b90:	f8ad 301e 	strh.w	r3, [sp, #30]
 8029b94:	a904      	add	r1, sp, #16
 8029b96:	4623      	mov	r3, r4
 8029b98:	f001 fcfe 	bl	802b598 <__ssvfiscanf_r>
 8029b9c:	b01f      	add	sp, #124	; 0x7c
 8029b9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029ba2:	b003      	add	sp, #12
 8029ba4:	4770      	bx	lr
 8029ba6:	bf00      	nop
 8029ba8:	08029bd3 	.word	0x08029bd3
 8029bac:	200000b0 	.word	0x200000b0

08029bb0 <__sread>:
 8029bb0:	b510      	push	{r4, lr}
 8029bb2:	460c      	mov	r4, r1
 8029bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029bb8:	f001 ffb8 	bl	802bb2c <_read_r>
 8029bbc:	2800      	cmp	r0, #0
 8029bbe:	bfab      	itete	ge
 8029bc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8029bc2:	89a3      	ldrhlt	r3, [r4, #12]
 8029bc4:	181b      	addge	r3, r3, r0
 8029bc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8029bca:	bfac      	ite	ge
 8029bcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8029bce:	81a3      	strhlt	r3, [r4, #12]
 8029bd0:	bd10      	pop	{r4, pc}

08029bd2 <__seofread>:
 8029bd2:	2000      	movs	r0, #0
 8029bd4:	4770      	bx	lr

08029bd6 <__swrite>:
 8029bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029bda:	461f      	mov	r7, r3
 8029bdc:	898b      	ldrh	r3, [r1, #12]
 8029bde:	05db      	lsls	r3, r3, #23
 8029be0:	4605      	mov	r5, r0
 8029be2:	460c      	mov	r4, r1
 8029be4:	4616      	mov	r6, r2
 8029be6:	d505      	bpl.n	8029bf4 <__swrite+0x1e>
 8029be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029bec:	2302      	movs	r3, #2
 8029bee:	2200      	movs	r2, #0
 8029bf0:	f001 fbb2 	bl	802b358 <_lseek_r>
 8029bf4:	89a3      	ldrh	r3, [r4, #12]
 8029bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8029bfa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8029bfe:	81a3      	strh	r3, [r4, #12]
 8029c00:	4632      	mov	r2, r6
 8029c02:	463b      	mov	r3, r7
 8029c04:	4628      	mov	r0, r5
 8029c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029c0a:	f000 bfa5 	b.w	802ab58 <_write_r>

08029c0e <__sseek>:
 8029c0e:	b510      	push	{r4, lr}
 8029c10:	460c      	mov	r4, r1
 8029c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c16:	f001 fb9f 	bl	802b358 <_lseek_r>
 8029c1a:	1c43      	adds	r3, r0, #1
 8029c1c:	89a3      	ldrh	r3, [r4, #12]
 8029c1e:	bf15      	itete	ne
 8029c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8029c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029c2a:	81a3      	strheq	r3, [r4, #12]
 8029c2c:	bf18      	it	ne
 8029c2e:	81a3      	strhne	r3, [r4, #12]
 8029c30:	bd10      	pop	{r4, pc}

08029c32 <__sclose>:
 8029c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029c36:	f001 b871 	b.w	802ad1c <_close_r>

08029c3a <strncmp>:
 8029c3a:	b510      	push	{r4, lr}
 8029c3c:	b17a      	cbz	r2, 8029c5e <strncmp+0x24>
 8029c3e:	4603      	mov	r3, r0
 8029c40:	3901      	subs	r1, #1
 8029c42:	1884      	adds	r4, r0, r2
 8029c44:	f813 0b01 	ldrb.w	r0, [r3], #1
 8029c48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8029c4c:	4290      	cmp	r0, r2
 8029c4e:	d101      	bne.n	8029c54 <strncmp+0x1a>
 8029c50:	42a3      	cmp	r3, r4
 8029c52:	d101      	bne.n	8029c58 <strncmp+0x1e>
 8029c54:	1a80      	subs	r0, r0, r2
 8029c56:	bd10      	pop	{r4, pc}
 8029c58:	2800      	cmp	r0, #0
 8029c5a:	d1f3      	bne.n	8029c44 <strncmp+0xa>
 8029c5c:	e7fa      	b.n	8029c54 <strncmp+0x1a>
 8029c5e:	4610      	mov	r0, r2
 8029c60:	e7f9      	b.n	8029c56 <strncmp+0x1c>

08029c62 <strncpy>:
 8029c62:	b510      	push	{r4, lr}
 8029c64:	3901      	subs	r1, #1
 8029c66:	4603      	mov	r3, r0
 8029c68:	b132      	cbz	r2, 8029c78 <strncpy+0x16>
 8029c6a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8029c6e:	f803 4b01 	strb.w	r4, [r3], #1
 8029c72:	3a01      	subs	r2, #1
 8029c74:	2c00      	cmp	r4, #0
 8029c76:	d1f7      	bne.n	8029c68 <strncpy+0x6>
 8029c78:	441a      	add	r2, r3
 8029c7a:	2100      	movs	r1, #0
 8029c7c:	4293      	cmp	r3, r2
 8029c7e:	d100      	bne.n	8029c82 <strncpy+0x20>
 8029c80:	bd10      	pop	{r4, pc}
 8029c82:	f803 1b01 	strb.w	r1, [r3], #1
 8029c86:	e7f9      	b.n	8029c7c <strncpy+0x1a>

08029c88 <is_leap_year>:
 8029c88:	0783      	lsls	r3, r0, #30
 8029c8a:	d10f      	bne.n	8029cac <is_leap_year+0x24>
 8029c8c:	2264      	movs	r2, #100	; 0x64
 8029c8e:	fb90 f3f2 	sdiv	r3, r0, r2
 8029c92:	fb02 0313 	mls	r3, r2, r3, r0
 8029c96:	b95b      	cbnz	r3, 8029cb0 <is_leap_year+0x28>
 8029c98:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8029c9c:	fb90 f2f3 	sdiv	r2, r0, r3
 8029ca0:	fb03 0012 	mls	r0, r3, r2, r0
 8029ca4:	fab0 f080 	clz	r0, r0
 8029ca8:	0940      	lsrs	r0, r0, #5
 8029caa:	4770      	bx	lr
 8029cac:	2000      	movs	r0, #0
 8029cae:	4770      	bx	lr
 8029cb0:	2001      	movs	r0, #1
 8029cb2:	4770      	bx	lr

08029cb4 <first_day>:
 8029cb4:	b570      	push	{r4, r5, r6, lr}
 8029cb6:	2104      	movs	r1, #4
 8029cb8:	4604      	mov	r4, r0
 8029cba:	f240 75b1 	movw	r5, #1969	; 0x7b1
 8029cbe:	2607      	movs	r6, #7
 8029cc0:	3c01      	subs	r4, #1
 8029cc2:	42ac      	cmp	r4, r5
 8029cc4:	dc01      	bgt.n	8029cca <first_day+0x16>
 8029cc6:	4608      	mov	r0, r1
 8029cc8:	bd70      	pop	{r4, r5, r6, pc}
 8029cca:	4620      	mov	r0, r4
 8029ccc:	f7ff ffdc 	bl	8029c88 <is_leap_year>
 8029cd0:	f201 136d 	addw	r3, r1, #365	; 0x16d
 8029cd4:	1819      	adds	r1, r3, r0
 8029cd6:	fb91 f3f6 	sdiv	r3, r1, r6
 8029cda:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8029cde:	1ac9      	subs	r1, r1, r3
 8029ce0:	e7ee      	b.n	8029cc0 <first_day+0xc>

08029ce2 <match_string>:
 8029ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8029ce6:	4605      	mov	r5, r0
 8029ce8:	4690      	mov	r8, r2
 8029cea:	1f0c      	subs	r4, r1, #4
 8029cec:	2600      	movs	r6, #0
 8029cee:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8029cf2:	b910      	cbnz	r0, 8029cfa <match_string+0x18>
 8029cf4:	f04f 36ff 	mov.w	r6, #4294967295
 8029cf8:	e00c      	b.n	8029d14 <match_string+0x32>
 8029cfa:	f7d6 faa1 	bl	8000240 <strlen>
 8029cfe:	6821      	ldr	r1, [r4, #0]
 8029d00:	4607      	mov	r7, r0
 8029d02:	4602      	mov	r2, r0
 8029d04:	4643      	mov	r3, r8
 8029d06:	6828      	ldr	r0, [r5, #0]
 8029d08:	f001 ff62 	bl	802bbd0 <strncasecmp_l>
 8029d0c:	b928      	cbnz	r0, 8029d1a <match_string+0x38>
 8029d0e:	6828      	ldr	r0, [r5, #0]
 8029d10:	4438      	add	r0, r7
 8029d12:	6028      	str	r0, [r5, #0]
 8029d14:	4630      	mov	r0, r6
 8029d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029d1a:	3601      	adds	r6, #1
 8029d1c:	e7e7      	b.n	8029cee <match_string+0xc>
	...

08029d20 <strptime_l>:
 8029d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029d24:	b087      	sub	sp, #28
 8029d26:	f8df 9334 	ldr.w	r9, [pc, #820]	; 802a05c <strptime_l+0x33c>
 8029d2a:	4fc5      	ldr	r7, [pc, #788]	; (802a040 <strptime_l+0x320>)
 8029d2c:	9001      	str	r0, [sp, #4]
 8029d2e:	460e      	mov	r6, r1
 8029d30:	4614      	mov	r4, r2
 8029d32:	461d      	mov	r5, r3
 8029d34:	f04f 0800 	mov.w	r8, #0
 8029d38:	7832      	ldrb	r2, [r6, #0]
 8029d3a:	bb7a      	cbnz	r2, 8029d9c <strptime_l+0x7c>
 8029d3c:	f008 0307 	and.w	r3, r8, #7
 8029d40:	2b07      	cmp	r3, #7
 8029d42:	f040 8311 	bne.w	802a368 <strptime_l+0x648>
 8029d46:	f018 0f10 	tst.w	r8, #16
 8029d4a:	d112      	bne.n	8029d72 <strptime_l+0x52>
 8029d4c:	4bbd      	ldr	r3, [pc, #756]	; (802a044 <strptime_l+0x324>)
 8029d4e:	6925      	ldr	r5, [r4, #16]
 8029d50:	6960      	ldr	r0, [r4, #20]
 8029d52:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 8029d56:	68e3      	ldr	r3, [r4, #12]
 8029d58:	4419      	add	r1, r3
 8029d5a:	61e1      	str	r1, [r4, #28]
 8029d5c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8029d60:	f7ff ff92 	bl	8029c88 <is_leap_year>
 8029d64:	b108      	cbz	r0, 8029d6a <strptime_l+0x4a>
 8029d66:	2d01      	cmp	r5, #1
 8029d68:	dc01      	bgt.n	8029d6e <strptime_l+0x4e>
 8029d6a:	3901      	subs	r1, #1
 8029d6c:	61e1      	str	r1, [r4, #28]
 8029d6e:	f048 0810 	orr.w	r8, r8, #16
 8029d72:	f008 081c 	and.w	r8, r8, #28
 8029d76:	f1b8 0f14 	cmp.w	r8, #20
 8029d7a:	d10d      	bne.n	8029d98 <strptime_l+0x78>
 8029d7c:	6960      	ldr	r0, [r4, #20]
 8029d7e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8029d82:	f7ff ff97 	bl	8029cb4 <first_day>
 8029d86:	69e3      	ldr	r3, [r4, #28]
 8029d88:	4418      	add	r0, r3
 8029d8a:	2307      	movs	r3, #7
 8029d8c:	fb90 f3f3 	sdiv	r3, r0, r3
 8029d90:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8029d94:	1ac0      	subs	r0, r0, r3
 8029d96:	61a0      	str	r0, [r4, #24]
 8029d98:	9801      	ldr	r0, [sp, #4]
 8029d9a:	e221      	b.n	802a1e0 <strptime_l+0x4c0>
 8029d9c:	f812 3009 	ldrb.w	r3, [r2, r9]
 8029da0:	0719      	lsls	r1, r3, #28
 8029da2:	d50a      	bpl.n	8029dba <strptime_l+0x9a>
 8029da4:	9b01      	ldr	r3, [sp, #4]
 8029da6:	781a      	ldrb	r2, [r3, #0]
 8029da8:	f819 2002 	ldrb.w	r2, [r9, r2]
 8029dac:	0712      	lsls	r2, r2, #28
 8029dae:	d401      	bmi.n	8029db4 <strptime_l+0x94>
 8029db0:	3601      	adds	r6, #1
 8029db2:	e7c1      	b.n	8029d38 <strptime_l+0x18>
 8029db4:	3301      	adds	r3, #1
 8029db6:	9301      	str	r3, [sp, #4]
 8029db8:	e7f4      	b.n	8029da4 <strptime_l+0x84>
 8029dba:	2a25      	cmp	r2, #37	; 0x25
 8029dbc:	f040 82ca 	bne.w	802a354 <strptime_l+0x634>
 8029dc0:	7873      	ldrb	r3, [r6, #1]
 8029dc2:	2b00      	cmp	r3, #0
 8029dc4:	f000 82c6 	beq.w	802a354 <strptime_l+0x634>
 8029dc8:	2b45      	cmp	r3, #69	; 0x45
 8029dca:	f000 80bb 	beq.w	8029f44 <strptime_l+0x224>
 8029dce:	2b4f      	cmp	r3, #79	; 0x4f
 8029dd0:	f000 80b8 	beq.w	8029f44 <strptime_l+0x224>
 8029dd4:	3601      	adds	r6, #1
 8029dd6:	f1a3 0225 	sub.w	r2, r3, #37	; 0x25
 8029dda:	b2d1      	uxtb	r1, r2
 8029ddc:	2954      	cmp	r1, #84	; 0x54
 8029dde:	f200 82ac 	bhi.w	802a33a <strptime_l+0x61a>
 8029de2:	2a54      	cmp	r2, #84	; 0x54
 8029de4:	f200 82a9 	bhi.w	802a33a <strptime_l+0x61a>
 8029de8:	a101      	add	r1, pc, #4	; (adr r1, 8029df0 <strptime_l+0xd0>)
 8029dea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8029dee:	bf00      	nop
 8029df0:	0802a333 	.word	0x0802a333
 8029df4:	0802a33b 	.word	0x0802a33b
 8029df8:	0802a33b 	.word	0x0802a33b
 8029dfc:	0802a33b 	.word	0x0802a33b
 8029e00:	0802a33b 	.word	0x0802a33b
 8029e04:	0802a33b 	.word	0x0802a33b
 8029e08:	0802a33b 	.word	0x0802a33b
 8029e0c:	0802a33b 	.word	0x0802a33b
 8029e10:	0802a33b 	.word	0x0802a33b
 8029e14:	0802a33b 	.word	0x0802a33b
 8029e18:	0802a33b 	.word	0x0802a33b
 8029e1c:	0802a33b 	.word	0x0802a33b
 8029e20:	0802a33b 	.word	0x0802a33b
 8029e24:	0802a33b 	.word	0x0802a33b
 8029e28:	0802a33b 	.word	0x0802a33b
 8029e2c:	0802a33b 	.word	0x0802a33b
 8029e30:	0802a33b 	.word	0x0802a33b
 8029e34:	0802a33b 	.word	0x0802a33b
 8029e38:	0802a33b 	.word	0x0802a33b
 8029e3c:	0802a33b 	.word	0x0802a33b
 8029e40:	0802a33b 	.word	0x0802a33b
 8029e44:	0802a33b 	.word	0x0802a33b
 8029e48:	0802a33b 	.word	0x0802a33b
 8029e4c:	0802a33b 	.word	0x0802a33b
 8029e50:	0802a33b 	.word	0x0802a33b
 8029e54:	0802a33b 	.word	0x0802a33b
 8029e58:	0802a33b 	.word	0x0802a33b
 8029e5c:	0802a33b 	.word	0x0802a33b
 8029e60:	08029f53 	.word	0x08029f53
 8029e64:	08029f71 	.word	0x08029f71
 8029e68:	08029f8f 	.word	0x08029f8f
 8029e6c:	08029fcd 	.word	0x08029fcd
 8029e70:	0802a33b 	.word	0x0802a33b
 8029e74:	08029fff 	.word	0x08029fff
 8029e78:	0802a33b 	.word	0x0802a33b
 8029e7c:	0802a023 	.word	0x0802a023
 8029e80:	0802a061 	.word	0x0802a061
 8029e84:	0802a33b 	.word	0x0802a33b
 8029e88:	0802a33b 	.word	0x0802a33b
 8029e8c:	0802a33b 	.word	0x0802a33b
 8029e90:	0802a0bf 	.word	0x0802a0bf
 8029e94:	0802a33b 	.word	0x0802a33b
 8029e98:	0802a33b 	.word	0x0802a33b
 8029e9c:	0802a33b 	.word	0x0802a33b
 8029ea0:	0802a33b 	.word	0x0802a33b
 8029ea4:	0802a11f 	.word	0x0802a11f
 8029ea8:	0802a187 	.word	0x0802a187
 8029eac:	0802a1a7 	.word	0x0802a1a7
 8029eb0:	0802a1e7 	.word	0x0802a1e7
 8029eb4:	0802a225 	.word	0x0802a225
 8029eb8:	0802a277 	.word	0x0802a277
 8029ebc:	0802a2e9 	.word	0x0802a2e9
 8029ec0:	0802a319 	.word	0x0802a319
 8029ec4:	08029db1 	.word	0x08029db1
 8029ec8:	0802a33b 	.word	0x0802a33b
 8029ecc:	0802a33b 	.word	0x0802a33b
 8029ed0:	0802a33b 	.word	0x0802a33b
 8029ed4:	0802a33b 	.word	0x0802a33b
 8029ed8:	0802a33b 	.word	0x0802a33b
 8029edc:	0802a33b 	.word	0x0802a33b
 8029ee0:	08029f6b 	.word	0x08029f6b
 8029ee4:	08029f89 	.word	0x08029f89
 8029ee8:	08029faf 	.word	0x08029faf
 8029eec:	08029fdf 	.word	0x08029fdf
 8029ef0:	08029fdf 	.word	0x08029fdf
 8029ef4:	0802a33b 	.word	0x0802a33b
 8029ef8:	0802a33b 	.word	0x0802a33b
 8029efc:	08029f89 	.word	0x08029f89
 8029f00:	0802a33b 	.word	0x0802a33b
 8029f04:	0802a07f 	.word	0x0802a07f
 8029f08:	0802a023 	.word	0x0802a023
 8029f0c:	0802a061 	.word	0x0802a061
 8029f10:	0802a0a1 	.word	0x0802a0a1
 8029f14:	0802a0d9 	.word	0x0802a0d9
 8029f18:	0802a33b 	.word	0x0802a33b
 8029f1c:	0802a0e5 	.word	0x0802a0e5
 8029f20:	0802a33b 	.word	0x0802a33b
 8029f24:	0802a107 	.word	0x0802a107
 8029f28:	0802a127 	.word	0x0802a127
 8029f2c:	0802a19f 	.word	0x0802a19f
 8029f30:	0802a1af 	.word	0x0802a1af
 8029f34:	0802a33b 	.word	0x0802a33b
 8029f38:	0802a1cb 	.word	0x0802a1cb
 8029f3c:	0802a2df 	.word	0x0802a2df
 8029f40:	0802a2f3 	.word	0x0802a2f3
 8029f44:	78b3      	ldrb	r3, [r6, #2]
 8029f46:	1cb2      	adds	r2, r6, #2
 8029f48:	2b00      	cmp	r3, #0
 8029f4a:	f000 81f1 	beq.w	802a330 <strptime_l+0x610>
 8029f4e:	4616      	mov	r6, r2
 8029f50:	e741      	b.n	8029dd6 <strptime_l+0xb6>
 8029f52:	493d      	ldr	r1, [pc, #244]	; (802a048 <strptime_l+0x328>)
 8029f54:	462a      	mov	r2, r5
 8029f56:	a801      	add	r0, sp, #4
 8029f58:	f7ff fec3 	bl	8029ce2 <match_string>
 8029f5c:	2800      	cmp	r0, #0
 8029f5e:	f2c0 813e 	blt.w	802a1de <strptime_l+0x4be>
 8029f62:	61a0      	str	r0, [r4, #24]
 8029f64:	f048 0808 	orr.w	r8, r8, #8
 8029f68:	e722      	b.n	8029db0 <strptime_l+0x90>
 8029f6a:	4938      	ldr	r1, [pc, #224]	; (802a04c <strptime_l+0x32c>)
 8029f6c:	462a      	mov	r2, r5
 8029f6e:	e7f2      	b.n	8029f56 <strptime_l+0x236>
 8029f70:	4937      	ldr	r1, [pc, #220]	; (802a050 <strptime_l+0x330>)
 8029f72:	462a      	mov	r2, r5
 8029f74:	a801      	add	r0, sp, #4
 8029f76:	f7ff feb4 	bl	8029ce2 <match_string>
 8029f7a:	2800      	cmp	r0, #0
 8029f7c:	f2c0 812f 	blt.w	802a1de <strptime_l+0x4be>
 8029f80:	6120      	str	r0, [r4, #16]
 8029f82:	f048 0802 	orr.w	r8, r8, #2
 8029f86:	e713      	b.n	8029db0 <strptime_l+0x90>
 8029f88:	462a      	mov	r2, r5
 8029f8a:	4639      	mov	r1, r7
 8029f8c:	e7f2      	b.n	8029f74 <strptime_l+0x254>
 8029f8e:	462b      	mov	r3, r5
 8029f90:	220a      	movs	r2, #10
 8029f92:	9801      	ldr	r0, [sp, #4]
 8029f94:	a903      	add	r1, sp, #12
 8029f96:	f000 faa7 	bl	802a4e8 <strtol_l>
 8029f9a:	9b03      	ldr	r3, [sp, #12]
 8029f9c:	9a01      	ldr	r2, [sp, #4]
 8029f9e:	4293      	cmp	r3, r2
 8029fa0:	f000 811d 	beq.w	802a1de <strptime_l+0x4be>
 8029fa4:	2264      	movs	r2, #100	; 0x64
 8029fa6:	4350      	muls	r0, r2
 8029fa8:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 8029fac:	e1af      	b.n	802a30e <strptime_l+0x5ee>
 8029fae:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8029fb2:	9801      	ldr	r0, [sp, #4]
 8029fb4:	462b      	mov	r3, r5
 8029fb6:	4622      	mov	r2, r4
 8029fb8:	f7ff feb2 	bl	8029d20 <strptime_l>
 8029fbc:	9003      	str	r0, [sp, #12]
 8029fbe:	2800      	cmp	r0, #0
 8029fc0:	f000 810d 	beq.w	802a1de <strptime_l+0x4be>
 8029fc4:	9001      	str	r0, [sp, #4]
 8029fc6:	f048 080f 	orr.w	r8, r8, #15
 8029fca:	e6f1      	b.n	8029db0 <strptime_l+0x90>
 8029fcc:	4921      	ldr	r1, [pc, #132]	; (802a054 <strptime_l+0x334>)
 8029fce:	462b      	mov	r3, r5
 8029fd0:	4622      	mov	r2, r4
 8029fd2:	9801      	ldr	r0, [sp, #4]
 8029fd4:	f7ff fea4 	bl	8029d20 <strptime_l>
 8029fd8:	9003      	str	r0, [sp, #12]
 8029fda:	b9f0      	cbnz	r0, 802a01a <strptime_l+0x2fa>
 8029fdc:	e0ff      	b.n	802a1de <strptime_l+0x4be>
 8029fde:	462b      	mov	r3, r5
 8029fe0:	220a      	movs	r2, #10
 8029fe2:	9801      	ldr	r0, [sp, #4]
 8029fe4:	a903      	add	r1, sp, #12
 8029fe6:	f000 fa7f 	bl	802a4e8 <strtol_l>
 8029fea:	9b03      	ldr	r3, [sp, #12]
 8029fec:	9a01      	ldr	r2, [sp, #4]
 8029fee:	4293      	cmp	r3, r2
 8029ff0:	f000 80f5 	beq.w	802a1de <strptime_l+0x4be>
 8029ff4:	60e0      	str	r0, [r4, #12]
 8029ff6:	9301      	str	r3, [sp, #4]
 8029ff8:	f048 0801 	orr.w	r8, r8, #1
 8029ffc:	e6d8      	b.n	8029db0 <strptime_l+0x90>
 8029ffe:	4916      	ldr	r1, [pc, #88]	; (802a058 <strptime_l+0x338>)
 802a000:	9801      	ldr	r0, [sp, #4]
 802a002:	462b      	mov	r3, r5
 802a004:	4622      	mov	r2, r4
 802a006:	f7ff fe8b 	bl	8029d20 <strptime_l>
 802a00a:	9003      	str	r0, [sp, #12]
 802a00c:	2800      	cmp	r0, #0
 802a00e:	f000 80e6 	beq.w	802a1de <strptime_l+0x4be>
 802a012:	9b01      	ldr	r3, [sp, #4]
 802a014:	4298      	cmp	r0, r3
 802a016:	f000 80e2 	beq.w	802a1de <strptime_l+0x4be>
 802a01a:	9001      	str	r0, [sp, #4]
 802a01c:	f048 0807 	orr.w	r8, r8, #7
 802a020:	e6c6      	b.n	8029db0 <strptime_l+0x90>
 802a022:	462b      	mov	r3, r5
 802a024:	220a      	movs	r2, #10
 802a026:	9801      	ldr	r0, [sp, #4]
 802a028:	a903      	add	r1, sp, #12
 802a02a:	f000 fa5d 	bl	802a4e8 <strtol_l>
 802a02e:	9b03      	ldr	r3, [sp, #12]
 802a030:	9a01      	ldr	r2, [sp, #4]
 802a032:	4293      	cmp	r3, r2
 802a034:	f000 80d3 	beq.w	802a1de <strptime_l+0x4be>
 802a038:	60a0      	str	r0, [r4, #8]
 802a03a:	9301      	str	r3, [sp, #4]
 802a03c:	e6b8      	b.n	8029db0 <strptime_l+0x90>
 802a03e:	bf00      	nop
 802a040:	0802fec0 	.word	0x0802fec0
 802a044:	0802fd74 	.word	0x0802fd74
 802a048:	0802ff3c 	.word	0x0802ff3c
 802a04c:	0802ff20 	.word	0x0802ff20
 802a050:	0802fef0 	.word	0x0802fef0
 802a054:	0802fd50 	.word	0x0802fd50
 802a058:	0802fd59 	.word	0x0802fd59
 802a05c:	0802fff9 	.word	0x0802fff9
 802a060:	462b      	mov	r3, r5
 802a062:	220a      	movs	r2, #10
 802a064:	9801      	ldr	r0, [sp, #4]
 802a066:	a903      	add	r1, sp, #12
 802a068:	f000 fa3e 	bl	802a4e8 <strtol_l>
 802a06c:	9b03      	ldr	r3, [sp, #12]
 802a06e:	9a01      	ldr	r2, [sp, #4]
 802a070:	4293      	cmp	r3, r2
 802a072:	f000 80b4 	beq.w	802a1de <strptime_l+0x4be>
 802a076:	280c      	cmp	r0, #12
 802a078:	bf08      	it	eq
 802a07a:	2000      	moveq	r0, #0
 802a07c:	e7dc      	b.n	802a038 <strptime_l+0x318>
 802a07e:	462b      	mov	r3, r5
 802a080:	220a      	movs	r2, #10
 802a082:	9801      	ldr	r0, [sp, #4]
 802a084:	a903      	add	r1, sp, #12
 802a086:	f000 fa2f 	bl	802a4e8 <strtol_l>
 802a08a:	9b03      	ldr	r3, [sp, #12]
 802a08c:	9a01      	ldr	r2, [sp, #4]
 802a08e:	4293      	cmp	r3, r2
 802a090:	f000 80a5 	beq.w	802a1de <strptime_l+0x4be>
 802a094:	3801      	subs	r0, #1
 802a096:	61e0      	str	r0, [r4, #28]
 802a098:	9301      	str	r3, [sp, #4]
 802a09a:	f048 0810 	orr.w	r8, r8, #16
 802a09e:	e687      	b.n	8029db0 <strptime_l+0x90>
 802a0a0:	462b      	mov	r3, r5
 802a0a2:	220a      	movs	r2, #10
 802a0a4:	9801      	ldr	r0, [sp, #4]
 802a0a6:	a903      	add	r1, sp, #12
 802a0a8:	f000 fa1e 	bl	802a4e8 <strtol_l>
 802a0ac:	9b03      	ldr	r3, [sp, #12]
 802a0ae:	9a01      	ldr	r2, [sp, #4]
 802a0b0:	4293      	cmp	r3, r2
 802a0b2:	f000 8094 	beq.w	802a1de <strptime_l+0x4be>
 802a0b6:	3801      	subs	r0, #1
 802a0b8:	6120      	str	r0, [r4, #16]
 802a0ba:	9301      	str	r3, [sp, #4]
 802a0bc:	e761      	b.n	8029f82 <strptime_l+0x262>
 802a0be:	462b      	mov	r3, r5
 802a0c0:	220a      	movs	r2, #10
 802a0c2:	9801      	ldr	r0, [sp, #4]
 802a0c4:	a903      	add	r1, sp, #12
 802a0c6:	f000 fa0f 	bl	802a4e8 <strtol_l>
 802a0ca:	9b03      	ldr	r3, [sp, #12]
 802a0cc:	9a01      	ldr	r2, [sp, #4]
 802a0ce:	4293      	cmp	r3, r2
 802a0d0:	f000 8085 	beq.w	802a1de <strptime_l+0x4be>
 802a0d4:	6060      	str	r0, [r4, #4]
 802a0d6:	e7b0      	b.n	802a03a <strptime_l+0x31a>
 802a0d8:	9b01      	ldr	r3, [sp, #4]
 802a0da:	781a      	ldrb	r2, [r3, #0]
 802a0dc:	2a0a      	cmp	r2, #10
 802a0de:	f000 8131 	beq.w	802a344 <strptime_l+0x624>
 802a0e2:	e07c      	b.n	802a1de <strptime_l+0x4be>
 802a0e4:	499d      	ldr	r1, [pc, #628]	; (802a35c <strptime_l+0x63c>)
 802a0e6:	462a      	mov	r2, r5
 802a0e8:	a801      	add	r0, sp, #4
 802a0ea:	f7ff fdfa 	bl	8029ce2 <match_string>
 802a0ee:	2800      	cmp	r0, #0
 802a0f0:	db75      	blt.n	802a1de <strptime_l+0x4be>
 802a0f2:	68a3      	ldr	r3, [r4, #8]
 802a0f4:	b92b      	cbnz	r3, 802a102 <strptime_l+0x3e2>
 802a0f6:	2801      	cmp	r0, #1
 802a0f8:	f47f ae5a 	bne.w	8029db0 <strptime_l+0x90>
 802a0fc:	230c      	movs	r3, #12
 802a0fe:	60a3      	str	r3, [r4, #8]
 802a100:	e656      	b.n	8029db0 <strptime_l+0x90>
 802a102:	330c      	adds	r3, #12
 802a104:	e7fb      	b.n	802a0fe <strptime_l+0x3de>
 802a106:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 802a10a:	462b      	mov	r3, r5
 802a10c:	4622      	mov	r2, r4
 802a10e:	9801      	ldr	r0, [sp, #4]
 802a110:	f7ff fe06 	bl	8029d20 <strptime_l>
 802a114:	9003      	str	r0, [sp, #12]
 802a116:	2800      	cmp	r0, #0
 802a118:	d061      	beq.n	802a1de <strptime_l+0x4be>
 802a11a:	9001      	str	r0, [sp, #4]
 802a11c:	e648      	b.n	8029db0 <strptime_l+0x90>
 802a11e:	4990      	ldr	r1, [pc, #576]	; (802a360 <strptime_l+0x640>)
 802a120:	462b      	mov	r3, r5
 802a122:	4622      	mov	r2, r4
 802a124:	e7f3      	b.n	802a10e <strptime_l+0x3ee>
 802a126:	f7fe fe21 	bl	8028d6c <__errno>
 802a12a:	f8d0 b000 	ldr.w	fp, [r0]
 802a12e:	f7fe fe1d 	bl	8028d6c <__errno>
 802a132:	2300      	movs	r3, #0
 802a134:	6003      	str	r3, [r0, #0]
 802a136:	220a      	movs	r2, #10
 802a138:	462b      	mov	r3, r5
 802a13a:	9801      	ldr	r0, [sp, #4]
 802a13c:	a903      	add	r1, sp, #12
 802a13e:	f000 fa73 	bl	802a628 <strtoll_l>
 802a142:	9a03      	ldr	r2, [sp, #12]
 802a144:	9b01      	ldr	r3, [sp, #4]
 802a146:	429a      	cmp	r2, r3
 802a148:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802a14c:	4680      	mov	r8, r0
 802a14e:	468a      	mov	sl, r1
 802a150:	d045      	beq.n	802a1de <strptime_l+0x4be>
 802a152:	f7fe fe0b 	bl	8028d6c <__errno>
 802a156:	6803      	ldr	r3, [r0, #0]
 802a158:	2b00      	cmp	r3, #0
 802a15a:	d140      	bne.n	802a1de <strptime_l+0x4be>
 802a15c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802a160:	4553      	cmp	r3, sl
 802a162:	bf08      	it	eq
 802a164:	4542      	cmpeq	r2, r8
 802a166:	d13a      	bne.n	802a1de <strptime_l+0x4be>
 802a168:	4621      	mov	r1, r4
 802a16a:	a804      	add	r0, sp, #16
 802a16c:	f000 fffa 	bl	802b164 <localtime_r>
 802a170:	4284      	cmp	r4, r0
 802a172:	d134      	bne.n	802a1de <strptime_l+0x4be>
 802a174:	f7fe fdfa 	bl	8028d6c <__errno>
 802a178:	9b03      	ldr	r3, [sp, #12]
 802a17a:	f8c0 b000 	str.w	fp, [r0]
 802a17e:	f04f 081f 	mov.w	r8, #31
 802a182:	9301      	str	r3, [sp, #4]
 802a184:	e614      	b.n	8029db0 <strptime_l+0x90>
 802a186:	462b      	mov	r3, r5
 802a188:	220a      	movs	r2, #10
 802a18a:	9801      	ldr	r0, [sp, #4]
 802a18c:	a903      	add	r1, sp, #12
 802a18e:	f000 f9ab 	bl	802a4e8 <strtol_l>
 802a192:	9b03      	ldr	r3, [sp, #12]
 802a194:	9a01      	ldr	r2, [sp, #4]
 802a196:	4293      	cmp	r3, r2
 802a198:	d021      	beq.n	802a1de <strptime_l+0x4be>
 802a19a:	6020      	str	r0, [r4, #0]
 802a19c:	e74d      	b.n	802a03a <strptime_l+0x31a>
 802a19e:	9b01      	ldr	r3, [sp, #4]
 802a1a0:	781a      	ldrb	r2, [r3, #0]
 802a1a2:	2a09      	cmp	r2, #9
 802a1a4:	e79b      	b.n	802a0de <strptime_l+0x3be>
 802a1a6:	496f      	ldr	r1, [pc, #444]	; (802a364 <strptime_l+0x644>)
 802a1a8:	462b      	mov	r3, r5
 802a1aa:	4622      	mov	r2, r4
 802a1ac:	e7af      	b.n	802a10e <strptime_l+0x3ee>
 802a1ae:	462b      	mov	r3, r5
 802a1b0:	220a      	movs	r2, #10
 802a1b2:	9801      	ldr	r0, [sp, #4]
 802a1b4:	a903      	add	r1, sp, #12
 802a1b6:	f000 f997 	bl	802a4e8 <strtol_l>
 802a1ba:	9b03      	ldr	r3, [sp, #12]
 802a1bc:	9a01      	ldr	r2, [sp, #4]
 802a1be:	4293      	cmp	r3, r2
 802a1c0:	d00d      	beq.n	802a1de <strptime_l+0x4be>
 802a1c2:	3801      	subs	r0, #1
 802a1c4:	61a0      	str	r0, [r4, #24]
 802a1c6:	9301      	str	r3, [sp, #4]
 802a1c8:	e6cc      	b.n	8029f64 <strptime_l+0x244>
 802a1ca:	462b      	mov	r3, r5
 802a1cc:	220a      	movs	r2, #10
 802a1ce:	9801      	ldr	r0, [sp, #4]
 802a1d0:	a903      	add	r1, sp, #12
 802a1d2:	f000 f989 	bl	802a4e8 <strtol_l>
 802a1d6:	9b03      	ldr	r3, [sp, #12]
 802a1d8:	9a01      	ldr	r2, [sp, #4]
 802a1da:	4293      	cmp	r3, r2
 802a1dc:	d1f2      	bne.n	802a1c4 <strptime_l+0x4a4>
 802a1de:	2000      	movs	r0, #0
 802a1e0:	b007      	add	sp, #28
 802a1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a1e6:	462b      	mov	r3, r5
 802a1e8:	9801      	ldr	r0, [sp, #4]
 802a1ea:	220a      	movs	r2, #10
 802a1ec:	a903      	add	r1, sp, #12
 802a1ee:	f000 f97b 	bl	802a4e8 <strtol_l>
 802a1f2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802a1f6:	9b01      	ldr	r3, [sp, #4]
 802a1f8:	459b      	cmp	fp, r3
 802a1fa:	4682      	mov	sl, r0
 802a1fc:	d0ef      	beq.n	802a1de <strptime_l+0x4be>
 802a1fe:	6960      	ldr	r0, [r4, #20]
 802a200:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802a204:	f7ff fd56 	bl	8029cb4 <first_day>
 802a208:	69a3      	ldr	r3, [r4, #24]
 802a20a:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 802a20e:	4453      	add	r3, sl
 802a210:	1a1b      	subs	r3, r3, r0
 802a212:	2b00      	cmp	r3, #0
 802a214:	61e3      	str	r3, [r4, #28]
 802a216:	da02      	bge.n	802a21e <strptime_l+0x4fe>
 802a218:	61a0      	str	r0, [r4, #24]
 802a21a:	2300      	movs	r3, #0
 802a21c:	61e3      	str	r3, [r4, #28]
 802a21e:	f8cd b004 	str.w	fp, [sp, #4]
 802a222:	e73a      	b.n	802a09a <strptime_l+0x37a>
 802a224:	462b      	mov	r3, r5
 802a226:	9801      	ldr	r0, [sp, #4]
 802a228:	220a      	movs	r2, #10
 802a22a:	a903      	add	r1, sp, #12
 802a22c:	f000 f95c 	bl	802a4e8 <strtol_l>
 802a230:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802a234:	9b01      	ldr	r3, [sp, #4]
 802a236:	459b      	cmp	fp, r3
 802a238:	4682      	mov	sl, r0
 802a23a:	d0d0      	beq.n	802a1de <strptime_l+0x4be>
 802a23c:	6960      	ldr	r0, [r4, #20]
 802a23e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802a242:	f7ff fd37 	bl	8029cb4 <first_day>
 802a246:	2307      	movs	r3, #7
 802a248:	3006      	adds	r0, #6
 802a24a:	fb90 f3f3 	sdiv	r3, r0, r3
 802a24e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802a252:	1ac2      	subs	r2, r0, r3
 802a254:	2a03      	cmp	r2, #3
 802a256:	f10a 30ff 	add.w	r0, sl, #4294967295
 802a25a:	bfcc      	ite	gt
 802a25c:	2300      	movgt	r3, #0
 802a25e:	2307      	movle	r3, #7
 802a260:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 802a264:	4403      	add	r3, r0
 802a266:	69a0      	ldr	r0, [r4, #24]
 802a268:	4403      	add	r3, r0
 802a26a:	1a9b      	subs	r3, r3, r2
 802a26c:	2b00      	cmp	r3, #0
 802a26e:	61e3      	str	r3, [r4, #28]
 802a270:	dad5      	bge.n	802a21e <strptime_l+0x4fe>
 802a272:	61a2      	str	r2, [r4, #24]
 802a274:	e7d1      	b.n	802a21a <strptime_l+0x4fa>
 802a276:	462b      	mov	r3, r5
 802a278:	9801      	ldr	r0, [sp, #4]
 802a27a:	220a      	movs	r2, #10
 802a27c:	a903      	add	r1, sp, #12
 802a27e:	f000 f933 	bl	802a4e8 <strtol_l>
 802a282:	f8dd a00c 	ldr.w	sl, [sp, #12]
 802a286:	9b01      	ldr	r3, [sp, #4]
 802a288:	459a      	cmp	sl, r3
 802a28a:	4683      	mov	fp, r0
 802a28c:	d0a7      	beq.n	802a1de <strptime_l+0x4be>
 802a28e:	6960      	ldr	r0, [r4, #20]
 802a290:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802a294:	f7ff fd0e 	bl	8029cb4 <first_day>
 802a298:	69a1      	ldr	r1, [r4, #24]
 802a29a:	3006      	adds	r0, #6
 802a29c:	f04f 0c07 	mov.w	ip, #7
 802a2a0:	fb90 f2fc 	sdiv	r2, r0, ip
 802a2a4:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802a2a8:	1a83      	subs	r3, r0, r2
 802a2aa:	3106      	adds	r1, #6
 802a2ac:	fb91 f2fc 	sdiv	r2, r1, ip
 802a2b0:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802a2b4:	1a89      	subs	r1, r1, r2
 802a2b6:	ebcb 02cb 	rsb	r2, fp, fp, lsl #3
 802a2ba:	440a      	add	r2, r1
 802a2bc:	1ad2      	subs	r2, r2, r3
 802a2be:	2a00      	cmp	r2, #0
 802a2c0:	61e2      	str	r2, [r4, #28]
 802a2c2:	da09      	bge.n	802a2d8 <strptime_l+0x5b8>
 802a2c4:	3301      	adds	r3, #1
 802a2c6:	fb93 fcfc 	sdiv	ip, r3, ip
 802a2ca:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 802a2ce:	eba3 030c 	sub.w	r3, r3, ip
 802a2d2:	61a3      	str	r3, [r4, #24]
 802a2d4:	2300      	movs	r3, #0
 802a2d6:	61e3      	str	r3, [r4, #28]
 802a2d8:	f8cd a004 	str.w	sl, [sp, #4]
 802a2dc:	e6dd      	b.n	802a09a <strptime_l+0x37a>
 802a2de:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 802a2e2:	462b      	mov	r3, r5
 802a2e4:	4622      	mov	r2, r4
 802a2e6:	e674      	b.n	8029fd2 <strptime_l+0x2b2>
 802a2e8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 802a2ec:	462b      	mov	r3, r5
 802a2ee:	4622      	mov	r2, r4
 802a2f0:	e70d      	b.n	802a10e <strptime_l+0x3ee>
 802a2f2:	462b      	mov	r3, r5
 802a2f4:	220a      	movs	r2, #10
 802a2f6:	9801      	ldr	r0, [sp, #4]
 802a2f8:	a903      	add	r1, sp, #12
 802a2fa:	f000 f8f5 	bl	802a4e8 <strtol_l>
 802a2fe:	9b03      	ldr	r3, [sp, #12]
 802a300:	9a01      	ldr	r2, [sp, #4]
 802a302:	4293      	cmp	r3, r2
 802a304:	f43f af6b 	beq.w	802a1de <strptime_l+0x4be>
 802a308:	2845      	cmp	r0, #69	; 0x45
 802a30a:	dc00      	bgt.n	802a30e <strptime_l+0x5ee>
 802a30c:	3064      	adds	r0, #100	; 0x64
 802a30e:	6160      	str	r0, [r4, #20]
 802a310:	9301      	str	r3, [sp, #4]
 802a312:	f048 0804 	orr.w	r8, r8, #4
 802a316:	e54b      	b.n	8029db0 <strptime_l+0x90>
 802a318:	462b      	mov	r3, r5
 802a31a:	220a      	movs	r2, #10
 802a31c:	9801      	ldr	r0, [sp, #4]
 802a31e:	a903      	add	r1, sp, #12
 802a320:	f000 f8e2 	bl	802a4e8 <strtol_l>
 802a324:	9b03      	ldr	r3, [sp, #12]
 802a326:	9a01      	ldr	r2, [sp, #4]
 802a328:	4293      	cmp	r3, r2
 802a32a:	f47f ae3d 	bne.w	8029fa8 <strptime_l+0x288>
 802a32e:	e756      	b.n	802a1de <strptime_l+0x4be>
 802a330:	3601      	adds	r6, #1
 802a332:	9b01      	ldr	r3, [sp, #4]
 802a334:	781a      	ldrb	r2, [r3, #0]
 802a336:	2a25      	cmp	r2, #37	; 0x25
 802a338:	e6d1      	b.n	802a0de <strptime_l+0x3be>
 802a33a:	9a01      	ldr	r2, [sp, #4]
 802a33c:	7811      	ldrb	r1, [r2, #0]
 802a33e:	2925      	cmp	r1, #37	; 0x25
 802a340:	d102      	bne.n	802a348 <strptime_l+0x628>
 802a342:	9b01      	ldr	r3, [sp, #4]
 802a344:	3301      	adds	r3, #1
 802a346:	e678      	b.n	802a03a <strptime_l+0x31a>
 802a348:	1c51      	adds	r1, r2, #1
 802a34a:	9101      	str	r1, [sp, #4]
 802a34c:	7852      	ldrb	r2, [r2, #1]
 802a34e:	429a      	cmp	r2, r3
 802a350:	d0f7      	beq.n	802a342 <strptime_l+0x622>
 802a352:	e744      	b.n	802a1de <strptime_l+0x4be>
 802a354:	9b01      	ldr	r3, [sp, #4]
 802a356:	7819      	ldrb	r1, [r3, #0]
 802a358:	4291      	cmp	r1, r2
 802a35a:	e6c0      	b.n	802a0de <strptime_l+0x3be>
 802a35c:	0802ff64 	.word	0x0802ff64
 802a360:	0802fd62 	.word	0x0802fd62
 802a364:	0802fd68 	.word	0x0802fd68
 802a368:	f008 0314 	and.w	r3, r8, #20
 802a36c:	2b14      	cmp	r3, #20
 802a36e:	f47f ad00 	bne.w	8029d72 <strptime_l+0x52>
 802a372:	f018 0302 	ands.w	r3, r8, #2
 802a376:	d103      	bne.n	802a380 <strptime_l+0x660>
 802a378:	69e1      	ldr	r1, [r4, #28]
 802a37a:	291e      	cmp	r1, #30
 802a37c:	dc17      	bgt.n	802a3ae <strptime_l+0x68e>
 802a37e:	6123      	str	r3, [r4, #16]
 802a380:	f018 0f01 	tst.w	r8, #1
 802a384:	f47f acf5 	bne.w	8029d72 <strptime_l+0x52>
 802a388:	6925      	ldr	r5, [r4, #16]
 802a38a:	4b11      	ldr	r3, [pc, #68]	; (802a3d0 <strptime_l+0x6b0>)
 802a38c:	69e1      	ldr	r1, [r4, #28]
 802a38e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802a392:	6960      	ldr	r0, [r4, #20]
 802a394:	1ac9      	subs	r1, r1, r3
 802a396:	60e1      	str	r1, [r4, #12]
 802a398:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802a39c:	f7ff fc74 	bl	8029c88 <is_leap_year>
 802a3a0:	b110      	cbz	r0, 802a3a8 <strptime_l+0x688>
 802a3a2:	2d01      	cmp	r5, #1
 802a3a4:	f73f ace5 	bgt.w	8029d72 <strptime_l+0x52>
 802a3a8:	3101      	adds	r1, #1
 802a3aa:	60e1      	str	r1, [r4, #12]
 802a3ac:	e4e1      	b.n	8029d72 <strptime_l+0x52>
 802a3ae:	6960      	ldr	r0, [r4, #20]
 802a3b0:	4d07      	ldr	r5, [pc, #28]	; (802a3d0 <strptime_l+0x6b0>)
 802a3b2:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802a3b6:	f7ff fc67 	bl	8029c88 <is_leap_year>
 802a3ba:	2302      	movs	r3, #2
 802a3bc:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 802a3c0:	4402      	add	r2, r0
 802a3c2:	4291      	cmp	r1, r2
 802a3c4:	db02      	blt.n	802a3cc <strptime_l+0x6ac>
 802a3c6:	3301      	adds	r3, #1
 802a3c8:	2b0c      	cmp	r3, #12
 802a3ca:	d1f7      	bne.n	802a3bc <strptime_l+0x69c>
 802a3cc:	3b01      	subs	r3, #1
 802a3ce:	e7d6      	b.n	802a37e <strptime_l+0x65e>
 802a3d0:	0802fd74 	.word	0x0802fd74

0802a3d4 <strptime>:
 802a3d4:	4b01      	ldr	r3, [pc, #4]	; (802a3dc <strptime+0x8>)
 802a3d6:	f7ff bca3 	b.w	8029d20 <strptime_l>
 802a3da:	bf00      	nop
 802a3dc:	20000178 	.word	0x20000178

0802a3e0 <_strtol_l.constprop.0>:
 802a3e0:	2b01      	cmp	r3, #1
 802a3e2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a3e6:	d001      	beq.n	802a3ec <_strtol_l.constprop.0+0xc>
 802a3e8:	2b24      	cmp	r3, #36	; 0x24
 802a3ea:	d906      	bls.n	802a3fa <_strtol_l.constprop.0+0x1a>
 802a3ec:	f7fe fcbe 	bl	8028d6c <__errno>
 802a3f0:	2316      	movs	r3, #22
 802a3f2:	6003      	str	r3, [r0, #0]
 802a3f4:	2000      	movs	r0, #0
 802a3f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a3fa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802a4e0 <_strtol_l.constprop.0+0x100>
 802a3fe:	460d      	mov	r5, r1
 802a400:	462e      	mov	r6, r5
 802a402:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a406:	f814 700c 	ldrb.w	r7, [r4, ip]
 802a40a:	f017 0708 	ands.w	r7, r7, #8
 802a40e:	d1f7      	bne.n	802a400 <_strtol_l.constprop.0+0x20>
 802a410:	2c2d      	cmp	r4, #45	; 0x2d
 802a412:	d132      	bne.n	802a47a <_strtol_l.constprop.0+0x9a>
 802a414:	782c      	ldrb	r4, [r5, #0]
 802a416:	2701      	movs	r7, #1
 802a418:	1cb5      	adds	r5, r6, #2
 802a41a:	2b00      	cmp	r3, #0
 802a41c:	d05b      	beq.n	802a4d6 <_strtol_l.constprop.0+0xf6>
 802a41e:	2b10      	cmp	r3, #16
 802a420:	d109      	bne.n	802a436 <_strtol_l.constprop.0+0x56>
 802a422:	2c30      	cmp	r4, #48	; 0x30
 802a424:	d107      	bne.n	802a436 <_strtol_l.constprop.0+0x56>
 802a426:	782c      	ldrb	r4, [r5, #0]
 802a428:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802a42c:	2c58      	cmp	r4, #88	; 0x58
 802a42e:	d14d      	bne.n	802a4cc <_strtol_l.constprop.0+0xec>
 802a430:	786c      	ldrb	r4, [r5, #1]
 802a432:	2310      	movs	r3, #16
 802a434:	3502      	adds	r5, #2
 802a436:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802a43a:	f108 38ff 	add.w	r8, r8, #4294967295
 802a43e:	f04f 0c00 	mov.w	ip, #0
 802a442:	fbb8 f9f3 	udiv	r9, r8, r3
 802a446:	4666      	mov	r6, ip
 802a448:	fb03 8a19 	mls	sl, r3, r9, r8
 802a44c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802a450:	f1be 0f09 	cmp.w	lr, #9
 802a454:	d816      	bhi.n	802a484 <_strtol_l.constprop.0+0xa4>
 802a456:	4674      	mov	r4, lr
 802a458:	42a3      	cmp	r3, r4
 802a45a:	dd24      	ble.n	802a4a6 <_strtol_l.constprop.0+0xc6>
 802a45c:	f1bc 0f00 	cmp.w	ip, #0
 802a460:	db1e      	blt.n	802a4a0 <_strtol_l.constprop.0+0xc0>
 802a462:	45b1      	cmp	r9, r6
 802a464:	d31c      	bcc.n	802a4a0 <_strtol_l.constprop.0+0xc0>
 802a466:	d101      	bne.n	802a46c <_strtol_l.constprop.0+0x8c>
 802a468:	45a2      	cmp	sl, r4
 802a46a:	db19      	blt.n	802a4a0 <_strtol_l.constprop.0+0xc0>
 802a46c:	fb06 4603 	mla	r6, r6, r3, r4
 802a470:	f04f 0c01 	mov.w	ip, #1
 802a474:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a478:	e7e8      	b.n	802a44c <_strtol_l.constprop.0+0x6c>
 802a47a:	2c2b      	cmp	r4, #43	; 0x2b
 802a47c:	bf04      	itt	eq
 802a47e:	782c      	ldrbeq	r4, [r5, #0]
 802a480:	1cb5      	addeq	r5, r6, #2
 802a482:	e7ca      	b.n	802a41a <_strtol_l.constprop.0+0x3a>
 802a484:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802a488:	f1be 0f19 	cmp.w	lr, #25
 802a48c:	d801      	bhi.n	802a492 <_strtol_l.constprop.0+0xb2>
 802a48e:	3c37      	subs	r4, #55	; 0x37
 802a490:	e7e2      	b.n	802a458 <_strtol_l.constprop.0+0x78>
 802a492:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802a496:	f1be 0f19 	cmp.w	lr, #25
 802a49a:	d804      	bhi.n	802a4a6 <_strtol_l.constprop.0+0xc6>
 802a49c:	3c57      	subs	r4, #87	; 0x57
 802a49e:	e7db      	b.n	802a458 <_strtol_l.constprop.0+0x78>
 802a4a0:	f04f 3cff 	mov.w	ip, #4294967295
 802a4a4:	e7e6      	b.n	802a474 <_strtol_l.constprop.0+0x94>
 802a4a6:	f1bc 0f00 	cmp.w	ip, #0
 802a4aa:	da05      	bge.n	802a4b8 <_strtol_l.constprop.0+0xd8>
 802a4ac:	2322      	movs	r3, #34	; 0x22
 802a4ae:	6003      	str	r3, [r0, #0]
 802a4b0:	4646      	mov	r6, r8
 802a4b2:	b942      	cbnz	r2, 802a4c6 <_strtol_l.constprop.0+0xe6>
 802a4b4:	4630      	mov	r0, r6
 802a4b6:	e79e      	b.n	802a3f6 <_strtol_l.constprop.0+0x16>
 802a4b8:	b107      	cbz	r7, 802a4bc <_strtol_l.constprop.0+0xdc>
 802a4ba:	4276      	negs	r6, r6
 802a4bc:	2a00      	cmp	r2, #0
 802a4be:	d0f9      	beq.n	802a4b4 <_strtol_l.constprop.0+0xd4>
 802a4c0:	f1bc 0f00 	cmp.w	ip, #0
 802a4c4:	d000      	beq.n	802a4c8 <_strtol_l.constprop.0+0xe8>
 802a4c6:	1e69      	subs	r1, r5, #1
 802a4c8:	6011      	str	r1, [r2, #0]
 802a4ca:	e7f3      	b.n	802a4b4 <_strtol_l.constprop.0+0xd4>
 802a4cc:	2430      	movs	r4, #48	; 0x30
 802a4ce:	2b00      	cmp	r3, #0
 802a4d0:	d1b1      	bne.n	802a436 <_strtol_l.constprop.0+0x56>
 802a4d2:	2308      	movs	r3, #8
 802a4d4:	e7af      	b.n	802a436 <_strtol_l.constprop.0+0x56>
 802a4d6:	2c30      	cmp	r4, #48	; 0x30
 802a4d8:	d0a5      	beq.n	802a426 <_strtol_l.constprop.0+0x46>
 802a4da:	230a      	movs	r3, #10
 802a4dc:	e7ab      	b.n	802a436 <_strtol_l.constprop.0+0x56>
 802a4de:	bf00      	nop
 802a4e0:	0802fff9 	.word	0x0802fff9

0802a4e4 <_strtol_r>:
 802a4e4:	f7ff bf7c 	b.w	802a3e0 <_strtol_l.constprop.0>

0802a4e8 <strtol_l>:
 802a4e8:	4613      	mov	r3, r2
 802a4ea:	460a      	mov	r2, r1
 802a4ec:	4601      	mov	r1, r0
 802a4ee:	4802      	ldr	r0, [pc, #8]	; (802a4f8 <strtol_l+0x10>)
 802a4f0:	6800      	ldr	r0, [r0, #0]
 802a4f2:	f7ff bf75 	b.w	802a3e0 <_strtol_l.constprop.0>
 802a4f6:	bf00      	nop
 802a4f8:	200000b0 	.word	0x200000b0

0802a4fc <_strtoll_l.constprop.0>:
 802a4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a500:	b085      	sub	sp, #20
 802a502:	4688      	mov	r8, r1
 802a504:	9201      	str	r2, [sp, #4]
 802a506:	4a47      	ldr	r2, [pc, #284]	; (802a624 <_strtoll_l.constprop.0+0x128>)
 802a508:	9003      	str	r0, [sp, #12]
 802a50a:	461e      	mov	r6, r3
 802a50c:	460d      	mov	r5, r1
 802a50e:	462b      	mov	r3, r5
 802a510:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a514:	5ca7      	ldrb	r7, [r4, r2]
 802a516:	f017 0708 	ands.w	r7, r7, #8
 802a51a:	d1f8      	bne.n	802a50e <_strtoll_l.constprop.0+0x12>
 802a51c:	2c2d      	cmp	r4, #45	; 0x2d
 802a51e:	d147      	bne.n	802a5b0 <_strtoll_l.constprop.0+0xb4>
 802a520:	782c      	ldrb	r4, [r5, #0]
 802a522:	2701      	movs	r7, #1
 802a524:	1c9d      	adds	r5, r3, #2
 802a526:	2e00      	cmp	r6, #0
 802a528:	d077      	beq.n	802a61a <_strtoll_l.constprop.0+0x11e>
 802a52a:	2e10      	cmp	r6, #16
 802a52c:	d109      	bne.n	802a542 <_strtoll_l.constprop.0+0x46>
 802a52e:	2c30      	cmp	r4, #48	; 0x30
 802a530:	d107      	bne.n	802a542 <_strtoll_l.constprop.0+0x46>
 802a532:	782b      	ldrb	r3, [r5, #0]
 802a534:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802a538:	2b58      	cmp	r3, #88	; 0x58
 802a53a:	d169      	bne.n	802a610 <_strtoll_l.constprop.0+0x114>
 802a53c:	786c      	ldrb	r4, [r5, #1]
 802a53e:	2610      	movs	r6, #16
 802a540:	3502      	adds	r5, #2
 802a542:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 802a546:	f107 3bff 	add.w	fp, r7, #4294967295
 802a54a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802a54e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 802a552:	4632      	mov	r2, r6
 802a554:	464b      	mov	r3, r9
 802a556:	4658      	mov	r0, fp
 802a558:	4651      	mov	r1, sl
 802a55a:	f7d5 ff23 	bl	80003a4 <__aeabi_uldivmod>
 802a55e:	2300      	movs	r3, #0
 802a560:	9202      	str	r2, [sp, #8]
 802a562:	468c      	mov	ip, r1
 802a564:	4602      	mov	r2, r0
 802a566:	4619      	mov	r1, r3
 802a568:	4618      	mov	r0, r3
 802a56a:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802a56e:	f1be 0f09 	cmp.w	lr, #9
 802a572:	d822      	bhi.n	802a5ba <_strtoll_l.constprop.0+0xbe>
 802a574:	4674      	mov	r4, lr
 802a576:	42a6      	cmp	r6, r4
 802a578:	dd30      	ble.n	802a5dc <_strtoll_l.constprop.0+0xe0>
 802a57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802a57e:	d014      	beq.n	802a5aa <_strtoll_l.constprop.0+0xae>
 802a580:	4282      	cmp	r2, r0
 802a582:	eb7c 0301 	sbcs.w	r3, ip, r1
 802a586:	d326      	bcc.n	802a5d6 <_strtoll_l.constprop.0+0xda>
 802a588:	458c      	cmp	ip, r1
 802a58a:	bf08      	it	eq
 802a58c:	4282      	cmpeq	r2, r0
 802a58e:	d102      	bne.n	802a596 <_strtoll_l.constprop.0+0x9a>
 802a590:	9b02      	ldr	r3, [sp, #8]
 802a592:	42a3      	cmp	r3, r4
 802a594:	db1f      	blt.n	802a5d6 <_strtoll_l.constprop.0+0xda>
 802a596:	4371      	muls	r1, r6
 802a598:	fb00 1109 	mla	r1, r0, r9, r1
 802a59c:	fba6 0300 	umull	r0, r3, r6, r0
 802a5a0:	4419      	add	r1, r3
 802a5a2:	1820      	adds	r0, r4, r0
 802a5a4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802a5a8:	2301      	movs	r3, #1
 802a5aa:	f815 4b01 	ldrb.w	r4, [r5], #1
 802a5ae:	e7dc      	b.n	802a56a <_strtoll_l.constprop.0+0x6e>
 802a5b0:	2c2b      	cmp	r4, #43	; 0x2b
 802a5b2:	bf04      	itt	eq
 802a5b4:	782c      	ldrbeq	r4, [r5, #0]
 802a5b6:	1c9d      	addeq	r5, r3, #2
 802a5b8:	e7b5      	b.n	802a526 <_strtoll_l.constprop.0+0x2a>
 802a5ba:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802a5be:	f1be 0f19 	cmp.w	lr, #25
 802a5c2:	d801      	bhi.n	802a5c8 <_strtoll_l.constprop.0+0xcc>
 802a5c4:	3c37      	subs	r4, #55	; 0x37
 802a5c6:	e7d6      	b.n	802a576 <_strtoll_l.constprop.0+0x7a>
 802a5c8:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802a5cc:	f1be 0f19 	cmp.w	lr, #25
 802a5d0:	d804      	bhi.n	802a5dc <_strtoll_l.constprop.0+0xe0>
 802a5d2:	3c57      	subs	r4, #87	; 0x57
 802a5d4:	e7cf      	b.n	802a576 <_strtoll_l.constprop.0+0x7a>
 802a5d6:	f04f 33ff 	mov.w	r3, #4294967295
 802a5da:	e7e6      	b.n	802a5aa <_strtoll_l.constprop.0+0xae>
 802a5dc:	1c5a      	adds	r2, r3, #1
 802a5de:	d109      	bne.n	802a5f4 <_strtoll_l.constprop.0+0xf8>
 802a5e0:	9a03      	ldr	r2, [sp, #12]
 802a5e2:	2322      	movs	r3, #34	; 0x22
 802a5e4:	6013      	str	r3, [r2, #0]
 802a5e6:	9b01      	ldr	r3, [sp, #4]
 802a5e8:	4658      	mov	r0, fp
 802a5ea:	4651      	mov	r1, sl
 802a5ec:	b953      	cbnz	r3, 802a604 <_strtoll_l.constprop.0+0x108>
 802a5ee:	b005      	add	sp, #20
 802a5f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a5f4:	b117      	cbz	r7, 802a5fc <_strtoll_l.constprop.0+0x100>
 802a5f6:	4240      	negs	r0, r0
 802a5f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802a5fc:	9a01      	ldr	r2, [sp, #4]
 802a5fe:	2a00      	cmp	r2, #0
 802a600:	d0f5      	beq.n	802a5ee <_strtoll_l.constprop.0+0xf2>
 802a602:	b10b      	cbz	r3, 802a608 <_strtoll_l.constprop.0+0x10c>
 802a604:	f105 38ff 	add.w	r8, r5, #4294967295
 802a608:	9b01      	ldr	r3, [sp, #4]
 802a60a:	f8c3 8000 	str.w	r8, [r3]
 802a60e:	e7ee      	b.n	802a5ee <_strtoll_l.constprop.0+0xf2>
 802a610:	2430      	movs	r4, #48	; 0x30
 802a612:	2e00      	cmp	r6, #0
 802a614:	d195      	bne.n	802a542 <_strtoll_l.constprop.0+0x46>
 802a616:	2608      	movs	r6, #8
 802a618:	e793      	b.n	802a542 <_strtoll_l.constprop.0+0x46>
 802a61a:	2c30      	cmp	r4, #48	; 0x30
 802a61c:	d089      	beq.n	802a532 <_strtoll_l.constprop.0+0x36>
 802a61e:	260a      	movs	r6, #10
 802a620:	e78f      	b.n	802a542 <_strtoll_l.constprop.0+0x46>
 802a622:	bf00      	nop
 802a624:	0802fff9 	.word	0x0802fff9

0802a628 <strtoll_l>:
 802a628:	4613      	mov	r3, r2
 802a62a:	460a      	mov	r2, r1
 802a62c:	4601      	mov	r1, r0
 802a62e:	4802      	ldr	r0, [pc, #8]	; (802a638 <strtoll_l+0x10>)
 802a630:	6800      	ldr	r0, [r0, #0]
 802a632:	f7ff bf63 	b.w	802a4fc <_strtoll_l.constprop.0>
 802a636:	bf00      	nop
 802a638:	200000b0 	.word	0x200000b0

0802a63c <__tzcalc_limits>:
 802a63c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a640:	4605      	mov	r5, r0
 802a642:	f000 fd8b 	bl	802b15c <__gettzinfo>
 802a646:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802a64a:	429d      	cmp	r5, r3
 802a64c:	f340 8099 	ble.w	802a782 <__tzcalc_limits+0x146>
 802a650:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 802a654:	18ac      	adds	r4, r5, r2
 802a656:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 802a65a:	f240 126d 	movw	r2, #365	; 0x16d
 802a65e:	10a4      	asrs	r4, r4, #2
 802a660:	fb02 4403 	mla	r4, r2, r3, r4
 802a664:	f06f 0263 	mvn.w	r2, #99	; 0x63
 802a668:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 802a66c:	fb93 f3f2 	sdiv	r3, r3, r2
 802a670:	441c      	add	r4, r3
 802a672:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802a676:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 802a67a:	fb95 fcf3 	sdiv	ip, r5, r3
 802a67e:	fb03 5c1c 	mls	ip, r3, ip, r5
 802a682:	186a      	adds	r2, r5, r1
 802a684:	fabc f68c 	clz	r6, ip
 802a688:	fbb2 f2f3 	udiv	r2, r2, r3
 802a68c:	f005 0303 	and.w	r3, r5, #3
 802a690:	4414      	add	r4, r2
 802a692:	2264      	movs	r2, #100	; 0x64
 802a694:	6045      	str	r5, [r0, #4]
 802a696:	fb95 f7f2 	sdiv	r7, r5, r2
 802a69a:	0976      	lsrs	r6, r6, #5
 802a69c:	fb02 5717 	mls	r7, r2, r7, r5
 802a6a0:	4601      	mov	r1, r0
 802a6a2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802a6a6:	9300      	str	r3, [sp, #0]
 802a6a8:	f04f 0a07 	mov.w	sl, #7
 802a6ac:	7a0d      	ldrb	r5, [r1, #8]
 802a6ae:	694b      	ldr	r3, [r1, #20]
 802a6b0:	2d4a      	cmp	r5, #74	; 0x4a
 802a6b2:	d12d      	bne.n	802a710 <__tzcalc_limits+0xd4>
 802a6b4:	9a00      	ldr	r2, [sp, #0]
 802a6b6:	eb04 0e03 	add.w	lr, r4, r3
 802a6ba:	b902      	cbnz	r2, 802a6be <__tzcalc_limits+0x82>
 802a6bc:	b917      	cbnz	r7, 802a6c4 <__tzcalc_limits+0x88>
 802a6be:	f1bc 0f00 	cmp.w	ip, #0
 802a6c2:	d123      	bne.n	802a70c <__tzcalc_limits+0xd0>
 802a6c4:	2b3b      	cmp	r3, #59	; 0x3b
 802a6c6:	bfd4      	ite	le
 802a6c8:	2300      	movle	r3, #0
 802a6ca:	2301      	movgt	r3, #1
 802a6cc:	4473      	add	r3, lr
 802a6ce:	3b01      	subs	r3, #1
 802a6d0:	698d      	ldr	r5, [r1, #24]
 802a6d2:	4a2d      	ldr	r2, [pc, #180]	; (802a788 <__tzcalc_limits+0x14c>)
 802a6d4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 802a6d8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 802a6dc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 802a6de:	18ed      	adds	r5, r5, r3
 802a6e0:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 802a6e4:	e9c1 5308 	strd	r5, r3, [r1, #32]
 802a6e8:	3128      	adds	r1, #40	; 0x28
 802a6ea:	458b      	cmp	fp, r1
 802a6ec:	d1de      	bne.n	802a6ac <__tzcalc_limits+0x70>
 802a6ee:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 802a6f2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 802a6f6:	428c      	cmp	r4, r1
 802a6f8:	eb72 0303 	sbcs.w	r3, r2, r3
 802a6fc:	bfb4      	ite	lt
 802a6fe:	2301      	movlt	r3, #1
 802a700:	2300      	movge	r3, #0
 802a702:	6003      	str	r3, [r0, #0]
 802a704:	2001      	movs	r0, #1
 802a706:	b003      	add	sp, #12
 802a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a70c:	2300      	movs	r3, #0
 802a70e:	e7dd      	b.n	802a6cc <__tzcalc_limits+0x90>
 802a710:	2d44      	cmp	r5, #68	; 0x44
 802a712:	d101      	bne.n	802a718 <__tzcalc_limits+0xdc>
 802a714:	4423      	add	r3, r4
 802a716:	e7db      	b.n	802a6d0 <__tzcalc_limits+0x94>
 802a718:	9a00      	ldr	r2, [sp, #0]
 802a71a:	bb62      	cbnz	r2, 802a776 <__tzcalc_limits+0x13a>
 802a71c:	2f00      	cmp	r7, #0
 802a71e:	bf0c      	ite	eq
 802a720:	4635      	moveq	r5, r6
 802a722:	2501      	movne	r5, #1
 802a724:	68ca      	ldr	r2, [r1, #12]
 802a726:	9201      	str	r2, [sp, #4]
 802a728:	4a18      	ldr	r2, [pc, #96]	; (802a78c <__tzcalc_limits+0x150>)
 802a72a:	f04f 0930 	mov.w	r9, #48	; 0x30
 802a72e:	fb09 2505 	mla	r5, r9, r5, r2
 802a732:	46a6      	mov	lr, r4
 802a734:	f04f 0800 	mov.w	r8, #0
 802a738:	3d04      	subs	r5, #4
 802a73a:	9a01      	ldr	r2, [sp, #4]
 802a73c:	f108 0801 	add.w	r8, r8, #1
 802a740:	4542      	cmp	r2, r8
 802a742:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 802a746:	dc18      	bgt.n	802a77a <__tzcalc_limits+0x13e>
 802a748:	f10e 0504 	add.w	r5, lr, #4
 802a74c:	fb95 f8fa 	sdiv	r8, r5, sl
 802a750:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 802a754:	eba5 0808 	sub.w	r8, r5, r8
 802a758:	ebb3 0808 	subs.w	r8, r3, r8
 802a75c:	690b      	ldr	r3, [r1, #16]
 802a75e:	f103 33ff 	add.w	r3, r3, #4294967295
 802a762:	bf48      	it	mi
 802a764:	f108 0807 	addmi.w	r8, r8, #7
 802a768:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802a76c:	4443      	add	r3, r8
 802a76e:	454b      	cmp	r3, r9
 802a770:	da05      	bge.n	802a77e <__tzcalc_limits+0x142>
 802a772:	4473      	add	r3, lr
 802a774:	e7ac      	b.n	802a6d0 <__tzcalc_limits+0x94>
 802a776:	4635      	mov	r5, r6
 802a778:	e7d4      	b.n	802a724 <__tzcalc_limits+0xe8>
 802a77a:	44ce      	add	lr, r9
 802a77c:	e7dd      	b.n	802a73a <__tzcalc_limits+0xfe>
 802a77e:	3b07      	subs	r3, #7
 802a780:	e7f5      	b.n	802a76e <__tzcalc_limits+0x132>
 802a782:	2000      	movs	r0, #0
 802a784:	e7bf      	b.n	802a706 <__tzcalc_limits+0xca>
 802a786:	bf00      	nop
 802a788:	00015180 	.word	0x00015180
 802a78c:	08030168 	.word	0x08030168

0802a790 <__tz_lock>:
 802a790:	4801      	ldr	r0, [pc, #4]	; (802a798 <__tz_lock+0x8>)
 802a792:	f000 bddc 	b.w	802b34e <__retarget_lock_acquire>
 802a796:	bf00      	nop
 802a798:	2003c1ad 	.word	0x2003c1ad

0802a79c <__tz_unlock>:
 802a79c:	4801      	ldr	r0, [pc, #4]	; (802a7a4 <__tz_unlock+0x8>)
 802a79e:	f000 bdd8 	b.w	802b352 <__retarget_lock_release>
 802a7a2:	bf00      	nop
 802a7a4:	2003c1ad 	.word	0x2003c1ad

0802a7a8 <_tzset_unlocked>:
 802a7a8:	4b01      	ldr	r3, [pc, #4]	; (802a7b0 <_tzset_unlocked+0x8>)
 802a7aa:	6818      	ldr	r0, [r3, #0]
 802a7ac:	f000 b802 	b.w	802a7b4 <_tzset_unlocked_r>
 802a7b0:	200000b0 	.word	0x200000b0

0802a7b4 <_tzset_unlocked_r>:
 802a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a7b8:	b08d      	sub	sp, #52	; 0x34
 802a7ba:	4607      	mov	r7, r0
 802a7bc:	f000 fcce 	bl	802b15c <__gettzinfo>
 802a7c0:	49b0      	ldr	r1, [pc, #704]	; (802aa84 <_tzset_unlocked_r+0x2d0>)
 802a7c2:	4eb1      	ldr	r6, [pc, #708]	; (802aa88 <_tzset_unlocked_r+0x2d4>)
 802a7c4:	4605      	mov	r5, r0
 802a7c6:	4638      	mov	r0, r7
 802a7c8:	f000 fcc0 	bl	802b14c <_getenv_r>
 802a7cc:	4604      	mov	r4, r0
 802a7ce:	b970      	cbnz	r0, 802a7ee <_tzset_unlocked_r+0x3a>
 802a7d0:	4bae      	ldr	r3, [pc, #696]	; (802aa8c <_tzset_unlocked_r+0x2d8>)
 802a7d2:	4aaf      	ldr	r2, [pc, #700]	; (802aa90 <_tzset_unlocked_r+0x2dc>)
 802a7d4:	6018      	str	r0, [r3, #0]
 802a7d6:	4baf      	ldr	r3, [pc, #700]	; (802aa94 <_tzset_unlocked_r+0x2e0>)
 802a7d8:	6018      	str	r0, [r3, #0]
 802a7da:	4baf      	ldr	r3, [pc, #700]	; (802aa98 <_tzset_unlocked_r+0x2e4>)
 802a7dc:	6830      	ldr	r0, [r6, #0]
 802a7de:	e9c3 2200 	strd	r2, r2, [r3]
 802a7e2:	f7fe fb07 	bl	8028df4 <free>
 802a7e6:	6034      	str	r4, [r6, #0]
 802a7e8:	b00d      	add	sp, #52	; 0x34
 802a7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a7ee:	6831      	ldr	r1, [r6, #0]
 802a7f0:	2900      	cmp	r1, #0
 802a7f2:	d162      	bne.n	802a8ba <_tzset_unlocked_r+0x106>
 802a7f4:	6830      	ldr	r0, [r6, #0]
 802a7f6:	f7fe fafd 	bl	8028df4 <free>
 802a7fa:	4620      	mov	r0, r4
 802a7fc:	f7d5 fd20 	bl	8000240 <strlen>
 802a800:	1c41      	adds	r1, r0, #1
 802a802:	4638      	mov	r0, r7
 802a804:	f7fe fdf2 	bl	80293ec <_malloc_r>
 802a808:	6030      	str	r0, [r6, #0]
 802a80a:	2800      	cmp	r0, #0
 802a80c:	d15a      	bne.n	802a8c4 <_tzset_unlocked_r+0x110>
 802a80e:	7823      	ldrb	r3, [r4, #0]
 802a810:	4aa2      	ldr	r2, [pc, #648]	; (802aa9c <_tzset_unlocked_r+0x2e8>)
 802a812:	49a3      	ldr	r1, [pc, #652]	; (802aaa0 <_tzset_unlocked_r+0x2ec>)
 802a814:	2b3a      	cmp	r3, #58	; 0x3a
 802a816:	bf08      	it	eq
 802a818:	3401      	addeq	r4, #1
 802a81a:	ae0a      	add	r6, sp, #40	; 0x28
 802a81c:	4633      	mov	r3, r6
 802a81e:	4620      	mov	r0, r4
 802a820:	f7ff f99a 	bl	8029b58 <siscanf>
 802a824:	2800      	cmp	r0, #0
 802a826:	dddf      	ble.n	802a7e8 <_tzset_unlocked_r+0x34>
 802a828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a82a:	18e7      	adds	r7, r4, r3
 802a82c:	5ce3      	ldrb	r3, [r4, r3]
 802a82e:	2b2d      	cmp	r3, #45	; 0x2d
 802a830:	d14c      	bne.n	802a8cc <_tzset_unlocked_r+0x118>
 802a832:	3701      	adds	r7, #1
 802a834:	f04f 38ff 	mov.w	r8, #4294967295
 802a838:	f10d 0a20 	add.w	sl, sp, #32
 802a83c:	f10d 0b1e 	add.w	fp, sp, #30
 802a840:	2400      	movs	r4, #0
 802a842:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 802a846:	4997      	ldr	r1, [pc, #604]	; (802aaa4 <_tzset_unlocked_r+0x2f0>)
 802a848:	9603      	str	r6, [sp, #12]
 802a84a:	f8cd b000 	str.w	fp, [sp]
 802a84e:	4633      	mov	r3, r6
 802a850:	aa07      	add	r2, sp, #28
 802a852:	4638      	mov	r0, r7
 802a854:	f8ad 401e 	strh.w	r4, [sp, #30]
 802a858:	f8ad 4020 	strh.w	r4, [sp, #32]
 802a85c:	f7ff f97c 	bl	8029b58 <siscanf>
 802a860:	42a0      	cmp	r0, r4
 802a862:	ddc1      	ble.n	802a7e8 <_tzset_unlocked_r+0x34>
 802a864:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802a868:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802a86c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 802aab0 <_tzset_unlocked_r+0x2fc>
 802a870:	213c      	movs	r1, #60	; 0x3c
 802a872:	fb01 3302 	mla	r3, r1, r2, r3
 802a876:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802a87a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802a87e:	fb01 3302 	mla	r3, r1, r2, r3
 802a882:	fb08 f303 	mul.w	r3, r8, r3
 802a886:	f8df 8210 	ldr.w	r8, [pc, #528]	; 802aa98 <_tzset_unlocked_r+0x2e4>
 802a88a:	62ab      	str	r3, [r5, #40]	; 0x28
 802a88c:	4b83      	ldr	r3, [pc, #524]	; (802aa9c <_tzset_unlocked_r+0x2e8>)
 802a88e:	f8c8 3000 	str.w	r3, [r8]
 802a892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a894:	4982      	ldr	r1, [pc, #520]	; (802aaa0 <_tzset_unlocked_r+0x2ec>)
 802a896:	441f      	add	r7, r3
 802a898:	464a      	mov	r2, r9
 802a89a:	4633      	mov	r3, r6
 802a89c:	4638      	mov	r0, r7
 802a89e:	f7ff f95b 	bl	8029b58 <siscanf>
 802a8a2:	42a0      	cmp	r0, r4
 802a8a4:	dc18      	bgt.n	802a8d8 <_tzset_unlocked_r+0x124>
 802a8a6:	f8d8 3000 	ldr.w	r3, [r8]
 802a8aa:	f8c8 3004 	str.w	r3, [r8, #4]
 802a8ae:	4b77      	ldr	r3, [pc, #476]	; (802aa8c <_tzset_unlocked_r+0x2d8>)
 802a8b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802a8b2:	601a      	str	r2, [r3, #0]
 802a8b4:	4b77      	ldr	r3, [pc, #476]	; (802aa94 <_tzset_unlocked_r+0x2e0>)
 802a8b6:	601c      	str	r4, [r3, #0]
 802a8b8:	e796      	b.n	802a7e8 <_tzset_unlocked_r+0x34>
 802a8ba:	f7d5 fd19 	bl	80002f0 <strcmp>
 802a8be:	2800      	cmp	r0, #0
 802a8c0:	d198      	bne.n	802a7f4 <_tzset_unlocked_r+0x40>
 802a8c2:	e791      	b.n	802a7e8 <_tzset_unlocked_r+0x34>
 802a8c4:	4621      	mov	r1, r4
 802a8c6:	f001 f97b 	bl	802bbc0 <strcpy>
 802a8ca:	e7a0      	b.n	802a80e <_tzset_unlocked_r+0x5a>
 802a8cc:	2b2b      	cmp	r3, #43	; 0x2b
 802a8ce:	bf08      	it	eq
 802a8d0:	3701      	addeq	r7, #1
 802a8d2:	f04f 0801 	mov.w	r8, #1
 802a8d6:	e7af      	b.n	802a838 <_tzset_unlocked_r+0x84>
 802a8d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a8da:	f8c8 9004 	str.w	r9, [r8, #4]
 802a8de:	18fc      	adds	r4, r7, r3
 802a8e0:	5cfb      	ldrb	r3, [r7, r3]
 802a8e2:	2b2d      	cmp	r3, #45	; 0x2d
 802a8e4:	f040 808b 	bne.w	802a9fe <_tzset_unlocked_r+0x24a>
 802a8e8:	3401      	adds	r4, #1
 802a8ea:	f04f 37ff 	mov.w	r7, #4294967295
 802a8ee:	2300      	movs	r3, #0
 802a8f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 802a8f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 802a8f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 802a8fc:	930a      	str	r3, [sp, #40]	; 0x28
 802a8fe:	e9cd a602 	strd	sl, r6, [sp, #8]
 802a902:	e9cd b600 	strd	fp, r6, [sp]
 802a906:	4967      	ldr	r1, [pc, #412]	; (802aaa4 <_tzset_unlocked_r+0x2f0>)
 802a908:	4633      	mov	r3, r6
 802a90a:	aa07      	add	r2, sp, #28
 802a90c:	4620      	mov	r0, r4
 802a90e:	f7ff f923 	bl	8029b58 <siscanf>
 802a912:	2800      	cmp	r0, #0
 802a914:	dc78      	bgt.n	802aa08 <_tzset_unlocked_r+0x254>
 802a916:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802a918:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 802a91c:	652b      	str	r3, [r5, #80]	; 0x50
 802a91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a920:	462f      	mov	r7, r5
 802a922:	441c      	add	r4, r3
 802a924:	f04f 0900 	mov.w	r9, #0
 802a928:	7823      	ldrb	r3, [r4, #0]
 802a92a:	2b2c      	cmp	r3, #44	; 0x2c
 802a92c:	bf08      	it	eq
 802a92e:	3401      	addeq	r4, #1
 802a930:	f894 8000 	ldrb.w	r8, [r4]
 802a934:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 802a938:	d178      	bne.n	802aa2c <_tzset_unlocked_r+0x278>
 802a93a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802a93e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802a942:	ab09      	add	r3, sp, #36	; 0x24
 802a944:	9300      	str	r3, [sp, #0]
 802a946:	4958      	ldr	r1, [pc, #352]	; (802aaa8 <_tzset_unlocked_r+0x2f4>)
 802a948:	9603      	str	r6, [sp, #12]
 802a94a:	4633      	mov	r3, r6
 802a94c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802a950:	4620      	mov	r0, r4
 802a952:	f7ff f901 	bl	8029b58 <siscanf>
 802a956:	2803      	cmp	r0, #3
 802a958:	f47f af46 	bne.w	802a7e8 <_tzset_unlocked_r+0x34>
 802a95c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802a960:	1e4b      	subs	r3, r1, #1
 802a962:	2b0b      	cmp	r3, #11
 802a964:	f63f af40 	bhi.w	802a7e8 <_tzset_unlocked_r+0x34>
 802a968:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802a96c:	1e53      	subs	r3, r2, #1
 802a96e:	2b04      	cmp	r3, #4
 802a970:	f63f af3a 	bhi.w	802a7e8 <_tzset_unlocked_r+0x34>
 802a974:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 802a978:	2b06      	cmp	r3, #6
 802a97a:	f63f af35 	bhi.w	802a7e8 <_tzset_unlocked_r+0x34>
 802a97e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802a982:	f887 8008 	strb.w	r8, [r7, #8]
 802a986:	617b      	str	r3, [r7, #20]
 802a988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a98a:	eb04 0803 	add.w	r8, r4, r3
 802a98e:	2302      	movs	r3, #2
 802a990:	f8ad 301c 	strh.w	r3, [sp, #28]
 802a994:	2300      	movs	r3, #0
 802a996:	f8ad 301e 	strh.w	r3, [sp, #30]
 802a99a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802a99e:	930a      	str	r3, [sp, #40]	; 0x28
 802a9a0:	f898 3000 	ldrb.w	r3, [r8]
 802a9a4:	2b2f      	cmp	r3, #47	; 0x2f
 802a9a6:	d109      	bne.n	802a9bc <_tzset_unlocked_r+0x208>
 802a9a8:	e9cd a602 	strd	sl, r6, [sp, #8]
 802a9ac:	e9cd b600 	strd	fp, r6, [sp]
 802a9b0:	493e      	ldr	r1, [pc, #248]	; (802aaac <_tzset_unlocked_r+0x2f8>)
 802a9b2:	4633      	mov	r3, r6
 802a9b4:	aa07      	add	r2, sp, #28
 802a9b6:	4640      	mov	r0, r8
 802a9b8:	f7ff f8ce 	bl	8029b58 <siscanf>
 802a9bc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802a9c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802a9c4:	213c      	movs	r1, #60	; 0x3c
 802a9c6:	fb01 3302 	mla	r3, r1, r2, r3
 802a9ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802a9ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802a9d2:	fb01 3302 	mla	r3, r1, r2, r3
 802a9d6:	61bb      	str	r3, [r7, #24]
 802a9d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802a9da:	3728      	adds	r7, #40	; 0x28
 802a9dc:	4444      	add	r4, r8
 802a9de:	f1b9 0f00 	cmp.w	r9, #0
 802a9e2:	d020      	beq.n	802aa26 <_tzset_unlocked_r+0x272>
 802a9e4:	6868      	ldr	r0, [r5, #4]
 802a9e6:	f7ff fe29 	bl	802a63c <__tzcalc_limits>
 802a9ea:	4b28      	ldr	r3, [pc, #160]	; (802aa8c <_tzset_unlocked_r+0x2d8>)
 802a9ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802a9ee:	601a      	str	r2, [r3, #0]
 802a9f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802a9f2:	1a9b      	subs	r3, r3, r2
 802a9f4:	4a27      	ldr	r2, [pc, #156]	; (802aa94 <_tzset_unlocked_r+0x2e0>)
 802a9f6:	bf18      	it	ne
 802a9f8:	2301      	movne	r3, #1
 802a9fa:	6013      	str	r3, [r2, #0]
 802a9fc:	e6f4      	b.n	802a7e8 <_tzset_unlocked_r+0x34>
 802a9fe:	2b2b      	cmp	r3, #43	; 0x2b
 802aa00:	bf08      	it	eq
 802aa02:	3401      	addeq	r4, #1
 802aa04:	2701      	movs	r7, #1
 802aa06:	e772      	b.n	802a8ee <_tzset_unlocked_r+0x13a>
 802aa08:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802aa0c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802aa10:	213c      	movs	r1, #60	; 0x3c
 802aa12:	fb01 3302 	mla	r3, r1, r2, r3
 802aa16:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802aa1a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802aa1e:	fb01 3302 	mla	r3, r1, r2, r3
 802aa22:	437b      	muls	r3, r7
 802aa24:	e77a      	b.n	802a91c <_tzset_unlocked_r+0x168>
 802aa26:	f04f 0901 	mov.w	r9, #1
 802aa2a:	e77d      	b.n	802a928 <_tzset_unlocked_r+0x174>
 802aa2c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802aa30:	bf06      	itte	eq
 802aa32:	3401      	addeq	r4, #1
 802aa34:	4643      	moveq	r3, r8
 802aa36:	2344      	movne	r3, #68	; 0x44
 802aa38:	220a      	movs	r2, #10
 802aa3a:	a90b      	add	r1, sp, #44	; 0x2c
 802aa3c:	4620      	mov	r0, r4
 802aa3e:	9305      	str	r3, [sp, #20]
 802aa40:	f001 f956 	bl	802bcf0 <strtoul>
 802aa44:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 802aa48:	9b05      	ldr	r3, [sp, #20]
 802aa4a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802aa4e:	45a0      	cmp	r8, r4
 802aa50:	d114      	bne.n	802aa7c <_tzset_unlocked_r+0x2c8>
 802aa52:	234d      	movs	r3, #77	; 0x4d
 802aa54:	f1b9 0f00 	cmp.w	r9, #0
 802aa58:	d107      	bne.n	802aa6a <_tzset_unlocked_r+0x2b6>
 802aa5a:	722b      	strb	r3, [r5, #8]
 802aa5c:	2103      	movs	r1, #3
 802aa5e:	2302      	movs	r3, #2
 802aa60:	e9c5 1303 	strd	r1, r3, [r5, #12]
 802aa64:	f8c5 9014 	str.w	r9, [r5, #20]
 802aa68:	e791      	b.n	802a98e <_tzset_unlocked_r+0x1da>
 802aa6a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802aa6e:	220b      	movs	r2, #11
 802aa70:	2301      	movs	r3, #1
 802aa72:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 802aa76:	2300      	movs	r3, #0
 802aa78:	63eb      	str	r3, [r5, #60]	; 0x3c
 802aa7a:	e788      	b.n	802a98e <_tzset_unlocked_r+0x1da>
 802aa7c:	b280      	uxth	r0, r0
 802aa7e:	723b      	strb	r3, [r7, #8]
 802aa80:	6178      	str	r0, [r7, #20]
 802aa82:	e784      	b.n	802a98e <_tzset_unlocked_r+0x1da>
 802aa84:	0802ffbc 	.word	0x0802ffbc
 802aa88:	2003c10c 	.word	0x2003c10c
 802aa8c:	2003c114 	.word	0x2003c114
 802aa90:	0802ffbf 	.word	0x0802ffbf
 802aa94:	2003c110 	.word	0x2003c110
 802aa98:	20000114 	.word	0x20000114
 802aa9c:	2003c0ff 	.word	0x2003c0ff
 802aaa0:	0802ffc3 	.word	0x0802ffc3
 802aaa4:	0802ffe6 	.word	0x0802ffe6
 802aaa8:	0802ffd2 	.word	0x0802ffd2
 802aaac:	0802ffe5 	.word	0x0802ffe5
 802aab0:	2003c0f4 	.word	0x2003c0f4

0802aab4 <__swbuf_r>:
 802aab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802aab6:	460e      	mov	r6, r1
 802aab8:	4614      	mov	r4, r2
 802aaba:	4605      	mov	r5, r0
 802aabc:	b118      	cbz	r0, 802aac6 <__swbuf_r+0x12>
 802aabe:	6983      	ldr	r3, [r0, #24]
 802aac0:	b90b      	cbnz	r3, 802aac6 <__swbuf_r+0x12>
 802aac2:	f000 fa69 	bl	802af98 <__sinit>
 802aac6:	4b21      	ldr	r3, [pc, #132]	; (802ab4c <__swbuf_r+0x98>)
 802aac8:	429c      	cmp	r4, r3
 802aaca:	d12b      	bne.n	802ab24 <__swbuf_r+0x70>
 802aacc:	686c      	ldr	r4, [r5, #4]
 802aace:	69a3      	ldr	r3, [r4, #24]
 802aad0:	60a3      	str	r3, [r4, #8]
 802aad2:	89a3      	ldrh	r3, [r4, #12]
 802aad4:	071a      	lsls	r2, r3, #28
 802aad6:	d52f      	bpl.n	802ab38 <__swbuf_r+0x84>
 802aad8:	6923      	ldr	r3, [r4, #16]
 802aada:	b36b      	cbz	r3, 802ab38 <__swbuf_r+0x84>
 802aadc:	6923      	ldr	r3, [r4, #16]
 802aade:	6820      	ldr	r0, [r4, #0]
 802aae0:	1ac0      	subs	r0, r0, r3
 802aae2:	6963      	ldr	r3, [r4, #20]
 802aae4:	b2f6      	uxtb	r6, r6
 802aae6:	4283      	cmp	r3, r0
 802aae8:	4637      	mov	r7, r6
 802aaea:	dc04      	bgt.n	802aaf6 <__swbuf_r+0x42>
 802aaec:	4621      	mov	r1, r4
 802aaee:	4628      	mov	r0, r5
 802aaf0:	f000 f9be 	bl	802ae70 <_fflush_r>
 802aaf4:	bb30      	cbnz	r0, 802ab44 <__swbuf_r+0x90>
 802aaf6:	68a3      	ldr	r3, [r4, #8]
 802aaf8:	3b01      	subs	r3, #1
 802aafa:	60a3      	str	r3, [r4, #8]
 802aafc:	6823      	ldr	r3, [r4, #0]
 802aafe:	1c5a      	adds	r2, r3, #1
 802ab00:	6022      	str	r2, [r4, #0]
 802ab02:	701e      	strb	r6, [r3, #0]
 802ab04:	6963      	ldr	r3, [r4, #20]
 802ab06:	3001      	adds	r0, #1
 802ab08:	4283      	cmp	r3, r0
 802ab0a:	d004      	beq.n	802ab16 <__swbuf_r+0x62>
 802ab0c:	89a3      	ldrh	r3, [r4, #12]
 802ab0e:	07db      	lsls	r3, r3, #31
 802ab10:	d506      	bpl.n	802ab20 <__swbuf_r+0x6c>
 802ab12:	2e0a      	cmp	r6, #10
 802ab14:	d104      	bne.n	802ab20 <__swbuf_r+0x6c>
 802ab16:	4621      	mov	r1, r4
 802ab18:	4628      	mov	r0, r5
 802ab1a:	f000 f9a9 	bl	802ae70 <_fflush_r>
 802ab1e:	b988      	cbnz	r0, 802ab44 <__swbuf_r+0x90>
 802ab20:	4638      	mov	r0, r7
 802ab22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802ab24:	4b0a      	ldr	r3, [pc, #40]	; (802ab50 <__swbuf_r+0x9c>)
 802ab26:	429c      	cmp	r4, r3
 802ab28:	d101      	bne.n	802ab2e <__swbuf_r+0x7a>
 802ab2a:	68ac      	ldr	r4, [r5, #8]
 802ab2c:	e7cf      	b.n	802aace <__swbuf_r+0x1a>
 802ab2e:	4b09      	ldr	r3, [pc, #36]	; (802ab54 <__swbuf_r+0xa0>)
 802ab30:	429c      	cmp	r4, r3
 802ab32:	bf08      	it	eq
 802ab34:	68ec      	ldreq	r4, [r5, #12]
 802ab36:	e7ca      	b.n	802aace <__swbuf_r+0x1a>
 802ab38:	4621      	mov	r1, r4
 802ab3a:	4628      	mov	r0, r5
 802ab3c:	f000 f81e 	bl	802ab7c <__swsetup_r>
 802ab40:	2800      	cmp	r0, #0
 802ab42:	d0cb      	beq.n	802aadc <__swbuf_r+0x28>
 802ab44:	f04f 37ff 	mov.w	r7, #4294967295
 802ab48:	e7ea      	b.n	802ab20 <__swbuf_r+0x6c>
 802ab4a:	bf00      	nop
 802ab4c:	0803011c 	.word	0x0803011c
 802ab50:	0803013c 	.word	0x0803013c
 802ab54:	080300fc 	.word	0x080300fc

0802ab58 <_write_r>:
 802ab58:	b538      	push	{r3, r4, r5, lr}
 802ab5a:	4d07      	ldr	r5, [pc, #28]	; (802ab78 <_write_r+0x20>)
 802ab5c:	4604      	mov	r4, r0
 802ab5e:	4608      	mov	r0, r1
 802ab60:	4611      	mov	r1, r2
 802ab62:	2200      	movs	r2, #0
 802ab64:	602a      	str	r2, [r5, #0]
 802ab66:	461a      	mov	r2, r3
 802ab68:	f7d7 f9ad 	bl	8001ec6 <_write>
 802ab6c:	1c43      	adds	r3, r0, #1
 802ab6e:	d102      	bne.n	802ab76 <_write_r+0x1e>
 802ab70:	682b      	ldr	r3, [r5, #0]
 802ab72:	b103      	cbz	r3, 802ab76 <_write_r+0x1e>
 802ab74:	6023      	str	r3, [r4, #0]
 802ab76:	bd38      	pop	{r3, r4, r5, pc}
 802ab78:	2003c1b0 	.word	0x2003c1b0

0802ab7c <__swsetup_r>:
 802ab7c:	4b32      	ldr	r3, [pc, #200]	; (802ac48 <__swsetup_r+0xcc>)
 802ab7e:	b570      	push	{r4, r5, r6, lr}
 802ab80:	681d      	ldr	r5, [r3, #0]
 802ab82:	4606      	mov	r6, r0
 802ab84:	460c      	mov	r4, r1
 802ab86:	b125      	cbz	r5, 802ab92 <__swsetup_r+0x16>
 802ab88:	69ab      	ldr	r3, [r5, #24]
 802ab8a:	b913      	cbnz	r3, 802ab92 <__swsetup_r+0x16>
 802ab8c:	4628      	mov	r0, r5
 802ab8e:	f000 fa03 	bl	802af98 <__sinit>
 802ab92:	4b2e      	ldr	r3, [pc, #184]	; (802ac4c <__swsetup_r+0xd0>)
 802ab94:	429c      	cmp	r4, r3
 802ab96:	d10f      	bne.n	802abb8 <__swsetup_r+0x3c>
 802ab98:	686c      	ldr	r4, [r5, #4]
 802ab9a:	89a3      	ldrh	r3, [r4, #12]
 802ab9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802aba0:	0719      	lsls	r1, r3, #28
 802aba2:	d42c      	bmi.n	802abfe <__swsetup_r+0x82>
 802aba4:	06dd      	lsls	r5, r3, #27
 802aba6:	d411      	bmi.n	802abcc <__swsetup_r+0x50>
 802aba8:	2309      	movs	r3, #9
 802abaa:	6033      	str	r3, [r6, #0]
 802abac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802abb0:	81a3      	strh	r3, [r4, #12]
 802abb2:	f04f 30ff 	mov.w	r0, #4294967295
 802abb6:	e03e      	b.n	802ac36 <__swsetup_r+0xba>
 802abb8:	4b25      	ldr	r3, [pc, #148]	; (802ac50 <__swsetup_r+0xd4>)
 802abba:	429c      	cmp	r4, r3
 802abbc:	d101      	bne.n	802abc2 <__swsetup_r+0x46>
 802abbe:	68ac      	ldr	r4, [r5, #8]
 802abc0:	e7eb      	b.n	802ab9a <__swsetup_r+0x1e>
 802abc2:	4b24      	ldr	r3, [pc, #144]	; (802ac54 <__swsetup_r+0xd8>)
 802abc4:	429c      	cmp	r4, r3
 802abc6:	bf08      	it	eq
 802abc8:	68ec      	ldreq	r4, [r5, #12]
 802abca:	e7e6      	b.n	802ab9a <__swsetup_r+0x1e>
 802abcc:	0758      	lsls	r0, r3, #29
 802abce:	d512      	bpl.n	802abf6 <__swsetup_r+0x7a>
 802abd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802abd2:	b141      	cbz	r1, 802abe6 <__swsetup_r+0x6a>
 802abd4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802abd8:	4299      	cmp	r1, r3
 802abda:	d002      	beq.n	802abe2 <__swsetup_r+0x66>
 802abdc:	4630      	mov	r0, r6
 802abde:	f7fe fb99 	bl	8029314 <_free_r>
 802abe2:	2300      	movs	r3, #0
 802abe4:	6363      	str	r3, [r4, #52]	; 0x34
 802abe6:	89a3      	ldrh	r3, [r4, #12]
 802abe8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802abec:	81a3      	strh	r3, [r4, #12]
 802abee:	2300      	movs	r3, #0
 802abf0:	6063      	str	r3, [r4, #4]
 802abf2:	6923      	ldr	r3, [r4, #16]
 802abf4:	6023      	str	r3, [r4, #0]
 802abf6:	89a3      	ldrh	r3, [r4, #12]
 802abf8:	f043 0308 	orr.w	r3, r3, #8
 802abfc:	81a3      	strh	r3, [r4, #12]
 802abfe:	6923      	ldr	r3, [r4, #16]
 802ac00:	b94b      	cbnz	r3, 802ac16 <__swsetup_r+0x9a>
 802ac02:	89a3      	ldrh	r3, [r4, #12]
 802ac04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802ac08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802ac0c:	d003      	beq.n	802ac16 <__swsetup_r+0x9a>
 802ac0e:	4621      	mov	r1, r4
 802ac10:	4630      	mov	r0, r6
 802ac12:	f000 fbd9 	bl	802b3c8 <__smakebuf_r>
 802ac16:	89a0      	ldrh	r0, [r4, #12]
 802ac18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802ac1c:	f010 0301 	ands.w	r3, r0, #1
 802ac20:	d00a      	beq.n	802ac38 <__swsetup_r+0xbc>
 802ac22:	2300      	movs	r3, #0
 802ac24:	60a3      	str	r3, [r4, #8]
 802ac26:	6963      	ldr	r3, [r4, #20]
 802ac28:	425b      	negs	r3, r3
 802ac2a:	61a3      	str	r3, [r4, #24]
 802ac2c:	6923      	ldr	r3, [r4, #16]
 802ac2e:	b943      	cbnz	r3, 802ac42 <__swsetup_r+0xc6>
 802ac30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802ac34:	d1ba      	bne.n	802abac <__swsetup_r+0x30>
 802ac36:	bd70      	pop	{r4, r5, r6, pc}
 802ac38:	0781      	lsls	r1, r0, #30
 802ac3a:	bf58      	it	pl
 802ac3c:	6963      	ldrpl	r3, [r4, #20]
 802ac3e:	60a3      	str	r3, [r4, #8]
 802ac40:	e7f4      	b.n	802ac2c <__swsetup_r+0xb0>
 802ac42:	2000      	movs	r0, #0
 802ac44:	e7f7      	b.n	802ac36 <__swsetup_r+0xba>
 802ac46:	bf00      	nop
 802ac48:	200000b0 	.word	0x200000b0
 802ac4c:	0803011c 	.word	0x0803011c
 802ac50:	0803013c 	.word	0x0803013c
 802ac54:	080300fc 	.word	0x080300fc

0802ac58 <__register_exitproc>:
 802ac58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ac5c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802ad18 <__register_exitproc+0xc0>
 802ac60:	4606      	mov	r6, r0
 802ac62:	f8d8 0000 	ldr.w	r0, [r8]
 802ac66:	461f      	mov	r7, r3
 802ac68:	460d      	mov	r5, r1
 802ac6a:	4691      	mov	r9, r2
 802ac6c:	f000 fb70 	bl	802b350 <__retarget_lock_acquire_recursive>
 802ac70:	4b25      	ldr	r3, [pc, #148]	; (802ad08 <__register_exitproc+0xb0>)
 802ac72:	681c      	ldr	r4, [r3, #0]
 802ac74:	b934      	cbnz	r4, 802ac84 <__register_exitproc+0x2c>
 802ac76:	4c25      	ldr	r4, [pc, #148]	; (802ad0c <__register_exitproc+0xb4>)
 802ac78:	601c      	str	r4, [r3, #0]
 802ac7a:	4b25      	ldr	r3, [pc, #148]	; (802ad10 <__register_exitproc+0xb8>)
 802ac7c:	b113      	cbz	r3, 802ac84 <__register_exitproc+0x2c>
 802ac7e:	681b      	ldr	r3, [r3, #0]
 802ac80:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802ac84:	6863      	ldr	r3, [r4, #4]
 802ac86:	2b1f      	cmp	r3, #31
 802ac88:	dd07      	ble.n	802ac9a <__register_exitproc+0x42>
 802ac8a:	f8d8 0000 	ldr.w	r0, [r8]
 802ac8e:	f000 fb61 	bl	802b354 <__retarget_lock_release_recursive>
 802ac92:	f04f 30ff 	mov.w	r0, #4294967295
 802ac96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ac9a:	b34e      	cbz	r6, 802acf0 <__register_exitproc+0x98>
 802ac9c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802aca0:	b988      	cbnz	r0, 802acc6 <__register_exitproc+0x6e>
 802aca2:	4b1c      	ldr	r3, [pc, #112]	; (802ad14 <__register_exitproc+0xbc>)
 802aca4:	b923      	cbnz	r3, 802acb0 <__register_exitproc+0x58>
 802aca6:	f8d8 0000 	ldr.w	r0, [r8]
 802acaa:	f000 fb52 	bl	802b352 <__retarget_lock_release>
 802acae:	e7f0      	b.n	802ac92 <__register_exitproc+0x3a>
 802acb0:	f44f 7084 	mov.w	r0, #264	; 0x108
 802acb4:	f7fe f896 	bl	8028de4 <malloc>
 802acb8:	2800      	cmp	r0, #0
 802acba:	d0f4      	beq.n	802aca6 <__register_exitproc+0x4e>
 802acbc:	2300      	movs	r3, #0
 802acbe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802acc2:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802acc6:	6863      	ldr	r3, [r4, #4]
 802acc8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802accc:	2201      	movs	r2, #1
 802acce:	409a      	lsls	r2, r3
 802acd0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802acd4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802acd8:	4313      	orrs	r3, r2
 802acda:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802acde:	2e02      	cmp	r6, #2
 802ace0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802ace4:	bf02      	ittt	eq
 802ace6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802acea:	4313      	orreq	r3, r2
 802acec:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802acf0:	6863      	ldr	r3, [r4, #4]
 802acf2:	f8d8 0000 	ldr.w	r0, [r8]
 802acf6:	1c5a      	adds	r2, r3, #1
 802acf8:	3302      	adds	r3, #2
 802acfa:	6062      	str	r2, [r4, #4]
 802acfc:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802ad00:	f000 fb28 	bl	802b354 <__retarget_lock_release_recursive>
 802ad04:	2000      	movs	r0, #0
 802ad06:	e7c6      	b.n	802ac96 <__register_exitproc+0x3e>
 802ad08:	2003c1a4 	.word	0x2003c1a4
 802ad0c:	2003c118 	.word	0x2003c118
 802ad10:	0802fd4c 	.word	0x0802fd4c
 802ad14:	08028de5 	.word	0x08028de5
 802ad18:	2000011c 	.word	0x2000011c

0802ad1c <_close_r>:
 802ad1c:	b538      	push	{r3, r4, r5, lr}
 802ad1e:	4d06      	ldr	r5, [pc, #24]	; (802ad38 <_close_r+0x1c>)
 802ad20:	2300      	movs	r3, #0
 802ad22:	4604      	mov	r4, r0
 802ad24:	4608      	mov	r0, r1
 802ad26:	602b      	str	r3, [r5, #0]
 802ad28:	f7d7 f8e9 	bl	8001efe <_close>
 802ad2c:	1c43      	adds	r3, r0, #1
 802ad2e:	d102      	bne.n	802ad36 <_close_r+0x1a>
 802ad30:	682b      	ldr	r3, [r5, #0]
 802ad32:	b103      	cbz	r3, 802ad36 <_close_r+0x1a>
 802ad34:	6023      	str	r3, [r4, #0]
 802ad36:	bd38      	pop	{r3, r4, r5, pc}
 802ad38:	2003c1b0 	.word	0x2003c1b0

0802ad3c <div>:
 802ad3c:	2900      	cmp	r1, #0
 802ad3e:	b510      	push	{r4, lr}
 802ad40:	fb91 f4f2 	sdiv	r4, r1, r2
 802ad44:	fb02 1314 	mls	r3, r2, r4, r1
 802ad48:	db06      	blt.n	802ad58 <div+0x1c>
 802ad4a:	2b00      	cmp	r3, #0
 802ad4c:	da01      	bge.n	802ad52 <div+0x16>
 802ad4e:	3401      	adds	r4, #1
 802ad50:	1a9b      	subs	r3, r3, r2
 802ad52:	e9c0 4300 	strd	r4, r3, [r0]
 802ad56:	bd10      	pop	{r4, pc}
 802ad58:	2b00      	cmp	r3, #0
 802ad5a:	bfc4      	itt	gt
 802ad5c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 802ad60:	189b      	addgt	r3, r3, r2
 802ad62:	e7f6      	b.n	802ad52 <div+0x16>

0802ad64 <__sflush_r>:
 802ad64:	898a      	ldrh	r2, [r1, #12]
 802ad66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ad6a:	4605      	mov	r5, r0
 802ad6c:	0710      	lsls	r0, r2, #28
 802ad6e:	460c      	mov	r4, r1
 802ad70:	d458      	bmi.n	802ae24 <__sflush_r+0xc0>
 802ad72:	684b      	ldr	r3, [r1, #4]
 802ad74:	2b00      	cmp	r3, #0
 802ad76:	dc05      	bgt.n	802ad84 <__sflush_r+0x20>
 802ad78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802ad7a:	2b00      	cmp	r3, #0
 802ad7c:	dc02      	bgt.n	802ad84 <__sflush_r+0x20>
 802ad7e:	2000      	movs	r0, #0
 802ad80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ad84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802ad86:	2e00      	cmp	r6, #0
 802ad88:	d0f9      	beq.n	802ad7e <__sflush_r+0x1a>
 802ad8a:	2300      	movs	r3, #0
 802ad8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802ad90:	682f      	ldr	r7, [r5, #0]
 802ad92:	602b      	str	r3, [r5, #0]
 802ad94:	d032      	beq.n	802adfc <__sflush_r+0x98>
 802ad96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802ad98:	89a3      	ldrh	r3, [r4, #12]
 802ad9a:	075a      	lsls	r2, r3, #29
 802ad9c:	d505      	bpl.n	802adaa <__sflush_r+0x46>
 802ad9e:	6863      	ldr	r3, [r4, #4]
 802ada0:	1ac0      	subs	r0, r0, r3
 802ada2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802ada4:	b10b      	cbz	r3, 802adaa <__sflush_r+0x46>
 802ada6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802ada8:	1ac0      	subs	r0, r0, r3
 802adaa:	2300      	movs	r3, #0
 802adac:	4602      	mov	r2, r0
 802adae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802adb0:	6a21      	ldr	r1, [r4, #32]
 802adb2:	4628      	mov	r0, r5
 802adb4:	47b0      	blx	r6
 802adb6:	1c43      	adds	r3, r0, #1
 802adb8:	89a3      	ldrh	r3, [r4, #12]
 802adba:	d106      	bne.n	802adca <__sflush_r+0x66>
 802adbc:	6829      	ldr	r1, [r5, #0]
 802adbe:	291d      	cmp	r1, #29
 802adc0:	d82c      	bhi.n	802ae1c <__sflush_r+0xb8>
 802adc2:	4a2a      	ldr	r2, [pc, #168]	; (802ae6c <__sflush_r+0x108>)
 802adc4:	40ca      	lsrs	r2, r1
 802adc6:	07d6      	lsls	r6, r2, #31
 802adc8:	d528      	bpl.n	802ae1c <__sflush_r+0xb8>
 802adca:	2200      	movs	r2, #0
 802adcc:	6062      	str	r2, [r4, #4]
 802adce:	04d9      	lsls	r1, r3, #19
 802add0:	6922      	ldr	r2, [r4, #16]
 802add2:	6022      	str	r2, [r4, #0]
 802add4:	d504      	bpl.n	802ade0 <__sflush_r+0x7c>
 802add6:	1c42      	adds	r2, r0, #1
 802add8:	d101      	bne.n	802adde <__sflush_r+0x7a>
 802adda:	682b      	ldr	r3, [r5, #0]
 802addc:	b903      	cbnz	r3, 802ade0 <__sflush_r+0x7c>
 802adde:	6560      	str	r0, [r4, #84]	; 0x54
 802ade0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802ade2:	602f      	str	r7, [r5, #0]
 802ade4:	2900      	cmp	r1, #0
 802ade6:	d0ca      	beq.n	802ad7e <__sflush_r+0x1a>
 802ade8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802adec:	4299      	cmp	r1, r3
 802adee:	d002      	beq.n	802adf6 <__sflush_r+0x92>
 802adf0:	4628      	mov	r0, r5
 802adf2:	f7fe fa8f 	bl	8029314 <_free_r>
 802adf6:	2000      	movs	r0, #0
 802adf8:	6360      	str	r0, [r4, #52]	; 0x34
 802adfa:	e7c1      	b.n	802ad80 <__sflush_r+0x1c>
 802adfc:	6a21      	ldr	r1, [r4, #32]
 802adfe:	2301      	movs	r3, #1
 802ae00:	4628      	mov	r0, r5
 802ae02:	47b0      	blx	r6
 802ae04:	1c41      	adds	r1, r0, #1
 802ae06:	d1c7      	bne.n	802ad98 <__sflush_r+0x34>
 802ae08:	682b      	ldr	r3, [r5, #0]
 802ae0a:	2b00      	cmp	r3, #0
 802ae0c:	d0c4      	beq.n	802ad98 <__sflush_r+0x34>
 802ae0e:	2b1d      	cmp	r3, #29
 802ae10:	d001      	beq.n	802ae16 <__sflush_r+0xb2>
 802ae12:	2b16      	cmp	r3, #22
 802ae14:	d101      	bne.n	802ae1a <__sflush_r+0xb6>
 802ae16:	602f      	str	r7, [r5, #0]
 802ae18:	e7b1      	b.n	802ad7e <__sflush_r+0x1a>
 802ae1a:	89a3      	ldrh	r3, [r4, #12]
 802ae1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ae20:	81a3      	strh	r3, [r4, #12]
 802ae22:	e7ad      	b.n	802ad80 <__sflush_r+0x1c>
 802ae24:	690f      	ldr	r7, [r1, #16]
 802ae26:	2f00      	cmp	r7, #0
 802ae28:	d0a9      	beq.n	802ad7e <__sflush_r+0x1a>
 802ae2a:	0793      	lsls	r3, r2, #30
 802ae2c:	680e      	ldr	r6, [r1, #0]
 802ae2e:	bf08      	it	eq
 802ae30:	694b      	ldreq	r3, [r1, #20]
 802ae32:	600f      	str	r7, [r1, #0]
 802ae34:	bf18      	it	ne
 802ae36:	2300      	movne	r3, #0
 802ae38:	eba6 0807 	sub.w	r8, r6, r7
 802ae3c:	608b      	str	r3, [r1, #8]
 802ae3e:	f1b8 0f00 	cmp.w	r8, #0
 802ae42:	dd9c      	ble.n	802ad7e <__sflush_r+0x1a>
 802ae44:	6a21      	ldr	r1, [r4, #32]
 802ae46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802ae48:	4643      	mov	r3, r8
 802ae4a:	463a      	mov	r2, r7
 802ae4c:	4628      	mov	r0, r5
 802ae4e:	47b0      	blx	r6
 802ae50:	2800      	cmp	r0, #0
 802ae52:	dc06      	bgt.n	802ae62 <__sflush_r+0xfe>
 802ae54:	89a3      	ldrh	r3, [r4, #12]
 802ae56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802ae5a:	81a3      	strh	r3, [r4, #12]
 802ae5c:	f04f 30ff 	mov.w	r0, #4294967295
 802ae60:	e78e      	b.n	802ad80 <__sflush_r+0x1c>
 802ae62:	4407      	add	r7, r0
 802ae64:	eba8 0800 	sub.w	r8, r8, r0
 802ae68:	e7e9      	b.n	802ae3e <__sflush_r+0xda>
 802ae6a:	bf00      	nop
 802ae6c:	20400001 	.word	0x20400001

0802ae70 <_fflush_r>:
 802ae70:	b538      	push	{r3, r4, r5, lr}
 802ae72:	690b      	ldr	r3, [r1, #16]
 802ae74:	4605      	mov	r5, r0
 802ae76:	460c      	mov	r4, r1
 802ae78:	b913      	cbnz	r3, 802ae80 <_fflush_r+0x10>
 802ae7a:	2500      	movs	r5, #0
 802ae7c:	4628      	mov	r0, r5
 802ae7e:	bd38      	pop	{r3, r4, r5, pc}
 802ae80:	b118      	cbz	r0, 802ae8a <_fflush_r+0x1a>
 802ae82:	6983      	ldr	r3, [r0, #24]
 802ae84:	b90b      	cbnz	r3, 802ae8a <_fflush_r+0x1a>
 802ae86:	f000 f887 	bl	802af98 <__sinit>
 802ae8a:	4b14      	ldr	r3, [pc, #80]	; (802aedc <_fflush_r+0x6c>)
 802ae8c:	429c      	cmp	r4, r3
 802ae8e:	d11b      	bne.n	802aec8 <_fflush_r+0x58>
 802ae90:	686c      	ldr	r4, [r5, #4]
 802ae92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ae96:	2b00      	cmp	r3, #0
 802ae98:	d0ef      	beq.n	802ae7a <_fflush_r+0xa>
 802ae9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802ae9c:	07d0      	lsls	r0, r2, #31
 802ae9e:	d404      	bmi.n	802aeaa <_fflush_r+0x3a>
 802aea0:	0599      	lsls	r1, r3, #22
 802aea2:	d402      	bmi.n	802aeaa <_fflush_r+0x3a>
 802aea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802aea6:	f000 fa53 	bl	802b350 <__retarget_lock_acquire_recursive>
 802aeaa:	4628      	mov	r0, r5
 802aeac:	4621      	mov	r1, r4
 802aeae:	f7ff ff59 	bl	802ad64 <__sflush_r>
 802aeb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802aeb4:	07da      	lsls	r2, r3, #31
 802aeb6:	4605      	mov	r5, r0
 802aeb8:	d4e0      	bmi.n	802ae7c <_fflush_r+0xc>
 802aeba:	89a3      	ldrh	r3, [r4, #12]
 802aebc:	059b      	lsls	r3, r3, #22
 802aebe:	d4dd      	bmi.n	802ae7c <_fflush_r+0xc>
 802aec0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802aec2:	f000 fa47 	bl	802b354 <__retarget_lock_release_recursive>
 802aec6:	e7d9      	b.n	802ae7c <_fflush_r+0xc>
 802aec8:	4b05      	ldr	r3, [pc, #20]	; (802aee0 <_fflush_r+0x70>)
 802aeca:	429c      	cmp	r4, r3
 802aecc:	d101      	bne.n	802aed2 <_fflush_r+0x62>
 802aece:	68ac      	ldr	r4, [r5, #8]
 802aed0:	e7df      	b.n	802ae92 <_fflush_r+0x22>
 802aed2:	4b04      	ldr	r3, [pc, #16]	; (802aee4 <_fflush_r+0x74>)
 802aed4:	429c      	cmp	r4, r3
 802aed6:	bf08      	it	eq
 802aed8:	68ec      	ldreq	r4, [r5, #12]
 802aeda:	e7da      	b.n	802ae92 <_fflush_r+0x22>
 802aedc:	0803011c 	.word	0x0803011c
 802aee0:	0803013c 	.word	0x0803013c
 802aee4:	080300fc 	.word	0x080300fc

0802aee8 <std>:
 802aee8:	2300      	movs	r3, #0
 802aeea:	b510      	push	{r4, lr}
 802aeec:	4604      	mov	r4, r0
 802aeee:	e9c0 3300 	strd	r3, r3, [r0]
 802aef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802aef6:	6083      	str	r3, [r0, #8]
 802aef8:	8181      	strh	r1, [r0, #12]
 802aefa:	6643      	str	r3, [r0, #100]	; 0x64
 802aefc:	81c2      	strh	r2, [r0, #14]
 802aefe:	6183      	str	r3, [r0, #24]
 802af00:	4619      	mov	r1, r3
 802af02:	2208      	movs	r2, #8
 802af04:	305c      	adds	r0, #92	; 0x5c
 802af06:	f7fd ff8b 	bl	8028e20 <memset>
 802af0a:	4b05      	ldr	r3, [pc, #20]	; (802af20 <std+0x38>)
 802af0c:	6263      	str	r3, [r4, #36]	; 0x24
 802af0e:	4b05      	ldr	r3, [pc, #20]	; (802af24 <std+0x3c>)
 802af10:	62a3      	str	r3, [r4, #40]	; 0x28
 802af12:	4b05      	ldr	r3, [pc, #20]	; (802af28 <std+0x40>)
 802af14:	62e3      	str	r3, [r4, #44]	; 0x2c
 802af16:	4b05      	ldr	r3, [pc, #20]	; (802af2c <std+0x44>)
 802af18:	6224      	str	r4, [r4, #32]
 802af1a:	6323      	str	r3, [r4, #48]	; 0x30
 802af1c:	bd10      	pop	{r4, pc}
 802af1e:	bf00      	nop
 802af20:	08029bb1 	.word	0x08029bb1
 802af24:	08029bd7 	.word	0x08029bd7
 802af28:	08029c0f 	.word	0x08029c0f
 802af2c:	08029c33 	.word	0x08029c33

0802af30 <_cleanup_r>:
 802af30:	4901      	ldr	r1, [pc, #4]	; (802af38 <_cleanup_r+0x8>)
 802af32:	f000 b8af 	b.w	802b094 <_fwalk_reent>
 802af36:	bf00      	nop
 802af38:	0802ae71 	.word	0x0802ae71

0802af3c <__sfmoreglue>:
 802af3c:	b570      	push	{r4, r5, r6, lr}
 802af3e:	2268      	movs	r2, #104	; 0x68
 802af40:	1e4d      	subs	r5, r1, #1
 802af42:	4355      	muls	r5, r2
 802af44:	460e      	mov	r6, r1
 802af46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802af4a:	f7fe fa4f 	bl	80293ec <_malloc_r>
 802af4e:	4604      	mov	r4, r0
 802af50:	b140      	cbz	r0, 802af64 <__sfmoreglue+0x28>
 802af52:	2100      	movs	r1, #0
 802af54:	e9c0 1600 	strd	r1, r6, [r0]
 802af58:	300c      	adds	r0, #12
 802af5a:	60a0      	str	r0, [r4, #8]
 802af5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802af60:	f7fd ff5e 	bl	8028e20 <memset>
 802af64:	4620      	mov	r0, r4
 802af66:	bd70      	pop	{r4, r5, r6, pc}

0802af68 <__sfp_lock_acquire>:
 802af68:	4801      	ldr	r0, [pc, #4]	; (802af70 <__sfp_lock_acquire+0x8>)
 802af6a:	f000 b9f1 	b.w	802b350 <__retarget_lock_acquire_recursive>
 802af6e:	bf00      	nop
 802af70:	2003c1ab 	.word	0x2003c1ab

0802af74 <__sfp_lock_release>:
 802af74:	4801      	ldr	r0, [pc, #4]	; (802af7c <__sfp_lock_release+0x8>)
 802af76:	f000 b9ed 	b.w	802b354 <__retarget_lock_release_recursive>
 802af7a:	bf00      	nop
 802af7c:	2003c1ab 	.word	0x2003c1ab

0802af80 <__sinit_lock_acquire>:
 802af80:	4801      	ldr	r0, [pc, #4]	; (802af88 <__sinit_lock_acquire+0x8>)
 802af82:	f000 b9e5 	b.w	802b350 <__retarget_lock_acquire_recursive>
 802af86:	bf00      	nop
 802af88:	2003c1ac 	.word	0x2003c1ac

0802af8c <__sinit_lock_release>:
 802af8c:	4801      	ldr	r0, [pc, #4]	; (802af94 <__sinit_lock_release+0x8>)
 802af8e:	f000 b9e1 	b.w	802b354 <__retarget_lock_release_recursive>
 802af92:	bf00      	nop
 802af94:	2003c1ac 	.word	0x2003c1ac

0802af98 <__sinit>:
 802af98:	b510      	push	{r4, lr}
 802af9a:	4604      	mov	r4, r0
 802af9c:	f7ff fff0 	bl	802af80 <__sinit_lock_acquire>
 802afa0:	69a3      	ldr	r3, [r4, #24]
 802afa2:	b11b      	cbz	r3, 802afac <__sinit+0x14>
 802afa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802afa8:	f7ff bff0 	b.w	802af8c <__sinit_lock_release>
 802afac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802afb0:	6523      	str	r3, [r4, #80]	; 0x50
 802afb2:	4b13      	ldr	r3, [pc, #76]	; (802b000 <__sinit+0x68>)
 802afb4:	4a13      	ldr	r2, [pc, #76]	; (802b004 <__sinit+0x6c>)
 802afb6:	681b      	ldr	r3, [r3, #0]
 802afb8:	62a2      	str	r2, [r4, #40]	; 0x28
 802afba:	42a3      	cmp	r3, r4
 802afbc:	bf04      	itt	eq
 802afbe:	2301      	moveq	r3, #1
 802afc0:	61a3      	streq	r3, [r4, #24]
 802afc2:	4620      	mov	r0, r4
 802afc4:	f000 f820 	bl	802b008 <__sfp>
 802afc8:	6060      	str	r0, [r4, #4]
 802afca:	4620      	mov	r0, r4
 802afcc:	f000 f81c 	bl	802b008 <__sfp>
 802afd0:	60a0      	str	r0, [r4, #8]
 802afd2:	4620      	mov	r0, r4
 802afd4:	f000 f818 	bl	802b008 <__sfp>
 802afd8:	2200      	movs	r2, #0
 802afda:	60e0      	str	r0, [r4, #12]
 802afdc:	2104      	movs	r1, #4
 802afde:	6860      	ldr	r0, [r4, #4]
 802afe0:	f7ff ff82 	bl	802aee8 <std>
 802afe4:	68a0      	ldr	r0, [r4, #8]
 802afe6:	2201      	movs	r2, #1
 802afe8:	2109      	movs	r1, #9
 802afea:	f7ff ff7d 	bl	802aee8 <std>
 802afee:	68e0      	ldr	r0, [r4, #12]
 802aff0:	2202      	movs	r2, #2
 802aff2:	2112      	movs	r1, #18
 802aff4:	f7ff ff78 	bl	802aee8 <std>
 802aff8:	2301      	movs	r3, #1
 802affa:	61a3      	str	r3, [r4, #24]
 802affc:	e7d2      	b.n	802afa4 <__sinit+0xc>
 802affe:	bf00      	nop
 802b000:	0802fcb4 	.word	0x0802fcb4
 802b004:	0802af31 	.word	0x0802af31

0802b008 <__sfp>:
 802b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b00a:	4607      	mov	r7, r0
 802b00c:	f7ff ffac 	bl	802af68 <__sfp_lock_acquire>
 802b010:	4b1e      	ldr	r3, [pc, #120]	; (802b08c <__sfp+0x84>)
 802b012:	681e      	ldr	r6, [r3, #0]
 802b014:	69b3      	ldr	r3, [r6, #24]
 802b016:	b913      	cbnz	r3, 802b01e <__sfp+0x16>
 802b018:	4630      	mov	r0, r6
 802b01a:	f7ff ffbd 	bl	802af98 <__sinit>
 802b01e:	3648      	adds	r6, #72	; 0x48
 802b020:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802b024:	3b01      	subs	r3, #1
 802b026:	d503      	bpl.n	802b030 <__sfp+0x28>
 802b028:	6833      	ldr	r3, [r6, #0]
 802b02a:	b30b      	cbz	r3, 802b070 <__sfp+0x68>
 802b02c:	6836      	ldr	r6, [r6, #0]
 802b02e:	e7f7      	b.n	802b020 <__sfp+0x18>
 802b030:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802b034:	b9d5      	cbnz	r5, 802b06c <__sfp+0x64>
 802b036:	4b16      	ldr	r3, [pc, #88]	; (802b090 <__sfp+0x88>)
 802b038:	60e3      	str	r3, [r4, #12]
 802b03a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802b03e:	6665      	str	r5, [r4, #100]	; 0x64
 802b040:	f000 f984 	bl	802b34c <__retarget_lock_init_recursive>
 802b044:	f7ff ff96 	bl	802af74 <__sfp_lock_release>
 802b048:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802b04c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802b050:	6025      	str	r5, [r4, #0]
 802b052:	61a5      	str	r5, [r4, #24]
 802b054:	2208      	movs	r2, #8
 802b056:	4629      	mov	r1, r5
 802b058:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802b05c:	f7fd fee0 	bl	8028e20 <memset>
 802b060:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802b064:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802b068:	4620      	mov	r0, r4
 802b06a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802b06c:	3468      	adds	r4, #104	; 0x68
 802b06e:	e7d9      	b.n	802b024 <__sfp+0x1c>
 802b070:	2104      	movs	r1, #4
 802b072:	4638      	mov	r0, r7
 802b074:	f7ff ff62 	bl	802af3c <__sfmoreglue>
 802b078:	4604      	mov	r4, r0
 802b07a:	6030      	str	r0, [r6, #0]
 802b07c:	2800      	cmp	r0, #0
 802b07e:	d1d5      	bne.n	802b02c <__sfp+0x24>
 802b080:	f7ff ff78 	bl	802af74 <__sfp_lock_release>
 802b084:	230c      	movs	r3, #12
 802b086:	603b      	str	r3, [r7, #0]
 802b088:	e7ee      	b.n	802b068 <__sfp+0x60>
 802b08a:	bf00      	nop
 802b08c:	0802fcb4 	.word	0x0802fcb4
 802b090:	ffff0001 	.word	0xffff0001

0802b094 <_fwalk_reent>:
 802b094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b098:	4606      	mov	r6, r0
 802b09a:	4688      	mov	r8, r1
 802b09c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802b0a0:	2700      	movs	r7, #0
 802b0a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802b0a6:	f1b9 0901 	subs.w	r9, r9, #1
 802b0aa:	d505      	bpl.n	802b0b8 <_fwalk_reent+0x24>
 802b0ac:	6824      	ldr	r4, [r4, #0]
 802b0ae:	2c00      	cmp	r4, #0
 802b0b0:	d1f7      	bne.n	802b0a2 <_fwalk_reent+0xe>
 802b0b2:	4638      	mov	r0, r7
 802b0b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b0b8:	89ab      	ldrh	r3, [r5, #12]
 802b0ba:	2b01      	cmp	r3, #1
 802b0bc:	d907      	bls.n	802b0ce <_fwalk_reent+0x3a>
 802b0be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802b0c2:	3301      	adds	r3, #1
 802b0c4:	d003      	beq.n	802b0ce <_fwalk_reent+0x3a>
 802b0c6:	4629      	mov	r1, r5
 802b0c8:	4630      	mov	r0, r6
 802b0ca:	47c0      	blx	r8
 802b0cc:	4307      	orrs	r7, r0
 802b0ce:	3568      	adds	r5, #104	; 0x68
 802b0d0:	e7e9      	b.n	802b0a6 <_fwalk_reent+0x12>
	...

0802b0d4 <_findenv_r>:
 802b0d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b0d8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 802b148 <_findenv_r+0x74>
 802b0dc:	4607      	mov	r7, r0
 802b0de:	4689      	mov	r9, r1
 802b0e0:	4616      	mov	r6, r2
 802b0e2:	f000 fe61 	bl	802bda8 <__env_lock>
 802b0e6:	f8da 4000 	ldr.w	r4, [sl]
 802b0ea:	b134      	cbz	r4, 802b0fa <_findenv_r+0x26>
 802b0ec:	464b      	mov	r3, r9
 802b0ee:	4698      	mov	r8, r3
 802b0f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b0f4:	b13a      	cbz	r2, 802b106 <_findenv_r+0x32>
 802b0f6:	2a3d      	cmp	r2, #61	; 0x3d
 802b0f8:	d1f9      	bne.n	802b0ee <_findenv_r+0x1a>
 802b0fa:	4638      	mov	r0, r7
 802b0fc:	f000 fe5a 	bl	802bdb4 <__env_unlock>
 802b100:	2000      	movs	r0, #0
 802b102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b106:	eba8 0809 	sub.w	r8, r8, r9
 802b10a:	46a3      	mov	fp, r4
 802b10c:	f854 0b04 	ldr.w	r0, [r4], #4
 802b110:	2800      	cmp	r0, #0
 802b112:	d0f2      	beq.n	802b0fa <_findenv_r+0x26>
 802b114:	4642      	mov	r2, r8
 802b116:	4649      	mov	r1, r9
 802b118:	f7fe fd8f 	bl	8029c3a <strncmp>
 802b11c:	2800      	cmp	r0, #0
 802b11e:	d1f4      	bne.n	802b10a <_findenv_r+0x36>
 802b120:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802b124:	eb03 0508 	add.w	r5, r3, r8
 802b128:	f813 3008 	ldrb.w	r3, [r3, r8]
 802b12c:	2b3d      	cmp	r3, #61	; 0x3d
 802b12e:	d1ec      	bne.n	802b10a <_findenv_r+0x36>
 802b130:	f8da 3000 	ldr.w	r3, [sl]
 802b134:	ebab 0303 	sub.w	r3, fp, r3
 802b138:	109b      	asrs	r3, r3, #2
 802b13a:	4638      	mov	r0, r7
 802b13c:	6033      	str	r3, [r6, #0]
 802b13e:	f000 fe39 	bl	802bdb4 <__env_unlock>
 802b142:	1c68      	adds	r0, r5, #1
 802b144:	e7dd      	b.n	802b102 <_findenv_r+0x2e>
 802b146:	bf00      	nop
 802b148:	20000004 	.word	0x20000004

0802b14c <_getenv_r>:
 802b14c:	b507      	push	{r0, r1, r2, lr}
 802b14e:	aa01      	add	r2, sp, #4
 802b150:	f7ff ffc0 	bl	802b0d4 <_findenv_r>
 802b154:	b003      	add	sp, #12
 802b156:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0802b15c <__gettzinfo>:
 802b15c:	4800      	ldr	r0, [pc, #0]	; (802b160 <__gettzinfo+0x4>)
 802b15e:	4770      	bx	lr
 802b160:	20000120 	.word	0x20000120

0802b164 <localtime_r>:
 802b164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802b168:	4680      	mov	r8, r0
 802b16a:	9101      	str	r1, [sp, #4]
 802b16c:	f7ff fff6 	bl	802b15c <__gettzinfo>
 802b170:	9901      	ldr	r1, [sp, #4]
 802b172:	4605      	mov	r5, r0
 802b174:	4640      	mov	r0, r8
 802b176:	f000 fe35 	bl	802bde4 <gmtime_r>
 802b17a:	6943      	ldr	r3, [r0, #20]
 802b17c:	0799      	lsls	r1, r3, #30
 802b17e:	4604      	mov	r4, r0
 802b180:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 802b184:	d105      	bne.n	802b192 <localtime_r+0x2e>
 802b186:	2264      	movs	r2, #100	; 0x64
 802b188:	fb97 f3f2 	sdiv	r3, r7, r2
 802b18c:	fb02 7313 	mls	r3, r2, r3, r7
 802b190:	bb73      	cbnz	r3, 802b1f0 <localtime_r+0x8c>
 802b192:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802b196:	fb97 f6f3 	sdiv	r6, r7, r3
 802b19a:	fb03 7616 	mls	r6, r3, r6, r7
 802b19e:	fab6 f386 	clz	r3, r6
 802b1a2:	095b      	lsrs	r3, r3, #5
 802b1a4:	4e67      	ldr	r6, [pc, #412]	; (802b344 <localtime_r+0x1e0>)
 802b1a6:	2230      	movs	r2, #48	; 0x30
 802b1a8:	fb02 6603 	mla	r6, r2, r3, r6
 802b1ac:	f7ff faf0 	bl	802a790 <__tz_lock>
 802b1b0:	f7ff fafa 	bl	802a7a8 <_tzset_unlocked>
 802b1b4:	4b64      	ldr	r3, [pc, #400]	; (802b348 <localtime_r+0x1e4>)
 802b1b6:	681b      	ldr	r3, [r3, #0]
 802b1b8:	b34b      	cbz	r3, 802b20e <localtime_r+0xaa>
 802b1ba:	686b      	ldr	r3, [r5, #4]
 802b1bc:	42bb      	cmp	r3, r7
 802b1be:	d119      	bne.n	802b1f4 <localtime_r+0x90>
 802b1c0:	682f      	ldr	r7, [r5, #0]
 802b1c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 802b1c6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802b1ca:	b9df      	cbnz	r7, 802b204 <localtime_r+0xa0>
 802b1cc:	4282      	cmp	r2, r0
 802b1ce:	eb73 0101 	sbcs.w	r1, r3, r1
 802b1d2:	da23      	bge.n	802b21c <localtime_r+0xb8>
 802b1d4:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 802b1d8:	4282      	cmp	r2, r0
 802b1da:	eb73 0701 	sbcs.w	r7, r3, r1
 802b1de:	bfb4      	ite	lt
 802b1e0:	2701      	movlt	r7, #1
 802b1e2:	2700      	movge	r7, #0
 802b1e4:	4282      	cmp	r2, r0
 802b1e6:	418b      	sbcs	r3, r1
 802b1e8:	6227      	str	r7, [r4, #32]
 802b1ea:	db19      	blt.n	802b220 <localtime_r+0xbc>
 802b1ec:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802b1ee:	e018      	b.n	802b222 <localtime_r+0xbe>
 802b1f0:	2301      	movs	r3, #1
 802b1f2:	e7d7      	b.n	802b1a4 <localtime_r+0x40>
 802b1f4:	4638      	mov	r0, r7
 802b1f6:	f7ff fa21 	bl	802a63c <__tzcalc_limits>
 802b1fa:	2800      	cmp	r0, #0
 802b1fc:	d1e0      	bne.n	802b1c0 <localtime_r+0x5c>
 802b1fe:	f04f 33ff 	mov.w	r3, #4294967295
 802b202:	e004      	b.n	802b20e <localtime_r+0xaa>
 802b204:	4282      	cmp	r2, r0
 802b206:	eb73 0101 	sbcs.w	r1, r3, r1
 802b20a:	da02      	bge.n	802b212 <localtime_r+0xae>
 802b20c:	2300      	movs	r3, #0
 802b20e:	6223      	str	r3, [r4, #32]
 802b210:	e7ec      	b.n	802b1ec <localtime_r+0x88>
 802b212:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 802b216:	4282      	cmp	r2, r0
 802b218:	418b      	sbcs	r3, r1
 802b21a:	daf7      	bge.n	802b20c <localtime_r+0xa8>
 802b21c:	2301      	movs	r3, #1
 802b21e:	6223      	str	r3, [r4, #32]
 802b220:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802b222:	6861      	ldr	r1, [r4, #4]
 802b224:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 802b228:	203c      	movs	r0, #60	; 0x3c
 802b22a:	fb93 f5f2 	sdiv	r5, r3, r2
 802b22e:	fb02 3315 	mls	r3, r2, r5, r3
 802b232:	fb93 f2f0 	sdiv	r2, r3, r0
 802b236:	fb00 3012 	mls	r0, r0, r2, r3
 802b23a:	6823      	ldr	r3, [r4, #0]
 802b23c:	1a89      	subs	r1, r1, r2
 802b23e:	68a2      	ldr	r2, [r4, #8]
 802b240:	6061      	str	r1, [r4, #4]
 802b242:	1a1b      	subs	r3, r3, r0
 802b244:	1b52      	subs	r2, r2, r5
 802b246:	2b3b      	cmp	r3, #59	; 0x3b
 802b248:	6023      	str	r3, [r4, #0]
 802b24a:	60a2      	str	r2, [r4, #8]
 802b24c:	dd35      	ble.n	802b2ba <localtime_r+0x156>
 802b24e:	3101      	adds	r1, #1
 802b250:	6061      	str	r1, [r4, #4]
 802b252:	3b3c      	subs	r3, #60	; 0x3c
 802b254:	6023      	str	r3, [r4, #0]
 802b256:	6863      	ldr	r3, [r4, #4]
 802b258:	2b3b      	cmp	r3, #59	; 0x3b
 802b25a:	dd34      	ble.n	802b2c6 <localtime_r+0x162>
 802b25c:	3201      	adds	r2, #1
 802b25e:	60a2      	str	r2, [r4, #8]
 802b260:	3b3c      	subs	r3, #60	; 0x3c
 802b262:	6063      	str	r3, [r4, #4]
 802b264:	68a3      	ldr	r3, [r4, #8]
 802b266:	2b17      	cmp	r3, #23
 802b268:	dd33      	ble.n	802b2d2 <localtime_r+0x16e>
 802b26a:	69e2      	ldr	r2, [r4, #28]
 802b26c:	3201      	adds	r2, #1
 802b26e:	61e2      	str	r2, [r4, #28]
 802b270:	69a2      	ldr	r2, [r4, #24]
 802b272:	3201      	adds	r2, #1
 802b274:	2a06      	cmp	r2, #6
 802b276:	bfc8      	it	gt
 802b278:	2200      	movgt	r2, #0
 802b27a:	61a2      	str	r2, [r4, #24]
 802b27c:	68e2      	ldr	r2, [r4, #12]
 802b27e:	3b18      	subs	r3, #24
 802b280:	3201      	adds	r2, #1
 802b282:	60a3      	str	r3, [r4, #8]
 802b284:	6923      	ldr	r3, [r4, #16]
 802b286:	60e2      	str	r2, [r4, #12]
 802b288:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802b28c:	428a      	cmp	r2, r1
 802b28e:	dd0e      	ble.n	802b2ae <localtime_r+0x14a>
 802b290:	2b0b      	cmp	r3, #11
 802b292:	eba2 0201 	sub.w	r2, r2, r1
 802b296:	60e2      	str	r2, [r4, #12]
 802b298:	f103 0201 	add.w	r2, r3, #1
 802b29c:	bf09      	itett	eq
 802b29e:	6963      	ldreq	r3, [r4, #20]
 802b2a0:	6122      	strne	r2, [r4, #16]
 802b2a2:	2200      	moveq	r2, #0
 802b2a4:	3301      	addeq	r3, #1
 802b2a6:	bf02      	ittt	eq
 802b2a8:	6122      	streq	r2, [r4, #16]
 802b2aa:	6163      	streq	r3, [r4, #20]
 802b2ac:	61e2      	streq	r2, [r4, #28]
 802b2ae:	f7ff fa75 	bl	802a79c <__tz_unlock>
 802b2b2:	4620      	mov	r0, r4
 802b2b4:	b002      	add	sp, #8
 802b2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b2ba:	2b00      	cmp	r3, #0
 802b2bc:	dacb      	bge.n	802b256 <localtime_r+0xf2>
 802b2be:	3901      	subs	r1, #1
 802b2c0:	6061      	str	r1, [r4, #4]
 802b2c2:	333c      	adds	r3, #60	; 0x3c
 802b2c4:	e7c6      	b.n	802b254 <localtime_r+0xf0>
 802b2c6:	2b00      	cmp	r3, #0
 802b2c8:	dacc      	bge.n	802b264 <localtime_r+0x100>
 802b2ca:	3a01      	subs	r2, #1
 802b2cc:	60a2      	str	r2, [r4, #8]
 802b2ce:	333c      	adds	r3, #60	; 0x3c
 802b2d0:	e7c7      	b.n	802b262 <localtime_r+0xfe>
 802b2d2:	2b00      	cmp	r3, #0
 802b2d4:	daeb      	bge.n	802b2ae <localtime_r+0x14a>
 802b2d6:	69e2      	ldr	r2, [r4, #28]
 802b2d8:	3a01      	subs	r2, #1
 802b2da:	61e2      	str	r2, [r4, #28]
 802b2dc:	69a2      	ldr	r2, [r4, #24]
 802b2de:	3a01      	subs	r2, #1
 802b2e0:	bf48      	it	mi
 802b2e2:	2206      	movmi	r2, #6
 802b2e4:	61a2      	str	r2, [r4, #24]
 802b2e6:	68e2      	ldr	r2, [r4, #12]
 802b2e8:	3318      	adds	r3, #24
 802b2ea:	3a01      	subs	r2, #1
 802b2ec:	60e2      	str	r2, [r4, #12]
 802b2ee:	60a3      	str	r3, [r4, #8]
 802b2f0:	2a00      	cmp	r2, #0
 802b2f2:	d1dc      	bne.n	802b2ae <localtime_r+0x14a>
 802b2f4:	6923      	ldr	r3, [r4, #16]
 802b2f6:	3b01      	subs	r3, #1
 802b2f8:	d405      	bmi.n	802b306 <localtime_r+0x1a2>
 802b2fa:	6123      	str	r3, [r4, #16]
 802b2fc:	6923      	ldr	r3, [r4, #16]
 802b2fe:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802b302:	60e3      	str	r3, [r4, #12]
 802b304:	e7d3      	b.n	802b2ae <localtime_r+0x14a>
 802b306:	230b      	movs	r3, #11
 802b308:	6123      	str	r3, [r4, #16]
 802b30a:	6963      	ldr	r3, [r4, #20]
 802b30c:	1e5a      	subs	r2, r3, #1
 802b30e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 802b312:	6162      	str	r2, [r4, #20]
 802b314:	079a      	lsls	r2, r3, #30
 802b316:	d105      	bne.n	802b324 <localtime_r+0x1c0>
 802b318:	2164      	movs	r1, #100	; 0x64
 802b31a:	fb93 f2f1 	sdiv	r2, r3, r1
 802b31e:	fb01 3212 	mls	r2, r1, r2, r3
 802b322:	b962      	cbnz	r2, 802b33e <localtime_r+0x1da>
 802b324:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802b328:	fb93 f1f2 	sdiv	r1, r3, r2
 802b32c:	fb02 3311 	mls	r3, r2, r1, r3
 802b330:	fab3 f383 	clz	r3, r3
 802b334:	095b      	lsrs	r3, r3, #5
 802b336:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 802b33a:	61e3      	str	r3, [r4, #28]
 802b33c:	e7de      	b.n	802b2fc <localtime_r+0x198>
 802b33e:	2301      	movs	r3, #1
 802b340:	e7f9      	b.n	802b336 <localtime_r+0x1d2>
 802b342:	bf00      	nop
 802b344:	08030168 	.word	0x08030168
 802b348:	2003c110 	.word	0x2003c110

0802b34c <__retarget_lock_init_recursive>:
 802b34c:	4770      	bx	lr

0802b34e <__retarget_lock_acquire>:
 802b34e:	4770      	bx	lr

0802b350 <__retarget_lock_acquire_recursive>:
 802b350:	4770      	bx	lr

0802b352 <__retarget_lock_release>:
 802b352:	4770      	bx	lr

0802b354 <__retarget_lock_release_recursive>:
 802b354:	4770      	bx	lr
	...

0802b358 <_lseek_r>:
 802b358:	b538      	push	{r3, r4, r5, lr}
 802b35a:	4d07      	ldr	r5, [pc, #28]	; (802b378 <_lseek_r+0x20>)
 802b35c:	4604      	mov	r4, r0
 802b35e:	4608      	mov	r0, r1
 802b360:	4611      	mov	r1, r2
 802b362:	2200      	movs	r2, #0
 802b364:	602a      	str	r2, [r5, #0]
 802b366:	461a      	mov	r2, r3
 802b368:	f7d6 fdf0 	bl	8001f4c <_lseek>
 802b36c:	1c43      	adds	r3, r0, #1
 802b36e:	d102      	bne.n	802b376 <_lseek_r+0x1e>
 802b370:	682b      	ldr	r3, [r5, #0]
 802b372:	b103      	cbz	r3, 802b376 <_lseek_r+0x1e>
 802b374:	6023      	str	r3, [r4, #0]
 802b376:	bd38      	pop	{r3, r4, r5, pc}
 802b378:	2003c1b0 	.word	0x2003c1b0

0802b37c <__swhatbuf_r>:
 802b37c:	b570      	push	{r4, r5, r6, lr}
 802b37e:	460e      	mov	r6, r1
 802b380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802b384:	2900      	cmp	r1, #0
 802b386:	b096      	sub	sp, #88	; 0x58
 802b388:	4614      	mov	r4, r2
 802b38a:	461d      	mov	r5, r3
 802b38c:	da08      	bge.n	802b3a0 <__swhatbuf_r+0x24>
 802b38e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802b392:	2200      	movs	r2, #0
 802b394:	602a      	str	r2, [r5, #0]
 802b396:	061a      	lsls	r2, r3, #24
 802b398:	d410      	bmi.n	802b3bc <__swhatbuf_r+0x40>
 802b39a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802b39e:	e00e      	b.n	802b3be <__swhatbuf_r+0x42>
 802b3a0:	466a      	mov	r2, sp
 802b3a2:	f000 fd0d 	bl	802bdc0 <_fstat_r>
 802b3a6:	2800      	cmp	r0, #0
 802b3a8:	dbf1      	blt.n	802b38e <__swhatbuf_r+0x12>
 802b3aa:	9a01      	ldr	r2, [sp, #4]
 802b3ac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802b3b0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802b3b4:	425a      	negs	r2, r3
 802b3b6:	415a      	adcs	r2, r3
 802b3b8:	602a      	str	r2, [r5, #0]
 802b3ba:	e7ee      	b.n	802b39a <__swhatbuf_r+0x1e>
 802b3bc:	2340      	movs	r3, #64	; 0x40
 802b3be:	2000      	movs	r0, #0
 802b3c0:	6023      	str	r3, [r4, #0]
 802b3c2:	b016      	add	sp, #88	; 0x58
 802b3c4:	bd70      	pop	{r4, r5, r6, pc}
	...

0802b3c8 <__smakebuf_r>:
 802b3c8:	898b      	ldrh	r3, [r1, #12]
 802b3ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802b3cc:	079d      	lsls	r5, r3, #30
 802b3ce:	4606      	mov	r6, r0
 802b3d0:	460c      	mov	r4, r1
 802b3d2:	d507      	bpl.n	802b3e4 <__smakebuf_r+0x1c>
 802b3d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802b3d8:	6023      	str	r3, [r4, #0]
 802b3da:	6123      	str	r3, [r4, #16]
 802b3dc:	2301      	movs	r3, #1
 802b3de:	6163      	str	r3, [r4, #20]
 802b3e0:	b002      	add	sp, #8
 802b3e2:	bd70      	pop	{r4, r5, r6, pc}
 802b3e4:	ab01      	add	r3, sp, #4
 802b3e6:	466a      	mov	r2, sp
 802b3e8:	f7ff ffc8 	bl	802b37c <__swhatbuf_r>
 802b3ec:	9900      	ldr	r1, [sp, #0]
 802b3ee:	4605      	mov	r5, r0
 802b3f0:	4630      	mov	r0, r6
 802b3f2:	f7fd fffb 	bl	80293ec <_malloc_r>
 802b3f6:	b948      	cbnz	r0, 802b40c <__smakebuf_r+0x44>
 802b3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b3fc:	059a      	lsls	r2, r3, #22
 802b3fe:	d4ef      	bmi.n	802b3e0 <__smakebuf_r+0x18>
 802b400:	f023 0303 	bic.w	r3, r3, #3
 802b404:	f043 0302 	orr.w	r3, r3, #2
 802b408:	81a3      	strh	r3, [r4, #12]
 802b40a:	e7e3      	b.n	802b3d4 <__smakebuf_r+0xc>
 802b40c:	4b0d      	ldr	r3, [pc, #52]	; (802b444 <__smakebuf_r+0x7c>)
 802b40e:	62b3      	str	r3, [r6, #40]	; 0x28
 802b410:	89a3      	ldrh	r3, [r4, #12]
 802b412:	6020      	str	r0, [r4, #0]
 802b414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802b418:	81a3      	strh	r3, [r4, #12]
 802b41a:	9b00      	ldr	r3, [sp, #0]
 802b41c:	6163      	str	r3, [r4, #20]
 802b41e:	9b01      	ldr	r3, [sp, #4]
 802b420:	6120      	str	r0, [r4, #16]
 802b422:	b15b      	cbz	r3, 802b43c <__smakebuf_r+0x74>
 802b424:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802b428:	4630      	mov	r0, r6
 802b42a:	f000 fd87 	bl	802bf3c <_isatty_r>
 802b42e:	b128      	cbz	r0, 802b43c <__smakebuf_r+0x74>
 802b430:	89a3      	ldrh	r3, [r4, #12]
 802b432:	f023 0303 	bic.w	r3, r3, #3
 802b436:	f043 0301 	orr.w	r3, r3, #1
 802b43a:	81a3      	strh	r3, [r4, #12]
 802b43c:	89a0      	ldrh	r0, [r4, #12]
 802b43e:	4305      	orrs	r5, r0
 802b440:	81a5      	strh	r5, [r4, #12]
 802b442:	e7cd      	b.n	802b3e0 <__smakebuf_r+0x18>
 802b444:	0802af31 	.word	0x0802af31

0802b448 <__ascii_mbtowc>:
 802b448:	b082      	sub	sp, #8
 802b44a:	b901      	cbnz	r1, 802b44e <__ascii_mbtowc+0x6>
 802b44c:	a901      	add	r1, sp, #4
 802b44e:	b142      	cbz	r2, 802b462 <__ascii_mbtowc+0x1a>
 802b450:	b14b      	cbz	r3, 802b466 <__ascii_mbtowc+0x1e>
 802b452:	7813      	ldrb	r3, [r2, #0]
 802b454:	600b      	str	r3, [r1, #0]
 802b456:	7812      	ldrb	r2, [r2, #0]
 802b458:	1e10      	subs	r0, r2, #0
 802b45a:	bf18      	it	ne
 802b45c:	2001      	movne	r0, #1
 802b45e:	b002      	add	sp, #8
 802b460:	4770      	bx	lr
 802b462:	4610      	mov	r0, r2
 802b464:	e7fb      	b.n	802b45e <__ascii_mbtowc+0x16>
 802b466:	f06f 0001 	mvn.w	r0, #1
 802b46a:	e7f8      	b.n	802b45e <__ascii_mbtowc+0x16>

0802b46c <__malloc_lock>:
 802b46c:	4801      	ldr	r0, [pc, #4]	; (802b474 <__malloc_lock+0x8>)
 802b46e:	f7ff bf6f 	b.w	802b350 <__retarget_lock_acquire_recursive>
 802b472:	bf00      	nop
 802b474:	2003c1aa 	.word	0x2003c1aa

0802b478 <__malloc_unlock>:
 802b478:	4801      	ldr	r0, [pc, #4]	; (802b480 <__malloc_unlock+0x8>)
 802b47a:	f7ff bf6b 	b.w	802b354 <__retarget_lock_release_recursive>
 802b47e:	bf00      	nop
 802b480:	2003c1aa 	.word	0x2003c1aa

0802b484 <_realloc_r>:
 802b484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b488:	4680      	mov	r8, r0
 802b48a:	4614      	mov	r4, r2
 802b48c:	460e      	mov	r6, r1
 802b48e:	b921      	cbnz	r1, 802b49a <_realloc_r+0x16>
 802b490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802b494:	4611      	mov	r1, r2
 802b496:	f7fd bfa9 	b.w	80293ec <_malloc_r>
 802b49a:	b92a      	cbnz	r2, 802b4a8 <_realloc_r+0x24>
 802b49c:	f7fd ff3a 	bl	8029314 <_free_r>
 802b4a0:	4625      	mov	r5, r4
 802b4a2:	4628      	mov	r0, r5
 802b4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b4a8:	f000 fd58 	bl	802bf5c <_malloc_usable_size_r>
 802b4ac:	4284      	cmp	r4, r0
 802b4ae:	4607      	mov	r7, r0
 802b4b0:	d802      	bhi.n	802b4b8 <_realloc_r+0x34>
 802b4b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802b4b6:	d812      	bhi.n	802b4de <_realloc_r+0x5a>
 802b4b8:	4621      	mov	r1, r4
 802b4ba:	4640      	mov	r0, r8
 802b4bc:	f7fd ff96 	bl	80293ec <_malloc_r>
 802b4c0:	4605      	mov	r5, r0
 802b4c2:	2800      	cmp	r0, #0
 802b4c4:	d0ed      	beq.n	802b4a2 <_realloc_r+0x1e>
 802b4c6:	42bc      	cmp	r4, r7
 802b4c8:	4622      	mov	r2, r4
 802b4ca:	4631      	mov	r1, r6
 802b4cc:	bf28      	it	cs
 802b4ce:	463a      	movcs	r2, r7
 802b4d0:	f7fd fc98 	bl	8028e04 <memcpy>
 802b4d4:	4631      	mov	r1, r6
 802b4d6:	4640      	mov	r0, r8
 802b4d8:	f7fd ff1c 	bl	8029314 <_free_r>
 802b4dc:	e7e1      	b.n	802b4a2 <_realloc_r+0x1e>
 802b4de:	4635      	mov	r5, r6
 802b4e0:	e7df      	b.n	802b4a2 <_realloc_r+0x1e>

0802b4e2 <_sungetc_r>:
 802b4e2:	b538      	push	{r3, r4, r5, lr}
 802b4e4:	1c4b      	adds	r3, r1, #1
 802b4e6:	4614      	mov	r4, r2
 802b4e8:	d103      	bne.n	802b4f2 <_sungetc_r+0x10>
 802b4ea:	f04f 35ff 	mov.w	r5, #4294967295
 802b4ee:	4628      	mov	r0, r5
 802b4f0:	bd38      	pop	{r3, r4, r5, pc}
 802b4f2:	8993      	ldrh	r3, [r2, #12]
 802b4f4:	f023 0320 	bic.w	r3, r3, #32
 802b4f8:	8193      	strh	r3, [r2, #12]
 802b4fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b4fc:	6852      	ldr	r2, [r2, #4]
 802b4fe:	b2cd      	uxtb	r5, r1
 802b500:	b18b      	cbz	r3, 802b526 <_sungetc_r+0x44>
 802b502:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b504:	4293      	cmp	r3, r2
 802b506:	dd08      	ble.n	802b51a <_sungetc_r+0x38>
 802b508:	6823      	ldr	r3, [r4, #0]
 802b50a:	1e5a      	subs	r2, r3, #1
 802b50c:	6022      	str	r2, [r4, #0]
 802b50e:	f803 5c01 	strb.w	r5, [r3, #-1]
 802b512:	6863      	ldr	r3, [r4, #4]
 802b514:	3301      	adds	r3, #1
 802b516:	6063      	str	r3, [r4, #4]
 802b518:	e7e9      	b.n	802b4ee <_sungetc_r+0xc>
 802b51a:	4621      	mov	r1, r4
 802b51c:	f000 fbfc 	bl	802bd18 <__submore>
 802b520:	2800      	cmp	r0, #0
 802b522:	d0f1      	beq.n	802b508 <_sungetc_r+0x26>
 802b524:	e7e1      	b.n	802b4ea <_sungetc_r+0x8>
 802b526:	6921      	ldr	r1, [r4, #16]
 802b528:	6823      	ldr	r3, [r4, #0]
 802b52a:	b151      	cbz	r1, 802b542 <_sungetc_r+0x60>
 802b52c:	4299      	cmp	r1, r3
 802b52e:	d208      	bcs.n	802b542 <_sungetc_r+0x60>
 802b530:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802b534:	42a9      	cmp	r1, r5
 802b536:	d104      	bne.n	802b542 <_sungetc_r+0x60>
 802b538:	3b01      	subs	r3, #1
 802b53a:	3201      	adds	r2, #1
 802b53c:	6023      	str	r3, [r4, #0]
 802b53e:	6062      	str	r2, [r4, #4]
 802b540:	e7d5      	b.n	802b4ee <_sungetc_r+0xc>
 802b542:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802b546:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b54a:	6363      	str	r3, [r4, #52]	; 0x34
 802b54c:	2303      	movs	r3, #3
 802b54e:	63a3      	str	r3, [r4, #56]	; 0x38
 802b550:	4623      	mov	r3, r4
 802b552:	f803 5f46 	strb.w	r5, [r3, #70]!
 802b556:	6023      	str	r3, [r4, #0]
 802b558:	2301      	movs	r3, #1
 802b55a:	e7dc      	b.n	802b516 <_sungetc_r+0x34>

0802b55c <__ssrefill_r>:
 802b55c:	b510      	push	{r4, lr}
 802b55e:	460c      	mov	r4, r1
 802b560:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802b562:	b169      	cbz	r1, 802b580 <__ssrefill_r+0x24>
 802b564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b568:	4299      	cmp	r1, r3
 802b56a:	d001      	beq.n	802b570 <__ssrefill_r+0x14>
 802b56c:	f7fd fed2 	bl	8029314 <_free_r>
 802b570:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b572:	6063      	str	r3, [r4, #4]
 802b574:	2000      	movs	r0, #0
 802b576:	6360      	str	r0, [r4, #52]	; 0x34
 802b578:	b113      	cbz	r3, 802b580 <__ssrefill_r+0x24>
 802b57a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b57c:	6023      	str	r3, [r4, #0]
 802b57e:	bd10      	pop	{r4, pc}
 802b580:	6923      	ldr	r3, [r4, #16]
 802b582:	6023      	str	r3, [r4, #0]
 802b584:	2300      	movs	r3, #0
 802b586:	6063      	str	r3, [r4, #4]
 802b588:	89a3      	ldrh	r3, [r4, #12]
 802b58a:	f043 0320 	orr.w	r3, r3, #32
 802b58e:	81a3      	strh	r3, [r4, #12]
 802b590:	f04f 30ff 	mov.w	r0, #4294967295
 802b594:	e7f3      	b.n	802b57e <__ssrefill_r+0x22>
	...

0802b598 <__ssvfiscanf_r>:
 802b598:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b59c:	460c      	mov	r4, r1
 802b59e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802b5a2:	2100      	movs	r1, #0
 802b5a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802b5a8:	49a6      	ldr	r1, [pc, #664]	; (802b844 <__ssvfiscanf_r+0x2ac>)
 802b5aa:	91a0      	str	r1, [sp, #640]	; 0x280
 802b5ac:	f10d 0804 	add.w	r8, sp, #4
 802b5b0:	49a5      	ldr	r1, [pc, #660]	; (802b848 <__ssvfiscanf_r+0x2b0>)
 802b5b2:	4fa6      	ldr	r7, [pc, #664]	; (802b84c <__ssvfiscanf_r+0x2b4>)
 802b5b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 802b850 <__ssvfiscanf_r+0x2b8>
 802b5b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802b5bc:	4606      	mov	r6, r0
 802b5be:	91a1      	str	r1, [sp, #644]	; 0x284
 802b5c0:	9300      	str	r3, [sp, #0]
 802b5c2:	7813      	ldrb	r3, [r2, #0]
 802b5c4:	2b00      	cmp	r3, #0
 802b5c6:	f000 815a 	beq.w	802b87e <__ssvfiscanf_r+0x2e6>
 802b5ca:	5dd9      	ldrb	r1, [r3, r7]
 802b5cc:	f011 0108 	ands.w	r1, r1, #8
 802b5d0:	f102 0501 	add.w	r5, r2, #1
 802b5d4:	d019      	beq.n	802b60a <__ssvfiscanf_r+0x72>
 802b5d6:	6863      	ldr	r3, [r4, #4]
 802b5d8:	2b00      	cmp	r3, #0
 802b5da:	dd0f      	ble.n	802b5fc <__ssvfiscanf_r+0x64>
 802b5dc:	6823      	ldr	r3, [r4, #0]
 802b5de:	781a      	ldrb	r2, [r3, #0]
 802b5e0:	5cba      	ldrb	r2, [r7, r2]
 802b5e2:	0712      	lsls	r2, r2, #28
 802b5e4:	d401      	bmi.n	802b5ea <__ssvfiscanf_r+0x52>
 802b5e6:	462a      	mov	r2, r5
 802b5e8:	e7eb      	b.n	802b5c2 <__ssvfiscanf_r+0x2a>
 802b5ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b5ec:	3201      	adds	r2, #1
 802b5ee:	9245      	str	r2, [sp, #276]	; 0x114
 802b5f0:	6862      	ldr	r2, [r4, #4]
 802b5f2:	3301      	adds	r3, #1
 802b5f4:	3a01      	subs	r2, #1
 802b5f6:	6062      	str	r2, [r4, #4]
 802b5f8:	6023      	str	r3, [r4, #0]
 802b5fa:	e7ec      	b.n	802b5d6 <__ssvfiscanf_r+0x3e>
 802b5fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b5fe:	4621      	mov	r1, r4
 802b600:	4630      	mov	r0, r6
 802b602:	4798      	blx	r3
 802b604:	2800      	cmp	r0, #0
 802b606:	d0e9      	beq.n	802b5dc <__ssvfiscanf_r+0x44>
 802b608:	e7ed      	b.n	802b5e6 <__ssvfiscanf_r+0x4e>
 802b60a:	2b25      	cmp	r3, #37	; 0x25
 802b60c:	d012      	beq.n	802b634 <__ssvfiscanf_r+0x9c>
 802b60e:	469a      	mov	sl, r3
 802b610:	6863      	ldr	r3, [r4, #4]
 802b612:	2b00      	cmp	r3, #0
 802b614:	f340 8091 	ble.w	802b73a <__ssvfiscanf_r+0x1a2>
 802b618:	6822      	ldr	r2, [r4, #0]
 802b61a:	7813      	ldrb	r3, [r2, #0]
 802b61c:	4553      	cmp	r3, sl
 802b61e:	f040 812e 	bne.w	802b87e <__ssvfiscanf_r+0x2e6>
 802b622:	6863      	ldr	r3, [r4, #4]
 802b624:	3b01      	subs	r3, #1
 802b626:	6063      	str	r3, [r4, #4]
 802b628:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802b62a:	3201      	adds	r2, #1
 802b62c:	3301      	adds	r3, #1
 802b62e:	6022      	str	r2, [r4, #0]
 802b630:	9345      	str	r3, [sp, #276]	; 0x114
 802b632:	e7d8      	b.n	802b5e6 <__ssvfiscanf_r+0x4e>
 802b634:	9141      	str	r1, [sp, #260]	; 0x104
 802b636:	9143      	str	r1, [sp, #268]	; 0x10c
 802b638:	7853      	ldrb	r3, [r2, #1]
 802b63a:	2b2a      	cmp	r3, #42	; 0x2a
 802b63c:	bf02      	ittt	eq
 802b63e:	2310      	moveq	r3, #16
 802b640:	1c95      	addeq	r5, r2, #2
 802b642:	9341      	streq	r3, [sp, #260]	; 0x104
 802b644:	220a      	movs	r2, #10
 802b646:	46aa      	mov	sl, r5
 802b648:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802b64c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802b650:	2b09      	cmp	r3, #9
 802b652:	d91d      	bls.n	802b690 <__ssvfiscanf_r+0xf8>
 802b654:	487e      	ldr	r0, [pc, #504]	; (802b850 <__ssvfiscanf_r+0x2b8>)
 802b656:	2203      	movs	r2, #3
 802b658:	f7d4 fdfa 	bl	8000250 <memchr>
 802b65c:	b140      	cbz	r0, 802b670 <__ssvfiscanf_r+0xd8>
 802b65e:	2301      	movs	r3, #1
 802b660:	eba0 0009 	sub.w	r0, r0, r9
 802b664:	fa03 f000 	lsl.w	r0, r3, r0
 802b668:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b66a:	4318      	orrs	r0, r3
 802b66c:	9041      	str	r0, [sp, #260]	; 0x104
 802b66e:	4655      	mov	r5, sl
 802b670:	f815 3b01 	ldrb.w	r3, [r5], #1
 802b674:	2b78      	cmp	r3, #120	; 0x78
 802b676:	d806      	bhi.n	802b686 <__ssvfiscanf_r+0xee>
 802b678:	2b57      	cmp	r3, #87	; 0x57
 802b67a:	d810      	bhi.n	802b69e <__ssvfiscanf_r+0x106>
 802b67c:	2b25      	cmp	r3, #37	; 0x25
 802b67e:	d0c6      	beq.n	802b60e <__ssvfiscanf_r+0x76>
 802b680:	d856      	bhi.n	802b730 <__ssvfiscanf_r+0x198>
 802b682:	2b00      	cmp	r3, #0
 802b684:	d064      	beq.n	802b750 <__ssvfiscanf_r+0x1b8>
 802b686:	2303      	movs	r3, #3
 802b688:	9347      	str	r3, [sp, #284]	; 0x11c
 802b68a:	230a      	movs	r3, #10
 802b68c:	9342      	str	r3, [sp, #264]	; 0x108
 802b68e:	e071      	b.n	802b774 <__ssvfiscanf_r+0x1dc>
 802b690:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802b692:	fb02 1103 	mla	r1, r2, r3, r1
 802b696:	3930      	subs	r1, #48	; 0x30
 802b698:	9143      	str	r1, [sp, #268]	; 0x10c
 802b69a:	4655      	mov	r5, sl
 802b69c:	e7d3      	b.n	802b646 <__ssvfiscanf_r+0xae>
 802b69e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802b6a2:	2a20      	cmp	r2, #32
 802b6a4:	d8ef      	bhi.n	802b686 <__ssvfiscanf_r+0xee>
 802b6a6:	a101      	add	r1, pc, #4	; (adr r1, 802b6ac <__ssvfiscanf_r+0x114>)
 802b6a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802b6ac:	0802b75f 	.word	0x0802b75f
 802b6b0:	0802b687 	.word	0x0802b687
 802b6b4:	0802b687 	.word	0x0802b687
 802b6b8:	0802b7bd 	.word	0x0802b7bd
 802b6bc:	0802b687 	.word	0x0802b687
 802b6c0:	0802b687 	.word	0x0802b687
 802b6c4:	0802b687 	.word	0x0802b687
 802b6c8:	0802b687 	.word	0x0802b687
 802b6cc:	0802b687 	.word	0x0802b687
 802b6d0:	0802b687 	.word	0x0802b687
 802b6d4:	0802b687 	.word	0x0802b687
 802b6d8:	0802b7d3 	.word	0x0802b7d3
 802b6dc:	0802b7a9 	.word	0x0802b7a9
 802b6e0:	0802b737 	.word	0x0802b737
 802b6e4:	0802b737 	.word	0x0802b737
 802b6e8:	0802b737 	.word	0x0802b737
 802b6ec:	0802b687 	.word	0x0802b687
 802b6f0:	0802b7ad 	.word	0x0802b7ad
 802b6f4:	0802b687 	.word	0x0802b687
 802b6f8:	0802b687 	.word	0x0802b687
 802b6fc:	0802b687 	.word	0x0802b687
 802b700:	0802b687 	.word	0x0802b687
 802b704:	0802b7e3 	.word	0x0802b7e3
 802b708:	0802b7b5 	.word	0x0802b7b5
 802b70c:	0802b757 	.word	0x0802b757
 802b710:	0802b687 	.word	0x0802b687
 802b714:	0802b687 	.word	0x0802b687
 802b718:	0802b7df 	.word	0x0802b7df
 802b71c:	0802b687 	.word	0x0802b687
 802b720:	0802b7a9 	.word	0x0802b7a9
 802b724:	0802b687 	.word	0x0802b687
 802b728:	0802b687 	.word	0x0802b687
 802b72c:	0802b75f 	.word	0x0802b75f
 802b730:	3b45      	subs	r3, #69	; 0x45
 802b732:	2b02      	cmp	r3, #2
 802b734:	d8a7      	bhi.n	802b686 <__ssvfiscanf_r+0xee>
 802b736:	2305      	movs	r3, #5
 802b738:	e01b      	b.n	802b772 <__ssvfiscanf_r+0x1da>
 802b73a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b73c:	4621      	mov	r1, r4
 802b73e:	4630      	mov	r0, r6
 802b740:	4798      	blx	r3
 802b742:	2800      	cmp	r0, #0
 802b744:	f43f af68 	beq.w	802b618 <__ssvfiscanf_r+0x80>
 802b748:	9844      	ldr	r0, [sp, #272]	; 0x110
 802b74a:	2800      	cmp	r0, #0
 802b74c:	f040 808d 	bne.w	802b86a <__ssvfiscanf_r+0x2d2>
 802b750:	f04f 30ff 	mov.w	r0, #4294967295
 802b754:	e08f      	b.n	802b876 <__ssvfiscanf_r+0x2de>
 802b756:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802b758:	f042 0220 	orr.w	r2, r2, #32
 802b75c:	9241      	str	r2, [sp, #260]	; 0x104
 802b75e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802b760:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b764:	9241      	str	r2, [sp, #260]	; 0x104
 802b766:	2210      	movs	r2, #16
 802b768:	2b6f      	cmp	r3, #111	; 0x6f
 802b76a:	9242      	str	r2, [sp, #264]	; 0x108
 802b76c:	bf34      	ite	cc
 802b76e:	2303      	movcc	r3, #3
 802b770:	2304      	movcs	r3, #4
 802b772:	9347      	str	r3, [sp, #284]	; 0x11c
 802b774:	6863      	ldr	r3, [r4, #4]
 802b776:	2b00      	cmp	r3, #0
 802b778:	dd42      	ble.n	802b800 <__ssvfiscanf_r+0x268>
 802b77a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b77c:	0659      	lsls	r1, r3, #25
 802b77e:	d404      	bmi.n	802b78a <__ssvfiscanf_r+0x1f2>
 802b780:	6823      	ldr	r3, [r4, #0]
 802b782:	781a      	ldrb	r2, [r3, #0]
 802b784:	5cba      	ldrb	r2, [r7, r2]
 802b786:	0712      	lsls	r2, r2, #28
 802b788:	d441      	bmi.n	802b80e <__ssvfiscanf_r+0x276>
 802b78a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802b78c:	2b02      	cmp	r3, #2
 802b78e:	dc50      	bgt.n	802b832 <__ssvfiscanf_r+0x29a>
 802b790:	466b      	mov	r3, sp
 802b792:	4622      	mov	r2, r4
 802b794:	a941      	add	r1, sp, #260	; 0x104
 802b796:	4630      	mov	r0, r6
 802b798:	f000 f876 	bl	802b888 <_scanf_chars>
 802b79c:	2801      	cmp	r0, #1
 802b79e:	d06e      	beq.n	802b87e <__ssvfiscanf_r+0x2e6>
 802b7a0:	2802      	cmp	r0, #2
 802b7a2:	f47f af20 	bne.w	802b5e6 <__ssvfiscanf_r+0x4e>
 802b7a6:	e7cf      	b.n	802b748 <__ssvfiscanf_r+0x1b0>
 802b7a8:	220a      	movs	r2, #10
 802b7aa:	e7dd      	b.n	802b768 <__ssvfiscanf_r+0x1d0>
 802b7ac:	2300      	movs	r3, #0
 802b7ae:	9342      	str	r3, [sp, #264]	; 0x108
 802b7b0:	2303      	movs	r3, #3
 802b7b2:	e7de      	b.n	802b772 <__ssvfiscanf_r+0x1da>
 802b7b4:	2308      	movs	r3, #8
 802b7b6:	9342      	str	r3, [sp, #264]	; 0x108
 802b7b8:	2304      	movs	r3, #4
 802b7ba:	e7da      	b.n	802b772 <__ssvfiscanf_r+0x1da>
 802b7bc:	4629      	mov	r1, r5
 802b7be:	4640      	mov	r0, r8
 802b7c0:	f000 f9c6 	bl	802bb50 <__sccl>
 802b7c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b7ca:	9341      	str	r3, [sp, #260]	; 0x104
 802b7cc:	4605      	mov	r5, r0
 802b7ce:	2301      	movs	r3, #1
 802b7d0:	e7cf      	b.n	802b772 <__ssvfiscanf_r+0x1da>
 802b7d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b7d8:	9341      	str	r3, [sp, #260]	; 0x104
 802b7da:	2300      	movs	r3, #0
 802b7dc:	e7c9      	b.n	802b772 <__ssvfiscanf_r+0x1da>
 802b7de:	2302      	movs	r3, #2
 802b7e0:	e7c7      	b.n	802b772 <__ssvfiscanf_r+0x1da>
 802b7e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 802b7e4:	06c3      	lsls	r3, r0, #27
 802b7e6:	f53f aefe 	bmi.w	802b5e6 <__ssvfiscanf_r+0x4e>
 802b7ea:	9b00      	ldr	r3, [sp, #0]
 802b7ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b7ee:	1d19      	adds	r1, r3, #4
 802b7f0:	9100      	str	r1, [sp, #0]
 802b7f2:	681b      	ldr	r3, [r3, #0]
 802b7f4:	f010 0f01 	tst.w	r0, #1
 802b7f8:	bf14      	ite	ne
 802b7fa:	801a      	strhne	r2, [r3, #0]
 802b7fc:	601a      	streq	r2, [r3, #0]
 802b7fe:	e6f2      	b.n	802b5e6 <__ssvfiscanf_r+0x4e>
 802b800:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b802:	4621      	mov	r1, r4
 802b804:	4630      	mov	r0, r6
 802b806:	4798      	blx	r3
 802b808:	2800      	cmp	r0, #0
 802b80a:	d0b6      	beq.n	802b77a <__ssvfiscanf_r+0x1e2>
 802b80c:	e79c      	b.n	802b748 <__ssvfiscanf_r+0x1b0>
 802b80e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b810:	3201      	adds	r2, #1
 802b812:	9245      	str	r2, [sp, #276]	; 0x114
 802b814:	6862      	ldr	r2, [r4, #4]
 802b816:	3a01      	subs	r2, #1
 802b818:	2a00      	cmp	r2, #0
 802b81a:	6062      	str	r2, [r4, #4]
 802b81c:	dd02      	ble.n	802b824 <__ssvfiscanf_r+0x28c>
 802b81e:	3301      	adds	r3, #1
 802b820:	6023      	str	r3, [r4, #0]
 802b822:	e7ad      	b.n	802b780 <__ssvfiscanf_r+0x1e8>
 802b824:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b826:	4621      	mov	r1, r4
 802b828:	4630      	mov	r0, r6
 802b82a:	4798      	blx	r3
 802b82c:	2800      	cmp	r0, #0
 802b82e:	d0a7      	beq.n	802b780 <__ssvfiscanf_r+0x1e8>
 802b830:	e78a      	b.n	802b748 <__ssvfiscanf_r+0x1b0>
 802b832:	2b04      	cmp	r3, #4
 802b834:	dc0e      	bgt.n	802b854 <__ssvfiscanf_r+0x2bc>
 802b836:	466b      	mov	r3, sp
 802b838:	4622      	mov	r2, r4
 802b83a:	a941      	add	r1, sp, #260	; 0x104
 802b83c:	4630      	mov	r0, r6
 802b83e:	f000 f87d 	bl	802b93c <_scanf_i>
 802b842:	e7ab      	b.n	802b79c <__ssvfiscanf_r+0x204>
 802b844:	0802b4e3 	.word	0x0802b4e3
 802b848:	0802b55d 	.word	0x0802b55d
 802b84c:	0802fff9 	.word	0x0802fff9
 802b850:	0802fd1e 	.word	0x0802fd1e
 802b854:	4b0b      	ldr	r3, [pc, #44]	; (802b884 <__ssvfiscanf_r+0x2ec>)
 802b856:	2b00      	cmp	r3, #0
 802b858:	f43f aec5 	beq.w	802b5e6 <__ssvfiscanf_r+0x4e>
 802b85c:	466b      	mov	r3, sp
 802b85e:	4622      	mov	r2, r4
 802b860:	a941      	add	r1, sp, #260	; 0x104
 802b862:	4630      	mov	r0, r6
 802b864:	f3af 8000 	nop.w
 802b868:	e798      	b.n	802b79c <__ssvfiscanf_r+0x204>
 802b86a:	89a3      	ldrh	r3, [r4, #12]
 802b86c:	f013 0f40 	tst.w	r3, #64	; 0x40
 802b870:	bf18      	it	ne
 802b872:	f04f 30ff 	movne.w	r0, #4294967295
 802b876:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802b87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b87e:	9844      	ldr	r0, [sp, #272]	; 0x110
 802b880:	e7f9      	b.n	802b876 <__ssvfiscanf_r+0x2de>
 802b882:	bf00      	nop
 802b884:	00000000 	.word	0x00000000

0802b888 <_scanf_chars>:
 802b888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b88c:	4615      	mov	r5, r2
 802b88e:	688a      	ldr	r2, [r1, #8]
 802b890:	4680      	mov	r8, r0
 802b892:	460c      	mov	r4, r1
 802b894:	b932      	cbnz	r2, 802b8a4 <_scanf_chars+0x1c>
 802b896:	698a      	ldr	r2, [r1, #24]
 802b898:	2a00      	cmp	r2, #0
 802b89a:	bf0c      	ite	eq
 802b89c:	2201      	moveq	r2, #1
 802b89e:	f04f 32ff 	movne.w	r2, #4294967295
 802b8a2:	608a      	str	r2, [r1, #8]
 802b8a4:	6822      	ldr	r2, [r4, #0]
 802b8a6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802b938 <_scanf_chars+0xb0>
 802b8aa:	06d1      	lsls	r1, r2, #27
 802b8ac:	bf5f      	itttt	pl
 802b8ae:	681a      	ldrpl	r2, [r3, #0]
 802b8b0:	1d11      	addpl	r1, r2, #4
 802b8b2:	6019      	strpl	r1, [r3, #0]
 802b8b4:	6816      	ldrpl	r6, [r2, #0]
 802b8b6:	2700      	movs	r7, #0
 802b8b8:	69a0      	ldr	r0, [r4, #24]
 802b8ba:	b188      	cbz	r0, 802b8e0 <_scanf_chars+0x58>
 802b8bc:	2801      	cmp	r0, #1
 802b8be:	d107      	bne.n	802b8d0 <_scanf_chars+0x48>
 802b8c0:	682a      	ldr	r2, [r5, #0]
 802b8c2:	7811      	ldrb	r1, [r2, #0]
 802b8c4:	6962      	ldr	r2, [r4, #20]
 802b8c6:	5c52      	ldrb	r2, [r2, r1]
 802b8c8:	b952      	cbnz	r2, 802b8e0 <_scanf_chars+0x58>
 802b8ca:	2f00      	cmp	r7, #0
 802b8cc:	d031      	beq.n	802b932 <_scanf_chars+0xaa>
 802b8ce:	e022      	b.n	802b916 <_scanf_chars+0x8e>
 802b8d0:	2802      	cmp	r0, #2
 802b8d2:	d120      	bne.n	802b916 <_scanf_chars+0x8e>
 802b8d4:	682b      	ldr	r3, [r5, #0]
 802b8d6:	781b      	ldrb	r3, [r3, #0]
 802b8d8:	f813 3009 	ldrb.w	r3, [r3, r9]
 802b8dc:	071b      	lsls	r3, r3, #28
 802b8de:	d41a      	bmi.n	802b916 <_scanf_chars+0x8e>
 802b8e0:	6823      	ldr	r3, [r4, #0]
 802b8e2:	06da      	lsls	r2, r3, #27
 802b8e4:	bf5e      	ittt	pl
 802b8e6:	682b      	ldrpl	r3, [r5, #0]
 802b8e8:	781b      	ldrbpl	r3, [r3, #0]
 802b8ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 802b8ee:	682a      	ldr	r2, [r5, #0]
 802b8f0:	686b      	ldr	r3, [r5, #4]
 802b8f2:	3201      	adds	r2, #1
 802b8f4:	602a      	str	r2, [r5, #0]
 802b8f6:	68a2      	ldr	r2, [r4, #8]
 802b8f8:	3b01      	subs	r3, #1
 802b8fa:	3a01      	subs	r2, #1
 802b8fc:	606b      	str	r3, [r5, #4]
 802b8fe:	3701      	adds	r7, #1
 802b900:	60a2      	str	r2, [r4, #8]
 802b902:	b142      	cbz	r2, 802b916 <_scanf_chars+0x8e>
 802b904:	2b00      	cmp	r3, #0
 802b906:	dcd7      	bgt.n	802b8b8 <_scanf_chars+0x30>
 802b908:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802b90c:	4629      	mov	r1, r5
 802b90e:	4640      	mov	r0, r8
 802b910:	4798      	blx	r3
 802b912:	2800      	cmp	r0, #0
 802b914:	d0d0      	beq.n	802b8b8 <_scanf_chars+0x30>
 802b916:	6823      	ldr	r3, [r4, #0]
 802b918:	f013 0310 	ands.w	r3, r3, #16
 802b91c:	d105      	bne.n	802b92a <_scanf_chars+0xa2>
 802b91e:	68e2      	ldr	r2, [r4, #12]
 802b920:	3201      	adds	r2, #1
 802b922:	60e2      	str	r2, [r4, #12]
 802b924:	69a2      	ldr	r2, [r4, #24]
 802b926:	b102      	cbz	r2, 802b92a <_scanf_chars+0xa2>
 802b928:	7033      	strb	r3, [r6, #0]
 802b92a:	6923      	ldr	r3, [r4, #16]
 802b92c:	443b      	add	r3, r7
 802b92e:	6123      	str	r3, [r4, #16]
 802b930:	2000      	movs	r0, #0
 802b932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b936:	bf00      	nop
 802b938:	0802fff9 	.word	0x0802fff9

0802b93c <_scanf_i>:
 802b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b940:	4698      	mov	r8, r3
 802b942:	4b76      	ldr	r3, [pc, #472]	; (802bb1c <_scanf_i+0x1e0>)
 802b944:	460c      	mov	r4, r1
 802b946:	4682      	mov	sl, r0
 802b948:	4616      	mov	r6, r2
 802b94a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802b94e:	b087      	sub	sp, #28
 802b950:	ab03      	add	r3, sp, #12
 802b952:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b956:	4b72      	ldr	r3, [pc, #456]	; (802bb20 <_scanf_i+0x1e4>)
 802b958:	69a1      	ldr	r1, [r4, #24]
 802b95a:	4a72      	ldr	r2, [pc, #456]	; (802bb24 <_scanf_i+0x1e8>)
 802b95c:	2903      	cmp	r1, #3
 802b95e:	bf18      	it	ne
 802b960:	461a      	movne	r2, r3
 802b962:	68a3      	ldr	r3, [r4, #8]
 802b964:	9201      	str	r2, [sp, #4]
 802b966:	1e5a      	subs	r2, r3, #1
 802b968:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802b96c:	bf88      	it	hi
 802b96e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802b972:	4627      	mov	r7, r4
 802b974:	bf82      	ittt	hi
 802b976:	eb03 0905 	addhi.w	r9, r3, r5
 802b97a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802b97e:	60a3      	strhi	r3, [r4, #8]
 802b980:	f857 3b1c 	ldr.w	r3, [r7], #28
 802b984:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802b988:	bf98      	it	ls
 802b98a:	f04f 0900 	movls.w	r9, #0
 802b98e:	6023      	str	r3, [r4, #0]
 802b990:	463d      	mov	r5, r7
 802b992:	f04f 0b00 	mov.w	fp, #0
 802b996:	6831      	ldr	r1, [r6, #0]
 802b998:	ab03      	add	r3, sp, #12
 802b99a:	7809      	ldrb	r1, [r1, #0]
 802b99c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802b9a0:	2202      	movs	r2, #2
 802b9a2:	f7d4 fc55 	bl	8000250 <memchr>
 802b9a6:	b328      	cbz	r0, 802b9f4 <_scanf_i+0xb8>
 802b9a8:	f1bb 0f01 	cmp.w	fp, #1
 802b9ac:	d159      	bne.n	802ba62 <_scanf_i+0x126>
 802b9ae:	6862      	ldr	r2, [r4, #4]
 802b9b0:	b92a      	cbnz	r2, 802b9be <_scanf_i+0x82>
 802b9b2:	6822      	ldr	r2, [r4, #0]
 802b9b4:	2308      	movs	r3, #8
 802b9b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b9ba:	6063      	str	r3, [r4, #4]
 802b9bc:	6022      	str	r2, [r4, #0]
 802b9be:	6822      	ldr	r2, [r4, #0]
 802b9c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802b9c4:	6022      	str	r2, [r4, #0]
 802b9c6:	68a2      	ldr	r2, [r4, #8]
 802b9c8:	1e51      	subs	r1, r2, #1
 802b9ca:	60a1      	str	r1, [r4, #8]
 802b9cc:	b192      	cbz	r2, 802b9f4 <_scanf_i+0xb8>
 802b9ce:	6832      	ldr	r2, [r6, #0]
 802b9d0:	1c51      	adds	r1, r2, #1
 802b9d2:	6031      	str	r1, [r6, #0]
 802b9d4:	7812      	ldrb	r2, [r2, #0]
 802b9d6:	f805 2b01 	strb.w	r2, [r5], #1
 802b9da:	6872      	ldr	r2, [r6, #4]
 802b9dc:	3a01      	subs	r2, #1
 802b9de:	2a00      	cmp	r2, #0
 802b9e0:	6072      	str	r2, [r6, #4]
 802b9e2:	dc07      	bgt.n	802b9f4 <_scanf_i+0xb8>
 802b9e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802b9e8:	4631      	mov	r1, r6
 802b9ea:	4650      	mov	r0, sl
 802b9ec:	4790      	blx	r2
 802b9ee:	2800      	cmp	r0, #0
 802b9f0:	f040 8085 	bne.w	802bafe <_scanf_i+0x1c2>
 802b9f4:	f10b 0b01 	add.w	fp, fp, #1
 802b9f8:	f1bb 0f03 	cmp.w	fp, #3
 802b9fc:	d1cb      	bne.n	802b996 <_scanf_i+0x5a>
 802b9fe:	6863      	ldr	r3, [r4, #4]
 802ba00:	b90b      	cbnz	r3, 802ba06 <_scanf_i+0xca>
 802ba02:	230a      	movs	r3, #10
 802ba04:	6063      	str	r3, [r4, #4]
 802ba06:	6863      	ldr	r3, [r4, #4]
 802ba08:	4947      	ldr	r1, [pc, #284]	; (802bb28 <_scanf_i+0x1ec>)
 802ba0a:	6960      	ldr	r0, [r4, #20]
 802ba0c:	1ac9      	subs	r1, r1, r3
 802ba0e:	f000 f89f 	bl	802bb50 <__sccl>
 802ba12:	f04f 0b00 	mov.w	fp, #0
 802ba16:	68a3      	ldr	r3, [r4, #8]
 802ba18:	6822      	ldr	r2, [r4, #0]
 802ba1a:	2b00      	cmp	r3, #0
 802ba1c:	d03d      	beq.n	802ba9a <_scanf_i+0x15e>
 802ba1e:	6831      	ldr	r1, [r6, #0]
 802ba20:	6960      	ldr	r0, [r4, #20]
 802ba22:	f891 c000 	ldrb.w	ip, [r1]
 802ba26:	f810 000c 	ldrb.w	r0, [r0, ip]
 802ba2a:	2800      	cmp	r0, #0
 802ba2c:	d035      	beq.n	802ba9a <_scanf_i+0x15e>
 802ba2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802ba32:	d124      	bne.n	802ba7e <_scanf_i+0x142>
 802ba34:	0510      	lsls	r0, r2, #20
 802ba36:	d522      	bpl.n	802ba7e <_scanf_i+0x142>
 802ba38:	f10b 0b01 	add.w	fp, fp, #1
 802ba3c:	f1b9 0f00 	cmp.w	r9, #0
 802ba40:	d003      	beq.n	802ba4a <_scanf_i+0x10e>
 802ba42:	3301      	adds	r3, #1
 802ba44:	f109 39ff 	add.w	r9, r9, #4294967295
 802ba48:	60a3      	str	r3, [r4, #8]
 802ba4a:	6873      	ldr	r3, [r6, #4]
 802ba4c:	3b01      	subs	r3, #1
 802ba4e:	2b00      	cmp	r3, #0
 802ba50:	6073      	str	r3, [r6, #4]
 802ba52:	dd1b      	ble.n	802ba8c <_scanf_i+0x150>
 802ba54:	6833      	ldr	r3, [r6, #0]
 802ba56:	3301      	adds	r3, #1
 802ba58:	6033      	str	r3, [r6, #0]
 802ba5a:	68a3      	ldr	r3, [r4, #8]
 802ba5c:	3b01      	subs	r3, #1
 802ba5e:	60a3      	str	r3, [r4, #8]
 802ba60:	e7d9      	b.n	802ba16 <_scanf_i+0xda>
 802ba62:	f1bb 0f02 	cmp.w	fp, #2
 802ba66:	d1ae      	bne.n	802b9c6 <_scanf_i+0x8a>
 802ba68:	6822      	ldr	r2, [r4, #0]
 802ba6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802ba6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802ba72:	d1bf      	bne.n	802b9f4 <_scanf_i+0xb8>
 802ba74:	2310      	movs	r3, #16
 802ba76:	6063      	str	r3, [r4, #4]
 802ba78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802ba7c:	e7a2      	b.n	802b9c4 <_scanf_i+0x88>
 802ba7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802ba82:	6022      	str	r2, [r4, #0]
 802ba84:	780b      	ldrb	r3, [r1, #0]
 802ba86:	f805 3b01 	strb.w	r3, [r5], #1
 802ba8a:	e7de      	b.n	802ba4a <_scanf_i+0x10e>
 802ba8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802ba90:	4631      	mov	r1, r6
 802ba92:	4650      	mov	r0, sl
 802ba94:	4798      	blx	r3
 802ba96:	2800      	cmp	r0, #0
 802ba98:	d0df      	beq.n	802ba5a <_scanf_i+0x11e>
 802ba9a:	6823      	ldr	r3, [r4, #0]
 802ba9c:	05db      	lsls	r3, r3, #23
 802ba9e:	d50d      	bpl.n	802babc <_scanf_i+0x180>
 802baa0:	42bd      	cmp	r5, r7
 802baa2:	d909      	bls.n	802bab8 <_scanf_i+0x17c>
 802baa4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802baa8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802baac:	4632      	mov	r2, r6
 802baae:	4650      	mov	r0, sl
 802bab0:	4798      	blx	r3
 802bab2:	f105 39ff 	add.w	r9, r5, #4294967295
 802bab6:	464d      	mov	r5, r9
 802bab8:	42bd      	cmp	r5, r7
 802baba:	d02d      	beq.n	802bb18 <_scanf_i+0x1dc>
 802babc:	6822      	ldr	r2, [r4, #0]
 802babe:	f012 0210 	ands.w	r2, r2, #16
 802bac2:	d113      	bne.n	802baec <_scanf_i+0x1b0>
 802bac4:	702a      	strb	r2, [r5, #0]
 802bac6:	6863      	ldr	r3, [r4, #4]
 802bac8:	9e01      	ldr	r6, [sp, #4]
 802baca:	4639      	mov	r1, r7
 802bacc:	4650      	mov	r0, sl
 802bace:	47b0      	blx	r6
 802bad0:	6821      	ldr	r1, [r4, #0]
 802bad2:	f8d8 3000 	ldr.w	r3, [r8]
 802bad6:	f011 0f20 	tst.w	r1, #32
 802bada:	d013      	beq.n	802bb04 <_scanf_i+0x1c8>
 802badc:	1d1a      	adds	r2, r3, #4
 802bade:	f8c8 2000 	str.w	r2, [r8]
 802bae2:	681b      	ldr	r3, [r3, #0]
 802bae4:	6018      	str	r0, [r3, #0]
 802bae6:	68e3      	ldr	r3, [r4, #12]
 802bae8:	3301      	adds	r3, #1
 802baea:	60e3      	str	r3, [r4, #12]
 802baec:	1bed      	subs	r5, r5, r7
 802baee:	44ab      	add	fp, r5
 802baf0:	6925      	ldr	r5, [r4, #16]
 802baf2:	445d      	add	r5, fp
 802baf4:	6125      	str	r5, [r4, #16]
 802baf6:	2000      	movs	r0, #0
 802baf8:	b007      	add	sp, #28
 802bafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802bafe:	f04f 0b00 	mov.w	fp, #0
 802bb02:	e7ca      	b.n	802ba9a <_scanf_i+0x15e>
 802bb04:	1d1a      	adds	r2, r3, #4
 802bb06:	f8c8 2000 	str.w	r2, [r8]
 802bb0a:	681b      	ldr	r3, [r3, #0]
 802bb0c:	f011 0f01 	tst.w	r1, #1
 802bb10:	bf14      	ite	ne
 802bb12:	8018      	strhne	r0, [r3, #0]
 802bb14:	6018      	streq	r0, [r3, #0]
 802bb16:	e7e6      	b.n	802bae6 <_scanf_i+0x1aa>
 802bb18:	2001      	movs	r0, #1
 802bb1a:	e7ed      	b.n	802baf8 <_scanf_i+0x1bc>
 802bb1c:	0802e3a4 	.word	0x0802e3a4
 802bb20:	0802bced 	.word	0x0802bced
 802bb24:	0802a4e5 	.word	0x0802a4e5
 802bb28:	080301e1 	.word	0x080301e1

0802bb2c <_read_r>:
 802bb2c:	b538      	push	{r3, r4, r5, lr}
 802bb2e:	4d07      	ldr	r5, [pc, #28]	; (802bb4c <_read_r+0x20>)
 802bb30:	4604      	mov	r4, r0
 802bb32:	4608      	mov	r0, r1
 802bb34:	4611      	mov	r1, r2
 802bb36:	2200      	movs	r2, #0
 802bb38:	602a      	str	r2, [r5, #0]
 802bb3a:	461a      	mov	r2, r3
 802bb3c:	f7d6 f9a6 	bl	8001e8c <_read>
 802bb40:	1c43      	adds	r3, r0, #1
 802bb42:	d102      	bne.n	802bb4a <_read_r+0x1e>
 802bb44:	682b      	ldr	r3, [r5, #0]
 802bb46:	b103      	cbz	r3, 802bb4a <_read_r+0x1e>
 802bb48:	6023      	str	r3, [r4, #0]
 802bb4a:	bd38      	pop	{r3, r4, r5, pc}
 802bb4c:	2003c1b0 	.word	0x2003c1b0

0802bb50 <__sccl>:
 802bb50:	b570      	push	{r4, r5, r6, lr}
 802bb52:	780b      	ldrb	r3, [r1, #0]
 802bb54:	4604      	mov	r4, r0
 802bb56:	2b5e      	cmp	r3, #94	; 0x5e
 802bb58:	bf0b      	itete	eq
 802bb5a:	784b      	ldrbeq	r3, [r1, #1]
 802bb5c:	1c48      	addne	r0, r1, #1
 802bb5e:	1c88      	addeq	r0, r1, #2
 802bb60:	2200      	movne	r2, #0
 802bb62:	bf08      	it	eq
 802bb64:	2201      	moveq	r2, #1
 802bb66:	1e61      	subs	r1, r4, #1
 802bb68:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802bb6c:	f801 2f01 	strb.w	r2, [r1, #1]!
 802bb70:	42a9      	cmp	r1, r5
 802bb72:	d1fb      	bne.n	802bb6c <__sccl+0x1c>
 802bb74:	b90b      	cbnz	r3, 802bb7a <__sccl+0x2a>
 802bb76:	3801      	subs	r0, #1
 802bb78:	bd70      	pop	{r4, r5, r6, pc}
 802bb7a:	f082 0201 	eor.w	r2, r2, #1
 802bb7e:	54e2      	strb	r2, [r4, r3]
 802bb80:	4605      	mov	r5, r0
 802bb82:	4628      	mov	r0, r5
 802bb84:	f810 1b01 	ldrb.w	r1, [r0], #1
 802bb88:	292d      	cmp	r1, #45	; 0x2d
 802bb8a:	d006      	beq.n	802bb9a <__sccl+0x4a>
 802bb8c:	295d      	cmp	r1, #93	; 0x5d
 802bb8e:	d0f3      	beq.n	802bb78 <__sccl+0x28>
 802bb90:	b909      	cbnz	r1, 802bb96 <__sccl+0x46>
 802bb92:	4628      	mov	r0, r5
 802bb94:	e7f0      	b.n	802bb78 <__sccl+0x28>
 802bb96:	460b      	mov	r3, r1
 802bb98:	e7f1      	b.n	802bb7e <__sccl+0x2e>
 802bb9a:	786e      	ldrb	r6, [r5, #1]
 802bb9c:	2e5d      	cmp	r6, #93	; 0x5d
 802bb9e:	d0fa      	beq.n	802bb96 <__sccl+0x46>
 802bba0:	42b3      	cmp	r3, r6
 802bba2:	dcf8      	bgt.n	802bb96 <__sccl+0x46>
 802bba4:	3502      	adds	r5, #2
 802bba6:	4619      	mov	r1, r3
 802bba8:	3101      	adds	r1, #1
 802bbaa:	428e      	cmp	r6, r1
 802bbac:	5462      	strb	r2, [r4, r1]
 802bbae:	dcfb      	bgt.n	802bba8 <__sccl+0x58>
 802bbb0:	1af1      	subs	r1, r6, r3
 802bbb2:	3901      	subs	r1, #1
 802bbb4:	1c58      	adds	r0, r3, #1
 802bbb6:	42b3      	cmp	r3, r6
 802bbb8:	bfa8      	it	ge
 802bbba:	2100      	movge	r1, #0
 802bbbc:	1843      	adds	r3, r0, r1
 802bbbe:	e7e0      	b.n	802bb82 <__sccl+0x32>

0802bbc0 <strcpy>:
 802bbc0:	4603      	mov	r3, r0
 802bbc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 802bbc6:	f803 2b01 	strb.w	r2, [r3], #1
 802bbca:	2a00      	cmp	r2, #0
 802bbcc:	d1f9      	bne.n	802bbc2 <strcpy+0x2>
 802bbce:	4770      	bx	lr

0802bbd0 <strncasecmp_l>:
 802bbd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bbd4:	4605      	mov	r5, r0
 802bbd6:	460e      	mov	r6, r1
 802bbd8:	461f      	mov	r7, r3
 802bbda:	eb00 0802 	add.w	r8, r0, r2
 802bbde:	4545      	cmp	r5, r8
 802bbe0:	d00e      	beq.n	802bc00 <strncasecmp_l+0x30>
 802bbe2:	4639      	mov	r1, r7
 802bbe4:	f815 0b01 	ldrb.w	r0, [r5], #1
 802bbe8:	f000 f88c 	bl	802bd04 <tolower_l>
 802bbec:	4639      	mov	r1, r7
 802bbee:	4604      	mov	r4, r0
 802bbf0:	f816 0b01 	ldrb.w	r0, [r6], #1
 802bbf4:	f000 f886 	bl	802bd04 <tolower_l>
 802bbf8:	1a24      	subs	r4, r4, r0
 802bbfa:	d102      	bne.n	802bc02 <strncasecmp_l+0x32>
 802bbfc:	2800      	cmp	r0, #0
 802bbfe:	d1ee      	bne.n	802bbde <strncasecmp_l+0xe>
 802bc00:	2400      	movs	r4, #0
 802bc02:	4620      	mov	r0, r4
 802bc04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802bc08 <_strtoul_l.constprop.0>:
 802bc08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802bc0c:	4f36      	ldr	r7, [pc, #216]	; (802bce8 <_strtoul_l.constprop.0+0xe0>)
 802bc0e:	4686      	mov	lr, r0
 802bc10:	460d      	mov	r5, r1
 802bc12:	4628      	mov	r0, r5
 802bc14:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bc18:	5de6      	ldrb	r6, [r4, r7]
 802bc1a:	f016 0608 	ands.w	r6, r6, #8
 802bc1e:	d1f8      	bne.n	802bc12 <_strtoul_l.constprop.0+0xa>
 802bc20:	2c2d      	cmp	r4, #45	; 0x2d
 802bc22:	d12f      	bne.n	802bc84 <_strtoul_l.constprop.0+0x7c>
 802bc24:	782c      	ldrb	r4, [r5, #0]
 802bc26:	2601      	movs	r6, #1
 802bc28:	1c85      	adds	r5, r0, #2
 802bc2a:	2b00      	cmp	r3, #0
 802bc2c:	d057      	beq.n	802bcde <_strtoul_l.constprop.0+0xd6>
 802bc2e:	2b10      	cmp	r3, #16
 802bc30:	d109      	bne.n	802bc46 <_strtoul_l.constprop.0+0x3e>
 802bc32:	2c30      	cmp	r4, #48	; 0x30
 802bc34:	d107      	bne.n	802bc46 <_strtoul_l.constprop.0+0x3e>
 802bc36:	7828      	ldrb	r0, [r5, #0]
 802bc38:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802bc3c:	2858      	cmp	r0, #88	; 0x58
 802bc3e:	d149      	bne.n	802bcd4 <_strtoul_l.constprop.0+0xcc>
 802bc40:	786c      	ldrb	r4, [r5, #1]
 802bc42:	2310      	movs	r3, #16
 802bc44:	3502      	adds	r5, #2
 802bc46:	f04f 38ff 	mov.w	r8, #4294967295
 802bc4a:	2700      	movs	r7, #0
 802bc4c:	fbb8 f8f3 	udiv	r8, r8, r3
 802bc50:	fb03 f908 	mul.w	r9, r3, r8
 802bc54:	ea6f 0909 	mvn.w	r9, r9
 802bc58:	4638      	mov	r0, r7
 802bc5a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802bc5e:	f1bc 0f09 	cmp.w	ip, #9
 802bc62:	d814      	bhi.n	802bc8e <_strtoul_l.constprop.0+0x86>
 802bc64:	4664      	mov	r4, ip
 802bc66:	42a3      	cmp	r3, r4
 802bc68:	dd22      	ble.n	802bcb0 <_strtoul_l.constprop.0+0xa8>
 802bc6a:	2f00      	cmp	r7, #0
 802bc6c:	db1d      	blt.n	802bcaa <_strtoul_l.constprop.0+0xa2>
 802bc6e:	4580      	cmp	r8, r0
 802bc70:	d31b      	bcc.n	802bcaa <_strtoul_l.constprop.0+0xa2>
 802bc72:	d101      	bne.n	802bc78 <_strtoul_l.constprop.0+0x70>
 802bc74:	45a1      	cmp	r9, r4
 802bc76:	db18      	blt.n	802bcaa <_strtoul_l.constprop.0+0xa2>
 802bc78:	fb00 4003 	mla	r0, r0, r3, r4
 802bc7c:	2701      	movs	r7, #1
 802bc7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bc82:	e7ea      	b.n	802bc5a <_strtoul_l.constprop.0+0x52>
 802bc84:	2c2b      	cmp	r4, #43	; 0x2b
 802bc86:	bf04      	itt	eq
 802bc88:	782c      	ldrbeq	r4, [r5, #0]
 802bc8a:	1c85      	addeq	r5, r0, #2
 802bc8c:	e7cd      	b.n	802bc2a <_strtoul_l.constprop.0+0x22>
 802bc8e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802bc92:	f1bc 0f19 	cmp.w	ip, #25
 802bc96:	d801      	bhi.n	802bc9c <_strtoul_l.constprop.0+0x94>
 802bc98:	3c37      	subs	r4, #55	; 0x37
 802bc9a:	e7e4      	b.n	802bc66 <_strtoul_l.constprop.0+0x5e>
 802bc9c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802bca0:	f1bc 0f19 	cmp.w	ip, #25
 802bca4:	d804      	bhi.n	802bcb0 <_strtoul_l.constprop.0+0xa8>
 802bca6:	3c57      	subs	r4, #87	; 0x57
 802bca8:	e7dd      	b.n	802bc66 <_strtoul_l.constprop.0+0x5e>
 802bcaa:	f04f 37ff 	mov.w	r7, #4294967295
 802bcae:	e7e6      	b.n	802bc7e <_strtoul_l.constprop.0+0x76>
 802bcb0:	2f00      	cmp	r7, #0
 802bcb2:	da07      	bge.n	802bcc4 <_strtoul_l.constprop.0+0xbc>
 802bcb4:	2322      	movs	r3, #34	; 0x22
 802bcb6:	f8ce 3000 	str.w	r3, [lr]
 802bcba:	f04f 30ff 	mov.w	r0, #4294967295
 802bcbe:	b932      	cbnz	r2, 802bcce <_strtoul_l.constprop.0+0xc6>
 802bcc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802bcc4:	b106      	cbz	r6, 802bcc8 <_strtoul_l.constprop.0+0xc0>
 802bcc6:	4240      	negs	r0, r0
 802bcc8:	2a00      	cmp	r2, #0
 802bcca:	d0f9      	beq.n	802bcc0 <_strtoul_l.constprop.0+0xb8>
 802bccc:	b107      	cbz	r7, 802bcd0 <_strtoul_l.constprop.0+0xc8>
 802bcce:	1e69      	subs	r1, r5, #1
 802bcd0:	6011      	str	r1, [r2, #0]
 802bcd2:	e7f5      	b.n	802bcc0 <_strtoul_l.constprop.0+0xb8>
 802bcd4:	2430      	movs	r4, #48	; 0x30
 802bcd6:	2b00      	cmp	r3, #0
 802bcd8:	d1b5      	bne.n	802bc46 <_strtoul_l.constprop.0+0x3e>
 802bcda:	2308      	movs	r3, #8
 802bcdc:	e7b3      	b.n	802bc46 <_strtoul_l.constprop.0+0x3e>
 802bcde:	2c30      	cmp	r4, #48	; 0x30
 802bce0:	d0a9      	beq.n	802bc36 <_strtoul_l.constprop.0+0x2e>
 802bce2:	230a      	movs	r3, #10
 802bce4:	e7af      	b.n	802bc46 <_strtoul_l.constprop.0+0x3e>
 802bce6:	bf00      	nop
 802bce8:	0802fff9 	.word	0x0802fff9

0802bcec <_strtoul_r>:
 802bcec:	f7ff bf8c 	b.w	802bc08 <_strtoul_l.constprop.0>

0802bcf0 <strtoul>:
 802bcf0:	4613      	mov	r3, r2
 802bcf2:	460a      	mov	r2, r1
 802bcf4:	4601      	mov	r1, r0
 802bcf6:	4802      	ldr	r0, [pc, #8]	; (802bd00 <strtoul+0x10>)
 802bcf8:	6800      	ldr	r0, [r0, #0]
 802bcfa:	f7ff bf85 	b.w	802bc08 <_strtoul_l.constprop.0>
 802bcfe:	bf00      	nop
 802bd00:	200000b0 	.word	0x200000b0

0802bd04 <tolower_l>:
 802bd04:	4b03      	ldr	r3, [pc, #12]	; (802bd14 <tolower_l+0x10>)
 802bd06:	5cc3      	ldrb	r3, [r0, r3]
 802bd08:	f003 0303 	and.w	r3, r3, #3
 802bd0c:	2b01      	cmp	r3, #1
 802bd0e:	bf08      	it	eq
 802bd10:	3020      	addeq	r0, #32
 802bd12:	4770      	bx	lr
 802bd14:	0802fff9 	.word	0x0802fff9

0802bd18 <__submore>:
 802bd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bd1c:	460c      	mov	r4, r1
 802bd1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802bd20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bd24:	4299      	cmp	r1, r3
 802bd26:	d11d      	bne.n	802bd64 <__submore+0x4c>
 802bd28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802bd2c:	f7fd fb5e 	bl	80293ec <_malloc_r>
 802bd30:	b918      	cbnz	r0, 802bd3a <__submore+0x22>
 802bd32:	f04f 30ff 	mov.w	r0, #4294967295
 802bd36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bd3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bd3e:	63a3      	str	r3, [r4, #56]	; 0x38
 802bd40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802bd44:	6360      	str	r0, [r4, #52]	; 0x34
 802bd46:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802bd4a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802bd4e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802bd52:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802bd56:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802bd5a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802bd5e:	6020      	str	r0, [r4, #0]
 802bd60:	2000      	movs	r0, #0
 802bd62:	e7e8      	b.n	802bd36 <__submore+0x1e>
 802bd64:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802bd66:	0077      	lsls	r7, r6, #1
 802bd68:	463a      	mov	r2, r7
 802bd6a:	f7ff fb8b 	bl	802b484 <_realloc_r>
 802bd6e:	4605      	mov	r5, r0
 802bd70:	2800      	cmp	r0, #0
 802bd72:	d0de      	beq.n	802bd32 <__submore+0x1a>
 802bd74:	eb00 0806 	add.w	r8, r0, r6
 802bd78:	4601      	mov	r1, r0
 802bd7a:	4632      	mov	r2, r6
 802bd7c:	4640      	mov	r0, r8
 802bd7e:	f7fd f841 	bl	8028e04 <memcpy>
 802bd82:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802bd86:	f8c4 8000 	str.w	r8, [r4]
 802bd8a:	e7e9      	b.n	802bd60 <__submore+0x48>

0802bd8c <__ascii_wctomb>:
 802bd8c:	b149      	cbz	r1, 802bda2 <__ascii_wctomb+0x16>
 802bd8e:	2aff      	cmp	r2, #255	; 0xff
 802bd90:	bf85      	ittet	hi
 802bd92:	238a      	movhi	r3, #138	; 0x8a
 802bd94:	6003      	strhi	r3, [r0, #0]
 802bd96:	700a      	strbls	r2, [r1, #0]
 802bd98:	f04f 30ff 	movhi.w	r0, #4294967295
 802bd9c:	bf98      	it	ls
 802bd9e:	2001      	movls	r0, #1
 802bda0:	4770      	bx	lr
 802bda2:	4608      	mov	r0, r1
 802bda4:	4770      	bx	lr
	...

0802bda8 <__env_lock>:
 802bda8:	4801      	ldr	r0, [pc, #4]	; (802bdb0 <__env_lock+0x8>)
 802bdaa:	f7ff bad1 	b.w	802b350 <__retarget_lock_acquire_recursive>
 802bdae:	bf00      	nop
 802bdb0:	2003c1a9 	.word	0x2003c1a9

0802bdb4 <__env_unlock>:
 802bdb4:	4801      	ldr	r0, [pc, #4]	; (802bdbc <__env_unlock+0x8>)
 802bdb6:	f7ff bacd 	b.w	802b354 <__retarget_lock_release_recursive>
 802bdba:	bf00      	nop
 802bdbc:	2003c1a9 	.word	0x2003c1a9

0802bdc0 <_fstat_r>:
 802bdc0:	b538      	push	{r3, r4, r5, lr}
 802bdc2:	4d07      	ldr	r5, [pc, #28]	; (802bde0 <_fstat_r+0x20>)
 802bdc4:	2300      	movs	r3, #0
 802bdc6:	4604      	mov	r4, r0
 802bdc8:	4608      	mov	r0, r1
 802bdca:	4611      	mov	r1, r2
 802bdcc:	602b      	str	r3, [r5, #0]
 802bdce:	f7d6 f8a2 	bl	8001f16 <_fstat>
 802bdd2:	1c43      	adds	r3, r0, #1
 802bdd4:	d102      	bne.n	802bddc <_fstat_r+0x1c>
 802bdd6:	682b      	ldr	r3, [r5, #0]
 802bdd8:	b103      	cbz	r3, 802bddc <_fstat_r+0x1c>
 802bdda:	6023      	str	r3, [r4, #0]
 802bddc:	bd38      	pop	{r3, r4, r5, pc}
 802bdde:	bf00      	nop
 802bde0:	2003c1b0 	.word	0x2003c1b0

0802bde4 <gmtime_r>:
 802bde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bde8:	e9d0 6700 	ldrd	r6, r7, [r0]
 802bdec:	460c      	mov	r4, r1
 802bdee:	4a4f      	ldr	r2, [pc, #316]	; (802bf2c <gmtime_r+0x148>)
 802bdf0:	2300      	movs	r3, #0
 802bdf2:	4630      	mov	r0, r6
 802bdf4:	4639      	mov	r1, r7
 802bdf6:	f7d4 fa85 	bl	8000304 <__aeabi_ldivmod>
 802bdfa:	4639      	mov	r1, r7
 802bdfc:	4605      	mov	r5, r0
 802bdfe:	4a4b      	ldr	r2, [pc, #300]	; (802bf2c <gmtime_r+0x148>)
 802be00:	4630      	mov	r0, r6
 802be02:	2300      	movs	r3, #0
 802be04:	f7d4 fa7e 	bl	8000304 <__aeabi_ldivmod>
 802be08:	2a00      	cmp	r2, #0
 802be0a:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 802be0e:	bfb7      	itett	lt
 802be10:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802be14:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 802be18:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 802be1c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 802be20:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 802be24:	fbb2 f1f0 	udiv	r1, r2, r0
 802be28:	fb00 2211 	mls	r2, r0, r1, r2
 802be2c:	203c      	movs	r0, #60	; 0x3c
 802be2e:	60a1      	str	r1, [r4, #8]
 802be30:	fbb2 f1f0 	udiv	r1, r2, r0
 802be34:	fb00 2211 	mls	r2, r0, r1, r2
 802be38:	6061      	str	r1, [r4, #4]
 802be3a:	6022      	str	r2, [r4, #0]
 802be3c:	2107      	movs	r1, #7
 802be3e:	1cda      	adds	r2, r3, #3
 802be40:	fb92 f1f1 	sdiv	r1, r2, r1
 802be44:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 802be48:	1a52      	subs	r2, r2, r1
 802be4a:	bf48      	it	mi
 802be4c:	3207      	addmi	r2, #7
 802be4e:	4d38      	ldr	r5, [pc, #224]	; (802bf30 <gmtime_r+0x14c>)
 802be50:	4838      	ldr	r0, [pc, #224]	; (802bf34 <gmtime_r+0x150>)
 802be52:	61a2      	str	r2, [r4, #24]
 802be54:	2b00      	cmp	r3, #0
 802be56:	bfb7      	itett	lt
 802be58:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 802be5c:	fb93 f5f5 	sdivge	r5, r3, r5
 802be60:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 802be64:	fb92 f5f5 	sdivlt	r5, r2, r5
 802be68:	fb00 3005 	mla	r0, r0, r5, r3
 802be6c:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802be70:	fbb0 f2f2 	udiv	r2, r0, r2
 802be74:	4402      	add	r2, r0
 802be76:	f240 53b4 	movw	r3, #1460	; 0x5b4
 802be7a:	fbb0 f1f3 	udiv	r1, r0, r3
 802be7e:	1a52      	subs	r2, r2, r1
 802be80:	f240 1c6d 	movw	ip, #365	; 0x16d
 802be84:	492c      	ldr	r1, [pc, #176]	; (802bf38 <gmtime_r+0x154>)
 802be86:	fbb0 f1f1 	udiv	r1, r0, r1
 802be8a:	2764      	movs	r7, #100	; 0x64
 802be8c:	1a52      	subs	r2, r2, r1
 802be8e:	fbb2 f1fc 	udiv	r1, r2, ip
 802be92:	fbb2 f3f3 	udiv	r3, r2, r3
 802be96:	fbb1 f6f7 	udiv	r6, r1, r7
 802be9a:	1af3      	subs	r3, r6, r3
 802be9c:	4403      	add	r3, r0
 802be9e:	fb0c 3311 	mls	r3, ip, r1, r3
 802bea2:	2299      	movs	r2, #153	; 0x99
 802bea4:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 802bea8:	f10e 0e02 	add.w	lr, lr, #2
 802beac:	f103 0c01 	add.w	ip, r3, #1
 802beb0:	fbbe f0f2 	udiv	r0, lr, r2
 802beb4:	4342      	muls	r2, r0
 802beb6:	3202      	adds	r2, #2
 802beb8:	f04f 0805 	mov.w	r8, #5
 802bebc:	fbb2 f2f8 	udiv	r2, r2, r8
 802bec0:	ebac 0c02 	sub.w	ip, ip, r2
 802bec4:	f240 52f9 	movw	r2, #1529	; 0x5f9
 802bec8:	4596      	cmp	lr, r2
 802beca:	bf94      	ite	ls
 802becc:	2202      	movls	r2, #2
 802bece:	f06f 0209 	mvnhi.w	r2, #9
 802bed2:	4410      	add	r0, r2
 802bed4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802bed8:	fb02 1505 	mla	r5, r2, r5, r1
 802bedc:	2801      	cmp	r0, #1
 802bede:	bf98      	it	ls
 802bee0:	3501      	addls	r5, #1
 802bee2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802bee6:	d30d      	bcc.n	802bf04 <gmtime_r+0x120>
 802bee8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 802beec:	61e3      	str	r3, [r4, #28]
 802beee:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 802bef2:	2300      	movs	r3, #0
 802bef4:	e9c4 0504 	strd	r0, r5, [r4, #16]
 802bef8:	f8c4 c00c 	str.w	ip, [r4, #12]
 802befc:	6223      	str	r3, [r4, #32]
 802befe:	4620      	mov	r0, r4
 802bf00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bf04:	078a      	lsls	r2, r1, #30
 802bf06:	d102      	bne.n	802bf0e <gmtime_r+0x12a>
 802bf08:	fb07 1616 	mls	r6, r7, r6, r1
 802bf0c:	b95e      	cbnz	r6, 802bf26 <gmtime_r+0x142>
 802bf0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802bf12:	fbb1 f6f2 	udiv	r6, r1, r2
 802bf16:	fb02 1216 	mls	r2, r2, r6, r1
 802bf1a:	fab2 f282 	clz	r2, r2
 802bf1e:	0952      	lsrs	r2, r2, #5
 802bf20:	333b      	adds	r3, #59	; 0x3b
 802bf22:	4413      	add	r3, r2
 802bf24:	e7e2      	b.n	802beec <gmtime_r+0x108>
 802bf26:	2201      	movs	r2, #1
 802bf28:	e7fa      	b.n	802bf20 <gmtime_r+0x13c>
 802bf2a:	bf00      	nop
 802bf2c:	00015180 	.word	0x00015180
 802bf30:	00023ab1 	.word	0x00023ab1
 802bf34:	fffdc54f 	.word	0xfffdc54f
 802bf38:	00023ab0 	.word	0x00023ab0

0802bf3c <_isatty_r>:
 802bf3c:	b538      	push	{r3, r4, r5, lr}
 802bf3e:	4d06      	ldr	r5, [pc, #24]	; (802bf58 <_isatty_r+0x1c>)
 802bf40:	2300      	movs	r3, #0
 802bf42:	4604      	mov	r4, r0
 802bf44:	4608      	mov	r0, r1
 802bf46:	602b      	str	r3, [r5, #0]
 802bf48:	f7d5 fff5 	bl	8001f36 <_isatty>
 802bf4c:	1c43      	adds	r3, r0, #1
 802bf4e:	d102      	bne.n	802bf56 <_isatty_r+0x1a>
 802bf50:	682b      	ldr	r3, [r5, #0]
 802bf52:	b103      	cbz	r3, 802bf56 <_isatty_r+0x1a>
 802bf54:	6023      	str	r3, [r4, #0]
 802bf56:	bd38      	pop	{r3, r4, r5, pc}
 802bf58:	2003c1b0 	.word	0x2003c1b0

0802bf5c <_malloc_usable_size_r>:
 802bf5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bf60:	1f18      	subs	r0, r3, #4
 802bf62:	2b00      	cmp	r3, #0
 802bf64:	bfbc      	itt	lt
 802bf66:	580b      	ldrlt	r3, [r1, r0]
 802bf68:	18c0      	addlt	r0, r0, r3
 802bf6a:	4770      	bx	lr

0802bf6c <_init>:
 802bf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bf6e:	bf00      	nop
 802bf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bf72:	bc08      	pop	{r3}
 802bf74:	469e      	mov	lr, r3
 802bf76:	4770      	bx	lr

0802bf78 <_fini>:
 802bf78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bf7a:	bf00      	nop
 802bf7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802bf7e:	bc08      	pop	{r3}
 802bf80:	469e      	mov	lr, r3
 802bf82:	4770      	bx	lr
