
Dashboard_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002cdcc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000429c  0802cfcc  0802cfcc  0003cfcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000a9c5e  08031268  08031268  00041268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 0000011c  080daec8  080daec8  000eaec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000898c8  080dafe4  080dafe4  000eafe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000030c  081648ac  081648ac  001748ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08164bb8  08164bb8  001802f4  2**0
                  CONTENTS
  8 .ARM          00000008  08164bb8  08164bb8  00174bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08164bc0  08164bc0  001802f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000018  08164bc0  08164bc0  00174bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   0000000c  08164bd8  08164bd8  00174bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         000002f4  20000000  08164be4  00180000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          0003c29c  200002f4  08164ed8  001802f4  2**2
                  ALLOC
 14 ._user_heap_stack 00000600  2003c590  08164ed8  0018c590  2**0
                  ALLOC
 15 .ARM.attributes 0000002e  00000000  00000000  001802f4  2**0
                  CONTENTS, READONLY
 16 .debug_info   000d73e4  00000000  00000000  00180322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00018f8f  00000000  00000000  00257706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004748  00000000  00000000  00270698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 000040a8  00000000  00000000  00274de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003a986  00000000  00000000  00278e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00055e34  00000000  00000000  002b380e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0013378f  00000000  00000000  00309642  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      000000cf  00000000  00000000  0043cdd1  2**0
                  CONTENTS, READONLY
 24 .debug_frame  000138b0  00000000  00000000  0043cea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002f4 	.word	0x200002f4
 800021c:	00000000 	.word	0x00000000
 8000220:	0802cfb4 	.word	0x0802cfb4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002f8 	.word	0x200002f8
 800023c:	0802cfb4 	.word	0x0802cfb4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr

08000304 <__aeabi_ldivmod>:
 8000304:	b97b      	cbnz	r3, 8000326 <__aeabi_ldivmod+0x22>
 8000306:	b972      	cbnz	r2, 8000326 <__aeabi_ldivmod+0x22>
 8000308:	2900      	cmp	r1, #0
 800030a:	bfbe      	ittt	lt
 800030c:	2000      	movlt	r0, #0
 800030e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000312:	e006      	blt.n	8000322 <__aeabi_ldivmod+0x1e>
 8000314:	bf08      	it	eq
 8000316:	2800      	cmpeq	r0, #0
 8000318:	bf1c      	itt	ne
 800031a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800031e:	f04f 30ff 	movne.w	r0, #4294967295
 8000322:	f000 b9bf 	b.w	80006a4 <__aeabi_idiv0>
 8000326:	f1ad 0c08 	sub.w	ip, sp, #8
 800032a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032e:	2900      	cmp	r1, #0
 8000330:	db09      	blt.n	8000346 <__aeabi_ldivmod+0x42>
 8000332:	2b00      	cmp	r3, #0
 8000334:	db1a      	blt.n	800036c <__aeabi_ldivmod+0x68>
 8000336:	f000 f84d 	bl	80003d4 <__udivmoddi4>
 800033a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800033e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000342:	b004      	add	sp, #16
 8000344:	4770      	bx	lr
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	2b00      	cmp	r3, #0
 800034e:	db1b      	blt.n	8000388 <__aeabi_ldivmod+0x84>
 8000350:	f000 f840 	bl	80003d4 <__udivmoddi4>
 8000354:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000358:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800035c:	b004      	add	sp, #16
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	4252      	negs	r2, r2
 8000366:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800036a:	4770      	bx	lr
 800036c:	4252      	negs	r2, r2
 800036e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000372:	f000 f82f 	bl	80003d4 <__udivmoddi4>
 8000376:	f8dd e004 	ldr.w	lr, [sp, #4]
 800037a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037e:	b004      	add	sp, #16
 8000380:	4240      	negs	r0, r0
 8000382:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000386:	4770      	bx	lr
 8000388:	4252      	negs	r2, r2
 800038a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800038e:	f000 f821 	bl	80003d4 <__udivmoddi4>
 8000392:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800039a:	b004      	add	sp, #16
 800039c:	4252      	negs	r2, r2
 800039e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a2:	4770      	bx	lr

080003a4 <__aeabi_uldivmod>:
 80003a4:	b953      	cbnz	r3, 80003bc <__aeabi_uldivmod+0x18>
 80003a6:	b94a      	cbnz	r2, 80003bc <__aeabi_uldivmod+0x18>
 80003a8:	2900      	cmp	r1, #0
 80003aa:	bf08      	it	eq
 80003ac:	2800      	cmpeq	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	f04f 31ff 	movne.w	r1, #4294967295
 80003b4:	f04f 30ff 	movne.w	r0, #4294967295
 80003b8:	f000 b974 	b.w	80006a4 <__aeabi_idiv0>
 80003bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80003c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c4:	f000 f806 	bl	80003d4 <__udivmoddi4>
 80003c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003d0:	b004      	add	sp, #16
 80003d2:	4770      	bx	lr

080003d4 <__udivmoddi4>:
 80003d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d8:	9d08      	ldr	r5, [sp, #32]
 80003da:	4604      	mov	r4, r0
 80003dc:	468e      	mov	lr, r1
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d14d      	bne.n	800047e <__udivmoddi4+0xaa>
 80003e2:	428a      	cmp	r2, r1
 80003e4:	4694      	mov	ip, r2
 80003e6:	d969      	bls.n	80004bc <__udivmoddi4+0xe8>
 80003e8:	fab2 f282 	clz	r2, r2
 80003ec:	b152      	cbz	r2, 8000404 <__udivmoddi4+0x30>
 80003ee:	fa01 f302 	lsl.w	r3, r1, r2
 80003f2:	f1c2 0120 	rsb	r1, r2, #32
 80003f6:	fa20 f101 	lsr.w	r1, r0, r1
 80003fa:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fe:	ea41 0e03 	orr.w	lr, r1, r3
 8000402:	4094      	lsls	r4, r2
 8000404:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000408:	0c21      	lsrs	r1, r4, #16
 800040a:	fbbe f6f8 	udiv	r6, lr, r8
 800040e:	fa1f f78c 	uxth.w	r7, ip
 8000412:	fb08 e316 	mls	r3, r8, r6, lr
 8000416:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800041a:	fb06 f107 	mul.w	r1, r6, r7
 800041e:	4299      	cmp	r1, r3
 8000420:	d90a      	bls.n	8000438 <__udivmoddi4+0x64>
 8000422:	eb1c 0303 	adds.w	r3, ip, r3
 8000426:	f106 30ff 	add.w	r0, r6, #4294967295
 800042a:	f080 811f 	bcs.w	800066c <__udivmoddi4+0x298>
 800042e:	4299      	cmp	r1, r3
 8000430:	f240 811c 	bls.w	800066c <__udivmoddi4+0x298>
 8000434:	3e02      	subs	r6, #2
 8000436:	4463      	add	r3, ip
 8000438:	1a5b      	subs	r3, r3, r1
 800043a:	b2a4      	uxth	r4, r4
 800043c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000440:	fb08 3310 	mls	r3, r8, r0, r3
 8000444:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000448:	fb00 f707 	mul.w	r7, r0, r7
 800044c:	42a7      	cmp	r7, r4
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x92>
 8000450:	eb1c 0404 	adds.w	r4, ip, r4
 8000454:	f100 33ff 	add.w	r3, r0, #4294967295
 8000458:	f080 810a 	bcs.w	8000670 <__udivmoddi4+0x29c>
 800045c:	42a7      	cmp	r7, r4
 800045e:	f240 8107 	bls.w	8000670 <__udivmoddi4+0x29c>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046a:	1be4      	subs	r4, r4, r7
 800046c:	2600      	movs	r6, #0
 800046e:	b11d      	cbz	r5, 8000478 <__udivmoddi4+0xa4>
 8000470:	40d4      	lsrs	r4, r2
 8000472:	2300      	movs	r3, #0
 8000474:	e9c5 4300 	strd	r4, r3, [r5]
 8000478:	4631      	mov	r1, r6
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	428b      	cmp	r3, r1
 8000480:	d909      	bls.n	8000496 <__udivmoddi4+0xc2>
 8000482:	2d00      	cmp	r5, #0
 8000484:	f000 80ef 	beq.w	8000666 <__udivmoddi4+0x292>
 8000488:	2600      	movs	r6, #0
 800048a:	e9c5 0100 	strd	r0, r1, [r5]
 800048e:	4630      	mov	r0, r6
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	fab3 f683 	clz	r6, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d14a      	bne.n	8000534 <__udivmoddi4+0x160>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d302      	bcc.n	80004a8 <__udivmoddi4+0xd4>
 80004a2:	4282      	cmp	r2, r0
 80004a4:	f200 80f9 	bhi.w	800069a <__udivmoddi4+0x2c6>
 80004a8:	1a84      	subs	r4, r0, r2
 80004aa:	eb61 0303 	sbc.w	r3, r1, r3
 80004ae:	2001      	movs	r0, #1
 80004b0:	469e      	mov	lr, r3
 80004b2:	2d00      	cmp	r5, #0
 80004b4:	d0e0      	beq.n	8000478 <__udivmoddi4+0xa4>
 80004b6:	e9c5 4e00 	strd	r4, lr, [r5]
 80004ba:	e7dd      	b.n	8000478 <__udivmoddi4+0xa4>
 80004bc:	b902      	cbnz	r2, 80004c0 <__udivmoddi4+0xec>
 80004be:	deff      	udf	#255	; 0xff
 80004c0:	fab2 f282 	clz	r2, r2
 80004c4:	2a00      	cmp	r2, #0
 80004c6:	f040 8092 	bne.w	80005ee <__udivmoddi4+0x21a>
 80004ca:	eba1 010c 	sub.w	r1, r1, ip
 80004ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d2:	fa1f fe8c 	uxth.w	lr, ip
 80004d6:	2601      	movs	r6, #1
 80004d8:	0c20      	lsrs	r0, r4, #16
 80004da:	fbb1 f3f7 	udiv	r3, r1, r7
 80004de:	fb07 1113 	mls	r1, r7, r3, r1
 80004e2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004e6:	fb0e f003 	mul.w	r0, lr, r3
 80004ea:	4288      	cmp	r0, r1
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x12c>
 80004ee:	eb1c 0101 	adds.w	r1, ip, r1
 80004f2:	f103 38ff 	add.w	r8, r3, #4294967295
 80004f6:	d202      	bcs.n	80004fe <__udivmoddi4+0x12a>
 80004f8:	4288      	cmp	r0, r1
 80004fa:	f200 80cb 	bhi.w	8000694 <__udivmoddi4+0x2c0>
 80004fe:	4643      	mov	r3, r8
 8000500:	1a09      	subs	r1, r1, r0
 8000502:	b2a4      	uxth	r4, r4
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1110 	mls	r1, r7, r0, r1
 800050c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000510:	fb0e fe00 	mul.w	lr, lr, r0
 8000514:	45a6      	cmp	lr, r4
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x156>
 8000518:	eb1c 0404 	adds.w	r4, ip, r4
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d202      	bcs.n	8000528 <__udivmoddi4+0x154>
 8000522:	45a6      	cmp	lr, r4
 8000524:	f200 80bb 	bhi.w	800069e <__udivmoddi4+0x2ca>
 8000528:	4608      	mov	r0, r1
 800052a:	eba4 040e 	sub.w	r4, r4, lr
 800052e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000532:	e79c      	b.n	800046e <__udivmoddi4+0x9a>
 8000534:	f1c6 0720 	rsb	r7, r6, #32
 8000538:	40b3      	lsls	r3, r6
 800053a:	fa22 fc07 	lsr.w	ip, r2, r7
 800053e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000542:	fa20 f407 	lsr.w	r4, r0, r7
 8000546:	fa01 f306 	lsl.w	r3, r1, r6
 800054a:	431c      	orrs	r4, r3
 800054c:	40f9      	lsrs	r1, r7
 800054e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000552:	fa00 f306 	lsl.w	r3, r0, r6
 8000556:	fbb1 f8f9 	udiv	r8, r1, r9
 800055a:	0c20      	lsrs	r0, r4, #16
 800055c:	fa1f fe8c 	uxth.w	lr, ip
 8000560:	fb09 1118 	mls	r1, r9, r8, r1
 8000564:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000568:	fb08 f00e 	mul.w	r0, r8, lr
 800056c:	4288      	cmp	r0, r1
 800056e:	fa02 f206 	lsl.w	r2, r2, r6
 8000572:	d90b      	bls.n	800058c <__udivmoddi4+0x1b8>
 8000574:	eb1c 0101 	adds.w	r1, ip, r1
 8000578:	f108 3aff 	add.w	sl, r8, #4294967295
 800057c:	f080 8088 	bcs.w	8000690 <__udivmoddi4+0x2bc>
 8000580:	4288      	cmp	r0, r1
 8000582:	f240 8085 	bls.w	8000690 <__udivmoddi4+0x2bc>
 8000586:	f1a8 0802 	sub.w	r8, r8, #2
 800058a:	4461      	add	r1, ip
 800058c:	1a09      	subs	r1, r1, r0
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb1 f0f9 	udiv	r0, r1, r9
 8000594:	fb09 1110 	mls	r1, r9, r0, r1
 8000598:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800059c:	fb00 fe0e 	mul.w	lr, r0, lr
 80005a0:	458e      	cmp	lr, r1
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x1e2>
 80005a4:	eb1c 0101 	adds.w	r1, ip, r1
 80005a8:	f100 34ff 	add.w	r4, r0, #4294967295
 80005ac:	d26c      	bcs.n	8000688 <__udivmoddi4+0x2b4>
 80005ae:	458e      	cmp	lr, r1
 80005b0:	d96a      	bls.n	8000688 <__udivmoddi4+0x2b4>
 80005b2:	3802      	subs	r0, #2
 80005b4:	4461      	add	r1, ip
 80005b6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005ba:	fba0 9402 	umull	r9, r4, r0, r2
 80005be:	eba1 010e 	sub.w	r1, r1, lr
 80005c2:	42a1      	cmp	r1, r4
 80005c4:	46c8      	mov	r8, r9
 80005c6:	46a6      	mov	lr, r4
 80005c8:	d356      	bcc.n	8000678 <__udivmoddi4+0x2a4>
 80005ca:	d053      	beq.n	8000674 <__udivmoddi4+0x2a0>
 80005cc:	b15d      	cbz	r5, 80005e6 <__udivmoddi4+0x212>
 80005ce:	ebb3 0208 	subs.w	r2, r3, r8
 80005d2:	eb61 010e 	sbc.w	r1, r1, lr
 80005d6:	fa01 f707 	lsl.w	r7, r1, r7
 80005da:	fa22 f306 	lsr.w	r3, r2, r6
 80005de:	40f1      	lsrs	r1, r6
 80005e0:	431f      	orrs	r7, r3
 80005e2:	e9c5 7100 	strd	r7, r1, [r5]
 80005e6:	2600      	movs	r6, #0
 80005e8:	4631      	mov	r1, r6
 80005ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	40d8      	lsrs	r0, r3
 80005f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3
 80005fc:	4091      	lsls	r1, r2
 80005fe:	4301      	orrs	r1, r0
 8000600:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000604:	fa1f fe8c 	uxth.w	lr, ip
 8000608:	fbb3 f0f7 	udiv	r0, r3, r7
 800060c:	fb07 3610 	mls	r6, r7, r0, r3
 8000610:	0c0b      	lsrs	r3, r1, #16
 8000612:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000616:	fb00 f60e 	mul.w	r6, r0, lr
 800061a:	429e      	cmp	r6, r3
 800061c:	fa04 f402 	lsl.w	r4, r4, r2
 8000620:	d908      	bls.n	8000634 <__udivmoddi4+0x260>
 8000622:	eb1c 0303 	adds.w	r3, ip, r3
 8000626:	f100 38ff 	add.w	r8, r0, #4294967295
 800062a:	d22f      	bcs.n	800068c <__udivmoddi4+0x2b8>
 800062c:	429e      	cmp	r6, r3
 800062e:	d92d      	bls.n	800068c <__udivmoddi4+0x2b8>
 8000630:	3802      	subs	r0, #2
 8000632:	4463      	add	r3, ip
 8000634:	1b9b      	subs	r3, r3, r6
 8000636:	b289      	uxth	r1, r1
 8000638:	fbb3 f6f7 	udiv	r6, r3, r7
 800063c:	fb07 3316 	mls	r3, r7, r6, r3
 8000640:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000644:	fb06 f30e 	mul.w	r3, r6, lr
 8000648:	428b      	cmp	r3, r1
 800064a:	d908      	bls.n	800065e <__udivmoddi4+0x28a>
 800064c:	eb1c 0101 	adds.w	r1, ip, r1
 8000650:	f106 38ff 	add.w	r8, r6, #4294967295
 8000654:	d216      	bcs.n	8000684 <__udivmoddi4+0x2b0>
 8000656:	428b      	cmp	r3, r1
 8000658:	d914      	bls.n	8000684 <__udivmoddi4+0x2b0>
 800065a:	3e02      	subs	r6, #2
 800065c:	4461      	add	r1, ip
 800065e:	1ac9      	subs	r1, r1, r3
 8000660:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000664:	e738      	b.n	80004d8 <__udivmoddi4+0x104>
 8000666:	462e      	mov	r6, r5
 8000668:	4628      	mov	r0, r5
 800066a:	e705      	b.n	8000478 <__udivmoddi4+0xa4>
 800066c:	4606      	mov	r6, r0
 800066e:	e6e3      	b.n	8000438 <__udivmoddi4+0x64>
 8000670:	4618      	mov	r0, r3
 8000672:	e6f8      	b.n	8000466 <__udivmoddi4+0x92>
 8000674:	454b      	cmp	r3, r9
 8000676:	d2a9      	bcs.n	80005cc <__udivmoddi4+0x1f8>
 8000678:	ebb9 0802 	subs.w	r8, r9, r2
 800067c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000680:	3801      	subs	r0, #1
 8000682:	e7a3      	b.n	80005cc <__udivmoddi4+0x1f8>
 8000684:	4646      	mov	r6, r8
 8000686:	e7ea      	b.n	800065e <__udivmoddi4+0x28a>
 8000688:	4620      	mov	r0, r4
 800068a:	e794      	b.n	80005b6 <__udivmoddi4+0x1e2>
 800068c:	4640      	mov	r0, r8
 800068e:	e7d1      	b.n	8000634 <__udivmoddi4+0x260>
 8000690:	46d0      	mov	r8, sl
 8000692:	e77b      	b.n	800058c <__udivmoddi4+0x1b8>
 8000694:	3b02      	subs	r3, #2
 8000696:	4461      	add	r1, ip
 8000698:	e732      	b.n	8000500 <__udivmoddi4+0x12c>
 800069a:	4630      	mov	r0, r6
 800069c:	e709      	b.n	80004b2 <__udivmoddi4+0xde>
 800069e:	4464      	add	r4, ip
 80006a0:	3802      	subs	r0, #2
 80006a2:	e742      	b.n	800052a <__udivmoddi4+0x156>

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <HAL_TIM_PWM_PulseFinishedCallback>:
static void updateLedsType_0(int8_t activeLeds);
static void updateLedsType_1(int8_t activeLeds);
static float lerp(float A, float B, float Alpha);

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80006b0:	2100      	movs	r1, #0
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f008 faae 	bl	8008c14 <HAL_TIM_PWM_Stop_DMA>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <WS2812_Init>:

void WS2812_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	e007      	b.n	80006dc <WS2812_Init+0x1c>
		leds[i] = BIT_0_TIME;
 80006cc:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <WS2812_Init+0x80>)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	212b      	movs	r1, #43	; 0x2b
 80006d2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 24 * LED_NUMBER; i++)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80006e2:	dbf3      	blt.n	80006cc <WS2812_Init+0xc>

	for (int i = 0; i < RESET_LEN; i++)
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
 80006e8:	e009      	b.n	80006fe <WS2812_Init+0x3e>
		leds[i + LED_NUMBER * 24] = 0;
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80006f0:	4a13      	ldr	r2, [pc, #76]	; (8000740 <WS2812_Init+0x80>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < RESET_LEN; i++)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	3301      	adds	r3, #1
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	2b27      	cmp	r3, #39	; 0x27
 8000702:	ddf2      	ble.n	80006ea <WS2812_Init+0x2a>

	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000704:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <WS2812_Init+0x80>)
 800070a:	2100      	movs	r1, #0
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <WS2812_Init+0x84>)
 800070e:	f008 f86d 	bl	80087ec <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000712:	2301      	movs	r3, #1
 8000714:	71fb      	strb	r3, [r7, #7]
 8000716:	e00a      	b.n	800072e <WS2812_Init+0x6e>
	{
		updateLedsType_0(i);
 8000718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071c:	4618      	mov	r0, r3
 800071e:	f000 f87b 	bl	8000818 <updateLedsType_0>
		osDelay(50);
 8000722:	2032      	movs	r0, #50	; 0x32
 8000724:	f009 fe5c 	bl	800a3e0 <osDelay>
	for (uint8_t i = 1; i <= LED_NUMBER; i++)
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	3301      	adds	r3, #1
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	2b0f      	cmp	r3, #15
 8000732:	d9f1      	bls.n	8000718 <WS2812_Init+0x58>
	}
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000310 	.word	0x20000310
 8000744:	200009a4 	.word	0x200009a4

08000748 <setLed>:

void setLed(uint8_t ledNumber, uint8_t red, uint8_t green, uint8_t blue)
{
 8000748:	b490      	push	{r4, r7}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	4604      	mov	r4, r0
 8000750:	4608      	mov	r0, r1
 8000752:	4611      	mov	r1, r2
 8000754:	461a      	mov	r2, r3
 8000756:	4623      	mov	r3, r4
 8000758:	71fb      	strb	r3, [r7, #7]
 800075a:	4603      	mov	r3, r0
 800075c:	71bb      	strb	r3, [r7, #6]
 800075e:	460b      	mov	r3, r1
 8000760:	717b      	strb	r3, [r7, #5]
 8000762:	4613      	mov	r3, r2
 8000764:	713b      	strb	r3, [r7, #4]
	const uint8_t lookUpTable[8] =
 8000766:	4a2a      	ldr	r2, [pc, #168]	; (8000810 <setLed+0xc8>)
 8000768:	f107 0308 	add.w	r3, r7, #8
 800076c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000770:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 1, 2, 4, 8, 16, 32, 64, 128 };
	uint16_t ledId = 24 * ledNumber;
 8000774:	79fb      	ldrb	r3, [r7, #7]
 8000776:	b29b      	uxth	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	0052      	lsls	r2, r2, #1
 800077c:	4413      	add	r3, r2
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	e03a      	b.n	80007fe <setLed+0xb6>
	{
		leds[ledId] = red & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 8000788:	f107 0208 	add.w	r2, r7, #8
 800078c:	693b      	ldr	r3, [r7, #16]
 800078e:	4413      	add	r3, r2
 8000790:	781a      	ldrb	r2, [r3, #0]
 8000792:	79bb      	ldrb	r3, [r7, #6]
 8000794:	4013      	ands	r3, r2
 8000796:	b2db      	uxtb	r3, r3
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <setLed+0x58>
 800079c:	2156      	movs	r1, #86	; 0x56
 800079e:	e000      	b.n	80007a2 <setLed+0x5a>
 80007a0:	212b      	movs	r1, #43	; 0x2b
 80007a2:	8afb      	ldrh	r3, [r7, #22]
 80007a4:	4a1b      	ldr	r2, [pc, #108]	; (8000814 <setLed+0xcc>)
 80007a6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 8] = green & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 80007aa:	f107 0208 	add.w	r2, r7, #8
 80007ae:	693b      	ldr	r3, [r7, #16]
 80007b0:	4413      	add	r3, r2
 80007b2:	781a      	ldrb	r2, [r3, #0]
 80007b4:	797b      	ldrb	r3, [r7, #5]
 80007b6:	4013      	ands	r3, r2
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <setLed+0x7a>
 80007be:	2156      	movs	r1, #86	; 0x56
 80007c0:	e000      	b.n	80007c4 <setLed+0x7c>
 80007c2:	212b      	movs	r1, #43	; 0x2b
 80007c4:	8afb      	ldrh	r3, [r7, #22]
 80007c6:	3308      	adds	r3, #8
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <setLed+0xcc>)
 80007ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		leds[ledId + 16] = blue & lookUpTable[i] ? BIT_1_TIME : BIT_0_TIME;
 80007ce:	f107 0208 	add.w	r2, r7, #8
 80007d2:	693b      	ldr	r3, [r7, #16]
 80007d4:	4413      	add	r3, r2
 80007d6:	781a      	ldrb	r2, [r3, #0]
 80007d8:	793b      	ldrb	r3, [r7, #4]
 80007da:	4013      	ands	r3, r2
 80007dc:	b2db      	uxtb	r3, r3
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <setLed+0x9e>
 80007e2:	2156      	movs	r1, #86	; 0x56
 80007e4:	e000      	b.n	80007e8 <setLed+0xa0>
 80007e6:	212b      	movs	r1, #43	; 0x2b
 80007e8:	8afb      	ldrh	r3, [r7, #22]
 80007ea:	3310      	adds	r3, #16
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <setLed+0xcc>)
 80007ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		ledId++;
 80007f2:	8afb      	ldrh	r3, [r7, #22]
 80007f4:	3301      	adds	r3, #1
 80007f6:	82fb      	strh	r3, [r7, #22]
	for (int i = 0; i < 8; i++)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	3301      	adds	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	2b07      	cmp	r3, #7
 8000802:	ddc1      	ble.n	8000788 <setLed+0x40>
	}
}
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bc90      	pop	{r4, r7}
 800080e:	4770      	bx	lr
 8000810:	0802cfcc 	.word	0x0802cfcc
 8000814:	20000310 	.word	0x20000310

08000818 <updateLedsType_0>:

// turn on leds linearly
void updateLedsType_0(int8_t activeLeds)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
 800081e:	4603      	mov	r3, r0
 8000820:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 8000822:	2300      	movs	r3, #0
 8000824:	73fb      	strb	r3, [r7, #15]
 8000826:	e02b      	b.n	8000880 <updateLedsType_0+0x68>
	{
		if (i < activeLeds)
 8000828:	7bfa      	ldrb	r2, [r7, #15]
 800082a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082e:	429a      	cmp	r2, r3
 8000830:	da1d      	bge.n	800086e <updateLedsType_0+0x56>
		{
			if (i < 5)
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	2b04      	cmp	r3, #4
 8000836:	d807      	bhi.n	8000848 <updateLedsType_0+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <updateLedsType_0+0x84>)
 800083a:	7899      	ldrb	r1, [r3, #2]
 800083c:	7bf8      	ldrb	r0, [r7, #15]
 800083e:	2300      	movs	r3, #0
 8000840:	2200      	movs	r2, #0
 8000842:	f7ff ff81 	bl	8000748 <setLed>
 8000846:	e018      	b.n	800087a <updateLedsType_0+0x62>
			}
			else if (i < 10)
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b09      	cmp	r3, #9
 800084c:	d807      	bhi.n	800085e <updateLedsType_0+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 800084e:	4b13      	ldr	r3, [pc, #76]	; (800089c <updateLedsType_0+0x84>)
 8000850:	78da      	ldrb	r2, [r3, #3]
 8000852:	7bf8      	ldrb	r0, [r7, #15]
 8000854:	2300      	movs	r3, #0
 8000856:	2100      	movs	r1, #0
 8000858:	f7ff ff76 	bl	8000748 <setLed>
 800085c:	e00d      	b.n	800087a <updateLedsType_0+0x62>
			}
			else
			{
				setLed(i, 0, 0, displaySetup.blueLedBrightness);
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <updateLedsType_0+0x84>)
 8000860:	791b      	ldrb	r3, [r3, #4]
 8000862:	7bf8      	ldrb	r0, [r7, #15]
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	f7ff ff6e 	bl	8000748 <setLed>
 800086c:	e005      	b.n	800087a <updateLedsType_0+0x62>
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 800086e:	7bf8      	ldrb	r0, [r7, #15]
 8000870:	2300      	movs	r3, #0
 8000872:	2200      	movs	r2, #0
 8000874:	2100      	movs	r1, #0
 8000876:	f7ff ff67 	bl	8000748 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	3301      	adds	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	2b0e      	cmp	r3, #14
 8000884:	d9d0      	bls.n	8000828 <updateLedsType_0+0x10>
		}

	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000886:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <updateLedsType_0+0x88>)
 800088c:	2100      	movs	r1, #0
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <updateLedsType_0+0x8c>)
 8000890:	f007 ffac 	bl	80087ec <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000310 	.word	0x20000310
 80008a4:	200009a4 	.word	0x200009a4

080008a8 <updateLedsType_1>:

// turn on leds 1-10 linearly, last five turn on together
void updateLedsType_1(int8_t activeLeds)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	73fb      	strb	r3, [r7, #15]
 80008b6:	e034      	b.n	8000922 <updateLedsType_1+0x7a>
	{
		if (i < activeLeds)
 80008b8:	7bfa      	ldrb	r2, [r7, #15]
 80008ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008be:	429a      	cmp	r2, r3
 80008c0:	da26      	bge.n	8000910 <updateLedsType_1+0x68>
		{
			if (i < 5)
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d807      	bhi.n	80008d8 <updateLedsType_1+0x30>
			{
				setLed(i, displaySetup.redLedBrightness, 0, 0);
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <updateLedsType_1+0x98>)
 80008ca:	7899      	ldrb	r1, [r3, #2]
 80008cc:	7bf8      	ldrb	r0, [r7, #15]
 80008ce:	2300      	movs	r3, #0
 80008d0:	2200      	movs	r2, #0
 80008d2:	f7ff ff39 	bl	8000748 <setLed>
 80008d6:	e021      	b.n	800091c <updateLedsType_1+0x74>
			}
			else if (i < 10)
 80008d8:	7bfb      	ldrb	r3, [r7, #15]
 80008da:	2b09      	cmp	r3, #9
 80008dc:	d807      	bhi.n	80008ee <updateLedsType_1+0x46>
			{
				setLed(i, 0, displaySetup.greenLedBrightness, 0);
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <updateLedsType_1+0x98>)
 80008e0:	78da      	ldrb	r2, [r3, #3]
 80008e2:	7bf8      	ldrb	r0, [r7, #15]
 80008e4:	2300      	movs	r3, #0
 80008e6:	2100      	movs	r1, #0
 80008e8:	f7ff ff2e 	bl	8000748 <setLed>
 80008ec:	e016      	b.n	800091c <updateLedsType_1+0x74>
			}
			else
			{
				for (uint8_t j = i; j < LED_NUMBER; j++)
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	73bb      	strb	r3, [r7, #14]
 80008f2:	e009      	b.n	8000908 <updateLedsType_1+0x60>
				{
					setLed(i, 0, 0, displaySetup.blueLedBrightness);
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <updateLedsType_1+0x98>)
 80008f6:	791b      	ldrb	r3, [r3, #4]
 80008f8:	7bf8      	ldrb	r0, [r7, #15]
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	f7ff ff23 	bl	8000748 <setLed>
				for (uint8_t j = i; j < LED_NUMBER; j++)
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	3301      	adds	r3, #1
 8000906:	73bb      	strb	r3, [r7, #14]
 8000908:	7bbb      	ldrb	r3, [r7, #14]
 800090a:	2b0e      	cmp	r3, #14
 800090c:	d9f2      	bls.n	80008f4 <updateLedsType_1+0x4c>
 800090e:	e005      	b.n	800091c <updateLedsType_1+0x74>
				}
			}
		}
		else
		{
			setLed(i, 0, 0, 0);
 8000910:	7bf8      	ldrb	r0, [r7, #15]
 8000912:	2300      	movs	r3, #0
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	f7ff ff16 	bl	8000748 <setLed>
	for (uint8_t i = 0; i < LED_NUMBER; i++)
 800091c:	7bfb      	ldrb	r3, [r7, #15]
 800091e:	3301      	adds	r3, #1
 8000920:	73fb      	strb	r3, [r7, #15]
 8000922:	7bfb      	ldrb	r3, [r7, #15]
 8000924:	2b0e      	cmp	r3, #14
 8000926:	d9c7      	bls.n	80008b8 <updateLedsType_1+0x10>
		}
	}
	//__DSB();
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, (uint32_t*) leds,
 8000928:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800092c:	4a05      	ldr	r2, [pc, #20]	; (8000944 <updateLedsType_1+0x9c>)
 800092e:	2100      	movs	r1, #0
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <updateLedsType_1+0xa0>)
 8000932:	f007 ff5b 	bl	80087ec <HAL_TIM_PWM_Start_DMA>
	RESET_LEN + 24 * LED_NUMBER);
}
 8000936:	bf00      	nop
 8000938:	3710      	adds	r7, #16
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000008 	.word	0x20000008
 8000944:	20000310 	.word	0x20000310
 8000948:	200009a4 	.word	0x200009a4

0800094c <updateLeds>:

void updateLeds(uint16_t rpm, uint8_t mode)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	460a      	mov	r2, r1
 8000956:	80fb      	strh	r3, [r7, #6]
 8000958:	4613      	mov	r3, r2
 800095a:	717b      	strb	r3, [r7, #5]
	uint16_t minRPM;
	uint16_t maxRPM;
	int8_t activeLeds;
	static uint8_t lastGear = 1;
	switch (mode)
 800095c:	797b      	ldrb	r3, [r7, #5]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d005      	beq.n	800096e <updateLeds+0x22>
 8000962:	2b00      	cmp	r3, #0
 8000964:	db74      	blt.n	8000a50 <updateLeds+0x104>
 8000966:	3b01      	subs	r3, #1
 8000968:	2b01      	cmp	r3, #1
 800096a:	d871      	bhi.n	8000a50 <updateLeds+0x104>
 800096c:	e027      	b.n	80009be <updateLeds+0x72>
	{
	case 0:
		minRPM = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	81bb      	strh	r3, [r7, #12]
		maxRPM = 12000;
 8000972:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8000976:	817b      	strh	r3, [r7, #10]
		activeLeds =
				ceil(
						(float) (rpm - minRPM)
 8000978:	88fa      	ldrh	r2, [r7, #6]
 800097a:	89bb      	ldrh	r3, [r7, #12]
 800097c:	1ad3      	subs	r3, r2, r3
 800097e:	ee07 3a90 	vmov	s15, r3
 8000982:	eef8 6ae7 	vcvt.f32.s32	s13, s15
								/ (float) (maxRPM - minRPM)* LED_NUMBER);
 8000986:	897a      	ldrh	r2, [r7, #10]
 8000988:	89bb      	ldrh	r3, [r7, #12]
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	ee07 3a90 	vmov	s15, r3
 8000990:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000998:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800099c:	ee67 7a87 	vmul.f32	s15, s15, s14
				ceil(
 80009a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009a4:	eeb0 0b47 	vmov.f64	d0, d7
 80009a8:	f029 f952 	bl	8029c50 <ceil>
 80009ac:	eeb0 7b40 	vmov.f64	d7, d0
		activeLeds =
 80009b0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80009b4:	edc7 7a00 	vstr	s15, [r7]
 80009b8:	783b      	ldrb	r3, [r7, #0]
 80009ba:	73fb      	strb	r3, [r7, #15]
		break;
 80009bc:	e048      	b.n	8000a50 <updateLeds+0x104>
	case 1:
	case 2:
#ifdef USE_OPTIMAL_SHIFT_RPM
		if (telemetryData.gear <= 6 && telemetryData.gear >= 1)
 80009be:	4b31      	ldr	r3, [pc, #196]	; (8000a84 <updateLeds+0x138>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	2b06      	cmp	r3, #6
 80009c4:	d807      	bhi.n	80009d6 <updateLeds+0x8a>
 80009c6:	4b2f      	ldr	r3, [pc, #188]	; (8000a84 <updateLeds+0x138>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d003      	beq.n	80009d6 <updateLeds+0x8a>
		{
			lastGear = telemetryData.gear;
 80009ce:	4b2d      	ldr	r3, [pc, #180]	; (8000a84 <updateLeds+0x138>)
 80009d0:	781a      	ldrb	r2, [r3, #0]
 80009d2:	4b2d      	ldr	r3, [pc, #180]	; (8000a88 <updateLeds+0x13c>)
 80009d4:	701a      	strb	r2, [r3, #0]
		}

		minRPM = optimalShiftUpRPM[lastGear - 1] - 2000;
 80009d6:	4b2c      	ldr	r3, [pc, #176]	; (8000a88 <updateLeds+0x13c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	3b01      	subs	r3, #1
 80009dc:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <updateLeds+0x140>)
 80009de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009e2:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 80009e6:	81bb      	strh	r3, [r7, #12]
		maxRPM = optimalShiftUpRPM[lastGear - 1];
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <updateLeds+0x13c>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	4a27      	ldr	r2, [pc, #156]	; (8000a8c <updateLeds+0x140>)
 80009f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f4:	817b      	strh	r3, [r7, #10]
#else
		minRPM = 9500;
		maxRPM = 11500;
#endif
		uint8_t ledNumber = mode == 1 ? LED_NUMBER : LED_NUMBER - 4;
 80009f6:	797b      	ldrb	r3, [r7, #5]
 80009f8:	2b01      	cmp	r3, #1
 80009fa:	d101      	bne.n	8000a00 <updateLeds+0xb4>
 80009fc:	230f      	movs	r3, #15
 80009fe:	e000      	b.n	8000a02 <updateLeds+0xb6>
 8000a00:	230b      	movs	r3, #11
 8000a02:	727b      	strb	r3, [r7, #9]
		activeLeds = ceil(
				(float) (rpm - minRPM) / (float) (maxRPM - minRPM) * ledNumber);
 8000a04:	88fa      	ldrh	r2, [r7, #6]
 8000a06:	89bb      	ldrh	r3, [r7, #12]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	ee07 3a90 	vmov	s15, r3
 8000a0e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000a12:	897a      	ldrh	r2, [r7, #10]
 8000a14:	89bb      	ldrh	r3, [r7, #12]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	ee07 3a90 	vmov	s15, r3
 8000a1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a24:	7a7b      	ldrb	r3, [r7, #9]
 8000a26:	ee07 3a90 	vmov	s15, r3
 8000a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
		activeLeds = ceil(
 8000a32:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a36:	eeb0 0b47 	vmov.f64	d0, d7
 8000a3a:	f029 f909 	bl	8029c50 <ceil>
 8000a3e:	eeb0 7b40 	vmov.f64	d7, d0
 8000a42:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000a46:	edc7 7a00 	vstr	s15, [r7]
 8000a4a:	783b      	ldrb	r3, [r7, #0]
 8000a4c:	73fb      	strb	r3, [r7, #15]

		break;
 8000a4e:	bf00      	nop

	}

	switch (mode)
 8000a50:	797b      	ldrb	r3, [r7, #5]
 8000a52:	2b01      	cmp	r3, #1
 8000a54:	dc02      	bgt.n	8000a5c <updateLeds+0x110>
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	da03      	bge.n	8000a62 <updateLeds+0x116>
		break;
	case 2:
		updateLedsType_1(activeLeds);
		break;
	}
}
 8000a5a:	e00e      	b.n	8000a7a <updateLeds+0x12e>
	switch (mode)
 8000a5c:	2b02      	cmp	r3, #2
 8000a5e:	d006      	beq.n	8000a6e <updateLeds+0x122>
}
 8000a60:	e00b      	b.n	8000a7a <updateLeds+0x12e>
		updateLedsType_0(activeLeds);
 8000a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fed6 	bl	8000818 <updateLedsType_0>
		break;
 8000a6c:	e005      	b.n	8000a7a <updateLeds+0x12e>
		updateLedsType_1(activeLeds);
 8000a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff ff18 	bl	80008a8 <updateLedsType_1>
		break;
 8000a78:	bf00      	nop
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	200007dc 	.word	0x200007dc
 8000a88:	20000004 	.word	0x20000004
 8000a8c:	20000630 	.word	0x20000630

08000a90 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a96:	463b      	mov	r3, r7
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aa2:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000aa4:	4a29      	ldr	r2, [pc, #164]	; (8000b4c <MX_ADC1_Init+0xbc>)
 8000aa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000aa8:	4b27      	ldr	r3, [pc, #156]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000aaa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab0:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000ab6:	4b24      	ldr	r3, [pc, #144]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000aca:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000ad2:	4b1d      	ldr	r3, [pc, #116]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000ad4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000ae2:	2202      	movs	r2, #2
 8000ae4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ae6:	4b18      	ldr	r3, [pc, #96]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af4:	4814      	ldr	r0, [pc, #80]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000af6:	f001 ffdb 	bl	8002ab0 <HAL_ADC_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000b00:	f001 fa1a 	bl	8001f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000b04:	230b      	movs	r3, #11
 8000b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000b0c:	2307      	movs	r3, #7
 8000b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b10:	463b      	mov	r3, r7
 8000b12:	4619      	mov	r1, r3
 8000b14:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000b16:	f002 f93d 	bl	8002d94 <HAL_ADC_ConfigChannel>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000b20:	f001 fa0a 	bl	8001f38 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_ADC1_Init+0xc0>)
 8000b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <MX_ADC1_Init+0xb8>)
 8000b32:	f002 f92f 	bl	8002d94 <HAL_ADC_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000b3c:	f001 f9fc 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	2000063c 	.word	0x2000063c
 8000b4c:	40012000 	.word	0x40012000
 8000b50:	10000012 	.word	0x10000012

08000b54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a19      	ldr	r2, [pc, #100]	; (8000bd8 <HAL_ADC_MspInit+0x84>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d12b      	bne.n	8000bce <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b76:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <HAL_ADC_MspInit+0x88>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	4a18      	ldr	r2, [pc, #96]	; (8000bdc <HAL_ADC_MspInit+0x88>)
 8000b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b80:	6453      	str	r3, [r2, #68]	; 0x44
 8000b82:	4b16      	ldr	r3, [pc, #88]	; (8000bdc <HAL_ADC_MspInit+0x88>)
 8000b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b13      	ldr	r3, [pc, #76]	; (8000bdc <HAL_ADC_MspInit+0x88>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <HAL_ADC_MspInit+0x88>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b10      	ldr	r3, [pc, #64]	; (8000bdc <HAL_ADC_MspInit+0x88>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000baa:	2303      	movs	r3, #3
 8000bac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <HAL_ADC_MspInit+0x8c>)
 8000bba:	f003 fcd1 	bl	8004560 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2105      	movs	r1, #5
 8000bc2:	2012      	movs	r0, #18
 8000bc4:	f002 ff1a 	bl	80039fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000bc8:	2012      	movs	r0, #18
 8000bca:	f002 ff33 	bl	8003a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3728      	adds	r7, #40	; 0x28
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40012000 	.word	0x40012000
 8000bdc:	40023800 	.word	0x40023800
 8000be0:	40020800 	.word	0x40020800

08000be4 <FLASH_QSPI_Init>:
static uint8_t FLASH_QSPI_Configuration(void);
static uint8_t FLASH_QSPI_ResetChip(void);
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */
uint8_t FLASH_QSPI_Init(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	//prepare QSPI peripheral for ST-Link Utility operations
	hqspi.Instance = QUADSPI;
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <FLASH_QSPI_Init+0x70>)
 8000bea:	4a1b      	ldr	r2, [pc, #108]	; (8000c58 <FLASH_QSPI_Init+0x74>)
 8000bec:	601a      	str	r2, [r3, #0]
	if (HAL_QSPI_DeInit(&hqspi) != HAL_OK) {
 8000bee:	4819      	ldr	r0, [pc, #100]	; (8000c54 <FLASH_QSPI_Init+0x70>)
 8000bf0:	f005 ff0a 	bl	8006a08 <HAL_QSPI_DeInit>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <FLASH_QSPI_Init+0x1a>
		return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e028      	b.n	8000c50 <FLASH_QSPI_Init+0x6c>
	}

	MX_QUADSPI_Init();
 8000bfe:	f001 f9a1 	bl	8001f44 <MX_QUADSPI_Init>

	if (FLASH_QSPI_ResetChip() != HAL_OK) {
 8000c02:	f000 f82b 	bl	8000c5c <FLASH_QSPI_ResetChip>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <FLASH_QSPI_Init+0x2c>
		return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e01f      	b.n	8000c50 <FLASH_QSPI_Init+0x6c>
	}

	HAL_Delay(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f001 ff29 	bl	8002a68 <HAL_Delay>

	if (FLASH_QSPI_AutoPollingMemReady() != HAL_OK) {
 8000c16:	f000 f87f 	bl	8000d18 <FLASH_QSPI_AutoPollingMemReady>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <FLASH_QSPI_Init+0x40>
		return HAL_ERROR;
 8000c20:	2301      	movs	r3, #1
 8000c22:	e015      	b.n	8000c50 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000c24:	f000 f8b0 	bl	8000d88 <FLASH_QSPI_WriteEnable>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <FLASH_QSPI_Init+0x4e>

		return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e00e      	b.n	8000c50 <FLASH_QSPI_Init+0x6c>
	}

	/* Sets QE bit and starts QUADSPI communication */
	if (FLASH_QSPI_Configuration() != HAL_OK) {
 8000c32:	f000 f8f3 	bl	8000e1c <FLASH_QSPI_Configuration>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <FLASH_QSPI_Init+0x5c>
		return HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	e007      	b.n	8000c50 <FLASH_QSPI_Init+0x6c>
	}

	if (FLASH_QSPI_EnableMemoryMappedMode() != HAL_OK) {
 8000c40:	f000 f962 	bl	8000f08 <FLASH_QSPI_EnableMemoryMappedMode>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <FLASH_QSPI_Init+0x6a>
			return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <FLASH_QSPI_Init+0x6c>
		}

	return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000904 	.word	0x20000904
 8000c58:	a0001000 	.word	0xa0001000

08000c5c <FLASH_QSPI_ResetChip>:
	}

	return HAL_OK;
}

uint8_t FLASH_QSPI_ResetChip() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b090      	sub	sp, #64	; 0x40
 8000c60:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	uint32_t temp = 0;
 8000c62:	2300      	movs	r3, #0
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
	/* Erasing Sequence -------------------------------------------------- */
	sCommand.Instruction = ENABLE_RESET_CMD;
 8000c66:	2366      	movs	r3, #102	; 0x66
 8000c68:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000c6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c6e:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c74:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000c96:	1d3b      	adds	r3, r7, #4
 8000c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	481d      	ldr	r0, [pc, #116]	; (8000d14 <FLASH_QSPI_ResetChip+0xb8>)
 8000ca0:	f005 fed6 	bl	8006a50 <HAL_QSPI_Command>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <FLASH_QSPI_ResetChip+0x52>
			!= HAL_OK) {
		return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e02e      	b.n	8000d0c <FLASH_QSPI_ResetChip+0xb0>
	}
	for (temp = 0; temp < 0x2f; temp++) {
 8000cae:	2300      	movs	r3, #0
 8000cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cb2:	e003      	b.n	8000cbc <FLASH_QSPI_ResetChip+0x60>
		__NOP();
 8000cb4:	bf00      	nop
	for (temp = 0; temp < 0x2f; temp++) {
 8000cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cb8:	3301      	adds	r3, #1
 8000cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cbe:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc0:	d9f8      	bls.n	8000cb4 <FLASH_QSPI_ResetChip+0x58>
	}

	sCommand.Instruction = RESET_DEVICE_CMD;
 8000cc2:	2399      	movs	r3, #153	; 0x99
 8000cc4:	607b      	str	r3, [r7, #4]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000cc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cca:	61fb      	str	r3, [r7, #28]
	sCommand.AddressSize = QSPI_ADDRESS_24_BITS;
 8000ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd0:	613b      	str	r3, [r7, #16]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
	sCommand.Address = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
	sCommand.DataMode = QSPI_DATA_NONE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DummyCycles = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	; (8000d14 <FLASH_QSPI_ResetChip+0xb8>)
 8000cfc:	f005 fea8 	bl	8006a50 <HAL_QSPI_Command>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <FLASH_QSPI_ResetChip+0xae>
			!= HAL_OK) {
		return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <FLASH_QSPI_ResetChip+0xb0>
	}
	return HAL_OK;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3740      	adds	r7, #64	; 0x40
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	20000904 	.word	0x20000904

08000d18 <FLASH_QSPI_AutoPollingMemReady>:

uint8_t FLASH_QSPI_AutoPollingMemReady(void) {
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b094      	sub	sp, #80	; 0x50
 8000d1c:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Configure automatic polling mode to wait for memory ready ------ */
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000d1e:	2305      	movs	r3, #5
 8000d20:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d34:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000d36:	2300      	movs	r3, #0
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000d42:	2300      	movs	r3, #0
 8000d44:	64fb      	str	r3, [r7, #76]	; 0x4c

	sConfig.Match = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
	sConfig.Mask = AT25SF128A_SR_WIP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000d56:	2310      	movs	r3, #16
 8000d58:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000d5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d5e:	617b      	str	r3, [r7, #20]

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000d60:	463a      	mov	r2, r7
 8000d62:	f107 0118 	add.w	r1, r7, #24
 8000d66:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d6a:	4806      	ldr	r0, [pc, #24]	; (8000d84 <FLASH_QSPI_AutoPollingMemReady+0x6c>)
 8000d6c:	f005 fffd 	bl	8006d6a <HAL_QSPI_AutoPolling>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <FLASH_QSPI_AutoPollingMemReady+0x62>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e000      	b.n	8000d7c <FLASH_QSPI_AutoPollingMemReady+0x64>
	}

	return HAL_OK;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3750      	adds	r7, #80	; 0x50
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000904 	.word	0x20000904

08000d88 <FLASH_QSPI_WriteEnable>:

static uint8_t FLASH_QSPI_WriteEnable(void) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b094      	sub	sp, #80	; 0x50
 8000d8c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef sCommand;
	QSPI_AutoPollingTypeDef sConfig;

	/* Enable write operations ------------------------------------------ */
	sCommand.Instruction = WRITE_ENABLE_CMD;
 8000d8e:	2306      	movs	r3, #6
 8000d90:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000d92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DataMode = QSPI_DATA_NONE;
 8000da0:	2300      	movs	r3, #0
 8000da2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.DummyCycles = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000dac:	2300      	movs	r3, #0
 8000dae:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000db0:	2300      	movs	r3, #0
 8000db2:	64fb      	str	r3, [r7, #76]	; 0x4c

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4816      	ldr	r0, [pc, #88]	; (8000e18 <FLASH_QSPI_WriteEnable+0x90>)
 8000dc0:	f005 fe46 	bl	8006a50 <HAL_QSPI_Command>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <FLASH_QSPI_WriteEnable+0x46>
			!= HAL_OK) {
		return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e01f      	b.n	8000e0e <FLASH_QSPI_WriteEnable+0x86>
	}

	/* Configure automatic polling mode to wait for write enabling ---- */
	sConfig.Match = 0x02;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	603b      	str	r3, [r7, #0]
	sConfig.Mask = 0x02;
 8000dd2:	2302      	movs	r3, #2
 8000dd4:	607b      	str	r3, [r7, #4]
	sConfig.MatchMode = QSPI_MATCH_MODE_AND;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
	sConfig.StatusBytesSize = 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	60fb      	str	r3, [r7, #12]
	sConfig.Interval = 0x10;
 8000dde:	2310      	movs	r3, #16
 8000de0:	60bb      	str	r3, [r7, #8]
	sConfig.AutomaticStop = QSPI_AUTOMATIC_STOP_ENABLE;
 8000de2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000de6:	617b      	str	r3, [r7, #20]
	sCommand.Instruction = READ_STATUS_REG_LOWER_CMD;
 8000de8:	2305      	movs	r3, #5
 8000dea:	61bb      	str	r3, [r7, #24]
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000dec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000df0:	63fb      	str	r3, [r7, #60]	; 0x3c

	if (HAL_QSPI_AutoPolling(&hqspi, &sCommand, &sConfig,
 8000df2:	463a      	mov	r2, r7
 8000df4:	f107 0118 	add.w	r1, r7, #24
 8000df8:	f241 3388 	movw	r3, #5000	; 0x1388
 8000dfc:	4806      	ldr	r0, [pc, #24]	; (8000e18 <FLASH_QSPI_WriteEnable+0x90>)
 8000dfe:	f005 ffb4 	bl	8006d6a <HAL_QSPI_AutoPolling>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <FLASH_QSPI_WriteEnable+0x84>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <FLASH_QSPI_WriteEnable+0x86>
	}

	return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3750      	adds	r7, #80	; 0x50
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000904 	.word	0x20000904

08000e1c <FLASH_QSPI_Configuration>:

/*Enable quad mode and set dummy cycles count*/
uint8_t FLASH_QSPI_Configuration(void) {
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b090      	sub	sp, #64	; 0x40
 8000e20:	af00      	add	r7, sp, #0

	QSPI_CommandTypeDef sCommand;
	uint8_t reg;

	/*read configuration register*/
	sCommand.Instruction = READ_STATUS_REG_MIDDLE_CMD;
 8000e22:	2335      	movs	r3, #53	; 0x35
 8000e24:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e2a:	623b      	str	r3, [r7, #32]
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000e34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e42:	2300      	movs	r3, #0
 8000e44:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000e46:	2300      	movs	r3, #0
 8000e48:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.NbData = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000e4e:	f107 0308 	add.w	r3, r7, #8
 8000e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e56:	4619      	mov	r1, r3
 8000e58:	482a      	ldr	r0, [pc, #168]	; (8000f04 <FLASH_QSPI_Configuration+0xe8>)
 8000e5a:	f005 fdf9 	bl	8006a50 <HAL_QSPI_Command>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <FLASH_QSPI_Configuration+0x4c>
			!= HAL_OK) {
		return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e049      	b.n	8000efc <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Receive(&hqspi, &reg,
 8000e68:	1dfb      	adds	r3, r7, #7
 8000e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4824      	ldr	r0, [pc, #144]	; (8000f04 <FLASH_QSPI_Configuration+0xe8>)
 8000e72:	f005 fedd 	bl	8006c30 <HAL_QSPI_Receive>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <FLASH_QSPI_Configuration+0x64>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e03d      	b.n	8000efc <FLASH_QSPI_Configuration+0xe0>
	}

	if (FLASH_QSPI_WriteEnable() != HAL_OK) {
 8000e80:	f7ff ff82 	bl	8000d88 <FLASH_QSPI_WriteEnable>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <FLASH_QSPI_Configuration+0x72>

		return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e036      	b.n	8000efc <FLASH_QSPI_Configuration+0xe0>
	}

	/*set dummy cycles*/
	//MODIFY_REG(reg, 0xF0, (N25Q128A_DUMMY_CYCLES_READ_QUAD << POSITION_VAL(0xF0)));
	/* Set QE bit in register to enable QUADSPI mode in at25sf128a */
	reg = reg | 0x02;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f043 0302 	orr.w	r3, r3, #2
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	71fb      	strb	r3, [r7, #7]

	sCommand.Instruction = WRITE_STATUS_REG_MIDDLE_CMD;
 8000e98:	2331      	movs	r3, #49	; 0x31
 8000e9a:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000e9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea0:	623b      	str	r3, [r7, #32]
	sCommand.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
	sCommand.AddressMode = QSPI_ADDRESS_NONE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.DataMode = QSPI_DATA_1_LINE;
 8000eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DummyCycles = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
	sCommand.NbData = 1;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30

	if (HAL_QSPI_Command(&hqspi, &sCommand, HAL_QPSI_TIMEOUT_DEFAULT_VALUE)
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <FLASH_QSPI_Configuration+0xe8>)
 8000ed0:	f005 fdbe 	bl	8006a50 <HAL_QSPI_Command>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <FLASH_QSPI_Configuration+0xc2>
			!= HAL_OK) {
		return HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	e00e      	b.n	8000efc <FLASH_QSPI_Configuration+0xe0>
	}

	if (HAL_QSPI_Transmit(&hqspi, &reg,
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4807      	ldr	r0, [pc, #28]	; (8000f04 <FLASH_QSPI_Configuration+0xe8>)
 8000ee8:	f005 fe10 	bl	8006b0c <HAL_QSPI_Transmit>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <FLASH_QSPI_Configuration+0xde>
	HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK) {
		Error_Handler();
 8000ef2:	f001 f821 	bl	8001f38 <Error_Handler>
		return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	e000      	b.n	8000efc <FLASH_QSPI_Configuration+0xe0>
	}
	return HAL_OK;
 8000efa:	2300      	movs	r3, #0
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3740      	adds	r7, #64	; 0x40
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	20000904 	.word	0x20000904

08000f08 <FLASH_QSPI_EnableMemoryMappedMode>:
			QSPI_CS_HIGH_TIME_6_CYCLE);

	return HAL_OK;
}

uint8_t FLASH_QSPI_EnableMemoryMappedMode(void) {
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b090      	sub	sp, #64	; 0x40
 8000f0c:	af00      	add	r7, sp, #0
	QSPI_CommandTypeDef s_command;
	QSPI_MemoryMappedTypeDef sMemMappedCfg;

	/* Enable Memory-Mapped mode-------------------------------------------------- */

	s_command.Instruction = QUAD_INOUT_FAST_READ_CMD;
 8000f0e:	23eb      	movs	r3, #235	; 0xeb
 8000f10:	60bb      	str	r3, [r7, #8]
	s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f16:	623b      	str	r3, [r7, #32]
	s_command.AddressSize = QSPI_ADDRESS_24_BITS;
 8000f18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f1c:	617b      	str	r3, [r7, #20]
	s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_4_LINES;
 8000f1e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
		s_command.AlternateBytesSize = QSPI_ALTERNATE_BYTES_8_BITS;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
		s_command.AlternateBytes = 0;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
	s_command.DdrMode = QSPI_DDR_MODE_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
	s_command.DdrHoldHalfCycle = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f30:	2300      	movs	r3, #0
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
	s_command.SIOOMode = QSPI_SIOO_INST_EVERY_CMD;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
	s_command.AddressMode = QSPI_ADDRESS_4_LINES;
 8000f38:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f3c:	627b      	str	r3, [r7, #36]	; 0x24
	s_command.DataMode = QSPI_DATA_4_LINES;
 8000f3e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
	s_command.NbData = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	633b      	str	r3, [r7, #48]	; 0x30
	s_command.Address = 0;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	60fb      	str	r3, [r7, #12]
	s_command.DummyCycles = 0x4; //moze 4?
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	61fb      	str	r3, [r7, #28]

	sMemMappedCfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]

	if (HAL_QSPI_MemoryMapped(&hqspi, &s_command, &sMemMappedCfg) != HAL_OK) {
 8000f54:	463a      	mov	r2, r7
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4806      	ldr	r0, [pc, #24]	; (8000f78 <FLASH_QSPI_EnableMemoryMappedMode+0x70>)
 8000f5e:	f005 ff7b 	bl	8006e58 <HAL_QSPI_MemoryMapped>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <FLASH_QSPI_EnableMemoryMappedMode+0x64>
		return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e000      	b.n	8000f6e <FLASH_QSPI_EnableMemoryMappedMode+0x66>
	}
	return HAL_OK;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3740      	adds	r7, #64	; 0x40
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000904 	.word	0x20000904

08000f7c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	; 0x28
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f82:	4b26      	ldr	r3, [pc, #152]	; (800101c <MX_CAN1_Init+0xa0>)
 8000f84:	4a26      	ldr	r2, [pc, #152]	; (8001020 <MX_CAN1_Init+0xa4>)
 8000f86:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 9;
 8000f88:	4b24      	ldr	r3, [pc, #144]	; (800101c <MX_CAN1_Init+0xa0>)
 8000f8a:	2209      	movs	r2, #9
 8000f8c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f8e:	4b23      	ldr	r3, [pc, #140]	; (800101c <MX_CAN1_Init+0xa0>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <MX_CAN1_Init+0xa0>)
 8000f96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000f9a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000f9c:	4b1f      	ldr	r3, [pc, #124]	; (800101c <MX_CAN1_Init+0xa0>)
 8000f9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fa2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_CAN1_Init+0xa0>)
 8000fa6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000faa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fac:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_CAN1_Init+0xa0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fb2:	4b1a      	ldr	r3, [pc, #104]	; (800101c <MX_CAN1_Init+0xa0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fb8:	4b18      	ldr	r3, [pc, #96]	; (800101c <MX_CAN1_Init+0xa0>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_CAN1_Init+0xa0>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	; (800101c <MX_CAN1_Init+0xa0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_CAN1_Init+0xa0>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fd0:	4812      	ldr	r0, [pc, #72]	; (800101c <MX_CAN1_Init+0xa0>)
 8000fd2:	f002 f939 	bl	8003248 <HAL_CAN_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_CAN1_Init+0x64>
  {
    Error_Handler();
 8000fdc:	f000 ffac 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 8; // which filter bank to use from the assigned ones
 8000fe4:	2308      	movs	r3, #8
 8000fe6:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001000:	2301      	movs	r3, #1
 8001002:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 8001004:	230a      	movs	r3, #10
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	4803      	ldr	r0, [pc, #12]	; (800101c <MX_CAN1_Init+0xa0>)
 800100e:	f002 fa17 	bl	8003440 <HAL_CAN_ConfigFilter>
	//HAL_CAN_Start(&hcan1);

  /* USER CODE END CAN1_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	3728      	adds	r7, #40	; 0x28
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000688 	.word	0x20000688
 8001020:	40006400 	.word	0x40006400

08001024 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <MX_CAN2_Init+0xa0>)
 800102c:	4a26      	ldr	r2, [pc, #152]	; (80010c8 <MX_CAN2_Init+0xa4>)
 800102e:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 9;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_CAN2_Init+0xa0>)
 8001032:	2209      	movs	r2, #9
 8001034:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_CAN2_Init+0xa0>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_CAN2_Init+0xa0>)
 800103e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001042:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001044:	4b1f      	ldr	r3, [pc, #124]	; (80010c4 <MX_CAN2_Init+0xa0>)
 8001046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800104a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800104c:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_CAN2_Init+0xa0>)
 800104e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001052:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_CAN2_Init+0xa0>)
 8001056:	2200      	movs	r2, #0
 8001058:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800105a:	4b1a      	ldr	r3, [pc, #104]	; (80010c4 <MX_CAN2_Init+0xa0>)
 800105c:	2200      	movs	r2, #0
 800105e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001060:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_CAN2_Init+0xa0>)
 8001062:	2200      	movs	r2, #0
 8001064:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = ENABLE;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <MX_CAN2_Init+0xa0>)
 8001068:	2201      	movs	r2, #1
 800106a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800106c:	4b15      	ldr	r3, [pc, #84]	; (80010c4 <MX_CAN2_Init+0xa0>)
 800106e:	2200      	movs	r2, #0
 8001070:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001072:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_CAN2_Init+0xa0>)
 8001074:	2200      	movs	r2, #0
 8001076:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001078:	4812      	ldr	r0, [pc, #72]	; (80010c4 <MX_CAN2_Init+0xa0>)
 800107a:	f002 f8e5 	bl	8003248 <HAL_CAN_Init>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_CAN2_Init+0x64>
  {
    Error_Handler();
 8001084:	f000 ff58 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */
	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001088:	2301      	movs	r3, #1
 800108a:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 18; // which filter bank to use from the assigned ones
 800108c:	2312      	movs	r3, #18
 800108e:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010a8:	2301      	movs	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10;
 80010ac:	230a      	movs	r3, #10
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 80010b0:	463b      	mov	r3, r7
 80010b2:	4619      	mov	r1, r3
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <MX_CAN2_Init+0xa0>)
 80010b6:	f002 f9c3 	bl	8003440 <HAL_CAN_ConfigFilter>

	//HAL_CAN_Start(&hcan2);

  /* USER CODE END CAN2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200006b0 	.word	0x200006b0
 80010c8:	40006800 	.word	0x40006800

080010cc <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d4:	f107 031c 	add.w	r3, r7, #28
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a3e      	ldr	r2, [pc, #248]	; (80011e4 <HAL_CAN_MspInit+0x118>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d132      	bne.n	8001154 <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80010ee:	4b3e      	ldr	r3, [pc, #248]	; (80011e8 <HAL_CAN_MspInit+0x11c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	3301      	adds	r3, #1
 80010f4:	4a3c      	ldr	r2, [pc, #240]	; (80011e8 <HAL_CAN_MspInit+0x11c>)
 80010f6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80010f8:	4b3b      	ldr	r3, [pc, #236]	; (80011e8 <HAL_CAN_MspInit+0x11c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d10b      	bne.n	8001118 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001100:	4b3a      	ldr	r3, [pc, #232]	; (80011ec <HAL_CAN_MspInit+0x120>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	4a39      	ldr	r2, [pc, #228]	; (80011ec <HAL_CAN_MspInit+0x120>)
 8001106:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800110a:	6413      	str	r3, [r2, #64]	; 0x40
 800110c:	4b37      	ldr	r3, [pc, #220]	; (80011ec <HAL_CAN_MspInit+0x120>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001114:	61bb      	str	r3, [r7, #24]
 8001116:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b34      	ldr	r3, [pc, #208]	; (80011ec <HAL_CAN_MspInit+0x120>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	4a33      	ldr	r2, [pc, #204]	; (80011ec <HAL_CAN_MspInit+0x120>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6313      	str	r3, [r2, #48]	; 0x30
 8001124:	4b31      	ldr	r3, [pc, #196]	; (80011ec <HAL_CAN_MspInit+0x120>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	617b      	str	r3, [r7, #20]
 800112e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001130:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001142:	2309      	movs	r3, #9
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 031c 	add.w	r3, r7, #28
 800114a:	4619      	mov	r1, r3
 800114c:	4828      	ldr	r0, [pc, #160]	; (80011f0 <HAL_CAN_MspInit+0x124>)
 800114e:	f003 fa07 	bl	8004560 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8001152:	e042      	b.n	80011da <HAL_CAN_MspInit+0x10e>
  else if(canHandle->Instance==CAN2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <HAL_CAN_MspInit+0x128>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d13d      	bne.n	80011da <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <HAL_CAN_MspInit+0x120>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a22      	ldr	r2, [pc, #136]	; (80011ec <HAL_CAN_MspInit+0x120>)
 8001164:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
 800116a:	4b20      	ldr	r3, [pc, #128]	; (80011ec <HAL_CAN_MspInit+0x120>)
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <HAL_CAN_MspInit+0x11c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3301      	adds	r3, #1
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_CAN_MspInit+0x11c>)
 800117e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001180:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <HAL_CAN_MspInit+0x11c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d10b      	bne.n	80011a0 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <HAL_CAN_MspInit+0x120>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	4a17      	ldr	r2, [pc, #92]	; (80011ec <HAL_CAN_MspInit+0x120>)
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001192:	6413      	str	r3, [r2, #64]	; 0x40
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <HAL_CAN_MspInit+0x120>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <HAL_CAN_MspInit+0x120>)
 80011a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a4:	4a11      	ldr	r2, [pc, #68]	; (80011ec <HAL_CAN_MspInit+0x120>)
 80011a6:	f043 0302 	orr.w	r3, r3, #2
 80011aa:	6313      	str	r3, [r2, #48]	; 0x30
 80011ac:	4b0f      	ldr	r3, [pc, #60]	; (80011ec <HAL_CAN_MspInit+0x120>)
 80011ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80011b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80011bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80011ca:	2309      	movs	r3, #9
 80011cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	4808      	ldr	r0, [pc, #32]	; (80011f8 <HAL_CAN_MspInit+0x12c>)
 80011d6:	f003 f9c3 	bl	8004560 <HAL_GPIO_Init>
}
 80011da:	bf00      	nop
 80011dc:	3730      	adds	r7, #48	; 0x30
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40006400 	.word	0x40006400
 80011e8:	200006d8 	.word	0x200006d8
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40006800 	.word	0x40006800
 80011f8:	40020400 	.word	0x40020400

080011fc <CanCommunicationInit>:
		ComputeEcumasterFrame(RxHeader, RxData);
	}
}

void CanCommunicationInit()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09a      	sub	sp, #104	; 0x68
 8001200:	af02      	add	r7, sp, #8
	HAL_CAN_Start(&hcan2);
 8001202:	4859      	ldr	r0, [pc, #356]	; (8001368 <CanCommunicationInit+0x16c>)
 8001204:	f002 fa08 	bl	8003618 <HAL_CAN_Start>
	HAL_CAN_Start(&hcan1);
 8001208:	4858      	ldr	r0, [pc, #352]	; (800136c <CanCommunicationInit+0x170>)
 800120a:	f002 fa05 	bl	8003618 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 800120e:	2102      	movs	r1, #2
 8001210:	4855      	ldr	r0, [pc, #340]	; (8001368 <CanCommunicationInit+0x16c>)
 8001212:	f002 fb15 	bl	8003840 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001216:	2102      	movs	r1, #2
 8001218:	4854      	ldr	r0, [pc, #336]	; (800136c <CanCommunicationInit+0x170>)
 800121a:	f002 fb11 	bl	8003840 <HAL_CAN_ActivateNotification>

	CAN_TxHeaderTypeDef TxHeader;
	TxHeader.IDE = CAN_ID_STD;
 800121e:	2300      	movs	r3, #0
 8001220:	647b      	str	r3, [r7, #68]	; 0x44
	TxHeader.RTR = CAN_RTR_DATA;
 8001222:	2300      	movs	r3, #0
 8001224:	64bb      	str	r3, [r7, #72]	; 0x48
	TxHeader.DLC = 8;
 8001226:	2308      	movs	r3, #8
 8001228:	64fb      	str	r3, [r7, #76]	; 0x4c
	TxHeader.StdId = GIT_BUILD_TAG;
 800122a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800122e:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t TxData[8] =
 8001230:	4a4f      	ldr	r2, [pc, #316]	; (8001370 <CanCommunicationInit+0x174>)
 8001232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001236:	e892 0003 	ldmia.w	r2, {r0, r1}
 800123a:	e883 0003 	stmia.w	r3, {r0, r1}
	{ 1, 0, 0, 0, 0, 0, 0, 0 };

	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 800123e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001242:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001246:	4b4b      	ldr	r3, [pc, #300]	; (8001374 <CanCommunicationInit+0x178>)
 8001248:	4848      	ldr	r0, [pc, #288]	; (800136c <CanCommunicationInit+0x170>)
 800124a:	f002 fa29 	bl	80036a0 <HAL_CAN_AddTxMessage>

	TxHeader.DLC = 4;
 800124e:	2304      	movs	r3, #4
 8001250:	64fb      	str	r3, [r7, #76]	; 0x4c
	TxHeader.StdId = GIT_BUILD_TAG;
 8001252:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001256:	63fb      	str	r3, [r7, #60]	; 0x3c

	sscanf(_V_BUILD_TAG, "v%hu.%hu.%hu", (short unsigned*) &TxData[0],
 8001258:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800125c:	1c59      	adds	r1, r3, #1
 800125e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001262:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001266:	3302      	adds	r3, #2
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	460b      	mov	r3, r1
 800126c:	4942      	ldr	r1, [pc, #264]	; (8001378 <CanCommunicationInit+0x17c>)
 800126e:	4843      	ldr	r0, [pc, #268]	; (800137c <CanCommunicationInit+0x180>)
 8001270:	f029 fc96 	bl	802aba0 <siscanf>
			(short unsigned*) &TxData[1], (short unsigned*) &TxData[2]);
	TxData[3] = _V_COMMITS_AHEAD;
 8001274:	2301      	movs	r3, #1
 8001276:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

#ifdef _V_GIT_DIRTY_FLAG
	TxData[4] = 1;
 800127a:	2301      	movs	r3, #1
 800127c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
#endif
	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 8001280:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001284:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001288:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <CanCommunicationInit+0x178>)
 800128a:	4838      	ldr	r0, [pc, #224]	; (800136c <CanCommunicationInit+0x170>)
 800128c:	f002 fa08 	bl	80036a0 <HAL_CAN_AddTxMessage>

	char Temp[10];
	TxHeader.DLC = 8;
 8001290:	2308      	movs	r3, #8
 8001292:	64fb      	str	r3, [r7, #76]	; 0x4c
	TxHeader.StdId = GIT_COMMIT;
 8001294:	f240 1301 	movw	r3, #257	; 0x101
 8001298:	63fb      	str	r3, [r7, #60]	; 0x3c

	memset(TxData, 0, 8);
 800129a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800129e:	2208      	movs	r2, #8
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f028 fde0 	bl	8029e68 <memset>
	strcpy(Temp, _V_COMMIT);
 80012a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ac:	4a34      	ldr	r2, [pc, #208]	; (8001380 <CanCommunicationInit+0x184>)
 80012ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b0:	c303      	stmia	r3!, {r0, r1}
 80012b2:	701a      	strb	r2, [r3, #0]
	strncpy((char*) TxData, Temp, 8);
 80012b4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80012b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012bc:	2208      	movs	r2, #8
 80012be:	4618      	mov	r0, r3
 80012c0:	f029 fcf3 	bl	802acaa <strncpy>
	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 80012c4:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80012c8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <CanCommunicationInit+0x178>)
 80012ce:	4827      	ldr	r0, [pc, #156]	; (800136c <CanCommunicationInit+0x170>)
 80012d0:	f002 f9e6 	bl	80036a0 <HAL_CAN_AddTxMessage>

	// parse build date and send through can
	struct tm result;
	strptime(_V_DATE, "%d.%m.%Y %R", &result);
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	461a      	mov	r2, r3
 80012d8:	492a      	ldr	r1, [pc, #168]	; (8001384 <CanCommunicationInit+0x188>)
 80012da:	482b      	ldr	r0, [pc, #172]	; (8001388 <CanCommunicationInit+0x18c>)
 80012dc:	f02a f89e 	bl	802b41c <strptime>
	time_t tempTime = mktime(&result);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	4618      	mov	r0, r3
 80012e4:	f028 fea0 	bl	802a028 <mktime>
 80012e8:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58

	uint8_t counter = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	while (tempTime > 0 && counter < 8)
 80012f2:	e01f      	b.n	8001334 <CanCommunicationInit+0x138>
	{
		TxData[counter++] = tempTime % 0xFF;
 80012f4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80012f8:	f04f 02ff 	mov.w	r2, #255	; 0xff
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	f7ff f800 	bl	8000304 <__aeabi_ldivmod>
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	f887 2057 	strb.w	r2, [r7, #87]	; 0x57
 8001312:	b2c2      	uxtb	r2, r0
 8001314:	3360      	adds	r3, #96	; 0x60
 8001316:	443b      	add	r3, r7
 8001318:	f803 2c2c 	strb.w	r2, [r3, #-44]
		tempTime /= 0xFF;
 800131c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001320:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	f7fe ffec 	bl	8000304 <__aeabi_ldivmod>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
	while (tempTime > 0 && counter < 8)
 8001334:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001338:	2a01      	cmp	r2, #1
 800133a:	f173 0300 	sbcs.w	r3, r3, #0
 800133e:	db03      	blt.n	8001348 <CanCommunicationInit+0x14c>
 8001340:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001344:	2b07      	cmp	r3, #7
 8001346:	d9d5      	bls.n	80012f4 <CanCommunicationInit+0xf8>
	}

	TxHeader.StdId = BUILD_DATE;
 8001348:	f44f 7381 	mov.w	r3, #258	; 0x102
 800134c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_CAN_AddTxMessage(&INTERNAL_CAN_HANDLE, &TxHeader, TxData, &TxMailbox);
 800134e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001352:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001356:	4b07      	ldr	r3, [pc, #28]	; (8001374 <CanCommunicationInit+0x178>)
 8001358:	4804      	ldr	r0, [pc, #16]	; (800136c <CanCommunicationInit+0x170>)
 800135a:	f002 f9a1 	bl	80036a0 <HAL_CAN_AddTxMessage>
}
 800135e:	bf00      	nop
 8001360:	3760      	adds	r7, #96	; 0x60
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200006b0 	.word	0x200006b0
 800136c:	20000688 	.word	0x20000688
 8001370:	0802d018 	.word	0x0802d018
 8001374:	20000684 	.word	0x20000684
 8001378:	0802cfd4 	.word	0x0802cfd4
 800137c:	0802cfe4 	.word	0x0802cfe4
 8001380:	0802cfec 	.word	0x0802cfec
 8001384:	0802cff8 	.word	0x0802cff8
 8001388:	0802d004 	.word	0x0802d004

0800138c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001390:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <MX_CRC_Init+0x3c>)
 8001392:	4a0e      	ldr	r2, [pc, #56]	; (80013cc <MX_CRC_Init+0x40>)
 8001394:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <MX_CRC_Init+0x3c>)
 8001398:	2200      	movs	r2, #0
 800139a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800139c:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <MX_CRC_Init+0x3c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_CRC_Init+0x3c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80013a8:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <MX_CRC_Init+0x3c>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_CRC_Init+0x3c>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80013b4:	4804      	ldr	r0, [pc, #16]	; (80013c8 <MX_CRC_Init+0x3c>)
 80013b6:	f002 fb4b 	bl	8003a50 <HAL_CRC_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80013c0:	f000 fdba 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200006dc 	.word	0x200006dc
 80013cc:	40023000 	.word	0x40023000

080013d0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0a      	ldr	r2, [pc, #40]	; (8001408 <HAL_CRC_MspInit+0x38>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d10b      	bne.n	80013fa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_CRC_MspInit+0x3c>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a09      	ldr	r2, [pc, #36]	; (800140c <HAL_CRC_MspInit+0x3c>)
 80013e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <HAL_CRC_MspInit+0x3c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023000 	.word	0x40023000
 800140c:	40023800 	.word	0x40023800

08001410 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001416:	4b10      	ldr	r3, [pc, #64]	; (8001458 <MX_DMA_Init+0x48>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a0f      	ldr	r2, [pc, #60]	; (8001458 <MX_DMA_Init+0x48>)
 800141c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <MX_DMA_Init+0x48>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	2105      	movs	r1, #5
 8001432:	200b      	movs	r0, #11
 8001434:	f002 fae2 	bl	80039fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001438:	200b      	movs	r0, #11
 800143a:	f002 fafb 	bl	8003a34 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2105      	movs	r1, #5
 8001442:	200f      	movs	r0, #15
 8001444:	f002 fada 	bl	80039fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001448:	200f      	movs	r0, #15
 800144a:	f002 faf3 	bl	8003a34 <HAL_NVIC_EnableIRQ>

}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40023800 	.word	0x40023800

0800145c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001460:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_DMA2D_Init+0x68>)
 8001462:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <MX_DMA2D_Init+0x6c>)
 8001464:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001466:	4b17      	ldr	r3, [pc, #92]	; (80014c4 <MX_DMA2D_Init+0x68>)
 8001468:	2200      	movs	r2, #0
 800146a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB888;
 800146c:	4b15      	ldr	r3, [pc, #84]	; (80014c4 <MX_DMA2D_Init+0x68>)
 800146e:	2201      	movs	r2, #1
 8001470:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001472:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_DMA2D_Init+0x68>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <MX_DMA2D_Init+0x68>)
 800147a:	2200      	movs	r2, #0
 800147c:	639a      	str	r2, [r3, #56]	; 0x38
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB888;
 800147e:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_DMA2D_Init+0x68>)
 8001480:	2201      	movs	r2, #1
 8001482:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_DMA2D_Init+0x68>)
 8001486:	2200      	movs	r2, #0
 8001488:	641a      	str	r2, [r3, #64]	; 0x40
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_DMA2D_Init+0x68>)
 800148c:	2200      	movs	r2, #0
 800148e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma2d.LayerCfg[1].AlphaInverted = DMA2D_REGULAR_ALPHA;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_DMA2D_Init+0x68>)
 8001492:	2200      	movs	r2, #0
 8001494:	649a      	str	r2, [r3, #72]	; 0x48
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_DMA2D_Init+0x68>)
 8001498:	2200      	movs	r2, #0
 800149a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800149c:	4809      	ldr	r0, [pc, #36]	; (80014c4 <MX_DMA2D_Init+0x68>)
 800149e:	f002 ff67 	bl	8004370 <HAL_DMA2D_Init>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_DMA2D_Init+0x50>
  {
    Error_Handler();
 80014a8:	f000 fd46 	bl	8001f38 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80014ac:	2101      	movs	r1, #1
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_DMA2D_Init+0x68>)
 80014b0:	f002 ffb8 	bl	8004424 <HAL_DMA2D_ConfigLayer>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_DMA2D_Init+0x62>
  {
    Error_Handler();
 80014ba:	f000 fd3d 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000700 	.word	0x20000700
 80014c8:	4002b000 	.word	0x4002b000

080014cc <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <HAL_DMA2D_MspInit+0x38>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d10b      	bne.n	80014f6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_DMA2D_MspInit+0x3c>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_DMA2D_MspInit+0x3c>)
 80014e4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <HAL_DMA2D_MspInit+0x3c>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80014f6:	bf00      	nop
 80014f8:	3714      	adds	r7, #20
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	4002b000 	.word	0x4002b000
 8001508:	40023800 	.word	0x40023800

0800150c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b088      	sub	sp, #32
 8001510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001512:	1d3b      	adds	r3, r7, #4
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
 8001520:	615a      	str	r2, [r3, #20]
 8001522:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001524:	4b4a      	ldr	r3, [pc, #296]	; (8001650 <MX_FMC_Init+0x144>)
 8001526:	4a4b      	ldr	r2, [pc, #300]	; (8001654 <MX_FMC_Init+0x148>)
 8001528:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800152a:	4b49      	ldr	r3, [pc, #292]	; (8001650 <MX_FMC_Init+0x144>)
 800152c:	2200      	movs	r2, #0
 800152e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001530:	4b47      	ldr	r3, [pc, #284]	; (8001650 <MX_FMC_Init+0x144>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8001536:	4b46      	ldr	r3, [pc, #280]	; (8001650 <MX_FMC_Init+0x144>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800153c:	4b44      	ldr	r3, [pc, #272]	; (8001650 <MX_FMC_Init+0x144>)
 800153e:	2210      	movs	r2, #16
 8001540:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8001542:	4b43      	ldr	r3, [pc, #268]	; (8001650 <MX_FMC_Init+0x144>)
 8001544:	2200      	movs	r2, #0
 8001546:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001548:	4b41      	ldr	r3, [pc, #260]	; (8001650 <MX_FMC_Init+0x144>)
 800154a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800154e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <MX_FMC_Init+0x144>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001556:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <MX_FMC_Init+0x144>)
 8001558:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800155c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <MX_FMC_Init+0x144>)
 8001560:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001566:	4b3a      	ldr	r3, [pc, #232]	; (8001650 <MX_FMC_Init+0x144>)
 8001568:	2200      	movs	r2, #0
 800156a:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800156c:	2302      	movs	r3, #2
 800156e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001570:	2307      	movs	r3, #7
 8001572:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 6;
 8001578:	2306      	movs	r3, #6
 800157a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 800157c:	2303      	movs	r3, #3
 800157e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001580:	2302      	movs	r3, #2
 8001582:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001584:	2302      	movs	r3, #2
 8001586:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	4619      	mov	r1, r3
 800158c:	4830      	ldr	r0, [pc, #192]	; (8001650 <MX_FMC_Init+0x144>)
 800158e:	f006 ff6b 	bl	8008468 <HAL_SDRAM_Init>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8001598:	f000 fcce 	bl	8001f38 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */
	static FMC_SDRAM_CommandTypeDef command;
	__IO uint32_t
	tmp = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	603b      	str	r3, [r7, #0]

	//Krok 1: Konfiguracja zegarow
	command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <MX_FMC_Init+0x14c>)
 80015a2:	2201      	movs	r2, #1
 80015a4:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <MX_FMC_Init+0x14c>)
 80015a8:	2210      	movs	r2, #16
 80015aa:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <MX_FMC_Init+0x14c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <MX_FMC_Init+0x14c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	4926      	ldr	r1, [pc, #152]	; (8001658 <MX_FMC_Init+0x14c>)
 80015be:	4824      	ldr	r0, [pc, #144]	; (8001650 <MX_FMC_Init+0x144>)
 80015c0:	f006 ff86 	bl	80084d0 <HAL_SDRAM_SendCommand>
	//Krok 2: Opoznienie 100us minimum, wyslane 1ms Systick
	HAL_Delay(1);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f001 fa4f 	bl	8002a68 <HAL_Delay>
	//Krok 3: Konfiguracja PALL (precharge all)
	command.CommandMode = FMC_SDRAM_CMD_PALL;
 80015ca:	4b23      	ldr	r3, [pc, #140]	; (8001658 <MX_FMC_Init+0x14c>)
 80015cc:	2202      	movs	r2, #2
 80015ce:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <MX_FMC_Init+0x14c>)
 80015d2:	2210      	movs	r2, #16
 80015d4:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <MX_FMC_Init+0x14c>)
 80015d8:	2201      	movs	r2, #1
 80015da:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 80015dc:	4b1e      	ldr	r3, [pc, #120]	; (8001658 <MX_FMC_Init+0x14c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
	//Wyslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 80015e2:	f04f 32ff 	mov.w	r2, #4294967295
 80015e6:	491c      	ldr	r1, [pc, #112]	; (8001658 <MX_FMC_Init+0x14c>)
 80015e8:	4819      	ldr	r0, [pc, #100]	; (8001650 <MX_FMC_Init+0x144>)
 80015ea:	f006 ff71 	bl	80084d0 <HAL_SDRAM_SendCommand>
	//Krok 4: Komenda Auto Refresh
	command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <MX_FMC_Init+0x14c>)
 80015f0:	2203      	movs	r2, #3
 80015f2:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_FMC_Init+0x14c>)
 80015f6:	2210      	movs	r2, #16
 80015f8:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 8;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_FMC_Init+0x14c>)
 80015fc:	2208      	movs	r2, #8
 80015fe:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = 0;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_FMC_Init+0x14c>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001606:	f04f 32ff 	mov.w	r2, #4294967295
 800160a:	4913      	ldr	r1, [pc, #76]	; (8001658 <MX_FMC_Init+0x14c>)
 800160c:	4810      	ldr	r0, [pc, #64]	; (8001650 <MX_FMC_Init+0x144>)
 800160e:	f006 ff5f 	bl	80084d0 <HAL_SDRAM_SendCommand>
	//Krok 5: Programowanie trybu dla zewnetrznej pamieci
	tmp = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1
 8001612:	f44f 7308 	mov.w	r3, #544	; 0x220
 8001616:	603b      	str	r3, [r7, #0]
			| SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
			| SDRAM_MODEREG_OPERATING_MODE_STANDARD
			| SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8001618:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_FMC_Init+0x14c>)
 800161a:	2204      	movs	r2, #4
 800161c:	601a      	str	r2, [r3, #0]
	command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800161e:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <MX_FMC_Init+0x14c>)
 8001620:	2210      	movs	r2, #16
 8001622:	605a      	str	r2, [r3, #4]
	command.AutoRefreshNumber = 1;
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <MX_FMC_Init+0x14c>)
 8001626:	2201      	movs	r2, #1
 8001628:	609a      	str	r2, [r3, #8]
	command.ModeRegisterDefinition = tmp;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <MX_FMC_Init+0x14c>)
 800162e:	60d3      	str	r3, [r2, #12]
	//Przeslanie komendy
	HAL_SDRAM_SendCommand(&hsdram1, &command, HAL_MAX_DELAY);
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	4908      	ldr	r1, [pc, #32]	; (8001658 <MX_FMC_Init+0x14c>)
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <MX_FMC_Init+0x144>)
 8001638:	f006 ff4a 	bl	80084d0 <HAL_SDRAM_SendCommand>
	//Krok 6: Ustawienie licznika odswiezania
	//15.62us*freq -20
	HAL_SDRAM_ProgramRefreshRate(&hsdram1, 1660);
 800163c:	f240 617c 	movw	r1, #1660	; 0x67c
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <MX_FMC_Init+0x144>)
 8001642:	f006 ff7a 	bl	800853a <HAL_SDRAM_ProgramRefreshRate>
	//HAL_SDRAM_ProgramRefreshRate(&hsdram1, 760);

  /* USER CODE END FMC_Init 2 */
}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000758 	.word	0x20000758
 8001654:	a0000140 	.word	0xa0000140
 8001658:	20000790 	.word	0x20000790

0800165c <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001670:	4b3a      	ldr	r3, [pc, #232]	; (800175c <HAL_FMC_MspInit+0x100>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d16d      	bne.n	8001754 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8001678:	4b38      	ldr	r3, [pc, #224]	; (800175c <HAL_FMC_MspInit+0x100>)
 800167a:	2201      	movs	r2, #1
 800167c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800167e:	4b38      	ldr	r3, [pc, #224]	; (8001760 <HAL_FMC_MspInit+0x104>)
 8001680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001682:	4a37      	ldr	r2, [pc, #220]	; (8001760 <HAL_FMC_MspInit+0x104>)
 8001684:	f043 0301 	orr.w	r3, r3, #1
 8001688:	6393      	str	r3, [r2, #56]	; 0x38
 800168a:	4b35      	ldr	r3, [pc, #212]	; (8001760 <HAL_FMC_MspInit+0x104>)
 800168c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168e:	f003 0301 	and.w	r3, r3, #1
 8001692:	603b      	str	r3, [r7, #0]
 8001694:	683b      	ldr	r3, [r7, #0]
  PG15   ------> FMC_SDNCAS
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001696:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800169a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a4:	2303      	movs	r3, #3
 80016a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a8:	230c      	movs	r3, #12
 80016aa:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	4619      	mov	r1, r3
 80016b0:	482c      	ldr	r0, [pc, #176]	; (8001764 <HAL_FMC_MspInit+0x108>)
 80016b2:	f002 ff55 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016b6:	230c      	movs	r3, #12
 80016b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c6:	230c      	movs	r3, #12
 80016c8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	4619      	mov	r1, r3
 80016ce:	4826      	ldr	r0, [pc, #152]	; (8001768 <HAL_FMC_MspInit+0x10c>)
 80016d0:	f002 ff46 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e4:	230c      	movs	r3, #12
 80016e6:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	1d3b      	adds	r3, r7, #4
 80016ea:	4619      	mov	r1, r3
 80016ec:	481f      	ldr	r0, [pc, #124]	; (800176c <HAL_FMC_MspInit+0x110>)
 80016ee:	f002 ff37 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_15;
 80016f2:	f248 1311 	movw	r3, #33041	; 0x8111
 80016f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001700:	2303      	movs	r3, #3
 8001702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001704:	230c      	movs	r3, #12
 8001706:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4619      	mov	r1, r3
 800170c:	4818      	ldr	r0, [pc, #96]	; (8001770 <HAL_FMC_MspInit+0x114>)
 800170e:	f002 ff27 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001712:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001716:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001720:	2303      	movs	r3, #3
 8001722:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001724:	230c      	movs	r3, #12
 8001726:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4811      	ldr	r0, [pc, #68]	; (8001774 <HAL_FMC_MspInit+0x118>)
 800172e:	f002 ff17 	bl	8004560 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001732:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001736:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001744:	230c      	movs	r3, #12
 8001746:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001748:	1d3b      	adds	r3, r7, #4
 800174a:	4619      	mov	r1, r3
 800174c:	480a      	ldr	r0, [pc, #40]	; (8001778 <HAL_FMC_MspInit+0x11c>)
 800174e:	f002 ff07 	bl	8004560 <HAL_GPIO_Init>
 8001752:	e000      	b.n	8001756 <HAL_FMC_MspInit+0xfa>
    return;
 8001754:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	2000078c 	.word	0x2000078c
 8001760:	40023800 	.word	0x40023800
 8001764:	40021400 	.word	0x40021400
 8001768:	40020800 	.word	0x40020800
 800176c:	40020000 	.word	0x40020000
 8001770:	40021800 	.word	0x40021800
 8001774:	40021000 	.word	0x40021000
 8001778:	40020c00 	.word	0x40020c00

0800177c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001784:	f7ff ff6a 	bl	800165c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001788:	bf00      	nop
 800178a:	3708      	adds	r7, #8
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}

08001790 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of hardwareTask */
  hardwareTaskHandle = osThreadNew(StartHardwareTask, NULL, &hardwareTask_attributes);
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <MX_FREERTOS_Init+0x58>)
 8001796:	2100      	movs	r1, #0
 8001798:	4814      	ldr	r0, [pc, #80]	; (80017ec <MX_FREERTOS_Init+0x5c>)
 800179a:	f008 fd7b 	bl	800a294 <osThreadNew>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <MX_FREERTOS_Init+0x60>)
 80017a2:	6013      	str	r3, [r2, #0]

  /* creation of RPMLed */
  RPMLedHandle = osThreadNew(startRPMLed, NULL, &RPMLed_attributes);
 80017a4:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <MX_FREERTOS_Init+0x64>)
 80017a6:	2100      	movs	r1, #0
 80017a8:	4813      	ldr	r0, [pc, #76]	; (80017f8 <MX_FREERTOS_Init+0x68>)
 80017aa:	f008 fd73 	bl	800a294 <osThreadNew>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a12      	ldr	r2, [pc, #72]	; (80017fc <MX_FREERTOS_Init+0x6c>)
 80017b2:	6013      	str	r3, [r2, #0]

  /* creation of touchGFXTask */
  touchGFXTaskHandle = osThreadNew(startTouchGFXTask, NULL, &touchGFXTask_attributes);
 80017b4:	4a12      	ldr	r2, [pc, #72]	; (8001800 <MX_FREERTOS_Init+0x70>)
 80017b6:	2100      	movs	r1, #0
 80017b8:	4812      	ldr	r0, [pc, #72]	; (8001804 <MX_FREERTOS_Init+0x74>)
 80017ba:	f008 fd6b 	bl	800a294 <osThreadNew>
 80017be:	4603      	mov	r3, r0
 80017c0:	4a11      	ldr	r2, [pc, #68]	; (8001808 <MX_FREERTOS_Init+0x78>)
 80017c2:	6013      	str	r3, [r2, #0]

  /* creation of statusLedTask */
  statusLedTaskHandle = osThreadNew(startStatusLedTask, NULL, &statusLedTask_attributes);
 80017c4:	4a11      	ldr	r2, [pc, #68]	; (800180c <MX_FREERTOS_Init+0x7c>)
 80017c6:	2100      	movs	r1, #0
 80017c8:	4811      	ldr	r0, [pc, #68]	; (8001810 <MX_FREERTOS_Init+0x80>)
 80017ca:	f008 fd63 	bl	800a294 <osThreadNew>
 80017ce:	4603      	mov	r3, r0
 80017d0:	4a10      	ldr	r2, [pc, #64]	; (8001814 <MX_FREERTOS_Init+0x84>)
 80017d2:	6013      	str	r3, [r2, #0]

  /* creation of DisplayDashboar */
  DisplayDashboarHandle = osThreadNew(StartDisplayDashoard, NULL, &DisplayDashboar_attributes);
 80017d4:	4a10      	ldr	r2, [pc, #64]	; (8001818 <MX_FREERTOS_Init+0x88>)
 80017d6:	2100      	movs	r1, #0
 80017d8:	4810      	ldr	r0, [pc, #64]	; (800181c <MX_FREERTOS_Init+0x8c>)
 80017da:	f008 fd5b 	bl	800a294 <osThreadNew>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a0f      	ldr	r2, [pc, #60]	; (8001820 <MX_FREERTOS_Init+0x90>)
 80017e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	0802f410 	.word	0x0802f410
 80017ec:	08001825 	.word	0x08001825
 80017f0:	200007f0 	.word	0x200007f0
 80017f4:	0802f434 	.word	0x0802f434
 80017f8:	08001839 	.word	0x08001839
 80017fc:	200007f4 	.word	0x200007f4
 8001800:	0802f458 	.word	0x0802f458
 8001804:	08001879 	.word	0x08001879
 8001808:	200007f8 	.word	0x200007f8
 800180c:	0802f47c 	.word	0x0802f47c
 8001810:	08001889 	.word	0x08001889
 8001814:	200007fc 	.word	0x200007fc
 8001818:	0802f4a0 	.word	0x0802f4a0
 800181c:	08001899 	.word	0x08001899
 8001820:	20000800 	.word	0x20000800

08001824 <StartHardwareTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartHardwareTask */
void StartHardwareTask(void *argument)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartHardwareTask */
	CanCommunicationInit();
 800182c:	f7ff fce6 	bl	80011fc <CanCommunicationInit>
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001830:	2001      	movs	r0, #1
 8001832:	f008 fdd5 	bl	800a3e0 <osDelay>
 8001836:	e7fb      	b.n	8001830 <StartHardwareTask+0xc>

08001838 <startRPMLed>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startRPMLed */
void startRPMLed(void *argument)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startRPMLed */
	WS2812_Init();
 8001840:	f7fe ff3e 	bl	80006c0 <WS2812_Init>
	/* Infinite loop */
	for (;;)
	{
		uint8_t displayMode = telemetryData.gear == 0 ? 0 : displaySetup.ledBarMode;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <startRPMLed+0x34>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d002      	beq.n	8001852 <startRPMLed+0x1a>
 800184c:	4b08      	ldr	r3, [pc, #32]	; (8001870 <startRPMLed+0x38>)
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	e000      	b.n	8001854 <startRPMLed+0x1c>
 8001852:	2300      	movs	r3, #0
 8001854:	73fb      	strb	r3, [r7, #15]
		updateLeds(ecumasterData.rpm, displayMode);
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <startRPMLed+0x3c>)
 8001858:	881b      	ldrh	r3, [r3, #0]
 800185a:	7bfa      	ldrb	r2, [r7, #15]
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff f874 	bl	800094c <updateLeds>
		osDelay(50);
 8001864:	2032      	movs	r0, #50	; 0x32
 8001866:	f008 fdbb 	bl	800a3e0 <osDelay>
	{
 800186a:	e7eb      	b.n	8001844 <startRPMLed+0xc>
 800186c:	200007dc 	.word	0x200007dc
 8001870:	20000008 	.word	0x20000008
 8001874:	200007a0 	.word	0x200007a0

08001878 <startTouchGFXTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startTouchGFXTask */
void startTouchGFXTask(void *argument)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startTouchGFXTask */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001880:	2001      	movs	r0, #1
 8001882:	f008 fdad 	bl	800a3e0 <osDelay>
 8001886:	e7fb      	b.n	8001880 <startTouchGFXTask+0x8>

08001888 <startStatusLedTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_startStatusLedTask */
void startStatusLedTask(void *argument)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startStatusLedTask */
	/* Infinite loop */
	for (;;)
	{
		osDelay(1);
 8001890:	2001      	movs	r0, #1
 8001892:	f008 fda5 	bl	800a3e0 <osDelay>
 8001896:	e7fb      	b.n	8001890 <startStatusLedTask+0x8>

08001898 <StartDisplayDashoard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayDashoard */
void StartDisplayDashoard(void *argument)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayDashoard */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f008 fd9d 	bl	800a3e0 <osDelay>
 80018a6:	e7fb      	b.n	80018a0 <StartDisplayDashoard+0x8>

080018a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b089      	sub	sp, #36	; 0x24
 80018ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ae:	4b33      	ldr	r3, [pc, #204]	; (800197c <MX_GPIO_Init+0xd4>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a32      	ldr	r2, [pc, #200]	; (800197c <MX_GPIO_Init+0xd4>)
 80018b4:	f043 0310 	orr.w	r3, r3, #16
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <MX_GPIO_Init+0xd4>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0310 	and.w	r3, r3, #16
 80018c2:	61fb      	str	r3, [r7, #28]
 80018c4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <MX_GPIO_Init+0xd4>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	4a2c      	ldr	r2, [pc, #176]	; (800197c <MX_GPIO_Init+0xd4>)
 80018cc:	f043 0320 	orr.w	r3, r3, #32
 80018d0:	6313      	str	r3, [r2, #48]	; 0x30
 80018d2:	4b2a      	ldr	r3, [pc, #168]	; (800197c <MX_GPIO_Init+0xd4>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	f003 0320 	and.w	r3, r3, #32
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018de:	4b27      	ldr	r3, [pc, #156]	; (800197c <MX_GPIO_Init+0xd4>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	4a26      	ldr	r2, [pc, #152]	; (800197c <MX_GPIO_Init+0xd4>)
 80018e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ea:	4b24      	ldr	r3, [pc, #144]	; (800197c <MX_GPIO_Init+0xd4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f6:	4b21      	ldr	r3, [pc, #132]	; (800197c <MX_GPIO_Init+0xd4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <MX_GPIO_Init+0xd4>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b1e      	ldr	r3, [pc, #120]	; (800197c <MX_GPIO_Init+0xd4>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	613b      	str	r3, [r7, #16]
 800190c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190e:	4b1b      	ldr	r3, [pc, #108]	; (800197c <MX_GPIO_Init+0xd4>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a1a      	ldr	r2, [pc, #104]	; (800197c <MX_GPIO_Init+0xd4>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b18      	ldr	r3, [pc, #96]	; (800197c <MX_GPIO_Init+0xd4>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60fb      	str	r3, [r7, #12]
 8001924:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001926:	4b15      	ldr	r3, [pc, #84]	; (800197c <MX_GPIO_Init+0xd4>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a14      	ldr	r2, [pc, #80]	; (800197c <MX_GPIO_Init+0xd4>)
 800192c:	f043 0302 	orr.w	r3, r3, #2
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b12      	ldr	r3, [pc, #72]	; (800197c <MX_GPIO_Init+0xd4>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <MX_GPIO_Init+0xd4>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <MX_GPIO_Init+0xd4>)
 8001944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <MX_GPIO_Init+0xd4>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <MX_GPIO_Init+0xd4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <MX_GPIO_Init+0xd4>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <MX_GPIO_Init+0xd4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

}
 800196e:	bf00      	nop
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <MX_JPEG_Init>:

JPEG_HandleTypeDef hjpeg;

/* JPEG init function */
void MX_JPEG_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE END JPEG_Init 0 */

  /* USER CODE BEGIN JPEG_Init 1 */

  /* USER CODE END JPEG_Init 1 */
  hjpeg.Instance = JPEG;
 8001984:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <MX_JPEG_Init+0x20>)
 8001986:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <MX_JPEG_Init+0x24>)
 8001988:	601a      	str	r2, [r3, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 800198a:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_JPEG_Init+0x20>)
 800198c:	f003 f8a0 	bl	8004ad0 <HAL_JPEG_Init>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_JPEG_Init+0x1a>
  {
    Error_Handler();
 8001996:	f000 facf 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN JPEG_Init 2 */

  /* USER CODE END JPEG_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	20000804 	.word	0x20000804
 80019a4:	50051000 	.word	0x50051000

080019a8 <HAL_JPEG_MspInit>:

void HAL_JPEG_MspInit(JPEG_HandleTypeDef* jpegHandle)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]

  if(jpegHandle->Instance==JPEG)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <HAL_JPEG_MspInit+0x38>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d10b      	bne.n	80019d2 <HAL_JPEG_MspInit+0x2a>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* JPEG clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_JPEG_MspInit+0x3c>)
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_JPEG_MspInit+0x3c>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6353      	str	r3, [r2, #52]	; 0x34
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_JPEG_MspInit+0x3c>)
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	50051000 	.word	0x50051000
 80019e4:	40023800 	.word	0x40023800

080019e8 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2234      	movs	r2, #52	; 0x34
 80019f2:	2100      	movs	r1, #0
 80019f4:	4618      	mov	r0, r3
 80019f6:	f028 fa37 	bl	8029e68 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 80019fc:	4a3a      	ldr	r2, [pc, #232]	; (8001ae8 <MX_LTDC_Init+0x100>)
 80019fe:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a00:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a06:	4b37      	ldr	r3, [pc, #220]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a0c:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a12:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 3;
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a1a:	2203      	movs	r2, #3
 8001a1c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 39;
 8001a1e:	4b31      	ldr	r3, [pc, #196]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a20:	2227      	movs	r2, #39	; 0x27
 8001a22:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 11;
 8001a24:	4b2f      	ldr	r3, [pc, #188]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a26:	220b      	movs	r2, #11
 8001a28:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 47;
 8001a2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a2c:	222f      	movs	r2, #47	; 0x2f
 8001a2e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 811;
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a32:	f240 322b 	movw	r2, #811	; 0x32b
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 527;
 8001a38:	4b2a      	ldr	r3, [pc, #168]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a3a:	f240 220f 	movw	r2, #527	; 0x20f
 8001a3e:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 819;
 8001a40:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a42:	f240 3233 	movw	r2, #819	; 0x333
 8001a46:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 535;
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a4a:	f240 2217 	movw	r2, #535	; 0x217
 8001a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001a58:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001a68:	481e      	ldr	r0, [pc, #120]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001a6a:	f004 fb69 	bl	8006140 <HAL_LTDC_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001a74:	f000 fa60 	bl	8001f38 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 800;
 8001a7c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001a80:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 480;
 8001a86:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001a8a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001a90:	23ff      	movs	r3, #255	; 0xff
 8001a92:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001aa2:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 800;
 8001aa8:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 480;
 8001aae:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4805      	ldr	r0, [pc, #20]	; (8001ae4 <MX_LTDC_Init+0xfc>)
 8001ace:	f004 fcbf 	bl	8006450 <HAL_LTDC_ConfigLayer>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001ad8:	f000 fa2e 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	3738      	adds	r7, #56	; 0x38
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	2000085c 	.word	0x2000085c
 8001ae8:	40016800 	.word	0x40016800

08001aec <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b0b4      	sub	sp, #208	; 0xd0
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b08:	2290      	movs	r2, #144	; 0x90
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f028 f9ab 	bl	8029e68 <memset>
  if(ltdcHandle->Instance==LTDC)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4aa6      	ldr	r2, [pc, #664]	; (8001db0 <HAL_LTDC_MspInit+0x2c4>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	f040 8145 	bne.w	8001da8 <HAL_LTDC_MspInit+0x2bc>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b1e:	2308      	movs	r3, #8
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 279;
 8001b22:	f240 1317 	movw	r3, #279	; 0x117
 8001b26:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8001b30:	2300      	movs	r3, #0
 8001b32:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001b34:	2301      	movs	r3, #1
 8001b36:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8001b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b3c:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b42:	4618      	mov	r0, r3
 8001b44:	f006 f868 	bl	8007c18 <HAL_RCCEx_PeriphCLKConfig>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <HAL_LTDC_MspInit+0x66>
    {
      Error_Handler();
 8001b4e:	f000 f9f3 	bl	8001f38 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b52:	4b98      	ldr	r3, [pc, #608]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a97      	ldr	r2, [pc, #604]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b95      	ldr	r3, [pc, #596]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b66:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b68:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6a:	4b92      	ldr	r3, [pc, #584]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	4a91      	ldr	r2, [pc, #580]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	6313      	str	r3, [r2, #48]	; 0x30
 8001b76:	4b8f      	ldr	r3, [pc, #572]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b82:	4b8c      	ldr	r3, [pc, #560]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a8b      	ldr	r2, [pc, #556]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b88:	f043 0320 	orr.w	r3, r3, #32
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b89      	ldr	r3, [pc, #548]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0320 	and.w	r3, r3, #32
 8001b96:	623b      	str	r3, [r7, #32]
 8001b98:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	4b86      	ldr	r3, [pc, #536]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a85      	ldr	r2, [pc, #532]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b83      	ldr	r3, [pc, #524]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb2:	4b80      	ldr	r3, [pc, #512]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	4a7f      	ldr	r2, [pc, #508]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bbe:	4b7d      	ldr	r3, [pc, #500]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	61bb      	str	r3, [r7, #24]
 8001bc8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b7a      	ldr	r3, [pc, #488]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	4a79      	ldr	r2, [pc, #484]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd6:	4b77      	ldr	r3, [pc, #476]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001be2:	4b74      	ldr	r3, [pc, #464]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a73      	ldr	r2, [pc, #460]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001be8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a6d      	ldr	r2, [pc, #436]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b6b      	ldr	r3, [pc, #428]	; (8001db4 <HAL_LTDC_MspInit+0x2c8>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	68fb      	ldr	r3, [r7, #12]
    PG12     ------> LTDC_B4
    PG13     ------> LTDC_R0
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001c12:	2370      	movs	r3, #112	; 0x70
 8001c14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c2a:	230e      	movs	r3, #14
 8001c2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c34:	4619      	mov	r1, r3
 8001c36:	4860      	ldr	r0, [pc, #384]	; (8001db8 <HAL_LTDC_MspInit+0x2cc>)
 8001c38:	f002 fc92 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c56:	230e      	movs	r3, #14
 8001c58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c60:	4619      	mov	r1, r3
 8001c62:	4856      	ldr	r0, [pc, #344]	; (8001dbc <HAL_LTDC_MspInit+0x2d0>)
 8001c64:	f002 fc7c 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8001c68:	f240 23c1 	movw	r3, #705	; 0x2c1
 8001c6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c82:	230e      	movs	r3, #14
 8001c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	484c      	ldr	r0, [pc, #304]	; (8001dc0 <HAL_LTDC_MspInit+0x2d4>)
 8001c90:	f002 fc66 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 8001c94:	f240 437e 	movw	r3, #1150	; 0x47e
 8001c98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cae:	230e      	movs	r3, #14
 8001cb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4842      	ldr	r0, [pc, #264]	; (8001dc4 <HAL_LTDC_MspInit+0x2d8>)
 8001cbc:	f002 fc50 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cd8:	2309      	movs	r3, #9
 8001cda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cde:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4838      	ldr	r0, [pc, #224]	; (8001dc8 <HAL_LTDC_MspInit+0x2dc>)
 8001ce6:	f002 fc3b 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8001cea:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001cee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d04:	230e      	movs	r3, #14
 8001d06:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d0e:	4619      	mov	r1, r3
 8001d10:	482d      	ldr	r0, [pc, #180]	; (8001dc8 <HAL_LTDC_MspInit+0x2dc>)
 8001d12:	f002 fc25 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11|GPIO_PIN_13;
 8001d16:	f44f 5323 	mov.w	r3, #10432	; 0x28c0
 8001d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d30:	230e      	movs	r3, #14
 8001d32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d36:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4823      	ldr	r0, [pc, #140]	; (8001dcc <HAL_LTDC_MspInit+0x2e0>)
 8001d3e:	f002 fc0f 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d42:	2308      	movs	r3, #8
 8001d44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d48:	2302      	movs	r3, #2
 8001d4a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d5a:	230e      	movs	r3, #14
 8001d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d60:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d64:	4619      	mov	r1, r3
 8001d66:	481a      	ldr	r0, [pc, #104]	; (8001dd0 <HAL_LTDC_MspInit+0x2e4>)
 8001d68:	f002 fbfa 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001d6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d70:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d74:	2302      	movs	r3, #2
 8001d76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d86:	2309      	movs	r3, #9
 8001d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d8c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d90:	4619      	mov	r1, r3
 8001d92:	480e      	ldr	r0, [pc, #56]	; (8001dcc <HAL_LTDC_MspInit+0x2e0>)
 8001d94:	f002 fbe4 	bl	8004560 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2105      	movs	r1, #5
 8001d9c:	2058      	movs	r0, #88	; 0x58
 8001d9e:	f001 fe2d 	bl	80039fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001da2:	2058      	movs	r0, #88	; 0x58
 8001da4:	f001 fe46 	bl	8003a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8001da8:	bf00      	nop
 8001daa:	37d0      	adds	r7, #208	; 0xd0
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40016800 	.word	0x40016800
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40021400 	.word	0x40021400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40021800 	.word	0x40021800
 8001dd0:	40020c00 	.word	0x40020c00

08001dd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dd8:	f000 fe19 	bl	8002a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ddc:	f000 f82a 	bl	8001e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001de0:	f7ff fd62 	bl	80018a8 <MX_GPIO_Init>
  MX_CRC_Init();
 8001de4:	f7ff fad2 	bl	800138c <MX_CRC_Init>
  MX_DMA2D_Init();
 8001de8:	f7ff fb38 	bl	800145c <MX_DMA2D_Init>
  MX_LTDC_Init();
 8001dec:	f7ff fdfc 	bl	80019e8 <MX_LTDC_Init>
  MX_ADC1_Init();
 8001df0:	f7fe fe4e 	bl	8000a90 <MX_ADC1_Init>
  MX_CAN1_Init();
 8001df4:	f7ff f8c2 	bl	8000f7c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001df8:	f7ff f914 	bl	8001024 <MX_CAN2_Init>
  MX_FMC_Init();
 8001dfc:	f7ff fb86 	bl	800150c <MX_FMC_Init>
  MX_JPEG_Init();
 8001e00:	f7ff fdbe 	bl	8001980 <MX_JPEG_Init>
  MX_QUADSPI_Init();
 8001e04:	f000 f89e 	bl	8001f44 <MX_QUADSPI_Init>
  MX_TIM3_Init();
 8001e08:	f000 fb30 	bl	800246c <MX_TIM3_Init>
  MX_TIM4_Init();
 8001e0c:	f000 fba4 	bl	8002558 <MX_TIM4_Init>
  MX_DMA_Init();
 8001e10:	f7ff fafe 	bl	8001410 <MX_DMA_Init>
  MX_TIM8_Init();
 8001e14:	f000 fc16 	bl	8002644 <MX_TIM8_Init>
  MX_TouchGFX_Init();
 8001e18:	f00c f8c7 	bl	800dfaa <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 8001e1c:	f00c f8be 	bl	800df9c <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */
  FLASH_QSPI_Init();
 8001e20:	f7fe fee0 	bl	8000be4 <FLASH_QSPI_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001e24:	f008 f9cc 	bl	800a1c0 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001e28:	f7ff fcb2 	bl	8001790 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e2c:	f008 f9fc 	bl	800a228 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <main+0x5c>
	...

08001e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	; 0x50
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 031c 	add.w	r3, r7, #28
 8001e3e:	2234      	movs	r2, #52	; 0x34
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f028 f810 	bl	8029e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	60da      	str	r2, [r3, #12]
 8001e56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b2c      	ldr	r3, [pc, #176]	; (8001f0c <SystemClock_Config+0xd8>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	4a2b      	ldr	r2, [pc, #172]	; (8001f0c <SystemClock_Config+0xd8>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6413      	str	r3, [r2, #64]	; 0x40
 8001e64:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <SystemClock_Config+0xd8>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	607b      	str	r3, [r7, #4]
 8001e6e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e70:	4b27      	ldr	r3, [pc, #156]	; (8001f10 <SystemClock_Config+0xdc>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a26      	ldr	r2, [pc, #152]	; (8001f10 <SystemClock_Config+0xdc>)
 8001e76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e7a:	6013      	str	r3, [r2, #0]
 8001e7c:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <SystemClock_Config+0xdc>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001e90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e92:	2302      	movs	r3, #2
 8001e94:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e96:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001e9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001e9c:	2319      	movs	r3, #25
 8001e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001ea0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001ea4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f005 f9fc 	bl	80072b4 <HAL_RCC_OscConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001ec2:	f000 f839 	bl	8001f38 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ec6:	f004 fcd3 	bl	8006870 <HAL_PWREx_EnableOverDrive>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001ed0:	f000 f832 	bl	8001f38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed4:	230f      	movs	r3, #15
 8001ed6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ed8:	2302      	movs	r3, #2
 8001eda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ee0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001ee4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ee6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eea:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001eec:	f107 0308 	add.w	r3, r7, #8
 8001ef0:	2107      	movs	r1, #7
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f005 fc8c 	bl	8007810 <HAL_RCC_ClockConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SystemClock_Config+0xce>
  {
    Error_Handler();
 8001efe:	f000 f81b 	bl	8001f38 <Error_Handler>
  }
}
 8001f02:	bf00      	nop
 8001f04:	3750      	adds	r7, #80	; 0x50
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023800 	.word	0x40023800
 8001f10:	40007000 	.word	0x40007000

08001f14 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a04      	ldr	r2, [pc, #16]	; (8001f34 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001f26:	f000 fd7f 	bl	8002a28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40001000 	.word	0x40001000

08001f38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f3c:	b672      	cpsid	i
}
 8001f3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <Error_Handler+0x8>
	...

08001f44 <MX_QUADSPI_Init>:

QSPI_HandleTypeDef hqspi;

/* QUADSPI init function */
void MX_QUADSPI_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_Init 0 */

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  hqspi.Instance = QUADSPI;
 8001f48:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <MX_QUADSPI_Init+0x54>)
 8001f4c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 3;
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f50:	2203      	movs	r2, #3
 8001f52:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8001f54:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f56:	2201      	movs	r2, #1
 8001f58:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f5c:	2210      	movs	r2, #16
 8001f5e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f62:	2217      	movs	r2, #23
 8001f64:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_6_CYCLE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f68:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8001f6c:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8001f74:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8001f80:	4804      	ldr	r0, [pc, #16]	; (8001f94 <MX_QUADSPI_Init+0x50>)
 8001f82:	f004 fcc5 	bl	8006910 <HAL_QSPI_Init>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <MX_QUADSPI_Init+0x4c>
  {
    Error_Handler();
 8001f8c:	f7ff ffd4 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20000904 	.word	0x20000904
 8001f98:	a0001000 	.word	0xa0001000

08001f9c <HAL_QSPI_MspInit>:

void HAL_QSPI_MspInit(QSPI_HandleTypeDef* qspiHandle)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(qspiHandle->Instance==QUADSPI)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a35      	ldr	r2, [pc, #212]	; (8002090 <HAL_QSPI_MspInit+0xf4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d164      	bne.n	8002088 <HAL_QSPI_MspInit+0xec>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* QUADSPI clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001fbe:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_QSPI_MspInit+0xf8>)
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	4a34      	ldr	r2, [pc, #208]	; (8002094 <HAL_QSPI_MspInit+0xf8>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6393      	str	r3, [r2, #56]	; 0x38
 8001fca:	4b32      	ldr	r3, [pc, #200]	; (8002094 <HAL_QSPI_MspInit+0xf8>)
 8001fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fd6:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <HAL_QSPI_MspInit+0xf8>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a2e      	ldr	r2, [pc, #184]	; (8002094 <HAL_QSPI_MspInit+0xf8>)
 8001fdc:	f043 0320 	orr.w	r3, r3, #32
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_QSPI_MspInit+0xf8>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0320 	and.w	r3, r3, #32
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fee:	4b29      	ldr	r3, [pc, #164]	; (8002094 <HAL_QSPI_MspInit+0xf8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	4a28      	ldr	r2, [pc, #160]	; (8002094 <HAL_QSPI_MspInit+0xf8>)
 8001ff4:	f043 0302 	orr.w	r3, r3, #2
 8001ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffa:	4b26      	ldr	r3, [pc, #152]	; (8002094 <HAL_QSPI_MspInit+0xf8>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	60bb      	str	r3, [r7, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002006:	23c0      	movs	r3, #192	; 0xc0
 8002008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800200a:	2302      	movs	r3, #2
 800200c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002012:	2303      	movs	r3, #3
 8002014:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002016:	2309      	movs	r3, #9
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	481d      	ldr	r0, [pc, #116]	; (8002098 <HAL_QSPI_MspInit+0xfc>)
 8002022:	f002 fa9d 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002030:	2300      	movs	r3, #0
 8002032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002034:	2303      	movs	r3, #3
 8002036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002038:	230a      	movs	r3, #10
 800203a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800203c:	f107 0314 	add.w	r3, r7, #20
 8002040:	4619      	mov	r1, r3
 8002042:	4815      	ldr	r0, [pc, #84]	; (8002098 <HAL_QSPI_MspInit+0xfc>)
 8002044:	f002 fa8c 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002048:	2304      	movs	r3, #4
 800204a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204c:	2302      	movs	r3, #2
 800204e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002054:	2303      	movs	r3, #3
 8002056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002058:	2309      	movs	r3, #9
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4619      	mov	r1, r3
 8002062:	480e      	ldr	r0, [pc, #56]	; (800209c <HAL_QSPI_MspInit+0x100>)
 8002064:	f002 fa7c 	bl	8004560 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002068:	2340      	movs	r3, #64	; 0x40
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002074:	2303      	movs	r3, #3
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002078:	230a      	movs	r3, #10
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4806      	ldr	r0, [pc, #24]	; (800209c <HAL_QSPI_MspInit+0x100>)
 8002084:	f002 fa6c 	bl	8004560 <HAL_GPIO_Init>

  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	a0001000 	.word	0xa0001000
 8002094:	40023800 	.word	0x40023800
 8002098:	40021400 	.word	0x40021400
 800209c:	40020400 	.word	0x40020400

080020a0 <HAL_QSPI_MspDeInit>:

void HAL_QSPI_MspDeInit(QSPI_HandleTypeDef* qspiHandle)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]

  if(qspiHandle->Instance==QUADSPI)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <HAL_QSPI_MspDeInit+0x38>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10e      	bne.n	80020d0 <HAL_QSPI_MspDeInit+0x30>
  {
  /* USER CODE BEGIN QUADSPI_MspDeInit 0 */

  /* USER CODE END QUADSPI_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_QSPI_CLK_DISABLE();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_QSPI_MspDeInit+0x3c>)
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_QSPI_MspDeInit+0x3c>)
 80020b8:	f023 0302 	bic.w	r3, r3, #2
 80020bc:	6393      	str	r3, [r2, #56]	; 0x38
    PF8     ------> QUADSPI_BK1_IO0
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PB6     ------> QUADSPI_BK1_NCS
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 80020be:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80020c2:	4807      	ldr	r0, [pc, #28]	; (80020e0 <HAL_QSPI_MspDeInit+0x40>)
 80020c4:	f002 fbf8 	bl	80048b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2|GPIO_PIN_6);
 80020c8:	2144      	movs	r1, #68	; 0x44
 80020ca:	4806      	ldr	r0, [pc, #24]	; (80020e4 <HAL_QSPI_MspDeInit+0x44>)
 80020cc:	f002 fbf4 	bl	80048b8 <HAL_GPIO_DeInit>

  /* USER CODE BEGIN QUADSPI_MspDeInit 1 */

  /* USER CODE END QUADSPI_MspDeInit 1 */
  }
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	a0001000 	.word	0xa0001000
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40021400 	.word	0x40021400
 80020e4:	40020400 	.word	0x40020400

080020e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <HAL_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a10      	ldr	r2, [pc, #64]	; (8002134 <HAL_MspInit+0x4c>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_MspInit+0x4c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	607b      	str	r3, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_MspInit+0x4c>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <HAL_MspInit+0x4c>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_MspInit+0x4c>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800211e:	2200      	movs	r2, #0
 8002120:	210f      	movs	r1, #15
 8002122:	f06f 0001 	mvn.w	r0, #1
 8002126:	f001 fc69 	bl	80039fc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800

08002138 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08e      	sub	sp, #56	; 0x38
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002148:	4b33      	ldr	r3, [pc, #204]	; (8002218 <HAL_InitTick+0xe0>)
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	4a32      	ldr	r2, [pc, #200]	; (8002218 <HAL_InitTick+0xe0>)
 800214e:	f043 0310 	orr.w	r3, r3, #16
 8002152:	6413      	str	r3, [r2, #64]	; 0x40
 8002154:	4b30      	ldr	r3, [pc, #192]	; (8002218 <HAL_InitTick+0xe0>)
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	f003 0310 	and.w	r3, r3, #16
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002160:	f107 0210 	add.w	r2, r7, #16
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4611      	mov	r1, r2
 800216a:	4618      	mov	r0, r3
 800216c:	f005 fd22 	bl	8007bb4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002176:	2b00      	cmp	r3, #0
 8002178:	d103      	bne.n	8002182 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800217a:	f005 fd07 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 800217e:	6378      	str	r0, [r7, #52]	; 0x34
 8002180:	e004      	b.n	800218c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002182:	f005 fd03 	bl	8007b8c <HAL_RCC_GetPCLK1Freq>
 8002186:	4603      	mov	r3, r0
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800218c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800218e:	4a23      	ldr	r2, [pc, #140]	; (800221c <HAL_InitTick+0xe4>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	0c9b      	lsrs	r3, r3, #18
 8002196:	3b01      	subs	r3, #1
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800219a:	4b21      	ldr	r3, [pc, #132]	; (8002220 <HAL_InitTick+0xe8>)
 800219c:	4a21      	ldr	r2, [pc, #132]	; (8002224 <HAL_InitTick+0xec>)
 800219e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80021a0:	4b1f      	ldr	r3, [pc, #124]	; (8002220 <HAL_InitTick+0xe8>)
 80021a2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021a6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80021a8:	4a1d      	ldr	r2, [pc, #116]	; (8002220 <HAL_InitTick+0xe8>)
 80021aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021ac:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_InitTick+0xe8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b4:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_InitTick+0xe8>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ba:	4b19      	ldr	r3, [pc, #100]	; (8002220 <HAL_InitTick+0xe8>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80021c0:	4817      	ldr	r0, [pc, #92]	; (8002220 <HAL_InitTick+0xe8>)
 80021c2:	f006 f9e2 	bl	800858a <HAL_TIM_Base_Init>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80021cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d11b      	bne.n	800220c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80021d4:	4812      	ldr	r0, [pc, #72]	; (8002220 <HAL_InitTick+0xe8>)
 80021d6:	f006 fa2f 	bl	8008638 <HAL_TIM_Base_Start_IT>
 80021da:	4603      	mov	r3, r0
 80021dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80021e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d111      	bne.n	800220c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80021e8:	2036      	movs	r0, #54	; 0x36
 80021ea:	f001 fc23 	bl	8003a34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2b0f      	cmp	r3, #15
 80021f2:	d808      	bhi.n	8002206 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80021f4:	2200      	movs	r2, #0
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	2036      	movs	r0, #54	; 0x36
 80021fa:	f001 fbff 	bl	80039fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021fe:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <HAL_InitTick+0xf0>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e002      	b.n	800220c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800220c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002210:	4618      	mov	r0, r3
 8002212:	3738      	adds	r7, #56	; 0x38
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40023800 	.word	0x40023800
 800221c:	431bde83 	.word	0x431bde83
 8002220:	20000950 	.word	0x20000950
 8002224:	40001000 	.word	0x40001000
 8002228:	20000018 	.word	0x20000018

0800222c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002230:	e7fe      	b.n	8002230 <NMI_Handler+0x4>

08002232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002236:	e7fe      	b.n	8002236 <HardFault_Handler+0x4>

08002238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800223c:	e7fe      	b.n	800223c <MemManage_Handler+0x4>

0800223e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223e:	b480      	push	{r7}
 8002240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002242:	e7fe      	b.n	8002242 <BusFault_Handler+0x4>

08002244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002248:	e7fe      	b.n	8002248 <UsageFault_Handler+0x4>

0800224a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800224a:	b480      	push	{r7}
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <DMA1_Stream0_IRQHandler+0x10>)
 800225e:	f001 fe11 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20000ae8 	.word	0x20000ae8

0800226c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1_trig);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <DMA1_Stream4_IRQHandler+0x10>)
 8002272:	f001 fe07 	bl	8003e84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000a88 	.word	0x20000a88

08002280 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <ADC_IRQHandler+0x10>)
 8002286:	f000 fc57 	bl	8002b38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000063c 	.word	0x2000063c

08002294 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <TIM6_DAC_IRQHandler+0x10>)
 800229a:	f006 fd9d 	bl	8008dd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	20000950 	.word	0x20000950

080022a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <LTDC_IRQHandler+0x10>)
 80022ae:	f004 f817 	bl	80062e0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	2000085c 	.word	0x2000085c

080022bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
	return 1;
 80022c0:	2301      	movs	r3, #1
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <_kill>:

int _kill(int pid, int sig)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022d6:	f027 fd6d 	bl	8029db4 <__errno>
 80022da:	4603      	mov	r3, r0
 80022dc:	2216      	movs	r2, #22
 80022de:	601a      	str	r2, [r3, #0]
	return -1;
 80022e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <_exit>:

void _exit (int status)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7ff ffe7 	bl	80022cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80022fe:	e7fe      	b.n	80022fe <_exit+0x12>

08002300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
 8002310:	e00a      	b.n	8002328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002312:	f3af 8000 	nop.w
 8002316:	4601      	mov	r1, r0
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	1c5a      	adds	r2, r3, #1
 800231c:	60ba      	str	r2, [r7, #8]
 800231e:	b2ca      	uxtb	r2, r1
 8002320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	3301      	adds	r3, #1
 8002326:	617b      	str	r3, [r7, #20]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	429a      	cmp	r2, r3
 800232e:	dbf0      	blt.n	8002312 <_read+0x12>
	}

return len;
 8002330:	687b      	ldr	r3, [r7, #4]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b086      	sub	sp, #24
 800233e:	af00      	add	r7, sp, #0
 8002340:	60f8      	str	r0, [r7, #12]
 8002342:	60b9      	str	r1, [r7, #8]
 8002344:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	e009      	b.n	8002360 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60ba      	str	r2, [r7, #8]
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	3301      	adds	r3, #1
 800235e:	617b      	str	r3, [r7, #20]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	429a      	cmp	r2, r3
 8002366:	dbf1      	blt.n	800234c <_write+0x12>
	}
	return len;
 8002368:	687b      	ldr	r3, [r7, #4]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <_close>:

int _close(int file)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
	return -1;
 800237a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800239a:	605a      	str	r2, [r3, #4]
	return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr

080023aa <_isatty>:

int _isatty(int file)
{
 80023aa:	b480      	push	{r7}
 80023ac:	b083      	sub	sp, #12
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
	return 1;
 80023b2:	2301      	movs	r3, #1
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
	return 0;
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3714      	adds	r7, #20
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
	...

080023dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <_sbrk+0x5c>)
 80023e6:	4b15      	ldr	r3, [pc, #84]	; (800243c <_sbrk+0x60>)
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023f0:	4b13      	ldr	r3, [pc, #76]	; (8002440 <_sbrk+0x64>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d102      	bne.n	80023fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <_sbrk+0x64>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <_sbrk+0x68>)
 80023fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <_sbrk+0x64>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4413      	add	r3, r2
 8002406:	693a      	ldr	r2, [r7, #16]
 8002408:	429a      	cmp	r2, r3
 800240a:	d207      	bcs.n	800241c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800240c:	f027 fcd2 	bl	8029db4 <__errno>
 8002410:	4603      	mov	r3, r0
 8002412:	220c      	movs	r2, #12
 8002414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002416:	f04f 33ff 	mov.w	r3, #4294967295
 800241a:	e009      	b.n	8002430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <_sbrk+0x64>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002422:	4b07      	ldr	r3, [pc, #28]	; (8002440 <_sbrk+0x64>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4413      	add	r3, r2
 800242a:	4a05      	ldr	r2, [pc, #20]	; (8002440 <_sbrk+0x64>)
 800242c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800242e:	68fb      	ldr	r3, [r7, #12]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20080000 	.word	0x20080000
 800243c:	00000400 	.word	0x00000400
 8002440:	200009a0 	.word	0x200009a0
 8002444:	2003c590 	.word	0x2003c590

08002448 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800244c:	4b06      	ldr	r3, [pc, #24]	; (8002468 <SystemInit+0x20>)
 800244e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002452:	4a05      	ldr	r2, [pc, #20]	; (8002468 <SystemInit+0x20>)
 8002454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800245c:	bf00      	nop
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <MX_TIM3_Init>:
DMA_HandleTypeDef hdma_tim3_ch1_trig;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002472:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002480:	f107 031c 	add.w	r3, r7, #28
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	605a      	str	r2, [r3, #4]
 800248a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800248c:	463b      	mov	r3, r7
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
 8002498:	611a      	str	r2, [r3, #16]
 800249a:	615a      	str	r2, [r3, #20]
 800249c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800249e:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <MX_TIM3_Init+0xe4>)
 80024a0:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <MX_TIM3_Init+0xe8>)
 80024a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <MX_TIM3_Init+0xe4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024aa:	4b29      	ldr	r3, [pc, #164]	; (8002550 <MX_TIM3_Init+0xe4>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 134;
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <MX_TIM3_Init+0xe4>)
 80024b2:	2286      	movs	r2, #134	; 0x86
 80024b4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <MX_TIM3_Init+0xe4>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <MX_TIM3_Init+0xe4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80024c2:	4823      	ldr	r0, [pc, #140]	; (8002550 <MX_TIM3_Init+0xe4>)
 80024c4:	f006 f861 	bl	800858a <HAL_TIM_Base_Init>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80024ce:	f7ff fd33 	bl	8001f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80024d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80024dc:	4619      	mov	r1, r3
 80024de:	481c      	ldr	r0, [pc, #112]	; (8002550 <MX_TIM3_Init+0xe4>)
 80024e0:	f006 feae 	bl	8009240 <HAL_TIM_ConfigClockSource>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80024ea:	f7ff fd25 	bl	8001f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80024ee:	4818      	ldr	r0, [pc, #96]	; (8002550 <MX_TIM3_Init+0xe4>)
 80024f0:	f006 f91a 	bl	8008728 <HAL_TIM_PWM_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80024fa:	f7ff fd1d 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002506:	f107 031c 	add.w	r3, r7, #28
 800250a:	4619      	mov	r1, r3
 800250c:	4810      	ldr	r0, [pc, #64]	; (8002550 <MX_TIM3_Init+0xe4>)
 800250e:	f007 fc23 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002518:	f7ff fd0e 	bl	8001f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800251c:	2360      	movs	r3, #96	; 0x60
 800251e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002520:	2300      	movs	r3, #0
 8002522:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800252c:	463b      	mov	r3, r7
 800252e:	2200      	movs	r2, #0
 8002530:	4619      	mov	r1, r3
 8002532:	4807      	ldr	r0, [pc, #28]	; (8002550 <MX_TIM3_Init+0xe4>)
 8002534:	f006 fd70 	bl	8009018 <HAL_TIM_PWM_ConfigChannel>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800253e:	f7ff fcfb 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002542:	4803      	ldr	r0, [pc, #12]	; (8002550 <MX_TIM3_Init+0xe4>)
 8002544:	f000 f9dc 	bl	8002900 <HAL_TIM_MspPostInit>

}
 8002548:	bf00      	nop
 800254a:	3738      	adds	r7, #56	; 0x38
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	200009a4 	.word	0x200009a4
 8002554:	40000400 	.word	0x40000400

08002558 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08e      	sub	sp, #56	; 0x38
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800255e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256c:	f107 031c 	add.w	r3, r7, #28
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002578:	463b      	mov	r3, r7
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
 8002584:	611a      	str	r2, [r3, #16]
 8002586:	615a      	str	r2, [r3, #20]
 8002588:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800258a:	4b2c      	ldr	r3, [pc, #176]	; (800263c <MX_TIM4_Init+0xe4>)
 800258c:	4a2c      	ldr	r2, [pc, #176]	; (8002640 <MX_TIM4_Init+0xe8>)
 800258e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002590:	4b2a      	ldr	r3, [pc, #168]	; (800263c <MX_TIM4_Init+0xe4>)
 8002592:	2200      	movs	r2, #0
 8002594:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002596:	4b29      	ldr	r3, [pc, #164]	; (800263c <MX_TIM4_Init+0xe4>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 215;
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <MX_TIM4_Init+0xe4>)
 800259e:	22d7      	movs	r2, #215	; 0xd7
 80025a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025a2:	4b26      	ldr	r3, [pc, #152]	; (800263c <MX_TIM4_Init+0xe4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <MX_TIM4_Init+0xe4>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80025ae:	4823      	ldr	r0, [pc, #140]	; (800263c <MX_TIM4_Init+0xe4>)
 80025b0:	f005 ffeb 	bl	800858a <HAL_TIM_Base_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80025ba:	f7ff fcbd 	bl	8001f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025c2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80025c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025c8:	4619      	mov	r1, r3
 80025ca:	481c      	ldr	r0, [pc, #112]	; (800263c <MX_TIM4_Init+0xe4>)
 80025cc:	f006 fe38 	bl	8009240 <HAL_TIM_ConfigClockSource>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80025d6:	f7ff fcaf 	bl	8001f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025da:	4818      	ldr	r0, [pc, #96]	; (800263c <MX_TIM4_Init+0xe4>)
 80025dc:	f006 f8a4 	bl	8008728 <HAL_TIM_PWM_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80025e6:	f7ff fca7 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ee:	2300      	movs	r3, #0
 80025f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025f2:	f107 031c 	add.w	r3, r7, #28
 80025f6:	4619      	mov	r1, r3
 80025f8:	4810      	ldr	r0, [pc, #64]	; (800263c <MX_TIM4_Init+0xe4>)
 80025fa:	f007 fbad 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002604:	f7ff fc98 	bl	8001f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002608:	2360      	movs	r3, #96	; 0x60
 800260a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800260c:	2300      	movs	r3, #0
 800260e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002614:	2300      	movs	r3, #0
 8002616:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002618:	463b      	mov	r3, r7
 800261a:	2200      	movs	r2, #0
 800261c:	4619      	mov	r1, r3
 800261e:	4807      	ldr	r0, [pc, #28]	; (800263c <MX_TIM4_Init+0xe4>)
 8002620:	f006 fcfa 	bl	8009018 <HAL_TIM_PWM_ConfigChannel>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800262a:	f7ff fc85 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800262e:	4803      	ldr	r0, [pc, #12]	; (800263c <MX_TIM4_Init+0xe4>)
 8002630:	f000 f966 	bl	8002900 <HAL_TIM_MspPostInit>

}
 8002634:	bf00      	nop
 8002636:	3738      	adds	r7, #56	; 0x38
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	200009f0 	.word	0x200009f0
 8002640:	40000800 	.word	0x40000800

08002644 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b09a      	sub	sp, #104	; 0x68
 8002648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800264a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
 8002652:	605a      	str	r2, [r3, #4]
 8002654:	609a      	str	r2, [r3, #8]
 8002656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002658:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
 8002674:	615a      	str	r2, [r3, #20]
 8002676:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002678:	1d3b      	adds	r3, r7, #4
 800267a:	222c      	movs	r2, #44	; 0x2c
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f027 fbf2 	bl	8029e68 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002684:	4b42      	ldr	r3, [pc, #264]	; (8002790 <MX_TIM8_Init+0x14c>)
 8002686:	4a43      	ldr	r2, [pc, #268]	; (8002794 <MX_TIM8_Init+0x150>)
 8002688:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 216-1;
 800268a:	4b41      	ldr	r3, [pc, #260]	; (8002790 <MX_TIM8_Init+0x14c>)
 800268c:	22d7      	movs	r2, #215	; 0xd7
 800268e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002690:	4b3f      	ldr	r3, [pc, #252]	; (8002790 <MX_TIM8_Init+0x14c>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 5000-1;
 8002696:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <MX_TIM8_Init+0x14c>)
 8002698:	f241 3287 	movw	r2, #4999	; 0x1387
 800269c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269e:	4b3c      	ldr	r3, [pc, #240]	; (8002790 <MX_TIM8_Init+0x14c>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80026a4:	4b3a      	ldr	r3, [pc, #232]	; (8002790 <MX_TIM8_Init+0x14c>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <MX_TIM8_Init+0x14c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80026b0:	4837      	ldr	r0, [pc, #220]	; (8002790 <MX_TIM8_Init+0x14c>)
 80026b2:	f005 ff6a 	bl	800858a <HAL_TIM_Base_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80026bc:	f7ff fc3c 	bl	8001f38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026c4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80026c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026ca:	4619      	mov	r1, r3
 80026cc:	4830      	ldr	r0, [pc, #192]	; (8002790 <MX_TIM8_Init+0x14c>)
 80026ce:	f006 fdb7 	bl	8009240 <HAL_TIM_ConfigClockSource>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d001      	beq.n	80026dc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80026d8:	f7ff fc2e 	bl	8001f38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80026dc:	482c      	ldr	r0, [pc, #176]	; (8002790 <MX_TIM8_Init+0x14c>)
 80026de:	f006 f823 	bl	8008728 <HAL_TIM_PWM_Init>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d001      	beq.n	80026ec <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80026e8:	f7ff fc26 	bl	8001f38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ec:	2300      	movs	r3, #0
 80026ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80026f0:	2300      	movs	r3, #0
 80026f2:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026f4:	2300      	movs	r3, #0
 80026f6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80026f8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80026fc:	4619      	mov	r1, r3
 80026fe:	4824      	ldr	r0, [pc, #144]	; (8002790 <MX_TIM8_Init+0x14c>)
 8002700:	f007 fb2a 	bl	8009d58 <HAL_TIMEx_MasterConfigSynchronization>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800270a:	f7ff fc15 	bl	8001f38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800270e:	2360      	movs	r3, #96	; 0x60
 8002710:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002716:	2300      	movs	r3, #0
 8002718:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800271a:	2300      	movs	r3, #0
 800271c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800271e:	2300      	movs	r3, #0
 8002720:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002722:	2300      	movs	r3, #0
 8002724:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002726:	2300      	movs	r3, #0
 8002728:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800272a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800272e:	2200      	movs	r2, #0
 8002730:	4619      	mov	r1, r3
 8002732:	4817      	ldr	r0, [pc, #92]	; (8002790 <MX_TIM8_Init+0x14c>)
 8002734:	f006 fc70 	bl	8009018 <HAL_TIM_PWM_ConfigChannel>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 800273e:	f7ff fbfb 	bl	8001f38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002746:	2300      	movs	r3, #0
 8002748:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800274a:	2300      	movs	r3, #0
 800274c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002752:	2300      	movs	r3, #0
 8002754:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800275a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002760:	2300      	movs	r3, #0
 8002762:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002764:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002772:	1d3b      	adds	r3, r7, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4806      	ldr	r0, [pc, #24]	; (8002790 <MX_TIM8_Init+0x14c>)
 8002778:	f007 fb7c 	bl	8009e74 <HAL_TIMEx_ConfigBreakDeadTime>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8002782:	f7ff fbd9 	bl	8001f38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002786:	bf00      	nop
 8002788:	3768      	adds	r7, #104	; 0x68
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000a3c 	.word	0x20000a3c
 8002794:	40010400 	.word	0x40010400

08002798 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a4e      	ldr	r2, [pc, #312]	; (80028e0 <HAL_TIM_Base_MspInit+0x148>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d142      	bne.n	8002830 <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027aa:	4b4e      	ldr	r3, [pc, #312]	; (80028e4 <HAL_TIM_Base_MspInit+0x14c>)
 80027ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ae:	4a4d      	ldr	r2, [pc, #308]	; (80028e4 <HAL_TIM_Base_MspInit+0x14c>)
 80027b0:	f043 0302 	orr.w	r3, r3, #2
 80027b4:	6413      	str	r3, [r2, #64]	; 0x40
 80027b6:	4b4b      	ldr	r3, [pc, #300]	; (80028e4 <HAL_TIM_Base_MspInit+0x14c>)
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	617b      	str	r3, [r7, #20]
 80027c0:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH1_TRIG Init */
    hdma_tim3_ch1_trig.Instance = DMA1_Stream4;
 80027c2:	4b49      	ldr	r3, [pc, #292]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 80027c4:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_TIM_Base_MspInit+0x154>)
 80027c6:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1_trig.Init.Channel = DMA_CHANNEL_5;
 80027c8:	4b47      	ldr	r3, [pc, #284]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 80027ca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80027ce:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1_trig.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d0:	4b45      	ldr	r3, [pc, #276]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1_trig.Init.PeriphInc = DMA_PINC_DISABLE;
 80027d6:	4b44      	ldr	r3, [pc, #272]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 80027d8:	2200      	movs	r2, #0
 80027da:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1_trig.Init.MemInc = DMA_MINC_ENABLE;
 80027dc:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 80027de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027e2:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1_trig.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027e4:	4b40      	ldr	r3, [pc, #256]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 80027e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027ea:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1_trig.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ec:	4b3e      	ldr	r3, [pc, #248]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 80027ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027f2:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1_trig.Init.Mode = DMA_NORMAL;
 80027f4:	4b3c      	ldr	r3, [pc, #240]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1_trig.Init.Priority = DMA_PRIORITY_LOW;
 80027fa:	4b3b      	ldr	r3, [pc, #236]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1_trig.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002800:	4b39      	ldr	r3, [pc, #228]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 8002802:	2200      	movs	r2, #0
 8002804:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1_trig) != HAL_OK)
 8002806:	4838      	ldr	r0, [pc, #224]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 8002808:	f001 fa0c 	bl	8003c24 <HAL_DMA_Init>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_TIM_Base_MspInit+0x7e>
    {
      Error_Handler();
 8002812:	f7ff fb91 	bl	8001f38 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1_trig);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a33      	ldr	r2, [pc, #204]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 800281a:	625a      	str	r2, [r3, #36]	; 0x24
 800281c:	4a32      	ldr	r2, [pc, #200]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_TRIGGER],hdma_tim3_ch1_trig);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a30      	ldr	r2, [pc, #192]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 8002826:	639a      	str	r2, [r3, #56]	; 0x38
 8002828:	4a2f      	ldr	r2, [pc, #188]	; (80028e8 <HAL_TIM_Base_MspInit+0x150>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 800282e:	e052      	b.n	80028d6 <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM4)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a2e      	ldr	r2, [pc, #184]	; (80028f0 <HAL_TIM_Base_MspInit+0x158>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d13c      	bne.n	80028b4 <HAL_TIM_Base_MspInit+0x11c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800283a:	4b2a      	ldr	r3, [pc, #168]	; (80028e4 <HAL_TIM_Base_MspInit+0x14c>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a29      	ldr	r2, [pc, #164]	; (80028e4 <HAL_TIM_Base_MspInit+0x14c>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_TIM_Base_MspInit+0x14c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002852:	4b28      	ldr	r3, [pc, #160]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 8002854:	4a28      	ldr	r2, [pc, #160]	; (80028f8 <HAL_TIM_Base_MspInit+0x160>)
 8002856:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002858:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 800285a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800285e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002860:	4b24      	ldr	r3, [pc, #144]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 8002868:	2200      	movs	r2, #0
 800286a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800286c:	4b21      	ldr	r3, [pc, #132]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 800286e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002872:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002874:	4b1f      	ldr	r3, [pc, #124]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 8002876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800287a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800287c:	4b1d      	ldr	r3, [pc, #116]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 800287e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002882:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 8002886:	2200      	movs	r2, #0
 8002888:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800288a:	4b1a      	ldr	r3, [pc, #104]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 800288c:	2200      	movs	r2, #0
 800288e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 8002892:	2200      	movs	r2, #0
 8002894:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002896:	4817      	ldr	r0, [pc, #92]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 8002898:	f001 f9c4 	bl	8003c24 <HAL_DMA_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_TIM_Base_MspInit+0x10e>
      Error_Handler();
 80028a2:	f7ff fb49 	bl	8001f38 <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 80028aa:	625a      	str	r2, [r3, #36]	; 0x24
 80028ac:	4a11      	ldr	r2, [pc, #68]	; (80028f4 <HAL_TIM_Base_MspInit+0x15c>)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028b2:	e010      	b.n	80028d6 <HAL_TIM_Base_MspInit+0x13e>
  else if(tim_baseHandle->Instance==TIM8)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a10      	ldr	r2, [pc, #64]	; (80028fc <HAL_TIM_Base_MspInit+0x164>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10b      	bne.n	80028d6 <HAL_TIM_Base_MspInit+0x13e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80028be:	4b09      	ldr	r3, [pc, #36]	; (80028e4 <HAL_TIM_Base_MspInit+0x14c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	4a08      	ldr	r2, [pc, #32]	; (80028e4 <HAL_TIM_Base_MspInit+0x14c>)
 80028c4:	f043 0302 	orr.w	r3, r3, #2
 80028c8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_TIM_Base_MspInit+0x14c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
}
 80028d6:	bf00      	nop
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40000400 	.word	0x40000400
 80028e4:	40023800 	.word	0x40023800
 80028e8:	20000a88 	.word	0x20000a88
 80028ec:	40026070 	.word	0x40026070
 80028f0:	40000800 	.word	0x40000800
 80028f4:	20000ae8 	.word	0x20000ae8
 80028f8:	40026010 	.word	0x40026010
 80028fc:	40010400 	.word	0x40010400

08002900 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <HAL_TIM_MspPostInit+0xa8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d11c      	bne.n	800295c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002922:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_TIM_MspPostInit+0xac>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4a21      	ldr	r2, [pc, #132]	; (80029ac <HAL_TIM_MspPostInit+0xac>)
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	6313      	str	r3, [r2, #48]	; 0x30
 800292e:	4b1f      	ldr	r3, [pc, #124]	; (80029ac <HAL_TIM_MspPostInit+0xac>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	613b      	str	r3, [r7, #16]
 8002938:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800293a:	2310      	movs	r3, #16
 800293c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293e:	2302      	movs	r3, #2
 8002940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800294a:	2302      	movs	r3, #2
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	f107 0314 	add.w	r3, r7, #20
 8002952:	4619      	mov	r1, r3
 8002954:	4816      	ldr	r0, [pc, #88]	; (80029b0 <HAL_TIM_MspPostInit+0xb0>)
 8002956:	f001 fe03 	bl	8004560 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800295a:	e021      	b.n	80029a0 <HAL_TIM_MspPostInit+0xa0>
  else if(timHandle->Instance==TIM4)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a14      	ldr	r2, [pc, #80]	; (80029b4 <HAL_TIM_MspPostInit+0xb4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d11c      	bne.n	80029a0 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_TIM_MspPostInit+0xac>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a10      	ldr	r2, [pc, #64]	; (80029ac <HAL_TIM_MspPostInit+0xac>)
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <HAL_TIM_MspPostInit+0xac>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800297e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002984:	2302      	movs	r3, #2
 8002986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002988:	2300      	movs	r3, #0
 800298a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002990:	2302      	movs	r3, #2
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002994:	f107 0314 	add.w	r3, r7, #20
 8002998:	4619      	mov	r1, r3
 800299a:	4807      	ldr	r0, [pc, #28]	; (80029b8 <HAL_TIM_MspPostInit+0xb8>)
 800299c:	f001 fde0 	bl	8004560 <HAL_GPIO_Init>
}
 80029a0:	bf00      	nop
 80029a2:	3728      	adds	r7, #40	; 0x28
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40000400 	.word	0x40000400
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020400 	.word	0x40020400
 80029b4:	40000800 	.word	0x40000800
 80029b8:	40020c00 	.word	0x40020c00

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029c2:	490e      	ldr	r1, [pc, #56]	; (80029fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c8:	e002      	b.n	80029d0 <LoopCopyDataInit>

080029ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ce:	3304      	adds	r3, #4

080029d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d4:	d3f9      	bcc.n	80029ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d8:	4c0b      	ldr	r4, [pc, #44]	; (8002a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029dc:	e001      	b.n	80029e2 <LoopFillZerobss>

080029de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e0:	3204      	adds	r2, #4

080029e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e4:	d3fb      	bcc.n	80029de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029e6:	f7ff fd2f 	bl	8002448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f027 f9fb 	bl	8029de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7ff f9f1 	bl	8001dd4 <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029f4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	200002f4 	.word	0x200002f4
  ldr r2, =_sidata
 8002a00:	08164be4 	.word	0x08164be4
  ldr r2, =_sbss
 8002a04:	200002f4 	.word	0x200002f4
  ldr r4, =_ebss
 8002a08:	2003c590 	.word	0x2003c590

08002a0c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <CAN1_RX0_IRQHandler>

08002a0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a12:	2003      	movs	r0, #3
 8002a14:	f000 ffe7 	bl	80039e6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a18:	200f      	movs	r0, #15
 8002a1a:	f7ff fb8d 	bl	8002138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a1e:	f7ff fb63 	bl	80020e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a2c:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_IncTick+0x20>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b06      	ldr	r3, [pc, #24]	; (8002a4c <HAL_IncTick+0x24>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4413      	add	r3, r2
 8002a38:	4a04      	ldr	r2, [pc, #16]	; (8002a4c <HAL_IncTick+0x24>)
 8002a3a:	6013      	str	r3, [r2, #0]
}
 8002a3c:	bf00      	nop
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	2000001c 	.word	0x2000001c
 8002a4c:	20000b48 	.word	0x20000b48

08002a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  return uwTick;
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_GetTick+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	20000b48 	.word	0x20000b48

08002a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a70:	f7ff ffee 	bl	8002a50 <HAL_GetTick>
 8002a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d005      	beq.n	8002a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_Delay+0x44>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	461a      	mov	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a8e:	bf00      	nop
 8002a90:	f7ff ffde 	bl	8002a50 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d8f7      	bhi.n	8002a90 <HAL_Delay+0x28>
  {
  }
}
 8002aa0:	bf00      	nop
 8002aa2:	bf00      	nop
 8002aa4:	3710      	adds	r7, #16
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	2000001c 	.word	0x2000001c

08002ab0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e031      	b.n	8002b2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d109      	bne.n	8002ae2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe f840 	bl	8000b54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d116      	bne.n	8002b1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002af2:	4b10      	ldr	r3, [pc, #64]	; (8002b34 <HAL_ADC_Init+0x84>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	f043 0202 	orr.w	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fa9e 	bl	8003040 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	f023 0303 	bic.w	r3, r3, #3
 8002b12:	f043 0201 	orr.w	r2, r3, #1
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
 8002b1a:	e001      	b.n	8002b20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	ffffeefd 	.word	0xffffeefd

08002b38 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]
 8002b44:	2300      	movs	r3, #0
 8002b46:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d049      	beq.n	8002c02 <HAL_ADC_IRQHandler+0xca>
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d046      	beq.n	8002c02 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	f003 0310 	and.w	r3, r3, #16
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d105      	bne.n	8002b8c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d12b      	bne.n	8002bf2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d127      	bne.n	8002bf2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d006      	beq.n	8002bbe <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d119      	bne.n	8002bf2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0220 	bic.w	r2, r2, #32
 8002bcc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f8b0 	bl	8002d58 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f06f 0212 	mvn.w	r2, #18
 8002c00:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0304 	and.w	r3, r3, #4
 8002c08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d057      	beq.n	8002cc8 <HAL_ADC_IRQHandler+0x190>
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d054      	beq.n	8002cc8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d105      	bne.n	8002c36 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d139      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d006      	beq.n	8002c60 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d12b      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d124      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d11d      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d119      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fabb 	bl	8003234 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f06f 020c 	mvn.w	r2, #12
 8002cc6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d017      	beq.n	8002d0e <HAL_ADC_IRQHandler+0x1d6>
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d014      	beq.n	8002d0e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10d      	bne.n	8002d0e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f834 	bl	8002d6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0201 	mvn.w	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d1c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d015      	beq.n	8002d50 <HAL_ADC_IRQHandler+0x218>
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d012      	beq.n	8002d50 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	f043 0202 	orr.w	r2, r3, #2
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f06f 0220 	mvn.w	r2, #32
 8002d3e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 f81d 	bl	8002d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0220 	mvn.w	r2, #32
 8002d4e:	601a      	str	r2, [r3, #0]
  }
}
 8002d50:	bf00      	nop
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002d60:	bf00      	nop
 8002d62:	370c      	adds	r7, #12
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d74:	bf00      	nop
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x1c>
 8002dac:	2302      	movs	r3, #2
 8002dae:	e136      	b.n	800301e <HAL_ADC_ConfigChannel+0x28a>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b09      	cmp	r3, #9
 8002dbe:	d93a      	bls.n	8002e36 <HAL_ADC_ConfigChannel+0xa2>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dc8:	d035      	beq.n	8002e36 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68d9      	ldr	r1, [r3, #12]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4613      	mov	r3, r2
 8002dda:	005b      	lsls	r3, r3, #1
 8002ddc:	4413      	add	r3, r2
 8002dde:	3b1e      	subs	r3, #30
 8002de0:	2207      	movs	r2, #7
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43da      	mvns	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	400a      	ands	r2, r1
 8002dee:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a8d      	ldr	r2, [pc, #564]	; (800302c <HAL_ADC_ConfigChannel+0x298>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10a      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68d9      	ldr	r1, [r3, #12]
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	061a      	lsls	r2, r3, #24
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e0e:	e035      	b.n	8002e7c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68d9      	ldr	r1, [r3, #12]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	4618      	mov	r0, r3
 8002e22:	4603      	mov	r3, r0
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4403      	add	r3, r0
 8002e28:	3b1e      	subs	r3, #30
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	430a      	orrs	r2, r1
 8002e32:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e34:	e022      	b.n	8002e7c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6919      	ldr	r1, [r3, #16]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	461a      	mov	r2, r3
 8002e44:	4613      	mov	r3, r2
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	4413      	add	r3, r2
 8002e4a:	2207      	movs	r2, #7
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43da      	mvns	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	400a      	ands	r2, r1
 8002e58:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6919      	ldr	r1, [r3, #16]
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	005b      	lsls	r3, r3, #1
 8002e70:	4403      	add	r3, r0
 8002e72:	409a      	lsls	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b06      	cmp	r3, #6
 8002e82:	d824      	bhi.n	8002ece <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	3b05      	subs	r3, #5
 8002e96:	221f      	movs	r2, #31
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b05      	subs	r3, #5
 8002ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	635a      	str	r2, [r3, #52]	; 0x34
 8002ecc:	e04c      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d824      	bhi.n	8002f20 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3b23      	subs	r3, #35	; 0x23
 8002ee8:	221f      	movs	r2, #31
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	400a      	ands	r2, r1
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	3b23      	subs	r3, #35	; 0x23
 8002f12:	fa00 f203 	lsl.w	r2, r0, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f1e:	e023      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	3b41      	subs	r3, #65	; 0x41
 8002f32:	221f      	movs	r2, #31
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43da      	mvns	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	400a      	ands	r2, r1
 8002f40:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	4413      	add	r3, r2
 8002f5a:	3b41      	subs	r3, #65	; 0x41
 8002f5c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a30      	ldr	r2, [pc, #192]	; (8003030 <HAL_ADC_ConfigChannel+0x29c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10a      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1f4>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f7a:	d105      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002f7c:	4b2d      	ldr	r3, [pc, #180]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	4a2c      	ldr	r2, [pc, #176]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f82:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002f86:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a28      	ldr	r2, [pc, #160]	; (8003030 <HAL_ADC_ConfigChannel+0x29c>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d10f      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x21e>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b12      	cmp	r3, #18
 8002f98:	d10b      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002f9a:	4b26      	ldr	r3, [pc, #152]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a25      	ldr	r2, [pc, #148]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fa0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002fa4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4a22      	ldr	r2, [pc, #136]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002fb0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a1e      	ldr	r2, [pc, #120]	; (8003030 <HAL_ADC_ConfigChannel+0x29c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d12b      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x280>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a1a      	ldr	r2, [pc, #104]	; (800302c <HAL_ADC_ConfigChannel+0x298>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d003      	beq.n	8002fce <HAL_ADC_ConfigChannel+0x23a>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b11      	cmp	r3, #17
 8002fcc:	d122      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002fce:	4b19      	ldr	r3, [pc, #100]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fd4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002fd8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002fda:	4b16      	ldr	r3, [pc, #88]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	4a15      	ldr	r2, [pc, #84]	; (8003034 <HAL_ADC_ConfigChannel+0x2a0>)
 8002fe0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fe4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a10      	ldr	r2, [pc, #64]	; (800302c <HAL_ADC_ConfigChannel+0x298>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d111      	bne.n	8003014 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <HAL_ADC_ConfigChannel+0x2a4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a11      	ldr	r2, [pc, #68]	; (800303c <HAL_ADC_ConfigChannel+0x2a8>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9a      	lsrs	r2, r3, #18
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003006:	e002      	b.n	800300e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3b01      	subs	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d1f9      	bne.n	8003008 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	10000012 	.word	0x10000012
 8003030:	40012000 	.word	0x40012000
 8003034:	40012300 	.word	0x40012300
 8003038:	20000014 	.word	0x20000014
 800303c:	431bde83 	.word	0x431bde83

08003040 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003048:	4b78      	ldr	r3, [pc, #480]	; (800322c <ADC_Init+0x1ec>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a77      	ldr	r2, [pc, #476]	; (800322c <ADC_Init+0x1ec>)
 800304e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003052:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003054:	4b75      	ldr	r3, [pc, #468]	; (800322c <ADC_Init+0x1ec>)
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	4973      	ldr	r1, [pc, #460]	; (800322c <ADC_Init+0x1ec>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003070:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	021a      	lsls	r2, r3, #8
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003094:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6859      	ldr	r1, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68da      	ldr	r2, [r3, #12]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	4a58      	ldr	r2, [pc, #352]	; (8003230 <ADC_Init+0x1f0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d022      	beq.n	800311a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689a      	ldr	r2, [r3, #8]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	6899      	ldr	r1, [r3, #8]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689a      	ldr	r2, [r3, #8]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003104:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	6899      	ldr	r1, [r3, #8]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	609a      	str	r2, [r3, #8]
 8003118:	e00f      	b.n	800313a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	689a      	ldr	r2, [r3, #8]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003128:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003138:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0202 	bic.w	r2, r2, #2
 8003148:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6899      	ldr	r1, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	005a      	lsls	r2, r3, #1
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d01b      	beq.n	80031a0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003176:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685a      	ldr	r2, [r3, #4]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003186:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6859      	ldr	r1, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	3b01      	subs	r3, #1
 8003194:	035a      	lsls	r2, r3, #13
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	e007      	b.n	80031b0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	3b01      	subs	r3, #1
 80031cc:	051a      	lsls	r2, r3, #20
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	430a      	orrs	r2, r1
 80031d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6899      	ldr	r1, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031f2:	025a      	lsls	r2, r3, #9
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800320a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6899      	ldr	r1, [r3, #8]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	029a      	lsls	r2, r3, #10
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	609a      	str	r2, [r3, #8]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	40012300 	.word	0x40012300
 8003230:	0f000001 	.word	0x0f000001

08003234 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e0ed      	b.n	8003436 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d102      	bne.n	800326c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd ff30 	bl	80010cc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800327c:	f7ff fbe8 	bl	8002a50 <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003282:	e012      	b.n	80032aa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003284:	f7ff fbe4 	bl	8002a50 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	2b0a      	cmp	r3, #10
 8003290:	d90b      	bls.n	80032aa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2205      	movs	r2, #5
 80032a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e0c5      	b.n	8003436 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	f003 0301 	and.w	r3, r3, #1
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0e5      	beq.n	8003284 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0202 	bic.w	r2, r2, #2
 80032c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c8:	f7ff fbc2 	bl	8002a50 <HAL_GetTick>
 80032cc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032ce:	e012      	b.n	80032f6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032d0:	f7ff fbbe 	bl	8002a50 <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b0a      	cmp	r3, #10
 80032dc:	d90b      	bls.n	80032f6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2205      	movs	r2, #5
 80032ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e09f      	b.n	8003436 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f003 0302 	and.w	r3, r3, #2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1e5      	bne.n	80032d0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7e1b      	ldrb	r3, [r3, #24]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d108      	bne.n	800331e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e007      	b.n	800332e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800332c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	7e5b      	ldrb	r3, [r3, #25]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d108      	bne.n	8003348 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003344:	601a      	str	r2, [r3, #0]
 8003346:	e007      	b.n	8003358 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003356:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	7e9b      	ldrb	r3, [r3, #26]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d108      	bne.n	8003372 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0220 	orr.w	r2, r2, #32
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e007      	b.n	8003382 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f022 0220 	bic.w	r2, r2, #32
 8003380:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	7edb      	ldrb	r3, [r3, #27]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d108      	bne.n	800339c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f022 0210 	bic.w	r2, r2, #16
 8003398:	601a      	str	r2, [r3, #0]
 800339a:	e007      	b.n	80033ac <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0210 	orr.w	r2, r2, #16
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	7f1b      	ldrb	r3, [r3, #28]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d108      	bne.n	80033c6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0208 	orr.w	r2, r2, #8
 80033c2:	601a      	str	r2, [r3, #0]
 80033c4:	e007      	b.n	80033d6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0208 	bic.w	r2, r2, #8
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	7f5b      	ldrb	r3, [r3, #29]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d108      	bne.n	80033f0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f042 0204 	orr.w	r2, r2, #4
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	e007      	b.n	8003400 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0204 	bic.w	r2, r2, #4
 80033fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	ea42 0103 	orr.w	r1, r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	1e5a      	subs	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
	...

08003440 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8003440:	b480      	push	{r7}
 8003442:	b087      	sub	sp, #28
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003456:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8003458:	7cfb      	ldrb	r3, [r7, #19]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d003      	beq.n	8003466 <HAL_CAN_ConfigFilter+0x26>
 800345e:	7cfb      	ldrb	r3, [r7, #19]
 8003460:	2b02      	cmp	r3, #2
 8003462:	f040 80c7 	bne.w	80035f4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a69      	ldr	r2, [pc, #420]	; (8003610 <HAL_CAN_ConfigFilter+0x1d0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d001      	beq.n	8003474 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8003470:	4b68      	ldr	r3, [pc, #416]	; (8003614 <HAL_CAN_ConfigFilter+0x1d4>)
 8003472:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800347a:	f043 0201 	orr.w	r2, r3, #1
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	4a63      	ldr	r2, [pc, #396]	; (8003614 <HAL_CAN_ConfigFilter+0x1d4>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003492:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	021b      	lsls	r3, r3, #8
 80034a8:	431a      	orrs	r2, r3
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2201      	movs	r2, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d123      	bne.n	8003522 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	401a      	ands	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80034fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	3248      	adds	r2, #72	; 0x48
 8003502:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003516:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003518:	6979      	ldr	r1, [r7, #20]
 800351a:	3348      	adds	r3, #72	; 0x48
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	440b      	add	r3, r1
 8003520:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d122      	bne.n	8003570 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	431a      	orrs	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800354a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3248      	adds	r2, #72	; 0x48
 8003550:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003564:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	3348      	adds	r3, #72	; 0x48
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	440b      	add	r3, r1
 800356e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d109      	bne.n	800358c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	43db      	mvns	r3, r3
 8003582:	401a      	ands	r2, r3
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800358a:	e007      	b.n	800359c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	431a      	orrs	r2, r3
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d109      	bne.n	80035b8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	401a      	ands	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80035b6:	e007      	b.n	80035c8 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d107      	bne.n	80035e0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	431a      	orrs	r2, r3
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80035e6:	f023 0201 	bic.w	r2, r3, #1
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e006      	b.n	8003602 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
  }
}
 8003602:	4618      	mov	r0, r3
 8003604:	371c      	adds	r7, #28
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40003400 	.word	0x40003400
 8003614:	40006400 	.word	0x40006400

08003618 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d12e      	bne.n	800368a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0201 	bic.w	r2, r2, #1
 8003642:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003644:	f7ff fa04 	bl	8002a50 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800364a:	e012      	b.n	8003672 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800364c:	f7ff fa00 	bl	8002a50 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b0a      	cmp	r3, #10
 8003658:	d90b      	bls.n	8003672 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2205      	movs	r2, #5
 800366a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e012      	b.n	8003698 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1e5      	bne.n	800364c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003686:	2300      	movs	r3, #0
 8003688:	e006      	b.n	8003698 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
  }
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b089      	sub	sp, #36	; 0x24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80036be:	7ffb      	ldrb	r3, [r7, #31]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d003      	beq.n	80036cc <HAL_CAN_AddTxMessage+0x2c>
 80036c4:	7ffb      	ldrb	r3, [r7, #31]
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	f040 80ad 	bne.w	8003826 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d105      	bne.n	80036ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 8095 	beq.w	8003816 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	0e1b      	lsrs	r3, r3, #24
 80036f0:	f003 0303 	and.w	r3, r3, #3
 80036f4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80036f6:	2201      	movs	r2, #1
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	409a      	lsls	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10d      	bne.n	8003724 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003712:	68f9      	ldr	r1, [r7, #12]
 8003714:	6809      	ldr	r1, [r1, #0]
 8003716:	431a      	orrs	r2, r3
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	3318      	adds	r3, #24
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	440b      	add	r3, r1
 8003720:	601a      	str	r2, [r3, #0]
 8003722:	e00f      	b.n	8003744 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800372e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003734:	68f9      	ldr	r1, [r7, #12]
 8003736:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003738:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3318      	adds	r3, #24
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	440b      	add	r3, r1
 8003742:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6819      	ldr	r1, [r3, #0]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	3318      	adds	r3, #24
 8003750:	011b      	lsls	r3, r3, #4
 8003752:	440b      	add	r3, r1
 8003754:	3304      	adds	r3, #4
 8003756:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	7d1b      	ldrb	r3, [r3, #20]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d111      	bne.n	8003784 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	3318      	adds	r3, #24
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	6811      	ldr	r1, [r2, #0]
 8003774:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	3318      	adds	r3, #24
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	440b      	add	r3, r1
 8003780:	3304      	adds	r3, #4
 8003782:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	3307      	adds	r3, #7
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	061a      	lsls	r2, r3, #24
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	3306      	adds	r3, #6
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	041b      	lsls	r3, r3, #16
 8003794:	431a      	orrs	r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	3305      	adds	r3, #5
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	021b      	lsls	r3, r3, #8
 800379e:	4313      	orrs	r3, r2
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	3204      	adds	r2, #4
 80037a4:	7812      	ldrb	r2, [r2, #0]
 80037a6:	4610      	mov	r0, r2
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	6811      	ldr	r1, [r2, #0]
 80037ac:	ea43 0200 	orr.w	r2, r3, r0
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	440b      	add	r3, r1
 80037b6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80037ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3303      	adds	r3, #3
 80037c0:	781b      	ldrb	r3, [r3, #0]
 80037c2:	061a      	lsls	r2, r3, #24
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3302      	adds	r3, #2
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	431a      	orrs	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3301      	adds	r3, #1
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	4313      	orrs	r3, r2
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	4610      	mov	r0, r2
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	6811      	ldr	r1, [r2, #0]
 80037e2:	ea43 0200 	orr.w	r2, r3, r0
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	440b      	add	r3, r1
 80037ec:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80037f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	3318      	adds	r3, #24
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	4413      	add	r3, r2
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	6811      	ldr	r1, [r2, #0]
 8003804:	f043 0201 	orr.w	r2, r3, #1
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	3318      	adds	r3, #24
 800380c:	011b      	lsls	r3, r3, #4
 800380e:	440b      	add	r3, r1
 8003810:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e00e      	b.n	8003834 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e006      	b.n	8003834 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
  }
}
 8003834:	4618      	mov	r0, r3
 8003836:	3724      	adds	r7, #36	; 0x24
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003850:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d002      	beq.n	800385e <HAL_CAN_ActivateNotification+0x1e>
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d109      	bne.n	8003872 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6959      	ldr	r1, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800386e:	2300      	movs	r3, #0
 8003870:	e006      	b.n	8003880 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800389c:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <__NVIC_SetPriorityGrouping+0x40>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a8:	4013      	ands	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038b4:	4b06      	ldr	r3, [pc, #24]	; (80038d0 <__NVIC_SetPriorityGrouping+0x44>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <__NVIC_SetPriorityGrouping+0x40>)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	60d3      	str	r3, [r2, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00
 80038d0:	05fa0000 	.word	0x05fa0000

080038d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d8:	4b04      	ldr	r3, [pc, #16]	; (80038ec <__NVIC_GetPriorityGrouping+0x18>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	f003 0307 	and.w	r3, r3, #7
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	46bd      	mov	sp, r7
 80038e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ea:	4770      	bx	lr
 80038ec:	e000ed00 	.word	0xe000ed00

080038f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	4603      	mov	r3, r0
 80038f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	db0b      	blt.n	800391a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003902:	79fb      	ldrb	r3, [r7, #7]
 8003904:	f003 021f 	and.w	r2, r3, #31
 8003908:	4907      	ldr	r1, [pc, #28]	; (8003928 <__NVIC_EnableIRQ+0x38>)
 800390a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	2001      	movs	r0, #1
 8003912:	fa00 f202 	lsl.w	r2, r0, r2
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800391a:	bf00      	nop
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	e000e100 	.word	0xe000e100

0800392c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	4603      	mov	r3, r0
 8003934:	6039      	str	r1, [r7, #0]
 8003936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393c:	2b00      	cmp	r3, #0
 800393e:	db0a      	blt.n	8003956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	b2da      	uxtb	r2, r3
 8003944:	490c      	ldr	r1, [pc, #48]	; (8003978 <__NVIC_SetPriority+0x4c>)
 8003946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394a:	0112      	lsls	r2, r2, #4
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	440b      	add	r3, r1
 8003950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003954:	e00a      	b.n	800396c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	4908      	ldr	r1, [pc, #32]	; (800397c <__NVIC_SetPriority+0x50>)
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	3b04      	subs	r3, #4
 8003964:	0112      	lsls	r2, r2, #4
 8003966:	b2d2      	uxtb	r2, r2
 8003968:	440b      	add	r3, r1
 800396a:	761a      	strb	r2, [r3, #24]
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	e000e100 	.word	0xe000e100
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	; 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f1c3 0307 	rsb	r3, r3, #7
 800399a:	2b04      	cmp	r3, #4
 800399c:	bf28      	it	cs
 800399e:	2304      	movcs	r3, #4
 80039a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	3304      	adds	r3, #4
 80039a6:	2b06      	cmp	r3, #6
 80039a8:	d902      	bls.n	80039b0 <NVIC_EncodePriority+0x30>
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3b03      	subs	r3, #3
 80039ae:	e000      	b.n	80039b2 <NVIC_EncodePriority+0x32>
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b4:	f04f 32ff 	mov.w	r2, #4294967295
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43da      	mvns	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	401a      	ands	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c8:	f04f 31ff 	mov.w	r1, #4294967295
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	43d9      	mvns	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d8:	4313      	orrs	r3, r2
         );
}
 80039da:	4618      	mov	r0, r3
 80039dc:	3724      	adds	r7, #36	; 0x24
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	f7ff ff4c 	bl	800388c <__NVIC_SetPriorityGrouping>
}
 80039f4:	bf00      	nop
 80039f6:	3708      	adds	r7, #8
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a0e:	f7ff ff61 	bl	80038d4 <__NVIC_GetPriorityGrouping>
 8003a12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	68b9      	ldr	r1, [r7, #8]
 8003a18:	6978      	ldr	r0, [r7, #20]
 8003a1a:	f7ff ffb1 	bl	8003980 <NVIC_EncodePriority>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff ff80 	bl	800392c <__NVIC_SetPriority>
}
 8003a2c:	bf00      	nop
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ff54 	bl	80038f0 <__NVIC_EnableIRQ>
}
 8003a48:	bf00      	nop
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e054      	b.n	8003b0c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	7f5b      	ldrb	r3, [r3, #29]
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fd fcac 	bl	80013d0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	791b      	ldrb	r3, [r3, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10c      	bne.n	8003aa0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <HAL_CRC_Init+0xc4>)
 8003a8c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f022 0218 	bic.w	r2, r2, #24
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	e00c      	b.n	8003aba <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6899      	ldr	r1, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f834 	bl	8003b18 <HAL_CRCEx_Polynomial_Set>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e028      	b.n	8003b0c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	795b      	ldrb	r3, [r3, #5]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d105      	bne.n	8003ace <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	611a      	str	r2, [r3, #16]
 8003acc:	e004      	b.n	8003ad8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	6912      	ldr	r2, [r2, #16]
 8003ad6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695a      	ldr	r2, [r3, #20]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	430a      	orrs	r2, r1
 8003aec:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699a      	ldr	r2, [r3, #24]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	430a      	orrs	r2, r1
 8003b02:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	04c11db7 	.word	0x04c11db7

08003b18 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	60f8      	str	r0, [r7, #12]
 8003b20:	60b9      	str	r1, [r7, #8]
 8003b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003b28:	231f      	movs	r3, #31
 8003b2a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8003b2c:	bf00      	nop
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1e5a      	subs	r2, r3, #1
 8003b32:	613a      	str	r2, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <HAL_CRCEx_Polynomial_Set+0x34>
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	fa22 f303 	lsr.w	r3, r2, r3
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b18      	cmp	r3, #24
 8003b50:	d846      	bhi.n	8003be0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8003b52:	a201      	add	r2, pc, #4	; (adr r2, 8003b58 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b58:	08003be7 	.word	0x08003be7
 8003b5c:	08003be1 	.word	0x08003be1
 8003b60:	08003be1 	.word	0x08003be1
 8003b64:	08003be1 	.word	0x08003be1
 8003b68:	08003be1 	.word	0x08003be1
 8003b6c:	08003be1 	.word	0x08003be1
 8003b70:	08003be1 	.word	0x08003be1
 8003b74:	08003be1 	.word	0x08003be1
 8003b78:	08003bd5 	.word	0x08003bd5
 8003b7c:	08003be1 	.word	0x08003be1
 8003b80:	08003be1 	.word	0x08003be1
 8003b84:	08003be1 	.word	0x08003be1
 8003b88:	08003be1 	.word	0x08003be1
 8003b8c:	08003be1 	.word	0x08003be1
 8003b90:	08003be1 	.word	0x08003be1
 8003b94:	08003be1 	.word	0x08003be1
 8003b98:	08003bc9 	.word	0x08003bc9
 8003b9c:	08003be1 	.word	0x08003be1
 8003ba0:	08003be1 	.word	0x08003be1
 8003ba4:	08003be1 	.word	0x08003be1
 8003ba8:	08003be1 	.word	0x08003be1
 8003bac:	08003be1 	.word	0x08003be1
 8003bb0:	08003be1 	.word	0x08003be1
 8003bb4:	08003be1 	.word	0x08003be1
 8003bb8:	08003bbd 	.word	0x08003bbd
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	2b06      	cmp	r3, #6
 8003bc0:	d913      	bls.n	8003bea <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003bc6:	e010      	b.n	8003bea <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	2b07      	cmp	r3, #7
 8003bcc:	d90f      	bls.n	8003bee <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003bd2:	e00c      	b.n	8003bee <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	2b0f      	cmp	r3, #15
 8003bd8:	d90b      	bls.n	8003bf2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003bde:	e008      	b.n	8003bf2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	75fb      	strb	r3, [r7, #23]
      break;
 8003be4:	e006      	b.n	8003bf4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003be6:	bf00      	nop
 8003be8:	e004      	b.n	8003bf4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003bea:	bf00      	nop
 8003bec:	e002      	b.n	8003bf4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003bf2:	bf00      	nop
  }
  if (status == HAL_OK)
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d10d      	bne.n	8003c16 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f023 0118 	bic.w	r1, r3, #24
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	430a      	orrs	r2, r1
 8003c14:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c30:	f7fe ff0e 	bl	8002a50 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e099      	b.n	8003d74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f022 0201 	bic.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c60:	e00f      	b.n	8003c82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c62:	f7fe fef5 	bl	8002a50 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	2b05      	cmp	r3, #5
 8003c6e:	d908      	bls.n	8003c82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2203      	movs	r2, #3
 8003c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e078      	b.n	8003d74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1e8      	bne.n	8003c62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4b38      	ldr	r3, [pc, #224]	; (8003d7c <HAL_DMA_Init+0x158>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d107      	bne.n	8003cec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	697a      	ldr	r2, [r7, #20]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695b      	ldr	r3, [r3, #20]
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	f023 0307 	bic.w	r3, r3, #7
 8003d02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	2b04      	cmp	r3, #4
 8003d14:	d117      	bne.n	8003d46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1a:	697a      	ldr	r2, [r7, #20]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 faa5 	bl	8004278 <DMA_CheckFifoParam>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2240      	movs	r2, #64	; 0x40
 8003d38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d42:	2301      	movs	r3, #1
 8003d44:	e016      	b.n	8003d74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fa5c 	bl	800420c <DMA_CalcBaseAndBitshift>
 8003d54:	4603      	mov	r3, r0
 8003d56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5c:	223f      	movs	r2, #63	; 0x3f
 8003d5e:	409a      	lsls	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3718      	adds	r7, #24
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	e010803f 	.word	0xe010803f

08003d80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_DMA_Start_IT+0x26>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e048      	b.n	8003e38 <HAL_DMA_Start_IT+0xb8>
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d137      	bne.n	8003e2a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2202      	movs	r2, #2
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	68b9      	ldr	r1, [r7, #8]
 8003dce:	68f8      	ldr	r0, [r7, #12]
 8003dd0:	f000 f9ee 	bl	80041b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd8:	223f      	movs	r2, #63	; 0x3f
 8003dda:	409a      	lsls	r2, r3
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f042 0216 	orr.w	r2, r2, #22
 8003dee:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695a      	ldr	r2, [r3, #20]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dfe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f042 0208 	orr.w	r2, r2, #8
 8003e16:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]
 8003e28:	e005      	b.n	8003e36 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
 8003e34:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3718      	adds	r7, #24
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d004      	beq.n	8003e5e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2280      	movs	r2, #128	; 0x80
 8003e58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e00c      	b.n	8003e78 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2205      	movs	r2, #5
 8003e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f022 0201 	bic.w	r2, r2, #1
 8003e74:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003e90:	4b8e      	ldr	r3, [pc, #568]	; (80040cc <HAL_DMA_IRQHandler+0x248>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a8e      	ldr	r2, [pc, #568]	; (80040d0 <HAL_DMA_IRQHandler+0x24c>)
 8003e96:	fba2 2303 	umull	r2, r3, r2, r3
 8003e9a:	0a9b      	lsrs	r3, r3, #10
 8003e9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eae:	2208      	movs	r2, #8
 8003eb0:	409a      	lsls	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d01a      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d013      	beq.n	8003ef0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0204 	bic.w	r2, r2, #4
 8003ed6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	2208      	movs	r2, #8
 8003ede:	409a      	lsls	r2, r3
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee8:	f043 0201 	orr.w	r2, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	409a      	lsls	r2, r3
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	4013      	ands	r3, r2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d012      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00b      	beq.n	8003f26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f12:	2201      	movs	r2, #1
 8003f14:	409a      	lsls	r2, r3
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	f043 0202 	orr.w	r2, r3, #2
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	409a      	lsls	r2, r3
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4013      	ands	r3, r2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d012      	beq.n	8003f5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d00b      	beq.n	8003f5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f48:	2204      	movs	r2, #4
 8003f4a:	409a      	lsls	r2, r3
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f54:	f043 0204 	orr.w	r2, r3, #4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	2210      	movs	r2, #16
 8003f62:	409a      	lsls	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d043      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0308 	and.w	r3, r3, #8
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d03c      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7e:	2210      	movs	r2, #16
 8003f80:	409a      	lsls	r2, r3
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d018      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d108      	bne.n	8003fb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d024      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
 8003fb2:	e01f      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01b      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	4798      	blx	r3
 8003fc4:	e016      	b.n	8003ff4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d107      	bne.n	8003fe4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 0208 	bic.w	r2, r2, #8
 8003fe2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	409a      	lsls	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	4013      	ands	r3, r2
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 808f 	beq.w	8004124 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	2b00      	cmp	r3, #0
 8004012:	f000 8087 	beq.w	8004124 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	2220      	movs	r2, #32
 800401c:	409a      	lsls	r2, r3
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b05      	cmp	r3, #5
 800402c:	d136      	bne.n	800409c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0216 	bic.w	r2, r2, #22
 800403c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695a      	ldr	r2, [r3, #20]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800404c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <HAL_DMA_IRQHandler+0x1da>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800405a:	2b00      	cmp	r3, #0
 800405c:	d007      	beq.n	800406e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f022 0208 	bic.w	r2, r2, #8
 800406c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004072:	223f      	movs	r2, #63	; 0x3f
 8004074:	409a      	lsls	r2, r3
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408e:	2b00      	cmp	r3, #0
 8004090:	d07e      	beq.n	8004190 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4798      	blx	r3
        }
        return;
 800409a:	e079      	b.n	8004190 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d01d      	beq.n	80040e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10d      	bne.n	80040d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d031      	beq.n	8004124 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	4798      	blx	r3
 80040c8:	e02c      	b.n	8004124 <HAL_DMA_IRQHandler+0x2a0>
 80040ca:	bf00      	nop
 80040cc:	20000014 	.word	0x20000014
 80040d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d023      	beq.n	8004124 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	4798      	blx	r3
 80040e4:	e01e      	b.n	8004124 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10f      	bne.n	8004114 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0210 	bic.w	r2, r2, #16
 8004102:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004128:	2b00      	cmp	r3, #0
 800412a:	d032      	beq.n	8004192 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d022      	beq.n	800417e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2205      	movs	r2, #5
 800413c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f022 0201 	bic.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	3301      	adds	r3, #1
 8004154:	60bb      	str	r3, [r7, #8]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	429a      	cmp	r2, r3
 800415a:	d307      	bcc.n	800416c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1f2      	bne.n	8004150 <HAL_DMA_IRQHandler+0x2cc>
 800416a:	e000      	b.n	800416e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800416c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004182:	2b00      	cmp	r3, #0
 8004184:	d005      	beq.n	8004192 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4798      	blx	r3
 800418e:	e000      	b.n	8004192 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004190:	bf00      	nop
    }
  }
}
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b085      	sub	sp, #20
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	60f8      	str	r0, [r7, #12]
 80041b8:	60b9      	str	r1, [r7, #8]
 80041ba:	607a      	str	r2, [r7, #4]
 80041bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	d108      	bne.n	80041f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68ba      	ldr	r2, [r7, #8]
 80041ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80041ee:	e007      	b.n	8004200 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68ba      	ldr	r2, [r7, #8]
 80041f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	60da      	str	r2, [r3, #12]
}
 8004200:	bf00      	nop
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	3b10      	subs	r3, #16
 800421c:	4a13      	ldr	r2, [pc, #76]	; (800426c <DMA_CalcBaseAndBitshift+0x60>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	091b      	lsrs	r3, r3, #4
 8004224:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004226:	4a12      	ldr	r2, [pc, #72]	; (8004270 <DMA_CalcBaseAndBitshift+0x64>)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d908      	bls.n	800424c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	4b0c      	ldr	r3, [pc, #48]	; (8004274 <DMA_CalcBaseAndBitshift+0x68>)
 8004242:	4013      	ands	r3, r2
 8004244:	1d1a      	adds	r2, r3, #4
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	659a      	str	r2, [r3, #88]	; 0x58
 800424a:	e006      	b.n	800425a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <DMA_CalcBaseAndBitshift+0x68>)
 8004254:	4013      	ands	r3, r2
 8004256:	687a      	ldr	r2, [r7, #4]
 8004258:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	aaaaaaab 	.word	0xaaaaaaab
 8004270:	0802f4dc 	.word	0x0802f4dc
 8004274:	fffffc00 	.word	0xfffffc00

08004278 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004280:	2300      	movs	r3, #0
 8004282:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d11f      	bne.n	80042d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b03      	cmp	r3, #3
 8004296:	d856      	bhi.n	8004346 <DMA_CheckFifoParam+0xce>
 8004298:	a201      	add	r2, pc, #4	; (adr r2, 80042a0 <DMA_CheckFifoParam+0x28>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	080042b1 	.word	0x080042b1
 80042a4:	080042c3 	.word	0x080042c3
 80042a8:	080042b1 	.word	0x080042b1
 80042ac:	08004347 	.word	0x08004347
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d046      	beq.n	800434a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c0:	e043      	b.n	800434a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042ca:	d140      	bne.n	800434e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042d0:	e03d      	b.n	800434e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042da:	d121      	bne.n	8004320 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2b03      	cmp	r3, #3
 80042e0:	d837      	bhi.n	8004352 <DMA_CheckFifoParam+0xda>
 80042e2:	a201      	add	r2, pc, #4	; (adr r2, 80042e8 <DMA_CheckFifoParam+0x70>)
 80042e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e8:	080042f9 	.word	0x080042f9
 80042ec:	080042ff 	.word	0x080042ff
 80042f0:	080042f9 	.word	0x080042f9
 80042f4:	08004311 	.word	0x08004311
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	73fb      	strb	r3, [r7, #15]
      break;
 80042fc:	e030      	b.n	8004360 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004306:	2b00      	cmp	r3, #0
 8004308:	d025      	beq.n	8004356 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800430e:	e022      	b.n	8004356 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004314:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004318:	d11f      	bne.n	800435a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800431e:	e01c      	b.n	800435a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d903      	bls.n	800432e <DMA_CheckFifoParam+0xb6>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d003      	beq.n	8004334 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800432c:	e018      	b.n	8004360 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	73fb      	strb	r3, [r7, #15]
      break;
 8004332:	e015      	b.n	8004360 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00e      	beq.n	800435e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	73fb      	strb	r3, [r7, #15]
      break;
 8004344:	e00b      	b.n	800435e <DMA_CheckFifoParam+0xe6>
      break;
 8004346:	bf00      	nop
 8004348:	e00a      	b.n	8004360 <DMA_CheckFifoParam+0xe8>
      break;
 800434a:	bf00      	nop
 800434c:	e008      	b.n	8004360 <DMA_CheckFifoParam+0xe8>
      break;
 800434e:	bf00      	nop
 8004350:	e006      	b.n	8004360 <DMA_CheckFifoParam+0xe8>
      break;
 8004352:	bf00      	nop
 8004354:	e004      	b.n	8004360 <DMA_CheckFifoParam+0xe8>
      break;
 8004356:	bf00      	nop
 8004358:	e002      	b.n	8004360 <DMA_CheckFifoParam+0xe8>
      break;   
 800435a:	bf00      	nop
 800435c:	e000      	b.n	8004360 <DMA_CheckFifoParam+0xe8>
      break;
 800435e:	bf00      	nop
    }
  } 
  
  return status; 
 8004360:	7bfb      	ldrb	r3, [r7, #15]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
 800436e:	bf00      	nop

08004370 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e049      	b.n	8004416 <HAL_DMA2D_Init+0xa6>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004388:	b2db      	uxtb	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d106      	bne.n	800439c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7fd f898 	bl	80014cc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2202      	movs	r2, #2
 80043a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c0:	f023 0107 	bic.w	r1, r3, #7
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043d6:	4b12      	ldr	r3, [pc, #72]	; (8004420 <HAL_DMA2D_Init+0xb0>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68d1      	ldr	r1, [r2, #12]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6812      	ldr	r2, [r2, #0]
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6413      	str	r3, [r2, #64]	; 0x40
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	051a      	lsls	r2, r3, #20
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	055b      	lsls	r3, r3, #21
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	430a      	orrs	r2, r1
 8004404:	635a      	str	r2, [r3, #52]	; 0x34
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	ffffc000 	.word	0xffffc000

08004424 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_DMA2D_ConfigLayer+0x20>
 8004440:	2302      	movs	r3, #2
 8004442:	e084      	b.n	800454e <HAL_DMA2D_ConfigLayer+0x12a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	4613      	mov	r3, r2
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	4413      	add	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	3320      	adds	r3, #32
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	4413      	add	r3, r2
 8004464:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	041b      	lsls	r3, r3, #16
 8004470:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004478:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 8004484:	4b35      	ldr	r3, [pc, #212]	; (800455c <HAL_DMA2D_ConfigLayer+0x138>)
 8004486:	60fb      	str	r3, [r7, #12]
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	2b0a      	cmp	r3, #10
 800448e:	d003      	beq.n	8004498 <HAL_DMA2D_ConfigLayer+0x74>
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b09      	cmp	r3, #9
 8004496:	d107      	bne.n	80044a8 <HAL_DMA2D_ConfigLayer+0x84>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e005      	b.n	80044b4 <HAL_DMA2D_ConfigLayer+0x90>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	061b      	lsls	r3, r3, #24
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d120      	bne.n	80044fc <HAL_DMA2D_ConfigLayer+0xd8>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	ea02 0103 	and.w	r1, r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	430a      	orrs	r2, r1
 80044d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	693a      	ldr	r2, [r7, #16]
 80044d8:	6812      	ldr	r2, [r2, #0]
 80044da:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b0a      	cmp	r3, #10
 80044e2:	d003      	beq.n	80044ec <HAL_DMA2D_ConfigLayer+0xc8>
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2b09      	cmp	r3, #9
 80044ea:	d127      	bne.n	800453c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80044f8:	629a      	str	r2, [r3, #40]	; 0x28
 80044fa:	e01f      	b.n	800453c <HAL_DMA2D_ConfigLayer+0x118>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	69da      	ldr	r2, [r3, #28]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	43db      	mvns	r3, r3
 8004506:	ea02 0103 	and.w	r1, r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	430a      	orrs	r2, r1
 8004512:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	6812      	ldr	r2, [r2, #0]
 800451c:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b0a      	cmp	r3, #10
 8004524:	d003      	beq.n	800452e <HAL_DMA2D_ConfigLayer+0x10a>
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b09      	cmp	r3, #9
 800452c:	d106      	bne.n	800453c <HAL_DMA2D_ConfigLayer+0x118>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	68da      	ldr	r2, [r3, #12]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800453a:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	ff33000f 	.word	0xff33000f

08004560 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004560:	b480      	push	{r7}
 8004562:	b089      	sub	sp, #36	; 0x24
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800456e:	2300      	movs	r3, #0
 8004570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004572:	2300      	movs	r3, #0
 8004574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004576:	2300      	movs	r3, #0
 8004578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800457a:	2300      	movs	r3, #0
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	e175      	b.n	800486c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004580:	2201      	movs	r2, #1
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	4013      	ands	r3, r2
 8004592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	429a      	cmp	r2, r3
 800459a:	f040 8164 	bne.w	8004866 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f003 0303 	and.w	r3, r3, #3
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d005      	beq.n	80045b6 <HAL_GPIO_Init+0x56>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d130      	bne.n	8004618 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	2203      	movs	r2, #3
 80045c2:	fa02 f303 	lsl.w	r3, r2, r3
 80045c6:	43db      	mvns	r3, r3
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	4013      	ands	r3, r2
 80045cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	69fb      	ldr	r3, [r7, #28]
 80045d4:	005b      	lsls	r3, r3, #1
 80045d6:	fa02 f303 	lsl.w	r3, r2, r3
 80045da:	69ba      	ldr	r2, [r7, #24]
 80045dc:	4313      	orrs	r3, r2
 80045de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80045ec:	2201      	movs	r2, #1
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	69ba      	ldr	r2, [r7, #24]
 80045f8:	4013      	ands	r3, r2
 80045fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 0201 	and.w	r2, r3, #1
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b03      	cmp	r3, #3
 8004622:	d017      	beq.n	8004654 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	2203      	movs	r2, #3
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	69ba      	ldr	r2, [r7, #24]
 8004638:	4013      	ands	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4313      	orrs	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d123      	bne.n	80046a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	08da      	lsrs	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3208      	adds	r2, #8
 8004668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	220f      	movs	r2, #15
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	4013      	ands	r3, r2
 8004682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	08da      	lsrs	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3208      	adds	r2, #8
 80046a2:	69b9      	ldr	r1, [r7, #24]
 80046a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	2203      	movs	r2, #3
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	4013      	ands	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0203 	and.w	r2, r3, #3
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80be 	beq.w	8004866 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ea:	4b66      	ldr	r3, [pc, #408]	; (8004884 <HAL_GPIO_Init+0x324>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	4a65      	ldr	r2, [pc, #404]	; (8004884 <HAL_GPIO_Init+0x324>)
 80046f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046f4:	6453      	str	r3, [r2, #68]	; 0x44
 80046f6:	4b63      	ldr	r3, [pc, #396]	; (8004884 <HAL_GPIO_Init+0x324>)
 80046f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004702:	4a61      	ldr	r2, [pc, #388]	; (8004888 <HAL_GPIO_Init+0x328>)
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	3302      	adds	r3, #2
 800470a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	220f      	movs	r2, #15
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	69ba      	ldr	r2, [r7, #24]
 8004722:	4013      	ands	r3, r2
 8004724:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a58      	ldr	r2, [pc, #352]	; (800488c <HAL_GPIO_Init+0x32c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d037      	beq.n	800479e <HAL_GPIO_Init+0x23e>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a57      	ldr	r2, [pc, #348]	; (8004890 <HAL_GPIO_Init+0x330>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d031      	beq.n	800479a <HAL_GPIO_Init+0x23a>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a56      	ldr	r2, [pc, #344]	; (8004894 <HAL_GPIO_Init+0x334>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d02b      	beq.n	8004796 <HAL_GPIO_Init+0x236>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a55      	ldr	r2, [pc, #340]	; (8004898 <HAL_GPIO_Init+0x338>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d025      	beq.n	8004792 <HAL_GPIO_Init+0x232>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a54      	ldr	r2, [pc, #336]	; (800489c <HAL_GPIO_Init+0x33c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d01f      	beq.n	800478e <HAL_GPIO_Init+0x22e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a53      	ldr	r2, [pc, #332]	; (80048a0 <HAL_GPIO_Init+0x340>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d019      	beq.n	800478a <HAL_GPIO_Init+0x22a>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a52      	ldr	r2, [pc, #328]	; (80048a4 <HAL_GPIO_Init+0x344>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d013      	beq.n	8004786 <HAL_GPIO_Init+0x226>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a51      	ldr	r2, [pc, #324]	; (80048a8 <HAL_GPIO_Init+0x348>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00d      	beq.n	8004782 <HAL_GPIO_Init+0x222>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a50      	ldr	r2, [pc, #320]	; (80048ac <HAL_GPIO_Init+0x34c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d007      	beq.n	800477e <HAL_GPIO_Init+0x21e>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a4f      	ldr	r2, [pc, #316]	; (80048b0 <HAL_GPIO_Init+0x350>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d101      	bne.n	800477a <HAL_GPIO_Init+0x21a>
 8004776:	2309      	movs	r3, #9
 8004778:	e012      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800477a:	230a      	movs	r3, #10
 800477c:	e010      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800477e:	2308      	movs	r3, #8
 8004780:	e00e      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 8004782:	2307      	movs	r3, #7
 8004784:	e00c      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 8004786:	2306      	movs	r3, #6
 8004788:	e00a      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800478a:	2305      	movs	r3, #5
 800478c:	e008      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800478e:	2304      	movs	r3, #4
 8004790:	e006      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 8004792:	2303      	movs	r3, #3
 8004794:	e004      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 8004796:	2302      	movs	r3, #2
 8004798:	e002      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800479a:	2301      	movs	r3, #1
 800479c:	e000      	b.n	80047a0 <HAL_GPIO_Init+0x240>
 800479e:	2300      	movs	r3, #0
 80047a0:	69fa      	ldr	r2, [r7, #28]
 80047a2:	f002 0203 	and.w	r2, r2, #3
 80047a6:	0092      	lsls	r2, r2, #2
 80047a8:	4093      	lsls	r3, r2
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80047b0:	4935      	ldr	r1, [pc, #212]	; (8004888 <HAL_GPIO_Init+0x328>)
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	089b      	lsrs	r3, r3, #2
 80047b6:	3302      	adds	r3, #2
 80047b8:	69ba      	ldr	r2, [r7, #24]
 80047ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047be:	4b3d      	ldr	r3, [pc, #244]	; (80048b4 <HAL_GPIO_Init+0x354>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	43db      	mvns	r3, r3
 80047c8:	69ba      	ldr	r2, [r7, #24]
 80047ca:	4013      	ands	r3, r2
 80047cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80047e2:	4a34      	ldr	r2, [pc, #208]	; (80048b4 <HAL_GPIO_Init+0x354>)
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80047e8:	4b32      	ldr	r3, [pc, #200]	; (80048b4 <HAL_GPIO_Init+0x354>)
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	43db      	mvns	r3, r3
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4013      	ands	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800480c:	4a29      	ldr	r2, [pc, #164]	; (80048b4 <HAL_GPIO_Init+0x354>)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004812:	4b28      	ldr	r3, [pc, #160]	; (80048b4 <HAL_GPIO_Init+0x354>)
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	43db      	mvns	r3, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	4313      	orrs	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004836:	4a1f      	ldr	r2, [pc, #124]	; (80048b4 <HAL_GPIO_Init+0x354>)
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800483c:	4b1d      	ldr	r3, [pc, #116]	; (80048b4 <HAL_GPIO_Init+0x354>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	43db      	mvns	r3, r3
 8004846:	69ba      	ldr	r2, [r7, #24]
 8004848:	4013      	ands	r3, r2
 800484a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d003      	beq.n	8004860 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004858:	69ba      	ldr	r2, [r7, #24]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004860:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <HAL_GPIO_Init+0x354>)
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	3301      	adds	r3, #1
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	2b0f      	cmp	r3, #15
 8004870:	f67f ae86 	bls.w	8004580 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	3724      	adds	r7, #36	; 0x24
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	40023800 	.word	0x40023800
 8004888:	40013800 	.word	0x40013800
 800488c:	40020000 	.word	0x40020000
 8004890:	40020400 	.word	0x40020400
 8004894:	40020800 	.word	0x40020800
 8004898:	40020c00 	.word	0x40020c00
 800489c:	40021000 	.word	0x40021000
 80048a0:	40021400 	.word	0x40021400
 80048a4:	40021800 	.word	0x40021800
 80048a8:	40021c00 	.word	0x40021c00
 80048ac:	40022000 	.word	0x40022000
 80048b0:	40022400 	.word	0x40022400
 80048b4:	40013c00 	.word	0x40013c00

080048b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80048c2:	2300      	movs	r3, #0
 80048c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	e0d9      	b.n	8004a88 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80048d4:	2201      	movs	r2, #1
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4013      	ands	r3, r2
 80048e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	f040 80c9 	bne.w	8004a82 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80048f0:	4a6b      	ldr	r2, [pc, #428]	; (8004aa0 <HAL_GPIO_DeInit+0x1e8>)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	089b      	lsrs	r3, r3, #2
 80048f6:	3302      	adds	r3, #2
 80048f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048fc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	220f      	movs	r2, #15
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	4013      	ands	r3, r2
 8004910:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a63      	ldr	r2, [pc, #396]	; (8004aa4 <HAL_GPIO_DeInit+0x1ec>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d037      	beq.n	800498a <HAL_GPIO_DeInit+0xd2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a62      	ldr	r2, [pc, #392]	; (8004aa8 <HAL_GPIO_DeInit+0x1f0>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d031      	beq.n	8004986 <HAL_GPIO_DeInit+0xce>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a61      	ldr	r2, [pc, #388]	; (8004aac <HAL_GPIO_DeInit+0x1f4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d02b      	beq.n	8004982 <HAL_GPIO_DeInit+0xca>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a60      	ldr	r2, [pc, #384]	; (8004ab0 <HAL_GPIO_DeInit+0x1f8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d025      	beq.n	800497e <HAL_GPIO_DeInit+0xc6>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a5f      	ldr	r2, [pc, #380]	; (8004ab4 <HAL_GPIO_DeInit+0x1fc>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d01f      	beq.n	800497a <HAL_GPIO_DeInit+0xc2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a5e      	ldr	r2, [pc, #376]	; (8004ab8 <HAL_GPIO_DeInit+0x200>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d019      	beq.n	8004976 <HAL_GPIO_DeInit+0xbe>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a5d      	ldr	r2, [pc, #372]	; (8004abc <HAL_GPIO_DeInit+0x204>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d013      	beq.n	8004972 <HAL_GPIO_DeInit+0xba>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a5c      	ldr	r2, [pc, #368]	; (8004ac0 <HAL_GPIO_DeInit+0x208>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00d      	beq.n	800496e <HAL_GPIO_DeInit+0xb6>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a5b      	ldr	r2, [pc, #364]	; (8004ac4 <HAL_GPIO_DeInit+0x20c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <HAL_GPIO_DeInit+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a5a      	ldr	r2, [pc, #360]	; (8004ac8 <HAL_GPIO_DeInit+0x210>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d101      	bne.n	8004966 <HAL_GPIO_DeInit+0xae>
 8004962:	2309      	movs	r3, #9
 8004964:	e012      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 8004966:	230a      	movs	r3, #10
 8004968:	e010      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 800496a:	2308      	movs	r3, #8
 800496c:	e00e      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 800496e:	2307      	movs	r3, #7
 8004970:	e00c      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 8004972:	2306      	movs	r3, #6
 8004974:	e00a      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 8004976:	2305      	movs	r3, #5
 8004978:	e008      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 800497a:	2304      	movs	r3, #4
 800497c:	e006      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 800497e:	2303      	movs	r3, #3
 8004980:	e004      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 8004982:	2302      	movs	r3, #2
 8004984:	e002      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_GPIO_DeInit+0xd4>
 800498a:	2300      	movs	r3, #0
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	f002 0203 	and.w	r2, r2, #3
 8004992:	0092      	lsls	r2, r2, #2
 8004994:	4093      	lsls	r3, r2
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	429a      	cmp	r2, r3
 800499a:	d132      	bne.n	8004a02 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800499c:	4b4b      	ldr	r3, [pc, #300]	; (8004acc <HAL_GPIO_DeInit+0x214>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	43db      	mvns	r3, r3
 80049a4:	4949      	ldr	r1, [pc, #292]	; (8004acc <HAL_GPIO_DeInit+0x214>)
 80049a6:	4013      	ands	r3, r2
 80049a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80049aa:	4b48      	ldr	r3, [pc, #288]	; (8004acc <HAL_GPIO_DeInit+0x214>)
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	4946      	ldr	r1, [pc, #280]	; (8004acc <HAL_GPIO_DeInit+0x214>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80049b8:	4b44      	ldr	r3, [pc, #272]	; (8004acc <HAL_GPIO_DeInit+0x214>)
 80049ba:	68da      	ldr	r2, [r3, #12]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	43db      	mvns	r3, r3
 80049c0:	4942      	ldr	r1, [pc, #264]	; (8004acc <HAL_GPIO_DeInit+0x214>)
 80049c2:	4013      	ands	r3, r2
 80049c4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80049c6:	4b41      	ldr	r3, [pc, #260]	; (8004acc <HAL_GPIO_DeInit+0x214>)
 80049c8:	689a      	ldr	r2, [r3, #8]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	43db      	mvns	r3, r3
 80049ce:	493f      	ldr	r1, [pc, #252]	; (8004acc <HAL_GPIO_DeInit+0x214>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	f003 0303 	and.w	r3, r3, #3
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	220f      	movs	r2, #15
 80049de:	fa02 f303 	lsl.w	r3, r2, r3
 80049e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80049e4:	4a2e      	ldr	r2, [pc, #184]	; (8004aa0 <HAL_GPIO_DeInit+0x1e8>)
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	089b      	lsrs	r3, r3, #2
 80049ea:	3302      	adds	r3, #2
 80049ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	43da      	mvns	r2, r3
 80049f4:	482a      	ldr	r0, [pc, #168]	; (8004aa0 <HAL_GPIO_DeInit+0x1e8>)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	089b      	lsrs	r3, r3, #2
 80049fa:	400a      	ands	r2, r1
 80049fc:	3302      	adds	r3, #2
 80049fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	2103      	movs	r1, #3
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	401a      	ands	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	08da      	lsrs	r2, r3, #3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3208      	adds	r2, #8
 8004a20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	220f      	movs	r2, #15
 8004a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a32:	43db      	mvns	r3, r3
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	08d2      	lsrs	r2, r2, #3
 8004a38:	4019      	ands	r1, r3
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	3208      	adds	r2, #8
 8004a3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68da      	ldr	r2, [r3, #12]
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	2103      	movs	r1, #3
 8004a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a50:	43db      	mvns	r3, r3
 8004a52:	401a      	ands	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	2101      	movs	r1, #1
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	fa01 f303 	lsl.w	r3, r1, r3
 8004a64:	43db      	mvns	r3, r3
 8004a66:	401a      	ands	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	005b      	lsls	r3, r3, #1
 8004a74:	2103      	movs	r1, #3
 8004a76:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	401a      	ands	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	3301      	adds	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	f67f af22 	bls.w	80048d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004a90:	bf00      	nop
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	40013800 	.word	0x40013800
 8004aa4:	40020000 	.word	0x40020000
 8004aa8:	40020400 	.word	0x40020400
 8004aac:	40020800 	.word	0x40020800
 8004ab0:	40020c00 	.word	0x40020c00
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40021400 	.word	0x40021400
 8004abc:	40021800 	.word	0x40021800
 8004ac0:	40021c00 	.word	0x40021c00
 8004ac4:	40022000 	.word	0x40022000
 8004ac8:	40022400 	.word	0x40022400
 8004acc:	40013c00 	.word	0x40013c00

08004ad0 <HAL_JPEG_Init>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_JPEG_Init(JPEG_HandleTypeDef *hjpeg)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b082      	sub	sp, #8
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
    99,  99,  99,  99,  99,  99,  99,  99,
    99,  99,  99,  99,  99,  99,  99,  99
  };

  /* Check the JPEG handle allocation */
  if (hjpeg == NULL)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d101      	bne.n	8004ae2 <HAL_JPEG_Init+0x12>
  {
    return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e078      	b.n	8004bd4 <HAL_JPEG_Init+0x104>

    /* Init the low level hardware */
    hjpeg->MspInitCallback(hjpeg);
  }
#else
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d106      	bne.n	8004afc <HAL_JPEG_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hjpeg->Lock = HAL_UNLOCKED;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_JPEG_MspInit(hjpeg);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fc ff56 	bl	80019a8 <HAL_JPEG_MspInit>
  }
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Start the JPEG Core*/
  __HAL_JPEG_ENABLE(hjpeg);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0201 	orr.w	r2, r2, #1
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30

  /* Stop the JPEG encoding/decoding process*/
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0201 	bic.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8004b32:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b52:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* init default quantization tables*/
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_JPEG_Init+0x10c>)
 8004b78:	63da      	str	r2, [r3, #60]	; 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a18      	ldr	r2, [pc, #96]	; (8004be0 <HAL_JPEG_Init+0x110>)
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hjpeg->QuantTable2 = NULL;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
  hjpeg->QuantTable3 = NULL;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	649a      	str	r2, [r3, #72]	; 0x48

  /* init the default Huffman tables*/
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fd0b 	bl	80055a8 <JPEG_Set_HuffEnc_Mem>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d004      	beq.n	8004ba2 <HAL_JPEG_Init+0xd2>
  {
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	651a      	str	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e018      	b.n	8004bd4 <HAL_JPEG_Init+0x104>
  }

  /* Enable header processing*/
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bb0:	605a      	str	r2, [r3, #4]

  /* Reset JpegInCount and JpegOutCount */
  hjpeg->JpegInCount = 0;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	621a      	str	r2, [r3, #32]
  hjpeg->JpegOutCount = 0;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the JPEG state */
  hjpeg->State = HAL_JPEG_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

  /* Reset the JPEG ErrorCode */
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	651a      	str	r2, [r3, #80]	; 0x50

  /*Clear the context filelds*/
  hjpeg->Context = 0;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Return function status */
  return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3708      	adds	r7, #8
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	0802f684 	.word	0x0802f684
 8004be0:	0802f6c4 	.word	0x0802f6c4

08004be4 <HAL_JPEG_Decode_DMA>:
  * @param  OutDataLength size in bytes of the Output buffer
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t *pDataIn, uint32_t InDataLength,
                                       uint8_t *pDataOutMCU, uint32_t OutDataLength)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param((InDataLength >= 4UL));
  assert_param((OutDataLength >= 4UL));

  /* Check In/out buffer allocation and size */
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_JPEG_Decode_DMA+0x20>
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_JPEG_Decode_DMA+0x20>
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d101      	bne.n	8004c08 <HAL_JPEG_Decode_DMA+0x24>
  {
    return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e04c      	b.n	8004ca2 <HAL_JPEG_Decode_DMA+0xbe>
  }

  /* Process Locked */
  __HAL_LOCK(hjpeg);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_JPEG_Decode_DMA+0x32>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e045      	b.n	8004ca2 <HAL_JPEG_Decode_DMA+0xbe>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d134      	bne.n	8004c94 <HAL_JPEG_Decode_DMA+0xb0>
  {
    /*Change JPEG state*/
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Set the Context to Decode with DMA*/
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c36:	f023 020f 	bic.w	r2, r3, #15
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	655a      	str	r2, [r3, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	f043 020e 	orr.w	r2, r3, #14
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54

    /*Store In/out buffers pointers and size*/
    hjpeg->pJpegInBuffPtr = pDataIn;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	619a      	str	r2, [r3, #24]
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	61da      	str	r2, [r3, #28]
    hjpeg->InDataLength = InDataLength;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28
    hjpeg->OutDataLength = OutDataLength;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	62da      	str	r2, [r3, #44]	; 0x2c

    /*Reset In/out data counter */
    hjpeg->JpegInCount = 0;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	621a      	str	r2, [r3, #32]
    hjpeg->JpegOutCount = 0;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	625a      	str	r2, [r3, #36]	; 0x24

    /*Init decoding process*/
    JPEG_Init_Process(hjpeg);
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 ff1c 	bl	8005aac <JPEG_Init_Process>

    /* JPEG decoding process using DMA */
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 ff95 	bl	8005ba4 <JPEG_DMA_StartProcess>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00f      	beq.n	8004ca0 <HAL_JPEG_Decode_DMA+0xbc>
    {
      /* Update State */
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2206      	movs	r2, #6
 8004c84:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      /* Process Unlocked */
      __HAL_UNLOCK(hjpeg);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e006      	b.n	8004ca2 <HAL_JPEG_Decode_DMA+0xbe>
    }
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_BUSY;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	e000      	b.n	8004ca2 <HAL_JPEG_Decode_DMA+0xbe>
  }
  /* Return function status */
  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <HAL_JPEG_Pause>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Pause Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Pause Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Pause(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cbc:	f003 030c 	and.w	r3, r3, #12
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	d129      	bne.n	8004d18 <HAL_JPEG_Pause+0x6e>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d009      	beq.n	8004ce2 <HAL_JPEG_Pause+0x38>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004ce0:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d009      	beq.n	8004d00 <HAL_JPEG_Pause+0x56>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_ODMA;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cfe:	60fb      	str	r3, [r7, #12]
    }
    JPEG_DISABLE_DMA(hjpeg, mask);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004d0c:	43da      	mvns	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	400a      	ands	r2, r1
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
 8004d16:	e02c      	b.n	8004d72 <HAL_JPEG_Pause+0xc8>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	f003 030c 	and.w	r3, r3, #12
 8004d20:	2b08      	cmp	r3, #8
 8004d22:	d126      	bne.n	8004d72 <HAL_JPEG_Pause+0xc8>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_JPEG_Pause+0x98>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f043 0306 	orr.w	r3, r3, #6
 8004d40:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d009      	beq.n	8004d60 <HAL_JPEG_Pause+0xb6>
    {
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d50:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004d5e:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	43da      	mvns	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	400a      	ands	r2, r1
 8004d70:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_JPEG_Resume>:
  *                           JPEG_PAUSE_RESUME_OUTPUT: Resume Output processing
  *                           JPEG_PAUSE_RESUME_INPUT_OUTPUT: Resume Input and Output processing
  * @retval HAL status
  */
HAL_StatusTypeDef  HAL_JPEG_Resume(JPEG_HandleTypeDef *hjpeg, uint32_t XferSelection)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t mask = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	60fb      	str	r3, [r7, #12]

  assert_param(IS_JPEG_PAUSE_RESUME_STATE(XferSelection));

  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d101      	bne.n	8004d9e <HAL_JPEG_Resume+0x1e>
  {
    /* if nothing paused to resume return error*/
    return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e0a9      	b.n	8004ef2 <HAL_JPEG_Resume+0x172>
  }

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b0c      	cmp	r3, #12
 8004da8:	d176      	bne.n	8004e98 <HAL_JPEG_Resume+0x118>
  {

    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	f003 0301 	and.w	r3, r3, #1
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d030      	beq.n	8004e16 <HAL_JPEG_Resume+0x96>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004db8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= JPEG_DMA_IDMA;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dc6:	60fb      	str	r3, [r7, #12]

      /*JPEG Input DMA transfer data number must be multiple of DMA buffer size
        as the destination is a 32 bits register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dcc:	f023 0203 	bic.w	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28

      if (hjpeg->InDataLength > 0UL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01c      	beq.n	8004e16 <HAL_JPEG_Resume+0x96>
      {
        /* Start DMA FIFO In transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	4619      	mov	r1, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	3340      	adds	r3, #64	; 0x40
 8004dec:	461a      	mov	r2, r3
                             hjpeg->InDataLength >> 2) != HAL_OK)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8004df2:	089b      	lsrs	r3, r3, #2
 8004df4:	f7fe ffc4 	bl	8003d80 <HAL_DMA_Start_IT>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_JPEG_Resume+0x96>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e02:	f043 0204 	orr.w	r2, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2206      	movs	r2, #6
 8004e0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e06d      	b.n	8004ef2 <HAL_JPEG_Resume+0x172>
        }
      }
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d030      	beq.n	8004e82 <HAL_JPEG_Resume+0x102>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_JPEG_Resume+0xc0>
      {
        JPEG_DMA_PollResidualData(hjpeg);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 ffa3 	bl	8005d84 <JPEG_DMA_PollResidualData>
 8004e3e:	e020      	b.n	8004e82 <HAL_JPEG_Resume+0x102>
      }
      else
      {
        mask |= JPEG_DMA_ODMA;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e46:	60fb      	str	r3, [r7, #12]

        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3344      	adds	r3, #68	; 0x44
 8004e52:	4619      	mov	r1, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8004e5e:	089b      	lsrs	r3, r3, #2
 8004e60:	f7fe ff8e 	bl	8003d80 <HAL_DMA_Start_IT>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00b      	beq.n	8004e82 <HAL_JPEG_Resume+0x102>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e6e:	f043 0204 	orr.w	r2, r3, #4
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2206      	movs	r2, #6
 8004e7a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e037      	b.n	8004ef2 <HAL_JPEG_Resume+0x172>
        }
      }

    }
    JPEG_ENABLE_DMA(hjpeg, mask);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	631a      	str	r2, [r3, #48]	; 0x30
 8004e96:	e02b      	b.n	8004ef0 <HAL_JPEG_Resume+0x170>

  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e9c:	f003 030c 	and.w	r3, r3, #12
 8004ea0:	2b08      	cmp	r3, #8
 8004ea2:	d125      	bne.n	8004ef0 <HAL_JPEG_Resume+0x170>
  {
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f003 0301 	and.w	r3, r3, #1
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <HAL_JPEG_Resume+0x142>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f043 0306 	orr.w	r3, r3, #6
 8004ec0:	60fb      	str	r3, [r7, #12]
    }
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <HAL_JPEG_Resume+0x160>
    {
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	655a      	str	r2, [r3, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004ede:	60fb      	str	r3, [r7, #12]
    }
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Nothing to do */
  }

  /* Return function status */
  return HAL_OK;
 8004ef0:	2300      	movs	r3, #0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3710      	adds	r7, #16
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <HAL_JPEG_ConfigInputBuffer>:
  * @param  pNewInputBuffer Pointer to the new input data buffer
  * @param  InDataLength Size in bytes of the new Input data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigInputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewInputBuffer, uint32_t InDataLength)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	619a      	str	r2, [r3, #24]
  hjpeg->InDataLength = InDataLength;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <HAL_JPEG_ConfigOutputBuffer>:
  * @param  pNewOutputBuffer Pointer to the new output data buffer
  * @param  OutDataLength Size in bytes of the new Output data buffer
  * @retval HAL status
  */
void HAL_JPEG_ConfigOutputBuffer(JPEG_HandleTypeDef *hjpeg, uint8_t *pNewOutputBuffer, uint32_t OutDataLength)
{
 8004f1e:	b480      	push	{r7}
 8004f20:	b085      	sub	sp, #20
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	60f8      	str	r0, [r7, #12]
 8004f26:	60b9      	str	r1, [r7, #8]
 8004f28:	607a      	str	r2, [r7, #4]
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	61da      	str	r2, [r3, #28]
  hjpeg->OutDataLength = OutDataLength;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004f36:	bf00      	nop
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_JPEG_EncodeCpltCallback>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(hjpeg);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_JPEG_EncodeCpltCallback could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_JPEG_GetState>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG state
  */
HAL_JPEG_STATETypeDef HAL_JPEG_GetState(JPEG_HandleTypeDef *hjpeg)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  return hjpeg->State;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8004f64:	b2db      	uxtb	r3, r3
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_JPEG_GetError>:
  * @param  hjpeg  pointer to a JPEG_HandleTypeDef structure that contains
  *              the configuration information for the specified JPEG.
  * @retval JPEG Error Code
  */
uint32_t HAL_JPEG_GetError(JPEG_HandleTypeDef *hjpeg)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  return hjpeg->ErrorCode;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr

08004f8a <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	b08b      	sub	sp, #44	; 0x2c
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	607a      	str	r2, [r7, #4]
 8004f96:	603b      	str	r3, [r7, #0]
  uint32_t l;
  uint32_t code;
  uint32_t si;

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	623b      	str	r3, [r7, #32]
  for (l = 0; l < 16UL; l++)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	61fb      	str	r3, [r7, #28]
 8004fa0:	e020      	b.n	8004fe4 <JPEG_Bits_To_SizeCodes+0x5a>
  {
    i = (uint32_t)Bits[l];
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	627b      	str	r3, [r7, #36]	; 0x24
    if ((p + i) > 256UL)
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fb6:	d90f      	bls.n	8004fd8 <JPEG_Bits_To_SizeCodes+0x4e>
    {
      /* check for table overflow */
      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e055      	b.n	8005068 <JPEG_Bits_To_SizeCodes+0xde>
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	68b9      	ldr	r1, [r7, #8]
 8004fc2:	6a3b      	ldr	r3, [r7, #32]
 8004fc4:	440b      	add	r3, r1
 8004fc6:	3201      	adds	r2, #1
 8004fc8:	b2d2      	uxtb	r2, r2
 8004fca:	701a      	strb	r2, [r3, #0]
      p++;
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	3301      	adds	r3, #1
 8004fd0:	623b      	str	r3, [r7, #32]
      i--;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
    while (i != 0UL)
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1ee      	bne.n	8004fbc <JPEG_Bits_To_SizeCodes+0x32>
  for (l = 0; l < 16UL; l++)
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	61fb      	str	r3, [r7, #28]
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	2b0f      	cmp	r3, #15
 8004fe8:	d9db      	bls.n	8004fa2 <JPEG_Bits_To_SizeCodes+0x18>
    }
  }
  Huffsize[p] = 0;
 8004fea:	68ba      	ldr	r2, [r7, #8]
 8004fec:	6a3b      	ldr	r3, [r7, #32]
 8004fee:	4413      	add	r3, r2
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
  *LastK = p;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	6a3a      	ldr	r2, [r7, #32]
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	61bb      	str	r3, [r7, #24]
  si = Huffsize[0];
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	617b      	str	r3, [r7, #20]
  p = 0;
 8005004:	2300      	movs	r3, #0
 8005006:	623b      	str	r3, [r7, #32]
  while (Huffsize[p] != 0U)
 8005008:	e027      	b.n	800505a <JPEG_Bits_To_SizeCodes+0xd0>
  {
    while (((uint32_t) Huffsize[p]) == si)
    {
      Huffcode[p] = code;
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	69ba      	ldr	r2, [r7, #24]
 8005014:	601a      	str	r2, [r3, #0]
      p++;
 8005016:	6a3b      	ldr	r3, [r7, #32]
 8005018:	3301      	adds	r3, #1
 800501a:	623b      	str	r3, [r7, #32]
      code++;
 800501c:	69bb      	ldr	r3, [r7, #24]
 800501e:	3301      	adds	r3, #1
 8005020:	61bb      	str	r3, [r7, #24]
    while (((uint32_t) Huffsize[p]) == si)
 8005022:	68ba      	ldr	r2, [r7, #8]
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	4413      	add	r3, r2
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	461a      	mov	r2, r3
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	4293      	cmp	r3, r2
 8005030:	d0eb      	beq.n	800500a <JPEG_Bits_To_SizeCodes+0x80>
    }
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b1f      	cmp	r3, #31
 8005036:	d901      	bls.n	800503c <JPEG_Bits_To_SizeCodes+0xb2>
    {
      return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e015      	b.n	8005068 <JPEG_Bits_To_SizeCodes+0xde>
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800503c:	2201      	movs	r2, #1
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	429a      	cmp	r2, r3
 8005048:	d301      	bcc.n	800504e <JPEG_Bits_To_SizeCodes+0xc4>
    {
      return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e00c      	b.n	8005068 <JPEG_Bits_To_SizeCodes+0xde>
    }
    code <<= 1;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	005b      	lsls	r3, r3, #1
 8005052:	61bb      	str	r3, [r7, #24]
    si++;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	3301      	adds	r3, #1
 8005058:	617b      	str	r3, [r7, #20]
  while (Huffsize[p] != 0U)
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	6a3b      	ldr	r3, [r7, #32]
 800505e:	4413      	add	r3, r2
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1dd      	bne.n	8005022 <JPEG_Bits_To_SizeCodes+0x98>
  }
  /* Return function status */
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	372c      	adds	r7, #44	; 0x2c
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <JPEG_ACHuff_BitsVals_To_SizeCodes>:
  * @param  AC_SizeCodesTable pointer to AC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_ACHuff_BitsVals_To_SizeCodes(JPEG_ACHuffTableTypeDef *AC_BitsValsTable,
                                                           JPEG_AC_HuffCodeTableTypeDef *AC_SizeCodesTable)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 800507a:	af00      	add	r7, sp, #0
 800507c:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005080:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8005084:	6018      	str	r0, [r3, #0]
 8005086:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800508a:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 800508e:	6019      	str	r1, [r3, #0]
  uint32_t huffcode[257];
  uint32_t k;
  uint32_t l, lsb, msb;
  uint32_t lastK;

  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8005090:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005094:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	f107 0308 	add.w	r3, r7, #8
 800509e:	f107 020c 	add.w	r2, r7, #12
 80050a2:	f507 6182 	add.w	r1, r7, #1040	; 0x410
 80050a6:	f7ff ff70 	bl	8004f8a <JPEG_Bits_To_SizeCodes>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
  if (error != HAL_OK)
 80050b0:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d002      	beq.n	80050be <JPEG_ACHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80050b8:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 80050bc:	e075      	b.n	80051aa <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
  }

  /* Figure C.3: Ordering procedure for encoding procedure code tables */
  k = 0;
 80050be:	2300      	movs	r3, #0
 80050c0:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

  while (k < lastK)
 80050c4:	e067      	b.n	8005196 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x122>
  {
    l = AC_BitsValsTable->HuffVal[k];
 80050c6:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 80050ca:	f2a3 5324 	subw	r3, r3, #1316	; 0x524
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80050d4:	4413      	add	r3, r2
 80050d6:	3310      	adds	r3, #16
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    if (l == 0UL)
 80050de:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d103      	bne.n	80050ee <JPEG_ACHuff_BitsVals_To_SizeCodes+0x7a>
    {
      l = 160; /*l = 0x00 EOB code*/
 80050e6:	23a0      	movs	r3, #160	; 0xa0
 80050e8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80050ec:	e021      	b.n	8005132 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80050ee:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80050f2:	2bf0      	cmp	r3, #240	; 0xf0
 80050f4:	d103      	bne.n	80050fe <JPEG_ACHuff_BitsVals_To_SizeCodes+0x8a>
    {
      l = 161;
 80050f6:	23a1      	movs	r3, #161	; 0xa1
 80050f8:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 80050fc:	e019      	b.n	8005132 <JPEG_ACHuff_BitsVals_To_SizeCodes+0xbe>
    }
    else
    {
      msb = (l & 0xF0UL) >> 4;
 80050fe:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005102:	091b      	lsrs	r3, r3, #4
 8005104:	f003 030f 	and.w	r3, r3, #15
 8005108:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
      lsb = (l & 0x0FUL);
 800510c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
      l = (msb * 10UL) + lsb - 1UL;
 8005118:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	461a      	mov	r2, r3
 8005126:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800512a:	4413      	add	r3, r2
 800512c:	3b01      	subs	r3, #1
 800512e:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
    }
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8005132:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005136:	2ba1      	cmp	r3, #161	; 0xa1
 8005138:	d901      	bls.n	800513e <JPEG_ACHuff_BitsVals_To_SizeCodes+0xca>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 800513a:	2301      	movs	r3, #1
 800513c:	e035      	b.n	80051aa <JPEG_ACHuff_BitsVals_To_SizeCodes+0x136>
    }
    else
    {
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800513e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005142:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 8005146:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 800514a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800514e:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005152:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8005156:	6819      	ldr	r1, [r3, #0]
 8005158:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800515c:	3328      	adds	r3, #40	; 0x28
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	440b      	add	r3, r1
 8005162:	605a      	str	r2, [r3, #4]
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005164:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8005168:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800516c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005170:	4413      	add	r3, r2
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	3b01      	subs	r3, #1
 8005176:	b2d9      	uxtb	r1, r3
 8005178:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800517c:	f5a3 63a5 	sub.w	r3, r3, #1320	; 0x528
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8005186:	4413      	add	r3, r2
 8005188:	460a      	mov	r2, r1
 800518a:	701a      	strb	r2, [r3, #0]
      k++;
 800518c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8005190:	3301      	adds	r3, #1
 8005192:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  while (k < lastK)
 8005196:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 800519a:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d38e      	bcc.n	80050c6 <JPEG_ACHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	f5ad 6da4 	sub.w	sp, sp, #1312	; 0x520
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80051c0:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80051c4:	6018      	str	r0, [r3, #0]
 80051c6:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80051ca:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 80051ce:	6019      	str	r1, [r3, #0]
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80051d0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80051d4:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80051de:	f107 0208 	add.w	r2, r7, #8
 80051e2:	f207 410c 	addw	r1, r7, #1036	; 0x40c
 80051e6:	f7ff fed0 	bl	8004f8a <JPEG_Bits_To_SizeCodes>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f887 351b 	strb.w	r3, [r7, #1307]	; 0x51b
  if (error != HAL_OK)
 80051f0:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
  {
    return  error;
 80051f8:	f897 351b 	ldrb.w	r3, [r7, #1307]	; 0x51b
 80051fc:	e048      	b.n	8005290 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;
 80051fe:	2300      	movs	r3, #0
 8005200:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c

  while (k < lastK)
 8005204:	e03d      	b.n	8005282 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xce>
  {
    l = DC_BitsValsTable->HuffVal[k];
 8005206:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800520a:	f2a3 531c 	subw	r3, r3, #1308	; 0x51c
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8005214:	4413      	add	r3, r2
 8005216:	3310      	adds	r3, #16
 8005218:	781b      	ldrb	r3, [r3, #0]
 800521a:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 800521e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005222:	2b0b      	cmp	r3, #11
 8005224:	d901      	bls.n	800522a <JPEG_DCHuff_BitsVals_To_SizeCodes+0x76>
    {
      return HAL_ERROR; /* Huffman Table overflow error*/
 8005226:	2301      	movs	r3, #1
 8005228:	e032      	b.n	8005290 <JPEG_DCHuff_BitsVals_To_SizeCodes+0xdc>
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800522a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800522e:	f5a3 63a3 	sub.w	r3, r3, #1304	; 0x518
 8005232:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 8005236:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800523a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 800523e:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 8005242:	6819      	ldr	r1, [r3, #0]
 8005244:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005248:	3302      	adds	r3, #2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	605a      	str	r2, [r3, #4]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8005250:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005254:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8005258:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800525c:	4413      	add	r3, r2
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	3b01      	subs	r3, #1
 8005262:	b2d9      	uxtb	r1, r3
 8005264:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005268:	f5a3 63a4 	sub.w	r3, r3, #1312	; 0x520
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8005272:	4413      	add	r3, r2
 8005274:	460a      	mov	r2, r1
 8005276:	701a      	strb	r2, [r3, #0]
      k++;
 8005278:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800527c:	3301      	adds	r3, #1
 800527e:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
  while (k < lastK)
 8005282:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8005286:	f8d7 251c 	ldr.w	r2, [r7, #1308]	; 0x51c
 800528a:	429a      	cmp	r2, r3
 800528c:	d3bb      	bcc.n	8005206 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x52>
    }
  }

  /* Return function status */
  return HAL_OK;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	f507 67a4 	add.w	r7, r7, #1312	; 0x520
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b09a      	sub	sp, #104	; 0x68
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d106      	bne.n	80052c2 <JPEG_Set_HuffDC_Mem+0x28>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
 80052bc:	3318      	adds	r3, #24
 80052be:	663b      	str	r3, [r7, #96]	; 0x60
 80052c0:	e00f      	b.n	80052e2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d106      	bne.n	80052de <JPEG_Set_HuffDC_Mem+0x44>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80052d8:	3318      	adds	r3, #24
 80052da:	663b      	str	r3, [r7, #96]	; 0x60
 80052dc:	e001      	b.n	80052e2 <JPEG_Set_HuffDC_Mem+0x48>
  }
  else
  {
    return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e059      	b.n	8005396 <JPEG_Set_HuffDC_Mem+0xfc>
  }

  if (HuffTableDC != NULL)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d055      	beq.n	8005394 <JPEG_Set_HuffDC_Mem+0xfa>
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80052e8:	f107 0314 	add.w	r3, r7, #20
 80052ec:	4619      	mov	r1, r3
 80052ee:	68b8      	ldr	r0, [r7, #8]
 80052f0:	f7ff ff60 	bl	80051b4 <JPEG_DCHuff_BitsVals_To_SizeCodes>
 80052f4:	4603      	mov	r3, r0
 80052f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    if (error != HAL_OK)
 80052fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <JPEG_Set_HuffDC_Mem+0x6e>
    {
      return  error;
 8005302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005306:	e046      	b.n	8005396 <JPEG_Set_HuffDC_Mem+0xfc>
    }
    addressDef = address;
 8005308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800530a:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800530c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800530e:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8005312:	601a      	str	r2, [r3, #0]
    addressDef++;
 8005314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005316:	3304      	adds	r3, #4
 8005318:	65bb      	str	r3, [r7, #88]	; 0x58
    *addressDef = 0x0FFF0FFF;
 800531a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800531c:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 8005320:	601a      	str	r2, [r3, #0]

    i = JPEG_DC_HUFF_TABLE_SIZE;
 8005322:	230c      	movs	r3, #12
 8005324:	667b      	str	r3, [r7, #100]	; 0x64
    while (i > 1UL)
 8005326:	e032      	b.n	800538e <JPEG_Set_HuffDC_Mem+0xf4>
    {
      i--;
 8005328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800532a:	3b01      	subs	r3, #1
 800532c:	667b      	str	r3, [r7, #100]	; 0x64
      address --;
 800532e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005330:	3b04      	subs	r3, #4
 8005332:	663b      	str	r3, [r7, #96]	; 0x60
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8005334:	f107 0214 	add.w	r2, r7, #20
 8005338:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800533a:	4413      	add	r3, r2
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	021b      	lsls	r3, r3, #8
 8005340:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005346:	3302      	adds	r3, #2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	3368      	adds	r3, #104	; 0x68
 800534c:	443b      	add	r3, r7
 800534e:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	4313      	orrs	r3, r2
 8005356:	657b      	str	r3, [r7, #84]	; 0x54
                                                                                   0xFFUL);
      i--;
 8005358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800535a:	3b01      	subs	r3, #1
 800535c:	667b      	str	r3, [r7, #100]	; 0x64
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800535e:	f107 0214 	add.w	r2, r7, #20
 8005362:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005364:	4413      	add	r3, r2
 8005366:	781b      	ldrb	r3, [r3, #0]
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800536e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005370:	3302      	adds	r3, #2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	3368      	adds	r3, #104	; 0x68
 8005376:	443b      	add	r3, r7
 8005378:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800537c:	b2db      	uxtb	r3, r3
 800537e:	4313      	orrs	r3, r2
 8005380:	653b      	str	r3, [r7, #80]	; 0x50
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005384:	041a      	lsls	r2, r3, #16
 8005386:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005388:	431a      	orrs	r2, r3
 800538a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800538c:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 800538e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005390:	2b01      	cmp	r3, #1
 8005392:	d8c9      	bhi.n	8005328 <JPEG_Set_HuffDC_Mem+0x8e>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	4618      	mov	r0, r3
 8005398:	3768      	adds	r7, #104	; 0x68
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80053ac:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80053b0:	6018      	str	r0, [r3, #0]
 80053b2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80053b6:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 80053ba:	6019      	str	r1, [r3, #0]
 80053bc:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80053c0:	f5a3 7355 	sub.w	r3, r3, #852	; 0x354
 80053c4:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80053c6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80053ca:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053d6:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80053da:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d10c      	bne.n	80053fe <JPEG_Set_HuffAC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80053e4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80053e8:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80053f8:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 80053fc:	e01d      	b.n	800543a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80053fe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005402:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800540e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8005412:	f5a2 7255 	sub.w	r2, r2, #852	; 0x354
 8005416:	6812      	ldr	r2, [r2, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d10c      	bne.n	8005436 <JPEG_Set_HuffAC_Mem+0x96>
  {
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800541c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005420:	f5a3 7353 	sub.w	r3, r3, #844	; 0x34c
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
 800542c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8005430:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
 8005434:	e001      	b.n	800543a <JPEG_Set_HuffAC_Mem+0x9a>
  }
  else
  {
    return HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	e0a8      	b.n	800558c <JPEG_Set_HuffAC_Mem+0x1ec>
  }

  if (HuffTableAC != NULL)
 800543a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800543e:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 80a0 	beq.w	800558a <JPEG_Set_HuffAC_Mem+0x1ea>
  {
    error = JPEG_ACHuff_BitsVals_To_SizeCodes(HuffTableAC, &acSizeCodesTable);
 800544a:	f107 0214 	add.w	r2, r7, #20
 800544e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005452:	f5a3 7354 	sub.w	r3, r3, #848	; 0x350
 8005456:	4611      	mov	r1, r2
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	f7ff fe0b 	bl	8005074 <JPEG_ACHuff_BitsVals_To_SizeCodes>
 800545e:	4603      	mov	r3, r0
 8005460:	f887 334b 	strb.w	r3, [r7, #843]	; 0x34b
    if (error != HAL_OK)
 8005464:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005468:	2b00      	cmp	r3, #0
 800546a:	d002      	beq.n	8005472 <JPEG_Set_HuffAC_Mem+0xd2>
    {
      return  error;
 800546c:	f897 334b 	ldrb.w	r3, [r7, #843]	; 0x34b
 8005470:	e08c      	b.n	800558c <JPEG_Set_HuffAC_Mem+0x1ec>
    }
    /* Default values settings: 162:167 FFFh , 168:175 FD0h_FD7h */
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
 8005472:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005476:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 800547a:	2300      	movs	r3, #0
 800547c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8005480:	e00e      	b.n	80054a0 <JPEG_Set_HuffAC_Mem+0x100>
    {
      *addressDef = 0x0FFF0FFF;
 8005482:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005486:	f06f 22f0 	mvn.w	r2, #4026593280	; 0xf000f000
 800548a:	601a      	str	r2, [r3, #0]
      addressDef++;
 800548c:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8005490:	3304      	adds	r3, #4
 8005492:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    for (i = 0; i < 3UL; i++)
 8005496:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800549a:	3301      	adds	r3, #1
 800549c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 80054a0:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d9ec      	bls.n	8005482 <JPEG_Set_HuffAC_Mem+0xe2>
    }
    *addressDef = 0x0FD10FD0;
 80054a8:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80054ac:	4a3a      	ldr	r2, [pc, #232]	; (8005598 <JPEG_Set_HuffAC_Mem+0x1f8>)
 80054ae:	601a      	str	r2, [r3, #0]
    addressDef++;
 80054b0:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80054b4:	3304      	adds	r3, #4
 80054b6:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD30FD2;
 80054ba:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80054be:	4a37      	ldr	r2, [pc, #220]	; (800559c <JPEG_Set_HuffAC_Mem+0x1fc>)
 80054c0:	601a      	str	r2, [r3, #0]
    addressDef++;
 80054c2:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80054c6:	3304      	adds	r3, #4
 80054c8:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD50FD4;
 80054cc:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80054d0:	4a33      	ldr	r2, [pc, #204]	; (80055a0 <JPEG_Set_HuffAC_Mem+0x200>)
 80054d2:	601a      	str	r2, [r3, #0]
    addressDef++;
 80054d4:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80054d8:	3304      	adds	r3, #4
 80054da:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
    *addressDef = 0x0FD70FD6;
 80054de:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 80054e2:	4a30      	ldr	r2, [pc, #192]	; (80055a4 <JPEG_Set_HuffAC_Mem+0x204>)
 80054e4:	601a      	str	r2, [r3, #0]
    /* end of Locations 162:175  */


    i = JPEG_AC_HUFF_TABLE_SIZE;
 80054e6:	23a2      	movs	r3, #162	; 0xa2
 80054e8:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
    while (i > 1UL)
 80054ec:	e049      	b.n	8005582 <JPEG_Set_HuffAC_Mem+0x1e2>
    {
      i--;
 80054ee:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80054f2:	3b01      	subs	r3, #1
 80054f4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      address--;
 80054f8:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80054fc:	3b04      	subs	r3, #4
 80054fe:	f8c7 3350 	str.w	r3, [r7, #848]	; 0x350
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8005502:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005506:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 800550a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800550e:	4413      	add	r3, r2
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005518:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800551c:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 8005520:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005524:	3328      	adds	r3, #40	; 0x28
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	b2db      	uxtb	r3, r3
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
                                                                                   0xFFUL);
      i--;
 8005534:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005538:	3b01      	subs	r3, #1
 800553a:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800553e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005542:	f5a3 7251 	sub.w	r2, r3, #836	; 0x344
 8005546:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800554a:	4413      	add	r3, r2
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	021b      	lsls	r3, r3, #8
 8005550:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8005554:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005558:	f5a3 7151 	sub.w	r1, r3, #836	; 0x344
 800555c:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005560:	3328      	adds	r3, #40	; 0x28
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	b2db      	uxtb	r3, r3
 800556a:	4313      	orrs	r3, r2
 800556c:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8005570:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8005574:	041a      	lsls	r2, r3, #16
 8005576:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 800557a:	431a      	orrs	r2, r3
 800557c:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8005580:	601a      	str	r2, [r3, #0]
    while (i > 1UL)
 8005582:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8005586:	2b01      	cmp	r3, #1
 8005588:	d8b1      	bhi.n	80054ee <JPEG_Set_HuffAC_Mem+0x14e>
    }
  }

  /* Return function status */
  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	0fd10fd0 	.word	0x0fd10fd0
 800559c:	0fd30fd2 	.word	0x0fd30fd2
 80055a0:	0fd50fd4 	.word	0x0fd50fd4
 80055a4:	0fd70fd6 	.word	0x0fd70fd6

080055a8 <JPEG_Set_HuffEnc_Mem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static HAL_StatusTypeDef JPEG_Set_HuffEnc_Mem(JPEG_HandleTypeDef *hjpeg)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef error;

  JPEG_Set_Huff_DHTMem(hjpeg);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f000 f84d 	bl	8005650 <JPEG_Set_Huff_DHTMem>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC0));
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80055be:	461a      	mov	r2, r3
 80055c0:	491f      	ldr	r1, [pc, #124]	; (8005640 <JPEG_Set_HuffEnc_Mem+0x98>)
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff feec 	bl	80053a0 <JPEG_Set_HuffAC_Mem>
 80055c8:	4603      	mov	r3, r0
 80055ca:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <JPEG_Set_HuffEnc_Mem+0x2e>
  {
    return  error;
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	e030      	b.n	8005638 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
                              (hjpeg->Instance->HUFFENC_AC1));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f503 63cc 	add.w	r3, r3, #1632	; 0x660
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80055de:	461a      	mov	r2, r3
 80055e0:	4918      	ldr	r1, [pc, #96]	; (8005644 <JPEG_Set_HuffEnc_Mem+0x9c>)
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7ff fedc 	bl	80053a0 <JPEG_Set_HuffAC_Mem>
 80055e8:	4603      	mov	r3, r0
 80055ea:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d001      	beq.n	80055f6 <JPEG_Set_HuffEnc_Mem+0x4e>
  {
    return  error;
 80055f2:	7bfb      	ldrb	r3, [r7, #15]
 80055f4:	e020      	b.n	8005638 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC0);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80055fe:	461a      	mov	r2, r3
 8005600:	4911      	ldr	r1, [pc, #68]	; (8005648 <JPEG_Set_HuffEnc_Mem+0xa0>)
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f7ff fe49 	bl	800529a <JPEG_Set_HuffDC_Mem>
 8005608:	4603      	mov	r3, r0
 800560a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <JPEG_Set_HuffEnc_Mem+0x6e>
  {
    return  error;
 8005612:	7bfb      	ldrb	r3, [r7, #15]
 8005614:	e010      	b.n	8005638 <JPEG_Set_HuffEnc_Mem+0x90>
  }

  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
                              hjpeg->Instance->HUFFENC_DC1);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 800561e:	461a      	mov	r2, r3
 8005620:	490a      	ldr	r1, [pc, #40]	; (800564c <JPEG_Set_HuffEnc_Mem+0xa4>)
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fe39 	bl	800529a <JPEG_Set_HuffDC_Mem>
 8005628:	4603      	mov	r3, r0
 800562a:	73fb      	strb	r3, [r7, #15]
  if (error != HAL_OK)
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <JPEG_Set_HuffEnc_Mem+0x8e>
  {
    return  error;
 8005632:	7bfb      	ldrb	r3, [r7, #15]
 8005634:	e000      	b.n	8005638 <JPEG_Set_HuffEnc_Mem+0x90>
  }
  /* Return function status */
  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	0802f51c 	.word	0x0802f51c
 8005644:	0802f5d0 	.word	0x0802f5d0
 8005648:	0802f4e4 	.word	0x0802f4e4
 800564c:	0802f500 	.word	0x0802f500

08005650 <JPEG_Set_Huff_DHTMem>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Set_Huff_DHTMem(JPEG_HandleTypeDef *hjpeg)
{
 8005650:	b480      	push	{r7}
 8005652:	b08b      	sub	sp, #44	; 0x2c
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  JPEG_ACHuffTableTypeDef *HuffTableAC0 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable;
 8005658:	4b80      	ldr	r3, [pc, #512]	; (800585c <JPEG_Set_Huff_DHTMem+0x20c>)
 800565a:	61fb      	str	r3, [r7, #28]
  JPEG_ACHuffTableTypeDef *HuffTableAC1 = (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable;
 800565c:	4b80      	ldr	r3, [pc, #512]	; (8005860 <JPEG_Set_Huff_DHTMem+0x210>)
 800565e:	61bb      	str	r3, [r7, #24]
  JPEG_DCHuffTableTypeDef *HuffTableDC0 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable;
 8005660:	4b80      	ldr	r3, [pc, #512]	; (8005864 <JPEG_Set_Huff_DHTMem+0x214>)
 8005662:	617b      	str	r3, [r7, #20]
  JPEG_DCHuffTableTypeDef *HuffTableDC1 = (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable;
 8005664:	4b80      	ldr	r3, [pc, #512]	; (8005868 <JPEG_Set_Huff_DHTMem+0x218>)
 8005666:	613b      	str	r3, [r7, #16]
  uint32_t value, index;
  __IO uint32_t *address;

  /* DC0 Huffman Table : BITS*/
  /* DC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address to DHTMEM + 3*/
  address = (hjpeg->Instance->DHTMEM + 3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005670:	330c      	adds	r3, #12
 8005672:	623b      	str	r3, [r7, #32]
  index = 16;
 8005674:	2310      	movs	r3, #16
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005678:	e01d      	b.n	80056b6 <JPEG_Set_Huff_DHTMem+0x66>
  {

    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	3b01      	subs	r3, #1
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	5cd3      	ldrb	r3, [r2, r3]
 8005682:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	3b02      	subs	r3, #2
 8005688:	6979      	ldr	r1, [r7, #20]
 800568a:	5ccb      	ldrb	r3, [r1, r3]
 800568c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800568e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005692:	3b03      	subs	r3, #3
 8005694:	6979      	ldr	r1, [r7, #20]
 8005696:	5ccb      	ldrb	r3, [r1, r3]
 8005698:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800569a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800569c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800569e:	3a04      	subs	r2, #4
 80056a0:	6979      	ldr	r1, [r7, #20]
 80056a2:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80056a4:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	601a      	str	r2, [r3, #0]
    address--;
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	3b04      	subs	r3, #4
 80056ae:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	3b04      	subs	r3, #4
 80056b4:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80056b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b8:	2b03      	cmp	r3, #3
 80056ba:	d8de      	bhi.n	800567a <JPEG_Set_Huff_DHTMem+0x2a>

  }
  /* DC0 Huffman Table : Val*/
  /* DC0 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +4 to DHTMEM + 6 */
  address = (hjpeg->Instance->DHTMEM + 6);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80056c4:	3318      	adds	r3, #24
 80056c6:	623b      	str	r3, [r7, #32]
  index = 12;
 80056c8:	230c      	movs	r3, #12
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80056cc:	e021      	b.n	8005712 <JPEG_Set_Huff_DHTMem+0xc2>
  {
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	3b01      	subs	r3, #1
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	4413      	add	r3, r2
 80056d6:	7c1b      	ldrb	r3, [r3, #16]
 80056d8:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	3b02      	subs	r3, #2
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	440b      	add	r3, r1
 80056e2:	7c1b      	ldrb	r3, [r3, #16]
 80056e4:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80056e6:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	3b03      	subs	r3, #3
 80056ec:	6979      	ldr	r1, [r7, #20]
 80056ee:	440b      	add	r3, r1
 80056f0:	7c1b      	ldrb	r3, [r3, #16]
 80056f2:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80056f4:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC0->HuffVal[index - 4UL] & 0xFFUL);
 80056f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f8:	3a04      	subs	r2, #4
 80056fa:	6979      	ldr	r1, [r7, #20]
 80056fc:	440a      	add	r2, r1
 80056fe:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8005700:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8005702:	6a3b      	ldr	r3, [r7, #32]
 8005704:	601a      	str	r2, [r3, #0]
    address--;
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	3b04      	subs	r3, #4
 800570a:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	3b04      	subs	r3, #4
 8005710:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	2b03      	cmp	r3, #3
 8005716:	d8da      	bhi.n	80056ce <JPEG_Set_Huff_DHTMem+0x7e>
  }

  /* AC0 Huffman Table : BITS*/
  /* AC0 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 7 to DHTMEM + 10*/
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005720:	3328      	adds	r3, #40	; 0x28
 8005722:	623b      	str	r3, [r7, #32]
  index = 16;
 8005724:	2310      	movs	r3, #16
 8005726:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005728:	e01d      	b.n	8005766 <JPEG_Set_Huff_DHTMem+0x116>
  {

    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	3b01      	subs	r3, #1
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	5cd3      	ldrb	r3, [r2, r3]
 8005732:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	3b02      	subs	r3, #2
 8005738:	69f9      	ldr	r1, [r7, #28]
 800573a:	5ccb      	ldrb	r3, [r1, r3]
 800573c:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800573e:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005742:	3b03      	subs	r3, #3
 8005744:	69f9      	ldr	r1, [r7, #28]
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800574a:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 800574c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574e:	3a04      	subs	r2, #4
 8005750:	69f9      	ldr	r1, [r7, #28]
 8005752:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8005754:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	601a      	str	r2, [r3, #0]
    address--;
 800575a:	6a3b      	ldr	r3, [r7, #32]
 800575c:	3b04      	subs	r3, #4
 800575e:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	3b04      	subs	r3, #4
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	2b03      	cmp	r3, #3
 800576a:	d8de      	bhi.n	800572a <JPEG_Set_Huff_DHTMem+0xda>

  }
  /* AC0 Huffman Table : Val*/
  /* AC0 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 11 to DHTMEM + 51 */
  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 51) belong to AC0 VALS table */
  address = (hjpeg->Instance->DHTMEM + 51);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005774:	33cc      	adds	r3, #204	; 0xcc
 8005776:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	4b3b      	ldr	r3, [pc, #236]	; (800586c <JPEG_Set_Huff_DHTMem+0x21c>)
 800577e:	4013      	ands	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8005788:	021a      	lsls	r2, r3, #8
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	4313      	orrs	r3, r2
 800578e:	69fa      	ldr	r2, [r7, #28]
 8005790:	f892 20b0 	ldrb.w	r2, [r2, #176]	; 0xb0
 8005794:	4313      	orrs	r3, r2
 8005796:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005798:	6a3b      	ldr	r3, [r7, #32]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC0 huffman values */
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 800579e:	6a3b      	ldr	r3, [r7, #32]
 80057a0:	3b04      	subs	r3, #4
 80057a2:	623b      	str	r3, [r7, #32]
  index = 160;
 80057a4:	23a0      	movs	r3, #160	; 0xa0
 80057a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80057a8:	e021      	b.n	80057ee <JPEG_Set_Huff_DHTMem+0x19e>
  {
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	3b01      	subs	r3, #1
 80057ae:	69fa      	ldr	r2, [r7, #28]
 80057b0:	4413      	add	r3, r2
 80057b2:	7c1b      	ldrb	r3, [r3, #16]
 80057b4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	3b02      	subs	r3, #2
 80057ba:	69f9      	ldr	r1, [r7, #28]
 80057bc:	440b      	add	r3, r1
 80057be:	7c1b      	ldrb	r3, [r3, #16]
 80057c0:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80057c2:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	3b03      	subs	r3, #3
 80057c8:	69f9      	ldr	r1, [r7, #28]
 80057ca:	440b      	add	r3, r1
 80057cc:	7c1b      	ldrb	r3, [r3, #16]
 80057ce:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80057d0:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80057d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d4:	3a04      	subs	r2, #4
 80057d6:	69f9      	ldr	r1, [r7, #28]
 80057d8:	440a      	add	r2, r1
 80057da:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80057dc:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	601a      	str	r2, [r3, #0]
    address--;
 80057e2:	6a3b      	ldr	r3, [r7, #32]
 80057e4:	3b04      	subs	r3, #4
 80057e6:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	3b04      	subs	r3, #4
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	2b03      	cmp	r3, #3
 80057f2:	d8da      	bhi.n	80057aa <JPEG_Set_Huff_DHTMem+0x15a>
  }

  /* DC1 Huffman Table : BITS*/
  /* DC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM + 51 base address to DHTMEM + 55*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 51) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 51);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80057fc:	33cc      	adds	r3, #204	; 0xcc
 80057fe:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	b29b      	uxth	r3, r3
 8005806:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	061a      	lsls	r2, r3, #24
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	431a      	orrs	r2, r3
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	041b      	lsls	r3, r3, #16
 8005818:	4313      	orrs	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 55) belong to DC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 55);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800582a:	33dc      	adds	r3, #220	; 0xdc
 800582c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	4b0e      	ldr	r3, [pc, #56]	; (800586c <JPEG_Set_Huff_DHTMem+0x21c>)
 8005834:	4013      	ands	r3, r2
 8005836:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->Bits[14] & 0xFFUL);
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	7bdb      	ldrb	r3, [r3, #15]
 800583c:	021a      	lsls	r2, r3, #8
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4313      	orrs	r3, r2
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	7b92      	ldrb	r2, [r2, #14]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
  *address = value;
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	601a      	str	r2, [r3, #0]

  /*continue setting 12 DC1 huffman Bits from DHTMEM + 54 down to DHTMEM + 52*/
  address--;
 8005850:	6a3b      	ldr	r3, [r7, #32]
 8005852:	3b04      	subs	r3, #4
 8005854:	623b      	str	r3, [r7, #32]
  index = 12;
 8005856:	230c      	movs	r3, #12
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800585a:	e027      	b.n	80058ac <JPEG_Set_Huff_DHTMem+0x25c>
 800585c:	0802f51c 	.word	0x0802f51c
 8005860:	0802f5d0 	.word	0x0802f5d0
 8005864:	0802f4e4 	.word	0x0802f4e4
 8005868:	0802f500 	.word	0x0802f500
 800586c:	ffff0000 	.word	0xffff0000
  {

    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	3301      	adds	r3, #1
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	5cd3      	ldrb	r3, [r2, r3]
 8005878:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 800587a:	6939      	ldr	r1, [r7, #16]
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	440b      	add	r3, r1
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8005884:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 8005886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005888:	3b01      	subs	r3, #1
 800588a:	6939      	ldr	r1, [r7, #16]
 800588c:	5ccb      	ldrb	r3, [r1, r3]
 800588e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->Bits[index] & 0xFFUL) << 16) |
 8005890:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->Bits[index - 2UL] & 0xFFUL);
 8005892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005894:	3a02      	subs	r2, #2
 8005896:	6939      	ldr	r1, [r7, #16]
 8005898:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableDC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 800589a:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	601a      	str	r2, [r3, #0]
    address--;
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	3b04      	subs	r3, #4
 80058a4:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	3b04      	subs	r3, #4
 80058aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80058ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d8de      	bhi.n	8005870 <JPEG_Set_Huff_DHTMem+0x220>

  }
  /* DC1 Huffman Table : Val*/
  /* DC1 VALS is a 12 Bytes table i.e 3x32bits words from DHTMEM base address +55 to DHTMEM + 58 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 55) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 55);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80058ba:	33dc      	adds	r3, #220	; 0xdc
 80058bc:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	7c5b      	ldrb	r3, [r3, #17]
 80058ca:	061a      	lsls	r2, r3, #24
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	7c1b      	ldrb	r3, [r3, #16]
 80058d4:	041b      	lsls	r3, r3, #16
 80058d6:	4313      	orrs	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 80058da:	6a3b      	ldr	r3, [r7, #32]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 58) belong to DC1 Val table */
  address = (hjpeg->Instance->DHTMEM + 58);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f503 7358 	add.w	r3, r3, #864	; 0x360
 80058e8:	33e8      	adds	r3, #232	; 0xe8
 80058ea:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000UL;
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	4b6d      	ldr	r3, [pc, #436]	; (8005aa8 <JPEG_Set_Huff_DHTMem+0x458>)
 80058f2:	4013      	ands	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	7edb      	ldrb	r3, [r3, #27]
 80058fa:	021a      	lsls	r2, r3, #8
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	7e92      	ldrb	r2, [r2, #26]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  *address = value;
 8005908:	6a3b      	ldr	r3, [r7, #32]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	601a      	str	r2, [r3, #0]

  /*continue setting 8 DC1 huffman val from DHTMEM + 57 down to DHTMEM + 56*/
  address--;
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	3b04      	subs	r3, #4
 8005912:	623b      	str	r3, [r7, #32]
  index = 8;
 8005914:	2308      	movs	r3, #8
 8005916:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005918:	e021      	b.n	800595e <JPEG_Set_Huff_DHTMem+0x30e>
  {
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800591a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591c:	3301      	adds	r3, #1
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4413      	add	r3, r2
 8005922:	7c1b      	ldrb	r3, [r3, #16]
 8005924:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005926:	6939      	ldr	r1, [r7, #16]
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	440b      	add	r3, r1
 800592c:	3310      	adds	r3, #16
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005932:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005936:	3b01      	subs	r3, #1
 8005938:	6939      	ldr	r1, [r7, #16]
 800593a:	440b      	add	r3, r1
 800593c:	7c1b      	ldrb	r3, [r3, #16]
 800593e:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableDC1->HuffVal[index] & 0xFFUL) << 16) |
 8005940:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableDC1->HuffVal[index - 2UL] & 0xFFUL);
 8005942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005944:	3a02      	subs	r2, #2
 8005946:	6939      	ldr	r1, [r7, #16]
 8005948:	440a      	add	r2, r1
 800594a:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableDC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800594c:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	601a      	str	r2, [r3, #0]
    address--;
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	3b04      	subs	r3, #4
 8005956:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	3b04      	subs	r3, #4
 800595c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	2b03      	cmp	r3, #3
 8005962:	d8da      	bhi.n	800591a <JPEG_Set_Huff_DHTMem+0x2ca>
  }

  /* AC1 Huffman Table : BITS*/
  /* AC1 BITS is a 16 Bytes table i.e 4x32bits words from DHTMEM base address + 58 to DHTMEM + 62*/
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 58) belong to AC1 Bits table */
  address = (hjpeg->Instance->DHTMEM + 58);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800596c:	33e8      	adds	r3, #232	; 0xe8
 800596e:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFU;
 8005970:	6a3b      	ldr	r3, [r7, #32]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	b29b      	uxth	r3, r3
 8005976:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	061a      	lsls	r2, r3, #24
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	431a      	orrs	r2, r3
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	041b      	lsls	r3, r3, #16
 8005988:	4313      	orrs	r3, r2
 800598a:	60fb      	str	r3, [r7, #12]
  *address = value;
 800598c:	6a3b      	ldr	r3, [r7, #32]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	601a      	str	r2, [r3, #0]

  /* only Byte 0 and Byte 1 of the last word (@ DHTMEM + 62) belong to Bits Val table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800599a:	33f8      	adds	r3, #248	; 0xf8
 800599c:	623b      	str	r3, [r7, #32]
  value = *address & 0xFFFF0000U;
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	4b41      	ldr	r3, [pc, #260]	; (8005aa8 <JPEG_Set_Huff_DHTMem+0x458>)
 80059a4:	4013      	ands	r3, r2
 80059a6:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	7bdb      	ldrb	r3, [r3, #15]
 80059ac:	021a      	lsls	r2, r3, #8
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4313      	orrs	r3, r2
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	7b92      	ldrb	r2, [r2, #14]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	60fb      	str	r3, [r7, #12]
  *address = value;
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	601a      	str	r2, [r3, #0]

  /*continue setting 12 AC1 huffman Bits from DHTMEM + 61 down to DHTMEM + 59*/
  address--;
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	3b04      	subs	r3, #4
 80059c4:	623b      	str	r3, [r7, #32]
  index = 12;
 80059c6:	230c      	movs	r3, #12
 80059c8:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 80059ca:	e01d      	b.n	8005a08 <JPEG_Set_Huff_DHTMem+0x3b8>
  {

    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80059cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ce:	3301      	adds	r3, #1
 80059d0:	69ba      	ldr	r2, [r7, #24]
 80059d2:	5cd3      	ldrb	r3, [r2, r3]
 80059d4:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80059d6:	69b9      	ldr	r1, [r7, #24]
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	440b      	add	r3, r1
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80059e0:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80059e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e4:	3b01      	subs	r3, #1
 80059e6:	69b9      	ldr	r1, [r7, #24]
 80059e8:	5ccb      	ldrb	r3, [r1, r3]
 80059ea:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->Bits[index] & 0xFFUL) << 16) |
 80059ec:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->Bits[index - 2UL] & 0xFFUL);
 80059ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059f0:	3a02      	subs	r2, #2
 80059f2:	69b9      	ldr	r1, [r7, #24]
 80059f4:	5c8a      	ldrb	r2, [r1, r2]
               (((uint32_t)HuffTableAC1->Bits[index - 1UL] & 0xFFUL) << 8) |
 80059f6:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	601a      	str	r2, [r3, #0]
    address--;
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	3b04      	subs	r3, #4
 8005a00:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	3b04      	subs	r3, #4
 8005a06:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d8de      	bhi.n	80059cc <JPEG_Set_Huff_DHTMem+0x37c>

  }
  /* AC1 Huffman Table : Val*/
  /* AC1 VALS is a 162 Bytes table i.e 41x32bits words from DHTMEM base address + 62 to DHTMEM + 102 */
  /* only Byte 2 and Byte 3 of the first word (@ DHTMEM + 62) belong to AC1 VALS table */
  address = (hjpeg->Instance->DHTMEM + 62);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005a16:	33f8      	adds	r3, #248	; 0xf8
 8005a18:	623b      	str	r3, [r7, #32]
  value = *address & 0x0000FFFFUL;
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	60fb      	str	r3, [r7, #12]
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	7c5b      	ldrb	r3, [r3, #17]
 8005a26:	061a      	lsls	r2, r3, #24
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	431a      	orrs	r2, r3
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	7c1b      	ldrb	r3, [r3, #16]
 8005a30:	041b      	lsls	r3, r3, #16
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
                                                                         16);
  *address = value;
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	601a      	str	r2, [r3, #0]

  /*continue setting 160 AC1 huffman values from DHTMEM + 63 to DHTMEM+102 */
  address = (hjpeg->Instance->DHTMEM + 102);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f503 7358 	add.w	r3, r3, #864	; 0x360
 8005a44:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8005a48:	623b      	str	r3, [r7, #32]
  index = 160;
 8005a4a:	23a0      	movs	r3, #160	; 0xa0
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005a4e:	e021      	b.n	8005a94 <JPEG_Set_Huff_DHTMem+0x444>
  {
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a52:	3301      	adds	r3, #1
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	4413      	add	r3, r2
 8005a58:	7c1b      	ldrb	r3, [r3, #16]
 8005a5a:	061a      	lsls	r2, r3, #24
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005a5c:	69b9      	ldr	r1, [r7, #24]
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	440b      	add	r3, r1
 8005a62:	3310      	adds	r3, #16
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005a68:	431a      	orrs	r2, r3
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	69b9      	ldr	r1, [r7, #24]
 8005a70:	440b      	add	r3, r1
 8005a72:	7c1b      	ldrb	r3, [r3, #16]
 8005a74:	021b      	lsls	r3, r3, #8
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8005a76:	4313      	orrs	r3, r2
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8005a78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7a:	3a02      	subs	r2, #2
 8005a7c:	69b9      	ldr	r1, [r7, #24]
 8005a7e:	440a      	add	r2, r1
 8005a80:	7c12      	ldrb	r2, [r2, #16]
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8005a82:	431a      	orrs	r2, r3
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	601a      	str	r2, [r3, #0]
    address--;
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	3b04      	subs	r3, #4
 8005a8c:	623b      	str	r3, [r7, #32]
    index -= 4UL;
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	3b04      	subs	r3, #4
 8005a92:	627b      	str	r3, [r7, #36]	; 0x24
  while (index > 3UL)
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d8da      	bhi.n	8005a50 <JPEG_Set_Huff_DHTMem+0x400>
  }

}
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
 8005a9e:	372c      	adds	r7, #44	; 0x2c
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	ffff0000 	.word	0xffff0000

08005aac <JPEG_Init_Process>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	655a      	str	r2, [r3, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac4:	f003 0303 	and.w	r3, r3, #3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d108      	bne.n	8005ade <JPEG_Init_Process+0x32>
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0208 	orr.w	r2, r2, #8
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	e007      	b.n	8005aee <JPEG_Init_Process+0x42>
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0208 	bic.w	r2, r2, #8
 8005aec:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f022 0201 	bic.w	r2, r2, #1
 8005afc:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable All DMA requests */
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005b1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b3c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005b4c:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f042 0201 	orr.w	r2, r2, #1
 8005b5c:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b62:	f003 030c 	and.w	r3, r3, #12
 8005b66:	2b08      	cmp	r3, #8
 8005b68:	d108      	bne.n	8005b7c <JPEG_Init_Process+0xd0>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
 8005b78:	631a      	str	r2, [r3, #48]	; 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b7a:	e00d      	b.n	8005b98 <JPEG_Init_Process+0xec>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	f003 030c 	and.w	r3, r3, #12
 8005b84:	2b0c      	cmp	r3, #12
 8005b86:	d107      	bne.n	8005b98 <JPEG_Init_Process+0xec>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b082      	sub	sp, #8
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  if ((hjpeg->InDataLength < 4UL) || (hjpeg->OutDataLength < 4UL))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d903      	bls.n	8005bbc <JPEG_DMA_StartProcess+0x18>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	d801      	bhi.n	8005bc0 <JPEG_DMA_StartProcess+0x1c>
  {
    return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e068      	b.n	8005c92 <JPEG_DMA_StartProcess+0xee>
  }
  /* Reset Ending DMA internal context flag*/
  hjpeg->Context &= ~JPEG_CONTEXT_ENDING_DMA;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Disable DMA In/Out Request*/
  JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA | JPEG_DMA_IDMA);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 8005bda:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the JPEG DMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_DMAInCpltCallback;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	4a2e      	ldr	r2, [pc, #184]	; (8005c9c <JPEG_DMA_StartProcess+0xf8>)
 8005be2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_DMAErrorCallback;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be8:	4a2d      	ldr	r2, [pc, #180]	; (8005ca0 <JPEG_DMA_StartProcess+0xfc>)
 8005bea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the JPEG DMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_DMAOutCpltCallback;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf0:	4a2c      	ldr	r2, [pc, #176]	; (8005ca4 <JPEG_DMA_StartProcess+0x100>)
 8005bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Set the DMA Out error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_DMAErrorCallback;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf8:	4a29      	ldr	r2, [pc, #164]	; (8005ca0 <JPEG_DMA_StartProcess+0xfc>)
 8005bfa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Set the DMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_DMAOutAbortCallback;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c00:	4a29      	ldr	r2, [pc, #164]	; (8005ca8 <JPEG_DMA_StartProcess+0x104>)
 8005c02:	651a      	str	r2, [r3, #80]	; 0x50

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c08:	f023 0203 	bic.w	r2, r3, #3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	629a      	str	r2, [r3, #40]	; 0x28

  /*DMA transfer size must be a multiple of 4 bytes i.e multiple of 32bits words*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % 4UL);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c14:	f023 0203 	bic.w	r2, r3, #3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Start DMA FIFO In transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	4619      	mov	r1, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3340      	adds	r3, #64	; 0x40
 8005c2c:	461a      	mov	r2, r3
                       hjpeg->InDataLength >> 2)  != HAL_OK)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005c32:	089b      	lsrs	r3, r3, #2
 8005c34:	f7fe f8a4 	bl	8003d80 <HAL_DMA_Start_IT>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d007      	beq.n	8005c4e <JPEG_DMA_StartProcess+0xaa>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c42:	f043 0204 	orr.w	r2, r3, #4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e021      	b.n	8005c92 <JPEG_DMA_StartProcess+0xee>
  }

  /* Start DMA FIFO Out transfer */
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3344      	adds	r3, #68	; 0x44
 8005c58:	4619      	mov	r1, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	461a      	mov	r2, r3
                       hjpeg->OutDataLength >> 2)  != HAL_OK)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	f7fe f88b 	bl	8003d80 <HAL_DMA_Start_IT>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d007      	beq.n	8005c80 <JPEG_DMA_StartProcess+0xdc>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c74:	f043 0204 	orr.w	r2, r3, #4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	651a      	str	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e008      	b.n	8005c92 <JPEG_DMA_StartProcess+0xee>
  }

  /* Enable JPEG In/Out DMA requests*/
  JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA | JPEG_DMA_ODMA);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f442 52c0 	orr.w	r2, r2, #6144	; 0x1800
 8005c8e:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005c90:	2300      	movs	r3, #0
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	08005ec9 	.word	0x08005ec9
 8005ca0:	080060ad 	.word	0x080060ad
 8005ca4:	08005fc9 	.word	0x08005fc9
 8005ca8:	08006119 	.word	0x08006119

08005cac <JPEG_DMA_EndProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE
  */
static void JPEG_DMA_EndProcess(JPEG_HandleTypeDef *hjpeg)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hjpeg->hdmaout->Instance->NDTR & DMA_SxNDT) << 2);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	0099      	lsls	r1, r3, #2
 8005cc2:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <JPEG_DMA_EndProcess+0xd4>)
 8005cc4:	400b      	ands	r3, r1
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	625a      	str	r2, [r3, #36]	; 0x24

  /*if Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d10a      	bne.n	8005cee <JPEG_DMA_EndProcess+0x42>
  {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	69d9      	ldr	r1, [r3, #28]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f00d fd64 	bl	80137b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    hjpeg->JpegOutCount = 0;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	625a      	str	r2, [r3, #36]	; 0x24
  }

  /*Check if remaining data in the output FIFO*/
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	f003 0310 	and.w	r3, r3, #16
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d134      	bne.n	8005d66 <JPEG_DMA_EndProcess+0xba>
  {
    if (hjpeg->JpegOutCount > 0UL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d00a      	beq.n	8005d1a <JPEG_DMA_EndProcess+0x6e>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69d9      	ldr	r1, [r3, #28]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f00d fd4e 	bl	80137b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0201 	bic.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]

    tmpContext = hjpeg->Context;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2e:	60fb      	str	r3, [r7, #12]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d34:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d103      	bne.n	8005d5e <JPEG_DMA_EndProcess+0xb2>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f00d fd98 	bl	801388c <HAL_JPEG_DecodeCpltCallback>
  else
  {
    /* Nothing to do */
  }

}
 8005d5c:	e00c      	b.n	8005d78 <JPEG_DMA_EndProcess+0xcc>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff f8ef 	bl	8004f42 <HAL_JPEG_EncodeCpltCallback>
}
 8005d64:	e008      	b.n	8005d78 <JPEG_DMA_EndProcess+0xcc>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <JPEG_DMA_EndProcess+0xcc>
    JPEG_DMA_PollResidualData(hjpeg);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f806 	bl	8005d84 <JPEG_DMA_PollResidualData>
}
 8005d78:	bf00      	nop
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	0003fffc 	.word	0x0003fffc

08005d84 <JPEG_DMA_PollResidualData>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval None.
  */
static void JPEG_DMA_PollResidualData(JPEG_HandleTypeDef *hjpeg)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b086      	sub	sp, #24
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpContext;
  uint32_t count;
  uint32_t dataOut;

  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	e04f      	b.n	8005e32 <JPEG_DMA_PollResidualData+0xae>
  {
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d146      	bne.n	8005e2c <JPEG_DMA_PollResidualData+0xa8>
    {
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d03f      	beq.n	8005e2c <JPEG_DMA_PollResidualData+0xa8>
      {
        dataOut = hjpeg->Instance->DOR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005db2:	60fb      	str	r3, [r7, #12]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	69da      	ldr	r2, [r3, #28]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbc:	4413      	add	r3, r2
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	0a19      	lsrs	r1, r3, #8
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	69da      	ldr	r2, [r3, #28]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	4413      	add	r3, r2
 8005dd4:	b2ca      	uxtb	r2, r1
 8005dd6:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	0c19      	lsrs	r1, r3, #16
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	69da      	ldr	r2, [r3, #28]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de4:	3302      	adds	r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	b2ca      	uxtb	r2, r1
 8005dea:	701a      	strb	r2, [r3, #0]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	0e19      	lsrs	r1, r3, #24
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df8:	3303      	adds	r3, #3
 8005dfa:	4413      	add	r3, r2
 8005dfc:	b2ca      	uxtb	r2, r1
 8005dfe:	701a      	strb	r2, [r3, #0]
        hjpeg->JpegOutCount += 4UL;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	1d1a      	adds	r2, r3, #4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	625a      	str	r2, [r3, #36]	; 0x24

        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d10a      	bne.n	8005e2c <JPEG_DMA_PollResidualData+0xa8>
        {
          /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69d9      	ldr	r1, [r3, #28]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1e:	461a      	mov	r2, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f00d fcc5 	bl	80137b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

          hjpeg->JpegOutCount = 0;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1ac      	bne.n	8005d92 <JPEG_DMA_PollResidualData+0xe>

      }
    }
  }

  tmpContext = hjpeg->Context;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3c:	613b      	str	r3, [r7, #16]

  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d004      	beq.n	8005e56 <JPEG_DMA_PollResidualData+0xd2>
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d133      	bne.n	8005ebe <JPEG_DMA_PollResidualData+0x13a>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f022 0201 	bic.w	r2, r2, #1
 8005e64:	601a      	str	r2, [r3, #0]

    if (hjpeg->JpegOutCount > 0UL)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00a      	beq.n	8005e84 <JPEG_DMA_PollResidualData+0x100>
    {
      /*Output Buffer is not empty, call DecodedDataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	69d9      	ldr	r1, [r3, #28]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e76:	461a      	mov	r2, r3
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f00d fc99 	bl	80137b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      hjpeg->JpegOutCount = 0;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	625a      	str	r2, [r3, #36]	; 0x24
    }

    tmpContext = hjpeg->Context;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e88:	613b      	str	r3, [r7, #16]
    /*Clear all context fields execpt JPEG_CONTEXT_CONF_ENCODING and JPEG_CONTEXT_CUSTOM_TABLES*/
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	f403 4282 	and.w	r2, r3, #16640	; 0x4100
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hjpeg);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Change the JPEG state */
    hjpeg->State = HAL_JPEG_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d

    /*Call End of Encoding/Decoding callback */
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d103      	bne.n	8005eb8 <JPEG_DMA_PollResidualData+0x134>
    {
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DecodeCpltCallback(hjpeg);
#else
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f00d fceb 	bl	801388c <HAL_JPEG_DecodeCpltCallback>
#else
      HAL_JPEG_EncodeCpltCallback(hjpeg);
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
    }
  }
}
 8005eb6:	e002      	b.n	8005ebe <JPEG_DMA_PollResidualData+0x13a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff f842 	bl	8004f42 <HAL_JPEG_EncodeCpltCallback>
}
 8005ebe:	bf00      	nop
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
	...

08005ec8 <JPEG_DMAInCpltCallback>:
  * @brief  DMA input transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAInCpltCallback(DMA_HandleTypeDef *hdma)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Input Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005eea:	f248 030c 	movw	r3, #32780	; 0x800c
 8005eee:	4013      	ands	r3, r2
 8005ef0:	2b0c      	cmp	r3, #12
 8005ef2:	d163      	bne.n	8005fbc <JPEG_DMAInCpltCallback+0xf4>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->JpegInCount = hjpeg->InDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	0099      	lsls	r1, r3, #2
 8005f10:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <JPEG_DMAInCpltCallback+0xfc>)
 8005f12:	400b      	ands	r3, r1
 8005f14:	1ad2      	subs	r2, r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	621a      	str	r2, [r3, #32]

    /*Call HAL_JPEG_GetDataCallback to get new data */
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->GetDataCallback(hjpeg, hjpeg->JpegInCount);
#else
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	4619      	mov	r1, r3
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f00d fc11 	bl	8013748 <HAL_JPEG_GetDataCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

    if (hjpeg->InDataLength >= 4UL)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	d906      	bls.n	8005f3c <JPEG_DMAInCpltCallback+0x74>
    {
      /*JPEG Input DMA transfer data number must be multiple of 32 bits word
        as the destination is a 32 bits (4 bytes) register */
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f32:	f023 0203 	bic.w	r2, r3, #3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	629a      	str	r2, [r3, #40]	; 0x28
 8005f3a:	e006      	b.n	8005f4a <JPEG_DMAInCpltCallback+0x82>
    }
    else if (hjpeg->InDataLength > 0UL)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d002      	beq.n	8005f4a <JPEG_DMAInCpltCallback+0x82>
    {
      /*Transfer last data word (i.e last 4 bytes)*/
      hjpeg->InDataLength = 4;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2204      	movs	r2, #4
 8005f48:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d12a      	bne.n	8005fac <JPEG_DMAInCpltCallback+0xe4>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d026      	beq.n	8005fac <JPEG_DMAInCpltCallback+0xe4>
    {
      /* Start DMA FIFO In transfer */
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	4619      	mov	r1, r3
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3340      	adds	r3, #64	; 0x40
 8005f6e:	461a      	mov	r2, r3
                           hjpeg->InDataLength >> 2) != HAL_OK)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (HAL_DMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8005f74:	089b      	lsrs	r3, r3, #2
 8005f76:	f7fd ff03 	bl	8003d80 <HAL_DMA_Start_IT>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d00d      	beq.n	8005f9c <JPEG_DMAInCpltCallback+0xd4>
      {
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f84:	f043 0204 	orr.w	r2, r3, #4
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	651a      	str	r2, [r3, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2206      	movs	r2, #6
 8005f90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
        hjpeg->ErrorCallback(hjpeg);
#else
        HAL_JPEG_ErrorCallback(hjpeg);
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f00d fc6b 	bl	8013870 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
        return;
 8005f9a:	e00f      	b.n	8005fbc <JPEG_DMAInCpltCallback+0xf4>
      }
      JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_IDMA);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8005fbc:	3710      	adds	r7, #16
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	0003fffc 	.word	0x0003fffc

08005fc8 <JPEG_DMAOutCpltCallback>:
  * @brief  DMA output transfer complete callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutCpltCallback(DMA_HandleTypeDef *hdma)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b084      	sub	sp, #16
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	60fb      	str	r3, [r7, #12]

  /* Disable The JPEG IT so the DMA Output Callback can not be interrupted by the JPEG EOC IT or JPEG HPD IT */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 8005fe4:	631a      	str	r2, [r3, #48]	; 0x30

  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fea:	f248 030c 	movw	r3, #32780	; 0x800c
 8005fee:	4013      	ands	r3, r2
 8005ff0:	2b0c      	cmp	r3, #12
 8005ff2:	d156      	bne.n	80060a2 <JPEG_DMAOutCpltCallback+0xda>
      JPEG_CONTEXT_DMA) /* Check if context method is DMA and we are not in ending DMA stage */
  {
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d147      	bne.n	8006092 <JPEG_DMAOutCpltCallback+0xca>
    {
      JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006010:	631a      	str	r2, [r3, #48]	; 0x30
      hjpeg->JpegOutCount = hjpeg->OutDataLength - ((hdma->Instance->NDTR & DMA_SxNDT) << 2);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	0099      	lsls	r1, r3, #2
 800601e:	4b22      	ldr	r3, [pc, #136]	; (80060a8 <JPEG_DMAOutCpltCallback+0xe0>)
 8006020:	400b      	ands	r3, r1
 8006022:	1ad2      	subs	r2, r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	625a      	str	r2, [r3, #36]	; 0x24

      /*Output Buffer is full, call HAL_JPEG_DataReadyCallback*/
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
      hjpeg->DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
#else
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	69d9      	ldr	r1, [r3, #28]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006030:	461a      	mov	r2, r3
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	f00d fbbc 	bl	80137b0 <HAL_JPEG_DataReadyCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */

      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d126      	bne.n	8006092 <JPEG_DMAOutCpltCallback+0xca>
      {
        /* Start DMA FIFO Out transfer */
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3344      	adds	r3, #68	; 0x44
 800604e:	4619      	mov	r1, r3
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	461a      	mov	r2, r3
                             hjpeg->OutDataLength >> 2) != HAL_OK)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if (HAL_DMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800605a:	089b      	lsrs	r3, r3, #2
 800605c:	f7fd fe90 	bl	8003d80 <HAL_DMA_Start_IT>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00d      	beq.n	8006082 <JPEG_DMAOutCpltCallback+0xba>
        {
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800606a:	f043 0204 	orr.w	r2, r3, #4
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	651a      	str	r2, [r3, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2206      	movs	r2, #6
 8006076:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
          hjpeg->ErrorCallback(hjpeg);
#else
          HAL_JPEG_ErrorCallback(hjpeg);
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f00d fbf8 	bl	8013870 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
          return;
 8006080:	e00f      	b.n	80060a2 <JPEG_DMAOutCpltCallback+0xda>
        }
        JPEG_ENABLE_DMA(hjpeg, JPEG_DMA_ODMA);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006090:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* JPEG Conversion still on going : Enable the JPEG IT */
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80060a0:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	0003fffc 	.word	0x0003fffc

080060ac <JPEG_DMAErrorCallback>:
  * @brief  DMA Transfer error callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAErrorCallback(DMA_HandleTypeDef *hdma)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b8:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fe f86c 	bl	8004198 <HAL_DMA_GetError>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d024      	beq.n	8006110 <JPEG_DMAErrorCallback+0x64>
  {
    /*Stop Encoding/Decoding*/
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0201 	bic.w	r2, r2, #1
 80060d4:	601a      	str	r2, [r3, #0]

    /* Disable All Interrupts */
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
 80060e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable All DMA requests */
    JPEG_DISABLE_DMA(hjpeg, JPEG_DMA_MASK);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f422 52c0 	bic.w	r2, r2, #6144	; 0x1800
 80060f4:	631a      	str	r2, [r3, #48]	; 0x30

    hjpeg->State = HAL_JPEG_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006102:	f043 0204 	orr.w	r2, r3, #4
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	651a      	str	r2, [r3, #80]	; 0x50
#if (USE_HAL_JPEG_REGISTER_CALLBACKS == 1)
    hjpeg->ErrorCallback(hjpeg);
#else
    HAL_JPEG_ErrorCallback(hjpeg);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f00d fbb0 	bl	8013870 <HAL_JPEG_ErrorCallback>
#endif /* USE_HAL_JPEG_REGISTER_CALLBACKS */
  }
}
 8006110:	bf00      	nop
 8006112:	3710      	adds	r7, #16
 8006114:	46bd      	mov	sp, r7
 8006116:	bd80      	pop	{r7, pc}

08006118 <JPEG_DMAOutAbortCallback>:
  * @brief  DMA output Abort callback
  * @param  hdma pointer to a DMA_HandleTypeDef structure.
  * @retval None
  */
static void JPEG_DMAOutAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	60fb      	str	r3, [r7, #12]

  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <JPEG_DMAOutAbortCallback+0x20>
  {
    JPEG_DMA_EndProcess(hjpeg);
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f7ff fdba 	bl	8005cac <JPEG_DMA_EndProcess>
  }
}
 8006138:	bf00      	nop
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e0bf      	b.n	80062d2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d106      	bne.n	800616c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7fb fcc0 	bl	8001aec <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2202      	movs	r2, #2
 8006170:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006182:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	6999      	ldr	r1, [r3, #24]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006198:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	430a      	orrs	r2, r1
 80061a6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6899      	ldr	r1, [r3, #8]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4b4a      	ldr	r3, [pc, #296]	; (80062dc <HAL_LTDC_Init+0x19c>)
 80061b4:	400b      	ands	r3, r1
 80061b6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	695b      	ldr	r3, [r3, #20]
 80061bc:	041b      	lsls	r3, r3, #16
 80061be:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	6899      	ldr	r1, [r3, #8]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	68d9      	ldr	r1, [r3, #12]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	4b3e      	ldr	r3, [pc, #248]	; (80062dc <HAL_LTDC_Init+0x19c>)
 80061e2:	400b      	ands	r3, r1
 80061e4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	041b      	lsls	r3, r3, #16
 80061ec:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68d9      	ldr	r1, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a1a      	ldr	r2, [r3, #32]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6919      	ldr	r1, [r3, #16]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	4b33      	ldr	r3, [pc, #204]	; (80062dc <HAL_LTDC_Init+0x19c>)
 8006210:	400b      	ands	r3, r1
 8006212:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006218:	041b      	lsls	r3, r3, #16
 800621a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6919      	ldr	r1, [r3, #16]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6959      	ldr	r1, [r3, #20]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	4b27      	ldr	r3, [pc, #156]	; (80062dc <HAL_LTDC_Init+0x19c>)
 800623e:	400b      	ands	r3, r1
 8006240:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006246:	041b      	lsls	r3, r3, #16
 8006248:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6959      	ldr	r1, [r3, #20]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	431a      	orrs	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006282:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4313      	orrs	r3, r2
 8006290:	687a      	ldr	r2, [r7, #4]
 8006292:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	430a      	orrs	r2, r1
 800629e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0206 	orr.w	r2, r2, #6
 80062ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699a      	ldr	r2, [r3, #24]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f042 0201 	orr.w	r2, r2, #1
 80062be:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	f000f800 	.word	0xf000f800

080062e0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d023      	beq.n	800634a <HAL_LTDC_IRQHandler+0x6a>
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d01e      	beq.n	800634a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 0204 	bic.w	r2, r2, #4
 800631a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2204      	movs	r2, #4
 8006322:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800632a:	f043 0201 	orr.w	r2, r3, #1
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2204      	movs	r2, #4
 8006338:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f86f 	bl	8006428 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f003 0302 	and.w	r3, r3, #2
 8006350:	2b00      	cmp	r3, #0
 8006352:	d023      	beq.n	800639c <HAL_LTDC_IRQHandler+0xbc>
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f003 0302 	and.w	r3, r3, #2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01e      	beq.n	800639c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0202 	bic.w	r2, r2, #2
 800636c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2202      	movs	r2, #2
 8006374:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800637c:	f043 0202 	orr.w	r2, r3, #2
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2204      	movs	r2, #4
 800638a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f846 	bl	8006428 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f003 0301 	and.w	r3, r3, #1
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d01b      	beq.n	80063de <HAL_LTDC_IRQHandler+0xfe>
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d016      	beq.n	80063de <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0201 	bic.w	r2, r2, #1
 80063be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2201      	movs	r2, #1
 80063c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f00f f817 	bl	801540c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d01b      	beq.n	8006420 <HAL_LTDC_IRQHandler+0x140>
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	f003 0308 	and.w	r3, r3, #8
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f022 0208 	bic.w	r2, r2, #8
 8006400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2208      	movs	r2, #8
 8006408:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 f80e 	bl	800643c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006420:	bf00      	nop
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr

08006450 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006450:	b5b0      	push	{r4, r5, r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_LTDC_ConfigLayer+0x1a>
 8006466:	2302      	movs	r3, #2
 8006468:	e02c      	b.n	80064c4 <HAL_LTDC_ConfigLayer+0x74>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2202      	movs	r2, #2
 8006476:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2134      	movs	r1, #52	; 0x34
 8006480:	fb01 f303 	mul.w	r3, r1, r3
 8006484:	4413      	add	r3, r2
 8006486:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	4614      	mov	r4, r2
 800648e:	461d      	mov	r5, r3
 8006490:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006492:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006494:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006496:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800649a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	68f8      	ldr	r0, [r7, #12]
 80064a6:	f000 f849 	bl	800653c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2201      	movs	r2, #1
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80064c2:	2300      	movs	r3, #0
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bdb0      	pop	{r4, r5, r7, pc}

080064cc <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d101      	bne.n	80064e4 <HAL_LTDC_ProgramLineEvent+0x18>
 80064e0:	2302      	movs	r3, #2
 80064e2:	e023      	b.n	800652c <HAL_LTDC_ProgramLineEvent+0x60>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2202      	movs	r2, #2
 80064f0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0201 	bic.w	r2, r2, #1
 8006502:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8006504:	4a0c      	ldr	r2, [pc, #48]	; (8006538 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	f042 0201 	orr.w	r2, r2, #1
 8006518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2201      	movs	r2, #1
 800651e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr
 8006538:	40016800 	.word	0x40016800

0800653c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800653c:	b480      	push	{r7}
 800653e:	b089      	sub	sp, #36	; 0x24
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	685a      	ldr	r2, [r3, #4]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	0c1b      	lsrs	r3, r3, #16
 8006554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006558:	4413      	add	r3, r2
 800655a:	041b      	lsls	r3, r3, #16
 800655c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	01db      	lsls	r3, r3, #7
 8006568:	4413      	add	r3, r2
 800656a:	3384      	adds	r3, #132	; 0x84
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	6812      	ldr	r2, [r2, #0]
 8006572:	4611      	mov	r1, r2
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	01d2      	lsls	r2, r2, #7
 8006578:	440a      	add	r2, r1
 800657a:	3284      	adds	r2, #132	; 0x84
 800657c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006580:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	0c1b      	lsrs	r3, r3, #16
 800658e:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006592:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006594:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4619      	mov	r1, r3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	01db      	lsls	r3, r3, #7
 80065a0:	440b      	add	r3, r1
 80065a2:	3384      	adds	r3, #132	; 0x84
 80065a4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80065aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	68da      	ldr	r2, [r3, #12]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ba:	4413      	add	r3, r2
 80065bc:	041b      	lsls	r3, r3, #16
 80065be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	461a      	mov	r2, r3
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	01db      	lsls	r3, r3, #7
 80065ca:	4413      	add	r3, r2
 80065cc:	3384      	adds	r3, #132	; 0x84
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	6812      	ldr	r2, [r2, #0]
 80065d4:	4611      	mov	r1, r2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	01d2      	lsls	r2, r2, #7
 80065da:	440a      	add	r2, r1
 80065dc:	3284      	adds	r2, #132	; 0x84
 80065de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80065e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065f2:	4413      	add	r3, r2
 80065f4:	1c5a      	adds	r2, r3, #1
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4619      	mov	r1, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	01db      	lsls	r3, r3, #7
 8006600:	440b      	add	r3, r1
 8006602:	3384      	adds	r3, #132	; 0x84
 8006604:	4619      	mov	r1, r3
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4313      	orrs	r3, r2
 800660a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	461a      	mov	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	01db      	lsls	r3, r3, #7
 8006616:	4413      	add	r3, r2
 8006618:	3384      	adds	r3, #132	; 0x84
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	4611      	mov	r1, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	01d2      	lsls	r2, r2, #7
 8006626:	440a      	add	r2, r1
 8006628:	3284      	adds	r2, #132	; 0x84
 800662a:	f023 0307 	bic.w	r3, r3, #7
 800662e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	461a      	mov	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	01db      	lsls	r3, r3, #7
 800663a:	4413      	add	r3, r2
 800663c:	3384      	adds	r3, #132	; 0x84
 800663e:	461a      	mov	r2, r3
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006656:	041b      	lsls	r3, r3, #16
 8006658:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	061b      	lsls	r3, r3, #24
 8006660:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	461a      	mov	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	01db      	lsls	r3, r3, #7
 800666c:	4413      	add	r3, r2
 800666e:	3384      	adds	r3, #132	; 0x84
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	01db      	lsls	r3, r3, #7
 800667c:	4413      	add	r3, r2
 800667e:	3384      	adds	r3, #132	; 0x84
 8006680:	461a      	mov	r2, r3
 8006682:	2300      	movs	r3, #0
 8006684:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800668c:	461a      	mov	r2, r3
 800668e:	69fb      	ldr	r3, [r7, #28]
 8006690:	431a      	orrs	r2, r3
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	431a      	orrs	r2, r3
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4619      	mov	r1, r3
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	01db      	lsls	r3, r3, #7
 80066a0:	440b      	add	r3, r1
 80066a2:	3384      	adds	r3, #132	; 0x84
 80066a4:	4619      	mov	r1, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	461a      	mov	r2, r3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	01db      	lsls	r3, r3, #7
 80066b6:	4413      	add	r3, r2
 80066b8:	3384      	adds	r3, #132	; 0x84
 80066ba:	695b      	ldr	r3, [r3, #20]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	6812      	ldr	r2, [r2, #0]
 80066c0:	4611      	mov	r1, r2
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	01d2      	lsls	r2, r2, #7
 80066c6:	440a      	add	r2, r1
 80066c8:	3284      	adds	r2, #132	; 0x84
 80066ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	461a      	mov	r2, r3
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	01db      	lsls	r3, r3, #7
 80066da:	4413      	add	r3, r2
 80066dc:	3384      	adds	r3, #132	; 0x84
 80066de:	461a      	mov	r2, r3
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	461a      	mov	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	01db      	lsls	r3, r3, #7
 80066f0:	4413      	add	r3, r2
 80066f2:	3384      	adds	r3, #132	; 0x84
 80066f4:	69da      	ldr	r2, [r3, #28]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4619      	mov	r1, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	01db      	lsls	r3, r3, #7
 8006700:	440b      	add	r3, r1
 8006702:	3384      	adds	r3, #132	; 0x84
 8006704:	4619      	mov	r1, r3
 8006706:	4b58      	ldr	r3, [pc, #352]	; (8006868 <LTDC_SetConfig+0x32c>)
 8006708:	4013      	ands	r3, r2
 800670a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	69da      	ldr	r2, [r3, #28]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	68f9      	ldr	r1, [r7, #12]
 8006716:	6809      	ldr	r1, [r1, #0]
 8006718:	4608      	mov	r0, r1
 800671a:	6879      	ldr	r1, [r7, #4]
 800671c:	01c9      	lsls	r1, r1, #7
 800671e:	4401      	add	r1, r0
 8006720:	3184      	adds	r1, #132	; 0x84
 8006722:	4313      	orrs	r3, r2
 8006724:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	01db      	lsls	r3, r3, #7
 8006730:	4413      	add	r3, r2
 8006732:	3384      	adds	r3, #132	; 0x84
 8006734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	01db      	lsls	r3, r3, #7
 8006740:	4413      	add	r3, r2
 8006742:	3384      	adds	r3, #132	; 0x84
 8006744:	461a      	mov	r2, r3
 8006746:	2300      	movs	r3, #0
 8006748:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	01db      	lsls	r3, r3, #7
 8006754:	4413      	add	r3, r2
 8006756:	3384      	adds	r3, #132	; 0x84
 8006758:	461a      	mov	r2, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	691b      	ldr	r3, [r3, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d102      	bne.n	800676e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8006768:	2304      	movs	r3, #4
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	e01b      	b.n	80067a6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d102      	bne.n	800677c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8006776:	2303      	movs	r3, #3
 8006778:	61fb      	str	r3, [r7, #28]
 800677a:	e014      	b.n	80067a6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	2b04      	cmp	r3, #4
 8006782:	d00b      	beq.n	800679c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006788:	2b02      	cmp	r3, #2
 800678a:	d007      	beq.n	800679c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006790:	2b03      	cmp	r3, #3
 8006792:	d003      	beq.n	800679c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006798:	2b07      	cmp	r3, #7
 800679a:	d102      	bne.n	80067a2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800679c:	2302      	movs	r3, #2
 800679e:	61fb      	str	r3, [r7, #28]
 80067a0:	e001      	b.n	80067a6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80067a2:	2301      	movs	r3, #1
 80067a4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	461a      	mov	r2, r3
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	01db      	lsls	r3, r3, #7
 80067b0:	4413      	add	r3, r2
 80067b2:	3384      	adds	r3, #132	; 0x84
 80067b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	6812      	ldr	r2, [r2, #0]
 80067ba:	4611      	mov	r1, r2
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	01d2      	lsls	r2, r2, #7
 80067c0:	440a      	add	r2, r1
 80067c2:	3284      	adds	r2, #132	; 0x84
 80067c4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80067c8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	69fa      	ldr	r2, [r7, #28]
 80067d0:	fb02 f303 	mul.w	r3, r2, r3
 80067d4:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	6859      	ldr	r1, [r3, #4]
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	1acb      	subs	r3, r1, r3
 80067e0:	69f9      	ldr	r1, [r7, #28]
 80067e2:	fb01 f303 	mul.w	r3, r1, r3
 80067e6:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80067e8:	68f9      	ldr	r1, [r7, #12]
 80067ea:	6809      	ldr	r1, [r1, #0]
 80067ec:	4608      	mov	r0, r1
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	01c9      	lsls	r1, r1, #7
 80067f2:	4401      	add	r1, r0
 80067f4:	3184      	adds	r1, #132	; 0x84
 80067f6:	4313      	orrs	r3, r2
 80067f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	01db      	lsls	r3, r3, #7
 8006804:	4413      	add	r3, r2
 8006806:	3384      	adds	r3, #132	; 0x84
 8006808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4619      	mov	r1, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	01db      	lsls	r3, r3, #7
 8006814:	440b      	add	r3, r1
 8006816:	3384      	adds	r3, #132	; 0x84
 8006818:	4619      	mov	r1, r3
 800681a:	4b14      	ldr	r3, [pc, #80]	; (800686c <LTDC_SetConfig+0x330>)
 800681c:	4013      	ands	r3, r2
 800681e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	01db      	lsls	r3, r3, #7
 800682a:	4413      	add	r3, r2
 800682c:	3384      	adds	r3, #132	; 0x84
 800682e:	461a      	mov	r2, r3
 8006830:	68bb      	ldr	r3, [r7, #8]
 8006832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006834:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	461a      	mov	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	01db      	lsls	r3, r3, #7
 8006840:	4413      	add	r3, r2
 8006842:	3384      	adds	r3, #132	; 0x84
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68fa      	ldr	r2, [r7, #12]
 8006848:	6812      	ldr	r2, [r2, #0]
 800684a:	4611      	mov	r1, r2
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	01d2      	lsls	r2, r2, #7
 8006850:	440a      	add	r2, r1
 8006852:	3284      	adds	r2, #132	; 0x84
 8006854:	f043 0301 	orr.w	r3, r3, #1
 8006858:	6013      	str	r3, [r2, #0]
}
 800685a:	bf00      	nop
 800685c:	3724      	adds	r7, #36	; 0x24
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	fffff8f8 	.word	0xfffff8f8
 800686c:	fffff800 	.word	0xfffff800

08006870 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006876:	2300      	movs	r3, #0
 8006878:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800687a:	4b23      	ldr	r3, [pc, #140]	; (8006908 <HAL_PWREx_EnableOverDrive+0x98>)
 800687c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800687e:	4a22      	ldr	r2, [pc, #136]	; (8006908 <HAL_PWREx_EnableOverDrive+0x98>)
 8006880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006884:	6413      	str	r3, [r2, #64]	; 0x40
 8006886:	4b20      	ldr	r3, [pc, #128]	; (8006908 <HAL_PWREx_EnableOverDrive+0x98>)
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006892:	4b1e      	ldr	r3, [pc, #120]	; (800690c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4a1d      	ldr	r2, [pc, #116]	; (800690c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800689c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800689e:	f7fc f8d7 	bl	8002a50 <HAL_GetTick>
 80068a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068a4:	e009      	b.n	80068ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068a6:	f7fc f8d3 	bl	8002a50 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068b4:	d901      	bls.n	80068ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e022      	b.n	8006900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068ba:	4b14      	ldr	r3, [pc, #80]	; (800690c <HAL_PWREx_EnableOverDrive+0x9c>)
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c6:	d1ee      	bne.n	80068a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80068c8:	4b10      	ldr	r3, [pc, #64]	; (800690c <HAL_PWREx_EnableOverDrive+0x9c>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a0f      	ldr	r2, [pc, #60]	; (800690c <HAL_PWREx_EnableOverDrive+0x9c>)
 80068ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068d4:	f7fc f8bc 	bl	8002a50 <HAL_GetTick>
 80068d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068da:	e009      	b.n	80068f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068dc:	f7fc f8b8 	bl	8002a50 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80068ea:	d901      	bls.n	80068f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e007      	b.n	8006900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80068f0:	4b06      	ldr	r3, [pc, #24]	; (800690c <HAL_PWREx_EnableOverDrive+0x9c>)
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068fc:	d1ee      	bne.n	80068dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80068fe:	2300      	movs	r3, #0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	40023800 	.word	0x40023800
 800690c:	40007000 	.word	0x40007000

08006910 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b086      	sub	sp, #24
 8006914:	af02      	add	r7, sp, #8
 8006916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006918:	f7fc f89a 	bl	8002a50 <HAL_GetTick>
 800691c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006924:	2301      	movs	r3, #1
 8006926:	e067      	b.n	80069f8 <HAL_QSPI_Init+0xe8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10b      	bne.n	800694c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f7fb fb2d 	bl	8001f9c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006942:	f241 3188 	movw	r1, #5000	; 0x1388
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fae8 	bl	8006f1c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	3b01      	subs	r3, #1
 800695c:	021a      	lsls	r2, r3, #8
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800696a:	9300      	str	r3, [sp, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2200      	movs	r2, #0
 8006970:	2120      	movs	r1, #32
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fae0 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006978:	4603      	mov	r3, r0
 800697a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800697c:	7afb      	ldrb	r3, [r7, #11]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d135      	bne.n	80069ee <HAL_QSPI_Init+0xde>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4b1d      	ldr	r3, [pc, #116]	; (8006a00 <HAL_QSPI_Init+0xf0>)
 800698a:	4013      	ands	r3, r2
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	6852      	ldr	r2, [r2, #4]
 8006990:	0611      	lsls	r1, r2, #24
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	68d2      	ldr	r2, [r2, #12]
 8006996:	4311      	orrs	r1, r2
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	69d2      	ldr	r2, [r2, #28]
 800699c:	4311      	orrs	r1, r2
 800699e:	687a      	ldr	r2, [r7, #4]
 80069a0:	6a12      	ldr	r2, [r2, #32]
 80069a2:	4311      	orrs	r1, r2
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	6812      	ldr	r2, [r2, #0]
 80069a8:	430b      	orrs	r3, r1
 80069aa:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	4b14      	ldr	r3, [pc, #80]	; (8006a04 <HAL_QSPI_Init+0xf4>)
 80069b4:	4013      	ands	r3, r2
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	6912      	ldr	r2, [r2, #16]
 80069ba:	0411      	lsls	r1, r2, #16
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6952      	ldr	r2, [r2, #20]
 80069c0:	4311      	orrs	r1, r2
 80069c2:	687a      	ldr	r2, [r7, #4]
 80069c4:	6992      	ldr	r2, [r2, #24]
 80069c6:	4311      	orrs	r1, r2
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6812      	ldr	r2, [r2, #0]
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80069f6:	7afb      	ldrb	r3, [r7, #11]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	00ffff2f 	.word	0x00ffff2f
 8006a04:	ffe0f8fe 	.word	0xffe0f8fe

08006a08 <HAL_QSPI_DeInit>:
  * @brief De-Initialize the QSPI peripheral.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_DeInit(QSPI_HandleTypeDef *hqspi)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_QSPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e016      	b.n	8006a48 <HAL_QSPI_DeInit+0x40>
  }

  /* Disable the QSPI Peripheral Clock */
  __HAL_QSPI_DISABLE(hqspi);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0201 	bic.w	r2, r2, #1
 8006a28:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware */
  hqspi->MspDeInitCallback(hqspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_QSPI_MspDeInit(hqspi);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fb fb38 	bl	80020a0 <HAL_QSPI_MspDeInit>
#endif

  /* Set QSPI error code to none */
  hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2200      	movs	r2, #0
 8006a34:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the QSPI state */
  hqspi->State = HAL_QSPI_STATE_RESET;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3708      	adds	r7, #8
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}

08006a50 <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b088      	sub	sp, #32
 8006a54:	af02      	add	r7, sp, #8
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006a5c:	f7fb fff8 	bl	8002a50 <HAL_GetTick>
 8006a60:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d101      	bne.n	8006a72 <HAL_QSPI_Command+0x22>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e048      	b.n	8006b04 <HAL_QSPI_Command+0xb4>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2201      	movs	r2, #1
 8006a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d137      	bne.n	8006af6 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	9300      	str	r3, [sp, #0]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	2120      	movs	r1, #32
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 fa4a 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d125      	bne.n	8006afa <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	68f8      	ldr	r0, [r7, #12]
 8006ab4:	f000 fa77 	bl	8006fa6 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d115      	bne.n	8006aec <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	9300      	str	r3, [sp, #0]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	2102      	movs	r1, #2
 8006aca:	68f8      	ldr	r0, [r7, #12]
 8006acc:	f000 fa34 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10f      	bne.n	8006afa <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006aea:	e006      	b.n	8006afa <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006af4:	e001      	b.n	8006afa <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006af6:	2302      	movs	r3, #2
 8006af8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3718      	adds	r7, #24
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	; 0x28
 8006b10:	af02      	add	r7, sp, #8
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006b1c:	f7fb ff98 	bl	8002a50 <HAL_GetTick>
 8006b20:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3320      	adds	r3, #32
 8006b28:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d101      	bne.n	8006b3a <HAL_QSPI_Transmit+0x2e>
 8006b36:	2302      	movs	r3, #2
 8006b38:	e076      	b.n	8006c28 <HAL_QSPI_Transmit+0x11c>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d165      	bne.n	8006c1a <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d056      	beq.n	8006c08 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2212      	movs	r2, #18
 8006b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	1c5a      	adds	r2, r3, #1
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	62da      	str	r2, [r3, #44]	; 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	629a      	str	r2, [r3, #40]	; 0x28
      hqspi->pTxBuffPtr = pData;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	695a      	ldr	r2, [r3, #20]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006b8e:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8006b90:	e01b      	b.n	8006bca <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	2104      	movs	r1, #4
 8006b9c:	68f8      	ldr	r0, [r7, #12]
 8006b9e:	f000 f9cb 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8006ba6:	7ffb      	ldrb	r3, [r7, #31]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d113      	bne.n	8006bd4 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	781a      	ldrb	r2, [r3, #0]
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	625a      	str	r2, [r3, #36]	; 0x24
        hqspi->TxXferCount--;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	1e5a      	subs	r2, r3, #1
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	62da      	str	r2, [r3, #44]	; 0x2c
      while(hqspi->TxXferCount > 0U)
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1df      	bne.n	8006b92 <HAL_QSPI_Transmit+0x86>
 8006bd2:	e000      	b.n	8006bd6 <HAL_QSPI_Transmit+0xca>
          break;
 8006bd4:	bf00      	nop
      }

      if (status == HAL_OK)
 8006bd6:	7ffb      	ldrb	r3, [r7, #31]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d110      	bne.n	8006bfe <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	9300      	str	r3, [sp, #0]
 8006be0:	69bb      	ldr	r3, [r7, #24]
 8006be2:	2201      	movs	r2, #1
 8006be4:	2102      	movs	r1, #2
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	f000 f9a6 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006bec:	4603      	mov	r3, r0
 8006bee:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8006bf0:	7ffb      	ldrb	r3, [r7, #31]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2201      	movs	r2, #1
 8006c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c06:	e00a      	b.n	8006c1e <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0c:	f043 0208 	orr.w	r2, r3, #8
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e001      	b.n	8006c1e <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006c26:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3720      	adds	r7, #32
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b08a      	sub	sp, #40	; 0x28
 8006c34:	af02      	add	r7, sp, #8
 8006c36:	60f8      	str	r0, [r7, #12]
 8006c38:	60b9      	str	r1, [r7, #8]
 8006c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8006c40:	f7fb ff06 	bl	8002a50 <HAL_GetTick>
 8006c44:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	3320      	adds	r3, #32
 8006c54:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c5c:	b2db      	uxtb	r3, r3
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_QSPI_Receive+0x36>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e07d      	b.n	8006d62 <HAL_QSPI_Receive+0x132>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d16c      	bne.n	8006d54 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	645a      	str	r2, [r3, #68]	; 0x44

    if(pData != NULL )
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d05d      	beq.n	8006d42 <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	2222      	movs	r2, #34	; 0x22
 8006c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	639a      	str	r2, [r3, #56]	; 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	635a      	str	r2, [r3, #52]	; 0x34
      hqspi->pRxBuffPtr = pData;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006cbe:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	697a      	ldr	r2, [r7, #20]
 8006cc6:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8006cc8:	e01c      	b.n	8006d04 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	9300      	str	r3, [sp, #0]
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	2106      	movs	r1, #6
 8006cd4:	68f8      	ldr	r0, [r7, #12]
 8006cd6:	f000 f92f 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8006cde:	7ffb      	ldrb	r3, [r7, #31]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d114      	bne.n	8006d0e <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce8:	693a      	ldr	r2, [r7, #16]
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	1c5a      	adds	r2, r3, #1
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	631a      	str	r2, [r3, #48]	; 0x30
        hqspi->RxXferCount--;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cfe:	1e5a      	subs	r2, r3, #1
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	639a      	str	r2, [r3, #56]	; 0x38
      while(hqspi->RxXferCount > 0U)
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1de      	bne.n	8006cca <HAL_QSPI_Receive+0x9a>
 8006d0c:	e000      	b.n	8006d10 <HAL_QSPI_Receive+0xe0>
          break;
 8006d0e:	bf00      	nop
      }

      if (status == HAL_OK)
 8006d10:	7ffb      	ldrb	r3, [r7, #31]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d110      	bne.n	8006d38 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	2102      	movs	r1, #2
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f909 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006d26:	4603      	mov	r3, r0
 8006d28:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8006d2a:	7ffb      	ldrb	r3, [r7, #31]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2202      	movs	r2, #2
 8006d36:	60da      	str	r2, [r3, #12]
#endif
        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d40:	e00a      	b.n	8006d58 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d46:	f043 0208 	orr.w	r2, r3, #8
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	645a      	str	r2, [r3, #68]	; 0x44
      status = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e001      	b.n	8006d58 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006d54:	2302      	movs	r3, #2
 8006d56:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return status;
 8006d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3720      	adds	r7, #32
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b088      	sub	sp, #32
 8006d6e:	af02      	add	r7, sp, #8
 8006d70:	60f8      	str	r0, [r7, #12]
 8006d72:	60b9      	str	r1, [r7, #8]
 8006d74:	607a      	str	r2, [r7, #4]
 8006d76:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006d78:	f7fb fe6a 	bl	8002a50 <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d101      	bne.n	8006d8e <HAL_QSPI_AutoPolling+0x24>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e060      	b.n	8006e50 <HAL_QSPI_AutoPolling+0xe6>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	2201      	movs	r2, #1
 8006d92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d14f      	bne.n	8006e42 <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2242      	movs	r2, #66	; 0x42
 8006dac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	2200      	movs	r2, #0
 8006db8:	2120      	movs	r1, #32
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 f8bc 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006dc4:	7dfb      	ldrb	r3, [r7, #23]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d13d      	bne.n	8006e46 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6812      	ldr	r2, [r2, #0]
 8006dd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6852      	ldr	r2, [r2, #4]
 8006ddc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	6892      	ldr	r2, [r2, #8]
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	691b      	ldr	r3, [r3, #16]
 8006df6:	431a      	orrs	r2, r3
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8006e00:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	68da      	ldr	r2, [r3, #12]
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	629a      	str	r2, [r3, #40]	; 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8006e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 f8c8 	bl	8006fa6 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	9300      	str	r3, [sp, #0]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	2108      	movs	r1, #8
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f000 f889 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006e26:	4603      	mov	r3, r0
 8006e28:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10a      	bne.n	8006e46 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2208      	movs	r2, #8
 8006e36:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e40:	e001      	b.n	8006e46 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8006e42:	2302      	movs	r3, #2
 8006e44:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3718      	adds	r7, #24
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b088      	sub	sp, #32
 8006e5c:	af02      	add	r7, sp, #8
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006e64:	f7fb fdf4 	bl	8002a50 <HAL_GetTick>
 8006e68:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d101      	bne.n	8006e7a <HAL_QSPI_MemoryMapped+0x22>
 8006e76:	2302      	movs	r3, #2
 8006e78:	e04c      	b.n	8006f14 <HAL_QSPI_MemoryMapped+0xbc>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d13b      	bne.n	8006f06 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2200      	movs	r2, #0
 8006e92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2282      	movs	r2, #130	; 0x82
 8006e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea0:	9300      	str	r3, [sp, #0]
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	2120      	movs	r1, #32
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f845 	bl	8006f38 <QSPI_WaitFlagStateUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d128      	bne.n	8006f0a <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f023 0108 	bic.w	r1, r3, #8
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	2b08      	cmp	r3, #8
 8006ed4:	d110      	bne.n	8006ef8 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	687a      	ldr	r2, [r7, #4]
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	631a      	str	r2, [r3, #48]	; 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2210      	movs	r2, #16
 8006ee6:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006ef6:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8006ef8:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	68f8      	ldr	r0, [r7, #12]
 8006f00:	f000 f851 	bl	8006fa6 <QSPI_Config>
 8006f04:	e001      	b.n	8006f0a <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8006f06:	2302      	movs	r3, #2
 8006f08:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3718      	adds	r7, #24
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	4613      	mov	r3, r2
 8006f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f48:	e01a      	b.n	8006f80 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f4a:	69bb      	ldr	r3, [r7, #24]
 8006f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f50:	d016      	beq.n	8006f80 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f52:	f7fb fd7d 	bl	8002a50 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d302      	bcc.n	8006f68 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d10b      	bne.n	8006f80 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2204      	movs	r2, #4
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f74:	f043 0201 	orr.w	r2, r3, #1
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e00e      	b.n	8006f9e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	689a      	ldr	r2, [r3, #8]
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	4013      	ands	r3, r2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf14      	ite	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	2300      	moveq	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	461a      	mov	r2, r3
 8006f96:	79fb      	ldrb	r3, [r7, #7]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d1d6      	bne.n	8006f4a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3710      	adds	r7, #16
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}

08006fa6 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8006fa6:	b480      	push	{r7}
 8006fa8:	b085      	sub	sp, #20
 8006faa:	af00      	add	r7, sp, #0
 8006fac:	60f8      	str	r0, [r7, #12]
 8006fae:	60b9      	str	r1, [r7, #8]
 8006fb0:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <QSPI_Config+0x28>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006fc0:	d005      	beq.n	8006fce <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3a01      	subs	r2, #1
 8006fcc:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	699b      	ldr	r3, [r3, #24]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f000 80b9 	beq.w	800714a <QSPI_Config+0x1a4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	6a1b      	ldr	r3, [r3, #32]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d05f      	beq.n	80070a0 <QSPI_Config+0xfa>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	6892      	ldr	r2, [r2, #8]
 8006fe8:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	69db      	ldr	r3, [r3, #28]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d031      	beq.n	8007056 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007000:	431a      	orrs	r2, r3
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	431a      	orrs	r2, r3
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	049b      	lsls	r3, r3, #18
 800700e:	431a      	orrs	r2, r3
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	431a      	orrs	r2, r3
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	6a1b      	ldr	r3, [r3, #32]
 800701a:	431a      	orrs	r2, r3
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	68db      	ldr	r3, [r3, #12]
 8007020:	431a      	orrs	r2, r3
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	431a      	orrs	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	431a      	orrs	r2, r3
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	ea42 0103 	orr.w	r1, r2, r3
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	430a      	orrs	r2, r1
 800703e:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007046:	f000 812e 	beq.w	80072a6 <QSPI_Config+0x300>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	6852      	ldr	r2, [r2, #4]
 8007052:	619a      	str	r2, [r3, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8007054:	e127      	b.n	80072a6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800705e:	431a      	orrs	r2, r3
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007064:	431a      	orrs	r2, r3
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	431a      	orrs	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	049b      	lsls	r3, r3, #18
 8007072:	431a      	orrs	r2, r3
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	431a      	orrs	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	6a1b      	ldr	r3, [r3, #32]
 800707e:	431a      	orrs	r2, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	431a      	orrs	r2, r3
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	699b      	ldr	r3, [r3, #24]
 800708a:	431a      	orrs	r2, r3
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	ea42 0103 	orr.w	r1, r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	430a      	orrs	r2, r1
 800709c:	615a      	str	r2, [r3, #20]
}
 800709e:	e102      	b.n	80072a6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d02e      	beq.n	8007106 <QSPI_Config+0x160>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b0:	431a      	orrs	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070b6:	431a      	orrs	r2, r3
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070bc:	431a      	orrs	r2, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	049b      	lsls	r3, r3, #18
 80070c4:	431a      	orrs	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	431a      	orrs	r2, r3
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	431a      	orrs	r2, r3
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	431a      	orrs	r2, r3
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	431a      	orrs	r2, r3
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	ea42 0103 	orr.w	r1, r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80070f6:	f000 80d6 	beq.w	80072a6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	6852      	ldr	r2, [r2, #4]
 8007102:	619a      	str	r2, [r3, #24]
}
 8007104:	e0cf      	b.n	80072a6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	431a      	orrs	r2, r3
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007114:	431a      	orrs	r2, r3
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	431a      	orrs	r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	049b      	lsls	r3, r3, #18
 8007122:	431a      	orrs	r2, r3
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	6a1b      	ldr	r3, [r3, #32]
 8007128:	431a      	orrs	r2, r3
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	431a      	orrs	r2, r3
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	431a      	orrs	r2, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	ea42 0103 	orr.w	r1, r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	430a      	orrs	r2, r1
 8007146:	615a      	str	r2, [r3, #20]
}
 8007148:	e0ad      	b.n	80072a6 <QSPI_Config+0x300>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d058      	beq.n	8007204 <QSPI_Config+0x25e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	6892      	ldr	r2, [r2, #8]
 800715a:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d02d      	beq.n	80071c0 <QSPI_Config+0x21a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800716c:	431a      	orrs	r2, r3
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007172:	431a      	orrs	r2, r3
 8007174:	68bb      	ldr	r3, [r7, #8]
 8007176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007178:	431a      	orrs	r2, r3
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	049b      	lsls	r3, r3, #18
 8007180:	431a      	orrs	r2, r3
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	431a      	orrs	r2, r3
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	431a      	orrs	r2, r3
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	431a      	orrs	r2, r3
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	69db      	ldr	r3, [r3, #28]
 8007198:	431a      	orrs	r2, r3
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	699b      	ldr	r3, [r3, #24]
 800719e:	ea42 0103 	orr.w	r1, r2, r3
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80071b2:	d078      	beq.n	80072a6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	6852      	ldr	r2, [r2, #4]
 80071bc:	619a      	str	r2, [r3, #24]
}
 80071be:	e072      	b.n	80072a6 <QSPI_Config+0x300>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	431a      	orrs	r2, r3
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071ce:	431a      	orrs	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	431a      	orrs	r2, r3
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	695b      	ldr	r3, [r3, #20]
 80071da:	049b      	lsls	r3, r3, #18
 80071dc:	431a      	orrs	r2, r3
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	431a      	orrs	r2, r3
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	431a      	orrs	r2, r3
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	69db      	ldr	r3, [r3, #28]
 80071ee:	431a      	orrs	r2, r3
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	ea42 0103 	orr.w	r1, r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	687a      	ldr	r2, [r7, #4]
 80071fe:	430a      	orrs	r2, r1
 8007200:	615a      	str	r2, [r3, #20]
}
 8007202:	e050      	b.n	80072a6 <QSPI_Config+0x300>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	69db      	ldr	r3, [r3, #28]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d02a      	beq.n	8007262 <QSPI_Config+0x2bc>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007214:	431a      	orrs	r2, r3
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721a:	431a      	orrs	r2, r3
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007220:	431a      	orrs	r2, r3
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	049b      	lsls	r3, r3, #18
 8007228:	431a      	orrs	r2, r3
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	6a1b      	ldr	r3, [r3, #32]
 800722e:	431a      	orrs	r2, r3
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	431a      	orrs	r2, r3
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	431a      	orrs	r2, r3
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	ea42 0103 	orr.w	r1, r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	687a      	ldr	r2, [r7, #4]
 800724a:	430a      	orrs	r2, r1
 800724c:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007254:	d027      	beq.n	80072a6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	6852      	ldr	r2, [r2, #4]
 800725e:	619a      	str	r2, [r3, #24]
}
 8007260:	e021      	b.n	80072a6 <QSPI_Config+0x300>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	d01d      	beq.n	80072a6 <QSPI_Config+0x300>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007272:	431a      	orrs	r2, r3
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007278:	431a      	orrs	r2, r3
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727e:	431a      	orrs	r2, r3
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	049b      	lsls	r3, r3, #18
 8007286:	431a      	orrs	r2, r3
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	431a      	orrs	r2, r3
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	431a      	orrs	r2, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	ea42 0103 	orr.w	r1, r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	615a      	str	r2, [r3, #20]
}
 80072a6:	bf00      	nop
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80072bc:	2300      	movs	r3, #0
 80072be:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e29b      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0301 	and.w	r3, r3, #1
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 8087 	beq.w	80073e6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072d8:	4b96      	ldr	r3, [pc, #600]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f003 030c 	and.w	r3, r3, #12
 80072e0:	2b04      	cmp	r3, #4
 80072e2:	d00c      	beq.n	80072fe <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072e4:	4b93      	ldr	r3, [pc, #588]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	f003 030c 	and.w	r3, r3, #12
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d112      	bne.n	8007316 <HAL_RCC_OscConfig+0x62>
 80072f0:	4b90      	ldr	r3, [pc, #576]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072fc:	d10b      	bne.n	8007316 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072fe:	4b8d      	ldr	r3, [pc, #564]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d06c      	beq.n	80073e4 <HAL_RCC_OscConfig+0x130>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d168      	bne.n	80073e4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007312:	2301      	movs	r3, #1
 8007314:	e275      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731e:	d106      	bne.n	800732e <HAL_RCC_OscConfig+0x7a>
 8007320:	4b84      	ldr	r3, [pc, #528]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a83      	ldr	r2, [pc, #524]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007326:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	e02e      	b.n	800738c <HAL_RCC_OscConfig+0xd8>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10c      	bne.n	8007350 <HAL_RCC_OscConfig+0x9c>
 8007336:	4b7f      	ldr	r3, [pc, #508]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a7e      	ldr	r2, [pc, #504]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 800733c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007340:	6013      	str	r3, [r2, #0]
 8007342:	4b7c      	ldr	r3, [pc, #496]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a7b      	ldr	r2, [pc, #492]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007348:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800734c:	6013      	str	r3, [r2, #0]
 800734e:	e01d      	b.n	800738c <HAL_RCC_OscConfig+0xd8>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007358:	d10c      	bne.n	8007374 <HAL_RCC_OscConfig+0xc0>
 800735a:	4b76      	ldr	r3, [pc, #472]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a75      	ldr	r2, [pc, #468]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	4b73      	ldr	r3, [pc, #460]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a72      	ldr	r2, [pc, #456]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 800736c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	e00b      	b.n	800738c <HAL_RCC_OscConfig+0xd8>
 8007374:	4b6f      	ldr	r3, [pc, #444]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a6e      	ldr	r2, [pc, #440]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 800737a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800737e:	6013      	str	r3, [r2, #0]
 8007380:	4b6c      	ldr	r3, [pc, #432]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a6b      	ldr	r2, [pc, #428]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007386:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800738a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d013      	beq.n	80073bc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007394:	f7fb fb5c 	bl	8002a50 <HAL_GetTick>
 8007398:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800739a:	e008      	b.n	80073ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800739c:	f7fb fb58 	bl	8002a50 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b64      	cmp	r3, #100	; 0x64
 80073a8:	d901      	bls.n	80073ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073aa:	2303      	movs	r3, #3
 80073ac:	e229      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073ae:	4b61      	ldr	r3, [pc, #388]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0f0      	beq.n	800739c <HAL_RCC_OscConfig+0xe8>
 80073ba:	e014      	b.n	80073e6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073bc:	f7fb fb48 	bl	8002a50 <HAL_GetTick>
 80073c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073c2:	e008      	b.n	80073d6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073c4:	f7fb fb44 	bl	8002a50 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	2b64      	cmp	r3, #100	; 0x64
 80073d0:	d901      	bls.n	80073d6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80073d2:	2303      	movs	r3, #3
 80073d4:	e215      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073d6:	4b57      	ldr	r3, [pc, #348]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d1f0      	bne.n	80073c4 <HAL_RCC_OscConfig+0x110>
 80073e2:	e000      	b.n	80073e6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0302 	and.w	r3, r3, #2
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d069      	beq.n	80074c6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073f2:	4b50      	ldr	r3, [pc, #320]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	f003 030c 	and.w	r3, r3, #12
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00b      	beq.n	8007416 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073fe:	4b4d      	ldr	r3, [pc, #308]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 030c 	and.w	r3, r3, #12
 8007406:	2b08      	cmp	r3, #8
 8007408:	d11c      	bne.n	8007444 <HAL_RCC_OscConfig+0x190>
 800740a:	4b4a      	ldr	r3, [pc, #296]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d116      	bne.n	8007444 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007416:	4b47      	ldr	r3, [pc, #284]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b00      	cmp	r3, #0
 8007420:	d005      	beq.n	800742e <HAL_RCC_OscConfig+0x17a>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d001      	beq.n	800742e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e1e9      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800742e:	4b41      	ldr	r3, [pc, #260]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	00db      	lsls	r3, r3, #3
 800743c:	493d      	ldr	r1, [pc, #244]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 800743e:	4313      	orrs	r3, r2
 8007440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007442:	e040      	b.n	80074c6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d023      	beq.n	8007494 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800744c:	4b39      	ldr	r3, [pc, #228]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a38      	ldr	r2, [pc, #224]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007452:	f043 0301 	orr.w	r3, r3, #1
 8007456:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007458:	f7fb fafa 	bl	8002a50 <HAL_GetTick>
 800745c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745e:	e008      	b.n	8007472 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007460:	f7fb faf6 	bl	8002a50 <HAL_GetTick>
 8007464:	4602      	mov	r2, r0
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	1ad3      	subs	r3, r2, r3
 800746a:	2b02      	cmp	r3, #2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e1c7      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007472:	4b30      	ldr	r3, [pc, #192]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0f0      	beq.n	8007460 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747e:	4b2d      	ldr	r3, [pc, #180]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	691b      	ldr	r3, [r3, #16]
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4929      	ldr	r1, [pc, #164]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 800748e:	4313      	orrs	r3, r2
 8007490:	600b      	str	r3, [r1, #0]
 8007492:	e018      	b.n	80074c6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007494:	4b27      	ldr	r3, [pc, #156]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a26      	ldr	r2, [pc, #152]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a0:	f7fb fad6 	bl	8002a50 <HAL_GetTick>
 80074a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074a6:	e008      	b.n	80074ba <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074a8:	f7fb fad2 	bl	8002a50 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	2b02      	cmp	r3, #2
 80074b4:	d901      	bls.n	80074ba <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80074b6:	2303      	movs	r3, #3
 80074b8:	e1a3      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074ba:	4b1e      	ldr	r3, [pc, #120]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1f0      	bne.n	80074a8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d038      	beq.n	8007544 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d019      	beq.n	800750e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074da:	4b16      	ldr	r3, [pc, #88]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 80074dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074de:	4a15      	ldr	r2, [pc, #84]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 80074e0:	f043 0301 	orr.w	r3, r3, #1
 80074e4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074e6:	f7fb fab3 	bl	8002a50 <HAL_GetTick>
 80074ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074ec:	e008      	b.n	8007500 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ee:	f7fb faaf 	bl	8002a50 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d901      	bls.n	8007500 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e180      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007500:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007504:	f003 0302 	and.w	r3, r3, #2
 8007508:	2b00      	cmp	r3, #0
 800750a:	d0f0      	beq.n	80074ee <HAL_RCC_OscConfig+0x23a>
 800750c:	e01a      	b.n	8007544 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007512:	4a08      	ldr	r2, [pc, #32]	; (8007534 <HAL_RCC_OscConfig+0x280>)
 8007514:	f023 0301 	bic.w	r3, r3, #1
 8007518:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751a:	f7fb fa99 	bl	8002a50 <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007520:	e00a      	b.n	8007538 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007522:	f7fb fa95 	bl	8002a50 <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d903      	bls.n	8007538 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e166      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
 8007534:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007538:	4b92      	ldr	r3, [pc, #584]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 800753a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b00      	cmp	r3, #0
 8007542:	d1ee      	bne.n	8007522 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0304 	and.w	r3, r3, #4
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 80a4 	beq.w	800769a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007552:	4b8c      	ldr	r3, [pc, #560]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10d      	bne.n	800757a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800755e:	4b89      	ldr	r3, [pc, #548]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	4a88      	ldr	r2, [pc, #544]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007568:	6413      	str	r3, [r2, #64]	; 0x40
 800756a:	4b86      	ldr	r3, [pc, #536]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007572:	60bb      	str	r3, [r7, #8]
 8007574:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007576:	2301      	movs	r3, #1
 8007578:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800757a:	4b83      	ldr	r3, [pc, #524]	; (8007788 <HAL_RCC_OscConfig+0x4d4>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007582:	2b00      	cmp	r3, #0
 8007584:	d118      	bne.n	80075b8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007586:	4b80      	ldr	r3, [pc, #512]	; (8007788 <HAL_RCC_OscConfig+0x4d4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a7f      	ldr	r2, [pc, #508]	; (8007788 <HAL_RCC_OscConfig+0x4d4>)
 800758c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007590:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007592:	f7fb fa5d 	bl	8002a50 <HAL_GetTick>
 8007596:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007598:	e008      	b.n	80075ac <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800759a:	f7fb fa59 	bl	8002a50 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b64      	cmp	r3, #100	; 0x64
 80075a6:	d901      	bls.n	80075ac <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e12a      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075ac:	4b76      	ldr	r3, [pc, #472]	; (8007788 <HAL_RCC_OscConfig+0x4d4>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0f0      	beq.n	800759a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d106      	bne.n	80075ce <HAL_RCC_OscConfig+0x31a>
 80075c0:	4b70      	ldr	r3, [pc, #448]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80075c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c4:	4a6f      	ldr	r2, [pc, #444]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80075c6:	f043 0301 	orr.w	r3, r3, #1
 80075ca:	6713      	str	r3, [r2, #112]	; 0x70
 80075cc:	e02d      	b.n	800762a <HAL_RCC_OscConfig+0x376>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10c      	bne.n	80075f0 <HAL_RCC_OscConfig+0x33c>
 80075d6:	4b6b      	ldr	r3, [pc, #428]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80075d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075da:	4a6a      	ldr	r2, [pc, #424]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80075dc:	f023 0301 	bic.w	r3, r3, #1
 80075e0:	6713      	str	r3, [r2, #112]	; 0x70
 80075e2:	4b68      	ldr	r3, [pc, #416]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80075e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e6:	4a67      	ldr	r2, [pc, #412]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80075e8:	f023 0304 	bic.w	r3, r3, #4
 80075ec:	6713      	str	r3, [r2, #112]	; 0x70
 80075ee:	e01c      	b.n	800762a <HAL_RCC_OscConfig+0x376>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	2b05      	cmp	r3, #5
 80075f6:	d10c      	bne.n	8007612 <HAL_RCC_OscConfig+0x35e>
 80075f8:	4b62      	ldr	r3, [pc, #392]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80075fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fc:	4a61      	ldr	r2, [pc, #388]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80075fe:	f043 0304 	orr.w	r3, r3, #4
 8007602:	6713      	str	r3, [r2, #112]	; 0x70
 8007604:	4b5f      	ldr	r3, [pc, #380]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007608:	4a5e      	ldr	r2, [pc, #376]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 800760a:	f043 0301 	orr.w	r3, r3, #1
 800760e:	6713      	str	r3, [r2, #112]	; 0x70
 8007610:	e00b      	b.n	800762a <HAL_RCC_OscConfig+0x376>
 8007612:	4b5c      	ldr	r3, [pc, #368]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007616:	4a5b      	ldr	r2, [pc, #364]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007618:	f023 0301 	bic.w	r3, r3, #1
 800761c:	6713      	str	r3, [r2, #112]	; 0x70
 800761e:	4b59      	ldr	r3, [pc, #356]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007622:	4a58      	ldr	r2, [pc, #352]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007624:	f023 0304 	bic.w	r3, r3, #4
 8007628:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d015      	beq.n	800765e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007632:	f7fb fa0d 	bl	8002a50 <HAL_GetTick>
 8007636:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007638:	e00a      	b.n	8007650 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800763a:	f7fb fa09 	bl	8002a50 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	f241 3288 	movw	r2, #5000	; 0x1388
 8007648:	4293      	cmp	r3, r2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e0d8      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007650:	4b4c      	ldr	r3, [pc, #304]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d0ee      	beq.n	800763a <HAL_RCC_OscConfig+0x386>
 800765c:	e014      	b.n	8007688 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800765e:	f7fb f9f7 	bl	8002a50 <HAL_GetTick>
 8007662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007664:	e00a      	b.n	800767c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007666:	f7fb f9f3 	bl	8002a50 <HAL_GetTick>
 800766a:	4602      	mov	r2, r0
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	1ad3      	subs	r3, r2, r3
 8007670:	f241 3288 	movw	r2, #5000	; 0x1388
 8007674:	4293      	cmp	r3, r2
 8007676:	d901      	bls.n	800767c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007678:	2303      	movs	r3, #3
 800767a:	e0c2      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800767c:	4b41      	ldr	r3, [pc, #260]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 800767e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007680:	f003 0302 	and.w	r3, r3, #2
 8007684:	2b00      	cmp	r3, #0
 8007686:	d1ee      	bne.n	8007666 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	2b01      	cmp	r3, #1
 800768c:	d105      	bne.n	800769a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800768e:	4b3d      	ldr	r3, [pc, #244]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007692:	4a3c      	ldr	r2, [pc, #240]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007698:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80ae 	beq.w	8007800 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80076a4:	4b37      	ldr	r3, [pc, #220]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	f003 030c 	and.w	r3, r3, #12
 80076ac:	2b08      	cmp	r3, #8
 80076ae:	d06d      	beq.n	800778c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	2b02      	cmp	r3, #2
 80076b6:	d14b      	bne.n	8007750 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076b8:	4b32      	ldr	r3, [pc, #200]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a31      	ldr	r2, [pc, #196]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80076be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076c4:	f7fb f9c4 	bl	8002a50 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076cc:	f7fb f9c0 	bl	8002a50 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b02      	cmp	r3, #2
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e091      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076de:	4b29      	ldr	r3, [pc, #164]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	69da      	ldr	r2, [r3, #28]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a1b      	ldr	r3, [r3, #32]
 80076f2:	431a      	orrs	r2, r3
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	019b      	lsls	r3, r3, #6
 80076fa:	431a      	orrs	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007700:	085b      	lsrs	r3, r3, #1
 8007702:	3b01      	subs	r3, #1
 8007704:	041b      	lsls	r3, r3, #16
 8007706:	431a      	orrs	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800770c:	061b      	lsls	r3, r3, #24
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007714:	071b      	lsls	r3, r3, #28
 8007716:	491b      	ldr	r1, [pc, #108]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007718:	4313      	orrs	r3, r2
 800771a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800771c:	4b19      	ldr	r3, [pc, #100]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a18      	ldr	r2, [pc, #96]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007722:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007728:	f7fb f992 	bl	8002a50 <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007730:	f7fb f98e 	bl	8002a50 <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b02      	cmp	r3, #2
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e05f      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007742:	4b10      	ldr	r3, [pc, #64]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d0f0      	beq.n	8007730 <HAL_RCC_OscConfig+0x47c>
 800774e:	e057      	b.n	8007800 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007750:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a0b      	ldr	r2, [pc, #44]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007756:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800775a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775c:	f7fb f978 	bl	8002a50 <HAL_GetTick>
 8007760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007762:	e008      	b.n	8007776 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007764:	f7fb f974 	bl	8002a50 <HAL_GetTick>
 8007768:	4602      	mov	r2, r0
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	2b02      	cmp	r3, #2
 8007770:	d901      	bls.n	8007776 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8007772:	2303      	movs	r3, #3
 8007774:	e045      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007776:	4b03      	ldr	r3, [pc, #12]	; (8007784 <HAL_RCC_OscConfig+0x4d0>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1f0      	bne.n	8007764 <HAL_RCC_OscConfig+0x4b0>
 8007782:	e03d      	b.n	8007800 <HAL_RCC_OscConfig+0x54c>
 8007784:	40023800 	.word	0x40023800
 8007788:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800778c:	4b1f      	ldr	r3, [pc, #124]	; (800780c <HAL_RCC_OscConfig+0x558>)
 800778e:	685b      	ldr	r3, [r3, #4]
 8007790:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d030      	beq.n	80077fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d129      	bne.n	80077fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d122      	bne.n	80077fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80077bc:	4013      	ands	r3, r2
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077c2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d119      	bne.n	80077fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d2:	085b      	lsrs	r3, r3, #1
 80077d4:	3b01      	subs	r3, #1
 80077d6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077d8:	429a      	cmp	r2, r3
 80077da:	d10f      	bne.n	80077fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d107      	bne.n	80077fc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d001      	beq.n	8007800 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e000      	b.n	8007802 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3718      	adds	r7, #24
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	40023800 	.word	0x40023800

08007810 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
 8007818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800781a:	2300      	movs	r3, #0
 800781c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e0d0      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007828:	4b6a      	ldr	r3, [pc, #424]	; (80079d4 <HAL_RCC_ClockConfig+0x1c4>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f003 030f 	and.w	r3, r3, #15
 8007830:	683a      	ldr	r2, [r7, #0]
 8007832:	429a      	cmp	r2, r3
 8007834:	d910      	bls.n	8007858 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007836:	4b67      	ldr	r3, [pc, #412]	; (80079d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f023 020f 	bic.w	r2, r3, #15
 800783e:	4965      	ldr	r1, [pc, #404]	; (80079d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	4313      	orrs	r3, r2
 8007844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007846:	4b63      	ldr	r3, [pc, #396]	; (80079d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f003 030f 	and.w	r3, r3, #15
 800784e:	683a      	ldr	r2, [r7, #0]
 8007850:	429a      	cmp	r2, r3
 8007852:	d001      	beq.n	8007858 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e0b8      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f003 0302 	and.w	r3, r3, #2
 8007860:	2b00      	cmp	r3, #0
 8007862:	d020      	beq.n	80078a6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f003 0304 	and.w	r3, r3, #4
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007870:	4b59      	ldr	r3, [pc, #356]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	4a58      	ldr	r2, [pc, #352]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007876:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800787a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 0308 	and.w	r3, r3, #8
 8007884:	2b00      	cmp	r3, #0
 8007886:	d005      	beq.n	8007894 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007888:	4b53      	ldr	r3, [pc, #332]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	4a52      	ldr	r2, [pc, #328]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 800788e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007892:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007894:	4b50      	ldr	r3, [pc, #320]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	494d      	ldr	r1, [pc, #308]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0301 	and.w	r3, r3, #1
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d040      	beq.n	8007934 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b01      	cmp	r3, #1
 80078b8:	d107      	bne.n	80078ca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078ba:	4b47      	ldr	r3, [pc, #284]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d115      	bne.n	80078f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e07f      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d107      	bne.n	80078e2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80078d2:	4b41      	ldr	r3, [pc, #260]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d109      	bne.n	80078f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078de:	2301      	movs	r3, #1
 80078e0:	e073      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078e2:	4b3d      	ldr	r3, [pc, #244]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0302 	and.w	r3, r3, #2
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e06b      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078f2:	4b39      	ldr	r3, [pc, #228]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f023 0203 	bic.w	r2, r3, #3
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	4936      	ldr	r1, [pc, #216]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007900:	4313      	orrs	r3, r2
 8007902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007904:	f7fb f8a4 	bl	8002a50 <HAL_GetTick>
 8007908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800790a:	e00a      	b.n	8007922 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800790c:	f7fb f8a0 	bl	8002a50 <HAL_GetTick>
 8007910:	4602      	mov	r2, r0
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	1ad3      	subs	r3, r2, r3
 8007916:	f241 3288 	movw	r2, #5000	; 0x1388
 800791a:	4293      	cmp	r3, r2
 800791c:	d901      	bls.n	8007922 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e053      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007922:	4b2d      	ldr	r3, [pc, #180]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	f003 020c 	and.w	r2, r3, #12
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	429a      	cmp	r2, r3
 8007932:	d1eb      	bne.n	800790c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007934:	4b27      	ldr	r3, [pc, #156]	; (80079d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	683a      	ldr	r2, [r7, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d210      	bcs.n	8007964 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007942:	4b24      	ldr	r3, [pc, #144]	; (80079d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f023 020f 	bic.w	r2, r3, #15
 800794a:	4922      	ldr	r1, [pc, #136]	; (80079d4 <HAL_RCC_ClockConfig+0x1c4>)
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	4313      	orrs	r3, r2
 8007950:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007952:	4b20      	ldr	r3, [pc, #128]	; (80079d4 <HAL_RCC_ClockConfig+0x1c4>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	429a      	cmp	r2, r3
 800795e:	d001      	beq.n	8007964 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007960:	2301      	movs	r3, #1
 8007962:	e032      	b.n	80079ca <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d008      	beq.n	8007982 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007970:	4b19      	ldr	r3, [pc, #100]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	4916      	ldr	r1, [pc, #88]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 800797e:	4313      	orrs	r3, r2
 8007980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d009      	beq.n	80079a2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800798e:	4b12      	ldr	r3, [pc, #72]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 8007990:	689b      	ldr	r3, [r3, #8]
 8007992:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	490e      	ldr	r1, [pc, #56]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079a2:	f000 f821 	bl	80079e8 <HAL_RCC_GetSysClockFreq>
 80079a6:	4602      	mov	r2, r0
 80079a8:	4b0b      	ldr	r3, [pc, #44]	; (80079d8 <HAL_RCC_ClockConfig+0x1c8>)
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	091b      	lsrs	r3, r3, #4
 80079ae:	f003 030f 	and.w	r3, r3, #15
 80079b2:	490a      	ldr	r1, [pc, #40]	; (80079dc <HAL_RCC_ClockConfig+0x1cc>)
 80079b4:	5ccb      	ldrb	r3, [r1, r3]
 80079b6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ba:	4a09      	ldr	r2, [pc, #36]	; (80079e0 <HAL_RCC_ClockConfig+0x1d0>)
 80079bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80079be:	4b09      	ldr	r3, [pc, #36]	; (80079e4 <HAL_RCC_ClockConfig+0x1d4>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f7fa fbb8 	bl	8002138 <HAL_InitTick>

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	40023c00 	.word	0x40023c00
 80079d8:	40023800 	.word	0x40023800
 80079dc:	0802f4c4 	.word	0x0802f4c4
 80079e0:	20000014 	.word	0x20000014
 80079e4:	20000018 	.word	0x20000018

080079e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079ec:	b090      	sub	sp, #64	; 0x40
 80079ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80079f0:	2300      	movs	r3, #0
 80079f2:	637b      	str	r3, [r7, #52]	; 0x34
 80079f4:	2300      	movs	r3, #0
 80079f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079f8:	2300      	movs	r3, #0
 80079fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a00:	4b59      	ldr	r3, [pc, #356]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a02:	689b      	ldr	r3, [r3, #8]
 8007a04:	f003 030c 	and.w	r3, r3, #12
 8007a08:	2b08      	cmp	r3, #8
 8007a0a:	d00d      	beq.n	8007a28 <HAL_RCC_GetSysClockFreq+0x40>
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	f200 80a1 	bhi.w	8007b54 <HAL_RCC_GetSysClockFreq+0x16c>
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d002      	beq.n	8007a1c <HAL_RCC_GetSysClockFreq+0x34>
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	d003      	beq.n	8007a22 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a1a:	e09b      	b.n	8007b54 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a1c:	4b53      	ldr	r3, [pc, #332]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8007a1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a20:	e09b      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a22:	4b53      	ldr	r3, [pc, #332]	; (8007b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007a26:	e098      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a28:	4b4f      	ldr	r3, [pc, #316]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007a32:	4b4d      	ldr	r3, [pc, #308]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d028      	beq.n	8007a90 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a3e:	4b4a      	ldr	r3, [pc, #296]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	099b      	lsrs	r3, r3, #6
 8007a44:	2200      	movs	r2, #0
 8007a46:	623b      	str	r3, [r7, #32]
 8007a48:	627a      	str	r2, [r7, #36]	; 0x24
 8007a4a:	6a3b      	ldr	r3, [r7, #32]
 8007a4c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007a50:	2100      	movs	r1, #0
 8007a52:	4b47      	ldr	r3, [pc, #284]	; (8007b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a54:	fb03 f201 	mul.w	r2, r3, r1
 8007a58:	2300      	movs	r3, #0
 8007a5a:	fb00 f303 	mul.w	r3, r0, r3
 8007a5e:	4413      	add	r3, r2
 8007a60:	4a43      	ldr	r2, [pc, #268]	; (8007b70 <HAL_RCC_GetSysClockFreq+0x188>)
 8007a62:	fba0 1202 	umull	r1, r2, r0, r2
 8007a66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a68:	460a      	mov	r2, r1
 8007a6a:	62ba      	str	r2, [r7, #40]	; 0x28
 8007a6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a6e:	4413      	add	r3, r2
 8007a70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a74:	2200      	movs	r2, #0
 8007a76:	61bb      	str	r3, [r7, #24]
 8007a78:	61fa      	str	r2, [r7, #28]
 8007a7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a7e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007a82:	f7f8 fc8f 	bl	80003a4 <__aeabi_uldivmod>
 8007a86:	4602      	mov	r2, r0
 8007a88:	460b      	mov	r3, r1
 8007a8a:	4613      	mov	r3, r2
 8007a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a8e:	e053      	b.n	8007b38 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a90:	4b35      	ldr	r3, [pc, #212]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	099b      	lsrs	r3, r3, #6
 8007a96:	2200      	movs	r2, #0
 8007a98:	613b      	str	r3, [r7, #16]
 8007a9a:	617a      	str	r2, [r7, #20]
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007aa2:	f04f 0b00 	mov.w	fp, #0
 8007aa6:	4652      	mov	r2, sl
 8007aa8:	465b      	mov	r3, fp
 8007aaa:	f04f 0000 	mov.w	r0, #0
 8007aae:	f04f 0100 	mov.w	r1, #0
 8007ab2:	0159      	lsls	r1, r3, #5
 8007ab4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ab8:	0150      	lsls	r0, r2, #5
 8007aba:	4602      	mov	r2, r0
 8007abc:	460b      	mov	r3, r1
 8007abe:	ebb2 080a 	subs.w	r8, r2, sl
 8007ac2:	eb63 090b 	sbc.w	r9, r3, fp
 8007ac6:	f04f 0200 	mov.w	r2, #0
 8007aca:	f04f 0300 	mov.w	r3, #0
 8007ace:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007ad2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007ad6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007ada:	ebb2 0408 	subs.w	r4, r2, r8
 8007ade:	eb63 0509 	sbc.w	r5, r3, r9
 8007ae2:	f04f 0200 	mov.w	r2, #0
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	00eb      	lsls	r3, r5, #3
 8007aec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007af0:	00e2      	lsls	r2, r4, #3
 8007af2:	4614      	mov	r4, r2
 8007af4:	461d      	mov	r5, r3
 8007af6:	eb14 030a 	adds.w	r3, r4, sl
 8007afa:	603b      	str	r3, [r7, #0]
 8007afc:	eb45 030b 	adc.w	r3, r5, fp
 8007b00:	607b      	str	r3, [r7, #4]
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b0e:	4629      	mov	r1, r5
 8007b10:	028b      	lsls	r3, r1, #10
 8007b12:	4621      	mov	r1, r4
 8007b14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b18:	4621      	mov	r1, r4
 8007b1a:	028a      	lsls	r2, r1, #10
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	4619      	mov	r1, r3
 8007b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b22:	2200      	movs	r2, #0
 8007b24:	60bb      	str	r3, [r7, #8]
 8007b26:	60fa      	str	r2, [r7, #12]
 8007b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b2c:	f7f8 fc3a 	bl	80003a4 <__aeabi_uldivmod>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	4613      	mov	r3, r2
 8007b36:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007b38:	4b0b      	ldr	r3, [pc, #44]	; (8007b68 <HAL_RCC_GetSysClockFreq+0x180>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	0c1b      	lsrs	r3, r3, #16
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	3301      	adds	r3, #1
 8007b44:	005b      	lsls	r3, r3, #1
 8007b46:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007b48:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b50:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b52:	e002      	b.n	8007b5a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b54:	4b05      	ldr	r3, [pc, #20]	; (8007b6c <HAL_RCC_GetSysClockFreq+0x184>)
 8007b56:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3740      	adds	r7, #64	; 0x40
 8007b60:	46bd      	mov	sp, r7
 8007b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b66:	bf00      	nop
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	00f42400 	.word	0x00f42400
 8007b70:	017d7840 	.word	0x017d7840

08007b74 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007b78:	4b03      	ldr	r3, [pc, #12]	; (8007b88 <HAL_RCC_GetHCLKFreq+0x14>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr
 8007b86:	bf00      	nop
 8007b88:	20000014 	.word	0x20000014

08007b8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007b90:	f7ff fff0 	bl	8007b74 <HAL_RCC_GetHCLKFreq>
 8007b94:	4602      	mov	r2, r0
 8007b96:	4b05      	ldr	r3, [pc, #20]	; (8007bac <HAL_RCC_GetPCLK1Freq+0x20>)
 8007b98:	689b      	ldr	r3, [r3, #8]
 8007b9a:	0a9b      	lsrs	r3, r3, #10
 8007b9c:	f003 0307 	and.w	r3, r3, #7
 8007ba0:	4903      	ldr	r1, [pc, #12]	; (8007bb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ba2:	5ccb      	ldrb	r3, [r1, r3]
 8007ba4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	40023800 	.word	0x40023800
 8007bb0:	0802f4d4 	.word	0x0802f4d4

08007bb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	220f      	movs	r2, #15
 8007bc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007bc4:	4b12      	ldr	r3, [pc, #72]	; (8007c10 <HAL_RCC_GetClockConfig+0x5c>)
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	f003 0203 	and.w	r2, r3, #3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007bd0:	4b0f      	ldr	r3, [pc, #60]	; (8007c10 <HAL_RCC_GetClockConfig+0x5c>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007bdc:	4b0c      	ldr	r3, [pc, #48]	; (8007c10 <HAL_RCC_GetClockConfig+0x5c>)
 8007bde:	689b      	ldr	r3, [r3, #8]
 8007be0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007be8:	4b09      	ldr	r3, [pc, #36]	; (8007c10 <HAL_RCC_GetClockConfig+0x5c>)
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	08db      	lsrs	r3, r3, #3
 8007bee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007bf6:	4b07      	ldr	r3, [pc, #28]	; (8007c14 <HAL_RCC_GetClockConfig+0x60>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 020f 	and.w	r2, r3, #15
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	601a      	str	r2, [r3, #0]
}
 8007c02:	bf00      	nop
 8007c04:	370c      	adds	r7, #12
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
 8007c0e:	bf00      	nop
 8007c10:	40023800 	.word	0x40023800
 8007c14:	40023c00 	.word	0x40023c00

08007c18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b088      	sub	sp, #32
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c24:	2300      	movs	r3, #0
 8007c26:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0301 	and.w	r3, r3, #1
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d012      	beq.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c40:	4b69      	ldr	r3, [pc, #420]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	4a68      	ldr	r2, [pc, #416]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c46:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c4a:	6093      	str	r3, [r2, #8]
 8007c4c:	4b66      	ldr	r3, [pc, #408]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c54:	4964      	ldr	r1, [pc, #400]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d101      	bne.n	8007c66 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007c62:	2301      	movs	r3, #1
 8007c64:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d017      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c72:	4b5d      	ldr	r3, [pc, #372]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c80:	4959      	ldr	r1, [pc, #356]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c90:	d101      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007c92:	2301      	movs	r3, #1
 8007c94:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d017      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007cae:	4b4e      	ldr	r3, [pc, #312]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cbc:	494a      	ldr	r1, [pc, #296]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ccc:	d101      	bne.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d101      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007cea:	2301      	movs	r3, #1
 8007cec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0320 	and.w	r3, r3, #32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 808b 	beq.w	8007e12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007cfc:	4b3a      	ldr	r3, [pc, #232]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d00:	4a39      	ldr	r2, [pc, #228]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d06:	6413      	str	r3, [r2, #64]	; 0x40
 8007d08:	4b37      	ldr	r3, [pc, #220]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d10:	60bb      	str	r3, [r7, #8]
 8007d12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d14:	4b35      	ldr	r3, [pc, #212]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a34      	ldr	r2, [pc, #208]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d20:	f7fa fe96 	bl	8002a50 <HAL_GetTick>
 8007d24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d26:	e008      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d28:	f7fa fe92 	bl	8002a50 <HAL_GetTick>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	2b64      	cmp	r3, #100	; 0x64
 8007d34:	d901      	bls.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007d36:	2303      	movs	r3, #3
 8007d38:	e38f      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d3a:	4b2c      	ldr	r3, [pc, #176]	; (8007dec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0f0      	beq.n	8007d28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d46:	4b28      	ldr	r3, [pc, #160]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d035      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d5e:	693a      	ldr	r2, [r7, #16]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d02e      	beq.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d64:	4b20      	ldr	r3, [pc, #128]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d6e:	4b1e      	ldr	r3, [pc, #120]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d72:	4a1d      	ldr	r2, [pc, #116]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d7a:	4b1b      	ldr	r3, [pc, #108]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7e:	4a1a      	ldr	r2, [pc, #104]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d86:	4a18      	ldr	r2, [pc, #96]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d8c:	4b16      	ldr	r3, [pc, #88]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d90:	f003 0301 	and.w	r3, r3, #1
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d114      	bne.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d98:	f7fa fe5a 	bl	8002a50 <HAL_GetTick>
 8007d9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d9e:	e00a      	b.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007da0:	f7fa fe56 	bl	8002a50 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d901      	bls.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007db2:	2303      	movs	r3, #3
 8007db4:	e351      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007db6:	4b0c      	ldr	r3, [pc, #48]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dba:	f003 0302 	and.w	r3, r3, #2
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d0ee      	beq.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dce:	d111      	bne.n	8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007dd0:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007ddc:	4b04      	ldr	r3, [pc, #16]	; (8007df0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007dde:	400b      	ands	r3, r1
 8007de0:	4901      	ldr	r1, [pc, #4]	; (8007de8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	608b      	str	r3, [r1, #8]
 8007de6:	e00b      	b.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007de8:	40023800 	.word	0x40023800
 8007dec:	40007000 	.word	0x40007000
 8007df0:	0ffffcff 	.word	0x0ffffcff
 8007df4:	4bac      	ldr	r3, [pc, #688]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	4aab      	ldr	r2, [pc, #684]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007dfa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007dfe:	6093      	str	r3, [r2, #8]
 8007e00:	4ba9      	ldr	r3, [pc, #676]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e0c:	49a6      	ldr	r1, [pc, #664]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f003 0310 	and.w	r3, r3, #16
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d010      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e1e:	4ba2      	ldr	r3, [pc, #648]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e24:	4aa0      	ldr	r2, [pc, #640]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007e2e:	4b9e      	ldr	r3, [pc, #632]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	499b      	ldr	r1, [pc, #620]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d00a      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e4c:	4b96      	ldr	r3, [pc, #600]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5a:	4993      	ldr	r1, [pc, #588]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e5c:	4313      	orrs	r3, r2
 8007e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00a      	beq.n	8007e84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e6e:	4b8e      	ldr	r3, [pc, #568]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e7c:	498a      	ldr	r1, [pc, #552]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00a      	beq.n	8007ea6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e90:	4b85      	ldr	r3, [pc, #532]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e9e:	4982      	ldr	r1, [pc, #520]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d00a      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007eb2:	4b7d      	ldr	r3, [pc, #500]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec0:	4979      	ldr	r1, [pc, #484]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00a      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ed4:	4b74      	ldr	r3, [pc, #464]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eda:	f023 0203 	bic.w	r2, r3, #3
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee2:	4971      	ldr	r1, [pc, #452]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d00a      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007ef6:	4b6c      	ldr	r3, [pc, #432]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efc:	f023 020c 	bic.w	r2, r3, #12
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f04:	4968      	ldr	r1, [pc, #416]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00a      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f18:	4b63      	ldr	r3, [pc, #396]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f26:	4960      	ldr	r1, [pc, #384]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f3a:	4b5b      	ldr	r3, [pc, #364]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f48:	4957      	ldr	r1, [pc, #348]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00a      	beq.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f5c:	4b52      	ldr	r3, [pc, #328]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f6a:	494f      	ldr	r1, [pc, #316]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d00a      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f7e:	4b4a      	ldr	r3, [pc, #296]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f8c:	4946      	ldr	r1, [pc, #280]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00a      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007fa0:	4b41      	ldr	r3, [pc, #260]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fae:	493e      	ldr	r1, [pc, #248]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d00a      	beq.n	8007fd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007fc2:	4b39      	ldr	r3, [pc, #228]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd0:	4935      	ldr	r1, [pc, #212]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00a      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007fe4:	4b30      	ldr	r3, [pc, #192]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ff2:	492d      	ldr	r1, [pc, #180]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d011      	beq.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008006:	4b28      	ldr	r3, [pc, #160]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008014:	4924      	ldr	r1, [pc, #144]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008016:	4313      	orrs	r3, r2
 8008018:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008024:	d101      	bne.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008026:	2301      	movs	r3, #1
 8008028:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f003 0308 	and.w	r3, r3, #8
 8008032:	2b00      	cmp	r3, #0
 8008034:	d001      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008036:	2301      	movs	r3, #1
 8008038:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008046:	4b18      	ldr	r3, [pc, #96]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008054:	4914      	ldr	r1, [pc, #80]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8008056:	4313      	orrs	r3, r2
 8008058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d00b      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008068:	4b0f      	ldr	r3, [pc, #60]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800806a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008078:	490b      	ldr	r1, [pc, #44]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800807a:	4313      	orrs	r3, r2
 800807c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00f      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800808c:	4b06      	ldr	r3, [pc, #24]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800808e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008092:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800809c:	4902      	ldr	r1, [pc, #8]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800809e:	4313      	orrs	r3, r2
 80080a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80080a4:	e002      	b.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x494>
 80080a6:	bf00      	nop
 80080a8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d00b      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080b8:	4b8a      	ldr	r3, [pc, #552]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080c8:	4986      	ldr	r1, [pc, #536]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080ca:	4313      	orrs	r3, r2
 80080cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d00b      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80080dc:	4b81      	ldr	r3, [pc, #516]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ec:	497d      	ldr	r1, [pc, #500]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80080ee:	4313      	orrs	r3, r2
 80080f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d006      	beq.n	8008108 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80d6 	beq.w	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008108:	4b76      	ldr	r3, [pc, #472]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a75      	ldr	r2, [pc, #468]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800810e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008112:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008114:	f7fa fc9c 	bl	8002a50 <HAL_GetTick>
 8008118:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800811a:	e008      	b.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800811c:	f7fa fc98 	bl	8002a50 <HAL_GetTick>
 8008120:	4602      	mov	r2, r0
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	1ad3      	subs	r3, r2, r3
 8008126:	2b64      	cmp	r3, #100	; 0x64
 8008128:	d901      	bls.n	800812e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800812a:	2303      	movs	r3, #3
 800812c:	e195      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800812e:	4b6d      	ldr	r3, [pc, #436]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d1f0      	bne.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0301 	and.w	r3, r3, #1
 8008142:	2b00      	cmp	r3, #0
 8008144:	d021      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800814a:	2b00      	cmp	r3, #0
 800814c:	d11d      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800814e:	4b65      	ldr	r3, [pc, #404]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008154:	0c1b      	lsrs	r3, r3, #16
 8008156:	f003 0303 	and.w	r3, r3, #3
 800815a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800815c:	4b61      	ldr	r3, [pc, #388]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800815e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008162:	0e1b      	lsrs	r3, r3, #24
 8008164:	f003 030f 	and.w	r3, r3, #15
 8008168:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	019a      	lsls	r2, r3, #6
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	041b      	lsls	r3, r3, #16
 8008174:	431a      	orrs	r2, r3
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	061b      	lsls	r3, r3, #24
 800817a:	431a      	orrs	r2, r3
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	071b      	lsls	r3, r3, #28
 8008182:	4958      	ldr	r1, [pc, #352]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008184:	4313      	orrs	r3, r2
 8008186:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008192:	2b00      	cmp	r3, #0
 8008194:	d004      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800819e:	d00a      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d02e      	beq.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081b4:	d129      	bne.n	800820a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80081b6:	4b4b      	ldr	r3, [pc, #300]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081bc:	0c1b      	lsrs	r3, r3, #16
 80081be:	f003 0303 	and.w	r3, r3, #3
 80081c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081c4:	4b47      	ldr	r3, [pc, #284]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ca:	0f1b      	lsrs	r3, r3, #28
 80081cc:	f003 0307 	and.w	r3, r3, #7
 80081d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	019a      	lsls	r2, r3, #6
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	041b      	lsls	r3, r3, #16
 80081dc:	431a      	orrs	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	68db      	ldr	r3, [r3, #12]
 80081e2:	061b      	lsls	r3, r3, #24
 80081e4:	431a      	orrs	r2, r3
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	071b      	lsls	r3, r3, #28
 80081ea:	493e      	ldr	r1, [pc, #248]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081ec:	4313      	orrs	r3, r2
 80081ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80081f2:	4b3c      	ldr	r3, [pc, #240]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80081f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f8:	f023 021f 	bic.w	r2, r3, #31
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	3b01      	subs	r3, #1
 8008202:	4938      	ldr	r1, [pc, #224]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008204:	4313      	orrs	r3, r2
 8008206:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008212:	2b00      	cmp	r3, #0
 8008214:	d01d      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008216:	4b33      	ldr	r3, [pc, #204]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800821c:	0e1b      	lsrs	r3, r3, #24
 800821e:	f003 030f 	and.w	r3, r3, #15
 8008222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008224:	4b2f      	ldr	r3, [pc, #188]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800822a:	0f1b      	lsrs	r3, r3, #28
 800822c:	f003 0307 	and.w	r3, r3, #7
 8008230:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	019a      	lsls	r2, r3, #6
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	041b      	lsls	r3, r3, #16
 800823e:	431a      	orrs	r2, r3
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	061b      	lsls	r3, r3, #24
 8008244:	431a      	orrs	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	071b      	lsls	r3, r3, #28
 800824a:	4926      	ldr	r1, [pc, #152]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800824c:	4313      	orrs	r3, r2
 800824e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d011      	beq.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	019a      	lsls	r2, r3, #6
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	041b      	lsls	r3, r3, #16
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	061b      	lsls	r3, r3, #24
 8008272:	431a      	orrs	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	071b      	lsls	r3, r3, #28
 800827a:	491a      	ldr	r1, [pc, #104]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800827c:	4313      	orrs	r3, r2
 800827e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008282:	4b18      	ldr	r3, [pc, #96]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a17      	ldr	r2, [pc, #92]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8008288:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800828c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800828e:	f7fa fbdf 	bl	8002a50 <HAL_GetTick>
 8008292:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008294:	e008      	b.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008296:	f7fa fbdb 	bl	8002a50 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	697b      	ldr	r3, [r7, #20]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b64      	cmp	r3, #100	; 0x64
 80082a2:	d901      	bls.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e0d8      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082a8:	4b0e      	ldr	r3, [pc, #56]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0f0      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	f040 80ce 	bne.w	8008458 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80082bc:	4b09      	ldr	r3, [pc, #36]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a08      	ldr	r2, [pc, #32]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80082c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082c8:	f7fa fbc2 	bl	8002a50 <HAL_GetTick>
 80082cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082ce:	e00b      	b.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80082d0:	f7fa fbbe 	bl	8002a50 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b64      	cmp	r3, #100	; 0x64
 80082dc:	d904      	bls.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e0bb      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80082e2:	bf00      	nop
 80082e4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082e8:	4b5e      	ldr	r3, [pc, #376]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80082f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082f4:	d0ec      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008306:	2b00      	cmp	r3, #0
 8008308:	d009      	beq.n	800831e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008312:	2b00      	cmp	r3, #0
 8008314:	d02e      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d12a      	bne.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800831e:	4b51      	ldr	r3, [pc, #324]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008324:	0c1b      	lsrs	r3, r3, #16
 8008326:	f003 0303 	and.w	r3, r3, #3
 800832a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800832c:	4b4d      	ldr	r3, [pc, #308]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800832e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008332:	0f1b      	lsrs	r3, r3, #28
 8008334:	f003 0307 	and.w	r3, r3, #7
 8008338:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	695b      	ldr	r3, [r3, #20]
 800833e:	019a      	lsls	r2, r3, #6
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	041b      	lsls	r3, r3, #16
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	061b      	lsls	r3, r3, #24
 800834c:	431a      	orrs	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	071b      	lsls	r3, r3, #28
 8008352:	4944      	ldr	r1, [pc, #272]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008354:	4313      	orrs	r3, r2
 8008356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800835a:	4b42      	ldr	r3, [pc, #264]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800835c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008360:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008368:	3b01      	subs	r3, #1
 800836a:	021b      	lsls	r3, r3, #8
 800836c:	493d      	ldr	r1, [pc, #244]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800836e:	4313      	orrs	r3, r2
 8008370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800837c:	2b00      	cmp	r3, #0
 800837e:	d022      	beq.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008388:	d11d      	bne.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800838a:	4b36      	ldr	r3, [pc, #216]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800838c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008390:	0e1b      	lsrs	r3, r3, #24
 8008392:	f003 030f 	and.w	r3, r3, #15
 8008396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008398:	4b32      	ldr	r3, [pc, #200]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800839a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800839e:	0f1b      	lsrs	r3, r3, #28
 80083a0:	f003 0307 	and.w	r3, r3, #7
 80083a4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	019a      	lsls	r2, r3, #6
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	041b      	lsls	r3, r3, #16
 80083b2:	431a      	orrs	r2, r3
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	061b      	lsls	r3, r3, #24
 80083b8:	431a      	orrs	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	071b      	lsls	r3, r3, #28
 80083be:	4929      	ldr	r1, [pc, #164]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083c0:	4313      	orrs	r3, r2
 80083c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f003 0308 	and.w	r3, r3, #8
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d028      	beq.n	8008424 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083d2:	4b24      	ldr	r3, [pc, #144]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d8:	0e1b      	lsrs	r3, r3, #24
 80083da:	f003 030f 	and.w	r3, r3, #15
 80083de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80083e0:	4b20      	ldr	r3, [pc, #128]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80083e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083e6:	0c1b      	lsrs	r3, r3, #16
 80083e8:	f003 0303 	and.w	r3, r3, #3
 80083ec:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	695b      	ldr	r3, [r3, #20]
 80083f2:	019a      	lsls	r2, r3, #6
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	041b      	lsls	r3, r3, #16
 80083f8:	431a      	orrs	r2, r3
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	061b      	lsls	r3, r3, #24
 80083fe:	431a      	orrs	r2, r3
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	69db      	ldr	r3, [r3, #28]
 8008404:	071b      	lsls	r3, r3, #28
 8008406:	4917      	ldr	r1, [pc, #92]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008408:	4313      	orrs	r3, r2
 800840a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800840e:	4b15      	ldr	r3, [pc, #84]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008414:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	4911      	ldr	r1, [pc, #68]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008424:	4b0f      	ldr	r3, [pc, #60]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a0e      	ldr	r2, [pc, #56]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800842a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800842e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008430:	f7fa fb0e 	bl	8002a50 <HAL_GetTick>
 8008434:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008436:	e008      	b.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008438:	f7fa fb0a 	bl	8002a50 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b64      	cmp	r3, #100	; 0x64
 8008444:	d901      	bls.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e007      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800844a:	4b06      	ldr	r3, [pc, #24]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008452:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008456:	d1ef      	bne.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3720      	adds	r7, #32
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	40023800 	.word	0x40023800

08008468 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d101      	bne.n	800847c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	e025      	b.n	80084c8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008482:	b2db      	uxtb	r3, r3
 8008484:	2b00      	cmp	r3, #0
 8008486:	d106      	bne.n	8008496 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f7f9 f973 	bl	800177c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2202      	movs	r2, #2
 800849a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	3304      	adds	r3, #4
 80084a6:	4619      	mov	r1, r3
 80084a8:	4610      	mov	r0, r2
 80084aa:	f001 fd7f 	bl	8009fac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	f001 fdd3 	bl	800a064 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80084c6:	2300      	movs	r3, #0
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}

080084d0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80084e2:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80084e4:	7dfb      	ldrb	r3, [r7, #23]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d101      	bne.n	80084ee <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 80084ea:	2302      	movs	r3, #2
 80084ec:	e021      	b.n	8008532 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 80084ee:	7dfb      	ldrb	r3, [r7, #23]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d002      	beq.n	80084fa <HAL_SDRAM_SendCommand+0x2a>
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	2b05      	cmp	r3, #5
 80084f8:	d118      	bne.n	800852c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2202      	movs	r2, #2
 80084fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	68b9      	ldr	r1, [r7, #8]
 800850a:	4618      	mov	r0, r3
 800850c:	f001 fe14 	bl	800a138 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d104      	bne.n	8008522 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2205      	movs	r2, #5
 800851c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008520:	e006      	b.n	8008530 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2201      	movs	r2, #1
 8008526:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800852a:	e001      	b.n	8008530 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e000      	b.n	8008532 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
 8008542:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800854a:	b2db      	uxtb	r3, r3
 800854c:	2b02      	cmp	r3, #2
 800854e:	d101      	bne.n	8008554 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008550:	2302      	movs	r3, #2
 8008552:	e016      	b.n	8008582 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800855a:	b2db      	uxtb	r3, r3
 800855c:	2b01      	cmp	r3, #1
 800855e:	d10f      	bne.n	8008580 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6839      	ldr	r1, [r7, #0]
 800856e:	4618      	mov	r0, r3
 8008570:	f001 fe06 	bl	800a180 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800857c:	2300      	movs	r3, #0
 800857e:	e000      	b.n	8008582 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e049      	b.n	8008630 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7fa f8f1 	bl	8002798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2202      	movs	r2, #2
 80085ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4619      	mov	r1, r3
 80085c8:	4610      	mov	r0, r2
 80085ca:	f001 f807 	bl	80095dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008646:	b2db      	uxtb	r3, r3
 8008648:	2b01      	cmp	r3, #1
 800864a:	d001      	beq.n	8008650 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800864c:	2301      	movs	r3, #1
 800864e:	e054      	b.n	80086fa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68da      	ldr	r2, [r3, #12]
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0201 	orr.w	r2, r2, #1
 8008666:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a26      	ldr	r2, [pc, #152]	; (8008708 <HAL_TIM_Base_Start_IT+0xd0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d022      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800867a:	d01d      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a22      	ldr	r2, [pc, #136]	; (800870c <HAL_TIM_Base_Start_IT+0xd4>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d018      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a21      	ldr	r2, [pc, #132]	; (8008710 <HAL_TIM_Base_Start_IT+0xd8>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d013      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a1f      	ldr	r2, [pc, #124]	; (8008714 <HAL_TIM_Base_Start_IT+0xdc>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d00e      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a1e      	ldr	r2, [pc, #120]	; (8008718 <HAL_TIM_Base_Start_IT+0xe0>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d009      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a1c      	ldr	r2, [pc, #112]	; (800871c <HAL_TIM_Base_Start_IT+0xe4>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d004      	beq.n	80086b8 <HAL_TIM_Base_Start_IT+0x80>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1b      	ldr	r2, [pc, #108]	; (8008720 <HAL_TIM_Base_Start_IT+0xe8>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d115      	bne.n	80086e4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	4b19      	ldr	r3, [pc, #100]	; (8008724 <HAL_TIM_Base_Start_IT+0xec>)
 80086c0:	4013      	ands	r3, r2
 80086c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b06      	cmp	r3, #6
 80086c8:	d015      	beq.n	80086f6 <HAL_TIM_Base_Start_IT+0xbe>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d0:	d011      	beq.n	80086f6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f042 0201 	orr.w	r2, r2, #1
 80086e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086e2:	e008      	b.n	80086f6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	681a      	ldr	r2, [r3, #0]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f042 0201 	orr.w	r2, r2, #1
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e000      	b.n	80086f8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086f6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	40010000 	.word	0x40010000
 800870c:	40000400 	.word	0x40000400
 8008710:	40000800 	.word	0x40000800
 8008714:	40000c00 	.word	0x40000c00
 8008718:	40010400 	.word	0x40010400
 800871c:	40014000 	.word	0x40014000
 8008720:	40001800 	.word	0x40001800
 8008724:	00010007 	.word	0x00010007

08008728 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e049      	b.n	80087ce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f000 f841 	bl	80087d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f000 ff38 	bl	80095dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
	...

080087ec <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
 80087f8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80087fa:	2300      	movs	r3, #0
 80087fc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d109      	bne.n	8008818 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b02      	cmp	r3, #2
 800880e:	bf0c      	ite	eq
 8008810:	2301      	moveq	r3, #1
 8008812:	2300      	movne	r3, #0
 8008814:	b2db      	uxtb	r3, r3
 8008816:	e03c      	b.n	8008892 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	2b04      	cmp	r3, #4
 800881c:	d109      	bne.n	8008832 <HAL_TIM_PWM_Start_DMA+0x46>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	bf0c      	ite	eq
 800882a:	2301      	moveq	r3, #1
 800882c:	2300      	movne	r3, #0
 800882e:	b2db      	uxtb	r3, r3
 8008830:	e02f      	b.n	8008892 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b08      	cmp	r3, #8
 8008836:	d109      	bne.n	800884c <HAL_TIM_PWM_Start_DMA+0x60>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b02      	cmp	r3, #2
 8008842:	bf0c      	ite	eq
 8008844:	2301      	moveq	r3, #1
 8008846:	2300      	movne	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	e022      	b.n	8008892 <HAL_TIM_PWM_Start_DMA+0xa6>
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2b0c      	cmp	r3, #12
 8008850:	d109      	bne.n	8008866 <HAL_TIM_PWM_Start_DMA+0x7a>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b02      	cmp	r3, #2
 800885c:	bf0c      	ite	eq
 800885e:	2301      	moveq	r3, #1
 8008860:	2300      	movne	r3, #0
 8008862:	b2db      	uxtb	r3, r3
 8008864:	e015      	b.n	8008892 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b10      	cmp	r3, #16
 800886a:	d109      	bne.n	8008880 <HAL_TIM_PWM_Start_DMA+0x94>
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008872:	b2db      	uxtb	r3, r3
 8008874:	2b02      	cmp	r3, #2
 8008876:	bf0c      	ite	eq
 8008878:	2301      	moveq	r3, #1
 800887a:	2300      	movne	r3, #0
 800887c:	b2db      	uxtb	r3, r3
 800887e:	e008      	b.n	8008892 <HAL_TIM_PWM_Start_DMA+0xa6>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	bf0c      	ite	eq
 800888c:	2301      	moveq	r3, #1
 800888e:	2300      	movne	r3, #0
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8008896:	2302      	movs	r3, #2
 8008898:	e1a1      	b.n	8008bde <HAL_TIM_PWM_Start_DMA+0x3f2>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d109      	bne.n	80088b4 <HAL_TIM_PWM_Start_DMA+0xc8>
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	bf0c      	ite	eq
 80088ac:	2301      	moveq	r3, #1
 80088ae:	2300      	movne	r3, #0
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	e03c      	b.n	800892e <HAL_TIM_PWM_Start_DMA+0x142>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d109      	bne.n	80088ce <HAL_TIM_PWM_Start_DMA+0xe2>
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	bf0c      	ite	eq
 80088c6:	2301      	moveq	r3, #1
 80088c8:	2300      	movne	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	e02f      	b.n	800892e <HAL_TIM_PWM_Start_DMA+0x142>
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b08      	cmp	r3, #8
 80088d2:	d109      	bne.n	80088e8 <HAL_TIM_PWM_Start_DMA+0xfc>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088da:	b2db      	uxtb	r3, r3
 80088dc:	2b01      	cmp	r3, #1
 80088de:	bf0c      	ite	eq
 80088e0:	2301      	moveq	r3, #1
 80088e2:	2300      	movne	r3, #0
 80088e4:	b2db      	uxtb	r3, r3
 80088e6:	e022      	b.n	800892e <HAL_TIM_PWM_Start_DMA+0x142>
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	2b0c      	cmp	r3, #12
 80088ec:	d109      	bne.n	8008902 <HAL_TIM_PWM_Start_DMA+0x116>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	bf0c      	ite	eq
 80088fa:	2301      	moveq	r3, #1
 80088fc:	2300      	movne	r3, #0
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	e015      	b.n	800892e <HAL_TIM_PWM_Start_DMA+0x142>
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	2b10      	cmp	r3, #16
 8008906:	d109      	bne.n	800891c <HAL_TIM_PWM_Start_DMA+0x130>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800890e:	b2db      	uxtb	r3, r3
 8008910:	2b01      	cmp	r3, #1
 8008912:	bf0c      	ite	eq
 8008914:	2301      	moveq	r3, #1
 8008916:	2300      	movne	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	e008      	b.n	800892e <HAL_TIM_PWM_Start_DMA+0x142>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b01      	cmp	r3, #1
 8008926:	bf0c      	ite	eq
 8008928:	2301      	moveq	r3, #1
 800892a:	2300      	movne	r3, #0
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d034      	beq.n	800899c <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d002      	beq.n	800893e <HAL_TIM_PWM_Start_DMA+0x152>
 8008938:	887b      	ldrh	r3, [r7, #2]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d101      	bne.n	8008942 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e14d      	b.n	8008bde <HAL_TIM_PWM_Start_DMA+0x3f2>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d104      	bne.n	8008952 <HAL_TIM_PWM_Start_DMA+0x166>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2202      	movs	r2, #2
 800894c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008950:	e026      	b.n	80089a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	2b04      	cmp	r3, #4
 8008956:	d104      	bne.n	8008962 <HAL_TIM_PWM_Start_DMA+0x176>
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2202      	movs	r2, #2
 800895c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008960:	e01e      	b.n	80089a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	2b08      	cmp	r3, #8
 8008966:	d104      	bne.n	8008972 <HAL_TIM_PWM_Start_DMA+0x186>
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008970:	e016      	b.n	80089a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b0c      	cmp	r3, #12
 8008976:	d104      	bne.n	8008982 <HAL_TIM_PWM_Start_DMA+0x196>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008980:	e00e      	b.n	80089a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	2b10      	cmp	r3, #16
 8008986:	d104      	bne.n	8008992 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008990:	e006      	b.n	80089a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2202      	movs	r2, #2
 8008996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800899a:	e001      	b.n	80089a0 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e11e      	b.n	8008bde <HAL_TIM_PWM_Start_DMA+0x3f2>
  }

  switch (Channel)
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	2b0c      	cmp	r3, #12
 80089a4:	f200 80ae 	bhi.w	8008b04 <HAL_TIM_PWM_Start_DMA+0x318>
 80089a8:	a201      	add	r2, pc, #4	; (adr r2, 80089b0 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 80089aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ae:	bf00      	nop
 80089b0:	080089e5 	.word	0x080089e5
 80089b4:	08008b05 	.word	0x08008b05
 80089b8:	08008b05 	.word	0x08008b05
 80089bc:	08008b05 	.word	0x08008b05
 80089c0:	08008a2d 	.word	0x08008a2d
 80089c4:	08008b05 	.word	0x08008b05
 80089c8:	08008b05 	.word	0x08008b05
 80089cc:	08008b05 	.word	0x08008b05
 80089d0:	08008a75 	.word	0x08008a75
 80089d4:	08008b05 	.word	0x08008b05
 80089d8:	08008b05 	.word	0x08008b05
 80089dc:	08008b05 	.word	0x08008b05
 80089e0:	08008abd 	.word	0x08008abd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	4a7f      	ldr	r2, [pc, #508]	; (8008be8 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 80089ea:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f0:	4a7e      	ldr	r2, [pc, #504]	; (8008bec <HAL_TIM_PWM_Start_DMA+0x400>)
 80089f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089f8:	4a7d      	ldr	r2, [pc, #500]	; (8008bf0 <HAL_TIM_PWM_Start_DMA+0x404>)
 80089fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008a00:	6879      	ldr	r1, [r7, #4]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3334      	adds	r3, #52	; 0x34
 8008a08:	461a      	mov	r2, r3
 8008a0a:	887b      	ldrh	r3, [r7, #2]
 8008a0c:	f7fb f9b8 	bl	8003d80 <HAL_DMA_Start_IT>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008a16:	2301      	movs	r3, #1
 8008a18:	e0e1      	b.n	8008bde <HAL_TIM_PWM_Start_DMA+0x3f2>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68da      	ldr	r2, [r3, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a28:	60da      	str	r2, [r3, #12]
      break;
 8008a2a:	e06e      	b.n	8008b0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a30:	4a6d      	ldr	r2, [pc, #436]	; (8008be8 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8008a32:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a38:	4a6c      	ldr	r2, [pc, #432]	; (8008bec <HAL_TIM_PWM_Start_DMA+0x400>)
 8008a3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a40:	4a6b      	ldr	r2, [pc, #428]	; (8008bf0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008a42:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3338      	adds	r3, #56	; 0x38
 8008a50:	461a      	mov	r2, r3
 8008a52:	887b      	ldrh	r3, [r7, #2]
 8008a54:	f7fb f994 	bl	8003d80 <HAL_DMA_Start_IT>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d001      	beq.n	8008a62 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e0bd      	b.n	8008bde <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68da      	ldr	r2, [r3, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008a70:	60da      	str	r2, [r3, #12]
      break;
 8008a72:	e04a      	b.n	8008b0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	4a5b      	ldr	r2, [pc, #364]	; (8008be8 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8008a7a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	4a5a      	ldr	r2, [pc, #360]	; (8008bec <HAL_TIM_PWM_Start_DMA+0x400>)
 8008a82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a88:	4a59      	ldr	r2, [pc, #356]	; (8008bf0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008a8a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008a90:	6879      	ldr	r1, [r7, #4]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	333c      	adds	r3, #60	; 0x3c
 8008a98:	461a      	mov	r2, r3
 8008a9a:	887b      	ldrh	r3, [r7, #2]
 8008a9c:	f7fb f970 	bl	8003d80 <HAL_DMA_Start_IT>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	e099      	b.n	8008bde <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68da      	ldr	r2, [r3, #12]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ab8:	60da      	str	r2, [r3, #12]
      break;
 8008aba:	e026      	b.n	8008b0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac0:	4a49      	ldr	r2, [pc, #292]	; (8008be8 <HAL_TIM_PWM_Start_DMA+0x3fc>)
 8008ac2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac8:	4a48      	ldr	r2, [pc, #288]	; (8008bec <HAL_TIM_PWM_Start_DMA+0x400>)
 8008aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad0:	4a47      	ldr	r2, [pc, #284]	; (8008bf0 <HAL_TIM_PWM_Start_DMA+0x404>)
 8008ad2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ad8:	6879      	ldr	r1, [r7, #4]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3340      	adds	r3, #64	; 0x40
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	887b      	ldrh	r3, [r7, #2]
 8008ae4:	f7fb f94c 	bl	8003d80 <HAL_DMA_Start_IT>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d001      	beq.n	8008af2 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008aee:	2301      	movs	r3, #1
 8008af0:	e075      	b.n	8008bde <HAL_TIM_PWM_Start_DMA+0x3f2>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b00:	60da      	str	r2, [r3, #12]
      break;
 8008b02:	e002      	b.n	8008b0a <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	75fb      	strb	r3, [r7, #23]
      break;
 8008b08:	bf00      	nop
  }

  if (status == HAL_OK)
 8008b0a:	7dfb      	ldrb	r3, [r7, #23]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d165      	bne.n	8008bdc <HAL_TIM_PWM_Start_DMA+0x3f0>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2201      	movs	r2, #1
 8008b16:	68b9      	ldr	r1, [r7, #8]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f001 f8f7 	bl	8009d0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a34      	ldr	r2, [pc, #208]	; (8008bf4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d004      	beq.n	8008b32 <HAL_TIM_PWM_Start_DMA+0x346>
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a32      	ldr	r2, [pc, #200]	; (8008bf8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d101      	bne.n	8008b36 <HAL_TIM_PWM_Start_DMA+0x34a>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <HAL_TIM_PWM_Start_DMA+0x34c>
 8008b36:	2300      	movs	r3, #0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <HAL_TIM_PWM_Start_DMA+0x360>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b4a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a28      	ldr	r2, [pc, #160]	; (8008bf4 <HAL_TIM_PWM_Start_DMA+0x408>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d022      	beq.n	8008b9c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5e:	d01d      	beq.n	8008b9c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a25      	ldr	r2, [pc, #148]	; (8008bfc <HAL_TIM_PWM_Start_DMA+0x410>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d018      	beq.n	8008b9c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a24      	ldr	r2, [pc, #144]	; (8008c00 <HAL_TIM_PWM_Start_DMA+0x414>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d013      	beq.n	8008b9c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a22      	ldr	r2, [pc, #136]	; (8008c04 <HAL_TIM_PWM_Start_DMA+0x418>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00e      	beq.n	8008b9c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1d      	ldr	r2, [pc, #116]	; (8008bf8 <HAL_TIM_PWM_Start_DMA+0x40c>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d009      	beq.n	8008b9c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a1e      	ldr	r2, [pc, #120]	; (8008c08 <HAL_TIM_PWM_Start_DMA+0x41c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d004      	beq.n	8008b9c <HAL_TIM_PWM_Start_DMA+0x3b0>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a1d      	ldr	r2, [pc, #116]	; (8008c0c <HAL_TIM_PWM_Start_DMA+0x420>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d115      	bne.n	8008bc8 <HAL_TIM_PWM_Start_DMA+0x3dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	4b1b      	ldr	r3, [pc, #108]	; (8008c10 <HAL_TIM_PWM_Start_DMA+0x424>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	2b06      	cmp	r3, #6
 8008bac:	d015      	beq.n	8008bda <HAL_TIM_PWM_Start_DMA+0x3ee>
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb4:	d011      	beq.n	8008bda <HAL_TIM_PWM_Start_DMA+0x3ee>
      {
        __HAL_TIM_ENABLE(htim);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f042 0201 	orr.w	r2, r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc6:	e008      	b.n	8008bda <HAL_TIM_PWM_Start_DMA+0x3ee>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	e000      	b.n	8008bdc <HAL_TIM_PWM_Start_DMA+0x3f0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bda:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008bdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3718      	adds	r7, #24
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	080094cb 	.word	0x080094cb
 8008bec:	08009573 	.word	0x08009573
 8008bf0:	08009439 	.word	0x08009439
 8008bf4:	40010000 	.word	0x40010000
 8008bf8:	40010400 	.word	0x40010400
 8008bfc:	40000400 	.word	0x40000400
 8008c00:	40000800 	.word	0x40000800
 8008c04:	40000c00 	.word	0x40000c00
 8008c08:	40014000 	.word	0x40014000
 8008c0c:	40001800 	.word	0x40001800
 8008c10:	00010007 	.word	0x00010007

08008c14 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b0c      	cmp	r3, #12
 8008c26:	d855      	bhi.n	8008cd4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008c28:	a201      	add	r2, pc, #4	; (adr r2, 8008c30 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c2e:	bf00      	nop
 8008c30:	08008c65 	.word	0x08008c65
 8008c34:	08008cd5 	.word	0x08008cd5
 8008c38:	08008cd5 	.word	0x08008cd5
 8008c3c:	08008cd5 	.word	0x08008cd5
 8008c40:	08008c81 	.word	0x08008c81
 8008c44:	08008cd5 	.word	0x08008cd5
 8008c48:	08008cd5 	.word	0x08008cd5
 8008c4c:	08008cd5 	.word	0x08008cd5
 8008c50:	08008c9d 	.word	0x08008c9d
 8008c54:	08008cd5 	.word	0x08008cd5
 8008c58:	08008cd5 	.word	0x08008cd5
 8008c5c:	08008cd5 	.word	0x08008cd5
 8008c60:	08008cb9 	.word	0x08008cb9
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008c72:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fb f8e1 	bl	8003e40 <HAL_DMA_Abort_IT>
      break;
 8008c7e:	e02c      	b.n	8008cda <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68da      	ldr	r2, [r3, #12]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fb f8d3 	bl	8003e40 <HAL_DMA_Abort_IT>
      break;
 8008c9a:	e01e      	b.n	8008cda <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68da      	ldr	r2, [r3, #12]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008caa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fb f8c5 	bl	8003e40 <HAL_DMA_Abort_IT>
      break;
 8008cb6:	e010      	b.n	8008cda <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008cc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f7fb f8b7 	bl	8003e40 <HAL_DMA_Abort_IT>
      break;
 8008cd2:	e002      	b.n	8008cda <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd8:	bf00      	nop
  }

  if (status == HAL_OK)
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d171      	bne.n	8008dc4 <HAL_TIM_PWM_Stop_DMA+0x1b0>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	6839      	ldr	r1, [r7, #0]
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f001 f80f 	bl	8009d0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a37      	ldr	r2, [pc, #220]	; (8008dd0 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d004      	beq.n	8008d02 <HAL_TIM_PWM_Stop_DMA+0xee>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a35      	ldr	r2, [pc, #212]	; (8008dd4 <HAL_TIM_PWM_Stop_DMA+0x1c0>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d101      	bne.n	8008d06 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8008d02:	2301      	movs	r3, #1
 8008d04:	e000      	b.n	8008d08 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8008d06:	2300      	movs	r3, #0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d017      	beq.n	8008d3c <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	6a1a      	ldr	r2, [r3, #32]
 8008d12:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d16:	4013      	ands	r3, r2
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d10f      	bne.n	8008d3c <HAL_TIM_PWM_Stop_DMA+0x128>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	6a1a      	ldr	r2, [r3, #32]
 8008d22:	f240 4344 	movw	r3, #1092	; 0x444
 8008d26:	4013      	ands	r3, r2
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d107      	bne.n	8008d3c <HAL_TIM_PWM_Stop_DMA+0x128>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d3a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6a1a      	ldr	r2, [r3, #32]
 8008d42:	f241 1311 	movw	r3, #4369	; 0x1111
 8008d46:	4013      	ands	r3, r2
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d10f      	bne.n	8008d6c <HAL_TIM_PWM_Stop_DMA+0x158>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	6a1a      	ldr	r2, [r3, #32]
 8008d52:	f240 4344 	movw	r3, #1092	; 0x444
 8008d56:	4013      	ands	r3, r2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d107      	bne.n	8008d6c <HAL_TIM_PWM_Stop_DMA+0x158>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 0201 	bic.w	r2, r2, #1
 8008d6a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d104      	bne.n	8008d7c <HAL_TIM_PWM_Stop_DMA+0x168>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d7a:	e023      	b.n	8008dc4 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d104      	bne.n	8008d8c <HAL_TIM_PWM_Stop_DMA+0x178>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d8a:	e01b      	b.n	8008dc4 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b08      	cmp	r3, #8
 8008d90:	d104      	bne.n	8008d9c <HAL_TIM_PWM_Stop_DMA+0x188>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2201      	movs	r2, #1
 8008d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d9a:	e013      	b.n	8008dc4 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	2b0c      	cmp	r3, #12
 8008da0:	d104      	bne.n	8008dac <HAL_TIM_PWM_Stop_DMA+0x198>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2201      	movs	r2, #1
 8008da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008daa:	e00b      	b.n	8008dc4 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	2b10      	cmp	r3, #16
 8008db0:	d104      	bne.n	8008dbc <HAL_TIM_PWM_Stop_DMA+0x1a8>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2201      	movs	r2, #1
 8008db6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dba:	e003      	b.n	8008dc4 <HAL_TIM_PWM_Stop_DMA+0x1b0>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	40010000 	.word	0x40010000
 8008dd4:	40010400 	.word	0x40010400

08008dd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b082      	sub	sp, #8
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	691b      	ldr	r3, [r3, #16]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b02      	cmp	r3, #2
 8008dec:	d122      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	f003 0302 	and.w	r3, r3, #2
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d11b      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f06f 0202 	mvn.w	r2, #2
 8008e04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	699b      	ldr	r3, [r3, #24]
 8008e12:	f003 0303 	and.w	r3, r3, #3
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d003      	beq.n	8008e22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fae4 	bl	80093e8 <HAL_TIM_IC_CaptureCallback>
 8008e20:	e005      	b.n	8008e2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fad6 	bl	80093d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7f7 fc3d 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0304 	and.w	r3, r3, #4
 8008e3e:	2b04      	cmp	r3, #4
 8008e40:	d122      	bne.n	8008e88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0304 	and.w	r3, r3, #4
 8008e4c:	2b04      	cmp	r3, #4
 8008e4e:	d11b      	bne.n	8008e88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0204 	mvn.w	r2, #4
 8008e58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2202      	movs	r2, #2
 8008e5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 faba 	bl	80093e8 <HAL_TIM_IC_CaptureCallback>
 8008e74:	e005      	b.n	8008e82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 faac 	bl	80093d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7f7 fc13 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	691b      	ldr	r3, [r3, #16]
 8008e8e:	f003 0308 	and.w	r3, r3, #8
 8008e92:	2b08      	cmp	r3, #8
 8008e94:	d122      	bne.n	8008edc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f003 0308 	and.w	r3, r3, #8
 8008ea0:	2b08      	cmp	r3, #8
 8008ea2:	d11b      	bne.n	8008edc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f06f 0208 	mvn.w	r2, #8
 8008eac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2204      	movs	r2, #4
 8008eb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	f003 0303 	and.w	r3, r3, #3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d003      	beq.n	8008eca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fa90 	bl	80093e8 <HAL_TIM_IC_CaptureCallback>
 8008ec8:	e005      	b.n	8008ed6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 fa82 	bl	80093d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7f7 fbe9 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	691b      	ldr	r3, [r3, #16]
 8008ee2:	f003 0310 	and.w	r3, r3, #16
 8008ee6:	2b10      	cmp	r3, #16
 8008ee8:	d122      	bne.n	8008f30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	f003 0310 	and.w	r3, r3, #16
 8008ef4:	2b10      	cmp	r3, #16
 8008ef6:	d11b      	bne.n	8008f30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f06f 0210 	mvn.w	r2, #16
 8008f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2208      	movs	r2, #8
 8008f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d003      	beq.n	8008f1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fa66 	bl	80093e8 <HAL_TIM_IC_CaptureCallback>
 8008f1c:	e005      	b.n	8008f2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fa58 	bl	80093d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7f7 fbbf 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	f003 0301 	and.w	r3, r3, #1
 8008f3a:	2b01      	cmp	r3, #1
 8008f3c:	d10e      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	68db      	ldr	r3, [r3, #12]
 8008f44:	f003 0301 	and.w	r3, r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d107      	bne.n	8008f5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f06f 0201 	mvn.w	r2, #1
 8008f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7f8 ffdc 	bl	8001f14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f66:	2b80      	cmp	r3, #128	; 0x80
 8008f68:	d10e      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f74:	2b80      	cmp	r3, #128	; 0x80
 8008f76:	d107      	bne.n	8008f88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fffe 	bl	8009f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f96:	d10e      	bne.n	8008fb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fa2:	2b80      	cmp	r3, #128	; 0x80
 8008fa4:	d107      	bne.n	8008fb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 fff1 	bl	8009f98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	691b      	ldr	r3, [r3, #16]
 8008fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d10e      	bne.n	8008fe2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fce:	2b40      	cmp	r3, #64	; 0x40
 8008fd0:	d107      	bne.n	8008fe2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fa17 	bl	8009410 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0320 	and.w	r3, r3, #32
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d10e      	bne.n	800900e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0320 	and.w	r3, r3, #32
 8008ffa:	2b20      	cmp	r3, #32
 8008ffc:	d107      	bne.n	800900e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f06f 0220 	mvn.w	r2, #32
 8009006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f000 ffb1 	bl	8009f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800900e:	bf00      	nop
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
	...

08009018 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b086      	sub	sp, #24
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009032:	2302      	movs	r3, #2
 8009034:	e0ff      	b.n	8009236 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b14      	cmp	r3, #20
 8009042:	f200 80f0 	bhi.w	8009226 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009046:	a201      	add	r2, pc, #4	; (adr r2, 800904c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800904c:	080090a1 	.word	0x080090a1
 8009050:	08009227 	.word	0x08009227
 8009054:	08009227 	.word	0x08009227
 8009058:	08009227 	.word	0x08009227
 800905c:	080090e1 	.word	0x080090e1
 8009060:	08009227 	.word	0x08009227
 8009064:	08009227 	.word	0x08009227
 8009068:	08009227 	.word	0x08009227
 800906c:	08009123 	.word	0x08009123
 8009070:	08009227 	.word	0x08009227
 8009074:	08009227 	.word	0x08009227
 8009078:	08009227 	.word	0x08009227
 800907c:	08009163 	.word	0x08009163
 8009080:	08009227 	.word	0x08009227
 8009084:	08009227 	.word	0x08009227
 8009088:	08009227 	.word	0x08009227
 800908c:	080091a5 	.word	0x080091a5
 8009090:	08009227 	.word	0x08009227
 8009094:	08009227 	.word	0x08009227
 8009098:	08009227 	.word	0x08009227
 800909c:	080091e5 	.word	0x080091e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	68b9      	ldr	r1, [r7, #8]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f000 fb38 	bl	800971c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	699a      	ldr	r2, [r3, #24]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0208 	orr.w	r2, r2, #8
 80090ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	699a      	ldr	r2, [r3, #24]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f022 0204 	bic.w	r2, r2, #4
 80090ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6999      	ldr	r1, [r3, #24]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	691a      	ldr	r2, [r3, #16]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	430a      	orrs	r2, r1
 80090dc:	619a      	str	r2, [r3, #24]
      break;
 80090de:	e0a5      	b.n	800922c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68b9      	ldr	r1, [r7, #8]
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fb8a 	bl	8009800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	699a      	ldr	r2, [r3, #24]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	699a      	ldr	r2, [r3, #24]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800910a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	6999      	ldr	r1, [r3, #24]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	021a      	lsls	r2, r3, #8
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	430a      	orrs	r2, r1
 800911e:	619a      	str	r2, [r3, #24]
      break;
 8009120:	e084      	b.n	800922c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	68b9      	ldr	r1, [r7, #8]
 8009128:	4618      	mov	r0, r3
 800912a:	f000 fbe1 	bl	80098f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69da      	ldr	r2, [r3, #28]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f042 0208 	orr.w	r2, r2, #8
 800913c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69da      	ldr	r2, [r3, #28]
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0204 	bic.w	r2, r2, #4
 800914c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	69d9      	ldr	r1, [r3, #28]
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	430a      	orrs	r2, r1
 800915e:	61da      	str	r2, [r3, #28]
      break;
 8009160:	e064      	b.n	800922c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68b9      	ldr	r1, [r7, #8]
 8009168:	4618      	mov	r0, r3
 800916a:	f000 fc37 	bl	80099dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	69da      	ldr	r2, [r3, #28]
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800917c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	69da      	ldr	r2, [r3, #28]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800918c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	69d9      	ldr	r1, [r3, #28]
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	021a      	lsls	r2, r3, #8
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	430a      	orrs	r2, r1
 80091a0:	61da      	str	r2, [r3, #28]
      break;
 80091a2:	e043      	b.n	800922c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68b9      	ldr	r1, [r7, #8]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fc6e 	bl	8009a8c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 0208 	orr.w	r2, r2, #8
 80091be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f022 0204 	bic.w	r2, r2, #4
 80091ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	691a      	ldr	r2, [r3, #16]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80091e2:	e023      	b.n	800922c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	68b9      	ldr	r1, [r7, #8]
 80091ea:	4618      	mov	r0, r3
 80091ec:	f000 fca0 	bl	8009b30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800920e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	691b      	ldr	r3, [r3, #16]
 800921a:	021a      	lsls	r2, r3, #8
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	430a      	orrs	r2, r1
 8009222:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009224:	e002      	b.n	800922c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	75fb      	strb	r3, [r7, #23]
      break;
 800922a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	2200      	movs	r2, #0
 8009230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop

08009240 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009254:	2b01      	cmp	r3, #1
 8009256:	d101      	bne.n	800925c <HAL_TIM_ConfigClockSource+0x1c>
 8009258:	2302      	movs	r3, #2
 800925a:	e0b4      	b.n	80093c6 <HAL_TIM_ConfigClockSource+0x186>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2201      	movs	r2, #1
 8009260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	4b56      	ldr	r3, [pc, #344]	; (80093d0 <HAL_TIM_ConfigClockSource+0x190>)
 8009278:	4013      	ands	r3, r2
 800927a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009282:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	68ba      	ldr	r2, [r7, #8]
 800928a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009294:	d03e      	beq.n	8009314 <HAL_TIM_ConfigClockSource+0xd4>
 8009296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800929a:	f200 8087 	bhi.w	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 800929e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092a2:	f000 8086 	beq.w	80093b2 <HAL_TIM_ConfigClockSource+0x172>
 80092a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092aa:	d87f      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092ac:	2b70      	cmp	r3, #112	; 0x70
 80092ae:	d01a      	beq.n	80092e6 <HAL_TIM_ConfigClockSource+0xa6>
 80092b0:	2b70      	cmp	r3, #112	; 0x70
 80092b2:	d87b      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092b4:	2b60      	cmp	r3, #96	; 0x60
 80092b6:	d050      	beq.n	800935a <HAL_TIM_ConfigClockSource+0x11a>
 80092b8:	2b60      	cmp	r3, #96	; 0x60
 80092ba:	d877      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092bc:	2b50      	cmp	r3, #80	; 0x50
 80092be:	d03c      	beq.n	800933a <HAL_TIM_ConfigClockSource+0xfa>
 80092c0:	2b50      	cmp	r3, #80	; 0x50
 80092c2:	d873      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092c4:	2b40      	cmp	r3, #64	; 0x40
 80092c6:	d058      	beq.n	800937a <HAL_TIM_ConfigClockSource+0x13a>
 80092c8:	2b40      	cmp	r3, #64	; 0x40
 80092ca:	d86f      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092cc:	2b30      	cmp	r3, #48	; 0x30
 80092ce:	d064      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x15a>
 80092d0:	2b30      	cmp	r3, #48	; 0x30
 80092d2:	d86b      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092d4:	2b20      	cmp	r3, #32
 80092d6:	d060      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x15a>
 80092d8:	2b20      	cmp	r3, #32
 80092da:	d867      	bhi.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d05c      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x15a>
 80092e0:	2b10      	cmp	r3, #16
 80092e2:	d05a      	beq.n	800939a <HAL_TIM_ConfigClockSource+0x15a>
 80092e4:	e062      	b.n	80093ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6818      	ldr	r0, [r3, #0]
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6899      	ldr	r1, [r3, #8]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	685a      	ldr	r2, [r3, #4]
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f000 fce9 	bl	8009ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009308:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	609a      	str	r2, [r3, #8]
      break;
 8009312:	e04f      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6818      	ldr	r0, [r3, #0]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	6899      	ldr	r1, [r3, #8]
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f000 fcd2 	bl	8009ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009336:	609a      	str	r2, [r3, #8]
      break;
 8009338:	e03c      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6818      	ldr	r0, [r3, #0]
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	6859      	ldr	r1, [r3, #4]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	461a      	mov	r2, r3
 8009348:	f000 fc46 	bl	8009bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2150      	movs	r1, #80	; 0x50
 8009352:	4618      	mov	r0, r3
 8009354:	f000 fc9f 	bl	8009c96 <TIM_ITRx_SetConfig>
      break;
 8009358:	e02c      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6818      	ldr	r0, [r3, #0]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	6859      	ldr	r1, [r3, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	461a      	mov	r2, r3
 8009368:	f000 fc65 	bl	8009c36 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2160      	movs	r1, #96	; 0x60
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fc8f 	bl	8009c96 <TIM_ITRx_SetConfig>
      break;
 8009378:	e01c      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6818      	ldr	r0, [r3, #0]
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	6859      	ldr	r1, [r3, #4]
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	461a      	mov	r2, r3
 8009388:	f000 fc26 	bl	8009bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2140      	movs	r1, #64	; 0x40
 8009392:	4618      	mov	r0, r3
 8009394:	f000 fc7f 	bl	8009c96 <TIM_ITRx_SetConfig>
      break;
 8009398:	e00c      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4619      	mov	r1, r3
 80093a4:	4610      	mov	r0, r2
 80093a6:	f000 fc76 	bl	8009c96 <TIM_ITRx_SetConfig>
      break;
 80093aa:	e003      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	73fb      	strb	r3, [r7, #15]
      break;
 80093b0:	e000      	b.n	80093b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80093b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}
 80093ce:	bf00      	nop
 80093d0:	fffeff88 	.word	0xfffeff88

080093d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093dc:	bf00      	nop
 80093de:	370c      	adds	r7, #12
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009404:	bf00      	nop
 8009406:	370c      	adds	r7, #12
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009418:	bf00      	nop
 800941a:	370c      	adds	r7, #12
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009424:	b480      	push	{r7}
 8009426:	b083      	sub	sp, #12
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800942c:	bf00      	nop
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009444:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	687a      	ldr	r2, [r7, #4]
 800944c:	429a      	cmp	r2, r3
 800944e:	d107      	bne.n	8009460 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	2201      	movs	r2, #1
 8009454:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800945e:	e02a      	b.n	80094b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009464:	687a      	ldr	r2, [r7, #4]
 8009466:	429a      	cmp	r2, r3
 8009468:	d107      	bne.n	800947a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2202      	movs	r2, #2
 800946e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009478:	e01d      	b.n	80094b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	429a      	cmp	r2, r3
 8009482:	d107      	bne.n	8009494 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	2204      	movs	r2, #4
 8009488:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009492:	e010      	b.n	80094b6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	429a      	cmp	r2, r3
 800949c:	d107      	bne.n	80094ae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2208      	movs	r2, #8
 80094a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2201      	movs	r2, #1
 80094a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80094ac:	e003      	b.n	80094b6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2201      	movs	r2, #1
 80094b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff ffb4 	bl	8009424 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	771a      	strb	r2, [r3, #28]
}
 80094c2:	bf00      	nop
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}

080094ca <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80094ca:	b580      	push	{r7, lr}
 80094cc:	b084      	sub	sp, #16
 80094ce:	af00      	add	r7, sp, #0
 80094d0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d10b      	bne.n	80094fa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2201      	movs	r2, #1
 80094e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	69db      	ldr	r3, [r3, #28]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d136      	bne.n	800955e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80094f8:	e031      	b.n	800955e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	429a      	cmp	r2, r3
 8009502:	d10b      	bne.n	800951c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	2202      	movs	r2, #2
 8009508:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	69db      	ldr	r3, [r3, #28]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d125      	bne.n	800955e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800951a:	e020      	b.n	800955e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	429a      	cmp	r2, r3
 8009524:	d10b      	bne.n	800953e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2204      	movs	r2, #4
 800952a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	69db      	ldr	r3, [r3, #28]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d114      	bne.n	800955e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2201      	movs	r2, #1
 8009538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800953c:	e00f      	b.n	800955e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009542:	687a      	ldr	r2, [r7, #4]
 8009544:	429a      	cmp	r2, r3
 8009546:	d10a      	bne.n	800955e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2208      	movs	r2, #8
 800954c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	69db      	ldr	r3, [r3, #28]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d103      	bne.n	800955e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800955e:	68f8      	ldr	r0, [r7, #12]
 8009560:	f7f7 f8a2 	bl	80006a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	771a      	strb	r2, [r3, #28]
}
 800956a:	bf00      	nop
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800957e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	687a      	ldr	r2, [r7, #4]
 8009586:	429a      	cmp	r2, r3
 8009588:	d103      	bne.n	8009592 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2201      	movs	r2, #1
 800958e:	771a      	strb	r2, [r3, #28]
 8009590:	e019      	b.n	80095c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	429a      	cmp	r2, r3
 800959a:	d103      	bne.n	80095a4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	2202      	movs	r2, #2
 80095a0:	771a      	strb	r2, [r3, #28]
 80095a2:	e010      	b.n	80095c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d103      	bne.n	80095b6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2204      	movs	r2, #4
 80095b2:	771a      	strb	r2, [r3, #28]
 80095b4:	e007      	b.n	80095c6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	429a      	cmp	r2, r3
 80095be:	d102      	bne.n	80095c6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2208      	movs	r2, #8
 80095c4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80095c6:	68f8      	ldr	r0, [r7, #12]
 80095c8:	f7ff ff18 	bl	80093fc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2200      	movs	r2, #0
 80095d0:	771a      	strb	r2, [r3, #28]
}
 80095d2:	bf00      	nop
 80095d4:	3710      	adds	r7, #16
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
	...

080095dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
 80095e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	4a40      	ldr	r2, [pc, #256]	; (80096f0 <TIM_Base_SetConfig+0x114>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d013      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095fa:	d00f      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	4a3d      	ldr	r2, [pc, #244]	; (80096f4 <TIM_Base_SetConfig+0x118>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d00b      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	4a3c      	ldr	r2, [pc, #240]	; (80096f8 <TIM_Base_SetConfig+0x11c>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d007      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4a3b      	ldr	r2, [pc, #236]	; (80096fc <TIM_Base_SetConfig+0x120>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d003      	beq.n	800961c <TIM_Base_SetConfig+0x40>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4a3a      	ldr	r2, [pc, #232]	; (8009700 <TIM_Base_SetConfig+0x124>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d108      	bne.n	800962e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009622:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4313      	orrs	r3, r2
 800962c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a2f      	ldr	r2, [pc, #188]	; (80096f0 <TIM_Base_SetConfig+0x114>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d02b      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800963c:	d027      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	4a2c      	ldr	r2, [pc, #176]	; (80096f4 <TIM_Base_SetConfig+0x118>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d023      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4a2b      	ldr	r2, [pc, #172]	; (80096f8 <TIM_Base_SetConfig+0x11c>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d01f      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a2a      	ldr	r2, [pc, #168]	; (80096fc <TIM_Base_SetConfig+0x120>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d01b      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a29      	ldr	r2, [pc, #164]	; (8009700 <TIM_Base_SetConfig+0x124>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d017      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a28      	ldr	r2, [pc, #160]	; (8009704 <TIM_Base_SetConfig+0x128>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d013      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a27      	ldr	r2, [pc, #156]	; (8009708 <TIM_Base_SetConfig+0x12c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d00f      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a26      	ldr	r2, [pc, #152]	; (800970c <TIM_Base_SetConfig+0x130>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d00b      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a25      	ldr	r2, [pc, #148]	; (8009710 <TIM_Base_SetConfig+0x134>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d007      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4a24      	ldr	r2, [pc, #144]	; (8009714 <TIM_Base_SetConfig+0x138>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d003      	beq.n	800968e <TIM_Base_SetConfig+0xb2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a23      	ldr	r2, [pc, #140]	; (8009718 <TIM_Base_SetConfig+0x13c>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d108      	bne.n	80096a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	689a      	ldr	r2, [r3, #8]
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a0a      	ldr	r2, [pc, #40]	; (80096f0 <TIM_Base_SetConfig+0x114>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d003      	beq.n	80096d4 <TIM_Base_SetConfig+0xf8>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a0c      	ldr	r2, [pc, #48]	; (8009700 <TIM_Base_SetConfig+0x124>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d103      	bne.n	80096dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	691a      	ldr	r2, [r3, #16]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2201      	movs	r2, #1
 80096e0:	615a      	str	r2, [r3, #20]
}
 80096e2:	bf00      	nop
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	40010000 	.word	0x40010000
 80096f4:	40000400 	.word	0x40000400
 80096f8:	40000800 	.word	0x40000800
 80096fc:	40000c00 	.word	0x40000c00
 8009700:	40010400 	.word	0x40010400
 8009704:	40014000 	.word	0x40014000
 8009708:	40014400 	.word	0x40014400
 800970c:	40014800 	.word	0x40014800
 8009710:	40001800 	.word	0x40001800
 8009714:	40001c00 	.word	0x40001c00
 8009718:	40002000 	.word	0x40002000

0800971c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a1b      	ldr	r3, [r3, #32]
 800972a:	f023 0201 	bic.w	r2, r3, #1
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a1b      	ldr	r3, [r3, #32]
 8009736:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	4b2b      	ldr	r3, [pc, #172]	; (80097f4 <TIM_OC1_SetConfig+0xd8>)
 8009748:	4013      	ands	r3, r2
 800974a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f023 0303 	bic.w	r3, r3, #3
 8009752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	f023 0302 	bic.w	r3, r3, #2
 8009764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	4313      	orrs	r3, r2
 800976e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a21      	ldr	r2, [pc, #132]	; (80097f8 <TIM_OC1_SetConfig+0xdc>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d003      	beq.n	8009780 <TIM_OC1_SetConfig+0x64>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a20      	ldr	r2, [pc, #128]	; (80097fc <TIM_OC1_SetConfig+0xe0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d10c      	bne.n	800979a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009780:	697b      	ldr	r3, [r7, #20]
 8009782:	f023 0308 	bic.w	r3, r3, #8
 8009786:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	697a      	ldr	r2, [r7, #20]
 800978e:	4313      	orrs	r3, r2
 8009790:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	f023 0304 	bic.w	r3, r3, #4
 8009798:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	4a16      	ldr	r2, [pc, #88]	; (80097f8 <TIM_OC1_SetConfig+0xdc>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d003      	beq.n	80097aa <TIM_OC1_SetConfig+0x8e>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a15      	ldr	r2, [pc, #84]	; (80097fc <TIM_OC1_SetConfig+0xe0>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d111      	bne.n	80097ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	4313      	orrs	r3, r2
 80097c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	699b      	ldr	r3, [r3, #24]
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685a      	ldr	r2, [r3, #4]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	621a      	str	r2, [r3, #32]
}
 80097e8:	bf00      	nop
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	fffeff8f 	.word	0xfffeff8f
 80097f8:	40010000 	.word	0x40010000
 80097fc:	40010400 	.word	0x40010400

08009800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009800:	b480      	push	{r7}
 8009802:	b087      	sub	sp, #28
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
 8009808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a1b      	ldr	r3, [r3, #32]
 800980e:	f023 0210 	bic.w	r2, r3, #16
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	699b      	ldr	r3, [r3, #24]
 8009826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	4b2e      	ldr	r3, [pc, #184]	; (80098e4 <TIM_OC2_SetConfig+0xe4>)
 800982c:	4013      	ands	r3, r2
 800982e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	021b      	lsls	r3, r3, #8
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4313      	orrs	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009844:	697b      	ldr	r3, [r7, #20]
 8009846:	f023 0320 	bic.w	r3, r3, #32
 800984a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	011b      	lsls	r3, r3, #4
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	4313      	orrs	r3, r2
 8009856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a23      	ldr	r2, [pc, #140]	; (80098e8 <TIM_OC2_SetConfig+0xe8>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d003      	beq.n	8009868 <TIM_OC2_SetConfig+0x68>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a22      	ldr	r2, [pc, #136]	; (80098ec <TIM_OC2_SetConfig+0xec>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d10d      	bne.n	8009884 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800986e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	68db      	ldr	r3, [r3, #12]
 8009874:	011b      	lsls	r3, r3, #4
 8009876:	697a      	ldr	r2, [r7, #20]
 8009878:	4313      	orrs	r3, r2
 800987a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009882:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a18      	ldr	r2, [pc, #96]	; (80098e8 <TIM_OC2_SetConfig+0xe8>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d003      	beq.n	8009894 <TIM_OC2_SetConfig+0x94>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a17      	ldr	r2, [pc, #92]	; (80098ec <TIM_OC2_SetConfig+0xec>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d113      	bne.n	80098bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800989a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	695b      	ldr	r3, [r3, #20]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	693a      	ldr	r2, [r7, #16]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	699b      	ldr	r3, [r3, #24]
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	693a      	ldr	r2, [r7, #16]
 80098c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68fa      	ldr	r2, [r7, #12]
 80098c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	685a      	ldr	r2, [r3, #4]
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	697a      	ldr	r2, [r7, #20]
 80098d4:	621a      	str	r2, [r3, #32]
}
 80098d6:	bf00      	nop
 80098d8:	371c      	adds	r7, #28
 80098da:	46bd      	mov	sp, r7
 80098dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e0:	4770      	bx	lr
 80098e2:	bf00      	nop
 80098e4:	feff8fff 	.word	0xfeff8fff
 80098e8:	40010000 	.word	0x40010000
 80098ec:	40010400 	.word	0x40010400

080098f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b087      	sub	sp, #28
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a1b      	ldr	r3, [r3, #32]
 80098fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6a1b      	ldr	r3, [r3, #32]
 800990a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	4b2d      	ldr	r3, [pc, #180]	; (80099d0 <TIM_OC3_SetConfig+0xe0>)
 800991c:	4013      	ands	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f023 0303 	bic.w	r3, r3, #3
 8009926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	4313      	orrs	r3, r2
 8009930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	021b      	lsls	r3, r3, #8
 8009940:	697a      	ldr	r2, [r7, #20]
 8009942:	4313      	orrs	r3, r2
 8009944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4a22      	ldr	r2, [pc, #136]	; (80099d4 <TIM_OC3_SetConfig+0xe4>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d003      	beq.n	8009956 <TIM_OC3_SetConfig+0x66>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	4a21      	ldr	r2, [pc, #132]	; (80099d8 <TIM_OC3_SetConfig+0xe8>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d10d      	bne.n	8009972 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800995c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	021b      	lsls	r3, r3, #8
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	4313      	orrs	r3, r2
 8009968:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009970:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a17      	ldr	r2, [pc, #92]	; (80099d4 <TIM_OC3_SetConfig+0xe4>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d003      	beq.n	8009982 <TIM_OC3_SetConfig+0x92>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a16      	ldr	r2, [pc, #88]	; (80099d8 <TIM_OC3_SetConfig+0xe8>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d113      	bne.n	80099aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	011b      	lsls	r3, r3, #4
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	621a      	str	r2, [r3, #32]
}
 80099c4:	bf00      	nop
 80099c6:	371c      	adds	r7, #28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	fffeff8f 	.word	0xfffeff8f
 80099d4:	40010000 	.word	0x40010000
 80099d8:	40010400 	.word	0x40010400

080099dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	69db      	ldr	r3, [r3, #28]
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4b1e      	ldr	r3, [pc, #120]	; (8009a80 <TIM_OC4_SetConfig+0xa4>)
 8009a08:	4013      	ands	r3, r2
 8009a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	021b      	lsls	r3, r3, #8
 8009a1a:	68fa      	ldr	r2, [r7, #12]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	031b      	lsls	r3, r3, #12
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a13      	ldr	r2, [pc, #76]	; (8009a84 <TIM_OC4_SetConfig+0xa8>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d003      	beq.n	8009a44 <TIM_OC4_SetConfig+0x68>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a12      	ldr	r2, [pc, #72]	; (8009a88 <TIM_OC4_SetConfig+0xac>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d109      	bne.n	8009a58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	695b      	ldr	r3, [r3, #20]
 8009a50:	019b      	lsls	r3, r3, #6
 8009a52:	697a      	ldr	r2, [r7, #20]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	685a      	ldr	r2, [r3, #4]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	621a      	str	r2, [r3, #32]
}
 8009a72:	bf00      	nop
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	feff8fff 	.word	0xfeff8fff
 8009a84:	40010000 	.word	0x40010000
 8009a88:	40010400 	.word	0x40010400

08009a8c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	b087      	sub	sp, #28
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	685b      	ldr	r3, [r3, #4]
 8009aac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4b1b      	ldr	r3, [pc, #108]	; (8009b24 <TIM_OC5_SetConfig+0x98>)
 8009ab8:	4013      	ands	r3, r2
 8009aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009acc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	689b      	ldr	r3, [r3, #8]
 8009ad2:	041b      	lsls	r3, r3, #16
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a12      	ldr	r2, [pc, #72]	; (8009b28 <TIM_OC5_SetConfig+0x9c>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d003      	beq.n	8009aea <TIM_OC5_SetConfig+0x5e>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	4a11      	ldr	r2, [pc, #68]	; (8009b2c <TIM_OC5_SetConfig+0xa0>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d109      	bne.n	8009afe <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009af0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	695b      	ldr	r3, [r3, #20]
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	4313      	orrs	r3, r2
 8009afc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	697a      	ldr	r2, [r7, #20]
 8009b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	68fa      	ldr	r2, [r7, #12]
 8009b08:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	685a      	ldr	r2, [r3, #4]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	693a      	ldr	r2, [r7, #16]
 8009b16:	621a      	str	r2, [r3, #32]
}
 8009b18:	bf00      	nop
 8009b1a:	371c      	adds	r7, #28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr
 8009b24:	fffeff8f 	.word	0xfffeff8f
 8009b28:	40010000 	.word	0x40010000
 8009b2c:	40010400 	.word	0x40010400

08009b30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b30:	b480      	push	{r7}
 8009b32:	b087      	sub	sp, #28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a1b      	ldr	r3, [r3, #32]
 8009b4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	685b      	ldr	r3, [r3, #4]
 8009b50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	4b1c      	ldr	r3, [pc, #112]	; (8009bcc <TIM_OC6_SetConfig+0x9c>)
 8009b5c:	4013      	ands	r3, r2
 8009b5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	021b      	lsls	r3, r3, #8
 8009b66:	68fa      	ldr	r2, [r7, #12]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	689b      	ldr	r3, [r3, #8]
 8009b78:	051b      	lsls	r3, r3, #20
 8009b7a:	693a      	ldr	r2, [r7, #16]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	4a13      	ldr	r2, [pc, #76]	; (8009bd0 <TIM_OC6_SetConfig+0xa0>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d003      	beq.n	8009b90 <TIM_OC6_SetConfig+0x60>
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	4a12      	ldr	r2, [pc, #72]	; (8009bd4 <TIM_OC6_SetConfig+0xa4>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d109      	bne.n	8009ba4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	695b      	ldr	r3, [r3, #20]
 8009b9c:	029b      	lsls	r3, r3, #10
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	697a      	ldr	r2, [r7, #20]
 8009ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	685a      	ldr	r2, [r3, #4]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	693a      	ldr	r2, [r7, #16]
 8009bbc:	621a      	str	r2, [r3, #32]
}
 8009bbe:	bf00      	nop
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc8:	4770      	bx	lr
 8009bca:	bf00      	nop
 8009bcc:	feff8fff 	.word	0xfeff8fff
 8009bd0:	40010000 	.word	0x40010000
 8009bd4:	40010400 	.word	0x40010400

08009bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b087      	sub	sp, #28
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	60f8      	str	r0, [r7, #12]
 8009be0:	60b9      	str	r1, [r7, #8]
 8009be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6a1b      	ldr	r3, [r3, #32]
 8009be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	6a1b      	ldr	r3, [r3, #32]
 8009bee:	f023 0201 	bic.w	r2, r3, #1
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	699b      	ldr	r3, [r3, #24]
 8009bfa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c0e:	697b      	ldr	r3, [r7, #20]
 8009c10:	f023 030a 	bic.w	r3, r3, #10
 8009c14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c16:	697a      	ldr	r2, [r7, #20]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	693a      	ldr	r2, [r7, #16]
 8009c22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	697a      	ldr	r2, [r7, #20]
 8009c28:	621a      	str	r2, [r3, #32]
}
 8009c2a:	bf00      	nop
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c36:	b480      	push	{r7}
 8009c38:	b087      	sub	sp, #28
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	60f8      	str	r0, [r7, #12]
 8009c3e:	60b9      	str	r1, [r7, #8]
 8009c40:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	f023 0210 	bic.w	r2, r3, #16
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	699b      	ldr	r3, [r3, #24]
 8009c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	6a1b      	ldr	r3, [r3, #32]
 8009c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	031b      	lsls	r3, r3, #12
 8009c66:	697a      	ldr	r2, [r7, #20]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c6c:	693b      	ldr	r3, [r7, #16]
 8009c6e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	011b      	lsls	r3, r3, #4
 8009c78:	693a      	ldr	r2, [r7, #16]
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	693a      	ldr	r2, [r7, #16]
 8009c88:	621a      	str	r2, [r3, #32]
}
 8009c8a:	bf00      	nop
 8009c8c:	371c      	adds	r7, #28
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c94:	4770      	bx	lr

08009c96 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b085      	sub	sp, #20
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cae:	683a      	ldr	r2, [r7, #0]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	f043 0307 	orr.w	r3, r3, #7
 8009cb8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	68fa      	ldr	r2, [r7, #12]
 8009cbe:	609a      	str	r2, [r3, #8]
}
 8009cc0:	bf00      	nop
 8009cc2:	3714      	adds	r7, #20
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr

08009ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b087      	sub	sp, #28
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	60f8      	str	r0, [r7, #12]
 8009cd4:	60b9      	str	r1, [r7, #8]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ce0:	697b      	ldr	r3, [r7, #20]
 8009ce2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	021a      	lsls	r2, r3, #8
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	431a      	orrs	r2, r3
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	697a      	ldr	r2, [r7, #20]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	609a      	str	r2, [r3, #8]
}
 8009d00:	bf00      	nop
 8009d02:	371c      	adds	r7, #28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b087      	sub	sp, #28
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	60f8      	str	r0, [r7, #12]
 8009d14:	60b9      	str	r1, [r7, #8]
 8009d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	f003 031f 	and.w	r3, r3, #31
 8009d1e:	2201      	movs	r2, #1
 8009d20:	fa02 f303 	lsl.w	r3, r2, r3
 8009d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	6a1a      	ldr	r2, [r3, #32]
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	43db      	mvns	r3, r3
 8009d2e:	401a      	ands	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6a1a      	ldr	r2, [r3, #32]
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f003 031f 	and.w	r3, r3, #31
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	fa01 f303 	lsl.w	r3, r1, r3
 8009d44:	431a      	orrs	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	621a      	str	r2, [r3, #32]
}
 8009d4a:	bf00      	nop
 8009d4c:	371c      	adds	r7, #28
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d54:	4770      	bx	lr
	...

08009d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d101      	bne.n	8009d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	e06d      	b.n	8009e4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	689b      	ldr	r3, [r3, #8]
 8009d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a30      	ldr	r2, [pc, #192]	; (8009e58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d004      	beq.n	8009da4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a2f      	ldr	r2, [pc, #188]	; (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d108      	bne.n	8009db6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009daa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	68fa      	ldr	r2, [r7, #12]
 8009db2:	4313      	orrs	r3, r2
 8009db4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68fa      	ldr	r2, [r7, #12]
 8009dc4:	4313      	orrs	r3, r2
 8009dc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a20      	ldr	r2, [pc, #128]	; (8009e58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d022      	beq.n	8009e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009de2:	d01d      	beq.n	8009e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a1d      	ldr	r2, [pc, #116]	; (8009e60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d018      	beq.n	8009e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a1c      	ldr	r2, [pc, #112]	; (8009e64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d013      	beq.n	8009e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a1a      	ldr	r2, [pc, #104]	; (8009e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00e      	beq.n	8009e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a15      	ldr	r2, [pc, #84]	; (8009e5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d009      	beq.n	8009e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a16      	ldr	r2, [pc, #88]	; (8009e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d004      	beq.n	8009e20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a15      	ldr	r2, [pc, #84]	; (8009e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d10c      	bne.n	8009e3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e4a:	2300      	movs	r3, #0
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3714      	adds	r7, #20
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr
 8009e58:	40010000 	.word	0x40010000
 8009e5c:	40010400 	.word	0x40010400
 8009e60:	40000400 	.word	0x40000400
 8009e64:	40000800 	.word	0x40000800
 8009e68:	40000c00 	.word	0x40000c00
 8009e6c:	40014000 	.word	0x40014000
 8009e70:	40001800 	.word	0x40001800

08009e74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b085      	sub	sp, #20
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d101      	bne.n	8009e90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	e065      	b.n	8009f5c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2201      	movs	r2, #1
 8009e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	4313      	orrs	r3, r2
 8009edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	695b      	ldr	r3, [r3, #20]
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	699b      	ldr	r3, [r3, #24]
 8009f04:	041b      	lsls	r3, r3, #16
 8009f06:	4313      	orrs	r3, r2
 8009f08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a16      	ldr	r2, [pc, #88]	; (8009f68 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d004      	beq.n	8009f1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	4a14      	ldr	r2, [pc, #80]	; (8009f6c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d115      	bne.n	8009f4a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	051b      	lsls	r3, r3, #20
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	69db      	ldr	r3, [r3, #28]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009f42:	683b      	ldr	r3, [r7, #0]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f5a:	2300      	movs	r3, #0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3714      	adds	r7, #20
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr
 8009f68:	40010000 	.word	0x40010000
 8009f6c:	40010400 	.word	0x40010400

08009f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b083      	sub	sp, #12
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f78:	bf00      	nop
 8009f7a:	370c      	adds	r7, #12
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f82:	4770      	bx	lr

08009f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f8c:	bf00      	nop
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b083      	sub	sp, #12
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009fa0:	bf00      	nop
 8009fa2:	370c      	adds	r7, #12
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009faa:	4770      	bx	lr

08009fac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d121      	bne.n	800a002 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681a      	ldr	r2, [r3, #0]
 8009fc2:	4b27      	ldr	r3, [pc, #156]	; (800a060 <FMC_SDRAM_Init+0xb4>)
 8009fc4:	4013      	ands	r3, r2
 8009fc6:	683a      	ldr	r2, [r7, #0]
 8009fc8:	6851      	ldr	r1, [r2, #4]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	6892      	ldr	r2, [r2, #8]
 8009fce:	4311      	orrs	r1, r2
 8009fd0:	683a      	ldr	r2, [r7, #0]
 8009fd2:	68d2      	ldr	r2, [r2, #12]
 8009fd4:	4311      	orrs	r1, r2
 8009fd6:	683a      	ldr	r2, [r7, #0]
 8009fd8:	6912      	ldr	r2, [r2, #16]
 8009fda:	4311      	orrs	r1, r2
 8009fdc:	683a      	ldr	r2, [r7, #0]
 8009fde:	6952      	ldr	r2, [r2, #20]
 8009fe0:	4311      	orrs	r1, r2
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	6992      	ldr	r2, [r2, #24]
 8009fe6:	4311      	orrs	r1, r2
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	69d2      	ldr	r2, [r2, #28]
 8009fec:	4311      	orrs	r1, r2
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	6a12      	ldr	r2, [r2, #32]
 8009ff2:	4311      	orrs	r1, r2
 8009ff4:	683a      	ldr	r2, [r7, #0]
 8009ff6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009ff8:	430a      	orrs	r2, r1
 8009ffa:	431a      	orrs	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	601a      	str	r2, [r3, #0]
 800a000:	e026      	b.n	800a050 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	69d9      	ldr	r1, [r3, #28]
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	4319      	orrs	r1, r3
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	430b      	orrs	r3, r1
 800a01a:	431a      	orrs	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685a      	ldr	r2, [r3, #4]
 800a024:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <FMC_SDRAM_Init+0xb4>)
 800a026:	4013      	ands	r3, r2
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	6851      	ldr	r1, [r2, #4]
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	6892      	ldr	r2, [r2, #8]
 800a030:	4311      	orrs	r1, r2
 800a032:	683a      	ldr	r2, [r7, #0]
 800a034:	68d2      	ldr	r2, [r2, #12]
 800a036:	4311      	orrs	r1, r2
 800a038:	683a      	ldr	r2, [r7, #0]
 800a03a:	6912      	ldr	r2, [r2, #16]
 800a03c:	4311      	orrs	r1, r2
 800a03e:	683a      	ldr	r2, [r7, #0]
 800a040:	6952      	ldr	r2, [r2, #20]
 800a042:	4311      	orrs	r1, r2
 800a044:	683a      	ldr	r2, [r7, #0]
 800a046:	6992      	ldr	r2, [r2, #24]
 800a048:	430a      	orrs	r2, r1
 800a04a:	431a      	orrs	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a050:	2300      	movs	r3, #0
}
 800a052:	4618      	mov	r0, r3
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	ffff8000 	.word	0xffff8000

0800a064 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d128      	bne.n	800a0c8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	1e59      	subs	r1, r3, #1
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	3b01      	subs	r3, #1
 800a08a:	011b      	lsls	r3, r3, #4
 800a08c:	4319      	orrs	r1, r3
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	689b      	ldr	r3, [r3, #8]
 800a092:	3b01      	subs	r3, #1
 800a094:	021b      	lsls	r3, r3, #8
 800a096:	4319      	orrs	r1, r3
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	3b01      	subs	r3, #1
 800a09e:	031b      	lsls	r3, r3, #12
 800a0a0:	4319      	orrs	r1, r3
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	691b      	ldr	r3, [r3, #16]
 800a0a6:	3b01      	subs	r3, #1
 800a0a8:	041b      	lsls	r3, r3, #16
 800a0aa:	4319      	orrs	r1, r3
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	695b      	ldr	r3, [r3, #20]
 800a0b0:	3b01      	subs	r3, #1
 800a0b2:	051b      	lsls	r3, r3, #20
 800a0b4:	4319      	orrs	r1, r3
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	699b      	ldr	r3, [r3, #24]
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	061b      	lsls	r3, r3, #24
 800a0be:	430b      	orrs	r3, r1
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	609a      	str	r2, [r3, #8]
 800a0c6:	e02d      	b.n	800a124 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	4b19      	ldr	r3, [pc, #100]	; (800a134 <FMC_SDRAM_Timing_Init+0xd0>)
 800a0ce:	4013      	ands	r3, r2
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	68d2      	ldr	r2, [r2, #12]
 800a0d4:	3a01      	subs	r2, #1
 800a0d6:	0311      	lsls	r1, r2, #12
 800a0d8:	68ba      	ldr	r2, [r7, #8]
 800a0da:	6952      	ldr	r2, [r2, #20]
 800a0dc:	3a01      	subs	r2, #1
 800a0de:	0512      	lsls	r2, r2, #20
 800a0e0:	430a      	orrs	r2, r1
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	1e59      	subs	r1, r3, #1
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	3b01      	subs	r3, #1
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	4319      	orrs	r1, r3
 800a100:	68bb      	ldr	r3, [r7, #8]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	3b01      	subs	r3, #1
 800a106:	021b      	lsls	r3, r3, #8
 800a108:	4319      	orrs	r1, r3
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	691b      	ldr	r3, [r3, #16]
 800a10e:	3b01      	subs	r3, #1
 800a110:	041b      	lsls	r3, r3, #16
 800a112:	4319      	orrs	r1, r3
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	699b      	ldr	r3, [r3, #24]
 800a118:	3b01      	subs	r3, #1
 800a11a:	061b      	lsls	r3, r3, #24
 800a11c:	430b      	orrs	r3, r1
 800a11e:	431a      	orrs	r2, r3
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3714      	adds	r7, #20
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	ff0f0fff 	.word	0xff0f0fff

0800a138 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a138:	b480      	push	{r7}
 800a13a:	b085      	sub	sp, #20
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	691a      	ldr	r2, [r3, #16]
 800a148:	4b0c      	ldr	r3, [pc, #48]	; (800a17c <FMC_SDRAM_SendCommand+0x44>)
 800a14a:	4013      	ands	r3, r2
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	6811      	ldr	r1, [r2, #0]
 800a150:	68ba      	ldr	r2, [r7, #8]
 800a152:	6852      	ldr	r2, [r2, #4]
 800a154:	4311      	orrs	r1, r2
 800a156:	68ba      	ldr	r2, [r7, #8]
 800a158:	6892      	ldr	r2, [r2, #8]
 800a15a:	3a01      	subs	r2, #1
 800a15c:	0152      	lsls	r2, r2, #5
 800a15e:	4311      	orrs	r1, r2
 800a160:	68ba      	ldr	r2, [r7, #8]
 800a162:	68d2      	ldr	r2, [r2, #12]
 800a164:	0252      	lsls	r2, r2, #9
 800a166:	430a      	orrs	r2, r1
 800a168:	431a      	orrs	r2, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 800a16e:	2300      	movs	r3, #0
}
 800a170:	4618      	mov	r0, r3
 800a172:	3714      	adds	r7, #20
 800a174:	46bd      	mov	sp, r7
 800a176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a17a:	4770      	bx	lr
 800a17c:	ffc00000 	.word	0xffc00000

0800a180 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	695a      	ldr	r2, [r3, #20]
 800a18e:	4b07      	ldr	r3, [pc, #28]	; (800a1ac <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 800a190:	4013      	ands	r3, r2
 800a192:	683a      	ldr	r2, [r7, #0]
 800a194:	0052      	lsls	r2, r2, #1
 800a196:	431a      	orrs	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	370c      	adds	r7, #12
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a8:	4770      	bx	lr
 800a1aa:	bf00      	nop
 800a1ac:	ffffc001 	.word	0xffffc001

0800a1b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1b0:	b480      	push	{r7}
 800a1b2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800a1b4:	bf00      	nop
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
	...

0800a1c0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1c6:	f3ef 8305 	mrs	r3, IPSR
 800a1ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d10f      	bne.n	800a1f2 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d2:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d6:	607b      	str	r3, [r7, #4]
  return(result);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d105      	bne.n	800a1ea <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a1de:	f3ef 8311 	mrs	r3, BASEPRI
 800a1e2:	603b      	str	r3, [r7, #0]
  return(result);
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d007      	beq.n	800a1fa <osKernelInitialize+0x3a>
 800a1ea:	4b0e      	ldr	r3, [pc, #56]	; (800a224 <osKernelInitialize+0x64>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d103      	bne.n	800a1fa <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800a1f2:	f06f 0305 	mvn.w	r3, #5
 800a1f6:	60fb      	str	r3, [r7, #12]
 800a1f8:	e00c      	b.n	800a214 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1fa:	4b0a      	ldr	r3, [pc, #40]	; (800a224 <osKernelInitialize+0x64>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d105      	bne.n	800a20e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a202:	4b08      	ldr	r3, [pc, #32]	; (800a224 <osKernelInitialize+0x64>)
 800a204:	2201      	movs	r2, #1
 800a206:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a208:	2300      	movs	r3, #0
 800a20a:	60fb      	str	r3, [r7, #12]
 800a20c:	e002      	b.n	800a214 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800a20e:	f04f 33ff 	mov.w	r3, #4294967295
 800a212:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a214:	68fb      	ldr	r3, [r7, #12]
}
 800a216:	4618      	mov	r0, r3
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	20000b4c 	.word	0x20000b4c

0800a228 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b084      	sub	sp, #16
 800a22c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a22e:	f3ef 8305 	mrs	r3, IPSR
 800a232:	60bb      	str	r3, [r7, #8]
  return(result);
 800a234:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10f      	bne.n	800a25a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a23a:	f3ef 8310 	mrs	r3, PRIMASK
 800a23e:	607b      	str	r3, [r7, #4]
  return(result);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d105      	bne.n	800a252 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a246:	f3ef 8311 	mrs	r3, BASEPRI
 800a24a:	603b      	str	r3, [r7, #0]
  return(result);
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d007      	beq.n	800a262 <osKernelStart+0x3a>
 800a252:	4b0f      	ldr	r3, [pc, #60]	; (800a290 <osKernelStart+0x68>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b02      	cmp	r3, #2
 800a258:	d103      	bne.n	800a262 <osKernelStart+0x3a>
    stat = osErrorISR;
 800a25a:	f06f 0305 	mvn.w	r3, #5
 800a25e:	60fb      	str	r3, [r7, #12]
 800a260:	e010      	b.n	800a284 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a262:	4b0b      	ldr	r3, [pc, #44]	; (800a290 <osKernelStart+0x68>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b01      	cmp	r3, #1
 800a268:	d109      	bne.n	800a27e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a26a:	f7ff ffa1 	bl	800a1b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a26e:	4b08      	ldr	r3, [pc, #32]	; (800a290 <osKernelStart+0x68>)
 800a270:	2202      	movs	r2, #2
 800a272:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a274:	f002 f8c8 	bl	800c408 <vTaskStartScheduler>
      stat = osOK;
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	e002      	b.n	800a284 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800a27e:	f04f 33ff 	mov.w	r3, #4294967295
 800a282:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800a284:	68fb      	ldr	r3, [r7, #12]
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000b4c 	.word	0x20000b4c

0800a294 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a294:	b580      	push	{r7, lr}
 800a296:	b090      	sub	sp, #64	; 0x40
 800a298:	af04      	add	r7, sp, #16
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2a4:	f3ef 8305 	mrs	r3, IPSR
 800a2a8:	61fb      	str	r3, [r7, #28]
  return(result);
 800a2aa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	f040 808f 	bne.w	800a3d0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2b2:	f3ef 8310 	mrs	r3, PRIMASK
 800a2b6:	61bb      	str	r3, [r7, #24]
  return(result);
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d105      	bne.n	800a2ca <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a2be:	f3ef 8311 	mrs	r3, BASEPRI
 800a2c2:	617b      	str	r3, [r7, #20]
  return(result);
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <osThreadNew+0x3e>
 800a2ca:	4b44      	ldr	r3, [pc, #272]	; (800a3dc <osThreadNew+0x148>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	d07e      	beq.n	800a3d0 <osThreadNew+0x13c>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d07b      	beq.n	800a3d0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800a2d8:	2380      	movs	r3, #128	; 0x80
 800a2da:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800a2dc:	2318      	movs	r3, #24
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800a2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d045      	beq.n	800a37c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <osThreadNew+0x6a>
        name = attr->name;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d002      	beq.n	800a30c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	699b      	ldr	r3, [r3, #24]
 800a30a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a30c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d008      	beq.n	800a324 <osThreadNew+0x90>
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	2b38      	cmp	r3, #56	; 0x38
 800a316:	d805      	bhi.n	800a324 <osThreadNew+0x90>
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	685b      	ldr	r3, [r3, #4]
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <osThreadNew+0x94>
        return (NULL);
 800a324:	2300      	movs	r3, #0
 800a326:	e054      	b.n	800a3d2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	695b      	ldr	r3, [r3, #20]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d003      	beq.n	800a338 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	695b      	ldr	r3, [r3, #20]
 800a334:	089b      	lsrs	r3, r3, #2
 800a336:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	689b      	ldr	r3, [r3, #8]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d00e      	beq.n	800a35e <osThreadNew+0xca>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	2b5b      	cmp	r3, #91	; 0x5b
 800a346:	d90a      	bls.n	800a35e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	695b      	ldr	r3, [r3, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d002      	beq.n	800a35e <osThreadNew+0xca>
        mem = 1;
 800a358:	2301      	movs	r3, #1
 800a35a:	623b      	str	r3, [r7, #32]
 800a35c:	e010      	b.n	800a380 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	689b      	ldr	r3, [r3, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d10c      	bne.n	800a380 <osThreadNew+0xec>
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d108      	bne.n	800a380 <osThreadNew+0xec>
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	691b      	ldr	r3, [r3, #16]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d104      	bne.n	800a380 <osThreadNew+0xec>
          mem = 0;
 800a376:	2300      	movs	r3, #0
 800a378:	623b      	str	r3, [r7, #32]
 800a37a:	e001      	b.n	800a380 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800a380:	6a3b      	ldr	r3, [r7, #32]
 800a382:	2b01      	cmp	r3, #1
 800a384:	d110      	bne.n	800a3a8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800a38a:	687a      	ldr	r2, [r7, #4]
 800a38c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a38e:	9202      	str	r2, [sp, #8]
 800a390:	9301      	str	r3, [sp, #4]
 800a392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a394:	9300      	str	r3, [sp, #0]
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a39a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f001 fe53 	bl	800c048 <xTaskCreateStatic>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	613b      	str	r3, [r7, #16]
 800a3a6:	e013      	b.n	800a3d0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800a3a8:	6a3b      	ldr	r3, [r7, #32]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d110      	bne.n	800a3d0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b0:	b29a      	uxth	r2, r3
 800a3b2:	f107 0310 	add.w	r3, r7, #16
 800a3b6:	9301      	str	r3, [sp, #4]
 800a3b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a3c0:	68f8      	ldr	r0, [r7, #12]
 800a3c2:	f001 fea4 	bl	800c10e <xTaskCreate>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d001      	beq.n	800a3d0 <osThreadNew+0x13c>
          hTask = NULL;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3d0:	693b      	ldr	r3, [r7, #16]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3730      	adds	r7, #48	; 0x30
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop
 800a3dc:	20000b4c 	.word	0x20000b4c

0800a3e0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3e8:	f3ef 8305 	mrs	r3, IPSR
 800a3ec:	613b      	str	r3, [r7, #16]
  return(result);
 800a3ee:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10f      	bne.n	800a414 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3f4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d105      	bne.n	800a40c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a400:	f3ef 8311 	mrs	r3, BASEPRI
 800a404:	60bb      	str	r3, [r7, #8]
  return(result);
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d007      	beq.n	800a41c <osDelay+0x3c>
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <osDelay+0x58>)
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2b02      	cmp	r3, #2
 800a412:	d103      	bne.n	800a41c <osDelay+0x3c>
    stat = osErrorISR;
 800a414:	f06f 0305 	mvn.w	r3, #5
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	e007      	b.n	800a42c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d002      	beq.n	800a42c <osDelay+0x4c>
      vTaskDelay(ticks);
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f001 ffb8 	bl	800c39c <vTaskDelay>
    }
  }

  return (stat);
 800a42c:	697b      	ldr	r3, [r7, #20]
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3718      	adds	r7, #24
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	20000b4c 	.word	0x20000b4c

0800a43c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08a      	sub	sp, #40	; 0x28
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a444:	2300      	movs	r3, #0
 800a446:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a448:	f3ef 8305 	mrs	r3, IPSR
 800a44c:	613b      	str	r3, [r7, #16]
  return(result);
 800a44e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800a450:	2b00      	cmp	r3, #0
 800a452:	f040 8085 	bne.w	800a560 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a456:	f3ef 8310 	mrs	r3, PRIMASK
 800a45a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d105      	bne.n	800a46e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a462:	f3ef 8311 	mrs	r3, BASEPRI
 800a466:	60bb      	str	r3, [r7, #8]
  return(result);
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d003      	beq.n	800a476 <osMutexNew+0x3a>
 800a46e:	4b3f      	ldr	r3, [pc, #252]	; (800a56c <osMutexNew+0x130>)
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	2b02      	cmp	r3, #2
 800a474:	d074      	beq.n	800a560 <osMutexNew+0x124>
    if (attr != NULL) {
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d003      	beq.n	800a484 <osMutexNew+0x48>
      type = attr->attr_bits;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	623b      	str	r3, [r7, #32]
 800a482:	e001      	b.n	800a488 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800a484:	2300      	movs	r3, #0
 800a486:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	f003 0301 	and.w	r3, r3, #1
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <osMutexNew+0x5c>
      rmtx = 1U;
 800a492:	2301      	movs	r3, #1
 800a494:	61fb      	str	r3, [r7, #28]
 800a496:	e001      	b.n	800a49c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800a498:	2300      	movs	r3, #0
 800a49a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d15c      	bne.n	800a560 <osMutexNew+0x124>
      mem = -1;
 800a4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4aa:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d015      	beq.n	800a4de <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d006      	beq.n	800a4c8 <osMutexNew+0x8c>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	68db      	ldr	r3, [r3, #12]
 800a4be:	2b4f      	cmp	r3, #79	; 0x4f
 800a4c0:	d902      	bls.n	800a4c8 <osMutexNew+0x8c>
          mem = 1;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	61bb      	str	r3, [r7, #24]
 800a4c6:	e00c      	b.n	800a4e2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d108      	bne.n	800a4e2 <osMutexNew+0xa6>
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	68db      	ldr	r3, [r3, #12]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d104      	bne.n	800a4e2 <osMutexNew+0xa6>
            mem = 0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61bb      	str	r3, [r7, #24]
 800a4dc:	e001      	b.n	800a4e2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800a4e2:	69bb      	ldr	r3, [r7, #24]
 800a4e4:	2b01      	cmp	r3, #1
 800a4e6:	d112      	bne.n	800a50e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d007      	beq.n	800a4fe <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	2004      	movs	r0, #4
 800a4f6:	f000 fe1a 	bl	800b12e <xQueueCreateMutexStatic>
 800a4fa:	6278      	str	r0, [r7, #36]	; 0x24
 800a4fc:	e016      	b.n	800a52c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	4619      	mov	r1, r3
 800a504:	2001      	movs	r0, #1
 800a506:	f000 fe12 	bl	800b12e <xQueueCreateMutexStatic>
 800a50a:	6278      	str	r0, [r7, #36]	; 0x24
 800a50c:	e00e      	b.n	800a52c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800a50e:	69bb      	ldr	r3, [r7, #24]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10b      	bne.n	800a52c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d004      	beq.n	800a524 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800a51a:	2004      	movs	r0, #4
 800a51c:	f000 fdef 	bl	800b0fe <xQueueCreateMutex>
 800a520:	6278      	str	r0, [r7, #36]	; 0x24
 800a522:	e003      	b.n	800a52c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800a524:	2001      	movs	r0, #1
 800a526:	f000 fdea 	bl	800b0fe <xQueueCreateMutex>
 800a52a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d00c      	beq.n	800a54c <osMutexNew+0x110>
        if (attr != NULL) {
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <osMutexNew+0x104>
          name = attr->name;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	617b      	str	r3, [r7, #20]
 800a53e:	e001      	b.n	800a544 <osMutexNew+0x108>
        } else {
          name = NULL;
 800a540:	2300      	movs	r3, #0
 800a542:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800a544:	6979      	ldr	r1, [r7, #20]
 800a546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a548:	f001 fcf6 	bl	800bf38 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d006      	beq.n	800a560 <osMutexNew+0x124>
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d003      	beq.n	800a560 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	f043 0301 	orr.w	r3, r3, #1
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a562:	4618      	mov	r0, r3
 800a564:	3728      	adds	r7, #40	; 0x28
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000b4c 	.word	0x20000b4c

0800a570 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	f023 0301 	bic.w	r3, r3, #1
 800a580:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f003 0301 	and.w	r3, r3, #1
 800a588:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a58a:	2300      	movs	r3, #0
 800a58c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a58e:	f3ef 8305 	mrs	r3, IPSR
 800a592:	613b      	str	r3, [r7, #16]
  return(result);
 800a594:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10f      	bne.n	800a5ba <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a59a:	f3ef 8310 	mrs	r3, PRIMASK
 800a59e:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d105      	bne.n	800a5b2 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a5a6:	f3ef 8311 	mrs	r3, BASEPRI
 800a5aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d007      	beq.n	800a5c2 <osMutexAcquire+0x52>
 800a5b2:	4b1d      	ldr	r3, [pc, #116]	; (800a628 <osMutexAcquire+0xb8>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d103      	bne.n	800a5c2 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800a5ba:	f06f 0305 	mvn.w	r3, #5
 800a5be:	61fb      	str	r3, [r7, #28]
 800a5c0:	e02c      	b.n	800a61c <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d103      	bne.n	800a5d0 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800a5c8:	f06f 0303 	mvn.w	r3, #3
 800a5cc:	61fb      	str	r3, [r7, #28]
 800a5ce:	e025      	b.n	800a61c <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d011      	beq.n	800a5fa <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	69b8      	ldr	r0, [r7, #24]
 800a5da:	f000 fdf9 	bl	800b1d0 <xQueueTakeMutexRecursive>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d01b      	beq.n	800a61c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d003      	beq.n	800a5f2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800a5ea:	f06f 0301 	mvn.w	r3, #1
 800a5ee:	61fb      	str	r3, [r7, #28]
 800a5f0:	e014      	b.n	800a61c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a5f2:	f06f 0302 	mvn.w	r3, #2
 800a5f6:	61fb      	str	r3, [r7, #28]
 800a5f8:	e010      	b.n	800a61c <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	69b8      	ldr	r0, [r7, #24]
 800a5fe:	f001 f9b3 	bl	800b968 <xQueueSemaphoreTake>
 800a602:	4603      	mov	r3, r0
 800a604:	2b01      	cmp	r3, #1
 800a606:	d009      	beq.n	800a61c <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d003      	beq.n	800a616 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800a60e:	f06f 0301 	mvn.w	r3, #1
 800a612:	61fb      	str	r3, [r7, #28]
 800a614:	e002      	b.n	800a61c <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800a616:	f06f 0302 	mvn.w	r3, #2
 800a61a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a61c:	69fb      	ldr	r3, [r7, #28]
}
 800a61e:	4618      	mov	r0, r3
 800a620:	3720      	adds	r7, #32
 800a622:	46bd      	mov	sp, r7
 800a624:	bd80      	pop	{r7, pc}
 800a626:	bf00      	nop
 800a628:	20000b4c 	.word	0x20000b4c

0800a62c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b088      	sub	sp, #32
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f023 0301 	bic.w	r3, r3, #1
 800a63a:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f003 0301 	and.w	r3, r3, #1
 800a642:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800a644:	2300      	movs	r3, #0
 800a646:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a648:	f3ef 8305 	mrs	r3, IPSR
 800a64c:	613b      	str	r3, [r7, #16]
  return(result);
 800a64e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800a650:	2b00      	cmp	r3, #0
 800a652:	d10f      	bne.n	800a674 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a654:	f3ef 8310 	mrs	r3, PRIMASK
 800a658:	60fb      	str	r3, [r7, #12]
  return(result);
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d105      	bne.n	800a66c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a660:	f3ef 8311 	mrs	r3, BASEPRI
 800a664:	60bb      	str	r3, [r7, #8]
  return(result);
 800a666:	68bb      	ldr	r3, [r7, #8]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d007      	beq.n	800a67c <osMutexRelease+0x50>
 800a66c:	4b16      	ldr	r3, [pc, #88]	; (800a6c8 <osMutexRelease+0x9c>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	2b02      	cmp	r3, #2
 800a672:	d103      	bne.n	800a67c <osMutexRelease+0x50>
    stat = osErrorISR;
 800a674:	f06f 0305 	mvn.w	r3, #5
 800a678:	61fb      	str	r3, [r7, #28]
 800a67a:	e01f      	b.n	800a6bc <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d103      	bne.n	800a68a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800a682:	f06f 0303 	mvn.w	r3, #3
 800a686:	61fb      	str	r3, [r7, #28]
 800a688:	e018      	b.n	800a6bc <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d009      	beq.n	800a6a4 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a690:	69b8      	ldr	r0, [r7, #24]
 800a692:	f000 fd67 	bl	800b164 <xQueueGiveMutexRecursive>
 800a696:	4603      	mov	r3, r0
 800a698:	2b01      	cmp	r3, #1
 800a69a:	d00f      	beq.n	800a6bc <osMutexRelease+0x90>
        stat = osErrorResource;
 800a69c:	f06f 0302 	mvn.w	r3, #2
 800a6a0:	61fb      	str	r3, [r7, #28]
 800a6a2:	e00b      	b.n	800a6bc <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	2100      	movs	r1, #0
 800a6aa:	69b8      	ldr	r0, [r7, #24]
 800a6ac:	f000 fe3a 	bl	800b324 <xQueueGenericSend>
 800a6b0:	4603      	mov	r3, r0
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d002      	beq.n	800a6bc <osMutexRelease+0x90>
        stat = osErrorResource;
 800a6b6:	f06f 0302 	mvn.w	r3, #2
 800a6ba:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800a6bc:	69fb      	ldr	r3, [r7, #28]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3720      	adds	r7, #32
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}
 800a6c6:	bf00      	nop
 800a6c8:	20000b4c 	.word	0x20000b4c

0800a6cc <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b08c      	sub	sp, #48	; 0x30
 800a6d0:	af02      	add	r7, sp, #8
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a6dc:	f3ef 8305 	mrs	r3, IPSR
 800a6e0:	61bb      	str	r3, [r7, #24]
  return(result);
 800a6e2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	f040 8086 	bne.w	800a7f6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a6ea:	f3ef 8310 	mrs	r3, PRIMASK
 800a6ee:	617b      	str	r3, [r7, #20]
  return(result);
 800a6f0:	697b      	ldr	r3, [r7, #20]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d105      	bne.n	800a702 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a6f6:	f3ef 8311 	mrs	r3, BASEPRI
 800a6fa:	613b      	str	r3, [r7, #16]
  return(result);
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <osSemaphoreNew+0x3e>
 800a702:	4b3f      	ldr	r3, [pc, #252]	; (800a800 <osSemaphoreNew+0x134>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2b02      	cmp	r3, #2
 800a708:	d075      	beq.n	800a7f6 <osSemaphoreNew+0x12a>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d072      	beq.n	800a7f6 <osSemaphoreNew+0x12a>
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	429a      	cmp	r2, r3
 800a716:	d86e      	bhi.n	800a7f6 <osSemaphoreNew+0x12a>
    mem = -1;
 800a718:	f04f 33ff 	mov.w	r3, #4294967295
 800a71c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d015      	beq.n	800a750 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689b      	ldr	r3, [r3, #8]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d006      	beq.n	800a73a <osSemaphoreNew+0x6e>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	68db      	ldr	r3, [r3, #12]
 800a730:	2b4f      	cmp	r3, #79	; 0x4f
 800a732:	d902      	bls.n	800a73a <osSemaphoreNew+0x6e>
        mem = 1;
 800a734:	2301      	movs	r3, #1
 800a736:	623b      	str	r3, [r7, #32]
 800a738:	e00c      	b.n	800a754 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d108      	bne.n	800a754 <osSemaphoreNew+0x88>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d104      	bne.n	800a754 <osSemaphoreNew+0x88>
          mem = 0;
 800a74a:	2300      	movs	r3, #0
 800a74c:	623b      	str	r3, [r7, #32]
 800a74e:	e001      	b.n	800a754 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800a750:	2300      	movs	r3, #0
 800a752:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800a754:	6a3b      	ldr	r3, [r7, #32]
 800a756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75a:	d04c      	beq.n	800a7f6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2b01      	cmp	r3, #1
 800a760:	d128      	bne.n	800a7b4 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800a762:	6a3b      	ldr	r3, [r7, #32]
 800a764:	2b01      	cmp	r3, #1
 800a766:	d10a      	bne.n	800a77e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	2203      	movs	r2, #3
 800a76e:	9200      	str	r2, [sp, #0]
 800a770:	2200      	movs	r2, #0
 800a772:	2100      	movs	r1, #0
 800a774:	2001      	movs	r0, #1
 800a776:	f000 fbc1 	bl	800aefc <xQueueGenericCreateStatic>
 800a77a:	6278      	str	r0, [r7, #36]	; 0x24
 800a77c:	e005      	b.n	800a78a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800a77e:	2203      	movs	r2, #3
 800a780:	2100      	movs	r1, #0
 800a782:	2001      	movs	r0, #1
 800a784:	f000 fc3c 	bl	800b000 <xQueueGenericCreate>
 800a788:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d022      	beq.n	800a7d6 <osSemaphoreNew+0x10a>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d01f      	beq.n	800a7d6 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a796:	2300      	movs	r3, #0
 800a798:	2200      	movs	r2, #0
 800a79a:	2100      	movs	r1, #0
 800a79c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a79e:	f000 fdc1 	bl	800b324 <xQueueGenericSend>
 800a7a2:	4603      	mov	r3, r0
 800a7a4:	2b01      	cmp	r3, #1
 800a7a6:	d016      	beq.n	800a7d6 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800a7a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7aa:	f001 fa77 	bl	800bc9c <vQueueDelete>
            hSemaphore = NULL;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a7b2:	e010      	b.n	800a7d6 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800a7b4:	6a3b      	ldr	r3, [r7, #32]
 800a7b6:	2b01      	cmp	r3, #1
 800a7b8:	d108      	bne.n	800a7cc <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	461a      	mov	r2, r3
 800a7c0:	68b9      	ldr	r1, [r7, #8]
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	f000 fd3c 	bl	800b240 <xQueueCreateCountingSemaphoreStatic>
 800a7c8:	6278      	str	r0, [r7, #36]	; 0x24
 800a7ca:	e004      	b.n	800a7d6 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a7cc:	68b9      	ldr	r1, [r7, #8]
 800a7ce:	68f8      	ldr	r0, [r7, #12]
 800a7d0:	f000 fd71 	bl	800b2b6 <xQueueCreateCountingSemaphore>
 800a7d4:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00c      	beq.n	800a7f6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d003      	beq.n	800a7ea <osSemaphoreNew+0x11e>
          name = attr->name;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	61fb      	str	r3, [r7, #28]
 800a7e8:	e001      	b.n	800a7ee <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a7ee:	69f9      	ldr	r1, [r7, #28]
 800a7f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a7f2:	f001 fba1 	bl	800bf38 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3728      	adds	r7, #40	; 0x28
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	bd80      	pop	{r7, pc}
 800a800:	20000b4c 	.word	0x20000b4c

0800a804 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a804:	b580      	push	{r7, lr}
 800a806:	b088      	sub	sp, #32
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a812:	2300      	movs	r3, #0
 800a814:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d103      	bne.n	800a824 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a81c:	f06f 0303 	mvn.w	r3, #3
 800a820:	61fb      	str	r3, [r7, #28]
 800a822:	e04b      	b.n	800a8bc <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a824:	f3ef 8305 	mrs	r3, IPSR
 800a828:	617b      	str	r3, [r7, #20]
  return(result);
 800a82a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d10f      	bne.n	800a850 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a830:	f3ef 8310 	mrs	r3, PRIMASK
 800a834:	613b      	str	r3, [r7, #16]
  return(result);
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d105      	bne.n	800a848 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a83c:	f3ef 8311 	mrs	r3, BASEPRI
 800a840:	60fb      	str	r3, [r7, #12]
  return(result);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d026      	beq.n	800a896 <osSemaphoreAcquire+0x92>
 800a848:	4b1f      	ldr	r3, [pc, #124]	; (800a8c8 <osSemaphoreAcquire+0xc4>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	2b02      	cmp	r3, #2
 800a84e:	d122      	bne.n	800a896 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d003      	beq.n	800a85e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800a856:	f06f 0303 	mvn.w	r3, #3
 800a85a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a85c:	e02d      	b.n	800a8ba <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800a85e:	2300      	movs	r3, #0
 800a860:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a862:	f107 0308 	add.w	r3, r7, #8
 800a866:	461a      	mov	r2, r3
 800a868:	2100      	movs	r1, #0
 800a86a:	69b8      	ldr	r0, [r7, #24]
 800a86c:	f001 f990 	bl	800bb90 <xQueueReceiveFromISR>
 800a870:	4603      	mov	r3, r0
 800a872:	2b01      	cmp	r3, #1
 800a874:	d003      	beq.n	800a87e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800a876:	f06f 0302 	mvn.w	r3, #2
 800a87a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800a87c:	e01d      	b.n	800a8ba <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d01a      	beq.n	800a8ba <osSemaphoreAcquire+0xb6>
 800a884:	4b11      	ldr	r3, [pc, #68]	; (800a8cc <osSemaphoreAcquire+0xc8>)
 800a886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a88a:	601a      	str	r2, [r3, #0]
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800a894:	e011      	b.n	800a8ba <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	69b8      	ldr	r0, [r7, #24]
 800a89a:	f001 f865 	bl	800b968 <xQueueSemaphoreTake>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d00b      	beq.n	800a8bc <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800a8aa:	f06f 0301 	mvn.w	r3, #1
 800a8ae:	61fb      	str	r3, [r7, #28]
 800a8b0:	e004      	b.n	800a8bc <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800a8b2:	f06f 0302 	mvn.w	r3, #2
 800a8b6:	61fb      	str	r3, [r7, #28]
 800a8b8:	e000      	b.n	800a8bc <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800a8ba:	bf00      	nop
      }
    }
  }

  return (stat);
 800a8bc:	69fb      	ldr	r3, [r7, #28]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3720      	adds	r7, #32
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000b4c 	.word	0x20000b4c
 800a8cc:	e000ed04 	.word	0xe000ed04

0800a8d0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b088      	sub	sp, #32
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a8dc:	2300      	movs	r3, #0
 800a8de:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800a8e0:	69bb      	ldr	r3, [r7, #24]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d103      	bne.n	800a8ee <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a8e6:	f06f 0303 	mvn.w	r3, #3
 800a8ea:	61fb      	str	r3, [r7, #28]
 800a8ec:	e03e      	b.n	800a96c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8ee:	f3ef 8305 	mrs	r3, IPSR
 800a8f2:	617b      	str	r3, [r7, #20]
  return(result);
 800a8f4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d10f      	bne.n	800a91a <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a8fa:	f3ef 8310 	mrs	r3, PRIMASK
 800a8fe:	613b      	str	r3, [r7, #16]
  return(result);
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d105      	bne.n	800a912 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a906:	f3ef 8311 	mrs	r3, BASEPRI
 800a90a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d01e      	beq.n	800a950 <osSemaphoreRelease+0x80>
 800a912:	4b19      	ldr	r3, [pc, #100]	; (800a978 <osSemaphoreRelease+0xa8>)
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	2b02      	cmp	r3, #2
 800a918:	d11a      	bne.n	800a950 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800a91a:	2300      	movs	r3, #0
 800a91c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a91e:	f107 0308 	add.w	r3, r7, #8
 800a922:	4619      	mov	r1, r3
 800a924:	69b8      	ldr	r0, [r7, #24]
 800a926:	f000 fea3 	bl	800b670 <xQueueGiveFromISR>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d003      	beq.n	800a938 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800a930:	f06f 0302 	mvn.w	r3, #2
 800a934:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a936:	e018      	b.n	800a96a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d015      	beq.n	800a96a <osSemaphoreRelease+0x9a>
 800a93e:	4b0f      	ldr	r3, [pc, #60]	; (800a97c <osSemaphoreRelease+0xac>)
 800a940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a944:	601a      	str	r2, [r3, #0]
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a94e:	e00c      	b.n	800a96a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a950:	2300      	movs	r3, #0
 800a952:	2200      	movs	r2, #0
 800a954:	2100      	movs	r1, #0
 800a956:	69b8      	ldr	r0, [r7, #24]
 800a958:	f000 fce4 	bl	800b324 <xQueueGenericSend>
 800a95c:	4603      	mov	r3, r0
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d004      	beq.n	800a96c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800a962:	f06f 0302 	mvn.w	r3, #2
 800a966:	61fb      	str	r3, [r7, #28]
 800a968:	e000      	b.n	800a96c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a96a:	bf00      	nop
    }
  }

  return (stat);
 800a96c:	69fb      	ldr	r3, [r7, #28]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}
 800a976:	bf00      	nop
 800a978:	20000b4c 	.word	0x20000b4c
 800a97c:	e000ed04 	.word	0xe000ed04

0800a980 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a980:	b580      	push	{r7, lr}
 800a982:	b08c      	sub	sp, #48	; 0x30
 800a984:	af02      	add	r7, sp, #8
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	60b9      	str	r1, [r7, #8]
 800a98a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a98c:	2300      	movs	r3, #0
 800a98e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a990:	f3ef 8305 	mrs	r3, IPSR
 800a994:	61bb      	str	r3, [r7, #24]
  return(result);
 800a996:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d16f      	bne.n	800aa7c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a99c:	f3ef 8310 	mrs	r3, PRIMASK
 800a9a0:	617b      	str	r3, [r7, #20]
  return(result);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d105      	bne.n	800a9b4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800a9a8:	f3ef 8311 	mrs	r3, BASEPRI
 800a9ac:	613b      	str	r3, [r7, #16]
  return(result);
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <osMessageQueueNew+0x3c>
 800a9b4:	4b34      	ldr	r3, [pc, #208]	; (800aa88 <osMessageQueueNew+0x108>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d05f      	beq.n	800aa7c <osMessageQueueNew+0xfc>
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d05c      	beq.n	800aa7c <osMessageQueueNew+0xfc>
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d059      	beq.n	800aa7c <osMessageQueueNew+0xfc>
    mem = -1;
 800a9c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9cc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d029      	beq.n	800aa28 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d012      	beq.n	800aa02 <osMessageQueueNew+0x82>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	2b4f      	cmp	r3, #79	; 0x4f
 800a9e2:	d90e      	bls.n	800aa02 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00a      	beq.n	800aa02 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	695a      	ldr	r2, [r3, #20]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	fb01 f303 	mul.w	r3, r1, r3
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d302      	bcc.n	800aa02 <osMessageQueueNew+0x82>
        mem = 1;
 800a9fc:	2301      	movs	r3, #1
 800a9fe:	623b      	str	r3, [r7, #32]
 800aa00:	e014      	b.n	800aa2c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d110      	bne.n	800aa2c <osMessageQueueNew+0xac>
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d10c      	bne.n	800aa2c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d108      	bne.n	800aa2c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	695b      	ldr	r3, [r3, #20]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d104      	bne.n	800aa2c <osMessageQueueNew+0xac>
          mem = 0;
 800aa22:	2300      	movs	r3, #0
 800aa24:	623b      	str	r3, [r7, #32]
 800aa26:	e001      	b.n	800aa2c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800aa2c:	6a3b      	ldr	r3, [r7, #32]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d10b      	bne.n	800aa4a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	691a      	ldr	r2, [r3, #16]
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	9100      	str	r1, [sp, #0]
 800aa3e:	68b9      	ldr	r1, [r7, #8]
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 fa5b 	bl	800aefc <xQueueGenericCreateStatic>
 800aa46:	6278      	str	r0, [r7, #36]	; 0x24
 800aa48:	e008      	b.n	800aa5c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800aa4a:	6a3b      	ldr	r3, [r7, #32]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d105      	bne.n	800aa5c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800aa50:	2200      	movs	r2, #0
 800aa52:	68b9      	ldr	r1, [r7, #8]
 800aa54:	68f8      	ldr	r0, [r7, #12]
 800aa56:	f000 fad3 	bl	800b000 <xQueueGenericCreate>
 800aa5a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d00c      	beq.n	800aa7c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d003      	beq.n	800aa70 <osMessageQueueNew+0xf0>
        name = attr->name;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	61fb      	str	r3, [r7, #28]
 800aa6e:	e001      	b.n	800aa74 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800aa70:	2300      	movs	r3, #0
 800aa72:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800aa74:	69f9      	ldr	r1, [r7, #28]
 800aa76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa78:	f001 fa5e 	bl	800bf38 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800aa7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3728      	adds	r7, #40	; 0x28
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}
 800aa86:	bf00      	nop
 800aa88:	20000b4c 	.word	0x20000b4c

0800aa8c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b08a      	sub	sp, #40	; 0x28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	60f8      	str	r0, [r7, #12]
 800aa94:	60b9      	str	r1, [r7, #8]
 800aa96:	603b      	str	r3, [r7, #0]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aaa4:	f3ef 8305 	mrs	r3, IPSR
 800aaa8:	61fb      	str	r3, [r7, #28]
  return(result);
 800aaaa:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d10f      	bne.n	800aad0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aab0:	f3ef 8310 	mrs	r3, PRIMASK
 800aab4:	61bb      	str	r3, [r7, #24]
  return(result);
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d105      	bne.n	800aac8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aabc:	f3ef 8311 	mrs	r3, BASEPRI
 800aac0:	617b      	str	r3, [r7, #20]
  return(result);
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d02c      	beq.n	800ab22 <osMessageQueuePut+0x96>
 800aac8:	4b28      	ldr	r3, [pc, #160]	; (800ab6c <osMessageQueuePut+0xe0>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	2b02      	cmp	r3, #2
 800aace:	d128      	bne.n	800ab22 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d005      	beq.n	800aae2 <osMessageQueuePut+0x56>
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <osMessageQueuePut+0x56>
 800aadc:	683b      	ldr	r3, [r7, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d003      	beq.n	800aaea <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800aae2:	f06f 0303 	mvn.w	r3, #3
 800aae6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800aae8:	e039      	b.n	800ab5e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800aaea:	2300      	movs	r3, #0
 800aaec:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800aaee:	f107 0210 	add.w	r2, r7, #16
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	68b9      	ldr	r1, [r7, #8]
 800aaf6:	6a38      	ldr	r0, [r7, #32]
 800aaf8:	f000 fd1a 	bl	800b530 <xQueueGenericSendFromISR>
 800aafc:	4603      	mov	r3, r0
 800aafe:	2b01      	cmp	r3, #1
 800ab00:	d003      	beq.n	800ab0a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800ab02:	f06f 0302 	mvn.w	r3, #2
 800ab06:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab08:	e029      	b.n	800ab5e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d026      	beq.n	800ab5e <osMessageQueuePut+0xd2>
 800ab10:	4b17      	ldr	r3, [pc, #92]	; (800ab70 <osMessageQueuePut+0xe4>)
 800ab12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab16:	601a      	str	r2, [r3, #0]
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab20:	e01d      	b.n	800ab5e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ab22:	6a3b      	ldr	r3, [r7, #32]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <osMessageQueuePut+0xa2>
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d103      	bne.n	800ab36 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ab2e:	f06f 0303 	mvn.w	r3, #3
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
 800ab34:	e014      	b.n	800ab60 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ab36:	2300      	movs	r3, #0
 800ab38:	683a      	ldr	r2, [r7, #0]
 800ab3a:	68b9      	ldr	r1, [r7, #8]
 800ab3c:	6a38      	ldr	r0, [r7, #32]
 800ab3e:	f000 fbf1 	bl	800b324 <xQueueGenericSend>
 800ab42:	4603      	mov	r3, r0
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d00b      	beq.n	800ab60 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ab4e:	f06f 0301 	mvn.w	r3, #1
 800ab52:	627b      	str	r3, [r7, #36]	; 0x24
 800ab54:	e004      	b.n	800ab60 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ab56:	f06f 0302 	mvn.w	r3, #2
 800ab5a:	627b      	str	r3, [r7, #36]	; 0x24
 800ab5c:	e000      	b.n	800ab60 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ab5e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ab60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	3728      	adds	r7, #40	; 0x28
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20000b4c 	.word	0x20000b4c
 800ab70:	e000ed04 	.word	0xe000ed04

0800ab74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08a      	sub	sp, #40	; 0x28
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ab86:	2300      	movs	r3, #0
 800ab88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab8a:	f3ef 8305 	mrs	r3, IPSR
 800ab8e:	61fb      	str	r3, [r7, #28]
  return(result);
 800ab90:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d10f      	bne.n	800abb6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab96:	f3ef 8310 	mrs	r3, PRIMASK
 800ab9a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d105      	bne.n	800abae <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800aba2:	f3ef 8311 	mrs	r3, BASEPRI
 800aba6:	617b      	str	r3, [r7, #20]
  return(result);
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d02c      	beq.n	800ac08 <osMessageQueueGet+0x94>
 800abae:	4b28      	ldr	r3, [pc, #160]	; (800ac50 <osMessageQueueGet+0xdc>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d128      	bne.n	800ac08 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800abb6:	6a3b      	ldr	r3, [r7, #32]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d005      	beq.n	800abc8 <osMessageQueueGet+0x54>
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d002      	beq.n	800abc8 <osMessageQueueGet+0x54>
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d003      	beq.n	800abd0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800abc8:	f06f 0303 	mvn.w	r3, #3
 800abcc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800abce:	e038      	b.n	800ac42 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800abd0:	2300      	movs	r3, #0
 800abd2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800abd4:	f107 0310 	add.w	r3, r7, #16
 800abd8:	461a      	mov	r2, r3
 800abda:	68b9      	ldr	r1, [r7, #8]
 800abdc:	6a38      	ldr	r0, [r7, #32]
 800abde:	f000 ffd7 	bl	800bb90 <xQueueReceiveFromISR>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d003      	beq.n	800abf0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800abe8:	f06f 0302 	mvn.w	r3, #2
 800abec:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800abee:	e028      	b.n	800ac42 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d025      	beq.n	800ac42 <osMessageQueueGet+0xce>
 800abf6:	4b17      	ldr	r3, [pc, #92]	; (800ac54 <osMessageQueueGet+0xe0>)
 800abf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abfc:	601a      	str	r2, [r3, #0]
 800abfe:	f3bf 8f4f 	dsb	sy
 800ac02:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac06:	e01c      	b.n	800ac42 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d002      	beq.n	800ac14 <osMessageQueueGet+0xa0>
 800ac0e:	68bb      	ldr	r3, [r7, #8]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d103      	bne.n	800ac1c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800ac14:	f06f 0303 	mvn.w	r3, #3
 800ac18:	627b      	str	r3, [r7, #36]	; 0x24
 800ac1a:	e013      	b.n	800ac44 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ac1c:	683a      	ldr	r2, [r7, #0]
 800ac1e:	68b9      	ldr	r1, [r7, #8]
 800ac20:	6a38      	ldr	r0, [r7, #32]
 800ac22:	f000 fdbb 	bl	800b79c <xQueueReceive>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d00b      	beq.n	800ac44 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d003      	beq.n	800ac3a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800ac32:	f06f 0301 	mvn.w	r3, #1
 800ac36:	627b      	str	r3, [r7, #36]	; 0x24
 800ac38:	e004      	b.n	800ac44 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ac3a:	f06f 0302 	mvn.w	r3, #2
 800ac3e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac40:	e000      	b.n	800ac44 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac42:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ac44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3728      	adds	r7, #40	; 0x28
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
 800ac4e:	bf00      	nop
 800ac50:	20000b4c 	.word	0x20000b4c
 800ac54:	e000ed04 	.word	0xe000ed04

0800ac58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	4a07      	ldr	r2, [pc, #28]	; (800ac84 <vApplicationGetIdleTaskMemory+0x2c>)
 800ac68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	4a06      	ldr	r2, [pc, #24]	; (800ac88 <vApplicationGetIdleTaskMemory+0x30>)
 800ac6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2280      	movs	r2, #128	; 0x80
 800ac74:	601a      	str	r2, [r3, #0]
}
 800ac76:	bf00      	nop
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr
 800ac82:	bf00      	nop
 800ac84:	20000b50 	.word	0x20000b50
 800ac88:	20000bac 	.word	0x20000bac

0800ac8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ac8c:	b480      	push	{r7}
 800ac8e:	b085      	sub	sp, #20
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	4a07      	ldr	r2, [pc, #28]	; (800acb8 <vApplicationGetTimerTaskMemory+0x2c>)
 800ac9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ac9e:	68bb      	ldr	r3, [r7, #8]
 800aca0:	4a06      	ldr	r2, [pc, #24]	; (800acbc <vApplicationGetTimerTaskMemory+0x30>)
 800aca2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800acaa:	601a      	str	r2, [r3, #0]
}
 800acac:	bf00      	nop
 800acae:	3714      	adds	r7, #20
 800acb0:	46bd      	mov	sp, r7
 800acb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb6:	4770      	bx	lr
 800acb8:	20000dac 	.word	0x20000dac
 800acbc:	20000e08 	.word	0x20000e08

0800acc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f103 0208 	add.w	r2, r3, #8
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	f04f 32ff 	mov.w	r2, #4294967295
 800acd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f103 0208 	add.w	r2, r3, #8
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f103 0208 	add.w	r2, r3, #8
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad0e:	bf00      	nop
 800ad10:	370c      	adds	r7, #12
 800ad12:	46bd      	mov	sp, r7
 800ad14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad18:	4770      	bx	lr

0800ad1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad1a:	b480      	push	{r7}
 800ad1c:	b085      	sub	sp, #20
 800ad1e:	af00      	add	r7, sp, #0
 800ad20:	6078      	str	r0, [r7, #4]
 800ad22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	685b      	ldr	r3, [r3, #4]
 800ad28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	689a      	ldr	r2, [r3, #8]
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	683a      	ldr	r2, [r7, #0]
 800ad3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	683a      	ldr	r2, [r7, #0]
 800ad44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	687a      	ldr	r2, [r7, #4]
 800ad4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	1c5a      	adds	r2, r3, #1
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	601a      	str	r2, [r3, #0]
}
 800ad56:	bf00      	nop
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad62:	b480      	push	{r7}
 800ad64:	b085      	sub	sp, #20
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
 800ad6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad78:	d103      	bne.n	800ad82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	60fb      	str	r3, [r7, #12]
 800ad80:	e00c      	b.n	800ad9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	3308      	adds	r3, #8
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	e002      	b.n	800ad90 <vListInsert+0x2e>
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	d2f6      	bcs.n	800ad8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	685a      	ldr	r2, [r3, #4]
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	683a      	ldr	r2, [r7, #0]
 800adaa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	683a      	ldr	r2, [r7, #0]
 800adb6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	687a      	ldr	r2, [r7, #4]
 800adbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	1c5a      	adds	r2, r3, #1
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	601a      	str	r2, [r3, #0]
}
 800adc8:	bf00      	nop
 800adca:	3714      	adds	r7, #20
 800adcc:	46bd      	mov	sp, r7
 800adce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add2:	4770      	bx	lr

0800add4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800add4:	b480      	push	{r7}
 800add6:	b085      	sub	sp, #20
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	691b      	ldr	r3, [r3, #16]
 800ade0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	685b      	ldr	r3, [r3, #4]
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	6892      	ldr	r2, [r2, #8]
 800adea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	689b      	ldr	r3, [r3, #8]
 800adf0:	687a      	ldr	r2, [r7, #4]
 800adf2:	6852      	ldr	r2, [r2, #4]
 800adf4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	429a      	cmp	r2, r3
 800adfe:	d103      	bne.n	800ae08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	689a      	ldr	r2, [r3, #8]
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	1e5a      	subs	r2, r3, #1
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3714      	adds	r7, #20
 800ae20:	46bd      	mov	sp, r7
 800ae22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae26:	4770      	bx	lr

0800ae28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d10c      	bne.n	800ae56 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	b672      	cpsid	i
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	b662      	cpsie	i
 800ae50:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ae56:	f002 fd91 	bl	800d97c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae62:	68f9      	ldr	r1, [r7, #12]
 800ae64:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ae66:	fb01 f303 	mul.w	r3, r1, r3
 800ae6a:	441a      	add	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae86:	3b01      	subs	r3, #1
 800ae88:	68f9      	ldr	r1, [r7, #12]
 800ae8a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ae8c:	fb01 f303 	mul.w	r3, r1, r3
 800ae90:	441a      	add	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	22ff      	movs	r2, #255	; 0xff
 800ae9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	22ff      	movs	r2, #255	; 0xff
 800aea2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d114      	bne.n	800aed6 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d01a      	beq.n	800aeea <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	3310      	adds	r3, #16
 800aeb8:	4618      	mov	r0, r3
 800aeba:	f001 fd3d 	bl	800c938 <xTaskRemoveFromEventList>
 800aebe:	4603      	mov	r3, r0
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d012      	beq.n	800aeea <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aec4:	4b0c      	ldr	r3, [pc, #48]	; (800aef8 <xQueueGenericReset+0xd0>)
 800aec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	f3bf 8f6f 	isb	sy
 800aed4:	e009      	b.n	800aeea <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	3310      	adds	r3, #16
 800aeda:	4618      	mov	r0, r3
 800aedc:	f7ff fef0 	bl	800acc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	3324      	adds	r3, #36	; 0x24
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7ff feeb 	bl	800acc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aeea:	f002 fd7b 	bl	800d9e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aeee:	2301      	movs	r3, #1
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3710      	adds	r7, #16
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}
 800aef8:	e000ed04 	.word	0xe000ed04

0800aefc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08e      	sub	sp, #56	; 0x38
 800af00:	af02      	add	r7, sp, #8
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]
 800af08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d10c      	bne.n	800af2a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800af10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af14:	b672      	cpsid	i
 800af16:	f383 8811 	msr	BASEPRI, r3
 800af1a:	f3bf 8f6f 	isb	sy
 800af1e:	f3bf 8f4f 	dsb	sy
 800af22:	b662      	cpsie	i
 800af24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800af26:	bf00      	nop
 800af28:	e7fe      	b.n	800af28 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d10c      	bne.n	800af4a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800af30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af34:	b672      	cpsid	i
 800af36:	f383 8811 	msr	BASEPRI, r3
 800af3a:	f3bf 8f6f 	isb	sy
 800af3e:	f3bf 8f4f 	dsb	sy
 800af42:	b662      	cpsie	i
 800af44:	627b      	str	r3, [r7, #36]	; 0x24
}
 800af46:	bf00      	nop
 800af48:	e7fe      	b.n	800af48 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d002      	beq.n	800af56 <xQueueGenericCreateStatic+0x5a>
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <xQueueGenericCreateStatic+0x5e>
 800af56:	2301      	movs	r3, #1
 800af58:	e000      	b.n	800af5c <xQueueGenericCreateStatic+0x60>
 800af5a:	2300      	movs	r3, #0
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10c      	bne.n	800af7a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800af60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af64:	b672      	cpsid	i
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	b662      	cpsie	i
 800af74:	623b      	str	r3, [r7, #32]
}
 800af76:	bf00      	nop
 800af78:	e7fe      	b.n	800af78 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d102      	bne.n	800af86 <xQueueGenericCreateStatic+0x8a>
 800af80:	68bb      	ldr	r3, [r7, #8]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d101      	bne.n	800af8a <xQueueGenericCreateStatic+0x8e>
 800af86:	2301      	movs	r3, #1
 800af88:	e000      	b.n	800af8c <xQueueGenericCreateStatic+0x90>
 800af8a:	2300      	movs	r3, #0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d10c      	bne.n	800afaa <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800af90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af94:	b672      	cpsid	i
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	b662      	cpsie	i
 800afa4:	61fb      	str	r3, [r7, #28]
}
 800afa6:	bf00      	nop
 800afa8:	e7fe      	b.n	800afa8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800afaa:	2350      	movs	r3, #80	; 0x50
 800afac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2b50      	cmp	r3, #80	; 0x50
 800afb2:	d00c      	beq.n	800afce <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800afb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb8:	b672      	cpsid	i
 800afba:	f383 8811 	msr	BASEPRI, r3
 800afbe:	f3bf 8f6f 	isb	sy
 800afc2:	f3bf 8f4f 	dsb	sy
 800afc6:	b662      	cpsie	i
 800afc8:	61bb      	str	r3, [r7, #24]
}
 800afca:	bf00      	nop
 800afcc:	e7fe      	b.n	800afcc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800afce:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800afd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00d      	beq.n	800aff6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800afda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afdc:	2201      	movs	r2, #1
 800afde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800afe2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800afe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afe8:	9300      	str	r3, [sp, #0]
 800afea:	4613      	mov	r3, r2
 800afec:	687a      	ldr	r2, [r7, #4]
 800afee:	68b9      	ldr	r1, [r7, #8]
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 f847 	bl	800b084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800aff8:	4618      	mov	r0, r3
 800affa:	3730      	adds	r7, #48	; 0x30
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b000:	b580      	push	{r7, lr}
 800b002:	b08a      	sub	sp, #40	; 0x28
 800b004:	af02      	add	r7, sp, #8
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	4613      	mov	r3, r2
 800b00c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10c      	bne.n	800b02e <xQueueGenericCreate+0x2e>
	__asm volatile
 800b014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b018:	b672      	cpsid	i
 800b01a:	f383 8811 	msr	BASEPRI, r3
 800b01e:	f3bf 8f6f 	isb	sy
 800b022:	f3bf 8f4f 	dsb	sy
 800b026:	b662      	cpsie	i
 800b028:	613b      	str	r3, [r7, #16]
}
 800b02a:	bf00      	nop
 800b02c:	e7fe      	b.n	800b02c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d102      	bne.n	800b03a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800b034:	2300      	movs	r3, #0
 800b036:	61fb      	str	r3, [r7, #28]
 800b038:	e004      	b.n	800b044 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	68ba      	ldr	r2, [r7, #8]
 800b03e:	fb02 f303 	mul.w	r3, r2, r3
 800b042:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	3350      	adds	r3, #80	; 0x50
 800b048:	4618      	mov	r0, r3
 800b04a:	f002 fdc3 	bl	800dbd4 <pvPortMalloc>
 800b04e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d011      	beq.n	800b07a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b056:	69bb      	ldr	r3, [r7, #24]
 800b058:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	3350      	adds	r3, #80	; 0x50
 800b05e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b060:	69bb      	ldr	r3, [r7, #24]
 800b062:	2200      	movs	r2, #0
 800b064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b068:	79fa      	ldrb	r2, [r7, #7]
 800b06a:	69bb      	ldr	r3, [r7, #24]
 800b06c:	9300      	str	r3, [sp, #0]
 800b06e:	4613      	mov	r3, r2
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	f000 f805 	bl	800b084 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b07a:	69bb      	ldr	r3, [r7, #24]
	}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3720      	adds	r7, #32
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
 800b090:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d103      	bne.n	800b0a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b098:	69bb      	ldr	r3, [r7, #24]
 800b09a:	69ba      	ldr	r2, [r7, #24]
 800b09c:	601a      	str	r2, [r3, #0]
 800b09e:	e002      	b.n	800b0a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	687a      	ldr	r2, [r7, #4]
 800b0a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0a6:	69bb      	ldr	r3, [r7, #24]
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	69b8      	ldr	r0, [r7, #24]
 800b0b6:	f7ff feb7 	bl	800ae28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	78fa      	ldrb	r2, [r7, #3]
 800b0be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0c2:	bf00      	nop
 800b0c4:	3710      	adds	r7, #16
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b082      	sub	sp, #8
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00e      	beq.n	800b0f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2100      	movs	r1, #0
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f000 f917 	bl	800b324 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800b0f6:	bf00      	nop
 800b0f8:	3708      	adds	r7, #8
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}

0800b0fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b086      	sub	sp, #24
 800b102:	af00      	add	r7, sp, #0
 800b104:	4603      	mov	r3, r0
 800b106:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b108:	2301      	movs	r3, #1
 800b10a:	617b      	str	r3, [r7, #20]
 800b10c:	2300      	movs	r3, #0
 800b10e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800b110:	79fb      	ldrb	r3, [r7, #7]
 800b112:	461a      	mov	r2, r3
 800b114:	6939      	ldr	r1, [r7, #16]
 800b116:	6978      	ldr	r0, [r7, #20]
 800b118:	f7ff ff72 	bl	800b000 <xQueueGenericCreate>
 800b11c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f7ff ffd3 	bl	800b0ca <prvInitialiseMutex>

		return xNewQueue;
 800b124:	68fb      	ldr	r3, [r7, #12]
	}
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800b12e:	b580      	push	{r7, lr}
 800b130:	b088      	sub	sp, #32
 800b132:	af02      	add	r7, sp, #8
 800b134:	4603      	mov	r3, r0
 800b136:	6039      	str	r1, [r7, #0]
 800b138:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800b13a:	2301      	movs	r3, #1
 800b13c:	617b      	str	r3, [r7, #20]
 800b13e:	2300      	movs	r3, #0
 800b140:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	9300      	str	r3, [sp, #0]
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	2200      	movs	r2, #0
 800b14a:	6939      	ldr	r1, [r7, #16]
 800b14c:	6978      	ldr	r0, [r7, #20]
 800b14e:	f7ff fed5 	bl	800aefc <xQueueGenericCreateStatic>
 800b152:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f7ff ffb8 	bl	800b0ca <prvInitialiseMutex>

		return xNewQueue;
 800b15a:	68fb      	ldr	r3, [r7, #12]
	}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3718      	adds	r7, #24
 800b160:	46bd      	mov	sp, r7
 800b162:	bd80      	pop	{r7, pc}

0800b164 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800b164:	b590      	push	{r4, r7, lr}
 800b166:	b087      	sub	sp, #28
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d10c      	bne.n	800b190 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	b672      	cpsid	i
 800b17c:	f383 8811 	msr	BASEPRI, r3
 800b180:	f3bf 8f6f 	isb	sy
 800b184:	f3bf 8f4f 	dsb	sy
 800b188:	b662      	cpsie	i
 800b18a:	60fb      	str	r3, [r7, #12]
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	689c      	ldr	r4, [r3, #8]
 800b194:	f001 fd96 	bl	800ccc4 <xTaskGetCurrentTaskHandle>
 800b198:	4603      	mov	r3, r0
 800b19a:	429c      	cmp	r4, r3
 800b19c:	d111      	bne.n	800b1c2 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	68db      	ldr	r3, [r3, #12]
 800b1a2:	1e5a      	subs	r2, r3, #1
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	68db      	ldr	r3, [r3, #12]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d105      	bne.n	800b1bc <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	6938      	ldr	r0, [r7, #16]
 800b1b8:	f000 f8b4 	bl	800b324 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800b1bc:	2301      	movs	r3, #1
 800b1be:	617b      	str	r3, [r7, #20]
 800b1c0:	e001      	b.n	800b1c6 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800b1c6:	697b      	ldr	r3, [r7, #20]
	}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	371c      	adds	r7, #28
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd90      	pop	{r4, r7, pc}

0800b1d0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800b1d0:	b590      	push	{r4, r7, lr}
 800b1d2:	b087      	sub	sp, #28
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
 800b1d8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d10c      	bne.n	800b1fe <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800b1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e8:	b672      	cpsid	i
 800b1ea:	f383 8811 	msr	BASEPRI, r3
 800b1ee:	f3bf 8f6f 	isb	sy
 800b1f2:	f3bf 8f4f 	dsb	sy
 800b1f6:	b662      	cpsie	i
 800b1f8:	60fb      	str	r3, [r7, #12]
}
 800b1fa:	bf00      	nop
 800b1fc:	e7fe      	b.n	800b1fc <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	689c      	ldr	r4, [r3, #8]
 800b202:	f001 fd5f 	bl	800ccc4 <xTaskGetCurrentTaskHandle>
 800b206:	4603      	mov	r3, r0
 800b208:	429c      	cmp	r4, r3
 800b20a:	d107      	bne.n	800b21c <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800b216:	2301      	movs	r3, #1
 800b218:	617b      	str	r3, [r7, #20]
 800b21a:	e00c      	b.n	800b236 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	6938      	ldr	r0, [r7, #16]
 800b220:	f000 fba2 	bl	800b968 <xQueueSemaphoreTake>
 800b224:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d004      	beq.n	800b236 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	68db      	ldr	r3, [r3, #12]
 800b230:	1c5a      	adds	r2, r3, #1
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800b236:	697b      	ldr	r3, [r7, #20]
	}
 800b238:	4618      	mov	r0, r3
 800b23a:	371c      	adds	r7, #28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd90      	pop	{r4, r7, pc}

0800b240 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b240:	b580      	push	{r7, lr}
 800b242:	b08a      	sub	sp, #40	; 0x28
 800b244:	af02      	add	r7, sp, #8
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10c      	bne.n	800b26c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800b252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b256:	b672      	cpsid	i
 800b258:	f383 8811 	msr	BASEPRI, r3
 800b25c:	f3bf 8f6f 	isb	sy
 800b260:	f3bf 8f4f 	dsb	sy
 800b264:	b662      	cpsie	i
 800b266:	61bb      	str	r3, [r7, #24]
}
 800b268:	bf00      	nop
 800b26a:	e7fe      	b.n	800b26a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b26c:	68ba      	ldr	r2, [r7, #8]
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	429a      	cmp	r2, r3
 800b272:	d90c      	bls.n	800b28e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b278:	b672      	cpsid	i
 800b27a:	f383 8811 	msr	BASEPRI, r3
 800b27e:	f3bf 8f6f 	isb	sy
 800b282:	f3bf 8f4f 	dsb	sy
 800b286:	b662      	cpsie	i
 800b288:	617b      	str	r3, [r7, #20]
}
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b28e:	2302      	movs	r3, #2
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2200      	movs	r2, #0
 800b296:	2100      	movs	r1, #0
 800b298:	68f8      	ldr	r0, [r7, #12]
 800b29a:	f7ff fe2f 	bl	800aefc <xQueueGenericCreateStatic>
 800b29e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d002      	beq.n	800b2ac <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b2a6:	69fb      	ldr	r3, [r7, #28]
 800b2a8:	68ba      	ldr	r2, [r7, #8]
 800b2aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
	}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3720      	adds	r7, #32
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}

0800b2b6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b2b6:	b580      	push	{r7, lr}
 800b2b8:	b086      	sub	sp, #24
 800b2ba:	af00      	add	r7, sp, #0
 800b2bc:	6078      	str	r0, [r7, #4]
 800b2be:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d10c      	bne.n	800b2e0 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800b2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ca:	b672      	cpsid	i
 800b2cc:	f383 8811 	msr	BASEPRI, r3
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	b662      	cpsie	i
 800b2da:	613b      	str	r3, [r7, #16]
}
 800b2dc:	bf00      	nop
 800b2de:	e7fe      	b.n	800b2de <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b2e0:	683a      	ldr	r2, [r7, #0]
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d90c      	bls.n	800b302 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800b2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ec:	b672      	cpsid	i
 800b2ee:	f383 8811 	msr	BASEPRI, r3
 800b2f2:	f3bf 8f6f 	isb	sy
 800b2f6:	f3bf 8f4f 	dsb	sy
 800b2fa:	b662      	cpsie	i
 800b2fc:	60fb      	str	r3, [r7, #12]
}
 800b2fe:	bf00      	nop
 800b300:	e7fe      	b.n	800b300 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b302:	2202      	movs	r2, #2
 800b304:	2100      	movs	r1, #0
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7ff fe7a 	bl	800b000 <xQueueGenericCreate>
 800b30c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b314:	697b      	ldr	r3, [r7, #20]
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b31a:	697b      	ldr	r3, [r7, #20]
	}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3718      	adds	r7, #24
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08e      	sub	sp, #56	; 0x38
 800b328:	af00      	add	r7, sp, #0
 800b32a:	60f8      	str	r0, [r7, #12]
 800b32c:	60b9      	str	r1, [r7, #8]
 800b32e:	607a      	str	r2, [r7, #4]
 800b330:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b332:	2300      	movs	r3, #0
 800b334:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10c      	bne.n	800b35a <xQueueGenericSend+0x36>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	b672      	cpsid	i
 800b346:	f383 8811 	msr	BASEPRI, r3
 800b34a:	f3bf 8f6f 	isb	sy
 800b34e:	f3bf 8f4f 	dsb	sy
 800b352:	b662      	cpsie	i
 800b354:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b356:	bf00      	nop
 800b358:	e7fe      	b.n	800b358 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d103      	bne.n	800b368 <xQueueGenericSend+0x44>
 800b360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b364:	2b00      	cmp	r3, #0
 800b366:	d101      	bne.n	800b36c <xQueueGenericSend+0x48>
 800b368:	2301      	movs	r3, #1
 800b36a:	e000      	b.n	800b36e <xQueueGenericSend+0x4a>
 800b36c:	2300      	movs	r3, #0
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d10c      	bne.n	800b38c <xQueueGenericSend+0x68>
	__asm volatile
 800b372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b376:	b672      	cpsid	i
 800b378:	f383 8811 	msr	BASEPRI, r3
 800b37c:	f3bf 8f6f 	isb	sy
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	b662      	cpsie	i
 800b386:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b388:	bf00      	nop
 800b38a:	e7fe      	b.n	800b38a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	2b02      	cmp	r3, #2
 800b390:	d103      	bne.n	800b39a <xQueueGenericSend+0x76>
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b396:	2b01      	cmp	r3, #1
 800b398:	d101      	bne.n	800b39e <xQueueGenericSend+0x7a>
 800b39a:	2301      	movs	r3, #1
 800b39c:	e000      	b.n	800b3a0 <xQueueGenericSend+0x7c>
 800b39e:	2300      	movs	r3, #0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d10c      	bne.n	800b3be <xQueueGenericSend+0x9a>
	__asm volatile
 800b3a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a8:	b672      	cpsid	i
 800b3aa:	f383 8811 	msr	BASEPRI, r3
 800b3ae:	f3bf 8f6f 	isb	sy
 800b3b2:	f3bf 8f4f 	dsb	sy
 800b3b6:	b662      	cpsie	i
 800b3b8:	623b      	str	r3, [r7, #32]
}
 800b3ba:	bf00      	nop
 800b3bc:	e7fe      	b.n	800b3bc <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b3be:	f001 fc91 	bl	800cce4 <xTaskGetSchedulerState>
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d102      	bne.n	800b3ce <xQueueGenericSend+0xaa>
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d101      	bne.n	800b3d2 <xQueueGenericSend+0xae>
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	e000      	b.n	800b3d4 <xQueueGenericSend+0xb0>
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10c      	bne.n	800b3f2 <xQueueGenericSend+0xce>
	__asm volatile
 800b3d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3dc:	b672      	cpsid	i
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	b662      	cpsie	i
 800b3ec:	61fb      	str	r3, [r7, #28]
}
 800b3ee:	bf00      	nop
 800b3f0:	e7fe      	b.n	800b3f0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b3f2:	f002 fac3 	bl	800d97c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b3f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d302      	bcc.n	800b408 <xQueueGenericSend+0xe4>
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	2b02      	cmp	r3, #2
 800b406:	d129      	bne.n	800b45c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b408:	683a      	ldr	r2, [r7, #0]
 800b40a:	68b9      	ldr	r1, [r7, #8]
 800b40c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b40e:	f000 fc82 	bl	800bd16 <prvCopyDataToQueue>
 800b412:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d010      	beq.n	800b43e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41e:	3324      	adds	r3, #36	; 0x24
 800b420:	4618      	mov	r0, r3
 800b422:	f001 fa89 	bl	800c938 <xTaskRemoveFromEventList>
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d013      	beq.n	800b454 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b42c:	4b3f      	ldr	r3, [pc, #252]	; (800b52c <xQueueGenericSend+0x208>)
 800b42e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	f3bf 8f4f 	dsb	sy
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	e00a      	b.n	800b454 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b440:	2b00      	cmp	r3, #0
 800b442:	d007      	beq.n	800b454 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b444:	4b39      	ldr	r3, [pc, #228]	; (800b52c <xQueueGenericSend+0x208>)
 800b446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b44a:	601a      	str	r2, [r3, #0]
 800b44c:	f3bf 8f4f 	dsb	sy
 800b450:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b454:	f002 fac6 	bl	800d9e4 <vPortExitCritical>
				return pdPASS;
 800b458:	2301      	movs	r3, #1
 800b45a:	e063      	b.n	800b524 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d103      	bne.n	800b46a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b462:	f002 fabf 	bl	800d9e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b466:	2300      	movs	r3, #0
 800b468:	e05c      	b.n	800b524 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b46a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d106      	bne.n	800b47e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b470:	f107 0314 	add.w	r3, r7, #20
 800b474:	4618      	mov	r0, r3
 800b476:	f001 fac5 	bl	800ca04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b47a:	2301      	movs	r3, #1
 800b47c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b47e:	f002 fab1 	bl	800d9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b482:	f001 f82b 	bl	800c4dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b486:	f002 fa79 	bl	800d97c <vPortEnterCritical>
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b490:	b25b      	sxtb	r3, r3
 800b492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b496:	d103      	bne.n	800b4a0 <xQueueGenericSend+0x17c>
 800b498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49a:	2200      	movs	r2, #0
 800b49c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b4a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b4a6:	b25b      	sxtb	r3, r3
 800b4a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ac:	d103      	bne.n	800b4b6 <xQueueGenericSend+0x192>
 800b4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b4b6:	f002 fa95 	bl	800d9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b4ba:	1d3a      	adds	r2, r7, #4
 800b4bc:	f107 0314 	add.w	r3, r7, #20
 800b4c0:	4611      	mov	r1, r2
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f001 fab4 	bl	800ca30 <xTaskCheckForTimeOut>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d124      	bne.n	800b518 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b4ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4d0:	f000 fd19 	bl	800bf06 <prvIsQueueFull>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d018      	beq.n	800b50c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4dc:	3310      	adds	r3, #16
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	f001 f9d4 	bl	800c890 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b4e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b4ea:	f000 fca4 	bl	800be36 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b4ee:	f001 f803 	bl	800c4f8 <xTaskResumeAll>
 800b4f2:	4603      	mov	r3, r0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	f47f af7c 	bne.w	800b3f2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800b4fa:	4b0c      	ldr	r3, [pc, #48]	; (800b52c <xQueueGenericSend+0x208>)
 800b4fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b500:	601a      	str	r2, [r3, #0]
 800b502:	f3bf 8f4f 	dsb	sy
 800b506:	f3bf 8f6f 	isb	sy
 800b50a:	e772      	b.n	800b3f2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b50c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b50e:	f000 fc92 	bl	800be36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b512:	f000 fff1 	bl	800c4f8 <xTaskResumeAll>
 800b516:	e76c      	b.n	800b3f2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b51a:	f000 fc8c 	bl	800be36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b51e:	f000 ffeb 	bl	800c4f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b522:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b524:	4618      	mov	r0, r3
 800b526:	3738      	adds	r7, #56	; 0x38
 800b528:	46bd      	mov	sp, r7
 800b52a:	bd80      	pop	{r7, pc}
 800b52c:	e000ed04 	.word	0xe000ed04

0800b530 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b530:	b580      	push	{r7, lr}
 800b532:	b08e      	sub	sp, #56	; 0x38
 800b534:	af00      	add	r7, sp, #0
 800b536:	60f8      	str	r0, [r7, #12]
 800b538:	60b9      	str	r1, [r7, #8]
 800b53a:	607a      	str	r2, [r7, #4]
 800b53c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10c      	bne.n	800b562 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800b548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b54c:	b672      	cpsid	i
 800b54e:	f383 8811 	msr	BASEPRI, r3
 800b552:	f3bf 8f6f 	isb	sy
 800b556:	f3bf 8f4f 	dsb	sy
 800b55a:	b662      	cpsie	i
 800b55c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b55e:	bf00      	nop
 800b560:	e7fe      	b.n	800b560 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d103      	bne.n	800b570 <xQueueGenericSendFromISR+0x40>
 800b568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b56a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <xQueueGenericSendFromISR+0x44>
 800b570:	2301      	movs	r3, #1
 800b572:	e000      	b.n	800b576 <xQueueGenericSendFromISR+0x46>
 800b574:	2300      	movs	r3, #0
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10c      	bne.n	800b594 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800b57a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b57e:	b672      	cpsid	i
 800b580:	f383 8811 	msr	BASEPRI, r3
 800b584:	f3bf 8f6f 	isb	sy
 800b588:	f3bf 8f4f 	dsb	sy
 800b58c:	b662      	cpsie	i
 800b58e:	623b      	str	r3, [r7, #32]
}
 800b590:	bf00      	nop
 800b592:	e7fe      	b.n	800b592 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	2b02      	cmp	r3, #2
 800b598:	d103      	bne.n	800b5a2 <xQueueGenericSendFromISR+0x72>
 800b59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b59c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d101      	bne.n	800b5a6 <xQueueGenericSendFromISR+0x76>
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e000      	b.n	800b5a8 <xQueueGenericSendFromISR+0x78>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d10c      	bne.n	800b5c6 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	b672      	cpsid	i
 800b5b2:	f383 8811 	msr	BASEPRI, r3
 800b5b6:	f3bf 8f6f 	isb	sy
 800b5ba:	f3bf 8f4f 	dsb	sy
 800b5be:	b662      	cpsie	i
 800b5c0:	61fb      	str	r3, [r7, #28]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b5c6:	f002 fac1 	bl	800db4c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b5ca:	f3ef 8211 	mrs	r2, BASEPRI
 800b5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5d2:	b672      	cpsid	i
 800b5d4:	f383 8811 	msr	BASEPRI, r3
 800b5d8:	f3bf 8f6f 	isb	sy
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	b662      	cpsie	i
 800b5e2:	61ba      	str	r2, [r7, #24]
 800b5e4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b5e6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	d302      	bcc.n	800b5fc <xQueueGenericSendFromISR+0xcc>
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	2b02      	cmp	r3, #2
 800b5fa:	d12c      	bne.n	800b656 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b606:	683a      	ldr	r2, [r7, #0]
 800b608:	68b9      	ldr	r1, [r7, #8]
 800b60a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b60c:	f000 fb83 	bl	800bd16 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b610:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800b614:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b618:	d112      	bne.n	800b640 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d016      	beq.n	800b650 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	3324      	adds	r3, #36	; 0x24
 800b626:	4618      	mov	r0, r3
 800b628:	f001 f986 	bl	800c938 <xTaskRemoveFromEventList>
 800b62c:	4603      	mov	r3, r0
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00e      	beq.n	800b650 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d00b      	beq.n	800b650 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	601a      	str	r2, [r3, #0]
 800b63e:	e007      	b.n	800b650 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b644:	3301      	adds	r3, #1
 800b646:	b2db      	uxtb	r3, r3
 800b648:	b25a      	sxtb	r2, r3
 800b64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b64c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b650:	2301      	movs	r3, #1
 800b652:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800b654:	e001      	b.n	800b65a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b656:	2300      	movs	r3, #0
 800b658:	637b      	str	r3, [r7, #52]	; 0x34
 800b65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b664:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3738      	adds	r7, #56	; 0x38
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08e      	sub	sp, #56	; 0x38
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b680:	2b00      	cmp	r3, #0
 800b682:	d10c      	bne.n	800b69e <xQueueGiveFromISR+0x2e>
	__asm volatile
 800b684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b688:	b672      	cpsid	i
 800b68a:	f383 8811 	msr	BASEPRI, r3
 800b68e:	f3bf 8f6f 	isb	sy
 800b692:	f3bf 8f4f 	dsb	sy
 800b696:	b662      	cpsie	i
 800b698:	623b      	str	r3, [r7, #32]
}
 800b69a:	bf00      	nop
 800b69c:	e7fe      	b.n	800b69c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d00c      	beq.n	800b6c0 <xQueueGiveFromISR+0x50>
	__asm volatile
 800b6a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6aa:	b672      	cpsid	i
 800b6ac:	f383 8811 	msr	BASEPRI, r3
 800b6b0:	f3bf 8f6f 	isb	sy
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	b662      	cpsie	i
 800b6ba:	61fb      	str	r3, [r7, #28]
}
 800b6bc:	bf00      	nop
 800b6be:	e7fe      	b.n	800b6be <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b6c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d103      	bne.n	800b6d0 <xQueueGiveFromISR+0x60>
 800b6c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d101      	bne.n	800b6d4 <xQueueGiveFromISR+0x64>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	e000      	b.n	800b6d6 <xQueueGiveFromISR+0x66>
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10c      	bne.n	800b6f4 <xQueueGiveFromISR+0x84>
	__asm volatile
 800b6da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6de:	b672      	cpsid	i
 800b6e0:	f383 8811 	msr	BASEPRI, r3
 800b6e4:	f3bf 8f6f 	isb	sy
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	b662      	cpsie	i
 800b6ee:	61bb      	str	r3, [r7, #24]
}
 800b6f0:	bf00      	nop
 800b6f2:	e7fe      	b.n	800b6f2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b6f4:	f002 fa2a 	bl	800db4c <vPortValidateInterruptPriority>
	__asm volatile
 800b6f8:	f3ef 8211 	mrs	r2, BASEPRI
 800b6fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b700:	b672      	cpsid	i
 800b702:	f383 8811 	msr	BASEPRI, r3
 800b706:	f3bf 8f6f 	isb	sy
 800b70a:	f3bf 8f4f 	dsb	sy
 800b70e:	b662      	cpsie	i
 800b710:	617a      	str	r2, [r7, #20]
 800b712:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800b714:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b716:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b722:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b724:	429a      	cmp	r2, r3
 800b726:	d22b      	bcs.n	800b780 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b72a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b72e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	1c5a      	adds	r2, r3, #1
 800b736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b738:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b73a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b742:	d112      	bne.n	800b76a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d016      	beq.n	800b77a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b74c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74e:	3324      	adds	r3, #36	; 0x24
 800b750:	4618      	mov	r0, r3
 800b752:	f001 f8f1 	bl	800c938 <xTaskRemoveFromEventList>
 800b756:	4603      	mov	r3, r0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d00e      	beq.n	800b77a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b75c:	683b      	ldr	r3, [r7, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00b      	beq.n	800b77a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2201      	movs	r2, #1
 800b766:	601a      	str	r2, [r3, #0]
 800b768:	e007      	b.n	800b77a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b76a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b76e:	3301      	adds	r3, #1
 800b770:	b2db      	uxtb	r3, r3
 800b772:	b25a      	sxtb	r2, r3
 800b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b776:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b77a:	2301      	movs	r3, #1
 800b77c:	637b      	str	r3, [r7, #52]	; 0x34
 800b77e:	e001      	b.n	800b784 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b780:	2300      	movs	r3, #0
 800b782:	637b      	str	r3, [r7, #52]	; 0x34
 800b784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b786:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f383 8811 	msr	BASEPRI, r3
}
 800b78e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b792:	4618      	mov	r0, r3
 800b794:	3738      	adds	r7, #56	; 0x38
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
	...

0800b79c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b08c      	sub	sp, #48	; 0x30
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d10c      	bne.n	800b7d0 <xQueueReceive+0x34>
	__asm volatile
 800b7b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ba:	b672      	cpsid	i
 800b7bc:	f383 8811 	msr	BASEPRI, r3
 800b7c0:	f3bf 8f6f 	isb	sy
 800b7c4:	f3bf 8f4f 	dsb	sy
 800b7c8:	b662      	cpsie	i
 800b7ca:	623b      	str	r3, [r7, #32]
}
 800b7cc:	bf00      	nop
 800b7ce:	e7fe      	b.n	800b7ce <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d103      	bne.n	800b7de <xQueueReceive+0x42>
 800b7d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <xQueueReceive+0x46>
 800b7de:	2301      	movs	r3, #1
 800b7e0:	e000      	b.n	800b7e4 <xQueueReceive+0x48>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d10c      	bne.n	800b802 <xQueueReceive+0x66>
	__asm volatile
 800b7e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7ec:	b672      	cpsid	i
 800b7ee:	f383 8811 	msr	BASEPRI, r3
 800b7f2:	f3bf 8f6f 	isb	sy
 800b7f6:	f3bf 8f4f 	dsb	sy
 800b7fa:	b662      	cpsie	i
 800b7fc:	61fb      	str	r3, [r7, #28]
}
 800b7fe:	bf00      	nop
 800b800:	e7fe      	b.n	800b800 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b802:	f001 fa6f 	bl	800cce4 <xTaskGetSchedulerState>
 800b806:	4603      	mov	r3, r0
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d102      	bne.n	800b812 <xQueueReceive+0x76>
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <xQueueReceive+0x7a>
 800b812:	2301      	movs	r3, #1
 800b814:	e000      	b.n	800b818 <xQueueReceive+0x7c>
 800b816:	2300      	movs	r3, #0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10c      	bne.n	800b836 <xQueueReceive+0x9a>
	__asm volatile
 800b81c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b820:	b672      	cpsid	i
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	b662      	cpsie	i
 800b830:	61bb      	str	r3, [r7, #24]
}
 800b832:	bf00      	nop
 800b834:	e7fe      	b.n	800b834 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b836:	f002 f8a1 	bl	800d97c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b83e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b842:	2b00      	cmp	r3, #0
 800b844:	d01f      	beq.n	800b886 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b846:	68b9      	ldr	r1, [r7, #8]
 800b848:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b84a:	f000 face 	bl	800bdea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b84e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b850:	1e5a      	subs	r2, r3, #1
 800b852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b854:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d00f      	beq.n	800b87e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b860:	3310      	adds	r3, #16
 800b862:	4618      	mov	r0, r3
 800b864:	f001 f868 	bl	800c938 <xTaskRemoveFromEventList>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d007      	beq.n	800b87e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b86e:	4b3d      	ldr	r3, [pc, #244]	; (800b964 <xQueueReceive+0x1c8>)
 800b870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b874:	601a      	str	r2, [r3, #0]
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b87e:	f002 f8b1 	bl	800d9e4 <vPortExitCritical>
				return pdPASS;
 800b882:	2301      	movs	r3, #1
 800b884:	e069      	b.n	800b95a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d103      	bne.n	800b894 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b88c:	f002 f8aa 	bl	800d9e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b890:	2300      	movs	r3, #0
 800b892:	e062      	b.n	800b95a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b896:	2b00      	cmp	r3, #0
 800b898:	d106      	bne.n	800b8a8 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b89a:	f107 0310 	add.w	r3, r7, #16
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f001 f8b0 	bl	800ca04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b8a8:	f002 f89c 	bl	800d9e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b8ac:	f000 fe16 	bl	800c4dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b8b0:	f002 f864 	bl	800d97c <vPortEnterCritical>
 800b8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b8ba:	b25b      	sxtb	r3, r3
 800b8bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8c0:	d103      	bne.n	800b8ca <xQueueReceive+0x12e>
 800b8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b8d0:	b25b      	sxtb	r3, r3
 800b8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8d6:	d103      	bne.n	800b8e0 <xQueueReceive+0x144>
 800b8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8da:	2200      	movs	r2, #0
 800b8dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8e0:	f002 f880 	bl	800d9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b8e4:	1d3a      	adds	r2, r7, #4
 800b8e6:	f107 0310 	add.w	r3, r7, #16
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 f89f 	bl	800ca30 <xTaskCheckForTimeOut>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d123      	bne.n	800b940 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b8f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b8fa:	f000 faee 	bl	800beda <prvIsQueueEmpty>
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d017      	beq.n	800b934 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b906:	3324      	adds	r3, #36	; 0x24
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	4611      	mov	r1, r2
 800b90c:	4618      	mov	r0, r3
 800b90e:	f000 ffbf 	bl	800c890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b914:	f000 fa8f 	bl	800be36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b918:	f000 fdee 	bl	800c4f8 <xTaskResumeAll>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d189      	bne.n	800b836 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800b922:	4b10      	ldr	r3, [pc, #64]	; (800b964 <xQueueReceive+0x1c8>)
 800b924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	f3bf 8f4f 	dsb	sy
 800b92e:	f3bf 8f6f 	isb	sy
 800b932:	e780      	b.n	800b836 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b934:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b936:	f000 fa7e 	bl	800be36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b93a:	f000 fddd 	bl	800c4f8 <xTaskResumeAll>
 800b93e:	e77a      	b.n	800b836 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b942:	f000 fa78 	bl	800be36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b946:	f000 fdd7 	bl	800c4f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b94a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b94c:	f000 fac5 	bl	800beda <prvIsQueueEmpty>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	f43f af6f 	beq.w	800b836 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b958:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	3730      	adds	r7, #48	; 0x30
 800b95e:	46bd      	mov	sp, r7
 800b960:	bd80      	pop	{r7, pc}
 800b962:	bf00      	nop
 800b964:	e000ed04 	.word	0xe000ed04

0800b968 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b08e      	sub	sp, #56	; 0x38
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b972:	2300      	movs	r3, #0
 800b974:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b97a:	2300      	movs	r3, #0
 800b97c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b97e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b980:	2b00      	cmp	r3, #0
 800b982:	d10c      	bne.n	800b99e <xQueueSemaphoreTake+0x36>
	__asm volatile
 800b984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b988:	b672      	cpsid	i
 800b98a:	f383 8811 	msr	BASEPRI, r3
 800b98e:	f3bf 8f6f 	isb	sy
 800b992:	f3bf 8f4f 	dsb	sy
 800b996:	b662      	cpsie	i
 800b998:	623b      	str	r3, [r7, #32]
}
 800b99a:	bf00      	nop
 800b99c:	e7fe      	b.n	800b99c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00c      	beq.n	800b9c0 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9aa:	b672      	cpsid	i
 800b9ac:	f383 8811 	msr	BASEPRI, r3
 800b9b0:	f3bf 8f6f 	isb	sy
 800b9b4:	f3bf 8f4f 	dsb	sy
 800b9b8:	b662      	cpsie	i
 800b9ba:	61fb      	str	r3, [r7, #28]
}
 800b9bc:	bf00      	nop
 800b9be:	e7fe      	b.n	800b9be <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b9c0:	f001 f990 	bl	800cce4 <xTaskGetSchedulerState>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d102      	bne.n	800b9d0 <xQueueSemaphoreTake+0x68>
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d101      	bne.n	800b9d4 <xQueueSemaphoreTake+0x6c>
 800b9d0:	2301      	movs	r3, #1
 800b9d2:	e000      	b.n	800b9d6 <xQueueSemaphoreTake+0x6e>
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10c      	bne.n	800b9f4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800b9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9de:	b672      	cpsid	i
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	b662      	cpsie	i
 800b9ee:	61bb      	str	r3, [r7, #24]
}
 800b9f0:	bf00      	nop
 800b9f2:	e7fe      	b.n	800b9f2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b9f4:	f001 ffc2 	bl	800d97c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b9fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d024      	beq.n	800ba4e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ba04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba06:	1e5a      	subs	r2, r3, #1
 800ba08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ba0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d104      	bne.n	800ba1e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ba14:	f001 fae4 	bl	800cfe0 <pvTaskIncrementMutexHeldCount>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba20:	691b      	ldr	r3, [r3, #16]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00f      	beq.n	800ba46 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba28:	3310      	adds	r3, #16
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f000 ff84 	bl	800c938 <xTaskRemoveFromEventList>
 800ba30:	4603      	mov	r3, r0
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d007      	beq.n	800ba46 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ba36:	4b55      	ldr	r3, [pc, #340]	; (800bb8c <xQueueSemaphoreTake+0x224>)
 800ba38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba3c:	601a      	str	r2, [r3, #0]
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ba46:	f001 ffcd 	bl	800d9e4 <vPortExitCritical>
				return pdPASS;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e099      	b.n	800bb82 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d113      	bne.n	800ba7c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ba54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00c      	beq.n	800ba74 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ba5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba5e:	b672      	cpsid	i
 800ba60:	f383 8811 	msr	BASEPRI, r3
 800ba64:	f3bf 8f6f 	isb	sy
 800ba68:	f3bf 8f4f 	dsb	sy
 800ba6c:	b662      	cpsie	i
 800ba6e:	617b      	str	r3, [r7, #20]
}
 800ba70:	bf00      	nop
 800ba72:	e7fe      	b.n	800ba72 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ba74:	f001 ffb6 	bl	800d9e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	e082      	b.n	800bb82 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ba7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d106      	bne.n	800ba90 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ba82:	f107 030c 	add.w	r3, r7, #12
 800ba86:	4618      	mov	r0, r3
 800ba88:	f000 ffbc 	bl	800ca04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ba90:	f001 ffa8 	bl	800d9e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ba94:	f000 fd22 	bl	800c4dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ba98:	f001 ff70 	bl	800d97c <vPortEnterCritical>
 800ba9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800baa2:	b25b      	sxtb	r3, r3
 800baa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800baa8:	d103      	bne.n	800bab2 <xQueueSemaphoreTake+0x14a>
 800baaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bab4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bab8:	b25b      	sxtb	r3, r3
 800baba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800babe:	d103      	bne.n	800bac8 <xQueueSemaphoreTake+0x160>
 800bac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bac2:	2200      	movs	r2, #0
 800bac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bac8:	f001 ff8c 	bl	800d9e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bacc:	463a      	mov	r2, r7
 800bace:	f107 030c 	add.w	r3, r7, #12
 800bad2:	4611      	mov	r1, r2
 800bad4:	4618      	mov	r0, r3
 800bad6:	f000 ffab 	bl	800ca30 <xTaskCheckForTimeOut>
 800bada:	4603      	mov	r3, r0
 800badc:	2b00      	cmp	r3, #0
 800bade:	d132      	bne.n	800bb46 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bae0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bae2:	f000 f9fa 	bl	800beda <prvIsQueueEmpty>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d026      	beq.n	800bb3a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800baec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d109      	bne.n	800bb08 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800baf4:	f001 ff42 	bl	800d97c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800baf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	4618      	mov	r0, r3
 800bafe:	f001 f90f 	bl	800cd20 <xTaskPriorityInherit>
 800bb02:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bb04:	f001 ff6e 	bl	800d9e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0a:	3324      	adds	r3, #36	; 0x24
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	4611      	mov	r1, r2
 800bb10:	4618      	mov	r0, r3
 800bb12:	f000 febd 	bl	800c890 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bb16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb18:	f000 f98d 	bl	800be36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bb1c:	f000 fcec 	bl	800c4f8 <xTaskResumeAll>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f47f af66 	bne.w	800b9f4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bb28:	4b18      	ldr	r3, [pc, #96]	; (800bb8c <xQueueSemaphoreTake+0x224>)
 800bb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb2e:	601a      	str	r2, [r3, #0]
 800bb30:	f3bf 8f4f 	dsb	sy
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	e75c      	b.n	800b9f4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bb3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb3c:	f000 f97b 	bl	800be36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bb40:	f000 fcda 	bl	800c4f8 <xTaskResumeAll>
 800bb44:	e756      	b.n	800b9f4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bb46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb48:	f000 f975 	bl	800be36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bb4c:	f000 fcd4 	bl	800c4f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bb50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb52:	f000 f9c2 	bl	800beda <prvIsQueueEmpty>
 800bb56:	4603      	mov	r3, r0
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f43f af4b 	beq.w	800b9f4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d00d      	beq.n	800bb80 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bb64:	f001 ff0a 	bl	800d97c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800bb68:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bb6a:	f000 f8bc 	bl	800bce6 <prvGetDisinheritPriorityAfterTimeout>
 800bb6e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800bb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb72:	689b      	ldr	r3, [r3, #8]
 800bb74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bb76:	4618      	mov	r0, r3
 800bb78:	f001 f9ac 	bl	800ced4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800bb7c:	f001 ff32 	bl	800d9e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800bb80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3738      	adds	r7, #56	; 0x38
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	e000ed04 	.word	0xe000ed04

0800bb90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b08e      	sub	sp, #56	; 0x38
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10c      	bne.n	800bbc0 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbaa:	b672      	cpsid	i
 800bbac:	f383 8811 	msr	BASEPRI, r3
 800bbb0:	f3bf 8f6f 	isb	sy
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	b662      	cpsie	i
 800bbba:	623b      	str	r3, [r7, #32]
}
 800bbbc:	bf00      	nop
 800bbbe:	e7fe      	b.n	800bbbe <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d103      	bne.n	800bbce <xQueueReceiveFromISR+0x3e>
 800bbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d101      	bne.n	800bbd2 <xQueueReceiveFromISR+0x42>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	e000      	b.n	800bbd4 <xQueueReceiveFromISR+0x44>
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d10c      	bne.n	800bbf2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 800bbd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbdc:	b672      	cpsid	i
 800bbde:	f383 8811 	msr	BASEPRI, r3
 800bbe2:	f3bf 8f6f 	isb	sy
 800bbe6:	f3bf 8f4f 	dsb	sy
 800bbea:	b662      	cpsie	i
 800bbec:	61fb      	str	r3, [r7, #28]
}
 800bbee:	bf00      	nop
 800bbf0:	e7fe      	b.n	800bbf0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bbf2:	f001 ffab 	bl	800db4c <vPortValidateInterruptPriority>
	__asm volatile
 800bbf6:	f3ef 8211 	mrs	r2, BASEPRI
 800bbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfe:	b672      	cpsid	i
 800bc00:	f383 8811 	msr	BASEPRI, r3
 800bc04:	f3bf 8f6f 	isb	sy
 800bc08:	f3bf 8f4f 	dsb	sy
 800bc0c:	b662      	cpsie	i
 800bc0e:	61ba      	str	r2, [r7, #24]
 800bc10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800bc12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d02f      	beq.n	800bc82 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bc28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bc2c:	68b9      	ldr	r1, [r7, #8]
 800bc2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bc30:	f000 f8db 	bl	800bdea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc36:	1e5a      	subs	r2, r3, #1
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800bc3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800bc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc44:	d112      	bne.n	800bc6c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc48:	691b      	ldr	r3, [r3, #16]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d016      	beq.n	800bc7c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc50:	3310      	adds	r3, #16
 800bc52:	4618      	mov	r0, r3
 800bc54:	f000 fe70 	bl	800c938 <xTaskRemoveFromEventList>
 800bc58:	4603      	mov	r3, r0
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d00e      	beq.n	800bc7c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00b      	beq.n	800bc7c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2201      	movs	r2, #1
 800bc68:	601a      	str	r2, [r3, #0]
 800bc6a:	e007      	b.n	800bc7c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800bc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bc70:	3301      	adds	r3, #1
 800bc72:	b2db      	uxtb	r3, r3
 800bc74:	b25a      	sxtb	r2, r3
 800bc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	637b      	str	r3, [r7, #52]	; 0x34
 800bc80:	e001      	b.n	800bc86 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	637b      	str	r3, [r7, #52]	; 0x34
 800bc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	f383 8811 	msr	BASEPRI, r3
}
 800bc90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3738      	adds	r7, #56	; 0x38
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b084      	sub	sp, #16
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d10c      	bne.n	800bcc8 <vQueueDelete+0x2c>
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	b672      	cpsid	i
 800bcb4:	f383 8811 	msr	BASEPRI, r3
 800bcb8:	f3bf 8f6f 	isb	sy
 800bcbc:	f3bf 8f4f 	dsb	sy
 800bcc0:	b662      	cpsie	i
 800bcc2:	60bb      	str	r3, [r7, #8]
}
 800bcc4:	bf00      	nop
 800bcc6:	e7fe      	b.n	800bcc6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f000 f95f 	bl	800bf8c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d102      	bne.n	800bcde <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800bcd8:	68f8      	ldr	r0, [r7, #12]
 800bcda:	f002 f845 	bl	800dd68 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800bcde:	bf00      	nop
 800bce0:	3710      	adds	r7, #16
 800bce2:	46bd      	mov	sp, r7
 800bce4:	bd80      	pop	{r7, pc}

0800bce6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800bce6:	b480      	push	{r7}
 800bce8:	b085      	sub	sp, #20
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d006      	beq.n	800bd04 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	e001      	b.n	800bd08 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800bd04:	2300      	movs	r3, #0
 800bd06:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800bd08:	68fb      	ldr	r3, [r7, #12]
	}
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	3714      	adds	r7, #20
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b086      	sub	sp, #24
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	60f8      	str	r0, [r7, #12]
 800bd1e:	60b9      	str	r1, [r7, #8]
 800bd20:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800bd22:	2300      	movs	r3, #0
 800bd24:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d10d      	bne.n	800bd50 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d14d      	bne.n	800bdd8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	4618      	mov	r0, r3
 800bd42:	f001 f855 	bl	800cdf0 <xTaskPriorityDisinherit>
 800bd46:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	609a      	str	r2, [r3, #8]
 800bd4e:	e043      	b.n	800bdd8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d119      	bne.n	800bd8a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	6858      	ldr	r0, [r3, #4]
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5e:	461a      	mov	r2, r3
 800bd60:	68b9      	ldr	r1, [r7, #8]
 800bd62:	f01e f873 	bl	8029e4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd6e:	441a      	add	r2, r3
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	685a      	ldr	r2, [r3, #4]
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	429a      	cmp	r2, r3
 800bd7e:	d32b      	bcc.n	800bdd8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	605a      	str	r2, [r3, #4]
 800bd88:	e026      	b.n	800bdd8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	68d8      	ldr	r0, [r3, #12]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd92:	461a      	mov	r2, r3
 800bd94:	68b9      	ldr	r1, [r7, #8]
 800bd96:	f01e f859 	bl	8029e4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	68da      	ldr	r2, [r3, #12]
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda2:	425b      	negs	r3, r3
 800bda4:	441a      	add	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	68da      	ldr	r2, [r3, #12]
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	429a      	cmp	r2, r3
 800bdb4:	d207      	bcs.n	800bdc6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	689a      	ldr	r2, [r3, #8]
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdbe:	425b      	negs	r3, r3
 800bdc0:	441a      	add	r2, r3
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d105      	bne.n	800bdd8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d002      	beq.n	800bdd8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800bdd2:	693b      	ldr	r3, [r7, #16]
 800bdd4:	3b01      	subs	r3, #1
 800bdd6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	1c5a      	adds	r2, r3, #1
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800bde0:	697b      	ldr	r3, [r7, #20]
}
 800bde2:	4618      	mov	r0, r3
 800bde4:	3718      	adds	r7, #24
 800bde6:	46bd      	mov	sp, r7
 800bde8:	bd80      	pop	{r7, pc}

0800bdea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800bdea:	b580      	push	{r7, lr}
 800bdec:	b082      	sub	sp, #8
 800bdee:	af00      	add	r7, sp, #0
 800bdf0:	6078      	str	r0, [r7, #4]
 800bdf2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d018      	beq.n	800be2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	68da      	ldr	r2, [r3, #12]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be04:	441a      	add	r2, r3
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	68da      	ldr	r2, [r3, #12]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	689b      	ldr	r3, [r3, #8]
 800be12:	429a      	cmp	r2, r3
 800be14:	d303      	bcc.n	800be1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68d9      	ldr	r1, [r3, #12]
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be26:	461a      	mov	r2, r3
 800be28:	6838      	ldr	r0, [r7, #0]
 800be2a:	f01e f80f 	bl	8029e4c <memcpy>
	}
}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b084      	sub	sp, #16
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800be3e:	f001 fd9d 	bl	800d97c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be4a:	e011      	b.n	800be70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be50:	2b00      	cmp	r3, #0
 800be52:	d012      	beq.n	800be7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	3324      	adds	r3, #36	; 0x24
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 fd6d 	bl	800c938 <xTaskRemoveFromEventList>
 800be5e:	4603      	mov	r3, r0
 800be60:	2b00      	cmp	r3, #0
 800be62:	d001      	beq.n	800be68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800be64:	f000 fe4a 	bl	800cafc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800be68:	7bfb      	ldrb	r3, [r7, #15]
 800be6a:	3b01      	subs	r3, #1
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800be70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be74:	2b00      	cmp	r3, #0
 800be76:	dce9      	bgt.n	800be4c <prvUnlockQueue+0x16>
 800be78:	e000      	b.n	800be7c <prvUnlockQueue+0x46>
					break;
 800be7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	22ff      	movs	r2, #255	; 0xff
 800be80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800be84:	f001 fdae 	bl	800d9e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800be88:	f001 fd78 	bl	800d97c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800be94:	e011      	b.n	800beba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d012      	beq.n	800bec4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	3310      	adds	r3, #16
 800bea2:	4618      	mov	r0, r3
 800bea4:	f000 fd48 	bl	800c938 <xTaskRemoveFromEventList>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d001      	beq.n	800beb2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800beae:	f000 fe25 	bl	800cafc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800beb2:	7bbb      	ldrb	r3, [r7, #14]
 800beb4:	3b01      	subs	r3, #1
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800beba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	dce9      	bgt.n	800be96 <prvUnlockQueue+0x60>
 800bec2:	e000      	b.n	800bec6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800bec4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	22ff      	movs	r2, #255	; 0xff
 800beca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bece:	f001 fd89 	bl	800d9e4 <vPortExitCritical>
}
 800bed2:	bf00      	nop
 800bed4:	3710      	adds	r7, #16
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800beda:	b580      	push	{r7, lr}
 800bedc:	b084      	sub	sp, #16
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bee2:	f001 fd4b 	bl	800d97c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beea:	2b00      	cmp	r3, #0
 800beec:	d102      	bne.n	800bef4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800beee:	2301      	movs	r3, #1
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	e001      	b.n	800bef8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bef8:	f001 fd74 	bl	800d9e4 <vPortExitCritical>

	return xReturn;
 800befc:	68fb      	ldr	r3, [r7, #12]
}
 800befe:	4618      	mov	r0, r3
 800bf00:	3710      	adds	r7, #16
 800bf02:	46bd      	mov	sp, r7
 800bf04:	bd80      	pop	{r7, pc}

0800bf06 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bf06:	b580      	push	{r7, lr}
 800bf08:	b084      	sub	sp, #16
 800bf0a:	af00      	add	r7, sp, #0
 800bf0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bf0e:	f001 fd35 	bl	800d97c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d102      	bne.n	800bf24 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	e001      	b.n	800bf28 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bf24:	2300      	movs	r3, #0
 800bf26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bf28:	f001 fd5c 	bl	800d9e4 <vPortExitCritical>

	return xReturn;
 800bf2c:	68fb      	ldr	r3, [r7, #12]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
	...

0800bf38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf42:	2300      	movs	r3, #0
 800bf44:	60fb      	str	r3, [r7, #12]
 800bf46:	e014      	b.n	800bf72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bf48:	4a0f      	ldr	r2, [pc, #60]	; (800bf88 <vQueueAddToRegistry+0x50>)
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10b      	bne.n	800bf6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bf54:	490c      	ldr	r1, [pc, #48]	; (800bf88 <vQueueAddToRegistry+0x50>)
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	683a      	ldr	r2, [r7, #0]
 800bf5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bf5e:	4a0a      	ldr	r2, [pc, #40]	; (800bf88 <vQueueAddToRegistry+0x50>)
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	00db      	lsls	r3, r3, #3
 800bf64:	4413      	add	r3, r2
 800bf66:	687a      	ldr	r2, [r7, #4]
 800bf68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bf6a:	e006      	b.n	800bf7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	3301      	adds	r3, #1
 800bf70:	60fb      	str	r3, [r7, #12]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2b07      	cmp	r3, #7
 800bf76:	d9e7      	bls.n	800bf48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bf78:	bf00      	nop
 800bf7a:	bf00      	nop
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf84:	4770      	bx	lr
 800bf86:	bf00      	nop
 800bf88:	20001208 	.word	0x20001208

0800bf8c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b085      	sub	sp, #20
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bf94:	2300      	movs	r3, #0
 800bf96:	60fb      	str	r3, [r7, #12]
 800bf98:	e016      	b.n	800bfc8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bf9a:	4a10      	ldr	r2, [pc, #64]	; (800bfdc <vQueueUnregisterQueue+0x50>)
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	00db      	lsls	r3, r3, #3
 800bfa0:	4413      	add	r3, r2
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d10b      	bne.n	800bfc2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bfaa:	4a0c      	ldr	r2, [pc, #48]	; (800bfdc <vQueueUnregisterQueue+0x50>)
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2100      	movs	r1, #0
 800bfb0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bfb4:	4a09      	ldr	r2, [pc, #36]	; (800bfdc <vQueueUnregisterQueue+0x50>)
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	00db      	lsls	r3, r3, #3
 800bfba:	4413      	add	r3, r2
 800bfbc:	2200      	movs	r2, #0
 800bfbe:	605a      	str	r2, [r3, #4]
				break;
 800bfc0:	e006      	b.n	800bfd0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	60fb      	str	r3, [r7, #12]
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2b07      	cmp	r3, #7
 800bfcc:	d9e5      	bls.n	800bf9a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bfce:	bf00      	nop
 800bfd0:	bf00      	nop
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr
 800bfdc:	20001208 	.word	0x20001208

0800bfe0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	60b9      	str	r1, [r7, #8]
 800bfea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bff0:	f001 fcc4 	bl	800d97c <vPortEnterCritical>
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bffa:	b25b      	sxtb	r3, r3
 800bffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c000:	d103      	bne.n	800c00a <vQueueWaitForMessageRestricted+0x2a>
 800c002:	697b      	ldr	r3, [r7, #20]
 800c004:	2200      	movs	r2, #0
 800c006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c010:	b25b      	sxtb	r3, r3
 800c012:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c016:	d103      	bne.n	800c020 <vQueueWaitForMessageRestricted+0x40>
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	2200      	movs	r2, #0
 800c01c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c020:	f001 fce0 	bl	800d9e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c024:	697b      	ldr	r3, [r7, #20]
 800c026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d106      	bne.n	800c03a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	3324      	adds	r3, #36	; 0x24
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	4618      	mov	r0, r3
 800c036:	f000 fc51 	bl	800c8dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c03a:	6978      	ldr	r0, [r7, #20]
 800c03c:	f7ff fefb 	bl	800be36 <prvUnlockQueue>
	}
 800c040:	bf00      	nop
 800c042:	3718      	adds	r7, #24
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b08e      	sub	sp, #56	; 0x38
 800c04c:	af04      	add	r7, sp, #16
 800c04e:	60f8      	str	r0, [r7, #12]
 800c050:	60b9      	str	r1, [r7, #8]
 800c052:	607a      	str	r2, [r7, #4]
 800c054:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d10c      	bne.n	800c076 <xTaskCreateStatic+0x2e>
	__asm volatile
 800c05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c060:	b672      	cpsid	i
 800c062:	f383 8811 	msr	BASEPRI, r3
 800c066:	f3bf 8f6f 	isb	sy
 800c06a:	f3bf 8f4f 	dsb	sy
 800c06e:	b662      	cpsie	i
 800c070:	623b      	str	r3, [r7, #32]
}
 800c072:	bf00      	nop
 800c074:	e7fe      	b.n	800c074 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10c      	bne.n	800c096 <xTaskCreateStatic+0x4e>
	__asm volatile
 800c07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c080:	b672      	cpsid	i
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	b662      	cpsie	i
 800c090:	61fb      	str	r3, [r7, #28]
}
 800c092:	bf00      	nop
 800c094:	e7fe      	b.n	800c094 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c096:	235c      	movs	r3, #92	; 0x5c
 800c098:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	2b5c      	cmp	r3, #92	; 0x5c
 800c09e:	d00c      	beq.n	800c0ba <xTaskCreateStatic+0x72>
	__asm volatile
 800c0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a4:	b672      	cpsid	i
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	b662      	cpsie	i
 800c0b4:	61bb      	str	r3, [r7, #24]
}
 800c0b6:	bf00      	nop
 800c0b8:	e7fe      	b.n	800c0b8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c0ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d01e      	beq.n	800c100 <xTaskCreateStatic+0xb8>
 800c0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d01b      	beq.n	800c100 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c0c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c0d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0d4:	2202      	movs	r2, #2
 800c0d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9303      	str	r3, [sp, #12]
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	9302      	str	r3, [sp, #8]
 800c0e2:	f107 0314 	add.w	r3, r7, #20
 800c0e6:	9301      	str	r3, [sp, #4]
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	9300      	str	r3, [sp, #0]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	68b9      	ldr	r1, [r7, #8]
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f000 f850 	bl	800c198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c0f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c0fa:	f000 f8df 	bl	800c2bc <prvAddNewTaskToReadyList>
 800c0fe:	e001      	b.n	800c104 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c100:	2300      	movs	r3, #0
 800c102:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c104:	697b      	ldr	r3, [r7, #20]
	}
 800c106:	4618      	mov	r0, r3
 800c108:	3728      	adds	r7, #40	; 0x28
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b08c      	sub	sp, #48	; 0x30
 800c112:	af04      	add	r7, sp, #16
 800c114:	60f8      	str	r0, [r7, #12]
 800c116:	60b9      	str	r1, [r7, #8]
 800c118:	603b      	str	r3, [r7, #0]
 800c11a:	4613      	mov	r3, r2
 800c11c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c11e:	88fb      	ldrh	r3, [r7, #6]
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4618      	mov	r0, r3
 800c124:	f001 fd56 	bl	800dbd4 <pvPortMalloc>
 800c128:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d00e      	beq.n	800c14e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c130:	205c      	movs	r0, #92	; 0x5c
 800c132:	f001 fd4f 	bl	800dbd4 <pvPortMalloc>
 800c136:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d003      	beq.n	800c146 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	697a      	ldr	r2, [r7, #20]
 800c142:	631a      	str	r2, [r3, #48]	; 0x30
 800c144:	e005      	b.n	800c152 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c146:	6978      	ldr	r0, [r7, #20]
 800c148:	f001 fe0e 	bl	800dd68 <vPortFree>
 800c14c:	e001      	b.n	800c152 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c14e:	2300      	movs	r3, #0
 800c150:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d017      	beq.n	800c188 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c158:	69fb      	ldr	r3, [r7, #28]
 800c15a:	2200      	movs	r2, #0
 800c15c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c160:	88fa      	ldrh	r2, [r7, #6]
 800c162:	2300      	movs	r3, #0
 800c164:	9303      	str	r3, [sp, #12]
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	9302      	str	r3, [sp, #8]
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	9301      	str	r3, [sp, #4]
 800c16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c170:	9300      	str	r3, [sp, #0]
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	68b9      	ldr	r1, [r7, #8]
 800c176:	68f8      	ldr	r0, [r7, #12]
 800c178:	f000 f80e 	bl	800c198 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c17c:	69f8      	ldr	r0, [r7, #28]
 800c17e:	f000 f89d 	bl	800c2bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c182:	2301      	movs	r3, #1
 800c184:	61bb      	str	r3, [r7, #24]
 800c186:	e002      	b.n	800c18e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c188:	f04f 33ff 	mov.w	r3, #4294967295
 800c18c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c18e:	69bb      	ldr	r3, [r7, #24]
	}
 800c190:	4618      	mov	r0, r3
 800c192:	3720      	adds	r7, #32
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b088      	sub	sp, #32
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	60f8      	str	r0, [r7, #12]
 800c1a0:	60b9      	str	r1, [r7, #8]
 800c1a2:	607a      	str	r2, [r7, #4]
 800c1a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	009b      	lsls	r3, r3, #2
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	21a5      	movs	r1, #165	; 0xa5
 800c1b2:	f01d fe59 	bl	8029e68 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c1c0:	440b      	add	r3, r1
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	4413      	add	r3, r2
 800c1c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c1c8:	69bb      	ldr	r3, [r7, #24]
 800c1ca:	f023 0307 	bic.w	r3, r3, #7
 800c1ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c1d0:	69bb      	ldr	r3, [r7, #24]
 800c1d2:	f003 0307 	and.w	r3, r3, #7
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00c      	beq.n	800c1f4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1de:	b672      	cpsid	i
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	b662      	cpsie	i
 800c1ee:	617b      	str	r3, [r7, #20]
}
 800c1f0:	bf00      	nop
 800c1f2:	e7fe      	b.n	800c1f2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c1f4:	68bb      	ldr	r3, [r7, #8]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d01f      	beq.n	800c23a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	61fb      	str	r3, [r7, #28]
 800c1fe:	e012      	b.n	800c226 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	69fb      	ldr	r3, [r7, #28]
 800c204:	4413      	add	r3, r2
 800c206:	7819      	ldrb	r1, [r3, #0]
 800c208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	4413      	add	r3, r2
 800c20e:	3334      	adds	r3, #52	; 0x34
 800c210:	460a      	mov	r2, r1
 800c212:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c214:	68ba      	ldr	r2, [r7, #8]
 800c216:	69fb      	ldr	r3, [r7, #28]
 800c218:	4413      	add	r3, r2
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d006      	beq.n	800c22e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c220:	69fb      	ldr	r3, [r7, #28]
 800c222:	3301      	adds	r3, #1
 800c224:	61fb      	str	r3, [r7, #28]
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	2b0f      	cmp	r3, #15
 800c22a:	d9e9      	bls.n	800c200 <prvInitialiseNewTask+0x68>
 800c22c:	e000      	b.n	800c230 <prvInitialiseNewTask+0x98>
			{
				break;
 800c22e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	2200      	movs	r2, #0
 800c234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c238:	e003      	b.n	800c242 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c23c:	2200      	movs	r2, #0
 800c23e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c244:	2b37      	cmp	r3, #55	; 0x37
 800c246:	d901      	bls.n	800c24c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c248:	2337      	movs	r3, #55	; 0x37
 800c24a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c24e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c250:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c256:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25a:	2200      	movs	r2, #0
 800c25c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c260:	3304      	adds	r3, #4
 800c262:	4618      	mov	r0, r3
 800c264:	f7fe fd4c 	bl	800ad00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26a:	3318      	adds	r3, #24
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe fd47 	bl	800ad00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c276:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c280:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c286:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c28a:	2200      	movs	r2, #0
 800c28c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c296:	683a      	ldr	r2, [r7, #0]
 800c298:	68f9      	ldr	r1, [r7, #12]
 800c29a:	69b8      	ldr	r0, [r7, #24]
 800c29c:	f001 fa64 	bl	800d768 <pxPortInitialiseStack>
 800c2a0:	4602      	mov	r2, r0
 800c2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d002      	beq.n	800c2b2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c2b2:	bf00      	nop
 800c2b4:	3720      	adds	r7, #32
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b082      	sub	sp, #8
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c2c4:	f001 fb5a 	bl	800d97c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c2c8:	4b2d      	ldr	r3, [pc, #180]	; (800c380 <prvAddNewTaskToReadyList+0xc4>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	4a2c      	ldr	r2, [pc, #176]	; (800c380 <prvAddNewTaskToReadyList+0xc4>)
 800c2d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c2d2:	4b2c      	ldr	r3, [pc, #176]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d109      	bne.n	800c2ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c2da:	4a2a      	ldr	r2, [pc, #168]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c2e0:	4b27      	ldr	r3, [pc, #156]	; (800c380 <prvAddNewTaskToReadyList+0xc4>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d110      	bne.n	800c30a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c2e8:	f000 fc2c 	bl	800cb44 <prvInitialiseTaskLists>
 800c2ec:	e00d      	b.n	800c30a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c2ee:	4b26      	ldr	r3, [pc, #152]	; (800c388 <prvAddNewTaskToReadyList+0xcc>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d109      	bne.n	800c30a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c2f6:	4b23      	ldr	r3, [pc, #140]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c300:	429a      	cmp	r2, r3
 800c302:	d802      	bhi.n	800c30a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c304:	4a1f      	ldr	r2, [pc, #124]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c30a:	4b20      	ldr	r3, [pc, #128]	; (800c38c <prvAddNewTaskToReadyList+0xd0>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	3301      	adds	r3, #1
 800c310:	4a1e      	ldr	r2, [pc, #120]	; (800c38c <prvAddNewTaskToReadyList+0xd0>)
 800c312:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c314:	4b1d      	ldr	r3, [pc, #116]	; (800c38c <prvAddNewTaskToReadyList+0xd0>)
 800c316:	681a      	ldr	r2, [r3, #0]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c320:	4b1b      	ldr	r3, [pc, #108]	; (800c390 <prvAddNewTaskToReadyList+0xd4>)
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	429a      	cmp	r2, r3
 800c326:	d903      	bls.n	800c330 <prvAddNewTaskToReadyList+0x74>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32c:	4a18      	ldr	r2, [pc, #96]	; (800c390 <prvAddNewTaskToReadyList+0xd4>)
 800c32e:	6013      	str	r3, [r2, #0]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c334:	4613      	mov	r3, r2
 800c336:	009b      	lsls	r3, r3, #2
 800c338:	4413      	add	r3, r2
 800c33a:	009b      	lsls	r3, r3, #2
 800c33c:	4a15      	ldr	r2, [pc, #84]	; (800c394 <prvAddNewTaskToReadyList+0xd8>)
 800c33e:	441a      	add	r2, r3
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3304      	adds	r3, #4
 800c344:	4619      	mov	r1, r3
 800c346:	4610      	mov	r0, r2
 800c348:	f7fe fce7 	bl	800ad1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c34c:	f001 fb4a 	bl	800d9e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c350:	4b0d      	ldr	r3, [pc, #52]	; (800c388 <prvAddNewTaskToReadyList+0xcc>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00e      	beq.n	800c376 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c358:	4b0a      	ldr	r3, [pc, #40]	; (800c384 <prvAddNewTaskToReadyList+0xc8>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c362:	429a      	cmp	r2, r3
 800c364:	d207      	bcs.n	800c376 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c366:	4b0c      	ldr	r3, [pc, #48]	; (800c398 <prvAddNewTaskToReadyList+0xdc>)
 800c368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c36c:	601a      	str	r2, [r3, #0]
 800c36e:	f3bf 8f4f 	dsb	sy
 800c372:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c376:	bf00      	nop
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	2000171c 	.word	0x2000171c
 800c384:	20001248 	.word	0x20001248
 800c388:	20001728 	.word	0x20001728
 800c38c:	20001738 	.word	0x20001738
 800c390:	20001724 	.word	0x20001724
 800c394:	2000124c 	.word	0x2000124c
 800c398:	e000ed04 	.word	0xe000ed04

0800c39c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af00      	add	r7, sp, #0
 800c3a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d019      	beq.n	800c3e2 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c3ae:	4b14      	ldr	r3, [pc, #80]	; (800c400 <vTaskDelay+0x64>)
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00c      	beq.n	800c3d0 <vTaskDelay+0x34>
	__asm volatile
 800c3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ba:	b672      	cpsid	i
 800c3bc:	f383 8811 	msr	BASEPRI, r3
 800c3c0:	f3bf 8f6f 	isb	sy
 800c3c4:	f3bf 8f4f 	dsb	sy
 800c3c8:	b662      	cpsie	i
 800c3ca:	60bb      	str	r3, [r7, #8]
}
 800c3cc:	bf00      	nop
 800c3ce:	e7fe      	b.n	800c3ce <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c3d0:	f000 f884 	bl	800c4dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fe16 	bl	800d008 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c3dc:	f000 f88c 	bl	800c4f8 <xTaskResumeAll>
 800c3e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d107      	bne.n	800c3f8 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c3e8:	4b06      	ldr	r3, [pc, #24]	; (800c404 <vTaskDelay+0x68>)
 800c3ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	f3bf 8f4f 	dsb	sy
 800c3f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c3f8:	bf00      	nop
 800c3fa:	3710      	adds	r7, #16
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}
 800c400:	20001744 	.word	0x20001744
 800c404:	e000ed04 	.word	0xe000ed04

0800c408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b08a      	sub	sp, #40	; 0x28
 800c40c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c40e:	2300      	movs	r3, #0
 800c410:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c412:	2300      	movs	r3, #0
 800c414:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c416:	463a      	mov	r2, r7
 800c418:	1d39      	adds	r1, r7, #4
 800c41a:	f107 0308 	add.w	r3, r7, #8
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe fc1a 	bl	800ac58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	9202      	str	r2, [sp, #8]
 800c42c:	9301      	str	r3, [sp, #4]
 800c42e:	2300      	movs	r3, #0
 800c430:	9300      	str	r3, [sp, #0]
 800c432:	2300      	movs	r3, #0
 800c434:	460a      	mov	r2, r1
 800c436:	4923      	ldr	r1, [pc, #140]	; (800c4c4 <vTaskStartScheduler+0xbc>)
 800c438:	4823      	ldr	r0, [pc, #140]	; (800c4c8 <vTaskStartScheduler+0xc0>)
 800c43a:	f7ff fe05 	bl	800c048 <xTaskCreateStatic>
 800c43e:	4603      	mov	r3, r0
 800c440:	4a22      	ldr	r2, [pc, #136]	; (800c4cc <vTaskStartScheduler+0xc4>)
 800c442:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c444:	4b21      	ldr	r3, [pc, #132]	; (800c4cc <vTaskStartScheduler+0xc4>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d002      	beq.n	800c452 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c44c:	2301      	movs	r3, #1
 800c44e:	617b      	str	r3, [r7, #20]
 800c450:	e001      	b.n	800c456 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c452:	2300      	movs	r3, #0
 800c454:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b01      	cmp	r3, #1
 800c45a:	d102      	bne.n	800c462 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c45c:	f000 fe28 	bl	800d0b0 <xTimerCreateTimerTask>
 800c460:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2b01      	cmp	r3, #1
 800c466:	d118      	bne.n	800c49a <vTaskStartScheduler+0x92>
	__asm volatile
 800c468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46c:	b672      	cpsid	i
 800c46e:	f383 8811 	msr	BASEPRI, r3
 800c472:	f3bf 8f6f 	isb	sy
 800c476:	f3bf 8f4f 	dsb	sy
 800c47a:	b662      	cpsie	i
 800c47c:	613b      	str	r3, [r7, #16]
}
 800c47e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c480:	4b13      	ldr	r3, [pc, #76]	; (800c4d0 <vTaskStartScheduler+0xc8>)
 800c482:	f04f 32ff 	mov.w	r2, #4294967295
 800c486:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c488:	4b12      	ldr	r3, [pc, #72]	; (800c4d4 <vTaskStartScheduler+0xcc>)
 800c48a:	2201      	movs	r2, #1
 800c48c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c48e:	4b12      	ldr	r3, [pc, #72]	; (800c4d8 <vTaskStartScheduler+0xd0>)
 800c490:	2200      	movs	r2, #0
 800c492:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c494:	f001 f9f4 	bl	800d880 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c498:	e010      	b.n	800c4bc <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4a0:	d10c      	bne.n	800c4bc <vTaskStartScheduler+0xb4>
	__asm volatile
 800c4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4a6:	b672      	cpsid	i
 800c4a8:	f383 8811 	msr	BASEPRI, r3
 800c4ac:	f3bf 8f6f 	isb	sy
 800c4b0:	f3bf 8f4f 	dsb	sy
 800c4b4:	b662      	cpsie	i
 800c4b6:	60fb      	str	r3, [r7, #12]
}
 800c4b8:	bf00      	nop
 800c4ba:	e7fe      	b.n	800c4ba <vTaskStartScheduler+0xb2>
}
 800c4bc:	bf00      	nop
 800c4be:	3718      	adds	r7, #24
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}
 800c4c4:	0802d068 	.word	0x0802d068
 800c4c8:	0800cb15 	.word	0x0800cb15
 800c4cc:	20001740 	.word	0x20001740
 800c4d0:	2000173c 	.word	0x2000173c
 800c4d4:	20001728 	.word	0x20001728
 800c4d8:	20001720 	.word	0x20001720

0800c4dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c4e0:	4b04      	ldr	r3, [pc, #16]	; (800c4f4 <vTaskSuspendAll+0x18>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	4a03      	ldr	r2, [pc, #12]	; (800c4f4 <vTaskSuspendAll+0x18>)
 800c4e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c4ea:	bf00      	nop
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr
 800c4f4:	20001744 	.word	0x20001744

0800c4f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b084      	sub	sp, #16
 800c4fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c4fe:	2300      	movs	r3, #0
 800c500:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c502:	2300      	movs	r3, #0
 800c504:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c506:	4b43      	ldr	r3, [pc, #268]	; (800c614 <xTaskResumeAll+0x11c>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10c      	bne.n	800c528 <xTaskResumeAll+0x30>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	b672      	cpsid	i
 800c514:	f383 8811 	msr	BASEPRI, r3
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	f3bf 8f4f 	dsb	sy
 800c520:	b662      	cpsie	i
 800c522:	603b      	str	r3, [r7, #0]
}
 800c524:	bf00      	nop
 800c526:	e7fe      	b.n	800c526 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c528:	f001 fa28 	bl	800d97c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c52c:	4b39      	ldr	r3, [pc, #228]	; (800c614 <xTaskResumeAll+0x11c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	3b01      	subs	r3, #1
 800c532:	4a38      	ldr	r2, [pc, #224]	; (800c614 <xTaskResumeAll+0x11c>)
 800c534:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c536:	4b37      	ldr	r3, [pc, #220]	; (800c614 <xTaskResumeAll+0x11c>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d162      	bne.n	800c604 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c53e:	4b36      	ldr	r3, [pc, #216]	; (800c618 <xTaskResumeAll+0x120>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d05e      	beq.n	800c604 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c546:	e02f      	b.n	800c5a8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c548:	4b34      	ldr	r3, [pc, #208]	; (800c61c <xTaskResumeAll+0x124>)
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	3318      	adds	r3, #24
 800c554:	4618      	mov	r0, r3
 800c556:	f7fe fc3d 	bl	800add4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	3304      	adds	r3, #4
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fe fc38 	bl	800add4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c568:	4b2d      	ldr	r3, [pc, #180]	; (800c620 <xTaskResumeAll+0x128>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d903      	bls.n	800c578 <xTaskResumeAll+0x80>
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c574:	4a2a      	ldr	r2, [pc, #168]	; (800c620 <xTaskResumeAll+0x128>)
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c57c:	4613      	mov	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4413      	add	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4a27      	ldr	r2, [pc, #156]	; (800c624 <xTaskResumeAll+0x12c>)
 800c586:	441a      	add	r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	3304      	adds	r3, #4
 800c58c:	4619      	mov	r1, r3
 800c58e:	4610      	mov	r0, r2
 800c590:	f7fe fbc3 	bl	800ad1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c598:	4b23      	ldr	r3, [pc, #140]	; (800c628 <xTaskResumeAll+0x130>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c59e:	429a      	cmp	r2, r3
 800c5a0:	d302      	bcc.n	800c5a8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800c5a2:	4b22      	ldr	r3, [pc, #136]	; (800c62c <xTaskResumeAll+0x134>)
 800c5a4:	2201      	movs	r2, #1
 800c5a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c5a8:	4b1c      	ldr	r3, [pc, #112]	; (800c61c <xTaskResumeAll+0x124>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d1cb      	bne.n	800c548 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d001      	beq.n	800c5ba <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c5b6:	f000 fb65 	bl	800cc84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c5ba:	4b1d      	ldr	r3, [pc, #116]	; (800c630 <xTaskResumeAll+0x138>)
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d010      	beq.n	800c5e8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c5c6:	f000 f847 	bl	800c658 <xTaskIncrementTick>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800c5d0:	4b16      	ldr	r3, [pc, #88]	; (800c62c <xTaskResumeAll+0x134>)
 800c5d2:	2201      	movs	r2, #1
 800c5d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	3b01      	subs	r3, #1
 800c5da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1f1      	bne.n	800c5c6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800c5e2:	4b13      	ldr	r3, [pc, #76]	; (800c630 <xTaskResumeAll+0x138>)
 800c5e4:	2200      	movs	r2, #0
 800c5e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c5e8:	4b10      	ldr	r3, [pc, #64]	; (800c62c <xTaskResumeAll+0x134>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d009      	beq.n	800c604 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c5f4:	4b0f      	ldr	r3, [pc, #60]	; (800c634 <xTaskResumeAll+0x13c>)
 800c5f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c604:	f001 f9ee 	bl	800d9e4 <vPortExitCritical>

	return xAlreadyYielded;
 800c608:	68bb      	ldr	r3, [r7, #8]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
 800c612:	bf00      	nop
 800c614:	20001744 	.word	0x20001744
 800c618:	2000171c 	.word	0x2000171c
 800c61c:	200016dc 	.word	0x200016dc
 800c620:	20001724 	.word	0x20001724
 800c624:	2000124c 	.word	0x2000124c
 800c628:	20001248 	.word	0x20001248
 800c62c:	20001730 	.word	0x20001730
 800c630:	2000172c 	.word	0x2000172c
 800c634:	e000ed04 	.word	0xe000ed04

0800c638 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c63e:	4b05      	ldr	r3, [pc, #20]	; (800c654 <xTaskGetTickCount+0x1c>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c644:	687b      	ldr	r3, [r7, #4]
}
 800c646:	4618      	mov	r0, r3
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	20001720 	.word	0x20001720

0800c658 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b086      	sub	sp, #24
 800c65c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c65e:	2300      	movs	r3, #0
 800c660:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c662:	4b50      	ldr	r3, [pc, #320]	; (800c7a4 <xTaskIncrementTick+0x14c>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	f040 808b 	bne.w	800c782 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c66c:	4b4e      	ldr	r3, [pc, #312]	; (800c7a8 <xTaskIncrementTick+0x150>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	3301      	adds	r3, #1
 800c672:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c674:	4a4c      	ldr	r2, [pc, #304]	; (800c7a8 <xTaskIncrementTick+0x150>)
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d122      	bne.n	800c6c6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c680:	4b4a      	ldr	r3, [pc, #296]	; (800c7ac <xTaskIncrementTick+0x154>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d00c      	beq.n	800c6a4 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68e:	b672      	cpsid	i
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	b662      	cpsie	i
 800c69e:	603b      	str	r3, [r7, #0]
}
 800c6a0:	bf00      	nop
 800c6a2:	e7fe      	b.n	800c6a2 <xTaskIncrementTick+0x4a>
 800c6a4:	4b41      	ldr	r3, [pc, #260]	; (800c7ac <xTaskIncrementTick+0x154>)
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	60fb      	str	r3, [r7, #12]
 800c6aa:	4b41      	ldr	r3, [pc, #260]	; (800c7b0 <xTaskIncrementTick+0x158>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4a3f      	ldr	r2, [pc, #252]	; (800c7ac <xTaskIncrementTick+0x154>)
 800c6b0:	6013      	str	r3, [r2, #0]
 800c6b2:	4a3f      	ldr	r2, [pc, #252]	; (800c7b0 <xTaskIncrementTick+0x158>)
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6013      	str	r3, [r2, #0]
 800c6b8:	4b3e      	ldr	r3, [pc, #248]	; (800c7b4 <xTaskIncrementTick+0x15c>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	4a3d      	ldr	r2, [pc, #244]	; (800c7b4 <xTaskIncrementTick+0x15c>)
 800c6c0:	6013      	str	r3, [r2, #0]
 800c6c2:	f000 fadf 	bl	800cc84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c6c6:	4b3c      	ldr	r3, [pc, #240]	; (800c7b8 <xTaskIncrementTick+0x160>)
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	693a      	ldr	r2, [r7, #16]
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d349      	bcc.n	800c764 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c6d0:	4b36      	ldr	r3, [pc, #216]	; (800c7ac <xTaskIncrementTick+0x154>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d104      	bne.n	800c6e4 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6da:	4b37      	ldr	r3, [pc, #220]	; (800c7b8 <xTaskIncrementTick+0x160>)
 800c6dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c6e0:	601a      	str	r2, [r3, #0]
					break;
 800c6e2:	e03f      	b.n	800c764 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6e4:	4b31      	ldr	r3, [pc, #196]	; (800c7ac <xTaskIncrementTick+0x154>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	68db      	ldr	r3, [r3, #12]
 800c6ea:	68db      	ldr	r3, [r3, #12]
 800c6ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c6ee:	68bb      	ldr	r3, [r7, #8]
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c6f4:	693a      	ldr	r2, [r7, #16]
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	429a      	cmp	r2, r3
 800c6fa:	d203      	bcs.n	800c704 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c6fc:	4a2e      	ldr	r2, [pc, #184]	; (800c7b8 <xTaskIncrementTick+0x160>)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c702:	e02f      	b.n	800c764 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c704:	68bb      	ldr	r3, [r7, #8]
 800c706:	3304      	adds	r3, #4
 800c708:	4618      	mov	r0, r3
 800c70a:	f7fe fb63 	bl	800add4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c712:	2b00      	cmp	r3, #0
 800c714:	d004      	beq.n	800c720 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	3318      	adds	r3, #24
 800c71a:	4618      	mov	r0, r3
 800c71c:	f7fe fb5a 	bl	800add4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c720:	68bb      	ldr	r3, [r7, #8]
 800c722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c724:	4b25      	ldr	r3, [pc, #148]	; (800c7bc <xTaskIncrementTick+0x164>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d903      	bls.n	800c734 <xTaskIncrementTick+0xdc>
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c730:	4a22      	ldr	r2, [pc, #136]	; (800c7bc <xTaskIncrementTick+0x164>)
 800c732:	6013      	str	r3, [r2, #0]
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c738:	4613      	mov	r3, r2
 800c73a:	009b      	lsls	r3, r3, #2
 800c73c:	4413      	add	r3, r2
 800c73e:	009b      	lsls	r3, r3, #2
 800c740:	4a1f      	ldr	r2, [pc, #124]	; (800c7c0 <xTaskIncrementTick+0x168>)
 800c742:	441a      	add	r2, r3
 800c744:	68bb      	ldr	r3, [r7, #8]
 800c746:	3304      	adds	r3, #4
 800c748:	4619      	mov	r1, r3
 800c74a:	4610      	mov	r0, r2
 800c74c:	f7fe fae5 	bl	800ad1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c754:	4b1b      	ldr	r3, [pc, #108]	; (800c7c4 <xTaskIncrementTick+0x16c>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d3b8      	bcc.n	800c6d0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800c75e:	2301      	movs	r3, #1
 800c760:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c762:	e7b5      	b.n	800c6d0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c764:	4b17      	ldr	r3, [pc, #92]	; (800c7c4 <xTaskIncrementTick+0x16c>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c76a:	4915      	ldr	r1, [pc, #84]	; (800c7c0 <xTaskIncrementTick+0x168>)
 800c76c:	4613      	mov	r3, r2
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	4413      	add	r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	440b      	add	r3, r1
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d907      	bls.n	800c78c <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800c77c:	2301      	movs	r3, #1
 800c77e:	617b      	str	r3, [r7, #20]
 800c780:	e004      	b.n	800c78c <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800c782:	4b11      	ldr	r3, [pc, #68]	; (800c7c8 <xTaskIncrementTick+0x170>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	3301      	adds	r3, #1
 800c788:	4a0f      	ldr	r2, [pc, #60]	; (800c7c8 <xTaskIncrementTick+0x170>)
 800c78a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800c78c:	4b0f      	ldr	r3, [pc, #60]	; (800c7cc <xTaskIncrementTick+0x174>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d001      	beq.n	800c798 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800c794:	2301      	movs	r3, #1
 800c796:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800c798:	697b      	ldr	r3, [r7, #20]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3718      	adds	r7, #24
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	20001744 	.word	0x20001744
 800c7a8:	20001720 	.word	0x20001720
 800c7ac:	200016d4 	.word	0x200016d4
 800c7b0:	200016d8 	.word	0x200016d8
 800c7b4:	20001734 	.word	0x20001734
 800c7b8:	2000173c 	.word	0x2000173c
 800c7bc:	20001724 	.word	0x20001724
 800c7c0:	2000124c 	.word	0x2000124c
 800c7c4:	20001248 	.word	0x20001248
 800c7c8:	2000172c 	.word	0x2000172c
 800c7cc:	20001730 	.word	0x20001730

0800c7d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c7d6:	4b29      	ldr	r3, [pc, #164]	; (800c87c <vTaskSwitchContext+0xac>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d003      	beq.n	800c7e6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c7de:	4b28      	ldr	r3, [pc, #160]	; (800c880 <vTaskSwitchContext+0xb0>)
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c7e4:	e043      	b.n	800c86e <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800c7e6:	4b26      	ldr	r3, [pc, #152]	; (800c880 <vTaskSwitchContext+0xb0>)
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7ec:	4b25      	ldr	r3, [pc, #148]	; (800c884 <vTaskSwitchContext+0xb4>)
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	60fb      	str	r3, [r7, #12]
 800c7f2:	e012      	b.n	800c81a <vTaskSwitchContext+0x4a>
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d10c      	bne.n	800c814 <vTaskSwitchContext+0x44>
	__asm volatile
 800c7fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7fe:	b672      	cpsid	i
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	b662      	cpsie	i
 800c80e:	607b      	str	r3, [r7, #4]
}
 800c810:	bf00      	nop
 800c812:	e7fe      	b.n	800c812 <vTaskSwitchContext+0x42>
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3b01      	subs	r3, #1
 800c818:	60fb      	str	r3, [r7, #12]
 800c81a:	491b      	ldr	r1, [pc, #108]	; (800c888 <vTaskSwitchContext+0xb8>)
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	4613      	mov	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	440b      	add	r3, r1
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d0e2      	beq.n	800c7f4 <vTaskSwitchContext+0x24>
 800c82e:	68fa      	ldr	r2, [r7, #12]
 800c830:	4613      	mov	r3, r2
 800c832:	009b      	lsls	r3, r3, #2
 800c834:	4413      	add	r3, r2
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4a13      	ldr	r2, [pc, #76]	; (800c888 <vTaskSwitchContext+0xb8>)
 800c83a:	4413      	add	r3, r2
 800c83c:	60bb      	str	r3, [r7, #8]
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	685a      	ldr	r2, [r3, #4]
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	605a      	str	r2, [r3, #4]
 800c848:	68bb      	ldr	r3, [r7, #8]
 800c84a:	685a      	ldr	r2, [r3, #4]
 800c84c:	68bb      	ldr	r3, [r7, #8]
 800c84e:	3308      	adds	r3, #8
 800c850:	429a      	cmp	r2, r3
 800c852:	d104      	bne.n	800c85e <vTaskSwitchContext+0x8e>
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	685a      	ldr	r2, [r3, #4]
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	605a      	str	r2, [r3, #4]
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	685b      	ldr	r3, [r3, #4]
 800c862:	68db      	ldr	r3, [r3, #12]
 800c864:	4a09      	ldr	r2, [pc, #36]	; (800c88c <vTaskSwitchContext+0xbc>)
 800c866:	6013      	str	r3, [r2, #0]
 800c868:	4a06      	ldr	r2, [pc, #24]	; (800c884 <vTaskSwitchContext+0xb4>)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6013      	str	r3, [r2, #0]
}
 800c86e:	bf00      	nop
 800c870:	3714      	adds	r7, #20
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	20001744 	.word	0x20001744
 800c880:	20001730 	.word	0x20001730
 800c884:	20001724 	.word	0x20001724
 800c888:	2000124c 	.word	0x2000124c
 800c88c:	20001248 	.word	0x20001248

0800c890 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b084      	sub	sp, #16
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d10c      	bne.n	800c8ba <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800c8a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a4:	b672      	cpsid	i
 800c8a6:	f383 8811 	msr	BASEPRI, r3
 800c8aa:	f3bf 8f6f 	isb	sy
 800c8ae:	f3bf 8f4f 	dsb	sy
 800c8b2:	b662      	cpsie	i
 800c8b4:	60fb      	str	r3, [r7, #12]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c8ba:	4b07      	ldr	r3, [pc, #28]	; (800c8d8 <vTaskPlaceOnEventList+0x48>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	3318      	adds	r3, #24
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f7fe fa4d 	bl	800ad62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c8c8:	2101      	movs	r1, #1
 800c8ca:	6838      	ldr	r0, [r7, #0]
 800c8cc:	f000 fb9c 	bl	800d008 <prvAddCurrentTaskToDelayedList>
}
 800c8d0:	bf00      	nop
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}
 800c8d8:	20001248 	.word	0x20001248

0800c8dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b086      	sub	sp, #24
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	60f8      	str	r0, [r7, #12]
 800c8e4:	60b9      	str	r1, [r7, #8]
 800c8e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10c      	bne.n	800c908 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f2:	b672      	cpsid	i
 800c8f4:	f383 8811 	msr	BASEPRI, r3
 800c8f8:	f3bf 8f6f 	isb	sy
 800c8fc:	f3bf 8f4f 	dsb	sy
 800c900:	b662      	cpsie	i
 800c902:	617b      	str	r3, [r7, #20]
}
 800c904:	bf00      	nop
 800c906:	e7fe      	b.n	800c906 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c908:	4b0a      	ldr	r3, [pc, #40]	; (800c934 <vTaskPlaceOnEventListRestricted+0x58>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	3318      	adds	r3, #24
 800c90e:	4619      	mov	r1, r3
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f7fe fa02 	bl	800ad1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d002      	beq.n	800c922 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800c91c:	f04f 33ff 	mov.w	r3, #4294967295
 800c920:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c922:	6879      	ldr	r1, [r7, #4]
 800c924:	68b8      	ldr	r0, [r7, #8]
 800c926:	f000 fb6f 	bl	800d008 <prvAddCurrentTaskToDelayedList>
	}
 800c92a:	bf00      	nop
 800c92c:	3718      	adds	r7, #24
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
 800c932:	bf00      	nop
 800c934:	20001248 	.word	0x20001248

0800c938 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b086      	sub	sp, #24
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10c      	bne.n	800c968 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c952:	b672      	cpsid	i
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	b662      	cpsie	i
 800c962:	60fb      	str	r3, [r7, #12]
}
 800c964:	bf00      	nop
 800c966:	e7fe      	b.n	800c966 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	3318      	adds	r3, #24
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fe fa31 	bl	800add4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c972:	4b1e      	ldr	r3, [pc, #120]	; (800c9ec <xTaskRemoveFromEventList+0xb4>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d11d      	bne.n	800c9b6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	3304      	adds	r3, #4
 800c97e:	4618      	mov	r0, r3
 800c980:	f7fe fa28 	bl	800add4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c988:	4b19      	ldr	r3, [pc, #100]	; (800c9f0 <xTaskRemoveFromEventList+0xb8>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	429a      	cmp	r2, r3
 800c98e:	d903      	bls.n	800c998 <xTaskRemoveFromEventList+0x60>
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c994:	4a16      	ldr	r2, [pc, #88]	; (800c9f0 <xTaskRemoveFromEventList+0xb8>)
 800c996:	6013      	str	r3, [r2, #0]
 800c998:	693b      	ldr	r3, [r7, #16]
 800c99a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c99c:	4613      	mov	r3, r2
 800c99e:	009b      	lsls	r3, r3, #2
 800c9a0:	4413      	add	r3, r2
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4a13      	ldr	r2, [pc, #76]	; (800c9f4 <xTaskRemoveFromEventList+0xbc>)
 800c9a6:	441a      	add	r2, r3
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	3304      	adds	r3, #4
 800c9ac:	4619      	mov	r1, r3
 800c9ae:	4610      	mov	r0, r2
 800c9b0:	f7fe f9b3 	bl	800ad1a <vListInsertEnd>
 800c9b4:	e005      	b.n	800c9c2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	3318      	adds	r3, #24
 800c9ba:	4619      	mov	r1, r3
 800c9bc:	480e      	ldr	r0, [pc, #56]	; (800c9f8 <xTaskRemoveFromEventList+0xc0>)
 800c9be:	f7fe f9ac 	bl	800ad1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c9c2:	693b      	ldr	r3, [r7, #16]
 800c9c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9c6:	4b0d      	ldr	r3, [pc, #52]	; (800c9fc <xTaskRemoveFromEventList+0xc4>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d905      	bls.n	800c9dc <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c9d4:	4b0a      	ldr	r3, [pc, #40]	; (800ca00 <xTaskRemoveFromEventList+0xc8>)
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	601a      	str	r2, [r3, #0]
 800c9da:	e001      	b.n	800c9e0 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c9e0:	697b      	ldr	r3, [r7, #20]
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3718      	adds	r7, #24
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
 800c9ea:	bf00      	nop
 800c9ec:	20001744 	.word	0x20001744
 800c9f0:	20001724 	.word	0x20001724
 800c9f4:	2000124c 	.word	0x2000124c
 800c9f8:	200016dc 	.word	0x200016dc
 800c9fc:	20001248 	.word	0x20001248
 800ca00:	20001730 	.word	0x20001730

0800ca04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ca0c:	4b06      	ldr	r3, [pc, #24]	; (800ca28 <vTaskInternalSetTimeOutState+0x24>)
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ca14:	4b05      	ldr	r3, [pc, #20]	; (800ca2c <vTaskInternalSetTimeOutState+0x28>)
 800ca16:	681a      	ldr	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	605a      	str	r2, [r3, #4]
}
 800ca1c:	bf00      	nop
 800ca1e:	370c      	adds	r7, #12
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr
 800ca28:	20001734 	.word	0x20001734
 800ca2c:	20001720 	.word	0x20001720

0800ca30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10c      	bne.n	800ca5a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	b672      	cpsid	i
 800ca46:	f383 8811 	msr	BASEPRI, r3
 800ca4a:	f3bf 8f6f 	isb	sy
 800ca4e:	f3bf 8f4f 	dsb	sy
 800ca52:	b662      	cpsie	i
 800ca54:	613b      	str	r3, [r7, #16]
}
 800ca56:	bf00      	nop
 800ca58:	e7fe      	b.n	800ca58 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d10c      	bne.n	800ca7a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca64:	b672      	cpsid	i
 800ca66:	f383 8811 	msr	BASEPRI, r3
 800ca6a:	f3bf 8f6f 	isb	sy
 800ca6e:	f3bf 8f4f 	dsb	sy
 800ca72:	b662      	cpsie	i
 800ca74:	60fb      	str	r3, [r7, #12]
}
 800ca76:	bf00      	nop
 800ca78:	e7fe      	b.n	800ca78 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ca7a:	f000 ff7f 	bl	800d97c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ca7e:	4b1d      	ldr	r3, [pc, #116]	; (800caf4 <xTaskCheckForTimeOut+0xc4>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	69ba      	ldr	r2, [r7, #24]
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca96:	d102      	bne.n	800ca9e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	61fb      	str	r3, [r7, #28]
 800ca9c:	e023      	b.n	800cae6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	4b15      	ldr	r3, [pc, #84]	; (800caf8 <xTaskCheckForTimeOut+0xc8>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d007      	beq.n	800caba <xTaskCheckForTimeOut+0x8a>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	685b      	ldr	r3, [r3, #4]
 800caae:	69ba      	ldr	r2, [r7, #24]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d302      	bcc.n	800caba <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cab4:	2301      	movs	r3, #1
 800cab6:	61fb      	str	r3, [r7, #28]
 800cab8:	e015      	b.n	800cae6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	697a      	ldr	r2, [r7, #20]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d20b      	bcs.n	800cadc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	681a      	ldr	r2, [r3, #0]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	1ad2      	subs	r2, r2, r3
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f7ff ff97 	bl	800ca04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cad6:	2300      	movs	r3, #0
 800cad8:	61fb      	str	r3, [r7, #28]
 800cada:	e004      	b.n	800cae6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2200      	movs	r2, #0
 800cae0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cae2:	2301      	movs	r3, #1
 800cae4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cae6:	f000 ff7d 	bl	800d9e4 <vPortExitCritical>

	return xReturn;
 800caea:	69fb      	ldr	r3, [r7, #28]
}
 800caec:	4618      	mov	r0, r3
 800caee:	3720      	adds	r7, #32
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	20001720 	.word	0x20001720
 800caf8:	20001734 	.word	0x20001734

0800cafc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cafc:	b480      	push	{r7}
 800cafe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cb00:	4b03      	ldr	r3, [pc, #12]	; (800cb10 <vTaskMissedYield+0x14>)
 800cb02:	2201      	movs	r2, #1
 800cb04:	601a      	str	r2, [r3, #0]
}
 800cb06:	bf00      	nop
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr
 800cb10:	20001730 	.word	0x20001730

0800cb14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cb1c:	f000 f852 	bl	800cbc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cb20:	4b06      	ldr	r3, [pc, #24]	; (800cb3c <prvIdleTask+0x28>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d9f9      	bls.n	800cb1c <prvIdleTask+0x8>
			{
				taskYIELD();
 800cb28:	4b05      	ldr	r3, [pc, #20]	; (800cb40 <prvIdleTask+0x2c>)
 800cb2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800cb38:	e7f0      	b.n	800cb1c <prvIdleTask+0x8>
 800cb3a:	bf00      	nop
 800cb3c:	2000124c 	.word	0x2000124c
 800cb40:	e000ed04 	.word	0xe000ed04

0800cb44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b082      	sub	sp, #8
 800cb48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	607b      	str	r3, [r7, #4]
 800cb4e:	e00c      	b.n	800cb6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	4613      	mov	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	4413      	add	r3, r2
 800cb58:	009b      	lsls	r3, r3, #2
 800cb5a:	4a12      	ldr	r2, [pc, #72]	; (800cba4 <prvInitialiseTaskLists+0x60>)
 800cb5c:	4413      	add	r3, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fe f8ae 	bl	800acc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	3301      	adds	r3, #1
 800cb68:	607b      	str	r3, [r7, #4]
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2b37      	cmp	r3, #55	; 0x37
 800cb6e:	d9ef      	bls.n	800cb50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800cb70:	480d      	ldr	r0, [pc, #52]	; (800cba8 <prvInitialiseTaskLists+0x64>)
 800cb72:	f7fe f8a5 	bl	800acc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800cb76:	480d      	ldr	r0, [pc, #52]	; (800cbac <prvInitialiseTaskLists+0x68>)
 800cb78:	f7fe f8a2 	bl	800acc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800cb7c:	480c      	ldr	r0, [pc, #48]	; (800cbb0 <prvInitialiseTaskLists+0x6c>)
 800cb7e:	f7fe f89f 	bl	800acc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800cb82:	480c      	ldr	r0, [pc, #48]	; (800cbb4 <prvInitialiseTaskLists+0x70>)
 800cb84:	f7fe f89c 	bl	800acc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800cb88:	480b      	ldr	r0, [pc, #44]	; (800cbb8 <prvInitialiseTaskLists+0x74>)
 800cb8a:	f7fe f899 	bl	800acc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800cb8e:	4b0b      	ldr	r3, [pc, #44]	; (800cbbc <prvInitialiseTaskLists+0x78>)
 800cb90:	4a05      	ldr	r2, [pc, #20]	; (800cba8 <prvInitialiseTaskLists+0x64>)
 800cb92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800cb94:	4b0a      	ldr	r3, [pc, #40]	; (800cbc0 <prvInitialiseTaskLists+0x7c>)
 800cb96:	4a05      	ldr	r2, [pc, #20]	; (800cbac <prvInitialiseTaskLists+0x68>)
 800cb98:	601a      	str	r2, [r3, #0]
}
 800cb9a:	bf00      	nop
 800cb9c:	3708      	adds	r7, #8
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
 800cba2:	bf00      	nop
 800cba4:	2000124c 	.word	0x2000124c
 800cba8:	200016ac 	.word	0x200016ac
 800cbac:	200016c0 	.word	0x200016c0
 800cbb0:	200016dc 	.word	0x200016dc
 800cbb4:	200016f0 	.word	0x200016f0
 800cbb8:	20001708 	.word	0x20001708
 800cbbc:	200016d4 	.word	0x200016d4
 800cbc0:	200016d8 	.word	0x200016d8

0800cbc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cbca:	e019      	b.n	800cc00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800cbcc:	f000 fed6 	bl	800d97c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbd0:	4b10      	ldr	r3, [pc, #64]	; (800cc14 <prvCheckTasksWaitingTermination+0x50>)
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	68db      	ldr	r3, [r3, #12]
 800cbd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	3304      	adds	r3, #4
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f7fe f8f9 	bl	800add4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800cbe2:	4b0d      	ldr	r3, [pc, #52]	; (800cc18 <prvCheckTasksWaitingTermination+0x54>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	3b01      	subs	r3, #1
 800cbe8:	4a0b      	ldr	r2, [pc, #44]	; (800cc18 <prvCheckTasksWaitingTermination+0x54>)
 800cbea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cbec:	4b0b      	ldr	r3, [pc, #44]	; (800cc1c <prvCheckTasksWaitingTermination+0x58>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	4a0a      	ldr	r2, [pc, #40]	; (800cc1c <prvCheckTasksWaitingTermination+0x58>)
 800cbf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800cbf6:	f000 fef5 	bl	800d9e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f000 f810 	bl	800cc20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800cc00:	4b06      	ldr	r3, [pc, #24]	; (800cc1c <prvCheckTasksWaitingTermination+0x58>)
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d1e1      	bne.n	800cbcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cc08:	bf00      	nop
 800cc0a:	bf00      	nop
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	200016f0 	.word	0x200016f0
 800cc18:	2000171c 	.word	0x2000171c
 800cc1c:	20001704 	.word	0x20001704

0800cc20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b084      	sub	sp, #16
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d108      	bne.n	800cc44 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc36:	4618      	mov	r0, r3
 800cc38:	f001 f896 	bl	800dd68 <vPortFree>
				vPortFree( pxTCB );
 800cc3c:	6878      	ldr	r0, [r7, #4]
 800cc3e:	f001 f893 	bl	800dd68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cc42:	e01a      	b.n	800cc7a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d103      	bne.n	800cc56 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f001 f88a 	bl	800dd68 <vPortFree>
	}
 800cc54:	e011      	b.n	800cc7a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800cc5c:	2b02      	cmp	r3, #2
 800cc5e:	d00c      	beq.n	800cc7a <prvDeleteTCB+0x5a>
	__asm volatile
 800cc60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc64:	b672      	cpsid	i
 800cc66:	f383 8811 	msr	BASEPRI, r3
 800cc6a:	f3bf 8f6f 	isb	sy
 800cc6e:	f3bf 8f4f 	dsb	sy
 800cc72:	b662      	cpsie	i
 800cc74:	60fb      	str	r3, [r7, #12]
}
 800cc76:	bf00      	nop
 800cc78:	e7fe      	b.n	800cc78 <prvDeleteTCB+0x58>
	}
 800cc7a:	bf00      	nop
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}
	...

0800cc84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc8a:	4b0c      	ldr	r3, [pc, #48]	; (800ccbc <prvResetNextTaskUnblockTime+0x38>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d104      	bne.n	800cc9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cc94:	4b0a      	ldr	r3, [pc, #40]	; (800ccc0 <prvResetNextTaskUnblockTime+0x3c>)
 800cc96:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cc9c:	e008      	b.n	800ccb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc9e:	4b07      	ldr	r3, [pc, #28]	; (800ccbc <prvResetNextTaskUnblockTime+0x38>)
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	68db      	ldr	r3, [r3, #12]
 800cca4:	68db      	ldr	r3, [r3, #12]
 800cca6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	685b      	ldr	r3, [r3, #4]
 800ccac:	4a04      	ldr	r2, [pc, #16]	; (800ccc0 <prvResetNextTaskUnblockTime+0x3c>)
 800ccae:	6013      	str	r3, [r2, #0]
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr
 800ccbc:	200016d4 	.word	0x200016d4
 800ccc0:	2000173c 	.word	0x2000173c

0800ccc4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ccca:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <xTaskGetCurrentTaskHandle+0x1c>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ccd0:	687b      	ldr	r3, [r7, #4]
	}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
 800ccde:	bf00      	nop
 800cce0:	20001248 	.word	0x20001248

0800cce4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cce4:	b480      	push	{r7}
 800cce6:	b083      	sub	sp, #12
 800cce8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ccea:	4b0b      	ldr	r3, [pc, #44]	; (800cd18 <xTaskGetSchedulerState+0x34>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d102      	bne.n	800ccf8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	607b      	str	r3, [r7, #4]
 800ccf6:	e008      	b.n	800cd0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ccf8:	4b08      	ldr	r3, [pc, #32]	; (800cd1c <xTaskGetSchedulerState+0x38>)
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d102      	bne.n	800cd06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cd00:	2302      	movs	r3, #2
 800cd02:	607b      	str	r3, [r7, #4]
 800cd04:	e001      	b.n	800cd0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cd06:	2300      	movs	r3, #0
 800cd08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cd0a:	687b      	ldr	r3, [r7, #4]
	}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	370c      	adds	r7, #12
 800cd10:	46bd      	mov	sp, r7
 800cd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd16:	4770      	bx	lr
 800cd18:	20001728 	.word	0x20001728
 800cd1c:	20001744 	.word	0x20001744

0800cd20 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d051      	beq.n	800cdda <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd3a:	4b2a      	ldr	r3, [pc, #168]	; (800cde4 <xTaskPriorityInherit+0xc4>)
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d241      	bcs.n	800cdc8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cd44:	68bb      	ldr	r3, [r7, #8]
 800cd46:	699b      	ldr	r3, [r3, #24]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	db06      	blt.n	800cd5a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd4c:	4b25      	ldr	r3, [pc, #148]	; (800cde4 <xTaskPriorityInherit+0xc4>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	6959      	ldr	r1, [r3, #20]
 800cd5e:	68bb      	ldr	r3, [r7, #8]
 800cd60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd62:	4613      	mov	r3, r2
 800cd64:	009b      	lsls	r3, r3, #2
 800cd66:	4413      	add	r3, r2
 800cd68:	009b      	lsls	r3, r3, #2
 800cd6a:	4a1f      	ldr	r2, [pc, #124]	; (800cde8 <xTaskPriorityInherit+0xc8>)
 800cd6c:	4413      	add	r3, r2
 800cd6e:	4299      	cmp	r1, r3
 800cd70:	d122      	bne.n	800cdb8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd72:	68bb      	ldr	r3, [r7, #8]
 800cd74:	3304      	adds	r3, #4
 800cd76:	4618      	mov	r0, r3
 800cd78:	f7fe f82c 	bl	800add4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cd7c:	4b19      	ldr	r3, [pc, #100]	; (800cde4 <xTaskPriorityInherit+0xc4>)
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cd86:	68bb      	ldr	r3, [r7, #8]
 800cd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd8a:	4b18      	ldr	r3, [pc, #96]	; (800cdec <xTaskPriorityInherit+0xcc>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d903      	bls.n	800cd9a <xTaskPriorityInherit+0x7a>
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd96:	4a15      	ldr	r2, [pc, #84]	; (800cdec <xTaskPriorityInherit+0xcc>)
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	68bb      	ldr	r3, [r7, #8]
 800cd9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd9e:	4613      	mov	r3, r2
 800cda0:	009b      	lsls	r3, r3, #2
 800cda2:	4413      	add	r3, r2
 800cda4:	009b      	lsls	r3, r3, #2
 800cda6:	4a10      	ldr	r2, [pc, #64]	; (800cde8 <xTaskPriorityInherit+0xc8>)
 800cda8:	441a      	add	r2, r3
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	3304      	adds	r3, #4
 800cdae:	4619      	mov	r1, r3
 800cdb0:	4610      	mov	r0, r2
 800cdb2:	f7fd ffb2 	bl	800ad1a <vListInsertEnd>
 800cdb6:	e004      	b.n	800cdc2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cdb8:	4b0a      	ldr	r3, [pc, #40]	; (800cde4 <xTaskPriorityInherit+0xc4>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdbe:	68bb      	ldr	r3, [r7, #8]
 800cdc0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	60fb      	str	r3, [r7, #12]
 800cdc6:	e008      	b.n	800cdda <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800cdc8:	68bb      	ldr	r3, [r7, #8]
 800cdca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cdcc:	4b05      	ldr	r3, [pc, #20]	; (800cde4 <xTaskPriorityInherit+0xc4>)
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d201      	bcs.n	800cdda <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cdda:	68fb      	ldr	r3, [r7, #12]
	}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	20001248 	.word	0x20001248
 800cde8:	2000124c 	.word	0x2000124c
 800cdec:	20001724 	.word	0x20001724

0800cdf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800cdf0:	b580      	push	{r7, lr}
 800cdf2:	b086      	sub	sp, #24
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d05a      	beq.n	800cebc <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ce06:	4b30      	ldr	r3, [pc, #192]	; (800cec8 <xTaskPriorityDisinherit+0xd8>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	693a      	ldr	r2, [r7, #16]
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d00c      	beq.n	800ce2a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ce10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce14:	b672      	cpsid	i
 800ce16:	f383 8811 	msr	BASEPRI, r3
 800ce1a:	f3bf 8f6f 	isb	sy
 800ce1e:	f3bf 8f4f 	dsb	sy
 800ce22:	b662      	cpsie	i
 800ce24:	60fb      	str	r3, [r7, #12]
}
 800ce26:	bf00      	nop
 800ce28:	e7fe      	b.n	800ce28 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10c      	bne.n	800ce4c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	b672      	cpsid	i
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	b662      	cpsie	i
 800ce46:	60bb      	str	r3, [r7, #8]
}
 800ce48:	bf00      	nop
 800ce4a:	e7fe      	b.n	800ce4a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce50:	1e5a      	subs	r2, r3, #1
 800ce52:	693b      	ldr	r3, [r7, #16]
 800ce54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ce56:	693b      	ldr	r3, [r7, #16]
 800ce58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d02c      	beq.n	800cebc <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d128      	bne.n	800cebc <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	3304      	adds	r3, #4
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fd ffb0 	bl	800add4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ce74:	693b      	ldr	r3, [r7, #16]
 800ce76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce8c:	4b0f      	ldr	r3, [pc, #60]	; (800cecc <xTaskPriorityDisinherit+0xdc>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	429a      	cmp	r2, r3
 800ce92:	d903      	bls.n	800ce9c <xTaskPriorityDisinherit+0xac>
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce98:	4a0c      	ldr	r2, [pc, #48]	; (800cecc <xTaskPriorityDisinherit+0xdc>)
 800ce9a:	6013      	str	r3, [r2, #0]
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cea0:	4613      	mov	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4413      	add	r3, r2
 800cea6:	009b      	lsls	r3, r3, #2
 800cea8:	4a09      	ldr	r2, [pc, #36]	; (800ced0 <xTaskPriorityDisinherit+0xe0>)
 800ceaa:	441a      	add	r2, r3
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	3304      	adds	r3, #4
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	4610      	mov	r0, r2
 800ceb4:	f7fd ff31 	bl	800ad1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ceb8:	2301      	movs	r3, #1
 800ceba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800cebc:	697b      	ldr	r3, [r7, #20]
	}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3718      	adds	r7, #24
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20001248 	.word	0x20001248
 800cecc:	20001724 	.word	0x20001724
 800ced0:	2000124c 	.word	0x2000124c

0800ced4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b088      	sub	sp, #32
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
 800cedc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800cee2:	2301      	movs	r3, #1
 800cee4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d06e      	beq.n	800cfca <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ceec:	69bb      	ldr	r3, [r7, #24]
 800ceee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10c      	bne.n	800cf0e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800cef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef8:	b672      	cpsid	i
 800cefa:	f383 8811 	msr	BASEPRI, r3
 800cefe:	f3bf 8f6f 	isb	sy
 800cf02:	f3bf 8f4f 	dsb	sy
 800cf06:	b662      	cpsie	i
 800cf08:	60fb      	str	r3, [r7, #12]
}
 800cf0a:	bf00      	nop
 800cf0c:	e7fe      	b.n	800cf0c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cf0e:	69bb      	ldr	r3, [r7, #24]
 800cf10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf12:	683a      	ldr	r2, [r7, #0]
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d902      	bls.n	800cf1e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	61fb      	str	r3, [r7, #28]
 800cf1c:	e002      	b.n	800cf24 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800cf1e:	69bb      	ldr	r3, [r7, #24]
 800cf20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf22:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf28:	69fa      	ldr	r2, [r7, #28]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d04d      	beq.n	800cfca <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cf2e:	69bb      	ldr	r3, [r7, #24]
 800cf30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf32:	697a      	ldr	r2, [r7, #20]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d148      	bne.n	800cfca <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800cf38:	4b26      	ldr	r3, [pc, #152]	; (800cfd4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	69ba      	ldr	r2, [r7, #24]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d10c      	bne.n	800cf5c <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800cf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf46:	b672      	cpsid	i
 800cf48:	f383 8811 	msr	BASEPRI, r3
 800cf4c:	f3bf 8f6f 	isb	sy
 800cf50:	f3bf 8f4f 	dsb	sy
 800cf54:	b662      	cpsie	i
 800cf56:	60bb      	str	r3, [r7, #8]
}
 800cf58:	bf00      	nop
 800cf5a:	e7fe      	b.n	800cf5a <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800cf5c:	69bb      	ldr	r3, [r7, #24]
 800cf5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf60:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800cf62:	69bb      	ldr	r3, [r7, #24]
 800cf64:	69fa      	ldr	r2, [r7, #28]
 800cf66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cf68:	69bb      	ldr	r3, [r7, #24]
 800cf6a:	699b      	ldr	r3, [r3, #24]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	db04      	blt.n	800cf7a <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf70:	69fb      	ldr	r3, [r7, #28]
 800cf72:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cf7a:	69bb      	ldr	r3, [r7, #24]
 800cf7c:	6959      	ldr	r1, [r3, #20]
 800cf7e:	693a      	ldr	r2, [r7, #16]
 800cf80:	4613      	mov	r3, r2
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	4413      	add	r3, r2
 800cf86:	009b      	lsls	r3, r3, #2
 800cf88:	4a13      	ldr	r2, [pc, #76]	; (800cfd8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cf8a:	4413      	add	r3, r2
 800cf8c:	4299      	cmp	r1, r3
 800cf8e:	d11c      	bne.n	800cfca <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cf90:	69bb      	ldr	r3, [r7, #24]
 800cf92:	3304      	adds	r3, #4
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7fd ff1d 	bl	800add4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf9e:	4b0f      	ldr	r3, [pc, #60]	; (800cfdc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	429a      	cmp	r2, r3
 800cfa4:	d903      	bls.n	800cfae <vTaskPriorityDisinheritAfterTimeout+0xda>
 800cfa6:	69bb      	ldr	r3, [r7, #24]
 800cfa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfaa:	4a0c      	ldr	r2, [pc, #48]	; (800cfdc <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800cfac:	6013      	str	r3, [r2, #0]
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	4413      	add	r3, r2
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	4a07      	ldr	r2, [pc, #28]	; (800cfd8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800cfbc:	441a      	add	r2, r3
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	3304      	adds	r3, #4
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	f7fd fea8 	bl	800ad1a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cfca:	bf00      	nop
 800cfcc:	3720      	adds	r7, #32
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	20001248 	.word	0x20001248
 800cfd8:	2000124c 	.word	0x2000124c
 800cfdc:	20001724 	.word	0x20001724

0800cfe0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800cfe0:	b480      	push	{r7}
 800cfe2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800cfe4:	4b07      	ldr	r3, [pc, #28]	; (800d004 <pvTaskIncrementMutexHeldCount+0x24>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d004      	beq.n	800cff6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800cfec:	4b05      	ldr	r3, [pc, #20]	; (800d004 <pvTaskIncrementMutexHeldCount+0x24>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cff2:	3201      	adds	r2, #1
 800cff4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800cff6:	4b03      	ldr	r3, [pc, #12]	; (800d004 <pvTaskIncrementMutexHeldCount+0x24>)
 800cff8:	681b      	ldr	r3, [r3, #0]
	}
 800cffa:	4618      	mov	r0, r3
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr
 800d004:	20001248 	.word	0x20001248

0800d008 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d012:	4b21      	ldr	r3, [pc, #132]	; (800d098 <prvAddCurrentTaskToDelayedList+0x90>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d018:	4b20      	ldr	r3, [pc, #128]	; (800d09c <prvAddCurrentTaskToDelayedList+0x94>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3304      	adds	r3, #4
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fd fed8 	bl	800add4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d02a:	d10a      	bne.n	800d042 <prvAddCurrentTaskToDelayedList+0x3a>
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d007      	beq.n	800d042 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d032:	4b1a      	ldr	r3, [pc, #104]	; (800d09c <prvAddCurrentTaskToDelayedList+0x94>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	3304      	adds	r3, #4
 800d038:	4619      	mov	r1, r3
 800d03a:	4819      	ldr	r0, [pc, #100]	; (800d0a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800d03c:	f7fd fe6d 	bl	800ad1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d040:	e026      	b.n	800d090 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d042:	68fa      	ldr	r2, [r7, #12]
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4413      	add	r3, r2
 800d048:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d04a:	4b14      	ldr	r3, [pc, #80]	; (800d09c <prvAddCurrentTaskToDelayedList+0x94>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	68ba      	ldr	r2, [r7, #8]
 800d050:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	429a      	cmp	r2, r3
 800d058:	d209      	bcs.n	800d06e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d05a:	4b12      	ldr	r3, [pc, #72]	; (800d0a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800d05c:	681a      	ldr	r2, [r3, #0]
 800d05e:	4b0f      	ldr	r3, [pc, #60]	; (800d09c <prvAddCurrentTaskToDelayedList+0x94>)
 800d060:	681b      	ldr	r3, [r3, #0]
 800d062:	3304      	adds	r3, #4
 800d064:	4619      	mov	r1, r3
 800d066:	4610      	mov	r0, r2
 800d068:	f7fd fe7b 	bl	800ad62 <vListInsert>
}
 800d06c:	e010      	b.n	800d090 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d06e:	4b0e      	ldr	r3, [pc, #56]	; (800d0a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d070:	681a      	ldr	r2, [r3, #0]
 800d072:	4b0a      	ldr	r3, [pc, #40]	; (800d09c <prvAddCurrentTaskToDelayedList+0x94>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	3304      	adds	r3, #4
 800d078:	4619      	mov	r1, r3
 800d07a:	4610      	mov	r0, r2
 800d07c:	f7fd fe71 	bl	800ad62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d080:	4b0a      	ldr	r3, [pc, #40]	; (800d0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	429a      	cmp	r2, r3
 800d088:	d202      	bcs.n	800d090 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d08a:	4a08      	ldr	r2, [pc, #32]	; (800d0ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	6013      	str	r3, [r2, #0]
}
 800d090:	bf00      	nop
 800d092:	3710      	adds	r7, #16
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	20001720 	.word	0x20001720
 800d09c:	20001248 	.word	0x20001248
 800d0a0:	20001708 	.word	0x20001708
 800d0a4:	200016d8 	.word	0x200016d8
 800d0a8:	200016d4 	.word	0x200016d4
 800d0ac:	2000173c 	.word	0x2000173c

0800d0b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b08a      	sub	sp, #40	; 0x28
 800d0b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d0ba:	f000 fb15 	bl	800d6e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d0be:	4b1d      	ldr	r3, [pc, #116]	; (800d134 <xTimerCreateTimerTask+0x84>)
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d021      	beq.n	800d10a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d0c6:	2300      	movs	r3, #0
 800d0c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d0ce:	1d3a      	adds	r2, r7, #4
 800d0d0:	f107 0108 	add.w	r1, r7, #8
 800d0d4:	f107 030c 	add.w	r3, r7, #12
 800d0d8:	4618      	mov	r0, r3
 800d0da:	f7fd fdd7 	bl	800ac8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d0de:	6879      	ldr	r1, [r7, #4]
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	68fa      	ldr	r2, [r7, #12]
 800d0e4:	9202      	str	r2, [sp, #8]
 800d0e6:	9301      	str	r3, [sp, #4]
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	9300      	str	r3, [sp, #0]
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	460a      	mov	r2, r1
 800d0f0:	4911      	ldr	r1, [pc, #68]	; (800d138 <xTimerCreateTimerTask+0x88>)
 800d0f2:	4812      	ldr	r0, [pc, #72]	; (800d13c <xTimerCreateTimerTask+0x8c>)
 800d0f4:	f7fe ffa8 	bl	800c048 <xTaskCreateStatic>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	4a11      	ldr	r2, [pc, #68]	; (800d140 <xTimerCreateTimerTask+0x90>)
 800d0fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d0fe:	4b10      	ldr	r3, [pc, #64]	; (800d140 <xTimerCreateTimerTask+0x90>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d001      	beq.n	800d10a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d106:	2301      	movs	r3, #1
 800d108:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d10c      	bne.n	800d12a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800d110:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d114:	b672      	cpsid	i
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	b662      	cpsie	i
 800d124:	613b      	str	r3, [r7, #16]
}
 800d126:	bf00      	nop
 800d128:	e7fe      	b.n	800d128 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800d12a:	697b      	ldr	r3, [r7, #20]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3718      	adds	r7, #24
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}
 800d134:	20001778 	.word	0x20001778
 800d138:	0802d070 	.word	0x0802d070
 800d13c:	0800d281 	.word	0x0800d281
 800d140:	2000177c 	.word	0x2000177c

0800d144 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b08a      	sub	sp, #40	; 0x28
 800d148:	af00      	add	r7, sp, #0
 800d14a:	60f8      	str	r0, [r7, #12]
 800d14c:	60b9      	str	r1, [r7, #8]
 800d14e:	607a      	str	r2, [r7, #4]
 800d150:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d152:	2300      	movs	r3, #0
 800d154:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10c      	bne.n	800d176 <xTimerGenericCommand+0x32>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d160:	b672      	cpsid	i
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	b662      	cpsie	i
 800d170:	623b      	str	r3, [r7, #32]
}
 800d172:	bf00      	nop
 800d174:	e7fe      	b.n	800d174 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d176:	4b1a      	ldr	r3, [pc, #104]	; (800d1e0 <xTimerGenericCommand+0x9c>)
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d02a      	beq.n	800d1d4 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b05      	cmp	r3, #5
 800d18e:	dc18      	bgt.n	800d1c2 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d190:	f7ff fda8 	bl	800cce4 <xTaskGetSchedulerState>
 800d194:	4603      	mov	r3, r0
 800d196:	2b02      	cmp	r3, #2
 800d198:	d109      	bne.n	800d1ae <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d19a:	4b11      	ldr	r3, [pc, #68]	; (800d1e0 <xTimerGenericCommand+0x9c>)
 800d19c:	6818      	ldr	r0, [r3, #0]
 800d19e:	f107 0110 	add.w	r1, r7, #16
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1a6:	f7fe f8bd 	bl	800b324 <xQueueGenericSend>
 800d1aa:	6278      	str	r0, [r7, #36]	; 0x24
 800d1ac:	e012      	b.n	800d1d4 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d1ae:	4b0c      	ldr	r3, [pc, #48]	; (800d1e0 <xTimerGenericCommand+0x9c>)
 800d1b0:	6818      	ldr	r0, [r3, #0]
 800d1b2:	f107 0110 	add.w	r1, r7, #16
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	2200      	movs	r2, #0
 800d1ba:	f7fe f8b3 	bl	800b324 <xQueueGenericSend>
 800d1be:	6278      	str	r0, [r7, #36]	; 0x24
 800d1c0:	e008      	b.n	800d1d4 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d1c2:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <xTimerGenericCommand+0x9c>)
 800d1c4:	6818      	ldr	r0, [r3, #0]
 800d1c6:	f107 0110 	add.w	r1, r7, #16
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	683a      	ldr	r2, [r7, #0]
 800d1ce:	f7fe f9af 	bl	800b530 <xQueueGenericSendFromISR>
 800d1d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	3728      	adds	r7, #40	; 0x28
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	20001778 	.word	0x20001778

0800d1e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	b088      	sub	sp, #32
 800d1e8:	af02      	add	r7, sp, #8
 800d1ea:	6078      	str	r0, [r7, #4]
 800d1ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1ee:	4b23      	ldr	r3, [pc, #140]	; (800d27c <prvProcessExpiredTimer+0x98>)
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	68db      	ldr	r3, [r3, #12]
 800d1f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	4618      	mov	r0, r3
 800d1fe:	f7fd fde9 	bl	800add4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d208:	f003 0304 	and.w	r3, r3, #4
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d024      	beq.n	800d25a <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	699a      	ldr	r2, [r3, #24]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	18d1      	adds	r1, r2, r3
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	683a      	ldr	r2, [r7, #0]
 800d21c:	6978      	ldr	r0, [r7, #20]
 800d21e:	f000 f8d3 	bl	800d3c8 <prvInsertTimerInActiveList>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d021      	beq.n	800d26c <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d228:	2300      	movs	r3, #0
 800d22a:	9300      	str	r3, [sp, #0]
 800d22c:	2300      	movs	r3, #0
 800d22e:	687a      	ldr	r2, [r7, #4]
 800d230:	2100      	movs	r1, #0
 800d232:	6978      	ldr	r0, [r7, #20]
 800d234:	f7ff ff86 	bl	800d144 <xTimerGenericCommand>
 800d238:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d115      	bne.n	800d26c <prvProcessExpiredTimer+0x88>
	__asm volatile
 800d240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d244:	b672      	cpsid	i
 800d246:	f383 8811 	msr	BASEPRI, r3
 800d24a:	f3bf 8f6f 	isb	sy
 800d24e:	f3bf 8f4f 	dsb	sy
 800d252:	b662      	cpsie	i
 800d254:	60fb      	str	r3, [r7, #12]
}
 800d256:	bf00      	nop
 800d258:	e7fe      	b.n	800d258 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d25a:	697b      	ldr	r3, [r7, #20]
 800d25c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d260:	f023 0301 	bic.w	r3, r3, #1
 800d264:	b2da      	uxtb	r2, r3
 800d266:	697b      	ldr	r3, [r7, #20]
 800d268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	6a1b      	ldr	r3, [r3, #32]
 800d270:	6978      	ldr	r0, [r7, #20]
 800d272:	4798      	blx	r3
}
 800d274:	bf00      	nop
 800d276:	3718      	adds	r7, #24
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	20001770 	.word	0x20001770

0800d280 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d288:	f107 0308 	add.w	r3, r7, #8
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 f857 	bl	800d340 <prvGetNextExpireTime>
 800d292:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d294:	68bb      	ldr	r3, [r7, #8]
 800d296:	4619      	mov	r1, r3
 800d298:	68f8      	ldr	r0, [r7, #12]
 800d29a:	f000 f803 	bl	800d2a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d29e:	f000 f8d5 	bl	800d44c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d2a2:	e7f1      	b.n	800d288 <prvTimerTask+0x8>

0800d2a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d2ae:	f7ff f915 	bl	800c4dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d2b2:	f107 0308 	add.w	r3, r7, #8
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f000 f866 	bl	800d388 <prvSampleTimeNow>
 800d2bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d130      	bne.n	800d326 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d10a      	bne.n	800d2e0 <prvProcessTimerOrBlockTask+0x3c>
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d806      	bhi.n	800d2e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d2d2:	f7ff f911 	bl	800c4f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d2d6:	68f9      	ldr	r1, [r7, #12]
 800d2d8:	6878      	ldr	r0, [r7, #4]
 800d2da:	f7ff ff83 	bl	800d1e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d2de:	e024      	b.n	800d32a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d2e0:	683b      	ldr	r3, [r7, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d008      	beq.n	800d2f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d2e6:	4b13      	ldr	r3, [pc, #76]	; (800d334 <prvProcessTimerOrBlockTask+0x90>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d101      	bne.n	800d2f4 <prvProcessTimerOrBlockTask+0x50>
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	e000      	b.n	800d2f6 <prvProcessTimerOrBlockTask+0x52>
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d2f8:	4b0f      	ldr	r3, [pc, #60]	; (800d338 <prvProcessTimerOrBlockTask+0x94>)
 800d2fa:	6818      	ldr	r0, [r3, #0]
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	683a      	ldr	r2, [r7, #0]
 800d304:	4619      	mov	r1, r3
 800d306:	f7fe fe6b 	bl	800bfe0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d30a:	f7ff f8f5 	bl	800c4f8 <xTaskResumeAll>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	d10a      	bne.n	800d32a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d314:	4b09      	ldr	r3, [pc, #36]	; (800d33c <prvProcessTimerOrBlockTask+0x98>)
 800d316:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d31a:	601a      	str	r2, [r3, #0]
 800d31c:	f3bf 8f4f 	dsb	sy
 800d320:	f3bf 8f6f 	isb	sy
}
 800d324:	e001      	b.n	800d32a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d326:	f7ff f8e7 	bl	800c4f8 <xTaskResumeAll>
}
 800d32a:	bf00      	nop
 800d32c:	3710      	adds	r7, #16
 800d32e:	46bd      	mov	sp, r7
 800d330:	bd80      	pop	{r7, pc}
 800d332:	bf00      	nop
 800d334:	20001774 	.word	0x20001774
 800d338:	20001778 	.word	0x20001778
 800d33c:	e000ed04 	.word	0xe000ed04

0800d340 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d340:	b480      	push	{r7}
 800d342:	b085      	sub	sp, #20
 800d344:	af00      	add	r7, sp, #0
 800d346:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d348:	4b0e      	ldr	r3, [pc, #56]	; (800d384 <prvGetNextExpireTime+0x44>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <prvGetNextExpireTime+0x16>
 800d352:	2201      	movs	r2, #1
 800d354:	e000      	b.n	800d358 <prvGetNextExpireTime+0x18>
 800d356:	2200      	movs	r2, #0
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d105      	bne.n	800d370 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d364:	4b07      	ldr	r3, [pc, #28]	; (800d384 <prvGetNextExpireTime+0x44>)
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	68db      	ldr	r3, [r3, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	60fb      	str	r3, [r7, #12]
 800d36e:	e001      	b.n	800d374 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d370:	2300      	movs	r3, #0
 800d372:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d374:	68fb      	ldr	r3, [r7, #12]
}
 800d376:	4618      	mov	r0, r3
 800d378:	3714      	adds	r7, #20
 800d37a:	46bd      	mov	sp, r7
 800d37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d380:	4770      	bx	lr
 800d382:	bf00      	nop
 800d384:	20001770 	.word	0x20001770

0800d388 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d390:	f7ff f952 	bl	800c638 <xTaskGetTickCount>
 800d394:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d396:	4b0b      	ldr	r3, [pc, #44]	; (800d3c4 <prvSampleTimeNow+0x3c>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	68fa      	ldr	r2, [r7, #12]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d205      	bcs.n	800d3ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d3a0:	f000 f93c 	bl	800d61c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	601a      	str	r2, [r3, #0]
 800d3aa:	e002      	b.n	800d3b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d3b2:	4a04      	ldr	r2, [pc, #16]	; (800d3c4 <prvSampleTimeNow+0x3c>)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d3b8:	68fb      	ldr	r3, [r7, #12]
}
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	3710      	adds	r7, #16
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20001780 	.word	0x20001780

0800d3c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b086      	sub	sp, #24
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	60b9      	str	r1, [r7, #8]
 800d3d2:	607a      	str	r2, [r7, #4]
 800d3d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	68ba      	ldr	r2, [r7, #8]
 800d3de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	68fa      	ldr	r2, [r7, #12]
 800d3e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d3e6:	68ba      	ldr	r2, [r7, #8]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d812      	bhi.n	800d414 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	1ad2      	subs	r2, r2, r3
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	699b      	ldr	r3, [r3, #24]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d302      	bcc.n	800d402 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d3fc:	2301      	movs	r3, #1
 800d3fe:	617b      	str	r3, [r7, #20]
 800d400:	e01b      	b.n	800d43a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d402:	4b10      	ldr	r3, [pc, #64]	; (800d444 <prvInsertTimerInActiveList+0x7c>)
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	3304      	adds	r3, #4
 800d40a:	4619      	mov	r1, r3
 800d40c:	4610      	mov	r0, r2
 800d40e:	f7fd fca8 	bl	800ad62 <vListInsert>
 800d412:	e012      	b.n	800d43a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d414:	687a      	ldr	r2, [r7, #4]
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	429a      	cmp	r2, r3
 800d41a:	d206      	bcs.n	800d42a <prvInsertTimerInActiveList+0x62>
 800d41c:	68ba      	ldr	r2, [r7, #8]
 800d41e:	683b      	ldr	r3, [r7, #0]
 800d420:	429a      	cmp	r2, r3
 800d422:	d302      	bcc.n	800d42a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d424:	2301      	movs	r3, #1
 800d426:	617b      	str	r3, [r7, #20]
 800d428:	e007      	b.n	800d43a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d42a:	4b07      	ldr	r3, [pc, #28]	; (800d448 <prvInsertTimerInActiveList+0x80>)
 800d42c:	681a      	ldr	r2, [r3, #0]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	3304      	adds	r3, #4
 800d432:	4619      	mov	r1, r3
 800d434:	4610      	mov	r0, r2
 800d436:	f7fd fc94 	bl	800ad62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d43a:	697b      	ldr	r3, [r7, #20]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}
 800d444:	20001774 	.word	0x20001774
 800d448:	20001770 	.word	0x20001770

0800d44c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08e      	sub	sp, #56	; 0x38
 800d450:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d452:	e0d0      	b.n	800d5f6 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	da1a      	bge.n	800d490 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d45a:	1d3b      	adds	r3, r7, #4
 800d45c:	3304      	adds	r3, #4
 800d45e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d462:	2b00      	cmp	r3, #0
 800d464:	d10c      	bne.n	800d480 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800d466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d46a:	b672      	cpsid	i
 800d46c:	f383 8811 	msr	BASEPRI, r3
 800d470:	f3bf 8f6f 	isb	sy
 800d474:	f3bf 8f4f 	dsb	sy
 800d478:	b662      	cpsie	i
 800d47a:	61fb      	str	r3, [r7, #28]
}
 800d47c:	bf00      	nop
 800d47e:	e7fe      	b.n	800d47e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d486:	6850      	ldr	r0, [r2, #4]
 800d488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d48a:	6892      	ldr	r2, [r2, #8]
 800d48c:	4611      	mov	r1, r2
 800d48e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	f2c0 80ae 	blt.w	800d5f4 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d49e:	695b      	ldr	r3, [r3, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d004      	beq.n	800d4ae <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4a6:	3304      	adds	r3, #4
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f7fd fc93 	bl	800add4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d4ae:	463b      	mov	r3, r7
 800d4b0:	4618      	mov	r0, r3
 800d4b2:	f7ff ff69 	bl	800d388 <prvSampleTimeNow>
 800d4b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2b09      	cmp	r3, #9
 800d4bc:	f200 809b 	bhi.w	800d5f6 <prvProcessReceivedCommands+0x1aa>
 800d4c0:	a201      	add	r2, pc, #4	; (adr r2, 800d4c8 <prvProcessReceivedCommands+0x7c>)
 800d4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4c6:	bf00      	nop
 800d4c8:	0800d4f1 	.word	0x0800d4f1
 800d4cc:	0800d4f1 	.word	0x0800d4f1
 800d4d0:	0800d4f1 	.word	0x0800d4f1
 800d4d4:	0800d569 	.word	0x0800d569
 800d4d8:	0800d57d 	.word	0x0800d57d
 800d4dc:	0800d5cb 	.word	0x0800d5cb
 800d4e0:	0800d4f1 	.word	0x0800d4f1
 800d4e4:	0800d4f1 	.word	0x0800d4f1
 800d4e8:	0800d569 	.word	0x0800d569
 800d4ec:	0800d57d 	.word	0x0800d57d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d4f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d4f6:	f043 0301 	orr.w	r3, r3, #1
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d502:	68ba      	ldr	r2, [r7, #8]
 800d504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d506:	699b      	ldr	r3, [r3, #24]
 800d508:	18d1      	adds	r1, r2, r3
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d50e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d510:	f7ff ff5a 	bl	800d3c8 <prvInsertTimerInActiveList>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d06d      	beq.n	800d5f6 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51c:	6a1b      	ldr	r3, [r3, #32]
 800d51e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d520:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d528:	f003 0304 	and.w	r3, r3, #4
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d062      	beq.n	800d5f6 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d530:	68ba      	ldr	r2, [r7, #8]
 800d532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d534:	699b      	ldr	r3, [r3, #24]
 800d536:	441a      	add	r2, r3
 800d538:	2300      	movs	r3, #0
 800d53a:	9300      	str	r3, [sp, #0]
 800d53c:	2300      	movs	r3, #0
 800d53e:	2100      	movs	r1, #0
 800d540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d542:	f7ff fdff 	bl	800d144 <xTimerGenericCommand>
 800d546:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d548:	6a3b      	ldr	r3, [r7, #32]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d153      	bne.n	800d5f6 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 800d54e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d552:	b672      	cpsid	i
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	b662      	cpsie	i
 800d562:	61bb      	str	r3, [r7, #24]
}
 800d564:	bf00      	nop
 800d566:	e7fe      	b.n	800d566 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d56a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d56e:	f023 0301 	bic.w	r3, r3, #1
 800d572:	b2da      	uxtb	r2, r3
 800d574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d576:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d57a:	e03c      	b.n	800d5f6 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d582:	f043 0301 	orr.w	r3, r3, #1
 800d586:	b2da      	uxtb	r2, r3
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d58e:	68ba      	ldr	r2, [r7, #8]
 800d590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d592:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d596:	699b      	ldr	r3, [r3, #24]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d10c      	bne.n	800d5b6 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 800d59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5a0:	b672      	cpsid	i
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	b662      	cpsie	i
 800d5b0:	617b      	str	r3, [r7, #20]
}
 800d5b2:	bf00      	nop
 800d5b4:	e7fe      	b.n	800d5b4 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5b8:	699a      	ldr	r2, [r3, #24]
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5bc:	18d1      	adds	r1, r2, r3
 800d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d5c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5c4:	f7ff ff00 	bl	800d3c8 <prvInsertTimerInActiveList>
					break;
 800d5c8:	e015      	b.n	800d5f6 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d5ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5d0:	f003 0302 	and.w	r3, r3, #2
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d103      	bne.n	800d5e0 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800d5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5da:	f000 fbc5 	bl	800dd68 <vPortFree>
 800d5de:	e00a      	b.n	800d5f6 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5e6:	f023 0301 	bic.w	r3, r3, #1
 800d5ea:	b2da      	uxtb	r2, r3
 800d5ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d5f2:	e000      	b.n	800d5f6 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d5f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d5f6:	4b08      	ldr	r3, [pc, #32]	; (800d618 <prvProcessReceivedCommands+0x1cc>)
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	1d39      	adds	r1, r7, #4
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7fe f8cc 	bl	800b79c <xQueueReceive>
 800d604:	4603      	mov	r3, r0
 800d606:	2b00      	cmp	r3, #0
 800d608:	f47f af24 	bne.w	800d454 <prvProcessReceivedCommands+0x8>
	}
}
 800d60c:	bf00      	nop
 800d60e:	bf00      	nop
 800d610:	3730      	adds	r7, #48	; 0x30
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	20001778 	.word	0x20001778

0800d61c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b088      	sub	sp, #32
 800d620:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d622:	e04a      	b.n	800d6ba <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d624:	4b2e      	ldr	r3, [pc, #184]	; (800d6e0 <prvSwitchTimerLists+0xc4>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d62e:	4b2c      	ldr	r3, [pc, #176]	; (800d6e0 <prvSwitchTimerLists+0xc4>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	68db      	ldr	r3, [r3, #12]
 800d634:	68db      	ldr	r3, [r3, #12]
 800d636:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	3304      	adds	r3, #4
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7fd fbc9 	bl	800add4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	6a1b      	ldr	r3, [r3, #32]
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d650:	f003 0304 	and.w	r3, r3, #4
 800d654:	2b00      	cmp	r3, #0
 800d656:	d030      	beq.n	800d6ba <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	699b      	ldr	r3, [r3, #24]
 800d65c:	693a      	ldr	r2, [r7, #16]
 800d65e:	4413      	add	r3, r2
 800d660:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d662:	68ba      	ldr	r2, [r7, #8]
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	429a      	cmp	r2, r3
 800d668:	d90e      	bls.n	800d688 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	68ba      	ldr	r2, [r7, #8]
 800d66e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d676:	4b1a      	ldr	r3, [pc, #104]	; (800d6e0 <prvSwitchTimerLists+0xc4>)
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	3304      	adds	r3, #4
 800d67e:	4619      	mov	r1, r3
 800d680:	4610      	mov	r0, r2
 800d682:	f7fd fb6e 	bl	800ad62 <vListInsert>
 800d686:	e018      	b.n	800d6ba <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d688:	2300      	movs	r3, #0
 800d68a:	9300      	str	r3, [sp, #0]
 800d68c:	2300      	movs	r3, #0
 800d68e:	693a      	ldr	r2, [r7, #16]
 800d690:	2100      	movs	r1, #0
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f7ff fd56 	bl	800d144 <xTimerGenericCommand>
 800d698:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d10c      	bne.n	800d6ba <prvSwitchTimerLists+0x9e>
	__asm volatile
 800d6a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6a4:	b672      	cpsid	i
 800d6a6:	f383 8811 	msr	BASEPRI, r3
 800d6aa:	f3bf 8f6f 	isb	sy
 800d6ae:	f3bf 8f4f 	dsb	sy
 800d6b2:	b662      	cpsie	i
 800d6b4:	603b      	str	r3, [r7, #0]
}
 800d6b6:	bf00      	nop
 800d6b8:	e7fe      	b.n	800d6b8 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d6ba:	4b09      	ldr	r3, [pc, #36]	; (800d6e0 <prvSwitchTimerLists+0xc4>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d1af      	bne.n	800d624 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d6c4:	4b06      	ldr	r3, [pc, #24]	; (800d6e0 <prvSwitchTimerLists+0xc4>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d6ca:	4b06      	ldr	r3, [pc, #24]	; (800d6e4 <prvSwitchTimerLists+0xc8>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	4a04      	ldr	r2, [pc, #16]	; (800d6e0 <prvSwitchTimerLists+0xc4>)
 800d6d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d6d2:	4a04      	ldr	r2, [pc, #16]	; (800d6e4 <prvSwitchTimerLists+0xc8>)
 800d6d4:	697b      	ldr	r3, [r7, #20]
 800d6d6:	6013      	str	r3, [r2, #0]
}
 800d6d8:	bf00      	nop
 800d6da:	3718      	adds	r7, #24
 800d6dc:	46bd      	mov	sp, r7
 800d6de:	bd80      	pop	{r7, pc}
 800d6e0:	20001770 	.word	0x20001770
 800d6e4:	20001774 	.word	0x20001774

0800d6e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d6ee:	f000 f945 	bl	800d97c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d6f2:	4b15      	ldr	r3, [pc, #84]	; (800d748 <prvCheckForValidListAndQueue+0x60>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d120      	bne.n	800d73c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d6fa:	4814      	ldr	r0, [pc, #80]	; (800d74c <prvCheckForValidListAndQueue+0x64>)
 800d6fc:	f7fd fae0 	bl	800acc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d700:	4813      	ldr	r0, [pc, #76]	; (800d750 <prvCheckForValidListAndQueue+0x68>)
 800d702:	f7fd fadd 	bl	800acc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d706:	4b13      	ldr	r3, [pc, #76]	; (800d754 <prvCheckForValidListAndQueue+0x6c>)
 800d708:	4a10      	ldr	r2, [pc, #64]	; (800d74c <prvCheckForValidListAndQueue+0x64>)
 800d70a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d70c:	4b12      	ldr	r3, [pc, #72]	; (800d758 <prvCheckForValidListAndQueue+0x70>)
 800d70e:	4a10      	ldr	r2, [pc, #64]	; (800d750 <prvCheckForValidListAndQueue+0x68>)
 800d710:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d712:	2300      	movs	r3, #0
 800d714:	9300      	str	r3, [sp, #0]
 800d716:	4b11      	ldr	r3, [pc, #68]	; (800d75c <prvCheckForValidListAndQueue+0x74>)
 800d718:	4a11      	ldr	r2, [pc, #68]	; (800d760 <prvCheckForValidListAndQueue+0x78>)
 800d71a:	2110      	movs	r1, #16
 800d71c:	200a      	movs	r0, #10
 800d71e:	f7fd fbed 	bl	800aefc <xQueueGenericCreateStatic>
 800d722:	4603      	mov	r3, r0
 800d724:	4a08      	ldr	r2, [pc, #32]	; (800d748 <prvCheckForValidListAndQueue+0x60>)
 800d726:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d728:	4b07      	ldr	r3, [pc, #28]	; (800d748 <prvCheckForValidListAndQueue+0x60>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d005      	beq.n	800d73c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d730:	4b05      	ldr	r3, [pc, #20]	; (800d748 <prvCheckForValidListAndQueue+0x60>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	490b      	ldr	r1, [pc, #44]	; (800d764 <prvCheckForValidListAndQueue+0x7c>)
 800d736:	4618      	mov	r0, r3
 800d738:	f7fe fbfe 	bl	800bf38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d73c:	f000 f952 	bl	800d9e4 <vPortExitCritical>
}
 800d740:	bf00      	nop
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20001778 	.word	0x20001778
 800d74c:	20001748 	.word	0x20001748
 800d750:	2000175c 	.word	0x2000175c
 800d754:	20001770 	.word	0x20001770
 800d758:	20001774 	.word	0x20001774
 800d75c:	20001824 	.word	0x20001824
 800d760:	20001784 	.word	0x20001784
 800d764:	0802d078 	.word	0x0802d078

0800d768 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d768:	b480      	push	{r7}
 800d76a:	b085      	sub	sp, #20
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	3b04      	subs	r3, #4
 800d778:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d780:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	3b04      	subs	r3, #4
 800d786:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	f023 0201 	bic.w	r2, r3, #1
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	3b04      	subs	r3, #4
 800d796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d798:	4a0c      	ldr	r2, [pc, #48]	; (800d7cc <pxPortInitialiseStack+0x64>)
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	3b14      	subs	r3, #20
 800d7a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	3b04      	subs	r3, #4
 800d7ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	f06f 0202 	mvn.w	r2, #2
 800d7b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	3b20      	subs	r3, #32
 800d7bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d7be:	68fb      	ldr	r3, [r7, #12]
}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	3714      	adds	r7, #20
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	0800d7d1 	.word	0x0800d7d1

0800d7d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b085      	sub	sp, #20
 800d7d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d7da:	4b14      	ldr	r3, [pc, #80]	; (800d82c <prvTaskExitError+0x5c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7e2:	d00c      	beq.n	800d7fe <prvTaskExitError+0x2e>
	__asm volatile
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	b672      	cpsid	i
 800d7ea:	f383 8811 	msr	BASEPRI, r3
 800d7ee:	f3bf 8f6f 	isb	sy
 800d7f2:	f3bf 8f4f 	dsb	sy
 800d7f6:	b662      	cpsie	i
 800d7f8:	60fb      	str	r3, [r7, #12]
}
 800d7fa:	bf00      	nop
 800d7fc:	e7fe      	b.n	800d7fc <prvTaskExitError+0x2c>
	__asm volatile
 800d7fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d802:	b672      	cpsid	i
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	b662      	cpsie	i
 800d812:	60bb      	str	r3, [r7, #8]
}
 800d814:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d816:	bf00      	nop
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d0fc      	beq.n	800d818 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d81e:	bf00      	nop
 800d820:	bf00      	nop
 800d822:	3714      	adds	r7, #20
 800d824:	46bd      	mov	sp, r7
 800d826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82a:	4770      	bx	lr
 800d82c:	20000020 	.word	0x20000020

0800d830 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d830:	4b07      	ldr	r3, [pc, #28]	; (800d850 <pxCurrentTCBConst2>)
 800d832:	6819      	ldr	r1, [r3, #0]
 800d834:	6808      	ldr	r0, [r1, #0]
 800d836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d83a:	f380 8809 	msr	PSP, r0
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	f04f 0000 	mov.w	r0, #0
 800d846:	f380 8811 	msr	BASEPRI, r0
 800d84a:	4770      	bx	lr
 800d84c:	f3af 8000 	nop.w

0800d850 <pxCurrentTCBConst2>:
 800d850:	20001248 	.word	0x20001248
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d854:	bf00      	nop
 800d856:	bf00      	nop

0800d858 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d858:	4808      	ldr	r0, [pc, #32]	; (800d87c <prvPortStartFirstTask+0x24>)
 800d85a:	6800      	ldr	r0, [r0, #0]
 800d85c:	6800      	ldr	r0, [r0, #0]
 800d85e:	f380 8808 	msr	MSP, r0
 800d862:	f04f 0000 	mov.w	r0, #0
 800d866:	f380 8814 	msr	CONTROL, r0
 800d86a:	b662      	cpsie	i
 800d86c:	b661      	cpsie	f
 800d86e:	f3bf 8f4f 	dsb	sy
 800d872:	f3bf 8f6f 	isb	sy
 800d876:	df00      	svc	0
 800d878:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d87a:	bf00      	nop
 800d87c:	e000ed08 	.word	0xe000ed08

0800d880 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b084      	sub	sp, #16
 800d884:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d886:	4b37      	ldr	r3, [pc, #220]	; (800d964 <xPortStartScheduler+0xe4>)
 800d888:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	781b      	ldrb	r3, [r3, #0]
 800d88e:	b2db      	uxtb	r3, r3
 800d890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	22ff      	movs	r2, #255	; 0xff
 800d896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d8a0:	78fb      	ldrb	r3, [r7, #3]
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d8a8:	b2da      	uxtb	r2, r3
 800d8aa:	4b2f      	ldr	r3, [pc, #188]	; (800d968 <xPortStartScheduler+0xe8>)
 800d8ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d8ae:	4b2f      	ldr	r3, [pc, #188]	; (800d96c <xPortStartScheduler+0xec>)
 800d8b0:	2207      	movs	r2, #7
 800d8b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8b4:	e009      	b.n	800d8ca <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d8b6:	4b2d      	ldr	r3, [pc, #180]	; (800d96c <xPortStartScheduler+0xec>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	3b01      	subs	r3, #1
 800d8bc:	4a2b      	ldr	r2, [pc, #172]	; (800d96c <xPortStartScheduler+0xec>)
 800d8be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d8c0:	78fb      	ldrb	r3, [r7, #3]
 800d8c2:	b2db      	uxtb	r3, r3
 800d8c4:	005b      	lsls	r3, r3, #1
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d8ca:	78fb      	ldrb	r3, [r7, #3]
 800d8cc:	b2db      	uxtb	r3, r3
 800d8ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8d2:	2b80      	cmp	r3, #128	; 0x80
 800d8d4:	d0ef      	beq.n	800d8b6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d8d6:	4b25      	ldr	r3, [pc, #148]	; (800d96c <xPortStartScheduler+0xec>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f1c3 0307 	rsb	r3, r3, #7
 800d8de:	2b04      	cmp	r3, #4
 800d8e0:	d00c      	beq.n	800d8fc <xPortStartScheduler+0x7c>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	b672      	cpsid	i
 800d8e8:	f383 8811 	msr	BASEPRI, r3
 800d8ec:	f3bf 8f6f 	isb	sy
 800d8f0:	f3bf 8f4f 	dsb	sy
 800d8f4:	b662      	cpsie	i
 800d8f6:	60bb      	str	r3, [r7, #8]
}
 800d8f8:	bf00      	nop
 800d8fa:	e7fe      	b.n	800d8fa <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d8fc:	4b1b      	ldr	r3, [pc, #108]	; (800d96c <xPortStartScheduler+0xec>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	021b      	lsls	r3, r3, #8
 800d902:	4a1a      	ldr	r2, [pc, #104]	; (800d96c <xPortStartScheduler+0xec>)
 800d904:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d906:	4b19      	ldr	r3, [pc, #100]	; (800d96c <xPortStartScheduler+0xec>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d90e:	4a17      	ldr	r2, [pc, #92]	; (800d96c <xPortStartScheduler+0xec>)
 800d910:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	b2da      	uxtb	r2, r3
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d91a:	4b15      	ldr	r3, [pc, #84]	; (800d970 <xPortStartScheduler+0xf0>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	4a14      	ldr	r2, [pc, #80]	; (800d970 <xPortStartScheduler+0xf0>)
 800d920:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d924:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d926:	4b12      	ldr	r3, [pc, #72]	; (800d970 <xPortStartScheduler+0xf0>)
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	4a11      	ldr	r2, [pc, #68]	; (800d970 <xPortStartScheduler+0xf0>)
 800d92c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d930:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d932:	f000 f8dd 	bl	800daf0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d936:	4b0f      	ldr	r3, [pc, #60]	; (800d974 <xPortStartScheduler+0xf4>)
 800d938:	2200      	movs	r2, #0
 800d93a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d93c:	f000 f8fc 	bl	800db38 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d940:	4b0d      	ldr	r3, [pc, #52]	; (800d978 <xPortStartScheduler+0xf8>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	4a0c      	ldr	r2, [pc, #48]	; (800d978 <xPortStartScheduler+0xf8>)
 800d946:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d94a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d94c:	f7ff ff84 	bl	800d858 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d950:	f7fe ff3e 	bl	800c7d0 <vTaskSwitchContext>
	prvTaskExitError();
 800d954:	f7ff ff3c 	bl	800d7d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d958:	2300      	movs	r3, #0
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3710      	adds	r7, #16
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	e000e400 	.word	0xe000e400
 800d968:	20001874 	.word	0x20001874
 800d96c:	20001878 	.word	0x20001878
 800d970:	e000ed20 	.word	0xe000ed20
 800d974:	20000020 	.word	0x20000020
 800d978:	e000ef34 	.word	0xe000ef34

0800d97c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
	__asm volatile
 800d982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d986:	b672      	cpsid	i
 800d988:	f383 8811 	msr	BASEPRI, r3
 800d98c:	f3bf 8f6f 	isb	sy
 800d990:	f3bf 8f4f 	dsb	sy
 800d994:	b662      	cpsie	i
 800d996:	607b      	str	r3, [r7, #4]
}
 800d998:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d99a:	4b10      	ldr	r3, [pc, #64]	; (800d9dc <vPortEnterCritical+0x60>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	3301      	adds	r3, #1
 800d9a0:	4a0e      	ldr	r2, [pc, #56]	; (800d9dc <vPortEnterCritical+0x60>)
 800d9a2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d9a4:	4b0d      	ldr	r3, [pc, #52]	; (800d9dc <vPortEnterCritical+0x60>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d111      	bne.n	800d9d0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d9ac:	4b0c      	ldr	r3, [pc, #48]	; (800d9e0 <vPortEnterCritical+0x64>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	b2db      	uxtb	r3, r3
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d00c      	beq.n	800d9d0 <vPortEnterCritical+0x54>
	__asm volatile
 800d9b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ba:	b672      	cpsid	i
 800d9bc:	f383 8811 	msr	BASEPRI, r3
 800d9c0:	f3bf 8f6f 	isb	sy
 800d9c4:	f3bf 8f4f 	dsb	sy
 800d9c8:	b662      	cpsie	i
 800d9ca:	603b      	str	r3, [r7, #0]
}
 800d9cc:	bf00      	nop
 800d9ce:	e7fe      	b.n	800d9ce <vPortEnterCritical+0x52>
	}
}
 800d9d0:	bf00      	nop
 800d9d2:	370c      	adds	r7, #12
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9da:	4770      	bx	lr
 800d9dc:	20000020 	.word	0x20000020
 800d9e0:	e000ed04 	.word	0xe000ed04

0800d9e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d9ea:	4b13      	ldr	r3, [pc, #76]	; (800da38 <vPortExitCritical+0x54>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d10c      	bne.n	800da0c <vPortExitCritical+0x28>
	__asm volatile
 800d9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f6:	b672      	cpsid	i
 800d9f8:	f383 8811 	msr	BASEPRI, r3
 800d9fc:	f3bf 8f6f 	isb	sy
 800da00:	f3bf 8f4f 	dsb	sy
 800da04:	b662      	cpsie	i
 800da06:	607b      	str	r3, [r7, #4]
}
 800da08:	bf00      	nop
 800da0a:	e7fe      	b.n	800da0a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800da0c:	4b0a      	ldr	r3, [pc, #40]	; (800da38 <vPortExitCritical+0x54>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	3b01      	subs	r3, #1
 800da12:	4a09      	ldr	r2, [pc, #36]	; (800da38 <vPortExitCritical+0x54>)
 800da14:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800da16:	4b08      	ldr	r3, [pc, #32]	; (800da38 <vPortExitCritical+0x54>)
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d105      	bne.n	800da2a <vPortExitCritical+0x46>
 800da1e:	2300      	movs	r3, #0
 800da20:	603b      	str	r3, [r7, #0]
	__asm volatile
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	f383 8811 	msr	BASEPRI, r3
}
 800da28:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800da2a:	bf00      	nop
 800da2c:	370c      	adds	r7, #12
 800da2e:	46bd      	mov	sp, r7
 800da30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da34:	4770      	bx	lr
 800da36:	bf00      	nop
 800da38:	20000020 	.word	0x20000020
 800da3c:	00000000 	.word	0x00000000

0800da40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800da40:	f3ef 8009 	mrs	r0, PSP
 800da44:	f3bf 8f6f 	isb	sy
 800da48:	4b15      	ldr	r3, [pc, #84]	; (800daa0 <pxCurrentTCBConst>)
 800da4a:	681a      	ldr	r2, [r3, #0]
 800da4c:	f01e 0f10 	tst.w	lr, #16
 800da50:	bf08      	it	eq
 800da52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800da56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5a:	6010      	str	r0, [r2, #0]
 800da5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800da60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800da64:	b672      	cpsid	i
 800da66:	f380 8811 	msr	BASEPRI, r0
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	f3bf 8f6f 	isb	sy
 800da72:	b662      	cpsie	i
 800da74:	f7fe feac 	bl	800c7d0 <vTaskSwitchContext>
 800da78:	f04f 0000 	mov.w	r0, #0
 800da7c:	f380 8811 	msr	BASEPRI, r0
 800da80:	bc09      	pop	{r0, r3}
 800da82:	6819      	ldr	r1, [r3, #0]
 800da84:	6808      	ldr	r0, [r1, #0]
 800da86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da8a:	f01e 0f10 	tst.w	lr, #16
 800da8e:	bf08      	it	eq
 800da90:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800da94:	f380 8809 	msr	PSP, r0
 800da98:	f3bf 8f6f 	isb	sy
 800da9c:	4770      	bx	lr
 800da9e:	bf00      	nop

0800daa0 <pxCurrentTCBConst>:
 800daa0:	20001248 	.word	0x20001248
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800daa4:	bf00      	nop
 800daa6:	bf00      	nop

0800daa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
	__asm volatile
 800daae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab2:	b672      	cpsid	i
 800dab4:	f383 8811 	msr	BASEPRI, r3
 800dab8:	f3bf 8f6f 	isb	sy
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	b662      	cpsie	i
 800dac2:	607b      	str	r3, [r7, #4]
}
 800dac4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dac6:	f7fe fdc7 	bl	800c658 <xTaskIncrementTick>
 800daca:	4603      	mov	r3, r0
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d003      	beq.n	800dad8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dad0:	4b06      	ldr	r3, [pc, #24]	; (800daec <SysTick_Handler+0x44>)
 800dad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	2300      	movs	r3, #0
 800dada:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	f383 8811 	msr	BASEPRI, r3
}
 800dae2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800dae4:	bf00      	nop
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	e000ed04 	.word	0xe000ed04

0800daf0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800daf0:	b480      	push	{r7}
 800daf2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800daf4:	4b0b      	ldr	r3, [pc, #44]	; (800db24 <vPortSetupTimerInterrupt+0x34>)
 800daf6:	2200      	movs	r2, #0
 800daf8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dafa:	4b0b      	ldr	r3, [pc, #44]	; (800db28 <vPortSetupTimerInterrupt+0x38>)
 800dafc:	2200      	movs	r2, #0
 800dafe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800db00:	4b0a      	ldr	r3, [pc, #40]	; (800db2c <vPortSetupTimerInterrupt+0x3c>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a0a      	ldr	r2, [pc, #40]	; (800db30 <vPortSetupTimerInterrupt+0x40>)
 800db06:	fba2 2303 	umull	r2, r3, r2, r3
 800db0a:	099b      	lsrs	r3, r3, #6
 800db0c:	4a09      	ldr	r2, [pc, #36]	; (800db34 <vPortSetupTimerInterrupt+0x44>)
 800db0e:	3b01      	subs	r3, #1
 800db10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800db12:	4b04      	ldr	r3, [pc, #16]	; (800db24 <vPortSetupTimerInterrupt+0x34>)
 800db14:	2207      	movs	r2, #7
 800db16:	601a      	str	r2, [r3, #0]
}
 800db18:	bf00      	nop
 800db1a:	46bd      	mov	sp, r7
 800db1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop
 800db24:	e000e010 	.word	0xe000e010
 800db28:	e000e018 	.word	0xe000e018
 800db2c:	20000014 	.word	0x20000014
 800db30:	10624dd3 	.word	0x10624dd3
 800db34:	e000e014 	.word	0xe000e014

0800db38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800db38:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800db48 <vPortEnableVFP+0x10>
 800db3c:	6801      	ldr	r1, [r0, #0]
 800db3e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800db42:	6001      	str	r1, [r0, #0]
 800db44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800db46:	bf00      	nop
 800db48:	e000ed88 	.word	0xe000ed88

0800db4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800db4c:	b480      	push	{r7}
 800db4e:	b085      	sub	sp, #20
 800db50:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800db52:	f3ef 8305 	mrs	r3, IPSR
 800db56:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2b0f      	cmp	r3, #15
 800db5c:	d916      	bls.n	800db8c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800db5e:	4a19      	ldr	r2, [pc, #100]	; (800dbc4 <vPortValidateInterruptPriority+0x78>)
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	4413      	add	r3, r2
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800db68:	4b17      	ldr	r3, [pc, #92]	; (800dbc8 <vPortValidateInterruptPriority+0x7c>)
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	7afa      	ldrb	r2, [r7, #11]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d20c      	bcs.n	800db8c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	b672      	cpsid	i
 800db78:	f383 8811 	msr	BASEPRI, r3
 800db7c:	f3bf 8f6f 	isb	sy
 800db80:	f3bf 8f4f 	dsb	sy
 800db84:	b662      	cpsie	i
 800db86:	607b      	str	r3, [r7, #4]
}
 800db88:	bf00      	nop
 800db8a:	e7fe      	b.n	800db8a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800db8c:	4b0f      	ldr	r3, [pc, #60]	; (800dbcc <vPortValidateInterruptPriority+0x80>)
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800db94:	4b0e      	ldr	r3, [pc, #56]	; (800dbd0 <vPortValidateInterruptPriority+0x84>)
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d90c      	bls.n	800dbb6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800db9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba0:	b672      	cpsid	i
 800dba2:	f383 8811 	msr	BASEPRI, r3
 800dba6:	f3bf 8f6f 	isb	sy
 800dbaa:	f3bf 8f4f 	dsb	sy
 800dbae:	b662      	cpsie	i
 800dbb0:	603b      	str	r3, [r7, #0]
}
 800dbb2:	bf00      	nop
 800dbb4:	e7fe      	b.n	800dbb4 <vPortValidateInterruptPriority+0x68>
	}
 800dbb6:	bf00      	nop
 800dbb8:	3714      	adds	r7, #20
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr
 800dbc2:	bf00      	nop
 800dbc4:	e000e3f0 	.word	0xe000e3f0
 800dbc8:	20001874 	.word	0x20001874
 800dbcc:	e000ed0c 	.word	0xe000ed0c
 800dbd0:	20001878 	.word	0x20001878

0800dbd4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dbd4:	b580      	push	{r7, lr}
 800dbd6:	b08a      	sub	sp, #40	; 0x28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dbdc:	2300      	movs	r3, #0
 800dbde:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dbe0:	f7fe fc7c 	bl	800c4dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dbe4:	4b5b      	ldr	r3, [pc, #364]	; (800dd54 <pvPortMalloc+0x180>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d101      	bne.n	800dbf0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dbec:	f000 f91a 	bl	800de24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dbf0:	4b59      	ldr	r3, [pc, #356]	; (800dd58 <pvPortMalloc+0x184>)
 800dbf2:	681a      	ldr	r2, [r3, #0]
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f040 8092 	bne.w	800dd22 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d01f      	beq.n	800dc44 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800dc04:	2208      	movs	r2, #8
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	4413      	add	r3, r2
 800dc0a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f003 0307 	and.w	r3, r3, #7
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d016      	beq.n	800dc44 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f023 0307 	bic.w	r3, r3, #7
 800dc1c:	3308      	adds	r3, #8
 800dc1e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f003 0307 	and.w	r3, r3, #7
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00c      	beq.n	800dc44 <pvPortMalloc+0x70>
	__asm volatile
 800dc2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc2e:	b672      	cpsid	i
 800dc30:	f383 8811 	msr	BASEPRI, r3
 800dc34:	f3bf 8f6f 	isb	sy
 800dc38:	f3bf 8f4f 	dsb	sy
 800dc3c:	b662      	cpsie	i
 800dc3e:	617b      	str	r3, [r7, #20]
}
 800dc40:	bf00      	nop
 800dc42:	e7fe      	b.n	800dc42 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d06b      	beq.n	800dd22 <pvPortMalloc+0x14e>
 800dc4a:	4b44      	ldr	r3, [pc, #272]	; (800dd5c <pvPortMalloc+0x188>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	687a      	ldr	r2, [r7, #4]
 800dc50:	429a      	cmp	r2, r3
 800dc52:	d866      	bhi.n	800dd22 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dc54:	4b42      	ldr	r3, [pc, #264]	; (800dd60 <pvPortMalloc+0x18c>)
 800dc56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dc58:	4b41      	ldr	r3, [pc, #260]	; (800dd60 <pvPortMalloc+0x18c>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc5e:	e004      	b.n	800dc6a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800dc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dc64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dc6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc6c:	685b      	ldr	r3, [r3, #4]
 800dc6e:	687a      	ldr	r2, [r7, #4]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d903      	bls.n	800dc7c <pvPortMalloc+0xa8>
 800dc74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1f1      	bne.n	800dc60 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dc7c:	4b35      	ldr	r3, [pc, #212]	; (800dd54 <pvPortMalloc+0x180>)
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d04d      	beq.n	800dd22 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dc86:	6a3b      	ldr	r3, [r7, #32]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	2208      	movs	r2, #8
 800dc8c:	4413      	add	r3, r2
 800dc8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dc90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc92:	681a      	ldr	r2, [r3, #0]
 800dc94:	6a3b      	ldr	r3, [r7, #32]
 800dc96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dc98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc9a:	685a      	ldr	r2, [r3, #4]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	1ad2      	subs	r2, r2, r3
 800dca0:	2308      	movs	r3, #8
 800dca2:	005b      	lsls	r3, r3, #1
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d921      	bls.n	800dcec <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dca8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4413      	add	r3, r2
 800dcae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dcb0:	69bb      	ldr	r3, [r7, #24]
 800dcb2:	f003 0307 	and.w	r3, r3, #7
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d00c      	beq.n	800dcd4 <pvPortMalloc+0x100>
	__asm volatile
 800dcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbe:	b672      	cpsid	i
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	b662      	cpsie	i
 800dcce:	613b      	str	r3, [r7, #16]
}
 800dcd0:	bf00      	nop
 800dcd2:	e7fe      	b.n	800dcd2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcd6:	685a      	ldr	r2, [r3, #4]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	1ad2      	subs	r2, r2, r3
 800dcdc:	69bb      	ldr	r3, [r7, #24]
 800dcde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dce2:	687a      	ldr	r2, [r7, #4]
 800dce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dce6:	69b8      	ldr	r0, [r7, #24]
 800dce8:	f000 f8fe 	bl	800dee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dcec:	4b1b      	ldr	r3, [pc, #108]	; (800dd5c <pvPortMalloc+0x188>)
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcf2:	685b      	ldr	r3, [r3, #4]
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	4a19      	ldr	r2, [pc, #100]	; (800dd5c <pvPortMalloc+0x188>)
 800dcf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800dcfa:	4b18      	ldr	r3, [pc, #96]	; (800dd5c <pvPortMalloc+0x188>)
 800dcfc:	681a      	ldr	r2, [r3, #0]
 800dcfe:	4b19      	ldr	r3, [pc, #100]	; (800dd64 <pvPortMalloc+0x190>)
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	d203      	bcs.n	800dd0e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dd06:	4b15      	ldr	r3, [pc, #84]	; (800dd5c <pvPortMalloc+0x188>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4a16      	ldr	r2, [pc, #88]	; (800dd64 <pvPortMalloc+0x190>)
 800dd0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd10:	685a      	ldr	r2, [r3, #4]
 800dd12:	4b11      	ldr	r3, [pc, #68]	; (800dd58 <pvPortMalloc+0x184>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	431a      	orrs	r2, r3
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd1e:	2200      	movs	r2, #0
 800dd20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dd22:	f7fe fbe9 	bl	800c4f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	f003 0307 	and.w	r3, r3, #7
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00c      	beq.n	800dd4a <pvPortMalloc+0x176>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd34:	b672      	cpsid	i
 800dd36:	f383 8811 	msr	BASEPRI, r3
 800dd3a:	f3bf 8f6f 	isb	sy
 800dd3e:	f3bf 8f4f 	dsb	sy
 800dd42:	b662      	cpsie	i
 800dd44:	60fb      	str	r3, [r7, #12]
}
 800dd46:	bf00      	nop
 800dd48:	e7fe      	b.n	800dd48 <pvPortMalloc+0x174>
	return pvReturn;
 800dd4a:	69fb      	ldr	r3, [r7, #28]
}
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	3728      	adds	r7, #40	; 0x28
 800dd50:	46bd      	mov	sp, r7
 800dd52:	bd80      	pop	{r7, pc}
 800dd54:	20033884 	.word	0x20033884
 800dd58:	20033890 	.word	0x20033890
 800dd5c:	20033888 	.word	0x20033888
 800dd60:	2003387c 	.word	0x2003387c
 800dd64:	2003388c 	.word	0x2003388c

0800dd68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b086      	sub	sp, #24
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d04c      	beq.n	800de14 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dd7a:	2308      	movs	r3, #8
 800dd7c:	425b      	negs	r3, r3
 800dd7e:	697a      	ldr	r2, [r7, #20]
 800dd80:	4413      	add	r3, r2
 800dd82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	685a      	ldr	r2, [r3, #4]
 800dd8c:	4b23      	ldr	r3, [pc, #140]	; (800de1c <vPortFree+0xb4>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4013      	ands	r3, r2
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d10c      	bne.n	800ddb0 <vPortFree+0x48>
	__asm volatile
 800dd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd9a:	b672      	cpsid	i
 800dd9c:	f383 8811 	msr	BASEPRI, r3
 800dda0:	f3bf 8f6f 	isb	sy
 800dda4:	f3bf 8f4f 	dsb	sy
 800dda8:	b662      	cpsie	i
 800ddaa:	60fb      	str	r3, [r7, #12]
}
 800ddac:	bf00      	nop
 800ddae:	e7fe      	b.n	800ddae <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d00c      	beq.n	800ddd2 <vPortFree+0x6a>
	__asm volatile
 800ddb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddbc:	b672      	cpsid	i
 800ddbe:	f383 8811 	msr	BASEPRI, r3
 800ddc2:	f3bf 8f6f 	isb	sy
 800ddc6:	f3bf 8f4f 	dsb	sy
 800ddca:	b662      	cpsie	i
 800ddcc:	60bb      	str	r3, [r7, #8]
}
 800ddce:	bf00      	nop
 800ddd0:	e7fe      	b.n	800ddd0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ddd2:	693b      	ldr	r3, [r7, #16]
 800ddd4:	685a      	ldr	r2, [r3, #4]
 800ddd6:	4b11      	ldr	r3, [pc, #68]	; (800de1c <vPortFree+0xb4>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4013      	ands	r3, r2
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d019      	beq.n	800de14 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dde0:	693b      	ldr	r3, [r7, #16]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d115      	bne.n	800de14 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dde8:	693b      	ldr	r3, [r7, #16]
 800ddea:	685a      	ldr	r2, [r3, #4]
 800ddec:	4b0b      	ldr	r3, [pc, #44]	; (800de1c <vPortFree+0xb4>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	43db      	mvns	r3, r3
 800ddf2:	401a      	ands	r2, r3
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ddf8:	f7fe fb70 	bl	800c4dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	685a      	ldr	r2, [r3, #4]
 800de00:	4b07      	ldr	r3, [pc, #28]	; (800de20 <vPortFree+0xb8>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	4413      	add	r3, r2
 800de06:	4a06      	ldr	r2, [pc, #24]	; (800de20 <vPortFree+0xb8>)
 800de08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de0a:	6938      	ldr	r0, [r7, #16]
 800de0c:	f000 f86c 	bl	800dee8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800de10:	f7fe fb72 	bl	800c4f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800de14:	bf00      	nop
 800de16:	3718      	adds	r7, #24
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	20033890 	.word	0x20033890
 800de20:	20033888 	.word	0x20033888

0800de24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800de2a:	f44f 3348 	mov.w	r3, #204800	; 0x32000
 800de2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800de30:	4b27      	ldr	r3, [pc, #156]	; (800ded0 <prvHeapInit+0xac>)
 800de32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	f003 0307 	and.w	r3, r3, #7
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d00c      	beq.n	800de58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	3307      	adds	r3, #7
 800de42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f023 0307 	bic.w	r3, r3, #7
 800de4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800de4c:	68ba      	ldr	r2, [r7, #8]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	1ad3      	subs	r3, r2, r3
 800de52:	4a1f      	ldr	r2, [pc, #124]	; (800ded0 <prvHeapInit+0xac>)
 800de54:	4413      	add	r3, r2
 800de56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800de5c:	4a1d      	ldr	r2, [pc, #116]	; (800ded4 <prvHeapInit+0xb0>)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800de62:	4b1c      	ldr	r3, [pc, #112]	; (800ded4 <prvHeapInit+0xb0>)
 800de64:	2200      	movs	r2, #0
 800de66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68ba      	ldr	r2, [r7, #8]
 800de6c:	4413      	add	r3, r2
 800de6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800de70:	2208      	movs	r2, #8
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	1a9b      	subs	r3, r3, r2
 800de76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f023 0307 	bic.w	r3, r3, #7
 800de7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	4a15      	ldr	r2, [pc, #84]	; (800ded8 <prvHeapInit+0xb4>)
 800de84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800de86:	4b14      	ldr	r3, [pc, #80]	; (800ded8 <prvHeapInit+0xb4>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	2200      	movs	r2, #0
 800de8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800de8e:	4b12      	ldr	r3, [pc, #72]	; (800ded8 <prvHeapInit+0xb4>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2200      	movs	r2, #0
 800de94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800de9a:	683b      	ldr	r3, [r7, #0]
 800de9c:	68fa      	ldr	r2, [r7, #12]
 800de9e:	1ad2      	subs	r2, r2, r3
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dea4:	4b0c      	ldr	r3, [pc, #48]	; (800ded8 <prvHeapInit+0xb4>)
 800dea6:	681a      	ldr	r2, [r3, #0]
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800deac:	683b      	ldr	r3, [r7, #0]
 800deae:	685b      	ldr	r3, [r3, #4]
 800deb0:	4a0a      	ldr	r2, [pc, #40]	; (800dedc <prvHeapInit+0xb8>)
 800deb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	685b      	ldr	r3, [r3, #4]
 800deb8:	4a09      	ldr	r2, [pc, #36]	; (800dee0 <prvHeapInit+0xbc>)
 800deba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800debc:	4b09      	ldr	r3, [pc, #36]	; (800dee4 <prvHeapInit+0xc0>)
 800debe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dec2:	601a      	str	r2, [r3, #0]
}
 800dec4:	bf00      	nop
 800dec6:	3714      	adds	r7, #20
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr
 800ded0:	2000187c 	.word	0x2000187c
 800ded4:	2003387c 	.word	0x2003387c
 800ded8:	20033884 	.word	0x20033884
 800dedc:	2003388c 	.word	0x2003388c
 800dee0:	20033888 	.word	0x20033888
 800dee4:	20033890 	.word	0x20033890

0800dee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dee8:	b480      	push	{r7}
 800deea:	b085      	sub	sp, #20
 800deec:	af00      	add	r7, sp, #0
 800deee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800def0:	4b28      	ldr	r3, [pc, #160]	; (800df94 <prvInsertBlockIntoFreeList+0xac>)
 800def2:	60fb      	str	r3, [r7, #12]
 800def4:	e002      	b.n	800defc <prvInsertBlockIntoFreeList+0x14>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	60fb      	str	r3, [r7, #12]
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	429a      	cmp	r2, r3
 800df04:	d8f7      	bhi.n	800def6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	685b      	ldr	r3, [r3, #4]
 800df0e:	68ba      	ldr	r2, [r7, #8]
 800df10:	4413      	add	r3, r2
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	429a      	cmp	r2, r3
 800df16:	d108      	bne.n	800df2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	685a      	ldr	r2, [r3, #4]
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	685b      	ldr	r3, [r3, #4]
 800df20:	441a      	add	r2, r3
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	68ba      	ldr	r2, [r7, #8]
 800df34:	441a      	add	r2, r3
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	429a      	cmp	r2, r3
 800df3c:	d118      	bne.n	800df70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	4b15      	ldr	r3, [pc, #84]	; (800df98 <prvInsertBlockIntoFreeList+0xb0>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	429a      	cmp	r2, r3
 800df48:	d00d      	beq.n	800df66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	685a      	ldr	r2, [r3, #4]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	441a      	add	r2, r3
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	601a      	str	r2, [r3, #0]
 800df64:	e008      	b.n	800df78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800df66:	4b0c      	ldr	r3, [pc, #48]	; (800df98 <prvInsertBlockIntoFreeList+0xb0>)
 800df68:	681a      	ldr	r2, [r3, #0]
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	601a      	str	r2, [r3, #0]
 800df6e:	e003      	b.n	800df78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681a      	ldr	r2, [r3, #0]
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800df78:	68fa      	ldr	r2, [r7, #12]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d002      	beq.n	800df86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800df80:	68fb      	ldr	r3, [r7, #12]
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df86:	bf00      	nop
 800df88:	3714      	adds	r7, #20
 800df8a:	46bd      	mov	sp, r7
 800df8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df90:	4770      	bx	lr
 800df92:	bf00      	nop
 800df94:	2003387c 	.word	0x2003387c
 800df98:	20033884 	.word	0x20033884

0800df9c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800df9c:	b480      	push	{r7}
 800df9e:	af00      	add	r7, sp, #0
}
 800dfa0:	bf00      	nop
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa8:	4770      	bx	lr

0800dfaa <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800dfaa:	b580      	push	{r7, lr}
 800dfac:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_init();
 800dfae:	f006 fd4d 	bl	8014a4c <touchgfx_init>
}
 800dfb2:	bf00      	nop
 800dfb4:	bd80      	pop	{r7, pc}
	...

0800dfb8 <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800dfb8:	b480      	push	{r7}
 800dfba:	b083      	sub	sp, #12
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
    {
 800dfc0:	4a04      	ldr	r2, [pc, #16]	; (800dfd4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	601a      	str	r2, [r3, #0]
    }
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	4618      	mov	r0, r3
 800dfca:	370c      	adds	r7, #12
 800dfcc:	46bd      	mov	sp, r7
 800dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfd2:	4770      	bx	lr
 800dfd4:	0802f720 	.word	0x0802f720

0800dfd8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b082      	sub	sp, #8
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
    }
 800dfe0:	6878      	ldr	r0, [r7, #4]
 800dfe2:	f7ff ffe9 	bl	800dfb8 <_ZN8touchgfx12FontProviderD1Ev>
 800dfe6:	2104      	movs	r1, #4
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f01b fe07 	bl	8029bfc <_ZdlPvj>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4618      	mov	r0, r3
 800dff2:	3708      	adds	r7, #8
 800dff4:	46bd      	mov	sp, r7
 800dff6:	bd80      	pop	{r7, pc}

0800dff8 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
 800e000:	460b      	mov	r3, r1
 800e002:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800e004:	887b      	ldrh	r3, [r7, #2]
 800e006:	2b0a      	cmp	r3, #10
 800e008:	d84f      	bhi.n	800e0aa <_ZN23ApplicationFontProvider7getFontEt+0xb2>
 800e00a:	a201      	add	r2, pc, #4	; (adr r2, 800e010 <_ZN23ApplicationFontProvider7getFontEt+0x18>)
 800e00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e010:	0800e03d 	.word	0x0800e03d
 800e014:	0800e047 	.word	0x0800e047
 800e018:	0800e051 	.word	0x0800e051
 800e01c:	0800e05b 	.word	0x0800e05b
 800e020:	0800e065 	.word	0x0800e065
 800e024:	0800e06f 	.word	0x0800e06f
 800e028:	0800e079 	.word	0x0800e079
 800e02c:	0800e083 	.word	0x0800e083
 800e030:	0800e08d 	.word	0x0800e08d
 800e034:	0800e097 	.word	0x0800e097
 800e038:	0800e0a1 	.word	0x0800e0a1
    {
    case Typography::TYPOGRAPHY_01:
        // swisop3_300_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800e03c:	f004 f82a 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e040:	4603      	mov	r3, r0
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	e032      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_05:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e046:	f004 f825 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e04a:	4603      	mov	r3, r0
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	e02d      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_02:
        // JetBrainsMono_Regular_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800e050:	f004 f820 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e054:	4603      	mov	r3, r0
 800e056:	689b      	ldr	r3, [r3, #8]
 800e058:	e028      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_04:
        // swisop3_50_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
 800e05a:	f004 f81b 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e05e:	4603      	mov	r3, r0
 800e060:	68db      	ldr	r3, [r3, #12]
 800e062:	e023      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800e064:	f004 f816 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e068:	4603      	mov	r3, r0
 800e06a:	691b      	ldr	r3, [r3, #16]
 800e06c:	e01e      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_06:
        // verdana_12_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[5]);
 800e06e:	f004 f811 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e072:	4603      	mov	r3, r0
 800e074:	695b      	ldr	r3, [r3, #20]
 800e076:	e019      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[6]);
 800e078:	f004 f80c 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e07c:	4603      	mov	r3, r0
 800e07e:	699b      	ldr	r3, [r3, #24]
 800e080:	e014      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[7]);
 800e082:	f004 f807 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e086:	4603      	mov	r3, r0
 800e088:	69db      	ldr	r3, [r3, #28]
 800e08a:	e00f      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_00:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800e08c:	f004 f802 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e090:	4603      	mov	r3, r0
 800e092:	691b      	ldr	r3, [r3, #16]
 800e094:	e00a      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_03:
        // JetBrainsMono_Regular_60_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800e096:	f003 fffd 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e09a:	4603      	mov	r3, r0
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	e005      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    case Typography::TYPOGRAPHY_07:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[4]);
 800e0a0:	f003 fff8 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	691b      	ldr	r3, [r3, #16]
 800e0a8:	e000      	b.n	800e0ac <_ZN23ApplicationFontProvider7getFontEt+0xb4>
    default:
        return 0;
 800e0aa:	2300      	movs	r3, #0
    }
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3708      	adds	r7, #8
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId TYPOGRAPHY_03 = 1; // JetBrainsMono_Regular_60_4bpp
    static const touchgfx::FontId TYPOGRAPHY_07 = 4; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 8;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	4a05      	ldr	r2, [pc, #20]	; (800e0d4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	601a      	str	r2, [r3, #0]
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff ff77 	bl	800dfb8 <_ZN8touchgfx12FontProviderD1Ev>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3708      	adds	r7, #8
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}
 800e0d4:	0802f70c 	.word	0x0802f70c

0800e0d8 <_ZN23ApplicationFontProviderD0Ev>:
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b082      	sub	sp, #8
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f7ff ffe7 	bl	800e0b4 <_ZN23ApplicationFontProviderD1Ev>
 800e0e6:	2104      	movs	r1, #4
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f01b fd87 	bl	8029bfc <_ZdlPvj>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	3708      	adds	r7, #8
 800e0f4:	46bd      	mov	sp, r7
 800e0f6:	bd80      	pop	{r7, pc}

0800e0f8 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800e0f8:	b480      	push	{r7}
 800e0fa:	b083      	sub	sp, #12
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	6078      	str	r0, [r7, #4]
    {
 800e100:	4a04      	ldr	r2, [pc, #16]	; (800e114 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	601a      	str	r2, [r3, #0]
    }
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	4618      	mov	r0, r3
 800e10a:	370c      	adds	r7, #12
 800e10c:	46bd      	mov	sp, r7
 800e10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e112:	4770      	bx	lr
 800e114:	0802fbc8 	.word	0x0802fbc8

0800e118 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
    }
 800e120:	6878      	ldr	r0, [r7, #4]
 800e122:	f7ff ffe9 	bl	800e0f8 <_ZN8touchgfx4FontD1Ev>
 800e126:	2110      	movs	r1, #16
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f01b fd67 	bl	8029bfc <_ZdlPvj>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	4618      	mov	r0, r3
 800e132:	3708      	adds	r7, #8
 800e134:	46bd      	mov	sp, r7
 800e136:	bd80      	pop	{r7, pc}

0800e138 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800e138:	b590      	push	{r4, r7, lr}
 800e13a:	b087      	sub	sp, #28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
 800e140:	460b      	mov	r3, r1
 800e142:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800e144:	887b      	ldrh	r3, [r7, #2]
 800e146:	2b00      	cmp	r3, #0
 800e148:	d101      	bne.n	800e14e <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800e14a:	2300      	movs	r3, #0
 800e14c:	e010      	b.n	800e170 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800e14e:	2300      	movs	r3, #0
 800e150:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800e152:	2300      	movs	r3, #0
 800e154:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	3308      	adds	r3, #8
 800e15c:	681c      	ldr	r4, [r3, #0]
 800e15e:	f107 030f 	add.w	r3, r7, #15
 800e162:	f107 0210 	add.w	r2, r7, #16
 800e166:	8879      	ldrh	r1, [r7, #2]
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	47a0      	blx	r4
 800e16c:	6178      	str	r0, [r7, #20]
        return glyph;
 800e16e:	697b      	ldr	r3, [r7, #20]
    }
 800e170:	4618      	mov	r0, r3
 800e172:	371c      	adds	r7, #28
 800e174:	46bd      	mov	sp, r7
 800e176:	bd90      	pop	{r4, r7, pc}

0800e178 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800e178:	b480      	push	{r7}
 800e17a:	b083      	sub	sp, #12
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	895b      	ldrh	r3, [r3, #10]
    }
 800e184:	4618      	mov	r0, r3
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	899b      	ldrh	r3, [r3, #12]
    }
 800e19c:	4618      	mov	r0, r3
 800e19e:	370c      	adds	r7, #12
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a6:	4770      	bx	lr

0800e1a8 <_ZNK8touchgfx4Font13getFontHeightEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getFontHeight() const
 800e1a8:	b480      	push	{r7}
 800e1aa:	b083      	sub	sp, #12
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	889b      	ldrh	r3, [r3, #4]
    }
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
     * account that certain characters (eg 'g') have pixels below the baseline, thus making
     * the text height larger than the font height.
     *
     * @return The minimum height needed for a text field that uses this font.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getMinimumTextHeight() const
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
    {
        return fontHeight + pixelsBelowBaseline;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	889a      	ldrh	r2, [r3, #4]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	799b      	ldrb	r3, [r3, #6]
 800e1d0:	b29b      	uxth	r3, r3
 800e1d2:	4413      	add	r3, r2
 800e1d4:	b29b      	uxth	r3, r3
    }
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	370c      	adds	r7, #12
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e0:	4770      	bx	lr

0800e1e2 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800e1e2:	b480      	push	{r7}
 800e1e4:	b083      	sub	sp, #12
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	79db      	ldrb	r3, [r3, #7]
 800e1ee:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800e1f2:	b2db      	uxtb	r3, r3
    }
 800e1f4:	4618      	mov	r0, r3
 800e1f6:	370c      	adds	r7, #12
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fe:	4770      	bx	lr

0800e200 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800e200:	b480      	push	{r7}
 800e202:	b083      	sub	sp, #12
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	79db      	ldrb	r3, [r3, #7]
 800e20c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800e210:	b2db      	uxtb	r3, r3
    }
 800e212:	4618      	mov	r0, r3
 800e214:	370c      	adds	r7, #12
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
	...

0800e220 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	4a05      	ldr	r2, [pc, #20]	; (800e240 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	601a      	str	r2, [r3, #0]
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	4618      	mov	r0, r3
 800e232:	f7ff ff61 	bl	800e0f8 <_ZN8touchgfx4FontD1Ev>
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	4618      	mov	r0, r3
 800e23a:	3708      	adds	r7, #8
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	080309b4 	.word	0x080309b4

0800e244 <_ZN8touchgfx9ConstFontD0Ev>:
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f7ff ffe7 	bl	800e220 <_ZN8touchgfx9ConstFontD1Ev>
 800e252:	2118      	movs	r1, #24
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f01b fcd1 	bl	8029bfc <_ZdlPvj>
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	4618      	mov	r0, r3
 800e25e:	3708      	adds	r7, #8
 800e260:	46bd      	mov	sp, r7
 800e262:	bd80      	pop	{r7, pc}

0800e264 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800e264:	b580      	push	{r7, lr}
 800e266:	b082      	sub	sp, #8
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
 800e26c:	4a05      	ldr	r2, [pc, #20]	; (800e284 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	601a      	str	r2, [r3, #0]
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4618      	mov	r0, r3
 800e276:	f7ff ffd3 	bl	800e220 <_ZN8touchgfx9ConstFontD1Ev>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	4618      	mov	r0, r3
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}
 800e284:	0802f744 	.word	0x0802f744

0800e288 <_ZN8touchgfx13GeneratedFontD0Ev>:
 800e288:	b580      	push	{r7, lr}
 800e28a:	b082      	sub	sp, #8
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f7ff ffe7 	bl	800e264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e296:	2128      	movs	r1, #40	; 0x28
 800e298:	6878      	ldr	r0, [r7, #4]
 800e29a:	f01b fcaf 	bl	8029bfc <_ZdlPvj>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	4618      	mov	r0, r3
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <_ZN8touchgfx9TypedTextD1Ev>:
        : typedTextId(id)
    {
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
 800e2a8:	b480      	push	{r7}
 800e2aa:	b083      	sub	sp, #12
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
    {
 800e2b0:	4a04      	ldr	r2, [pc, #16]	; (800e2c4 <_ZN8touchgfx9TypedTextD1Ev+0x1c>)
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	601a      	str	r2, [r3, #0]
    }
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	370c      	adds	r7, #12
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c2:	4770      	bx	lr
 800e2c4:	0802f734 	.word	0x0802f734

0800e2c8 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b082      	sub	sp, #8
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
    }
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7ff ffe9 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>
 800e2d6:	2108      	movs	r1, #8
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f01b fc8f 	bl	8029bfc <_ZdlPvj>
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}

0800e2e8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800e2e8:	b480      	push	{r7}
 800e2ea:	b083      	sub	sp, #12
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6a1b      	ldr	r3, [r3, #32]
    }
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr

0800e300 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800e300:	b480      	push	{r7}
 800e302:	b083      	sub	sp, #12
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800e30c:	4618      	mov	r0, r3
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* list, uint16_t size, uint16_t height, uint8_t pixBelowBase, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800e318:	b580      	push	{r7, lr}
 800e31a:	b08c      	sub	sp, #48	; 0x30
 800e31c:	af08      	add	r7, sp, #32
 800e31e:	60f8      	str	r0, [r7, #12]
 800e320:	60b9      	str	r1, [r7, #8]
 800e322:	4611      	mov	r1, r2
 800e324:	461a      	mov	r2, r3
 800e326:	460b      	mov	r3, r1
 800e328:	80fb      	strh	r3, [r7, #6]
 800e32a:	4613      	mov	r3, r2
 800e32c:	80bb      	strh	r3, [r7, #4]
    : ConstFont(list, size, height, pixBelowBase, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800e32e:	68f8      	ldr	r0, [r7, #12]
 800e330:	88b9      	ldrh	r1, [r7, #4]
 800e332:	88fa      	ldrh	r2, [r7, #6]
 800e334:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e336:	9306      	str	r3, [sp, #24]
 800e338:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e33a:	9305      	str	r3, [sp, #20]
 800e33c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e340:	9304      	str	r3, [sp, #16]
 800e342:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e346:	9303      	str	r3, [sp, #12]
 800e348:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e34c:	9302      	str	r3, [sp, #8]
 800e34e:	7f3b      	ldrb	r3, [r7, #28]
 800e350:	9301      	str	r3, [sp, #4]
 800e352:	7e3b      	ldrb	r3, [r7, #24]
 800e354:	9300      	str	r3, [sp, #0]
 800e356:	460b      	mov	r3, r1
 800e358:	68b9      	ldr	r1, [r7, #8]
 800e35a:	f00d fe77 	bl	801c04c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>
 800e35e:	4a0a      	ldr	r2, [pc, #40]	; (800e388 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x70>)
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	601a      	str	r2, [r3, #0]
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e368:	619a      	str	r2, [r3, #24]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e36e:	61da      	str	r2, [r3, #28]
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e374:	621a      	str	r2, [r3, #32]
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e37a:	625a      	str	r2, [r3, #36]	; 0x24
{
}
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	4618      	mov	r0, r3
 800e380:	3710      	adds	r7, #16
 800e382:	46bd      	mov	sp, r7
 800e384:	bd80      	pop	{r7, pc}
 800e386:	bf00      	nop
 800e388:	0802f744 	.word	0x0802f744

0800e38c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800e38c:	b480      	push	{r7}
 800e38e:	b085      	sub	sp, #20
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
 800e394:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	699b      	ldr	r3, [r3, #24]
 800e39a:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800e39c:	683b      	ldr	r3, [r7, #0]
 800e39e:	889b      	ldrh	r3, [r3, #4]
 800e3a0:	0adb      	lsrs	r3, r3, #11
 800e3a2:	b29b      	uxth	r3, r3
 800e3a4:	009b      	lsls	r3, r3, #2
 800e3a6:	68fa      	ldr	r2, [r7, #12]
 800e3a8:	4413      	add	r3, r2
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4413      	add	r3, r2
}
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	3714      	adds	r7, #20
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3bc:	4770      	bx	lr

0800e3be <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800e3be:	b480      	push	{r7}
 800e3c0:	b089      	sub	sp, #36	; 0x24
 800e3c2:	af00      	add	r7, sp, #0
 800e3c4:	60f8      	str	r0, [r7, #12]
 800e3c6:	460b      	mov	r3, r1
 800e3c8:	607a      	str	r2, [r7, #4]
 800e3ca:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d003      	beq.n	800e3da <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	7b1b      	ldrb	r3, [r3, #12]
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d101      	bne.n	800e3de <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800e3da:	2300      	movs	r3, #0
 800e3dc:	e030      	b.n	800e440 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	69da      	ldr	r2, [r3, #28]
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	7b5b      	ldrb	r3, [r3, #13]
 800e3ea:	021b      	lsls	r3, r3, #8
 800e3ec:	b21b      	sxth	r3, r3
 800e3ee:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3f2:	b219      	sxth	r1, r3
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	7adb      	ldrb	r3, [r3, #11]
 800e3f8:	b21b      	sxth	r3, r3
 800e3fa:	430b      	orrs	r3, r1
 800e3fc:	b21b      	sxth	r3, r3
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4413      	add	r3, r2
 800e404:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	7b1b      	ldrb	r3, [r3, #12]
 800e40a:	837b      	strh	r3, [r7, #26]
 800e40c:	8b7b      	ldrh	r3, [r7, #26]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d015      	beq.n	800e43e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	881b      	ldrh	r3, [r3, #0]
 800e416:	897a      	ldrh	r2, [r7, #10]
 800e418:	429a      	cmp	r2, r3
 800e41a:	d103      	bne.n	800e424 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800e422:	e00d      	b.n	800e440 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800e424:	69fb      	ldr	r3, [r7, #28]
 800e426:	881b      	ldrh	r3, [r3, #0]
 800e428:	897a      	ldrh	r2, [r7, #10]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d306      	bcc.n	800e43c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800e42e:	8b7b      	ldrh	r3, [r7, #26]
 800e430:	3b01      	subs	r3, #1
 800e432:	837b      	strh	r3, [r7, #26]
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	3304      	adds	r3, #4
 800e438:	61fb      	str	r3, [r7, #28]
 800e43a:	e7e7      	b.n	800e40c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800e43c:	bf00      	nop
        }
    }
    return 0;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3724      	adds	r7, #36	; 0x24
 800e444:	46bd      	mov	sp, r7
 800e446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44a:	4770      	bx	lr

0800e44c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_JetBrainsMono_Regular_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_40_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 800e44c:	b580      	push	{r7, lr}
 800e44e:	af00      	add	r7, sp, #0
 800e450:	4801      	ldr	r0, [pc, #4]	; (800e458 <__tcf_0+0xc>)
 800e452:	f7ff ff07 	bl	800e264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e456:	bd80      	pop	{r7, pc}
 800e458:	20033894 	.word	0x20033894

0800e45c <_Z37getFont_JetBrainsMono_Regular_40_4bppv>:
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b08c      	sub	sp, #48	; 0x30
 800e460:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_40_4bpp(glyphs_JetBrainsMono_Regular_40_4bpp, 66, 40, 7, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_40_4bpp, kerning_JetBrainsMono_Regular_40_4bpp, 63, 0, 0, 0);
 800e462:	4b1f      	ldr	r3, [pc, #124]	; (800e4e0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	f3bf 8f5b 	dmb	ish
 800e46a:	b2db      	uxtb	r3, r3
 800e46c:	f003 0301 	and.w	r3, r3, #1
 800e470:	2b00      	cmp	r3, #0
 800e472:	bf0c      	ite	eq
 800e474:	2301      	moveq	r3, #1
 800e476:	2300      	movne	r3, #0
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d02c      	beq.n	800e4d8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800e47e:	4818      	ldr	r0, [pc, #96]	; (800e4e0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800e480:	f01b fbbe 	bl	8029c00 <__cxa_guard_acquire>
 800e484:	4603      	mov	r3, r0
 800e486:	2b00      	cmp	r3, #0
 800e488:	bf14      	ite	ne
 800e48a:	2301      	movne	r3, #1
 800e48c:	2300      	moveq	r3, #0
 800e48e:	b2db      	uxtb	r3, r3
 800e490:	2b00      	cmp	r3, #0
 800e492:	d021      	beq.n	800e4d8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x7c>
 800e494:	2300      	movs	r3, #0
 800e496:	930a      	str	r3, [sp, #40]	; 0x28
 800e498:	2300      	movs	r3, #0
 800e49a:	9309      	str	r3, [sp, #36]	; 0x24
 800e49c:	2300      	movs	r3, #0
 800e49e:	9308      	str	r3, [sp, #32]
 800e4a0:	233f      	movs	r3, #63	; 0x3f
 800e4a2:	9307      	str	r3, [sp, #28]
 800e4a4:	4b0f      	ldr	r3, [pc, #60]	; (800e4e4 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x88>)
 800e4a6:	9306      	str	r3, [sp, #24]
 800e4a8:	4b0f      	ldr	r3, [pc, #60]	; (800e4e8 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x8c>)
 800e4aa:	9305      	str	r3, [sp, #20]
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	9304      	str	r3, [sp, #16]
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	9303      	str	r3, [sp, #12]
 800e4b4:	2301      	movs	r3, #1
 800e4b6:	9302      	str	r3, [sp, #8]
 800e4b8:	2304      	movs	r3, #4
 800e4ba:	9301      	str	r3, [sp, #4]
 800e4bc:	2307      	movs	r3, #7
 800e4be:	9300      	str	r3, [sp, #0]
 800e4c0:	2328      	movs	r3, #40	; 0x28
 800e4c2:	2242      	movs	r2, #66	; 0x42
 800e4c4:	4909      	ldr	r1, [pc, #36]	; (800e4ec <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x90>)
 800e4c6:	480a      	ldr	r0, [pc, #40]	; (800e4f0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
 800e4c8:	f7ff ff26 	bl	800e318 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e4cc:	4809      	ldr	r0, [pc, #36]	; (800e4f4 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x98>)
 800e4ce:	f01b fc5d 	bl	8029d8c <atexit>
 800e4d2:	4803      	ldr	r0, [pc, #12]	; (800e4e0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x84>)
 800e4d4:	f01b fba0 	bl	8029c18 <__cxa_guard_release>
    return JetBrainsMono_Regular_40_4bpp;
 800e4d8:	4b05      	ldr	r3, [pc, #20]	; (800e4f0 <_Z37getFont_JetBrainsMono_Regular_40_4bppv+0x94>)
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	46bd      	mov	sp, r7
 800e4de:	bd80      	pop	{r7, pc}
 800e4e0:	200338bc 	.word	0x200338bc
 800e4e4:	080daec8 	.word	0x080daec8
 800e4e8:	080dafc4 	.word	0x080dafc4
 800e4ec:	080d9cbc 	.word	0x080d9cbc
 800e4f0:	20033894 	.word	0x20033894
 800e4f4:	0800e44d 	.word	0x0800e44d

0800e4f8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_JetBrainsMono_Regular_60_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp();

touchgfx::GeneratedFont& getFont_JetBrainsMono_Regular_60_4bpp()
{
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800e4f8:	b580      	push	{r7, lr}
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	4801      	ldr	r0, [pc, #4]	; (800e504 <__tcf_0+0xc>)
 800e4fe:	f7ff feb1 	bl	800e264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e502:	bd80      	pop	{r7, pc}
 800e504:	200338c0 	.word	0x200338c0

0800e508 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>:
{
 800e508:	b580      	push	{r7, lr}
 800e50a:	b08c      	sub	sp, #48	; 0x30
 800e50c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont JetBrainsMono_Regular_60_4bpp(glyphs_JetBrainsMono_Regular_60_4bpp, 63, 60, 11, 4, 1, 0, 0, unicodes_JetBrainsMono_Regular_60_4bpp, kerning_JetBrainsMono_Regular_60_4bpp, 63, 0, 0, 0);
 800e50e:	4b1f      	ldr	r3, [pc, #124]	; (800e58c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	f3bf 8f5b 	dmb	ish
 800e516:	b2db      	uxtb	r3, r3
 800e518:	f003 0301 	and.w	r3, r3, #1
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	bf0c      	ite	eq
 800e520:	2301      	moveq	r3, #1
 800e522:	2300      	movne	r3, #0
 800e524:	b2db      	uxtb	r3, r3
 800e526:	2b00      	cmp	r3, #0
 800e528:	d02c      	beq.n	800e584 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800e52a:	4818      	ldr	r0, [pc, #96]	; (800e58c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800e52c:	f01b fb68 	bl	8029c00 <__cxa_guard_acquire>
 800e530:	4603      	mov	r3, r0
 800e532:	2b00      	cmp	r3, #0
 800e534:	bf14      	ite	ne
 800e536:	2301      	movne	r3, #1
 800e538:	2300      	moveq	r3, #0
 800e53a:	b2db      	uxtb	r3, r3
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d021      	beq.n	800e584 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x7c>
 800e540:	2300      	movs	r3, #0
 800e542:	930a      	str	r3, [sp, #40]	; 0x28
 800e544:	2300      	movs	r3, #0
 800e546:	9309      	str	r3, [sp, #36]	; 0x24
 800e548:	2300      	movs	r3, #0
 800e54a:	9308      	str	r3, [sp, #32]
 800e54c:	233f      	movs	r3, #63	; 0x3f
 800e54e:	9307      	str	r3, [sp, #28]
 800e550:	4b0f      	ldr	r3, [pc, #60]	; (800e590 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x88>)
 800e552:	9306      	str	r3, [sp, #24]
 800e554:	4b0f      	ldr	r3, [pc, #60]	; (800e594 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x8c>)
 800e556:	9305      	str	r3, [sp, #20]
 800e558:	2300      	movs	r3, #0
 800e55a:	9304      	str	r3, [sp, #16]
 800e55c:	2300      	movs	r3, #0
 800e55e:	9303      	str	r3, [sp, #12]
 800e560:	2301      	movs	r3, #1
 800e562:	9302      	str	r3, [sp, #8]
 800e564:	2304      	movs	r3, #4
 800e566:	9301      	str	r3, [sp, #4]
 800e568:	230b      	movs	r3, #11
 800e56a:	9300      	str	r3, [sp, #0]
 800e56c:	233c      	movs	r3, #60	; 0x3c
 800e56e:	223f      	movs	r2, #63	; 0x3f
 800e570:	4909      	ldr	r1, [pc, #36]	; (800e598 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x90>)
 800e572:	480a      	ldr	r0, [pc, #40]	; (800e59c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
 800e574:	f7ff fed0 	bl	800e318 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e578:	4809      	ldr	r0, [pc, #36]	; (800e5a0 <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x98>)
 800e57a:	f01b fc07 	bl	8029d8c <atexit>
 800e57e:	4803      	ldr	r0, [pc, #12]	; (800e58c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x84>)
 800e580:	f01b fb4a 	bl	8029c18 <__cxa_guard_release>
    return JetBrainsMono_Regular_60_4bpp;
 800e584:	4b05      	ldr	r3, [pc, #20]	; (800e59c <_Z37getFont_JetBrainsMono_Regular_60_4bppv+0x94>)
}
 800e586:	4618      	mov	r0, r3
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}
 800e58c:	200338e8 	.word	0x200338e8
 800e590:	080daecc 	.word	0x080daecc
 800e594:	080dafc8 	.word	0x080dafc8
 800e598:	080da058 	.word	0x080da058
 800e59c:	200338c0 	.word	0x200338c0
 800e5a0:	0800e4f9 	.word	0x0800e4f9

0800e5a4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_swisop3_300_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_swisop3_300_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_300_4bpp()
{
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	4801      	ldr	r0, [pc, #4]	; (800e5b0 <__tcf_0+0xc>)
 800e5aa:	f7ff fe5b 	bl	800e264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	200338ec 	.word	0x200338ec

0800e5b4 <_Z24getFont_swisop3_300_4bppv>:
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b08c      	sub	sp, #48	; 0x30
 800e5b8:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_300_4bpp(glyphs_swisop3_300_4bpp, 63, 300, 59, 4, 1, 0, 0, unicodes_swisop3_300_4bpp, kerning_swisop3_300_4bpp, 63, 0, 0, 0);
 800e5ba:	4b20      	ldr	r3, [pc, #128]	; (800e63c <_Z24getFont_swisop3_300_4bppv+0x88>)
 800e5bc:	781b      	ldrb	r3, [r3, #0]
 800e5be:	f3bf 8f5b 	dmb	ish
 800e5c2:	b2db      	uxtb	r3, r3
 800e5c4:	f003 0301 	and.w	r3, r3, #1
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	bf0c      	ite	eq
 800e5cc:	2301      	moveq	r3, #1
 800e5ce:	2300      	movne	r3, #0
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d02d      	beq.n	800e632 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800e5d6:	4819      	ldr	r0, [pc, #100]	; (800e63c <_Z24getFont_swisop3_300_4bppv+0x88>)
 800e5d8:	f01b fb12 	bl	8029c00 <__cxa_guard_acquire>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	bf14      	ite	ne
 800e5e2:	2301      	movne	r3, #1
 800e5e4:	2300      	moveq	r3, #0
 800e5e6:	b2db      	uxtb	r3, r3
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d022      	beq.n	800e632 <_Z24getFont_swisop3_300_4bppv+0x7e>
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	9309      	str	r3, [sp, #36]	; 0x24
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	9308      	str	r3, [sp, #32]
 800e5f8:	233f      	movs	r3, #63	; 0x3f
 800e5fa:	9307      	str	r3, [sp, #28]
 800e5fc:	4b10      	ldr	r3, [pc, #64]	; (800e640 <_Z24getFont_swisop3_300_4bppv+0x8c>)
 800e5fe:	9306      	str	r3, [sp, #24]
 800e600:	4b10      	ldr	r3, [pc, #64]	; (800e644 <_Z24getFont_swisop3_300_4bppv+0x90>)
 800e602:	9305      	str	r3, [sp, #20]
 800e604:	2300      	movs	r3, #0
 800e606:	9304      	str	r3, [sp, #16]
 800e608:	2300      	movs	r3, #0
 800e60a:	9303      	str	r3, [sp, #12]
 800e60c:	2301      	movs	r3, #1
 800e60e:	9302      	str	r3, [sp, #8]
 800e610:	2304      	movs	r3, #4
 800e612:	9301      	str	r3, [sp, #4]
 800e614:	233b      	movs	r3, #59	; 0x3b
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800e61c:	223f      	movs	r2, #63	; 0x3f
 800e61e:	490a      	ldr	r1, [pc, #40]	; (800e648 <_Z24getFont_swisop3_300_4bppv+0x94>)
 800e620:	480a      	ldr	r0, [pc, #40]	; (800e64c <_Z24getFont_swisop3_300_4bppv+0x98>)
 800e622:	f7ff fe79 	bl	800e318 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e626:	480a      	ldr	r0, [pc, #40]	; (800e650 <_Z24getFont_swisop3_300_4bppv+0x9c>)
 800e628:	f01b fbb0 	bl	8029d8c <atexit>
 800e62c:	4803      	ldr	r0, [pc, #12]	; (800e63c <_Z24getFont_swisop3_300_4bppv+0x88>)
 800e62e:	f01b faf3 	bl	8029c18 <__cxa_guard_release>
    return swisop3_300_4bpp;
 800e632:	4b06      	ldr	r3, [pc, #24]	; (800e64c <_Z24getFont_swisop3_300_4bppv+0x98>)
}
 800e634:	4618      	mov	r0, r3
 800e636:	46bd      	mov	sp, r7
 800e638:	bd80      	pop	{r7, pc}
 800e63a:	bf00      	nop
 800e63c:	20033914 	.word	0x20033914
 800e640:	080daed0 	.word	0x080daed0
 800e644:	080dafcc 	.word	0x080dafcc
 800e648:	080da3cc 	.word	0x080da3cc
 800e64c:	200338ec 	.word	0x200338ec
 800e650:	0800e5a5 	.word	0x0800e5a5

0800e654 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_swisop3_50_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_swisop3_50_4bpp();

touchgfx::GeneratedFont& getFont_swisop3_50_4bpp()
{
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800e654:	b580      	push	{r7, lr}
 800e656:	af00      	add	r7, sp, #0
 800e658:	4801      	ldr	r0, [pc, #4]	; (800e660 <__tcf_0+0xc>)
 800e65a:	f7ff fe03 	bl	800e264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e65e:	bd80      	pop	{r7, pc}
 800e660:	20033918 	.word	0x20033918

0800e664 <_Z23getFont_swisop3_50_4bppv>:
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b08c      	sub	sp, #48	; 0x30
 800e668:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont swisop3_50_4bpp(glyphs_swisop3_50_4bpp, 65, 50, 10, 4, 1, 0, 0, unicodes_swisop3_50_4bpp, kerning_swisop3_50_4bpp, 63, 0, 0, 0);
 800e66a:	4b1f      	ldr	r3, [pc, #124]	; (800e6e8 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	f3bf 8f5b 	dmb	ish
 800e672:	b2db      	uxtb	r3, r3
 800e674:	f003 0301 	and.w	r3, r3, #1
 800e678:	2b00      	cmp	r3, #0
 800e67a:	bf0c      	ite	eq
 800e67c:	2301      	moveq	r3, #1
 800e67e:	2300      	movne	r3, #0
 800e680:	b2db      	uxtb	r3, r3
 800e682:	2b00      	cmp	r3, #0
 800e684:	d02c      	beq.n	800e6e0 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800e686:	4818      	ldr	r0, [pc, #96]	; (800e6e8 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800e688:	f01b faba 	bl	8029c00 <__cxa_guard_acquire>
 800e68c:	4603      	mov	r3, r0
 800e68e:	2b00      	cmp	r3, #0
 800e690:	bf14      	ite	ne
 800e692:	2301      	movne	r3, #1
 800e694:	2300      	moveq	r3, #0
 800e696:	b2db      	uxtb	r3, r3
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d021      	beq.n	800e6e0 <_Z23getFont_swisop3_50_4bppv+0x7c>
 800e69c:	2300      	movs	r3, #0
 800e69e:	930a      	str	r3, [sp, #40]	; 0x28
 800e6a0:	2300      	movs	r3, #0
 800e6a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a4:	2300      	movs	r3, #0
 800e6a6:	9308      	str	r3, [sp, #32]
 800e6a8:	233f      	movs	r3, #63	; 0x3f
 800e6aa:	9307      	str	r3, [sp, #28]
 800e6ac:	4b0f      	ldr	r3, [pc, #60]	; (800e6ec <_Z23getFont_swisop3_50_4bppv+0x88>)
 800e6ae:	9306      	str	r3, [sp, #24]
 800e6b0:	4b0f      	ldr	r3, [pc, #60]	; (800e6f0 <_Z23getFont_swisop3_50_4bppv+0x8c>)
 800e6b2:	9305      	str	r3, [sp, #20]
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	9304      	str	r3, [sp, #16]
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	9303      	str	r3, [sp, #12]
 800e6bc:	2301      	movs	r3, #1
 800e6be:	9302      	str	r3, [sp, #8]
 800e6c0:	2304      	movs	r3, #4
 800e6c2:	9301      	str	r3, [sp, #4]
 800e6c4:	230a      	movs	r3, #10
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	2332      	movs	r3, #50	; 0x32
 800e6ca:	2241      	movs	r2, #65	; 0x41
 800e6cc:	4909      	ldr	r1, [pc, #36]	; (800e6f4 <_Z23getFont_swisop3_50_4bppv+0x90>)
 800e6ce:	480a      	ldr	r0, [pc, #40]	; (800e6f8 <_Z23getFont_swisop3_50_4bppv+0x94>)
 800e6d0:	f7ff fe22 	bl	800e318 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e6d4:	4809      	ldr	r0, [pc, #36]	; (800e6fc <_Z23getFont_swisop3_50_4bppv+0x98>)
 800e6d6:	f01b fb59 	bl	8029d8c <atexit>
 800e6da:	4803      	ldr	r0, [pc, #12]	; (800e6e8 <_Z23getFont_swisop3_50_4bppv+0x84>)
 800e6dc:	f01b fa9c 	bl	8029c18 <__cxa_guard_release>
    return swisop3_50_4bpp;
 800e6e0:	4b05      	ldr	r3, [pc, #20]	; (800e6f8 <_Z23getFont_swisop3_50_4bppv+0x94>)
}
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}
 800e6e8:	20033940 	.word	0x20033940
 800e6ec:	080daed4 	.word	0x080daed4
 800e6f0:	080dafd0 	.word	0x080dafd0
 800e6f4:	080da740 	.word	0x080da740
 800e6f8:	20033918 	.word	0x20033918
 800e6fc:	0800e655 	.word	0x0800e655

0800e700 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800e700:	b580      	push	{r7, lr}
 800e702:	af00      	add	r7, sp, #0
 800e704:	4801      	ldr	r0, [pc, #4]	; (800e70c <__tcf_0+0xc>)
 800e706:	f7ff fdad 	bl	800e264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	20033944 	.word	0x20033944

0800e710 <_Z23getFont_verdana_10_4bppv>:
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b08c      	sub	sp, #48	; 0x30
 800e714:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800e716:	4b1f      	ldr	r3, [pc, #124]	; (800e794 <_Z23getFont_verdana_10_4bppv+0x84>)
 800e718:	781b      	ldrb	r3, [r3, #0]
 800e71a:	f3bf 8f5b 	dmb	ish
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	f003 0301 	and.w	r3, r3, #1
 800e724:	2b00      	cmp	r3, #0
 800e726:	bf0c      	ite	eq
 800e728:	2301      	moveq	r3, #1
 800e72a:	2300      	movne	r3, #0
 800e72c:	b2db      	uxtb	r3, r3
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d02c      	beq.n	800e78c <_Z23getFont_verdana_10_4bppv+0x7c>
 800e732:	4818      	ldr	r0, [pc, #96]	; (800e794 <_Z23getFont_verdana_10_4bppv+0x84>)
 800e734:	f01b fa64 	bl	8029c00 <__cxa_guard_acquire>
 800e738:	4603      	mov	r3, r0
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	bf14      	ite	ne
 800e73e:	2301      	movne	r3, #1
 800e740:	2300      	moveq	r3, #0
 800e742:	b2db      	uxtb	r3, r3
 800e744:	2b00      	cmp	r3, #0
 800e746:	d021      	beq.n	800e78c <_Z23getFont_verdana_10_4bppv+0x7c>
 800e748:	2300      	movs	r3, #0
 800e74a:	930a      	str	r3, [sp, #40]	; 0x28
 800e74c:	2300      	movs	r3, #0
 800e74e:	9309      	str	r3, [sp, #36]	; 0x24
 800e750:	2300      	movs	r3, #0
 800e752:	9308      	str	r3, [sp, #32]
 800e754:	233f      	movs	r3, #63	; 0x3f
 800e756:	9307      	str	r3, [sp, #28]
 800e758:	4b0f      	ldr	r3, [pc, #60]	; (800e798 <_Z23getFont_verdana_10_4bppv+0x88>)
 800e75a:	9306      	str	r3, [sp, #24]
 800e75c:	4b0f      	ldr	r3, [pc, #60]	; (800e79c <_Z23getFont_verdana_10_4bppv+0x8c>)
 800e75e:	9305      	str	r3, [sp, #20]
 800e760:	2300      	movs	r3, #0
 800e762:	9304      	str	r3, [sp, #16]
 800e764:	2300      	movs	r3, #0
 800e766:	9303      	str	r3, [sp, #12]
 800e768:	2301      	movs	r3, #1
 800e76a:	9302      	str	r3, [sp, #8]
 800e76c:	2304      	movs	r3, #4
 800e76e:	9301      	str	r3, [sp, #4]
 800e770:	2300      	movs	r3, #0
 800e772:	9300      	str	r3, [sp, #0]
 800e774:	230a      	movs	r3, #10
 800e776:	2201      	movs	r2, #1
 800e778:	4909      	ldr	r1, [pc, #36]	; (800e7a0 <_Z23getFont_verdana_10_4bppv+0x90>)
 800e77a:	480a      	ldr	r0, [pc, #40]	; (800e7a4 <_Z23getFont_verdana_10_4bppv+0x94>)
 800e77c:	f7ff fdcc 	bl	800e318 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e780:	4809      	ldr	r0, [pc, #36]	; (800e7a8 <_Z23getFont_verdana_10_4bppv+0x98>)
 800e782:	f01b fb03 	bl	8029d8c <atexit>
 800e786:	4803      	ldr	r0, [pc, #12]	; (800e794 <_Z23getFont_verdana_10_4bppv+0x84>)
 800e788:	f01b fa46 	bl	8029c18 <__cxa_guard_release>
    return verdana_10_4bpp;
 800e78c:	4b05      	ldr	r3, [pc, #20]	; (800e7a4 <_Z23getFont_verdana_10_4bppv+0x94>)
}
 800e78e:	4618      	mov	r0, r3
 800e790:	46bd      	mov	sp, r7
 800e792:	bd80      	pop	{r7, pc}
 800e794:	2003396c 	.word	0x2003396c
 800e798:	080daed8 	.word	0x080daed8
 800e79c:	080dafd4 	.word	0x080dafd4
 800e7a0:	080daad0 	.word	0x080daad0
 800e7a4:	20033944 	.word	0x20033944
 800e7a8:	0800e701 	.word	0x0800e701

0800e7ac <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_12_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_12_4bpp();

touchgfx::GeneratedFont& getFont_verdana_12_4bpp()
{
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	4801      	ldr	r0, [pc, #4]	; (800e7b8 <__tcf_0+0xc>)
 800e7b2:	f7ff fd57 	bl	800e264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e7b6:	bd80      	pop	{r7, pc}
 800e7b8:	20033970 	.word	0x20033970

0800e7bc <_Z23getFont_verdana_12_4bppv>:
{
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b08c      	sub	sp, #48	; 0x30
 800e7c0:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_12_4bpp(glyphs_verdana_12_4bpp, 7, 12, 0, 4, 1, 0, 1, unicodes_verdana_12_4bpp, kerning_verdana_12_4bpp, 63, 0, 0, 0);
 800e7c2:	4b1f      	ldr	r3, [pc, #124]	; (800e840 <_Z23getFont_verdana_12_4bppv+0x84>)
 800e7c4:	781b      	ldrb	r3, [r3, #0]
 800e7c6:	f3bf 8f5b 	dmb	ish
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	f003 0301 	and.w	r3, r3, #1
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	bf0c      	ite	eq
 800e7d4:	2301      	moveq	r3, #1
 800e7d6:	2300      	movne	r3, #0
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d02c      	beq.n	800e838 <_Z23getFont_verdana_12_4bppv+0x7c>
 800e7de:	4818      	ldr	r0, [pc, #96]	; (800e840 <_Z23getFont_verdana_12_4bppv+0x84>)
 800e7e0:	f01b fa0e 	bl	8029c00 <__cxa_guard_acquire>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	bf14      	ite	ne
 800e7ea:	2301      	movne	r3, #1
 800e7ec:	2300      	moveq	r3, #0
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d021      	beq.n	800e838 <_Z23getFont_verdana_12_4bppv+0x7c>
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	930a      	str	r3, [sp, #40]	; 0x28
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	9308      	str	r3, [sp, #32]
 800e800:	233f      	movs	r3, #63	; 0x3f
 800e802:	9307      	str	r3, [sp, #28]
 800e804:	4b0f      	ldr	r3, [pc, #60]	; (800e844 <_Z23getFont_verdana_12_4bppv+0x88>)
 800e806:	9306      	str	r3, [sp, #24]
 800e808:	4b0f      	ldr	r3, [pc, #60]	; (800e848 <_Z23getFont_verdana_12_4bppv+0x8c>)
 800e80a:	9305      	str	r3, [sp, #20]
 800e80c:	2301      	movs	r3, #1
 800e80e:	9304      	str	r3, [sp, #16]
 800e810:	2300      	movs	r3, #0
 800e812:	9303      	str	r3, [sp, #12]
 800e814:	2301      	movs	r3, #1
 800e816:	9302      	str	r3, [sp, #8]
 800e818:	2304      	movs	r3, #4
 800e81a:	9301      	str	r3, [sp, #4]
 800e81c:	2300      	movs	r3, #0
 800e81e:	9300      	str	r3, [sp, #0]
 800e820:	230c      	movs	r3, #12
 800e822:	2207      	movs	r2, #7
 800e824:	4909      	ldr	r1, [pc, #36]	; (800e84c <_Z23getFont_verdana_12_4bppv+0x90>)
 800e826:	480a      	ldr	r0, [pc, #40]	; (800e850 <_Z23getFont_verdana_12_4bppv+0x94>)
 800e828:	f7ff fd76 	bl	800e318 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e82c:	4809      	ldr	r0, [pc, #36]	; (800e854 <_Z23getFont_verdana_12_4bppv+0x98>)
 800e82e:	f01b faad 	bl	8029d8c <atexit>
 800e832:	4803      	ldr	r0, [pc, #12]	; (800e840 <_Z23getFont_verdana_12_4bppv+0x84>)
 800e834:	f01b f9f0 	bl	8029c18 <__cxa_guard_release>
    return verdana_12_4bpp;
 800e838:	4b05      	ldr	r3, [pc, #20]	; (800e850 <_Z23getFont_verdana_12_4bppv+0x94>)
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	20033998 	.word	0x20033998
 800e844:	080daedc 	.word	0x080daedc
 800e848:	080dafd8 	.word	0x080dafd8
 800e84c:	080daae0 	.word	0x080daae0
 800e850:	20033970 	.word	0x20033970
 800e854:	0800e7ad 	.word	0x0800e7ad

0800e858 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800e858:	b580      	push	{r7, lr}
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	4801      	ldr	r0, [pc, #4]	; (800e864 <__tcf_0+0xc>)
 800e85e:	f7ff fd01 	bl	800e264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e862:	bd80      	pop	{r7, pc}
 800e864:	2003399c 	.word	0x2003399c

0800e868 <_Z23getFont_verdana_20_4bppv>:
{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b08c      	sub	sp, #48	; 0x30
 800e86c:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 63, 20, 4, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800e86e:	4b1f      	ldr	r3, [pc, #124]	; (800e8ec <_Z23getFont_verdana_20_4bppv+0x84>)
 800e870:	781b      	ldrb	r3, [r3, #0]
 800e872:	f3bf 8f5b 	dmb	ish
 800e876:	b2db      	uxtb	r3, r3
 800e878:	f003 0301 	and.w	r3, r3, #1
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	bf0c      	ite	eq
 800e880:	2301      	moveq	r3, #1
 800e882:	2300      	movne	r3, #0
 800e884:	b2db      	uxtb	r3, r3
 800e886:	2b00      	cmp	r3, #0
 800e888:	d02c      	beq.n	800e8e4 <_Z23getFont_verdana_20_4bppv+0x7c>
 800e88a:	4818      	ldr	r0, [pc, #96]	; (800e8ec <_Z23getFont_verdana_20_4bppv+0x84>)
 800e88c:	f01b f9b8 	bl	8029c00 <__cxa_guard_acquire>
 800e890:	4603      	mov	r3, r0
 800e892:	2b00      	cmp	r3, #0
 800e894:	bf14      	ite	ne
 800e896:	2301      	movne	r3, #1
 800e898:	2300      	moveq	r3, #0
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d021      	beq.n	800e8e4 <_Z23getFont_verdana_20_4bppv+0x7c>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	930a      	str	r3, [sp, #40]	; 0x28
 800e8a4:	2300      	movs	r3, #0
 800e8a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	9308      	str	r3, [sp, #32]
 800e8ac:	233f      	movs	r3, #63	; 0x3f
 800e8ae:	9307      	str	r3, [sp, #28]
 800e8b0:	4b0f      	ldr	r3, [pc, #60]	; (800e8f0 <_Z23getFont_verdana_20_4bppv+0x88>)
 800e8b2:	9306      	str	r3, [sp, #24]
 800e8b4:	4b0f      	ldr	r3, [pc, #60]	; (800e8f4 <_Z23getFont_verdana_20_4bppv+0x8c>)
 800e8b6:	9305      	str	r3, [sp, #20]
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	9304      	str	r3, [sp, #16]
 800e8bc:	2301      	movs	r3, #1
 800e8be:	9303      	str	r3, [sp, #12]
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	9302      	str	r3, [sp, #8]
 800e8c4:	2304      	movs	r3, #4
 800e8c6:	9301      	str	r3, [sp, #4]
 800e8c8:	2304      	movs	r3, #4
 800e8ca:	9300      	str	r3, [sp, #0]
 800e8cc:	2314      	movs	r3, #20
 800e8ce:	223f      	movs	r2, #63	; 0x3f
 800e8d0:	4909      	ldr	r1, [pc, #36]	; (800e8f8 <_Z23getFont_verdana_20_4bppv+0x90>)
 800e8d2:	480a      	ldr	r0, [pc, #40]	; (800e8fc <_Z23getFont_verdana_20_4bppv+0x94>)
 800e8d4:	f7ff fd20 	bl	800e318 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e8d8:	4809      	ldr	r0, [pc, #36]	; (800e900 <_Z23getFont_verdana_20_4bppv+0x98>)
 800e8da:	f01b fa57 	bl	8029d8c <atexit>
 800e8de:	4803      	ldr	r0, [pc, #12]	; (800e8ec <_Z23getFont_verdana_20_4bppv+0x84>)
 800e8e0:	f01b f99a 	bl	8029c18 <__cxa_guard_release>
    return verdana_20_4bpp;
 800e8e4:	4b05      	ldr	r3, [pc, #20]	; (800e8fc <_Z23getFont_verdana_20_4bppv+0x94>)
}
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	200339c4 	.word	0x200339c4
 800e8f0:	080daee0 	.word	0x080daee0
 800e8f4:	080dafdc 	.word	0x080dafdc
 800e8f8:	080dab44 	.word	0x080dab44
 800e8fc:	2003399c 	.word	0x2003399c
 800e900:	0800e859 	.word	0x0800e859

0800e904 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e904:	b580      	push	{r7, lr}
 800e906:	af00      	add	r7, sp, #0
 800e908:	4801      	ldr	r0, [pc, #4]	; (800e910 <__tcf_0+0xc>)
 800e90a:	f7ff fcab 	bl	800e264 <_ZN8touchgfx13GeneratedFontD1Ev>
 800e90e:	bd80      	pop	{r7, pc}
 800e910:	200339c8 	.word	0x200339c8

0800e914 <_Z23getFont_verdana_40_4bppv>:
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b08c      	sub	sp, #48	; 0x30
 800e918:	af0c      	add	r7, sp, #48	; 0x30
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800e91a:	4b1f      	ldr	r3, [pc, #124]	; (800e998 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e91c:	781b      	ldrb	r3, [r3, #0]
 800e91e:	f3bf 8f5b 	dmb	ish
 800e922:	b2db      	uxtb	r3, r3
 800e924:	f003 0301 	and.w	r3, r3, #1
 800e928:	2b00      	cmp	r3, #0
 800e92a:	bf0c      	ite	eq
 800e92c:	2301      	moveq	r3, #1
 800e92e:	2300      	movne	r3, #0
 800e930:	b2db      	uxtb	r3, r3
 800e932:	2b00      	cmp	r3, #0
 800e934:	d02c      	beq.n	800e990 <_Z23getFont_verdana_40_4bppv+0x7c>
 800e936:	4818      	ldr	r0, [pc, #96]	; (800e998 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e938:	f01b f962 	bl	8029c00 <__cxa_guard_acquire>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	bf14      	ite	ne
 800e942:	2301      	movne	r3, #1
 800e944:	2300      	moveq	r3, #0
 800e946:	b2db      	uxtb	r3, r3
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d021      	beq.n	800e990 <_Z23getFont_verdana_40_4bppv+0x7c>
 800e94c:	2300      	movs	r3, #0
 800e94e:	930a      	str	r3, [sp, #40]	; 0x28
 800e950:	2300      	movs	r3, #0
 800e952:	9309      	str	r3, [sp, #36]	; 0x24
 800e954:	2300      	movs	r3, #0
 800e956:	9308      	str	r3, [sp, #32]
 800e958:	233f      	movs	r3, #63	; 0x3f
 800e95a:	9307      	str	r3, [sp, #28]
 800e95c:	4b0f      	ldr	r3, [pc, #60]	; (800e99c <_Z23getFont_verdana_40_4bppv+0x88>)
 800e95e:	9306      	str	r3, [sp, #24]
 800e960:	4b0f      	ldr	r3, [pc, #60]	; (800e9a0 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800e962:	9305      	str	r3, [sp, #20]
 800e964:	2300      	movs	r3, #0
 800e966:	9304      	str	r3, [sp, #16]
 800e968:	2300      	movs	r3, #0
 800e96a:	9303      	str	r3, [sp, #12]
 800e96c:	2301      	movs	r3, #1
 800e96e:	9302      	str	r3, [sp, #8]
 800e970:	2304      	movs	r3, #4
 800e972:	9301      	str	r3, [sp, #4]
 800e974:	2300      	movs	r3, #0
 800e976:	9300      	str	r3, [sp, #0]
 800e978:	2328      	movs	r3, #40	; 0x28
 800e97a:	2201      	movs	r2, #1
 800e97c:	4909      	ldr	r1, [pc, #36]	; (800e9a4 <_Z23getFont_verdana_40_4bppv+0x90>)
 800e97e:	480a      	ldr	r0, [pc, #40]	; (800e9a8 <_Z23getFont_verdana_40_4bppv+0x94>)
 800e980:	f7ff fcca 	bl	800e318 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEtthhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800e984:	4809      	ldr	r0, [pc, #36]	; (800e9ac <_Z23getFont_verdana_40_4bppv+0x98>)
 800e986:	f01b fa01 	bl	8029d8c <atexit>
 800e98a:	4803      	ldr	r0, [pc, #12]	; (800e998 <_Z23getFont_verdana_40_4bppv+0x84>)
 800e98c:	f01b f944 	bl	8029c18 <__cxa_guard_release>
    return verdana_40_4bpp;
 800e990:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <_Z23getFont_verdana_40_4bppv+0x94>)
}
 800e992:	4618      	mov	r0, r3
 800e994:	46bd      	mov	sp, r7
 800e996:	bd80      	pop	{r7, pc}
 800e998:	200339f0 	.word	0x200339f0
 800e99c:	080dafc0 	.word	0x080dafc0
 800e9a0:	080dafe0 	.word	0x080dafe0
 800e9a4:	080daeb8 	.word	0x080daeb8
 800e9a8:	200339c8 	.word	0x200339c8
 800e9ac:	0800e905 	.word	0x0800e905

0800e9b0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800e9b0:	b480      	push	{r7}
 800e9b2:	b083      	sub	sp, #12
 800e9b4:	af00      	add	r7, sp, #0
 800e9b6:	6078      	str	r0, [r7, #4]
 800e9b8:	6039      	str	r1, [r7, #0]
 800e9ba:	683b      	ldr	r3, [r7, #0]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	370c      	adds	r7, #12
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800e9c8:	b480      	push	{r7}
 800e9ca:	b083      	sub	sp, #12
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e9d2:	bf00      	nop
 800e9d4:	370c      	adds	r7, #12
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9dc:	4770      	bx	lr

0800e9de <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800e9de:	b480      	push	{r7}
 800e9e0:	b083      	sub	sp, #12
 800e9e2:	af00      	add	r7, sp, #0
 800e9e4:	6078      	str	r0, [r7, #4]
 800e9e6:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800e9f4:	b480      	push	{r7}
 800e9f6:	b083      	sub	sp, #12
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800e9fe:	bf00      	nop
 800ea00:	370c      	adds	r7, #12
 800ea02:	46bd      	mov	sp, r7
 800ea04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea08:	4770      	bx	lr

0800ea0a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800ea0a:	b480      	push	{r7}
 800ea0c:	b083      	sub	sp, #12
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	6078      	str	r0, [r7, #4]
 800ea12:	460b      	mov	r3, r1
 800ea14:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800ea16:	bf00      	nop
 800ea18:	370c      	adds	r7, #12
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea20:	4770      	bx	lr

0800ea22 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800ea22:	b480      	push	{r7}
 800ea24:	b083      	sub	sp, #12
 800ea26:	af00      	add	r7, sp, #0
 800ea28:	6078      	str	r0, [r7, #4]
    {
    }
 800ea2a:	bf00      	nop
 800ea2c:	370c      	adds	r7, #12
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr

0800ea36 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800ea36:	b480      	push	{r7}
 800ea38:	b083      	sub	sp, #12
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
    {
    }
 800ea3e:	bf00      	nop
 800ea40:	370c      	adds	r7, #12
 800ea42:	46bd      	mov	sp, r7
 800ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea48:	4770      	bx	lr
	...

0800ea4c <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800ea4c:	b480      	push	{r7}
 800ea4e:	b083      	sub	sp, #12
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
    {
 800ea54:	4a04      	ldr	r2, [pc, #16]	; (800ea68 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	601a      	str	r2, [r3, #0]
    }
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr
 800ea68:	0802f8ac 	.word	0x0802f8ac

0800ea6c <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800ea6c:	b580      	push	{r7, lr}
 800ea6e:	b082      	sub	sp, #8
 800ea70:	af00      	add	r7, sp, #0
 800ea72:	6078      	str	r0, [r7, #4]
    }
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f7ff ffe9 	bl	800ea4c <_ZN8touchgfx15UIEventListenerD1Ev>
 800ea7a:	2104      	movs	r1, #4
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f01b f8bd 	bl	8029bfc <_ZdlPvj>
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	4618      	mov	r0, r3
 800ea86:	3708      	adds	r7, #8
 800ea88:	46bd      	mov	sp, r7
 800ea8a:	bd80      	pop	{r7, pc}

0800ea8c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
    {
    }
 800ea94:	bf00      	nop
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800eaac:	bf00      	nop
 800eaae:	370c      	adds	r7, #12
 800eab0:	46bd      	mov	sp, r7
 800eab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab6:	4770      	bx	lr

0800eab8 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800eaca:	6810      	ldr	r0, [r2, #0]
 800eacc:	6851      	ldr	r1, [r2, #4]
 800eace:	c303      	stmia	r3!, {r0, r1}
    }
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
    {
 800eae4:	4a04      	ldr	r2, [pc, #16]	; (800eaf8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	601a      	str	r2, [r3, #0]
    }
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	4618      	mov	r0, r3
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr
 800eaf8:	0802f894 	.word	0x0802f894

0800eafc <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b082      	sub	sp, #8
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
    }
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f7ff ffe9 	bl	800eadc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800eb0a:	2104      	movs	r1, #4
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f01b f875 	bl	8029bfc <_ZdlPvj>
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	4618      	mov	r0, r3
 800eb16:	3708      	adds	r7, #8
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	bd80      	pop	{r7, pc}

0800eb1c <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800eb1c:	b480      	push	{r7}
 800eb1e:	af00      	add	r7, sp, #0
    {
        return instance;
 800eb20:	4b03      	ldr	r3, [pc, #12]	; (800eb30 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800eb22:	681b      	ldr	r3, [r3, #0]
    }
 800eb24:	4618      	mov	r0, r3
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr
 800eb2e:	bf00      	nop
 800eb30:	2003c2bc 	.word	0x2003c2bc

0800eb34 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800eb34:	b480      	push	{r7}
 800eb36:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800eb38:	4b0b      	ldr	r3, [pc, #44]	; (800eb68 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d008      	beq.n	800eb56 <_ZN8touchgfx3HAL3lcdEv+0x22>
 800eb44:	4b08      	ldr	r3, [pc, #32]	; (800eb68 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d003      	beq.n	800eb56 <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800eb4e:	4b06      	ldr	r3, [pc, #24]	; (800eb68 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb54:	e002      	b.n	800eb5c <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800eb56:	4b04      	ldr	r3, [pc, #16]	; (800eb68 <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	689b      	ldr	r3, [r3, #8]
    }
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	46bd      	mov	sp, r7
 800eb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb64:	4770      	bx	lr
 800eb66:	bf00      	nop
 800eb68:	2003c2bc 	.word	0x2003c2bc

0800eb6c <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800eb74:	4a07      	ldr	r2, [pc, #28]	; (800eb94 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	601a      	str	r2, [r3, #0]
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2200      	movs	r2, #0
 800eb7e:	605a      	str	r2, [r3, #4]
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	2200      	movs	r2, #0
 800eb84:	721a      	strb	r2, [r3, #8]
    {
    }
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	4618      	mov	r0, r3
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr
 800eb94:	0802f870 	.word	0x0802f870

0800eb98 <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
    {
 800eba0:	4a04      	ldr	r2, [pc, #16]	; (800ebb4 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	601a      	str	r2, [r3, #0]
    }
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	370c      	adds	r7, #12
 800ebac:	46bd      	mov	sp, r7
 800ebae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb2:	4770      	bx	lr
 800ebb4:	0802f870 	.word	0x0802f870

0800ebb8 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800ebb8:	b580      	push	{r7, lr}
 800ebba:	b082      	sub	sp, #8
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
    }
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f7ff ffe9 	bl	800eb98 <_ZN8touchgfx10TransitionD1Ev>
 800ebc6:	210c      	movs	r1, #12
 800ebc8:	6878      	ldr	r0, [r7, #4]
 800ebca:	f01b f817 	bl	8029bfc <_ZdlPvj>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3708      	adds	r7, #8
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}

0800ebd8 <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800ebd8:	b480      	push	{r7}
 800ebda:	b083      	sub	sp, #12
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	6078      	str	r0, [r7, #4]
    {
    }
 800ebe0:	bf00      	nop
 800ebe2:	370c      	adds	r7, #12
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebea:	4770      	bx	lr

0800ebec <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800ebec:	b480      	push	{r7}
 800ebee:	b083      	sub	sp, #12
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
    {
    }
 800ebf4:	bf00      	nop
 800ebf6:	370c      	adds	r7, #12
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfe:	4770      	bx	lr

0800ec00 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
    {
    }
 800ec08:	bf00      	nop
 800ec0a:	370c      	adds	r7, #12
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec12:	4770      	bx	lr

0800ec14 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800ec1c:	f00c f9d0 	bl	801afc0 <_ZN8touchgfx11Application11getInstanceEv>
 800ec20:	4603      	mov	r3, r0
 800ec22:	4618      	mov	r0, r3
 800ec24:	f00c fd72 	bl	801b70c <_ZN8touchgfx11Application10invalidateEv>
    }
 800ec28:	bf00      	nop
 800ec2a:	3708      	adds	r7, #8
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}

0800ec30 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800ec30:	b480      	push	{r7}
 800ec32:	b083      	sub	sp, #12
 800ec34:	af00      	add	r7, sp, #0
 800ec36:	6078      	str	r0, [r7, #4]
 800ec38:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	683a      	ldr	r2, [r7, #0]
 800ec3e:	605a      	str	r2, [r3, #4]
    }
 800ec40:	bf00      	nop
 800ec42:	370c      	adds	r7, #12
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
 800ec54:	4a05      	ldr	r2, [pc, #20]	; (800ec6c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	601a      	str	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	f7ff fef5 	bl	800ea4c <_ZN8touchgfx15UIEventListenerD1Ev>
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	4618      	mov	r0, r3
 800ec66:	3708      	adds	r7, #8
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}
 800ec6c:	08030900 	.word	0x08030900

0800ec70 <_ZN8touchgfx11ApplicationD0Ev>:
 800ec70:	b580      	push	{r7, lr}
 800ec72:	b082      	sub	sp, #8
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6878      	ldr	r0, [r7, #4]
 800ec7a:	f7ff ffe7 	bl	800ec4c <_ZN8touchgfx11ApplicationD1Ev>
 800ec7e:	f44f 719c 	mov.w	r1, #312	; 0x138
 800ec82:	6878      	ldr	r0, [r7, #4]
 800ec84:	f01a ffba 	bl	8029bfc <_ZdlPvj>
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3708      	adds	r7, #8
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
	...

0800ec94 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b082      	sub	sp, #8
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f00c f9b0 	bl	801b004 <_ZN8touchgfx11ApplicationC1Ev>
 800eca4:	4a09      	ldr	r2, [pc, #36]	; (800eccc <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	601a      	str	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2200      	movs	r2, #0
 800ecae:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    {
        instance = this;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	4a04      	ldr	r2, [pc, #16]	; (800ecd0 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800ecbe:	6013      	str	r3, [r2, #0]
    }
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	4618      	mov	r0, r3
 800ecc4:	3708      	adds	r7, #8
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	bd80      	pop	{r7, pc}
 800ecca:	bf00      	nop
 800eccc:	0802f824 	.word	0x0802f824
 800ecd0:	2003c310 	.word	0x2003c310

0800ecd4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800ecd4:	b580      	push	{r7, lr}
 800ecd6:	b082      	sub	sp, #8
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800ecdc:	6878      	ldr	r0, [r7, #4]
 800ecde:	f000 f804 	bl	800ecea <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800ece2:	bf00      	nop
 800ece4:	3708      	adds	r7, #8
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}

0800ecea <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b082      	sub	sp, #8
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d00f      	beq.n	800ed1c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	330c      	adds	r3, #12
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	4610      	mov	r0, r2
 800ed10:	4798      	blx	r3
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e000      	b.n	800ed1e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800ed1c:	2300      	movs	r3, #0
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00e      	beq.n	800ed40 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	3308      	adds	r3, #8
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	4610      	mov	r0, r2
 800ed36:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2200      	movs	r2, #0
 800ed3c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
        }
    }
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800ed48:	b480      	push	{r7}
 800ed4a:	b083      	sub	sp, #12
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	683a      	ldr	r2, [r7, #0]
 800ed56:	601a      	str	r2, [r3, #0]
    }
 800ed58:	bf00      	nop
 800ed5a:	370c      	adds	r7, #12
 800ed5c:	46bd      	mov	sp, r7
 800ed5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed62:	4770      	bx	lr

0800ed64 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
 800ed6c:	4a05      	ldr	r2, [pc, #20]	; (800ed84 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	601a      	str	r2, [r3, #0]
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4618      	mov	r0, r3
 800ed76:	f7ff ff69 	bl	800ec4c <_ZN8touchgfx11ApplicationD1Ev>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3708      	adds	r7, #8
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	0802f824 	.word	0x0802f824

0800ed88 <_ZN8touchgfx14MVPApplicationD0Ev>:
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6878      	ldr	r0, [r7, #4]
 800ed92:	f7ff ffe7 	bl	800ed64 <_ZN8touchgfx14MVPApplicationD1Ev>
 800ed96:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ed9a:	6878      	ldr	r0, [r7, #4]
 800ed9c:	f01a ff2e 	bl	8029bfc <_ZdlPvj>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4618      	mov	r0, r3
 800eda4:	3708      	adds	r7, #8
 800eda6:	46bd      	mov	sp, r7
 800eda8:	bd80      	pop	{r7, pc}
	...

0800edac <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800edac:	b580      	push	{r7, lr}
 800edae:	b082      	sub	sp, #8
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	4a08      	ldr	r2, [pc, #32]	; (800edd8 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	601a      	str	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800edc0:	4618      	mov	r0, r3
 800edc2:	f000 facb 	bl	800f35c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	4618      	mov	r0, r3
 800edca:	f7ff ffcb 	bl	800ed64 <_ZN8touchgfx14MVPApplicationD1Ev>
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	4618      	mov	r0, r3
 800edd2:	3708      	adds	r7, #8
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}
 800edd8:	0802f7c0 	.word	0x0802f7c0

0800eddc <_ZN23FrontendApplicationBaseD0Ev>:
 800eddc:	b580      	push	{r7, lr}
 800edde:	b082      	sub	sp, #8
 800ede0:	af00      	add	r7, sp, #0
 800ede2:	6078      	str	r0, [r7, #4]
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f7ff ffe1 	bl	800edac <_ZN23FrontendApplicationBaseD1Ev>
 800edea:	f44f 71ac 	mov.w	r1, #344	; 0x158
 800edee:	6878      	ldr	r0, [r7, #4]
 800edf0:	f01a ff04 	bl	8029bfc <_ZdlPvj>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	4618      	mov	r0, r3
 800edf8:	3708      	adds	r7, #8
 800edfa:	46bd      	mov	sp, r7
 800edfc:	bd80      	pop	{r7, pc}

0800edfe <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800edfe:	b580      	push	{r7, lr}
 800ee00:	b082      	sub	sp, #8
 800ee02:	af00      	add	r7, sp, #0
 800ee04:	6078      	str	r0, [r7, #4]
    {
        gotoMainScreenNoTransition();
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 f87c 	bl	800ef04 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 800ee0c:	bf00      	nop
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2201      	movs	r2, #1
 800ee20:	721a      	strb	r2, [r3, #8]
    }
 800ee22:	bf00      	nop
 800ee24:	370c      	adds	r7, #12
 800ee26:	46bd      	mov	sp, r7
 800ee28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2c:	4770      	bx	lr

0800ee2e <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800ee2e:	b480      	push	{r7}
 800ee30:	b083      	sub	sp, #12
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
 800ee36:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	683a      	ldr	r2, [r7, #0]
 800ee3c:	605a      	str	r2, [r3, #4]
    }
 800ee3e:	bf00      	nop
 800ee40:	370c      	adds	r7, #12
 800ee42:	46bd      	mov	sp, r7
 800ee44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee48:	4770      	bx	lr
	...

0800ee4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/lana_screen/LanaView.hpp>
#include <gui/lana_screen/LanaPresenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	60f8      	str	r0, [r7, #12]
 800ee54:	60b9      	str	r1, [r7, #8]
 800ee56:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7ff ff1a 	bl	800ec94 <_ZN8touchgfx14MVPApplicationC1Ev>
 800ee60:	4a13      	ldr	r2, [pc, #76]	; (800eeb0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f000 f89f 	bl	800efb0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	687a      	ldr	r2, [r7, #4]
 800ee76:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800ee82:	f7ff fe4b 	bl	800eb1c <_ZN8touchgfx3HAL11getInstanceEv>
 800ee86:	4603      	mov	r3, r0
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	3208      	adds	r2, #8
 800ee8c:	6812      	ldr	r2, [r2, #0]
 800ee8e:	2100      	movs	r1, #0
 800ee90:	4618      	mov	r0, r3
 800ee92:	4790      	blx	r2
    touchgfx::Texts::setLanguage(GB);
 800ee94:	2000      	movs	r0, #0
 800ee96:	f003 f885 	bl	8011fa4 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD32bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800ee9a:	f7ff fe4b 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	4618      	mov	r0, r3
 800eea2:	f013 fd58 	bl	8022956 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>
}
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3710      	adds	r7, #16
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}
 800eeb0:	0802f7c0 	.word	0x0802f7c0

0800eeb4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800eeb4:	b480      	push	{r7}
 800eeb6:	b083      	sub	sp, #12
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	4618      	mov	r0, r3
 800eec2:	370c      	adds	r7, #12
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	6039      	str	r1, [r7, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	683a      	ldr	r2, [r7, #0]
 800eeda:	4611      	mov	r1, r2
 800eedc:	4618      	mov	r0, r3
 800eede:	f7ff ffe9 	bl	800eeb4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	685a      	ldr	r2, [r3, #4]
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	605a      	str	r2, [r3, #4]
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	683a      	ldr	r2, [r7, #0]
 800eeee:	3308      	adds	r3, #8
 800eef0:	3208      	adds	r2, #8
 800eef2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eef6:	e883 0003 	stmia.w	r3, {r0, r1}
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4618      	mov	r0, r3
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>:
 */

// Main

void FrontendApplicationBase::gotoMainScreenNoTransition()
{
 800ef04:	b590      	push	{r4, r7, lr}
 800ef06:	b089      	sub	sp, #36	; 0x24
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoMainScreenNoTransitionImpl);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 800ef12:	4b10      	ldr	r3, [pc, #64]	; (800ef54 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv+0x50>)
 800ef14:	61bb      	str	r3, [r7, #24]
 800ef16:	2300      	movs	r3, #0
 800ef18:	61fb      	str	r3, [r7, #28]
 800ef1a:	f107 0008 	add.w	r0, r7, #8
 800ef1e:	f107 0318 	add.w	r3, r7, #24
 800ef22:	cb0c      	ldmia	r3, {r2, r3}
 800ef24:	6879      	ldr	r1, [r7, #4]
 800ef26:	f000 f85f 	bl	800efe8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800ef2a:	f107 0308 	add.w	r3, r7, #8
 800ef2e:	4619      	mov	r1, r3
 800ef30:	4620      	mov	r0, r4
 800ef32:	f7ff ffcb 	bl	800eecc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800ef36:	f107 0308 	add.w	r3, r7, #8
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	f000 fa0e 	bl	800f35c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
}
 800ef4c:	bf00      	nop
 800ef4e:	3724      	adds	r7, #36	; 0x24
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd90      	pop	{r4, r7, pc}
 800ef54:	0800ef59 	.word	0x0800ef59

0800ef58 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoMainScreenNoTransitionImpl()
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af02      	add	r7, sp, #8
 800ef5e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<MainView, MainPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800ef74:	9300      	str	r3, [sp, #0]
 800ef76:	4b04      	ldr	r3, [pc, #16]	; (800ef88 <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x30>)
 800ef78:	4804      	ldr	r0, [pc, #16]	; (800ef8c <_ZN23FrontendApplicationBase30gotoMainScreenNoTransitionImplEv+0x34>)
 800ef7a:	f000 f867 	bl	800f04c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800ef7e:	bf00      	nop
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	2003c304 	.word	0x2003c304
 800ef8c:	2003c300 	.word	0x2003c300

0800ef90 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800ef90:	b480      	push	{r7}
 800ef92:	b083      	sub	sp, #12
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
 800ef98:	4a04      	ldr	r2, [pc, #16]	; (800efac <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	601a      	str	r2, [r3, #0]
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	4618      	mov	r0, r3
 800efa2:	370c      	adds	r7, #12
 800efa4:	46bd      	mov	sp, r7
 800efa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efaa:	4770      	bx	lr
 800efac:	0802f894 	.word	0x0802f894

0800efb0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	4618      	mov	r0, r3
 800efbc:	f7ff ffe8 	bl	800ef90 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800efc0:	4a08      	ldr	r2, [pc, #32]	; (800efe4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	601a      	str	r2, [r3, #0]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	2200      	movs	r2, #0
 800efca:	605a      	str	r2, [r3, #4]
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	609a      	str	r2, [r3, #8]
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	2200      	movs	r2, #0
 800efd6:	60da      	str	r2, [r3, #12]
    {
    }
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4618      	mov	r0, r3
 800efdc:	3708      	adds	r7, #8
 800efde:	46bd      	mov	sp, r7
 800efe0:	bd80      	pop	{r7, pc}
 800efe2:	bf00      	nop
 800efe4:	0802f80c 	.word	0x0802f80c

0800efe8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800efe8:	b580      	push	{r7, lr}
 800efea:	b084      	sub	sp, #16
 800efec:	af00      	add	r7, sp, #0
 800efee:	60f8      	str	r0, [r7, #12]
 800eff0:	60b9      	str	r1, [r7, #8]
 800eff2:	4639      	mov	r1, r7
 800eff4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	4618      	mov	r0, r3
 800effc:	f7ff ffc8 	bl	800ef90 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800f000:	4a08      	ldr	r2, [pc, #32]	; (800f024 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	601a      	str	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	68ba      	ldr	r2, [r7, #8]
 800f00a:	605a      	str	r2, [r3, #4]
 800f00c:	68fb      	ldr	r3, [r7, #12]
 800f00e:	3308      	adds	r3, #8
 800f010:	463a      	mov	r2, r7
 800f012:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f016:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	4618      	mov	r0, r3
 800f01e:	3710      	adds	r7, #16
 800f020:	46bd      	mov	sp, r7
 800f022:	bd80      	pop	{r7, pc}
 800f024:	0802f80c 	.word	0x0802f80c

0800f028 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4618      	mov	r0, r3
 800f034:	f7ff fd9a 	bl	800eb6c <_ZN8touchgfx10TransitionC1Ev>
 800f038:	4a03      	ldr	r2, [pc, #12]	; (800f048 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	601a      	str	r2, [r3, #0]
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4618      	mov	r0, r3
 800f042:	3708      	adds	r7, #8
 800f044:	46bd      	mov	sp, r7
 800f046:	bd80      	pop	{r7, pc}
 800f048:	0802f79c 	.word	0x0802f79c

0800f04c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800f04c:	b590      	push	{r4, r7, lr}
 800f04e:	b08f      	sub	sp, #60	; 0x3c
 800f050:	af00      	add	r7, sp, #0
 800f052:	60f8      	str	r0, [r7, #12]
 800f054:	60b9      	str	r1, [r7, #8]
 800f056:	607a      	str	r2, [r7, #4]
 800f058:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	689a      	ldr	r2, [r3, #8]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	689b      	ldr	r3, [r3, #8]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	3320      	adds	r3, #32
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4610      	mov	r0, r2
 800f06a:	4798      	blx	r3
 800f06c:	4603      	mov	r3, r0
 800f06e:	f243 7263 	movw	r2, #14179	; 0x3763
 800f072:	4293      	cmp	r3, r2
 800f074:	d805      	bhi.n	800f082 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x36>
 800f076:	4b7f      	ldr	r3, [pc, #508]	; (800f274 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800f078:	4a7f      	ldr	r2, [pc, #508]	; (800f278 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f07a:	21a3      	movs	r1, #163	; 0xa3
 800f07c:	487f      	ldr	r0, [pc, #508]	; (800f27c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f07e:	f01a fe67 	bl	8029d50 <__assert_func>
 800f082:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	685a      	ldr	r2, [r3, #4]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	685b      	ldr	r3, [r3, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	3320      	adds	r3, #32
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	4610      	mov	r0, r2
 800f094:	4798      	blx	r3
 800f096:	4603      	mov	r3, r0
 800f098:	2b0f      	cmp	r3, #15
 800f09a:	d805      	bhi.n	800f0a8 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5c>
 800f09c:	4b78      	ldr	r3, [pc, #480]	; (800f280 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x234>)
 800f09e:	4a76      	ldr	r2, [pc, #472]	; (800f278 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f0a0:	21a4      	movs	r1, #164	; 0xa4
 800f0a2:	4876      	ldr	r0, [pc, #472]	; (800f27c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f0a4:	f01a fe54 	bl	8029d50 <__assert_func>
 800f0a8:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	68da      	ldr	r2, [r3, #12]
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	68db      	ldr	r3, [r3, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	3320      	adds	r3, #32
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	4610      	mov	r0, r2
 800f0ba:	4798      	blx	r3
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b0b      	cmp	r3, #11
 800f0c0:	d805      	bhi.n	800f0ce <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x82>
 800f0c2:	4b70      	ldr	r3, [pc, #448]	; (800f284 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x238>)
 800f0c4:	4a6c      	ldr	r2, [pc, #432]	; (800f278 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800f0c6:	21a5      	movs	r1, #165	; 0xa5
 800f0c8:	486c      	ldr	r0, [pc, #432]	; (800f27c <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800f0ca:	f01a fe41 	bl	8029d50 <__assert_func>
 800f0ce:	bf00      	nop
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800f0d4:	68bb      	ldr	r3, [r7, #8]
 800f0d6:	627b      	str	r3, [r7, #36]	; 0x24
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800f0dc:	f00b ff70 	bl	801afc0 <_ZN8touchgfx11Application11getInstanceEv>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f00b ff72 	bl	801afcc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800f0e8:	6a3b      	ldr	r3, [r7, #32]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d008      	beq.n	800f102 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
        (*currentTrans)->tearDown();
 800f0f0:	6a3b      	ldr	r3, [r7, #32]
 800f0f2:	681a      	ldr	r2, [r3, #0]
 800f0f4:	6a3b      	ldr	r3, [r7, #32]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	330c      	adds	r3, #12
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	4610      	mov	r0, r2
 800f100:	4798      	blx	r3
    if (*currentTrans)
 800f102:	6a3b      	ldr	r3, [r7, #32]
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d007      	beq.n	800f11a <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xce>
        (*currentTrans)->~Transition();
 800f10a:	6a3b      	ldr	r3, [r7, #32]
 800f10c:	681a      	ldr	r2, [r3, #0]
 800f10e:	6a3b      	ldr	r3, [r7, #32]
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4610      	mov	r0, r2
 800f118:	4798      	blx	r3
    if (*currentScreen)
 800f11a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f11c:	681b      	ldr	r3, [r3, #0]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d008      	beq.n	800f134 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe8>
        (*currentScreen)->tearDownScreen();
 800f122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f124:	681a      	ldr	r2, [r3, #0]
 800f126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	3314      	adds	r3, #20
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	4610      	mov	r0, r2
 800f132:	4798      	blx	r3
    if (*currentPresenter)
 800f134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d008      	beq.n	800f14e <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x102>
        (*currentPresenter)->deactivate();
 800f13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f13e:	681a      	ldr	r2, [r3, #0]
 800f140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	3304      	adds	r3, #4
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4610      	mov	r0, r2
 800f14c:	4798      	blx	r3
    if (*currentScreen)
 800f14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	2b00      	cmp	r3, #0
 800f154:	d007      	beq.n	800f166 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x11a>
        (*currentScreen)->~Screen();
 800f156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f158:	681a      	ldr	r2, [r3, #0]
 800f15a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	4610      	mov	r0, r2
 800f164:	4798      	blx	r3
    if (*currentPresenter)
 800f166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d008      	beq.n	800f180 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x134>
        (*currentPresenter)->~Presenter();
 800f16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	3308      	adds	r3, #8
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	4610      	mov	r0, r2
 800f17e:	4798      	blx	r3
}
 800f180:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	2100      	movs	r1, #0
 800f188:	4618      	mov	r0, r3
 800f18a:	f000 f87d 	bl	800f288 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800f18e:	4603      	mov	r3, r0
 800f190:	4619      	mov	r1, r3
 800f192:	200c      	movs	r0, #12
 800f194:	f7ff fc0c 	bl	800e9b0 <_ZnwjPv>
 800f198:	4604      	mov	r4, r0
 800f19a:	4620      	mov	r0, r4
 800f19c:	f7ff ff44 	bl	800f028 <_ZN8touchgfx12NoTransitionC1Ev>
 800f1a0:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	689b      	ldr	r3, [r3, #8]
 800f1a6:	2100      	movs	r1, #0
 800f1a8:	4618      	mov	r0, r3
 800f1aa:	f000 f880 	bl	800f2ae <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	f243 7064 	movw	r0, #14180	; 0x3764
 800f1b6:	f7ff fbfb 	bl	800e9b0 <_ZnwjPv>
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	4620      	mov	r0, r4
 800f1be:	f003 f943 	bl	8012448 <_ZN8MainViewC1Ev>
 800f1c2:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	685b      	ldr	r3, [r3, #4]
 800f1c8:	2100      	movs	r1, #0
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f000 f882 	bl	800f2d4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	2010      	movs	r0, #16
 800f1d6:	f7ff fbeb 	bl	800e9b0 <_ZnwjPv>
 800f1da:	4604      	mov	r4, r0
 800f1dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f1de:	4620      	mov	r0, r4
 800f1e0:	f003 f8da 	bl	8012398 <_ZN13MainPresenterC1ER8MainView>
 800f1e4:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1ea:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800f1ec:	68bb      	ldr	r3, [r7, #8]
 800f1ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f1f0:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1f6:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800f1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d002      	beq.n	800f204 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b8>
 800f1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f200:	3304      	adds	r3, #4
 800f202:	e000      	b.n	800f206 <_ZN8touchgfx14makeTransitionI8MainView13MainPresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1ba>
 800f204:	2300      	movs	r3, #0
 800f206:	4619      	mov	r1, r3
 800f208:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800f20a:	f7ff fd9d 	bl	800ed48 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800f20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f210:	3304      	adds	r3, #4
 800f212:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800f214:	4618      	mov	r0, r3
 800f216:	f7ff fe0a 	bl	800ee2e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800f21a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f21c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f21e:	4618      	mov	r0, r3
 800f220:	f000 f86b 	bl	800f2fa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>
 800f224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f226:	61fb      	str	r3, [r7, #28]
 800f228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f22a:	61bb      	str	r3, [r7, #24]
 800f22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f22e:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800f230:	69fb      	ldr	r3, [r7, #28]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	330c      	adds	r3, #12
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	69f8      	ldr	r0, [r7, #28]
 800f23a:	4798      	blx	r3
    newPresenter->activate();
 800f23c:	69bb      	ldr	r3, [r7, #24]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	69b8      	ldr	r0, [r7, #24]
 800f244:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800f246:	6979      	ldr	r1, [r7, #20]
 800f248:	69f8      	ldr	r0, [r7, #28]
 800f24a:	f00d fb61 	bl	801c910 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800f24e:	697b      	ldr	r3, [r7, #20]
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	3310      	adds	r3, #16
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	6978      	ldr	r0, [r7, #20]
 800f258:	4798      	blx	r3
    newTransition->invalidate();
 800f25a:	697b      	ldr	r3, [r7, #20]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	3314      	adds	r3, #20
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	6978      	ldr	r0, [r7, #20]
 800f264:	4798      	blx	r3
}
 800f266:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f26a:	4618      	mov	r0, r3
 800f26c:	373c      	adds	r7, #60	; 0x3c
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd90      	pop	{r4, r7, pc}
 800f272:	bf00      	nop
 800f274:	0802d080 	.word	0x0802d080
 800f278:	0802d110 	.word	0x0802d110
 800f27c:	0802d210 	.word	0x0802d210
 800f280:	0802d254 	.word	0x0802d254
 800f284:	0802d2f8 	.word	0x0802d2f8

0800f288 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	460b      	mov	r3, r1
 800f292:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	3324      	adds	r3, #36	; 0x24
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	887a      	ldrh	r2, [r7, #2]
 800f29e:	4611      	mov	r1, r2
 800f2a0:	6878      	ldr	r0, [r7, #4]
 800f2a2:	4798      	blx	r3
 800f2a4:	4603      	mov	r3, r0
    }
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3708      	adds	r7, #8
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <_ZN8touchgfx17AbstractPartition2atI8MainViewEERT_t>:
    T& at(const uint16_t index)
 800f2ae:	b580      	push	{r7, lr}
 800f2b0:	b082      	sub	sp, #8
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	3324      	adds	r3, #36	; 0x24
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	887a      	ldrh	r2, [r7, #2]
 800f2c4:	4611      	mov	r1, r2
 800f2c6:	6878      	ldr	r0, [r7, #4]
 800f2c8:	4798      	blx	r3
 800f2ca:	4603      	mov	r3, r0
    }
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3708      	adds	r7, #8
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <_ZN8touchgfx17AbstractPartition2atI13MainPresenterEERT_t>:
    T& at(const uint16_t index)
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	3324      	adds	r3, #36	; 0x24
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	887a      	ldrh	r2, [r7, #2]
 800f2ea:	4611      	mov	r1, r2
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	4798      	blx	r3
 800f2f0:	4603      	mov	r3, r0
    }
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3708      	adds	r7, #8
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <_ZN8touchgfx4ViewI13MainPresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800f2fa:	b480      	push	{r7}
 800f2fc:	b083      	sub	sp, #12
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	683a      	ldr	r2, [r7, #0]
 800f308:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f30a:	bf00      	nop
 800f30c:	370c      	adds	r7, #12
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
	...

0800f318 <_ZN8touchgfx12NoTransitionD1Ev>:
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	4a05      	ldr	r2, [pc, #20]	; (800f338 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	4618      	mov	r0, r3
 800f32a:	f7ff fc35 	bl	800eb98 <_ZN8touchgfx10TransitionD1Ev>
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	4618      	mov	r0, r3
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	0802f79c 	.word	0x0802f79c

0800f33c <_ZN8touchgfx12NoTransitionD0Ev>:
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b082      	sub	sp, #8
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	f7ff ffe7 	bl	800f318 <_ZN8touchgfx12NoTransitionD1Ev>
 800f34a:	210c      	movs	r1, #12
 800f34c:	6878      	ldr	r0, [r7, #4]
 800f34e:	f01a fc55 	bl	8029bfc <_ZdlPvj>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4618      	mov	r0, r3
 800f356:	3708      	adds	r7, #8
 800f358:	46bd      	mov	sp, r7
 800f35a:	bd80      	pop	{r7, pc}

0800f35c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b082      	sub	sp, #8
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	4a05      	ldr	r2, [pc, #20]	; (800f37c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	601a      	str	r2, [r3, #0]
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4618      	mov	r0, r3
 800f36e:	f7ff fbb5 	bl	800eadc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	4618      	mov	r0, r3
 800f376:	3708      	adds	r7, #8
 800f378:	46bd      	mov	sp, r7
 800f37a:	bd80      	pop	{r7, pc}
 800f37c:	0802f80c 	.word	0x0802f80c

0800f380 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6878      	ldr	r0, [r7, #4]
 800f38a:	f7ff ffe7 	bl	800f35c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800f38e:	2110      	movs	r1, #16
 800f390:	6878      	ldr	r0, [r7, #4]
 800f392:	f01a fc33 	bl	8029bfc <_ZdlPvj>
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4618      	mov	r0, r3
 800f39a:	3708      	adds	r7, #8
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b082      	sub	sp, #8
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	687a      	ldr	r2, [r7, #4]
 800f3ae:	68d2      	ldr	r2, [r2, #12]
 800f3b0:	1052      	asrs	r2, r2, #1
 800f3b2:	1899      	adds	r1, r3, r2
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	f003 0301 	and.w	r3, r3, #1
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d102      	bne.n	800f3c6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	689b      	ldr	r3, [r3, #8]
 800f3c4:	e00a      	b.n	800f3dc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	685b      	ldr	r3, [r3, #4]
 800f3ca:	687a      	ldr	r2, [r7, #4]
 800f3cc:	68d2      	ldr	r2, [r2, #12]
 800f3ce:	1052      	asrs	r2, r2, #1
 800f3d0:	4413      	add	r3, r2
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	6892      	ldr	r2, [r2, #8]
 800f3d8:	4413      	add	r3, r2
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	4608      	mov	r0, r1
 800f3de:	4798      	blx	r3
    }
 800f3e0:	bf00      	nop
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800f3e8:	b480      	push	{r7}
 800f3ea:	b083      	sub	sp, #12
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	685b      	ldr	r3, [r3, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d010      	beq.n	800f41a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	689b      	ldr	r3, [r3, #8]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d107      	bne.n	800f410 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d101      	bne.n	800f410 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800f40c:	2301      	movs	r3, #1
 800f40e:	e000      	b.n	800f412 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800f410:	2300      	movs	r3, #0
 800f412:	2b01      	cmp	r3, #1
 800f414:	d001      	beq.n	800f41a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800f416:	2301      	movs	r3, #1
 800f418:	e000      	b.n	800f41c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800f41a:	2300      	movs	r3, #0
    }
 800f41c:	4618      	mov	r0, r3
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr

0800f428 <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800f428:	b480      	push	{r7}
 800f42a:	b083      	sub	sp, #12
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2200      	movs	r2, #0
 800f434:	801a      	strh	r2, [r3, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	2200      	movs	r2, #0
 800f43a:	805a      	strh	r2, [r3, #2]
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2200      	movs	r2, #0
 800f440:	809a      	strh	r2, [r3, #4]
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	2200      	movs	r2, #0
 800f446:	80da      	strh	r2, [r3, #6]
    {
    }
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	4618      	mov	r0, r3
 800f44c:	370c      	adds	r7, #12
 800f44e:	46bd      	mov	sp, r7
 800f450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f454:	4770      	bx	lr
	...

0800f458 <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800f460:	4a14      	ldr	r2, [pc, #80]	; (800f4b4 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	601a      	str	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	3304      	adds	r3, #4
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7ff ffdc 	bl	800f428 <_ZN8touchgfx4RectC1Ev>
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	330c      	adds	r3, #12
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff ffd7 	bl	800f428 <_ZN8touchgfx4RectC1Ev>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2200      	movs	r2, #0
 800f47e:	615a      	str	r2, [r3, #20]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	2200      	movs	r2, #0
 800f484:	619a      	str	r2, [r3, #24]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	61da      	str	r2, [r3, #28]
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2200      	movs	r2, #0
 800f490:	841a      	strh	r2, [r3, #32]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	2200      	movs	r2, #0
 800f496:	845a      	strh	r2, [r3, #34]	; 0x22
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	2200      	movs	r2, #0
 800f49c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	2201      	movs	r2, #1
 800f4a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4618      	mov	r0, r3
 800f4ac:	3708      	adds	r7, #8
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	bd80      	pop	{r7, pc}
 800f4b2:	bf00      	nop
 800f4b4:	0803094c 	.word	0x0803094c

0800f4b8 <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
    {
 800f4c0:	4a04      	ldr	r2, [pc, #16]	; (800f4d4 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	601a      	str	r2, [r3, #0]
    }
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr
 800f4d4:	0803094c 	.word	0x0803094c

0800f4d8 <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
    }
 800f4e0:	6878      	ldr	r0, [r7, #4]
 800f4e2:	f7ff ffe9 	bl	800f4b8 <_ZN8touchgfx8DrawableD1Ev>
 800f4e6:	2128      	movs	r1, #40	; 0x28
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f01a fb87 	bl	8029bfc <_ZdlPvj>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3708      	adds	r7, #8
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800f4f8:	b480      	push	{r7}
 800f4fa:	b083      	sub	sp, #12
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	460b      	mov	r3, r1
 800f502:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	887a      	ldrh	r2, [r7, #2]
 800f508:	809a      	strh	r2, [r3, #4]
    }
 800f50a:	bf00      	nop
 800f50c:	370c      	adds	r7, #12
 800f50e:	46bd      	mov	sp, r7
 800f510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f514:	4770      	bx	lr

0800f516 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800f516:	b480      	push	{r7}
 800f518:	b083      	sub	sp, #12
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	460b      	mov	r3, r1
 800f520:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	887a      	ldrh	r2, [r7, #2]
 800f526:	80da      	strh	r2, [r3, #6]
    }
 800f528:	bf00      	nop
 800f52a:	370c      	adds	r7, #12
 800f52c:	46bd      	mov	sp, r7
 800f52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f532:	4770      	bx	lr

0800f534 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800f534:	b480      	push	{r7}
 800f536:	b083      	sub	sp, #12
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
 800f53c:	460b      	mov	r3, r1
 800f53e:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	887a      	ldrh	r2, [r7, #2]
 800f544:	811a      	strh	r2, [r3, #8]
    }
 800f546:	bf00      	nop
 800f548:	370c      	adds	r7, #12
 800f54a:	46bd      	mov	sp, r7
 800f54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f550:	4770      	bx	lr

0800f552 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800f552:	b480      	push	{r7}
 800f554:	b083      	sub	sp, #12
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	460b      	mov	r3, r1
 800f55c:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	887a      	ldrh	r2, [r7, #2]
 800f562:	815a      	strh	r2, [r3, #10]
    }
 800f564:	bf00      	nop
 800f566:	370c      	adds	r7, #12
 800f568:	46bd      	mov	sp, r7
 800f56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56e:	4770      	bx	lr

0800f570 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800f570:	b480      	push	{r7}
 800f572:	b083      	sub	sp, #12
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
    {
    }
 800f578:	bf00      	nop
 800f57a:	370c      	adds	r7, #12
 800f57c:	46bd      	mov	sp, r7
 800f57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f582:	4770      	bx	lr

0800f584 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800f584:	b480      	push	{r7}
 800f586:	b083      	sub	sp, #12
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f58e:	bf00      	nop
 800f590:	370c      	adds	r7, #12
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800f59a:	b480      	push	{r7}
 800f59c:	b083      	sub	sp, #12
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
 800f5a2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f5a4:	bf00      	nop
 800f5a6:	370c      	adds	r7, #12
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr

0800f5b0 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
 800f5b8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800f5ba:	bf00      	nop
 800f5bc:	370c      	adds	r7, #12
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr

0800f5c6 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800f5c6:	b480      	push	{r7}
 800f5c8:	b083      	sub	sp, #12
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
    {
    }
 800f5ce:	bf00      	nop
 800f5d0:	370c      	adds	r7, #12
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr

0800f5da <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800f5da:	b580      	push	{r7, lr}
 800f5dc:	b082      	sub	sp, #8
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	807b      	strh	r3, [r7, #2]
 800f5e6:	4613      	mov	r3, r2
 800f5e8:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	3354      	adds	r3, #84	; 0x54
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	8879      	ldrh	r1, [r7, #2]
 800f5f4:	687a      	ldr	r2, [r7, #4]
 800f5f6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800f5fa:	b292      	uxth	r2, r2
 800f5fc:	1a8a      	subs	r2, r1, r2
 800f5fe:	b292      	uxth	r2, r2
 800f600:	b210      	sxth	r0, r2
 800f602:	8839      	ldrh	r1, [r7, #0]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800f60a:	b292      	uxth	r2, r2
 800f60c:	1a8a      	subs	r2, r1, r2
 800f60e:	b292      	uxth	r2, r2
 800f610:	b212      	sxth	r2, r2
 800f612:	4601      	mov	r1, r0
 800f614:	6878      	ldr	r0, [r7, #4]
 800f616:	4798      	blx	r3
    }
 800f618:	bf00      	nop
 800f61a:	3708      	adds	r7, #8
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bd80      	pop	{r7, pc}

0800f620 <_ZN8touchgfx9ContainerC1Ev>:
 * @see Drawable
 */
class Container : public Drawable
{
public:
    Container()
 800f620:	b580      	push	{r7, lr}
 800f622:	b082      	sub	sp, #8
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
        : Drawable(),
          firstChild(0)
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7ff ff14 	bl	800f458 <_ZN8touchgfx8DrawableC1Ev>
 800f630:	4a05      	ldr	r2, [pc, #20]	; (800f648 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	601a      	str	r2, [r3, #0]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	2200      	movs	r2, #0
 800f63a:	629a      	str	r2, [r3, #40]	; 0x28
    {
    }
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	4618      	mov	r0, r3
 800f640:	3708      	adds	r7, #8
 800f642:	46bd      	mov	sp, r7
 800f644:	bd80      	pop	{r7, pc}
 800f646:	bf00      	nop
 800f648:	08030274 	.word	0x08030274

0800f64c <_ZN8touchgfx9Container13getFirstChildEv>:
     * @return Pointer to the first drawable added to this container. If nothing has been
     *         added return zero.
     *
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
 800f64c:	b480      	push	{r7}
 800f64e:	b083      	sub	sp, #12
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
    {
        return firstChild;
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800f658:	4618      	mov	r0, r3
 800f65a:	370c      	adds	r7, #12
 800f65c:	46bd      	mov	sp, r7
 800f65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f662:	4770      	bx	lr

0800f664 <_ZN8touchgfx9ContainerD1Ev>:
class Container : public Drawable
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
 800f66c:	4a05      	ldr	r2, [pc, #20]	; (800f684 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	601a      	str	r2, [r3, #0]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	4618      	mov	r0, r3
 800f676:	f7ff ff1f 	bl	800f4b8 <_ZN8touchgfx8DrawableD1Ev>
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	4618      	mov	r0, r3
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	08030274 	.word	0x08030274

0800f688 <_ZN8touchgfx9ContainerD0Ev>:
 800f688:	b580      	push	{r7, lr}
 800f68a:	b082      	sub	sp, #8
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7ff ffe7 	bl	800f664 <_ZN8touchgfx9ContainerD1Ev>
 800f696:	212c      	movs	r1, #44	; 0x2c
 800f698:	6878      	ldr	r0, [r7, #4]
 800f69a:	f01a faaf 	bl	8029bfc <_ZdlPvj>
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	4618      	mov	r0, r3
 800f6a2:	3708      	adds	r7, #8
 800f6a4:	46bd      	mov	sp, r7
 800f6a6:	bd80      	pop	{r7, pc}

0800f6a8 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f6a8:	b480      	push	{r7}
 800f6aa:	b083      	sub	sp, #12
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	6078      	str	r0, [r7, #4]
 800f6b0:	6039      	str	r1, [r7, #0]
        : color(col)
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	683a      	ldr	r2, [r7, #0]
 800f6b6:	601a      	str	r2, [r3, #0]
    }
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	370c      	adds	r7, #12
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr

0800f6c6 <_ZN8touchgfx4RectC1Essss>:
     * @param  rectX      The x coordinate.
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
 800f6c6:	b480      	push	{r7}
 800f6c8:	b085      	sub	sp, #20
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	60f8      	str	r0, [r7, #12]
 800f6ce:	4608      	mov	r0, r1
 800f6d0:	4611      	mov	r1, r2
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	817b      	strh	r3, [r7, #10]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	813b      	strh	r3, [r7, #8]
 800f6dc:	4613      	mov	r3, r2
 800f6de:	80fb      	strh	r3, [r7, #6]
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	897a      	ldrh	r2, [r7, #10]
 800f6e4:	801a      	strh	r2, [r3, #0]
 800f6e6:	68fb      	ldr	r3, [r7, #12]
 800f6e8:	893a      	ldrh	r2, [r7, #8]
 800f6ea:	805a      	strh	r2, [r3, #2]
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	88fa      	ldrh	r2, [r7, #6]
 800f6f0:	809a      	strh	r2, [r3, #4]
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	8b3a      	ldrh	r2, [r7, #24]
 800f6f6:	80da      	strh	r2, [r3, #6]
    {
    }
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3714      	adds	r7, #20
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
    virtual void invalidateContent() const
 800f706:	b580      	push	{r7, lr}
 800f708:	b082      	sub	sp, #8
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
        if (visible)
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800f714:	2b00      	cmp	r3, #0
 800f716:	d005      	beq.n	800f724 <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
            invalidate();
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3314      	adds	r3, #20
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	4798      	blx	r3
    }
 800f724:	bf00      	nop
 800f726:	3708      	adds	r7, #8
 800f728:	46bd      	mov	sp, r7
 800f72a:	bd80      	pop	{r7, pc}

0800f72c <_ZN8touchgfx8Drawable13getFirstChildEv>:
    virtual Drawable* getFirstChild()
 800f72c:	b480      	push	{r7}
 800f72e:	b083      	sub	sp, #12
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
        return 0;
 800f734:	2300      	movs	r3, #0
    }
 800f736:	4618      	mov	r0, r3
 800f738:	370c      	adds	r7, #12
 800f73a:	46bd      	mov	sp, r7
 800f73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f740:	4770      	bx	lr

0800f742 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800f742:	b580      	push	{r7, lr}
 800f744:	b084      	sub	sp, #16
 800f746:	af00      	add	r7, sp, #0
 800f748:	60f8      	str	r0, [r7, #12]
 800f74a:	4608      	mov	r0, r1
 800f74c:	4611      	mov	r1, r2
 800f74e:	461a      	mov	r2, r3
 800f750:	4603      	mov	r3, r0
 800f752:	817b      	strh	r3, [r7, #10]
 800f754:	460b      	mov	r3, r1
 800f756:	813b      	strh	r3, [r7, #8]
 800f758:	4613      	mov	r3, r2
 800f75a:	80fb      	strh	r3, [r7, #6]
        setXY(x, y);
 800f75c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800f760:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f764:	4619      	mov	r1, r3
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f000 f80c 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800f76c:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800f770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f774:	4619      	mov	r1, r3
 800f776:	68f8      	ldr	r0, [r7, #12]
 800f778:	f000 f822 	bl	800f7c0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800f77c:	bf00      	nop
 800f77e:	3710      	adds	r7, #16
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <_ZN8touchgfx8Drawable5setXYEss>:
    void setXY(int16_t x, int16_t y)
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	460b      	mov	r3, r1
 800f78e:	807b      	strh	r3, [r7, #2]
 800f790:	4613      	mov	r3, r2
 800f792:	803b      	strh	r3, [r7, #0]
        setX(x);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	3330      	adds	r3, #48	; 0x30
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f7a0:	4611      	mov	r1, r2
 800f7a2:	6878      	ldr	r0, [r7, #4]
 800f7a4:	4798      	blx	r3
        setY(y);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	3334      	adds	r3, #52	; 0x34
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f7b2:	4611      	mov	r1, r2
 800f7b4:	6878      	ldr	r0, [r7, #4]
 800f7b6:	4798      	blx	r3
    }
 800f7b8:	bf00      	nop
 800f7ba:	3708      	adds	r7, #8
 800f7bc:	46bd      	mov	sp, r7
 800f7be:	bd80      	pop	{r7, pc}

0800f7c0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
    void setWidthHeight(int16_t width, int16_t height)
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0
 800f7c6:	6078      	str	r0, [r7, #4]
 800f7c8:	460b      	mov	r3, r1
 800f7ca:	807b      	strh	r3, [r7, #2]
 800f7cc:	4613      	mov	r3, r2
 800f7ce:	803b      	strh	r3, [r7, #0]
        setWidth(width);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	3338      	adds	r3, #56	; 0x38
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800f7dc:	4611      	mov	r1, r2
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	4798      	blx	r3
        setHeight(height);
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	333c      	adds	r3, #60	; 0x3c
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	4798      	blx	r3
    }
 800f7f4:	bf00      	nop
 800f7f6:	3708      	adds	r7, #8
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}

0800f7fc <_ZNK8touchgfx8Drawable9isVisibleEv>:
    bool isVisible() const
 800f7fc:	b480      	push	{r7}
 800f7fe:	b083      	sub	sp, #12
 800f800:	af00      	add	r7, sp, #0
 800f802:	6078      	str	r0, [r7, #4]
        return visible;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800f80a:	4618      	mov	r0, r3
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr

0800f816 <_ZNK8touchgfx8Drawable11isTouchableEv>:
    bool isTouchable() const
 800f816:	b480      	push	{r7}
 800f818:	b083      	sub	sp, #12
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
        return touchable;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800f824:	4618      	mov	r0, r3
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f83e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f846:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f84e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f850:	bf00      	nop
 800f852:	370c      	adds	r7, #12
 800f854:	46bd      	mov	sp, r7
 800f856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85a:	4770      	bx	lr

0800f85c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f85c:	b580      	push	{r7, lr}
 800f85e:	b084      	sub	sp, #16
 800f860:	af00      	add	r7, sp, #0
 800f862:	60f8      	str	r0, [r7, #12]
 800f864:	60b9      	str	r1, [r7, #8]
 800f866:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800f868:	68f8      	ldr	r0, [r7, #12]
 800f86a:	f7ff ffe1 	bl	800f830 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681a      	ldr	r2, [r3, #0]
 800f872:	68fb      	ldr	r3, [r7, #12]
 800f874:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	68fa      	ldr	r2, [r7, #12]
 800f87a:	601a      	str	r2, [r3, #0]
    }
 800f87c:	bf00      	nop
 800f87e:	3710      	adds	r7, #16
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}

0800f884 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	60f8      	str	r0, [r7, #12]
 800f88c:	607b      	str	r3, [r7, #4]
 800f88e:	460b      	mov	r3, r1
 800f890:	817b      	strh	r3, [r7, #10]
 800f892:	4613      	mov	r3, r2
 800f894:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	4618      	mov	r0, r3
 800f89a:	f7ff ffaf 	bl	800f7fc <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f89e:	4603      	mov	r3, r0
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d008      	beq.n	800f8b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	4618      	mov	r0, r3
 800f8a8:	f7ff ffb5 	bl	800f816 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d001      	beq.n	800f8b6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f8b2:	2301      	movs	r3, #1
 800f8b4:	e000      	b.n	800f8b8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d002      	beq.n	800f8c2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	601a      	str	r2, [r3, #0]
        }
    }
 800f8c2:	bf00      	nop
 800f8c4:	3710      	adds	r7, #16
 800f8c6:	46bd      	mov	sp, r7
 800f8c8:	bd80      	pop	{r7, pc}
	...

0800f8cc <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800f8cc:	b580      	push	{r7, lr}
 800f8ce:	b082      	sub	sp, #8
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	6078      	str	r0, [r7, #4]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7ff fdbe 	bl	800f458 <_ZN8touchgfx8DrawableC1Ev>
 800f8dc:	4a03      	ldr	r2, [pc, #12]	; (800f8ec <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	601a      	str	r2, [r3, #0]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3708      	adds	r7, #8
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bd80      	pop	{r7, pc}
 800f8ec:	0802f9f8 	.word	0x0802f9f8

0800f8f0 <_ZN8touchgfx6WidgetD1Ev>:
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b082      	sub	sp, #8
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
 800f8f8:	4a05      	ldr	r2, [pc, #20]	; (800f910 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	601a      	str	r2, [r3, #0]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	4618      	mov	r0, r3
 800f902:	f7ff fdd9 	bl	800f4b8 <_ZN8touchgfx8DrawableD1Ev>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	4618      	mov	r0, r3
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	0802f9f8 	.word	0x0802f9f8

0800f914 <_ZN8touchgfx6WidgetD0Ev>:
 800f914:	b580      	push	{r7, lr}
 800f916:	b082      	sub	sp, #8
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6878      	ldr	r0, [r7, #4]
 800f91e:	f7ff ffe7 	bl	800f8f0 <_ZN8touchgfx6WidgetD1Ev>
 800f922:	2128      	movs	r1, #40	; 0x28
 800f924:	6878      	ldr	r0, [r7, #4]
 800f926:	f01a f969 	bl	8029bfc <_ZdlPvj>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800f934:	b580      	push	{r7, lr}
 800f936:	b082      	sub	sp, #8
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	4618      	mov	r0, r3
 800f940:	2326      	movs	r3, #38	; 0x26
 800f942:	461a      	mov	r2, r3
 800f944:	2100      	movs	r1, #0
 800f946:	f01a fa8f 	bl	8029e68 <memset>
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7ff ffbd 	bl	800f8cc <_ZN8touchgfx6WidgetC1Ev>
 800f952:	4a09      	ldr	r2, [pc, #36]	; (800f978 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	601a      	str	r2, [r3, #0]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	22ff      	movs	r2, #255	; 0xff
 800f95c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	3328      	adds	r3, #40	; 0x28
 800f964:	2100      	movs	r1, #0
 800f966:	4618      	mov	r0, r3
 800f968:	f7ff fe9e 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	4618      	mov	r0, r3
 800f970:	3708      	adds	r7, #8
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	08030738 	.word	0x08030738

0800f97c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800f97c:	b480      	push	{r7}
 800f97e:	b083      	sub	sp, #12
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	683a      	ldr	r2, [r7, #0]
 800f98a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f98c:	bf00      	nop
 800f98e:	370c      	adds	r7, #12
 800f990:	46bd      	mov	sp, r7
 800f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f996:	4770      	bx	lr

0800f998 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800f998:	b580      	push	{r7, lr}
 800f99a:	b082      	sub	sp, #8
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	4a05      	ldr	r2, [pc, #20]	; (800f9b8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	601a      	str	r2, [r3, #0]
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7ff ffa1 	bl	800f8f0 <_ZN8touchgfx6WidgetD1Ev>
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	4618      	mov	r0, r3
 800f9b2:	3708      	adds	r7, #8
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	bd80      	pop	{r7, pc}
 800f9b8:	08030738 	.word	0x08030738

0800f9bc <_ZN8touchgfx3BoxD0Ev>:
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b082      	sub	sp, #8
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
 800f9c4:	6878      	ldr	r0, [r7, #4]
 800f9c6:	f7ff ffe7 	bl	800f998 <_ZN8touchgfx3BoxD1Ev>
 800f9ca:	212c      	movs	r1, #44	; 0x2c
 800f9cc:	6878      	ldr	r0, [r7, #4]
 800f9ce:	f01a f915 	bl	8029bfc <_ZdlPvj>
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3708      	adds	r7, #8
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}

0800f9dc <_ZN8touchgfx13BoxWithBorderC1Ev>:
 * BoxWithBorder will function just like a Box.
 */
class BoxWithBorder : public Box
{
public:
    BoxWithBorder()
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
        : Box(), borderColor(0), borderSize(0)
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7ff ffa4 	bl	800f934 <_ZN8touchgfx3BoxC1Ev>
 800f9ec:	4a08      	ldr	r2, [pc, #32]	; (800fa10 <_ZN8touchgfx13BoxWithBorderC1Ev+0x34>)
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	601a      	str	r2, [r3, #0]
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	332c      	adds	r3, #44	; 0x2c
 800f9f6:	2100      	movs	r1, #0
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	f7ff fe55 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2200      	movs	r2, #0
 800fa02:	861a      	strh	r2, [r3, #48]	; 0x30
    {
    }
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	4618      	mov	r0, r3
 800fa08:	3708      	adds	r7, #8
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}
 800fa0e:	bf00      	nop
 800fa10:	08030830 	.word	0x08030830

0800fa14 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
     *
     * @param  colorBorder The color of the border.
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
 800fa14:	b480      	push	{r7}
 800fa16:	b083      	sub	sp, #12
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	6039      	str	r1, [r7, #0]
    {
        borderColor = colorBorder;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	683a      	ldr	r2, [r7, #0]
 800fa22:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 800fa24:	bf00      	nop
 800fa26:	370c      	adds	r7, #12
 800fa28:	46bd      	mov	sp, r7
 800fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2e:	4770      	bx	lr

0800fa30 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>:
     *
     * @param  size The width of the border.
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	460b      	mov	r3, r1
 800fa3a:	807b      	strh	r3, [r7, #2]
    {
        borderSize = size;
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	887a      	ldrh	r2, [r7, #2]
 800fa40:	861a      	strh	r2, [r3, #48]	; 0x30
    }
 800fa42:	bf00      	nop
 800fa44:	370c      	adds	r7, #12
 800fa46:	46bd      	mov	sp, r7
 800fa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4c:	4770      	bx	lr
	...

0800fa50 <_ZN8touchgfx9TypedTextC1Et>:
    TypedText(const TypedTextId id = TYPED_TEXT_INVALID)
 800fa50:	b480      	push	{r7}
 800fa52:	b083      	sub	sp, #12
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	6078      	str	r0, [r7, #4]
 800fa58:	460b      	mov	r3, r1
 800fa5a:	807b      	strh	r3, [r7, #2]
        : typedTextId(id)
 800fa5c:	4a06      	ldr	r2, [pc, #24]	; (800fa78 <_ZN8touchgfx9TypedTextC1Et+0x28>)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	887a      	ldrh	r2, [r7, #2]
 800fa66:	809a      	strh	r2, [r3, #4]
    }
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	370c      	adds	r7, #12
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa74:	4770      	bx	lr
 800fa76:	bf00      	nop
 800fa78:	0802f734 	.word	0x0802f734

0800fa7c <_ZN8touchgfx8TextAreaC1Ev>:
 *       the pointer remains valid when drawing.
 */
class TextArea : public Widget
{
public:
    TextArea()
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	b082      	sub	sp, #8
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	4618      	mov	r0, r3
 800fa88:	2326      	movs	r3, #38	; 0x26
 800fa8a:	461a      	mov	r2, r3
 800fa8c:	2100      	movs	r1, #0
 800fa8e:	f01a f9eb 	bl	8029e68 <memset>
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	4618      	mov	r0, r3
 800fa96:	f7ff ff19 	bl	800f8cc <_ZN8touchgfx6WidgetC1Ev>
 800fa9a:	4a16      	ldr	r2, [pc, #88]	; (800faf4 <_ZN8touchgfx8TextAreaC1Ev+0x78>)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	601a      	str	r2, [r3, #0]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	3328      	adds	r3, #40	; 0x28
 800faa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7ff ffd1 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	3330      	adds	r3, #48	; 0x30
 800fab2:	2100      	movs	r1, #0
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7ff fdf7 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	2200      	movs	r2, #0
 800fabe:	869a      	strh	r2, [r3, #52]	; 0x34
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	22ff      	movs	r2, #255	; 0xff
 800fac4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	333c      	adds	r3, #60	; 0x3c
 800fae4:	4618      	mov	r0, r3
 800fae6:	f000 f8f2 	bl	800fcce <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    {
    }
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	4618      	mov	r0, r3
 800faee:	3708      	adds	r7, #8
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	080306a8 	.word	0x080306a8

0800faf8 <_ZN8touchgfx8TextArea8setWidthEs>:

    virtual void setWidth(int16_t width)
 800faf8:	b590      	push	{r4, r7, lr}
 800fafa:	b087      	sub	sp, #28
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6178      	str	r0, [r7, #20]
 800fb00:	460b      	mov	r3, r1
 800fb02:	827b      	strh	r3, [r7, #18]
    {
        Widget::setWidth(width);
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800fb0a:	4611      	mov	r1, r2
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff fd11 	bl	800f534 <_ZN8touchgfx8Drawable8setWidthEs>
        boundingArea = calculateBoundingArea();
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	3384      	adds	r3, #132	; 0x84
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	697c      	ldr	r4, [r7, #20]
 800fb1c:	463a      	mov	r2, r7
 800fb1e:	6979      	ldr	r1, [r7, #20]
 800fb20:	4610      	mov	r0, r2
 800fb22:	4798      	blx	r3
 800fb24:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800fb28:	463a      	mov	r2, r7
 800fb2a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800fb30:	bf00      	nop
 800fb32:	371c      	adds	r7, #28
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd90      	pop	{r4, r7, pc}

0800fb38 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 800fb38:	b590      	push	{r4, r7, lr}
 800fb3a:	b087      	sub	sp, #28
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6178      	str	r0, [r7, #20]
 800fb40:	460b      	mov	r3, r1
 800fb42:	827b      	strh	r3, [r7, #18]
    {
        Widget::setHeight(height);
 800fb44:	697b      	ldr	r3, [r7, #20]
 800fb46:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800fb4a:	4611      	mov	r1, r2
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	f7ff fd00 	bl	800f552 <_ZN8touchgfx8Drawable9setHeightEs>
        boundingArea = calculateBoundingArea();
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	3384      	adds	r3, #132	; 0x84
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	697c      	ldr	r4, [r7, #20]
 800fb5c:	463a      	mov	r2, r7
 800fb5e:	6979      	ldr	r1, [r7, #20]
 800fb60:	4610      	mov	r0, r2
 800fb62:	4798      	blx	r3
 800fb64:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800fb68:	463a      	mov	r2, r7
 800fb6a:	ca07      	ldmia	r2, {r0, r1, r2}
 800fb6c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800fb70:	bf00      	nop
 800fb72:	371c      	adds	r7, #28
 800fb74:	46bd      	mov	sp, r7
 800fb76:	bd90      	pop	{r4, r7, pc}

0800fb78 <_ZNK8touchgfx8TextArea12getSolidRectEv>:

    virtual Rect getSolidRect() const
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
    {
        return Rect();
 800fb82:	6878      	ldr	r0, [r7, #4]
 800fb84:	f7ff fc50 	bl	800f428 <_ZN8touchgfx4RectC1Ev>
    }
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	3708      	adds	r7, #8
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <_ZN8touchgfx8TextArea8setAlphaEh>:
    }

    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
 800fb90:	b480      	push	{r7}
 800fb92:	b083      	sub	sp, #12
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	70fb      	strb	r3, [r7, #3]
    {
        alpha = newAlpha;
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	78fa      	ldrb	r2, [r7, #3]
 800fba0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
    }
 800fba4:	bf00      	nop
 800fba6:	370c      	adds	r7, #12
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr

0800fbb0 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800fbb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbb2:	b085      	sub	sp, #20
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800fbbc:	687e      	ldr	r6, [r7, #4]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	3334      	adds	r3, #52	; 0x34
 800fbc4:	681c      	ldr	r4, [r3, #0]
 800fbc6:	887d      	ldrh	r5, [r7, #2]
 800fbc8:	6878      	ldr	r0, [r7, #4]
 800fbca:	f000 f869 	bl	800fca0 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800fbce:	4603      	mov	r3, r0
 800fbd0:	60fb      	str	r3, [r7, #12]
     *
     * @return The font.
     */
    FORCE_INLINE_FUNCTION const Font* getFont() const
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800fbd2:	4b1d      	ldr	r3, [pc, #116]	; (800fc48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d105      	bne.n	800fbe6 <_ZN8touchgfx8TextArea12setBaselineYEs+0x36>
 800fbda:	4b1c      	ldr	r3, [pc, #112]	; (800fc4c <_ZN8touchgfx8TextArea12setBaselineYEs+0x9c>)
 800fbdc:	4a1c      	ldr	r2, [pc, #112]	; (800fc50 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800fbde:	216c      	movs	r1, #108	; 0x6c
 800fbe0:	481c      	ldr	r0, [pc, #112]	; (800fc54 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800fbe2:	f01a f8b5 	bl	8029d50 <__assert_func>
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	60bb      	str	r3, [r7, #8]
        return typedTextId < numberOfTypedTexts;
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	889a      	ldrh	r2, [r3, #4]
 800fbee:	4b1a      	ldr	r3, [pc, #104]	; (800fc58 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa8>)
 800fbf0:	881b      	ldrh	r3, [r3, #0]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	bf34      	ite	cc
 800fbf6:	2301      	movcc	r3, #1
 800fbf8:	2300      	movcs	r3, #0
 800fbfa:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d105      	bne.n	800fc0c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>
 800fc00:	4b16      	ldr	r3, [pc, #88]	; (800fc5c <_ZN8touchgfx8TextArea12setBaselineYEs+0xac>)
 800fc02:	4a13      	ldr	r2, [pc, #76]	; (800fc50 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa0>)
 800fc04:	216d      	movs	r1, #109	; 0x6d
 800fc06:	4813      	ldr	r0, [pc, #76]	; (800fc54 <_ZN8touchgfx8TextArea12setBaselineYEs+0xa4>)
 800fc08:	f01a f8a2 	bl	8029d50 <__assert_func>
 800fc0c:	bf00      	nop
        return fonts[typedTexts[typedTextId].fontIdx];
 800fc0e:	4b14      	ldr	r3, [pc, #80]	; (800fc60 <_ZN8touchgfx8TextArea12setBaselineYEs+0xb0>)
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	4b0d      	ldr	r3, [pc, #52]	; (800fc48 <_ZN8touchgfx8TextArea12setBaselineYEs+0x98>)
 800fc14:	6819      	ldr	r1, [r3, #0]
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	889b      	ldrh	r3, [r3, #4]
 800fc1a:	005b      	lsls	r3, r3, #1
 800fc1c:	440b      	add	r3, r1
 800fc1e:	781b      	ldrb	r3, [r3, #0]
 800fc20:	009b      	lsls	r3, r3, #2
 800fc22:	4413      	add	r3, r2
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	322c      	adds	r2, #44	; 0x2c
 800fc2a:	6812      	ldr	r2, [r2, #0]
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	4790      	blx	r2
 800fc30:	4603      	mov	r3, r0
 800fc32:	1aeb      	subs	r3, r5, r3
 800fc34:	b29b      	uxth	r3, r3
 800fc36:	b21b      	sxth	r3, r3
 800fc38:	4619      	mov	r1, r3
 800fc3a:	4630      	mov	r0, r6
 800fc3c:	47a0      	blx	r4
    }
 800fc3e:	bf00      	nop
 800fc40:	3714      	adds	r7, #20
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc46:	bf00      	nop
 800fc48:	2003c314 	.word	0x2003c314
 800fc4c:	0802d39c 	.word	0x0802d39c
 800fc50:	0802d3e0 	.word	0x0802d3e0
 800fc54:	0802d41c 	.word	0x0802d41c
 800fc58:	2003c318 	.word	0x2003c318
 800fc5c:	0802d460 	.word	0x0802d460
 800fc60:	2003c31c 	.word	0x2003c31c

0800fc64 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     * @param  x         The x coordinate of the TextArea.
     * @param  baselineY The y coordinate of the baseline of the text.
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b082      	sub	sp, #8
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
 800fc6c:	460b      	mov	r3, r1
 800fc6e:	807b      	strh	r3, [r7, #2]
 800fc70:	4613      	mov	r3, r2
 800fc72:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800fc74:	687a      	ldr	r2, [r7, #4]
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	681b      	ldr	r3, [r3, #0]
 800fc7a:	3330      	adds	r3, #48	; 0x30
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800fc82:	4610      	mov	r0, r2
 800fc84:	4798      	blx	r3
        setBaselineY(baselineY);
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	3364      	adds	r3, #100	; 0x64
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800fc92:	4611      	mov	r1, r2
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	4798      	blx	r3
    }
 800fc98:	bf00      	nop
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
    /**
     * Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    const TypedText& getTypedText() const
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	3328      	adds	r3, #40	; 0x28
    }
 800fcac:	4618      	mov	r0, r3
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     *
     * @return A pointer to the second wildcard, if this text area has two wildcards, otherwise 0.
     *
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
 800fcb8:	b480      	push	{r7}
 800fcba:	b083      	sub	sp, #12
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800fcc0:	2300      	movs	r3, #0
    }
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	370c      	adds	r7, #12
 800fcc6:	46bd      	mov	sp, r7
 800fcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fccc:	4770      	bx	lr

0800fcce <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>:
        }

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
 800fcce:	b580      	push	{r7, lr}
 800fcd0:	b084      	sub	sp, #16
 800fcd2:	af02      	add	r7, sp, #8
 800fcd4:	6078      	str	r0, [r7, #4]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
 800fcd6:	6878      	ldr	r0, [r7, #4]
 800fcd8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcdc:	9300      	str	r3, [sp, #0]
 800fcde:	f04f 33ff 	mov.w	r3, #4294967295
 800fce2:	2200      	movs	r2, #0
 800fce4:	2100      	movs	r1, #0
 800fce6:	f7ff fcee 	bl	800f6c6 <_ZN8touchgfx4RectC1Essss>
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	609a      	str	r2, [r3, #8]
        {
        }
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
	...

0800fcfc <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
 800fd04:	4a08      	ldr	r2, [pc, #32]	; (800fd28 <_ZN8touchgfx8TextAreaD1Ev+0x2c>)
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	601a      	str	r2, [r3, #0]
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	3328      	adds	r3, #40	; 0x28
 800fd0e:	4618      	mov	r0, r3
 800fd10:	f7fe faca 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7ff fdea 	bl	800f8f0 <_ZN8touchgfx6WidgetD1Ev>
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	080306a8 	.word	0x080306a8

0800fd2c <_ZN8touchgfx8TextAreaD0Ev>:
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b082      	sub	sp, #8
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f7ff ffe1 	bl	800fcfc <_ZN8touchgfx8TextAreaD1Ev>
 800fd3a:	2148      	movs	r1, #72	; 0x48
 800fd3c:	6878      	ldr	r0, [r7, #4]
 800fd3e:	f019 ff5d 	bl	8029bfc <_ZdlPvj>
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	4618      	mov	r0, r3
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}

0800fd4c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
 *
 */
class TextAreaWithWildcardBase : public TextArea
{
public:
    TextAreaWithWildcardBase()
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	b082      	sub	sp, #8
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
        : TextArea()
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	4618      	mov	r0, r3
 800fd58:	f7ff fe90 	bl	800fa7c <_ZN8touchgfx8TextAreaC1Ev>
 800fd5c:	4a03      	ldr	r2, [pc, #12]	; (800fd6c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	601a      	str	r2, [r3, #0]
    {
    }
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	4618      	mov	r0, r3
 800fd66:	3708      	adds	r7, #8
 800fd68:	46bd      	mov	sp, r7
 800fd6a:	bd80      	pop	{r7, pc}
 800fd6c:	080307a0 	.word	0x080307a0

0800fd70 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const;

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b082      	sub	sp, #8
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
    {
        return TextArea::BoundingArea();
 800fd7a:	6878      	ldr	r0, [r7, #4]
 800fd7c:	f7ff ffa7 	bl	800fcce <_ZN8touchgfx8TextArea12BoundingAreaC1Ev>
    }
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	3708      	adds	r7, #8
 800fd84:	46bd      	mov	sp, r7
 800fd86:	bd80      	pop	{r7, pc}

0800fd88 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b082      	sub	sp, #8
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
 800fd90:	4a05      	ldr	r2, [pc, #20]	; (800fda8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	601a      	str	r2, [r3, #0]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7ff ffaf 	bl	800fcfc <_ZN8touchgfx8TextAreaD1Ev>
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	4618      	mov	r0, r3
 800fda2:	3708      	adds	r7, #8
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	080307a0 	.word	0x080307a0

0800fdac <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b082      	sub	sp, #8
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6878      	ldr	r0, [r7, #4]
 800fdb6:	f7ff ffe7 	bl	800fd88 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800fdba:	2148      	movs	r1, #72	; 0x48
 800fdbc:	6878      	ldr	r0, [r7, #4]
 800fdbe:	f019 ff1d 	bl	8029bfc <_ZdlPvj>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4618      	mov	r0, r3
 800fdc6:	3708      	adds	r7, #8
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	bd80      	pop	{r7, pc}

0800fdcc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
 *       replaced by a wildcard text.
 */
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
{
public:
    TextAreaWithOneWildcard()
 800fdcc:	b580      	push	{r7, lr}
 800fdce:	b082      	sub	sp, #8
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
        : TextAreaWithWildcardBase(), wc1(0)
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	f7ff ffb8 	bl	800fd4c <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800fddc:	4a05      	ldr	r2, [pc, #20]	; (800fdf4 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	601a      	str	r2, [r3, #0]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	2200      	movs	r2, #0
 800fde6:	649a      	str	r2, [r3, #72]	; 0x48
    {
    }
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	4618      	mov	r0, r3
 800fdec:	3708      	adds	r7, #8
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	0802f968 	.word	0x0802f968

0800fdf8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    void setWildcard1(const Unicode::UnicodeChar* value)
    {
        wc1 = value;
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
 800fdf8:	b480      	push	{r7}
 800fdfa:	b083      	sub	sp, #12
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
    {
        return wc1;
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800fe04:	4618      	mov	r0, r3
 800fe06:	370c      	adds	r7, #12
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0e:	4770      	bx	lr

0800fe10 <_ZN12alertBarBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/alertBarBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

alertBarBase::alertBarBase()
 800fe10:	b590      	push	{r4, r7, lr}
 800fe12:	b095      	sub	sp, #84	; 0x54
 800fe14:	af02      	add	r7, sp, #8
 800fe16:	6178      	str	r0, [r7, #20]
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff fc00 	bl	800f620 <_ZN8touchgfx9ContainerC1Ev>
 800fe20:	4a71      	ldr	r2, [pc, #452]	; (800ffe8 <_ZN12alertBarBaseC1Ev+0x1d8>)
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	601a      	str	r2, [r3, #0]
 800fe26:	697b      	ldr	r3, [r7, #20]
 800fe28:	332c      	adds	r3, #44	; 0x2c
 800fe2a:	4618      	mov	r0, r3
 800fe2c:	f7ff fdd6 	bl	800f9dc <_ZN8touchgfx13BoxWithBorderC1Ev>
 800fe30:	697b      	ldr	r3, [r7, #20]
 800fe32:	3360      	adds	r3, #96	; 0x60
 800fe34:	4618      	mov	r0, r3
 800fe36:	f7ff ffc9 	bl	800fdcc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{
    setWidth(800);
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	f44f 7148 	mov.w	r1, #800	; 0x320
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7ff fb77 	bl	800f534 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	213c      	movs	r1, #60	; 0x3c
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f7ff fb81 	bl	800f552 <_ZN8touchgfx8Drawable9setHeightEs>
    bgBox.setPosition(0, 0, 800, 60);
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 800fe56:	233c      	movs	r3, #60	; 0x3c
 800fe58:	9300      	str	r3, [sp, #0]
 800fe5a:	f44f 7348 	mov.w	r3, #800	; 0x320
 800fe5e:	2200      	movs	r2, #0
 800fe60:	2100      	movs	r1, #0
 800fe62:	f7ff fc6e 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    bgBox.setColor(touchgfx::Color::getColorFromRGB(255, 0, 0));
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800fe6c:	23ff      	movs	r3, #255	; 0xff
 800fe6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800fe72:	2300      	movs	r3, #0
 800fe74:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800fe78:	2300      	movs	r3, #0
 800fe7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800fe7e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800fe82:	041b      	lsls	r3, r3, #16
 800fe84:	461a      	mov	r2, r3
 800fe86:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800fe8a:	021b      	lsls	r3, r3, #8
 800fe8c:	431a      	orrs	r2, r3
 800fe8e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800fe92:	4313      	orrs	r3, r2
 800fe94:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fe98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800fe9c:	4611      	mov	r1, r2
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7ff fc02 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 800fea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fea6:	4619      	mov	r1, r3
 800fea8:	4620      	mov	r0, r4
 800feaa:	f7ff fd67 	bl	800f97c <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    bgBox.setBorderColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800feb4:	2300      	movs	r3, #0
 800feb6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800feba:	2300      	movs	r3, #0
 800febc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fec0:	2300      	movs	r3, #0
 800fec2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800fec6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800feca:	041b      	lsls	r3, r3, #16
 800fecc:	461a      	mov	r2, r3
 800fece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fed2:	021b      	lsls	r3, r3, #8
 800fed4:	431a      	orrs	r2, r3
 800fed6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800feda:	4313      	orrs	r3, r2
 800fedc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800fee0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fee4:	4611      	mov	r1, r2
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7ff fbde 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 800feec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feee:	4619      	mov	r1, r3
 800fef0:	4620      	mov	r0, r4
 800fef2:	f7ff fd8f 	bl	800fa14 <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
    bgBox.setBorderSize(5);
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	332c      	adds	r3, #44	; 0x2c
 800fefa:	2105      	movs	r1, #5
 800fefc:	4618      	mov	r0, r3
 800fefe:	f7ff fd97 	bl	800fa30 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEt>

    frontText.setPosition(0, 0, 800, 60);
 800ff02:	697b      	ldr	r3, [r7, #20]
 800ff04:	f103 0060 	add.w	r0, r3, #96	; 0x60
 800ff08:	233c      	movs	r3, #60	; 0x3c
 800ff0a:	9300      	str	r3, [sp, #0]
 800ff0c:	f44f 7348 	mov.w	r3, #800	; 0x320
 800ff10:	2200      	movs	r2, #0
 800ff12:	2100      	movs	r1, #0
 800ff14:	f7ff fc15 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    frontText.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800ff1e:	23ff      	movs	r3, #255	; 0xff
 800ff20:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800ff24:	23ff      	movs	r3, #255	; 0xff
 800ff26:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800ff2a:	23ff      	movs	r3, #255	; 0xff
 800ff2c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800ff30:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800ff34:	041b      	lsls	r3, r3, #16
 800ff36:	461a      	mov	r2, r3
 800ff38:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800ff3c:	021b      	lsls	r3, r3, #8
 800ff3e:	431a      	orrs	r2, r3
 800ff40:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800ff44:	4313      	orrs	r3, r2
 800ff46:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800ff4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ff4e:	4611      	mov	r1, r2
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7ff fba9 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	63fc      	str	r4, [r7, #60]	; 0x3c
 800ff5a:	61bb      	str	r3, [r7, #24]
        color = newColor;
 800ff5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff5e:	69ba      	ldr	r2, [r7, #24]
 800ff60:	631a      	str	r2, [r3, #48]	; 0x30
    }
 800ff62:	bf00      	nop
    frontText.setLinespacing(0);
 800ff64:	697b      	ldr	r3, [r7, #20]
 800ff66:	3360      	adds	r3, #96	; 0x60
 800ff68:	647b      	str	r3, [r7, #68]	; 0x44
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 800ff70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ff76:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 800ff78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3384      	adds	r3, #132	; 0x84
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800ff82:	463a      	mov	r2, r7
 800ff84:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff86:	4610      	mov	r0, r2
 800ff88:	4798      	blx	r3
 800ff8a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 800ff8e:	463a      	mov	r2, r7
 800ff90:	ca07      	ldmia	r2, {r0, r1, r2}
 800ff92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800ff96:	bf00      	nop
    frontText.setTypedText(touchgfx::TypedText(T___SINGLEUSE_94W5));
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800ff9e:	f107 031c 	add.w	r3, r7, #28
 800ffa2:	2105      	movs	r1, #5
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7ff fd53 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
 800ffaa:	f107 031c 	add.w	r3, r7, #28
 800ffae:	4619      	mov	r1, r3
 800ffb0:	4620      	mov	r0, r4
 800ffb2:	f008 fad1 	bl	8018558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 800ffb6:	f107 031c 	add.w	r3, r7, #28
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fe f974 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>

    add(bgBox);
 800ffc0:	697a      	ldr	r2, [r7, #20]
 800ffc2:	697b      	ldr	r3, [r7, #20]
 800ffc4:	332c      	adds	r3, #44	; 0x2c
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	4610      	mov	r0, r2
 800ffca:	f006 f90d 	bl	80161e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(frontText);
 800ffce:	697a      	ldr	r2, [r7, #20]
 800ffd0:	697b      	ldr	r3, [r7, #20]
 800ffd2:	3360      	adds	r3, #96	; 0x60
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	f006 f906 	bl	80161e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	4618      	mov	r0, r3
 800ffe0:	374c      	adds	r7, #76	; 0x4c
 800ffe2:	46bd      	mov	sp, r7
 800ffe4:	bd90      	pop	{r4, r7, pc}
 800ffe6:	bf00      	nop
 800ffe8:	0802f8d4 	.word	0x0802f8d4

0800ffec <_ZN12alertBarBaseD1Ev>:

alertBarBase::~alertBarBase()
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b082      	sub	sp, #8
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	4a0a      	ldr	r2, [pc, #40]	; (8010020 <_ZN12alertBarBaseD1Ev+0x34>)
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	601a      	str	r2, [r3, #0]
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	3360      	adds	r3, #96	; 0x60
 800fffe:	4618      	mov	r0, r3
 8010000:	f000 f82a 	bl	8010058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	332c      	adds	r3, #44	; 0x2c
 8010008:	4618      	mov	r0, r3
 801000a:	f000 f847 	bl	801009c <_ZN8touchgfx13BoxWithBorderD1Ev>
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff fb27 	bl	800f664 <_ZN8touchgfx9ContainerD1Ev>
{

}
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	4618      	mov	r0, r3
 801001a:	3708      	adds	r7, #8
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	0802f8d4 	.word	0x0802f8d4

08010024 <_ZN12alertBarBaseD0Ev>:
alertBarBase::~alertBarBase()
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
}
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f7ff ffdd 	bl	800ffec <_ZN12alertBarBaseD1Ev>
 8010032:	21ac      	movs	r1, #172	; 0xac
 8010034:	6878      	ldr	r0, [r7, #4]
 8010036:	f019 fde1 	bl	8029bfc <_ZdlPvj>
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	4618      	mov	r0, r3
 801003e:	3708      	adds	r7, #8
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <_ZN12alertBarBase10initializeEv>:

void alertBarBase::initialize()
{
 8010044:	b480      	push	{r7}
 8010046:	b083      	sub	sp, #12
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]

}
 801004c:	bf00      	nop
 801004e:	370c      	adds	r7, #12
 8010050:	46bd      	mov	sp, r7
 8010052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010056:	4770      	bx	lr

08010058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
 801005e:	6078      	str	r0, [r7, #4]
 8010060:	4a05      	ldr	r2, [pc, #20]	; (8010078 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	601a      	str	r2, [r3, #0]
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	4618      	mov	r0, r3
 801006a:	f7ff fe8d 	bl	800fd88 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4618      	mov	r0, r3
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	0802f968 	.word	0x0802f968

0801007c <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 801007c:	b580      	push	{r7, lr}
 801007e:	b082      	sub	sp, #8
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6878      	ldr	r0, [r7, #4]
 8010086:	f7ff ffe7 	bl	8010058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801008a:	214c      	movs	r1, #76	; 0x4c
 801008c:	6878      	ldr	r0, [r7, #4]
 801008e:	f019 fdb5 	bl	8029bfc <_ZdlPvj>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4618      	mov	r0, r3
 8010096:	3708      	adds	r7, #8
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <_ZN8touchgfx13BoxWithBorderD1Ev>:
class BoxWithBorder : public Box
 801009c:	b580      	push	{r7, lr}
 801009e:	b082      	sub	sp, #8
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
 80100a4:	4a05      	ldr	r2, [pc, #20]	; (80100bc <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	601a      	str	r2, [r3, #0]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7ff fc73 	bl	800f998 <_ZN8touchgfx3BoxD1Ev>
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	4618      	mov	r0, r3
 80100b6:	3708      	adds	r7, #8
 80100b8:	46bd      	mov	sp, r7
 80100ba:	bd80      	pop	{r7, pc}
 80100bc:	08030830 	.word	0x08030830

080100c0 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f7ff ffe7 	bl	801009c <_ZN8touchgfx13BoxWithBorderD1Ev>
 80100ce:	2134      	movs	r1, #52	; 0x34
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f019 fd93 	bl	8029bfc <_ZdlPvj>
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	4618      	mov	r0, r3
 80100da:	3708      	adds	r7, #8
 80100dc:	46bd      	mov	sp, r7
 80100de:	bd80      	pop	{r7, pc}

080100e0 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 80100e0:	b480      	push	{r7}
 80100e2:	b083      	sub	sp, #12
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	6078      	str	r0, [r7, #4]
        : color(0)
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	2200      	movs	r2, #0
 80100ec:	601a      	str	r2, [r3, #0]
    }
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	370c      	adds	r7, #12
 80100f4:	46bd      	mov	sp, r7
 80100f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fa:	4770      	bx	lr

080100fc <_ZNK8touchgfx9colortypecvmEv>:
    operator uint32_t() const
 80100fc:	b480      	push	{r7}
 80100fe:	b083      	sub	sp, #12
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
        return color;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	681b      	ldr	r3, [r3, #0]
    }
 8010108:	4618      	mov	r0, r3
 801010a:	370c      	adds	r7, #12
 801010c:	46bd      	mov	sp, r7
 801010e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010112:	4770      	bx	lr

08010114 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>:
    /**
     * Get the auxiliary LCD class attached to the HAL instance if any.
     *
     * @return A pointer on the axiliary LCD class attached to the HAL instance.
     */
    LCD* getAuxiliaryLCD()
 8010114:	b480      	push	{r7}
 8010116:	b083      	sub	sp, #12
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
    {
        return auxiliaryLCD;
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    }
 8010120:	4618      	mov	r0, r3
 8010122:	370c      	adds	r7, #12
 8010124:	46bd      	mov	sp, r7
 8010126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801012a:	4770      	bx	lr

0801012c <_ZN8touchgfx15AbstractPainterC1Ev>:
 */
class AbstractPainter
{
public:
    /** Initializes a new instance of the AbstractPainter class. */
    AbstractPainter()
 801012c:	b480      	push	{r7}
 801012e:	b083      	sub	sp, #12
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
        : widgetWidth(0)
 8010134:	4a06      	ldr	r2, [pc, #24]	; (8010150 <_ZN8touchgfx15AbstractPainterC1Ev+0x24>)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2200      	movs	r2, #0
 801013e:	809a      	strh	r2, [r3, #4]
    {
    }
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4618      	mov	r0, r3
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr
 801014e:	bf00      	nop
 8010150:	0802fb28 	.word	0x0802fb28

08010154 <_ZN8touchgfx15AbstractPainterD1Ev>:

    /** Finalizes an instance of the AbstractPainter class. */
    virtual ~AbstractPainter()
 8010154:	b480      	push	{r7}
 8010156:	b083      	sub	sp, #12
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
    {
 801015c:	4a04      	ldr	r2, [pc, #16]	; (8010170 <_ZN8touchgfx15AbstractPainterD1Ev+0x1c>)
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	601a      	str	r2, [r3, #0]
    }
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4618      	mov	r0, r3
 8010166:	370c      	adds	r7, #12
 8010168:	46bd      	mov	sp, r7
 801016a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801016e:	4770      	bx	lr
 8010170:	0802fb28 	.word	0x0802fb28

08010174 <_ZN8touchgfx15AbstractPainterD0Ev>:
    virtual ~AbstractPainter()
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
    }
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f7ff ffe9 	bl	8010154 <_ZN8touchgfx15AbstractPainterD1Ev>
 8010182:	2108      	movs	r1, #8
 8010184:	6878      	ldr	r0, [r7, #4]
 8010186:	f019 fd39 	bl	8029bfc <_ZdlPvj>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4618      	mov	r0, r3
 801018e:	3708      	adds	r7, #8
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}

08010194 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * HARDWARE if the painter uses hardware based drawing,
     * SOFTWARE otherwise. Relevant on platforms using DCACHE.
     *
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
 8010194:	b480      	push	{r7}
 8010196:	b083      	sub	sp, #12
 8010198:	af00      	add	r7, sp, #0
 801019a:	6078      	str	r0, [r7, #4]
    {
        return HAL::SOFTWARE;
 801019c:	2300      	movs	r3, #0
    }
 801019e:	4618      	mov	r0, r3
 80101a0:	370c      	adds	r7, #12
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr

080101aa <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @return True if the painter is ready to paint, false otherwise.
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
 80101aa:	b480      	push	{r7}
 80101ac:	b083      	sub	sp, #12
 80101ae:	af00      	add	r7, sp, #0
 80101b0:	6078      	str	r0, [r7, #4]
 80101b2:	6039      	str	r1, [r7, #0]
    {
        widgetWidth = widgetRect.width;
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	809a      	strh	r2, [r3, #4]
        return true;
 80101be:	2301      	movs	r3, #1
    }
 80101c0:	4618      	mov	r0, r3
 80101c2:	370c      	adds	r7, #12
 80101c4:	46bd      	mov	sp, r7
 80101c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ca:	4770      	bx	lr

080101cc <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * This function is called after all paint operation have finished. This allows the painter to
     * close down dma queues etc. This happens after the last scan line segment has been drawn.
     *
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
 80101cc:	b480      	push	{r7}
 80101ce:	b083      	sub	sp, #12
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
    {
        return;
 80101d4:	bf00      	nop
    }
 80101d6:	370c      	adds	r7, #12
 80101d8:	46bd      	mov	sp, r7
 80101da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101de:	4770      	bx	lr

080101e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>:
         * Constructor from integer. No conversion is done - the integer is assumed to already
         * be in Q5 format.
         *
         * @param  i Integer pre-formattet in Q5 format.
         */
        explicit Q5(int i)
 80101e0:	b480      	push	{r7}
 80101e2:	b083      	sub	sp, #12
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
            : v(i)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	683a      	ldr	r2, [r7, #0]
 80101ee:	601a      	str	r2, [r3, #0]
        {
        }
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4618      	mov	r0, r3
 80101f4:	370c      	adds	r7, #12
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr

080101fe <_ZNK8touchgfx7CWRUtil2Q5cviEv>:
        /**
         * Gets the Q5 as an integer without conversion.
         *
         * @return The unconverted Q5 value.
         */
        operator int() const
 80101fe:	b480      	push	{r7}
 8010200:	b083      	sub	sp, #12
 8010202:	af00      	add	r7, sp, #0
 8010204:	6078      	str	r0, [r7, #4]
        {
            return v;
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	681b      	ldr	r3, [r3, #0]
        }
 801020a:	4618      	mov	r0, r3
 801020c:	370c      	adds	r7, #12
 801020e:	46bd      	mov	sp, r7
 8010210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010214:	4770      	bx	lr

08010216 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>:
     * @see getPainter
     *
     * @note If setPainter() is used to change the painter to a different painter, the area
     *       containing the CanvasWidget is not automatically invalidated.
     */
    void setPainter(const AbstractPainter& painter)
 8010216:	b480      	push	{r7}
 8010218:	b083      	sub	sp, #12
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
 801021e:	6039      	str	r1, [r7, #0]
    {
        canvasPainter = &painter;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	683a      	ldr	r2, [r7, #0]
 8010224:	629a      	str	r2, [r3, #40]	; 0x28
    }
 8010226:	bf00      	nop
 8010228:	370c      	adds	r7, #12
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr

08010232 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>:
     *
     * @see updateLineWidth
     *
     * @note The area containing the Line is not invalidated.
     */
    void setLineWidth(CWRUtil::Q5 widthQ5)
 8010232:	b590      	push	{r4, r7, lr}
 8010234:	b083      	sub	sp, #12
 8010236:	af00      	add	r7, sp, #0
 8010238:	6078      	str	r0, [r7, #4]
 801023a:	6039      	str	r1, [r7, #0]
    {
        if (lineWidthQ5 == widthQ5)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	333c      	adds	r3, #60	; 0x3c
 8010240:	4618      	mov	r0, r3
 8010242:	f7ff ffdc 	bl	80101fe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010246:	4604      	mov	r4, r0
 8010248:	463b      	mov	r3, r7
 801024a:	4618      	mov	r0, r3
 801024c:	f7ff ffd7 	bl	80101fe <_ZNK8touchgfx7CWRUtil2Q5cviEv>
 8010250:	4603      	mov	r3, r0
 8010252:	429c      	cmp	r4, r3
 8010254:	bf0c      	ite	eq
 8010256:	2301      	moveq	r3, #1
 8010258:	2300      	movne	r3, #0
 801025a:	b2db      	uxtb	r3, r3
 801025c:	2b00      	cmp	r3, #0
 801025e:	d106      	bne.n	801026e <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3c>
        {
            return;
        }

        lineWidthQ5 = widthQ5;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	683a      	ldr	r2, [r7, #0]
 8010264:	63da      	str	r2, [r3, #60]	; 0x3c

        updateCachedShape();
 8010266:	6878      	ldr	r0, [r7, #4]
 8010268:	f007 fc4a 	bl	8017b00 <_ZN8touchgfx4Line17updateCachedShapeEv>
 801026c:	e000      	b.n	8010270 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E+0x3e>
            return;
 801026e:	bf00      	nop
    }
 8010270:	370c      	adds	r7, #12
 8010272:	46bd      	mov	sp, r7
 8010274:	bd90      	pop	{r4, r7, pc}
	...

08010278 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>:
 * @see AbstractPainter
 */
class AbstractPainterARGB8888 : public AbstractPainter
{
public:
    AbstractPainterARGB8888()
 8010278:	b580      	push	{r7, lr}
 801027a:	b084      	sub	sp, #16
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
        : AbstractPainter()
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	4618      	mov	r0, r3
 8010284:	f7ff ff52 	bl	801012c <_ZN8touchgfx15AbstractPainterC1Ev>
 8010288:	4a26      	ldr	r2, [pc, #152]	; (8010324 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xac>)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	601a      	str	r2, [r3, #0]
 801028e:	2302      	movs	r3, #2
 8010290:	73fb      	strb	r3, [r7, #15]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8010292:	f7fe fc4f 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 8010296:	4603      	mov	r3, r0
 8010298:	681a      	ldr	r2, [r3, #0]
 801029a:	322c      	adds	r2, #44	; 0x2c
 801029c:	6812      	ldr	r2, [r2, #0]
 801029e:	4618      	mov	r0, r3
 80102a0:	4790      	blx	r2
 80102a2:	4603      	mov	r3, r0
 80102a4:	461a      	mov	r2, r3
 80102a6:	7bfb      	ldrb	r3, [r7, #15]
 80102a8:	4293      	cmp	r3, r2
 80102aa:	bf0c      	ite	eq
 80102ac:	2301      	moveq	r3, #1
 80102ae:	2300      	movne	r3, #0
 80102b0:	73bb      	strb	r3, [r7, #14]
        if (HAL::getInstance()->getAuxiliaryLCD())
 80102b2:	f7fe fc33 	bl	800eb1c <_ZN8touchgfx3HAL11getInstanceEv>
 80102b6:	4603      	mov	r3, r0
 80102b8:	4618      	mov	r0, r3
 80102ba:	f7ff ff2b 	bl	8010114 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80102be:	4603      	mov	r3, r0
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	bf14      	ite	ne
 80102c4:	2301      	movne	r3, #1
 80102c6:	2300      	moveq	r3, #0
 80102c8:	b2db      	uxtb	r3, r3
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d01b      	beq.n	8010306 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0x8e>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80102ce:	f7fe fc25 	bl	800eb1c <_ZN8touchgfx3HAL11getInstanceEv>
 80102d2:	4603      	mov	r3, r0
 80102d4:	4618      	mov	r0, r3
 80102d6:	f7ff ff1d 	bl	8010114 <_ZN8touchgfx3HAL15getAuxiliaryLCDEv>
 80102da:	4603      	mov	r3, r0
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	322c      	adds	r2, #44	; 0x2c
 80102e0:	6812      	ldr	r2, [r2, #0]
 80102e2:	4618      	mov	r0, r3
 80102e4:	4790      	blx	r2
 80102e6:	4603      	mov	r3, r0
 80102e8:	461a      	mov	r2, r3
 80102ea:	7bfb      	ldrb	r3, [r7, #15]
 80102ec:	4293      	cmp	r3, r2
 80102ee:	bf0c      	ite	eq
 80102f0:	2301      	moveq	r3, #1
 80102f2:	2300      	movne	r3, #0
 80102f4:	b2da      	uxtb	r2, r3
 80102f6:	7bbb      	ldrb	r3, [r7, #14]
 80102f8:	4313      	orrs	r3, r2
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	bf14      	ite	ne
 8010300:	2301      	movne	r3, #1
 8010302:	2300      	moveq	r3, #0
 8010304:	73bb      	strb	r3, [r7, #14]
        }
        return compat;
 8010306:	7bbb      	ldrb	r3, [r7, #14]
    {
        assert(compatibleFramebuffer(Bitmap::ARGB8888) && "The chosen painter only works with ARGB8888 displays");
 8010308:	2b00      	cmp	r3, #0
 801030a:	d105      	bne.n	8010318 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xa0>
 801030c:	4b06      	ldr	r3, [pc, #24]	; (8010328 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb0>)
 801030e:	4a07      	ldr	r2, [pc, #28]	; (801032c <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb4>)
 8010310:	2128      	movs	r1, #40	; 0x28
 8010312:	4807      	ldr	r0, [pc, #28]	; (8010330 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev+0xb8>)
 8010314:	f019 fd1c 	bl	8029d50 <__assert_func>
 8010318:	bf00      	nop
    }
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	4618      	mov	r0, r3
 801031e:	3710      	adds	r7, #16
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	0802fb08 	.word	0x0802fb08
 8010328:	0802d4a0 	.word	0x0802d4a0
 801032c:	0802d504 	.word	0x0802d504
 8010330:	0802d544 	.word	0x0802d544

08010334 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>:
    /**
     * Constructor.
     *
     * @param  color (Optional) The color to use in the painter.
     */
    AbstractPainterColor(colortype color = 0)
 8010334:	b580      	push	{r7, lr}
 8010336:	b082      	sub	sp, #8
 8010338:	af00      	add	r7, sp, #0
 801033a:	6078      	str	r0, [r7, #4]
 801033c:	6039      	str	r1, [r7, #0]
    {
 801033e:	4a08      	ldr	r2, [pc, #32]	; (8010360 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE+0x2c>)
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	601a      	str	r2, [r3, #0]
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	3304      	adds	r3, #4
 8010348:	4618      	mov	r0, r3
 801034a:	f7ff fec9 	bl	80100e0 <_ZN8touchgfx9colortypeC1Ev>
        setColor(color);
 801034e:	6839      	ldr	r1, [r7, #0]
 8010350:	6878      	ldr	r0, [r7, #4]
 8010352:	f000 f827 	bl	80103a4 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
    }
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	4618      	mov	r0, r3
 801035a:	3708      	adds	r7, #8
 801035c:	46bd      	mov	sp, r7
 801035e:	bd80      	pop	{r7, pc}
 8010360:	0802faf4 	.word	0x0802faf4

08010364 <_ZN8touchgfx20AbstractPainterColorD1Ev>:

    /** Destructor */
    virtual ~AbstractPainterColor()
 8010364:	b480      	push	{r7}
 8010366:	b083      	sub	sp, #12
 8010368:	af00      	add	r7, sp, #0
 801036a:	6078      	str	r0, [r7, #4]
    {
 801036c:	4a04      	ldr	r2, [pc, #16]	; (8010380 <_ZN8touchgfx20AbstractPainterColorD1Ev+0x1c>)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	601a      	str	r2, [r3, #0]
    }
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4618      	mov	r0, r3
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr
 8010380:	0802faf4 	.word	0x0802faf4

08010384 <_ZN8touchgfx20AbstractPainterColorD0Ev>:
    virtual ~AbstractPainterColor()
 8010384:	b580      	push	{r7, lr}
 8010386:	b082      	sub	sp, #8
 8010388:	af00      	add	r7, sp, #0
 801038a:	6078      	str	r0, [r7, #4]
    }
 801038c:	6878      	ldr	r0, [r7, #4]
 801038e:	f7ff ffe9 	bl	8010364 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8010392:	2108      	movs	r1, #8
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f019 fc31 	bl	8029bfc <_ZdlPvj>
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	4618      	mov	r0, r3
 801039e:	3708      	adds	r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>:
    /**
     * Sets color to use when drawing the CanvasWidget.
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
 80103a4:	b480      	push	{r7}
 80103a6:	b083      	sub	sp, #12
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
    {
        painterColor = color;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	683a      	ldr	r2, [r7, #0]
 80103b2:	605a      	str	r2, [r3, #4]
    }
 80103b4:	bf00      	nop
 80103b6:	370c      	adds	r7, #12
 80103b8:	46bd      	mov	sp, r7
 80103ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103be:	4770      	bx	lr

080103c0 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>:
class AbstractPainterARGB8888 : public AbstractPainter
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b082      	sub	sp, #8
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
 80103c8:	4a05      	ldr	r2, [pc, #20]	; (80103e0 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev+0x20>)
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	601a      	str	r2, [r3, #0]
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7ff febf 	bl	8010154 <_ZN8touchgfx15AbstractPainterD1Ev>
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4618      	mov	r0, r3
 80103da:	3708      	adds	r7, #8
 80103dc:	46bd      	mov	sp, r7
 80103de:	bd80      	pop	{r7, pc}
 80103e0:	0802fb08 	.word	0x0802fb08

080103e4 <_ZN8touchgfx23AbstractPainterARGB8888D0Ev>:
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b082      	sub	sp, #8
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f7ff ffe7 	bl	80103c0 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 80103f2:	2108      	movs	r1, #8
 80103f4:	6878      	ldr	r0, [r7, #4]
 80103f6:	f019 fc01 	bl	8029bfc <_ZdlPvj>
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	4618      	mov	r0, r3
 80103fe:	3708      	adds	r7, #8
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}

08010404 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>:
    /**
     * Initializes a new instance of the PainterARGB8888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterARGB8888(colortype color = 0)
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	6078      	str	r0, [r7, #4]
 801040c:	6039      	str	r1, [r7, #0]
        : AbstractPainterARGB8888(), AbstractPainterColor(color)
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	4618      	mov	r0, r3
 8010412:	f7ff ff31 	bl	8010278 <_ZN8touchgfx23AbstractPainterARGB8888C1Ev>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	3308      	adds	r3, #8
 801041a:	6839      	ldr	r1, [r7, #0]
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff ff89 	bl	8010334 <_ZN8touchgfx20AbstractPainterColorC1ENS_9colortypeE>
 8010422:	4a05      	ldr	r2, [pc, #20]	; (8010438 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x34>)
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	601a      	str	r2, [r3, #0]
 8010428:	4a04      	ldr	r2, [pc, #16]	; (801043c <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE+0x38>)
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	609a      	str	r2, [r3, #8]
    {
    }
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	4618      	mov	r0, r3
 8010432:	3708      	adds	r7, #8
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}
 8010438:	0803045c 	.word	0x0803045c
 801043c:	08030480 	.word	0x08030480

08010440 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>:

    virtual void setColor(colortype color)
 8010440:	b580      	push	{r7, lr}
 8010442:	b086      	sub	sp, #24
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
 8010448:	6039      	str	r1, [r7, #0]
    {
        AbstractPainterColor::setColor(color);
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	3308      	adds	r3, #8
 801044e:	6839      	ldr	r1, [r7, #0]
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff ffa7 	bl	80103a4 <_ZN8touchgfx20AbstractPainterColor8setColorENS_9colortypeE>
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	617b      	str	r3, [r7, #20]
     *
     * @return The red part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getRed(colortype color)
    {
        return color >> 16;
 801045a:	f107 0314 	add.w	r3, r7, #20
 801045e:	4618      	mov	r0, r3
 8010460:	f7ff fe4c 	bl	80100fc <_ZNK8touchgfx9colortypecvmEv>
 8010464:	4603      	mov	r3, r0
 8010466:	0c1b      	lsrs	r3, r3, #16
 8010468:	b2da      	uxtb	r2, r3
        painterRed = Color::getRed(color);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	741a      	strb	r2, [r3, #16]
 801046e:	683b      	ldr	r3, [r7, #0]
 8010470:	613b      	str	r3, [r7, #16]
     *
     * @return The green part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getGreen(colortype color)
    {
        return color >> 8;
 8010472:	f107 0310 	add.w	r3, r7, #16
 8010476:	4618      	mov	r0, r3
 8010478:	f7ff fe40 	bl	80100fc <_ZNK8touchgfx9colortypecvmEv>
 801047c:	4603      	mov	r3, r0
 801047e:	0a1b      	lsrs	r3, r3, #8
 8010480:	b2da      	uxtb	r2, r3
        painterGreen = Color::getGreen(color);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	745a      	strb	r2, [r3, #17]
 8010486:	683b      	ldr	r3, [r7, #0]
 8010488:	60fb      	str	r3, [r7, #12]
     *
     * @return The blue part of the color (0 to 255).
     */
    FORCE_INLINE_FUNCTION static uint8_t getBlue(colortype color)
    {
        return color;
 801048a:	f107 030c 	add.w	r3, r7, #12
 801048e:	4618      	mov	r0, r3
 8010490:	f7ff fe34 	bl	80100fc <_ZNK8touchgfx9colortypecvmEv>
 8010494:	4603      	mov	r3, r0
 8010496:	b2da      	uxtb	r2, r3
        painterBlue = Color::getBlue(color);
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	749a      	strb	r2, [r3, #18]
    }
 801049c:	bf00      	nop
 801049e:	3718      	adds	r7, #24
 80104a0:	46bd      	mov	sp, r7
 80104a2:	bd80      	pop	{r7, pc}

080104a4 <_ZThn8_N8touchgfx15PainterARGB88888setColorENS_9colortypeE>:
    virtual void setColor(colortype color)
 80104a4:	f1a0 0008 	sub.w	r0, r0, #8
 80104a8:	e7ca      	b.n	8010440 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
	...

080104ac <_ZN11tempBoxBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/containers/tempBoxBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>

tempBoxBase::tempBoxBase()
 80104ac:	b590      	push	{r4, r7, lr}
 80104ae:	b095      	sub	sp, #84	; 0x54
 80104b0:	af02      	add	r7, sp, #8
 80104b2:	6178      	str	r0, [r7, #20]
 80104b4:	697b      	ldr	r3, [r7, #20]
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7ff f8b2 	bl	800f620 <_ZN8touchgfx9ContainerC1Ev>
 80104bc:	4a72      	ldr	r2, [pc, #456]	; (8010688 <_ZN11tempBoxBaseC1Ev+0x1dc>)
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	601a      	str	r2, [r3, #0]
 80104c2:	697b      	ldr	r3, [r7, #20]
 80104c4:	332c      	adds	r3, #44	; 0x2c
 80104c6:	4618      	mov	r0, r3
 80104c8:	f007 fafa 	bl	8017ac0 <_ZN8touchgfx4LineC1Ev>
 80104cc:	697b      	ldr	r3, [r7, #20]
 80104ce:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 80104d2:	f107 0320 	add.w	r3, r7, #32
 80104d6:	2100      	movs	r1, #0
 80104d8:	4618      	mov	r0, r3
 80104da:	f7ff f8e5 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 80104de:	6a39      	ldr	r1, [r7, #32]
 80104e0:	4620      	mov	r0, r4
 80104e2:	f7ff ff8f 	bl	8010404 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	33b0      	adds	r3, #176	; 0xb0
 80104ea:	4618      	mov	r0, r3
 80104ec:	f7ff fac6 	bl	800fa7c <_ZN8touchgfx8TextAreaC1Ev>
{
    setWidth(220);
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	21dc      	movs	r1, #220	; 0xdc
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7ff f81d 	bl	800f534 <_ZN8touchgfx8Drawable8setWidthEs>
    setHeight(60);
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	213c      	movs	r1, #60	; 0x3c
 80104fe:	4618      	mov	r0, r3
 8010500:	f7ff f827 	bl	800f552 <_ZN8touchgfx8Drawable9setHeightEs>
    line1.setPosition(0, 0, 100, 60);
 8010504:	697b      	ldr	r3, [r7, #20]
 8010506:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 801050a:	233c      	movs	r3, #60	; 0x3c
 801050c:	9300      	str	r3, [sp, #0]
 801050e:	2364      	movs	r3, #100	; 0x64
 8010510:	2200      	movs	r2, #0
 8010512:	2100      	movs	r1, #0
 8010514:	f7ff f915 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	f103 049c 	add.w	r4, r3, #156	; 0x9c
 801051e:	23ff      	movs	r3, #255	; 0xff
 8010520:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 8010524:	23ff      	movs	r3, #255	; 0xff
 8010526:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801052a:	23ff      	movs	r3, #255	; 0xff
 801052c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 8010530:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8010534:	041b      	lsls	r3, r3, #16
 8010536:	461a      	mov	r2, r3
 8010538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801053c:	021b      	lsls	r3, r3, #8
 801053e:	431a      	orrs	r2, r3
 8010540:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8010544:	4313      	orrs	r3, r2
 8010546:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801054a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801054e:	4611      	mov	r1, r2
 8010550:	4618      	mov	r0, r3
 8010552:	f7ff f8a9 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 8010556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010558:	4619      	mov	r1, r3
 801055a:	4620      	mov	r0, r4
 801055c:	f7ff ff70 	bl	8010440 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	339c      	adds	r3, #156	; 0x9c
 801056a:	4619      	mov	r1, r3
 801056c:	4610      	mov	r0, r2
 801056e:	f7ff fe52 	bl	8010216 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(0, 0);
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	332c      	adds	r3, #44	; 0x2c
 8010576:	2200      	movs	r2, #0
 8010578:	2100      	movs	r1, #0
 801057a:	4618      	mov	r0, r3
 801057c:	f000 f8c2 	bl	8010704 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(0, 220);
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	332c      	adds	r3, #44	; 0x2c
 8010584:	22dc      	movs	r2, #220	; 0xdc
 8010586:	2100      	movs	r1, #0
 8010588:	4618      	mov	r0, r3
 801058a:	f000 f8e1 	bl	8010750 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(1);
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	332c      	adds	r3, #44	; 0x2c
 8010592:	2101      	movs	r1, #1
 8010594:	4618      	mov	r0, r3
 8010596:	f000 f901 	bl	801079c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 801059a:	697b      	ldr	r3, [r7, #20]
 801059c:	332c      	adds	r3, #44	; 0x2c
 801059e:	2101      	movs	r1, #1
 80105a0:	4618      	mov	r0, r3
 80105a2:	f007 fbb9 	bl	8017d18 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    textArea1.setPosition(0, 0, 220, 60);
 80105a6:	697b      	ldr	r3, [r7, #20]
 80105a8:	f103 00b0 	add.w	r0, r3, #176	; 0xb0
 80105ac:	233c      	movs	r3, #60	; 0x3c
 80105ae:	9300      	str	r3, [sp, #0]
 80105b0:	23dc      	movs	r3, #220	; 0xdc
 80105b2:	2200      	movs	r2, #0
 80105b4:	2100      	movs	r1, #0
 80105b6:	f7ff f8c4 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea1.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80105ba:	697b      	ldr	r3, [r7, #20]
 80105bc:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80105c0:	23ff      	movs	r3, #255	; 0xff
 80105c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80105c6:	23ff      	movs	r3, #255	; 0xff
 80105c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 80105cc:	23ff      	movs	r3, #255	; 0xff
 80105ce:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 80105d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80105d6:	041b      	lsls	r3, r3, #16
 80105d8:	461a      	mov	r2, r3
 80105da:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80105de:	021b      	lsls	r3, r3, #8
 80105e0:	431a      	orrs	r2, r3
 80105e2:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80105e6:	4313      	orrs	r3, r2
 80105e8:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80105ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80105f0:	4611      	mov	r1, r2
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7ff f858 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 80105f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fa:	63fc      	str	r4, [r7, #60]	; 0x3c
 80105fc:	61fb      	str	r3, [r7, #28]
        color = newColor;
 80105fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010600:	69fa      	ldr	r2, [r7, #28]
 8010602:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010604:	bf00      	nop
    textArea1.setLinespacing(2);
 8010606:	697b      	ldr	r3, [r7, #20]
 8010608:	33b0      	adds	r3, #176	; 0xb0
 801060a:	647b      	str	r3, [r7, #68]	; 0x44
 801060c:	2302      	movs	r3, #2
 801060e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        linespace = space;
 8010612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010614:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010618:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801061a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	3384      	adds	r3, #132	; 0x84
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8010624:	463a      	mov	r2, r7
 8010626:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010628:	4610      	mov	r0, r2
 801062a:	4798      	blx	r3
 801062c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010630:	463a      	mov	r2, r7
 8010632:	ca07      	ldmia	r2, {r0, r1, r2}
 8010634:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010638:	bf00      	nop
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_VVN0));
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8010640:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010644:	2104      	movs	r1, #4
 8010646:	4618      	mov	r0, r3
 8010648:	f7ff fa02 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
 801064c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010650:	4619      	mov	r1, r3
 8010652:	4620      	mov	r0, r4
 8010654:	f007 ff80 	bl	8018558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801065c:	4618      	mov	r0, r3
 801065e:	f7fd fe23 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>

    add(line1);
 8010662:	697a      	ldr	r2, [r7, #20]
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	332c      	adds	r3, #44	; 0x2c
 8010668:	4619      	mov	r1, r3
 801066a:	4610      	mov	r0, r2
 801066c:	f005 fdbc 	bl	80161e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(textArea1);
 8010670:	697a      	ldr	r2, [r7, #20]
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	33b0      	adds	r3, #176	; 0xb0
 8010676:	4619      	mov	r1, r3
 8010678:	4610      	mov	r0, r2
 801067a:	f005 fdb5 	bl	80161e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	4618      	mov	r0, r3
 8010682:	374c      	adds	r7, #76	; 0x4c
 8010684:	46bd      	mov	sp, r7
 8010686:	bd90      	pop	{r4, r7, pc}
 8010688:	0802fa60 	.word	0x0802fa60

0801068c <_ZN11tempBoxBaseD1Ev>:

tempBoxBase::~tempBoxBase()
 801068c:	b580      	push	{r7, lr}
 801068e:	b082      	sub	sp, #8
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	4a0d      	ldr	r2, [pc, #52]	; (80106cc <_ZN11tempBoxBaseD1Ev+0x40>)
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	601a      	str	r2, [r3, #0]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	33b0      	adds	r3, #176	; 0xb0
 801069e:	4618      	mov	r0, r3
 80106a0:	f7ff fb2c 	bl	800fcfc <_ZN8touchgfx8TextAreaD1Ev>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	339c      	adds	r3, #156	; 0x9c
 80106a8:	4618      	mov	r0, r3
 80106aa:	f000 f8d3 	bl	8010854 <_ZN8touchgfx15PainterARGB8888D1Ev>
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	332c      	adds	r3, #44	; 0x2c
 80106b2:	4618      	mov	r0, r3
 80106b4:	f000 f8ac 	bl	8010810 <_ZN8touchgfx4LineD1Ev>
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	4618      	mov	r0, r3
 80106bc:	f7fe ffd2 	bl	800f664 <_ZN8touchgfx9ContainerD1Ev>
{

}
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	4618      	mov	r0, r3
 80106c4:	3708      	adds	r7, #8
 80106c6:	46bd      	mov	sp, r7
 80106c8:	bd80      	pop	{r7, pc}
 80106ca:	bf00      	nop
 80106cc:	0802fa60 	.word	0x0802fa60

080106d0 <_ZN11tempBoxBaseD0Ev>:
tempBoxBase::~tempBoxBase()
 80106d0:	b580      	push	{r7, lr}
 80106d2:	b082      	sub	sp, #8
 80106d4:	af00      	add	r7, sp, #0
 80106d6:	6078      	str	r0, [r7, #4]
}
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f7ff ffd7 	bl	801068c <_ZN11tempBoxBaseD1Ev>
 80106de:	21f8      	movs	r1, #248	; 0xf8
 80106e0:	6878      	ldr	r0, [r7, #4]
 80106e2:	f019 fa8b 	bl	8029bfc <_ZdlPvj>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	4618      	mov	r0, r3
 80106ea:	3708      	adds	r7, #8
 80106ec:	46bd      	mov	sp, r7
 80106ee:	bd80      	pop	{r7, pc}

080106f0 <_ZN11tempBoxBase10initializeEv>:

void tempBoxBase::initialize()
{
 80106f0:	b480      	push	{r7}
 80106f2:	b083      	sub	sp, #12
 80106f4:	af00      	add	r7, sp, #0
 80106f6:	6078      	str	r0, [r7, #4]

}
 80106f8:	bf00      	nop
 80106fa:	370c      	adds	r7, #12
 80106fc:	46bd      	mov	sp, r7
 80106fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010702:	4770      	bx	lr

08010704 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>:
    void setStart(T x, T y)
 8010704:	b590      	push	{r4, r7, lr}
 8010706:	b089      	sub	sp, #36	; 0x24
 8010708:	af00      	add	r7, sp, #0
 801070a:	60f8      	str	r0, [r7, #12]
 801070c:	60b9      	str	r1, [r7, #8]
 801070e:	607a      	str	r2, [r7, #4]
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	61bb      	str	r3, [r7, #24]
    template <typename T>
    FORCE_INLINE_FUNCTION
#endif
    static Q5 toQ5(T value)
    {
        return Q5((int)(value * Rasterizer::POLY_BASE_SIZE));
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	015a      	lsls	r2, r3, #5
 8010718:	f107 0314 	add.w	r3, r7, #20
 801071c:	4611      	mov	r1, r2
 801071e:	4618      	mov	r0, r3
 8010720:	f7ff fd5e 	bl	80101e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	461c      	mov	r4, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	61fb      	str	r3, [r7, #28]
 801072c:	69fb      	ldr	r3, [r7, #28]
 801072e:	015a      	lsls	r2, r3, #5
 8010730:	f107 0310 	add.w	r3, r7, #16
 8010734:	4611      	mov	r1, r2
 8010736:	4618      	mov	r0, r3
 8010738:	f7ff fd52 	bl	80101e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 801073c:	693b      	ldr	r3, [r7, #16]
        setStart(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 801073e:	461a      	mov	r2, r3
 8010740:	4621      	mov	r1, r4
 8010742:	68f8      	ldr	r0, [r7, #12]
 8010744:	f007 fad2 	bl	8017cec <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>
    }
 8010748:	bf00      	nop
 801074a:	3724      	adds	r7, #36	; 0x24
 801074c:	46bd      	mov	sp, r7
 801074e:	bd90      	pop	{r4, r7, pc}

08010750 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>:
    void setEnd(T x, T y)
 8010750:	b590      	push	{r4, r7, lr}
 8010752:	b089      	sub	sp, #36	; 0x24
 8010754:	af00      	add	r7, sp, #0
 8010756:	60f8      	str	r0, [r7, #12]
 8010758:	60b9      	str	r1, [r7, #8]
 801075a:	607a      	str	r2, [r7, #4]
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	61bb      	str	r3, [r7, #24]
 8010760:	69bb      	ldr	r3, [r7, #24]
 8010762:	015a      	lsls	r2, r3, #5
 8010764:	f107 0314 	add.w	r3, r7, #20
 8010768:	4611      	mov	r1, r2
 801076a:	4618      	mov	r0, r3
 801076c:	f7ff fd38 	bl	80101e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	461c      	mov	r4, r3
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	61fb      	str	r3, [r7, #28]
 8010778:	69fb      	ldr	r3, [r7, #28]
 801077a:	015a      	lsls	r2, r3, #5
 801077c:	f107 0310 	add.w	r3, r7, #16
 8010780:	4611      	mov	r1, r2
 8010782:	4618      	mov	r0, r3
 8010784:	f7ff fd2c 	bl	80101e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 8010788:	693b      	ldr	r3, [r7, #16]
        setEnd(CWRUtil::toQ5<T>(x), CWRUtil::toQ5<T>(y));
 801078a:	461a      	mov	r2, r3
 801078c:	4621      	mov	r1, r4
 801078e:	68f8      	ldr	r0, [r7, #12]
 8010790:	f007 fab7 	bl	8017d02 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>
    }
 8010794:	bf00      	nop
 8010796:	3724      	adds	r7, #36	; 0x24
 8010798:	46bd      	mov	sp, r7
 801079a:	bd90      	pop	{r4, r7, pc}

0801079c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>:
    void setLineWidth(T width)
 801079c:	b580      	push	{r7, lr}
 801079e:	b084      	sub	sp, #16
 80107a0:	af00      	add	r7, sp, #0
 80107a2:	6078      	str	r0, [r7, #4]
 80107a4:	6039      	str	r1, [r7, #0]
 80107a6:	683b      	ldr	r3, [r7, #0]
 80107a8:	60fb      	str	r3, [r7, #12]
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	015a      	lsls	r2, r3, #5
 80107ae:	f107 0308 	add.w	r3, r7, #8
 80107b2:	4611      	mov	r1, r2
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7ff fd13 	bl	80101e0 <_ZN8touchgfx7CWRUtil2Q5C1Ei>
 80107ba:	68bb      	ldr	r3, [r7, #8]
        setLineWidth(CWRUtil::toQ5<T>(width));
 80107bc:	4619      	mov	r1, r3
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff fd37 	bl	8010232 <_ZN8touchgfx4Line12setLineWidthENS_7CWRUtil2Q5E>
    }
 80107c4:	bf00      	nop
 80107c6:	3710      	adds	r7, #16
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <_ZN8touchgfx12CanvasWidgetD1Ev>:
class CanvasWidget : public Widget
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
 80107d4:	4a05      	ldr	r2, [pc, #20]	; (80107ec <_ZN8touchgfx12CanvasWidgetD1Ev+0x20>)
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	601a      	str	r2, [r3, #0]
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	4618      	mov	r0, r3
 80107de:	f7ff f887 	bl	800f8f0 <_ZN8touchgfx6WidgetD1Ev>
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	4618      	mov	r0, r3
 80107e6:	3708      	adds	r7, #8
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	08030494 	.word	0x08030494

080107f0 <_ZN8touchgfx12CanvasWidgetD0Ev>:
 80107f0:	b580      	push	{r7, lr}
 80107f2:	b082      	sub	sp, #8
 80107f4:	af00      	add	r7, sp, #0
 80107f6:	6078      	str	r0, [r7, #4]
 80107f8:	6878      	ldr	r0, [r7, #4]
 80107fa:	f7ff ffe7 	bl	80107cc <_ZN8touchgfx12CanvasWidgetD1Ev>
 80107fe:	212c      	movs	r1, #44	; 0x2c
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f019 f9fb 	bl	8029bfc <_ZdlPvj>
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	4618      	mov	r0, r3
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}

08010810 <_ZN8touchgfx4LineD1Ev>:
class Line : public CanvasWidget
 8010810:	b580      	push	{r7, lr}
 8010812:	b082      	sub	sp, #8
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
 8010818:	4a05      	ldr	r2, [pc, #20]	; (8010830 <_ZN8touchgfx4LineD1Ev+0x20>)
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	601a      	str	r2, [r3, #0]
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	4618      	mov	r0, r3
 8010822:	f7ff ffd3 	bl	80107cc <_ZN8touchgfx12CanvasWidgetD1Ev>
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	4618      	mov	r0, r3
 801082a:	3708      	adds	r7, #8
 801082c:	46bd      	mov	sp, r7
 801082e:	bd80      	pop	{r7, pc}
 8010830:	08030630 	.word	0x08030630

08010834 <_ZN8touchgfx4LineD0Ev>:
 8010834:	b580      	push	{r7, lr}
 8010836:	b082      	sub	sp, #8
 8010838:	af00      	add	r7, sp, #0
 801083a:	6078      	str	r0, [r7, #4]
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f7ff ffe7 	bl	8010810 <_ZN8touchgfx4LineD1Ev>
 8010842:	2170      	movs	r1, #112	; 0x70
 8010844:	6878      	ldr	r0, [r7, #4]
 8010846:	f019 f9d9 	bl	8029bfc <_ZdlPvj>
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	4618      	mov	r0, r3
 801084e:	3708      	adds	r7, #8
 8010850:	46bd      	mov	sp, r7
 8010852:	bd80      	pop	{r7, pc}

08010854 <_ZN8touchgfx15PainterARGB8888D1Ev>:
class PainterARGB8888 : public AbstractPainterARGB8888, public AbstractPainterColor
 8010854:	b580      	push	{r7, lr}
 8010856:	b082      	sub	sp, #8
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	4a09      	ldr	r2, [pc, #36]	; (8010884 <_ZN8touchgfx15PainterARGB8888D1Ev+0x30>)
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	601a      	str	r2, [r3, #0]
 8010862:	4a09      	ldr	r2, [pc, #36]	; (8010888 <_ZN8touchgfx15PainterARGB8888D1Ev+0x34>)
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	609a      	str	r2, [r3, #8]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	3308      	adds	r3, #8
 801086c:	4618      	mov	r0, r3
 801086e:	f7ff fd79 	bl	8010364 <_ZN8touchgfx20AbstractPainterColorD1Ev>
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	4618      	mov	r0, r3
 8010876:	f7ff fda3 	bl	80103c0 <_ZN8touchgfx23AbstractPainterARGB8888D1Ev>
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	4618      	mov	r0, r3
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}
 8010884:	0803045c 	.word	0x0803045c
 8010888:	08030480 	.word	0x08030480

0801088c <_ZThn8_N8touchgfx15PainterARGB8888D1Ev>:
 801088c:	f1a0 0008 	sub.w	r0, r0, #8
 8010890:	e7e0      	b.n	8010854 <_ZN8touchgfx15PainterARGB8888D1Ev>
 8010892:	bf00      	nop

08010894 <_ZN8touchgfx15PainterARGB8888D0Ev>:
 8010894:	b580      	push	{r7, lr}
 8010896:	b082      	sub	sp, #8
 8010898:	af00      	add	r7, sp, #0
 801089a:	6078      	str	r0, [r7, #4]
 801089c:	6878      	ldr	r0, [r7, #4]
 801089e:	f7ff ffd9 	bl	8010854 <_ZN8touchgfx15PainterARGB8888D1Ev>
 80108a2:	2114      	movs	r1, #20
 80108a4:	6878      	ldr	r0, [r7, #4]
 80108a6:	f019 f9a9 	bl	8029bfc <_ZdlPvj>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	4618      	mov	r0, r3
 80108ae:	3708      	adds	r7, #8
 80108b0:	46bd      	mov	sp, r7
 80108b2:	bd80      	pop	{r7, pc}

080108b4 <_ZThn8_N8touchgfx15PainterARGB8888D0Ev>:
 80108b4:	f1a0 0008 	sub.w	r0, r0, #8
 80108b8:	e7ec      	b.n	8010894 <_ZN8touchgfx15PainterARGB8888D0Ev>
	...

080108bc <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 80108bc:	b580      	push	{r7, lr}
 80108be:	b082      	sub	sp, #8
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
    {
 80108c4:	4a06      	ldr	r2, [pc, #24]	; (80108e0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	601a      	str	r2, [r3, #0]
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	3304      	adds	r3, #4
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7fe fec8 	bl	800f664 <_ZN8touchgfx9ContainerD1Ev>
    }
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	4618      	mov	r0, r3
 80108d8:	3708      	adds	r7, #8
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	08030a48 	.word	0x08030a48

080108e4 <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b082      	sub	sp, #8
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
    }
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f7ff ffe5 	bl	80108bc <_ZN8touchgfx6ScreenD1Ev>
 80108f2:	213c      	movs	r1, #60	; 0x3c
 80108f4:	6878      	ldr	r0, [r7, #4]
 80108f6:	f019 f981 	bl	8029bfc <_ZdlPvj>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	4618      	mov	r0, r3
 80108fe:	3708      	adds	r7, #8
 8010900:	46bd      	mov	sp, r7
 8010902:	bd80      	pop	{r7, pc}

08010904 <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 8010904:	b480      	push	{r7}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
    {
    }
 801090c:	bf00      	nop
 801090e:	370c      	adds	r7, #12
 8010910:	46bd      	mov	sp, r7
 8010912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010916:	4770      	bx	lr

08010918 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 8010918:	b480      	push	{r7}
 801091a:	b083      	sub	sp, #12
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
    {
    }
 8010920:	bf00      	nop
 8010922:	370c      	adds	r7, #12
 8010924:	46bd      	mov	sp, r7
 8010926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092a:	4770      	bx	lr

0801092c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 801092c:	b480      	push	{r7}
 801092e:	b083      	sub	sp, #12
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
    {
    }
 8010934:	bf00      	nop
 8010936:	370c      	adds	r7, #12
 8010938:	46bd      	mov	sp, r7
 801093a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801093e:	4770      	bx	lr

08010940 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 8010940:	b480      	push	{r7}
 8010942:	b083      	sub	sp, #12
 8010944:	af00      	add	r7, sp, #0
 8010946:	6078      	str	r0, [r7, #4]
    {
    }
 8010948:	bf00      	nop
 801094a:	370c      	adds	r7, #12
 801094c:	46bd      	mov	sp, r7
 801094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010952:	4770      	bx	lr

08010954 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 8010954:	b480      	push	{r7}
 8010956:	b083      	sub	sp, #12
 8010958:	af00      	add	r7, sp, #0
 801095a:	6078      	str	r0, [r7, #4]
 801095c:	460b      	mov	r3, r1
 801095e:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 8010960:	bf00      	nop
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
 8010974:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	3304      	adds	r3, #4
 801097a:	6839      	ldr	r1, [r7, #0]
 801097c:	4618      	mov	r0, r3
 801097e:	f005 fc33 	bl	80161e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 8010982:	bf00      	nop
 8010984:	3708      	adds	r7, #8
 8010986:	46bd      	mov	sp, r7
 8010988:	bd80      	pop	{r7, pc}

0801098a <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>:
    void setWildcard1(const Unicode::UnicodeChar* value)
 801098a:	b480      	push	{r7}
 801098c:	b083      	sub	sp, #12
 801098e:	af00      	add	r7, sp, #0
 8010990:	6078      	str	r0, [r7, #4]
 8010992:	6039      	str	r1, [r7, #0]
        wc1 = value;
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	683a      	ldr	r2, [r7, #0]
 8010998:	649a      	str	r2, [r3, #72]	; 0x48
    }
 801099a:	bf00      	nop
 801099c:	370c      	adds	r7, #12
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr

080109a6 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     * @param  value A pointer to the UnicodeChar to set the wildcard to.
     *
     * @note The pointer passed is saved, and must be accessible whenever TextAreaWithOneWildcard
     *       may need it.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b082      	sub	sp, #8
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
 80109ae:	6039      	str	r1, [r7, #0]
    {
        setWildcard1(value);
 80109b0:	6839      	ldr	r1, [r7, #0]
 80109b2:	6878      	ldr	r0, [r7, #4]
 80109b4:	f7ff ffe9 	bl	801098a <_ZN8touchgfx23TextAreaWithOneWildcard12setWildcard1EPKt>
    }
 80109b8:	bf00      	nop
 80109ba:	3708      	adds	r7, #8
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}

080109c0 <_ZN7tempBoxD1Ev>:

class tempBox : public tempBoxBase
{
public:
    tempBox();
    virtual ~tempBox() {}
 80109c0:	b580      	push	{r7, lr}
 80109c2:	b082      	sub	sp, #8
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	6078      	str	r0, [r7, #4]
 80109c8:	4a05      	ldr	r2, [pc, #20]	; (80109e0 <_ZN7tempBoxD1Ev+0x20>)
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	601a      	str	r2, [r3, #0]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	4618      	mov	r0, r3
 80109d2:	f7ff fe5b 	bl	801068c <_ZN11tempBoxBaseD1Ev>
 80109d6:	687b      	ldr	r3, [r7, #4]
 80109d8:	4618      	mov	r0, r3
 80109da:	3708      	adds	r7, #8
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	0802fcfc 	.word	0x0802fcfc

080109e4 <_ZN7tempBoxD0Ev>:
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7ff ffe7 	bl	80109c0 <_ZN7tempBoxD1Ev>
 80109f2:	21f8      	movs	r1, #248	; 0xf8
 80109f4:	6878      	ldr	r0, [r7, #4]
 80109f6:	f019 f901 	bl	8029bfc <_ZdlPvj>
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	4618      	mov	r0, r3
 80109fe:	3708      	adds	r7, #8
 8010a00:	46bd      	mov	sp, r7
 8010a02:	bd80      	pop	{r7, pc}

08010a04 <_ZN8alertBarD1Ev>:

class alertBar : public alertBarBase
{
public:
    alertBar();
    virtual ~alertBar() {}
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
 8010a0a:	6078      	str	r0, [r7, #4]
 8010a0c:	4a05      	ldr	r2, [pc, #20]	; (8010a24 <_ZN8alertBarD1Ev+0x20>)
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	601a      	str	r2, [r3, #0]
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7ff fae9 	bl	800ffec <_ZN12alertBarBaseD1Ev>
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3708      	adds	r7, #8
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	0802fc68 	.word	0x0802fc68

08010a28 <_ZN8alertBarD0Ev>:
 8010a28:	b580      	push	{r7, lr}
 8010a2a:	b082      	sub	sp, #8
 8010a2c:	af00      	add	r7, sp, #0
 8010a2e:	6078      	str	r0, [r7, #4]
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f7ff ffe7 	bl	8010a04 <_ZN8alertBarD1Ev>
 8010a36:	21ac      	movs	r1, #172	; 0xac
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f019 f8df 	bl	8029bfc <_ZdlPvj>
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	4618      	mov	r0, r3
 8010a42:	3708      	adds	r7, #8
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd80      	pop	{r7, pc}

08010a48 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>:
class View : public Screen
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
 8010a50:	4a05      	ldr	r2, [pc, #20]	; (8010a68 <_ZN8touchgfx4ViewI13MainPresenterED1Ev+0x20>)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	601a      	str	r2, [r3, #0]
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f7ff ff2f 	bl	80108bc <_ZN8touchgfx6ScreenD1Ev>
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	4618      	mov	r0, r3
 8010a62:	3708      	adds	r7, #8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}
 8010a68:	0802fb80 	.word	0x0802fb80

08010a6c <_ZN8touchgfx4ViewI13MainPresenterED0Ev>:
 8010a6c:	b580      	push	{r7, lr}
 8010a6e:	b082      	sub	sp, #8
 8010a70:	af00      	add	r7, sp, #0
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6878      	ldr	r0, [r7, #4]
 8010a76:	f7ff ffe7 	bl	8010a48 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010a7a:	2140      	movs	r1, #64	; 0x40
 8010a7c:	6878      	ldr	r0, [r7, #4]
 8010a7e:	f019 f8bd 	bl	8029bfc <_ZdlPvj>
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	4618      	mov	r0, r3
 8010a86:	3708      	adds	r7, #8
 8010a88:	46bd      	mov	sp, r7
 8010a8a:	bd80      	pop	{r7, pc}

08010a8c <_ZN12MainViewBaseD1Ev>:

class MainViewBase : public touchgfx::View<MainPresenter>
{
public:
    MainViewBase();
    virtual ~MainViewBase() {}
 8010a8c:	b580      	push	{r7, lr}
 8010a8e:	b082      	sub	sp, #8
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	4a33      	ldr	r2, [pc, #204]	; (8010b64 <_ZN12MainViewBaseD1Ev+0xd8>)
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	601a      	str	r2, [r3, #0]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff fad9 	bl	8010058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	f203 7384 	addw	r3, r3, #1924	; 0x784
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7ff fad3 	bl	8010058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8010ab8:	4618      	mov	r0, r3
 8010aba:	f7ff ffa3 	bl	8010a04 <_ZN8alertBarD1Ev>
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	f7ff ff9d 	bl	8010a04 <_ZN8alertBarD1Ev>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f7ff ff75 	bl	80109c0 <_ZN7tempBoxD1Ev>
 8010ad6:	687b      	ldr	r3, [r7, #4]
 8010ad8:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7ff ff6f 	bl	80109c0 <_ZN7tempBoxD1Ev>
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f7ff ff69 	bl	80109c0 <_ZN7tempBoxD1Ev>
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7ff ff63 	bl	80109c0 <_ZN7tempBoxD1Ev>
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7ff faa9 	bl	8010058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7ff faa3 	bl	8010058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010b18:	4618      	mov	r0, r3
 8010b1a:	f7ff fa9d 	bl	8010058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7ff fe95 	bl	8010854 <_ZN8touchgfx15PainterARGB8888D1Ev>
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	33e4      	adds	r3, #228	; 0xe4
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7ff fe6e 	bl	8010810 <_ZN8touchgfx4LineD1Ev>
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	3398      	adds	r3, #152	; 0x98
 8010b38:	4618      	mov	r0, r3
 8010b3a:	f7ff fa8d 	bl	8010058 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	336c      	adds	r3, #108	; 0x6c
 8010b42:	4618      	mov	r0, r3
 8010b44:	f7fe ff28 	bl	800f998 <_ZN8touchgfx3BoxD1Ev>
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	3340      	adds	r3, #64	; 0x40
 8010b4c:	4618      	mov	r0, r3
 8010b4e:	f7fe ff23 	bl	800f998 <_ZN8touchgfx3BoxD1Ev>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f7ff ff77 	bl	8010a48 <_ZN8touchgfx4ViewI13MainPresenterED1Ev>
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	0802fb48 	.word	0x0802fb48

08010b68 <_ZN12MainViewBaseD0Ev>:
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f7ff ff8b 	bl	8010a8c <_ZN12MainViewBaseD1Ev>
 8010b76:	f243 7164 	movw	r1, #14180	; 0x3764
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f019 f83e 	bl	8029bfc <_ZdlPvj>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	4618      	mov	r0, r3
 8010b84:	3708      	adds	r7, #8
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}

08010b8a <_ZN12MainViewBase9function1Ev>:
    virtual void handleKeyEvent(uint8_t key);

    /*
     * Virtual Action Handlers
     */
    virtual void function1()
 8010b8a:	b480      	push	{r7}
 8010b8c:	b083      	sub	sp, #12
 8010b8e:	af00      	add	r7, sp, #0
 8010b90:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Main
    }
 8010b92:	bf00      	nop
 8010b94:	370c      	adds	r7, #12
 8010b96:	46bd      	mov	sp, r7
 8010b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b9c:	4770      	bx	lr
	...

08010ba0 <_ZN12MainViewBaseC1Ev>:
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include <touchgfx/canvas_widget_renderer/CanvasWidgetRenderer.hpp>


MainViewBase::MainViewBase()
 8010ba0:	b590      	push	{r4, r7, lr}
 8010ba2:	b0d3      	sub	sp, #332	; 0x14c
 8010ba4:	af02      	add	r7, sp, #8
 8010ba6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010baa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bae:	6018      	str	r0, [r3, #0]
 8010bb0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f001 f88e 	bl	8011cdc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>
 8010bc0:	4ae0      	ldr	r2, [pc, #896]	; (8010f44 <_ZN12MainViewBaseC1Ev+0x3a4>)
 8010bc2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	601a      	str	r2, [r3, #0]
 8010bce:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bd2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	3340      	adds	r3, #64	; 0x40
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7fe feaa 	bl	800f934 <_ZN8touchgfx3BoxC1Ev>
 8010be0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010be4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010be8:	681b      	ldr	r3, [r3, #0]
 8010bea:	336c      	adds	r3, #108	; 0x6c
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fe fea1 	bl	800f934 <_ZN8touchgfx3BoxC1Ev>
 8010bf2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010bf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	3398      	adds	r3, #152	; 0x98
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7ff f8e4 	bl	800fdcc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010c04:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	33e4      	adds	r3, #228	; 0xe4
 8010c10:	4618      	mov	r0, r3
 8010c12:	f006 ff55 	bl	8017ac0 <_ZN8touchgfx4LineC1Ev>
 8010c16:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8010c24:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8010c28:	2100      	movs	r1, #0
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fe fd3c 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 8010c30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c34:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8010c38:	6819      	ldr	r1, [r3, #0]
 8010c3a:	4620      	mov	r0, r4
 8010c3c:	f7ff fbe2 	bl	8010404 <_ZN8touchgfx15PainterARGB8888C1ENS_9colortypeE>
 8010c40:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8010c4e:	4618      	mov	r0, r3
 8010c50:	f7ff f8bc 	bl	800fdcc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010c54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c5c:	681b      	ldr	r3, [r3, #0]
 8010c5e:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7ff f8b2 	bl	800fdcc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010c68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7ff f8a8 	bl	800fdcc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010c7c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8010c8a:	4618      	mov	r0, r3
 8010c8c:	f001 faba 	bl	8012204 <_ZN7tempBoxC1Ev>
 8010c90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f001 fab0 	bl	8012204 <_ZN7tempBoxC1Ev>
 8010ca4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ca8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	f001 faa6 	bl	8012204 <_ZN7tempBoxC1Ev>
 8010cb8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f001 fa9c 	bl	8012204 <_ZN7tempBoxC1Ev>
 8010ccc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010cd0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f001 fa74 	bl	80121c8 <_ZN8alertBarC1Ev>
 8010ce0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ce4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f001 fa6a 	bl	80121c8 <_ZN8alertBarC1Ev>
 8010cf4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010cf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	f203 7384 	addw	r3, r3, #1924	; 0x784
 8010d02:	4618      	mov	r0, r3
 8010d04:	f7ff f862 	bl	800fdcc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 8010d08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010d0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8010d16:	4618      	mov	r0, r3
 8010d18:	f7ff f858 	bl	800fdcc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
{

    touchgfx::CanvasWidgetRenderer::setupBuffer(canvasBuffer, CANVAS_BUFFER_SIZE);
 8010d1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010d20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	f603 0384 	addw	r3, r3, #2180	; 0x884
 8010d2a:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f008 fc4a 	bl	80195c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>

    __background.setPosition(0, 0, 800, 480);
 8010d34:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010d38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8010d42:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	f44f 7348 	mov.w	r3, #800	; 0x320
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	2100      	movs	r1, #0
 8010d50:	f7fe fcf7 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010d54:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010d58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010d5c:	681b      	ldr	r3, [r3, #0]
 8010d5e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8010d62:	2300      	movs	r3, #0
 8010d64:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
 8010d68:	2300      	movs	r3, #0
 8010d6a:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
 8010d6e:	2300      	movs	r3, #0
 8010d70:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
 8010d74:	f897 30c1 	ldrb.w	r3, [r7, #193]	; 0xc1
 8010d78:	041b      	lsls	r3, r3, #16
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	f897 30c0 	ldrb.w	r3, [r7, #192]	; 0xc0
 8010d80:	021b      	lsls	r3, r3, #8
 8010d82:	431a      	orrs	r2, r3
 8010d84:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8010d88:	4313      	orrs	r3, r2
 8010d8a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010d8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8010d92:	4611      	mov	r1, r2
 8010d94:	4618      	mov	r0, r3
 8010d96:	f7fe fc87 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 8010d9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010d9e:	4619      	mov	r1, r3
 8010da0:	4620      	mov	r0, r4
 8010da2:	f7fe fdeb 	bl	800f97c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    box1.setPosition(0, 0, 805, 480);
 8010da6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010daa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8010db4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8010db8:	9300      	str	r3, [sp, #0]
 8010dba:	f240 3325 	movw	r3, #805	; 0x325
 8010dbe:	2200      	movs	r2, #0
 8010dc0:	2100      	movs	r1, #0
 8010dc2:	f7fe fcbe 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 8010dc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010dca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
 8010dda:	2300      	movs	r3, #0
 8010ddc:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
 8010de0:	2300      	movs	r3, #0
 8010de2:	f887 30c2 	strb.w	r3, [r7, #194]	; 0xc2
 8010de6:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8010dea:	041b      	lsls	r3, r3, #16
 8010dec:	461a      	mov	r2, r3
 8010dee:	f897 30c3 	ldrb.w	r3, [r7, #195]	; 0xc3
 8010df2:	021b      	lsls	r3, r3, #8
 8010df4:	431a      	orrs	r2, r3
 8010df6:	f897 30c2 	ldrb.w	r3, [r7, #194]	; 0xc2
 8010dfa:	4313      	orrs	r3, r2
 8010dfc:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010e00:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8010e04:	4611      	mov	r1, r2
 8010e06:	4618      	mov	r0, r3
 8010e08:	f7fe fc4e 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 8010e0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010e10:	4619      	mov	r1, r3
 8010e12:	4620      	mov	r0, r4
 8010e14:	f7fe fdb2 	bl	800f97c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    gearArea.setXY(331, 60);
 8010e18:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010e1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	3398      	adds	r3, #152	; 0x98
 8010e24:	223c      	movs	r2, #60	; 0x3c
 8010e26:	f240 114b 	movw	r1, #331	; 0x14b
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fe fcaa 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>
    gearArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8010e30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010e34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8010e3e:	23ff      	movs	r3, #255	; 0xff
 8010e40:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
 8010e44:	23ff      	movs	r3, #255	; 0xff
 8010e46:	f887 30c6 	strb.w	r3, [r7, #198]	; 0xc6
 8010e4a:	23ff      	movs	r3, #255	; 0xff
 8010e4c:	f887 30c5 	strb.w	r3, [r7, #197]	; 0xc5
 8010e50:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8010e54:	041b      	lsls	r3, r3, #16
 8010e56:	461a      	mov	r2, r3
 8010e58:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8010e5c:	021b      	lsls	r3, r3, #8
 8010e5e:	431a      	orrs	r2, r3
 8010e60:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8010e64:	4313      	orrs	r3, r2
 8010e66:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8010e6a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010e6e:	4611      	mov	r1, r2
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fe fc19 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 8010e76:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010e7a:	461a      	mov	r2, r3
 8010e7c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8010e80:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010e84:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8010e88:	601a      	str	r2, [r3, #0]
        color = newColor;
 8010e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8010e8e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8010e92:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8010e96:	6812      	ldr	r2, [r2, #0]
 8010e98:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8010e9a:	bf00      	nop
    gearArea.setLinespacing(0);
 8010e9c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	3398      	adds	r3, #152	; 0x98
 8010ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010eac:	2300      	movs	r3, #0
 8010eae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
        linespace = space;
 8010eb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010eb6:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8010eba:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8010ebc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	3384      	adds	r3, #132	; 0x84
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	f8d7 40d0 	ldr.w	r4, [r7, #208]	; 0xd0
 8010eca:	463a      	mov	r2, r7
 8010ecc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8010ed0:	4610      	mov	r0, r2
 8010ed2:	4798      	blx	r3
 8010ed4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ed8:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8010edc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8010ee0:	ca07      	ldmia	r2, {r0, r1, r2}
 8010ee2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8010ee6:	bf00      	nop
    Unicode::snprintf(gearAreaBuffer, GEARAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_CBCX).getText());
 8010ee8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010eec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	f603 041c 	addw	r4, r3, #2076	; 0x81c
 8010ef6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010efa:	210b      	movs	r1, #11
 8010efc:	4618      	mov	r0, r3
 8010efe:	f7fe fda7 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8010f02:	4b11      	ldr	r3, [pc, #68]	; (8010f48 <_ZN12MainViewBaseC1Ev+0x3a8>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d105      	bne.n	8010f16 <_ZN12MainViewBaseC1Ev+0x376>
 8010f0a:	4b10      	ldr	r3, [pc, #64]	; (8010f4c <_ZN12MainViewBaseC1Ev+0x3ac>)
 8010f0c:	4a10      	ldr	r2, [pc, #64]	; (8010f50 <_ZN12MainViewBaseC1Ev+0x3b0>)
 8010f0e:	2160      	movs	r1, #96	; 0x60
 8010f10:	4810      	ldr	r0, [pc, #64]	; (8010f54 <_ZN12MainViewBaseC1Ev+0x3b4>)
 8010f12:	f018 ff1d 	bl	8029d50 <__assert_func>
 8010f16:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
        return typedTextId < numberOfTypedTexts;
 8010f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f22:	889a      	ldrh	r2, [r3, #4]
 8010f24:	4b0c      	ldr	r3, [pc, #48]	; (8010f58 <_ZN12MainViewBaseC1Ev+0x3b8>)
 8010f26:	881b      	ldrh	r3, [r3, #0]
 8010f28:	429a      	cmp	r2, r3
 8010f2a:	bf34      	ite	cc
 8010f2c:	2301      	movcc	r3, #1
 8010f2e:	2300      	movcs	r3, #0
 8010f30:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d114      	bne.n	8010f60 <_ZN12MainViewBaseC1Ev+0x3c0>
 8010f36:	4b09      	ldr	r3, [pc, #36]	; (8010f5c <_ZN12MainViewBaseC1Ev+0x3bc>)
 8010f38:	4a05      	ldr	r2, [pc, #20]	; (8010f50 <_ZN12MainViewBaseC1Ev+0x3b0>)
 8010f3a:	2161      	movs	r1, #97	; 0x61
 8010f3c:	4805      	ldr	r0, [pc, #20]	; (8010f54 <_ZN12MainViewBaseC1Ev+0x3b4>)
 8010f3e:	f018 ff07 	bl	8029d50 <__assert_func>
 8010f42:	bf00      	nop
 8010f44:	0802fb48 	.word	0x0802fb48
 8010f48:	2003c314 	.word	0x2003c314
 8010f4c:	0802d5a8 	.word	0x0802d5a8
 8010f50:	0802d7b4 	.word	0x0802d7b4
 8010f54:	0802d628 	.word	0x0802d628
 8010f58:	2003c318 	.word	0x2003c318
 8010f5c:	0802d66c 	.word	0x0802d66c
 8010f60:	bf00      	nop
        return texts->getText(typedTextId);
 8010f62:	4bab      	ldr	r3, [pc, #684]	; (8011210 <_ZN12MainViewBaseC1Ev+0x670>)
 8010f64:	681a      	ldr	r2, [r3, #0]
 8010f66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010f6e:	889b      	ldrh	r3, [r3, #4]
 8010f70:	4619      	mov	r1, r3
 8010f72:	4610      	mov	r0, r2
 8010f74:	f001 f86c 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 8010f78:	4603      	mov	r3, r0
 8010f7a:	bf00      	nop
 8010f7c:	4aa5      	ldr	r2, [pc, #660]	; (8011214 <_ZN12MainViewBaseC1Ev+0x674>)
 8010f7e:	2102      	movs	r1, #2
 8010f80:	4620      	mov	r0, r4
 8010f82:	f00c ffa3 	bl	801decc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8010f86:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f7fd f98c 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>
    gearArea.setWildcard(gearAreaBuffer);
 8010f90:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010f94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8010f9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010fa2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f603 031c 	addw	r3, r3, #2076	; 0x81c
 8010fac:	4619      	mov	r1, r3
 8010fae:	4610      	mov	r0, r2
 8010fb0:	f7ff fcf9 	bl	80109a6 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    gearArea.resizeToCurrentText();
 8010fb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010fb8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	3398      	adds	r3, #152	; 0x98
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f007 faa9 	bl	8018518 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    gearArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_T6XW));
 8010fc6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010fca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8010fd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010fd8:	2100      	movs	r1, #0
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7fe fd38 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
 8010fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010fe4:	4619      	mov	r1, r3
 8010fe6:	4620      	mov	r0, r4
 8010fe8:	f007 fab6 	bl	8018558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8010fec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	f7fd f959 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>

    line1.setPosition(329, 140, 152, 20);
 8010ff6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8010ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	f103 00e4 	add.w	r0, r3, #228	; 0xe4
 8011004:	2314      	movs	r3, #20
 8011006:	9300      	str	r3, [sp, #0]
 8011008:	2398      	movs	r3, #152	; 0x98
 801100a:	228c      	movs	r2, #140	; 0x8c
 801100c:	f240 1149 	movw	r1, #329	; 0x149
 8011010:	f7fe fb97 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    line1Painter.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 8011014:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	f503 74aa 	add.w	r4, r3, #340	; 0x154
 8011022:	23ff      	movs	r3, #255	; 0xff
 8011024:	f887 30dc 	strb.w	r3, [r7, #220]	; 0xdc
 8011028:	23ff      	movs	r3, #255	; 0xff
 801102a:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
 801102e:	23ff      	movs	r3, #255	; 0xff
 8011030:	f887 30da 	strb.w	r3, [r7, #218]	; 0xda
 8011034:	f897 30dc 	ldrb.w	r3, [r7, #220]	; 0xdc
 8011038:	041b      	lsls	r3, r3, #16
 801103a:	461a      	mov	r2, r3
 801103c:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
 8011040:	021b      	lsls	r3, r3, #8
 8011042:	431a      	orrs	r2, r3
 8011044:	f897 30da 	ldrb.w	r3, [r7, #218]	; 0xda
 8011048:	4313      	orrs	r3, r2
 801104a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801104e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8011052:	4611      	mov	r1, r2
 8011054:	4618      	mov	r0, r3
 8011056:	f7fe fb27 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 801105a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801105e:	4619      	mov	r1, r3
 8011060:	4620      	mov	r0, r4
 8011062:	f7ff f9ed 	bl	8010440 <_ZN8touchgfx15PainterARGB88888setColorENS_9colortypeE>
    line1.setPainter(line1Painter);
 8011066:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801106a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801106e:	681b      	ldr	r3, [r3, #0]
 8011070:	f103 02e4 	add.w	r2, r3, #228	; 0xe4
 8011074:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011078:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011082:	4619      	mov	r1, r3
 8011084:	4610      	mov	r0, r2
 8011086:	f7ff f8c6 	bl	8010216 <_ZN8touchgfx12CanvasWidget10setPainterERKNS_15AbstractPainterE>
    line1.setStart(0, 0);
 801108a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801108e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	33e4      	adds	r3, #228	; 0xe4
 8011096:	2200      	movs	r2, #0
 8011098:	2100      	movs	r1, #0
 801109a:	4618      	mov	r0, r3
 801109c:	f7ff fb32 	bl	8010704 <_ZN8touchgfx4Line8setStartIiEEvT_S2_>
    line1.setEnd(150, 0);
 80110a0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80110a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	33e4      	adds	r3, #228	; 0xe4
 80110ac:	2200      	movs	r2, #0
 80110ae:	2196      	movs	r1, #150	; 0x96
 80110b0:	4618      	mov	r0, r3
 80110b2:	f7ff fb4d 	bl	8010750 <_ZN8touchgfx4Line6setEndIiEEvT_S2_>
    line1.setLineWidth(4);
 80110b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80110ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80110be:	681b      	ldr	r3, [r3, #0]
 80110c0:	33e4      	adds	r3, #228	; 0xe4
 80110c2:	2104      	movs	r1, #4
 80110c4:	4618      	mov	r0, r3
 80110c6:	f7ff fb69 	bl	801079c <_ZN8touchgfx4Line12setLineWidthIiEEvT_>
    line1.setLineEndingStyle(touchgfx::Line::ROUND_CAP_ENDING);
 80110ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80110ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	33e4      	adds	r3, #228	; 0xe4
 80110d6:	2101      	movs	r1, #1
 80110d8:	4618      	mov	r0, r3
 80110da:	f006 fe1d 	bl	8017d18 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>

    rpmArea.setPosition(298, 71, 212, 69);
 80110de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80110e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	f503 70b4 	add.w	r0, r3, #360	; 0x168
 80110ec:	2345      	movs	r3, #69	; 0x45
 80110ee:	9300      	str	r3, [sp, #0]
 80110f0:	23d4      	movs	r3, #212	; 0xd4
 80110f2:	2247      	movs	r2, #71	; 0x47
 80110f4:	f44f 7195 	mov.w	r1, #298	; 0x12a
 80110f8:	f7fe fb23 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    rpmArea.setColor(touchgfx::Color::getColorFromRGB(0, 102, 255));
 80110fc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011104:	681b      	ldr	r3, [r3, #0]
 8011106:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 801110a:	2300      	movs	r3, #0
 801110c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8011110:	2366      	movs	r3, #102	; 0x66
 8011112:	f887 30de 	strb.w	r3, [r7, #222]	; 0xde
 8011116:	23ff      	movs	r3, #255	; 0xff
 8011118:	f887 30dd 	strb.w	r3, [r7, #221]	; 0xdd
 801111c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8011120:	041b      	lsls	r3, r3, #16
 8011122:	461a      	mov	r2, r3
 8011124:	f897 30de 	ldrb.w	r3, [r7, #222]	; 0xde
 8011128:	021b      	lsls	r3, r3, #8
 801112a:	431a      	orrs	r2, r3
 801112c:	f897 30dd 	ldrb.w	r3, [r7, #221]	; 0xdd
 8011130:	4313      	orrs	r3, r2
 8011132:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011136:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 801113a:	4611      	mov	r1, r2
 801113c:	4618      	mov	r0, r3
 801113e:	f7fe fab3 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 8011142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011146:	461a      	mov	r2, r3
 8011148:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 801114c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011150:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8011154:	601a      	str	r2, [r3, #0]
        color = newColor;
 8011156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801115a:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801115e:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8011162:	6812      	ldr	r2, [r2, #0]
 8011164:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011166:	bf00      	nop
    rpmArea.setLinespacing(0);
 8011168:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801116c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011176:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801117a:	2300      	movs	r3, #0
 801117c:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
        linespace = space;
 8011180:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011184:	f8b7 20e6 	ldrh.w	r2, [r7, #230]	; 0xe6
 8011188:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 801118a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	3384      	adds	r3, #132	; 0x84
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f8d7 40e8 	ldr.w	r4, [r7, #232]	; 0xe8
 8011198:	463a      	mov	r2, r7
 801119a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 801119e:	4610      	mov	r0, r2
 80111a0:	4798      	blx	r3
 80111a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80111a6:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 80111aa:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 80111ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80111b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 80111b4:	bf00      	nop
    Unicode::snprintf(rpmAreaBuffer, RPMAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_BKZT).getText());
 80111b6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80111ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	f503 6402 	add.w	r4, r3, #2080	; 0x820
 80111c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111c8:	210a      	movs	r1, #10
 80111ca:	4618      	mov	r0, r3
 80111cc:	f7fe fc40 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80111d0:	4b11      	ldr	r3, [pc, #68]	; (8011218 <_ZN12MainViewBaseC1Ev+0x678>)
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d105      	bne.n	80111e4 <_ZN12MainViewBaseC1Ev+0x644>
 80111d8:	4b10      	ldr	r3, [pc, #64]	; (801121c <_ZN12MainViewBaseC1Ev+0x67c>)
 80111da:	4a11      	ldr	r2, [pc, #68]	; (8011220 <_ZN12MainViewBaseC1Ev+0x680>)
 80111dc:	2160      	movs	r1, #96	; 0x60
 80111de:	4811      	ldr	r0, [pc, #68]	; (8011224 <_ZN12MainViewBaseC1Ev+0x684>)
 80111e0:	f018 fdb6 	bl	8029d50 <__assert_func>
 80111e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80111e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
        return typedTextId < numberOfTypedTexts;
 80111ec:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80111f0:	889a      	ldrh	r2, [r3, #4]
 80111f2:	4b0d      	ldr	r3, [pc, #52]	; (8011228 <_ZN12MainViewBaseC1Ev+0x688>)
 80111f4:	881b      	ldrh	r3, [r3, #0]
 80111f6:	429a      	cmp	r2, r3
 80111f8:	bf34      	ite	cc
 80111fa:	2301      	movcc	r3, #1
 80111fc:	2300      	movcs	r3, #0
 80111fe:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8011200:	2b00      	cmp	r3, #0
 8011202:	d115      	bne.n	8011230 <_ZN12MainViewBaseC1Ev+0x690>
 8011204:	4b09      	ldr	r3, [pc, #36]	; (801122c <_ZN12MainViewBaseC1Ev+0x68c>)
 8011206:	4a06      	ldr	r2, [pc, #24]	; (8011220 <_ZN12MainViewBaseC1Ev+0x680>)
 8011208:	2161      	movs	r1, #97	; 0x61
 801120a:	4806      	ldr	r0, [pc, #24]	; (8011224 <_ZN12MainViewBaseC1Ev+0x684>)
 801120c:	f018 fda0 	bl	8029d50 <__assert_func>
 8011210:	2003c320 	.word	0x2003c320
 8011214:	0802d7ec 	.word	0x0802d7ec
 8011218:	2003c314 	.word	0x2003c314
 801121c:	0802d5a8 	.word	0x0802d5a8
 8011220:	0802d7b4 	.word	0x0802d7b4
 8011224:	0802d628 	.word	0x0802d628
 8011228:	2003c318 	.word	0x2003c318
 801122c:	0802d66c 	.word	0x0802d66c
 8011230:	bf00      	nop
        return texts->getText(typedTextId);
 8011232:	4bd7      	ldr	r3, [pc, #860]	; (8011590 <_ZN12MainViewBaseC1Ev+0x9f0>)
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 801123a:	4611      	mov	r1, r2
 801123c:	4618      	mov	r0, r3
 801123e:	f000 ff07 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 8011242:	4603      	mov	r3, r0
 8011244:	bf00      	nop
 8011246:	4ad3      	ldr	r2, [pc, #844]	; (8011594 <_ZN12MainViewBaseC1Ev+0x9f4>)
 8011248:	210a      	movs	r1, #10
 801124a:	4620      	mov	r0, r4
 801124c:	f00c fe3e 	bl	801decc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011250:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011254:	4618      	mov	r0, r3
 8011256:	f7fd f827 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>
    rpmArea.setWildcard(rpmAreaBuffer);
 801125a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801125e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	f503 72b4 	add.w	r2, r3, #360	; 0x168
 8011268:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801126c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8011276:	4619      	mov	r1, r3
 8011278:	4610      	mov	r0, r2
 801127a:	f7ff fb94 	bl	80109a6 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    rpmArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W8VI));
 801127e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011286:	681b      	ldr	r3, [r3, #0]
 8011288:	f503 74b4 	add.w	r4, r3, #360	; 0x168
 801128c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8011290:	2101      	movs	r1, #1
 8011292:	4618      	mov	r0, r3
 8011294:	f7fe fbdc 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
 8011298:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801129c:	4619      	mov	r1, r3
 801129e:	4620      	mov	r0, r4
 80112a0:	f007 f95a 	bl	8018558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80112a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fc fffd 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>

    battArea.setPosition(14, 82, 240, 49);
 80112ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80112b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	f503 70da 	add.w	r0, r3, #436	; 0x1b4
 80112bc:	2331      	movs	r3, #49	; 0x31
 80112be:	9300      	str	r3, [sp, #0]
 80112c0:	23f0      	movs	r3, #240	; 0xf0
 80112c2:	2252      	movs	r2, #82	; 0x52
 80112c4:	210e      	movs	r1, #14
 80112c6:	f7fe fa3c 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    battArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80112ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80112ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 80112d8:	23ff      	movs	r3, #255	; 0xff
 80112da:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
 80112de:	23ff      	movs	r3, #255	; 0xff
 80112e0:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
 80112e4:	23ff      	movs	r3, #255	; 0xff
 80112e6:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
 80112ea:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
 80112ee:	041b      	lsls	r3, r3, #16
 80112f0:	461a      	mov	r2, r3
 80112f2:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
 80112f6:	021b      	lsls	r3, r3, #8
 80112f8:	431a      	orrs	r2, r3
 80112fa:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
 80112fe:	4313      	orrs	r3, r2
 8011300:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 8011304:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011308:	4611      	mov	r1, r2
 801130a:	4618      	mov	r0, r3
 801130c:	f7fe f9cc 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 8011310:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011314:	461a      	mov	r2, r3
 8011316:	f8c7 40f4 	str.w	r4, [r7, #244]	; 0xf4
 801131a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801131e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8011322:	601a      	str	r2, [r3, #0]
        color = newColor;
 8011324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8011328:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 801132c:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8011330:	6812      	ldr	r2, [r2, #0]
 8011332:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8011334:	bf00      	nop
    battArea.setLinespacing(0);
 8011336:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801133a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801133e:	681b      	ldr	r3, [r3, #0]
 8011340:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8011344:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8011348:	2300      	movs	r3, #0
 801134a:	f8a7 30fa 	strh.w	r3, [r7, #250]	; 0xfa
        linespace = space;
 801134e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8011352:	f8b7 20fa 	ldrh.w	r2, [r7, #250]	; 0xfa
 8011356:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	3384      	adds	r3, #132	; 0x84
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	f8d7 40fc 	ldr.w	r4, [r7, #252]	; 0xfc
 8011366:	463a      	mov	r2, r7
 8011368:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 801136c:	4610      	mov	r0, r2
 801136e:	4798      	blx	r3
 8011370:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011374:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8011378:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801137c:	ca07      	ldmia	r2, {r0, r1, r2}
 801137e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8011382:	bf00      	nop
    Unicode::snprintf(battAreaBuffer, BATTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_YJO6).getText());
 8011384:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011388:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	f603 0434 	addw	r4, r3, #2100	; 0x834
 8011392:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011396:	2108      	movs	r1, #8
 8011398:	4618      	mov	r0, r3
 801139a:	f7fe fb59 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801139e:	4b7e      	ldr	r3, [pc, #504]	; (8011598 <_ZN12MainViewBaseC1Ev+0x9f8>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d105      	bne.n	80113b2 <_ZN12MainViewBaseC1Ev+0x812>
 80113a6:	4b7d      	ldr	r3, [pc, #500]	; (801159c <_ZN12MainViewBaseC1Ev+0x9fc>)
 80113a8:	4a7d      	ldr	r2, [pc, #500]	; (80115a0 <_ZN12MainViewBaseC1Ev+0xa00>)
 80113aa:	2160      	movs	r1, #96	; 0x60
 80113ac:	487d      	ldr	r0, [pc, #500]	; (80115a4 <_ZN12MainViewBaseC1Ev+0xa04>)
 80113ae:	f018 fccf 	bl	8029d50 <__assert_func>
 80113b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80113b6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
        return typedTextId < numberOfTypedTexts;
 80113ba:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80113be:	889a      	ldrh	r2, [r3, #4]
 80113c0:	4b79      	ldr	r3, [pc, #484]	; (80115a8 <_ZN12MainViewBaseC1Ev+0xa08>)
 80113c2:	881b      	ldrh	r3, [r3, #0]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	bf34      	ite	cc
 80113c8:	2301      	movcc	r3, #1
 80113ca:	2300      	movcs	r3, #0
 80113cc:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d105      	bne.n	80113de <_ZN12MainViewBaseC1Ev+0x83e>
 80113d2:	4b76      	ldr	r3, [pc, #472]	; (80115ac <_ZN12MainViewBaseC1Ev+0xa0c>)
 80113d4:	4a72      	ldr	r2, [pc, #456]	; (80115a0 <_ZN12MainViewBaseC1Ev+0xa00>)
 80113d6:	2161      	movs	r1, #97	; 0x61
 80113d8:	4872      	ldr	r0, [pc, #456]	; (80115a4 <_ZN12MainViewBaseC1Ev+0xa04>)
 80113da:	f018 fcb9 	bl	8029d50 <__assert_func>
 80113de:	bf00      	nop
        return texts->getText(typedTextId);
 80113e0:	4b6b      	ldr	r3, [pc, #428]	; (8011590 <_ZN12MainViewBaseC1Ev+0x9f0>)
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80113e8:	4611      	mov	r1, r2
 80113ea:	4618      	mov	r0, r3
 80113ec:	f000 fe30 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 80113f0:	4603      	mov	r3, r0
 80113f2:	bf00      	nop
 80113f4:	4a67      	ldr	r2, [pc, #412]	; (8011594 <_ZN12MainViewBaseC1Ev+0x9f4>)
 80113f6:	210a      	movs	r1, #10
 80113f8:	4620      	mov	r0, r4
 80113fa:	f00c fd67 	bl	801decc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80113fe:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8011402:	4618      	mov	r0, r3
 8011404:	f7fc ff50 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>
    battArea.setWildcard(battAreaBuffer);
 8011408:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801140c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	f503 72da 	add.w	r2, r3, #436	; 0x1b4
 8011416:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801141a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	f603 0334 	addw	r3, r3, #2100	; 0x834
 8011424:	4619      	mov	r1, r3
 8011426:	4610      	mov	r0, r2
 8011428:	f7ff fabd 	bl	80109a6 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    battArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_X1RQ));
 801142c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011430:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f503 74da 	add.w	r4, r3, #436	; 0x1b4
 801143a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801143e:	2102      	movs	r1, #2
 8011440:	4618      	mov	r0, r3
 8011442:	f7fe fb05 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
 8011446:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801144a:	4619      	mov	r1, r3
 801144c:	4620      	mov	r0, r4
 801144e:	f007 f883 	bl	8018558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011452:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011456:	4618      	mov	r0, r3
 8011458:	f7fc ff26 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>

    oilPressArea.setPosition(544, 82, 240, 49);
 801145c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	f503 7000 	add.w	r0, r3, #512	; 0x200
 801146a:	2331      	movs	r3, #49	; 0x31
 801146c:	9300      	str	r3, [sp, #0]
 801146e:	23f0      	movs	r3, #240	; 0xf0
 8011470:	2252      	movs	r2, #82	; 0x52
 8011472:	f44f 7108 	mov.w	r1, #544	; 0x220
 8011476:	f7fe f964 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilPressArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 801147a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801147e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	f503 7400 	add.w	r4, r3, #512	; 0x200
 8011488:	23ff      	movs	r3, #255	; 0xff
 801148a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
 801148e:	23ff      	movs	r3, #255	; 0xff
 8011490:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
 8011494:	23ff      	movs	r3, #255	; 0xff
 8011496:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
 801149a:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 801149e:	041b      	lsls	r3, r3, #16
 80114a0:	461a      	mov	r2, r3
 80114a2:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80114a6:	021b      	lsls	r3, r3, #8
 80114a8:	431a      	orrs	r2, r3
 80114aa:	f897 3105 	ldrb.w	r3, [r7, #261]	; 0x105
 80114ae:	4313      	orrs	r3, r2
 80114b0:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80114b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80114b8:	4611      	mov	r1, r2
 80114ba:	4618      	mov	r0, r3
 80114bc:	f7fe f8f4 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 80114c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80114c4:	461a      	mov	r2, r3
 80114c6:	f8c7 4108 	str.w	r4, [r7, #264]	; 0x108
 80114ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80114ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80114d2:	601a      	str	r2, [r3, #0]
        color = newColor;
 80114d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80114d8:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80114dc:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 80114e0:	6812      	ldr	r2, [r2, #0]
 80114e2:	631a      	str	r2, [r3, #48]	; 0x30
    }
 80114e4:	bf00      	nop
    oilPressArea.setLinespacing(0);
 80114e6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80114ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80114f4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80114f8:	2300      	movs	r3, #0
 80114fa:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
        linespace = space;
 80114fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8011502:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 8011506:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011508:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	3384      	adds	r3, #132	; 0x84
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	f8d7 4110 	ldr.w	r4, [r7, #272]	; 0x110
 8011516:	463a      	mov	r2, r7
 8011518:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801151c:	4610      	mov	r0, r2
 801151e:	4798      	blx	r3
 8011520:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011524:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8011528:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801152c:	ca07      	ldmia	r2, {r0, r1, r2}
 801152e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8011532:	bf00      	nop
    Unicode::snprintf(oilPressAreaBuffer, OILPRESSAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_R4GH).getText());
 8011534:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011538:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f603 0448 	addw	r4, r3, #2120	; 0x848
 8011542:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011546:	210d      	movs	r1, #13
 8011548:	4618      	mov	r0, r3
 801154a:	f7fe fa81 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 801154e:	4b12      	ldr	r3, [pc, #72]	; (8011598 <_ZN12MainViewBaseC1Ev+0x9f8>)
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d105      	bne.n	8011562 <_ZN12MainViewBaseC1Ev+0x9c2>
 8011556:	4b11      	ldr	r3, [pc, #68]	; (801159c <_ZN12MainViewBaseC1Ev+0x9fc>)
 8011558:	4a11      	ldr	r2, [pc, #68]	; (80115a0 <_ZN12MainViewBaseC1Ev+0xa00>)
 801155a:	2160      	movs	r1, #96	; 0x60
 801155c:	4811      	ldr	r0, [pc, #68]	; (80115a4 <_ZN12MainViewBaseC1Ev+0xa04>)
 801155e:	f018 fbf7 	bl	8029d50 <__assert_func>
 8011562:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8011566:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        return typedTextId < numberOfTypedTexts;
 801156a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801156e:	889a      	ldrh	r2, [r3, #4]
 8011570:	4b0d      	ldr	r3, [pc, #52]	; (80115a8 <_ZN12MainViewBaseC1Ev+0xa08>)
 8011572:	881b      	ldrh	r3, [r3, #0]
 8011574:	429a      	cmp	r2, r3
 8011576:	bf34      	ite	cc
 8011578:	2301      	movcc	r3, #1
 801157a:	2300      	movcs	r3, #0
 801157c:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 801157e:	2b00      	cmp	r3, #0
 8011580:	d116      	bne.n	80115b0 <_ZN12MainViewBaseC1Ev+0xa10>
 8011582:	4b0a      	ldr	r3, [pc, #40]	; (80115ac <_ZN12MainViewBaseC1Ev+0xa0c>)
 8011584:	4a06      	ldr	r2, [pc, #24]	; (80115a0 <_ZN12MainViewBaseC1Ev+0xa00>)
 8011586:	2161      	movs	r1, #97	; 0x61
 8011588:	4806      	ldr	r0, [pc, #24]	; (80115a4 <_ZN12MainViewBaseC1Ev+0xa04>)
 801158a:	f018 fbe1 	bl	8029d50 <__assert_func>
 801158e:	bf00      	nop
 8011590:	2003c320 	.word	0x2003c320
 8011594:	0802d7ec 	.word	0x0802d7ec
 8011598:	2003c314 	.word	0x2003c314
 801159c:	0802d5a8 	.word	0x0802d5a8
 80115a0:	0802d7b4 	.word	0x0802d7b4
 80115a4:	0802d628 	.word	0x0802d628
 80115a8:	2003c318 	.word	0x2003c318
 80115ac:	0802d66c 	.word	0x0802d66c
 80115b0:	bf00      	nop
        return texts->getText(typedTextId);
 80115b2:	4b91      	ldr	r3, [pc, #580]	; (80117f8 <_ZN12MainViewBaseC1Ev+0xc58>)
 80115b4:	681b      	ldr	r3, [r3, #0]
 80115b6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80115ba:	4611      	mov	r1, r2
 80115bc:	4618      	mov	r0, r3
 80115be:	f000 fd47 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 80115c2:	4603      	mov	r3, r0
 80115c4:	bf00      	nop
 80115c6:	4a8d      	ldr	r2, [pc, #564]	; (80117fc <_ZN12MainViewBaseC1Ev+0xc5c>)
 80115c8:	210a      	movs	r1, #10
 80115ca:	4620      	mov	r0, r4
 80115cc:	f00c fc7e 	bl	801decc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 80115d0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80115d4:	4618      	mov	r0, r3
 80115d6:	f7fc fe67 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>
    oilPressArea.setWildcard(oilPressAreaBuffer);
 80115da:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80115de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	f503 7200 	add.w	r2, r3, #512	; 0x200
 80115e8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80115ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	f603 0348 	addw	r3, r3, #2120	; 0x848
 80115f6:	4619      	mov	r1, r3
 80115f8:	4610      	mov	r0, r2
 80115fa:	f7ff f9d4 	bl	80109a6 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilPressArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_52EE));
 80115fe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011602:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011606:	681b      	ldr	r3, [r3, #0]
 8011608:	f503 7400 	add.w	r4, r3, #512	; 0x200
 801160c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011610:	2103      	movs	r1, #3
 8011612:	4618      	mov	r0, r3
 8011614:	f7fe fa1c 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
 8011618:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801161c:	4619      	mov	r1, r3
 801161e:	4620      	mov	r0, r4
 8011620:	f006 ff9a 	bl	8018558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011624:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8011628:	4618      	mov	r0, r3
 801162a:	f7fc fe3d 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>

    tempBox1.setXY(11, 248);
 801162e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011632:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011636:	681b      	ldr	r3, [r3, #0]
 8011638:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 801163c:	22f8      	movs	r2, #248	; 0xf8
 801163e:	210b      	movs	r1, #11
 8011640:	4618      	mov	r0, r3
 8011642:	f7fe f89f 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_1.setXY(11, 329);
 8011646:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801164a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8011654:	f240 1249 	movw	r2, #329	; 0x149
 8011658:	210b      	movs	r1, #11
 801165a:	4618      	mov	r0, r3
 801165c:	f7fe f892 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_2.setXY(570, 248);
 8011660:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 801166e:	22f8      	movs	r2, #248	; 0xf8
 8011670:	f240 213a 	movw	r1, #570	; 0x23a
 8011674:	4618      	mov	r0, r3
 8011676:	f7fe f885 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>

    tempBox1_3.setXY(570, 329);
 801167a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801167e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011688:	f240 1249 	movw	r2, #329	; 0x149
 801168c:	f240 213a 	movw	r1, #570	; 0x23a
 8011690:	4618      	mov	r0, r3
 8011692:	f7fe f877 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar1.setXY(0, 0);
 8011696:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801169a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 80116a4:	2200      	movs	r2, #0
 80116a6:	2100      	movs	r1, #0
 80116a8:	4618      	mov	r0, r3
 80116aa:	f7fe f86b 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>

    alertBar2.setXY(0, 420);
 80116ae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 80116bc:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80116c0:	2100      	movs	r1, #0
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7fe f85e 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>

    cltArea.setPosition(14, 150, 238, 49);
 80116c8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	f203 7084 	addw	r0, r3, #1924	; 0x784
 80116d6:	2331      	movs	r3, #49	; 0x31
 80116d8:	9300      	str	r3, [sp, #0]
 80116da:	23ee      	movs	r3, #238	; 0xee
 80116dc:	2296      	movs	r2, #150	; 0x96
 80116de:	210e      	movs	r1, #14
 80116e0:	f7fe f82f 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    cltArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80116e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80116e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	f203 7484 	addw	r4, r3, #1924	; 0x784
 80116f2:	23ff      	movs	r3, #255	; 0xff
 80116f4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80116f8:	23ff      	movs	r3, #255	; 0xff
 80116fa:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 80116fe:	23ff      	movs	r3, #255	; 0xff
 8011700:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 8011704:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8011708:	041b      	lsls	r3, r3, #16
 801170a:	461a      	mov	r2, r3
 801170c:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8011710:	021b      	lsls	r3, r3, #8
 8011712:	431a      	orrs	r2, r3
 8011714:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
 8011718:	4313      	orrs	r3, r2
 801171a:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 801171e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011722:	4611      	mov	r1, r2
 8011724:	4618      	mov	r0, r3
 8011726:	f7fd ffbf 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 801172a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801172e:	461a      	mov	r2, r3
 8011730:	f8c7 411c 	str.w	r4, [r7, #284]	; 0x11c
 8011734:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011738:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 801173c:	601a      	str	r2, [r3, #0]
        color = newColor;
 801173e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8011742:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011746:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 801174a:	6812      	ldr	r2, [r2, #0]
 801174c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801174e:	bf00      	nop
    cltArea.setLinespacing(0);
 8011750:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011754:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	f203 7384 	addw	r3, r3, #1924	; 0x784
 801175e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8011762:	2300      	movs	r3, #0
 8011764:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
        linespace = space;
 8011768:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801176c:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8011770:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011772:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	3384      	adds	r3, #132	; 0x84
 801177a:	681b      	ldr	r3, [r3, #0]
 801177c:	f8d7 4124 	ldr.w	r4, [r7, #292]	; 0x124
 8011780:	463a      	mov	r2, r7
 8011782:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8011786:	4610      	mov	r0, r2
 8011788:	4798      	blx	r3
 801178a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801178e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8011792:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8011796:	ca07      	ldmia	r2, {r0, r1, r2}
 8011798:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801179c:	bf00      	nop
    Unicode::snprintf(cltAreaBuffer, CLTAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_A40Q).getText());
 801179e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80117a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f603 045c 	addw	r4, r3, #2140	; 0x85c
 80117ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80117b0:	2109      	movs	r1, #9
 80117b2:	4618      	mov	r0, r3
 80117b4:	f7fe f94c 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80117b8:	4b11      	ldr	r3, [pc, #68]	; (8011800 <_ZN12MainViewBaseC1Ev+0xc60>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d105      	bne.n	80117cc <_ZN12MainViewBaseC1Ev+0xc2c>
 80117c0:	4b10      	ldr	r3, [pc, #64]	; (8011804 <_ZN12MainViewBaseC1Ev+0xc64>)
 80117c2:	4a11      	ldr	r2, [pc, #68]	; (8011808 <_ZN12MainViewBaseC1Ev+0xc68>)
 80117c4:	2160      	movs	r1, #96	; 0x60
 80117c6:	4811      	ldr	r0, [pc, #68]	; (801180c <_ZN12MainViewBaseC1Ev+0xc6c>)
 80117c8:	f018 fac2 	bl	8029d50 <__assert_func>
 80117cc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80117d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
        return typedTextId < numberOfTypedTexts;
 80117d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80117d8:	889a      	ldrh	r2, [r3, #4]
 80117da:	4b0d      	ldr	r3, [pc, #52]	; (8011810 <_ZN12MainViewBaseC1Ev+0xc70>)
 80117dc:	881b      	ldrh	r3, [r3, #0]
 80117de:	429a      	cmp	r2, r3
 80117e0:	bf34      	ite	cc
 80117e2:	2301      	movcc	r3, #1
 80117e4:	2300      	movcs	r3, #0
 80117e6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d115      	bne.n	8011818 <_ZN12MainViewBaseC1Ev+0xc78>
 80117ec:	4b09      	ldr	r3, [pc, #36]	; (8011814 <_ZN12MainViewBaseC1Ev+0xc74>)
 80117ee:	4a06      	ldr	r2, [pc, #24]	; (8011808 <_ZN12MainViewBaseC1Ev+0xc68>)
 80117f0:	2161      	movs	r1, #97	; 0x61
 80117f2:	4806      	ldr	r0, [pc, #24]	; (801180c <_ZN12MainViewBaseC1Ev+0xc6c>)
 80117f4:	f018 faac 	bl	8029d50 <__assert_func>
 80117f8:	2003c320 	.word	0x2003c320
 80117fc:	0802d7ec 	.word	0x0802d7ec
 8011800:	2003c314 	.word	0x2003c314
 8011804:	0802d5a8 	.word	0x0802d5a8
 8011808:	0802d7b4 	.word	0x0802d7b4
 801180c:	0802d628 	.word	0x0802d628
 8011810:	2003c318 	.word	0x2003c318
 8011814:	0802d66c 	.word	0x0802d66c
 8011818:	bf00      	nop
        return texts->getText(typedTextId);
 801181a:	4b6b      	ldr	r3, [pc, #428]	; (80119c8 <_ZN12MainViewBaseC1Ev+0xe28>)
 801181c:	681b      	ldr	r3, [r3, #0]
 801181e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8011822:	4611      	mov	r1, r2
 8011824:	4618      	mov	r0, r3
 8011826:	f000 fc13 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 801182a:	4603      	mov	r3, r0
 801182c:	bf00      	nop
 801182e:	4a67      	ldr	r2, [pc, #412]	; (80119cc <_ZN12MainViewBaseC1Ev+0xe2c>)
 8011830:	210a      	movs	r1, #10
 8011832:	4620      	mov	r0, r4
 8011834:	f00c fb4a 	bl	801decc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011838:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801183c:	4618      	mov	r0, r3
 801183e:	f7fc fd33 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>
    cltArea.setWildcard(cltAreaBuffer);
 8011842:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011846:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	f203 7284 	addw	r2, r3, #1924	; 0x784
 8011850:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011854:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	f603 035c 	addw	r3, r3, #2140	; 0x85c
 801185e:	4619      	mov	r1, r3
 8011860:	4610      	mov	r0, r2
 8011862:	f7ff f8a0 	bl	80109a6 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    cltArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_8EGU));
 8011866:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801186a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	f203 7484 	addw	r4, r3, #1924	; 0x784
 8011874:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011878:	2107      	movs	r1, #7
 801187a:	4618      	mov	r0, r3
 801187c:	f7fe f8e8 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
 8011880:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011884:	4619      	mov	r1, r3
 8011886:	4620      	mov	r0, r4
 8011888:	f006 fe66 	bl	8018558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 801188c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8011890:	4618      	mov	r0, r3
 8011892:	f7fc fd09 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>

    oilTempArea.setPosition(544, 150, 240, 49);
 8011896:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801189a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f503 60fa 	add.w	r0, r3, #2000	; 0x7d0
 80118a4:	2331      	movs	r3, #49	; 0x31
 80118a6:	9300      	str	r3, [sp, #0]
 80118a8:	23f0      	movs	r3, #240	; 0xf0
 80118aa:	2296      	movs	r2, #150	; 0x96
 80118ac:	f44f 7108 	mov.w	r1, #544	; 0x220
 80118b0:	f7fd ff47 	bl	800f742 <_ZN8touchgfx8Drawable11setPositionEssss>
    oilTempArea.setColor(touchgfx::Color::getColorFromRGB(255, 255, 255));
 80118b4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80118b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 80118c2:	23ff      	movs	r3, #255	; 0xff
 80118c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
 80118c8:	23ff      	movs	r3, #255	; 0xff
 80118ca:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 80118ce:	23ff      	movs	r3, #255	; 0xff
 80118d0:	f887 312d 	strb.w	r3, [r7, #301]	; 0x12d
 80118d4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80118d8:	041b      	lsls	r3, r3, #16
 80118da:	461a      	mov	r2, r3
 80118dc:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80118e0:	021b      	lsls	r3, r3, #8
 80118e2:	431a      	orrs	r2, r3
 80118e4:	f897 312d 	ldrb.w	r3, [r7, #301]	; 0x12d
 80118e8:	4313      	orrs	r3, r2
 80118ea:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80118ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80118f2:	4611      	mov	r1, r2
 80118f4:	4618      	mov	r0, r3
 80118f6:	f7fd fed7 	bl	800f6a8 <_ZN8touchgfx9colortypeC1Em>
 80118fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80118fe:	461a      	mov	r2, r3
 8011900:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8011904:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011908:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 801190c:	601a      	str	r2, [r3, #0]
        color = newColor;
 801190e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8011912:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8011916:	f5a2 7292 	sub.w	r2, r2, #292	; 0x124
 801191a:	6812      	ldr	r2, [r2, #0]
 801191c:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801191e:	bf00      	nop
    oilTempArea.setLinespacing(0);
 8011920:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011924:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 801192e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8011932:	2300      	movs	r3, #0
 8011934:	f8a7 3136 	strh.w	r3, [r7, #310]	; 0x136
        linespace = space;
 8011938:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801193c:	f8b7 2136 	ldrh.w	r2, [r7, #310]	; 0x136
 8011940:	869a      	strh	r2, [r3, #52]	; 0x34
        boundingArea = calculateBoundingArea();
 8011942:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8011946:	681b      	ldr	r3, [r3, #0]
 8011948:	3384      	adds	r3, #132	; 0x84
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8011950:	463a      	mov	r2, r7
 8011952:	f8d7 1138 	ldr.w	r1, [r7, #312]	; 0x138
 8011956:	4610      	mov	r0, r2
 8011958:	4798      	blx	r3
 801195a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 801195e:	f5a3 72a0 	sub.w	r2, r3, #320	; 0x140
 8011962:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8011966:	ca07      	ldmia	r2, {r0, r1, r2}
 8011968:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 801196c:	bf00      	nop
    Unicode::snprintf(oilTempAreaBuffer, OILTEMPAREA_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7JNZ).getText());
 801196e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011972:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	f503 6407 	add.w	r4, r3, #2160	; 0x870
 801197c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011980:	210e      	movs	r1, #14
 8011982:	4618      	mov	r0, r3
 8011984:	f7fe f864 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8011988:	4b11      	ldr	r3, [pc, #68]	; (80119d0 <_ZN12MainViewBaseC1Ev+0xe30>)
 801198a:	681b      	ldr	r3, [r3, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d105      	bne.n	801199c <_ZN12MainViewBaseC1Ev+0xdfc>
 8011990:	4b10      	ldr	r3, [pc, #64]	; (80119d4 <_ZN12MainViewBaseC1Ev+0xe34>)
 8011992:	4a11      	ldr	r2, [pc, #68]	; (80119d8 <_ZN12MainViewBaseC1Ev+0xe38>)
 8011994:	2160      	movs	r1, #96	; 0x60
 8011996:	4811      	ldr	r0, [pc, #68]	; (80119dc <_ZN12MainViewBaseC1Ev+0xe3c>)
 8011998:	f018 f9da 	bl	8029d50 <__assert_func>
 801199c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80119a0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
        return typedTextId < numberOfTypedTexts;
 80119a4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80119a8:	889a      	ldrh	r2, [r3, #4]
 80119aa:	4b0d      	ldr	r3, [pc, #52]	; (80119e0 <_ZN12MainViewBaseC1Ev+0xe40>)
 80119ac:	881b      	ldrh	r3, [r3, #0]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	bf34      	ite	cc
 80119b2:	2301      	movcc	r3, #1
 80119b4:	2300      	movcs	r3, #0
 80119b6:	b2db      	uxtb	r3, r3
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d115      	bne.n	80119e8 <_ZN12MainViewBaseC1Ev+0xe48>
 80119bc:	4b09      	ldr	r3, [pc, #36]	; (80119e4 <_ZN12MainViewBaseC1Ev+0xe44>)
 80119be:	4a06      	ldr	r2, [pc, #24]	; (80119d8 <_ZN12MainViewBaseC1Ev+0xe38>)
 80119c0:	2161      	movs	r1, #97	; 0x61
 80119c2:	4806      	ldr	r0, [pc, #24]	; (80119dc <_ZN12MainViewBaseC1Ev+0xe3c>)
 80119c4:	f018 f9c4 	bl	8029d50 <__assert_func>
 80119c8:	2003c320 	.word	0x2003c320
 80119cc:	0802d7ec 	.word	0x0802d7ec
 80119d0:	2003c314 	.word	0x2003c314
 80119d4:	0802d5a8 	.word	0x0802d5a8
 80119d8:	0802d7b4 	.word	0x0802d7b4
 80119dc:	0802d628 	.word	0x0802d628
 80119e0:	2003c318 	.word	0x2003c318
 80119e4:	0802d66c 	.word	0x0802d66c
 80119e8:	bf00      	nop
        return texts->getText(typedTextId);
 80119ea:	4b9a      	ldr	r3, [pc, #616]	; (8011c54 <_ZN12MainViewBaseC1Ev+0x10b4>)
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80119f2:	4611      	mov	r1, r2
 80119f4:	4618      	mov	r0, r3
 80119f6:	f000 fb2b 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 80119fa:	4603      	mov	r3, r0
 80119fc:	bf00      	nop
 80119fe:	4a96      	ldr	r2, [pc, #600]	; (8011c58 <_ZN12MainViewBaseC1Ev+0x10b8>)
 8011a00:	210a      	movs	r1, #10
 8011a02:	4620      	mov	r0, r4
 8011a04:	f00c fa62 	bl	801decc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
 8011a08:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fc fc4b 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>
    oilTempArea.setWildcard(oilTempAreaBuffer);
 8011a12:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a1a:	681b      	ldr	r3, [r3, #0]
 8011a1c:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8011a20:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	f503 6307 	add.w	r3, r3, #2160	; 0x870
 8011a2e:	4619      	mov	r1, r3
 8011a30:	4610      	mov	r0, r2
 8011a32:	f7fe ffb8 	bl	80109a6 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    oilTempArea.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ILXZ));
 8011a36:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
 8011a44:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011a48:	210c      	movs	r1, #12
 8011a4a:	4618      	mov	r0, r3
 8011a4c:	f7fe f800 	bl	800fa50 <_ZN8touchgfx9TypedTextC1Et>
 8011a50:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011a54:	4619      	mov	r1, r3
 8011a56:	4620      	mov	r0, r4
 8011a58:	f006 fd7e 	bl	8018558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8011a5c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7fc fc21 	bl	800e2a8 <_ZN8touchgfx9TypedTextD1Ev>

    add(__background);
 8011a66:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	3340      	adds	r3, #64	; 0x40
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	4610      	mov	r0, r2
 8011a80:	f7fe ff74 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box1);
 8011a84:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a8c:	681a      	ldr	r2, [r3, #0]
 8011a8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011a92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011a96:	681b      	ldr	r3, [r3, #0]
 8011a98:	336c      	adds	r3, #108	; 0x6c
 8011a9a:	4619      	mov	r1, r3
 8011a9c:	4610      	mov	r0, r2
 8011a9e:	f7fe ff65 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(gearArea);
 8011aa2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011aaa:	681a      	ldr	r2, [r3, #0]
 8011aac:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011ab0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	3398      	adds	r3, #152	; 0x98
 8011ab8:	4619      	mov	r1, r3
 8011aba:	4610      	mov	r0, r2
 8011abc:	f7fe ff56 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(line1);
 8011ac0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ac8:	681a      	ldr	r2, [r3, #0]
 8011aca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011ace:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	33e4      	adds	r3, #228	; 0xe4
 8011ad6:	4619      	mov	r1, r3
 8011ad8:	4610      	mov	r0, r2
 8011ada:	f7fe ff47 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(rpmArea);
 8011ade:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011ae2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ae6:	681a      	ldr	r2, [r3, #0]
 8011ae8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011aec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011af0:	681b      	ldr	r3, [r3, #0]
 8011af2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8011af6:	4619      	mov	r1, r3
 8011af8:	4610      	mov	r0, r2
 8011afa:	f7fe ff37 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(battArea);
 8011afe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b06:	681a      	ldr	r2, [r3, #0]
 8011b08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8011b16:	4619      	mov	r1, r3
 8011b18:	4610      	mov	r0, r2
 8011b1a:	f7fe ff27 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilPressArea);
 8011b1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b26:	681a      	ldr	r2, [r3, #0]
 8011b28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8011b36:	4619      	mov	r1, r3
 8011b38:	4610      	mov	r0, r2
 8011b3a:	f7fe ff17 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1);
 8011b3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b46:	681a      	ldr	r2, [r3, #0]
 8011b48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8011b56:	4619      	mov	r1, r3
 8011b58:	4610      	mov	r0, r2
 8011b5a:	f7fe ff07 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_1);
 8011b5e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8011b76:	4619      	mov	r1, r3
 8011b78:	4610      	mov	r0, r2
 8011b7a:	f7fe fef7 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_2);
 8011b7e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b86:	681a      	ldr	r2, [r3, #0]
 8011b88:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011b8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011b96:	4619      	mov	r1, r3
 8011b98:	4610      	mov	r0, r2
 8011b9a:	f7fe fee7 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(tempBox1_3);
 8011b9e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011ba2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bb0:	681b      	ldr	r3, [r3, #0]
 8011bb2:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011bb6:	4619      	mov	r1, r3
 8011bb8:	4610      	mov	r0, r2
 8011bba:	f7fe fed7 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar1);
 8011bbe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011bc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bc6:	681a      	ldr	r2, [r3, #0]
 8011bc8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011bcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8011bd6:	4619      	mov	r1, r3
 8011bd8:	4610      	mov	r0, r2
 8011bda:	f7fe fec7 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(alertBar2);
 8011bde:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011be2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011be6:	681a      	ldr	r2, [r3, #0]
 8011be8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	4610      	mov	r0, r2
 8011bfa:	f7fe feb7 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(cltArea);
 8011bfe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c06:	681a      	ldr	r2, [r3, #0]
 8011c08:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	f203 7384 	addw	r3, r3, #1924	; 0x784
 8011c16:	4619      	mov	r1, r3
 8011c18:	4610      	mov	r0, r2
 8011c1a:	f7fe fea7 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(oilTempArea);
 8011c1e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011c2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8011c36:	4619      	mov	r1, r3
 8011c38:	4610      	mov	r0, r2
 8011c3a:	f7fe fe97 	bl	801096c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 8011c3e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8011c42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd90      	pop	{r4, r7, pc}
 8011c52:	bf00      	nop
 8011c54:	2003c320 	.word	0x2003c320
 8011c58:	0802d7ec 	.word	0x0802d7ec

08011c5c <_ZN12MainViewBase11setupScreenEv>:

void MainViewBase::setupScreen()
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
    tempBox1.initialize();
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f000 fadc 	bl	8012228 <_ZN7tempBox10initializeEv>
    tempBox1_1.initialize();
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	f503 7351 	add.w	r3, r3, #836	; 0x344
 8011c76:	4618      	mov	r0, r3
 8011c78:	f000 fad6 	bl	8012228 <_ZN7tempBox10initializeEv>
    tempBox1_2.initialize();
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	f203 433c 	addw	r3, r3, #1084	; 0x43c
 8011c82:	4618      	mov	r0, r3
 8011c84:	f000 fad0 	bl	8012228 <_ZN7tempBox10initializeEv>
    tempBox1_3.initialize();
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	f203 5334 	addw	r3, r3, #1332	; 0x534
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f000 faca 	bl	8012228 <_ZN7tempBox10initializeEv>
    alertBar1.initialize();
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f203 632c 	addw	r3, r3, #1580	; 0x62c
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f000 faa6 	bl	80121ec <_ZN8alertBar10initializeEv>
    alertBar2.initialize();
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f503 63db 	add.w	r3, r3, #1752	; 0x6d8
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	f000 faa0 	bl	80121ec <_ZN8alertBar10initializeEv>
}
 8011cac:	bf00      	nop
 8011cae:	3708      	adds	r7, #8
 8011cb0:	46bd      	mov	sp, r7
 8011cb2:	bd80      	pop	{r7, pc}

08011cb4 <_ZN12MainViewBase14handleKeyEventEh>:

//Handles when a key is pressed
void MainViewBase::handleKeyEvent(uint8_t key)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b082      	sub	sp, #8
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	70fb      	strb	r3, [r7, #3]
    if(56 == key)
 8011cc0:	78fb      	ldrb	r3, [r7, #3]
 8011cc2:	2b38      	cmp	r3, #56	; 0x38
 8011cc4:	d105      	bne.n	8011cd2 <_ZN12MainViewBase14handleKeyEventEh+0x1e>
    {
        //Interaction1
        //When hardware button 56 clicked call virtual function
        //Call function1
        function1();
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	332c      	adds	r3, #44	; 0x2c
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	4798      	blx	r3
    }
}
 8011cd2:	bf00      	nop
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
	...

08011cdc <_ZN8touchgfx4ViewI13MainPresenterEC1Ev>:
    View()
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b082      	sub	sp, #8
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
        : presenter(0)
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f00a fc66 	bl	801c5b8 <_ZN8touchgfx6ScreenC1Ev>
 8011cec:	4a05      	ldr	r2, [pc, #20]	; (8011d04 <_ZN8touchgfx4ViewI13MainPresenterEC1Ev+0x28>)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	601a      	str	r2, [r3, #0]
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2200      	movs	r2, #0
 8011cf6:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3708      	adds	r7, #8
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	0802fb80 	.word	0x0802fb80

08011d08 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 8011d08:	b480      	push	{r7}
 8011d0a:	af00      	add	r7, sp, #0
    return bitmap_database;
 8011d0c:	4b02      	ldr	r3, [pc, #8]	; (8011d18 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr
 8011d18:	0802fbac 	.word	0x0802fbac

08011d1c <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 8011d20:	2301      	movs	r3, #1
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	46bd      	mov	sp, r7
 8011d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d2a:	4770      	bx	lr

08011d2c <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 8011d2c:	b480      	push	{r7}
 8011d2e:	b085      	sub	sp, #20
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	60f8      	str	r0, [r7, #12]
 8011d34:	460b      	mov	r3, r1
 8011d36:	607a      	str	r2, [r7, #4]
 8011d38:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 8011d3a:	2300      	movs	r3, #0
    }
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	3714      	adds	r7, #20
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr

08011d48 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 8011d48:	b480      	push	{r7}
 8011d4a:	b083      	sub	sp, #12
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011d50:	2300      	movs	r3, #0
    }
 8011d52:	4618      	mov	r0, r3
 8011d54:	370c      	adds	r7, #12
 8011d56:	46bd      	mov	sp, r7
 8011d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d5c:	4770      	bx	lr

08011d5e <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 8011d5e:	b480      	push	{r7}
 8011d60:	b083      	sub	sp, #12
 8011d62:	af00      	add	r7, sp, #0
 8011d64:	6078      	str	r0, [r7, #4]
    {
        return 0;
 8011d66:	2300      	movs	r3, #0
    }
 8011d68:	4618      	mov	r0, r3
 8011d6a:	370c      	adds	r7, #12
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d72:	4770      	bx	lr

08011d74 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 8011d74:	b480      	push	{r7}
 8011d76:	b085      	sub	sp, #20
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	60f8      	str	r0, [r7, #12]
 8011d7c:	60b9      	str	r1, [r7, #8]
 8011d7e:	4613      	mov	r3, r2
 8011d80:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 8011d82:	4a07      	ldr	r2, [pc, #28]	; (8011da0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	6013      	str	r3, [r2, #0]
        fonts = f;
 8011d88:	4a06      	ldr	r2, [pc, #24]	; (8011da4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 8011d8a:	68bb      	ldr	r3, [r7, #8]
 8011d8c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 8011d8e:	4a06      	ldr	r2, [pc, #24]	; (8011da8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 8011d90:	88fb      	ldrh	r3, [r7, #6]
 8011d92:	8013      	strh	r3, [r2, #0]
    }
 8011d94:	bf00      	nop
 8011d96:	3714      	adds	r7, #20
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9e:	4770      	bx	lr
 8011da0:	2003c314 	.word	0x2003c314
 8011da4:	2003c31c 	.word	0x2003c31c
 8011da8:	2003c318 	.word	0x2003c318

08011dac <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011dac:	b40e      	push	{r1, r2, r3}
 8011dae:	b580      	push	{r7, lr}
 8011db0:	b085      	sub	sp, #20
 8011db2:	af00      	add	r7, sp, #0
 8011db4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 8011db6:	f107 0320 	add.w	r3, r7, #32
 8011dba:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8011dbc:	68bb      	ldr	r3, [r7, #8]
 8011dbe:	69fa      	ldr	r2, [r7, #28]
 8011dc0:	2100      	movs	r1, #0
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f009 ff72 	bl	801bcac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011dc8:	4603      	mov	r3, r0
 8011dca:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011dcc:	89fb      	ldrh	r3, [r7, #14]
}
 8011dce:	4618      	mov	r0, r3
 8011dd0:	3714      	adds	r7, #20
 8011dd2:	46bd      	mov	sp, r7
 8011dd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011dd8:	b003      	add	sp, #12
 8011dda:	4770      	bx	lr

08011ddc <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8011ddc:	b40c      	push	{r2, r3}
 8011dde:	b580      	push	{r7, lr}
 8011de0:	b084      	sub	sp, #16
 8011de2:	af00      	add	r7, sp, #0
 8011de4:	6078      	str	r0, [r7, #4]
 8011de6:	460b      	mov	r3, r1
 8011de8:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 8011dea:	f107 031c 	add.w	r3, r7, #28
 8011dee:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8011df0:	78f9      	ldrb	r1, [r7, #3]
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	69ba      	ldr	r2, [r7, #24]
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f009 ff58 	bl	801bcac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 8011e00:	89fb      	ldrh	r3, [r7, #14]
}
 8011e02:	4618      	mov	r0, r3
 8011e04:	3710      	adds	r7, #16
 8011e06:	46bd      	mov	sp, r7
 8011e08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011e0c:	b002      	add	sp, #8
 8011e0e:	4770      	bx	lr

08011e10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 8011e10:	b580      	push	{r7, lr}
 8011e12:	b08a      	sub	sp, #40	; 0x28
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d016      	beq.n	8011e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	3322      	adds	r3, #34	; 0x22
 8011e28:	627b      	str	r3, [r7, #36]	; 0x24
        {
            return used == size;
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8011e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e2c:	8adb      	ldrh	r3, [r3, #22]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d105      	bne.n	8011e3e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 8011e32:	4b43      	ldr	r3, [pc, #268]	; (8011f40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011e34:	4a43      	ldr	r2, [pc, #268]	; (8011f44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011e36:	21c0      	movs	r1, #192	; 0xc0
 8011e38:	4843      	ldr	r0, [pc, #268]	; (8011f48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011e3a:	f017 ff89 	bl	8029d50 <__assert_func>
            return buffer[pos];
 8011e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e40:	8a9b      	ldrh	r3, [r3, #20]
 8011e42:	461a      	mov	r2, r3
 8011e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e46:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d001      	beq.n	8011e52 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 8011e4e:	2301      	movs	r3, #1
 8011e50:	e000      	b.n	8011e54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 8011e52:	2300      	movs	r3, #0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d06a      	beq.n	8011f2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f00b fa89 	bl	801d370 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	3322      	adds	r3, #34	; 0x22
 8011e62:	623b      	str	r3, [r7, #32]
 8011e64:	2301      	movs	r3, #1
 8011e66:	83fb      	strh	r3, [r7, #30]
        }
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8011e68:	6a3b      	ldr	r3, [r7, #32]
 8011e6a:	8adb      	ldrh	r3, [r3, #22]
 8011e6c:	8bfa      	ldrh	r2, [r7, #30]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d305      	bcc.n	8011e7e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 8011e72:	4b36      	ldr	r3, [pc, #216]	; (8011f4c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 8011e74:	4a36      	ldr	r2, [pc, #216]	; (8011f50 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 8011e76:	21c5      	movs	r1, #197	; 0xc5
 8011e78:	4833      	ldr	r0, [pc, #204]	; (8011f48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011e7a:	f017 ff69 	bl	8029d50 <__assert_func>
            const uint16_t index = pos + offset;
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	8a9a      	ldrh	r2, [r3, #20]
 8011e82:	8bfb      	ldrh	r3, [r7, #30]
 8011e84:	4413      	add	r3, r2
 8011e86:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 8011e88:	8bbb      	ldrh	r3, [r7, #28]
 8011e8a:	2b09      	cmp	r3, #9
 8011e8c:	d801      	bhi.n	8011e92 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 8011e8e:	8bbb      	ldrh	r3, [r7, #28]
 8011e90:	e001      	b.n	8011e96 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 8011e92:	8bbb      	ldrh	r3, [r7, #28]
 8011e94:	3b0a      	subs	r3, #10
 8011e96:	6a3a      	ldr	r2, [r7, #32]
 8011e98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e9c:	f640 123f 	movw	r2, #2367	; 0x93f
 8011ea0:	4293      	cmp	r3, r2
 8011ea2:	bf0c      	ite	eq
 8011ea4:	2301      	moveq	r3, #1
 8011ea6:	2300      	movne	r3, #0
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d03f      	beq.n	8011f2e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	3322      	adds	r3, #34	; 0x22
 8011eb2:	687a      	ldr	r2, [r7, #4]
 8011eb4:	3222      	adds	r2, #34	; 0x22
 8011eb6:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 8011eb8:	68ba      	ldr	r2, [r7, #8]
 8011eba:	8ad2      	ldrh	r2, [r2, #22]
 8011ebc:	2a00      	cmp	r2, #0
 8011ebe:	d105      	bne.n	8011ecc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 8011ec0:	4b1f      	ldr	r3, [pc, #124]	; (8011f40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 8011ec2:	4a20      	ldr	r2, [pc, #128]	; (8011f44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 8011ec4:	21c0      	movs	r1, #192	; 0xc0
 8011ec6:	4820      	ldr	r0, [pc, #128]	; (8011f48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011ec8:	f017 ff42 	bl	8029d50 <__assert_func>
            return buffer[pos];
 8011ecc:	68ba      	ldr	r2, [r7, #8]
 8011ece:	8a92      	ldrh	r2, [r2, #20]
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	68ba      	ldr	r2, [r7, #8]
 8011ed4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8011ed8:	613b      	str	r3, [r7, #16]
 8011eda:	4613      	mov	r3, r2
 8011edc:	81fb      	strh	r3, [r7, #14]
        {
            buffer[pos] = newChar;
        }
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 8011ede:	693b      	ldr	r3, [r7, #16]
 8011ee0:	8adb      	ldrh	r3, [r3, #22]
 8011ee2:	2b01      	cmp	r3, #1
 8011ee4:	d806      	bhi.n	8011ef4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 8011ee6:	4b1b      	ldr	r3, [pc, #108]	; (8011f54 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 8011ee8:	4a1b      	ldr	r2, [pc, #108]	; (8011f58 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 8011eea:	f240 110d 	movw	r1, #269	; 0x10d
 8011eee:	4816      	ldr	r0, [pc, #88]	; (8011f48 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 8011ef0:	f017 ff2e 	bl	8029d50 <__assert_func>
            const uint16_t index = pos + 1;
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	8a9b      	ldrh	r3, [r3, #20]
 8011ef8:	3301      	adds	r3, #1
 8011efa:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 8011efc:	89bb      	ldrh	r3, [r7, #12]
 8011efe:	2b09      	cmp	r3, #9
 8011f00:	d801      	bhi.n	8011f06 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 8011f02:	89bb      	ldrh	r3, [r7, #12]
 8011f04:	e000      	b.n	8011f08 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 8011f06:	2300      	movs	r3, #0
 8011f08:	693a      	ldr	r2, [r7, #16]
 8011f0a:	89f9      	ldrh	r1, [r7, #14]
 8011f0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 8011f10:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	3322      	adds	r3, #34	; 0x22
 8011f16:	61bb      	str	r3, [r7, #24]
 8011f18:	f640 133f 	movw	r3, #2367	; 0x93f
 8011f1c:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 8011f1e:	69bb      	ldr	r3, [r7, #24]
 8011f20:	8a9b      	ldrh	r3, [r3, #20]
 8011f22:	4619      	mov	r1, r3
 8011f24:	69bb      	ldr	r3, [r7, #24]
 8011f26:	8afa      	ldrh	r2, [r7, #22]
 8011f28:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 8011f2c:	bf00      	nop
        }
    }
    return getNextChar();
 8011f2e:	6878      	ldr	r0, [r7, #4]
 8011f30:	f00b f920 	bl	801d174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8011f34:	4603      	mov	r3, r0
}
 8011f36:	4618      	mov	r0, r3
 8011f38:	3728      	adds	r7, #40	; 0x28
 8011f3a:	46bd      	mov	sp, r7
 8011f3c:	bd80      	pop	{r7, pc}
 8011f3e:	bf00      	nop
 8011f40:	0802d7f0 	.word	0x0802d7f0
 8011f44:	0802d7fc 	.word	0x0802d7fc
 8011f48:	0802d8a8 	.word	0x0802d8a8
 8011f4c:	0802d8f0 	.word	0x0802d8f0
 8011f50:	0802d900 	.word	0x0802d900
 8011f54:	0802d9d4 	.word	0x0802d9d4
 8011f58:	0802d9e0 	.word	0x0802d9e0

08011f5c <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 8011f5c:	b580      	push	{r7, lr}
 8011f5e:	b082      	sub	sp, #8
 8011f60:	af00      	add	r7, sp, #0
 8011f62:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f00b f8ce 	bl	801d106 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 8011f6a:	bf00      	nop
 8011f6c:	3708      	adds	r7, #8
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}

08011f72 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 8011f72:	b580      	push	{r7, lr}
 8011f74:	b088      	sub	sp, #32
 8011f76:	af02      	add	r7, sp, #8
 8011f78:	60f8      	str	r0, [r7, #12]
 8011f7a:	1d38      	adds	r0, r7, #4
 8011f7c:	e880 0006 	stmia.w	r0, {r1, r2}
 8011f80:	603b      	str	r3, [r7, #0]
    va_list pArg;
    va_start(pArg, format);
 8011f82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f86:	617b      	str	r3, [r7, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 8011f88:	1d39      	adds	r1, r7, #4
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	9301      	str	r3, [sp, #4]
 8011f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f90:	9300      	str	r3, [sp, #0]
 8011f92:	6a3b      	ldr	r3, [r7, #32]
 8011f94:	683a      	ldr	r2, [r7, #0]
 8011f96:	68f8      	ldr	r0, [r7, #12]
 8011f98:	f008 fb52 	bl	801a640 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 8011f9c:	bf00      	nop
 8011f9e:	3718      	adds	r7, #24
 8011fa0:	46bd      	mov	sp, r7
 8011fa2:	bd80      	pop	{r7, pc}

08011fa4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8011fa4:	b590      	push	{r4, r7, lr}
 8011fa6:	b085      	sub	sp, #20
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	4603      	mov	r3, r0
 8011fac:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 8011fb2:	88fb      	ldrh	r3, [r7, #6]
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d127      	bne.n	8012008 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 8011fb8:	88fb      	ldrh	r3, [r7, #6]
 8011fba:	4a1e      	ldr	r2, [pc, #120]	; (8012034 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d016      	beq.n	8011ff2 <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 8011fc4:	88fb      	ldrh	r3, [r7, #6]
 8011fc6:	4a1b      	ldr	r2, [pc, #108]	; (8012034 <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 8011fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011fcc:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	68ba      	ldr	r2, [r7, #8]
 8011fd4:	4413      	add	r3, r2
 8011fd6:	4a18      	ldr	r2, [pc, #96]	; (8012038 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011fd8:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8011fda:	68bb      	ldr	r3, [r7, #8]
 8011fdc:	685b      	ldr	r3, [r3, #4]
 8011fde:	68ba      	ldr	r2, [r7, #8]
 8011fe0:	4413      	add	r3, r2
 8011fe2:	4a16      	ldr	r2, [pc, #88]	; (801203c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011fe4:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8011fe6:	68bb      	ldr	r3, [r7, #8]
 8011fe8:	689b      	ldr	r3, [r3, #8]
 8011fea:	68ba      	ldr	r2, [r7, #8]
 8011fec:	4413      	add	r3, r2
 8011fee:	60fb      	str	r3, [r7, #12]
 8011ff0:	e00a      	b.n	8012008 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 8011ff2:	4b11      	ldr	r3, [pc, #68]	; (8012038 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 8011ff4:	4a12      	ldr	r2, [pc, #72]	; (8012040 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 8011ff6:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8011ff8:	4a12      	ldr	r2, [pc, #72]	; (8012044 <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 8011ffa:	4b10      	ldr	r3, [pc, #64]	; (801203c <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 8011ffc:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8011ffe:	88fb      	ldrh	r3, [r7, #6]
 8012000:	4a11      	ldr	r2, [pc, #68]	; (8012048 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 8012002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012006:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	2b00      	cmp	r3, #0
 801200c:	d00d      	beq.n	801202a <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 801200e:	4a0f      	ldr	r2, [pc, #60]	; (801204c <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 8012010:	88fb      	ldrh	r3, [r7, #6]
 8012012:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8012014:	f000 f83e 	bl	8012094 <_ZN17TypedTextDatabase8getFontsEv>
 8012018:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 801201a:	f000 f833 	bl	8012084 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801201e:	4603      	mov	r3, r0
 8012020:	461a      	mov	r2, r3
 8012022:	4621      	mov	r1, r4
 8012024:	68f8      	ldr	r0, [r7, #12]
 8012026:	f7ff fea5 	bl	8011d74 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 801202a:	bf00      	nop
 801202c:	3714      	adds	r7, #20
 801202e:	46bd      	mov	sp, r7
 8012030:	bd90      	pop	{r4, r7, pc}
 8012032:	bf00      	nop
 8012034:	200339f4 	.word	0x200339f4
 8012038:	200339fc 	.word	0x200339fc
 801203c:	20033a00 	.word	0x20033a00
 8012040:	08164a40 	.word	0x08164a40
 8012044:	081648ac 	.word	0x081648ac
 8012048:	08164bb4 	.word	0x08164bb4
 801204c:	200339f8 	.word	0x200339f8

08012050 <_ZNK8touchgfx5Texts7getTextEt>:
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
 8012050:	b480      	push	{r7}
 8012052:	b083      	sub	sp, #12
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	460b      	mov	r3, r1
 801205a:	807b      	strh	r3, [r7, #2]
    return &currentLanguagePtr[currentLanguageIndices[id]];
 801205c:	4b07      	ldr	r3, [pc, #28]	; (801207c <_ZNK8touchgfx5Texts7getTextEt+0x2c>)
 801205e:	681a      	ldr	r2, [r3, #0]
 8012060:	4b07      	ldr	r3, [pc, #28]	; (8012080 <_ZNK8touchgfx5Texts7getTextEt+0x30>)
 8012062:	6819      	ldr	r1, [r3, #0]
 8012064:	887b      	ldrh	r3, [r7, #2]
 8012066:	009b      	lsls	r3, r3, #2
 8012068:	440b      	add	r3, r1
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	005b      	lsls	r3, r3, #1
 801206e:	4413      	add	r3, r2
}
 8012070:	4618      	mov	r0, r3
 8012072:	370c      	adds	r7, #12
 8012074:	46bd      	mov	sp, r7
 8012076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207a:	4770      	bx	lr
 801207c:	200339fc 	.word	0x200339fc
 8012080:	20033a00 	.word	0x20033a00

08012084 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 8012084:	b480      	push	{r7}
 8012086:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 8012088:	2365      	movs	r3, #101	; 0x65
}
 801208a:	4618      	mov	r0, r3
 801208c:	46bd      	mov	sp, r7
 801208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012092:	4770      	bx	lr

08012094 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 8012094:	b480      	push	{r7}
 8012096:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 8012098:	4b02      	ldr	r3, [pc, #8]	; (80120a4 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801209a:	4618      	mov	r0, r3
 801209c:	46bd      	mov	sp, r7
 801209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a2:	4770      	bx	lr
 80120a4:	20033a04 	.word	0x20033a04

080120a8 <_Z41__static_initialization_and_destruction_0ii>:
    case 7:
        touchgfx_fonts[7] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
 80120b0:	6039      	str	r1, [r7, #0]
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2b01      	cmp	r3, #1
 80120b6:	d12c      	bne.n	8012112 <_Z41__static_initialization_and_destruction_0ii+0x6a>
 80120b8:	683b      	ldr	r3, [r7, #0]
 80120ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80120be:	4293      	cmp	r3, r2
 80120c0:	d127      	bne.n	8012112 <_Z41__static_initialization_and_destruction_0ii+0x6a>
    &(getFont_swisop3_300_4bpp()),
 80120c2:	f7fc fa77 	bl	800e5b4 <_Z24getFont_swisop3_300_4bppv>
 80120c6:	4603      	mov	r3, r0
};
 80120c8:	4a14      	ldr	r2, [pc, #80]	; (801211c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80120ca:	6013      	str	r3, [r2, #0]
    &(getFont_JetBrainsMono_Regular_60_4bpp()),
 80120cc:	f7fc fa1c 	bl	800e508 <_Z37getFont_JetBrainsMono_Regular_60_4bppv>
 80120d0:	4603      	mov	r3, r0
};
 80120d2:	4a12      	ldr	r2, [pc, #72]	; (801211c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80120d4:	6053      	str	r3, [r2, #4]
    &(getFont_JetBrainsMono_Regular_40_4bpp()),
 80120d6:	f7fc f9c1 	bl	800e45c <_Z37getFont_JetBrainsMono_Regular_40_4bppv>
 80120da:	4603      	mov	r3, r0
};
 80120dc:	4a0f      	ldr	r2, [pc, #60]	; (801211c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80120de:	6093      	str	r3, [r2, #8]
    &(getFont_swisop3_50_4bpp()),
 80120e0:	f7fc fac0 	bl	800e664 <_Z23getFont_swisop3_50_4bppv>
 80120e4:	4603      	mov	r3, r0
};
 80120e6:	4a0d      	ldr	r2, [pc, #52]	; (801211c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80120e8:	60d3      	str	r3, [r2, #12]
    &(getFont_verdana_20_4bpp()),
 80120ea:	f7fc fbbd 	bl	800e868 <_Z23getFont_verdana_20_4bppv>
 80120ee:	4603      	mov	r3, r0
};
 80120f0:	4a0a      	ldr	r2, [pc, #40]	; (801211c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80120f2:	6113      	str	r3, [r2, #16]
    &(getFont_verdana_12_4bpp()),
 80120f4:	f7fc fb62 	bl	800e7bc <_Z23getFont_verdana_12_4bppv>
 80120f8:	4603      	mov	r3, r0
};
 80120fa:	4a08      	ldr	r2, [pc, #32]	; (801211c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80120fc:	6153      	str	r3, [r2, #20]
    &(getFont_verdana_40_4bpp()),
 80120fe:	f7fc fc09 	bl	800e914 <_Z23getFont_verdana_40_4bppv>
 8012102:	4603      	mov	r3, r0
};
 8012104:	4a05      	ldr	r2, [pc, #20]	; (801211c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8012106:	6193      	str	r3, [r2, #24]
    &(getFont_verdana_10_4bpp())
 8012108:	f7fc fb02 	bl	800e710 <_Z23getFont_verdana_10_4bppv>
 801210c:	4603      	mov	r3, r0
};
 801210e:	4a03      	ldr	r2, [pc, #12]	; (801211c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8012110:	61d3      	str	r3, [r2, #28]
} // namespace TypedTextDatabase
 8012112:	bf00      	nop
 8012114:	3708      	adds	r7, #8
 8012116:	46bd      	mov	sp, r7
 8012118:	bd80      	pop	{r7, pc}
 801211a:	bf00      	nop
 801211c:	20033a04 	.word	0x20033a04

08012120 <_GLOBAL__sub_I_touchgfx_fonts>:
 8012120:	b580      	push	{r7, lr}
 8012122:	af00      	add	r7, sp, #0
 8012124:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012128:	2001      	movs	r0, #1
 801212a:	f7ff ffbd 	bl	80120a8 <_Z41__static_initialization_and_destruction_0ii>
 801212e:	bd80      	pop	{r7, pc}

08012130 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8012130:	b580      	push	{r7, lr}
 8012132:	b082      	sub	sp, #8
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	4a05      	ldr	r2, [pc, #20]	; (8012150 <_ZN19FrontendApplicationD1Ev+0x20>)
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	601a      	str	r2, [r3, #0]
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	4618      	mov	r0, r3
 8012142:	f7fc fe33 	bl	800edac <_ZN23FrontendApplicationBaseD1Ev>
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	4618      	mov	r0, r3
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	0802fc1c 	.word	0x0802fc1c

08012154 <_ZN19FrontendApplicationD0Ev>:
 8012154:	b580      	push	{r7, lr}
 8012156:	b082      	sub	sp, #8
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	f7ff ffe7 	bl	8012130 <_ZN19FrontendApplicationD1Ev>
 8012162:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8012166:	6878      	ldr	r0, [r7, #4]
 8012168:	f017 fd48 	bl	8029bfc <_ZdlPvj>
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	4618      	mov	r0, r3
 8012170:	3708      	adds	r7, #8
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}

08012176 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8012176:	b580      	push	{r7, lr}
 8012178:	b082      	sub	sp, #8
 801217a:	af00      	add	r7, sp, #0
 801217c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8012184:	4618      	mov	r0, r3
 8012186:	f000 f997 	bl	80124b8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	4618      	mov	r0, r3
 801218e:	f008 fdcf 	bl	801ad30 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8012192:	bf00      	nop
 8012194:	3708      	adds	r7, #8
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
	...

0801219c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	68b9      	ldr	r1, [r7, #8]
 80121ae:	4618      	mov	r0, r3
 80121b0:	f7fc fe4c 	bl	800ee4c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80121b4:	4a03      	ldr	r2, [pc, #12]	; (80121c4 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	601a      	str	r2, [r3, #0]
{

}
 80121ba:	68fb      	ldr	r3, [r7, #12]
 80121bc:	4618      	mov	r0, r3
 80121be:	3710      	adds	r7, #16
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	0802fc1c 	.word	0x0802fc1c

080121c8 <_ZN8alertBarC1Ev>:
#include <gui/containers/alertBar.hpp>

alertBar::alertBar()
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b082      	sub	sp, #8
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	6078      	str	r0, [r7, #4]
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	4618      	mov	r0, r3
 80121d4:	f7fd fe1c 	bl	800fe10 <_ZN12alertBarBaseC1Ev>
 80121d8:	4a03      	ldr	r2, [pc, #12]	; (80121e8 <_ZN8alertBarC1Ev+0x20>)
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	601a      	str	r2, [r3, #0]
{

}
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	4618      	mov	r0, r3
 80121e2:	3708      	adds	r7, #8
 80121e4:	46bd      	mov	sp, r7
 80121e6:	bd80      	pop	{r7, pc}
 80121e8:	0802fc68 	.word	0x0802fc68

080121ec <_ZN8alertBar10initializeEv>:

void alertBar::initialize()
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b082      	sub	sp, #8
 80121f0:	af00      	add	r7, sp, #0
 80121f2:	6078      	str	r0, [r7, #4]
    alertBarBase::initialize();
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	4618      	mov	r0, r3
 80121f8:	f7fd ff24 	bl	8010044 <_ZN12alertBarBase10initializeEv>
}
 80121fc:	bf00      	nop
 80121fe:	3708      	adds	r7, #8
 8012200:	46bd      	mov	sp, r7
 8012202:	bd80      	pop	{r7, pc}

08012204 <_ZN7tempBoxC1Ev>:
#include <gui/containers/tempBox.hpp>

tempBox::tempBox()
 8012204:	b580      	push	{r7, lr}
 8012206:	b082      	sub	sp, #8
 8012208:	af00      	add	r7, sp, #0
 801220a:	6078      	str	r0, [r7, #4]
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	4618      	mov	r0, r3
 8012210:	f7fe f94c 	bl	80104ac <_ZN11tempBoxBaseC1Ev>
 8012214:	4a03      	ldr	r2, [pc, #12]	; (8012224 <_ZN7tempBoxC1Ev+0x20>)
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	601a      	str	r2, [r3, #0]
{

}
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	4618      	mov	r0, r3
 801221e:	3708      	adds	r7, #8
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	0802fcfc 	.word	0x0802fcfc

08012228 <_ZN7tempBox10initializeEv>:

void tempBox::initialize()
{
 8012228:	b580      	push	{r7, lr}
 801222a:	b082      	sub	sp, #8
 801222c:	af00      	add	r7, sp, #0
 801222e:	6078      	str	r0, [r7, #4]
    tempBoxBase::initialize();
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	4618      	mov	r0, r3
 8012234:	f7fe fa5c 	bl	80106f0 <_ZN11tempBoxBase10initializeEv>
}
 8012238:	bf00      	nop
 801223a:	3708      	adds	r7, #8
 801223c:	46bd      	mov	sp, r7
 801223e:	bd80      	pop	{r7, pc}

08012240 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
    {
    }
 8012248:	bf00      	nop
 801224a:	370c      	adds	r7, #12
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr

08012254 <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 8012254:	b480      	push	{r7}
 8012256:	b083      	sub	sp, #12
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
    {
    }
 801225c:	bf00      	nop
 801225e:	370c      	adds	r7, #12
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr

08012268 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 8012268:	b480      	push	{r7}
 801226a:	b083      	sub	sp, #12
 801226c:	af00      	add	r7, sp, #0
 801226e:	6078      	str	r0, [r7, #4]
    {
 8012270:	4a04      	ldr	r2, [pc, #16]	; (8012284 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	601a      	str	r2, [r3, #0]
    }
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	4618      	mov	r0, r3
 801227a:	370c      	adds	r7, #12
 801227c:	46bd      	mov	sp, r7
 801227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012282:	4770      	bx	lr
 8012284:	0802fda0 	.word	0x0802fda0

08012288 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 8012288:	b580      	push	{r7, lr}
 801228a:	b082      	sub	sp, #8
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
    }
 8012290:	6878      	ldr	r0, [r7, #4]
 8012292:	f7ff ffe9 	bl	8012268 <_ZN8touchgfx9PresenterD1Ev>
 8012296:	2104      	movs	r1, #4
 8012298:	6878      	ldr	r0, [r7, #4]
 801229a:	f017 fcaf 	bl	8029bfc <_ZdlPvj>
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	4618      	mov	r0, r3
 80122a2:	3708      	adds	r7, #8
 80122a4:	46bd      	mov	sp, r7
 80122a6:	bd80      	pop	{r7, pc}

080122a8 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 80122a8:	b480      	push	{r7}
 80122aa:	b083      	sub	sp, #12
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
    {
 80122b0:	4a04      	ldr	r2, [pc, #16]	; (80122c4 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	601a      	str	r2, [r3, #0]
    }
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	4618      	mov	r0, r3
 80122ba:	370c      	adds	r7, #12
 80122bc:	46bd      	mov	sp, r7
 80122be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122c2:	4770      	bx	lr
 80122c4:	0802fda0 	.word	0x0802fda0

080122c8 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 80122c8:	b480      	push	{r7}
 80122ca:	b083      	sub	sp, #12
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
 80122d0:	4a06      	ldr	r2, [pc, #24]	; (80122ec <_ZN13ModelListenerC1Ev+0x24>)
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	601a      	str	r2, [r3, #0]
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	2200      	movs	r2, #0
 80122da:	605a      	str	r2, [r3, #4]
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	4618      	mov	r0, r3
 80122e0:	370c      	adds	r7, #12
 80122e2:	46bd      	mov	sp, r7
 80122e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122e8:	4770      	bx	lr
 80122ea:	bf00      	nop
 80122ec:	0802fd90 	.word	0x0802fd90

080122f0 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 80122f0:	b480      	push	{r7}
 80122f2:	b083      	sub	sp, #12
 80122f4:	af00      	add	r7, sp, #0
 80122f6:	6078      	str	r0, [r7, #4]
 80122f8:	4a04      	ldr	r2, [pc, #16]	; (801230c <_ZN13ModelListenerD1Ev+0x1c>)
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	601a      	str	r2, [r3, #0]
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	4618      	mov	r0, r3
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr
 801230c:	0802fd90 	.word	0x0802fd90

08012310 <_ZN13ModelListenerD0Ev>:
 8012310:	b580      	push	{r7, lr}
 8012312:	b082      	sub	sp, #8
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	6878      	ldr	r0, [r7, #4]
 801231a:	f7ff ffe9 	bl	80122f0 <_ZN13ModelListenerD1Ev>
 801231e:	2108      	movs	r1, #8
 8012320:	6878      	ldr	r0, [r7, #4]
 8012322:	f017 fc6b 	bl	8029bfc <_ZdlPvj>
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	4618      	mov	r0, r3
 801232a:	3708      	adds	r7, #8
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}

08012330 <_ZN13MainPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~MainPresenter() {};
 8012330:	b580      	push	{r7, lr}
 8012332:	b082      	sub	sp, #8
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
 8012338:	4a09      	ldr	r2, [pc, #36]	; (8012360 <_ZN13MainPresenterD1Ev+0x30>)
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	601a      	str	r2, [r3, #0]
 801233e:	4a09      	ldr	r2, [pc, #36]	; (8012364 <_ZN13MainPresenterD1Ev+0x34>)
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	605a      	str	r2, [r3, #4]
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	3304      	adds	r3, #4
 8012348:	4618      	mov	r0, r3
 801234a:	f7ff ffd1 	bl	80122f0 <_ZN13ModelListenerD1Ev>
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	4618      	mov	r0, r3
 8012352:	f7ff ff89 	bl	8012268 <_ZN8touchgfx9PresenterD1Ev>
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	4618      	mov	r0, r3
 801235a:	3708      	adds	r7, #8
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}
 8012360:	0802fdb8 	.word	0x0802fdb8
 8012364:	0802fdd0 	.word	0x0802fdd0

08012368 <_ZThn4_N13MainPresenterD1Ev>:
 8012368:	f1a0 0004 	sub.w	r0, r0, #4
 801236c:	e7e0      	b.n	8012330 <_ZN13MainPresenterD1Ev>
 801236e:	bf00      	nop

08012370 <_ZN13MainPresenterD0Ev>:
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
 8012378:	6878      	ldr	r0, [r7, #4]
 801237a:	f7ff ffd9 	bl	8012330 <_ZN13MainPresenterD1Ev>
 801237e:	2110      	movs	r1, #16
 8012380:	6878      	ldr	r0, [r7, #4]
 8012382:	f017 fc3b 	bl	8029bfc <_ZdlPvj>
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	4618      	mov	r0, r3
 801238a:	3708      	adds	r7, #8
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <_ZThn4_N13MainPresenterD0Ev>:
 8012390:	f1a0 0004 	sub.w	r0, r0, #4
 8012394:	e7ec      	b.n	8012370 <_ZN13MainPresenterD0Ev>
	...

08012398 <_ZN13MainPresenterC1ER8MainView>:
#include <gui/main_screen/MainView.hpp>
#include <gui/main_screen/MainPresenter.hpp>

MainPresenter::MainPresenter(MainView& v)
 8012398:	b580      	push	{r7, lr}
 801239a:	b082      	sub	sp, #8
 801239c:	af00      	add	r7, sp, #0
 801239e:	6078      	str	r0, [r7, #4]
 80123a0:	6039      	str	r1, [r7, #0]
    : view(v)
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7ff ff7f 	bl	80122a8 <_ZN8touchgfx9PresenterC1Ev>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	3304      	adds	r3, #4
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7ff ff8a 	bl	80122c8 <_ZN13ModelListenerC1Ev>
 80123b4:	4a06      	ldr	r2, [pc, #24]	; (80123d0 <_ZN13MainPresenterC1ER8MainView+0x38>)
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	601a      	str	r2, [r3, #0]
 80123ba:	4a06      	ldr	r2, [pc, #24]	; (80123d4 <_ZN13MainPresenterC1ER8MainView+0x3c>)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	605a      	str	r2, [r3, #4]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	60da      	str	r2, [r3, #12]
{

}
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	4618      	mov	r0, r3
 80123ca:	3708      	adds	r7, #8
 80123cc:	46bd      	mov	sp, r7
 80123ce:	bd80      	pop	{r7, pc}
 80123d0:	0802fdb8 	.word	0x0802fdb8
 80123d4:	0802fdd0 	.word	0x0802fdd0

080123d8 <_ZN13MainPresenter8activateEv>:

void MainPresenter::activate()
{
 80123d8:	b480      	push	{r7}
 80123da:	b083      	sub	sp, #12
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]

}
 80123e0:	bf00      	nop
 80123e2:	370c      	adds	r7, #12
 80123e4:	46bd      	mov	sp, r7
 80123e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ea:	4770      	bx	lr

080123ec <_ZN13MainPresenter10deactivateEv>:

void MainPresenter::deactivate()
{
 80123ec:	b480      	push	{r7}
 80123ee:	b083      	sub	sp, #12
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]

}
 80123f4:	bf00      	nop
 80123f6:	370c      	adds	r7, #12
 80123f8:	46bd      	mov	sp, r7
 80123fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fe:	4770      	bx	lr

08012400 <_ZN8MainViewD1Ev>:

class MainView : public MainViewBase
{
public:
    MainView();
    virtual ~MainView() {}
 8012400:	b580      	push	{r7, lr}
 8012402:	b082      	sub	sp, #8
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	4a05      	ldr	r2, [pc, #20]	; (8012420 <_ZN8MainViewD1Ev+0x20>)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	601a      	str	r2, [r3, #0]
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	4618      	mov	r0, r3
 8012412:	f7fe fb3b 	bl	8010a8c <_ZN12MainViewBaseD1Ev>
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	4618      	mov	r0, r3
 801241a:	3708      	adds	r7, #8
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}
 8012420:	0802fde0 	.word	0x0802fde0

08012424 <_ZN8MainViewD0Ev>:
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6878      	ldr	r0, [r7, #4]
 801242e:	f7ff ffe7 	bl	8012400 <_ZN8MainViewD1Ev>
 8012432:	f243 7164 	movw	r1, #14180	; 0x3764
 8012436:	6878      	ldr	r0, [r7, #4]
 8012438:	f017 fbe0 	bl	8029bfc <_ZdlPvj>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	4618      	mov	r0, r3
 8012440:	3708      	adds	r7, #8
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
	...

08012448 <_ZN8MainViewC1Ev>:
#include <gui/main_screen/MainView.hpp>

MainView::MainView()
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	4618      	mov	r0, r3
 8012454:	f7fe fba4 	bl	8010ba0 <_ZN12MainViewBaseC1Ev>
 8012458:	4a03      	ldr	r2, [pc, #12]	; (8012468 <_ZN8MainViewC1Ev+0x20>)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	601a      	str	r2, [r3, #0]
{

}
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	4618      	mov	r0, r3
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}
 8012468:	0802fde0 	.word	0x0802fde0

0801246c <_ZN8MainView11setupScreenEv>:

void MainView::setupScreen()
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b082      	sub	sp, #8
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
    MainViewBase::setupScreen();
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	4618      	mov	r0, r3
 8012478:	f7ff fbf0 	bl	8011c5c <_ZN12MainViewBase11setupScreenEv>
}
 801247c:	bf00      	nop
 801247e:	3708      	adds	r7, #8
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <_ZN8MainView14tearDownScreenEv>:

void MainView::tearDownScreen()
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
    MainViewBase::tearDownScreen();
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	4618      	mov	r0, r3
 8012490:	f7fe fa4c 	bl	801092c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 8012494:	bf00      	nop
 8012496:	3708      	adds	r7, #8
 8012498:	46bd      	mov	sp, r7
 801249a:	bd80      	pop	{r7, pc}

0801249c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801249c:	b480      	push	{r7}
 801249e:	b083      	sub	sp, #12
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	6078      	str	r0, [r7, #4]
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2200      	movs	r2, #0
 80124a8:	601a      	str	r2, [r3, #0]
{

}
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	4618      	mov	r0, r3
 80124ae:	370c      	adds	r7, #12
 80124b0:	46bd      	mov	sp, r7
 80124b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b6:	4770      	bx	lr

080124b8 <_ZN5Model4tickEv>:

void Model::tick()
{
 80124b8:	b480      	push	{r7}
 80124ba:	b083      	sub	sp, #12
 80124bc:	af00      	add	r7, sp, #0
 80124be:	6078      	str	r0, [r7, #4]

}
 80124c0:	bf00      	nop
 80124c2:	370c      	adds	r7, #12
 80124c4:	46bd      	mov	sp, r7
 80124c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ca:	4770      	bx	lr

080124cc <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 80124cc:	b480      	push	{r7}
 80124ce:	b083      	sub	sp, #12
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	6078      	str	r0, [r7, #4]
    {
 80124d4:	4a04      	ldr	r2, [pc, #16]	; (80124e8 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	601a      	str	r2, [r3, #0]
    }
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4618      	mov	r0, r3
 80124de:	370c      	adds	r7, #12
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr
 80124e8:	0802fe30 	.word	0x0802fe30

080124ec <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
    }
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7ff ffe9 	bl	80124cc <_ZN8touchgfx15TouchControllerD1Ev>
 80124fa:	2104      	movs	r1, #4
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f017 fb7d 	bl	8029bfc <_ZdlPvj>
 8012502:	687b      	ldr	r3, [r7, #4]
 8012504:	4618      	mov	r0, r3
 8012506:	3708      	adds	r7, #8
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 801250c:	b480      	push	{r7}
 801250e:	b083      	sub	sp, #12
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 8012514:	bf00      	nop
 8012516:	370c      	adds	r7, #12
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr

08012520 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8012520:	b480      	push	{r7}
 8012522:	b085      	sub	sp, #20
 8012524:	af00      	add	r7, sp, #0
 8012526:	60f8      	str	r0, [r7, #12]
 8012528:	60b9      	str	r1, [r7, #8]
 801252a:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 801252c:	2300      	movs	r3, #0
}
 801252e:	4618      	mov	r0, r3
 8012530:	3714      	adds	r7, #20
 8012532:	46bd      	mov	sp, r7
 8012534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012538:	4770      	bx	lr
	...

0801253c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 801253c:	b580      	push	{r7, lr}
 801253e:	b082      	sub	sp, #8
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
 8012544:	4a05      	ldr	r2, [pc, #20]	; (801255c <_ZN20STM32TouchControllerD1Ev+0x20>)
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	601a      	str	r2, [r3, #0]
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	4618      	mov	r0, r3
 801254e:	f7ff ffbd 	bl	80124cc <_ZN8touchgfx15TouchControllerD1Ev>
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	4618      	mov	r0, r3
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	0802fe18 	.word	0x0802fe18

08012560 <_ZN20STM32TouchControllerD0Ev>:
 8012560:	b580      	push	{r7, lr}
 8012562:	b082      	sub	sp, #8
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
 8012568:	6878      	ldr	r0, [r7, #4]
 801256a:	f7ff ffe7 	bl	801253c <_ZN20STM32TouchControllerD1Ev>
 801256e:	2104      	movs	r1, #4
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f017 fb43 	bl	8029bfc <_ZdlPvj>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	4618      	mov	r0, r3
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}

08012580 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 8012580:	b480      	push	{r7}
 8012582:	b083      	sub	sp, #12
 8012584:	af00      	add	r7, sp, #0
 8012586:	4603      	mov	r3, r0
 8012588:	71fb      	strb	r3, [r7, #7]
    switch (id)
 801258a:	79fb      	ldrb	r3, [r7, #7]
 801258c:	2b03      	cmp	r3, #3
 801258e:	d80c      	bhi.n	80125aa <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 8012590:	a201      	add	r2, pc, #4	; (adr r2, 8012598 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 8012592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012596:	bf00      	nop
 8012598:	080125a9 	.word	0x080125a9
 801259c:	080125a9 	.word	0x080125a9
 80125a0:	080125a9 	.word	0x080125a9
 80125a4:	080125a9 	.word	0x080125a9
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 80125a8:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 80125aa:	bf00      	nop
 80125ac:	370c      	adds	r7, #12
 80125ae:	46bd      	mov	sp, r7
 80125b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b4:	4770      	bx	lr
 80125b6:	bf00      	nop

080125b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 80125b8:	b480      	push	{r7}
 80125ba:	b083      	sub	sp, #12
 80125bc:	af00      	add	r7, sp, #0
 80125be:	4603      	mov	r3, r0
 80125c0:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80125c2:	79fb      	ldrb	r3, [r7, #7]
 80125c4:	2b03      	cmp	r3, #3
 80125c6:	d80c      	bhi.n	80125e2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 80125c8:	a201      	add	r2, pc, #4	; (adr r2, 80125d0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 80125ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125ce:	bf00      	nop
 80125d0:	080125e1 	.word	0x080125e1
 80125d4:	080125e1 	.word	0x080125e1
 80125d8:	080125e1 	.word	0x080125e1
 80125dc:	080125e1 	.word	0x080125e1
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 80125e0:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 80125e2:	bf00      	nop
 80125e4:	370c      	adds	r7, #12
 80125e6:	46bd      	mov	sp, r7
 80125e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ec:	4770      	bx	lr
 80125ee:	bf00      	nop

080125f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 80125f0:	b480      	push	{r7}
 80125f2:	b083      	sub	sp, #12
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	4603      	mov	r3, r0
 80125f8:	71fb      	strb	r3, [r7, #7]
    switch (id)
 80125fa:	79fb      	ldrb	r3, [r7, #7]
 80125fc:	2b03      	cmp	r3, #3
 80125fe:	d80c      	bhi.n	801261a <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 8012600:	a201      	add	r2, pc, #4	; (adr r2, 8012608 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 8012602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012606:	bf00      	nop
 8012608:	08012619 	.word	0x08012619
 801260c:	08012619 	.word	0x08012619
 8012610:	08012619 	.word	0x08012619
 8012614:	08012619 	.word	0x08012619
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 8012618:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 801261a:	bf00      	nop
 801261c:	370c      	adds	r7, #12
 801261e:	46bd      	mov	sp, r7
 8012620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012624:	4770      	bx	lr
 8012626:	bf00      	nop

08012628 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 8012628:	b480      	push	{r7}
 801262a:	b083      	sub	sp, #12
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
    {
 8012630:	4a04      	ldr	r2, [pc, #16]	; (8012644 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	601a      	str	r2, [r3, #0]
    }
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	4618      	mov	r0, r3
 801263a:	370c      	adds	r7, #12
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr
 8012644:	08030310 	.word	0x08030310

08012648 <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 8012648:	b580      	push	{r7, lr}
 801264a:	b082      	sub	sp, #8
 801264c:	af00      	add	r7, sp, #0
 801264e:	6078      	str	r0, [r7, #4]
    }
 8012650:	6878      	ldr	r0, [r7, #4]
 8012652:	f7ff ffe9 	bl	8012628 <_ZN8touchgfx3HALD1Ev>
 8012656:	217c      	movs	r1, #124	; 0x7c
 8012658:	6878      	ldr	r0, [r7, #4]
 801265a:	f017 facf 	bl	8029bfc <_ZdlPvj>
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	4618      	mov	r0, r3
 8012662:	3708      	adds	r7, #8
 8012664:	46bd      	mov	sp, r7
 8012666:	bd80      	pop	{r7, pc}

08012668 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 8012668:	b480      	push	{r7}
 801266a:	b083      	sub	sp, #12
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	460b      	mov	r3, r1
 8012672:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	78fa      	ldrb	r2, [r7, #3]
 8012678:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2201      	movs	r2, #1
 8012680:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 8012684:	bf00      	nop
 8012686:	370c      	adds	r7, #12
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8012690:	b580      	push	{r7, lr}
 8012692:	b082      	sub	sp, #8
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	460b      	mov	r3, r1
 801269a:	807b      	strh	r3, [r7, #2]
 801269c:	4613      	mov	r3, r2
 801269e:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 80126a0:	4b0c      	ldr	r3, [pc, #48]	; (80126d4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 80126a2:	881b      	ldrh	r3, [r3, #0]
 80126a4:	887a      	ldrh	r2, [r7, #2]
 80126a6:	429a      	cmp	r2, r3
 80126a8:	d304      	bcc.n	80126b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 80126aa:	4b0b      	ldr	r3, [pc, #44]	; (80126d8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 80126ac:	881b      	ldrh	r3, [r3, #0]
 80126ae:	883a      	ldrh	r2, [r7, #0]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d205      	bcs.n	80126c0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 80126b4:	4b09      	ldr	r3, [pc, #36]	; (80126dc <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 80126b6:	4a0a      	ldr	r2, [pc, #40]	; (80126e0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 80126b8:	219e      	movs	r1, #158	; 0x9e
 80126ba:	480a      	ldr	r0, [pc, #40]	; (80126e4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 80126bc:	f017 fb48 	bl	8029d50 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 80126c0:	4a09      	ldr	r2, [pc, #36]	; (80126e8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 80126c2:	887b      	ldrh	r3, [r7, #2]
 80126c4:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 80126c6:	4a09      	ldr	r2, [pc, #36]	; (80126ec <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 80126c8:	883b      	ldrh	r3, [r7, #0]
 80126ca:	8013      	strh	r3, [r2, #0]
    }
 80126cc:	bf00      	nop
 80126ce:	3708      	adds	r7, #8
 80126d0:	46bd      	mov	sp, r7
 80126d2:	bd80      	pop	{r7, pc}
 80126d4:	2003c2b0 	.word	0x2003c2b0
 80126d8:	2003c2b2 	.word	0x2003c2b2
 80126dc:	0802da94 	.word	0x0802da94
 80126e0:	0802daf8 	.word	0x0802daf8
 80126e4:	0802db3c 	.word	0x0802db3c
 80126e8:	2003c2b6 	.word	0x2003c2b6
 80126ec:	2003c2b8 	.word	0x2003c2b8

080126f0 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b082      	sub	sp, #8
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
        if (useDMAAcceleration)
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d009      	beq.n	8012716 <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
            return dma.getBlitCaps();
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	685a      	ldr	r2, [r3, #4]
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	685b      	ldr	r3, [r3, #4]
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	4610      	mov	r0, r2
 8012710:	4798      	blx	r3
 8012712:	4603      	mov	r3, r0
 8012714:	e000      	b.n	8012718 <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        return static_cast<BlitOperations>(0);
 8012716:	2300      	movs	r3, #0
    }
 8012718:	4618      	mov	r0, r3
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8012720:	b580      	push	{r7, lr}
 8012722:	b082      	sub	sp, #8
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8012728:	6878      	ldr	r0, [r7, #4]
 801272a:	f004 fd93 	bl	8017254 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	33ac      	adds	r3, #172	; 0xac
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	4798      	blx	r3
    }
 801273a:	bf00      	nop
 801273c:	3708      	adds	r7, #8
 801273e:	46bd      	mov	sp, r7
 8012740:	bd80      	pop	{r7, pc}

08012742 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 8012742:	b480      	push	{r7}
 8012744:	b083      	sub	sp, #12
 8012746:	af00      	add	r7, sp, #0
 8012748:	6078      	str	r0, [r7, #4]
 801274a:	6039      	str	r1, [r7, #0]
        return false;
 801274c:	2300      	movs	r3, #0
    }
 801274e:	4618      	mov	r0, r3
 8012750:	370c      	adds	r7, #12
 8012752:	46bd      	mov	sp, r7
 8012754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012758:	4770      	bx	lr
	...

0801275c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 801275c:	b580      	push	{r7, lr}
 801275e:	b084      	sub	sp, #16
 8012760:	af00      	add	r7, sp, #0
 8012762:	60f8      	str	r0, [r7, #12]
 8012764:	60b9      	str	r1, [r7, #8]
 8012766:	607a      	str	r2, [r7, #4]
 8012768:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 801276a:	68bb      	ldr	r3, [r7, #8]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d106      	bne.n	801277e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8012770:	4b0f      	ldr	r3, [pc, #60]	; (80127b0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 8012772:	4a10      	ldr	r2, [pc, #64]	; (80127b4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 8012774:	f240 21d2 	movw	r1, #722	; 0x2d2
 8012778:	480f      	ldr	r0, [pc, #60]	; (80127b8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 801277a:	f017 fae9 	bl	8029d50 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	68ba      	ldr	r2, [r7, #8]
 8012782:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	2b00      	cmp	r3, #0
 801278e:	bf14      	ite	ne
 8012790:	2301      	movne	r3, #1
 8012792:	2300      	moveq	r3, #0
 8012794:	b2da      	uxtb	r2, r3
 8012796:	4b09      	ldr	r3, [pc, #36]	; (80127bc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8012798:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 801279a:	68fb      	ldr	r3, [r7, #12]
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	338c      	adds	r3, #140	; 0x8c
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	6839      	ldr	r1, [r7, #0]
 80127a4:	68f8      	ldr	r0, [r7, #12]
 80127a6:	4798      	blx	r3
    }
 80127a8:	bf00      	nop
 80127aa:	3710      	adds	r7, #16
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}
 80127b0:	0802db80 	.word	0x0802db80
 80127b4:	0802dbb8 	.word	0x0802dbb8
 80127b8:	0802db3c 	.word	0x0802db3c
 80127bc:	2003c2ba 	.word	0x2003c2ba

080127c0 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
    virtual void setAnimationStorage(void* animationStorage)
 80127c0:	b480      	push	{r7}
 80127c2:	b083      	sub	sp, #12
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	683a      	ldr	r2, [r7, #0]
 80127ce:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80127d0:	683b      	ldr	r3, [r7, #0]
 80127d2:	2b00      	cmp	r3, #0
 80127d4:	bf14      	ite	ne
 80127d6:	2301      	movne	r3, #1
 80127d8:	2300      	moveq	r3, #0
 80127da:	b2da      	uxtb	r2, r3
 80127dc:	4b03      	ldr	r3, [pc, #12]	; (80127ec <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 80127de:	701a      	strb	r2, [r3, #0]
    }
 80127e0:	bf00      	nop
 80127e2:	370c      	adds	r7, #12
 80127e4:	46bd      	mov	sp, r7
 80127e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ea:	4770      	bx	lr
 80127ec:	2003c2bb 	.word	0x2003c2bb

080127f0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
    virtual FlashDataReader* getFlashDataReader() const
 80127f0:	b480      	push	{r7}
 80127f2:	b083      	sub	sp, #12
 80127f4:	af00      	add	r7, sp, #0
 80127f6:	6078      	str	r0, [r7, #4]
        return 0;
 80127f8:	2300      	movs	r3, #0
    }
 80127fa:	4618      	mov	r0, r3
 80127fc:	370c      	adds	r7, #12
 80127fe:	46bd      	mov	sp, r7
 8012800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012804:	4770      	bx	lr

08012806 <_ZN8touchgfx3HAL9taskDelayEt>:
    virtual void taskDelay(uint16_t ms)
 8012806:	b580      	push	{r7, lr}
 8012808:	b082      	sub	sp, #8
 801280a:	af00      	add	r7, sp, #0
 801280c:	6078      	str	r0, [r7, #4]
 801280e:	460b      	mov	r3, r1
 8012810:	807b      	strh	r3, [r7, #2]
        if (taskDelayFunc)
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012816:	2b00      	cmp	r3, #0
 8012818:	d004      	beq.n	8012824 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
            taskDelayFunc(ms);
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801281e:	887a      	ldrh	r2, [r7, #2]
 8012820:	4610      	mov	r0, r2
 8012822:	4798      	blx	r3
    }
 8012824:	bf00      	nop
 8012826:	3708      	adds	r7, #8
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}

0801282c <_ZN8touchgfx3HAL10getDMATypeEv>:
    virtual DMAType getDMAType()
 801282c:	b580      	push	{r7, lr}
 801282e:	b082      	sub	sp, #8
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
        return dma.getDMAType();
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	685a      	ldr	r2, [r3, #4]
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	685b      	ldr	r3, [r3, #4]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	3318      	adds	r3, #24
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	4610      	mov	r0, r2
 8012844:	4798      	blx	r3
 8012846:	4603      	mov	r3, r0
    }
 8012848:	4618      	mov	r0, r3
 801284a:	3708      	adds	r7, #8
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}

08012850 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 8012850:	b480      	push	{r7}
 8012852:	b085      	sub	sp, #20
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8012864:	429a      	cmp	r2, r3
 8012866:	d011      	beq.n	801288c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 8012868:	4b14      	ldr	r3, [pc, #80]	; (80128bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801286a:	781b      	ldrb	r3, [r3, #0]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d11e      	bne.n	80128ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8012870:	4b13      	ldr	r3, [pc, #76]	; (80128c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012872:	881b      	ldrh	r3, [r3, #0]
 8012874:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8012876:	4b13      	ldr	r3, [pc, #76]	; (80128c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012878:	881a      	ldrh	r2, [r3, #0]
 801287a:	4b11      	ldr	r3, [pc, #68]	; (80128c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 801287c:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 801287e:	4a11      	ldr	r2, [pc, #68]	; (80128c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8012880:	89bb      	ldrh	r3, [r7, #12]
 8012882:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8012884:	4b0d      	ldr	r3, [pc, #52]	; (80128bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8012886:	2201      	movs	r2, #1
 8012888:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 801288a:	e010      	b.n	80128ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 801288c:	4b0b      	ldr	r3, [pc, #44]	; (80128bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 801288e:	781b      	ldrb	r3, [r3, #0]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d00c      	beq.n	80128ae <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 8012894:	4b0a      	ldr	r3, [pc, #40]	; (80128c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 8012896:	881b      	ldrh	r3, [r3, #0]
 8012898:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 801289a:	4b0a      	ldr	r3, [pc, #40]	; (80128c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 801289c:	881a      	ldrh	r2, [r3, #0]
 801289e:	4b08      	ldr	r3, [pc, #32]	; (80128c0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 80128a0:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 80128a2:	4a08      	ldr	r2, [pc, #32]	; (80128c4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 80128a4:	89fb      	ldrh	r3, [r7, #14]
 80128a6:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80128a8:	4b04      	ldr	r3, [pc, #16]	; (80128bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 80128aa:	2200      	movs	r2, #0
 80128ac:	701a      	strb	r2, [r3, #0]
    }
 80128ae:	bf00      	nop
 80128b0:	3714      	adds	r7, #20
 80128b2:	46bd      	mov	sp, r7
 80128b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b8:	4770      	bx	lr
 80128ba:	bf00      	nop
 80128bc:	2003c2b4 	.word	0x2003c2b4
 80128c0:	2003c2b2 	.word	0x2003c2b2
 80128c4:	2003c2b0 	.word	0x2003c2b0

080128c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b082      	sub	sp, #8
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	4618      	mov	r0, r3
 80128d4:	f003 ff23 	bl	801671e <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 80128d8:	bf00      	nop
 80128da:	3708      	adds	r7, #8
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b082      	sub	sp, #8
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
 80128e8:	4a05      	ldr	r2, [pc, #20]	; (8012900 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	601a      	str	r2, [r3, #0]
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	4618      	mov	r0, r3
 80128f2:	f7ff fe99 	bl	8012628 <_ZN8touchgfx3HALD1Ev>
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4618      	mov	r0, r3
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	08030168 	.word	0x08030168

08012904 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8012904:	b580      	push	{r7, lr}
 8012906:	b082      	sub	sp, #8
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	6878      	ldr	r0, [r7, #4]
 801290e:	f7ff ffe7 	bl	80128e0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012912:	217c      	movs	r1, #124	; 0x7c
 8012914:	6878      	ldr	r0, [r7, #4]
 8012916:	f017 f971 	bl	8029bfc <_ZdlPvj>
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	4618      	mov	r0, r3
 801291e:	3708      	adds	r7, #8
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}

08012924 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8012924:	b580      	push	{r7, lr}
 8012926:	b082      	sub	sp, #8
 8012928:	af00      	add	r7, sp, #0
 801292a:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	4618      	mov	r0, r3
 8012930:	f7ff ffca 	bl	80128c8 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 8012934:	bf00      	nop
 8012936:	3708      	adds	r7, #8
 8012938:	46bd      	mov	sp, r7
 801293a:	bd80      	pop	{r7, pc}

0801293c <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	4618      	mov	r0, r3
 8012948:	f002 fbf8 	bl	801513c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 801294c:	bf00      	nop
 801294e:	3708      	adds	r7, #8
 8012950:	46bd      	mov	sp, r7
 8012952:	bd80      	pop	{r7, pc}

08012954 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af00      	add	r7, sp, #0
 801295a:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	4618      	mov	r0, r3
 8012960:	f002 fcae 	bl	80152c0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 8012964:	4603      	mov	r3, r0
}
 8012966:	4618      	mov	r0, r3
 8012968:	3708      	adds	r7, #8
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}

0801296e <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 801296e:	b580      	push	{r7, lr}
 8012970:	b082      	sub	sp, #8
 8012972:	af00      	add	r7, sp, #0
 8012974:	6078      	str	r0, [r7, #4]
 8012976:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	6839      	ldr	r1, [r7, #0]
 801297c:	4618      	mov	r0, r3
 801297e:	f002 fcad 	bl	80152dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8012982:	bf00      	nop
 8012984:	3708      	adds	r7, #8
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801298a:	b580      	push	{r7, lr}
 801298c:	b082      	sub	sp, #8
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
 8012992:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6839      	ldr	r1, [r7, #0]
 8012998:	4618      	mov	r0, r3
 801299a:	f002 fcb5 	bl	8015308 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 801299e:	bf00      	nop
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 80129a6:	b580      	push	{r7, lr}
 80129a8:	b084      	sub	sp, #16
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	60f8      	str	r0, [r7, #12]
 80129ae:	60b9      	str	r1, [r7, #8]
 80129b0:	607a      	str	r2, [r7, #4]
 80129b2:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 80129b4:	68f8      	ldr	r0, [r7, #12]
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	68b9      	ldr	r1, [r7, #8]
 80129bc:	f002 fcc2 	bl	8015344 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 80129c0:	4603      	mov	r3, r0
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3710      	adds	r7, #16
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}

080129ca <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 80129ca:	b580      	push	{r7, lr}
 80129cc:	b082      	sub	sp, #8
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	4618      	mov	r0, r3
 80129d6:	f002 fbef 	bl	80151b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 80129da:	bf00      	nop
 80129dc:	3708      	adds	r7, #8
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}

080129e2 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b082      	sub	sp, #8
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	4618      	mov	r0, r3
 80129ee:	f002 fbf3 	bl	80151d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 80129f2:	bf00      	nop
 80129f4:	3708      	adds	r7, #8
 80129f6:	46bd      	mov	sp, r7
 80129f8:	bd80      	pop	{r7, pc}

080129fa <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 80129fa:	b580      	push	{r7, lr}
 80129fc:	b082      	sub	sp, #8
 80129fe:	af00      	add	r7, sp, #0
 8012a00:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	4618      	mov	r0, r3
 8012a06:	f002 fbf5 	bl	80151f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 8012a0a:	bf00      	nop
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}

08012a12 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8012a12:	b580      	push	{r7, lr}
 8012a14:	b082      	sub	sp, #8
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	f002 fbf7 	bl	8015210 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 8012a22:	bf00      	nop
 8012a24:	3708      	adds	r7, #8
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}

08012a2a <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 8012a2a:	b580      	push	{r7, lr}
 8012a2c:	b082      	sub	sp, #8
 8012a2e:	af00      	add	r7, sp, #0
 8012a30:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	4618      	mov	r0, r3
 8012a36:	f002 fc19 	bl	801526c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 8012a3a:	4603      	mov	r3, r0
}
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	3708      	adds	r7, #8
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}

08012a44 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f002 fc1a 	bl	8015288 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 8012a54:	bf00      	nop
 8012a56:	3708      	adds	r7, #8
 8012a58:	46bd      	mov	sp, r7
 8012a5a:	bd80      	pop	{r7, pc}

08012a5c <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	6078      	str	r0, [r7, #4]
 8012a64:	4a05      	ldr	r2, [pc, #20]	; (8012a7c <_ZN11TouchGFXHALD1Ev+0x20>)
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	601a      	str	r2, [r3, #0]
 8012a6a:	687b      	ldr	r3, [r7, #4]
 8012a6c:	4618      	mov	r0, r3
 8012a6e:	f7ff ff37 	bl	80128e0 <_ZN20TouchGFXGeneratedHALD1Ev>
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	4618      	mov	r0, r3
 8012a76:	3708      	adds	r7, #8
 8012a78:	46bd      	mov	sp, r7
 8012a7a:	bd80      	pop	{r7, pc}
 8012a7c:	0802fe48 	.word	0x0802fe48

08012a80 <_ZN11TouchGFXHALD0Ev>:
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b082      	sub	sp, #8
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f7ff ffe7 	bl	8012a5c <_ZN11TouchGFXHALD1Ev>
 8012a8e:	217c      	movs	r1, #124	; 0x7c
 8012a90:	6878      	ldr	r0, [r7, #4]
 8012a92:	f017 f8b3 	bl	8029bfc <_ZdlPvj>
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3708      	adds	r7, #8
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}

08012aa0 <_ZN12MJPEGDecoderD1Ev>:
#include <touchgfx/hal/VideoController.hpp>

class MJPEGDecoder
{
public:
    virtual ~MJPEGDecoder()
 8012aa0:	b480      	push	{r7}
 8012aa2:	b083      	sub	sp, #12
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
    {
 8012aa8:	4a04      	ldr	r2, [pc, #16]	; (8012abc <_ZN12MJPEGDecoderD1Ev+0x1c>)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	601a      	str	r2, [r3, #0]
    }
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	4618      	mov	r0, r3
 8012ab2:	370c      	adds	r7, #12
 8012ab4:	46bd      	mov	sp, r7
 8012ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aba:	4770      	bx	lr
 8012abc:	0802ff64 	.word	0x0802ff64

08012ac0 <_ZN12MJPEGDecoderD0Ev>:
    virtual ~MJPEGDecoder()
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b082      	sub	sp, #8
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
    }
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f7ff ffe9 	bl	8012aa0 <_ZN12MJPEGDecoderD1Ev>
 8012ace:	2104      	movs	r1, #4
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f017 f893 	bl	8029bfc <_ZdlPvj>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	4618      	mov	r0, r3
 8012ada:	3708      	adds	r7, #8
 8012adc:	46bd      	mov	sp, r7
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
 8012ae0:	b480      	push	{r7}
 8012ae2:	b083      	sub	sp, #12
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	695b      	ldr	r3, [r3, #20]
 8012aec:	4618      	mov	r0, r3
 8012aee:	370c      	adds	r7, #12
 8012af0:	46bd      	mov	sp, r7
 8012af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af6:	4770      	bx	lr

08012af8 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
 8012af8:	b480      	push	{r7}
 8012afa:	b083      	sub	sp, #12
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	6078      	str	r0, [r7, #4]
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8012b06:	4618      	mov	r0, r3
 8012b08:	370c      	adds	r7, #12
 8012b0a:	46bd      	mov	sp, r7
 8012b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b10:	4770      	bx	lr
	...

08012b14 <SCB_CleanInvalidateDCache>:
/**
  \brief   Clean & Invalidate D-Cache
  \details Cleans and Invalidates D-Cache
  */
__STATIC_INLINE void SCB_CleanInvalidateDCache (void)
{
 8012b14:	b480      	push	{r7}
 8012b16:	b085      	sub	sp, #20
 8012b18:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8012b1a:	4b21      	ldr	r3, [pc, #132]	; (8012ba0 <SCB_CleanInvalidateDCache+0x8c>)
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012b22:	f3bf 8f4f 	dsb	sy
}
 8012b26:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8012b28:	4b1d      	ldr	r3, [pc, #116]	; (8012ba0 <SCB_CleanInvalidateDCache+0x8c>)
 8012b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012b2e:	607b      	str	r3, [r7, #4]

                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	0b5b      	lsrs	r3, r3, #13
 8012b34:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012b38:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	08db      	lsrs	r3, r3, #3
 8012b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8012b42:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	015a      	lsls	r2, r3, #5
 8012b48:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8012b4c:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 8012b4e:	68ba      	ldr	r2, [r7, #8]
 8012b50:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8012b52:	4913      	ldr	r1, [pc, #76]	; (8012ba0 <SCB_CleanInvalidateDCache+0x8c>)
 8012b54:	4313      	orrs	r3, r2
 8012b56:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8012b5a:	68bb      	ldr	r3, [r7, #8]
 8012b5c:	1e5a      	subs	r2, r3, #1
 8012b5e:	60ba      	str	r2, [r7, #8]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	bf14      	ite	ne
 8012b64:	2301      	movne	r3, #1
 8012b66:	2300      	moveq	r3, #0
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d000      	beq.n	8012b70 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8012b6e:	e7e9      	b.n	8012b44 <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	1e5a      	subs	r2, r3, #1
 8012b74:	60fa      	str	r2, [r7, #12]
 8012b76:	2b00      	cmp	r3, #0
 8012b78:	bf14      	ite	ne
 8012b7a:	2301      	movne	r3, #1
 8012b7c:	2300      	moveq	r3, #0
 8012b7e:	b2db      	uxtb	r3, r3
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d000      	beq.n	8012b86 <SCB_CleanInvalidateDCache+0x72>
    do {
 8012b84:	e7d9      	b.n	8012b3a <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8012b86:	f3bf 8f4f 	dsb	sy
}
 8012b8a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8012b8c:	f3bf 8f6f 	isb	sy
}
 8012b90:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8012b92:	bf00      	nop
 8012b94:	3714      	adds	r7, #20
 8012b96:	46bd      	mov	sp, r7
 8012b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9c:	4770      	bx	lr
 8012b9e:	bf00      	nop
 8012ba0:	e000ed00 	.word	0xe000ed00

08012ba4 <_ZN12MJPEGDecoderC1Ev>:
class MJPEGDecoder
 8012ba4:	b480      	push	{r7}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
 8012bac:	4a04      	ldr	r2, [pc, #16]	; (8012bc0 <_ZN12MJPEGDecoderC1Ev+0x1c>)
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	601a      	str	r2, [r3, #0]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	4618      	mov	r0, r3
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr
 8012bc0:	0802ff64 	.word	0x0802ff64

08012bc4 <_ZN20HardwareMJPEGDecoderC1Ev>:
  uint32_t LastLineHeight;
  uint32_t MCU_pr_line;
  uint32_t bytes_pr_pixel;
} JPEG_ConvertorParams;

HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b082      	sub	sp, #8
 8012bc8:	af00      	add	r7, sp, #0
 8012bca:	6078      	str	r0, [r7, #4]
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	4618      	mov	r0, r3
 8012bd0:	f7ff ffe8 	bl	8012ba4 <_ZN12MJPEGDecoderC1Ev>
 8012bd4:	4a21      	ldr	r2, [pc, #132]	; (8012c5c <_ZN20HardwareMJPEGDecoderC1Ev+0x98>)
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	601a      	str	r2, [r3, #0]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	2200      	movs	r2, #0
 8012bde:	615a      	str	r2, [r3, #20]
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	2200      	movs	r2, #0
 8012be4:	619a      	str	r2, [r3, #24]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	2200      	movs	r2, #0
 8012bea:	61da      	str	r2, [r3, #28]
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	621a      	str	r2, [r3, #32]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	625a      	str	r2, [r3, #36]	; 0x24
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	629a      	str	r2, [r3, #40]	; 0x28
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	2200      	movs	r2, #0
 8012c02:	62da      	str	r2, [r3, #44]	; 0x2c
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	2200      	movs	r2, #0
 8012c08:	631a      	str	r2, [r3, #48]	; 0x30
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2200      	movs	r2, #0
 8012c14:	639a      	str	r2, [r3, #56]	; 0x38
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	2200      	movs	r2, #0
 8012c1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	2200      	movs	r2, #0
 8012c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
{
    //Clear video info
    videoInfo.frame_height = 0;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	2200      	movs	r2, #0
 8012c28:	611a      	str	r2, [r3, #16]
    videoInfo.frame_width = 0;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	60da      	str	r2, [r3, #12]
    videoInfo.ms_between_frames = 0;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2200      	movs	r2, #0
 8012c34:	605a      	str	r2, [r3, #4]
    videoInfo.number_of_frames = 0;
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	609a      	str	r2, [r3, #8]

    //Init color tables
    TGFX_JPEG_InitColorTables();
 8012c3c:	f003 f904 	bl	8015e48 <TGFX_JPEG_InitColorTables>

    //Create decoding semaphore
    semDecodingDone = SEM_CREATE();
 8012c40:	2200      	movs	r2, #0
 8012c42:	2100      	movs	r1, #0
 8012c44:	2001      	movs	r0, #1
 8012c46:	f7f7 fd41 	bl	800a6cc <osSemaphoreNew>
 8012c4a:	4603      	mov	r3, r0
 8012c4c:	4a04      	ldr	r2, [pc, #16]	; (8012c60 <_ZN20HardwareMJPEGDecoderC1Ev+0x9c>)
 8012c4e:	6013      	str	r3, [r2, #0]
}
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	4618      	mov	r0, r3
 8012c54:	3708      	adds	r7, #8
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd80      	pop	{r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	0802ff20 	.word	0x0802ff20
 8012c60:	20033a54 	.word	0x20033a54

08012c64 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:

int HardwareMJPEGDecoder::compare(const uint32_t offset, const char* str, uint32_t num)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b086      	sub	sp, #24
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	60f8      	str	r0, [r7, #12]
 8012c6c:	60b9      	str	r1, [r7, #8]
 8012c6e:	607a      	str	r2, [r7, #4]
 8012c70:	603b      	str	r3, [r7, #0]
    const char* src;
    if (reader != 0)
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d008      	beq.n	8012c8c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x28>
    {
        // Assuming data is in buffer!
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012c7e:	68fb      	ldr	r3, [r7, #12]
 8012c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012c82:	68b9      	ldr	r1, [r7, #8]
 8012c84:	1acb      	subs	r3, r1, r3
 8012c86:	4413      	add	r3, r2
 8012c88:	617b      	str	r3, [r7, #20]
 8012c8a:	e004      	b.n	8012c96 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x32>
    }
    else
    {
        src = (const char*)movieData + offset;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c90:	68bb      	ldr	r3, [r7, #8]
 8012c92:	4413      	add	r3, r2
 8012c94:	617b      	str	r3, [r7, #20]
    }
    return strncmp(src, str, num);
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	6879      	ldr	r1, [r7, #4]
 8012c9a:	6978      	ldr	r0, [r7, #20]
 8012c9c:	f017 fff1 	bl	802ac82 <strncmp>
 8012ca0:	4603      	mov	r3, r0
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3718      	adds	r7, #24
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}

08012caa <_ZN20HardwareMJPEGDecoder6getU32Em>:

inline uint32_t HardwareMJPEGDecoder::getU32(const uint32_t offset)
{
 8012caa:	b480      	push	{r7}
 8012cac:	b085      	sub	sp, #20
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
 8012cb2:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d024      	beq.n	8012d06 <_ZN20HardwareMJPEGDecoder6getU32Em+0x5c>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012cc0:	683a      	ldr	r2, [r7, #0]
 8012cc2:	1ad3      	subs	r3, r2, r3
 8012cc4:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cca:	68bb      	ldr	r3, [r7, #8]
 8012ccc:	4413      	add	r3, r2
 8012cce:	781b      	ldrb	r3, [r3, #0]
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	3301      	adds	r3, #1
 8012cda:	4413      	add	r3, r2
 8012cdc:	781b      	ldrb	r3, [r3, #0]
 8012cde:	021b      	lsls	r3, r3, #8
 8012ce0:	ea41 0203 	orr.w	r2, r1, r3
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012ce8:	68bb      	ldr	r3, [r7, #8]
 8012cea:	3302      	adds	r3, #2
 8012cec:	440b      	add	r3, r1
 8012cee:	781b      	ldrb	r3, [r3, #0]
 8012cf0:	041b      	lsls	r3, r3, #16
 8012cf2:	431a      	orrs	r2, r3
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8012cf8:	68bb      	ldr	r3, [r7, #8]
 8012cfa:	3303      	adds	r3, #3
 8012cfc:	440b      	add	r3, r1
 8012cfe:	781b      	ldrb	r3, [r3, #0]
 8012d00:	061b      	lsls	r3, r3, #24
 8012d02:	4313      	orrs	r3, r2
 8012d04:	e016      	b.n	8012d34 <_ZN20HardwareMJPEGDecoder6getU32Em+0x8a>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	4413      	add	r3, r2
 8012d0e:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	781b      	ldrb	r3, [r3, #0]
 8012d14:	461a      	mov	r2, r3
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	3301      	adds	r3, #1
 8012d1a:	781b      	ldrb	r3, [r3, #0]
 8012d1c:	021b      	lsls	r3, r3, #8
 8012d1e:	431a      	orrs	r2, r3
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	3302      	adds	r3, #2
 8012d24:	781b      	ldrb	r3, [r3, #0]
 8012d26:	041b      	lsls	r3, r3, #16
 8012d28:	431a      	orrs	r2, r3
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	3303      	adds	r3, #3
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	061b      	lsls	r3, r3, #24
 8012d32:	4313      	orrs	r3, r2
    }
}
 8012d34:	4618      	mov	r0, r3
 8012d36:	3714      	adds	r7, #20
 8012d38:	46bd      	mov	sp, r7
 8012d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d3e:	4770      	bx	lr

08012d40 <_ZN20HardwareMJPEGDecoder6getU16Em>:

inline uint32_t HardwareMJPEGDecoder::getU16(const uint32_t offset)
{
 8012d40:	b480      	push	{r7}
 8012d42:	b085      	sub	sp, #20
 8012d44:	af00      	add	r7, sp, #0
 8012d46:	6078      	str	r0, [r7, #4]
 8012d48:	6039      	str	r1, [r7, #0]
    if (reader != 0)
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d013      	beq.n	8012d7a <_ZN20HardwareMJPEGDecoder6getU16Em+0x3a>
    {
        // Assuming data is in buffer!
        const uint32_t index = offset - aviBufferStartOffset;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012d56:	683a      	ldr	r2, [r7, #0]
 8012d58:	1ad3      	subs	r3, r2, r3
 8012d5a:	60bb      	str	r3, [r7, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d60:	68bb      	ldr	r3, [r7, #8]
 8012d62:	4413      	add	r3, r2
 8012d64:	781b      	ldrb	r3, [r3, #0]
 8012d66:	4619      	mov	r1, r3
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	3301      	adds	r3, #1
 8012d70:	4413      	add	r3, r2
 8012d72:	781b      	ldrb	r3, [r3, #0]
 8012d74:	021b      	lsls	r3, r3, #8
 8012d76:	430b      	orrs	r3, r1
 8012d78:	e00c      	b.n	8012d94 <_ZN20HardwareMJPEGDecoder6getU16Em+0x54>
    }
    else
    {
        const uint8_t* const d = movieData + offset;
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	4413      	add	r3, r2
 8012d82:	60fb      	str	r3, [r7, #12]
        return d[0] | (d[1] << 8);
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	781b      	ldrb	r3, [r3, #0]
 8012d88:	461a      	mov	r2, r3
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	3301      	adds	r3, #1
 8012d8e:	781b      	ldrb	r3, [r3, #0]
 8012d90:	021b      	lsls	r3, r3, #8
 8012d92:	4313      	orrs	r3, r2
    }
}
 8012d94:	4618      	mov	r0, r3
 8012d96:	3714      	adds	r7, #20
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr

08012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>:

const uint8_t* HardwareMJPEGDecoder::readData(uint32_t offset, uint32_t length)
{
 8012da0:	b580      	push	{r7, lr}
 8012da2:	b084      	sub	sp, #16
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	60f8      	str	r0, [r7, #12]
 8012da8:	60b9      	str	r1, [r7, #8]
 8012daa:	607a      	str	r2, [r7, #4]
    if (reader != 0)
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d033      	beq.n	8012e1c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x7c>
    {
        if (length > aviBufferLength)
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012db8:	687a      	ldr	r2, [r7, #4]
 8012dba:	429a      	cmp	r2, r3
 8012dbc:	d909      	bls.n	8012dd2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x32>
        {
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	2209      	movs	r2, #9
 8012dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            assert(!"Buffer to small");
 8012dc6:	4b19      	ldr	r3, [pc, #100]	; (8012e2c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x8c>)
 8012dc8:	4a19      	ldr	r2, [pc, #100]	; (8012e30 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x90>)
 8012dca:	21ad      	movs	r1, #173	; 0xad
 8012dcc:	4819      	ldr	r0, [pc, #100]	; (8012e34 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x94>)
 8012dce:	f016 ffbf 	bl	8029d50 <__assert_func>
        }

        reader->seek(offset);
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	330c      	adds	r3, #12
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	68b9      	ldr	r1, [r7, #8]
 8012de2:	4610      	mov	r0, r2
 8012de4:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	3310      	adds	r3, #16
 8012df2:	681b      	ldr	r3, [r3, #0]
 8012df4:	68fa      	ldr	r2, [r7, #12]
 8012df6:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8012df8:	687a      	ldr	r2, [r7, #4]
 8012dfa:	4798      	blx	r3
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	f083 0301 	eor.w	r3, r3, #1
 8012e02:	b2db      	uxtb	r3, r3
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d003      	beq.n	8012e10 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x70>
        {
            lastError = AVI_ERROR_EOF_REACHED;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	220d      	movs	r2, #13
 8012e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }

        aviBufferStartOffset = offset;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	68ba      	ldr	r2, [r7, #8]
 8012e14:	63da      	str	r2, [r3, #60]	; 0x3c
        return aviBuffer;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e1a:	e003      	b.n	8012e24 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x84>
    }

    return movieData + offset;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e20:	68bb      	ldr	r3, [r7, #8]
 8012e22:	4413      	add	r3, r2
}
 8012e24:	4618      	mov	r0, r3
 8012e26:	3710      	adds	r7, #16
 8012e28:	46bd      	mov	sp, r7
 8012e2a:	bd80      	pop	{r7, pc}
 8012e2c:	0802dc08 	.word	0x0802dc08
 8012e30:	0802dc1c 	.word	0x0802dc1c
 8012e34:	0802dc60 	.word	0x0802dc60

08012e38 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:

bool HardwareMJPEGDecoder::decodeNextFrame(uint8_t* buffer, uint16_t buffer_width, uint16_t buffer_height, uint32_t buffer_stride)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b08e      	sub	sp, #56	; 0x38
 8012e3c:	af04      	add	r7, sp, #16
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	4611      	mov	r1, r2
 8012e44:	461a      	mov	r2, r3
 8012e46:	460b      	mov	r3, r1
 8012e48:	80fb      	strh	r3, [r7, #6]
 8012e4a:	4613      	mov	r3, r2
 8012e4c:	80bb      	strh	r3, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	695b      	ldr	r3, [r3, #20]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d105      	bne.n	8012e62 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x2a>
 8012e56:	4b4e      	ldr	r3, [pc, #312]	; (8012f90 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
 8012e58:	4a4e      	ldr	r2, [pc, #312]	; (8012f94 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
 8012e5a:	21bf      	movs	r1, #191	; 0xbf
 8012e5c:	484e      	ldr	r0, [pc, #312]	; (8012f98 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
 8012e5e:	f016 ff77 	bl	8029d50 <__assert_func>

    //find next frame and decode it
    readData(currentMovieOffset, 8);
 8012e62:	68fb      	ldr	r3, [r7, #12]
 8012e64:	699b      	ldr	r3, [r3, #24]
 8012e66:	2208      	movs	r2, #8
 8012e68:	4619      	mov	r1, r3
 8012e6a:	68f8      	ldr	r0, [r7, #12]
 8012e6c:	f7ff ff98 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	699b      	ldr	r3, [r3, #24]
 8012e74:	4619      	mov	r1, r3
 8012e76:	68f8      	ldr	r0, [r7, #12]
 8012e78:	f7ff ff62 	bl	8012d40 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8012e7c:	6238      	str	r0, [r7, #32]
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	699b      	ldr	r3, [r3, #24]
 8012e82:	3302      	adds	r3, #2
 8012e84:	4619      	mov	r1, r3
 8012e86:	68f8      	ldr	r0, [r7, #12]
 8012e88:	f7ff ff5a 	bl	8012d40 <_ZN20HardwareMJPEGDecoder6getU16Em>
 8012e8c:	61f8      	str	r0, [r7, #28]
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8012e8e:	68fb      	ldr	r3, [r7, #12]
 8012e90:	699b      	ldr	r3, [r3, #24]
 8012e92:	3304      	adds	r3, #4
 8012e94:	4619      	mov	r1, r3
 8012e96:	68f8      	ldr	r0, [r7, #12]
 8012e98:	f7ff ff07 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012e9c:	61b8      	str	r0, [r7, #24]

    const uint16_t STREAM0 = 0x3030;
 8012e9e:	f243 0330 	movw	r3, #12336	; 0x3030
 8012ea2:	82fb      	strh	r3, [r7, #22]
    const uint16_t TYPEDC  = 0x6364;
 8012ea4:	f246 3364 	movw	r3, #25444	; 0x6364
 8012ea8:	82bb      	strh	r3, [r7, #20]

    bool isCurrentFrameLast;
    //play frame if we have it all
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	699a      	ldr	r2, [r3, #24]
 8012eae:	69bb      	ldr	r3, [r7, #24]
 8012eb0:	4413      	add	r3, r2
 8012eb2:	f103 0208 	add.w	r2, r3, #8
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eba:	429a      	cmp	r2, r3
 8012ebc:	d255      	bcs.n	8012f6a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x132>
    {
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8012ebe:	6a3b      	ldr	r3, [r7, #32]
 8012ec0:	f243 0230 	movw	r2, #12336	; 0x3030
 8012ec4:	4293      	cmp	r3, r2
 8012ec6:	d126      	bne.n	8012f16 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8012ec8:	69fb      	ldr	r3, [r7, #28]
 8012eca:	f246 3264 	movw	r2, #25444	; 0x6364
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d121      	bne.n	8012f16 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
 8012ed2:	69bb      	ldr	r3, [r7, #24]
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d01e      	beq.n	8012f16 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xde>
        {
            currentMovieOffset += 8;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	699b      	ldr	r3, [r3, #24]
 8012edc:	f103 0208 	add.w	r2, r3, #8
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	619a      	str	r2, [r3, #24]
            //decode frame
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	699b      	ldr	r3, [r3, #24]
 8012ee8:	69ba      	ldr	r2, [r7, #24]
 8012eea:	4619      	mov	r1, r3
 8012eec:	68f8      	ldr	r0, [r7, #12]
 8012eee:	f7ff ff57 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8012ef2:	6138      	str	r0, [r7, #16]
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8012ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ef6:	9302      	str	r3, [sp, #8]
 8012ef8:	88bb      	ldrh	r3, [r7, #4]
 8012efa:	9301      	str	r3, [sp, #4]
 8012efc:	88fb      	ldrh	r3, [r7, #6]
 8012efe:	9300      	str	r3, [sp, #0]
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	69ba      	ldr	r2, [r7, #24]
 8012f04:	6939      	ldr	r1, [r7, #16]
 8012f06:	68f8      	ldr	r0, [r7, #12]
 8012f08:	f000 fa8e 	bl	8013428 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	695b      	ldr	r3, [r3, #20]
 8012f10:	1c5a      	adds	r2, r3, #1
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	615a      	str	r2, [r3, #20]
        }

        isCurrentFrameLast = false;
 8012f16:	2300      	movs	r3, #0
 8012f18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        // Advance to next frame
        currentMovieOffset += chunkSize;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	699a      	ldr	r2, [r3, #24]
 8012f20:	69bb      	ldr	r3, [r7, #24]
 8012f22:	441a      	add	r2, r3
 8012f24:	68fb      	ldr	r3, [r7, #12]
 8012f26:	619a      	str	r2, [r3, #24]
        if (chunkSize == 0) // Empty frame - Skip
 8012f28:	69bb      	ldr	r3, [r7, #24]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d105      	bne.n	8012f3a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x102>
        {
          currentMovieOffset += 8;
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	699b      	ldr	r3, [r3, #24]
 8012f32:	f103 0208 	add.w	r2, r3, #8
 8012f36:	68fb      	ldr	r3, [r7, #12]
 8012f38:	619a      	str	r2, [r3, #24]
        }
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	699b      	ldr	r3, [r3, #24]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	f023 0201 	bic.w	r2, r3, #1
 8012f44:	68fb      	ldr	r3, [r7, #12]
 8012f46:	619a      	str	r2, [r3, #24]

        if (currentMovieOffset == lastFrameEnd)
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	699a      	ldr	r2, [r3, #24]
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f50:	429a      	cmp	r2, r3
 8012f52:	d114      	bne.n	8012f7e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        {
            frameNumber = 1;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	2201      	movs	r2, #1
 8012f58:	615a      	str	r2, [r3, #20]
            currentMovieOffset = firstFrameOffset; //start over
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	6a1a      	ldr	r2, [r3, #32]
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	619a      	str	r2, [r3, #24]
            isCurrentFrameLast = true;
 8012f62:	2301      	movs	r3, #1
 8012f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f68:	e009      	b.n	8012f7e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        }
    }
    else
    {
        frameNumber = 1;
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2201      	movs	r2, #1
 8012f6e:	615a      	str	r2, [r3, #20]
        currentMovieOffset = firstFrameOffset; //start over
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	6a1a      	ldr	r2, [r3, #32]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	619a      	str	r2, [r3, #24]
        isCurrentFrameLast = true;
 8012f78:	2301      	movs	r3, #1
 8012f7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    return !isCurrentFrameLast;
 8012f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f82:	f083 0301 	eor.w	r3, r3, #1
 8012f86:	b2db      	uxtb	r3, r3
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3728      	adds	r7, #40	; 0x28
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}
 8012f90:	0802dc98 	.word	0x0802dc98
 8012f94:	0802dce4 	.word	0x0802dce4
 8012f98:	0802dc60 	.word	0x0802dc60

08012f9c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:

bool HardwareMJPEGDecoder::gotoNextFrame()
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b086      	sub	sp, #24
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	695b      	ldr	r3, [r3, #20]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d105      	bne.n	8012fb8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x1c>
 8012fac:	4b37      	ldr	r3, [pc, #220]	; (801308c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf0>)
 8012fae:	4a38      	ldr	r2, [pc, #224]	; (8013090 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf4>)
 8012fb0:	21f3      	movs	r1, #243	; 0xf3
 8012fb2:	4838      	ldr	r0, [pc, #224]	; (8013094 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>)
 8012fb4:	f016 fecc 	bl	8029d50 <__assert_func>

    readData(currentMovieOffset, 8);
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	699b      	ldr	r3, [r3, #24]
 8012fbc:	2208      	movs	r2, #8
 8012fbe:	4619      	mov	r1, r3
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f7ff feed 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	699b      	ldr	r3, [r3, #24]
 8012fca:	3304      	adds	r3, #4
 8012fcc:	4619      	mov	r1, r3
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f7ff fe6b 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 8012fd4:	6178      	str	r0, [r7, #20]

    //increment until next video frame
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	699a      	ldr	r2, [r3, #24]
 8012fda:	697b      	ldr	r3, [r7, #20]
 8012fdc:	4413      	add	r3, r2
 8012fde:	f103 0208 	add.w	r2, r3, #8
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d243      	bcs.n	8013072 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xd6>
    {
        //increment one frame
        currentMovieOffset += chunkSize + 8;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	699a      	ldr	r2, [r3, #24]
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	4413      	add	r3, r2
 8012ff2:	f103 0208 	add.w	r2, r3, #8
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	619a      	str	r2, [r3, #24]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	699b      	ldr	r3, [r3, #24]
 8012ffe:	3301      	adds	r3, #1
 8013000:	f023 0201 	bic.w	r2, r3, #1
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	619a      	str	r2, [r3, #24]
        frameNumber++;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	695b      	ldr	r3, [r3, #20]
 801300c:	1c5a      	adds	r2, r3, #1
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	615a      	str	r2, [r3, #20]

        //next chunk
        readData(currentMovieOffset, 8);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	699b      	ldr	r3, [r3, #24]
 8013016:	2208      	movs	r2, #8
 8013018:	4619      	mov	r1, r3
 801301a:	6878      	ldr	r0, [r7, #4]
 801301c:	f7ff fec0 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        //check it is a video frame
        uint32_t streamNo  = getU16(currentMovieOffset);
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	699b      	ldr	r3, [r3, #24]
 8013024:	4619      	mov	r1, r3
 8013026:	6878      	ldr	r0, [r7, #4]
 8013028:	f7ff fe8a 	bl	8012d40 <_ZN20HardwareMJPEGDecoder6getU16Em>
 801302c:	6138      	str	r0, [r7, #16]
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	699b      	ldr	r3, [r3, #24]
 8013032:	3302      	adds	r3, #2
 8013034:	4619      	mov	r1, r3
 8013036:	6878      	ldr	r0, [r7, #4]
 8013038:	f7ff fe82 	bl	8012d40 <_ZN20HardwareMJPEGDecoder6getU16Em>
 801303c:	60f8      	str	r0, [r7, #12]
        chunkSize = getU32(currentMovieOffset + 4);
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	699b      	ldr	r3, [r3, #24]
 8013042:	3304      	adds	r3, #4
 8013044:	4619      	mov	r1, r3
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f7ff fe2f 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 801304c:	6178      	str	r0, [r7, #20]
        const uint16_t STREAM0 = 0x3030;
 801304e:	f243 0330 	movw	r3, #12336	; 0x3030
 8013052:	817b      	strh	r3, [r7, #10]
        const uint16_t TYPEDC  = 0x6364;
 8013054:	f246 3364 	movw	r3, #25444	; 0x6364
 8013058:	813b      	strh	r3, [r7, #8]

        if (streamNo == STREAM0 && chunkType == TYPEDC)
 801305a:	693b      	ldr	r3, [r7, #16]
 801305c:	f243 0230 	movw	r2, #12336	; 0x3030
 8013060:	4293      	cmp	r3, r2
 8013062:	d1b8      	bne.n	8012fd6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	f246 3264 	movw	r2, #25444	; 0x6364
 801306a:	4293      	cmp	r3, r2
 801306c:	d1b3      	bne.n	8012fd6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x3a>
        {
            // Found next frame
            return true;
 801306e:	2301      	movs	r3, #1
 8013070:	e007      	b.n	8013082 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xe6>
        }
    }

    //skip back to first frame
    frameNumber = 1;
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	2201      	movs	r2, #1
 8013076:	615a      	str	r2, [r3, #20]
    currentMovieOffset = firstFrameOffset; //start over
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	6a1a      	ldr	r2, [r3, #32]
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	619a      	str	r2, [r3, #24]
    return false;
 8013080:	2300      	movs	r3, #0
}
 8013082:	4618      	mov	r0, r3
 8013084:	3718      	adds	r7, #24
 8013086:	46bd      	mov	sp, r7
 8013088:	bd80      	pop	{r7, pc}
 801308a:	bf00      	nop
 801308c:	0802dc98 	.word	0x0802dc98
 8013090:	0802dd40 	.word	0x0802dd40
 8013094:	0802dc60 	.word	0x0802dc60

08013098 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:

void HardwareMJPEGDecoder::setVideoData(const uint8_t* movie, const uint32_t length)
{
 8013098:	b580      	push	{r7, lr}
 801309a:	b084      	sub	sp, #16
 801309c:	af00      	add	r7, sp, #0
 801309e:	60f8      	str	r0, [r7, #12]
 80130a0:	60b9      	str	r1, [r7, #8]
 80130a2:	607a      	str	r2, [r7, #4]
    movieData = movie;
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	68ba      	ldr	r2, [r7, #8]
 80130a8:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = length;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	687a      	ldr	r2, [r7, #4]
 80130ae:	629a      	str	r2, [r3, #40]	; 0x28
    reader = 0; //not using reader
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	2200      	movs	r2, #0
 80130b4:	631a      	str	r2, [r3, #48]	; 0x30

    readVideoHeader();
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f000 f834 	bl	8013124 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 80130bc:	bf00      	nop
 80130be:	3710      	adds	r7, #16
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}

080130c4 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:

void HardwareMJPEGDecoder::setVideoData(touchgfx::VideoDataReader& reader)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
 80130ca:	6078      	str	r0, [r7, #4]
 80130cc:	6039      	str	r1, [r7, #0]
    this->reader = &reader;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	683a      	ldr	r2, [r7, #0]
 80130d2:	631a      	str	r2, [r3, #48]	; 0x30
    movieData = 0;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	2200      	movs	r2, #0
 80130d8:	62da      	str	r2, [r3, #44]	; 0x2c
    movieLength = reader.getDataLength();
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	3308      	adds	r3, #8
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	6838      	ldr	r0, [r7, #0]
 80130e4:	4798      	blx	r3
 80130e6:	4602      	mov	r2, r0
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	629a      	str	r2, [r3, #40]	; 0x28

    readVideoHeader();
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	f000 f819 	bl	8013124 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
}
 80130f2:	bf00      	nop
 80130f4:	3708      	adds	r7, #8
 80130f6:	46bd      	mov	sp, r7
 80130f8:	bd80      	pop	{r7, pc}

080130fa <_ZN20HardwareMJPEGDecoder8hasVideoEv>:

bool HardwareMJPEGDecoder::hasVideo()
{
 80130fa:	b480      	push	{r7}
 80130fc:	b083      	sub	sp, #12
 80130fe:	af00      	add	r7, sp, #0
 8013100:	6078      	str	r0, [r7, #4]
    return (reader != 0) || (movieData != 0);
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013106:	2b00      	cmp	r3, #0
 8013108:	d103      	bne.n	8013112 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x18>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801310e:	2b00      	cmp	r3, #0
 8013110:	d001      	beq.n	8013116 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1c>
 8013112:	2301      	movs	r3, #1
 8013114:	e000      	b.n	8013118 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x1e>
 8013116:	2300      	movs	r3, #0
}
 8013118:	4618      	mov	r0, r3
 801311a:	370c      	adds	r7, #12
 801311c:	46bd      	mov	sp, r7
 801311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013122:	4770      	bx	lr

08013124 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:

void HardwareMJPEGDecoder::readVideoHeader()
{
 8013124:	b580      	push	{r7, lr}
 8013126:	b08a      	sub	sp, #40	; 0x28
 8013128:	af00      	add	r7, sp, #0
 801312a:	6078      	str	r0, [r7, #4]
    // Start from the start
    currentMovieOffset = 0;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	619a      	str	r2, [r3, #24]
    lastError = AVI_NO_ERROR;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2200      	movs	r2, #0
 8013136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    // Make header available in buffer
    readData(0, 72);
 801313a:	2248      	movs	r2, #72	; 0x48
 801313c:	2100      	movs	r1, #0
 801313e:	6878      	ldr	r0, [r7, #4]
 8013140:	f7ff fe2e 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    // Decode the movie header to find first frame
    // Must be RIFF file
    if (compare(currentMovieOffset, "RIFF", 4))
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6999      	ldr	r1, [r3, #24]
 8013148:	2304      	movs	r3, #4
 801314a:	4aa5      	ldr	r2, [pc, #660]	; (80133e0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2bc>)
 801314c:	6878      	ldr	r0, [r7, #4]
 801314e:	f7ff fd89 	bl	8012c64 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8013152:	4603      	mov	r3, r0
 8013154:	2b00      	cmp	r3, #0
 8013156:	bf14      	ite	ne
 8013158:	2301      	movne	r3, #1
 801315a:	2300      	moveq	r3, #0
 801315c:	b2db      	uxtb	r3, r3
 801315e:	2b00      	cmp	r3, #0
 8013160:	d00a      	beq.n	8013178 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x54>
    {
        lastError = AVI_ERROR_NOT_RIFF;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	2203      	movs	r2, #3
 8013166:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"RIFF header not found");
 801316a:	4b9e      	ldr	r3, [pc, #632]	; (80133e4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c0>)
 801316c:	4a9e      	ldr	r2, [pc, #632]	; (80133e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 801316e:	f240 113b 	movw	r1, #315	; 0x13b
 8013172:	489e      	ldr	r0, [pc, #632]	; (80133ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 8013174:	f016 fdec 	bl	8029d50 <__assert_func>
    }

    //skip fourcc and length
    currentMovieOffset += 8;
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	699b      	ldr	r3, [r3, #24]
 801317c:	f103 0208 	add.w	r2, r3, #8
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	6999      	ldr	r1, [r3, #24]
 8013188:	2304      	movs	r3, #4
 801318a:	4a99      	ldr	r2, [pc, #612]	; (80133f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2cc>)
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f7ff fd69 	bl	8012c64 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8013192:	4603      	mov	r3, r0
 8013194:	2b00      	cmp	r3, #0
 8013196:	bf14      	ite	ne
 8013198:	2301      	movne	r3, #1
 801319a:	2300      	moveq	r3, #0
 801319c:	b2db      	uxtb	r3, r3
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00a      	beq.n	80131b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x94>
    {
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2204      	movs	r2, #4
 80131a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI header not found");
 80131aa:	4b92      	ldr	r3, [pc, #584]	; (80133f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d0>)
 80131ac:	4a8e      	ldr	r2, [pc, #568]	; (80133e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80131ae:	f240 1143 	movw	r1, #323	; 0x143
 80131b2:	488e      	ldr	r0, [pc, #568]	; (80133ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80131b4:	f016 fdcc 	bl	8029d50 <__assert_func>
    }

    currentMovieOffset += 4;
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	699b      	ldr	r3, [r3, #24]
 80131bc:	1d1a      	adds	r2, r3, #4
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	619a      	str	r2, [r3, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	6999      	ldr	r1, [r3, #24]
 80131c6:	2304      	movs	r3, #4
 80131c8:	4a8b      	ldr	r2, [pc, #556]	; (80133f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d4>)
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7ff fd4a 	bl	8012c64 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80131d0:	4603      	mov	r3, r0
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	bf14      	ite	ne
 80131d6:	2301      	movne	r3, #1
 80131d8:	2300      	moveq	r3, #0
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d00a      	beq.n	80131f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd2>
    {
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80131e0:	687b      	ldr	r3, [r7, #4]
 80131e2:	2205      	movs	r2, #5
 80131e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        assert(!"AVI LIST not found");
 80131e8:	4b84      	ldr	r3, [pc, #528]	; (80133fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2d8>)
 80131ea:	4a7f      	ldr	r2, [pc, #508]	; (80133e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 80131ec:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 80131f0:	487e      	ldr	r0, [pc, #504]	; (80133ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 80131f2:	f016 fdad 	bl	8029d50 <__assert_func>
    }

    //save AVI List info
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	699b      	ldr	r3, [r3, #24]
 80131fa:	3304      	adds	r3, #4
 80131fc:	4619      	mov	r1, r3
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f7ff fd53 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 8013204:	61f8      	str	r0, [r7, #28]
    const uint32_t aviListOffset = currentMovieOffset;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	699b      	ldr	r3, [r3, #24]
 801320a:	61bb      	str	r3, [r7, #24]
    assert(aviListSize);
 801320c:	69fb      	ldr	r3, [r7, #28]
 801320e:	2b00      	cmp	r3, #0
 8013210:	d106      	bne.n	8013220 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xfc>
 8013212:	4b7b      	ldr	r3, [pc, #492]	; (8013400 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2dc>)
 8013214:	4a74      	ldr	r2, [pc, #464]	; (80133e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c4>)
 8013216:	f44f 71a8 	mov.w	r1, #336	; 0x150
 801321a:	4874      	ldr	r0, [pc, #464]	; (80133ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2c8>)
 801321c:	f016 fd98 	bl	8029d50 <__assert_func>

    //look into header to find frame rate
    bool foundFrame = true;
 8013220:	2301      	movs	r3, #1
 8013222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint32_t offset =  currentMovieOffset + 8;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	699b      	ldr	r3, [r3, #24]
 801322a:	3308      	adds	r3, #8
 801322c:	617b      	str	r3, [r7, #20]
    if (compare(offset, "hdrl", 4))
 801322e:	2304      	movs	r3, #4
 8013230:	4a74      	ldr	r2, [pc, #464]	; (8013404 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e0>)
 8013232:	6979      	ldr	r1, [r7, #20]
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f7ff fd15 	bl	8012c64 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 801323a:	4603      	mov	r3, r0
 801323c:	2b00      	cmp	r3, #0
 801323e:	bf14      	ite	ne
 8013240:	2301      	movne	r3, #1
 8013242:	2300      	moveq	r3, #0
 8013244:	b2db      	uxtb	r3, r3
 8013246:	2b00      	cmp	r3, #0
 8013248:	d006      	beq.n	8013258 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x134>
    {
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2206      	movs	r2, #6
 801324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8013252:	2300      	movs	r3, #0
 8013254:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    offset += 4;
 8013258:	697b      	ldr	r3, [r7, #20]
 801325a:	3304      	adds	r3, #4
 801325c:	617b      	str	r3, [r7, #20]
    if (compare(offset, "avih", 4))
 801325e:	2304      	movs	r3, #4
 8013260:	4a69      	ldr	r2, [pc, #420]	; (8013408 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e4>)
 8013262:	6979      	ldr	r1, [r7, #20]
 8013264:	6878      	ldr	r0, [r7, #4]
 8013266:	f7ff fcfd 	bl	8012c64 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 801326a:	4603      	mov	r3, r0
 801326c:	2b00      	cmp	r3, #0
 801326e:	bf14      	ite	ne
 8013270:	2301      	movne	r3, #1
 8013272:	2300      	moveq	r3, #0
 8013274:	b2db      	uxtb	r3, r3
 8013276:	2b00      	cmp	r3, #0
 8013278:	d006      	beq.n	8013288 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x164>
    {
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	2207      	movs	r2, #7
 801327e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        foundFrame = false;
 8013282:	2300      	movs	r3, #0
 8013284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if (foundFrame)
 8013288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801328c:	2b00      	cmp	r3, #0
 801328e:	d028      	beq.n	80132e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1be>
    {
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	3308      	adds	r3, #8
 8013294:	617b      	str	r3, [r7, #20]
        videoInfo.ms_between_frames = getU32(offset)/1000;
 8013296:	6979      	ldr	r1, [r7, #20]
 8013298:	6878      	ldr	r0, [r7, #4]
 801329a:	f7ff fd06 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 801329e:	4603      	mov	r3, r0
 80132a0:	4a5a      	ldr	r2, [pc, #360]	; (801340c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2e8>)
 80132a2:	fba2 2303 	umull	r2, r3, r2, r3
 80132a6:	099a      	lsrs	r2, r3, #6
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	605a      	str	r2, [r3, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 80132ac:	697b      	ldr	r3, [r7, #20]
 80132ae:	3310      	adds	r3, #16
 80132b0:	4619      	mov	r1, r3
 80132b2:	6878      	ldr	r0, [r7, #4]
 80132b4:	f7ff fcf9 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 80132b8:	4602      	mov	r2, r0
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	609a      	str	r2, [r3, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80132be:	697b      	ldr	r3, [r7, #20]
 80132c0:	3320      	adds	r3, #32
 80132c2:	4619      	mov	r1, r3
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f7ff fcf0 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 80132ca:	4602      	mov	r2, r0
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	60da      	str	r2, [r3, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80132d0:	697b      	ldr	r3, [r7, #20]
 80132d2:	3324      	adds	r3, #36	; 0x24
 80132d4:	4619      	mov	r1, r3
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7ff fce7 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 80132dc:	4602      	mov	r2, r0
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	611a      	str	r2, [r3, #16]
    }
    //skip rest of AVI header, start from end of AVI List

    //look for list with 'movi' header
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80132e2:	69ba      	ldr	r2, [r7, #24]
 80132e4:	69fb      	ldr	r3, [r7, #28]
 80132e6:	4413      	add	r3, r2
 80132e8:	3308      	adds	r3, #8
 80132ea:	623b      	str	r3, [r7, #32]
    readData(listOffset, 12);
 80132ec:	220c      	movs	r2, #12
 80132ee:	6a39      	ldr	r1, [r7, #32]
 80132f0:	6878      	ldr	r0, [r7, #4]
 80132f2:	f7ff fd55 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80132f6:	6a3b      	ldr	r3, [r7, #32]
 80132f8:	f103 0108 	add.w	r1, r3, #8
 80132fc:	2304      	movs	r3, #4
 80132fe:	4a44      	ldr	r2, [pc, #272]	; (8013410 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2ec>)
 8013300:	6878      	ldr	r0, [r7, #4]
 8013302:	f7ff fcaf 	bl	8012c64 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d00b      	beq.n	8013324 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013312:	2b00      	cmp	r3, #0
 8013314:	d106      	bne.n	8013324 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801331a:	6a3a      	ldr	r2, [r7, #32]
 801331c:	429a      	cmp	r2, r3
 801331e:	d201      	bcs.n	8013324 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x200>
 8013320:	2301      	movs	r3, #1
 8013322:	e000      	b.n	8013326 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x202>
 8013324:	2300      	movs	r3, #0
 8013326:	2b00      	cmp	r3, #0
 8013328:	d012      	beq.n	8013350 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x22c>
    {
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 801332a:	6a3b      	ldr	r3, [r7, #32]
 801332c:	3304      	adds	r3, #4
 801332e:	4619      	mov	r1, r3
 8013330:	6878      	ldr	r0, [r7, #4]
 8013332:	f7ff fcba 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 8013336:	4603      	mov	r3, r0
 8013338:	3308      	adds	r3, #8
 801333a:	60fb      	str	r3, [r7, #12]
        listOffset += listSize;
 801333c:	6a3a      	ldr	r2, [r7, #32]
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	4413      	add	r3, r2
 8013342:	623b      	str	r3, [r7, #32]
        readData(listOffset, 12);
 8013344:	220c      	movs	r2, #12
 8013346:	6a39      	ldr	r1, [r7, #32]
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f7ff fd29 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 801334e:	e7d2      	b.n	80132f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d2>
    }

    if (lastError != AVI_NO_ERROR)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013356:	2b00      	cmp	r3, #0
 8013358:	d004      	beq.n	8013364 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x240>
    {
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	220a      	movs	r2, #10
 801335e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8013362:	e05e      	b.n	8013422 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
    }

    //save first frame and end of last frame
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
 8013364:	6a3b      	ldr	r3, [r7, #32]
 8013366:	f103 020c 	add.w	r2, r3, #12
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	619a      	str	r2, [r3, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 801336e:	6a3b      	ldr	r3, [r7, #32]
 8013370:	3304      	adds	r3, #4
 8013372:	4619      	mov	r1, r3
 8013374:	6878      	ldr	r0, [r7, #4]
 8013376:	f7ff fc98 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 801337a:	4602      	mov	r2, r0
 801337c:	6a3b      	ldr	r3, [r7, #32]
 801337e:	4413      	add	r3, r2
 8013380:	f103 0208 	add.w	r2, r3, #8
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	625a      	str	r2, [r3, #36]	; 0x24

    //find idx
    const uint32_t listSize = getU32(listOffset+4)+8;
 8013388:	6a3b      	ldr	r3, [r7, #32]
 801338a:	3304      	adds	r3, #4
 801338c:	4619      	mov	r1, r3
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f7ff fc8b 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 8013394:	4603      	mov	r3, r0
 8013396:	3308      	adds	r3, #8
 8013398:	613b      	str	r3, [r7, #16]
    listOffset += listSize;
 801339a:	6a3a      	ldr	r2, [r7, #32]
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	4413      	add	r3, r2
 80133a0:	623b      	str	r3, [r7, #32]
    readData(listOffset, 4);
 80133a2:	2204      	movs	r2, #4
 80133a4:	6a39      	ldr	r1, [r7, #32]
 80133a6:	6878      	ldr	r0, [r7, #4]
 80133a8:	f7ff fcfa 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80133ac:	2304      	movs	r3, #4
 80133ae:	4a19      	ldr	r2, [pc, #100]	; (8013414 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f0>)
 80133b0:	6a39      	ldr	r1, [r7, #32]
 80133b2:	6878      	ldr	r0, [r7, #4]
 80133b4:	f7ff fc56 	bl	8012c64 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80133b8:	4603      	mov	r3, r0
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	bf0c      	ite	eq
 80133be:	2301      	moveq	r3, #1
 80133c0:	2300      	movne	r3, #0
 80133c2:	b2db      	uxtb	r3, r3
 80133c4:	2b00      	cmp	r3, #0
 80133c6:	d027      	beq.n	8013418 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2f4>
    {
        indexOffset = listOffset;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6a3a      	ldr	r2, [r7, #32]
 80133cc:	61da      	str	r2, [r3, #28]
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
        return;
    }

    //start on first frame
    frameNumber = 1; //next frame number is 1
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	2201      	movs	r2, #1
 80133d2:	615a      	str	r2, [r3, #20]
    firstFrameOffset = currentMovieOffset;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	699a      	ldr	r2, [r3, #24]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	621a      	str	r2, [r3, #32]
 80133dc:	e021      	b.n	8013422 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2fe>
 80133de:	bf00      	nop
 80133e0:	0802dd74 	.word	0x0802dd74
 80133e4:	0802dd7c 	.word	0x0802dd7c
 80133e8:	0802dd98 	.word	0x0802dd98
 80133ec:	0802dc60 	.word	0x0802dc60
 80133f0:	0802ddc8 	.word	0x0802ddc8
 80133f4:	0802ddd0 	.word	0x0802ddd0
 80133f8:	0802dde8 	.word	0x0802dde8
 80133fc:	0802ddf0 	.word	0x0802ddf0
 8013400:	0802de08 	.word	0x0802de08
 8013404:	0802de14 	.word	0x0802de14
 8013408:	0802de1c 	.word	0x0802de1c
 801340c:	10624dd3 	.word	0x10624dd3
 8013410:	0802de24 	.word	0x0802de24
 8013414:	0802de2c 	.word	0x0802de2c
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	220b      	movs	r2, #11
 801341c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return;
 8013420:	bf00      	nop
}
 8013422:	3728      	adds	r7, #40	; 0x28
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}

08013428 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:

void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	60f8      	str	r0, [r7, #12]
 8013430:	60b9      	str	r1, [r7, #8]
 8013432:	607a      	str	r2, [r7, #4]
 8013434:	603b      	str	r3, [r7, #0]
    if (length == 0)
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d04c      	beq.n	80134d6 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xae>
    {
        return;
    }

    if (outputBuffer) //only decode if buffers are assigned.
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d04a      	beq.n	80134d8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb0>
    {
      // Update JPEG conversion parameters
      JPEG_ConvertorParams.bytes_pr_pixel = 4;
 8013442:	4b27      	ldr	r3, [pc, #156]	; (80134e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8013444:	2204      	movs	r2, #4
 8013446:	611a      	str	r2, [r3, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	68db      	ldr	r3, [r3, #12]
 801344c:	4a24      	ldr	r2, [pc, #144]	; (80134e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 801344e:	6013      	str	r3, [r2, #0]
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8013450:	4b23      	ldr	r3, [pc, #140]	; (80134e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	f003 030f 	and.w	r3, r3, #15
 8013458:	2b00      	cmp	r3, #0
 801345a:	d006      	beq.n	801346a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x42>
      {
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 801345c:	4b20      	ldr	r3, [pc, #128]	; (80134e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 801345e:	681b      	ldr	r3, [r3, #0]
 8013460:	f023 030f 	bic.w	r3, r3, #15
 8013464:	3310      	adds	r3, #16
 8013466:	4a1e      	ldr	r2, [pc, #120]	; (80134e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8013468:	6013      	str	r3, [r2, #0]
      }
      JPEG_ConvertorParams.ScaledWidth = 0 * JPEG_ConvertorParams.bytes_pr_pixel;
 801346a:	4b1d      	ldr	r3, [pc, #116]	; (80134e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 801346c:	2200      	movs	r2, #0
 801346e:	605a      	str	r2, [r3, #4]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8013470:	4b1b      	ldr	r3, [pc, #108]	; (80134e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	091b      	lsrs	r3, r3, #4
 8013476:	4a1a      	ldr	r2, [pc, #104]	; (80134e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8013478:	60d3      	str	r3, [r2, #12]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	691b      	ldr	r3, [r3, #16]
 801347e:	f003 030f 	and.w	r3, r3, #15
 8013482:	f1c3 0310 	rsb	r3, r3, #16
 8013486:	4a16      	ldr	r2, [pc, #88]	; (80134e0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb8>)
 8013488:	6093      	str	r3, [r2, #8]

      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 801348a:	683b      	ldr	r3, [r7, #0]
 801348c:	687a      	ldr	r2, [r7, #4]
 801348e:	68b9      	ldr	r1, [r7, #8]
 8013490:	4814      	ldr	r0, [pc, #80]	; (80134e4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xbc>)
 8013492:	f000 f8ed 	bl	8013670 <JPEG_Decode_DMA>
      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8013496:	4813      	ldr	r0, [pc, #76]	; (80134e4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xbc>)
 8013498:	f000 fa08 	bl	80138ac <JPEG_OutputHandler>
 801349c:	4603      	mov	r3, r0
 801349e:	4a12      	ldr	r2, [pc, #72]	; (80134e8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 80134a0:	6013      	str	r3, [r2, #0]

        //If nothing to do, allow other tasks
        if (JpegProcessing_End == 2)
 80134a2:	4b11      	ldr	r3, [pc, #68]	; (80134e8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	2b02      	cmp	r3, #2
 80134a8:	bf0c      	ite	eq
 80134aa:	2301      	moveq	r3, #1
 80134ac:	2300      	movne	r3, #0
 80134ae:	b2db      	uxtb	r3, r3
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d006      	beq.n	80134c2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x9a>
        {
          SEM_WAIT(semDecodingDone);
 80134b4:	4b0d      	ldr	r3, [pc, #52]	; (80134ec <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc4>)
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	f04f 31ff 	mov.w	r1, #4294967295
 80134bc:	4618      	mov	r0, r3
 80134be:	f7f7 f9a1 	bl	800a804 <osSemaphoreAcquire>
        }
      }
      while(JpegProcessing_End != 1);
 80134c2:	4b09      	ldr	r3, [pc, #36]	; (80134e8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xc0>)
 80134c4:	681b      	ldr	r3, [r3, #0]
 80134c6:	2b01      	cmp	r3, #1
 80134c8:	bf14      	ite	ne
 80134ca:	2301      	movne	r3, #1
 80134cc:	2300      	moveq	r3, #0
 80134ce:	b2db      	uxtb	r3, r3
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d001      	beq.n	80134d8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0xb0>
      do
 80134d4:	e7df      	b.n	8013496 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x6e>
        return;
 80134d6:	bf00      	nop
    }
}
 80134d8:	3710      	adds	r7, #16
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	20033a58 	.word	0x20033a58
 80134e4:	20000804 	.word	0x20000804
 80134e8:	20033a44 	.word	0x20033a44
 80134ec:	20033a54 	.word	0x20033a54

080134f0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:

bool HardwareMJPEGDecoder::decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width)
{
 80134f0:	b580      	push	{r7, lr}
 80134f2:	b086      	sub	sp, #24
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	607a      	str	r2, [r7, #4]
 80134fc:	603b      	str	r3, [r7, #0]
     // Assuming that chunk is available and streamNo and chunkType is correct.
    // Check by gotoNextFrame

    readData(currentMovieOffset, 8);
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	699b      	ldr	r3, [r3, #24]
 8013502:	2208      	movs	r2, #8
 8013504:	4619      	mov	r1, r3
 8013506:	68f8      	ldr	r0, [r7, #12]
 8013508:	f7ff fc4a 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	699b      	ldr	r3, [r3, #24]
 8013510:	3304      	adds	r3, #4
 8013512:	4619      	mov	r1, r3
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	f7ff fbc8 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 801351a:	6178      	str	r0, [r7, #20]

    // Ensure whole frame is read
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	699b      	ldr	r3, [r3, #24]
 8013520:	3308      	adds	r3, #8
 8013522:	697a      	ldr	r2, [r7, #20]
 8013524:	4619      	mov	r1, r3
 8013526:	68f8      	ldr	r0, [r7, #12]
 8013528:	f7ff fc3a 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 801352c:	6138      	str	r0, [r7, #16]

    if (frameBuffer) //only decode if buffers are assigned.
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d015      	beq.n	8013560 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
    {
      JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	697a      	ldr	r2, [r7, #20]
 8013538:	6939      	ldr	r1, [r7, #16]
 801353a:	480c      	ldr	r0, [pc, #48]	; (801356c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 801353c:	f000 f898 	bl	8013670 <JPEG_Decode_DMA>

      do
      {
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8013540:	480a      	ldr	r0, [pc, #40]	; (801356c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x7c>)
 8013542:	f000 f9b3 	bl	80138ac <JPEG_OutputHandler>
 8013546:	4603      	mov	r3, r0
 8013548:	4a09      	ldr	r2, [pc, #36]	; (8013570 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 801354a:	6013      	str	r3, [r2, #0]
      }
      while(JpegProcessing_End == 0);
 801354c:	4b08      	ldr	r3, [pc, #32]	; (8013570 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x80>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	bf0c      	ite	eq
 8013554:	2301      	moveq	r3, #1
 8013556:	2300      	movne	r3, #0
 8013558:	b2db      	uxtb	r3, r3
 801355a:	2b00      	cmp	r3, #0
 801355c:	d000      	beq.n	8013560 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x70>
      do
 801355e:	e7ef      	b.n	8013540 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>

    }
    return true;
 8013560:	2301      	movs	r3, #1
}
 8013562:	4618      	mov	r0, r3
 8013564:	3718      	adds	r7, #24
 8013566:	46bd      	mov	sp, r7
 8013568:	bd80      	pop	{r7, pc}
 801356a:	bf00      	nop
 801356c:	20000804 	.word	0x20000804
 8013570:	20033a44 	.word	0x20033a44

08013574 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:

bool HardwareMJPEGDecoder::decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height)
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	60f8      	str	r0, [r7, #12]
 801357c:	60b9      	str	r1, [r7, #8]
 801357e:	607a      	str	r2, [r7, #4]
 8013580:	807b      	strh	r3, [r7, #2]
    assert(0);
 8013582:	4b03      	ldr	r3, [pc, #12]	; (8013590 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x1c>)
 8013584:	4a03      	ldr	r2, [pc, #12]	; (8013594 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x20>)
 8013586:	f240 11d1 	movw	r1, #465	; 0x1d1
 801358a:	4803      	ldr	r0, [pc, #12]	; (8013598 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x24>)
 801358c:	f016 fbe0 	bl	8029d50 <__assert_func>
 8013590:	0802de34 	.word	0x0802de34
 8013594:	0802de38 	.word	0x0802de38
 8013598:	0802dc60 	.word	0x0802dc60

0801359c <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    return false;
}

void HardwareMJPEGDecoder::gotoFrame(uint32_t frameNumber)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b084      	sub	sp, #16
 80135a0:	af00      	add	r7, sp, #0
 80135a2:	6078      	str	r0, [r7, #4]
 80135a4:	6039      	str	r1, [r7, #0]
    if (frameNumber==0)
 80135a6:	683b      	ldr	r3, [r7, #0]
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d101      	bne.n	80135b0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x14>
    {
        frameNumber = 1;
 80135ac:	2301      	movs	r3, #1
 80135ae:	603b      	str	r3, [r7, #0]
    }

    if (frameNumber > getNumberOfFrames())
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	332c      	adds	r3, #44	; 0x2c
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	6878      	ldr	r0, [r7, #4]
 80135ba:	4798      	blx	r3
 80135bc:	4602      	mov	r2, r0
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	4293      	cmp	r3, r2
 80135c2:	bf8c      	ite	hi
 80135c4:	2301      	movhi	r3, #1
 80135c6:	2300      	movls	r3, #0
 80135c8:	b2db      	uxtb	r3, r3
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d006      	beq.n	80135dc <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x40>
    {
        frameNumber = getNumberOfFrames();
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	332c      	adds	r3, #44	; 0x2c
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	6878      	ldr	r0, [r7, #4]
 80135d8:	4798      	blx	r3
 80135da:	6038      	str	r0, [r7, #0]
    }

    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	69da      	ldr	r2, [r3, #28]
 80135e0:	683b      	ldr	r3, [r7, #0]
 80135e2:	3b01      	subs	r3, #1
 80135e4:	011b      	lsls	r3, r3, #4
 80135e6:	4413      	add	r3, r2
 80135e8:	3308      	adds	r3, #8
 80135ea:	60fb      	str	r3, [r7, #12]

    readData(offset, 16);
 80135ec:	2210      	movs	r2, #16
 80135ee:	68f9      	ldr	r1, [r7, #12]
 80135f0:	6878      	ldr	r0, [r7, #4]
 80135f2:	f7ff fbd5 	bl	8012da0 <_ZN20HardwareMJPEGDecoder8readDataEmm>

    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	3308      	adds	r3, #8
 80135fa:	4619      	mov	r1, r3
 80135fc:	6878      	ldr	r0, [r7, #4]
 80135fe:	f7ff fb54 	bl	8012caa <_ZN20HardwareMJPEGDecoder6getU32Em>
 8013602:	4602      	mov	r2, r0
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6a1b      	ldr	r3, [r3, #32]
 8013608:	4413      	add	r3, r2
 801360a:	1f1a      	subs	r2, r3, #4
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	619a      	str	r2, [r3, #24]
    this->frameNumber = frameNumber;
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	683a      	ldr	r2, [r7, #0]
 8013614:	615a      	str	r2, [r3, #20]
}
 8013616:	bf00      	nop
 8013618:	3710      	adds	r7, #16
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}

0801361e <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
 801361e:	b480      	push	{r7}
 8013620:	b083      	sub	sp, #12
 8013622:	af00      	add	r7, sp, #0
 8013624:	6078      	str	r0, [r7, #4]
    return videoInfo.number_of_frames;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	689b      	ldr	r3, [r3, #8]
}
 801362a:	4618      	mov	r0, r3
 801362c:	370c      	adds	r7, #12
 801362e:	46bd      	mov	sp, r7
 8013630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013634:	4770      	bx	lr

08013636 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{
 8013636:	b480      	push	{r7}
 8013638:	b083      	sub	sp, #12
 801363a:	af00      	add	r7, sp, #0
 801363c:	6078      	str	r0, [r7, #4]
 801363e:	460b      	mov	r3, r1
 8013640:	70fb      	strb	r3, [r7, #3]

}
 8013642:	bf00      	nop
 8013644:	370c      	adds	r7, #12
 8013646:	46bd      	mov	sp, r7
 8013648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801364c:	4770      	bx	lr

0801364e <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
 801364e:	b490      	push	{r4, r7}
 8013650:	b082      	sub	sp, #8
 8013652:	af00      	add	r7, sp, #0
 8013654:	6078      	str	r0, [r7, #4]
 8013656:	6039      	str	r1, [r7, #0]
    *data = videoInfo;
 8013658:	683a      	ldr	r2, [r7, #0]
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	4614      	mov	r4, r2
 801365e:	3304      	adds	r3, #4
 8013660:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8013662:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8013666:	bf00      	nop
 8013668:	3708      	adds	r7, #8
 801366a:	46bd      	mov	sp, r7
 801366c:	bc90      	pop	{r4, r7}
 801366e:	4770      	bx	lr

08013670 <JPEG_Decode_DMA>:
  * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
  * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b088      	sub	sp, #32
 8013674:	af02      	add	r7, sp, #8
 8013676:	60f8      	str	r0, [r7, #12]
 8013678:	60b9      	str	r1, [r7, #8]
 801367a:	607a      	str	r2, [r7, #4]
 801367c:	603b      	str	r3, [r7, #0]
    FrameBufferAddress = output;
 801367e:	4a28      	ldr	r2, [pc, #160]	; (8013720 <JPEG_Decode_DMA+0xb0>)
 8013680:	683b      	ldr	r3, [r7, #0]
 8013682:	6013      	str	r3, [r2, #0]
    Output_Is_Paused = 0;
 8013684:	4b27      	ldr	r3, [pc, #156]	; (8013724 <JPEG_Decode_DMA+0xb4>)
 8013686:	2200      	movs	r2, #0
 8013688:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Read_BufferIndex = 0;
 801368a:	4b27      	ldr	r3, [pc, #156]	; (8013728 <JPEG_Decode_DMA+0xb8>)
 801368c:	2200      	movs	r2, #0
 801368e:	601a      	str	r2, [r3, #0]
    JPEG_OUT_Write_BufferIndex = 0;
 8013690:	4b26      	ldr	r3, [pc, #152]	; (801372c <JPEG_Decode_DMA+0xbc>)
 8013692:	2200      	movs	r2, #0
 8013694:	601a      	str	r2, [r3, #0]
    JPEG_InputImageIndex = 0;
 8013696:	4b26      	ldr	r3, [pc, #152]	; (8013730 <JPEG_Decode_DMA+0xc0>)
 8013698:	2200      	movs	r2, #0
 801369a:	601a      	str	r2, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
 801369c:	68bb      	ldr	r3, [r7, #8]
 801369e:	4a25      	ldr	r2, [pc, #148]	; (8013734 <JPEG_Decode_DMA+0xc4>)
 80136a0:	6013      	str	r3, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
 80136a2:	4a25      	ldr	r2, [pc, #148]	; (8013738 <JPEG_Decode_DMA+0xc8>)
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6013      	str	r3, [r2, #0]
    MCU_BlockIndex = 0;
 80136a8:	4b24      	ldr	r3, [pc, #144]	; (801373c <JPEG_Decode_DMA+0xcc>)
 80136aa:	2200      	movs	r2, #0
 80136ac:	601a      	str	r2, [r3, #0]

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 80136ae:	2300      	movs	r3, #0
 80136b0:	617b      	str	r3, [r7, #20]
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	2b01      	cmp	r3, #1
 80136b6:	d816      	bhi.n	80136e6 <JPEG_Decode_DMA+0x76>
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80136b8:	4921      	ldr	r1, [pc, #132]	; (8013740 <JPEG_Decode_DMA+0xd0>)
 80136ba:	697a      	ldr	r2, [r7, #20]
 80136bc:	4613      	mov	r3, r2
 80136be:	005b      	lsls	r3, r3, #1
 80136c0:	4413      	add	r3, r2
 80136c2:	009b      	lsls	r3, r3, #2
 80136c4:	440b      	add	r3, r1
 80136c6:	2200      	movs	r2, #0
 80136c8:	701a      	strb	r2, [r3, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
 80136ca:	491d      	ldr	r1, [pc, #116]	; (8013740 <JPEG_Decode_DMA+0xd0>)
 80136cc:	697a      	ldr	r2, [r7, #20]
 80136ce:	4613      	mov	r3, r2
 80136d0:	005b      	lsls	r3, r3, #1
 80136d2:	4413      	add	r3, r2
 80136d4:	009b      	lsls	r3, r3, #2
 80136d6:	440b      	add	r3, r1
 80136d8:	3308      	adds	r3, #8
 80136da:	2200      	movs	r2, #0
 80136dc:	601a      	str	r2, [r3, #0]
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	3301      	adds	r3, #1
 80136e2:	617b      	str	r3, [r7, #20]
 80136e4:	e7e5      	b.n	80136b2 <JPEG_Decode_DMA+0x42>
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80136e6:	4b11      	ldr	r3, [pc, #68]	; (801372c <JPEG_Decode_DMA+0xbc>)
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	4915      	ldr	r1, [pc, #84]	; (8013740 <JPEG_Decode_DMA+0xd0>)
 80136ec:	4613      	mov	r3, r2
 80136ee:	005b      	lsls	r3, r3, #1
 80136f0:	4413      	add	r3, r2
 80136f2:	009b      	lsls	r3, r3, #2
 80136f4:	440b      	add	r3, r1
 80136f6:	3304      	adds	r3, #4
 80136f8:	6819      	ldr	r1, [r3, #0]
 80136fa:	4b12      	ldr	r3, [pc, #72]	; (8013744 <JPEG_Decode_DMA+0xd4>)
 80136fc:	68da      	ldr	r2, [r3, #12]
 80136fe:	4613      	mov	r3, r2
 8013700:	005b      	lsls	r3, r3, #1
 8013702:	4413      	add	r3, r2
 8013704:	01db      	lsls	r3, r3, #7
 8013706:	9300      	str	r3, [sp, #0]
 8013708:	460b      	mov	r3, r1
 801370a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801370e:	68b9      	ldr	r1, [r7, #8]
 8013710:	68f8      	ldr	r0, [r7, #12]
 8013712:	f7f1 fa67 	bl	8004be4 <HAL_JPEG_Decode_DMA>

    return 0;
 8013716:	2300      	movs	r3, #0
}
 8013718:	4618      	mov	r0, r3
 801371a:	3718      	adds	r7, #24
 801371c:	46bd      	mov	sp, r7
 801371e:	bd80      	pop	{r7, pc}
 8013720:	20033a24 	.word	0x20033a24
 8013724:	20033a40 	.word	0x20033a40
 8013728:	20033a38 	.word	0x20033a38
 801372c:	20033a3c 	.word	0x20033a3c
 8013730:	20033a28 	.word	0x20033a28
 8013734:	20033a30 	.word	0x20033a30
 8013738:	20033a2c 	.word	0x20033a2c
 801373c:	20033a50 	.word	0x20033a50
 8013740:	20000024 	.word	0x20000024
 8013744:	20033a58 	.word	0x20033a58

08013748 <HAL_JPEG_GetDataCallback>:
  * @param hjpeg: JPEG handle pointer
  * @param NbDecodedData: Number of decoded (consummed) bytes from input buffer
  * @retval None
  */
void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef *hjpeg, uint32_t NbDecodedData)
{
 8013748:	b580      	push	{r7, lr}
 801374a:	b084      	sub	sp, #16
 801374c:	af00      	add	r7, sp, #0
 801374e:	6078      	str	r0, [r7, #4]
 8013750:	6039      	str	r1, [r7, #0]
  //Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet.
  JPEG_InputImageIndex += NbDecodedData;
 8013752:	4b14      	ldr	r3, [pc, #80]	; (80137a4 <HAL_JPEG_GetDataCallback+0x5c>)
 8013754:	681a      	ldr	r2, [r3, #0]
 8013756:	683b      	ldr	r3, [r7, #0]
 8013758:	4413      	add	r3, r2
 801375a:	4a12      	ldr	r2, [pc, #72]	; (80137a4 <HAL_JPEG_GetDataCallback+0x5c>)
 801375c:	6013      	str	r3, [r2, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 801375e:	4b11      	ldr	r3, [pc, #68]	; (80137a4 <HAL_JPEG_GetDataCallback+0x5c>)
 8013760:	681a      	ldr	r2, [r3, #0]
 8013762:	4b11      	ldr	r3, [pc, #68]	; (80137a8 <HAL_JPEG_GetDataCallback+0x60>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	429a      	cmp	r2, r3
 8013768:	d218      	bcs.n	801379c <HAL_JPEG_GetDataCallback+0x54>
  {
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 801376a:	4b10      	ldr	r3, [pc, #64]	; (80137ac <HAL_JPEG_GetDataCallback+0x64>)
 801376c:	681a      	ldr	r2, [r3, #0]
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	4413      	add	r3, r2
 8013772:	4a0e      	ldr	r2, [pc, #56]	; (80137ac <HAL_JPEG_GetDataCallback+0x64>)
 8013774:	6013      	str	r3, [r2, #0]
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8013776:	4b0c      	ldr	r3, [pc, #48]	; (80137a8 <HAL_JPEG_GetDataCallback+0x60>)
 8013778:	681a      	ldr	r2, [r3, #0]
 801377a:	4b0a      	ldr	r3, [pc, #40]	; (80137a4 <HAL_JPEG_GetDataCallback+0x5c>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	1ad3      	subs	r3, r2, r3
 8013780:	60fb      	str	r3, [r7, #12]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8013782:	4b0a      	ldr	r3, [pc, #40]	; (80137ac <HAL_JPEG_GetDataCallback+0x64>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	4619      	mov	r1, r3
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801378e:	bf28      	it	cs
 8013790:	f44f 3380 	movcs.w	r3, #65536	; 0x10000
 8013794:	461a      	mov	r2, r3
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7f1 fbaf 	bl	8004efa <HAL_JPEG_ConfigInputBuffer>
  }
}
 801379c:	bf00      	nop
 801379e:	3710      	adds	r7, #16
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd80      	pop	{r7, pc}
 80137a4:	20033a28 	.word	0x20033a28
 80137a8:	20033a2c 	.word	0x20033a2c
 80137ac:	20033a30 	.word	0x20033a30

080137b0 <HAL_JPEG_DataReadyCallback>:
  * @param pDataOut: pointer to the output data buffer
  * @param OutDataLength: length of output buffer in bytes
  * @retval None
  */
void HAL_JPEG_DataReadyCallback (JPEG_HandleTypeDef *hjpeg, uint8_t *pDataOut, uint32_t OutDataLength)
{
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b084      	sub	sp, #16
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	60b9      	str	r1, [r7, #8]
 80137ba:	607a      	str	r2, [r7, #4]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 80137bc:	4b27      	ldr	r3, [pc, #156]	; (801385c <HAL_JPEG_DataReadyCallback+0xac>)
 80137be:	681a      	ldr	r2, [r3, #0]
 80137c0:	4927      	ldr	r1, [pc, #156]	; (8013860 <HAL_JPEG_DataReadyCallback+0xb0>)
 80137c2:	4613      	mov	r3, r2
 80137c4:	005b      	lsls	r3, r3, #1
 80137c6:	4413      	add	r3, r2
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	440b      	add	r3, r1
 80137cc:	2201      	movs	r2, #1
 80137ce:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 80137d0:	4b22      	ldr	r3, [pc, #136]	; (801385c <HAL_JPEG_DataReadyCallback+0xac>)
 80137d2:	681a      	ldr	r2, [r3, #0]
 80137d4:	4922      	ldr	r1, [pc, #136]	; (8013860 <HAL_JPEG_DataReadyCallback+0xb0>)
 80137d6:	4613      	mov	r3, r2
 80137d8:	005b      	lsls	r3, r3, #1
 80137da:	4413      	add	r3, r2
 80137dc:	009b      	lsls	r3, r3, #2
 80137de:	440b      	add	r3, r1
 80137e0:	3308      	adds	r3, #8
 80137e2:	687a      	ldr	r2, [r7, #4]
 80137e4:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Write_BufferIndex++;
 80137e6:	4b1d      	ldr	r3, [pc, #116]	; (801385c <HAL_JPEG_DataReadyCallback+0xac>)
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	3301      	adds	r3, #1
 80137ec:	4a1b      	ldr	r2, [pc, #108]	; (801385c <HAL_JPEG_DataReadyCallback+0xac>)
 80137ee:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80137f0:	4b1a      	ldr	r3, [pc, #104]	; (801385c <HAL_JPEG_DataReadyCallback+0xac>)
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	2b01      	cmp	r3, #1
 80137f6:	d902      	bls.n	80137fe <HAL_JPEG_DataReadyCallback+0x4e>
    {
      JPEG_OUT_Write_BufferIndex = 0;
 80137f8:	4b18      	ldr	r3, [pc, #96]	; (801385c <HAL_JPEG_DataReadyCallback+0xac>)
 80137fa:	2200      	movs	r2, #0
 80137fc:	601a      	str	r2, [r3, #0]
    }

    //if the other buffer is full, then ui thread might be converting it
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80137fe:	4b17      	ldr	r3, [pc, #92]	; (801385c <HAL_JPEG_DataReadyCallback+0xac>)
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	4917      	ldr	r1, [pc, #92]	; (8013860 <HAL_JPEG_DataReadyCallback+0xb0>)
 8013804:	4613      	mov	r3, r2
 8013806:	005b      	lsls	r3, r3, #1
 8013808:	4413      	add	r3, r2
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	440b      	add	r3, r1
 801380e:	781b      	ldrb	r3, [r3, #0]
 8013810:	2b00      	cmp	r3, #0
 8013812:	d006      	beq.n	8013822 <HAL_JPEG_DataReadyCallback+0x72>
    {
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8013814:	2102      	movs	r1, #2
 8013816:	68f8      	ldr	r0, [r7, #12]
 8013818:	f7f1 fa47 	bl	8004caa <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
 801381c:	4b11      	ldr	r3, [pc, #68]	; (8013864 <HAL_JPEG_DataReadyCallback+0xb4>)
 801381e:	2201      	movs	r2, #1
 8013820:	601a      	str	r2, [r3, #0]
    }
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8013822:	4b0e      	ldr	r3, [pc, #56]	; (801385c <HAL_JPEG_DataReadyCallback+0xac>)
 8013824:	681a      	ldr	r2, [r3, #0]
 8013826:	490e      	ldr	r1, [pc, #56]	; (8013860 <HAL_JPEG_DataReadyCallback+0xb0>)
 8013828:	4613      	mov	r3, r2
 801382a:	005b      	lsls	r3, r3, #1
 801382c:	4413      	add	r3, r2
 801382e:	009b      	lsls	r3, r3, #2
 8013830:	440b      	add	r3, r1
 8013832:	3304      	adds	r3, #4
 8013834:	6819      	ldr	r1, [r3, #0]
 8013836:	4b0c      	ldr	r3, [pc, #48]	; (8013868 <HAL_JPEG_DataReadyCallback+0xb8>)
 8013838:	68da      	ldr	r2, [r3, #12]
 801383a:	4613      	mov	r3, r2
 801383c:	005b      	lsls	r3, r3, #1
 801383e:	4413      	add	r3, r2
 8013840:	01db      	lsls	r3, r3, #7
 8013842:	461a      	mov	r2, r3
 8013844:	68f8      	ldr	r0, [r7, #12]
 8013846:	f7f1 fb6a 	bl	8004f1e <HAL_JPEG_ConfigOutputBuffer>

    // Signal Hardware Decoding to wake up
    SEM_POST(semDecodingDone);
 801384a:	4b08      	ldr	r3, [pc, #32]	; (801386c <HAL_JPEG_DataReadyCallback+0xbc>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	4618      	mov	r0, r3
 8013850:	f7f7 f83e 	bl	800a8d0 <osSemaphoreRelease>
}
 8013854:	bf00      	nop
 8013856:	3710      	adds	r7, #16
 8013858:	46bd      	mov	sp, r7
 801385a:	bd80      	pop	{r7, pc}
 801385c:	20033a3c 	.word	0x20033a3c
 8013860:	20000024 	.word	0x20000024
 8013864:	20033a40 	.word	0x20033a40
 8013868:	20033a58 	.word	0x20033a58
 801386c:	20033a54 	.word	0x20033a54

08013870 <HAL_JPEG_ErrorCallback>:
  * @brief  JPEG Error callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef *hjpeg)
{
 8013870:	b580      	push	{r7, lr}
 8013872:	b084      	sub	sp, #16
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
  HAL_JPEG_STATETypeDef  state = HAL_JPEG_GetState(hjpeg);
 8013878:	6878      	ldr	r0, [r7, #4]
 801387a:	f7f1 fb6c 	bl	8004f56 <HAL_JPEG_GetState>
 801387e:	4603      	mov	r3, r0
 8013880:	73fb      	strb	r3, [r7, #15]
  uint32_t error = HAL_JPEG_GetError(hjpeg);
 8013882:	6878      	ldr	r0, [r7, #4]
 8013884:	f7f1 fb75 	bl	8004f72 <HAL_JPEG_GetError>
 8013888:	60b8      	str	r0, [r7, #8]
  while(1){}
 801388a:	e7fe      	b.n	801388a <HAL_JPEG_ErrorCallback+0x1a>

0801388c <HAL_JPEG_DecodeCpltCallback>:
  * @brief  JPEG Decode complete callback
  * @param hjpeg: JPEG handle pointer
  * @retval None
  */
void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
{
 801388c:	b480      	push	{r7}
 801388e:	b083      	sub	sp, #12
 8013890:	af00      	add	r7, sp, #0
 8013892:	6078      	str	r0, [r7, #4]
  Jpeg_HWDecodingEnd = 1;
 8013894:	4b04      	ldr	r3, [pc, #16]	; (80138a8 <HAL_JPEG_DecodeCpltCallback+0x1c>)
 8013896:	2201      	movs	r2, #1
 8013898:	601a      	str	r2, [r3, #0]
}
 801389a:	bf00      	nop
 801389c:	370c      	adds	r7, #12
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr
 80138a6:	bf00      	nop
 80138a8:	20033a34 	.word	0x20033a34

080138ac <JPEG_OutputHandler>:
  * @brief  JPEG Ouput Data BackGround Postprocessing .
  * @param hjpeg: JPEG handle pointer
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg)
{
 80138ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80138ae:	b087      	sub	sp, #28
 80138b0:	af02      	add	r7, sp, #8
 80138b2:	6078      	str	r0, [r7, #4]
  uint32_t ConvertedDataCount;

  if(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL)
 80138b4:	4b55      	ldr	r3, [pc, #340]	; (8013a0c <JPEG_OutputHandler+0x160>)
 80138b6:	681a      	ldr	r2, [r3, #0]
 80138b8:	4955      	ldr	r1, [pc, #340]	; (8013a10 <JPEG_OutputHandler+0x164>)
 80138ba:	4613      	mov	r3, r2
 80138bc:	005b      	lsls	r3, r3, #1
 80138be:	4413      	add	r3, r2
 80138c0:	009b      	lsls	r3, r3, #2
 80138c2:	440b      	add	r3, r1
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	2b01      	cmp	r3, #1
 80138c8:	d160      	bne.n	801398c <JPEG_OutputHandler+0xe0>
  {
    /* Invalidate DCache prior to YCbCr/RGB software conversion. */
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80138ca:	4b52      	ldr	r3, [pc, #328]	; (8013a14 <JPEG_OutputHandler+0x168>)
 80138cc:	695b      	ldr	r3, [r3, #20]
 80138ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	bf14      	ite	ne
 80138d6:	2301      	movne	r3, #1
 80138d8:	2300      	moveq	r3, #0
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	2b00      	cmp	r3, #0
 80138de:	d001      	beq.n	80138e4 <JPEG_OutputHandler+0x38>
    {
      SCB_CleanInvalidateDCache();
 80138e0:	f7ff f918 	bl	8012b14 <SCB_CleanInvalidateDCache>
    }

    MCU_BlockIndex += pConvert_Function(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBuffer, FrameBufferAddress, MCU_BlockIndex, Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize, &ConvertedDataCount);
 80138e4:	4b4c      	ldr	r3, [pc, #304]	; (8013a18 <JPEG_OutputHandler+0x16c>)
 80138e6:	681c      	ldr	r4, [r3, #0]
 80138e8:	4b48      	ldr	r3, [pc, #288]	; (8013a0c <JPEG_OutputHandler+0x160>)
 80138ea:	681a      	ldr	r2, [r3, #0]
 80138ec:	4948      	ldr	r1, [pc, #288]	; (8013a10 <JPEG_OutputHandler+0x164>)
 80138ee:	4613      	mov	r3, r2
 80138f0:	005b      	lsls	r3, r3, #1
 80138f2:	4413      	add	r3, r2
 80138f4:	009b      	lsls	r3, r3, #2
 80138f6:	440b      	add	r3, r1
 80138f8:	3304      	adds	r3, #4
 80138fa:	6818      	ldr	r0, [r3, #0]
 80138fc:	4b47      	ldr	r3, [pc, #284]	; (8013a1c <JPEG_OutputHandler+0x170>)
 80138fe:	6819      	ldr	r1, [r3, #0]
 8013900:	4b47      	ldr	r3, [pc, #284]	; (8013a20 <JPEG_OutputHandler+0x174>)
 8013902:	681d      	ldr	r5, [r3, #0]
 8013904:	4b41      	ldr	r3, [pc, #260]	; (8013a0c <JPEG_OutputHandler+0x160>)
 8013906:	681a      	ldr	r2, [r3, #0]
 8013908:	4e41      	ldr	r6, [pc, #260]	; (8013a10 <JPEG_OutputHandler+0x164>)
 801390a:	4613      	mov	r3, r2
 801390c:	005b      	lsls	r3, r3, #1
 801390e:	4413      	add	r3, r2
 8013910:	009b      	lsls	r3, r3, #2
 8013912:	4433      	add	r3, r6
 8013914:	3308      	adds	r3, #8
 8013916:	681a      	ldr	r2, [r3, #0]
 8013918:	f107 030c 	add.w	r3, r7, #12
 801391c:	9300      	str	r3, [sp, #0]
 801391e:	4613      	mov	r3, r2
 8013920:	462a      	mov	r2, r5
 8013922:	47a0      	blx	r4
 8013924:	4602      	mov	r2, r0
 8013926:	4b3e      	ldr	r3, [pc, #248]	; (8013a20 <JPEG_OutputHandler+0x174>)
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	4413      	add	r3, r2
 801392c:	4a3c      	ldr	r2, [pc, #240]	; (8013a20 <JPEG_OutputHandler+0x174>)
 801392e:	6013      	str	r3, [r2, #0]

    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State = JPEG_BUFFER_EMPTY;
 8013930:	4b36      	ldr	r3, [pc, #216]	; (8013a0c <JPEG_OutputHandler+0x160>)
 8013932:	681a      	ldr	r2, [r3, #0]
 8013934:	4936      	ldr	r1, [pc, #216]	; (8013a10 <JPEG_OutputHandler+0x164>)
 8013936:	4613      	mov	r3, r2
 8013938:	005b      	lsls	r3, r3, #1
 801393a:	4413      	add	r3, r2
 801393c:	009b      	lsls	r3, r3, #2
 801393e:	440b      	add	r3, r1
 8013940:	2200      	movs	r2, #0
 8013942:	701a      	strb	r2, [r3, #0]
    Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].DataBufferSize = 0;
 8013944:	4b31      	ldr	r3, [pc, #196]	; (8013a0c <JPEG_OutputHandler+0x160>)
 8013946:	681a      	ldr	r2, [r3, #0]
 8013948:	4931      	ldr	r1, [pc, #196]	; (8013a10 <JPEG_OutputHandler+0x164>)
 801394a:	4613      	mov	r3, r2
 801394c:	005b      	lsls	r3, r3, #1
 801394e:	4413      	add	r3, r2
 8013950:	009b      	lsls	r3, r3, #2
 8013952:	440b      	add	r3, r1
 8013954:	3308      	adds	r3, #8
 8013956:	2200      	movs	r2, #0
 8013958:	601a      	str	r2, [r3, #0]

    JPEG_OUT_Read_BufferIndex++;
 801395a:	4b2c      	ldr	r3, [pc, #176]	; (8013a0c <JPEG_OutputHandler+0x160>)
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	3301      	adds	r3, #1
 8013960:	4a2a      	ldr	r2, [pc, #168]	; (8013a0c <JPEG_OutputHandler+0x160>)
 8013962:	6013      	str	r3, [r2, #0]
    if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8013964:	4b29      	ldr	r3, [pc, #164]	; (8013a0c <JPEG_OutputHandler+0x160>)
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	2b01      	cmp	r3, #1
 801396a:	d902      	bls.n	8013972 <JPEG_OutputHandler+0xc6>
    {
      JPEG_OUT_Read_BufferIndex = 0;
 801396c:	4b27      	ldr	r3, [pc, #156]	; (8013a0c <JPEG_OutputHandler+0x160>)
 801396e:	2200      	movs	r2, #0
 8013970:	601a      	str	r2, [r3, #0]
    }

    if(MCU_BlockIndex == MCU_TotalNb)
 8013972:	4b2b      	ldr	r3, [pc, #172]	; (8013a20 <JPEG_OutputHandler+0x174>)
 8013974:	681a      	ldr	r2, [r3, #0]
 8013976:	4b2b      	ldr	r3, [pc, #172]	; (8013a24 <JPEG_OutputHandler+0x178>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	429a      	cmp	r2, r3
 801397c:	bf0c      	ite	eq
 801397e:	2301      	moveq	r3, #1
 8013980:	2300      	movne	r3, #0
 8013982:	b2db      	uxtb	r3, r3
 8013984:	2b00      	cmp	r3, #0
 8013986:	d02a      	beq.n	80139de <JPEG_OutputHandler+0x132>
    {
      return 1;
 8013988:	2301      	movs	r3, #1
 801398a:	e03a      	b.n	8013a02 <JPEG_OutputHandler+0x156>
    }
  }
  else if((Output_Is_Paused == 1) && \
 801398c:	4b26      	ldr	r3, [pc, #152]	; (8013a28 <JPEG_OutputHandler+0x17c>)
 801398e:	681b      	ldr	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 8013990:	2b01      	cmp	r3, #1
 8013992:	d117      	bne.n	80139c4 <JPEG_OutputHandler+0x118>
 8013994:	4b25      	ldr	r3, [pc, #148]	; (8013a2c <JPEG_OutputHandler+0x180>)
 8013996:	681a      	ldr	r2, [r3, #0]
 8013998:	491d      	ldr	r1, [pc, #116]	; (8013a10 <JPEG_OutputHandler+0x164>)
 801399a:	4613      	mov	r3, r2
 801399c:	005b      	lsls	r3, r3, #1
 801399e:	4413      	add	r3, r2
 80139a0:	009b      	lsls	r3, r3, #2
 80139a2:	440b      	add	r3, r1
 80139a4:	781b      	ldrb	r3, [r3, #0]
  else if((Output_Is_Paused == 1) && \
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d10c      	bne.n	80139c4 <JPEG_OutputHandler+0x118>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
 80139aa:	4b18      	ldr	r3, [pc, #96]	; (8013a0c <JPEG_OutputHandler+0x160>)
 80139ac:	681a      	ldr	r2, [r3, #0]
 80139ae:	4918      	ldr	r1, [pc, #96]	; (8013a10 <JPEG_OutputHandler+0x164>)
 80139b0:	4613      	mov	r3, r2
 80139b2:	005b      	lsls	r3, r3, #1
 80139b4:	4413      	add	r3, r2
 80139b6:	009b      	lsls	r3, r3, #2
 80139b8:	440b      	add	r3, r1
 80139ba:	781b      	ldrb	r3, [r3, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d101      	bne.n	80139c4 <JPEG_OutputHandler+0x118>
 80139c0:	2301      	movs	r3, #1
 80139c2:	e000      	b.n	80139c6 <JPEG_OutputHandler+0x11a>
 80139c4:	2300      	movs	r3, #0
  else if((Output_Is_Paused == 1) && \
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d007      	beq.n	80139da <JPEG_OutputHandler+0x12e>
  {
    Output_Is_Paused = 0;
 80139ca:	4b17      	ldr	r3, [pc, #92]	; (8013a28 <JPEG_OutputHandler+0x17c>)
 80139cc:	2200      	movs	r2, #0
 80139ce:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80139d0:	2102      	movs	r1, #2
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f7f1 f9d4 	bl	8004d80 <HAL_JPEG_Resume>
 80139d8:	e001      	b.n	80139de <JPEG_OutputHandler+0x132>
  }
  else
  {
    return 2;
 80139da:	2302      	movs	r3, #2
 80139dc:	e011      	b.n	8013a02 <JPEG_OutputHandler+0x156>
  }

  if((MCU_BlockIndex == MCU_TotalNb) && (Jpeg_HWDecodingEnd))// decode completed
 80139de:	4b10      	ldr	r3, [pc, #64]	; (8013a20 <JPEG_OutputHandler+0x174>)
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	4b10      	ldr	r3, [pc, #64]	; (8013a24 <JPEG_OutputHandler+0x178>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d105      	bne.n	80139f6 <JPEG_OutputHandler+0x14a>
 80139ea:	4b11      	ldr	r3, [pc, #68]	; (8013a30 <JPEG_OutputHandler+0x184>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d001      	beq.n	80139f6 <JPEG_OutputHandler+0x14a>
 80139f2:	2301      	movs	r3, #1
 80139f4:	e000      	b.n	80139f8 <JPEG_OutputHandler+0x14c>
 80139f6:	2300      	movs	r3, #0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d001      	beq.n	8013a00 <JPEG_OutputHandler+0x154>
  {
    return 1;
 80139fc:	2301      	movs	r3, #1
 80139fe:	e000      	b.n	8013a02 <JPEG_OutputHandler+0x156>
  }

  return 0;
 8013a00:	2300      	movs	r3, #0
}
 8013a02:	4618      	mov	r0, r3
 8013a04:	3714      	adds	r7, #20
 8013a06:	46bd      	mov	sp, r7
 8013a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013a0a:	bf00      	nop
 8013a0c:	20033a38 	.word	0x20033a38
 8013a10:	20000024 	.word	0x20000024
 8013a14:	e000ed00 	.word	0xe000ed00
 8013a18:	20033a4c 	.word	0x20033a4c
 8013a1c:	20033a24 	.word	0x20033a24
 8013a20:	20033a50 	.word	0x20033a50
 8013a24:	20033a48 	.word	0x20033a48
 8013a28:	20033a40 	.word	0x20033a40
 8013a2c:	20033a3c 	.word	0x20033a3c
 8013a30:	20033a34 	.word	0x20033a34

08013a34 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b082      	sub	sp, #8
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	4a05      	ldr	r2, [pc, #20]	; (8013a54 <_ZN20HardwareMJPEGDecoderD1Ev+0x20>)
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	601a      	str	r2, [r3, #0]
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	4618      	mov	r0, r3
 8013a46:	f7ff f82b 	bl	8012aa0 <_ZN12MJPEGDecoderD1Ev>
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	0802ff20 	.word	0x0802ff20

08013a58 <_ZN20HardwareMJPEGDecoderD0Ev>:
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b082      	sub	sp, #8
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	6878      	ldr	r0, [r7, #4]
 8013a62:	f7ff ffe7 	bl	8013a34 <_ZN20HardwareMJPEGDecoderD1Ev>
 8013a66:	2144      	movs	r1, #68	; 0x44
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f016 f8c7 	bl	8029bfc <_ZdlPvj>
 8013a6e:	687b      	ldr	r3, [r7, #4]
 8013a70:	4618      	mov	r0, r3
 8013a72:	3708      	adds	r7, #8
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}

08013a78 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	2101      	movs	r1, #1
 8013a80:	2001      	movs	r0, #1
 8013a82:	f7f6 fe23 	bl	800a6cc <osSemaphoreNew>
 8013a86:	4603      	mov	r3, r0
 8013a88:	4a0f      	ldr	r2, [pc, #60]	; (8013ac8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8013a8a:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8013a8c:	4b0e      	ldr	r3, [pc, #56]	; (8013ac8 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d105      	bne.n	8013aa0 <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8013a94:	4b0d      	ldr	r3, [pc, #52]	; (8013acc <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8013a96:	4a0e      	ldr	r2, [pc, #56]	; (8013ad0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013a98:	2128      	movs	r1, #40	; 0x28
 8013a9a:	480e      	ldr	r0, [pc, #56]	; (8013ad4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013a9c:	f016 f958 	bl	8029d50 <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8013aa0:	2200      	movs	r2, #0
 8013aa2:	2104      	movs	r1, #4
 8013aa4:	2001      	movs	r0, #1
 8013aa6:	f7f6 ff6b 	bl	800a980 <osMessageQueueNew>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	4a0a      	ldr	r2, [pc, #40]	; (8013ad8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8013aae:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8013ab0:	4b09      	ldr	r3, [pc, #36]	; (8013ad8 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	d105      	bne.n	8013ac4 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8013ab8:	4b08      	ldr	r3, [pc, #32]	; (8013adc <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8013aba:	4a05      	ldr	r2, [pc, #20]	; (8013ad0 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8013abc:	212c      	movs	r1, #44	; 0x2c
 8013abe:	4805      	ldr	r0, [pc, #20]	; (8013ad4 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8013ac0:	f016 f946 	bl	8029d50 <__assert_func>
}
 8013ac4:	bf00      	nop
 8013ac6:	bd80      	pop	{r7, pc}
 8013ac8:	20033a6c 	.word	0x20033a6c
 8013acc:	0802def0 	.word	0x0802def0
 8013ad0:	0802df3c 	.word	0x0802df3c
 8013ad4:	0802df6c 	.word	0x0802df6c
 8013ad8:	20033a70 	.word	0x20033a70
 8013adc:	0802df98 	.word	0x0802df98

08013ae0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 8013ae0:	b580      	push	{r7, lr}
 8013ae2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8013ae4:	4b04      	ldr	r3, [pc, #16]	; (8013af8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8013aec:	4618      	mov	r0, r3
 8013aee:	f7f6 fe89 	bl	800a804 <osSemaphoreAcquire>
}
 8013af2:	bf00      	nop
 8013af4:	bd80      	pop	{r7, pc}
 8013af6:	bf00      	nop
 8013af8:	20033a6c 	.word	0x20033a6c

08013afc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8013b00:	4b03      	ldr	r3, [pc, #12]	; (8013b10 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7f6 fee3 	bl	800a8d0 <osSemaphoreRelease>
}
 8013b0a:	bf00      	nop
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	20033a6c 	.word	0x20033a6c

08013b14 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8013b18:	4b03      	ldr	r3, [pc, #12]	; (8013b28 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	2100      	movs	r1, #0
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7f6 fe70 	bl	800a804 <osSemaphoreAcquire>
}
 8013b24:	bf00      	nop
 8013b26:	bd80      	pop	{r7, pc}
 8013b28:	20033a6c 	.word	0x20033a6c

08013b2c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8013b2c:	b580      	push	{r7, lr}
 8013b2e:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 8013b30:	4b03      	ldr	r3, [pc, #12]	; (8013b40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	4618      	mov	r0, r3
 8013b36:	f7f6 fecb 	bl	800a8d0 <osSemaphoreRelease>
}
 8013b3a:	bf00      	nop
 8013b3c:	bd80      	pop	{r7, pc}
 8013b3e:	bf00      	nop
 8013b40:	20033a6c 	.word	0x20033a6c

08013b44 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 *
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	af00      	add	r7, sp, #0
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8013b48:	4b04      	ldr	r3, [pc, #16]	; (8013b5c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x18>)
 8013b4a:	6818      	ldr	r0, [r3, #0]
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	2200      	movs	r2, #0
 8013b50:	4903      	ldr	r1, [pc, #12]	; (8013b60 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>)
 8013b52:	f7f6 ff9b 	bl	800aa8c <osMessageQueuePut>
}
 8013b56:	bf00      	nop
 8013b58:	bd80      	pop	{r7, pc}
 8013b5a:	bf00      	nop
 8013b5c:	20033a70 	.word	0x20033a70
 8013b60:	2000003c 	.word	0x2000003c

08013b64 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8013b64:	b580      	push	{r7, lr}
 8013b66:	b082      	sub	sp, #8
 8013b68:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8013b6a:	4b09      	ldr	r3, [pc, #36]	; (8013b90 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013b6c:	6818      	ldr	r0, [r3, #0]
 8013b6e:	1d39      	adds	r1, r7, #4
 8013b70:	2300      	movs	r3, #0
 8013b72:	2200      	movs	r2, #0
 8013b74:	f7f6 fffe 	bl	800ab74 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8013b78:	4b05      	ldr	r3, [pc, #20]	; (8013b90 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8013b7a:	6818      	ldr	r0, [r3, #0]
 8013b7c:	1d39      	adds	r1, r7, #4
 8013b7e:	f04f 33ff 	mov.w	r3, #4294967295
 8013b82:	2200      	movs	r2, #0
 8013b84:	f7f6 fff6 	bl	800ab74 <osMessageQueueGet>
}
 8013b88:	bf00      	nop
 8013b8a:	3708      	adds	r7, #8
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	20033a70 	.word	0x20033a70

08013b94 <_ZN8touchgfx10OSWrappers9taskDelayEt>:
 *
 * see HAL::setFrameRefreshStrategy(FrameRefreshStrategy s)
 * see HAL::registerTaskDelayFunction(void (*delayF)(uint16_t))
 */
void OSWrappers::taskDelay(uint16_t ms)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	80fb      	strh	r3, [r7, #6]
    osDelay(static_cast<uint32_t>(ms));
 8013b9e:	88fb      	ldrh	r3, [r7, #6]
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7f6 fc1d 	bl	800a3e0 <osDelay>
}
 8013ba6:	bf00      	nop
 8013ba8:	3708      	adds	r7, #8
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
	...

08013bb0 <__NVIC_DisableIRQ>:
{
 8013bb0:	b480      	push	{r7}
 8013bb2:	b083      	sub	sp, #12
 8013bb4:	af00      	add	r7, sp, #0
 8013bb6:	4603      	mov	r3, r0
 8013bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	db12      	blt.n	8013be8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8013bc2:	79fb      	ldrb	r3, [r7, #7]
 8013bc4:	f003 021f 	and.w	r2, r3, #31
 8013bc8:	490a      	ldr	r1, [pc, #40]	; (8013bf4 <__NVIC_DisableIRQ+0x44>)
 8013bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013bce:	095b      	lsrs	r3, r3, #5
 8013bd0:	2001      	movs	r0, #1
 8013bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8013bd6:	3320      	adds	r3, #32
 8013bd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8013bdc:	f3bf 8f4f 	dsb	sy
}
 8013be0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013be2:	f3bf 8f6f 	isb	sy
}
 8013be6:	bf00      	nop
}
 8013be8:	bf00      	nop
 8013bea:	370c      	adds	r7, #12
 8013bec:	46bd      	mov	sp, r7
 8013bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bf2:	4770      	bx	lr
 8013bf4:	e000e100 	.word	0xe000e100

08013bf8 <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 8013bf8:	b480      	push	{r7}
 8013bfa:	b083      	sub	sp, #12
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
    {
 8013c00:	4a04      	ldr	r2, [pc, #16]	; (8013c14 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	601a      	str	r2, [r3, #0]
    }
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	4618      	mov	r0, r3
 8013c0a:	370c      	adds	r7, #12
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c12:	4770      	bx	lr
 8013c14:	0802fff4 	.word	0x0802fff4

08013c18 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b082      	sub	sp, #8
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	6078      	str	r0, [r7, #4]
    }
 8013c20:	6878      	ldr	r0, [r7, #4]
 8013c22:	f7ff ffe9 	bl	8013bf8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8013c26:	2104      	movs	r1, #4
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f015 ffe7 	bl	8029bfc <_ZdlPvj>
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	4618      	mov	r0, r3
 8013c32:	3708      	adds	r7, #8
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}

08013c38 <_ZN8touchgfx13DMA_Interface5flushEv>:
     * @param  op The operation to add.
     */
    virtual void addToQueue(const BlitOp& op);

    /** This function blocks until all DMA transfers in the queue have been completed. */
    virtual void flush()
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b082      	sub	sp, #8
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	3344      	adds	r3, #68	; 0x44
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	6878      	ldr	r0, [r7, #4]
 8013c4a:	4798      	blx	r3
    }
 8013c4c:	bf00      	nop
 8013c4e:	3708      	adds	r7, #8
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
    {
        return DMA_TYPE_GENERIC;
    }

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 8013c54:	b480      	push	{r7}
 8013c56:	b083      	sub	sp, #12
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
    {
 8013c5c:	4a04      	ldr	r2, [pc, #16]	; (8013c70 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8013c5e:	687b      	ldr	r3, [r7, #4]
 8013c60:	601a      	str	r2, [r3, #0]
    }
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	4618      	mov	r0, r3
 8013c66:	370c      	adds	r7, #12
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6e:	4770      	bx	lr
 8013c70:	080303e8 	.word	0x080303e8

08013c74 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b082      	sub	sp, #8
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	6078      	str	r0, [r7, #4]
    }
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	f7ff ffe9 	bl	8013c54 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8013c82:	210c      	movs	r1, #12
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f015 ffb9 	bl	8029bfc <_ZdlPvj>
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	3708      	adds	r7, #8
 8013c90:	46bd      	mov	sp, r7
 8013c92:	bd80      	pop	{r7, pc}

08013c94 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8013c94:	b480      	push	{r7}
 8013c96:	b083      	sub	sp, #12
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8013c9e:	4a09      	ldr	r2, [pc, #36]	; (8013cc4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	601a      	str	r2, [r3, #0]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	683a      	ldr	r2, [r7, #0]
 8013ca8:	605a      	str	r2, [r3, #4]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	2200      	movs	r2, #0
 8013cae:	721a      	strb	r2, [r3, #8]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	725a      	strb	r2, [r3, #9]
    {
    }
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	4618      	mov	r0, r3
 8013cba:	370c      	adds	r7, #12
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc2:	4770      	bx	lr
 8013cc4:	080303e8 	.word	0x080303e8

08013cc8 <_ZN8STM32DMA10getDMATypeEv>:
     *        Function for obtaining the DMA type of the concrete DMA_Interface implementation.
     *        As default, will return DMA_TYPE_CHROMART type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
 8013cc8:	b480      	push	{r7}
 8013cca:	b083      	sub	sp, #12
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
    {
        return touchgfx::DMA_TYPE_CHROMART;
 8013cd0:	2301      	movs	r3, #1
    }
 8013cd2:	4618      	mov	r0, r3
 8013cd4:	370c      	adds	r7, #12
 8013cd6:	46bd      	mov	sp, r7
 8013cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cdc:	4770      	bx	lr

08013cde <_ZN8STM32DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8013cde:	b580      	push	{r7, lr}
 8013ce0:	b082      	sub	sp, #8
 8013ce2:	af00      	add	r7, sp, #0
 8013ce4:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	3328      	adds	r3, #40	; 0x28
 8013cee:	681b      	ldr	r3, [r3, #0]
 8013cf0:	4610      	mov	r0, r2
 8013cf2:	4798      	blx	r3
    }
 8013cf4:	bf00      	nop
 8013cf6:	3708      	adds	r7, #8
 8013cf8:	46bd      	mov	sp, r7
 8013cfa:	bd80      	pop	{r7, pc}

08013cfc <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b082      	sub	sp, #8
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	685a      	ldr	r2, [r3, #4]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	685b      	ldr	r3, [r3, #4]
 8013d0c:	681b      	ldr	r3, [r3, #0]
 8013d0e:	3314      	adds	r3, #20
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	4610      	mov	r0, r2
 8013d14:	4798      	blx	r3
    }
 8013d16:	bf00      	nop
 8013d18:	3708      	adds	r7, #8
 8013d1a:	46bd      	mov	sp, r7
 8013d1c:	bd80      	pop	{r7, pc}
	...

08013d20 <DMA2D_IRQHandler>:
    const uint16_t size;
    const uint32_t* const data;
} clutData_t;

extern "C" void DMA2D_IRQHandler()
{
 8013d20:	b580      	push	{r7, lr}
 8013d22:	af00      	add	r7, sp, #0
    /* Transfer Complete Interrupt management ************************************/
    if ((READ_REG(DMA2D->ISR) & DMA2D_FLAG_TC) != RESET)
 8013d24:	4b13      	ldr	r3, [pc, #76]	; (8013d74 <DMA2D_IRQHandler+0x54>)
 8013d26:	685b      	ldr	r3, [r3, #4]
 8013d28:	f003 0302 	and.w	r3, r3, #2
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	bf14      	ite	ne
 8013d30:	2301      	movne	r3, #1
 8013d32:	2300      	moveq	r3, #0
 8013d34:	b2db      	uxtb	r3, r3
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d019      	beq.n	8013d6e <DMA2D_IRQHandler+0x4e>
    {
        /* Verify Transfer Complete Interrupt */
        if ((READ_REG(DMA2D->CR) & DMA2D_IT_TC) != RESET)
 8013d3a:	4b0e      	ldr	r3, [pc, #56]	; (8013d74 <DMA2D_IRQHandler+0x54>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	bf14      	ite	ne
 8013d46:	2301      	movne	r3, #1
 8013d48:	2300      	moveq	r3, #0
 8013d4a:	b2db      	uxtb	r3, r3
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	d00e      	beq.n	8013d6e <DMA2D_IRQHandler+0x4e>
        {
            /* Disable the transfer complete interrupt */
            DMA2D->CR &= ~(DMA2D_IT_TC);
 8013d50:	4b08      	ldr	r3, [pc, #32]	; (8013d74 <DMA2D_IRQHandler+0x54>)
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	4a07      	ldr	r2, [pc, #28]	; (8013d74 <DMA2D_IRQHandler+0x54>)
 8013d56:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8013d5a:	6013      	str	r3, [r2, #0]

            /* Clear the transfer complete flag */
            DMA2D->IFCR = (DMA2D_FLAG_TC);
 8013d5c:	4b05      	ldr	r3, [pc, #20]	; (8013d74 <DMA2D_IRQHandler+0x54>)
 8013d5e:	2202      	movs	r2, #2
 8013d60:	609a      	str	r2, [r3, #8]

            /* Signal DMA queue of execution complete */
            touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8013d62:	f7fa fedb 	bl	800eb1c <_ZN8touchgfx3HAL11getInstanceEv>
 8013d66:	4603      	mov	r3, r0
 8013d68:	4618      	mov	r0, r3
 8013d6a:	f7ff ffc7 	bl	8013cfc <_ZN8touchgfx3HAL18signalDMAInterruptEv>
        }
    }
}
 8013d6e:	bf00      	nop
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop
 8013d74:	4002b000 	.word	0x4002b000

08013d78 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8013d78:	b580      	push	{r7, lr}
 8013d7a:	b082      	sub	sp, #8
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	330c      	adds	r3, #12
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7fc f9ab 	bl	80100e0 <_ZN8touchgfx9colortypeC1Ev>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	3708      	adds	r7, #8
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}

08013d94 <_ZN8STM32DMAC1Ev>:

STM32DMA::STM32DMA()
 8013d94:	b5b0      	push	{r4, r5, r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8013d9c:	687a      	ldr	r2, [r7, #4]
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	330c      	adds	r3, #12
 8013da2:	4619      	mov	r1, r3
 8013da4:	4610      	mov	r0, r2
 8013da6:	f7ff ff75 	bl	8013c94 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8013daa:	4a0e      	ldr	r2, [pc, #56]	; (8013de4 <_ZN8STM32DMAC1Ev+0x50>)
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	601a      	str	r2, [r3, #0]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	f103 000c 	add.w	r0, r3, #12
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	3320      	adds	r3, #32
 8013dba:	2260      	movs	r2, #96	; 0x60
 8013dbc:	4619      	mov	r1, r3
 8013dbe:	f003 fb9b 	bl	80174f8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	3320      	adds	r3, #32
 8013dc6:	245f      	movs	r4, #95	; 0x5f
 8013dc8:	461d      	mov	r5, r3
 8013dca:	2c00      	cmp	r4, #0
 8013dcc:	db05      	blt.n	8013dda <_ZN8STM32DMAC1Ev+0x46>
 8013dce:	4628      	mov	r0, r5
 8013dd0:	f7ff ffd2 	bl	8013d78 <_ZN8touchgfx6BlitOpC1Ev>
 8013dd4:	3524      	adds	r5, #36	; 0x24
 8013dd6:	3c01      	subs	r4, #1
 8013dd8:	e7f7      	b.n	8013dca <_ZN8STM32DMAC1Ev+0x36>
{
}
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	4618      	mov	r0, r3
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bdb0      	pop	{r4, r5, r7, pc}
 8013de4:	0802ffa4 	.word	0x0802ffa4

08013de8 <_ZN8STM32DMAD1Ev>:

STM32DMA::~STM32DMA()
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b082      	sub	sp, #8
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	4a09      	ldr	r2, [pc, #36]	; (8013e18 <_ZN8STM32DMAD1Ev+0x30>)
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	601a      	str	r2, [r3, #0]
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
 8013df6:	205a      	movs	r0, #90	; 0x5a
 8013df8:	f7ff feda 	bl	8013bb0 <__NVIC_DisableIRQ>
STM32DMA::~STM32DMA()
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	330c      	adds	r3, #12
 8013e00:	4618      	mov	r0, r3
 8013e02:	f000 fb3b 	bl	801447c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	4618      	mov	r0, r3
 8013e0a:	f7ff ff23 	bl	8013c54 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	4618      	mov	r0, r3
 8013e12:	3708      	adds	r7, #8
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	0802ffa4 	.word	0x0802ffa4

08013e1c <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b082      	sub	sp, #8
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
}
 8013e24:	6878      	ldr	r0, [r7, #4]
 8013e26:	f7ff ffdf 	bl	8013de8 <_ZN8STM32DMAD1Ev>
 8013e2a:	f44f 615a 	mov.w	r1, #3488	; 0xda0
 8013e2e:	6878      	ldr	r0, [r7, #4]
 8013e30:	f015 fee4 	bl	8029bfc <_ZdlPvj>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	4618      	mov	r0, r3
 8013e38:	3708      	adds	r7, #8
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}
	...

08013e40 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8013e48:	4b11      	ldr	r3, [pc, #68]	; (8013e90 <_ZN8STM32DMA10initializeEv+0x50>)
 8013e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e4c:	4a10      	ldr	r2, [pc, #64]	; (8013e90 <_ZN8STM32DMA10initializeEv+0x50>)
 8013e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013e52:	6313      	str	r3, [r2, #48]	; 0x30
 8013e54:	4b0e      	ldr	r3, [pc, #56]	; (8013e90 <_ZN8STM32DMA10initializeEv+0x50>)
 8013e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013e5c:	60fb      	str	r3, [r7, #12]
 8013e5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8013e60:	4b0b      	ldr	r3, [pc, #44]	; (8013e90 <_ZN8STM32DMA10initializeEv+0x50>)
 8013e62:	691b      	ldr	r3, [r3, #16]
 8013e64:	4a0a      	ldr	r2, [pc, #40]	; (8013e90 <_ZN8STM32DMA10initializeEv+0x50>)
 8013e66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013e6a:	6113      	str	r3, [r2, #16]
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8013e6c:	4b08      	ldr	r3, [pc, #32]	; (8013e90 <_ZN8STM32DMA10initializeEv+0x50>)
 8013e6e:	691b      	ldr	r3, [r3, #16]
 8013e70:	4a07      	ldr	r2, [pc, #28]	; (8013e90 <_ZN8STM32DMA10initializeEv+0x50>)
 8013e72:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013e76:	6113      	str	r3, [r2, #16]

    /* Enable DMA2D global Interrupt */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8013e78:	2200      	movs	r2, #0
 8013e7a:	2105      	movs	r1, #5
 8013e7c:	205a      	movs	r0, #90	; 0x5a
 8013e7e:	f7ef fdbd 	bl	80039fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8013e82:	205a      	movs	r0, #90	; 0x5a
 8013e84:	f7ef fdd6 	bl	8003a34 <HAL_NVIC_EnableIRQ>
}
 8013e88:	bf00      	nop
 8013e8a:	3710      	adds	r7, #16
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	bd80      	pop	{r7, pc}
 8013e90:	40023800 	.word	0x40023800

08013e94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	460b      	mov	r3, r1
 8013e9e:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	60fb      	str	r3, [r7, #12]

    switch (format)
 8013ea4:	78fb      	ldrb	r3, [r7, #3]
 8013ea6:	2b0b      	cmp	r3, #11
 8013ea8:	d826      	bhi.n	8013ef8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x64>
 8013eaa:	a201      	add	r2, pc, #4	; (adr r2, 8013eb0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8013eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013eb0:	08013eed 	.word	0x08013eed
 8013eb4:	08013ee7 	.word	0x08013ee7
 8013eb8:	08013ee1 	.word	0x08013ee1
 8013ebc:	08013ef9 	.word	0x08013ef9
 8013ec0:	08013ef9 	.word	0x08013ef9
 8013ec4:	08013ef9 	.word	0x08013ef9
 8013ec8:	08013ef9 	.word	0x08013ef9
 8013ecc:	08013ef3 	.word	0x08013ef3
 8013ed0:	08013ef3 	.word	0x08013ef3
 8013ed4:	08013ef3 	.word	0x08013ef3
 8013ed8:	08013ef3 	.word	0x08013ef3
 8013edc:	08013ef3 	.word	0x08013ef3
    {
    case Bitmap::ARGB8888: /* DMA2D input mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8013ee0:	2300      	movs	r3, #0
 8013ee2:	60fb      	str	r3, [r7, #12]
        break;
 8013ee4:	e00e      	b.n	8013f04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB888: /* DMA2D input mode set to 24bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB888;
 8013ee6:	2301      	movs	r3, #1
 8013ee8:	60fb      	str	r3, [r7, #12]
        break;
 8013eea:	e00b      	b.n	8013f04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::RGB565: /* DMA2D input mode set to 16bit RGB */
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8013eec:	2302      	movs	r3, #2
 8013eee:	60fb      	str	r3, [r7, #12]
        break;
 8013ef0:	e008      	b.n	8013f04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* Fall through */
    case Bitmap::L8:       /* DMA2D input mode set to 8bit Color Look up table*/
        dma2dColorMode = DMA2D_INPUT_L8;
 8013ef2:	2305      	movs	r3, #5
 8013ef4:	60fb      	str	r3, [r7, #12]
        break;
 8013ef6:	e005      	b.n	8013f04 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported input format for DMA2D */
        assert(0 && "Unsupported Format!");
 8013ef8:	4b05      	ldr	r3, [pc, #20]	; (8013f10 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x7c>)
 8013efa:	4a06      	ldr	r2, [pc, #24]	; (8013f14 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x80>)
 8013efc:	216e      	movs	r1, #110	; 0x6e
 8013efe:	4806      	ldr	r0, [pc, #24]	; (8013f18 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x84>)
 8013f00:	f015 ff26 	bl	8029d50 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8013f04:	68fb      	ldr	r3, [r7, #12]
}
 8013f06:	4618      	mov	r0, r3
 8013f08:	3710      	adds	r7, #16
 8013f0a:	46bd      	mov	sp, r7
 8013f0c:	bd80      	pop	{r7, pc}
 8013f0e:	bf00      	nop
 8013f10:	0802dfdc 	.word	0x0802dfdc
 8013f14:	0802dff8 	.word	0x0802dff8
 8013f18:	0802e044 	.word	0x0802e044

08013f1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>:

inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
{
 8013f1c:	b580      	push	{r7, lr}
 8013f1e:	b084      	sub	sp, #16
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
 8013f24:	460b      	mov	r3, r1
 8013f26:	70fb      	strb	r3, [r7, #3]
    // Default color mode set to ARGB8888
    uint32_t dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	60fb      	str	r3, [r7, #12]

    switch (format)
 8013f2c:	78fb      	ldrb	r3, [r7, #3]
 8013f2e:	2b0a      	cmp	r3, #10
 8013f30:	d821      	bhi.n	8013f76 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x5a>
 8013f32:	a201      	add	r2, pc, #4	; (adr r2, 8013f38 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x1c>)
 8013f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f38:	08013f71 	.word	0x08013f71
 8013f3c:	08013f6b 	.word	0x08013f6b
 8013f40:	08013f65 	.word	0x08013f65
 8013f44:	08013f77 	.word	0x08013f77
 8013f48:	08013f77 	.word	0x08013f77
 8013f4c:	08013f77 	.word	0x08013f77
 8013f50:	08013f77 	.word	0x08013f77
 8013f54:	08013f6b 	.word	0x08013f6b
 8013f58:	08013f6b 	.word	0x08013f6b
 8013f5c:	08013f6b 	.word	0x08013f6b
 8013f60:	08013f6b 	.word	0x08013f6b
    {
    case Bitmap::ARGB8888: /* DMA2D output mode set to 32bit ARGB */
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8013f64:	2300      	movs	r3, #0
 8013f66:	60fb      	str	r3, [r7, #12]
        break;
 8013f68:	e00b      	b.n	8013f82 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB888:   /* Fall through */
    case Bitmap::ARGB2222: /* Fall through */
    case Bitmap::ABGR2222: /* Fall through */
    case Bitmap::RGBA2222: /* Fall through */
    case Bitmap::BGRA2222: /* DMA2D output mode set to 24bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB888;
 8013f6a:	2301      	movs	r3, #1
 8013f6c:	60fb      	str	r3, [r7, #12]
        break;
 8013f6e:	e008      	b.n	8013f82 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::RGB565: /* DMA2D output mode set to 16bit RGB */
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8013f70:	2302      	movs	r3, #2
 8013f72:	60fb      	str	r3, [r7, #12]
        break;
 8013f74:	e005      	b.n	8013f82 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x66>
    case Bitmap::BW:     /* Fall through */
    case Bitmap::BW_RLE: /* Fall through */
    case Bitmap::GRAY4:  /* Fall through */
    case Bitmap::GRAY2:  /* Fall through */
    default:             /* Unsupported output format for DMA2D */
        assert(0 && "Unsupported Format!");
 8013f76:	4b05      	ldr	r3, [pc, #20]	; (8013f8c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x70>)
 8013f78:	4a05      	ldr	r2, [pc, #20]	; (8013f90 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x74>)
 8013f7a:	218f      	movs	r1, #143	; 0x8f
 8013f7c:	4805      	ldr	r0, [pc, #20]	; (8013f94 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE+0x78>)
 8013f7e:	f015 fee7 	bl	8029d50 <__assert_func>
        break;
    }

    return dma2dColorMode;
 8013f82:	68fb      	ldr	r3, [r7, #12]
}
 8013f84:	4618      	mov	r0, r3
 8013f86:	3710      	adds	r7, #16
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	0802dfdc 	.word	0x0802dfdc
 8013f90:	0802e070 	.word	0x0802e070
 8013f94:	0802e044 	.word	0x0802e044

08013f98 <_ZN8STM32DMA11getBlitCapsEv>:

BlitOperations STM32DMA::getBlitCaps()
{
 8013f98:	b480      	push	{r7}
 8013f9a:	b083      	sub	sp, #12
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
                                       | BLIT_OP_COPY_16BIT
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
 8013fa0:	f640 73ef 	movw	r3, #4079	; 0xfef
}
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	370c      	adds	r7, #12
 8013fa8:	46bd      	mov	sp, r7
 8013faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fae:	4770      	bx	lr

08013fb0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
 * BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 * BLIT_OP_COPY_A4
 * BLIT_OP_COPY_A8
 */
void STM32DMA::setupDataCopy(const BlitOp& blitOp)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b088      	sub	sp, #32
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	6039      	str	r1, [r7, #0]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	7f5b      	ldrb	r3, [r3, #29]
 8013fbe:	4619      	mov	r1, r3
 8013fc0:	6878      	ldr	r0, [r7, #4]
 8013fc2:	f7ff ff67 	bl	8013e94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013fc6:	61b8      	str	r0, [r7, #24]
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	7f9b      	ldrb	r3, [r3, #30]
 8013fcc:	4619      	mov	r1, r3
 8013fce:	6878      	ldr	r0, [r7, #4]
 8013fd0:	f7ff ff60 	bl	8013e94 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013fd4:	6178      	str	r0, [r7, #20]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8013fd6:	683b      	ldr	r3, [r7, #0]
 8013fd8:	7f9b      	ldrb	r3, [r3, #30]
 8013fda:	4619      	mov	r1, r3
 8013fdc:	6878      	ldr	r0, [r7, #4]
 8013fde:	f7ff ff9d 	bl	8013f1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8013fe2:	6138      	str	r0, [r7, #16]

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	8b5b      	ldrh	r3, [r3, #26]
 8013fe8:	461a      	mov	r2, r3
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	8a9b      	ldrh	r3, [r3, #20]
 8013fee:	1ad2      	subs	r2, r2, r3
 8013ff0:	4b91      	ldr	r3, [pc, #580]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8013ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* DMA2D BGOR register configuration -*/
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8013ff4:	683b      	ldr	r3, [r7, #0]
 8013ff6:	8b5b      	ldrh	r3, [r3, #26]
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	8a9b      	ldrh	r3, [r3, #20]
 8013ffe:	1ad2      	subs	r2, r2, r3
 8014000:	4b8d      	ldr	r3, [pc, #564]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014002:	619a      	str	r2, [r3, #24]

    /* DMA2D FGOR register configuration -*/
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8014004:	683b      	ldr	r3, [r7, #0]
 8014006:	8b1b      	ldrh	r3, [r3, #24]
 8014008:	461a      	mov	r2, r3
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	8a9b      	ldrh	r3, [r3, #20]
 801400e:	1ad2      	subs	r2, r2, r3
 8014010:	4b89      	ldr	r3, [pc, #548]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014012:	611a      	str	r2, [r3, #16]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8014014:	4a88      	ldr	r2, [pc, #544]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801401a:	683b      	ldr	r3, [r7, #0]
 801401c:	8adb      	ldrh	r3, [r3, #22]
 801401e:	461a      	mov	r2, r3
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	8a9b      	ldrh	r3, [r3, #20]
 8014024:	041b      	lsls	r3, r3, #16
 8014026:	431a      	orrs	r2, r3
 8014028:	4b83      	ldr	r3, [pc, #524]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801402a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801402c:	683b      	ldr	r3, [r7, #0]
 801402e:	691a      	ldr	r2, [r3, #16]
 8014030:	4b81      	ldr	r3, [pc, #516]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014032:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8014034:	683b      	ldr	r3, [r7, #0]
 8014036:	685a      	ldr	r2, [r3, #4]
 8014038:	4b7f      	ldr	r3, [pc, #508]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801403a:	60da      	str	r2, [r3, #12]

    switch (blitOp.operation)
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014044:	d042      	beq.n	80140cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x11c>
 8014046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801404a:	f200 8152 	bhi.w	80142f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 801404e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014052:	d014      	beq.n	801407e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xce>
 8014054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014058:	f200 814b 	bhi.w	80142f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 801405c:	2b80      	cmp	r3, #128	; 0x80
 801405e:	d07b      	beq.n	8014158 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
 8014060:	2b80      	cmp	r3, #128	; 0x80
 8014062:	f200 8146 	bhi.w	80142f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8014066:	2b40      	cmp	r3, #64	; 0x40
 8014068:	f000 8124 	beq.w	80142b4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x304>
 801406c:	2b40      	cmp	r3, #64	; 0x40
 801406e:	f200 8140 	bhi.w	80142f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
 8014072:	2b04      	cmp	r3, #4
 8014074:	d051      	beq.n	801411a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x16a>
 8014076:	2b20      	cmp	r3, #32
 8014078:	f000 80f4 	beq.w	8014264 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2b4>
 801407c:	e139      	b.n	80142f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x342>
    {
    case BLIT_OP_COPY_A4:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	7f1b      	ldrb	r3, [r3, #28]
 8014082:	061b      	lsls	r3, r3, #24
 8014084:	4619      	mov	r1, r3
 8014086:	4a6c      	ldr	r2, [pc, #432]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014088:	4b6c      	ldr	r3, [pc, #432]	; (801423c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x28c>)
 801408a:	430b      	orrs	r3, r1
 801408c:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	330c      	adds	r3, #12
 8014092:	4618      	mov	r0, r3
 8014094:	f7fc f832 	bl	80100fc <_ZNK8touchgfx9colortypecvmEv>
 8014098:	4603      	mov	r3, r0
 801409a:	4a67      	ldr	r2, [pc, #412]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801409c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80140a0:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	7fdb      	ldrb	r3, [r3, #31]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d005      	beq.n	80140b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80140aa:	4963      	ldr	r1, [pc, #396]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80140ac:	697a      	ldr	r2, [r7, #20]
 80140ae:	4b64      	ldr	r3, [pc, #400]	; (8014240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80140b0:	4313      	orrs	r3, r2
 80140b2:	624b      	str	r3, [r1, #36]	; 0x24
 80140b4:	e002      	b.n	80140bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x10c>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80140b6:	4a60      	ldr	r2, [pc, #384]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80140b8:	697b      	ldr	r3, [r7, #20]
 80140ba:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	691a      	ldr	r2, [r3, #16]
 80140c0:	4b5d      	ldr	r3, [pc, #372]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80140c2:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80140c4:	4b5c      	ldr	r3, [pc, #368]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80140c6:	4a5f      	ldr	r2, [pc, #380]	; (8014244 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 80140c8:	601a      	str	r2, [r3, #0]
        break;
 80140ca:	e133      	b.n	8014334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_A8:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 80140cc:	683b      	ldr	r3, [r7, #0]
 80140ce:	7f1b      	ldrb	r3, [r3, #28]
 80140d0:	061b      	lsls	r3, r3, #24
 80140d2:	4619      	mov	r1, r3
 80140d4:	4a58      	ldr	r2, [pc, #352]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80140d6:	4b5c      	ldr	r3, [pc, #368]	; (8014248 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x298>)
 80140d8:	430b      	orrs	r3, r1
 80140da:	61d3      	str	r3, [r2, #28]

        /* set DMA2D foreground color */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	330c      	adds	r3, #12
 80140e0:	4618      	mov	r0, r3
 80140e2:	f7fc f80b 	bl	80100fc <_ZNK8touchgfx9colortypecvmEv>
 80140e6:	4603      	mov	r3, r0
 80140e8:	4a53      	ldr	r2, [pc, #332]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80140ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80140ee:	6213      	str	r3, [r2, #32]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	7fdb      	ldrb	r3, [r3, #31]
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d005      	beq.n	8014104 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80140f8:	494f      	ldr	r1, [pc, #316]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80140fa:	697a      	ldr	r2, [r7, #20]
 80140fc:	4b50      	ldr	r3, [pc, #320]	; (8014240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 80140fe:	4313      	orrs	r3, r2
 8014100:	624b      	str	r3, [r1, #36]	; 0x24
 8014102:	e002      	b.n	801410a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014104:	4a4c      	ldr	r2, [pc, #304]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014106:	697b      	ldr	r3, [r7, #20]
 8014108:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	691a      	ldr	r2, [r3, #16]
 801410e:	4b4a      	ldr	r3, [pc, #296]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014110:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014112:	4b49      	ldr	r3, [pc, #292]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014114:	4a4b      	ldr	r2, [pc, #300]	; (8014244 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8014116:	601a      	str	r2, [r3, #0]
        break;
 8014118:	e10c      	b.n	8014334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	7f1b      	ldrb	r3, [r3, #28]
 801411e:	061b      	lsls	r3, r3, #24
 8014120:	461a      	mov	r2, r3
 8014122:	69bb      	ldr	r3, [r7, #24]
 8014124:	4313      	orrs	r3, r2
 8014126:	4a44      	ldr	r2, [pc, #272]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801412c:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 801412e:	683b      	ldr	r3, [r7, #0]
 8014130:	7fdb      	ldrb	r3, [r3, #31]
 8014132:	2b00      	cmp	r3, #0
 8014134:	d005      	beq.n	8014142 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x192>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8014136:	4940      	ldr	r1, [pc, #256]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014138:	697a      	ldr	r2, [r7, #20]
 801413a:	4b41      	ldr	r3, [pc, #260]	; (8014240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801413c:	4313      	orrs	r3, r2
 801413e:	624b      	str	r3, [r1, #36]	; 0x24
 8014140:	e002      	b.n	8014148 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x198>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014142:	4a3d      	ldr	r2, [pc, #244]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	691a      	ldr	r2, [r3, #16]
 801414c:	4b3a      	ldr	r3, [pc, #232]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801414e:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014150:	4b39      	ldr	r3, [pc, #228]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014152:	4a3c      	ldr	r2, [pc, #240]	; (8014244 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8014154:	601a      	str	r2, [r3, #0]
        break;
 8014156:	e0ed      	b.n	8014334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_L8:
        {
            bool blend = true;
 8014158:	2301      	movs	r3, #1
 801415a:	77fb      	strb	r3, [r7, #31]
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	689b      	ldr	r3, [r3, #8]
 8014160:	60fb      	str	r3, [r7, #12]

            /* Write foreground CLUT memory address */
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	1d1a      	adds	r2, r3, #4
 8014166:	4b34      	ldr	r3, [pc, #208]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014168:	62da      	str	r2, [r3, #44]	; 0x2c

            /* Set DMA2D color mode and alpha mode */
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801416a:	683b      	ldr	r3, [r7, #0]
 801416c:	7f1b      	ldrb	r3, [r3, #28]
 801416e:	061b      	lsls	r3, r3, #24
 8014170:	461a      	mov	r2, r3
 8014172:	69bb      	ldr	r3, [r7, #24]
 8014174:	4313      	orrs	r3, r2
 8014176:	4a30      	ldr	r2, [pc, #192]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801417c:	61d3      	str	r3, [r2, #28]

            /* Write DMA2D BGPFCCR register */
            if (blitOp.replaceBgAlpha)
 801417e:	683b      	ldr	r3, [r7, #0]
 8014180:	7fdb      	ldrb	r3, [r3, #31]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d005      	beq.n	8014192 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e2>
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8014186:	492c      	ldr	r1, [pc, #176]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014188:	697a      	ldr	r2, [r7, #20]
 801418a:	4b2d      	ldr	r3, [pc, #180]	; (8014240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x290>)
 801418c:	4313      	orrs	r3, r2
 801418e:	624b      	str	r3, [r1, #36]	; 0x24
 8014190:	e002      	b.n	8014198 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e8>
            }
            else
            {
                WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8014192:	4a29      	ldr	r2, [pc, #164]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014194:	697b      	ldr	r3, [r7, #20]
 8014196:	6253      	str	r3, [r2, #36]	; 0x24
            }

            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	691a      	ldr	r2, [r3, #16]
 801419c:	4b26      	ldr	r3, [pc, #152]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801419e:	615a      	str	r2, [r3, #20]

            /* Configure CLUT */
            switch ((Bitmap::ClutFormat)palette->format)
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	881b      	ldrh	r3, [r3, #0]
 80141a4:	b2db      	uxtb	r3, r3
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d002      	beq.n	80141b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x200>
 80141aa:	2b01      	cmp	r3, #1
 80141ac:	d00d      	beq.n	80141ca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x21a>
 80141ae:	e020      	b.n	80141f2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x242>
            {
                case Bitmap::CLUT_FORMAT_L8_ARGB8888:
                    /* Write foreground CLUT size and CLUT color mode */
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 80141b0:	4b21      	ldr	r3, [pc, #132]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80141b2:	69da      	ldr	r2, [r3, #28]
 80141b4:	4b25      	ldr	r3, [pc, #148]	; (801424c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80141b6:	4013      	ands	r3, r2
 80141b8:	68fa      	ldr	r2, [r7, #12]
 80141ba:	8852      	ldrh	r2, [r2, #2]
 80141bc:	3a01      	subs	r2, #1
 80141be:	0212      	lsls	r2, r2, #8
 80141c0:	4611      	mov	r1, r2
 80141c2:	4a1d      	ldr	r2, [pc, #116]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80141c4:	430b      	orrs	r3, r1
 80141c6:	61d3      	str	r3, [r2, #28]
                    break;
 80141c8:	e01a      	b.n	8014200 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>
                case Bitmap::CLUT_FORMAT_L8_RGB888:
                    if(blitOp.alpha == 255)
 80141ca:	683b      	ldr	r3, [r7, #0]
 80141cc:	7f1b      	ldrb	r3, [r3, #28]
 80141ce:	2bff      	cmp	r3, #255	; 0xff
 80141d0:	d101      	bne.n	80141d6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
                    {
                        blend = false;
 80141d2:	2300      	movs	r3, #0
 80141d4:	77fb      	strb	r3, [r7, #31]
                    }
                    MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 80141d6:	4b18      	ldr	r3, [pc, #96]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80141d8:	69da      	ldr	r2, [r3, #28]
 80141da:	4b1c      	ldr	r3, [pc, #112]	; (801424c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80141dc:	4013      	ands	r3, r2
 80141de:	68fa      	ldr	r2, [r7, #12]
 80141e0:	8852      	ldrh	r2, [r2, #2]
 80141e2:	3a01      	subs	r2, #1
 80141e4:	0212      	lsls	r2, r2, #8
 80141e6:	4313      	orrs	r3, r2
 80141e8:	4a13      	ldr	r2, [pc, #76]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 80141ea:	f043 0310 	orr.w	r3, r3, #16
 80141ee:	61d3      	str	r3, [r2, #28]
                    break;
 80141f0:	e006      	b.n	8014200 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x250>
                case Bitmap::CLUT_FORMAT_L8_RGB565:
                default:
                    assert(0 && "Unsupported format");
 80141f2:	4b17      	ldr	r3, [pc, #92]	; (8014250 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 80141f4:	4a17      	ldr	r2, [pc, #92]	; (8014254 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80141f6:	f240 1137 	movw	r1, #311	; 0x137
 80141fa:	4817      	ldr	r0, [pc, #92]	; (8014258 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80141fc:	f015 fda8 	bl	8029d50 <__assert_func>
                    break;
            }

            /* Enable the CLUT loading for the foreground */
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8014200:	4b0d      	ldr	r3, [pc, #52]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014202:	69db      	ldr	r3, [r3, #28]
 8014204:	4a0c      	ldr	r2, [pc, #48]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014206:	f043 0320 	orr.w	r3, r3, #32
 801420a:	61d3      	str	r3, [r2, #28]

            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 801420c:	4b0a      	ldr	r3, [pc, #40]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 801420e:	69db      	ldr	r3, [r3, #28]
 8014210:	f003 0320 	and.w	r3, r3, #32
 8014214:	2b00      	cmp	r3, #0
 8014216:	bf14      	ite	ne
 8014218:	2301      	movne	r3, #1
 801421a:	2300      	moveq	r3, #0
 801421c:	b2db      	uxtb	r3, r3
 801421e:	2b00      	cmp	r3, #0
 8014220:	d000      	beq.n	8014224 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x274>
 8014222:	e7f3      	b.n	801420c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x25c>
            {
            }
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8014224:	4b04      	ldr	r3, [pc, #16]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014226:	2210      	movs	r2, #16
 8014228:	609a      	str	r2, [r3, #8]

            /* Set DMA2D mode */
            if(blend)
 801422a:	7ffb      	ldrb	r3, [r7, #31]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d015      	beq.n	801425c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 8014230:	4b01      	ldr	r3, [pc, #4]	; (8014238 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x288>)
 8014232:	4a04      	ldr	r2, [pc, #16]	; (8014244 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x294>)
 8014234:	601a      	str	r2, [r3, #0]
            else
            {
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
            }
        }
        break;
 8014236:	e07d      	b.n	8014334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
 8014238:	4002b000 	.word	0x4002b000
 801423c:	0002000a 	.word	0x0002000a
 8014240:	ff010000 	.word	0xff010000
 8014244:	00020201 	.word	0x00020201
 8014248:	00020009 	.word	0x00020009
 801424c:	ffff00ef 	.word	0xffff00ef
 8014250:	0802e0bc 	.word	0x0802e0bc
 8014254:	0802e0d8 	.word	0x0802e0d8
 8014258:	0802e044 	.word	0x0802e044
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 801425c:	4b37      	ldr	r3, [pc, #220]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801425e:	4a38      	ldr	r2, [pc, #224]	; (8014340 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 8014260:	601a      	str	r2, [r3, #0]
        break;
 8014262:	e067      	b.n	8014334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    case BLIT_OP_COPY_ARGB8888:
        /* Write DMA2D FGPFCCR register */
        if (blitOp.replaceFgAlpha)
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	f893 3020 	ldrb.w	r3, [r3, #32]
 801426a:	2b00      	cmp	r3, #0
 801426c:	d00a      	beq.n	8014284 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2d4>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 801426e:	683b      	ldr	r3, [r7, #0]
 8014270:	7f1b      	ldrb	r3, [r3, #28]
 8014272:	061b      	lsls	r3, r3, #24
 8014274:	461a      	mov	r2, r3
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	4313      	orrs	r3, r2
 801427a:	4a30      	ldr	r2, [pc, #192]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801427c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014280:	61d3      	str	r3, [r2, #28]
 8014282:	e002      	b.n	801428a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2da>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8014284:	4a2d      	ldr	r2, [pc, #180]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8014286:	69bb      	ldr	r3, [r7, #24]
 8014288:	61d3      	str	r3, [r2, #28]
        }

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 801428a:	683b      	ldr	r3, [r7, #0]
 801428c:	7fdb      	ldrb	r3, [r3, #31]
 801428e:	2b00      	cmp	r3, #0
 8014290:	d005      	beq.n	801429e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ee>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 8014292:	492a      	ldr	r1, [pc, #168]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8014294:	697a      	ldr	r2, [r7, #20]
 8014296:	4b2b      	ldr	r3, [pc, #172]	; (8014344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8014298:	4313      	orrs	r3, r2
 801429a:	624b      	str	r3, [r1, #36]	; 0x24
 801429c:	e002      	b.n	80142a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2f4>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 801429e:	4a27      	ldr	r2, [pc, #156]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	691a      	ldr	r2, [r3, #16]
 80142a8:	4b24      	ldr	r3, [pc, #144]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80142aa:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80142ac:	4b23      	ldr	r3, [pc, #140]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80142ae:	4a26      	ldr	r2, [pc, #152]	; (8014348 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>)
 80142b0:	601a      	str	r2, [r3, #0]
        break;
 80142b2:	e03f      	b.n	8014334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>

    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	7f1b      	ldrb	r3, [r3, #28]
 80142b8:	061b      	lsls	r3, r3, #24
 80142ba:	461a      	mov	r2, r3
 80142bc:	69bb      	ldr	r3, [r7, #24]
 80142be:	4313      	orrs	r3, r2
 80142c0:	4a1e      	ldr	r2, [pc, #120]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80142c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80142c6:	61d3      	str	r3, [r2, #28]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 80142c8:	683b      	ldr	r3, [r7, #0]
 80142ca:	7fdb      	ldrb	r3, [r3, #31]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d005      	beq.n	80142dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32c>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80142d0:	491a      	ldr	r1, [pc, #104]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80142d2:	697a      	ldr	r2, [r7, #20]
 80142d4:	4b1b      	ldr	r3, [pc, #108]	; (8014344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 80142d6:	4313      	orrs	r3, r2
 80142d8:	624b      	str	r3, [r1, #36]	; 0x24
 80142da:	e002      	b.n	80142e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x332>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80142dc:	4a17      	ldr	r2, [pc, #92]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80142de:	697b      	ldr	r3, [r7, #20]
 80142e0:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80142e2:	683b      	ldr	r3, [r7, #0]
 80142e4:	691a      	ldr	r2, [r3, #16]
 80142e6:	4b15      	ldr	r3, [pc, #84]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80142e8:	615a      	str	r2, [r3, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
 80142ea:	4b14      	ldr	r3, [pc, #80]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80142ec:	4a16      	ldr	r2, [pc, #88]	; (8014348 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x398>)
 80142ee:	601a      	str	r2, [r3, #0]
        break;
 80142f0:	e020      	b.n	8014334 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x384>
    default: /* BLIT_OP_COPY & BLIT_OP_COPY_16BIT */
        /* Set DMA2D color mode and alpha mode */
        if (blitOp.replaceFgAlpha)
 80142f2:	683b      	ldr	r3, [r7, #0]
 80142f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d005      	beq.n	8014308 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x358>
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80142fc:	490f      	ldr	r1, [pc, #60]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 80142fe:	69ba      	ldr	r2, [r7, #24]
 8014300:	4b10      	ldr	r3, [pc, #64]	; (8014344 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x394>)
 8014302:	4313      	orrs	r3, r2
 8014304:	61cb      	str	r3, [r1, #28]
 8014306:	e002      	b.n	801430e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x35e>
        }
        else
        {
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8014308:	4a0c      	ldr	r2, [pc, #48]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801430a:	69bb      	ldr	r3, [r7, #24]
 801430c:	61d3      	str	r3, [r2, #28]
        }

        /* Perform pixel-format-conversion (PFC) If Bitmap format is not same format as framebuffer format */
        if (blitOp.srcFormat != blitOp.dstFormat)
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	7f5a      	ldrb	r2, [r3, #29]
 8014312:	683b      	ldr	r3, [r7, #0]
 8014314:	7f9b      	ldrb	r3, [r3, #30]
 8014316:	429a      	cmp	r2, r3
 8014318:	d007      	beq.n	801432a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x37a>
        {
            /* Configure DMA2D Stream source2 address */
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	691a      	ldr	r2, [r3, #16]
 801431e:	4b07      	ldr	r3, [pc, #28]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8014320:	615a      	str	r2, [r3, #20]

            /* Start DMA2D : PFC Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
 8014322:	4b06      	ldr	r3, [pc, #24]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 8014324:	4a06      	ldr	r2, [pc, #24]	; (8014340 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x390>)
 8014326:	601a      	str	r2, [r3, #0]
        else
        {
            /* Start DMA2D : M2M Mode */
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
        }
        break;
 8014328:	e003      	b.n	8014332 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x382>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
 801432a:	4b04      	ldr	r3, [pc, #16]	; (801433c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x38c>)
 801432c:	f240 2201 	movw	r2, #513	; 0x201
 8014330:	601a      	str	r2, [r3, #0]
        break;
 8014332:	bf00      	nop
    }
}
 8014334:	bf00      	nop
 8014336:	3720      	adds	r7, #32
 8014338:	46bd      	mov	sp, r7
 801433a:	bd80      	pop	{r7, pc}
 801433c:	4002b000 	.word	0x4002b000
 8014340:	00010201 	.word	0x00010201
 8014344:	ff010000 	.word	0xff010000
 8014348:	00020201 	.word	0x00020201

0801434c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * BLIT_OP_FILL
 * BLIT_OP_FILL_16BIT
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 801434c:	b590      	push	{r4, r7, lr}
 801434e:	b085      	sub	sp, #20
 8014350:	af00      	add	r7, sp, #0
 8014352:	6078      	str	r0, [r7, #4]
 8014354:	6039      	str	r1, [r7, #0]
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8014356:	683b      	ldr	r3, [r7, #0]
 8014358:	7f9b      	ldrb	r3, [r3, #30]
 801435a:	4619      	mov	r1, r3
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f7ff fddd 	bl	8013f1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE>
 8014362:	60f8      	str	r0, [r7, #12]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8014364:	4a40      	ldr	r2, [pc, #256]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	6353      	str	r3, [r2, #52]	; 0x34

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 801436a:	683b      	ldr	r3, [r7, #0]
 801436c:	8adb      	ldrh	r3, [r3, #22]
 801436e:	461a      	mov	r2, r3
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	8a9b      	ldrh	r3, [r3, #20]
 8014374:	041b      	lsls	r3, r3, #16
 8014376:	431a      	orrs	r2, r3
 8014378:	4b3b      	ldr	r3, [pc, #236]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801437a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 801437c:	683b      	ldr	r3, [r7, #0]
 801437e:	691a      	ldr	r2, [r3, #16]
 8014380:	4b39      	ldr	r3, [pc, #228]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8014382:	63da      	str	r2, [r3, #60]	; 0x3c

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	8b5b      	ldrh	r3, [r3, #26]
 8014388:	461a      	mov	r2, r3
 801438a:	683b      	ldr	r3, [r7, #0]
 801438c:	8a9b      	ldrh	r3, [r3, #20]
 801438e:	1ad2      	subs	r2, r2, r3
 8014390:	4b35      	ldr	r3, [pc, #212]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8014392:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8014394:	683b      	ldr	r3, [r7, #0]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	2b08      	cmp	r3, #8
 801439a:	d13a      	bne.n	8014412 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xc6>
    {
        /* DMA2D BGOR register configuration -*/
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 801439c:	683b      	ldr	r3, [r7, #0]
 801439e:	8b5b      	ldrh	r3, [r3, #26]
 80143a0:	461a      	mov	r2, r3
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	8a9b      	ldrh	r3, [r3, #20]
 80143a6:	1ad2      	subs	r2, r2, r3
 80143a8:	4b2f      	ldr	r3, [pc, #188]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80143aa:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration -*/
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80143ac:	683b      	ldr	r3, [r7, #0]
 80143ae:	8b5b      	ldrh	r3, [r3, #26]
 80143b0:	461a      	mov	r2, r3
 80143b2:	683b      	ldr	r3, [r7, #0]
 80143b4:	8a9b      	ldrh	r3, [r3, #20]
 80143b6:	1ad2      	subs	r2, r2, r3
 80143b8:	4b2b      	ldr	r3, [pc, #172]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80143ba:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        if (blitOp.replaceBgAlpha)
 80143bc:	683b      	ldr	r3, [r7, #0]
 80143be:	7fdb      	ldrb	r3, [r3, #31]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d005      	beq.n	80143d0 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x84>
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | ((0xFFUL << DMA2D_BGPFCCR_ALPHA_Pos) & DMA2D_BGPFCCR_ALPHA));
 80143c4:	4928      	ldr	r1, [pc, #160]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80143c6:	68fa      	ldr	r2, [r7, #12]
 80143c8:	4b28      	ldr	r3, [pc, #160]	; (801446c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x120>)
 80143ca:	4313      	orrs	r3, r2
 80143cc:	624b      	str	r3, [r1, #36]	; 0x24
 80143ce:	e002      	b.n	80143d6 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x8a>
        }
        else
        {
            WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80143d0:	4a25      	ldr	r2, [pc, #148]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80143d2:	68fb      	ldr	r3, [r7, #12]
 80143d4:	6253      	str	r3, [r2, #36]	; 0x24
        }

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << DMA2D_FGPFCCR_ALPHA_Pos) & DMA2D_FGPFCCR_ALPHA));
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	7f1b      	ldrb	r3, [r3, #28]
 80143da:	061b      	lsls	r3, r3, #24
 80143dc:	4619      	mov	r1, r3
 80143de:	4a22      	ldr	r2, [pc, #136]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80143e0:	4b23      	ldr	r3, [pc, #140]	; (8014470 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x124>)
 80143e2:	430b      	orrs	r3, r1
 80143e4:	61d3      	str	r3, [r2, #28]

        /* DMA2D FGCOLR register configuration -*/
        WRITE_REG(DMA2D->FGCOLR, blitOp.color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80143e6:	683b      	ldr	r3, [r7, #0]
 80143e8:	330c      	adds	r3, #12
 80143ea:	4618      	mov	r0, r3
 80143ec:	f7fb fe86 	bl	80100fc <_ZNK8touchgfx9colortypecvmEv>
 80143f0:	4603      	mov	r3, r0
 80143f2:	4a1d      	ldr	r2, [pc, #116]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 80143f4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80143f8:	6213      	str	r3, [r2, #32]

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80143fa:	683b      	ldr	r3, [r7, #0]
 80143fc:	691a      	ldr	r2, [r3, #16]
 80143fe:	4b1a      	ldr	r3, [pc, #104]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8014400:	615a      	str	r2, [r3, #20]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8014402:	683b      	ldr	r3, [r7, #0]
 8014404:	691a      	ldr	r2, [r3, #16]
 8014406:	4b18      	ldr	r3, [pc, #96]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8014408:	60da      	str	r2, [r3, #12]

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
 801440a:	4b17      	ldr	r3, [pc, #92]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801440c:	4a19      	ldr	r2, [pc, #100]	; (8014474 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x128>)
 801440e:	601a      	str	r2, [r3, #0]
        }

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
    }
}
 8014410:	e025      	b.n	801445e <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x112>
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8014412:	4a15      	ldr	r2, [pc, #84]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	61d3      	str	r3, [r2, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8014418:	4b13      	ldr	r3, [pc, #76]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801441a:	2200      	movs	r2, #0
 801441c:	611a      	str	r2, [r3, #16]
        if (blitOp.dstFormat == Bitmap::RGB565)
 801441e:	683b      	ldr	r3, [r7, #0]
 8014420:	7f9b      	ldrb	r3, [r3, #30]
 8014422:	2b00      	cmp	r3, #0
 8014424:	d109      	bne.n	801443a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xee>
            WRITE_REG(DMA2D->OCOLR, blitOp.color & (DMA2D_OCOLR_BLUE_2 | DMA2D_OCOLR_GREEN_2 | DMA2D_OCOLR_RED_2));
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	330c      	adds	r3, #12
 801442a:	4618      	mov	r0, r3
 801442c:	f7fb fe66 	bl	80100fc <_ZNK8touchgfx9colortypecvmEv>
 8014430:	4603      	mov	r3, r0
 8014432:	4a0d      	ldr	r2, [pc, #52]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8014434:	b29b      	uxth	r3, r3
 8014436:	6393      	str	r3, [r2, #56]	; 0x38
 8014438:	e00e      	b.n	8014458 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
            WRITE_REG(DMA2D->OCOLR, ((blitOp.alpha << 24) & DMA2D_OCOLR_ALPHA_1) | ((blitOp.color) & (DMA2D_OCOLR_BLUE_1 | DMA2D_OCOLR_GREEN_1 | DMA2D_OCOLR_RED_1)));
 801443a:	683b      	ldr	r3, [r7, #0]
 801443c:	7f1b      	ldrb	r3, [r3, #28]
 801443e:	061b      	lsls	r3, r3, #24
 8014440:	461c      	mov	r4, r3
 8014442:	683b      	ldr	r3, [r7, #0]
 8014444:	330c      	adds	r3, #12
 8014446:	4618      	mov	r0, r3
 8014448:	f7fb fe58 	bl	80100fc <_ZNK8touchgfx9colortypecvmEv>
 801444c:	4603      	mov	r3, r0
 801444e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014452:	4a05      	ldr	r2, [pc, #20]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 8014454:	4323      	orrs	r3, r4
 8014456:	6393      	str	r3, [r2, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
 8014458:	4b03      	ldr	r3, [pc, #12]	; (8014468 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x11c>)
 801445a:	4a07      	ldr	r2, [pc, #28]	; (8014478 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>)
 801445c:	601a      	str	r2, [r3, #0]
}
 801445e:	bf00      	nop
 8014460:	3714      	adds	r7, #20
 8014462:	46bd      	mov	sp, r7
 8014464:	bd90      	pop	{r4, r7, pc}
 8014466:	bf00      	nop
 8014468:	4002b000 	.word	0x4002b000
 801446c:	ff010000 	.word	0xff010000
 8014470:	00010009 	.word	0x00010009
 8014474:	00020201 	.word	0x00020201
 8014478:	00030201 	.word	0x00030201

0801447c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801447c:	b580      	push	{r7, lr}
 801447e:	b082      	sub	sp, #8
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	4a05      	ldr	r2, [pc, #20]	; (801449c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	601a      	str	r2, [r3, #0]
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	4618      	mov	r0, r3
 801448e:	f7ff fbb3 	bl	8013bf8 <_ZN8touchgfx9DMA_QueueD1Ev>
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	4618      	mov	r0, r3
 8014496:	3708      	adds	r7, #8
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	08030438 	.word	0x08030438

080144a0 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
 80144a8:	6878      	ldr	r0, [r7, #4]
 80144aa:	f7ff ffe7 	bl	801447c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80144ae:	2114      	movs	r1, #20
 80144b0:	6878      	ldr	r0, [r7, #4]
 80144b2:	f015 fba3 	bl	8029bfc <_ZdlPvj>
 80144b6:	687b      	ldr	r3, [r7, #4]
 80144b8:	4618      	mov	r0, r3
 80144ba:	3708      	adds	r7, #8
 80144bc:	46bd      	mov	sp, r7
 80144be:	bd80      	pop	{r7, pc}

080144c0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 80144c0:	b480      	push	{r7}
 80144c2:	b083      	sub	sp, #12
 80144c4:	af00      	add	r7, sp, #0
 80144c6:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80144c8:	4a04      	ldr	r2, [pc, #16]	; (80144dc <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6013      	str	r3, [r2, #0]
    }
 80144ce:	bf00      	nop
 80144d0:	370c      	adds	r7, #12
 80144d2:	46bd      	mov	sp, r7
 80144d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144d8:	4770      	bx	lr
 80144da:	bf00      	nop
 80144dc:	2003c320 	.word	0x2003c320

080144e0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80144e0:	b480      	push	{r7}
 80144e2:	b085      	sub	sp, #20
 80144e4:	af00      	add	r7, sp, #0
 80144e6:	60f8      	str	r0, [r7, #12]
 80144e8:	60b9      	str	r1, [r7, #8]
 80144ea:	607a      	str	r2, [r7, #4]
 80144ec:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80144ee:	4a0b      	ldr	r2, [pc, #44]	; (801451c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	601a      	str	r2, [r3, #0]
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	68ba      	ldr	r2, [r7, #8]
 80144f8:	605a      	str	r2, [r3, #4]
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	687a      	ldr	r2, [r7, #4]
 80144fe:	609a      	str	r2, [r3, #8]
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	683a      	ldr	r2, [r7, #0]
 8014504:	60da      	str	r2, [r3, #12]
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	69ba      	ldr	r2, [r7, #24]
 801450a:	611a      	str	r2, [r3, #16]
    {
    }
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	4618      	mov	r0, r3
 8014510:	3714      	adds	r7, #20
 8014512:	46bd      	mov	sp, r7
 8014514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014518:	4770      	bx	lr
 801451a:	bf00      	nop
 801451c:	080300dc 	.word	0x080300dc

08014520 <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 8014520:	b480      	push	{r7}
 8014522:	b083      	sub	sp, #12
 8014524:	af00      	add	r7, sp, #0
 8014526:	6078      	str	r0, [r7, #4]
    {
 8014528:	4a04      	ldr	r2, [pc, #16]	; (801453c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	601a      	str	r2, [r3, #0]
    }
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	4618      	mov	r0, r3
 8014532:	370c      	adds	r7, #12
 8014534:	46bd      	mov	sp, r7
 8014536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453a:	4770      	bx	lr
 801453c:	080300dc 	.word	0x080300dc

08014540 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014540:	b580      	push	{r7, lr}
 8014542:	b082      	sub	sp, #8
 8014544:	af00      	add	r7, sp, #0
 8014546:	6078      	str	r0, [r7, #4]
    }
 8014548:	6878      	ldr	r0, [r7, #4]
 801454a:	f7ff ffe9 	bl	8014520 <_ZN8touchgfx7MVPHeapD1Ev>
 801454e:	2114      	movs	r1, #20
 8014550:	6878      	ldr	r0, [r7, #4]
 8014552:	f015 fb53 	bl	8029bfc <_ZdlPvj>
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	4618      	mov	r0, r3
 801455a:	3708      	adds	r7, #8
 801455c:	46bd      	mov	sp, r7
 801455e:	bd80      	pop	{r7, pc}

08014560 <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 8014560:	b480      	push	{r7}
 8014562:	b083      	sub	sp, #12
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
    {
 8014568:	4a04      	ldr	r2, [pc, #16]	; (801457c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	601a      	str	r2, [r3, #0]
    }
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	4618      	mov	r0, r3
 8014572:	370c      	adds	r7, #12
 8014574:	46bd      	mov	sp, r7
 8014576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457a:	4770      	bx	lr
 801457c:	080308a8 	.word	0x080308a8

08014580 <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 8014580:	b580      	push	{r7, lr}
 8014582:	b082      	sub	sp, #8
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
    }
 8014588:	6878      	ldr	r0, [r7, #4]
 801458a:	f7ff ffe9 	bl	8014560 <_ZN8touchgfx3LCDD1Ev>
 801458e:	2108      	movs	r1, #8
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f015 fb33 	bl	8029bfc <_ZdlPvj>
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	4618      	mov	r0, r3
 801459a:	3708      	adds	r7, #8
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}

080145a0 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 80145a0:	b480      	push	{r7}
 80145a2:	b083      	sub	sp, #12
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	2200      	movs	r2, #0
 80145ac:	801a      	strh	r2, [r3, #0]
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2200      	movs	r2, #0
 80145b2:	805a      	strh	r2, [r3, #2]
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2200      	movs	r2, #0
 80145b8:	809a      	strh	r2, [r3, #4]
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	2200      	movs	r2, #0
 80145be:	80da      	strh	r2, [r3, #6]
 80145c0:	687b      	ldr	r3, [r7, #4]
 80145c2:	2200      	movs	r2, #0
 80145c4:	811a      	strh	r2, [r3, #8]
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2200      	movs	r2, #0
 80145ca:	815a      	strh	r2, [r3, #10]
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	2200      	movs	r2, #0
 80145d0:	819a      	strh	r2, [r3, #12]
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2200      	movs	r2, #0
 80145d6:	739a      	strb	r2, [r3, #14]
        {
        }
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	4618      	mov	r0, r3
 80145dc:	370c      	adds	r7, #12
 80145de:	46bd      	mov	sp, r7
 80145e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e4:	4770      	bx	lr

080145e6 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80145e6:	b580      	push	{r7, lr}
 80145e8:	b082      	sub	sp, #8
 80145ea:	af00      	add	r7, sp, #0
 80145ec:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	4618      	mov	r0, r3
 80145f2:	f7ff ffd5 	bl	80145a0 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	2200      	movs	r2, #0
 80145fa:	611a      	str	r2, [r3, #16]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2200      	movs	r2, #0
 8014600:	829a      	strh	r2, [r3, #20]
    {
    }
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	4618      	mov	r0, r3
 8014606:	3708      	adds	r7, #8
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}

0801460c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 801460c:	b580      	push	{r7, lr}
 801460e:	b084      	sub	sp, #16
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	60b9      	str	r1, [r7, #8]
 8014616:	607a      	str	r2, [r7, #4]
 8014618:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 801461a:	4a55      	ldr	r2, [pc, #340]	; (8014770 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	601a      	str	r2, [r3, #0]
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	68ba      	ldr	r2, [r7, #8]
 8014624:	605a      	str	r2, [r3, #4]
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	687a      	ldr	r2, [r7, #4]
 801462a:	609a      	str	r2, [r3, #8]
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	683a      	ldr	r2, [r7, #0]
 8014630:	60da      	str	r2, [r3, #12]
 8014632:	68fb      	ldr	r3, [r7, #12]
 8014634:	2200      	movs	r2, #0
 8014636:	611a      	str	r2, [r3, #16]
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	2200      	movs	r2, #0
 801463c:	615a      	str	r2, [r3, #20]
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	2200      	movs	r2, #0
 8014642:	619a      	str	r2, [r3, #24]
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	331c      	adds	r3, #28
 8014648:	4618      	mov	r0, r3
 801464a:	f7ff ffcc 	bl	80145e6 <_ZN8touchgfx8GesturesC1Ev>
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	2200      	movs	r2, #0
 8014652:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	2200      	movs	r2, #0
 801465a:	639a      	str	r2, [r3, #56]	; 0x38
 801465c:	68fb      	ldr	r3, [r7, #12]
 801465e:	2200      	movs	r2, #0
 8014660:	63da      	str	r2, [r3, #60]	; 0x3c
 8014662:	68fb      	ldr	r3, [r7, #12]
 8014664:	2200      	movs	r2, #0
 8014666:	641a      	str	r2, [r3, #64]	; 0x40
 8014668:	68fb      	ldr	r3, [r7, #12]
 801466a:	2200      	movs	r2, #0
 801466c:	645a      	str	r2, [r3, #68]	; 0x44
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	2200      	movs	r2, #0
 8014672:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	2201      	movs	r2, #1
 801467a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	2200      	movs	r2, #0
 8014682:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	2200      	movs	r2, #0
 801468a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801468e:	68fb      	ldr	r3, [r7, #12]
 8014690:	2200      	movs	r2, #0
 8014692:	64da      	str	r2, [r3, #76]	; 0x4c
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	3350      	adds	r3, #80	; 0x50
 8014698:	4618      	mov	r0, r3
 801469a:	f7fa fec5 	bl	800f428 <_ZN8touchgfx4RectC1Ev>
 801469e:	68fb      	ldr	r3, [r7, #12]
 80146a0:	2200      	movs	r2, #0
 80146a2:	659a      	str	r2, [r3, #88]	; 0x58
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	2200      	movs	r2, #0
 80146a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	2200      	movs	r2, #0
 80146ae:	661a      	str	r2, [r3, #96]	; 0x60
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	2201      	movs	r2, #1
 80146b4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80146b8:	68fb      	ldr	r3, [r7, #12]
 80146ba:	2200      	movs	r2, #0
 80146bc:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80146c0:	68fb      	ldr	r3, [r7, #12]
 80146c2:	2200      	movs	r2, #0
 80146c4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	2201      	movs	r2, #1
 80146cc:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80146d0:	68fb      	ldr	r3, [r7, #12]
 80146d2:	2200      	movs	r2, #0
 80146d4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	2200      	movs	r2, #0
 80146dc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	2200      	movs	r2, #0
 80146e4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80146e8:	68fb      	ldr	r3, [r7, #12]
 80146ea:	2200      	movs	r2, #0
 80146ec:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	2200      	movs	r2, #0
 80146f4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	2200      	movs	r2, #0
 80146fc:	671a      	str	r2, [r3, #112]	; 0x70
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	2200      	movs	r2, #0
 8014702:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	2200      	movs	r2, #0
 801470a:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 801470e:	68fb      	ldr	r3, [r7, #12]
 8014710:	2200      	movs	r2, #0
 8014712:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 8014716:	68fb      	ldr	r3, [r7, #12]
 8014718:	2201      	movs	r2, #1
 801471a:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	2201      	movs	r2, #1
 8014722:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8014726:	4a13      	ldr	r2, [pc, #76]	; (8014774 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8014728:	68fb      	ldr	r3, [r7, #12]
 801472a:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 801472c:	4a12      	ldr	r2, [pc, #72]	; (8014778 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801472e:	8b3b      	ldrh	r3, [r7, #24]
 8014730:	8013      	strh	r3, [r2, #0]
 8014732:	4b11      	ldr	r3, [pc, #68]	; (8014778 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8014734:	881a      	ldrh	r2, [r3, #0]
 8014736:	4b11      	ldr	r3, [pc, #68]	; (801477c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8014738:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 801473a:	4a11      	ldr	r2, [pc, #68]	; (8014780 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801473c:	8bbb      	ldrh	r3, [r7, #28]
 801473e:	8013      	strh	r3, [r2, #0]
 8014740:	4b0f      	ldr	r3, [pc, #60]	; (8014780 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8014742:	881a      	ldrh	r2, [r3, #0]
 8014744:	4b0f      	ldr	r3, [pc, #60]	; (8014784 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8014746:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8014748:	4b0f      	ldr	r3, [pc, #60]	; (8014788 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 801474a:	2200      	movs	r2, #0
 801474c:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801474e:	8b3a      	ldrh	r2, [r7, #24]
 8014750:	8bbb      	ldrh	r3, [r7, #28]
 8014752:	429a      	cmp	r2, r3
 8014754:	bf34      	ite	cc
 8014756:	2301      	movcc	r3, #1
 8014758:	2300      	movcs	r3, #0
 801475a:	b2db      	uxtb	r3, r3
 801475c:	461a      	mov	r2, r3
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	4618      	mov	r0, r3
 8014768:	3710      	adds	r7, #16
 801476a:	46bd      	mov	sp, r7
 801476c:	bd80      	pop	{r7, pc}
 801476e:	bf00      	nop
 8014770:	08030310 	.word	0x08030310
 8014774:	2003c2bc 	.word	0x2003c2bc
 8014778:	2003c2b0 	.word	0x2003c2b0
 801477c:	2003c2b6 	.word	0x2003c2b6
 8014780:	2003c2b2 	.word	0x2003c2b2
 8014784:	2003c2b8 	.word	0x2003c2b8
 8014788:	2003c2b4 	.word	0x2003c2b4

0801478c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 801478c:	b580      	push	{r7, lr}
 801478e:	b082      	sub	sp, #8
 8014790:	af00      	add	r7, sp, #0
 8014792:	6078      	str	r0, [r7, #4]
 8014794:	6039      	str	r1, [r7, #0]
    {
        app.gotoMainScreenNoTransition();
 8014796:	683b      	ldr	r3, [r7, #0]
 8014798:	4618      	mov	r0, r3
 801479a:	f7fa fbb3 	bl	800ef04 <_ZN23FrontendApplicationBase26gotoMainScreenNoTransitionEv>
    }
 801479e:	bf00      	nop
 80147a0:	3708      	adds	r7, #8
 80147a2:	46bd      	mov	sp, r7
 80147a4:	bd80      	pop	{r7, pc}
	...

080147a8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 80147a8:	b580      	push	{r7, lr}
 80147aa:	b086      	sub	sp, #24
 80147ac:	af02      	add	r7, sp, #8
 80147ae:	60f8      	str	r0, [r7, #12]
 80147b0:	60b9      	str	r1, [r7, #8]
 80147b2:	607a      	str	r2, [r7, #4]
 80147b4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 80147b6:	68f8      	ldr	r0, [r7, #12]
 80147b8:	69bb      	ldr	r3, [r7, #24]
 80147ba:	9300      	str	r3, [sp, #0]
 80147bc:	683b      	ldr	r3, [r7, #0]
 80147be:	687a      	ldr	r2, [r7, #4]
 80147c0:	68b9      	ldr	r1, [r7, #8]
 80147c2:	f7ff fe8d 	bl	80144e0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80147c6:	4a04      	ldr	r2, [pc, #16]	; (80147d8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	601a      	str	r2, [r3, #0]
    {

    }
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	4618      	mov	r0, r3
 80147d0:	3710      	adds	r7, #16
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop
 80147d8:	080300c8 	.word	0x080300c8

080147dc <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80147dc:	b580      	push	{r7, lr}
 80147de:	af00      	add	r7, sp, #0
 80147e0:	4801      	ldr	r0, [pc, #4]	; (80147e8 <__tcf_0+0xc>)
 80147e2:	f000 f95d 	bl	8014aa0 <_ZN12FrontendHeapD1Ev>
 80147e6:	bd80      	pop	{r7, pc}
 80147e8:	20033a74 	.word	0x20033a74

080147ec <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80147ec:	b580      	push	{r7, lr}
 80147ee:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80147f0:	4b12      	ldr	r3, [pc, #72]	; (801483c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	f3bf 8f5b 	dmb	ish
 80147f8:	b2db      	uxtb	r3, r3
 80147fa:	f003 0301 	and.w	r3, r3, #1
 80147fe:	2b00      	cmp	r3, #0
 8014800:	bf0c      	ite	eq
 8014802:	2301      	moveq	r3, #1
 8014804:	2300      	movne	r3, #0
 8014806:	b2db      	uxtb	r3, r3
 8014808:	2b00      	cmp	r3, #0
 801480a:	d013      	beq.n	8014834 <_ZN12FrontendHeap11getInstanceEv+0x48>
 801480c:	480b      	ldr	r0, [pc, #44]	; (801483c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 801480e:	f015 f9f7 	bl	8029c00 <__cxa_guard_acquire>
 8014812:	4603      	mov	r3, r0
 8014814:	2b00      	cmp	r3, #0
 8014816:	bf14      	ite	ne
 8014818:	2301      	movne	r3, #1
 801481a:	2300      	moveq	r3, #0
 801481c:	b2db      	uxtb	r3, r3
 801481e:	2b00      	cmp	r3, #0
 8014820:	d008      	beq.n	8014834 <_ZN12FrontendHeap11getInstanceEv+0x48>
 8014822:	4807      	ldr	r0, [pc, #28]	; (8014840 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8014824:	f000 f868 	bl	80148f8 <_ZN12FrontendHeapC1Ev>
 8014828:	4806      	ldr	r0, [pc, #24]	; (8014844 <_ZN12FrontendHeap11getInstanceEv+0x58>)
 801482a:	f015 faaf 	bl	8029d8c <atexit>
 801482e:	4803      	ldr	r0, [pc, #12]	; (801483c <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014830:	f015 f9f2 	bl	8029c18 <__cxa_guard_release>
        return instance;
 8014834:	4b02      	ldr	r3, [pc, #8]	; (8014840 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8014836:	4618      	mov	r0, r3
 8014838:	bd80      	pop	{r7, pc}
 801483a:	bf00      	nop
 801483c:	2003737c 	.word	0x2003737c
 8014840:	20033a74 	.word	0x20033a74
 8014844:	080147dd 	.word	0x080147dd

08014848 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
 8014850:	4a05      	ldr	r2, [pc, #20]	; (8014868 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	601a      	str	r2, [r3, #0]
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	4618      	mov	r0, r3
 801485a:	f7ff fe61 	bl	8014520 <_ZN8touchgfx7MVPHeapD1Ev>
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	4618      	mov	r0, r3
 8014862:	3708      	adds	r7, #8
 8014864:	46bd      	mov	sp, r7
 8014866:	bd80      	pop	{r7, pc}
 8014868:	080300c8 	.word	0x080300c8

0801486c <_ZN16FrontendHeapBaseD0Ev>:
 801486c:	b580      	push	{r7, lr}
 801486e:	b082      	sub	sp, #8
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f7ff ffe7 	bl	8014848 <_ZN16FrontendHeapBaseD1Ev>
 801487a:	2114      	movs	r1, #20
 801487c:	6878      	ldr	r0, [r7, #4]
 801487e:	f015 f9bd 	bl	8029bfc <_ZdlPvj>
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}

0801488c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 801488c:	b580      	push	{r7, lr}
 801488e:	b082      	sub	sp, #8
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	4618      	mov	r0, r3
 8014898:	f001 fc94 	bl	80161c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 801489c:	4a03      	ldr	r2, [pc, #12]	; (80148ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	601a      	str	r2, [r3, #0]
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	4618      	mov	r0, r3
 80148a6:	3708      	adds	r7, #8
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}
 80148ac:	08030094 	.word	0x08030094

080148b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	4618      	mov	r0, r3
 80148bc:	f001 fc82 	bl	80161c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80148c0:	4a03      	ldr	r2, [pc, #12]	; (80148d0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	601a      	str	r2, [r3, #0]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	4618      	mov	r0, r3
 80148ca:	3708      	adds	r7, #8
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	08030060 	.word	0x08030060

080148d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b082      	sub	sp, #8
 80148d8:	af00      	add	r7, sp, #0
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	4618      	mov	r0, r3
 80148e0:	f001 fc70 	bl	80161c4 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80148e4:	4a03      	ldr	r2, [pc, #12]	; (80148f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	601a      	str	r2, [r3, #0]
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	4618      	mov	r0, r3
 80148ee:	3708      	adds	r7, #8
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}
 80148f4:	0803002c 	.word	0x0803002c

080148f8 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80148f8:	b5b0      	push	{r4, r5, r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af02      	add	r7, sp, #8
 80148fe:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f103 0414 	add.w	r4, r3, #20
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	f103 052c 	add.w	r5, r3, #44	; 0x2c
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	f243 7298 	movw	r2, #14232	; 0x3798
 8014914:	441a      	add	r2, r3
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014916:	6879      	ldr	r1, [r7, #4]
 8014918:	f243 73b0 	movw	r3, #14256	; 0x37b0
 801491c:	440b      	add	r3, r1
                     app(model, *this)
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	4613      	mov	r3, r2
 8014922:	462a      	mov	r2, r5
 8014924:	4621      	mov	r1, r4
 8014926:	f7ff ff3f 	bl	80147a8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801492a:	4a1a      	ldr	r2, [pc, #104]	; (8014994 <_ZN12FrontendHeapC1Ev+0x9c>)
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	601a      	str	r2, [r3, #0]
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	3314      	adds	r3, #20
 8014934:	4618      	mov	r0, r3
 8014936:	f7ff ffa9 	bl	801488c <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	332c      	adds	r3, #44	; 0x2c
 801493e:	4618      	mov	r0, r3
 8014940:	f7ff ffb6 	bl	80148b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014944:	687a      	ldr	r2, [r7, #4]
 8014946:	f243 7398 	movw	r3, #14232	; 0x3798
 801494a:	4413      	add	r3, r2
 801494c:	4618      	mov	r0, r3
 801494e:	f7ff ffc1 	bl	80148d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014952:	687a      	ldr	r2, [r7, #4]
 8014954:	f243 73ac 	movw	r3, #14252	; 0x37ac
 8014958:	4413      	add	r3, r2
 801495a:	4618      	mov	r0, r3
 801495c:	f7fd fd9e 	bl	801249c <_ZN5ModelC1Ev>
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8014966:	4413      	add	r3, r2
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	f243 71ac 	movw	r1, #14252	; 0x37ac
 801496e:	4411      	add	r1, r2
 8014970:	687a      	ldr	r2, [r7, #4]
 8014972:	4618      	mov	r0, r3
 8014974:	f7fd fc12 	bl	801219c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	687a      	ldr	r2, [r7, #4]
 801497c:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8014980:	4413      	add	r3, r2
 8014982:	4619      	mov	r1, r3
 8014984:	f7ff ff02 	bl	801478c <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	4618      	mov	r0, r3
 801498c:	3708      	adds	r7, #8
 801498e:	46bd      	mov	sp, r7
 8014990:	bdb0      	pop	{r4, r5, r7, pc}
 8014992:	bf00      	nop
 8014994:	08030018 	.word	0x08030018

08014998 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8014998:	b580      	push	{r7, lr}
 801499a:	b086      	sub	sp, #24
 801499c:	af02      	add	r7, sp, #8
 801499e:	60f8      	str	r0, [r7, #12]
 80149a0:	60b9      	str	r1, [r7, #8]
 80149a2:	607a      	str	r2, [r7, #4]
 80149a4:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 80149a6:	68f8      	ldr	r0, [r7, #12]
 80149a8:	8bbb      	ldrh	r3, [r7, #28]
 80149aa:	9301      	str	r3, [sp, #4]
 80149ac:	8b3b      	ldrh	r3, [r7, #24]
 80149ae:	9300      	str	r3, [sp, #0]
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	68b9      	ldr	r1, [r7, #8]
 80149b6:	f7ff fe29 	bl	801460c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80149ba:	4a04      	ldr	r2, [pc, #16]	; (80149cc <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	601a      	str	r2, [r3, #0]
    }
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	4618      	mov	r0, r3
 80149c4:	3710      	adds	r7, #16
 80149c6:	46bd      	mov	sp, r7
 80149c8:	bd80      	pop	{r7, pc}
 80149ca:	bf00      	nop
 80149cc:	08030168 	.word	0x08030168

080149d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b086      	sub	sp, #24
 80149d4:	af02      	add	r7, sp, #8
 80149d6:	60f8      	str	r0, [r7, #12]
 80149d8:	60b9      	str	r1, [r7, #8]
 80149da:	607a      	str	r2, [r7, #4]
 80149dc:	603b      	str	r3, [r7, #0]
 80149de:	68f8      	ldr	r0, [r7, #12]
 80149e0:	8bbb      	ldrh	r3, [r7, #28]
 80149e2:	9301      	str	r3, [sp, #4]
 80149e4:	8b3b      	ldrh	r3, [r7, #24]
 80149e6:	9300      	str	r3, [sp, #0]
 80149e8:	683b      	ldr	r3, [r7, #0]
 80149ea:	687a      	ldr	r2, [r7, #4]
 80149ec:	68b9      	ldr	r1, [r7, #8]
 80149ee:	f7ff ffd3 	bl	8014998 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80149f2:	4a04      	ldr	r2, [pc, #16]	; (8014a04 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	601a      	str	r2, [r3, #0]
    }
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	4618      	mov	r0, r3
 80149fc:	3710      	adds	r7, #16
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	0802fe48 	.word	0x0802fe48

08014a08 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014a08:	b480      	push	{r7}
 8014a0a:	b083      	sub	sp, #12
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	4a04      	ldr	r2, [pc, #16]	; (8014a24 <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	601a      	str	r2, [r3, #0]
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	4618      	mov	r0, r3
 8014a1a:	370c      	adds	r7, #12
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr
 8014a24:	0802fe30 	.word	0x0802fe30

08014a28 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7ff ffe8 	bl	8014a08 <_ZN8touchgfx15TouchControllerC1Ev>
 8014a38:	4a03      	ldr	r2, [pc, #12]	; (8014a48 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	601a      	str	r2, [r3, #0]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	4618      	mov	r0, r3
 8014a42:	3708      	adds	r7, #8
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}
 8014a48:	0802fe18 	.word	0x0802fe18

08014a4c <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8014a4c:	b590      	push	{r4, r7, lr}
 8014a4e:	b085      	sub	sp, #20
 8014a50:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8014a52:	f7fd f959 	bl	8011d08 <_ZN14BitmapDatabase11getInstanceEv>
 8014a56:	4604      	mov	r4, r0
 8014a58:	f7fd f960 	bl	8011d1c <_ZN14BitmapDatabase15getInstanceSizeEv>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	4619      	mov	r1, r3
 8014a60:	2300      	movs	r3, #0
 8014a62:	9300      	str	r3, [sp, #0]
 8014a64:	2300      	movs	r3, #0
 8014a66:	2200      	movs	r2, #0
 8014a68:	4620      	mov	r0, r4
 8014a6a:	f009 fb85 	bl	801e178 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8014a6e:	4809      	ldr	r0, [pc, #36]	; (8014a94 <touchgfx_init+0x48>)
 8014a70:	f7ff fd26 	bl	80144c0 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8014a74:	2000      	movs	r0, #0
 8014a76:	f7fd fa95 	bl	8011fa4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8014a7a:	4807      	ldr	r0, [pc, #28]	; (8014a98 <touchgfx_init+0x4c>)
 8014a7c:	f009 fa34 	bl	801dee8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8014a80:	f7ff feb4 	bl	80147ec <_ZN12FrontendHeap11getInstanceEv>
 8014a84:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8014a86:	4805      	ldr	r0, [pc, #20]	; (8014a9c <touchgfx_init+0x50>)
 8014a88:	f7fd ff58 	bl	801293c <_ZN11TouchGFXHAL10initializeEv>
}
 8014a8c:	bf00      	nop
 8014a8e:	370c      	adds	r7, #12
 8014a90:	46bd      	mov	sp, r7
 8014a92:	bd90      	pop	{r4, r7, pc}
 8014a94:	2003819c 	.word	0x2003819c
 8014a98:	20000040 	.word	0x20000040
 8014a9c:	200381a0 	.word	0x200381a0

08014aa0 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	b082      	sub	sp, #8
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
 8014aa8:	4a11      	ldr	r2, [pc, #68]	; (8014af0 <_ZN12FrontendHeapD1Ev+0x50>)
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	601a      	str	r2, [r3, #0]
 8014aae:	687a      	ldr	r2, [r7, #4]
 8014ab0:	f243 73b0 	movw	r3, #14256	; 0x37b0
 8014ab4:	4413      	add	r3, r2
 8014ab6:	4618      	mov	r0, r3
 8014ab8:	f7fd fb3a 	bl	8012130 <_ZN19FrontendApplicationD1Ev>
 8014abc:	687a      	ldr	r2, [r7, #4]
 8014abe:	f243 7398 	movw	r3, #14232	; 0x3798
 8014ac2:	4413      	add	r3, r2
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f000 f827 	bl	8014b18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014aca:	687b      	ldr	r3, [r7, #4]
 8014acc:	332c      	adds	r3, #44	; 0x2c
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f000 f844 	bl	8014b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	3314      	adds	r3, #20
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f000 f863 	bl	8014ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	4618      	mov	r0, r3
 8014ae2:	f7ff feb1 	bl	8014848 <_ZN16FrontendHeapBaseD1Ev>
 8014ae6:	687b      	ldr	r3, [r7, #4]
 8014ae8:	4618      	mov	r0, r3
 8014aea:	3708      	adds	r7, #8
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}
 8014af0:	08030018 	.word	0x08030018

08014af4 <_ZN12FrontendHeapD0Ev>:
 8014af4:	b580      	push	{r7, lr}
 8014af6:	b082      	sub	sp, #8
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	6078      	str	r0, [r7, #4]
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f7ff ffcf 	bl	8014aa0 <_ZN12FrontendHeapD1Ev>
 8014b02:	f643 1108 	movw	r1, #14600	; 0x3908
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f015 f878 	bl	8029bfc <_ZdlPvj>
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3708      	adds	r7, #8
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
	...

08014b18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014b18:	b580      	push	{r7, lr}
 8014b1a:	b082      	sub	sp, #8
 8014b1c:	af00      	add	r7, sp, #0
 8014b1e:	6078      	str	r0, [r7, #4]
 8014b20:	4a05      	ldr	r2, [pc, #20]	; (8014b38 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	601a      	str	r2, [r3, #0]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	4618      	mov	r0, r3
 8014b2a:	f001 fb4a 	bl	80161c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	4618      	mov	r0, r3
 8014b32:	3708      	adds	r7, #8
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}
 8014b38:	0803002c 	.word	0x0803002c

08014b3c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014b3c:	b580      	push	{r7, lr}
 8014b3e:	b082      	sub	sp, #8
 8014b40:	af00      	add	r7, sp, #0
 8014b42:	6078      	str	r0, [r7, #4]
 8014b44:	6878      	ldr	r0, [r7, #4]
 8014b46:	f7ff ffe7 	bl	8014b18 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014b4a:	2114      	movs	r1, #20
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f015 f855 	bl	8029bfc <_ZdlPvj>
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	4618      	mov	r0, r3
 8014b56:	3708      	adds	r7, #8
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	bd80      	pop	{r7, pc}

08014b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b082      	sub	sp, #8
 8014b60:	af00      	add	r7, sp, #0
 8014b62:	6078      	str	r0, [r7, #4]
 8014b64:	4a05      	ldr	r2, [pc, #20]	; (8014b7c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	601a      	str	r2, [r3, #0]
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	f001 fb28 	bl	80161c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	4618      	mov	r0, r3
 8014b76:	3708      	adds	r7, #8
 8014b78:	46bd      	mov	sp, r7
 8014b7a:	bd80      	pop	{r7, pc}
 8014b7c:	08030060 	.word	0x08030060

08014b80 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7ff ffe7 	bl	8014b5c <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014b8e:	f243 716c 	movw	r1, #14188	; 0x376c
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f015 f832 	bl	8029bfc <_ZdlPvj>
 8014b98:	687b      	ldr	r3, [r7, #4]
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3708      	adds	r7, #8
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
	...

08014ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b082      	sub	sp, #8
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	6078      	str	r0, [r7, #4]
 8014bac:	4a05      	ldr	r2, [pc, #20]	; (8014bc4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	601a      	str	r2, [r3, #0]
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f001 fb04 	bl	80161c2 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	4618      	mov	r0, r3
 8014bbe:	3708      	adds	r7, #8
 8014bc0:	46bd      	mov	sp, r7
 8014bc2:	bd80      	pop	{r7, pc}
 8014bc4:	08030094 	.word	0x08030094

08014bc8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8014bc8:	b580      	push	{r7, lr}
 8014bca:	b082      	sub	sp, #8
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f7ff ffe7 	bl	8014ba4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8014bd6:	2118      	movs	r1, #24
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f015 f80f 	bl	8029bfc <_ZdlPvj>
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	4618      	mov	r0, r3
 8014be2:	3708      	adds	r7, #8
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bd80      	pop	{r7, pc}

08014be8 <_ZN8touchgfx8LCD32bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD32bpp : public LCD
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	4a05      	ldr	r2, [pc, #20]	; (8014c08 <_ZN8touchgfx8LCD32bppD1Ev+0x20>)
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	601a      	str	r2, [r3, #0]
 8014bf6:	687b      	ldr	r3, [r7, #4]
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	f7ff fcb1 	bl	8014560 <_ZN8touchgfx3LCDD1Ev>
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	4618      	mov	r0, r3
 8014c02:	3708      	adds	r7, #8
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}
 8014c08:	08030cac 	.word	0x08030cac

08014c0c <_ZN8touchgfx8LCD32bppD0Ev>:
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b082      	sub	sp, #8
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f7ff ffe7 	bl	8014be8 <_ZN8touchgfx8LCD32bppD1Ev>
 8014c1a:	2178      	movs	r1, #120	; 0x78
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f014 ffed 	bl	8029bfc <_ZdlPvj>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	4618      	mov	r0, r3
 8014c26:	3708      	adds	r7, #8
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af02      	add	r7, sp, #8
 8014c32:	6078      	str	r0, [r7, #4]
 8014c34:	6039      	str	r1, [r7, #0]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d119      	bne.n	8014c70 <_Z41__static_initialization_and_destruction_0ii+0x44>
 8014c3c:	683b      	ldr	r3, [r7, #0]
 8014c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c42:	4293      	cmp	r3, r2
 8014c44:	d114      	bne.n	8014c70 <_Z41__static_initialization_and_destruction_0ii+0x44>
static STM32TouchController tc;
 8014c46:	4818      	ldr	r0, [pc, #96]	; (8014ca8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014c48:	f7ff feee 	bl	8014a28 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8014c4c:	4817      	ldr	r0, [pc, #92]	; (8014cac <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014c4e:	f7ff f8a1 	bl	8013d94 <_ZN8STM32DMAC1Ev>
static LCD32bpp display;
 8014c52:	4817      	ldr	r0, [pc, #92]	; (8014cb0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014c54:	f00c fb56 	bl	8021304 <_ZN8touchgfx8LCD32bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8014c58:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8014c5c:	9301      	str	r3, [sp, #4]
 8014c5e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8014c62:	9300      	str	r3, [sp, #0]
 8014c64:	4b10      	ldr	r3, [pc, #64]	; (8014ca8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014c66:	4a12      	ldr	r2, [pc, #72]	; (8014cb0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014c68:	4910      	ldr	r1, [pc, #64]	; (8014cac <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014c6a:	4812      	ldr	r0, [pc, #72]	; (8014cb4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014c6c:	f7ff feb0 	bl	80149d0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d113      	bne.n	8014c9e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014c76:	683b      	ldr	r3, [r7, #0]
 8014c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c7c:	4293      	cmp	r3, r2
 8014c7e:	d10e      	bne.n	8014c9e <_Z41__static_initialization_and_destruction_0ii+0x72>
 8014c80:	480c      	ldr	r0, [pc, #48]	; (8014cb4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8014c82:	f7fd feeb 	bl	8012a5c <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8014c86:	480c      	ldr	r0, [pc, #48]	; (8014cb8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8014c88:	f7f9 fa14 	bl	800e0b4 <_ZN23ApplicationFontProviderD1Ev>
static LCD32bpp display;
 8014c8c:	4808      	ldr	r0, [pc, #32]	; (8014cb0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8014c8e:	f7ff ffab 	bl	8014be8 <_ZN8touchgfx8LCD32bppD1Ev>
static STM32DMA dma;
 8014c92:	4806      	ldr	r0, [pc, #24]	; (8014cac <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8014c94:	f7ff f8a8 	bl	8013de8 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8014c98:	4803      	ldr	r0, [pc, #12]	; (8014ca8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8014c9a:	f7fd fc4f 	bl	801253c <_ZN20STM32TouchControllerD1Ev>
}
 8014c9e:	bf00      	nop
 8014ca0:	3708      	adds	r7, #8
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	bf00      	nop
 8014ca8:	20037380 	.word	0x20037380
 8014cac:	20037384 	.word	0x20037384
 8014cb0:	20038124 	.word	0x20038124
 8014cb4:	200381a0 	.word	0x200381a0
 8014cb8:	20000040 	.word	0x20000040

08014cbc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8014cbc:	b480      	push	{r7}
 8014cbe:	b083      	sub	sp, #12
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8014cc4:	2301      	movs	r3, #1
    }
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	370c      	adds	r7, #12
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd0:	4770      	bx	lr

08014cd2 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8014cd2:	b480      	push	{r7}
 8014cd4:	b083      	sub	sp, #12
 8014cd6:	af00      	add	r7, sp, #0
 8014cd8:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8014cda:	230c      	movs	r3, #12
    }
 8014cdc:	4618      	mov	r0, r3
 8014cde:	370c      	adds	r7, #12
 8014ce0:	46bd      	mov	sp, r7
 8014ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ce6:	4770      	bx	lr

08014ce8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8014ce8:	b480      	push	{r7}
 8014cea:	b083      	sub	sp, #12
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
 8014cf0:	460b      	mov	r3, r1
 8014cf2:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014cf4:	887a      	ldrh	r2, [r7, #2]
 8014cf6:	4613      	mov	r3, r2
 8014cf8:	005b      	lsls	r3, r3, #1
 8014cfa:	4413      	add	r3, r2
 8014cfc:	009b      	lsls	r3, r3, #2
 8014cfe:	3308      	adds	r3, #8
 8014d00:	687a      	ldr	r2, [r7, #4]
 8014d02:	4413      	add	r3, r2
    }
 8014d04:	4618      	mov	r0, r3
 8014d06:	370c      	adds	r7, #12
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0e:	4770      	bx	lr

08014d10 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8014d10:	b480      	push	{r7}
 8014d12:	b083      	sub	sp, #12
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	460b      	mov	r3, r1
 8014d1a:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8014d1c:	887a      	ldrh	r2, [r7, #2]
 8014d1e:	4613      	mov	r3, r2
 8014d20:	005b      	lsls	r3, r3, #1
 8014d22:	4413      	add	r3, r2
 8014d24:	009b      	lsls	r3, r3, #2
 8014d26:	3308      	adds	r3, #8
 8014d28:	687a      	ldr	r2, [r7, #4]
 8014d2a:	4413      	add	r3, r2
    }
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	370c      	adds	r7, #12
 8014d30:	46bd      	mov	sp, r7
 8014d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d36:	4770      	bx	lr

08014d38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014d38:	b480      	push	{r7}
 8014d3a:	b083      	sub	sp, #12
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014d40:	2301      	movs	r3, #1
    }
 8014d42:	4618      	mov	r0, r3
 8014d44:	370c      	adds	r7, #12
 8014d46:	46bd      	mov	sp, r7
 8014d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4c:	4770      	bx	lr

08014d4e <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014d4e:	b480      	push	{r7}
 8014d50:	b083      	sub	sp, #12
 8014d52:	af00      	add	r7, sp, #0
 8014d54:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014d56:	f243 7364 	movw	r3, #14180	; 0x3764
    }
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	370c      	adds	r7, #12
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr

08014d66 <_ZN8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014d66:	b480      	push	{r7}
 8014d68:	b083      	sub	sp, #12
 8014d6a:	af00      	add	r7, sp, #0
 8014d6c:	6078      	str	r0, [r7, #4]
 8014d6e:	460b      	mov	r3, r1
 8014d70:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014d72:	887b      	ldrh	r3, [r7, #2]
 8014d74:	f243 7264 	movw	r2, #14180	; 0x3764
 8014d78:	fb02 f303 	mul.w	r3, r2, r3
 8014d7c:	3308      	adds	r3, #8
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	4413      	add	r3, r2
    }
 8014d82:	4618      	mov	r0, r3
 8014d84:	370c      	adds	r7, #12
 8014d86:	46bd      	mov	sp, r7
 8014d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d8c:	4770      	bx	lr

08014d8e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI8MainViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014d8e:	b480      	push	{r7}
 8014d90:	b083      	sub	sp, #12
 8014d92:	af00      	add	r7, sp, #0
 8014d94:	6078      	str	r0, [r7, #4]
 8014d96:	460b      	mov	r3, r1
 8014d98:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014d9a:	887b      	ldrh	r3, [r7, #2]
 8014d9c:	f243 7264 	movw	r2, #14180	; 0x3764
 8014da0:	fb02 f303 	mul.w	r3, r2, r3
 8014da4:	3308      	adds	r3, #8
 8014da6:	687a      	ldr	r2, [r7, #4]
 8014da8:	4413      	add	r3, r2
    }
 8014daa:	4618      	mov	r0, r3
 8014dac:	370c      	adds	r7, #12
 8014dae:	46bd      	mov	sp, r7
 8014db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014db4:	4770      	bx	lr

08014db6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8014db6:	b480      	push	{r7}
 8014db8:	b083      	sub	sp, #12
 8014dba:	af00      	add	r7, sp, #0
 8014dbc:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8014dbe:	2301      	movs	r3, #1
    }
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	370c      	adds	r7, #12
 8014dc4:	46bd      	mov	sp, r7
 8014dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dca:	4770      	bx	lr

08014dcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8014dcc:	b480      	push	{r7}
 8014dce:	b083      	sub	sp, #12
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8014dd4:	2310      	movs	r3, #16
    }
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	370c      	adds	r7, #12
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de0:	4770      	bx	lr

08014de2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8014de2:	b480      	push	{r7}
 8014de4:	b083      	sub	sp, #12
 8014de6:	af00      	add	r7, sp, #0
 8014de8:	6078      	str	r0, [r7, #4]
 8014dea:	460b      	mov	r3, r1
 8014dec:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014dee:	887b      	ldrh	r3, [r7, #2]
 8014df0:	011b      	lsls	r3, r3, #4
 8014df2:	3308      	adds	r3, #8
 8014df4:	687a      	ldr	r2, [r7, #4]
 8014df6:	4413      	add	r3, r2
    }
 8014df8:	4618      	mov	r0, r3
 8014dfa:	370c      	adds	r7, #12
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e02:	4770      	bx	lr

08014e04 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13LanaPresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8014e04:	b480      	push	{r7}
 8014e06:	b083      	sub	sp, #12
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8014e10:	887b      	ldrh	r3, [r7, #2]
 8014e12:	011b      	lsls	r3, r3, #4
 8014e14:	3308      	adds	r3, #8
 8014e16:	687a      	ldr	r2, [r7, #4]
 8014e18:	4413      	add	r3, r2
    }
 8014e1a:	4618      	mov	r0, r3
 8014e1c:	370c      	adds	r7, #12
 8014e1e:	46bd      	mov	sp, r7
 8014e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e24:	4770      	bx	lr

08014e26 <_GLOBAL__sub_I_touchgfx_init>:
 8014e26:	b580      	push	{r7, lr}
 8014e28:	af00      	add	r7, sp, #0
 8014e2a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014e2e:	2001      	movs	r0, #1
 8014e30:	f7ff fefc 	bl	8014c2c <_Z41__static_initialization_and_destruction_0ii>
 8014e34:	bd80      	pop	{r7, pc}

08014e36 <_GLOBAL__sub_D_touchgfx_init>:
 8014e36:	b580      	push	{r7, lr}
 8014e38:	af00      	add	r7, sp, #0
 8014e3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014e3e:	2000      	movs	r0, #0
 8014e40:	f7ff fef4 	bl	8014c2c <_Z41__static_initialization_and_destruction_0ii>
 8014e44:	bd80      	pop	{r7, pc}

08014e46 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8014e46:	b580      	push	{r7, lr}
 8014e48:	b082      	sub	sp, #8
 8014e4a:	af00      	add	r7, sp, #0
 8014e4c:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	3320      	adds	r3, #32
 8014e54:	681b      	ldr	r3, [r3, #0]
 8014e56:	6878      	ldr	r0, [r7, #4]
 8014e58:	4798      	blx	r3
    }
 8014e5a:	bf00      	nop
 8014e5c:	3708      	adds	r7, #8
 8014e5e:	46bd      	mov	sp, r7
 8014e60:	bd80      	pop	{r7, pc}

08014e62 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>:
    uint32_t getLCDRefreshCount()
 8014e62:	b480      	push	{r7}
 8014e64:	b083      	sub	sp, #12
 8014e66:	af00      	add	r7, sp, #0
 8014e68:	6078      	str	r0, [r7, #4]
        return vSyncForFrame;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
    }
 8014e70:	4618      	mov	r0, r3
 8014e72:	370c      	adds	r7, #12
 8014e74:	46bd      	mov	sp, r7
 8014e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7a:	4770      	bx	lr

08014e7c <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8014e7c:	b480      	push	{r7}
 8014e7e:	b083      	sub	sp, #12
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8014e8a:	3301      	adds	r3, #1
 8014e8c:	b2da      	uxtb	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
 8014e94:	bf00      	nop
 8014e96:	370c      	adds	r7, #12
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9e:	4770      	bx	lr

08014ea0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>:
    bool setFrameRefreshStrategy(FrameRefreshStrategy s)
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b082      	sub	sp, #8
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
 8014ea8:	460b      	mov	r3, r1
 8014eaa:	70fb      	strb	r3, [r7, #3]
        if (s == REFRESH_STRATEGY_DEFAULT || s == REFRESH_STRATEGY_PARTIAL_FRAMEBUFFER)
 8014eac:	78fb      	ldrb	r3, [r7, #3]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d002      	beq.n	8014eb8 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x18>
 8014eb2:	78fb      	ldrb	r3, [r7, #3]
 8014eb4:	2b02      	cmp	r3, #2
 8014eb6:	d105      	bne.n	8014ec4 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x24>
            refreshStrategy = s;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	78fa      	ldrb	r2, [r7, #3]
 8014ebc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            return true;
 8014ec0:	2301      	movs	r3, #1
 8014ec2:	e027      	b.n	8014f14 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        if (s == REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL)
 8014ec4:	78fb      	ldrb	r3, [r7, #3]
 8014ec6:	2b01      	cmp	r3, #1
 8014ec8:	d123      	bne.n	8014f12 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x72>
            if (taskDelayFunc != 0 && getTFTCurrentLine() != 0xFFFF && !USE_DOUBLE_BUFFERING)
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d014      	beq.n	8014efc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	681b      	ldr	r3, [r3, #0]
 8014ed6:	339c      	adds	r3, #156	; 0x9c
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	4798      	blx	r3
 8014ede:	4603      	mov	r3, r0
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	d008      	beq.n	8014efc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014eea:	4b0c      	ldr	r3, [pc, #48]	; (8014f1c <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x7c>)
 8014eec:	781b      	ldrb	r3, [r3, #0]
 8014eee:	f083 0301 	eor.w	r3, r3, #1
 8014ef2:	b2db      	uxtb	r3, r3
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d001      	beq.n	8014efc <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5c>
 8014ef8:	2301      	movs	r3, #1
 8014efa:	e000      	b.n	8014efe <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x5e>
 8014efc:	2300      	movs	r3, #0
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d005      	beq.n	8014f0e <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x6e>
                refreshStrategy = s;
 8014f02:	687b      	ldr	r3, [r7, #4]
 8014f04:	78fa      	ldrb	r2, [r7, #3]
 8014f06:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                return true;
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	e002      	b.n	8014f14 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
            return false;
 8014f0e:	2300      	movs	r3, #0
 8014f10:	e000      	b.n	8014f14 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE+0x74>
        return false;
 8014f12:	2300      	movs	r3, #0
    }
 8014f14:	4618      	mov	r0, r3
 8014f16:	3708      	adds	r7, #8
 8014f18:	46bd      	mov	sp, r7
 8014f1a:	bd80      	pop	{r7, pc}
 8014f1c:	2003c2ba 	.word	0x2003c2ba

08014f20 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>:
    void registerTaskDelayFunction(void (*delayF)(uint16_t))
 8014f20:	b480      	push	{r7}
 8014f22:	b083      	sub	sp, #12
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
 8014f28:	6039      	str	r1, [r7, #0]
        taskDelayFunc = delayF;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	683a      	ldr	r2, [r7, #0]
 8014f2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
 8014f30:	bf00      	nop
 8014f32:	370c      	adds	r7, #12
 8014f34:	46bd      	mov	sp, r7
 8014f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3a:	4770      	bx	lr

08014f3c <_ZN8touchgfx15VideoControllerD1Ev>:
        STOP,      ///< Stop the video
        SET_REPEAT ///< Set repeat mode
    };

    /** Virtual destructor. */
    virtual ~VideoController()
 8014f3c:	b480      	push	{r7}
 8014f3e:	b083      	sub	sp, #12
 8014f40:	af00      	add	r7, sp, #0
 8014f42:	6078      	str	r0, [r7, #4]
    {
 8014f44:	4a04      	ldr	r2, [pc, #16]	; (8014f58 <_ZN8touchgfx15VideoControllerD1Ev+0x1c>)
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	601a      	str	r2, [r3, #0]
    }
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	370c      	adds	r7, #12
 8014f50:	46bd      	mov	sp, r7
 8014f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f56:	4770      	bx	lr
 8014f58:	0803012c 	.word	0x0803012c

08014f5c <_ZN8touchgfx15VideoControllerD0Ev>:
    virtual ~VideoController()
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b082      	sub	sp, #8
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	6078      	str	r0, [r7, #4]
    }
 8014f64:	6878      	ldr	r0, [r7, #4]
 8014f66:	f7ff ffe9 	bl	8014f3c <_ZN8touchgfx15VideoControllerD1Ev>
 8014f6a:	2104      	movs	r1, #4
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	f014 fe45 	bl	8029bfc <_ZdlPvj>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	4618      	mov	r0, r3
 8014f76:	3708      	adds	r7, #8
 8014f78:	46bd      	mov	sp, r7
 8014f7a:	bd80      	pop	{r7, pc}

08014f7c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>:
     * Set video buffer data.
     * Only used when video frames are decoded to a buffer and not directly to the framebuffer.
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
 8014f7c:	b480      	push	{r7}
 8014f7e:	b083      	sub	sp, #12
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
    {
        buffer = videoBuffer;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	683a      	ldr	r2, [r7, #0]
 8014f8a:	631a      	str	r2, [r3, #48]	; 0x30
    }
 8014f8c:	bf00      	nop
 8014f8e:	370c      	adds	r7, #12
 8014f90:	46bd      	mov	sp, r7
 8014f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f96:	4770      	bx	lr

08014f98 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>:
     *
     * @param bufferFormat Format of the videoBuffer (RGB565 or RGB888)
     * @param width  Width of the videoBuffer in pixels
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
 8014f98:	b480      	push	{r7}
 8014f9a:	b085      	sub	sp, #20
 8014f9c:	af00      	add	r7, sp, #0
 8014f9e:	60f8      	str	r0, [r7, #12]
 8014fa0:	4608      	mov	r0, r1
 8014fa2:	4611      	mov	r1, r2
 8014fa4:	461a      	mov	r2, r3
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	72fb      	strb	r3, [r7, #11]
 8014faa:	460b      	mov	r3, r1
 8014fac:	813b      	strh	r3, [r7, #8]
 8014fae:	4613      	mov	r3, r2
 8014fb0:	80fb      	strh	r3, [r7, #6]
    {
        format = bufferFormat;
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	7afa      	ldrb	r2, [r7, #11]
 8014fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        bufferWidth = width;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	893a      	ldrh	r2, [r7, #8]
 8014fbe:	86da      	strh	r2, [r3, #54]	; 0x36
        bufferHeight = height;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	88fa      	ldrh	r2, [r7, #6]
 8014fc4:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 8014fc6:	bf00      	nop
 8014fc8:	3714      	adds	r7, #20
 8014fca:	46bd      	mov	sp, r7
 8014fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd0:	4770      	bx	lr
	...

08014fd4 <__NVIC_EnableIRQ>:
{
 8014fd4:	b480      	push	{r7}
 8014fd6:	b083      	sub	sp, #12
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	4603      	mov	r3, r0
 8014fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	db0b      	blt.n	8014ffe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014fe6:	79fb      	ldrb	r3, [r7, #7]
 8014fe8:	f003 021f 	and.w	r2, r3, #31
 8014fec:	4907      	ldr	r1, [pc, #28]	; (801500c <__NVIC_EnableIRQ+0x38>)
 8014fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ff2:	095b      	lsrs	r3, r3, #5
 8014ff4:	2001      	movs	r0, #1
 8014ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8014ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8014ffe:	bf00      	nop
 8015000:	370c      	adds	r7, #12
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr
 801500a:	bf00      	nop
 801500c:	e000e100 	.word	0xe000e100

08015010 <__NVIC_DisableIRQ>:
{
 8015010:	b480      	push	{r7}
 8015012:	b083      	sub	sp, #12
 8015014:	af00      	add	r7, sp, #0
 8015016:	4603      	mov	r3, r0
 8015018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801501e:	2b00      	cmp	r3, #0
 8015020:	db12      	blt.n	8015048 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015022:	79fb      	ldrb	r3, [r7, #7]
 8015024:	f003 021f 	and.w	r2, r3, #31
 8015028:	490a      	ldr	r1, [pc, #40]	; (8015054 <__NVIC_DisableIRQ+0x44>)
 801502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801502e:	095b      	lsrs	r3, r3, #5
 8015030:	2001      	movs	r0, #1
 8015032:	fa00 f202 	lsl.w	r2, r0, r2
 8015036:	3320      	adds	r3, #32
 8015038:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 801503c:	f3bf 8f4f 	dsb	sy
}
 8015040:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015042:	f3bf 8f6f 	isb	sy
}
 8015046:	bf00      	nop
}
 8015048:	bf00      	nop
 801504a:	370c      	adds	r7, #12
 801504c:	46bd      	mov	sp, r7
 801504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015052:	4770      	bx	lr
 8015054:	e000e100 	.word	0xe000e100

08015058 <__NVIC_SetPriority>:
{
 8015058:	b480      	push	{r7}
 801505a:	b083      	sub	sp, #12
 801505c:	af00      	add	r7, sp, #0
 801505e:	4603      	mov	r3, r0
 8015060:	6039      	str	r1, [r7, #0]
 8015062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015068:	2b00      	cmp	r3, #0
 801506a:	db0a      	blt.n	8015082 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801506c:	683b      	ldr	r3, [r7, #0]
 801506e:	b2da      	uxtb	r2, r3
 8015070:	490c      	ldr	r1, [pc, #48]	; (80150a4 <__NVIC_SetPriority+0x4c>)
 8015072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015076:	0112      	lsls	r2, r2, #4
 8015078:	b2d2      	uxtb	r2, r2
 801507a:	440b      	add	r3, r1
 801507c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015080:	e00a      	b.n	8015098 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	b2da      	uxtb	r2, r3
 8015086:	4908      	ldr	r1, [pc, #32]	; (80150a8 <__NVIC_SetPriority+0x50>)
 8015088:	79fb      	ldrb	r3, [r7, #7]
 801508a:	f003 030f 	and.w	r3, r3, #15
 801508e:	3b04      	subs	r3, #4
 8015090:	0112      	lsls	r2, r2, #4
 8015092:	b2d2      	uxtb	r2, r2
 8015094:	440b      	add	r3, r1
 8015096:	761a      	strb	r2, [r3, #24]
}
 8015098:	bf00      	nop
 801509a:	370c      	adds	r7, #12
 801509c:	46bd      	mov	sp, r7
 801509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150a2:	4770      	bx	lr
 80150a4:	e000e100 	.word	0xe000e100
 80150a8:	e000ed00 	.word	0xe000ed00

080150ac <SCB_CleanInvalidateDCache>:
{
 80150ac:	b480      	push	{r7}
 80150ae:	b085      	sub	sp, #20
 80150b0:	af00      	add	r7, sp, #0
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80150b2:	4b21      	ldr	r3, [pc, #132]	; (8015138 <SCB_CleanInvalidateDCache+0x8c>)
 80150b4:	2200      	movs	r2, #0
 80150b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80150ba:	f3bf 8f4f 	dsb	sy
}
 80150be:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 80150c0:	4b1d      	ldr	r3, [pc, #116]	; (8015138 <SCB_CleanInvalidateDCache+0x8c>)
 80150c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80150c6:	607b      	str	r3, [r7, #4]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	0b5b      	lsrs	r3, r3, #13
 80150cc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80150d0:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	08db      	lsrs	r3, r3, #3
 80150d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80150da:	60bb      	str	r3, [r7, #8]
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	015a      	lsls	r2, r3, #5
 80150e0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80150e4:	4013      	ands	r3, r2
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
 80150e6:	68ba      	ldr	r2, [r7, #8]
 80150e8:	0792      	lsls	r2, r2, #30
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80150ea:	4913      	ldr	r1, [pc, #76]	; (8015138 <SCB_CleanInvalidateDCache+0x8c>)
 80150ec:	4313      	orrs	r3, r2
 80150ee:	f8c1 3274 	str.w	r3, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 80150f2:	68bb      	ldr	r3, [r7, #8]
 80150f4:	1e5a      	subs	r2, r3, #1
 80150f6:	60ba      	str	r2, [r7, #8]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	bf14      	ite	ne
 80150fc:	2301      	movne	r3, #1
 80150fe:	2300      	moveq	r3, #0
 8015100:	b2db      	uxtb	r3, r3
 8015102:	2b00      	cmp	r3, #0
 8015104:	d000      	beq.n	8015108 <SCB_CleanInvalidateDCache+0x5c>
      do {
 8015106:	e7e9      	b.n	80150dc <SCB_CleanInvalidateDCache+0x30>
    } while(sets-- != 0U);
 8015108:	68fb      	ldr	r3, [r7, #12]
 801510a:	1e5a      	subs	r2, r3, #1
 801510c:	60fa      	str	r2, [r7, #12]
 801510e:	2b00      	cmp	r3, #0
 8015110:	bf14      	ite	ne
 8015112:	2301      	movne	r3, #1
 8015114:	2300      	moveq	r3, #0
 8015116:	b2db      	uxtb	r3, r3
 8015118:	2b00      	cmp	r3, #0
 801511a:	d000      	beq.n	801511e <SCB_CleanInvalidateDCache+0x72>
    do {
 801511c:	e7d9      	b.n	80150d2 <SCB_CleanInvalidateDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 801511e:	f3bf 8f4f 	dsb	sy
}
 8015122:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8015124:	f3bf 8f6f 	isb	sy
}
 8015128:	bf00      	nop
}
 801512a:	bf00      	nop
 801512c:	3714      	adds	r7, #20
 801512e:	46bd      	mov	sp, r7
 8015130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015134:	4770      	bx	lr
 8015136:	bf00      	nop
 8015138:	e000ed00 	.word	0xe000ed00

0801513c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    static uint16_t lcd_int_active_line;
    static uint16_t lcd_int_porch_line;
}

void TouchGFXGeneratedHAL::initialize()
{
 801513c:	b5b0      	push	{r4, r5, r7, lr}
 801513e:	b082      	sub	sp, #8
 8015140:	af00      	add	r7, sp, #0
 8015142:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	4618      	mov	r0, r3
 8015148:	f001 fb3f 	bl	80167ca <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 801514c:	687d      	ldr	r5, [r7, #4]
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	3364      	adds	r3, #100	; 0x64
 8015154:	681c      	ldr	r4, [r3, #0]
 8015156:	f005 ff33 	bl	801afc0 <_ZN8touchgfx11Application11getInstanceEv>
 801515a:	4603      	mov	r3, r0
 801515c:	4619      	mov	r1, r3
 801515e:	4628      	mov	r0, r5
 8015160:	47a0      	blx	r4
    registerTaskDelayFunction(&OSWrappers::taskDelay);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	4910      	ldr	r1, [pc, #64]	; (80151a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6c>)
 8015166:	4618      	mov	r0, r3
 8015168:	f7ff feda 	bl	8014f20 <_ZN8touchgfx3HAL25registerTaskDelayFunctionEPFvtE>
    setFrameRefreshStrategy(HAL::REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL);
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	2101      	movs	r1, #1
 8015170:	4618      	mov	r0, r3
 8015172:	f7ff fe95 	bl	8014ea0 <_ZN8touchgfx3HAL23setFrameRefreshStrategyENS0_20FrameRefreshStrategyE>
    setFrameBufferStartAddresses((void*)0xC0000000, (void*)0, (void*)0);
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	3388      	adds	r3, #136	; 0x88
 801517e:	681c      	ldr	r4, [r3, #0]
 8015180:	2300      	movs	r3, #0
 8015182:	2200      	movs	r2, #0
 8015184:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8015188:	47a0      	blx	r4
    /*
     * Add hardware decoder to video controller
     */
    videoController.addDecoder(mjpegdecoder1, 0);
 801518a:	2200      	movs	r2, #0
 801518c:	4907      	ldr	r1, [pc, #28]	; (80151ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x70>)
 801518e:	4808      	ldr	r0, [pc, #32]	; (80151b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 8015190:	f000 f9ee 	bl	8015570 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm>
    videoController.setRGBBuffer((uint8_t*)videoRGBBuffer, sizeof(videoRGBBuffer));
 8015194:	2200      	movs	r2, #0
 8015196:	4907      	ldr	r1, [pc, #28]	; (80151b4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
 8015198:	4805      	ldr	r0, [pc, #20]	; (80151b0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
 801519a:	f000 fa09 	bl	80155b0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setRGBBufferEPhj>
}
 801519e:	bf00      	nop
 80151a0:	3708      	adds	r7, #8
 80151a2:	46bd      	mov	sp, r7
 80151a4:	bdb0      	pop	{r4, r5, r7, pc}
 80151a6:	bf00      	nop
 80151a8:	08013b95 	.word	0x08013b95
 80151ac:	2003821c 	.word	0x2003821c
 80151b0:	20038260 	.word	0x20038260
 80151b4:	200002f4 	.word	0x200002f4

080151b8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b082      	sub	sp, #8
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
    NVIC_SetPriority(DMA2D_IRQn, 9);
 80151c0:	2109      	movs	r1, #9
 80151c2:	205a      	movs	r0, #90	; 0x5a
 80151c4:	f7ff ff48 	bl	8015058 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 80151c8:	2109      	movs	r1, #9
 80151ca:	2058      	movs	r0, #88	; 0x58
 80151cc:	f7ff ff44 	bl	8015058 <__NVIC_SetPriority>
}
 80151d0:	bf00      	nop
 80151d2:	3708      	adds	r7, #8
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	b082      	sub	sp, #8
 80151dc:	af00      	add	r7, sp, #0
 80151de:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(DMA2D_IRQn);
 80151e0:	205a      	movs	r0, #90	; 0x5a
 80151e2:	f7ff fef7 	bl	8014fd4 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_IRQn);
 80151e6:	2058      	movs	r0, #88	; 0x58
 80151e8:	f7ff fef4 	bl	8014fd4 <__NVIC_EnableIRQ>
}
 80151ec:	bf00      	nop
 80151ee:	3708      	adds	r7, #8
 80151f0:	46bd      	mov	sp, r7
 80151f2:	bd80      	pop	{r7, pc}

080151f4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b082      	sub	sp, #8
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(DMA2D_IRQn);
 80151fc:	205a      	movs	r0, #90	; 0x5a
 80151fe:	f7ff ff07 	bl	8015010 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_IRQn);
 8015202:	2058      	movs	r0, #88	; 0x58
 8015204:	f7ff ff04 	bl	8015010 <__NVIC_DisableIRQ>
}
 8015208:	bf00      	nop
 801520a:	3708      	adds	r7, #8
 801520c:	46bd      	mov	sp, r7
 801520e:	bd80      	pop	{r7, pc}

08015210 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8015210:	b480      	push	{r7}
 8015212:	b083      	sub	sp, #12
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8015218:	4b11      	ldr	r3, [pc, #68]	; (8015260 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801521a:	68db      	ldr	r3, [r3, #12]
 801521c:	b29b      	uxth	r3, r3
 801521e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015222:	b29b      	uxth	r3, r3
 8015224:	3b01      	subs	r3, #1
 8015226:	b29a      	uxth	r2, r3
 8015228:	4b0e      	ldr	r3, [pc, #56]	; (8015264 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 801522a:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 801522c:	4b0c      	ldr	r3, [pc, #48]	; (8015260 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801522e:	691b      	ldr	r3, [r3, #16]
 8015230:	b29b      	uxth	r3, r3
 8015232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015236:	b29b      	uxth	r3, r3
 8015238:	3b01      	subs	r3, #1
 801523a:	b29a      	uxth	r2, r3
 801523c:	4b0a      	ldr	r3, [pc, #40]	; (8015268 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x58>)
 801523e:	801a      	strh	r2, [r3, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
 8015240:	4b08      	ldr	r3, [pc, #32]	; (8015264 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x54>)
 8015242:	881a      	ldrh	r2, [r3, #0]
 8015244:	4b06      	ldr	r3, [pc, #24]	; (8015260 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 8015246:	641a      	str	r2, [r3, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
 8015248:	4b05      	ldr	r3, [pc, #20]	; (8015260 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801524a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801524c:	4a04      	ldr	r2, [pc, #16]	; (8015260 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x50>)
 801524e:	f043 0301 	orr.w	r3, r3, #1
 8015252:	6353      	str	r3, [r2, #52]	; 0x34
}
 8015254:	bf00      	nop
 8015256:	370c      	adds	r7, #12
 8015258:	46bd      	mov	sp, r7
 801525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525e:	4770      	bx	lr
 8015260:	40016800 	.word	0x40016800
 8015264:	200382aa 	.word	0x200382aa
 8015268:	200382ac 	.word	0x200382ac

0801526c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b082      	sub	sp, #8
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	4618      	mov	r0, r3
 8015278:	f001 fa8e 	bl	8016798 <_ZN8touchgfx3HAL10beginFrameEv>
 801527c:	4603      	mov	r3, r0
}
 801527e:	4618      	mov	r0, r3
 8015280:	3708      	adds	r7, #8
 8015282:	46bd      	mov	sp, r7
 8015284:	bd80      	pop	{r7, pc}
	...

08015288 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
    if (frameBufferUpdatedThisFrame)
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8015296:	2b00      	cmp	r3, #0
 8015298:	d002      	beq.n	80152a0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x18>
    {
        refreshRequested = true;
 801529a:	4b07      	ldr	r3, [pc, #28]	; (80152b8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x30>)
 801529c:	2201      	movs	r2, #1
 801529e:	701a      	strb	r2, [r3, #0]
    }
    HAL::endFrame();
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	4618      	mov	r0, r3
 80152a4:	f001 fa84 	bl	80167b0 <_ZN8touchgfx3HAL8endFrameEv>
    videoController.endFrame();
 80152a8:	4804      	ldr	r0, [pc, #16]	; (80152bc <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>)
 80152aa:	f000 f997 	bl	80155dc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv>
}
 80152ae:	bf00      	nop
 80152b0:	3708      	adds	r7, #8
 80152b2:	46bd      	mov	sp, r7
 80152b4:	bd80      	pop	{r7, pc}
 80152b6:	bf00      	nop
 80152b8:	200382a8 	.word	0x200382a8
 80152bc:	20038260 	.word	0x20038260

080152c0 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 80152c0:	b480      	push	{r7}
 80152c2:	b083      	sub	sp, #12
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 80152c8:	4b03      	ldr	r3, [pc, #12]	; (80152d8 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
 80152ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 80152cc:	4618      	mov	r0, r3
 80152ce:	370c      	adds	r7, #12
 80152d0:	46bd      	mov	sp, r7
 80152d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d6:	4770      	bx	lr
 80152d8:	40016884 	.word	0x40016884

080152dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 80152dc:	b480      	push	{r7}
 80152de:	b083      	sub	sp, #12
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
 80152e4:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 80152e6:	4a06      	ldr	r2, [pc, #24]	; (8015300 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x24>)
 80152e8:	683b      	ldr	r3, [r7, #0]
 80152ea:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 80152ec:	4b05      	ldr	r3, [pc, #20]	; (8015304 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0x28>)
 80152ee:	2201      	movs	r2, #1
 80152f0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80152f2:	bf00      	nop
 80152f4:	370c      	adds	r7, #12
 80152f6:	46bd      	mov	sp, r7
 80152f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fc:	4770      	bx	lr
 80152fe:	bf00      	nop
 8015300:	40016884 	.word	0x40016884
 8015304:	40016800 	.word	0x40016800

08015308 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
 8015310:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	6839      	ldr	r1, [r7, #0]
 8015316:	4618      	mov	r0, r3
 8015318:	f001 fa07 	bl	801672a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 801531c:	4b08      	ldr	r3, [pc, #32]	; (8015340 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x38>)
 801531e:	695b      	ldr	r3, [r3, #20]
 8015320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015324:	2b00      	cmp	r3, #0
 8015326:	bf14      	ite	ne
 8015328:	2301      	movne	r3, #1
 801532a:	2300      	moveq	r3, #0
 801532c:	b2db      	uxtb	r3, r3
 801532e:	2b00      	cmp	r3, #0
 8015330:	d001      	beq.n	8015336 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE+0x2e>
    {
        SCB_CleanInvalidateDCache();
 8015332:	f7ff febb 	bl	80150ac <SCB_CleanInvalidateDCache>
    }
}
 8015336:	bf00      	nop
 8015338:	3708      	adds	r7, #8
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
 801533e:	bf00      	nop
 8015340:	e000ed00 	.word	0xe000ed00

08015344 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b084      	sub	sp, #16
 8015348:	af00      	add	r7, sp, #0
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	607a      	str	r2, [r7, #4]
 8015350:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8015352:	68f8      	ldr	r0, [r7, #12]
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	687a      	ldr	r2, [r7, #4]
 8015358:	68b9      	ldr	r1, [r7, #8]
 801535a:	f001 fb50 	bl	80169fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801535e:	4603      	mov	r3, r0
}
 8015360:	4618      	mov	r0, r3
 8015362:	3710      	adds	r7, #16
 8015364:	46bd      	mov	sp, r7
 8015366:	bd80      	pop	{r7, pc}

08015368 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv>:

uint16_t TouchGFXGeneratedHAL::getTFTCurrentLine()
{
 8015368:	b480      	push	{r7}
 801536a:	b085      	sub	sp, #20
 801536c:	af00      	add	r7, sp, #0
 801536e:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8015370:	4b0d      	ldr	r3, [pc, #52]	; (80153a8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015374:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8015376:	4b0c      	ldr	r3, [pc, #48]	; (80153a8 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x40>)
 8015378:	68db      	ldr	r3, [r3, #12]
 801537a:	b29b      	uxth	r3, r3
 801537c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8015380:	b29b      	uxth	r3, r3
 8015382:	3301      	adds	r3, #1
 8015384:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    return (curr < backPorchY) ? 0 : (curr - backPorchY);
 8015386:	89fa      	ldrh	r2, [r7, #14]
 8015388:	89bb      	ldrh	r3, [r7, #12]
 801538a:	429a      	cmp	r2, r3
 801538c:	d304      	bcc.n	8015398 <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x30>
 801538e:	89fa      	ldrh	r2, [r7, #14]
 8015390:	89bb      	ldrh	r3, [r7, #12]
 8015392:	1ad3      	subs	r3, r2, r3
 8015394:	b29b      	uxth	r3, r3
 8015396:	e000      	b.n	801539a <_ZN20TouchGFXGeneratedHAL17getTFTCurrentLineEv+0x32>
 8015398:	2300      	movs	r3, #0
}
 801539a:	4618      	mov	r0, r3
 801539c:	3714      	adds	r7, #20
 801539e:	46bd      	mov	sp, r7
 80153a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153a4:	4770      	bx	lr
 80153a6:	bf00      	nop
 80153a8:	40016800 	.word	0x40016800

080153ac <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv>:

void TouchGFXGeneratedHAL::InvalidateCache()
{
 80153ac:	b580      	push	{r7, lr}
 80153ae:	b082      	sub	sp, #8
 80153b0:	af00      	add	r7, sp, #0
 80153b2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80153b4:	4b08      	ldr	r3, [pc, #32]	; (80153d8 <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x2c>)
 80153b6:	695b      	ldr	r3, [r3, #20]
 80153b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80153bc:	2b00      	cmp	r3, #0
 80153be:	bf14      	ite	ne
 80153c0:	2301      	movne	r3, #1
 80153c2:	2300      	moveq	r3, #0
 80153c4:	b2db      	uxtb	r3, r3
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d001      	beq.n	80153ce <_ZN20TouchGFXGeneratedHAL15InvalidateCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 80153ca:	f7ff fe6f 	bl	80150ac <SCB_CleanInvalidateDCache>
    }
}
 80153ce:	bf00      	nop
 80153d0:	3708      	adds	r7, #8
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	e000ed00 	.word	0xe000ed00

080153dc <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:

void TouchGFXGeneratedHAL::FlushCache()
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80153e4:	4b08      	ldr	r3, [pc, #32]	; (8015408 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>)
 80153e6:	695b      	ldr	r3, [r3, #20]
 80153e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	bf14      	ite	ne
 80153f0:	2301      	movne	r3, #1
 80153f2:	2300      	moveq	r3, #0
 80153f4:	b2db      	uxtb	r3, r3
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d001      	beq.n	80153fe <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x22>
    {
        SCB_CleanInvalidateDCache();
 80153fa:	f7ff fe57 	bl	80150ac <SCB_CleanInvalidateDCache>
    }
}
 80153fe:	bf00      	nop
 8015400:	3708      	adds	r7, #8
 8015402:	46bd      	mov	sp, r7
 8015404:	bd80      	pop	{r7, pc}
 8015406:	bf00      	nop
 8015408:	e000ed00 	.word	0xe000ed00

0801540c <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
 801540c:	b580      	push	{r7, lr}
 801540e:	b082      	sub	sp, #8
 8015410:	af00      	add	r7, sp, #0
 8015412:	6078      	str	r0, [r7, #4]
        if (!HAL::getInstance())
 8015414:	f7f9 fb82 	bl	800eb1c <_ZN8touchgfx3HAL11getInstanceEv>
 8015418:	4603      	mov	r3, r0
 801541a:	2b00      	cmp	r3, #0
 801541c:	bf0c      	ite	eq
 801541e:	2301      	moveq	r3, #1
 8015420:	2300      	movne	r3, #0
 8015422:	b2db      	uxtb	r3, r3
 8015424:	2b00      	cmp	r3, #0
 8015426:	d132      	bne.n	801548e <HAL_LTDC_LineEventCallback+0x82>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
 8015428:	4b1b      	ldr	r3, [pc, #108]	; (8015498 <HAL_LTDC_LineEventCallback+0x8c>)
 801542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801542c:	4a1b      	ldr	r2, [pc, #108]	; (801549c <HAL_LTDC_LineEventCallback+0x90>)
 801542e:	8812      	ldrh	r2, [r2, #0]
 8015430:	4293      	cmp	r3, r2
 8015432:	bf0c      	ite	eq
 8015434:	2301      	moveq	r3, #1
 8015436:	2300      	movne	r3, #0
 8015438:	b2db      	uxtb	r3, r3
 801543a:	2b00      	cmp	r3, #0
 801543c:	d017      	beq.n	801546e <HAL_LTDC_LineEventCallback+0x62>
        {
            //entering active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 801543e:	4b18      	ldr	r3, [pc, #96]	; (80154a0 <HAL_LTDC_LineEventCallback+0x94>)
 8015440:	881b      	ldrh	r3, [r3, #0]
 8015442:	4619      	mov	r1, r3
 8015444:	6878      	ldr	r0, [r7, #4]
 8015446:	f7f1 f841 	bl	80064cc <HAL_LTDC_ProgramLineEvent>
            HAL::getInstance()->vSync();
 801544a:	f7f9 fb67 	bl	800eb1c <_ZN8touchgfx3HAL11getInstanceEv>
 801544e:	4603      	mov	r3, r0
 8015450:	4618      	mov	r0, r3
 8015452:	f7ff fd13 	bl	8014e7c <_ZN8touchgfx3HAL5vSyncEv>
            OSWrappers::signalVSync();
 8015456:	f7fe fb75 	bl	8013b44 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

            // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
            // Note: task will also swap when it wakes up, but that operation is guarded and will not have
            // any effect if already swapped.
            HAL::getInstance()->swapFrameBuffers();
 801545a:	f7f9 fb5f 	bl	800eb1c <_ZN8touchgfx3HAL11getInstanceEv>
 801545e:	4603      	mov	r3, r0
 8015460:	4618      	mov	r0, r3
 8015462:	f001 fef7 	bl	8017254 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
 8015466:	2000      	movs	r0, #0
 8015468:	f7fd f88a 	bl	8012580 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801546c:	e010      	b.n	8015490 <HAL_LTDC_LineEventCallback+0x84>
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 801546e:	4b0b      	ldr	r3, [pc, #44]	; (801549c <HAL_LTDC_LineEventCallback+0x90>)
 8015470:	881b      	ldrh	r3, [r3, #0]
 8015472:	4619      	mov	r1, r3
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f7f1 f829 	bl	80064cc <HAL_LTDC_ProgramLineEvent>

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
 801547a:	f7f9 fb4f 	bl	800eb1c <_ZN8touchgfx3HAL11getInstanceEv>
 801547e:	4603      	mov	r3, r0
 8015480:	4618      	mov	r0, r3
 8015482:	f7ff fce0 	bl	8014e46 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
            GPIO::clear(GPIO::VSYNC_FREQ);
 8015486:	2000      	movs	r0, #0
 8015488:	f7fd f896 	bl	80125b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801548c:	e000      	b.n	8015490 <HAL_LTDC_LineEventCallback+0x84>
            return;
 801548e:	bf00      	nop
        }
    }
 8015490:	3708      	adds	r7, #8
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	40016800 	.word	0x40016800
 801549c:	200382aa 	.word	0x200382aa
 80154a0:	200382ac 	.word	0x200382ac

080154a4 <_ZN8touchgfx15VideoControllerC1Ev>:
class VideoController
 80154a4:	b480      	push	{r7}
 80154a6:	b083      	sub	sp, #12
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
 80154ac:	4a04      	ldr	r2, [pc, #16]	; (80154c0 <_ZN8touchgfx15VideoControllerC1Ev+0x1c>)
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	601a      	str	r2, [r3, #0]
 80154b2:	687b      	ldr	r3, [r7, #4]
 80154b4:	4618      	mov	r0, r3
 80154b6:	370c      	adds	r7, #12
 80154b8:	46bd      	mov	sp, r7
 80154ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154be:	4770      	bx	lr
 80154c0:	0803012c 	.word	0x0803012c

080154c4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev>:

template <uint32_t no_streams, uint32_t width, uint32_t height, uint32_t stride, touchgfx::Bitmap::BitmapFormat output_format>
class DedicatedBufferController : public touchgfx::VideoController
{
public:
    DedicatedBufferController()
 80154c4:	b5b0      	push	{r4, r5, r7, lr}
 80154c6:	b082      	sub	sp, #8
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	6078      	str	r0, [r7, #4]
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7ff ffe8 	bl	80154a4 <_ZN8touchgfx15VideoControllerC1Ev>
 80154d4:	4a25      	ldr	r2, [pc, #148]	; (801556c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0xa8>)
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	601a      	str	r2, [r3, #0]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	330c      	adds	r3, #12
 80154de:	2400      	movs	r4, #0
 80154e0:	461d      	mov	r5, r3
 80154e2:	2c00      	cmp	r4, #0
 80154e4:	db05      	blt.n	80154f2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0x2e>
 80154e6:	4628      	mov	r0, r5
 80154e8:	f000 f8bd 	bl	8015666 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>
 80154ec:	3524      	adds	r5, #36	; 0x24
 80154ee:	3c01      	subs	r4, #1
 80154f0:	e7f7      	b.n	80154e2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev+0x1e>
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2200      	movs	r2, #0
 80154f6:	631a      	str	r2, [r3, #48]	; 0x30
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2200      	movs	r2, #0
 80154fc:	635a      	str	r2, [r3, #52]	; 0x34
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2200      	movs	r2, #0
 8015502:	639a      	str	r2, [r3, #56]	; 0x38
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	2200      	movs	r2, #0
 8015508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2201      	movs	r2, #1
 8015510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	2200      	movs	r2, #0
 8015518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2200      	movs	r2, #0
 8015520:	641a      	str	r2, [r3, #64]	; 0x40
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	2200      	movs	r2, #0
 8015526:	645a      	str	r2, [r3, #68]	; 0x44
    {
        assert((no_streams > 0) && "Video: Number of streams zero!");

        // Clear arrays
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	3308      	adds	r3, #8
 801552c:	2204      	movs	r2, #4
 801552e:	2100      	movs	r1, #0
 8015530:	4618      	mov	r0, r3
 8015532:	f014 fc99 	bl	8029e68 <memset>
        memset(mjpegDecoders, 0, sizeof(mjpegDecoders));
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	3304      	adds	r3, #4
 801553a:	2204      	movs	r2, #4
 801553c:	2100      	movs	r1, #0
 801553e:	4618      	mov	r0, r3
 8015540:	f014 fc92 	bl	8029e68 <memset>

        // Initialize synchronization primitives
        semDecode = SEM_CREATE(); // Binary semaphore
 8015544:	2200      	movs	r2, #0
 8015546:	2100      	movs	r1, #0
 8015548:	2001      	movs	r0, #1
 801554a:	f7f5 f8bf 	bl	800a6cc <osSemaphoreNew>
 801554e:	4602      	mov	r2, r0
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	641a      	str	r2, [r3, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
 8015554:	2000      	movs	r0, #0
 8015556:	f7f4 ff71 	bl	800a43c <osMutexNew>
 801555a:	4602      	mov	r2, r0
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	645a      	str	r2, [r3, #68]	; 0x44
    }
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	4618      	mov	r0, r3
 8015564:	3708      	adds	r7, #8
 8015566:	46bd      	mov	sp, r7
 8015568:	bdb0      	pop	{r4, r5, r7, pc}
 801556a:	bf00      	nop
 801556c:	080300ec 	.word	0x080300ec

08015570 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm>:
        bufferRGB = buffer;
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
    }

    void addDecoder(MJPEGDecoder& decoder, uint32_t index)
 8015570:	b580      	push	{r7, lr}
 8015572:	b084      	sub	sp, #16
 8015574:	af00      	add	r7, sp, #0
 8015576:	60f8      	str	r0, [r7, #12]
 8015578:	60b9      	str	r1, [r7, #8]
 801557a:	607a      	str	r2, [r7, #4]
    {
        // Running in UI thread / main

        assert(index < no_streams);
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	2b00      	cmp	r3, #0
 8015580:	d006      	beq.n	8015590 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x20>
 8015582:	4b08      	ldr	r3, [pc, #32]	; (80155a4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x34>)
 8015584:	4a08      	ldr	r2, [pc, #32]	; (80155a8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x38>)
 8015586:	f240 1103 	movw	r1, #259	; 0x103
 801558a:	4808      	ldr	r0, [pc, #32]	; (80155ac <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10addDecoderER12MJPEGDecoderm+0x3c>)
 801558c:	f014 fbe0 	bl	8029d50 <__assert_func>
        mjpegDecoders[index] = &decoder;
 8015590:	68fa      	ldr	r2, [r7, #12]
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	009b      	lsls	r3, r3, #2
 8015596:	4413      	add	r3, r2
 8015598:	68ba      	ldr	r2, [r7, #8]
 801559a:	605a      	str	r2, [r3, #4]
    }
 801559c:	bf00      	nop
 801559e:	3710      	adds	r7, #16
 80155a0:	46bd      	mov	sp, r7
 80155a2:	bd80      	pop	{r7, pc}
 80155a4:	0802e28c 	.word	0x0802e28c
 80155a8:	0802e2a0 	.word	0x0802e2a0
 80155ac:	0802e400 	.word	0x0802e400

080155b0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setRGBBufferEPhj>:
    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
 80155b0:	b480      	push	{r7}
 80155b2:	b085      	sub	sp, #20
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	60f8      	str	r0, [r7, #12]
 80155b8:	60b9      	str	r1, [r7, #8]
 80155ba:	607a      	str	r2, [r7, #4]
        bufferRGB = buffer;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	68ba      	ldr	r2, [r7, #8]
 80155c0:	631a      	str	r2, [r3, #48]	; 0x30
        topBufferRGB = bufferRGB;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	639a      	str	r2, [r3, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	687a      	ldr	r2, [r7, #4]
 80155ce:	635a      	str	r2, [r3, #52]	; 0x34
    }
 80155d0:	bf00      	nop
 80155d2:	3714      	adds	r7, #20
 80155d4:	46bd      	mov	sp, r7
 80155d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155da:	4770      	bx	lr

080155dc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv>:

    void endFrame()
 80155dc:	b580      	push	{r7, lr}
 80155de:	b084      	sub	sp, #16
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        // Check if we should invalidate in next frame
        for (uint32_t i = 0; i < no_streams; i++)
 80155e4:	2300      	movs	r3, #0
 80155e6:	60fb      	str	r3, [r7, #12]
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d120      	bne.n	8015630 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x54>
        {
            Stream& stream = streams[i];
 80155ee:	68fa      	ldr	r2, [r7, #12]
 80155f0:	4613      	mov	r3, r2
 80155f2:	00db      	lsls	r3, r3, #3
 80155f4:	4413      	add	r3, r2
 80155f6:	009b      	lsls	r3, r3, #2
 80155f8:	3308      	adds	r3, #8
 80155fa:	687a      	ldr	r2, [r7, #4]
 80155fc:	4413      	add	r3, r2
 80155fe:	3304      	adds	r3, #4
 8015600:	60bb      	str	r3, [r7, #8]
            if (stream.isPlaying || stream.isShowingOneFrame)
 8015602:	68bb      	ldr	r3, [r7, #8]
 8015604:	7f5b      	ldrb	r3, [r3, #29]
 8015606:	2b00      	cmp	r3, #0
 8015608:	d103      	bne.n	8015612 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x36>
 801560a:	68bb      	ldr	r3, [r7, #8]
 801560c:	7f9b      	ldrb	r3, [r3, #30]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d00a      	beq.n	8015628 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x4c>
            {
                if (decodeForNextTick(stream))
 8015612:	68b9      	ldr	r1, [r7, #8]
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f000 f85e 	bl	80156d6 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE>
 801561a:	4603      	mov	r3, r0
 801561c:	2b00      	cmp	r3, #0
 801561e:	d003      	beq.n	8015628 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x4c>
                {
                    stream.doDecode = true;
 8015620:	68bb      	ldr	r3, [r7, #8]
 8015622:	2201      	movs	r2, #1
 8015624:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        for (uint32_t i = 0; i < no_streams; i++)
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	3301      	adds	r3, #1
 801562c:	60fb      	str	r3, [r7, #12]
 801562e:	e7db      	b.n	80155e8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0xc>
                }
            }
        }

        // Mark next draw as first
        firstDrawThisFrame = true;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	2201      	movs	r2, #1
 8015634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        // Signal decoder thread to wake up
        SEM_POST(semDecode);
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801563c:	4618      	mov	r0, r3
 801563e:	f7f5 f947 	bl	800a8d0 <osSemaphoreRelease>
        // Unlock the buffer mutex. FreeRTOS does not allow unlocking a mutex you did not lock
        if (uiHasMutex)
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8015648:	2b00      	cmp	r3, #0
 801564a:	d008      	beq.n	801565e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE8endFrameEv+0x82>
        {
            MUTEX_UNLOCK(mutexBuffers);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015650:	4618      	mov	r0, r3
 8015652:	f7f4 ffeb 	bl	800a62c <osMutexRelease>
            uiHasMutex = false;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2200      	movs	r2, #0
 801565a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        }
    }
 801565e:	bf00      	nop
 8015660:	3710      	adds	r7, #16
 8015662:	46bd      	mov	sp, r7
 8015664:	bd80      	pop	{r7, pc}

08015666 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>:

private:
    class Stream
    {
    public:
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8015666:	b480      	push	{r7}
 8015668:	b083      	sub	sp, #12
 801566a:	af00      	add	r7, sp, #0
 801566c:	6078      	str	r0, [r7, #4]
                   seek_to_frame(0), skip_frames(0),
                   isActive(false), isPlaying(false), isShowingOneFrame(false),
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	2200      	movs	r2, #0
 8015672:	601a      	str	r2, [r3, #0]
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2200      	movs	r2, #0
 8015678:	605a      	str	r2, [r3, #4]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	2200      	movs	r2, #0
 801567e:	609a      	str	r2, [r3, #8]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2200      	movs	r2, #0
 8015684:	60da      	str	r2, [r3, #12]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	2200      	movs	r2, #0
 801568a:	611a      	str	r2, [r3, #16]
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2200      	movs	r2, #0
 8015690:	615a      	str	r2, [r3, #20]
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	2200      	movs	r2, #0
 8015696:	619a      	str	r2, [r3, #24]
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	2200      	movs	r2, #0
 801569c:	771a      	strb	r2, [r3, #28]
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	2200      	movs	r2, #0
 80156a2:	775a      	strb	r2, [r3, #29]
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	2200      	movs	r2, #0
 80156a8:	779a      	strb	r2, [r3, #30]
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2200      	movs	r2, #0
 80156ae:	77da      	strb	r2, [r3, #31]
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2200      	movs	r2, #0
 80156b4:	f883 2020 	strb.w	r2, [r3, #32]
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2201      	movs	r2, #1
 80156bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	2200      	movs	r2, #0
 80156c4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	4618      	mov	r0, r3
 80156cc:	370c      	adds	r7, #12
 80156ce:	46bd      	mov	sp, r7
 80156d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d4:	4770      	bx	lr

080156d6 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE>:
    MUTEX_TYPE mutexBuffers;     // Mutual exclusion of the video buffers and stream data

    /**
     * Return true, if new video frame should be decoded for the next tick (keep video decode framerate low)
     */
    bool decodeForNextTick(Stream& stream)
 80156d6:	b480      	push	{r7}
 80156d8:	b083      	sub	sp, #12
 80156da:	af00      	add	r7, sp, #0
 80156dc:	6078      	str	r0, [r7, #4]
 80156de:	6039      	str	r1, [r7, #0]
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	689b      	ldr	r3, [r3, #8]
 80156e4:	683a      	ldr	r2, [r7, #0]
 80156e6:	68d2      	ldr	r2, [r2, #12]
 80156e8:	fb03 f202 	mul.w	r2, r3, r2
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	691b      	ldr	r3, [r3, #16]
 80156f0:	6839      	ldr	r1, [r7, #0]
 80156f2:	6849      	ldr	r1, [r1, #4]
 80156f4:	fb01 f303 	mul.w	r3, r1, r3
 80156f8:	429a      	cmp	r2, r3
 80156fa:	d322      	bcc.n	8015742 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x6c>
        {
            if (allowSkipFrames)
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015702:	2b00      	cmp	r3, #0
 8015704:	d01b      	beq.n	801573e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x68>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	689b      	ldr	r3, [r3, #8]
 801570a:	683a      	ldr	r2, [r7, #0]
 801570c:	68d2      	ldr	r2, [r2, #12]
 801570e:	fb03 f202 	mul.w	r2, r3, r2
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	691b      	ldr	r3, [r3, #16]
 8015716:	6839      	ldr	r1, [r7, #0]
 8015718:	6849      	ldr	r1, [r1, #4]
 801571a:	fb01 f303 	mul.w	r3, r1, r3
 801571e:	1ad2      	subs	r2, r2, r3
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	691b      	ldr	r3, [r3, #16]
 8015724:	fbb2 f2f3 	udiv	r2, r2, r3
 8015728:	683b      	ldr	r3, [r7, #0]
 801572a:	619a      	str	r2, [r3, #24]
                if (stream.skip_frames > 0)
 801572c:	683b      	ldr	r3, [r7, #0]
 801572e:	699b      	ldr	r3, [r3, #24]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d004      	beq.n	801573e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x68>
                {
                    stream.skip_frames--;
 8015734:	683b      	ldr	r3, [r7, #0]
 8015736:	699b      	ldr	r3, [r3, #24]
 8015738:	1e5a      	subs	r2, r3, #1
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	619a      	str	r2, [r3, #24]
                }
            }
            return true;
 801573e:	2301      	movs	r3, #1
 8015740:	e000      	b.n	8015744 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE17decodeForNextTickERNS3_6StreamE+0x6e>
        }
        return false;
 8015742:	2300      	movs	r3, #0
    }
 8015744:	4618      	mov	r0, r3
 8015746:	370c      	adds	r7, #12
 8015748:	46bd      	mov	sp, r7
 801574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574e:	4770      	bx	lr

08015750 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8015750:	b580      	push	{r7, lr}
 8015752:	b082      	sub	sp, #8
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
 8015758:	4a05      	ldr	r2, [pc, #20]	; (8015770 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev+0x20>)
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	601a      	str	r2, [r3, #0]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	4618      	mov	r0, r3
 8015762:	f7ff fbeb 	bl	8014f3c <_ZN8touchgfx15VideoControllerD1Ev>
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	4618      	mov	r0, r3
 801576a:	3708      	adds	r7, #8
 801576c:	46bd      	mov	sp, r7
 801576e:	bd80      	pop	{r7, pc}
 8015770:	080300ec 	.word	0x080300ec

08015774 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED0Ev>:
 8015774:	b580      	push	{r7, lr}
 8015776:	b082      	sub	sp, #8
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	6878      	ldr	r0, [r7, #4]
 801577e:	f7ff ffe7 	bl	8015750 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>
 8015782:	2148      	movs	r1, #72	; 0x48
 8015784:	6878      	ldr	r0, [r7, #4]
 8015786:	f014 fa39 	bl	8029bfc <_ZdlPvj>
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	4618      	mov	r0, r3
 801578e:	3708      	adds	r7, #8
 8015790:	46bd      	mov	sp, r7
 8015792:	bd80      	pop	{r7, pc}

08015794 <_Z41__static_initialization_and_destruction_0ii>:
}
 8015794:	b580      	push	{r7, lr}
 8015796:	b082      	sub	sp, #8
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
 801579c:	6039      	str	r1, [r7, #0]
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	2b01      	cmp	r3, #1
 80157a2:	d10a      	bne.n	80157ba <_Z41__static_initialization_and_destruction_0ii+0x26>
 80157a4:	683b      	ldr	r3, [r7, #0]
 80157a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157aa:	4293      	cmp	r3, r2
 80157ac:	d105      	bne.n	80157ba <_Z41__static_initialization_and_destruction_0ii+0x26>
HardwareMJPEGDecoder mjpegdecoder1;
 80157ae:	480c      	ldr	r0, [pc, #48]	; (80157e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80157b0:	f7fd fa08 	bl	8012bc4 <_ZN20HardwareMJPEGDecoderC1Ev>
DedicatedBufferController<1, 0, 0, 0*4U, Bitmap::ARGB8888> videoController;
 80157b4:	480b      	ldr	r0, [pc, #44]	; (80157e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80157b6:	f7ff fe85 	bl	80154c4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EEC1Ev>
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d10a      	bne.n	80157d6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80157c0:	683b      	ldr	r3, [r7, #0]
 80157c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80157c6:	4293      	cmp	r3, r2
 80157c8:	d105      	bne.n	80157d6 <_Z41__static_initialization_and_destruction_0ii+0x42>
 80157ca:	4806      	ldr	r0, [pc, #24]	; (80157e4 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80157cc:	f7ff ffc0 	bl	8015750 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EED1Ev>
HardwareMJPEGDecoder mjpegdecoder1;
 80157d0:	4803      	ldr	r0, [pc, #12]	; (80157e0 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80157d2:	f7fe f92f 	bl	8013a34 <_ZN20HardwareMJPEGDecoderD1Ev>
}
 80157d6:	bf00      	nop
 80157d8:	3708      	adds	r7, #8
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	bf00      	nop
 80157e0:	2003821c 	.word	0x2003821c
 80157e4:	20038260 	.word	0x20038260

080157e8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 80157e8:	b580      	push	{r7, lr}
 80157ea:	b084      	sub	sp, #16
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
 80157f0:	6039      	str	r1, [r7, #0]
        const uint32_t sizeOfOneDecodeBuffer = height * stride;
 80157f2:	2300      	movs	r3, #0
 80157f4:	60fb      	str	r3, [r7, #12]
        Handle handle = getFreeHandle();
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	f000 fa7a 	bl	8015cf0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv>
 80157fc:	60b8      	str	r0, [r7, #8]
        streams[handle].isActive = true;
 80157fe:	6879      	ldr	r1, [r7, #4]
 8015800:	68ba      	ldr	r2, [r7, #8]
 8015802:	4613      	mov	r3, r2
 8015804:	00db      	lsls	r3, r3, #3
 8015806:	4413      	add	r3, r2
 8015808:	009b      	lsls	r3, r3, #2
 801580a:	440b      	add	r3, r1
 801580c:	3328      	adds	r3, #40	; 0x28
 801580e:	2201      	movs	r2, #1
 8015810:	701a      	strb	r2, [r3, #0]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801581e:	440b      	add	r3, r1
 8015820:	429a      	cmp	r2, r3
 8015822:	d905      	bls.n	8015830 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8015824:	4b0f      	ldr	r3, [pc, #60]	; (8015864 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x7c>)
 8015826:	4a10      	ldr	r2, [pc, #64]	; (8015868 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x80>)
 8015828:	2152      	movs	r1, #82	; 0x52
 801582a:	4810      	ldr	r0, [pc, #64]	; (801586c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19registerVideoWidgetERNS0_11VideoWidgetE+0x84>)
 801582c:	f014 fa90 	bl	8029d50 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	68ba      	ldr	r2, [r7, #8]
 8015838:	3202      	adds	r2, #2
 801583a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        topBufferRGB += sizeOfOneDecodeBuffer;
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	639a      	str	r2, [r3, #56]	; 0x38
        widget.setVideoBufferFormat(output_format, width, height);
 8015846:	2300      	movs	r3, #0
 8015848:	2200      	movs	r2, #0
 801584a:	2102      	movs	r1, #2
 801584c:	6838      	ldr	r0, [r7, #0]
 801584e:	f7ff fba3 	bl	8014f98 <_ZN8touchgfx11VideoWidget20setVideoBufferFormatENS_6Bitmap12BitmapFormatEss>
        widget.setVideoBuffer((uint8_t*)0);
 8015852:	2100      	movs	r1, #0
 8015854:	6838      	ldr	r0, [r7, #0]
 8015856:	f7ff fb91 	bl	8014f7c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
        return handle;
 801585a:	68bb      	ldr	r3, [r7, #8]
    }
 801585c:	4618      	mov	r0, r3
 801585e:	3710      	adds	r7, #16
 8015860:	46bd      	mov	sp, r7
 8015862:	bd80      	pop	{r7, pc}
 8015864:	0802e440 	.word	0x0802e440
 8015868:	0802e47c 	.word	0x0802e47c
 801586c:	0802e400 	.word	0x0802e400

08015870 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8015870:	b580      	push	{r7, lr}
 8015872:	b084      	sub	sp, #16
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
 8015878:	6039      	str	r1, [r7, #0]
        MUTEX_LOCK(mutexBuffers);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801587e:	f04f 31ff 	mov.w	r1, #4294967295
 8015882:	4618      	mov	r0, r3
 8015884:	f7f4 fe74 	bl	800a570 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801588c:	4618      	mov	r0, r3
 801588e:	f7f4 fecd 	bl	800a62c <osMutexRelease>
        streams[handle].isActive = false;
 8015892:	6879      	ldr	r1, [r7, #4]
 8015894:	683a      	ldr	r2, [r7, #0]
 8015896:	4613      	mov	r3, r2
 8015898:	00db      	lsls	r3, r3, #3
 801589a:	4413      	add	r3, r2
 801589c:	009b      	lsls	r3, r3, #2
 801589e:	440b      	add	r3, r1
 80158a0:	3328      	adds	r3, #40	; 0x28
 80158a2:	2200      	movs	r2, #0
 80158a4:	701a      	strb	r2, [r3, #0]
        bool oneIsActive = false;
 80158a6:	2300      	movs	r3, #0
 80158a8:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 80158aa:	2300      	movs	r3, #0
 80158ac:	60bb      	str	r3, [r7, #8]
 80158ae:	68bb      	ldr	r3, [r7, #8]
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d114      	bne.n	80158de <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x6e>
            oneIsActive |= streams[i].isActive;
 80158b4:	6879      	ldr	r1, [r7, #4]
 80158b6:	68ba      	ldr	r2, [r7, #8]
 80158b8:	4613      	mov	r3, r2
 80158ba:	00db      	lsls	r3, r3, #3
 80158bc:	4413      	add	r3, r2
 80158be:	009b      	lsls	r3, r3, #2
 80158c0:	440b      	add	r3, r1
 80158c2:	3328      	adds	r3, #40	; 0x28
 80158c4:	781a      	ldrb	r2, [r3, #0]
 80158c6:	7bfb      	ldrb	r3, [r7, #15]
 80158c8:	4313      	orrs	r3, r2
 80158ca:	b2db      	uxtb	r3, r3
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	bf14      	ite	ne
 80158d0:	2301      	movne	r3, #1
 80158d2:	2300      	moveq	r3, #0
 80158d4:	73fb      	strb	r3, [r7, #15]
        for (uint32_t i = 0; i < no_streams; i++)
 80158d6:	68bb      	ldr	r3, [r7, #8]
 80158d8:	3301      	adds	r3, #1
 80158da:	60bb      	str	r3, [r7, #8]
 80158dc:	e7e7      	b.n	80158ae <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x3e>
        if (oneIsActive == false)
 80158de:	7bfb      	ldrb	r3, [r7, #15]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d103      	bne.n	80158ec <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21unregisterVideoWidgetEm+0x7c>
            topBufferRGB = bufferRGB;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80158e8:	687b      	ldr	r3, [r7, #4]
 80158ea:	639a      	str	r2, [r3, #56]	; 0x38
    }
 80158ec:	bf00      	nop
 80158ee:	3710      	adds	r7, #16
 80158f0:	46bd      	mov	sp, r7
 80158f2:	bd80      	pop	{r7, pc}

080158f4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80158f4:	b580      	push	{r7, lr}
 80158f6:	b086      	sub	sp, #24
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	60f8      	str	r0, [r7, #12]
 80158fc:	60b9      	str	r1, [r7, #8]
 80158fe:	607a      	str	r2, [r7, #4]
 8015900:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d005      	beq.n	8015914 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x20>
 8015908:	4b0f      	ldr	r3, [pc, #60]	; (8015948 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x54>)
 801590a:	4a10      	ldr	r2, [pc, #64]	; (801594c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x58>)
 801590c:	2182      	movs	r1, #130	; 0x82
 801590e:	4810      	ldr	r0, [pc, #64]	; (8015950 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setFrameRateEmmm+0x5c>)
 8015910:	f014 fa1e 	bl	8029d50 <__assert_func>
        Stream& stream = streams[handle];
 8015914:	68ba      	ldr	r2, [r7, #8]
 8015916:	4613      	mov	r3, r2
 8015918:	00db      	lsls	r3, r3, #3
 801591a:	4413      	add	r3, r2
 801591c:	009b      	lsls	r3, r3, #2
 801591e:	3308      	adds	r3, #8
 8015920:	68fa      	ldr	r2, [r7, #12]
 8015922:	4413      	add	r3, r2
 8015924:	3304      	adds	r3, #4
 8015926:	617b      	str	r3, [r7, #20]
        stream.frameCount = 0;
 8015928:	697b      	ldr	r3, [r7, #20]
 801592a:	2200      	movs	r2, #0
 801592c:	605a      	str	r2, [r3, #4]
        stream.tickCount = 0;
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	2200      	movs	r2, #0
 8015932:	609a      	str	r2, [r3, #8]
        stream.frame_rate_ticks = ui_frames;
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	687a      	ldr	r2, [r7, #4]
 8015938:	611a      	str	r2, [r3, #16]
        stream.frame_rate_video = video_frames;
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	683a      	ldr	r2, [r7, #0]
 801593e:	60da      	str	r2, [r3, #12]
    }
 8015940:	bf00      	nop
 8015942:	3718      	adds	r7, #24
 8015944:	46bd      	mov	sp, r7
 8015946:	bd80      	pop	{r7, pc}
 8015948:	0802e61c 	.word	0x0802e61c
 801594c:	0802e630 	.word	0x0802e630
 8015950:	0802e400 	.word	0x0802e400

08015954 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8015954:	b580      	push	{r7, lr}
 8015956:	b086      	sub	sp, #24
 8015958:	af00      	add	r7, sp, #0
 801595a:	60f8      	str	r0, [r7, #12]
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8015960:	68bb      	ldr	r3, [r7, #8]
 8015962:	2b00      	cmp	r3, #0
 8015964:	d005      	beq.n	8015972 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0x1e>
 8015966:	4b29      	ldr	r3, [pc, #164]	; (8015a0c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xb8>)
 8015968:	4a29      	ldr	r2, [pc, #164]	; (8015a10 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xbc>)
 801596a:	21d0      	movs	r1, #208	; 0xd0
 801596c:	4829      	ldr	r0, [pc, #164]	; (8015a14 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xc0>)
 801596e:	f014 f9ef 	bl	8029d50 <__assert_func>
        Stream& stream = streams[handle];
 8015972:	68ba      	ldr	r2, [r7, #8]
 8015974:	4613      	mov	r3, r2
 8015976:	00db      	lsls	r3, r3, #3
 8015978:	4413      	add	r3, r2
 801597a:	009b      	lsls	r3, r3, #2
 801597c:	3308      	adds	r3, #8
 801597e:	68fa      	ldr	r2, [r7, #12]
 8015980:	4413      	add	r3, r2
 8015982:	3304      	adds	r3, #4
 8015984:	617b      	str	r3, [r7, #20]
        if (stream.isPlaying)
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	7f5b      	ldrb	r3, [r3, #29]
 801598a:	2b00      	cmp	r3, #0
 801598c:	d00b      	beq.n	80159a6 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0x52>
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
 801598e:	f7f9 f8c5 	bl	800eb1c <_ZN8touchgfx3HAL11getInstanceEv>
 8015992:	4603      	mov	r3, r0
 8015994:	4618      	mov	r0, r3
 8015996:	f7ff fa64 	bl	8014e62 <_ZN8touchgfx3HAL18getLCDRefreshCountEv>
 801599a:	4602      	mov	r2, r0
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	689b      	ldr	r3, [r3, #8]
 80159a0:	441a      	add	r2, r3
 80159a2:	697b      	ldr	r3, [r7, #20]
 80159a4:	609a      	str	r2, [r3, #8]
        if (stream.doInvalidateOnNextTick)
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	7fdb      	ldrb	r3, [r3, #31]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d029      	beq.n	8015a02 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xae>
            widget.setVideoBuffer((uint8_t*)decodeBuffers[handle]);
 80159ae:	68fb      	ldr	r3, [r7, #12]
 80159b0:	68ba      	ldr	r2, [r7, #8]
 80159b2:	3202      	adds	r2, #2
 80159b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159b8:	4619      	mov	r1, r3
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	f7ff fade 	bl	8014f7c <_ZN8touchgfx11VideoWidget14setVideoBufferEPh>
            widget.invalidate();
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	3314      	adds	r3, #20
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	4610      	mov	r0, r2
 80159cc:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80159ce:	697b      	ldr	r3, [r7, #20]
 80159d0:	2200      	movs	r2, #0
 80159d2:	77da      	strb	r2, [r3, #31]
            if (!stream.hasMoreFrames && !stream.repeat)
 80159d4:	697b      	ldr	r3, [r7, #20]
 80159d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80159da:	f083 0301 	eor.w	r3, r3, #1
 80159de:	b2db      	uxtb	r3, r3
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d00a      	beq.n	80159fa <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
 80159e4:	697b      	ldr	r3, [r7, #20]
 80159e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80159ea:	f083 0301 	eor.w	r3, r3, #1
 80159ee:	b2db      	uxtb	r3, r3
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d002      	beq.n	80159fa <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xa6>
                stream.isPlaying = false;
 80159f4:	697b      	ldr	r3, [r7, #20]
 80159f6:	2200      	movs	r2, #0
 80159f8:	775a      	strb	r2, [r3, #29]
            return stream.hasMoreFrames;
 80159fa:	697b      	ldr	r3, [r7, #20]
 80159fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a00:	e000      	b.n	8015a04 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE11updateFrameEmRNS0_11VideoWidgetE+0xb0>
        return true;
 8015a02:	2301      	movs	r3, #1
    }
 8015a04:	4618      	mov	r0, r3
 8015a06:	3718      	adds	r7, #24
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}
 8015a0c:	0802e61c 	.word	0x0802e61c
 8015a10:	0802e7e8 	.word	0x0802e7e8
 8015a14:	0802e400 	.word	0x0802e400

08015a18 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b084      	sub	sp, #16
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	60f8      	str	r0, [r7, #12]
 8015a20:	60b9      	str	r1, [r7, #8]
 8015a22:	607a      	str	r2, [r7, #4]
 8015a24:	603b      	str	r3, [r7, #0]
        if (firstDrawThisFrame)
 8015a26:	68fb      	ldr	r3, [r7, #12]
 8015a28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d00e      	beq.n	8015a4e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x36>
            MUTEX_LOCK(mutexBuffers);
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a34:	f04f 31ff 	mov.w	r1, #4294967295
 8015a38:	4618      	mov	r0, r3
 8015a3a:	f7f4 fd99 	bl	800a570 <osMutexAcquire>
            firstDrawThisFrame = false;
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	2200      	movs	r2, #0
 8015a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
            uiHasMutex = true;
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	2201      	movs	r2, #1
 8015a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
 8015a4e:	bf00      	nop
 8015a50:	3710      	adds	r7, #16
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}
	...

08015a58 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8015a58:	b580      	push	{r7, lr}
 8015a5a:	b086      	sub	sp, #24
 8015a5c:	af00      	add	r7, sp, #0
 8015a5e:	60f8      	str	r0, [r7, #12]
 8015a60:	60b9      	str	r1, [r7, #8]
 8015a62:	607a      	str	r2, [r7, #4]
 8015a64:	603b      	str	r3, [r7, #0]
        assert(handle < no_streams);
 8015a66:	68bb      	ldr	r3, [r7, #8]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d005      	beq.n	8015a78 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x20>
 8015a6c:	4b13      	ldr	r3, [pc, #76]	; (8015abc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x64>)
 8015a6e:	4a14      	ldr	r2, [pc, #80]	; (8015ac0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x68>)
 8015a70:	2190      	movs	r1, #144	; 0x90
 8015a72:	4814      	ldr	r0, [pc, #80]	; (8015ac4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmPKhm+0x6c>)
 8015a74:	f014 f96c 	bl	8029d50 <__assert_func>
        Stream& stream = streams[handle];
 8015a78:	68ba      	ldr	r2, [r7, #8]
 8015a7a:	4613      	mov	r3, r2
 8015a7c:	00db      	lsls	r3, r3, #3
 8015a7e:	4413      	add	r3, r2
 8015a80:	009b      	lsls	r3, r3, #2
 8015a82:	3308      	adds	r3, #8
 8015a84:	68fa      	ldr	r2, [r7, #12]
 8015a86:	4413      	add	r3, r2
 8015a88:	3304      	adds	r3, #4
 8015a8a:	617b      	str	r3, [r7, #20]
        stream.frameNumber = 0;
 8015a8c:	697b      	ldr	r3, [r7, #20]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	601a      	str	r2, [r3, #0]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8015a92:	68fa      	ldr	r2, [r7, #12]
 8015a94:	68bb      	ldr	r3, [r7, #8]
 8015a96:	009b      	lsls	r3, r3, #2
 8015a98:	4413      	add	r3, r2
 8015a9a:	6858      	ldr	r0, [r3, #4]
 8015a9c:	68fa      	ldr	r2, [r7, #12]
 8015a9e:	68bb      	ldr	r3, [r7, #8]
 8015aa0:	009b      	lsls	r3, r3, #2
 8015aa2:	4413      	add	r3, r2
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	3308      	adds	r3, #8
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	683a      	ldr	r2, [r7, #0]
 8015aae:	6879      	ldr	r1, [r7, #4]
 8015ab0:	4798      	blx	r3
    }
 8015ab2:	bf00      	nop
 8015ab4:	3718      	adds	r7, #24
 8015ab6:	46bd      	mov	sp, r7
 8015ab8:	bd80      	pop	{r7, pc}
 8015aba:	bf00      	nop
 8015abc:	0802e61c 	.word	0x0802e61c
 8015ac0:	0802e984 	.word	0x0802e984
 8015ac4:	0802e400 	.word	0x0802e400

08015ac8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12setVideoDataEmRNS0_15VideoDataReaderE>:
    virtual void setVideoData(const Handle handle, VideoDataReader& reader)
 8015ac8:	b580      	push	{r7, lr}
 8015aca:	b084      	sub	sp, #16
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	60f8      	str	r0, [r7, #12]
 8015ad0:	60b9      	str	r1, [r7, #8]
 8015ad2:	607a      	str	r2, [r7, #4]
        mjpegDecoders[handle]->setVideoData(reader);
 8015ad4:	68fa      	ldr	r2, [r7, #12]
 8015ad6:	68bb      	ldr	r3, [r7, #8]
 8015ad8:	009b      	lsls	r3, r3, #2
 8015ada:	4413      	add	r3, r2
 8015adc:	6858      	ldr	r0, [r3, #4]
 8015ade:	68fa      	ldr	r2, [r7, #12]
 8015ae0:	68bb      	ldr	r3, [r7, #8]
 8015ae2:	009b      	lsls	r3, r3, #2
 8015ae4:	4413      	add	r3, r2
 8015ae6:	685b      	ldr	r3, [r3, #4]
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	330c      	adds	r3, #12
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	6879      	ldr	r1, [r7, #4]
 8015af0:	4798      	blx	r3
    }
 8015af2:	bf00      	nop
 8015af4:	3710      	adds	r7, #16
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}
	...

08015afc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b086      	sub	sp, #24
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	60f8      	str	r0, [r7, #12]
 8015b04:	60b9      	str	r1, [r7, #8]
 8015b06:	603b      	str	r3, [r7, #0]
 8015b08:	4613      	mov	r3, r2
 8015b0a:	71fb      	strb	r3, [r7, #7]
        assert(handle < no_streams);
 8015b0c:	68bb      	ldr	r3, [r7, #8]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d005      	beq.n	8015b1e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x22>
 8015b12:	4b3a      	ldr	r3, [pc, #232]	; (8015bfc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x100>)
 8015b14:	4a3a      	ldr	r2, [pc, #232]	; (8015c00 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x104>)
 8015b16:	21a2      	movs	r1, #162	; 0xa2
 8015b18:	483a      	ldr	r0, [pc, #232]	; (8015c04 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x108>)
 8015b1a:	f014 f919 	bl	8029d50 <__assert_func>
        Stream& stream = streams[handle];
 8015b1e:	68ba      	ldr	r2, [r7, #8]
 8015b20:	4613      	mov	r3, r2
 8015b22:	00db      	lsls	r3, r3, #3
 8015b24:	4413      	add	r3, r2
 8015b26:	009b      	lsls	r3, r3, #2
 8015b28:	3308      	adds	r3, #8
 8015b2a:	68fa      	ldr	r2, [r7, #12]
 8015b2c:	4413      	add	r3, r2
 8015b2e:	3304      	adds	r3, #4
 8015b30:	617b      	str	r3, [r7, #20]
        switch (cmd)
 8015b32:	79fb      	ldrb	r3, [r7, #7]
 8015b34:	2b05      	cmp	r3, #5
 8015b36:	d85c      	bhi.n	8015bf2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
 8015b38:	a201      	add	r2, pc, #4	; (adr r2, 8015b40 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0x44>)
 8015b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b3e:	bf00      	nop
 8015b40:	08015b59 	.word	0x08015b59
 8015b44:	08015b99 	.word	0x08015b99
 8015b48:	08015ba1 	.word	0x08015ba1
 8015b4c:	08015bb5 	.word	0x08015bb5
 8015b50:	08015bcf 	.word	0x08015bcf
 8015b54:	08015bdd 	.word	0x08015bdd
            if (mjpegDecoders[handle]->hasVideo())
 8015b58:	68fa      	ldr	r2, [r7, #12]
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	009b      	lsls	r3, r3, #2
 8015b5e:	4413      	add	r3, r2
 8015b60:	6859      	ldr	r1, [r3, #4]
 8015b62:	68fa      	ldr	r2, [r7, #12]
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	009b      	lsls	r3, r3, #2
 8015b68:	4413      	add	r3, r2
 8015b6a:	685b      	ldr	r3, [r3, #4]
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	3310      	adds	r3, #16
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	4608      	mov	r0, r1
 8015b74:	4798      	blx	r3
 8015b76:	4603      	mov	r3, r0
 8015b78:	2b00      	cmp	r3, #0
 8015b7a:	d039      	beq.n	8015bf0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
                stream.isPlaying = true;
 8015b7c:	697b      	ldr	r3, [r7, #20]
 8015b7e:	2201      	movs	r2, #1
 8015b80:	775a      	strb	r2, [r3, #29]
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8015b82:	697b      	ldr	r3, [r7, #20]
 8015b84:	2201      	movs	r2, #1
 8015b86:	f883 2020 	strb.w	r2, [r3, #32]
                stream.frameCount = 0;
 8015b8a:	697b      	ldr	r3, [r7, #20]
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	605a      	str	r2, [r3, #4]
                stream.tickCount = 0;
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	2200      	movs	r2, #0
 8015b94:	609a      	str	r2, [r3, #8]
            break;
 8015b96:	e02b      	b.n	8015bf0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf4>
            stream.isPlaying = false;
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	2200      	movs	r2, #0
 8015b9c:	775a      	strb	r2, [r3, #29]
            break;
 8015b9e:	e028      	b.n	8015bf2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8015ba0:	697b      	ldr	r3, [r7, #20]
 8015ba2:	683a      	ldr	r2, [r7, #0]
 8015ba4:	615a      	str	r2, [r3, #20]
            stream.frameCount = 0;
 8015ba6:	697b      	ldr	r3, [r7, #20]
 8015ba8:	2200      	movs	r2, #0
 8015baa:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8015bac:	697b      	ldr	r3, [r7, #20]
 8015bae:	2200      	movs	r2, #0
 8015bb0:	609a      	str	r2, [r3, #8]
            break;
 8015bb2:	e01e      	b.n	8015bf2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.seek_to_frame = param;
 8015bb4:	697b      	ldr	r3, [r7, #20]
 8015bb6:	683a      	ldr	r2, [r7, #0]
 8015bb8:	615a      	str	r2, [r3, #20]
            stream.isShowingOneFrame = true;
 8015bba:	697b      	ldr	r3, [r7, #20]
 8015bbc:	2201      	movs	r2, #1
 8015bbe:	779a      	strb	r2, [r3, #30]
            stream.frameCount = 0;
 8015bc0:	697b      	ldr	r3, [r7, #20]
 8015bc2:	2200      	movs	r2, #0
 8015bc4:	605a      	str	r2, [r3, #4]
            stream.tickCount = 0;
 8015bc6:	697b      	ldr	r3, [r7, #20]
 8015bc8:	2200      	movs	r2, #0
 8015bca:	609a      	str	r2, [r3, #8]
            break;
 8015bcc:	e011      	b.n	8015bf2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.isPlaying = false;
 8015bce:	697b      	ldr	r3, [r7, #20]
 8015bd0:	2200      	movs	r2, #0
 8015bd2:	775a      	strb	r2, [r3, #29]
            stream.seek_to_frame = 1;
 8015bd4:	697b      	ldr	r3, [r7, #20]
 8015bd6:	2201      	movs	r2, #1
 8015bd8:	615a      	str	r2, [r3, #20]
            break;
 8015bda:	e00a      	b.n	8015bf2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            stream.repeat = (param > 0);
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	bf14      	ite	ne
 8015be2:	2301      	movne	r3, #1
 8015be4:	2300      	moveq	r3, #0
 8015be6:	b2da      	uxtb	r2, r3
 8015be8:	697b      	ldr	r3, [r7, #20]
 8015bea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            break;
 8015bee:	e000      	b.n	8015bf2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE10setCommandEmNS0_15VideoController7CommandEm+0xf6>
            break;
 8015bf0:	bf00      	nop
    }
 8015bf2:	bf00      	nop
 8015bf4:	3718      	adds	r7, #24
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	0802e61c 	.word	0x0802e61c
 8015c00:	0802eb5c 	.word	0x0802eb5c
 8015c04:	0802e400 	.word	0x0802e400

08015c08 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8015c08:	b580      	push	{r7, lr}
 8015c0a:	b084      	sub	sp, #16
 8015c0c:	af00      	add	r7, sp, #0
 8015c0e:	6078      	str	r0, [r7, #4]
 8015c10:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8015c12:	683b      	ldr	r3, [r7, #0]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d005      	beq.n	8015c24 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x1c>
 8015c18:	4b0a      	ldr	r3, [pc, #40]	; (8015c44 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x3c>)
 8015c1a:	4a0b      	ldr	r2, [pc, #44]	; (8015c48 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x40>)
 8015c1c:	2179      	movs	r1, #121	; 0x79
 8015c1e:	480b      	ldr	r0, [pc, #44]	; (8015c4c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE21getCurrentFrameNumberEm+0x44>)
 8015c20:	f014 f896 	bl	8029d50 <__assert_func>
        const Stream& stream = streams[handle];
 8015c24:	683a      	ldr	r2, [r7, #0]
 8015c26:	4613      	mov	r3, r2
 8015c28:	00db      	lsls	r3, r3, #3
 8015c2a:	4413      	add	r3, r2
 8015c2c:	009b      	lsls	r3, r3, #2
 8015c2e:	3308      	adds	r3, #8
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	4413      	add	r3, r2
 8015c34:	3304      	adds	r3, #4
 8015c36:	60fb      	str	r3, [r7, #12]
        return stream.frameNumber;
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	681b      	ldr	r3, [r3, #0]
    }
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	3710      	adds	r7, #16
 8015c40:	46bd      	mov	sp, r7
 8015c42:	bd80      	pop	{r7, pc}
 8015c44:	0802e61c 	.word	0x0802e61c
 8015c48:	0802ed2c 	.word	0x0802ed2c
 8015c4c:	0802e400 	.word	0x0802e400

08015c50 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	60f8      	str	r0, [r7, #12]
 8015c58:	60b9      	str	r1, [r7, #8]
 8015c5a:	607a      	str	r2, [r7, #4]
        assert(handle < no_streams);
 8015c5c:	68bb      	ldr	r3, [r7, #8]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d006      	beq.n	8015c70 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>
 8015c62:	4b0d      	ldr	r3, [pc, #52]	; (8015c98 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x48>)
 8015c64:	4a0d      	ldr	r2, [pc, #52]	; (8015c9c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x4c>)
 8015c66:	f44f 71b5 	mov.w	r1, #362	; 0x16a
 8015c6a:	480d      	ldr	r0, [pc, #52]	; (8015ca0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE19getVideoInformationEmPNS0_16VideoInformationE+0x50>)
 8015c6c:	f014 f870 	bl	8029d50 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8015c70:	68fa      	ldr	r2, [r7, #12]
 8015c72:	68bb      	ldr	r3, [r7, #8]
 8015c74:	009b      	lsls	r3, r3, #2
 8015c76:	4413      	add	r3, r2
 8015c78:	6858      	ldr	r0, [r3, #4]
 8015c7a:	68fa      	ldr	r2, [r7, #12]
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	009b      	lsls	r3, r3, #2
 8015c80:	4413      	add	r3, r2
 8015c82:	685b      	ldr	r3, [r3, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	3330      	adds	r3, #48	; 0x30
 8015c88:	681b      	ldr	r3, [r3, #0]
 8015c8a:	6879      	ldr	r1, [r7, #4]
 8015c8c:	4798      	blx	r3
    }
 8015c8e:	bf00      	nop
 8015c90:	3710      	adds	r7, #16
 8015c92:	46bd      	mov	sp, r7
 8015c94:	bd80      	pop	{r7, pc}
 8015c96:	bf00      	nop
 8015c98:	0802e61c 	.word	0x0802e61c
 8015c9c:	0802eedc 	.word	0x0802eedc
 8015ca0:	0802e400 	.word	0x0802e400

08015ca4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8015ca4:	b580      	push	{r7, lr}
 8015ca6:	b084      	sub	sp, #16
 8015ca8:	af00      	add	r7, sp, #0
 8015caa:	6078      	str	r0, [r7, #4]
 8015cac:	6039      	str	r1, [r7, #0]
        assert(handle < no_streams);
 8015cae:	683b      	ldr	r3, [r7, #0]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d006      	beq.n	8015cc2 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x1e>
 8015cb4:	4b0b      	ldr	r3, [pc, #44]	; (8015ce4 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x40>)
 8015cb6:	4a0c      	ldr	r2, [pc, #48]	; (8015ce8 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x44>)
 8015cb8:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8015cbc:	480b      	ldr	r0, [pc, #44]	; (8015cec <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE12getIsPlayingEm+0x48>)
 8015cbe:	f014 f847 	bl	8029d50 <__assert_func>
        Stream& stream = streams[handle];
 8015cc2:	683a      	ldr	r2, [r7, #0]
 8015cc4:	4613      	mov	r3, r2
 8015cc6:	00db      	lsls	r3, r3, #3
 8015cc8:	4413      	add	r3, r2
 8015cca:	009b      	lsls	r3, r3, #2
 8015ccc:	3308      	adds	r3, #8
 8015cce:	687a      	ldr	r2, [r7, #4]
 8015cd0:	4413      	add	r3, r2
 8015cd2:	3304      	adds	r3, #4
 8015cd4:	60fb      	str	r3, [r7, #12]
        return stream.isPlaying;
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	7f5b      	ldrb	r3, [r3, #29]
    }
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3710      	adds	r7, #16
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	0802e61c 	.word	0x0802e61c
 8015ce8:	0802f088 	.word	0x0802f088
 8015cec:	0802e400 	.word	0x0802e400

08015cf0 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv>:

    Handle getFreeHandle()
 8015cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015cf2:	b08d      	sub	sp, #52	; 0x34
 8015cf4:	af00      	add	r7, sp, #0
 8015cf6:	6078      	str	r0, [r7, #4]
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
 8015cf8:	2300      	movs	r3, #0
 8015cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d135      	bne.n	8015d6e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x7e>
        {
            if (streams[i].isActive == false)
 8015d02:	6879      	ldr	r1, [r7, #4]
 8015d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d06:	4613      	mov	r3, r2
 8015d08:	00db      	lsls	r3, r3, #3
 8015d0a:	4413      	add	r3, r2
 8015d0c:	009b      	lsls	r3, r3, #2
 8015d0e:	440b      	add	r3, r1
 8015d10:	3328      	adds	r3, #40	; 0x28
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d126      	bne.n	8015d66 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x76>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8015d18:	f107 0308 	add.w	r3, r7, #8
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	f7ff fca2 	bl	8015666 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE6StreamC1Ev>
 8015d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015d24:	4613      	mov	r3, r2
 8015d26:	00db      	lsls	r3, r3, #3
 8015d28:	4413      	add	r3, r2
 8015d2a:	009b      	lsls	r3, r3, #2
 8015d2c:	3308      	adds	r3, #8
 8015d2e:	687a      	ldr	r2, [r7, #4]
 8015d30:	4413      	add	r3, r2
 8015d32:	3304      	adds	r3, #4
 8015d34:	f107 0408 	add.w	r4, r7, #8
 8015d38:	469c      	mov	ip, r3
 8015d3a:	f104 0e20 	add.w	lr, r4, #32
 8015d3e:	4665      	mov	r5, ip
 8015d40:	4626      	mov	r6, r4
 8015d42:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8015d44:	6028      	str	r0, [r5, #0]
 8015d46:	6069      	str	r1, [r5, #4]
 8015d48:	60aa      	str	r2, [r5, #8]
 8015d4a:	60eb      	str	r3, [r5, #12]
 8015d4c:	3410      	adds	r4, #16
 8015d4e:	f10c 0c10 	add.w	ip, ip, #16
 8015d52:	4574      	cmp	r4, lr
 8015d54:	d1f3      	bne.n	8015d3e <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x4e>
 8015d56:	4663      	mov	r3, ip
 8015d58:	4622      	mov	r2, r4
 8015d5a:	8811      	ldrh	r1, [r2, #0]
 8015d5c:	7892      	ldrb	r2, [r2, #2]
 8015d5e:	8019      	strh	r1, [r3, #0]
 8015d60:	709a      	strb	r2, [r3, #2]

                return static_cast<VideoController::Handle>(i);
 8015d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d64:	e00a      	b.n	8015d7c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x8c>
        for (uint32_t i = 0; i < no_streams; i++)
 8015d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d68:	3301      	adds	r3, #1
 8015d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015d6c:	e7c6      	b.n	8015cfc <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0xc>
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8015d6e:	4b05      	ldr	r3, [pc, #20]	; (8015d84 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x94>)
 8015d70:	4a05      	ldr	r2, [pc, #20]	; (8015d88 <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x98>)
 8015d72:	f240 11c5 	movw	r1, #453	; 0x1c5
 8015d76:	4805      	ldr	r0, [pc, #20]	; (8015d8c <_ZN25DedicatedBufferControllerILm1ELm0ELm0ELm0ELN8touchgfx6Bitmap12BitmapFormatE2EE13getFreeHandleEv+0x9c>)
 8015d78:	f013 ffea 	bl	8029d50 <__assert_func>
        return static_cast<VideoController::Handle>(0);
    }
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	3734      	adds	r7, #52	; 0x34
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d84:	0802f210 	.word	0x0802f210
 8015d88:	0802f240 	.word	0x0802f240
 8015d8c:	0802e400 	.word	0x0802e400

08015d90 <_GLOBAL__sub_I_mjpegdecoder1>:
 8015d90:	b580      	push	{r7, lr}
 8015d92:	af00      	add	r7, sp, #0
 8015d94:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015d98:	2001      	movs	r0, #1
 8015d9a:	f7ff fcfb 	bl	8015794 <_Z41__static_initialization_and_destruction_0ii>
 8015d9e:	bd80      	pop	{r7, pc}

08015da0 <_GLOBAL__sub_D_mjpegdecoder1>:
 8015da0:	b580      	push	{r7, lr}
 8015da2:	af00      	add	r7, sp, #0
 8015da4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015da8:	2000      	movs	r0, #0
 8015daa:	f7ff fcf3 	bl	8015794 <_Z41__static_initialization_and_destruction_0ii>
 8015dae:	bd80      	pop	{r7, pc}

08015db0 <TGFX_JPEG_InitPostProcColorTables>:
  * @brief  Initializes the YCbCr -> RGB colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPostProcColorTables(void)
{
 8015db0:	b480      	push	{r7}
 8015db2:	b083      	sub	sp, #12
 8015db4:	af00      	add	r7, sp, #0
  int32_t index, i;

  for (i = 0; i <= 255; i++)
 8015db6:	2300      	movs	r3, #0
 8015db8:	607b      	str	r3, [r7, #4]
 8015dba:	e02e      	b.n	8015e1a <TGFX_JPEG_InitPostProcColorTables+0x6a>
  {
    index = (i * 2) - 256;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	3b80      	subs	r3, #128	; 0x80
 8015dc0:	005b      	lsls	r3, r3, #1
 8015dc2:	603b      	str	r3, [r7, #0]
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8015dc4:	683b      	ldr	r3, [r7, #0]
 8015dc6:	f24b 3274 	movw	r2, #45940	; 0xb374
 8015dca:	fb02 f303 	mul.w	r3, r2, r3
 8015dce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015dd2:	141a      	asrs	r2, r3, #16
 8015dd4:	4916      	ldr	r1, [pc, #88]	; (8015e30 <TGFX_JPEG_InitPostProcColorTables+0x80>)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
 8015ddc:	683b      	ldr	r3, [r7, #0]
 8015dde:	f24e 22d0 	movw	r2, #58064	; 0xe2d0
 8015de2:	fb02 f303 	mul.w	r3, r2, r3
 8015de6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015dea:	141a      	asrs	r2, r3, #16
 8015dec:	4911      	ldr	r1, [pc, #68]	; (8015e34 <TGFX_JPEG_InitPostProcColorTables+0x84>)
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
 8015df4:	683b      	ldr	r3, [r7, #0]
 8015df6:	4a10      	ldr	r2, [pc, #64]	; (8015e38 <TGFX_JPEG_InitPostProcColorTables+0x88>)
 8015df8:	fb03 f202 	mul.w	r2, r3, r2
 8015dfc:	490f      	ldr	r1, [pc, #60]	; (8015e3c <TGFX_JPEG_InitPostProcColorTables+0x8c>)
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
 8015e04:	683b      	ldr	r3, [r7, #0]
 8015e06:	4a0e      	ldr	r2, [pc, #56]	; (8015e40 <TGFX_JPEG_InitPostProcColorTables+0x90>)
 8015e08:	fb03 f202 	mul.w	r2, r3, r2
 8015e0c:	490d      	ldr	r1, [pc, #52]	; (8015e44 <TGFX_JPEG_InitPostProcColorTables+0x94>)
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	3301      	adds	r3, #1
 8015e18:	607b      	str	r3, [r7, #4]
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2bff      	cmp	r3, #255	; 0xff
 8015e1e:	ddcd      	ble.n	8015dbc <TGFX_JPEG_InitPostProcColorTables+0xc>
  }
}
 8015e20:	bf00      	nop
 8015e22:	bf00      	nop
 8015e24:	370c      	adds	r7, #12
 8015e26:	46bd      	mov	sp, r7
 8015e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e2c:	4770      	bx	lr
 8015e2e:	bf00      	nop
 8015e30:	200382b0 	.word	0x200382b0
 8015e34:	200386b0 	.word	0x200386b0
 8015e38:	ffffa498 	.word	0xffffa498
 8015e3c:	20038ab0 	.word	0x20038ab0
 8015e40:	ffffd3f4 	.word	0xffffd3f4
 8015e44:	20038eb0 	.word	0x20038eb0

08015e48 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	af00      	add	r7, sp, #0

#if (USE_JPEG_ENCODER == 1)
  TGFX_JPEG_InitPreProcColorTables();
 8015e4c:	f000 f806 	bl	8015e5c <TGFX_JPEG_InitPreProcColorTables>
  TGFX_JPEG_Init_MCU_LUT();
 8015e50:	f000 f888 	bl	8015f64 <TGFX_JPEG_Init_MCU_LUT>
#endif

#if (USE_JPEG_DECODER == 1)
  TGFX_JPEG_InitPostProcColorTables();
 8015e54:	f7ff ffac 	bl	8015db0 <TGFX_JPEG_InitPostProcColorTables>
#endif

}
 8015e58:	bf00      	nop
 8015e5a:	bd80      	pop	{r7, pc}

08015e5c <TGFX_JPEG_InitPreProcColorTables>:
  * @brief  Initializes the RGB -> YCbCr colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
 8015e5c:	b480      	push	{r7}
 8015e5e:	b083      	sub	sp, #12
 8015e60:	af00      	add	r7, sp, #0
  int32_t i;

  for (i = 0; i <= 255; i++)
 8015e62:	2300      	movs	r3, #0
 8015e64:	607b      	str	r3, [r7, #4]
 8015e66:	e05a      	b.n	8015f1e <TGFX_JPEG_InitPreProcColorTables+0xc2>
  {
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f644 428b 	movw	r2, #19595	; 0x4c8b
 8015e6e:	fb02 f303 	mul.w	r3, r2, r3
 8015e72:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015e76:	141a      	asrs	r2, r3, #16
 8015e78:	492e      	ldr	r1, [pc, #184]	; (8015f34 <TGFX_JPEG_InitPreProcColorTables+0xd8>)
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	f249 6245 	movw	r2, #38469	; 0x9645
 8015e86:	fb02 f303 	mul.w	r3, r2, r3
 8015e8a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015e8e:	141a      	asrs	r2, r3, #16
 8015e90:	4929      	ldr	r1, [pc, #164]	; (8015f38 <TGFX_JPEG_InitPreProcColorTables+0xdc>)
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	f641 522f 	movw	r2, #7471	; 0x1d2f
 8015e9e:	fb02 f303 	mul.w	r3, r2, r3
 8015ea2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015ea6:	141a      	asrs	r2, r3, #16
 8015ea8:	4924      	ldr	r1, [pc, #144]	; (8015f3c <TGFX_JPEG_InitPreProcColorTables+0xe0>)
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	4a23      	ldr	r2, [pc, #140]	; (8015f40 <TGFX_JPEG_InitPreProcColorTables+0xe4>)
 8015eb4:	fb02 f303 	mul.w	r3, r2, r3
 8015eb8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015ebc:	141a      	asrs	r2, r3, #16
 8015ebe:	4921      	ldr	r1, [pc, #132]	; (8015f44 <TGFX_JPEG_InitPreProcColorTables+0xe8>)
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	4a1f      	ldr	r2, [pc, #124]	; (8015f48 <TGFX_JPEG_InitPreProcColorTables+0xec>)
 8015eca:	fb02 f303 	mul.w	r3, r2, r3
 8015ece:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015ed2:	141a      	asrs	r2, r3, #16
 8015ed4:	491d      	ldr	r1, [pc, #116]	; (8015f4c <TGFX_JPEG_InitPreProcColorTables+0xf0>)
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	3301      	adds	r3, #1
 8015ee0:	03db      	lsls	r3, r3, #15
 8015ee2:	141a      	asrs	r2, r3, #16
 8015ee4:	491a      	ldr	r1, [pc, #104]	; (8015f50 <TGFX_JPEG_InitPreProcColorTables+0xf4>)
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	4a19      	ldr	r2, [pc, #100]	; (8015f54 <TGFX_JPEG_InitPreProcColorTables+0xf8>)
 8015ef0:	fb02 f303 	mul.w	r3, r2, r3
 8015ef4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015ef8:	141a      	asrs	r2, r3, #16
 8015efa:	4917      	ldr	r1, [pc, #92]	; (8015f58 <TGFX_JPEG_InitPreProcColorTables+0xfc>)
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	4a15      	ldr	r2, [pc, #84]	; (8015f5c <TGFX_JPEG_InitPreProcColorTables+0x100>)
 8015f06:	fb02 f303 	mul.w	r3, r2, r3
 8015f0a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8015f0e:	141a      	asrs	r2, r3, #16
 8015f10:	4913      	ldr	r1, [pc, #76]	; (8015f60 <TGFX_JPEG_InitPreProcColorTables+0x104>)
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (i = 0; i <= 255; i++)
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	3301      	adds	r3, #1
 8015f1c:	607b      	str	r3, [r7, #4]
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2bff      	cmp	r3, #255	; 0xff
 8015f22:	dda1      	ble.n	8015e68 <TGFX_JPEG_InitPreProcColorTables+0xc>
  }
}
 8015f24:	bf00      	nop
 8015f26:	bf00      	nop
 8015f28:	370c      	adds	r7, #12
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f30:	4770      	bx	lr
 8015f32:	bf00      	nop
 8015f34:	200392b0 	.word	0x200392b0
 8015f38:	20039eb0 	.word	0x20039eb0
 8015f3c:	2003aab0 	.word	0x2003aab0
 8015f40:	ffffd4d1 	.word	0xffffd4d1
 8015f44:	200396b0 	.word	0x200396b0
 8015f48:	ffffab30 	.word	0xffffab30
 8015f4c:	2003a6b0 	.word	0x2003a6b0
 8015f50:	20039ab0 	.word	0x20039ab0
 8015f54:	ffff94d1 	.word	0xffff94d1
 8015f58:	2003a2b0 	.word	0x2003a2b0
 8015f5c:	ffffeb30 	.word	0xffffeb30
 8015f60:	2003aeb0 	.word	0x2003aeb0

08015f64 <TGFX_JPEG_Init_MCU_LUT>:
  * @brief  Initializes the MCU Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_Init_MCU_LUT(void)
{
 8015f64:	b480      	push	{r7}
 8015f66:	b085      	sub	sp, #20
 8015f68:	af00      	add	r7, sp, #0
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
 8015f6a:	2300      	movs	r3, #0
 8015f6c:	60fb      	str	r3, [r7, #12]
 8015f6e:	e036      	b.n	8015fde <TGFX_JPEG_Init_MCU_LUT+0x7a>
  {
    for(j = 0; j < 16; j++)
 8015f70:	2300      	movs	r3, #0
 8015f72:	60bb      	str	r3, [r7, #8]
 8015f74:	e02d      	b.n	8015fd2 <TGFX_JPEG_Init_MCU_LUT+0x6e>
    {
      offset =  j + (i*8);
 8015f76:	68fb      	ldr	r3, [r7, #12]
 8015f78:	00db      	lsls	r3, r3, #3
 8015f7a:	68ba      	ldr	r2, [r7, #8]
 8015f7c:	4413      	add	r3, r2
 8015f7e:	607b      	str	r3, [r7, #4]
      if((j>=8) && (i>=8)) offset+= 120;
 8015f80:	68bb      	ldr	r3, [r7, #8]
 8015f82:	2b07      	cmp	r3, #7
 8015f84:	d906      	bls.n	8015f94 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	2b07      	cmp	r3, #7
 8015f8a:	d903      	bls.n	8015f94 <TGFX_JPEG_Init_MCU_LUT+0x30>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	3378      	adds	r3, #120	; 0x78
 8015f90:	607b      	str	r3, [r7, #4]
 8015f92:	e012      	b.n	8015fba <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j>=8) && (i<8)) offset+= 56;
 8015f94:	68bb      	ldr	r3, [r7, #8]
 8015f96:	2b07      	cmp	r3, #7
 8015f98:	d906      	bls.n	8015fa8 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	2b07      	cmp	r3, #7
 8015f9e:	d803      	bhi.n	8015fa8 <TGFX_JPEG_Init_MCU_LUT+0x44>
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	3338      	adds	r3, #56	; 0x38
 8015fa4:	607b      	str	r3, [r7, #4]
 8015fa6:	e008      	b.n	8015fba <TGFX_JPEG_Init_MCU_LUT+0x56>
      else  if((j<8) && (i>=8)) offset+= 64;
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	2b07      	cmp	r3, #7
 8015fac:	d805      	bhi.n	8015fba <TGFX_JPEG_Init_MCU_LUT+0x56>
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	2b07      	cmp	r3, #7
 8015fb2:	d902      	bls.n	8015fba <TGFX_JPEG_Init_MCU_LUT+0x56>
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	3340      	adds	r3, #64	; 0x40
 8015fb8:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	011a      	lsls	r2, r3, #4
 8015fbe:	68bb      	ldr	r3, [r7, #8]
 8015fc0:	4413      	add	r3, r2
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	b291      	uxth	r1, r2
 8015fc6:	4a62      	ldr	r2, [pc, #392]	; (8016150 <TGFX_JPEG_Init_MCU_LUT+0x1ec>)
 8015fc8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 8015fcc:	68bb      	ldr	r3, [r7, #8]
 8015fce:	3301      	adds	r3, #1
 8015fd0:	60bb      	str	r3, [r7, #8]
 8015fd2:	68bb      	ldr	r3, [r7, #8]
 8015fd4:	2b0f      	cmp	r3, #15
 8015fd6:	d9ce      	bls.n	8015f76 <TGFX_JPEG_Init_MCU_LUT+0x12>
  for(i = 0; i < 16; i++)
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	3301      	adds	r3, #1
 8015fdc:	60fb      	str	r3, [r7, #12]
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	2b0f      	cmp	r3, #15
 8015fe2:	d9c5      	bls.n	8015f70 <TGFX_JPEG_Init_MCU_LUT+0xc>
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
 8015fe4:	2300      	movs	r3, #0
 8015fe6:	60fb      	str	r3, [r7, #12]
 8015fe8:	e072      	b.n	80160d0 <TGFX_JPEG_Init_MCU_LUT+0x16c>
  {
    for(j = 0; j < 16; j++)
 8015fea:	2300      	movs	r3, #0
 8015fec:	60bb      	str	r3, [r7, #8]
 8015fee:	e069      	b.n	80160c4 <TGFX_JPEG_Init_MCU_LUT+0x160>
    {
      offset = i*16 + j;
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	011b      	lsls	r3, r3, #4
 8015ff4:	68ba      	ldr	r2, [r7, #8]
 8015ff6:	4413      	add	r3, r2
 8015ff8:	607b      	str	r3, [r7, #4]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	085b      	lsrs	r3, r3, #1
 8015ffe:	b29a      	uxth	r2, r3
 8016000:	68fb      	ldr	r3, [r7, #12]
 8016002:	085b      	lsrs	r3, r3, #1
 8016004:	b29b      	uxth	r3, r3
 8016006:	00db      	lsls	r3, r3, #3
 8016008:	b29b      	uxth	r3, r3
 801600a:	4413      	add	r3, r2
 801600c:	b29b      	uxth	r3, r3
 801600e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016012:	b299      	uxth	r1, r3
 8016014:	4a4f      	ldr	r2, [pc, #316]	; (8016154 <TGFX_JPEG_Init_MCU_LUT+0x1f0>)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
 801601c:	68bb      	ldr	r3, [r7, #8]
 801601e:	085b      	lsrs	r3, r3, #1
 8016020:	b29a      	uxth	r2, r3
 8016022:	68fb      	ldr	r3, [r7, #12]
 8016024:	b29b      	uxth	r3, r3
 8016026:	00db      	lsls	r3, r3, #3
 8016028:	b29b      	uxth	r3, r3
 801602a:	4413      	add	r3, r2
 801602c:	b29b      	uxth	r3, r3
 801602e:	3380      	adds	r3, #128	; 0x80
 8016030:	b299      	uxth	r1, r3
 8016032:	4a49      	ldr	r2, [pc, #292]	; (8016158 <TGFX_JPEG_Init_MCU_LUT+0x1f4>)
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
 801603a:	68bb      	ldr	r3, [r7, #8]
 801603c:	085b      	lsrs	r3, r3, #1
 801603e:	b29a      	uxth	r2, r3
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	085b      	lsrs	r3, r3, #1
 8016044:	b29b      	uxth	r3, r3
 8016046:	00db      	lsls	r3, r3, #3
 8016048:	b29b      	uxth	r3, r3
 801604a:	4413      	add	r3, r2
 801604c:	b29b      	uxth	r3, r3
 801604e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8016052:	b299      	uxth	r1, r3
 8016054:	4a41      	ldr	r2, [pc, #260]	; (801615c <TGFX_JPEG_Init_MCU_LUT+0x1f8>)
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
 801605c:	68bb      	ldr	r3, [r7, #8]
 801605e:	085b      	lsrs	r3, r3, #1
 8016060:	b29a      	uxth	r2, r3
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	b29b      	uxth	r3, r3
 8016066:	00db      	lsls	r3, r3, #3
 8016068:	b29b      	uxth	r3, r3
 801606a:	4413      	add	r3, r2
 801606c:	b29b      	uxth	r3, r3
 801606e:	33c0      	adds	r3, #192	; 0xc0
 8016070:	b299      	uxth	r1, r3
 8016072:	4a3b      	ldr	r2, [pc, #236]	; (8016160 <TGFX_JPEG_Init_MCU_LUT+0x1fc>)
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	085b      	lsrs	r3, r3, #1
 801607e:	b29a      	uxth	r2, r3
 8016080:	68fb      	ldr	r3, [r7, #12]
 8016082:	085b      	lsrs	r3, r3, #1
 8016084:	b29b      	uxth	r3, r3
 8016086:	00db      	lsls	r3, r3, #3
 8016088:	b29b      	uxth	r3, r3
 801608a:	4413      	add	r3, r2
 801608c:	b29b      	uxth	r3, r3
 801608e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8016092:	b299      	uxth	r1, r3
 8016094:	4a33      	ldr	r2, [pc, #204]	; (8016164 <TGFX_JPEG_Init_MCU_LUT+0x200>)
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	085b      	lsrs	r3, r3, #1
 80160a0:	b29a      	uxth	r2, r3
 80160a2:	68fb      	ldr	r3, [r7, #12]
 80160a4:	085b      	lsrs	r3, r3, #1
 80160a6:	b29b      	uxth	r3, r3
 80160a8:	00db      	lsls	r3, r3, #3
 80160aa:	b29b      	uxth	r3, r3
 80160ac:	4413      	add	r3, r2
 80160ae:	b29b      	uxth	r3, r3
 80160b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80160b4:	b299      	uxth	r1, r3
 80160b6:	4a2c      	ldr	r2, [pc, #176]	; (8016168 <TGFX_JPEG_Init_MCU_LUT+0x204>)
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 16; j++)
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	3301      	adds	r3, #1
 80160c2:	60bb      	str	r3, [r7, #8]
 80160c4:	68bb      	ldr	r3, [r7, #8]
 80160c6:	2b0f      	cmp	r3, #15
 80160c8:	d992      	bls.n	8015ff0 <TGFX_JPEG_Init_MCU_LUT+0x8c>
  for(i = 0; i < 16; i++)
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	3301      	adds	r3, #1
 80160ce:	60fb      	str	r3, [r7, #12]
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	2b0f      	cmp	r3, #15
 80160d4:	d989      	bls.n	8015fea <TGFX_JPEG_Init_MCU_LUT+0x86>
    }
  }

  for(i = 0; i < 8; i++)
 80160d6:	2300      	movs	r3, #0
 80160d8:	60fb      	str	r3, [r7, #12]
 80160da:	e02e      	b.n	801613a <TGFX_JPEG_Init_MCU_LUT+0x1d6>
  {
    for(j = 0; j < 8; j++)
 80160dc:	2300      	movs	r3, #0
 80160de:	60bb      	str	r3, [r7, #8]
 80160e0:	e025      	b.n	801612e <TGFX_JPEG_Init_MCU_LUT+0x1ca>
    {
      offset = i*8 + j;
 80160e2:	68fb      	ldr	r3, [r7, #12]
 80160e4:	00db      	lsls	r3, r3, #3
 80160e6:	68ba      	ldr	r2, [r7, #8]
 80160e8:	4413      	add	r3, r2
 80160ea:	607b      	str	r3, [r7, #4]

      JPEG_Y_MCU_444_LUT[offset]  = offset;
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	b299      	uxth	r1, r3
 80160f0:	4a1e      	ldr	r2, [pc, #120]	; (801616c <TGFX_JPEG_Init_MCU_LUT+0x208>)
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	b29b      	uxth	r3, r3
 80160fc:	3340      	adds	r3, #64	; 0x40
 80160fe:	b299      	uxth	r1, r3
 8016100:	4a1b      	ldr	r2, [pc, #108]	; (8016170 <TGFX_JPEG_Init_MCU_LUT+0x20c>)
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	b29b      	uxth	r3, r3
 801610c:	3380      	adds	r3, #128	; 0x80
 801610e:	b299      	uxth	r1, r3
 8016110:	4a18      	ldr	r2, [pc, #96]	; (8016174 <TGFX_JPEG_Init_MCU_LUT+0x210>)
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	b29b      	uxth	r3, r3
 801611c:	33c0      	adds	r3, #192	; 0xc0
 801611e:	b299      	uxth	r1, r3
 8016120:	4a15      	ldr	r2, [pc, #84]	; (8016178 <TGFX_JPEG_Init_MCU_LUT+0x214>)
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(j = 0; j < 8; j++)
 8016128:	68bb      	ldr	r3, [r7, #8]
 801612a:	3301      	adds	r3, #1
 801612c:	60bb      	str	r3, [r7, #8]
 801612e:	68bb      	ldr	r3, [r7, #8]
 8016130:	2b07      	cmp	r3, #7
 8016132:	d9d6      	bls.n	80160e2 <TGFX_JPEG_Init_MCU_LUT+0x17e>
  for(i = 0; i < 8; i++)
 8016134:	68fb      	ldr	r3, [r7, #12]
 8016136:	3301      	adds	r3, #1
 8016138:	60fb      	str	r3, [r7, #12]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	2b07      	cmp	r3, #7
 801613e:	d9cd      	bls.n	80160dc <TGFX_JPEG_Init_MCU_LUT+0x178>
    }
  }
}
 8016140:	bf00      	nop
 8016142:	bf00      	nop
 8016144:	3714      	adds	r7, #20
 8016146:	46bd      	mov	sp, r7
 8016148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801614c:	4770      	bx	lr
 801614e:	bf00      	nop
 8016150:	2003b2b0 	.word	0x2003b2b0
 8016154:	2003b530 	.word	0x2003b530
 8016158:	2003b730 	.word	0x2003b730
 801615c:	2003b9b0 	.word	0x2003b9b0
 8016160:	2003bbb0 	.word	0x2003bbb0
 8016164:	2003be30 	.word	0x2003be30
 8016168:	2003c030 	.word	0x2003c030
 801616c:	2003b4b0 	.word	0x2003b4b0
 8016170:	2003b930 	.word	0x2003b930
 8016174:	2003bdb0 	.word	0x2003bdb0
 8016178:	2003c230 	.word	0x2003c230

0801617c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801617c:	8880      	ldrh	r0, [r0, #4]
 801617e:	4770      	bx	lr

08016180 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 8016180:	b570      	push	{r4, r5, r6, lr}
 8016182:	6803      	ldr	r3, [r0, #0]
 8016184:	460c      	mov	r4, r1
 8016186:	2100      	movs	r1, #0
 8016188:	4605      	mov	r5, r0
 801618a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801618c:	4798      	blx	r3
 801618e:	4606      	mov	r6, r0
 8016190:	682b      	ldr	r3, [r5, #0]
 8016192:	4628      	mov	r0, r5
 8016194:	1ba4      	subs	r4, r4, r6
 8016196:	6a1b      	ldr	r3, [r3, #32]
 8016198:	b2a4      	uxth	r4, r4
 801619a:	4798      	blx	r3
 801619c:	fbb4 f0f0 	udiv	r0, r4, r0
 80161a0:	bd70      	pop	{r4, r5, r6, pc}

080161a2 <_ZN8touchgfx17AbstractPartition5clearEv>:
 80161a2:	2300      	movs	r3, #0
 80161a4:	8083      	strh	r3, [r0, #4]
 80161a6:	4770      	bx	lr

080161a8 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 80161a8:	b510      	push	{r4, lr}
 80161aa:	6803      	ldr	r3, [r0, #0]
 80161ac:	4604      	mov	r4, r0
 80161ae:	8881      	ldrh	r1, [r0, #4]
 80161b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161b2:	4798      	blx	r3
 80161b4:	88a3      	ldrh	r3, [r4, #4]
 80161b6:	3301      	adds	r3, #1
 80161b8:	80a3      	strh	r3, [r4, #4]
 80161ba:	bd10      	pop	{r4, pc}

080161bc <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 80161bc:	6803      	ldr	r3, [r0, #0]
 80161be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c0:	4718      	bx	r3

080161c2 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 80161c2:	4770      	bx	lr

080161c4 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 80161c4:	4a02      	ldr	r2, [pc, #8]	; (80161d0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 80161c6:	6002      	str	r2, [r0, #0]
 80161c8:	2200      	movs	r2, #0
 80161ca:	8082      	strh	r2, [r0, #4]
 80161cc:	4770      	bx	lr
 80161ce:	bf00      	nop
 80161d0:	08030240 	.word	0x08030240

080161d4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80161d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80161d6:	2000      	movs	r0, #0
 80161d8:	b12b      	cbz	r3, 80161e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80161da:	b920      	cbnz	r0, 80161e6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80161dc:	1a5a      	subs	r2, r3, r1
 80161de:	699b      	ldr	r3, [r3, #24]
 80161e0:	4250      	negs	r0, r2
 80161e2:	4150      	adcs	r0, r2
 80161e4:	e7f8      	b.n	80161d8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80161e6:	4770      	bx	lr

080161e8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80161e8:	2300      	movs	r3, #0
 80161ea:	6148      	str	r0, [r1, #20]
 80161ec:	618b      	str	r3, [r1, #24]
 80161ee:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80161f0:	b913      	cbnz	r3, 80161f8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80161f2:	6281      	str	r1, [r0, #40]	; 0x28
 80161f4:	4770      	bx	lr
 80161f6:	4613      	mov	r3, r2
 80161f8:	699a      	ldr	r2, [r3, #24]
 80161fa:	2a00      	cmp	r2, #0
 80161fc:	d1fb      	bne.n	80161f6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80161fe:	6199      	str	r1, [r3, #24]
 8016200:	4770      	bx	lr

08016202 <_ZN8touchgfx9Container9removeAllEv>:
 8016202:	2200      	movs	r2, #0
 8016204:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016206:	b123      	cbz	r3, 8016212 <_ZN8touchgfx9Container9removeAllEv+0x10>
 8016208:	6999      	ldr	r1, [r3, #24]
 801620a:	6281      	str	r1, [r0, #40]	; 0x28
 801620c:	e9c3 2205 	strd	r2, r2, [r3, #20]
 8016210:	e7f8      	b.n	8016204 <_ZN8touchgfx9Container9removeAllEv+0x2>
 8016212:	4770      	bx	lr

08016214 <_ZN8touchgfx9Container6unlinkEv>:
 8016214:	2300      	movs	r3, #0
 8016216:	6283      	str	r3, [r0, #40]	; 0x28
 8016218:	4770      	bx	lr

0801621a <_ZNK8touchgfx9Container12getSolidRectEv>:
 801621a:	2200      	movs	r2, #0
 801621c:	8002      	strh	r2, [r0, #0]
 801621e:	8042      	strh	r2, [r0, #2]
 8016220:	8082      	strh	r2, [r0, #4]
 8016222:	80c2      	strh	r2, [r0, #6]
 8016224:	4770      	bx	lr

08016226 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 8016226:	b570      	push	{r4, r5, r6, lr}
 8016228:	460d      	mov	r5, r1
 801622a:	4616      	mov	r6, r2
 801622c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801622e:	b13c      	cbz	r4, 8016240 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8016230:	6823      	ldr	r3, [r4, #0]
 8016232:	4620      	mov	r0, r4
 8016234:	4632      	mov	r2, r6
 8016236:	4629      	mov	r1, r5
 8016238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801623a:	4798      	blx	r3
 801623c:	69a4      	ldr	r4, [r4, #24]
 801623e:	e7f6      	b.n	801622e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8016240:	bd70      	pop	{r4, r5, r6, pc}

08016242 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8016242:	b538      	push	{r3, r4, r5, lr}
 8016244:	460d      	mov	r5, r1
 8016246:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8016248:	b134      	cbz	r4, 8016258 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801624a:	682b      	ldr	r3, [r5, #0]
 801624c:	4621      	mov	r1, r4
 801624e:	4628      	mov	r0, r5
 8016250:	689b      	ldr	r3, [r3, #8]
 8016252:	4798      	blx	r3
 8016254:	69a4      	ldr	r4, [r4, #24]
 8016256:	e7f7      	b.n	8016248 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8016258:	bd38      	pop	{r3, r4, r5, pc}

0801625a <_ZNK8touchgfx9Container17invalidateContentEv>:
 801625a:	b510      	push	{r4, lr}
 801625c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801625e:	b12c      	cbz	r4, 801626c <_ZNK8touchgfx9Container17invalidateContentEv+0x12>
 8016260:	6823      	ldr	r3, [r4, #0]
 8016262:	4620      	mov	r0, r4
 8016264:	699b      	ldr	r3, [r3, #24]
 8016266:	4798      	blx	r3
 8016268:	69a4      	ldr	r4, [r4, #24]
 801626a:	e7f8      	b.n	801625e <_ZNK8touchgfx9Container17invalidateContentEv+0x4>
 801626c:	bd10      	pop	{r4, pc}

0801626e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801626e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8016270:	b19b      	cbz	r3, 801629a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8016272:	428b      	cmp	r3, r1
 8016274:	d109      	bne.n	801628a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8016276:	699a      	ldr	r2, [r3, #24]
 8016278:	2100      	movs	r1, #0
 801627a:	6159      	str	r1, [r3, #20]
 801627c:	6282      	str	r2, [r0, #40]	; 0x28
 801627e:	b902      	cbnz	r2, 8016282 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 8016280:	4770      	bx	lr
 8016282:	6199      	str	r1, [r3, #24]
 8016284:	4770      	bx	lr
 8016286:	4613      	mov	r3, r2
 8016288:	b13a      	cbz	r2, 801629a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801628a:	699a      	ldr	r2, [r3, #24]
 801628c:	428a      	cmp	r2, r1
 801628e:	d1fa      	bne.n	8016286 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 8016290:	698a      	ldr	r2, [r1, #24]
 8016292:	619a      	str	r2, [r3, #24]
 8016294:	2300      	movs	r3, #0
 8016296:	e9c1 3305 	strd	r3, r3, [r1, #20]
 801629a:	4770      	bx	lr

0801629c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 801629c:	b410      	push	{r4}
 801629e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80162a0:	4604      	mov	r4, r0
 80162a2:	b92b      	cbnz	r3, 80162b0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 80162a4:	6803      	ldr	r3, [r0, #0]
 80162a6:	4611      	mov	r1, r2
 80162a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162ae:	4718      	bx	r3
 80162b0:	b941      	cbnz	r1, 80162c4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 80162b2:	6193      	str	r3, [r2, #24]
 80162b4:	6282      	str	r2, [r0, #40]	; 0x28
 80162b6:	6154      	str	r4, [r2, #20]
 80162b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80162bc:	4770      	bx	lr
 80162be:	4603      	mov	r3, r0
 80162c0:	2800      	cmp	r0, #0
 80162c2:	d0f9      	beq.n	80162b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 80162c4:	4299      	cmp	r1, r3
 80162c6:	6998      	ldr	r0, [r3, #24]
 80162c8:	d1f9      	bne.n	80162be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 80162ca:	6190      	str	r0, [r2, #24]
 80162cc:	618a      	str	r2, [r1, #24]
 80162ce:	e7f2      	b.n	80162b6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

080162d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 80162d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162d4:	461f      	mov	r7, r3
 80162d6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80162da:	460d      	mov	r5, r1
 80162dc:	4616      	mov	r6, r2
 80162de:	b103      	cbz	r3, 80162e2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 80162e0:	6038      	str	r0, [r7, #0]
 80162e2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80162e4:	b314      	cbz	r4, 801632c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80162e6:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80162ea:	b1eb      	cbz	r3, 8016328 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80162ec:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80162f0:	428d      	cmp	r5, r1
 80162f2:	db19      	blt.n	8016328 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80162f4:	b289      	uxth	r1, r1
 80162f6:	8923      	ldrh	r3, [r4, #8]
 80162f8:	440b      	add	r3, r1
 80162fa:	b21b      	sxth	r3, r3
 80162fc:	429d      	cmp	r5, r3
 80162fe:	da13      	bge.n	8016328 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016300:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016304:	4296      	cmp	r6, r2
 8016306:	db0f      	blt.n	8016328 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016308:	b292      	uxth	r2, r2
 801630a:	8963      	ldrh	r3, [r4, #10]
 801630c:	4413      	add	r3, r2
 801630e:	b21b      	sxth	r3, r3
 8016310:	429e      	cmp	r6, r3
 8016312:	da09      	bge.n	8016328 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 8016314:	6823      	ldr	r3, [r4, #0]
 8016316:	1ab2      	subs	r2, r6, r2
 8016318:	1a69      	subs	r1, r5, r1
 801631a:	4620      	mov	r0, r4
 801631c:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 8016320:	b212      	sxth	r2, r2
 8016322:	463b      	mov	r3, r7
 8016324:	b209      	sxth	r1, r1
 8016326:	47c0      	blx	r8
 8016328:	69a4      	ldr	r4, [r4, #24]
 801632a:	e7db      	b.n	80162e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 801632c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016330 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 8016330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016334:	4c6d      	ldr	r4, [pc, #436]	; (80164ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 8016336:	b0a1      	sub	sp, #132	; 0x84
 8016338:	4606      	mov	r6, r0
 801633a:	6824      	ldr	r4, [r4, #0]
 801633c:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801633e:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 8016342:	2400      	movs	r4, #0
 8016344:	9303      	str	r3, [sp, #12]
 8016346:	802c      	strh	r4, [r5, #0]
 8016348:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 801634a:	802c      	strh	r4, [r5, #0]
 801634c:	601c      	str	r4, [r3, #0]
 801634e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8016352:	f7ff ffbd 	bl	80162d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016356:	f1b9 0f03 	cmp.w	r9, #3
 801635a:	f340 80c1 	ble.w	80164e0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 801635e:	4631      	mov	r1, r6
 8016360:	a80c      	add	r0, sp, #48	; 0x30
 8016362:	f005 fe61 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016366:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 801636a:	9306      	str	r3, [sp, #24]
 801636c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8016370:	9307      	str	r3, [sp, #28]
 8016372:	9b03      	ldr	r3, [sp, #12]
 8016374:	f8d3 a000 	ldr.w	sl, [r3]
 8016378:	f1ba 0f00 	cmp.w	sl, #0
 801637c:	f000 80b3 	beq.w	80164e6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 8016380:	4651      	mov	r1, sl
 8016382:	a810      	add	r0, sp, #64	; 0x40
 8016384:	f005 fe50 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016388:	2002      	movs	r0, #2
 801638a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801638e:	9b01      	ldr	r3, [sp, #4]
 8016390:	9a06      	ldr	r2, [sp, #24]
 8016392:	fb91 f1f0 	sdiv	r1, r1, r0
 8016396:	189d      	adds	r5, r3, r2
 8016398:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 801639c:	9a07      	ldr	r2, [sp, #28]
 801639e:	4419      	add	r1, r3
 80163a0:	9b02      	ldr	r3, [sp, #8]
 80163a2:	4413      	add	r3, r2
 80163a4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 80163a8:	1a6d      	subs	r5, r5, r1
 80163aa:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 80163ae:	fb92 f2f0 	sdiv	r2, r2, r0
 80163b2:	440a      	add	r2, r1
 80163b4:	1a9b      	subs	r3, r3, r2
 80163b6:	435b      	muls	r3, r3
 80163b8:	fb05 3505 	mla	r5, r5, r5, r3
 80163bc:	4f4c      	ldr	r7, [pc, #304]	; (80164f0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 80163be:	ac10      	add	r4, sp, #64	; 0x40
 80163c0:	f1b9 0f0c 	cmp.w	r9, #12
 80163c4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80163c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80163c8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80163ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80163cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80163ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80163d0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80163d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80163d8:	f04f 0303 	mov.w	r3, #3
 80163dc:	bfd8      	it	le
 80163de:	f109 32ff 	addle.w	r2, r9, #4294967295
 80163e2:	f04f 0400 	mov.w	r4, #0
 80163e6:	f8cd 9000 	str.w	r9, [sp]
 80163ea:	bfcc      	ite	gt
 80163ec:	4698      	movgt	r8, r3
 80163ee:	fb92 f8f3 	sdivle	r8, r2, r3
 80163f2:	1c63      	adds	r3, r4, #1
 80163f4:	aa10      	add	r2, sp, #64	; 0x40
 80163f6:	f004 0401 	and.w	r4, r4, #1
 80163fa:	f04f 0b00 	mov.w	fp, #0
 80163fe:	9308      	str	r3, [sp, #32]
 8016400:	9b00      	ldr	r3, [sp, #0]
 8016402:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 8016406:	fb93 f3f8 	sdiv	r3, r3, r8
 801640a:	3404      	adds	r4, #4
 801640c:	b29b      	uxth	r3, r3
 801640e:	9304      	str	r3, [sp, #16]
 8016410:	9a04      	ldr	r2, [sp, #16]
 8016412:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8016416:	fb13 f302 	smulbb	r3, r3, r2
 801641a:	9a01      	ldr	r2, [sp, #4]
 801641c:	b29b      	uxth	r3, r3
 801641e:	1899      	adds	r1, r3, r2
 8016420:	9305      	str	r3, [sp, #20]
 8016422:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016426:	b209      	sxth	r1, r1
 8016428:	4299      	cmp	r1, r3
 801642a:	db4d      	blt.n	80164c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801642c:	8932      	ldrh	r2, [r6, #8]
 801642e:	4413      	add	r3, r2
 8016430:	b21b      	sxth	r3, r3
 8016432:	4299      	cmp	r1, r3
 8016434:	da48      	bge.n	80164c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016436:	9b04      	ldr	r3, [sp, #16]
 8016438:	6827      	ldr	r7, [r4, #0]
 801643a:	fb17 f703 	smulbb	r7, r7, r3
 801643e:	9b02      	ldr	r3, [sp, #8]
 8016440:	b2bf      	uxth	r7, r7
 8016442:	18fa      	adds	r2, r7, r3
 8016444:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016448:	b212      	sxth	r2, r2
 801644a:	429a      	cmp	r2, r3
 801644c:	db3c      	blt.n	80164c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801644e:	8970      	ldrh	r0, [r6, #10]
 8016450:	4403      	add	r3, r0
 8016452:	b21b      	sxth	r3, r3
 8016454:	429a      	cmp	r2, r3
 8016456:	da37      	bge.n	80164c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016458:	2300      	movs	r3, #0
 801645a:	4630      	mov	r0, r6
 801645c:	930b      	str	r3, [sp, #44]	; 0x2c
 801645e:	ab0b      	add	r3, sp, #44	; 0x2c
 8016460:	f7ff ff36 	bl	80162d0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8016464:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016466:	b37a      	cbz	r2, 80164c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 8016468:	4552      	cmp	r2, sl
 801646a:	d02d      	beq.n	80164c8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 801646c:	4611      	mov	r1, r2
 801646e:	a80e      	add	r0, sp, #56	; 0x38
 8016470:	9209      	str	r2, [sp, #36]	; 0x24
 8016472:	f005 fdd9 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8016476:	f04f 0e02 	mov.w	lr, #2
 801647a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 801647e:	9a06      	ldr	r2, [sp, #24]
 8016480:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8016484:	9b01      	ldr	r3, [sp, #4]
 8016486:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 801648a:	4413      	add	r3, r2
 801648c:	9a07      	ldr	r2, [sp, #28]
 801648e:	fb91 f1fe 	sdiv	r1, r1, lr
 8016492:	fb9c fcfe 	sdiv	ip, ip, lr
 8016496:	4401      	add	r1, r0
 8016498:	1a58      	subs	r0, r3, r1
 801649a:	9b02      	ldr	r3, [sp, #8]
 801649c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 80164a0:	4413      	add	r3, r2
 80164a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80164a4:	448c      	add	ip, r1
 80164a6:	eba3 030c 	sub.w	r3, r3, ip
 80164aa:	435b      	muls	r3, r3
 80164ac:	fb00 3300 	mla	r3, r0, r0, r3
 80164b0:	42ab      	cmp	r3, r5
 80164b2:	d208      	bcs.n	80164c6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 80164b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80164b6:	461d      	mov	r5, r3
 80164b8:	9803      	ldr	r0, [sp, #12]
 80164ba:	6001      	str	r1, [r0, #0]
 80164bc:	992a      	ldr	r1, [sp, #168]	; 0xa8
 80164be:	9805      	ldr	r0, [sp, #20]
 80164c0:	8008      	strh	r0, [r1, #0]
 80164c2:	992b      	ldr	r1, [sp, #172]	; 0xac
 80164c4:	800f      	strh	r7, [r1, #0]
 80164c6:	4692      	mov	sl, r2
 80164c8:	f10b 0b01 	add.w	fp, fp, #1
 80164cc:	3408      	adds	r4, #8
 80164ce:	f1bb 0f04 	cmp.w	fp, #4
 80164d2:	d19d      	bne.n	8016410 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 80164d4:	9b00      	ldr	r3, [sp, #0]
 80164d6:	9c08      	ldr	r4, [sp, #32]
 80164d8:	444b      	add	r3, r9
 80164da:	4544      	cmp	r4, r8
 80164dc:	9300      	str	r3, [sp, #0]
 80164de:	d188      	bne.n	80163f2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 80164e0:	b021      	add	sp, #132	; 0x84
 80164e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80164e6:	f04f 35ff 	mov.w	r5, #4294967295
 80164ea:	e767      	b.n	80163bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80164ec:	2003c2bc 	.word	0x2003c2bc
 80164f0:	0802f3c4 	.word	0x0802f3c4

080164f4 <_ZN8touchgfx4RectaNERKS0_>:
 80164f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164f8:	f9b1 7000 	ldrsh.w	r7, [r1]
 80164fc:	888c      	ldrh	r4, [r1, #4]
 80164fe:	f9b0 9000 	ldrsh.w	r9, [r0]
 8016502:	443c      	add	r4, r7
 8016504:	b2a4      	uxth	r4, r4
 8016506:	fa0f f884 	sxth.w	r8, r4
 801650a:	45c1      	cmp	r9, r8
 801650c:	da2f      	bge.n	801656e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801650e:	8882      	ldrh	r2, [r0, #4]
 8016510:	444a      	add	r2, r9
 8016512:	b292      	uxth	r2, r2
 8016514:	fa0f fe82 	sxth.w	lr, r2
 8016518:	4577      	cmp	r7, lr
 801651a:	da28      	bge.n	801656e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801651c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8016520:	88cb      	ldrh	r3, [r1, #6]
 8016522:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8016526:	442b      	add	r3, r5
 8016528:	b21b      	sxth	r3, r3
 801652a:	429e      	cmp	r6, r3
 801652c:	da1f      	bge.n	801656e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801652e:	88c3      	ldrh	r3, [r0, #6]
 8016530:	4433      	add	r3, r6
 8016532:	b29b      	uxth	r3, r3
 8016534:	fa0f fc83 	sxth.w	ip, r3
 8016538:	4565      	cmp	r5, ip
 801653a:	da18      	bge.n	801656e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 801653c:	454f      	cmp	r7, r9
 801653e:	bfb8      	it	lt
 8016540:	464f      	movlt	r7, r9
 8016542:	42b5      	cmp	r5, r6
 8016544:	bfb8      	it	lt
 8016546:	4635      	movlt	r5, r6
 8016548:	45f0      	cmp	r8, lr
 801654a:	bfd8      	it	le
 801654c:	4622      	movle	r2, r4
 801654e:	1bd2      	subs	r2, r2, r7
 8016550:	8082      	strh	r2, [r0, #4]
 8016552:	884a      	ldrh	r2, [r1, #2]
 8016554:	88c9      	ldrh	r1, [r1, #6]
 8016556:	8007      	strh	r7, [r0, #0]
 8016558:	440a      	add	r2, r1
 801655a:	8045      	strh	r5, [r0, #2]
 801655c:	b292      	uxth	r2, r2
 801655e:	b211      	sxth	r1, r2
 8016560:	458c      	cmp	ip, r1
 8016562:	bfa8      	it	ge
 8016564:	4613      	movge	r3, r2
 8016566:	1b5b      	subs	r3, r3, r5
 8016568:	80c3      	strh	r3, [r0, #6]
 801656a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801656e:	2300      	movs	r3, #0
 8016570:	8003      	strh	r3, [r0, #0]
 8016572:	8043      	strh	r3, [r0, #2]
 8016574:	8083      	strh	r3, [r0, #4]
 8016576:	80c3      	strh	r3, [r0, #6]
 8016578:	e7f7      	b.n	801656a <_ZN8touchgfx4RectaNERKS0_+0x76>

0801657a <_ZNK8touchgfx4Rect7isEmptyEv>:
 801657a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801657e:	2b00      	cmp	r3, #0
 8016580:	dd06      	ble.n	8016590 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 8016582:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8016586:	2800      	cmp	r0, #0
 8016588:	bfcc      	ite	gt
 801658a:	2000      	movgt	r0, #0
 801658c:	2001      	movle	r0, #1
 801658e:	4770      	bx	lr
 8016590:	2001      	movs	r0, #1
 8016592:	4770      	bx	lr

08016594 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 8016594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016598:	2300      	movs	r3, #0
 801659a:	4604      	mov	r4, r0
 801659c:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801659e:	8003      	strh	r3, [r0, #0]
 80165a0:	8043      	strh	r3, [r0, #2]
 80165a2:	8083      	strh	r3, [r0, #4]
 80165a4:	80c3      	strh	r3, [r0, #6]
 80165a6:	2d00      	cmp	r5, #0
 80165a8:	d040      	beq.n	801662c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 80165aa:	1d28      	adds	r0, r5, #4
 80165ac:	f7ff ffe5 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 80165b0:	b988      	cbnz	r0, 80165d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80165b2:	4620      	mov	r0, r4
 80165b4:	f7ff ffe1 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 80165b8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80165bc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80165c0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 80165c4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 80165c8:	b138      	cbz	r0, 80165da <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 80165ca:	8022      	strh	r2, [r4, #0]
 80165cc:	8063      	strh	r3, [r4, #2]
 80165ce:	f8a4 e004 	strh.w	lr, [r4, #4]
 80165d2:	f8a4 c006 	strh.w	ip, [r4, #6]
 80165d6:	69ad      	ldr	r5, [r5, #24]
 80165d8:	e7e5      	b.n	80165a6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 80165da:	f9b4 0000 	ldrsh.w	r0, [r4]
 80165de:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80165e2:	4290      	cmp	r0, r2
 80165e4:	4607      	mov	r7, r0
 80165e6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80165ea:	460e      	mov	r6, r1
 80165ec:	bfa8      	it	ge
 80165ee:	4617      	movge	r7, r2
 80165f0:	4299      	cmp	r1, r3
 80165f2:	4472      	add	r2, lr
 80165f4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80165f8:	bfa8      	it	ge
 80165fa:	461e      	movge	r6, r3
 80165fc:	4440      	add	r0, r8
 80165fe:	4471      	add	r1, lr
 8016600:	4463      	add	r3, ip
 8016602:	b200      	sxth	r0, r0
 8016604:	8027      	strh	r7, [r4, #0]
 8016606:	b212      	sxth	r2, r2
 8016608:	8066      	strh	r6, [r4, #2]
 801660a:	b209      	sxth	r1, r1
 801660c:	b21b      	sxth	r3, r3
 801660e:	4290      	cmp	r0, r2
 8016610:	bfac      	ite	ge
 8016612:	ebc7 0200 	rsbge	r2, r7, r0
 8016616:	ebc7 0202 	rsblt	r2, r7, r2
 801661a:	4299      	cmp	r1, r3
 801661c:	bfac      	ite	ge
 801661e:	ebc6 0301 	rsbge	r3, r6, r1
 8016622:	ebc6 0303 	rsblt	r3, r6, r3
 8016626:	80a2      	strh	r2, [r4, #4]
 8016628:	80e3      	strh	r3, [r4, #6]
 801662a:	e7d4      	b.n	80165d6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801662c:	4620      	mov	r0, r4
 801662e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016632 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8016632:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8016636:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801663a:	b383      	cbz	r3, 801669e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801663c:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801663e:	b374      	cbz	r4, 801669e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8016640:	f9b1 5000 	ldrsh.w	r5, [r1]
 8016644:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8016648:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801664c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8016650:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8016654:	b303      	cbz	r3, 8016698 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016656:	4668      	mov	r0, sp
 8016658:	1d21      	adds	r1, r4, #4
 801665a:	f8ad 5000 	strh.w	r5, [sp]
 801665e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8016662:	f8ad 7004 	strh.w	r7, [sp, #4]
 8016666:	f8ad 8006 	strh.w	r8, [sp, #6]
 801666a:	f7ff ff43 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801666e:	4668      	mov	r0, sp
 8016670:	f7ff ff83 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016674:	b980      	cbnz	r0, 8016698 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8016676:	f8bd 3000 	ldrh.w	r3, [sp]
 801667a:	4669      	mov	r1, sp
 801667c:	88a2      	ldrh	r2, [r4, #4]
 801667e:	4620      	mov	r0, r4
 8016680:	1a9b      	subs	r3, r3, r2
 8016682:	88e2      	ldrh	r2, [r4, #6]
 8016684:	f8ad 3000 	strh.w	r3, [sp]
 8016688:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801668c:	1a9b      	subs	r3, r3, r2
 801668e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8016692:	6823      	ldr	r3, [r4, #0]
 8016694:	689b      	ldr	r3, [r3, #8]
 8016696:	4798      	blx	r3
 8016698:	69a4      	ldr	r4, [r4, #24]
 801669a:	2c00      	cmp	r4, #0
 801669c:	d1d8      	bne.n	8016650 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 801669e:	b002      	add	sp, #8
 80166a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080166a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80166a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80166a6:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80166aa:	460d      	mov	r5, r1
 80166ac:	4616      	mov	r6, r2
 80166ae:	b323      	cbz	r3, 80166fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80166b0:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80166b2:	b314      	cbz	r4, 80166fa <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80166b4:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80166b8:	b1eb      	cbz	r3, 80166f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80166ba:	6828      	ldr	r0, [r5, #0]
 80166bc:	466b      	mov	r3, sp
 80166be:	6869      	ldr	r1, [r5, #4]
 80166c0:	c303      	stmia	r3!, {r0, r1}
 80166c2:	4668      	mov	r0, sp
 80166c4:	1d21      	adds	r1, r4, #4
 80166c6:	f7ff ff15 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 80166ca:	4668      	mov	r0, sp
 80166cc:	f7ff ff55 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 80166d0:	b988      	cbnz	r0, 80166f6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80166d2:	f8bd 3000 	ldrh.w	r3, [sp]
 80166d6:	4669      	mov	r1, sp
 80166d8:	88a2      	ldrh	r2, [r4, #4]
 80166da:	4620      	mov	r0, r4
 80166dc:	1a9b      	subs	r3, r3, r2
 80166de:	88e2      	ldrh	r2, [r4, #6]
 80166e0:	f8ad 3000 	strh.w	r3, [sp]
 80166e4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80166e8:	1a9b      	subs	r3, r3, r2
 80166ea:	4632      	mov	r2, r6
 80166ec:	f8ad 3002 	strh.w	r3, [sp, #2]
 80166f0:	6823      	ldr	r3, [r4, #0]
 80166f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80166f4:	4798      	blx	r3
 80166f6:	69a4      	ldr	r4, [r4, #24]
 80166f8:	e7db      	b.n	80166b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80166fa:	b002      	add	sp, #8
 80166fc:	bd70      	pop	{r4, r5, r6, pc}

080166fe <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 80166fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016702:	4770      	bx	lr

08016704 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
 8016704:	4770      	bx	lr

08016706 <_ZN8touchgfx3HAL10FlushCacheEv>:
 8016706:	4770      	bx	lr

08016708 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 8016708:	6803      	ldr	r3, [r0, #0]
 801670a:	b513      	push	{r0, r1, r4, lr}
 801670c:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 8016710:	2300      	movs	r3, #0
 8016712:	e9cd 3300 	strd	r3, r3, [sp]
 8016716:	466b      	mov	r3, sp
 8016718:	47a0      	blx	r4
 801671a:	b002      	add	sp, #8
 801671c:	bd10      	pop	{r4, pc}

0801671e <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801671e:	2301      	movs	r3, #1
 8016720:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016724:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016728:	4770      	bx	lr

0801672a <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801672a:	2301      	movs	r3, #1
 801672c:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 8016730:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 8016734:	4770      	bx	lr

08016736 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 8016736:	6843      	ldr	r3, [r0, #4]
 8016738:	2201      	movs	r2, #1
 801673a:	725a      	strb	r2, [r3, #9]
 801673c:	6840      	ldr	r0, [r0, #4]
 801673e:	6803      	ldr	r3, [r0, #0]
 8016740:	691b      	ldr	r3, [r3, #16]
 8016742:	4718      	bx	r3

08016744 <_ZN8touchgfx3HAL8flushDMAEv>:
 8016744:	6840      	ldr	r0, [r0, #4]
 8016746:	6803      	ldr	r3, [r0, #0]
 8016748:	689b      	ldr	r3, [r3, #8]
 801674a:	4718      	bx	r3

0801674c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 801674c:	b530      	push	{r4, r5, lr}
 801674e:	b08b      	sub	sp, #44	; 0x2c
 8016750:	6804      	ldr	r4, [r0, #0]
 8016752:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8016756:	9509      	str	r5, [sp, #36]	; 0x24
 8016758:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801675c:	9508      	str	r5, [sp, #32]
 801675e:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8016762:	9507      	str	r5, [sp, #28]
 8016764:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8016768:	9506      	str	r5, [sp, #24]
 801676a:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801676e:	9505      	str	r5, [sp, #20]
 8016770:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8016774:	9504      	str	r5, [sp, #16]
 8016776:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801677a:	9503      	str	r5, [sp, #12]
 801677c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 8016780:	9502      	str	r5, [sp, #8]
 8016782:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8016786:	e9cd 3500 	strd	r3, r5, [sp]
 801678a:	4613      	mov	r3, r2
 801678c:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801678e:	2200      	movs	r2, #0
 8016790:	47a0      	blx	r4
 8016792:	b00b      	add	sp, #44	; 0x2c
 8016794:	bd30      	pop	{r4, r5, pc}
	...

08016798 <_ZN8touchgfx3HAL10beginFrameEv>:
 8016798:	4b04      	ldr	r3, [pc, #16]	; (80167ac <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801679a:	781b      	ldrb	r3, [r3, #0]
 801679c:	b123      	cbz	r3, 80167a8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801679e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 80167a2:	f080 0001 	eor.w	r0, r0, #1
 80167a6:	4770      	bx	lr
 80167a8:	2001      	movs	r0, #1
 80167aa:	4770      	bx	lr
 80167ac:	2003c2ba 	.word	0x2003c2ba

080167b0 <_ZN8touchgfx3HAL8endFrameEv>:
 80167b0:	b510      	push	{r4, lr}
 80167b2:	4604      	mov	r4, r0
 80167b4:	6840      	ldr	r0, [r0, #4]
 80167b6:	6803      	ldr	r3, [r0, #0]
 80167b8:	689b      	ldr	r3, [r3, #8]
 80167ba:	4798      	blx	r3
 80167bc:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 80167c0:	b113      	cbz	r3, 80167c8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80167c2:	2301      	movs	r3, #1
 80167c4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80167c8:	bd10      	pop	{r4, pc}

080167ca <_ZN8touchgfx3HAL10initializeEv>:
 80167ca:	b510      	push	{r4, lr}
 80167cc:	4604      	mov	r4, r0
 80167ce:	f7fd f953 	bl	8013a78 <_ZN8touchgfx10OSWrappers10initializeEv>
 80167d2:	6860      	ldr	r0, [r4, #4]
 80167d4:	6803      	ldr	r3, [r0, #0]
 80167d6:	68db      	ldr	r3, [r3, #12]
 80167d8:	4798      	blx	r3
 80167da:	68e0      	ldr	r0, [r4, #12]
 80167dc:	6803      	ldr	r3, [r0, #0]
 80167de:	689b      	ldr	r3, [r3, #8]
 80167e0:	4798      	blx	r3
 80167e2:	6823      	ldr	r3, [r4, #0]
 80167e4:	4620      	mov	r0, r4
 80167e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80167e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80167ec:	4718      	bx	r3

080167ee <_ZN8touchgfx3HAL9taskEntryEv>:
 80167ee:	b508      	push	{r3, lr}
 80167f0:	6803      	ldr	r3, [r0, #0]
 80167f2:	4604      	mov	r4, r0
 80167f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80167f8:	4798      	blx	r3
 80167fa:	6823      	ldr	r3, [r4, #0]
 80167fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80167fe:	4620      	mov	r0, r4
 8016800:	4798      	blx	r3
 8016802:	f7fd f9af 	bl	8013b64 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 8016806:	6823      	ldr	r3, [r4, #0]
 8016808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801680a:	e7f8      	b.n	80167fe <_ZN8touchgfx3HAL9taskEntryEv+0x10>

0801680c <_ZN8touchgfx3HAL4tickEv>:
 801680c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801680e:	6803      	ldr	r3, [r0, #0]
 8016810:	4604      	mov	r4, r0
 8016812:	4d5b      	ldr	r5, [pc, #364]	; (8016980 <_ZN8touchgfx3HAL4tickEv+0x174>)
 8016814:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016818:	4798      	blx	r3
 801681a:	2800      	cmp	r0, #0
 801681c:	f000 8095 	beq.w	801694a <_ZN8touchgfx3HAL4tickEv+0x13e>
 8016820:	2001      	movs	r0, #1
 8016822:	2600      	movs	r6, #0
 8016824:	f7fb feac 	bl	8012580 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8016828:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 801682c:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 8016830:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016834:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 8016838:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 801683c:	b133      	cbz	r3, 801684c <_ZN8touchgfx3HAL4tickEv+0x40>
 801683e:	6823      	ldr	r3, [r4, #0]
 8016840:	4620      	mov	r0, r4
 8016842:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8016846:	4798      	blx	r3
 8016848:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 801684c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8016850:	2601      	movs	r6, #1
 8016852:	6862      	ldr	r2, [r4, #4]
 8016854:	f083 0301 	eor.w	r3, r3, #1
 8016858:	702e      	strb	r6, [r5, #0]
 801685a:	7253      	strb	r3, [r2, #9]
 801685c:	f004 fbb0 	bl	801afc0 <_ZN8touchgfx11Application11getInstanceEv>
 8016860:	6803      	ldr	r3, [r0, #0]
 8016862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016864:	4798      	blx	r3
 8016866:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801686a:	b90b      	cbnz	r3, 8016870 <_ZN8touchgfx3HAL4tickEv+0x64>
 801686c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8016870:	f004 fba6 	bl	801afc0 <_ZN8touchgfx11Application11getInstanceEv>
 8016874:	6803      	ldr	r3, [r0, #0]
 8016876:	695b      	ldr	r3, [r3, #20]
 8016878:	4798      	blx	r3
 801687a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801687c:	6803      	ldr	r3, [r0, #0]
 801687e:	691b      	ldr	r3, [r3, #16]
 8016880:	4798      	blx	r3
 8016882:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8016886:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801688a:	3b01      	subs	r3, #1
 801688c:	b2db      	uxtb	r3, r3
 801688e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8016892:	b10a      	cbz	r2, 8016898 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8016894:	2b00      	cmp	r3, #0
 8016896:	d1eb      	bne.n	8016870 <_ZN8touchgfx3HAL4tickEv+0x64>
 8016898:	4a3a      	ldr	r2, [pc, #232]	; (8016984 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801689a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801689e:	7813      	ldrb	r3, [r2, #0]
 80168a0:	3301      	adds	r3, #1
 80168a2:	b25b      	sxtb	r3, r3
 80168a4:	4299      	cmp	r1, r3
 80168a6:	7013      	strb	r3, [r2, #0]
 80168a8:	dc10      	bgt.n	80168cc <_ZN8touchgfx3HAL4tickEv+0xc0>
 80168aa:	2300      	movs	r3, #0
 80168ac:	68e0      	ldr	r0, [r4, #12]
 80168ae:	a902      	add	r1, sp, #8
 80168b0:	7013      	strb	r3, [r2, #0]
 80168b2:	aa03      	add	r2, sp, #12
 80168b4:	6803      	ldr	r3, [r0, #0]
 80168b6:	68db      	ldr	r3, [r3, #12]
 80168b8:	4798      	blx	r3
 80168ba:	6823      	ldr	r3, [r4, #0]
 80168bc:	2800      	cmp	r0, #0
 80168be:	d050      	beq.n	8016962 <_ZN8touchgfx3HAL4tickEv+0x156>
 80168c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80168c4:	4620      	mov	r0, r4
 80168c6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80168ca:	4798      	blx	r3
 80168cc:	2300      	movs	r3, #0
 80168ce:	6960      	ldr	r0, [r4, #20]
 80168d0:	f88d 3007 	strb.w	r3, [sp, #7]
 80168d4:	b158      	cbz	r0, 80168ee <_ZN8touchgfx3HAL4tickEv+0xe2>
 80168d6:	6803      	ldr	r3, [r0, #0]
 80168d8:	f10d 0107 	add.w	r1, sp, #7
 80168dc:	68db      	ldr	r3, [r3, #12]
 80168de:	4798      	blx	r3
 80168e0:	b128      	cbz	r0, 80168ee <_ZN8touchgfx3HAL4tickEv+0xe2>
 80168e2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168e4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80168e8:	6803      	ldr	r3, [r0, #0]
 80168ea:	68db      	ldr	r3, [r3, #12]
 80168ec:	4798      	blx	r3
 80168ee:	f104 001c 	add.w	r0, r4, #28
 80168f2:	f012 fdbf 	bl	8029474 <_ZN8touchgfx8Gestures4tickEv>
 80168f6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80168fa:	b30b      	cbz	r3, 8016940 <_ZN8touchgfx3HAL4tickEv+0x134>
 80168fc:	6920      	ldr	r0, [r4, #16]
 80168fe:	6803      	ldr	r3, [r0, #0]
 8016900:	691b      	ldr	r3, [r3, #16]
 8016902:	4798      	blx	r3
 8016904:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016906:	4606      	mov	r6, r0
 8016908:	b903      	cbnz	r3, 801690c <_ZN8touchgfx3HAL4tickEv+0x100>
 801690a:	6720      	str	r0, [r4, #112]	; 0x70
 801690c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801690e:	4a1e      	ldr	r2, [pc, #120]	; (8016988 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 8016910:	1af3      	subs	r3, r6, r3
 8016912:	4293      	cmp	r3, r2
 8016914:	d914      	bls.n	8016940 <_ZN8touchgfx3HAL4tickEv+0x134>
 8016916:	6920      	ldr	r0, [r4, #16]
 8016918:	6803      	ldr	r3, [r0, #0]
 801691a:	699b      	ldr	r3, [r3, #24]
 801691c:	4798      	blx	r3
 801691e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8016920:	2264      	movs	r2, #100	; 0x64
 8016922:	1af3      	subs	r3, r6, r3
 8016924:	fbb3 f3f2 	udiv	r3, r3, r2
 8016928:	fbb0 f0f3 	udiv	r0, r0, r3
 801692c:	2800      	cmp	r0, #0
 801692e:	dc1d      	bgt.n	801696c <_ZN8touchgfx3HAL4tickEv+0x160>
 8016930:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 8016934:	6920      	ldr	r0, [r4, #16]
 8016936:	2100      	movs	r1, #0
 8016938:	6803      	ldr	r3, [r0, #0]
 801693a:	69db      	ldr	r3, [r3, #28]
 801693c:	4798      	blx	r3
 801693e:	6726      	str	r6, [r4, #112]	; 0x70
 8016940:	f004 fb3e 	bl	801afc0 <_ZN8touchgfx11Application11getInstanceEv>
 8016944:	6803      	ldr	r3, [r0, #0]
 8016946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016948:	4798      	blx	r3
 801694a:	6823      	ldr	r3, [r4, #0]
 801694c:	4620      	mov	r0, r4
 801694e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8016952:	4798      	blx	r3
 8016954:	2001      	movs	r0, #1
 8016956:	f7fb fe2f 	bl	80125b8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801695a:	2300      	movs	r3, #0
 801695c:	702b      	strb	r3, [r5, #0]
 801695e:	b004      	add	sp, #16
 8016960:	bd70      	pop	{r4, r5, r6, pc}
 8016962:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8016966:	4620      	mov	r0, r4
 8016968:	4798      	blx	r3
 801696a:	e7af      	b.n	80168cc <_ZN8touchgfx3HAL4tickEv+0xc0>
 801696c:	2863      	cmp	r0, #99	; 0x63
 801696e:	bfcb      	itete	gt
 8016970:	2300      	movgt	r3, #0
 8016972:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8016976:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801697a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801697e:	e7d9      	b.n	8016934 <_ZN8touchgfx3HAL4tickEv+0x128>
 8016980:	2003c2c0 	.word	0x2003c2c0
 8016984:	2003c2c1 	.word	0x2003c2c1
 8016988:	05f5e100 	.word	0x05f5e100

0801698c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801698c:	f7fd b8b6 	b.w	8013afc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08016990 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8016990:	6581      	str	r1, [r0, #88]	; 0x58
 8016992:	301c      	adds	r0, #28
 8016994:	f012 bd6c 	b.w	8029470 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08016998 <_ZN8touchgfx3HAL5touchEll>:
 8016998:	b530      	push	{r4, r5, lr}
 801699a:	b087      	sub	sp, #28
 801699c:	4604      	mov	r4, r0
 801699e:	a804      	add	r0, sp, #16
 80169a0:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80169a4:	f004 f892 	bl	801aacc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80169a8:	9b04      	ldr	r3, [sp, #16]
 80169aa:	a906      	add	r1, sp, #24
 80169ac:	a803      	add	r0, sp, #12
 80169ae:	f8ad 300c 	strh.w	r3, [sp, #12]
 80169b2:	9b05      	ldr	r3, [sp, #20]
 80169b4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80169b8:	f004 f8da 	bl	801ab70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80169bc:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 80169c0:	f104 001c 	add.w	r0, r4, #28
 80169c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80169c8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80169cc:	b189      	cbz	r1, 80169f2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 80169ce:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 80169d2:	9300      	str	r3, [sp, #0]
 80169d4:	4613      	mov	r3, r2
 80169d6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80169da:	462a      	mov	r2, r5
 80169dc:	f012 fd58 	bl	8029490 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80169e0:	b128      	cbz	r0, 80169ee <_ZN8touchgfx3HAL5touchEll+0x56>
 80169e2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80169e6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80169e8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80169ec:	6623      	str	r3, [r4, #96]	; 0x60
 80169ee:	b007      	add	sp, #28
 80169f0:	bd30      	pop	{r4, r5, pc}
 80169f2:	f012 fd8d 	bl	8029510 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80169f6:	2301      	movs	r3, #1
 80169f8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80169fc:	e7f1      	b.n	80169e2 <_ZN8touchgfx3HAL5touchEll+0x4a>

080169fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80169fe:	b510      	push	{r4, lr}
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d046      	beq.n	8016a92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016a04:	ea81 0002 	eor.w	r0, r1, r2
 8016a08:	07c4      	lsls	r4, r0, #31
 8016a0a:	d508      	bpl.n	8016a1e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8016a0c:	440b      	add	r3, r1
 8016a0e:	3a01      	subs	r2, #1
 8016a10:	428b      	cmp	r3, r1
 8016a12:	d93e      	bls.n	8016a92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016a14:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016a18:	f801 0b01 	strb.w	r0, [r1], #1
 8016a1c:	e7f8      	b.n	8016a10 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8016a1e:	07d0      	lsls	r0, r2, #31
 8016a20:	bf42      	ittt	mi
 8016a22:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 8016a26:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8016a2a:	f801 0b01 	strbmi.w	r0, [r1], #1
 8016a2e:	2b01      	cmp	r3, #1
 8016a30:	d911      	bls.n	8016a56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016a32:	ea81 0402 	eor.w	r4, r1, r2
 8016a36:	4610      	mov	r0, r2
 8016a38:	07a4      	lsls	r4, r4, #30
 8016a3a:	d022      	beq.n	8016a82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8016a3c:	f023 0401 	bic.w	r4, r3, #1
 8016a40:	440c      	add	r4, r1
 8016a42:	428c      	cmp	r4, r1
 8016a44:	4602      	mov	r2, r0
 8016a46:	d904      	bls.n	8016a52 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8016a48:	8812      	ldrh	r2, [r2, #0]
 8016a4a:	3002      	adds	r0, #2
 8016a4c:	f821 2b02 	strh.w	r2, [r1], #2
 8016a50:	e7f7      	b.n	8016a42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8016a52:	f003 0301 	and.w	r3, r3, #1
 8016a56:	f023 0003 	bic.w	r0, r3, #3
 8016a5a:	4408      	add	r0, r1
 8016a5c:	4288      	cmp	r0, r1
 8016a5e:	4614      	mov	r4, r2
 8016a60:	d904      	bls.n	8016a6c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8016a62:	6824      	ldr	r4, [r4, #0]
 8016a64:	3204      	adds	r2, #4
 8016a66:	f841 4b04 	str.w	r4, [r1], #4
 8016a6a:	e7f7      	b.n	8016a5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8016a6c:	f003 0303 	and.w	r3, r3, #3
 8016a70:	3a01      	subs	r2, #1
 8016a72:	440b      	add	r3, r1
 8016a74:	428b      	cmp	r3, r1
 8016a76:	d90c      	bls.n	8016a92 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8016a78:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8016a7c:	f801 0b01 	strb.w	r0, [r1], #1
 8016a80:	e7f8      	b.n	8016a74 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8016a82:	0790      	lsls	r0, r2, #30
 8016a84:	d0e7      	beq.n	8016a56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016a86:	f832 0b02 	ldrh.w	r0, [r2], #2
 8016a8a:	3b02      	subs	r3, #2
 8016a8c:	f821 0b02 	strh.w	r0, [r1], #2
 8016a90:	e7e1      	b.n	8016a56 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8016a92:	2001      	movs	r0, #1
 8016a94:	bd10      	pop	{r4, pc}

08016a96 <_ZN8touchgfx3HAL7noTouchEv>:
 8016a96:	b510      	push	{r4, lr}
 8016a98:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 8016a9c:	4604      	mov	r4, r0
 8016a9e:	b153      	cbz	r3, 8016ab6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8016aa0:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8016aa4:	2101      	movs	r1, #1
 8016aa6:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8016aaa:	301c      	adds	r0, #28
 8016aac:	f012 fd30 	bl	8029510 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8016ab6:	bd10      	pop	{r4, pc}

08016ab8 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8016ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016abc:	b085      	sub	sp, #20
 8016abe:	4604      	mov	r4, r0
 8016ac0:	2000      	movs	r0, #0
 8016ac2:	4699      	mov	r9, r3
 8016ac4:	ad04      	add	r5, sp, #16
 8016ac6:	460f      	mov	r7, r1
 8016ac8:	4690      	mov	r8, r2
 8016aca:	f845 0d04 	str.w	r0, [r5, #-4]!
 8016ace:	69a0      	ldr	r0, [r4, #24]
 8016ad0:	6806      	ldr	r6, [r0, #0]
 8016ad2:	9501      	str	r5, [sp, #4]
 8016ad4:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8016ad8:	9500      	str	r5, [sp, #0]
 8016ada:	6835      	ldr	r5, [r6, #0]
 8016adc:	47a8      	blx	r5
 8016ade:	4d10      	ldr	r5, [pc, #64]	; (8016b20 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8016ae0:	4606      	mov	r6, r0
 8016ae2:	f8a5 9000 	strh.w	r9, [r5]
 8016ae6:	f7f8 f825 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 8016aea:	6803      	ldr	r3, [r0, #0]
 8016aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016aee:	4798      	blx	r3
 8016af0:	b128      	cbz	r0, 8016afe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 8016af2:	2801      	cmp	r0, #1
 8016af4:	d00b      	beq.n	8016b0e <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 8016af6:	4630      	mov	r0, r6
 8016af8:	b005      	add	sp, #20
 8016afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016afe:	882b      	ldrh	r3, [r5, #0]
 8016b00:	fb08 7203 	mla	r2, r8, r3, r7
 8016b04:	9b03      	ldr	r3, [sp, #12]
 8016b06:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8016b0a:	63e3      	str	r3, [r4, #60]	; 0x3c
 8016b0c:	e7f3      	b.n	8016af6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8016b0e:	882a      	ldrh	r2, [r5, #0]
 8016b10:	9b03      	ldr	r3, [sp, #12]
 8016b12:	fb08 7202 	mla	r2, r8, r2, r7
 8016b16:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8016b1a:	1a9a      	subs	r2, r3, r2
 8016b1c:	63e2      	str	r2, [r4, #60]	; 0x3c
 8016b1e:	e7ea      	b.n	8016af6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8016b20:	2003c2b6 	.word	0x2003c2b6

08016b24 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 8016b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b26:	b08b      	sub	sp, #44	; 0x2c
 8016b28:	4617      	mov	r7, r2
 8016b2a:	4604      	mov	r4, r0
 8016b2c:	460e      	mov	r6, r1
 8016b2e:	461d      	mov	r5, r3
 8016b30:	f7f8 f800 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 8016b34:	6803      	ldr	r3, [r0, #0]
 8016b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b38:	4798      	blx	r3
 8016b3a:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016b3e:	9007      	str	r0, [sp, #28]
 8016b40:	4631      	mov	r1, r6
 8016b42:	6822      	ldr	r2, [r4, #0]
 8016b44:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016b48:	4b0c      	ldr	r3, [pc, #48]	; (8016b7c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8016b4a:	4620      	mov	r0, r4
 8016b4c:	881b      	ldrh	r3, [r3, #0]
 8016b4e:	9306      	str	r3, [sp, #24]
 8016b50:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8016b54:	9305      	str	r3, [sp, #20]
 8016b56:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8016b5a:	9304      	str	r3, [sp, #16]
 8016b5c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016b60:	9303      	str	r3, [sp, #12]
 8016b62:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016b66:	9302      	str	r3, [sp, #8]
 8016b68:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016b6c:	e9cd 5300 	strd	r5, r3, [sp]
 8016b70:	463b      	mov	r3, r7
 8016b72:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8016b74:	2200      	movs	r2, #0
 8016b76:	47a8      	blx	r5
 8016b78:	b00b      	add	sp, #44	; 0x2c
 8016b7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b7c:	2003c2b6 	.word	0x2003c2b6

08016b80 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8016b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016b84:	4698      	mov	r8, r3
 8016b86:	6803      	ldr	r3, [r0, #0]
 8016b88:	b08b      	sub	sp, #44	; 0x2c
 8016b8a:	4617      	mov	r7, r2
 8016b8c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8016b8e:	460e      	mov	r6, r1
 8016b90:	4b13      	ldr	r3, [pc, #76]	; (8016be0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8016b92:	4604      	mov	r4, r0
 8016b94:	f8b3 9000 	ldrh.w	r9, [r3]
 8016b98:	f7f7 ffcc 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 8016b9c:	6803      	ldr	r3, [r0, #0]
 8016b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ba0:	4798      	blx	r3
 8016ba2:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	4631      	mov	r1, r6
 8016baa:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8016bae:	2302      	movs	r3, #2
 8016bb0:	4620      	mov	r0, r4
 8016bb2:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8016bb6:	2301      	movs	r3, #1
 8016bb8:	9305      	str	r3, [sp, #20]
 8016bba:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8016bbe:	9304      	str	r3, [sp, #16]
 8016bc0:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8016bc4:	9303      	str	r3, [sp, #12]
 8016bc6:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016bca:	9302      	str	r3, [sp, #8]
 8016bcc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016bd0:	e9cd 8300 	strd	r8, r3, [sp]
 8016bd4:	463b      	mov	r3, r7
 8016bd6:	47a8      	blx	r5
 8016bd8:	b00b      	add	sp, #44	; 0x2c
 8016bda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016bde:	bf00      	nop
 8016be0:	2003c2b6 	.word	0x2003c2b6

08016be4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8016be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016be8:	4698      	mov	r8, r3
 8016bea:	6803      	ldr	r3, [r0, #0]
 8016bec:	b087      	sub	sp, #28
 8016bee:	460e      	mov	r6, r1
 8016bf0:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8016bf2:	4617      	mov	r7, r2
 8016bf4:	4b0f      	ldr	r3, [pc, #60]	; (8016c34 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8016bf6:	4604      	mov	r4, r0
 8016bf8:	f8b3 9000 	ldrh.w	r9, [r3]
 8016bfc:	f7f7 ff9a 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 8016c00:	6803      	ldr	r3, [r0, #0]
 8016c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c04:	4798      	blx	r3
 8016c06:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8016c0a:	463a      	mov	r2, r7
 8016c0c:	4631      	mov	r1, r6
 8016c0e:	f8cd 900c 	str.w	r9, [sp, #12]
 8016c12:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8016c16:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8016c1a:	4620      	mov	r0, r4
 8016c1c:	9302      	str	r3, [sp, #8]
 8016c1e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8016c22:	9301      	str	r3, [sp, #4]
 8016c24:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8016c28:	9300      	str	r3, [sp, #0]
 8016c2a:	4643      	mov	r3, r8
 8016c2c:	47a8      	blx	r5
 8016c2e:	b007      	add	sp, #28
 8016c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016c34:	2003c2b6 	.word	0x2003c2b6

08016c38 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8016c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	b08f      	sub	sp, #60	; 0x3c
 8016c40:	4610      	mov	r0, r2
 8016c42:	460d      	mov	r5, r1
 8016c44:	4691      	mov	r9, r2
 8016c46:	461e      	mov	r6, r3
 8016c48:	f007 f966 	bl	801df18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016c4c:	2800      	cmp	r0, #0
 8016c4e:	f000 809d 	beq.w	8016d8c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8016c52:	6823      	ldr	r3, [r4, #0]
 8016c54:	4620      	mov	r0, r4
 8016c56:	f8df b198 	ldr.w	fp, [pc, #408]	; 8016df0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8016c5a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8016c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c60:	4798      	blx	r3
 8016c62:	6823      	ldr	r3, [r4, #0]
 8016c64:	4620      	mov	r0, r4
 8016c66:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8016df4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8016c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c6c:	4798      	blx	r3
 8016c6e:	f8bb 3000 	ldrh.w	r3, [fp]
 8016c72:	4f5c      	ldr	r7, [pc, #368]	; (8016de4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016c74:	9301      	str	r3, [sp, #4]
 8016c76:	f8ba 3000 	ldrh.w	r3, [sl]
 8016c7a:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8016c7e:	4640      	mov	r0, r8
 8016c80:	9302      	str	r3, [sp, #8]
 8016c82:	883b      	ldrh	r3, [r7, #0]
 8016c84:	9303      	str	r3, [sp, #12]
 8016c86:	4b58      	ldr	r3, [pc, #352]	; (8016de8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016c88:	881a      	ldrh	r2, [r3, #0]
 8016c8a:	9305      	str	r3, [sp, #20]
 8016c8c:	9204      	str	r2, [sp, #16]
 8016c8e:	f007 fa87 	bl	801e1a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8016c92:	8038      	strh	r0, [r7, #0]
 8016c94:	4640      	mov	r0, r8
 8016c96:	f007 fab7 	bl	801e208 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8016c9a:	9b05      	ldr	r3, [sp, #20]
 8016c9c:	b280      	uxth	r0, r0
 8016c9e:	8018      	strh	r0, [r3, #0]
 8016ca0:	4b52      	ldr	r3, [pc, #328]	; (8016dec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8016ca2:	781b      	ldrb	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d174      	bne.n	8016d92 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8016ca8:	883b      	ldrh	r3, [r7, #0]
 8016caa:	f8aa 0000 	strh.w	r0, [sl]
 8016cae:	f8ab 3000 	strh.w	r3, [fp]
 8016cb2:	4648      	mov	r0, r9
 8016cb4:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8016cb8:	f007 f92e 	bl	801df18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8016cc2:	4611      	mov	r1, r2
 8016cc4:	4628      	mov	r0, r5
 8016cc6:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8016cca:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8016cce:	f7f8 fd59 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>
 8016cd2:	2301      	movs	r3, #1
 8016cd4:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8016cd8:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8016cdc:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	dd5c      	ble.n	8016d9e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016ce4:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	dd58      	ble.n	8016d9e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8016cec:	462a      	mov	r2, r5
 8016cee:	ab0a      	add	r3, sp, #40	; 0x28
 8016cf0:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016cf4:	6851      	ldr	r1, [r2, #4]
 8016cf6:	c303      	stmia	r3!, {r0, r1}
 8016cf8:	4631      	mov	r1, r6
 8016cfa:	a80a      	add	r0, sp, #40	; 0x28
 8016cfc:	f7ff fbfa 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 8016d00:	4b38      	ldr	r3, [pc, #224]	; (8016de4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016d02:	2100      	movs	r1, #0
 8016d04:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016d08:	4b37      	ldr	r3, [pc, #220]	; (8016de8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016d0a:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8016d0e:	aa0a      	add	r2, sp, #40	; 0x28
 8016d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016d14:	910c      	str	r1, [sp, #48]	; 0x30
 8016d16:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8016d1a:	ab08      	add	r3, sp, #32
 8016d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016d20:	e883 0003 	stmia.w	r3, {r0, r1}
 8016d24:	4618      	mov	r0, r3
 8016d26:	a90c      	add	r1, sp, #48	; 0x30
 8016d28:	f7ff fbe4 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 8016d2c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d13c      	bne.n	8016dac <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8016d32:	2000      	movs	r0, #0
 8016d34:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8016d38:	2600      	movs	r6, #0
 8016d3a:	696b      	ldr	r3, [r5, #20]
 8016d3c:	a908      	add	r1, sp, #32
 8016d3e:	682a      	ldr	r2, [r5, #0]
 8016d40:	4628      	mov	r0, r5
 8016d42:	9305      	str	r3, [sp, #20]
 8016d44:	616e      	str	r6, [r5, #20]
 8016d46:	6892      	ldr	r2, [r2, #8]
 8016d48:	4790      	blx	r2
 8016d4a:	9b05      	ldr	r3, [sp, #20]
 8016d4c:	4652      	mov	r2, sl
 8016d4e:	4649      	mov	r1, r9
 8016d50:	616b      	str	r3, [r5, #20]
 8016d52:	4628      	mov	r0, r5
 8016d54:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8016d58:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8016d5c:	f7f8 fd12 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>
 8016d60:	9a01      	ldr	r2, [sp, #4]
 8016d62:	4b23      	ldr	r3, [pc, #140]	; (8016df0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8016d64:	4620      	mov	r0, r4
 8016d66:	801a      	strh	r2, [r3, #0]
 8016d68:	9a02      	ldr	r2, [sp, #8]
 8016d6a:	4b22      	ldr	r3, [pc, #136]	; (8016df4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8016d6c:	801a      	strh	r2, [r3, #0]
 8016d6e:	9a03      	ldr	r2, [sp, #12]
 8016d70:	4b1c      	ldr	r3, [pc, #112]	; (8016de4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8016d72:	801a      	strh	r2, [r3, #0]
 8016d74:	4b1c      	ldr	r3, [pc, #112]	; (8016de8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8016d76:	9a04      	ldr	r2, [sp, #16]
 8016d78:	801a      	strh	r2, [r3, #0]
 8016d7a:	6823      	ldr	r3, [r4, #0]
 8016d7c:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8016d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d82:	4798      	blx	r3
 8016d84:	6823      	ldr	r3, [r4, #0]
 8016d86:	4620      	mov	r0, r4
 8016d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d8a:	4798      	blx	r3
 8016d8c:	b00f      	add	sp, #60	; 0x3c
 8016d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d92:	883b      	ldrh	r3, [r7, #0]
 8016d94:	f8ab 0000 	strh.w	r0, [fp]
 8016d98:	f8aa 3000 	strh.w	r3, [sl]
 8016d9c:	e789      	b.n	8016cb2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8016d9e:	462a      	mov	r2, r5
 8016da0:	ab0a      	add	r3, sp, #40	; 0x28
 8016da2:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8016da6:	6851      	ldr	r1, [r2, #4]
 8016da8:	c303      	stmia	r3!, {r0, r1}
 8016daa:	e7a9      	b.n	8016d00 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8016dac:	a807      	add	r0, sp, #28
 8016dae:	f007 fb1b 	bl	801e3e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016db2:	4606      	mov	r6, r0
 8016db4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8016db6:	6803      	ldr	r3, [r0, #0]
 8016db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016dba:	4798      	blx	r3
 8016dbc:	4286      	cmp	r6, r0
 8016dbe:	d1b8      	bne.n	8016d32 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8016dc0:	f7f7 feb8 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 8016dc4:	6803      	ldr	r3, [r0, #0]
 8016dc6:	4606      	mov	r6, r0
 8016dc8:	a807      	add	r0, sp, #28
 8016dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016dcc:	9305      	str	r3, [sp, #20]
 8016dce:	f007 fb0b 	bl	801e3e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8016dd2:	9b05      	ldr	r3, [sp, #20]
 8016dd4:	4601      	mov	r1, r0
 8016dd6:	4630      	mov	r0, r6
 8016dd8:	4798      	blx	r3
 8016dda:	f080 0001 	eor.w	r0, r0, #1
 8016dde:	b2c0      	uxtb	r0, r0
 8016de0:	e7a8      	b.n	8016d34 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8016de2:	bf00      	nop
 8016de4:	2003c2b0 	.word	0x2003c2b0
 8016de8:	2003c2b2 	.word	0x2003c2b2
 8016dec:	2003c2b4 	.word	0x2003c2b4
 8016df0:	2003c2b6 	.word	0x2003c2b6
 8016df4:	2003c2b8 	.word	0x2003c2b8

08016df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8016df8:	4b07      	ldr	r3, [pc, #28]	; (8016e18 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8016dfa:	b510      	push	{r4, lr}
 8016dfc:	781b      	ldrb	r3, [r3, #0]
 8016dfe:	4604      	mov	r4, r0
 8016e00:	b13b      	cbz	r3, 8016e12 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016e02:	6803      	ldr	r3, [r0, #0]
 8016e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e06:	4798      	blx	r3
 8016e08:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016e0a:	4283      	cmp	r3, r0
 8016e0c:	d101      	bne.n	8016e12 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8016e0e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8016e10:	bd10      	pop	{r4, pc}
 8016e12:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8016e14:	e7fc      	b.n	8016e10 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8016e16:	bf00      	nop
 8016e18:	2003c2ba 	.word	0x2003c2ba

08016e1c <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8016e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e20:	461d      	mov	r5, r3
 8016e22:	b08a      	sub	sp, #40	; 0x28
 8016e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016e28:	4690      	mov	r8, r2
 8016e2a:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8016e2e:	2400      	movs	r4, #0
 8016e30:	4607      	mov	r7, r0
 8016e32:	fb06 8505 	mla	r5, r6, r5, r8
 8016e36:	9404      	str	r4, [sp, #16]
 8016e38:	f88d 4020 	strb.w	r4, [sp, #32]
 8016e3c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016e40:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8016e44:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016e48:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016e4c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016e50:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016e54:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016e58:	f7ff ffce 	bl	8016df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016e5c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016e60:	6878      	ldr	r0, [r7, #4]
 8016e62:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016e66:	a901      	add	r1, sp, #4
 8016e68:	9505      	str	r5, [sp, #20]
 8016e6a:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016e6e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8016e72:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8016e76:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8016e7a:	6803      	ldr	r3, [r0, #0]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	4798      	blx	r3
 8016e80:	b00a      	add	sp, #40	; 0x28
 8016e82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e86 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8016e86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016e8a:	b08b      	sub	sp, #44	; 0x2c
 8016e8c:	2400      	movs	r4, #0
 8016e8e:	4691      	mov	r9, r2
 8016e90:	461d      	mov	r5, r3
 8016e92:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8016e96:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016e9a:	4688      	mov	r8, r1
 8016e9c:	4607      	mov	r7, r0
 8016e9e:	9404      	str	r4, [sp, #16]
 8016ea0:	fb06 9505 	mla	r5, r6, r5, r9
 8016ea4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016ea8:	f7ff ffa6 	bl	8016df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016eac:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016eb0:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8016eb4:	6878      	ldr	r0, [r7, #4]
 8016eb6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016eba:	a901      	add	r1, sp, #4
 8016ebc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016ec0:	9505      	str	r5, [sp, #20]
 8016ec2:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016ec6:	f8ad 401c 	strh.w	r4, [sp, #28]
 8016eca:	f8ad 601e 	strh.w	r6, [sp, #30]
 8016ece:	f8cd 8010 	str.w	r8, [sp, #16]
 8016ed2:	f8ad 4020 	strh.w	r4, [sp, #32]
 8016ed6:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016eda:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8016ede:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8016ee2:	6803      	ldr	r3, [r0, #0]
 8016ee4:	685b      	ldr	r3, [r3, #4]
 8016ee6:	4798      	blx	r3
 8016ee8:	b00b      	add	sp, #44	; 0x2c
 8016eea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08016ef0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8016ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ef4:	b08a      	sub	sp, #40	; 0x28
 8016ef6:	4698      	mov	r8, r3
 8016ef8:	2300      	movs	r3, #0
 8016efa:	4606      	mov	r6, r0
 8016efc:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8016f00:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8016f04:	2d0b      	cmp	r5, #11
 8016f06:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8016f0a:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8016f0e:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8016f12:	9304      	str	r3, [sp, #16]
 8016f14:	d137      	bne.n	8016f86 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8016f16:	2380      	movs	r3, #128	; 0x80
 8016f18:	f88d 0020 	strb.w	r0, [sp, #32]
 8016f1c:	4630      	mov	r0, r6
 8016f1e:	9203      	str	r2, [sp, #12]
 8016f20:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8016f24:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8016f28:	f8ad 3018 	strh.w	r3, [sp, #24]
 8016f2c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8016f30:	f8ad 301a 	strh.w	r3, [sp, #26]
 8016f34:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8016f38:	f8ad 301c 	strh.w	r3, [sp, #28]
 8016f3c:	f7ff ff5c 	bl	8016df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016f40:	2c0b      	cmp	r4, #11
 8016f42:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8016f46:	f8ad 701e 	strh.w	r7, [sp, #30]
 8016f4a:	bf94      	ite	ls
 8016f4c:	4b19      	ldrls	r3, [pc, #100]	; (8016fb4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8016f4e:	2100      	movhi	r1, #0
 8016f50:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8016f54:	bf98      	it	ls
 8016f56:	5d19      	ldrbls	r1, [r3, r4]
 8016f58:	fb02 8307 	mla	r3, r2, r7, r8
 8016f5c:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8016f60:	10c9      	asrs	r1, r1, #3
 8016f62:	fb01 0003 	mla	r0, r1, r3, r0
 8016f66:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8016f6a:	a901      	add	r1, sp, #4
 8016f6c:	9005      	str	r0, [sp, #20]
 8016f6e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8016f72:	2300      	movs	r3, #0
 8016f74:	6870      	ldr	r0, [r6, #4]
 8016f76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8016f7a:	6803      	ldr	r3, [r0, #0]
 8016f7c:	685b      	ldr	r3, [r3, #4]
 8016f7e:	4798      	blx	r3
 8016f80:	b00a      	add	sp, #40	; 0x28
 8016f82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f86:	2d02      	cmp	r5, #2
 8016f88:	d109      	bne.n	8016f9e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8016f8a:	28ff      	cmp	r0, #255	; 0xff
 8016f8c:	d105      	bne.n	8016f9a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8016f8e:	f1bc 0f00 	cmp.w	ip, #0
 8016f92:	bf14      	ite	ne
 8016f94:	2340      	movne	r3, #64	; 0x40
 8016f96:	2320      	moveq	r3, #32
 8016f98:	e7be      	b.n	8016f18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016f9a:	2340      	movs	r3, #64	; 0x40
 8016f9c:	e7bc      	b.n	8016f18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016f9e:	28ff      	cmp	r0, #255	; 0xff
 8016fa0:	d105      	bne.n	8016fae <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8016fa2:	f1bc 0f00 	cmp.w	ip, #0
 8016fa6:	bf14      	ite	ne
 8016fa8:	2304      	movne	r3, #4
 8016faa:	2301      	moveq	r3, #1
 8016fac:	e7b4      	b.n	8016f18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016fae:	2304      	movs	r3, #4
 8016fb0:	e7b2      	b.n	8016f18 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8016fb2:	bf00      	nop
 8016fb4:	080302fc 	.word	0x080302fc

08016fb8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8016fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fbc:	b08b      	sub	sp, #44	; 0x2c
 8016fbe:	461d      	mov	r5, r3
 8016fc0:	2400      	movs	r4, #0
 8016fc2:	4688      	mov	r8, r1
 8016fc4:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8016fc8:	4693      	mov	fp, r2
 8016fca:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8016fce:	4607      	mov	r7, r0
 8016fd0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8016fd4:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8016fd8:	9404      	str	r4, [sp, #16]
 8016fda:	bf14      	ite	ne
 8016fdc:	2308      	movne	r3, #8
 8016fde:	2302      	moveq	r3, #2
 8016fe0:	fb05 b50a 	mla	r5, r5, sl, fp
 8016fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016fe8:	f7ff ff06 	bl	8016df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8016fec:	2e0b      	cmp	r6, #11
 8016fee:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016ff2:	a901      	add	r1, sp, #4
 8016ff4:	bf98      	it	ls
 8016ff6:	4b13      	ldrls	r3, [pc, #76]	; (8017044 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8016ff8:	f8ad a01e 	strh.w	sl, [sp, #30]
 8016ffc:	bf98      	it	ls
 8016ffe:	5d9c      	ldrbls	r4, [r3, r6]
 8017000:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8017004:	10e4      	asrs	r4, r4, #3
 8017006:	f8cd 8010 	str.w	r8, [sp, #16]
 801700a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801700e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8017012:	fb04 0405 	mla	r4, r4, r5, r0
 8017016:	6878      	ldr	r0, [r7, #4]
 8017018:	f8ad 301a 	strh.w	r3, [sp, #26]
 801701c:	2300      	movs	r3, #0
 801701e:	9405      	str	r4, [sp, #20]
 8017020:	f8ad 301c 	strh.w	r3, [sp, #28]
 8017024:	f88d 9020 	strb.w	r9, [sp, #32]
 8017028:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 801702c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8017030:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8017034:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8017038:	6803      	ldr	r3, [r0, #0]
 801703a:	685b      	ldr	r3, [r3, #4]
 801703c:	4798      	blx	r3
 801703e:	b00b      	add	sp, #44	; 0x2c
 8017040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017044:	080302fc 	.word	0x080302fc

08017048 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8017048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801704c:	461e      	mov	r6, r3
 801704e:	4b0a      	ldr	r3, [pc, #40]	; (8017078 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8017050:	460f      	mov	r7, r1
 8017052:	4690      	mov	r8, r2
 8017054:	881d      	ldrh	r5, [r3, #0]
 8017056:	f7f7 fd6d 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 801705a:	6803      	ldr	r3, [r0, #0]
 801705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801705e:	4798      	blx	r3
 8017060:	280b      	cmp	r0, #11
 8017062:	bf96      	itet	ls
 8017064:	4b05      	ldrls	r3, [pc, #20]	; (801707c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8017066:	2400      	movhi	r4, #0
 8017068:	5c1c      	ldrbls	r4, [r3, r0]
 801706a:	fb08 7005 	mla	r0, r8, r5, r7
 801706e:	10e4      	asrs	r4, r4, #3
 8017070:	fb04 6000 	mla	r0, r4, r0, r6
 8017074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017078:	2003c2b6 	.word	0x2003c2b6
 801707c:	080302fc 	.word	0x080302fc

08017080 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8017080:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017082:	b08b      	sub	sp, #44	; 0x2c
 8017084:	461f      	mov	r7, r3
 8017086:	4604      	mov	r4, r0
 8017088:	4616      	mov	r6, r2
 801708a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801708e:	2500      	movs	r5, #0
 8017090:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8017094:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8017098:	9504      	str	r5, [sp, #16]
 801709a:	f8ad 3018 	strh.w	r3, [sp, #24]
 801709e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80170a2:	f8ad 301a 	strh.w	r3, [sp, #26]
 80170a6:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80170aa:	f8ad 301c 	strh.w	r3, [sp, #28]
 80170ae:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 80170b2:	f88d 3020 	strb.w	r3, [sp, #32]
 80170b6:	f7ff fe9f 	bl	8016df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80170ba:	463a      	mov	r2, r7
 80170bc:	4631      	mov	r1, r6
 80170be:	4603      	mov	r3, r0
 80170c0:	4620      	mov	r0, r4
 80170c2:	f7ff ffc1 	bl	8017048 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80170c6:	4b0e      	ldr	r3, [pc, #56]	; (8017100 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 80170c8:	9005      	str	r0, [sp, #20]
 80170ca:	881b      	ldrh	r3, [r3, #0]
 80170cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80170d0:	f7f7 fd30 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 80170d4:	6803      	ldr	r3, [r0, #0]
 80170d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d8:	4798      	blx	r3
 80170da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80170dc:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 80170e0:	a901      	add	r1, sp, #4
 80170e2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 80170e6:	9304      	str	r3, [sp, #16]
 80170e8:	6860      	ldr	r0, [r4, #4]
 80170ea:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 80170ee:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 80170f2:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80170f6:	6803      	ldr	r3, [r0, #0]
 80170f8:	685b      	ldr	r3, [r3, #4]
 80170fa:	4798      	blx	r3
 80170fc:	b00b      	add	sp, #44	; 0x2c
 80170fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017100:	2003c2b6 	.word	0x2003c2b6

08017104 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8017104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017106:	b08d      	sub	sp, #52	; 0x34
 8017108:	2501      	movs	r5, #1
 801710a:	4604      	mov	r4, r0
 801710c:	466b      	mov	r3, sp
 801710e:	9503      	str	r5, [sp, #12]
 8017110:	e883 0006 	stmia.w	r3, {r1, r2}
 8017114:	2300      	movs	r3, #0
 8017116:	f8bd 6000 	ldrh.w	r6, [sp]
 801711a:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801711e:	9306      	str	r3, [sp, #24]
 8017120:	6803      	ldr	r3, [r0, #0]
 8017122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017124:	4798      	blx	r3
 8017126:	463a      	mov	r2, r7
 8017128:	4631      	mov	r1, r6
 801712a:	4603      	mov	r3, r0
 801712c:	4620      	mov	r0, r4
 801712e:	f7ff ff8b 	bl	8017048 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017132:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8017134:	9004      	str	r0, [sp, #16]
 8017136:	9307      	str	r3, [sp, #28]
 8017138:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801713c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017140:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017144:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8017148:	4b0e      	ldr	r3, [pc, #56]	; (8017184 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801714a:	881b      	ldrh	r3, [r3, #0]
 801714c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8017150:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8017154:	f7f7 fcee 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 8017158:	6803      	ldr	r3, [r0, #0]
 801715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801715c:	4798      	blx	r3
 801715e:	23ff      	movs	r3, #255	; 0xff
 8017160:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8017164:	a903      	add	r1, sp, #12
 8017166:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 801716a:	6860      	ldr	r0, [r4, #4]
 801716c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8017170:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8017174:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017178:	6803      	ldr	r3, [r0, #0]
 801717a:	685b      	ldr	r3, [r3, #4]
 801717c:	4798      	blx	r3
 801717e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017180:	b00d      	add	sp, #52	; 0x34
 8017182:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017184:	2003c2b6 	.word	0x2003c2b6

08017188 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8017188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801718c:	b08c      	sub	sp, #48	; 0x30
 801718e:	461e      	mov	r6, r3
 8017190:	2300      	movs	r3, #0
 8017192:	4604      	mov	r4, r0
 8017194:	466d      	mov	r5, sp
 8017196:	9306      	str	r3, [sp, #24]
 8017198:	6803      	ldr	r3, [r0, #0]
 801719a:	e885 0006 	stmia.w	r5, {r1, r2}
 801719e:	2501      	movs	r5, #1
 80171a0:	f8bd 7000 	ldrh.w	r7, [sp]
 80171a4:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 80171a8:	9503      	str	r5, [sp, #12]
 80171aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171ac:	4798      	blx	r3
 80171ae:	4642      	mov	r2, r8
 80171b0:	4639      	mov	r1, r7
 80171b2:	4603      	mov	r3, r0
 80171b4:	4620      	mov	r0, r4
 80171b6:	f7ff ff47 	bl	8017048 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80171ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80171be:	9004      	str	r0, [sp, #16]
 80171c0:	f8ad 3020 	strh.w	r3, [sp, #32]
 80171c4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80171c8:	9607      	str	r6, [sp, #28]
 80171ca:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80171ce:	4b10      	ldr	r3, [pc, #64]	; (8017210 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 80171d0:	881b      	ldrh	r3, [r3, #0]
 80171d2:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 80171d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80171d8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 80171dc:	f7f7 fcaa 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 80171e0:	6803      	ldr	r3, [r0, #0]
 80171e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171e4:	4798      	blx	r3
 80171e6:	23ff      	movs	r3, #255	; 0xff
 80171e8:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 80171ec:	a903      	add	r1, sp, #12
 80171ee:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80171f2:	6860      	ldr	r0, [r4, #4]
 80171f4:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80171f8:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80171fc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8017200:	6803      	ldr	r3, [r0, #0]
 8017202:	685b      	ldr	r3, [r3, #4]
 8017204:	4798      	blx	r3
 8017206:	4630      	mov	r0, r6
 8017208:	b00c      	add	sp, #48	; 0x30
 801720a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801720e:	bf00      	nop
 8017210:	2003c2b6 	.word	0x2003c2b6

08017214 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8017214:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017216:	b085      	sub	sp, #20
 8017218:	4605      	mov	r5, r0
 801721a:	ac02      	add	r4, sp, #8
 801721c:	e884 0006 	stmia.w	r4, {r1, r2}
 8017220:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8017224:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8017228:	f7ff fde6 	bl	8016df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801722c:	4631      	mov	r1, r6
 801722e:	4603      	mov	r3, r0
 8017230:	463a      	mov	r2, r7
 8017232:	4628      	mov	r0, r5
 8017234:	f7ff ff08 	bl	8017048 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8017238:	4a05      	ldr	r2, [pc, #20]	; (8017250 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 801723a:	682b      	ldr	r3, [r5, #0]
 801723c:	8812      	ldrh	r2, [r2, #0]
 801723e:	9200      	str	r2, [sp, #0]
 8017240:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8017242:	4603      	mov	r3, r0
 8017244:	4628      	mov	r0, r5
 8017246:	e894 0006 	ldmia.w	r4, {r1, r2}
 801724a:	47b0      	blx	r6
 801724c:	b005      	add	sp, #20
 801724e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017250:	2003c2b6 	.word	0x2003c2b6

08017254 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8017254:	b570      	push	{r4, r5, r6, lr}
 8017256:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801725a:	4604      	mov	r4, r0
 801725c:	b19b      	cbz	r3, 8017286 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801725e:	2002      	movs	r0, #2
 8017260:	f7fb f9c6 	bl	80125f0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8017264:	2300      	movs	r3, #0
 8017266:	4620      	mov	r0, r4
 8017268:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801726c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 8017270:	6823      	ldr	r3, [r4, #0]
 8017272:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8017276:	f7ff fdbf 	bl	8016df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801727a:	4601      	mov	r1, r0
 801727c:	4620      	mov	r0, r4
 801727e:	462b      	mov	r3, r5
 8017280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017284:	4718      	bx	r3
 8017286:	bd70      	pop	{r4, r5, r6, pc}

08017288 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8017288:	b538      	push	{r3, r4, r5, lr}
 801728a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801728e:	4604      	mov	r4, r0
 8017290:	460d      	mov	r5, r1
 8017292:	428b      	cmp	r3, r1
 8017294:	d006      	beq.n	80172a4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8017296:	6803      	ldr	r3, [r0, #0]
 8017298:	b929      	cbnz	r1, 80172a6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801729a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801729e:	4798      	blx	r3
 80172a0:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 80172a4:	bd38      	pop	{r3, r4, r5, pc}
 80172a6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80172aa:	e7f8      	b.n	801729e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

080172ac <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 80172ac:	4b0d      	ldr	r3, [pc, #52]	; (80172e4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 80172ae:	b510      	push	{r4, lr}
 80172b0:	781b      	ldrb	r3, [r3, #0]
 80172b2:	4604      	mov	r4, r0
 80172b4:	b95b      	cbnz	r3, 80172ce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80172b6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80172ba:	2b02      	cmp	r3, #2
 80172bc:	d007      	beq.n	80172ce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80172be:	6840      	ldr	r0, [r0, #4]
 80172c0:	f000 f926 	bl	8017510 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 80172c4:	b118      	cbz	r0, 80172ce <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 80172c6:	6862      	ldr	r2, [r4, #4]
 80172c8:	7a53      	ldrb	r3, [r2, #9]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d0fc      	beq.n	80172c8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 80172ce:	f7fc fc07 	bl	8013ae0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 80172d2:	4620      	mov	r0, r4
 80172d4:	2100      	movs	r1, #0
 80172d6:	f7ff ffd7 	bl	8017288 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80172da:	4620      	mov	r0, r4
 80172dc:	f7ff fd8c 	bl	8016df8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80172e0:	bd10      	pop	{r4, pc}
 80172e2:	bf00      	nop
 80172e4:	2003c2ba 	.word	0x2003c2ba

080172e8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 80172e8:	b570      	push	{r4, r5, r6, lr}
 80172ea:	4604      	mov	r4, r0
 80172ec:	6803      	ldr	r3, [r0, #0]
 80172ee:	b919      	cbnz	r1, 80172f8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 80172f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80172f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80172f6:	4718      	bx	r3
 80172f8:	2200      	movs	r2, #0
 80172fa:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
 80172fe:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
 8017302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017304:	4798      	blx	r3
 8017306:	4605      	mov	r5, r0
 8017308:	f884 6078 	strb.w	r6, [r4, #120]	; 0x78
 801730c:	4620      	mov	r0, r4
 801730e:	2101      	movs	r1, #1
 8017310:	f7ff ffba 	bl	8017288 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017314:	4628      	mov	r0, r5
 8017316:	bd70      	pop	{r4, r5, r6, pc}

08017318 <_ZN8touchgfx13DMA_Interface10initializeEv>:
 8017318:	4770      	bx	lr

0801731a <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
 801731a:	2000      	movs	r0, #0
 801731c:	4770      	bx	lr

0801731e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801731e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8017322:	1a13      	subs	r3, r2, r0
 8017324:	4258      	negs	r0, r3
 8017326:	4158      	adcs	r0, r3
 8017328:	4770      	bx	lr

0801732a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801732a:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 801732e:	1a9b      	subs	r3, r3, r2
 8017330:	2b00      	cmp	r3, #0
 8017332:	bfdc      	itt	le
 8017334:	6882      	ldrle	r2, [r0, #8]
 8017336:	189b      	addle	r3, r3, r2
 8017338:	2b01      	cmp	r3, #1
 801733a:	bfcc      	ite	gt
 801733c:	2000      	movgt	r0, #0
 801733e:	2001      	movle	r0, #1
 8017340:	4770      	bx	lr

08017342 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8017342:	6902      	ldr	r2, [r0, #16]
 8017344:	6843      	ldr	r3, [r0, #4]
 8017346:	2024      	movs	r0, #36	; 0x24
 8017348:	fb00 3002 	mla	r0, r0, r2, r3
 801734c:	4770      	bx	lr

0801734e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801734e:	6803      	ldr	r3, [r0, #0]
 8017350:	691b      	ldr	r3, [r3, #16]
 8017352:	4718      	bx	r3

08017354 <_ZN8touchgfx13DMA_Interface7executeEv>:
 8017354:	2301      	movs	r3, #1
 8017356:	b570      	push	{r4, r5, r6, lr}
 8017358:	7203      	strb	r3, [r0, #8]
 801735a:	4604      	mov	r4, r0
 801735c:	6840      	ldr	r0, [r0, #4]
 801735e:	6803      	ldr	r3, [r0, #0]
 8017360:	699b      	ldr	r3, [r3, #24]
 8017362:	4798      	blx	r3
 8017364:	6803      	ldr	r3, [r0, #0]
 8017366:	4605      	mov	r5, r0
 8017368:	2b40      	cmp	r3, #64	; 0x40
 801736a:	d00c      	beq.n	8017386 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801736c:	d810      	bhi.n	8017390 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801736e:	2b04      	cmp	r3, #4
 8017370:	d01d      	beq.n	80173ae <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8017372:	d804      	bhi.n	801737e <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8017374:	2b01      	cmp	r3, #1
 8017376:	d006      	beq.n	8017386 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017378:	2b02      	cmp	r3, #2
 801737a:	d02c      	beq.n	80173d6 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 801737c:	bd70      	pop	{r4, r5, r6, pc}
 801737e:	2b08      	cmp	r3, #8
 8017380:	d01d      	beq.n	80173be <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8017382:	2b20      	cmp	r3, #32
 8017384:	d1fa      	bne.n	801737c <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8017386:	6823      	ldr	r3, [r4, #0]
 8017388:	4620      	mov	r0, r4
 801738a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801738c:	4798      	blx	r3
 801738e:	e013      	b.n	80173b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8017390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017394:	d0f7      	beq.n	8017386 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8017396:	d804      	bhi.n	80173a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8017398:	2b80      	cmp	r3, #128	; 0x80
 801739a:	d0f4      	beq.n	8017386 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801739c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80173a0:	e7f0      	b.n	8017384 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 80173a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80173a6:	d0ee      	beq.n	8017386 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80173a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80173ac:	e7e5      	b.n	801737a <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 80173ae:	6823      	ldr	r3, [r4, #0]
 80173b0:	7f01      	ldrb	r1, [r0, #28]
 80173b2:	4620      	mov	r0, r4
 80173b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173b6:	4798      	blx	r3
 80173b8:	6823      	ldr	r3, [r4, #0]
 80173ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80173bc:	e006      	b.n	80173cc <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 80173be:	6823      	ldr	r3, [r4, #0]
 80173c0:	7f01      	ldrb	r1, [r0, #28]
 80173c2:	4620      	mov	r0, r4
 80173c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173c6:	4798      	blx	r3
 80173c8:	6823      	ldr	r3, [r4, #0]
 80173ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80173cc:	4629      	mov	r1, r5
 80173ce:	4620      	mov	r0, r4
 80173d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80173d4:	4718      	bx	r3
 80173d6:	6823      	ldr	r3, [r4, #0]
 80173d8:	4620      	mov	r0, r4
 80173da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80173dc:	4798      	blx	r3
 80173de:	e7f3      	b.n	80173c8 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

080173e0 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 80173e0:	4770      	bx	lr

080173e2 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 80173e2:	4770      	bx	lr

080173e4 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 80173e4:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 80173e8:	b510      	push	{r4, lr}
 80173ea:	1ad2      	subs	r2, r2, r3
 80173ec:	2a00      	cmp	r2, #0
 80173ee:	bfdc      	itt	le
 80173f0:	6884      	ldrle	r4, [r0, #8]
 80173f2:	1912      	addle	r2, r2, r4
 80173f4:	2a01      	cmp	r2, #1
 80173f6:	dd16      	ble.n	8017426 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 80173f8:	6842      	ldr	r2, [r0, #4]
 80173fa:	2424      	movs	r4, #36	; 0x24
 80173fc:	fb04 2303 	mla	r3, r4, r3, r2
 8017400:	f101 0220 	add.w	r2, r1, #32
 8017404:	f851 4b04 	ldr.w	r4, [r1], #4
 8017408:	4291      	cmp	r1, r2
 801740a:	f843 4b04 	str.w	r4, [r3], #4
 801740e:	d1f9      	bne.n	8017404 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8017410:	780a      	ldrb	r2, [r1, #0]
 8017412:	701a      	strb	r2, [r3, #0]
 8017414:	68c3      	ldr	r3, [r0, #12]
 8017416:	6882      	ldr	r2, [r0, #8]
 8017418:	f3bf 8f5b 	dmb	ish
 801741c:	3301      	adds	r3, #1
 801741e:	429a      	cmp	r2, r3
 8017420:	bfd8      	it	le
 8017422:	1a9b      	suble	r3, r3, r2
 8017424:	60c3      	str	r3, [r0, #12]
 8017426:	bd10      	pop	{r4, pc}

08017428 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8017428:	6903      	ldr	r3, [r0, #16]
 801742a:	6882      	ldr	r2, [r0, #8]
 801742c:	f3bf 8f5b 	dmb	ish
 8017430:	3301      	adds	r3, #1
 8017432:	429a      	cmp	r2, r3
 8017434:	bfd8      	it	le
 8017436:	1a9b      	suble	r3, r3, r2
 8017438:	6103      	str	r3, [r0, #16]
 801743a:	4770      	bx	lr

0801743c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801743c:	b570      	push	{r4, r5, r6, lr}
 801743e:	4604      	mov	r4, r0
 8017440:	460e      	mov	r6, r1
 8017442:	6860      	ldr	r0, [r4, #4]
 8017444:	6803      	ldr	r3, [r0, #0]
 8017446:	685b      	ldr	r3, [r3, #4]
 8017448:	4798      	blx	r3
 801744a:	2800      	cmp	r0, #0
 801744c:	d1f9      	bne.n	8017442 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801744e:	4d0d      	ldr	r5, [pc, #52]	; (8017484 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8017450:	6828      	ldr	r0, [r5, #0]
 8017452:	6803      	ldr	r3, [r0, #0]
 8017454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017456:	4798      	blx	r3
 8017458:	f7fc fb5c 	bl	8013b14 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801745c:	6828      	ldr	r0, [r5, #0]
 801745e:	2101      	movs	r1, #1
 8017460:	f7ff ff12 	bl	8017288 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8017464:	6860      	ldr	r0, [r4, #4]
 8017466:	4631      	mov	r1, r6
 8017468:	6803      	ldr	r3, [r0, #0]
 801746a:	689b      	ldr	r3, [r3, #8]
 801746c:	4798      	blx	r3
 801746e:	6823      	ldr	r3, [r4, #0]
 8017470:	4620      	mov	r0, r4
 8017472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017474:	4798      	blx	r3
 8017476:	6828      	ldr	r0, [r5, #0]
 8017478:	6803      	ldr	r3, [r0, #0]
 801747a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801747e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017480:	4718      	bx	r3
 8017482:	bf00      	nop
 8017484:	2003c2bc 	.word	0x2003c2bc

08017488 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8017488:	b508      	push	{r3, lr}
 801748a:	f7fc fb29 	bl	8013ae0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801748e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017492:	f7fc bb33 	b.w	8013afc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08017496 <_ZN8touchgfx13DMA_Interface5startEv>:
 8017496:	b510      	push	{r4, lr}
 8017498:	4604      	mov	r4, r0
 801749a:	6840      	ldr	r0, [r0, #4]
 801749c:	6803      	ldr	r3, [r0, #0]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	4798      	blx	r3
 80174a2:	b948      	cbnz	r0, 80174b8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80174a4:	7a63      	ldrb	r3, [r4, #9]
 80174a6:	b13b      	cbz	r3, 80174b8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80174a8:	7a23      	ldrb	r3, [r4, #8]
 80174aa:	b92b      	cbnz	r3, 80174b8 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 80174ac:	6823      	ldr	r3, [r4, #0]
 80174ae:	4620      	mov	r0, r4
 80174b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80174b6:	4718      	bx	r3
 80174b8:	bd10      	pop	{r4, pc}

080174ba <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 80174ba:	b570      	push	{r4, r5, r6, lr}
 80174bc:	4604      	mov	r4, r0
 80174be:	6840      	ldr	r0, [r0, #4]
 80174c0:	6803      	ldr	r3, [r0, #0]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	4798      	blx	r3
 80174c6:	4605      	mov	r5, r0
 80174c8:	b930      	cbnz	r0, 80174d8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80174ca:	7a23      	ldrb	r3, [r4, #8]
 80174cc:	b123      	cbz	r3, 80174d8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 80174ce:	6860      	ldr	r0, [r4, #4]
 80174d0:	6803      	ldr	r3, [r0, #0]
 80174d2:	695b      	ldr	r3, [r3, #20]
 80174d4:	4798      	blx	r3
 80174d6:	7225      	strb	r5, [r4, #8]
 80174d8:	6860      	ldr	r0, [r4, #4]
 80174da:	6803      	ldr	r3, [r0, #0]
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	4798      	blx	r3
 80174e0:	b928      	cbnz	r0, 80174ee <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 80174e2:	6823      	ldr	r3, [r4, #0]
 80174e4:	4620      	mov	r0, r4
 80174e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174ec:	4718      	bx	r3
 80174ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80174f2:	f7fc bb1b 	b.w	8013b2c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

080174f8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 80174f8:	b510      	push	{r4, lr}
 80174fa:	6082      	str	r2, [r0, #8]
 80174fc:	2200      	movs	r2, #0
 80174fe:	4c03      	ldr	r4, [pc, #12]	; (801750c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8017500:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017504:	e9c0 4100 	strd	r4, r1, [r0]
 8017508:	bd10      	pop	{r4, pc}
 801750a:	bf00      	nop
 801750c:	08030438 	.word	0x08030438

08017510 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8017510:	6840      	ldr	r0, [r0, #4]
 8017512:	6803      	ldr	r3, [r0, #0]
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	4718      	bx	r3

08017518 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh>:
 8017518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801751c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8017520:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8017524:	68c1      	ldr	r1, [r0, #12]
 8017526:	f9bd c024 	ldrsh.w	ip, [sp, #36]	; 0x24
 801752a:	2fff      	cmp	r7, #255	; 0xff
 801752c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8017530:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8017534:	ea41 6107 	orr.w	r1, r1, r7, lsl #24
 8017538:	d105      	bne.n	8017546 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 801753a:	f842 1b04 	str.w	r1, [r2], #4
 801753e:	4594      	cmp	ip, r2
 8017540:	d8fb      	bhi.n	801753a <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x22>
 8017542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017546:	6816      	ldr	r6, [r2, #0]
 8017548:	ea5f 6916 	movs.w	r9, r6, lsr #24
 801754c:	d104      	bne.n	8017558 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x40>
 801754e:	6011      	str	r1, [r2, #0]
 8017550:	3204      	adds	r2, #4
 8017552:	4594      	cmp	ip, r2
 8017554:	d8f7      	bhi.n	8017546 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2e>
 8017556:	e7f4      	b.n	8017542 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x2a>
 8017558:	2f00      	cmp	r7, #0
 801755a:	d0f9      	beq.n	8017550 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>
 801755c:	fb07 f809 	mul.w	r8, r7, r9
 8017560:	b2f5      	uxtb	r5, r6
 8017562:	f3c6 2407 	ubfx	r4, r6, #8, #8
 8017566:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801756a:	f108 0301 	add.w	r3, r8, #1
 801756e:	fb09 fa05 	mul.w	sl, r9, r5
 8017572:	eb03 2328 	add.w	r3, r3, r8, asr #8
 8017576:	ea4f 2823 	mov.w	r8, r3, asr #8
 801757a:	eb07 0309 	add.w	r3, r7, r9
 801757e:	eba3 0308 	sub.w	r3, r3, r8
 8017582:	fa5f fe83 	uxtb.w	lr, r3
 8017586:	7c83      	ldrb	r3, [r0, #18]
 8017588:	fb03 a307 	mla	r3, r3, r7, sl
 801758c:	fb04 fa09 	mul.w	sl, r4, r9
 8017590:	fb08 3515 	mls	r5, r8, r5, r3
 8017594:	7c43      	ldrb	r3, [r0, #17]
 8017596:	fb03 a307 	mla	r3, r3, r7, sl
 801759a:	fb95 f5fe 	sdiv	r5, r5, lr
 801759e:	fb08 3414 	mls	r4, r8, r4, r3
 80175a2:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
 80175a6:	fb06 f309 	mul.w	r3, r6, r9
 80175aa:	fb94 f4fe 	sdiv	r4, r4, lr
 80175ae:	ea45 2404 	orr.w	r4, r5, r4, lsl #8
 80175b2:	7c05      	ldrb	r5, [r0, #16]
 80175b4:	fb05 3307 	mla	r3, r5, r7, r3
 80175b8:	fb08 3316 	mls	r3, r8, r6, r3
 80175bc:	fb93 f3fe 	sdiv	r3, r3, lr
 80175c0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80175c4:	6013      	str	r3, [r2, #0]
 80175c6:	e7c3      	b.n	8017550 <_ZNK8touchgfx15PainterARGB88885paintEPhssssh+0x38>

080175c8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
 80175c8:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 80175cc:	4770      	bx	lr

080175ce <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:
 80175ce:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80175d2:	4770      	bx	lr

080175d4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
 80175d4:	b510      	push	{r4, lr}
 80175d6:	2200      	movs	r2, #0
 80175d8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80175dc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80175e0:	8002      	strh	r2, [r0, #0]
 80175e2:	8042      	strh	r2, [r0, #2]
 80175e4:	8084      	strh	r4, [r0, #4]
 80175e6:	80c1      	strh	r1, [r0, #6]
 80175e8:	bd10      	pop	{r4, pc}

080175ea <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
 80175ea:	2200      	movs	r2, #0
 80175ec:	8002      	strh	r2, [r0, #0]
 80175ee:	8042      	strh	r2, [r0, #2]
 80175f0:	8082      	strh	r2, [r0, #4]
 80175f2:	80c2      	strh	r2, [r0, #6]
 80175f4:	4770      	bx	lr
	...

080175f8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80175f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80175fa:	6803      	ldr	r3, [r0, #0]
 80175fc:	460d      	mov	r5, r1
 80175fe:	4604      	mov	r4, r0
 8017600:	4601      	mov	r1, r0
 8017602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8017604:	a802      	add	r0, sp, #8
 8017606:	4798      	blx	r3
 8017608:	6828      	ldr	r0, [r5, #0]
 801760a:	6869      	ldr	r1, [r5, #4]
 801760c:	466b      	mov	r3, sp
 801760e:	c303      	stmia	r3!, {r0, r1}
 8017610:	4668      	mov	r0, sp
 8017612:	4619      	mov	r1, r3
 8017614:	f7fe ff6e 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 8017618:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 801761a:	b1a8      	cbz	r0, 8017648 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801761c:	6803      	ldr	r3, [r0, #0]
 801761e:	1d21      	adds	r1, r4, #4
 8017620:	68db      	ldr	r3, [r3, #12]
 8017622:	4798      	blx	r3
 8017624:	b180      	cbz	r0, 8017648 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8017626:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801762a:	2b00      	cmp	r3, #0
 801762c:	dd0c      	ble.n	8017648 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 801762e:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8017632:	2d00      	cmp	r5, #0
 8017634:	dd08      	ble.n	8017648 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x50>
 8017636:	4a2d      	ldr	r2, [pc, #180]	; (80176ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xf4>)
 8017638:	7812      	ldrb	r2, [r2, #0]
 801763a:	b13a      	cbz	r2, 801764c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x54>
 801763c:	2a01      	cmp	r2, #1
 801763e:	d02d      	beq.n	801769c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa4>
 8017640:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8017642:	6803      	ldr	r3, [r0, #0]
 8017644:	691b      	ldr	r3, [r3, #16]
 8017646:	4798      	blx	r3
 8017648:	b004      	add	sp, #16
 801764a:	bd70      	pop	{r4, r5, r6, pc}
 801764c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017650:	441d      	add	r5, r3
 8017652:	b2ad      	uxth	r5, r5
 8017654:	b22e      	sxth	r6, r5
 8017656:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801765a:	42b3      	cmp	r3, r6
 801765c:	daf0      	bge.n	8017640 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801765e:	6823      	ldr	r3, [r4, #0]
 8017660:	4669      	mov	r1, sp
 8017662:	4620      	mov	r0, r4
 8017664:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017666:	4798      	blx	r3
 8017668:	b940      	cbnz	r0, 801767c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 801766a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801766e:	2b01      	cmp	r3, #1
 8017670:	d004      	beq.n	801767c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x84>
 8017672:	3301      	adds	r3, #1
 8017674:	105b      	asrs	r3, r3, #1
 8017676:	f8ad 3006 	strh.w	r3, [sp, #6]
 801767a:	e7f0      	b.n	801765e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x66>
 801767c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017680:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8017684:	4413      	add	r3, r2
 8017686:	b29b      	uxth	r3, r3
 8017688:	441a      	add	r2, r3
 801768a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801768e:	b212      	sxth	r2, r2
 8017690:	4296      	cmp	r6, r2
 8017692:	dae0      	bge.n	8017656 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8017694:	1aeb      	subs	r3, r5, r3
 8017696:	f8ad 3006 	strh.w	r3, [sp, #6]
 801769a:	e7dc      	b.n	8017656 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801769c:	f8bd 5000 	ldrh.w	r5, [sp]
 80176a0:	441d      	add	r5, r3
 80176a2:	b2ad      	uxth	r5, r5
 80176a4:	b22e      	sxth	r6, r5
 80176a6:	f9bd 3000 	ldrsh.w	r3, [sp]
 80176aa:	42b3      	cmp	r3, r6
 80176ac:	dac8      	bge.n	8017640 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80176ae:	6823      	ldr	r3, [r4, #0]
 80176b0:	4669      	mov	r1, sp
 80176b2:	4620      	mov	r0, r4
 80176b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80176b6:	4798      	blx	r3
 80176b8:	b940      	cbnz	r0, 80176cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80176ba:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80176be:	2b01      	cmp	r3, #1
 80176c0:	d004      	beq.n	80176cc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xd4>
 80176c2:	3301      	adds	r3, #1
 80176c4:	105b      	asrs	r3, r3, #1
 80176c6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80176ca:	e7f0      	b.n	80176ae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xb6>
 80176cc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80176d0:	f8bd 3000 	ldrh.w	r3, [sp]
 80176d4:	4413      	add	r3, r2
 80176d6:	b29b      	uxth	r3, r3
 80176d8:	441a      	add	r2, r3
 80176da:	f8ad 3000 	strh.w	r3, [sp]
 80176de:	b212      	sxth	r2, r2
 80176e0:	4296      	cmp	r6, r2
 80176e2:	dae0      	bge.n	80176a6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80176e4:	1aeb      	subs	r3, r5, r3
 80176e6:	f8ad 3004 	strh.w	r3, [sp, #4]
 80176ea:	e7dc      	b.n	80176a6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80176ec:	2003c2b4 	.word	0x2003c2b4

080176f0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80176f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80176f2:	6803      	ldr	r3, [r0, #0]
 80176f4:	4604      	mov	r4, r0
 80176f6:	4601      	mov	r1, r0
 80176f8:	4668      	mov	r0, sp
 80176fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80176fc:	4798      	blx	r3
 80176fe:	2100      	movs	r1, #0
 8017700:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8017704:	4668      	mov	r0, sp
 8017706:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801770a:	9102      	str	r1, [sp, #8]
 801770c:	a902      	add	r1, sp, #8
 801770e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8017712:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017716:	f7fe feed 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801771a:	6823      	ldr	r3, [r4, #0]
 801771c:	4669      	mov	r1, sp
 801771e:	4620      	mov	r0, r4
 8017720:	691b      	ldr	r3, [r3, #16]
 8017722:	4798      	blx	r3
 8017724:	b004      	add	sp, #16
 8017726:	bd10      	pop	{r4, pc}

08017728 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8017728:	2101      	movs	r1, #1
 801772a:	2200      	movs	r2, #0
 801772c:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
 8017730:	490a      	ldr	r1, [pc, #40]	; (801775c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8017732:	8082      	strh	r2, [r0, #4]
 8017734:	6001      	str	r1, [r0, #0]
 8017736:	21ff      	movs	r1, #255	; 0xff
 8017738:	80c2      	strh	r2, [r0, #6]
 801773a:	8102      	strh	r2, [r0, #8]
 801773c:	8142      	strh	r2, [r0, #10]
 801773e:	8182      	strh	r2, [r0, #12]
 8017740:	81c2      	strh	r2, [r0, #14]
 8017742:	8202      	strh	r2, [r0, #16]
 8017744:	8242      	strh	r2, [r0, #18]
 8017746:	61c2      	str	r2, [r0, #28]
 8017748:	8402      	strh	r2, [r0, #32]
 801774a:	8442      	strh	r2, [r0, #34]	; 0x22
 801774c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8017750:	f880 1026 	strb.w	r1, [r0, #38]	; 0x26
 8017754:	6282      	str	r2, [r0, #40]	; 0x28
 8017756:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801775a:	4770      	bx	lr
 801775c:	08030494 	.word	0x08030494

08017760 <_ZNK8touchgfx4Line14getMinimalRectEv>:
 8017760:	f101 0364 	add.w	r3, r1, #100	; 0x64
 8017764:	4602      	mov	r2, r0
 8017766:	cb03      	ldmia	r3!, {r0, r1}
 8017768:	6010      	str	r0, [r2, #0]
 801776a:	4610      	mov	r0, r2
 801776c:	6051      	str	r1, [r2, #4]
 801776e:	4770      	bx	lr

08017770 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8017770:	b507      	push	{r0, r1, r2, lr}
 8017772:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017776:	ab01      	add	r3, sp, #4
 8017778:	6809      	ldr	r1, [r1, #0]
 801777a:	6800      	ldr	r0, [r0, #0]
 801777c:	f004 fd5b 	bl	801c236 <_ZN8touchgfx6muldivElllRl>
 8017780:	b003      	add	sp, #12
 8017782:	f85d fb04 	ldr.w	pc, [sp], #4

08017786 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>:
 8017786:	6800      	ldr	r0, [r0, #0]
 8017788:	2800      	cmp	r0, #0
 801778a:	bfb9      	ittee	lt
 801778c:	2320      	movlt	r3, #32
 801778e:	fb90 f0f3 	sdivlt	r0, r0, r3
 8017792:	301f      	addge	r0, #31
 8017794:	1140      	asrge	r0, r0, #5
 8017796:	4770      	bx	lr

08017798 <_ZNK8touchgfx4Line17invalidateContentEv>:
 8017798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801779c:	f890 3026 	ldrb.w	r3, [r0, #38]	; 0x26
 80177a0:	b089      	sub	sp, #36	; 0x24
 80177a2:	4604      	mov	r4, r0
 80177a4:	b353      	cbz	r3, 80177fc <_ZNK8touchgfx4Line17invalidateContentEv+0x64>
 80177a6:	6803      	ldr	r3, [r0, #0]
 80177a8:	4601      	mov	r1, r0
 80177aa:	a802      	add	r0, sp, #8
 80177ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80177ae:	4798      	blx	r3
 80177b0:	2220      	movs	r2, #32
 80177b2:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
 80177b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80177b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80177ba:	f8d4 b000 	ldr.w	fp, [r4]
 80177be:	fb9a f0f2 	sdiv	r0, sl, r2
 80177c2:	fb91 f5f2 	sdiv	r5, r1, r2
 80177c6:	fb93 f6f2 	sdiv	r6, r3, r2
 80177ca:	1b40      	subs	r0, r0, r5
 80177cc:	0076      	lsls	r6, r6, #1
 80177ce:	2800      	cmp	r0, #0
 80177d0:	bfb8      	it	lt
 80177d2:	4240      	neglt	r0, r0
 80177d4:	4286      	cmp	r6, r0
 80177d6:	dc0c      	bgt.n	80177f2 <_ZNK8touchgfx4Line17invalidateContentEv+0x5a>
 80177d8:	6b25      	ldr	r5, [r4, #48]	; 0x30
 80177da:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
 80177de:	fb95 f0f2 	sdiv	r0, r5, r2
 80177e2:	fb98 f7f2 	sdiv	r7, r8, r2
 80177e6:	1bc0      	subs	r0, r0, r7
 80177e8:	2800      	cmp	r0, #0
 80177ea:	bfb8      	it	lt
 80177ec:	4240      	neglt	r0, r0
 80177ee:	4286      	cmp	r6, r0
 80177f0:	dd07      	ble.n	8017802 <_ZNK8touchgfx4Line17invalidateContentEv+0x6a>
 80177f2:	f8db 3010 	ldr.w	r3, [fp, #16]
 80177f6:	a902      	add	r1, sp, #8
 80177f8:	4620      	mov	r0, r4
 80177fa:	4798      	blx	r3
 80177fc:	b009      	add	sp, #36	; 0x24
 80177fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017802:	eb01 060a 	add.w	r6, r1, sl
 8017806:	2002      	movs	r0, #2
 8017808:	eb08 0705 	add.w	r7, r8, r5
 801780c:	3301      	adds	r3, #1
 801780e:	f10d 0920 	add.w	r9, sp, #32
 8017812:	9101      	str	r1, [sp, #4]
 8017814:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017818:	fb96 f6f0 	sdiv	r6, r6, r0
 801781c:	fb97 f7f0 	sdiv	r7, r7, r0
 8017820:	4103      	asrs	r3, r0
 8017822:	b236      	sxth	r6, r6
 8017824:	b23f      	sxth	r7, r7
 8017826:	f849 3d08 	str.w	r3, [r9, #-8]!
 801782a:	4648      	mov	r0, r9
 801782c:	fb96 f6f2 	sdiv	r6, r6, r2
 8017830:	fb97 f7f2 	sdiv	r7, r7, r2
 8017834:	f7ff ffa7 	bl	8017786 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017838:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801783c:	f9bd 200e 	ldrsh.w	r2, [sp, #14]
 8017840:	fa1f fe87 	uxth.w	lr, r7
 8017844:	9901      	ldr	r1, [sp, #4]
 8017846:	fa1f fc86 	uxth.w	ip, r6
 801784a:	4293      	cmp	r3, r2
 801784c:	b280      	uxth	r0, r0
 801784e:	eba1 0a0a 	sub.w	sl, r1, sl
 8017852:	da54      	bge.n	80178fe <_ZNK8touchgfx4Line17invalidateContentEv+0x166>
 8017854:	ebac 0100 	sub.w	r1, ip, r0
 8017858:	f1ba 0f00 	cmp.w	sl, #0
 801785c:	4460      	add	r0, ip
 801785e:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 8017862:	b289      	uxth	r1, r1
 8017864:	f9bd c00a 	ldrsh.w	ip, [sp, #10]
 8017868:	b280      	uxth	r0, r0
 801786a:	b20e      	sxth	r6, r1
 801786c:	da29      	bge.n	80178c2 <_ZNK8touchgfx4Line17invalidateContentEv+0x12a>
 801786e:	eba8 0505 	sub.w	r5, r8, r5
 8017872:	2d00      	cmp	r5, #0
 8017874:	da2a      	bge.n	80178cc <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 8017876:	fa1f f88a 	uxth.w	r8, sl
 801787a:	f8ad a010 	strh.w	sl, [sp, #16]
 801787e:	fa1f f58c 	uxth.w	r5, ip
 8017882:	f8ad c012 	strh.w	ip, [sp, #18]
 8017886:	eba0 0008 	sub.w	r0, r0, r8
 801788a:	4443      	add	r3, r8
 801788c:	f8ad 6018 	strh.w	r6, [sp, #24]
 8017890:	f8ad 0014 	strh.w	r0, [sp, #20]
 8017894:	1a59      	subs	r1, r3, r1
 8017896:	ebae 0005 	sub.w	r0, lr, r5
 801789a:	f8ad 701a 	strh.w	r7, [sp, #26]
 801789e:	f8ad 101c 	strh.w	r1, [sp, #28]
 80178a2:	f8ad 0016 	strh.w	r0, [sp, #22]
 80178a6:	442a      	add	r2, r5
 80178a8:	eba2 0e0e 	sub.w	lr, r2, lr
 80178ac:	f8ad e01e 	strh.w	lr, [sp, #30]
 80178b0:	f8db 3010 	ldr.w	r3, [fp, #16]
 80178b4:	a904      	add	r1, sp, #16
 80178b6:	4620      	mov	r0, r4
 80178b8:	4798      	blx	r3
 80178ba:	6823      	ldr	r3, [r4, #0]
 80178bc:	4649      	mov	r1, r9
 80178be:	691b      	ldr	r3, [r3, #16]
 80178c0:	e79a      	b.n	80177f8 <_ZNK8touchgfx4Line17invalidateContentEv+0x60>
 80178c2:	d003      	beq.n	80178cc <_ZNK8touchgfx4Line17invalidateContentEv+0x134>
 80178c4:	eba8 0505 	sub.w	r5, r8, r5
 80178c8:	2d00      	cmp	r5, #0
 80178ca:	dcd4      	bgt.n	8017876 <_ZNK8touchgfx4Line17invalidateContentEv+0xde>
 80178cc:	fa1f f88a 	uxth.w	r8, sl
 80178d0:	f8ad 6010 	strh.w	r6, [sp, #16]
 80178d4:	fa1f f58c 	uxth.w	r5, ip
 80178d8:	f8ad c012 	strh.w	ip, [sp, #18]
 80178dc:	4443      	add	r3, r8
 80178de:	eba0 0008 	sub.w	r0, r0, r8
 80178e2:	f8ad a018 	strh.w	sl, [sp, #24]
 80178e6:	1a59      	subs	r1, r3, r1
 80178e8:	ebae 0305 	sub.w	r3, lr, r5
 80178ec:	f8ad 701a 	strh.w	r7, [sp, #26]
 80178f0:	f8ad 1014 	strh.w	r1, [sp, #20]
 80178f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80178f8:	f8ad 001c 	strh.w	r0, [sp, #28]
 80178fc:	e7d3      	b.n	80178a6 <_ZNK8touchgfx4Line17invalidateContentEv+0x10e>
 80178fe:	ebae 0100 	sub.w	r1, lr, r0
 8017902:	f1ba 0f00 	cmp.w	sl, #0
 8017906:	4470      	add	r0, lr
 8017908:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 801790c:	b289      	uxth	r1, r1
 801790e:	f9bd e008 	ldrsh.w	lr, [sp, #8]
 8017912:	b280      	uxth	r0, r0
 8017914:	b20f      	sxth	r7, r1
 8017916:	da20      	bge.n	801795a <_ZNK8touchgfx4Line17invalidateContentEv+0x1c2>
 8017918:	eba8 0505 	sub.w	r5, r8, r5
 801791c:	2d00      	cmp	r5, #0
 801791e:	da21      	bge.n	8017964 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 8017920:	fa1f f88e 	uxth.w	r8, lr
 8017924:	f8ad e010 	strh.w	lr, [sp, #16]
 8017928:	fa1f f58a 	uxth.w	r5, sl
 801792c:	f8ad a012 	strh.w	sl, [sp, #18]
 8017930:	4443      	add	r3, r8
 8017932:	ebac 0e08 	sub.w	lr, ip, r8
 8017936:	442a      	add	r2, r5
 8017938:	1b40      	subs	r0, r0, r5
 801793a:	eba3 0c0c 	sub.w	ip, r3, ip
 801793e:	f8ad e014 	strh.w	lr, [sp, #20]
 8017942:	1a51      	subs	r1, r2, r1
 8017944:	f8ad 0016 	strh.w	r0, [sp, #22]
 8017948:	f8ad 6018 	strh.w	r6, [sp, #24]
 801794c:	f8ad 701a 	strh.w	r7, [sp, #26]
 8017950:	f8ad c01c 	strh.w	ip, [sp, #28]
 8017954:	f8ad 101e 	strh.w	r1, [sp, #30]
 8017958:	e7aa      	b.n	80178b0 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>
 801795a:	d003      	beq.n	8017964 <_ZNK8touchgfx4Line17invalidateContentEv+0x1cc>
 801795c:	eba8 0505 	sub.w	r5, r8, r5
 8017960:	2d00      	cmp	r5, #0
 8017962:	dcdd      	bgt.n	8017920 <_ZNK8touchgfx4Line17invalidateContentEv+0x188>
 8017964:	fa1f f58e 	uxth.w	r5, lr
 8017968:	f8ad 7012 	strh.w	r7, [sp, #18]
 801796c:	fa1f f88a 	uxth.w	r8, sl
 8017970:	f8ad e010 	strh.w	lr, [sp, #16]
 8017974:	442b      	add	r3, r5
 8017976:	ebac 0705 	sub.w	r7, ip, r5
 801797a:	4442      	add	r2, r8
 801797c:	eba0 0008 	sub.w	r0, r0, r8
 8017980:	eba3 0c0c 	sub.w	ip, r3, ip
 8017984:	f8ad 7014 	strh.w	r7, [sp, #20]
 8017988:	1a51      	subs	r1, r2, r1
 801798a:	f8ad 6018 	strh.w	r6, [sp, #24]
 801798e:	f8ad a01a 	strh.w	sl, [sp, #26]
 8017992:	f8ad 1016 	strh.w	r1, [sp, #22]
 8017996:	f8ad c01c 	strh.w	ip, [sp, #28]
 801799a:	f8ad 001e 	strh.w	r0, [sp, #30]
 801799e:	e787      	b.n	80178b0 <_ZNK8touchgfx4Line17invalidateContentEv+0x118>

080179a0 <_ZN8touchgfx7CWRUtil4sineEi>:
 80179a0:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80179a4:	fb90 f2f3 	sdiv	r2, r0, r3
 80179a8:	fb02 0013 	mls	r0, r2, r3, r0
 80179ac:	2800      	cmp	r0, #0
 80179ae:	bfb8      	it	lt
 80179b0:	18c0      	addlt	r0, r0, r3
 80179b2:	4b0a      	ldr	r3, [pc, #40]	; (80179dc <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 80179b4:	285a      	cmp	r0, #90	; 0x5a
 80179b6:	dc02      	bgt.n	80179be <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 80179b8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80179bc:	4770      	bx	lr
 80179be:	28b4      	cmp	r0, #180	; 0xb4
 80179c0:	dc02      	bgt.n	80179c8 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 80179c2:	f1c0 00b4 	rsb	r0, r0, #180	; 0xb4
 80179c6:	e7f7      	b.n	80179b8 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 80179c8:	f5b0 7f87 	cmp.w	r0, #270	; 0x10e
 80179cc:	bfd4      	ite	le
 80179ce:	38b4      	suble	r0, #180	; 0xb4
 80179d0:	f5c0 70b4 	rsbgt	r0, r0, #360	; 0x168
 80179d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 80179d8:	4240      	negs	r0, r0
 80179da:	4770      	bx	lr
 80179dc:	08030570 	.word	0x08030570

080179e0 <_ZN8touchgfx7CWRUtil5isqrtEm>:
 80179e0:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80179e4:	f04f 0300 	mov.w	r3, #0
 80179e8:	bf2c      	ite	cs
 80179ea:	f04f 4280 	movcs.w	r2, #1073741824	; 0x40000000
 80179ee:	f44f 4280 	movcc.w	r2, #16384	; 0x4000
 80179f2:	1899      	adds	r1, r3, r2
 80179f4:	4288      	cmp	r0, r1
 80179f6:	bf24      	itt	cs
 80179f8:	1853      	addcs	r3, r2, r1
 80179fa:	1a40      	subcs	r0, r0, r1
 80179fc:	0892      	lsrs	r2, r2, #2
 80179fe:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8017a02:	d1f6      	bne.n	80179f2 <_ZN8touchgfx7CWRUtil5isqrtEm+0x12>
 8017a04:	4618      	mov	r0, r3
 8017a06:	4770      	bx	lr

08017a08 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>:
 8017a08:	b510      	push	{r4, lr}
 8017a0a:	ea80 73e0 	eor.w	r3, r0, r0, asr #31
 8017a0e:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 8017a12:	eba3 73e0 	sub.w	r3, r3, r0, asr #31
 8017a16:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
 8017a1a:	139b      	asrs	r3, r3, #14
 8017a1c:	13a4      	asrs	r4, r4, #14
 8017a1e:	429c      	cmp	r4, r3
 8017a20:	bfb8      	it	lt
 8017a22:	461c      	movlt	r4, r3
 8017a24:	2c01      	cmp	r4, #1
 8017a26:	dd07      	ble.n	8017a38 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x30>
 8017a28:	fb91 f1f4 	sdiv	r1, r1, r4
 8017a2c:	fb90 f0f4 	sdiv	r0, r0, r4
 8017a30:	f7ff ffea 	bl	8017a08 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8017a34:	4360      	muls	r0, r4
 8017a36:	bd10      	pop	{r4, pc}
 8017a38:	4340      	muls	r0, r0
 8017a3a:	fb01 0001 	mla	r0, r1, r1, r0
 8017a3e:	f7ff ffcf 	bl	80179e0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017a42:	e7f8      	b.n	8017a36 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_+0x2e>

08017a44 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>:
 8017a44:	2800      	cmp	r0, #0
 8017a46:	b508      	push	{r3, lr}
 8017a48:	da05      	bge.n	8017a56 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x12>
 8017a4a:	4240      	negs	r0, r0
 8017a4c:	f7ff fffa 	bl	8017a44 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017a50:	4240      	negs	r0, r0
 8017a52:	b240      	sxtb	r0, r0
 8017a54:	bd08      	pop	{r3, pc}
 8017a56:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8017a5a:	dc11      	bgt.n	8017a80 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x3c>
 8017a5c:	f5b0 7f35 	cmp.w	r0, #724	; 0x2d4
 8017a60:	dd09      	ble.n	8017a76 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x32>
 8017a62:	4340      	muls	r0, r0
 8017a64:	f5c0 1080 	rsb	r0, r0, #1048576	; 0x100000
 8017a68:	f7ff ffba 	bl	80179e0 <_ZN8touchgfx7CWRUtil5isqrtEm>
 8017a6c:	f7ff ffea 	bl	8017a44 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017a70:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017a74:	e7ed      	b.n	8017a52 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0xe>
 8017a76:	3003      	adds	r0, #3
 8017a78:	4b02      	ldr	r3, [pc, #8]	; (8017a84 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x40>)
 8017a7a:	10c0      	asrs	r0, r0, #3
 8017a7c:	5618      	ldrsb	r0, [r3, r0]
 8017a7e:	e7e9      	b.n	8017a54 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017a80:	2000      	movs	r0, #0
 8017a82:	e7e7      	b.n	8017a54 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E+0x10>
 8017a84:	08030514 	.word	0x08030514

08017a88 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>:
 8017a88:	4281      	cmp	r1, r0
 8017a8a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017a8c:	460c      	mov	r4, r1
 8017a8e:	4615      	mov	r5, r2
 8017a90:	dd07      	ble.n	8017aa2 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x1a>
 8017a92:	4601      	mov	r1, r0
 8017a94:	4620      	mov	r0, r4
 8017a96:	f7ff fff7 	bl	8017a88 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017a9a:	f1c0 005a 	rsb	r0, r0, #90	; 0x5a
 8017a9e:	b003      	add	sp, #12
 8017aa0:	bd30      	pop	{r4, r5, pc}
 8017aa2:	f7ff ffb1 	bl	8017a08 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8017aa6:	6028      	str	r0, [r5, #0]
 8017aa8:	2800      	cmp	r0, #0
 8017aaa:	d0f8      	beq.n	8017a9e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>
 8017aac:	4602      	mov	r2, r0
 8017aae:	ab01      	add	r3, sp, #4
 8017ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8017ab4:	4620      	mov	r0, r4
 8017ab6:	f004 fbbe 	bl	801c236 <_ZN8touchgfx6muldivElllRl>
 8017aba:	f7ff ffc3 	bl	8017a44 <_ZN8touchgfx7CWRUtil7arcsineENS0_3Q10E>
 8017abe:	e7ee      	b.n	8017a9e <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_+0x16>

08017ac0 <_ZN8touchgfx4LineC1Ev>:
 8017ac0:	b510      	push	{r4, lr}
 8017ac2:	4604      	mov	r4, r0
 8017ac4:	f7ff fe30 	bl	8017728 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8017ac8:	4b0c      	ldr	r3, [pc, #48]	; (8017afc <_ZN8touchgfx4LineC1Ev+0x3c>)
 8017aca:	2220      	movs	r2, #32
 8017acc:	4620      	mov	r0, r4
 8017ace:	6023      	str	r3, [r4, #0]
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	63e2      	str	r2, [r4, #60]	; 0x3c
 8017ad4:	2212      	movs	r2, #18
 8017ad6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8017ada:	66e2      	str	r2, [r4, #108]	; 0x6c
 8017adc:	60a3      	str	r3, [r4, #8]
 8017ade:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
 8017ae2:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 8017ae6:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
 8017aea:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
 8017aee:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
 8017af2:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
 8017af6:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
 8017afa:	bd10      	pop	{r4, pc}
 8017afc:	08030630 	.word	0x08030630

08017b00 <_ZN8touchgfx4Line17updateCachedShapeEv>:
 8017b00:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8017b04:	6b47      	ldr	r7, [r0, #52]	; 0x34
 8017b06:	4604      	mov	r4, r0
 8017b08:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017b0a:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8017b0c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8017b0e:	1aff      	subs	r7, r7, r3
 8017b10:	eba5 0502 	sub.w	r5, r5, r2
 8017b14:	d142      	bne.n	8017b9c <_ZN8touchgfx4Line17updateCachedShapeEv+0x9c>
 8017b16:	b955      	cbnz	r5, 8017b2e <_ZN8touchgfx4Line17updateCachedShapeEv+0x2e>
 8017b18:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
 8017b1c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
 8017b20:	e9c0 2217 	strd	r2, r2, [r0, #92]	; 0x5c
 8017b24:	e9c0 2215 	strd	r2, r2, [r0, #84]	; 0x54
 8017b28:	b002      	add	sp, #8
 8017b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b2e:	ea85 78e5 	eor.w	r8, r5, r5, asr #31
 8017b32:	eba8 78e5 	sub.w	r8, r8, r5, asr #31
 8017b36:	4629      	mov	r1, r5
 8017b38:	2502      	movs	r5, #2
 8017b3a:	4642      	mov	r2, r8
 8017b3c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017b3e:	f004 fb99 	bl	801c274 <_ZN8touchgfx6muldivElll>
 8017b42:	4642      	mov	r2, r8
 8017b44:	4639      	mov	r1, r7
 8017b46:	fb90 f6f5 	sdiv	r6, r0, r5
 8017b4a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8017b4c:	f004 fb92 	bl	801c274 <_ZN8touchgfx6muldivElll>
 8017b50:	f894 9040 	ldrb.w	r9, [r4, #64]	; 0x40
 8017b54:	fb90 f5f5 	sdiv	r5, r0, r5
 8017b58:	f1b9 0f00 	cmp.w	r9, #0
 8017b5c:	d067      	beq.n	8017c2e <_ZN8touchgfx4Line17updateCachedShapeEv+0x12e>
 8017b5e:	f1b9 0f02 	cmp.w	r9, #2
 8017b62:	d878      	bhi.n	8017c56 <_ZN8touchgfx4Line17updateCachedShapeEv+0x156>
 8017b64:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017b66:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8017b68:	1b93      	subs	r3, r2, r6
 8017b6a:	4432      	add	r2, r6
 8017b6c:	1b5b      	subs	r3, r3, r5
 8017b6e:	1b52      	subs	r2, r2, r5
 8017b70:	6463      	str	r3, [r4, #68]	; 0x44
 8017b72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017b74:	6522      	str	r2, [r4, #80]	; 0x50
 8017b76:	18e9      	adds	r1, r5, r3
 8017b78:	1b5b      	subs	r3, r3, r5
 8017b7a:	1b89      	subs	r1, r1, r6
 8017b7c:	1b9b      	subs	r3, r3, r6
 8017b7e:	6561      	str	r1, [r4, #84]	; 0x54
 8017b80:	1b81      	subs	r1, r0, r6
 8017b82:	4430      	add	r0, r6
 8017b84:	4429      	add	r1, r5
 8017b86:	4428      	add	r0, r5
 8017b88:	64a1      	str	r1, [r4, #72]	; 0x48
 8017b8a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017b8c:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017b8e:	186f      	adds	r7, r5, r1
 8017b90:	1b49      	subs	r1, r1, r5
 8017b92:	4437      	add	r7, r6
 8017b94:	4431      	add	r1, r6
 8017b96:	65a7      	str	r7, [r4, #88]	; 0x58
 8017b98:	65e1      	str	r1, [r4, #92]	; 0x5c
 8017b9a:	e05b      	b.n	8017c54 <_ZN8touchgfx4Line17updateCachedShapeEv+0x154>
 8017b9c:	ea87 78e7 	eor.w	r8, r7, r7, asr #31
 8017ba0:	eba8 78e7 	sub.w	r8, r8, r7, asr #31
 8017ba4:	2d00      	cmp	r5, #0
 8017ba6:	d0c6      	beq.n	8017b36 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8017ba8:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8017bac:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 8017bb0:	fb93 f2f8 	sdiv	r2, r3, r8
 8017bb4:	fb08 3312 	mls	r3, r8, r2, r3
 8017bb8:	b353      	cbz	r3, 8017c10 <_ZN8touchgfx4Line17updateCachedShapeEv+0x110>
 8017bba:	fb98 f2f3 	sdiv	r2, r8, r3
 8017bbe:	fb03 8812 	mls	r8, r3, r2, r8
 8017bc2:	f1b8 0f00 	cmp.w	r8, #0
 8017bc6:	d1f3      	bne.n	8017bb0 <_ZN8touchgfx4Line17updateCachedShapeEv+0xb0>
 8017bc8:	2b01      	cmp	r3, #1
 8017bca:	f24b 5104 	movw	r1, #46340	; 0xb504
 8017bce:	bf1c      	itt	ne
 8017bd0:	fb97 f7f3 	sdivne	r7, r7, r3
 8017bd4:	fb95 f5f3 	sdivne	r5, r5, r3
 8017bd8:	ea87 73e7 	eor.w	r3, r7, r7, asr #31
 8017bdc:	4608      	mov	r0, r1
 8017bde:	ea85 72e5 	eor.w	r2, r5, r5, asr #31
 8017be2:	eba3 73e7 	sub.w	r3, r3, r7, asr #31
 8017be6:	eba2 72e5 	sub.w	r2, r2, r5, asr #31
 8017bea:	428b      	cmp	r3, r1
 8017bec:	dd01      	ble.n	8017bf2 <_ZN8touchgfx4Line17updateCachedShapeEv+0xf2>
 8017bee:	428a      	cmp	r2, r1
 8017bf0:	dc10      	bgt.n	8017c14 <_ZN8touchgfx4Line17updateCachedShapeEv+0x114>
 8017bf2:	fb90 f3f3 	sdiv	r3, r0, r3
 8017bf6:	fb90 f2f2 	sdiv	r2, r0, r2
 8017bfa:	4293      	cmp	r3, r2
 8017bfc:	bfa8      	it	ge
 8017bfe:	4613      	movge	r3, r2
 8017c00:	435f      	muls	r7, r3
 8017c02:	435d      	muls	r5, r3
 8017c04:	4629      	mov	r1, r5
 8017c06:	4638      	mov	r0, r7
 8017c08:	f7ff fefe 	bl	8017a08 <_ZN8touchgfx7CWRUtil6lengthENS0_2Q5ES1_>
 8017c0c:	4680      	mov	r8, r0
 8017c0e:	e792      	b.n	8017b36 <_ZN8touchgfx4Line17updateCachedShapeEv+0x36>
 8017c10:	4643      	mov	r3, r8
 8017c12:	e7d9      	b.n	8017bc8 <_ZN8touchgfx4Line17updateCachedShapeEv+0xc8>
 8017c14:	fb93 f3f1 	sdiv	r3, r3, r1
 8017c18:	fb92 f2f1 	sdiv	r2, r2, r1
 8017c1c:	4293      	cmp	r3, r2
 8017c1e:	bfcc      	ite	gt
 8017c20:	3301      	addgt	r3, #1
 8017c22:	1c53      	addle	r3, r2, #1
 8017c24:	fb97 f7f3 	sdiv	r7, r7, r3
 8017c28:	fb95 f5f3 	sdiv	r5, r5, r3
 8017c2c:	e7ea      	b.n	8017c04 <_ZN8touchgfx4Line17updateCachedShapeEv+0x104>
 8017c2e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8017c30:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8017c32:	1b93      	subs	r3, r2, r6
 8017c34:	4432      	add	r2, r6
 8017c36:	6463      	str	r3, [r4, #68]	; 0x44
 8017c38:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017c3a:	6522      	str	r2, [r4, #80]	; 0x50
 8017c3c:	18e9      	adds	r1, r5, r3
 8017c3e:	1b5b      	subs	r3, r3, r5
 8017c40:	6561      	str	r1, [r4, #84]	; 0x54
 8017c42:	1b81      	subs	r1, r0, r6
 8017c44:	4430      	add	r0, r6
 8017c46:	64a1      	str	r1, [r4, #72]	; 0x48
 8017c48:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017c4a:	64e0      	str	r0, [r4, #76]	; 0x4c
 8017c4c:	186f      	adds	r7, r5, r1
 8017c4e:	1b49      	subs	r1, r1, r5
 8017c50:	65a7      	str	r7, [r4, #88]	; 0x58
 8017c52:	65e1      	str	r1, [r4, #92]	; 0x5c
 8017c54:	6623      	str	r3, [r4, #96]	; 0x60
 8017c56:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8017c58:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8017c5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8017c5e:	f104 0c54 	add.w	ip, r4, #84	; 0x54
 8017c62:	9200      	str	r2, [sp, #0]
 8017c64:	9301      	str	r3, [sp, #4]
 8017c66:	680f      	ldr	r7, [r1, #0]
 8017c68:	3104      	adds	r1, #4
 8017c6a:	9800      	ldr	r0, [sp, #0]
 8017c6c:	42ba      	cmp	r2, r7
 8017c6e:	bfa8      	it	ge
 8017c70:	463a      	movge	r2, r7
 8017c72:	4287      	cmp	r7, r0
 8017c74:	9801      	ldr	r0, [sp, #4]
 8017c76:	bfc8      	it	gt
 8017c78:	9700      	strgt	r7, [sp, #0]
 8017c7a:	68cf      	ldr	r7, [r1, #12]
 8017c7c:	42bb      	cmp	r3, r7
 8017c7e:	bfa8      	it	ge
 8017c80:	463b      	movge	r3, r7
 8017c82:	4287      	cmp	r7, r0
 8017c84:	bfc8      	it	gt
 8017c86:	9701      	strgt	r7, [sp, #4]
 8017c88:	458c      	cmp	ip, r1
 8017c8a:	d1ec      	bne.n	8017c66 <_ZN8touchgfx4Line17updateCachedShapeEv+0x166>
 8017c8c:	2720      	movs	r7, #32
 8017c8e:	4668      	mov	r0, sp
 8017c90:	fb92 f8f7 	sdiv	r8, r2, r7
 8017c94:	fb93 f7f7 	sdiv	r7, r3, r7
 8017c98:	f7ff fd75 	bl	8017786 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017c9c:	4682      	mov	sl, r0
 8017c9e:	a801      	add	r0, sp, #4
 8017ca0:	f7ff fd71 	bl	8017786 <_ZNK8touchgfx7CWRUtil2Q54ceilEv>
 8017ca4:	ebaa 0208 	sub.w	r2, sl, r8
 8017ca8:	1bc0      	subs	r0, r0, r7
 8017caa:	f1b9 0f01 	cmp.w	r9, #1
 8017cae:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
 8017cb2:	f8a4 7066 	strh.w	r7, [r4, #102]	; 0x66
 8017cb6:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
 8017cba:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 8017cbe:	f47f af33 	bne.w	8017b28 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>
 8017cc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017cc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017cc6:	1b83      	subs	r3, r0, r6
 8017cc8:	6463      	str	r3, [r4, #68]	; 0x44
 8017cca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017ccc:	18ea      	adds	r2, r5, r3
 8017cce:	6562      	str	r2, [r4, #84]	; 0x54
 8017cd0:	1b8a      	subs	r2, r1, r6
 8017cd2:	4431      	add	r1, r6
 8017cd4:	4406      	add	r6, r0
 8017cd6:	64a2      	str	r2, [r4, #72]	; 0x48
 8017cd8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017cda:	64e1      	str	r1, [r4, #76]	; 0x4c
 8017cdc:	18af      	adds	r7, r5, r2
 8017cde:	1b52      	subs	r2, r2, r5
 8017ce0:	1b5d      	subs	r5, r3, r5
 8017ce2:	6526      	str	r6, [r4, #80]	; 0x50
 8017ce4:	65a7      	str	r7, [r4, #88]	; 0x58
 8017ce6:	65e2      	str	r2, [r4, #92]	; 0x5c
 8017ce8:	6625      	str	r5, [r4, #96]	; 0x60
 8017cea:	e71d      	b.n	8017b28 <_ZN8touchgfx4Line17updateCachedShapeEv+0x28>

08017cec <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_>:
 8017cec:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8017cee:	428b      	cmp	r3, r1
 8017cf0:	d102      	bne.n	8017cf8 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0xc>
 8017cf2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017cf4:	4293      	cmp	r3, r2
 8017cf6:	d003      	beq.n	8017d00 <_ZN8touchgfx4Line8setStartENS_7CWRUtil2Q5ES2_+0x14>
 8017cf8:	e9c0 120b 	strd	r1, r2, [r0, #44]	; 0x2c
 8017cfc:	f7ff bf00 	b.w	8017b00 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017d00:	4770      	bx	lr

08017d02 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_>:
 8017d02:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8017d04:	428b      	cmp	r3, r1
 8017d06:	d102      	bne.n	8017d0e <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0xc>
 8017d08:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8017d0a:	4293      	cmp	r3, r2
 8017d0c:	d003      	beq.n	8017d16 <_ZN8touchgfx4Line6setEndENS_7CWRUtil2Q5ES2_+0x14>
 8017d0e:	e9c0 120d 	strd	r1, r2, [r0, #52]	; 0x34
 8017d12:	f7ff bef5 	b.w	8017b00 <_ZN8touchgfx4Line17updateCachedShapeEv>
 8017d16:	4770      	bx	lr

08017d18 <_ZN8touchgfx4Line18setLineEndingStyleENS0_17LINE_ENDING_STYLEE>:
 8017d18:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
 8017d1c:	f7ff bef0 	b.w	8017b00 <_ZN8touchgfx4Line17updateCachedShapeEv>

08017d20 <_ZN8touchgfx6CanvasD1Ev>:
 8017d20:	4b04      	ldr	r3, [pc, #16]	; (8017d34 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8017d22:	b510      	push	{r4, lr}
 8017d24:	4604      	mov	r4, r0
 8017d26:	f840 3b20 	str.w	r3, [r0], #32
 8017d2a:	f000 fdd0 	bl	80188ce <_ZN8touchgfx7OutlineD1Ev>
 8017d2e:	4620      	mov	r0, r4
 8017d30:	bd10      	pop	{r4, pc}
 8017d32:	bf00      	nop
 8017d34:	0803050c 	.word	0x0803050c

08017d38 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE>:
 8017d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017d3c:	b0a0      	sub	sp, #128	; 0x80
 8017d3e:	4604      	mov	r4, r0
 8017d40:	460a      	mov	r2, r1
 8017d42:	4601      	mov	r1, r0
 8017d44:	a804      	add	r0, sp, #16
 8017d46:	f011 fd31 	bl	80297ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>
 8017d4a:	2300      	movs	r3, #0
 8017d4c:	9301      	str	r3, [sp, #4]
 8017d4e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8017d52:	2b01      	cmp	r3, #1
 8017d54:	d17c      	bne.n	8017e50 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x118>
 8017d56:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8017d58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017d5a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8017d5c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017d5e:	1ac0      	subs	r0, r0, r3
 8017d60:	eba1 0102 	sub.w	r1, r1, r2
 8017d64:	d437      	bmi.n	8017dd6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x9e>
 8017d66:	2900      	cmp	r1, #0
 8017d68:	aa01      	add	r2, sp, #4
 8017d6a:	db2e      	blt.n	8017dca <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x92>
 8017d6c:	f7ff fe8c 	bl	8017a88 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017d70:	f100 065a 	add.w	r6, r0, #90	; 0x5a
 8017d74:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8017d76:	a804      	add	r0, sp, #16
 8017d78:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017d7a:	f011 feed 	bl	8029b58 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017d7e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017d80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017d82:	a804      	add	r0, sp, #16
 8017d84:	f011 fdc0 	bl	8029908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017d88:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8017d8a:	2db3      	cmp	r5, #179	; 0xb3
 8017d8c:	dc33      	bgt.n	8017df6 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xbe>
 8017d8e:	eba6 0805 	sub.w	r8, r6, r5
 8017d92:	4640      	mov	r0, r8
 8017d94:	f7ff fe04 	bl	80179a0 <_ZN8touchgfx7CWRUtil4sineEi>
 8017d98:	a902      	add	r1, sp, #8
 8017d9a:	9002      	str	r0, [sp, #8]
 8017d9c:	a801      	add	r0, sp, #4
 8017d9e:	f7ff fce7 	bl	8017770 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017da2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017da4:	1847      	adds	r7, r0, r1
 8017da6:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8017daa:	f7ff fdf9 	bl	80179a0 <_ZN8touchgfx7CWRUtil4sineEi>
 8017dae:	a903      	add	r1, sp, #12
 8017db0:	9003      	str	r0, [sp, #12]
 8017db2:	a801      	add	r0, sp, #4
 8017db4:	f7ff fcdc 	bl	8017770 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017db8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017dba:	4639      	mov	r1, r7
 8017dbc:	1a12      	subs	r2, r2, r0
 8017dbe:	a804      	add	r0, sp, #16
 8017dc0:	f011 fda2 	bl	8029908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017dc4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017dc6:	441d      	add	r5, r3
 8017dc8:	e7df      	b.n	8017d8a <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x52>
 8017dca:	4249      	negs	r1, r1
 8017dcc:	f7ff fe5c 	bl	8017a88 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017dd0:	f1c0 065a 	rsb	r6, r0, #90	; 0x5a
 8017dd4:	e7ce      	b.n	8017d74 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8017dd6:	2900      	cmp	r1, #0
 8017dd8:	f1c0 0000 	rsb	r0, r0, #0
 8017ddc:	aa01      	add	r2, sp, #4
 8017dde:	db04      	blt.n	8017dea <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xb2>
 8017de0:	f7ff fe52 	bl	8017a88 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017de4:	f5c0 7687 	rsb	r6, r0, #270	; 0x10e
 8017de8:	e7c4      	b.n	8017d74 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8017dea:	4249      	negs	r1, r1
 8017dec:	f7ff fe4c 	bl	8017a88 <_ZN8touchgfx7CWRUtil6_angleENS0_2Q5ES1_RS1_>
 8017df0:	f500 7687 	add.w	r6, r0, #270	; 0x10e
 8017df4:	e7be      	b.n	8017d74 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x3c>
 8017df6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017df8:	a804      	add	r0, sp, #16
 8017dfa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8017dfc:	f011 fd84 	bl	8029908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017e00:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8017e02:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017e04:	a804      	add	r0, sp, #16
 8017e06:	f011 fd7f 	bl	8029908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017e0a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
 8017e0c:	f1c5 05b4 	rsb	r5, r5, #180	; 0xb4
 8017e10:	2d00      	cmp	r5, #0
 8017e12:	dd31      	ble.n	8017e78 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0x140>
 8017e14:	eb05 0806 	add.w	r8, r5, r6
 8017e18:	4640      	mov	r0, r8
 8017e1a:	f7ff fdc1 	bl	80179a0 <_ZN8touchgfx7CWRUtil4sineEi>
 8017e1e:	a902      	add	r1, sp, #8
 8017e20:	9002      	str	r0, [sp, #8]
 8017e22:	a801      	add	r0, sp, #4
 8017e24:	f7ff fca4 	bl	8017770 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017e28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8017e2a:	1847      	adds	r7, r0, r1
 8017e2c:	f1c8 005a 	rsb	r0, r8, #90	; 0x5a
 8017e30:	f7ff fdb6 	bl	80179a0 <_ZN8touchgfx7CWRUtil4sineEi>
 8017e34:	a903      	add	r1, sp, #12
 8017e36:	9003      	str	r0, [sp, #12]
 8017e38:	a801      	add	r0, sp, #4
 8017e3a:	f7ff fc99 	bl	8017770 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8017e3e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8017e40:	4639      	mov	r1, r7
 8017e42:	1a12      	subs	r2, r2, r0
 8017e44:	a804      	add	r0, sp, #16
 8017e46:	f011 fd5f 	bl	8029908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017e4a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8017e4c:	1aed      	subs	r5, r5, r3
 8017e4e:	e7df      	b.n	8017e10 <_ZNK8touchgfx4Line16drawCanvasWidgetERKNS_4RectE+0xd8>
 8017e50:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8017e52:	a804      	add	r0, sp, #16
 8017e54:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8017e56:	f011 fe7f 	bl	8029b58 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8017e5a:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8017e5c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017e5e:	a804      	add	r0, sp, #16
 8017e60:	f011 fd52 	bl	8029908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017e64:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8017e66:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8017e68:	a804      	add	r0, sp, #16
 8017e6a:	f011 fd4d 	bl	8029908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017e6e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8017e70:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8017e72:	a804      	add	r0, sp, #16
 8017e74:	f011 fd48 	bl	8029908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8017e78:	21ff      	movs	r1, #255	; 0xff
 8017e7a:	a804      	add	r0, sp, #16
 8017e7c:	f011 fdc0 	bl	8029a00 <_ZN8touchgfx6Canvas6renderEh>
 8017e80:	4604      	mov	r4, r0
 8017e82:	a804      	add	r0, sp, #16
 8017e84:	f7ff ff4c 	bl	8017d20 <_ZN8touchgfx6CanvasD1Ev>
 8017e88:	4620      	mov	r0, r4
 8017e8a:	b020      	add	sp, #128	; 0x80
 8017e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017e90 <_ZN8touchgfx6CanvasD0Ev>:
 8017e90:	b510      	push	{r4, lr}
 8017e92:	4604      	mov	r4, r0
 8017e94:	f7ff ff44 	bl	8017d20 <_ZN8touchgfx6CanvasD1Ev>
 8017e98:	2170      	movs	r1, #112	; 0x70
 8017e9a:	4620      	mov	r0, r4
 8017e9c:	f011 feae 	bl	8029bfc <_ZdlPvj>
 8017ea0:	4620      	mov	r0, r4
 8017ea2:	bd10      	pop	{r4, pc}

08017ea4 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8017ea4:	2000      	movs	r0, #0
 8017ea6:	4770      	bx	lr

08017ea8 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8017ea8:	4b07      	ldr	r3, [pc, #28]	; (8017ec8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8017eaa:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8017eac:	881b      	ldrh	r3, [r3, #0]
 8017eae:	4293      	cmp	r3, r2
 8017eb0:	bf81      	itttt	hi
 8017eb2:	4b06      	ldrhi	r3, [pc, #24]	; (8017ecc <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8017eb4:	681b      	ldrhi	r3, [r3, #0]
 8017eb6:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8017eba:	7858      	ldrbhi	r0, [r3, #1]
 8017ebc:	bf8c      	ite	hi
 8017ebe:	f000 0003 	andhi.w	r0, r0, #3
 8017ec2:	2000      	movls	r0, #0
 8017ec4:	4770      	bx	lr
 8017ec6:	bf00      	nop
 8017ec8:	2003c318 	.word	0x2003c318
 8017ecc:	2003c314 	.word	0x2003c314

08017ed0 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8017ed0:	4b11      	ldr	r3, [pc, #68]	; (8017f18 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8017ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ed6:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017ed8:	4604      	mov	r4, r0
 8017eda:	881b      	ldrh	r3, [r3, #0]
 8017edc:	428b      	cmp	r3, r1
 8017ede:	d918      	bls.n	8017f12 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8017ee0:	6803      	ldr	r3, [r0, #0]
 8017ee2:	6f9d      	ldr	r5, [r3, #120]	; 0x78
 8017ee4:	4b0d      	ldr	r3, [pc, #52]	; (8017f1c <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8017ee6:	6818      	ldr	r0, [r3, #0]
 8017ee8:	f7fa f8b2 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 8017eec:	6823      	ldr	r3, [r4, #0]
 8017eee:	4606      	mov	r6, r0
 8017ef0:	4620      	mov	r0, r4
 8017ef2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017ef4:	4798      	blx	r3
 8017ef6:	6823      	ldr	r3, [r4, #0]
 8017ef8:	4607      	mov	r7, r0
 8017efa:	4620      	mov	r0, r4
 8017efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017f00:	4798      	blx	r3
 8017f02:	463a      	mov	r2, r7
 8017f04:	4603      	mov	r3, r0
 8017f06:	4631      	mov	r1, r6
 8017f08:	4620      	mov	r0, r4
 8017f0a:	46ac      	mov	ip, r5
 8017f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017f10:	4760      	bx	ip
 8017f12:	2000      	movs	r0, #0
 8017f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f18:	2003c318 	.word	0x2003c318
 8017f1c:	2003c320 	.word	0x2003c320

08017f20 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8017f20:	4b18      	ldr	r3, [pc, #96]	; (8017f84 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8017f22:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017f26:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8017f28:	4604      	mov	r4, r0
 8017f2a:	881b      	ldrh	r3, [r3, #0]
 8017f2c:	428b      	cmp	r3, r1
 8017f2e:	d926      	bls.n	8017f7e <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8017f30:	4b15      	ldr	r3, [pc, #84]	; (8017f88 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8017f38:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8017f3c:	4b13      	ldr	r3, [pc, #76]	; (8017f8c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8017f3e:	7855      	ldrb	r5, [r2, #1]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8017f46:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8017f4a:	6833      	ldr	r3, [r6, #0]
 8017f4c:	69df      	ldr	r7, [r3, #28]
 8017f4e:	4b10      	ldr	r3, [pc, #64]	; (8017f90 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8017f50:	6818      	ldr	r0, [r3, #0]
 8017f52:	f7fa f87d 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 8017f56:	6823      	ldr	r3, [r4, #0]
 8017f58:	4680      	mov	r8, r0
 8017f5a:	4620      	mov	r0, r4
 8017f5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017f5e:	4798      	blx	r3
 8017f60:	6823      	ldr	r3, [r4, #0]
 8017f62:	4681      	mov	r9, r0
 8017f64:	4620      	mov	r0, r4
 8017f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017f6a:	4798      	blx	r3
 8017f6c:	464b      	mov	r3, r9
 8017f6e:	9000      	str	r0, [sp, #0]
 8017f70:	4642      	mov	r2, r8
 8017f72:	4629      	mov	r1, r5
 8017f74:	4630      	mov	r0, r6
 8017f76:	47b8      	blx	r7
 8017f78:	b003      	add	sp, #12
 8017f7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017f7e:	2000      	movs	r0, #0
 8017f80:	e7fa      	b.n	8017f78 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8017f82:	bf00      	nop
 8017f84:	2003c318 	.word	0x2003c318
 8017f88:	2003c314 	.word	0x2003c314
 8017f8c:	2003c31c 	.word	0x2003c31c
 8017f90:	2003c320 	.word	0x2003c320

08017f94 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8017f94:	b40e      	push	{r1, r2, r3}
 8017f96:	4b30      	ldr	r3, [pc, #192]	; (8018058 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8017f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f9c:	881a      	ldrh	r2, [r3, #0]
 8017f9e:	b09d      	sub	sp, #116	; 0x74
 8017fa0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
 8017fa2:	4604      	mov	r4, r0
 8017fa4:	429a      	cmp	r2, r3
 8017fa6:	d954      	bls.n	8018052 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8017fa8:	aa26      	add	r2, sp, #152	; 0x98
 8017faa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 801805c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8017fae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8018060 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8017fb2:	9202      	str	r2, [sp, #8]
 8017fb4:	f8d9 2000 	ldr.w	r2, [r9]
 8017fb8:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8017fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8017fc0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8017fc4:	682b      	ldr	r3, [r5, #0]
 8017fc6:	4628      	mov	r0, r5
 8017fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017fca:	4798      	blx	r3
 8017fcc:	4606      	mov	r6, r0
 8017fce:	b207      	sxth	r7, r0
 8017fd0:	a803      	add	r0, sp, #12
 8017fd2:	f004 fca3 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 8017fd6:	682b      	ldr	r3, [r5, #0]
 8017fd8:	4628      	mov	r0, r5
 8017fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fdc:	4798      	blx	r3
 8017fde:	682b      	ldr	r3, [r5, #0]
 8017fe0:	4682      	mov	sl, r0
 8017fe2:	4628      	mov	r0, r5
 8017fe4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8017fe6:	4798      	blx	r3
 8017fe8:	4653      	mov	r3, sl
 8017fea:	9000      	str	r0, [sp, #0]
 8017fec:	a803      	add	r0, sp, #12
 8017fee:	9a02      	ldr	r2, [sp, #8]
 8017ff0:	9925      	ldr	r1, [sp, #148]	; 0x94
 8017ff2:	f004 fcee 	bl	801c9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017ff6:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8017ff8:	f8d9 3000 	ldr.w	r3, [r9]
 8017ffc:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
 8018000:	8925      	ldrh	r5, [r4, #8]
 8018002:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8018006:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 801800a:	eba5 050c 	sub.w	r5, r5, ip
 801800e:	784a      	ldrb	r2, [r1, #1]
 8018010:	f8d8 3000 	ldr.w	r3, [r8]
 8018014:	b22d      	sxth	r5, r5
 8018016:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
 801801a:	f3c2 0281 	ubfx	r2, r2, #2, #2
 801801e:	9500      	str	r5, [sp, #0]
 8018020:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8018024:	a803      	add	r0, sp, #12
 8018026:	f002 fae6 	bl	801a5f6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 801802a:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
 801802e:	b203      	sxth	r3, r0
 8018030:	18b9      	adds	r1, r7, r2
 8018032:	2900      	cmp	r1, #0
 8018034:	dd0b      	ble.n	801804e <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8018036:	3b01      	subs	r3, #1
 8018038:	fb13 f302 	smulbb	r3, r3, r2
 801803c:	fb16 3300 	smlabb	r3, r6, r0, r3
 8018040:	b21f      	sxth	r7, r3
 8018042:	4638      	mov	r0, r7
 8018044:	b01d      	add	sp, #116	; 0x74
 8018046:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801804a:	b003      	add	sp, #12
 801804c:	4770      	bx	lr
 801804e:	2b00      	cmp	r3, #0
 8018050:	dcf7      	bgt.n	8018042 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8018052:	2700      	movs	r7, #0
 8018054:	e7f5      	b.n	8018042 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8018056:	bf00      	nop
 8018058:	2003c318 	.word	0x2003c318
 801805c:	2003c314 	.word	0x2003c314
 8018060:	2003c31c 	.word	0x2003c31c

08018064 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8018064:	4bbc      	ldr	r3, [pc, #752]	; (8018358 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f4>)
 8018066:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801806a:	460c      	mov	r4, r1
 801806c:	881b      	ldrh	r3, [r3, #0]
 801806e:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
 8018070:	b0a9      	sub	sp, #164	; 0xa4
 8018072:	4681      	mov	r9, r0
 8018074:	428b      	cmp	r3, r1
 8018076:	d809      	bhi.n	801808c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8018078:	2300      	movs	r3, #0
 801807a:	f04f 32ff 	mov.w	r2, #4294967295
 801807e:	6083      	str	r3, [r0, #8]
 8018080:	e9c0 3200 	strd	r3, r2, [r0]
 8018084:	4648      	mov	r0, r9
 8018086:	b029      	add	sp, #164	; 0xa4
 8018088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801808c:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8018360 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8018090:	f10d 0a3c 	add.w	sl, sp, #60	; 0x3c
 8018094:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8018364 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>
 8018098:	f8db 3000 	ldr.w	r3, [fp]
 801809c:	f8d8 0000 	ldr.w	r0, [r8]
 80180a0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80180a4:	4bad      	ldr	r3, [pc, #692]	; (801835c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 80180ac:	f7f9 ffd0 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 80180b0:	4607      	mov	r7, r0
 80180b2:	682b      	ldr	r3, [r5, #0]
 80180b4:	4628      	mov	r0, r5
 80180b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180b8:	4798      	blx	r3
 80180ba:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
 80180bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80180c0:	4430      	add	r0, r6
 80180c2:	f894 6039 	ldrb.w	r6, [r4, #57]	; 0x39
 80180c6:	b283      	uxth	r3, r0
 80180c8:	4650      	mov	r0, sl
 80180ca:	9302      	str	r3, [sp, #8]
 80180cc:	2e00      	cmp	r6, #0
 80180ce:	f040 8090 	bne.w	80181f2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 80180d2:	f004 fc23 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 80180d6:	682b      	ldr	r3, [r5, #0]
 80180d8:	4628      	mov	r0, r5
 80180da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80180dc:	4798      	blx	r3
 80180de:	682b      	ldr	r3, [r5, #0]
 80180e0:	9005      	str	r0, [sp, #20]
 80180e2:	4628      	mov	r0, r5
 80180e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80180e6:	4798      	blx	r3
 80180e8:	6823      	ldr	r3, [r4, #0]
 80180ea:	4680      	mov	r8, r0
 80180ec:	4620      	mov	r0, r4
 80180ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80180f0:	4798      	blx	r3
 80180f2:	6822      	ldr	r2, [r4, #0]
 80180f4:	9004      	str	r0, [sp, #16]
 80180f6:	4620      	mov	r0, r4
 80180f8:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80180fc:	4790      	blx	r2
 80180fe:	9905      	ldr	r1, [sp, #20]
 8018100:	9b04      	ldr	r3, [sp, #16]
 8018102:	460a      	mov	r2, r1
 8018104:	4639      	mov	r1, r7
 8018106:	4637      	mov	r7, r6
 8018108:	9001      	str	r0, [sp, #4]
 801810a:	9300      	str	r3, [sp, #0]
 801810c:	4650      	mov	r0, sl
 801810e:	4643      	mov	r3, r8
 8018110:	f004 fc74 	bl	801c9fc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018114:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018116:	4629      	mov	r1, r5
 8018118:	f8db 3000 	ldr.w	r3, [fp]
 801811c:	4650      	mov	r0, sl
 801811e:	3601      	adds	r6, #1
 8018120:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8018124:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8018128:	b2b6      	uxth	r6, r6
 801812a:	785b      	ldrb	r3, [r3, #1]
 801812c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8018130:	f001 ffb2 	bl	801a098 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8018134:	4287      	cmp	r7, r0
 8018136:	bfb8      	it	lt
 8018138:	b207      	sxthlt	r7, r0
 801813a:	4650      	mov	r0, sl
 801813c:	f004 fc15 	bl	801c96a <_ZN8touchgfx12TextProvider11endOfStringEv>
 8018140:	2800      	cmp	r0, #0
 8018142:	d0e7      	beq.n	8018114 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xb0>
 8018144:	9b02      	ldr	r3, [sp, #8]
 8018146:	f8b4 8034 	ldrh.w	r8, [r4, #52]	; 0x34
 801814a:	fb13 f606 	smulbb	r6, r3, r6
 801814e:	eba6 0608 	sub.w	r6, r6, r8
 8018152:	b2b6      	uxth	r6, r6
 8018154:	fa0f f886 	sxth.w	r8, r6
 8018158:	f1b8 0f00 	cmp.w	r8, #0
 801815c:	dd06      	ble.n	801816c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x108>
 801815e:	682b      	ldr	r3, [r5, #0]
 8018160:	4628      	mov	r0, r5
 8018162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018164:	4798      	blx	r3
 8018166:	4430      	add	r0, r6
 8018168:	fa0f f880 	sxth.w	r8, r0
 801816c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018170:	4620      	mov	r0, r4
 8018172:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018176:	6823      	ldr	r3, [r4, #0]
 8018178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801817a:	bf0c      	ite	eq
 801817c:	f9b4 6008 	ldrsheq.w	r6, [r4, #8]
 8018180:	f9b4 600a 	ldrshne.w	r6, [r4, #10]
 8018184:	4798      	blx	r3
 8018186:	2801      	cmp	r0, #1
 8018188:	b2ba      	uxth	r2, r7
 801818a:	f000 80d2 	beq.w	8018332 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2ce>
 801818e:	2802      	cmp	r0, #2
 8018190:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8018194:	f000 80d3 	beq.w	801833e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2da>
 8018198:	b21e      	sxth	r6, r3
 801819a:	7a29      	ldrb	r1, [r5, #8]
 801819c:	7a6d      	ldrb	r5, [r5, #9]
 801819e:	1a76      	subs	r6, r6, r1
 80181a0:	4429      	add	r1, r5
 80181a2:	b2b3      	uxth	r3, r6
 80181a4:	440a      	add	r2, r1
 80181a6:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
 80181aa:	b21f      	sxth	r7, r3
 80181ac:	b292      	uxth	r2, r2
 80181ae:	2902      	cmp	r1, #2
 80181b0:	b216      	sxth	r6, r2
 80181b2:	f000 80c7 	beq.w	8018344 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2e0>
 80181b6:	2903      	cmp	r1, #3
 80181b8:	f000 80d6 	beq.w	8018368 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>
 80181bc:	2901      	cmp	r1, #1
 80181be:	f040 80dc 	bne.w	801837a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x316>
 80181c2:	8923      	ldrh	r3, [r4, #8]
 80181c4:	4632      	mov	r2, r6
 80181c6:	463d      	mov	r5, r7
 80181c8:	4646      	mov	r6, r8
 80181ca:	eba3 0308 	sub.w	r3, r3, r8
 80181ce:	4690      	mov	r8, r2
 80181d0:	b21f      	sxth	r7, r3
 80181d2:	9b03      	ldr	r3, [sp, #12]
 80181d4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80181d6:	6818      	ldr	r0, [r3, #0]
 80181d8:	f7f9 ff3a 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 80181dc:	f8a9 7000 	strh.w	r7, [r9]
 80181e0:	f8a9 5002 	strh.w	r5, [r9, #2]
 80181e4:	f8a9 6004 	strh.w	r6, [r9, #4]
 80181e8:	f8a9 8006 	strh.w	r8, [r9, #6]
 80181ec:	f8c9 0008 	str.w	r0, [r9, #8]
 80181f0:	e748      	b.n	8018084 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 80181f2:	f004 fb93 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 80181f6:	682b      	ldr	r3, [r5, #0]
 80181f8:	4628      	mov	r0, r5
 80181fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80181fc:	4798      	blx	r3
 80181fe:	682b      	ldr	r3, [r5, #0]
 8018200:	4606      	mov	r6, r0
 8018202:	4628      	mov	r0, r5
 8018204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018206:	4798      	blx	r3
 8018208:	6823      	ldr	r3, [r4, #0]
 801820a:	4680      	mov	r8, r0
 801820c:	4620      	mov	r0, r4
 801820e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018210:	4798      	blx	r3
 8018212:	6822      	ldr	r2, [r4, #0]
 8018214:	9004      	str	r0, [sp, #16]
 8018216:	4620      	mov	r0, r4
 8018218:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801821c:	4790      	blx	r2
 801821e:	9b04      	ldr	r3, [sp, #16]
 8018220:	4632      	mov	r2, r6
 8018222:	9001      	str	r0, [sp, #4]
 8018224:	9300      	str	r3, [sp, #0]
 8018226:	4639      	mov	r1, r7
 8018228:	4643      	mov	r3, r8
 801822a:	4650      	mov	r0, sl
 801822c:	f004 fbe6 	bl	801c9fc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018230:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8018234:	f9b4 8008 	ldrsh.w	r8, [r4, #8]
 8018238:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 801823c:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8018240:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018242:	bf0a      	itet	eq
 8018244:	4642      	moveq	r2, r8
 8018246:	461a      	movne	r2, r3
 8018248:	4698      	moveq	r8, r3
 801824a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 801824e:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
 8018252:	1ad2      	subs	r2, r2, r3
 8018254:	f8db 3000 	ldr.w	r3, [fp]
 8018258:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 801825c:	7859      	ldrb	r1, [r3, #1]
 801825e:	2300      	movs	r3, #0
 8018260:	f8cd a020 	str.w	sl, [sp, #32]
 8018264:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8018268:	f8ad 301c 	strh.w	r3, [sp, #28]
 801826c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
 8018270:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8018274:	950a      	str	r5, [sp, #40]	; 0x28
 8018276:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801827a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801827e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8018282:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018286:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801828a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801828e:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8018292:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 8018296:	b350      	cbz	r0, 80182ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 8018298:	682b      	ldr	r3, [r5, #0]
 801829a:	4628      	mov	r0, r5
 801829c:	695b      	ldr	r3, [r3, #20]
 801829e:	4798      	blx	r3
 80182a0:	4607      	mov	r7, r0
 80182a2:	b320      	cbz	r0, 80182ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80182a4:	980a      	ldr	r0, [sp, #40]	; 0x28
 80182a6:	4639      	mov	r1, r7
 80182a8:	6803      	ldr	r3, [r0, #0]
 80182aa:	68db      	ldr	r3, [r3, #12]
 80182ac:	4798      	blx	r3
 80182ae:	4606      	mov	r6, r0
 80182b0:	b1e8      	cbz	r0, 80182ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80182b2:	7b43      	ldrb	r3, [r0, #13]
 80182b4:	7a82      	ldrb	r2, [r0, #10]
 80182b6:	005b      	lsls	r3, r3, #1
 80182b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80182bc:	4313      	orrs	r3, r2
 80182be:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80182c2:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 80182c6:	2b04      	cmp	r3, #4
 80182c8:	d111      	bne.n	80182ee <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28a>
 80182ca:	980a      	ldr	r0, [sp, #40]	; 0x28
 80182cc:	4632      	mov	r2, r6
 80182ce:	4639      	mov	r1, r7
 80182d0:	6803      	ldr	r3, [r0, #0]
 80182d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80182d4:	4798      	blx	r3
 80182d6:	7b73      	ldrb	r3, [r6, #13]
 80182d8:	005b      	lsls	r3, r3, #1
 80182da:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80182de:	7ab3      	ldrb	r3, [r6, #10]
 80182e0:	4313      	orrs	r3, r2
 80182e2:	4418      	add	r0, r3
 80182e4:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 80182e8:	4418      	add	r0, r3
 80182ea:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
 80182ee:	f9bd a008 	ldrsh.w	sl, [sp, #8]
 80182f2:	2600      	movs	r6, #0
 80182f4:	ea4f 0b4a 	mov.w	fp, sl, lsl #1
 80182f8:	4637      	mov	r7, r6
 80182fa:	45c3      	cmp	fp, r8
 80182fc:	a807      	add	r0, sp, #28
 80182fe:	f106 0601 	add.w	r6, r6, #1
 8018302:	bfd4      	ite	le
 8018304:	2100      	movle	r1, #0
 8018306:	2101      	movgt	r1, #1
 8018308:	f002 f8a6 	bl	801a458 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801830c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 8018310:	b2b6      	uxth	r6, r6
 8018312:	429f      	cmp	r7, r3
 8018314:	bfb8      	it	lt
 8018316:	b21f      	sxthlt	r7, r3
 8018318:	9b02      	ldr	r3, [sp, #8]
 801831a:	eba8 0803 	sub.w	r8, r8, r3
 801831e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8018322:	fa0f f888 	sxth.w	r8, r8
 8018326:	2b00      	cmp	r3, #0
 8018328:	f43f af0c 	beq.w	8018144 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 801832c:	45c2      	cmp	sl, r8
 801832e:	dbe4      	blt.n	80182fa <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x296>
 8018330:	e708      	b.n	8018144 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xe0>
 8018332:	1bf6      	subs	r6, r6, r7
 8018334:	2702      	movs	r7, #2
 8018336:	fb96 f6f7 	sdiv	r6, r6, r7
 801833a:	b236      	sxth	r6, r6
 801833c:	e72d      	b.n	801819a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x136>
 801833e:	4413      	add	r3, r2
 8018340:	1af6      	subs	r6, r6, r3
 8018342:	e7fa      	b.n	801833a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2d6>
 8018344:	8925      	ldrh	r5, [r4, #8]
 8018346:	1aad      	subs	r5, r5, r2
 8018348:	1aed      	subs	r5, r5, r3
 801834a:	b22f      	sxth	r7, r5
 801834c:	8965      	ldrh	r5, [r4, #10]
 801834e:	eba5 0508 	sub.w	r5, r5, r8
 8018352:	b22d      	sxth	r5, r5
 8018354:	e73d      	b.n	80181d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 8018356:	bf00      	nop
 8018358:	2003c318 	.word	0x2003c318
 801835c:	2003c31c 	.word	0x2003c31c
 8018360:	2003c314 	.word	0x2003c314
 8018364:	2003c320 	.word	0x2003c320
 8018368:	8965      	ldrh	r5, [r4, #10]
 801836a:	2700      	movs	r7, #0
 801836c:	1aad      	subs	r5, r5, r2
 801836e:	1aed      	subs	r5, r5, r3
 8018370:	4633      	mov	r3, r6
 8018372:	4646      	mov	r6, r8
 8018374:	b22d      	sxth	r5, r5
 8018376:	4698      	mov	r8, r3
 8018378:	e72b      	b.n	80181d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801837a:	2500      	movs	r5, #0
 801837c:	e729      	b.n	80181d2 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x16e>
 801837e:	bf00      	nop

08018380 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8018380:	b513      	push	{r0, r1, r4, lr}
 8018382:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 8018386:	4604      	mov	r4, r0
 8018388:	b1fb      	cbz	r3, 80183ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801838a:	4b16      	ldr	r3, [pc, #88]	; (80183e4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 801838c:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 801838e:	881b      	ldrh	r3, [r3, #0]
 8018390:	428b      	cmp	r3, r1
 8018392:	d91a      	bls.n	80183ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8018394:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018398:	2b00      	cmp	r3, #0
 801839a:	dd16      	ble.n	80183ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 801839c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	dd12      	ble.n	80183ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80183a4:	4b10      	ldr	r3, [pc, #64]	; (80183e8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 80183a6:	6818      	ldr	r0, [r3, #0]
 80183a8:	f7f9 fe52 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 80183ac:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 80183b0:	6822      	ldr	r2, [r4, #0]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	db06      	blt.n	80183c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80183b6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	db02      	blt.n	80183c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 80183be:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80183c0:	4298      	cmp	r0, r3
 80183c2:	d004      	beq.n	80183ce <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 80183c4:	6953      	ldr	r3, [r2, #20]
 80183c6:	4620      	mov	r0, r4
 80183c8:	4798      	blx	r3
 80183ca:	b002      	add	sp, #8
 80183cc:	bd10      	pop	{r4, pc}
 80183ce:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80183d2:	466b      	mov	r3, sp
 80183d4:	6912      	ldr	r2, [r2, #16]
 80183d6:	c903      	ldmia	r1, {r0, r1}
 80183d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80183dc:	4619      	mov	r1, r3
 80183de:	4620      	mov	r0, r4
 80183e0:	4790      	blx	r2
 80183e2:	e7f2      	b.n	80183ca <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 80183e4:	2003c318 	.word	0x2003c318
 80183e8:	2003c320 	.word	0x2003c320

080183ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 80183ec:	4b45      	ldr	r3, [pc, #276]	; (8018504 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 80183ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183f2:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 80183f4:	b08e      	sub	sp, #56	; 0x38
 80183f6:	881b      	ldrh	r3, [r3, #0]
 80183f8:	4604      	mov	r4, r0
 80183fa:	4293      	cmp	r3, r2
 80183fc:	d97e      	bls.n	80184fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 80183fe:	6808      	ldr	r0, [r1, #0]
 8018400:	ab05      	add	r3, sp, #20
 8018402:	6849      	ldr	r1, [r1, #4]
 8018404:	4d40      	ldr	r5, [pc, #256]	; (8018508 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 8018406:	c303      	stmia	r3!, {r0, r1}
 8018408:	4611      	mov	r1, r2
 801840a:	6828      	ldr	r0, [r5, #0]
 801840c:	f7f9 fe20 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 8018410:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
 8018414:	2b00      	cmp	r3, #0
 8018416:	db11      	blt.n	801843c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018418:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801841c:	2b00      	cmp	r3, #0
 801841e:	db0d      	blt.n	801843c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018420:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8018422:	4298      	cmp	r0, r3
 8018424:	d10a      	bne.n	801843c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8018426:	f104 023c 	add.w	r2, r4, #60	; 0x3c
 801842a:	ab09      	add	r3, sp, #36	; 0x24
 801842c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8018430:	e883 0003 	stmia.w	r3, {r0, r1}
 8018434:	4619      	mov	r1, r3
 8018436:	a805      	add	r0, sp, #20
 8018438:	f7fe f85c 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801843c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018440:	2b00      	cmp	r3, #0
 8018442:	dd5b      	ble.n	80184fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018444:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8018448:	2b00      	cmp	r3, #0
 801844a:	dd57      	ble.n	80184fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 801844c:	4f2f      	ldr	r7, [pc, #188]	; (801850c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 801844e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8018456:	4b2e      	ldr	r3, [pc, #184]	; (8018510 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 8018458:	681b      	ldr	r3, [r3, #0]
 801845a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801845e:	2e00      	cmp	r6, #0
 8018460:	d04c      	beq.n	80184fc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8018462:	6823      	ldr	r3, [r4, #0]
 8018464:	4620      	mov	r0, r4
 8018466:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
 801846a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801846c:	4798      	blx	r3
 801846e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8018470:	683b      	ldr	r3, [r7, #0]
 8018472:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
 8018476:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801847a:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
 801847e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8018482:	785b      	ldrb	r3, [r3, #1]
 8018484:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
 8018488:	f3c3 0381 	ubfx	r3, r3, #2, #2
 801848c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801848e:	9609      	str	r6, [sp, #36]	; 0x24
 8018490:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018494:	4b1f      	ldr	r3, [pc, #124]	; (8018514 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 8018496:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
 80184a0:	910b      	str	r1, [sp, #44]	; 0x2c
 80184a2:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
 80184a6:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80184aa:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
 80184ae:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 80184b2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80184b6:	b10a      	cbz	r2, 80184bc <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80184b8:	6cde      	ldr	r6, [r3, #76]	; 0x4c
 80184ba:	b906      	cbnz	r6, 80184be <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80184bc:	689e      	ldr	r6, [r3, #8]
 80184be:	af07      	add	r7, sp, #28
 80184c0:	4621      	mov	r1, r4
 80184c2:	4638      	mov	r0, r7
 80184c4:	f003 fdb0 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80184c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80184ca:	6828      	ldr	r0, [r5, #0]
 80184cc:	f7f9 fdc0 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 80184d0:	6823      	ldr	r3, [r4, #0]
 80184d2:	4605      	mov	r5, r0
 80184d4:	4620      	mov	r0, r4
 80184d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80184d8:	4798      	blx	r3
 80184da:	6823      	ldr	r3, [r4, #0]
 80184dc:	4680      	mov	r8, r0
 80184de:	4620      	mov	r0, r4
 80184e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80184e4:	4798      	blx	r3
 80184e6:	ab09      	add	r3, sp, #36	; 0x24
 80184e8:	9501      	str	r5, [sp, #4]
 80184ea:	9300      	str	r3, [sp, #0]
 80184ec:	ab05      	add	r3, sp, #20
 80184ee:	e9cd 8002 	strd	r8, r0, [sp, #8]
 80184f2:	4630      	mov	r0, r6
 80184f4:	e897 0006 	ldmia.w	r7, {r1, r2}
 80184f8:	f7f9 fd3b 	bl	8011f72 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80184fc:	b00e      	add	sp, #56	; 0x38
 80184fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018502:	bf00      	nop
 8018504:	2003c318 	.word	0x2003c318
 8018508:	2003c320 	.word	0x2003c320
 801850c:	2003c314 	.word	0x2003c314
 8018510:	2003c31c 	.word	0x2003c31c
 8018514:	2003c2bc 	.word	0x2003c2bc

08018518 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 8018518:	b538      	push	{r3, r4, r5, lr}
 801851a:	4b0e      	ldr	r3, [pc, #56]	; (8018554 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 801851c:	4604      	mov	r4, r0
 801851e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018520:	881b      	ldrh	r3, [r3, #0]
 8018522:	429a      	cmp	r2, r3
 8018524:	d214      	bcs.n	8018550 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 8018526:	6803      	ldr	r3, [r0, #0]
 8018528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801852a:	4798      	blx	r3
 801852c:	6823      	ldr	r3, [r4, #0]
 801852e:	4605      	mov	r5, r0
 8018530:	4620      	mov	r0, r4
 8018532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018534:	4798      	blx	r3
 8018536:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801853a:	b22d      	sxth	r5, r5
 801853c:	4601      	mov	r1, r0
 801853e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 8018542:	bf06      	itte	eq
 8018544:	4602      	moveq	r2, r0
 8018546:	4629      	moveq	r1, r5
 8018548:	462a      	movne	r2, r5
 801854a:	4620      	mov	r0, r4
 801854c:	f7f7 f938 	bl	800f7c0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8018550:	bd38      	pop	{r3, r4, r5, pc}
 8018552:	bf00      	nop
 8018554:	2003c318 	.word	0x2003c318

08018558 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 8018558:	b530      	push	{r4, r5, lr}
 801855a:	888b      	ldrh	r3, [r1, #4]
 801855c:	b085      	sub	sp, #20
 801855e:	4604      	mov	r4, r0
 8018560:	8583      	strh	r3, [r0, #44]	; 0x2c
 8018562:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8018566:	b923      	cbnz	r3, 8018572 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8018568:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 801856c:	b90b      	cbnz	r3, 8018572 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801856e:	f7ff ffd3 	bl	8018518 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8018572:	6823      	ldr	r3, [r4, #0]
 8018574:	466d      	mov	r5, sp
 8018576:	4621      	mov	r1, r4
 8018578:	343c      	adds	r4, #60	; 0x3c
 801857a:	4628      	mov	r0, r5
 801857c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8018580:	4798      	blx	r3
 8018582:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8018586:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801858a:	b005      	add	sp, #20
 801858c:	bd30      	pop	{r4, r5, pc}

0801858e <_ZNK8touchgfx3Box12getSolidRectEv>:
 801858e:	2300      	movs	r3, #0
 8018590:	8083      	strh	r3, [r0, #4]
 8018592:	80c3      	strh	r3, [r0, #6]
 8018594:	8003      	strh	r3, [r0, #0]
 8018596:	8043      	strh	r3, [r0, #2]
 8018598:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801859c:	2bff      	cmp	r3, #255	; 0xff
 801859e:	bf01      	itttt	eq
 80185a0:	890b      	ldrheq	r3, [r1, #8]
 80185a2:	8083      	strheq	r3, [r0, #4]
 80185a4:	894b      	ldrheq	r3, [r1, #10]
 80185a6:	80c3      	strheq	r3, [r0, #6]
 80185a8:	4770      	bx	lr
	...

080185ac <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80185ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80185ae:	4604      	mov	r4, r0
 80185b0:	466b      	mov	r3, sp
 80185b2:	6808      	ldr	r0, [r1, #0]
 80185b4:	6849      	ldr	r1, [r1, #4]
 80185b6:	c303      	stmia	r3!, {r0, r1}
 80185b8:	6823      	ldr	r3, [r4, #0]
 80185ba:	4669      	mov	r1, sp
 80185bc:	4620      	mov	r0, r4
 80185be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185c0:	4798      	blx	r3
 80185c2:	4b08      	ldr	r3, [pc, #32]	; (80185e4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80185c4:	681b      	ldr	r3, [r3, #0]
 80185c6:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 80185ca:	b10a      	cbz	r2, 80185d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80185cc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80185ce:	b900      	cbnz	r0, 80185d2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80185d0:	6898      	ldr	r0, [r3, #8]
 80185d2:	6803      	ldr	r3, [r0, #0]
 80185d4:	4669      	mov	r1, sp
 80185d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80185d8:	6a1d      	ldr	r5, [r3, #32]
 80185da:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80185de:	47a8      	blx	r5
 80185e0:	b003      	add	sp, #12
 80185e2:	bd30      	pop	{r4, r5, pc}
 80185e4:	2003c2bc 	.word	0x2003c2bc

080185e8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80185e8:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 80185ec:	b12a      	cbz	r2, 80185fa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80185ee:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80185f2:	b112      	cbz	r2, 80185fa <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80185f4:	6803      	ldr	r3, [r0, #0]
 80185f6:	695b      	ldr	r3, [r3, #20]
 80185f8:	4718      	bx	r3
 80185fa:	4770      	bx	lr

080185fc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80185fc:	4b30      	ldr	r3, [pc, #192]	; (80186c0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80185fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018602:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8018604:	b08d      	sub	sp, #52	; 0x34
 8018606:	881b      	ldrh	r3, [r3, #0]
 8018608:	4604      	mov	r4, r0
 801860a:	460f      	mov	r7, r1
 801860c:	4293      	cmp	r3, r2
 801860e:	d954      	bls.n	80186ba <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8018610:	4b2c      	ldr	r3, [pc, #176]	; (80186c4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 8018612:	6819      	ldr	r1, [r3, #0]
 8018614:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 8018618:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 801861c:	4a2a      	ldr	r2, [pc, #168]	; (80186c8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 801861e:	6812      	ldr	r2, [r2, #0]
 8018620:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8018624:	2900      	cmp	r1, #0
 8018626:	d048      	beq.n	80186ba <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 8018628:	785a      	ldrb	r2, [r3, #1]
 801862a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 801862e:	f3c2 0801 	ubfx	r8, r2, #0, #2
 8018632:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8018636:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 801863a:	4b24      	ldr	r3, [pc, #144]	; (80186cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 801863c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
 8018640:	681a      	ldr	r2, [r3, #0]
 8018642:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
 8018646:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
 801864a:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
 801864e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8018650:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8018654:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
 8018658:	9107      	str	r1, [sp, #28]
 801865a:	f88d 8020 	strb.w	r8, [sp, #32]
 801865e:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
 8018662:	9609      	str	r6, [sp, #36]	; 0x24
 8018664:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
 8018668:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 801866c:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
 8018670:	b10b      	cbz	r3, 8018676 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8018672:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
 8018674:	b905      	cbnz	r5, 8018678 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 8018676:	6895      	ldr	r5, [r2, #8]
 8018678:	ae05      	add	r6, sp, #20
 801867a:	4621      	mov	r1, r4
 801867c:	4630      	mov	r0, r6
 801867e:	f003 fcd3 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018682:	4b13      	ldr	r3, [pc, #76]	; (80186d0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8018684:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8018686:	6818      	ldr	r0, [r3, #0]
 8018688:	f7f9 fce2 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 801868c:	6823      	ldr	r3, [r4, #0]
 801868e:	4680      	mov	r8, r0
 8018690:	4620      	mov	r0, r4
 8018692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018694:	4798      	blx	r3
 8018696:	6823      	ldr	r3, [r4, #0]
 8018698:	4681      	mov	r9, r0
 801869a:	4620      	mov	r0, r4
 801869c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80186a0:	4798      	blx	r3
 80186a2:	ab07      	add	r3, sp, #28
 80186a4:	f8cd 8004 	str.w	r8, [sp, #4]
 80186a8:	9300      	str	r3, [sp, #0]
 80186aa:	463b      	mov	r3, r7
 80186ac:	e9cd 9002 	strd	r9, r0, [sp, #8]
 80186b0:	4628      	mov	r0, r5
 80186b2:	e896 0006 	ldmia.w	r6, {r1, r2}
 80186b6:	f7f9 fc5c 	bl	8011f72 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80186ba:	b00d      	add	sp, #52	; 0x34
 80186bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80186c0:	2003c318 	.word	0x2003c318
 80186c4:	2003c314 	.word	0x2003c314
 80186c8:	2003c31c 	.word	0x2003c31c
 80186cc:	2003c2bc 	.word	0x2003c2bc
 80186d0:	2003c320 	.word	0x2003c320

080186d4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
 80186d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80186d8:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
 80186dc:	b0a0      	sub	sp, #128	; 0x80
 80186de:	4604      	mov	r4, r0
 80186e0:	b193      	cbz	r3, 8018708 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80186e2:	4b30      	ldr	r3, [pc, #192]	; (80187a4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd0>)
 80186e4:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 80186e6:	881b      	ldrh	r3, [r3, #0]
 80186e8:	428b      	cmp	r3, r1
 80186ea:	d90d      	bls.n	8018708 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80186ec:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 80186f0:	2b00      	cmp	r3, #0
 80186f2:	dd09      	ble.n	8018708 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80186f4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80186f8:	2b00      	cmp	r3, #0
 80186fa:	dd05      	ble.n	8018708 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80186fc:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8018700:	b12b      	cbz	r3, 801870e <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x3a>
 8018702:	6803      	ldr	r3, [r0, #0]
 8018704:	695b      	ldr	r3, [r3, #20]
 8018706:	4798      	blx	r3
 8018708:	b020      	add	sp, #128	; 0x80
 801870a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801870e:	4b26      	ldr	r3, [pc, #152]	; (80187a8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd4>)
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8018716:	4b25      	ldr	r3, [pc, #148]	; (80187ac <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xd8>)
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801871e:	4b24      	ldr	r3, [pc, #144]	; (80187b0 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xdc>)
 8018720:	6818      	ldr	r0, [r3, #0]
 8018722:	f7f9 fc95 	bl	8012050 <_ZNK8touchgfx5Texts7getTextEt>
 8018726:	4606      	mov	r6, r0
 8018728:	a807      	add	r0, sp, #28
 801872a:	f004 f8f7 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 801872e:	682b      	ldr	r3, [r5, #0]
 8018730:	4628      	mov	r0, r5
 8018732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018734:	4798      	blx	r3
 8018736:	682b      	ldr	r3, [r5, #0]
 8018738:	4607      	mov	r7, r0
 801873a:	4628      	mov	r0, r5
 801873c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801873e:	4798      	blx	r3
 8018740:	6823      	ldr	r3, [r4, #0]
 8018742:	4605      	mov	r5, r0
 8018744:	4620      	mov	r0, r4
 8018746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018748:	4798      	blx	r3
 801874a:	6823      	ldr	r3, [r4, #0]
 801874c:	4680      	mov	r8, r0
 801874e:	4620      	mov	r0, r4
 8018750:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018754:	4798      	blx	r3
 8018756:	462b      	mov	r3, r5
 8018758:	463a      	mov	r2, r7
 801875a:	4631      	mov	r1, r6
 801875c:	e9cd 8000 	strd	r8, r0, [sp]
 8018760:	a807      	add	r0, sp, #28
 8018762:	f004 f94b 	bl	801c9fc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8018766:	a807      	add	r0, sp, #28
 8018768:	f004 fd04 	bl	801d174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801876c:	280a      	cmp	r0, #10
 801876e:	d103      	bne.n	8018778 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xa4>
 8018770:	6823      	ldr	r3, [r4, #0]
 8018772:	4620      	mov	r0, r4
 8018774:	695b      	ldr	r3, [r3, #20]
 8018776:	e7c6      	b.n	8018706 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x32>
 8018778:	a807      	add	r0, sp, #28
 801877a:	f004 fcfb 	bl	801d174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801877e:	2800      	cmp	r0, #0
 8018780:	d1f4      	bne.n	801876c <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x98>
 8018782:	ad04      	add	r5, sp, #16
 8018784:	4621      	mov	r1, r4
 8018786:	4628      	mov	r0, r5
 8018788:	f7ff fc6c 	bl	8018064 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 801878c:	ab02      	add	r3, sp, #8
 801878e:	6822      	ldr	r2, [r4, #0]
 8018790:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018794:	6912      	ldr	r2, [r2, #16]
 8018796:	e883 0003 	stmia.w	r3, {r0, r1}
 801879a:	4619      	mov	r1, r3
 801879c:	4620      	mov	r0, r4
 801879e:	4790      	blx	r2
 80187a0:	e7b2      	b.n	8018708 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0x34>
 80187a2:	bf00      	nop
 80187a4:	2003c318 	.word	0x2003c318
 80187a8:	2003c314 	.word	0x2003c314
 80187ac:	2003c31c 	.word	0x2003c31c
 80187b0:	2003c320 	.word	0x2003c320

080187b4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 80187b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80187b8:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80187ba:	4604      	mov	r4, r0
 80187bc:	460e      	mov	r6, r1
 80187be:	b08e      	sub	sp, #56	; 0x38
 80187c0:	b218      	sxth	r0, r3
 80187c2:	8921      	ldrh	r1, [r4, #8]
 80187c4:	005b      	lsls	r3, r3, #1
 80187c6:	8962      	ldrh	r2, [r4, #10]
 80187c8:	f8ad 0000 	strh.w	r0, [sp]
 80187cc:	b29b      	uxth	r3, r3
 80187ce:	f8ad 0002 	strh.w	r0, [sp, #2]
 80187d2:	1ac9      	subs	r1, r1, r3
 80187d4:	1ad3      	subs	r3, r2, r3
 80187d6:	b209      	sxth	r1, r1
 80187d8:	b21b      	sxth	r3, r3
 80187da:	2900      	cmp	r1, #0
 80187dc:	f8ad 1004 	strh.w	r1, [sp, #4]
 80187e0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80187e4:	dd5e      	ble.n	80188a4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	dd5c      	ble.n	80188a4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80187ea:	6830      	ldr	r0, [r6, #0]
 80187ec:	ab02      	add	r3, sp, #8
 80187ee:	6871      	ldr	r1, [r6, #4]
 80187f0:	c303      	stmia	r3!, {r0, r1}
 80187f2:	4669      	mov	r1, sp
 80187f4:	a802      	add	r0, sp, #8
 80187f6:	f7fd fe7d 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 80187fa:	4620      	mov	r0, r4
 80187fc:	a902      	add	r1, sp, #8
 80187fe:	f7ff fed5 	bl	80185ac <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 8018802:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8018804:	2800      	cmp	r0, #0
 8018806:	d05f      	beq.n	80188c8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8018808:	8963      	ldrh	r3, [r4, #10]
 801880a:	b202      	sxth	r2, r0
 801880c:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8018810:	2500      	movs	r5, #0
 8018812:	1a1f      	subs	r7, r3, r0
 8018814:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8018818:	f8ad 101c 	strh.w	r1, [sp, #28]
 801881c:	b21b      	sxth	r3, r3
 801881e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8018822:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
 8018826:	af04      	add	r7, sp, #16
 8018828:	1a09      	subs	r1, r1, r0
 801882a:	9506      	str	r5, [sp, #24]
 801882c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8018830:	f8ad 5020 	strh.w	r5, [sp, #32]
 8018834:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8018838:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
 801883c:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8018840:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8018844:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8018848:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
 801884c:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
 8018850:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8018854:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018858:	ab06      	add	r3, sp, #24
 801885a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801885e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8018862:	e887 0003 	stmia.w	r7, {r0, r1}
 8018866:	4631      	mov	r1, r6
 8018868:	4638      	mov	r0, r7
 801886a:	f7fd fe43 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801886e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018872:	2b00      	cmp	r3, #0
 8018874:	dd12      	ble.n	801889c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8018876:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801887a:	2b00      	cmp	r3, #0
 801887c:	dd0e      	ble.n	801889c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801887e:	6823      	ldr	r3, [r4, #0]
 8018880:	4639      	mov	r1, r7
 8018882:	4620      	mov	r0, r4
 8018884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018886:	4798      	blx	r3
 8018888:	f7f6 f954 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 801888c:	6803      	ldr	r3, [r0, #0]
 801888e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018890:	4639      	mov	r1, r7
 8018892:	f8d3 8020 	ldr.w	r8, [r3, #32]
 8018896:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801889a:	47c0      	blx	r8
 801889c:	3501      	adds	r5, #1
 801889e:	2d04      	cmp	r5, #4
 80188a0:	d1da      	bne.n	8018858 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 80188a2:	e011      	b.n	80188c8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80188a4:	6830      	ldr	r0, [r6, #0]
 80188a6:	ab06      	add	r3, sp, #24
 80188a8:	6871      	ldr	r1, [r6, #4]
 80188aa:	c303      	stmia	r3!, {r0, r1}
 80188ac:	6823      	ldr	r3, [r4, #0]
 80188ae:	a906      	add	r1, sp, #24
 80188b0:	4620      	mov	r0, r4
 80188b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80188b4:	4798      	blx	r3
 80188b6:	f7f6 f93d 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 80188ba:	6803      	ldr	r3, [r0, #0]
 80188bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80188be:	a906      	add	r1, sp, #24
 80188c0:	6a1d      	ldr	r5, [r3, #32]
 80188c2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 80188c6:	47a8      	blx	r5
 80188c8:	b00e      	add	sp, #56	; 0x38
 80188ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080188ce <_ZN8touchgfx7OutlineD1Ev>:
 80188ce:	4770      	bx	lr

080188d0 <_ZN8touchgfx7OutlineD0Ev>:
 80188d0:	b510      	push	{r4, lr}
 80188d2:	4604      	mov	r4, r0
 80188d4:	2130      	movs	r1, #48	; 0x30
 80188d6:	f011 f991 	bl	8029bfc <_ZdlPvj>
 80188da:	4620      	mov	r0, r4
 80188dc:	bd10      	pop	{r4, pc}

080188de <_ZN8touchgfx7Outline5resetEv>:
 80188de:	b510      	push	{r4, lr}
 80188e0:	4604      	mov	r4, r0
 80188e2:	f000 fe7b 	bl	80195dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 80188e6:	60e0      	str	r0, [r4, #12]
 80188e8:	f000 fe7e 	bl	80195e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 80188ec:	68e3      	ldr	r3, [r4, #12]
 80188ee:	08c0      	lsrs	r0, r0, #3
 80188f0:	2200      	movs	r2, #0
 80188f2:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80188f6:	6123      	str	r3, [r4, #16]
 80188f8:	3801      	subs	r0, #1
 80188fa:	60a2      	str	r2, [r4, #8]
 80188fc:	6060      	str	r0, [r4, #4]
 80188fe:	8019      	strh	r1, [r3, #0]
 8018900:	8059      	strh	r1, [r3, #2]
 8018902:	809a      	strh	r2, [r3, #4]
 8018904:	80da      	strh	r2, [r3, #6]
 8018906:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018908:	f023 0301 	bic.w	r3, r3, #1
 801890c:	f043 0302 	orr.w	r3, r3, #2
 8018910:	6263      	str	r3, [r4, #36]	; 0x24
 8018912:	bd10      	pop	{r4, pc}

08018914 <_ZN8touchgfx7OutlineC1Ev>:
 8018914:	4b0a      	ldr	r3, [pc, #40]	; (8018940 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8018916:	b510      	push	{r4, lr}
 8018918:	6003      	str	r3, [r0, #0]
 801891a:	2300      	movs	r3, #0
 801891c:	4604      	mov	r4, r0
 801891e:	6243      	str	r3, [r0, #36]	; 0x24
 8018920:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8018924:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018928:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801892c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8018930:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8018934:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
 8018938:	f7ff ffd1 	bl	80188de <_ZN8touchgfx7Outline5resetEv>
 801893c:	4620      	mov	r0, r4
 801893e:	bd10      	pop	{r4, pc}
 8018940:	08030898 	.word	0x08030898

08018944 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8018944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018948:	b093      	sub	sp, #76	; 0x4c
 801894a:	1156      	asrs	r6, r2, #5
 801894c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801894e:	9305      	str	r3, [sp, #20]
 8018950:	1153      	asrs	r3, r2, #5
 8018952:	f004 051f 	and.w	r5, r4, #31
 8018956:	9303      	str	r3, [sp, #12]
 8018958:	1163      	asrs	r3, r4, #5
 801895a:	9504      	str	r5, [sp, #16]
 801895c:	1165      	asrs	r5, r4, #5
 801895e:	9306      	str	r3, [sp, #24]
 8018960:	f002 031f 	and.w	r3, r2, #31
 8018964:	42ae      	cmp	r6, r5
 8018966:	f040 80f4 	bne.w	8018b52 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801896a:	9c04      	ldr	r4, [sp, #16]
 801896c:	9a05      	ldr	r2, [sp, #20]
 801896e:	42a3      	cmp	r3, r4
 8018970:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8018974:	6902      	ldr	r2, [r0, #16]
 8018976:	d125      	bne.n	80189c4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8018978:	f9b2 3000 	ldrsh.w	r3, [r2]
 801897c:	459e      	cmp	lr, r3
 801897e:	d103      	bne.n	8018988 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8018980:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018984:	429e      	cmp	r6, r3
 8018986:	d035      	beq.n	80189f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018988:	88d1      	ldrh	r1, [r2, #6]
 801898a:	8893      	ldrh	r3, [r2, #4]
 801898c:	430b      	orrs	r3, r1
 801898e:	d010      	beq.n	80189b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018990:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8018994:	2b00      	cmp	r3, #0
 8018996:	db0c      	blt.n	80189b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8018998:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 801899a:	428b      	cmp	r3, r1
 801899c:	da09      	bge.n	80189b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801899e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80189a2:	428b      	cmp	r3, r1
 80189a4:	f103 0301 	add.w	r3, r3, #1
 80189a8:	bf38      	it	cc
 80189aa:	3208      	addcc	r2, #8
 80189ac:	6083      	str	r3, [r0, #8]
 80189ae:	bf38      	it	cc
 80189b0:	6102      	strcc	r2, [r0, #16]
 80189b2:	6903      	ldr	r3, [r0, #16]
 80189b4:	9a03      	ldr	r2, [sp, #12]
 80189b6:	f8a3 e000 	strh.w	lr, [r3]
 80189ba:	805a      	strh	r2, [r3, #2]
 80189bc:	2200      	movs	r2, #0
 80189be:	809a      	strh	r2, [r3, #4]
 80189c0:	80da      	strh	r2, [r3, #6]
 80189c2:	e017      	b.n	80189f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80189c4:	9c05      	ldr	r4, [sp, #20]
 80189c6:	114e      	asrs	r6, r1, #5
 80189c8:	f001 0c1f 	and.w	ip, r1, #31
 80189cc:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80189d0:	f004 041f 	and.w	r4, r4, #31
 80189d4:	4576      	cmp	r6, lr
 80189d6:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80189da:	9402      	str	r4, [sp, #8]
 80189dc:	9c04      	ldr	r4, [sp, #16]
 80189de:	eba4 0403 	sub.w	r4, r4, r3
 80189e2:	d10a      	bne.n	80189fa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 80189e4:	9b02      	ldr	r3, [sp, #8]
 80189e6:	44a0      	add	r8, r4
 80189e8:	449c      	add	ip, r3
 80189ea:	f8a2 8004 	strh.w	r8, [r2, #4]
 80189ee:	fb04 a40c 	mla	r4, r4, ip, sl
 80189f2:	80d4      	strh	r4, [r2, #6]
 80189f4:	b013      	add	sp, #76	; 0x4c
 80189f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189fa:	9d05      	ldr	r5, [sp, #20]
 80189fc:	1a69      	subs	r1, r5, r1
 80189fe:	bf51      	iteee	pl
 8018a00:	f1cc 0520 	rsbpl	r5, ip, #32
 8018a04:	fb04 f40c 	mulmi.w	r4, r4, ip
 8018a08:	4249      	negmi	r1, r1
 8018a0a:	2500      	movmi	r5, #0
 8018a0c:	bf5d      	ittte	pl
 8018a0e:	436c      	mulpl	r4, r5
 8018a10:	2520      	movpl	r5, #32
 8018a12:	f04f 0901 	movpl.w	r9, #1
 8018a16:	f04f 39ff 	movmi.w	r9, #4294967295
 8018a1a:	9501      	str	r5, [sp, #4]
 8018a1c:	9f01      	ldr	r7, [sp, #4]
 8018a1e:	444e      	add	r6, r9
 8018a20:	fb94 f5f1 	sdiv	r5, r4, r1
 8018a24:	fb01 4415 	mls	r4, r1, r5, r4
 8018a28:	44bc      	add	ip, r7
 8018a2a:	2c00      	cmp	r4, #0
 8018a2c:	bfbc      	itt	lt
 8018a2e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8018a32:	1864      	addlt	r4, r4, r1
 8018a34:	44a8      	add	r8, r5
 8018a36:	fb05 ac0c 	mla	ip, r5, ip, sl
 8018a3a:	f8a2 8004 	strh.w	r8, [r2, #4]
 8018a3e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8018a42:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018a46:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8018a4a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 8018a4e:	ea58 0202 	orrs.w	r2, r8, r2
 8018a52:	d011      	beq.n	8018a78 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018a54:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8018a58:	f1b8 0f00 	cmp.w	r8, #0
 8018a5c:	db0c      	blt.n	8018a78 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018a5e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8018a60:	4590      	cmp	r8, r2
 8018a62:	da09      	bge.n	8018a78 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8018a64:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8018a68:	4590      	cmp	r8, r2
 8018a6a:	bf3c      	itt	cc
 8018a6c:	f10c 0208 	addcc.w	r2, ip, #8
 8018a70:	6102      	strcc	r2, [r0, #16]
 8018a72:	f108 0201 	add.w	r2, r8, #1
 8018a76:	6082      	str	r2, [r0, #8]
 8018a78:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018a7c:	2700      	movs	r7, #0
 8018a7e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8018a82:	45b6      	cmp	lr, r6
 8018a84:	f8ac 6000 	strh.w	r6, [ip]
 8018a88:	442b      	add	r3, r5
 8018a8a:	f8ac 2002 	strh.w	r2, [ip, #2]
 8018a8e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018a92:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018a96:	d04b      	beq.n	8018b30 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8018a98:	9f04      	ldr	r7, [sp, #16]
 8018a9a:	1a64      	subs	r4, r4, r1
 8018a9c:	f04f 0a00 	mov.w	sl, #0
 8018aa0:	1aff      	subs	r7, r7, r3
 8018aa2:	443d      	add	r5, r7
 8018aa4:	016d      	lsls	r5, r5, #5
 8018aa6:	fb95 f8f1 	sdiv	r8, r5, r1
 8018aaa:	fb01 5518 	mls	r5, r1, r8, r5
 8018aae:	2d00      	cmp	r5, #0
 8018ab0:	bfbc      	itt	lt
 8018ab2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8018ab6:	186d      	addlt	r5, r5, r1
 8018ab8:	f108 0701 	add.w	r7, r8, #1
 8018abc:	9703      	str	r7, [sp, #12]
 8018abe:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018ac2:	1964      	adds	r4, r4, r5
 8018ac4:	444e      	add	r6, r9
 8018ac6:	bf54      	ite	pl
 8018ac8:	9f03      	ldrpl	r7, [sp, #12]
 8018aca:	4647      	movmi	r7, r8
 8018acc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8018ad0:	bf58      	it	pl
 8018ad2:	1a64      	subpl	r4, r4, r1
 8018ad4:	443b      	add	r3, r7
 8018ad6:	44bb      	add	fp, r7
 8018ad8:	f8ac b004 	strh.w	fp, [ip, #4]
 8018adc:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018ae0:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8018ae4:	f8ac b006 	strh.w	fp, [ip, #6]
 8018ae8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018aec:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018af0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018af4:	ea5b 0707 	orrs.w	r7, fp, r7
 8018af8:	d011      	beq.n	8018b1e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018afa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8018afe:	f1bb 0f00 	cmp.w	fp, #0
 8018b02:	db0c      	blt.n	8018b1e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018b04:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018b06:	45bb      	cmp	fp, r7
 8018b08:	da09      	bge.n	8018b1e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8018b0a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8018b0e:	45bb      	cmp	fp, r7
 8018b10:	bf3c      	itt	cc
 8018b12:	f10c 0708 	addcc.w	r7, ip, #8
 8018b16:	6107      	strcc	r7, [r0, #16]
 8018b18:	f10b 0701 	add.w	r7, fp, #1
 8018b1c:	6087      	str	r7, [r0, #8]
 8018b1e:	6907      	ldr	r7, [r0, #16]
 8018b20:	45b6      	cmp	lr, r6
 8018b22:	803e      	strh	r6, [r7, #0]
 8018b24:	807a      	strh	r2, [r7, #2]
 8018b26:	f8a7 a004 	strh.w	sl, [r7, #4]
 8018b2a:	f8a7 a006 	strh.w	sl, [r7, #6]
 8018b2e:	d1c6      	bne.n	8018abe <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8018b30:	9a04      	ldr	r2, [sp, #16]
 8018b32:	1ad3      	subs	r3, r2, r3
 8018b34:	6902      	ldr	r2, [r0, #16]
 8018b36:	8891      	ldrh	r1, [r2, #4]
 8018b38:	88d6      	ldrh	r6, [r2, #6]
 8018b3a:	4419      	add	r1, r3
 8018b3c:	8091      	strh	r1, [r2, #4]
 8018b3e:	9902      	ldr	r1, [sp, #8]
 8018b40:	f101 0c20 	add.w	ip, r1, #32
 8018b44:	9901      	ldr	r1, [sp, #4]
 8018b46:	ebac 0c01 	sub.w	ip, ip, r1
 8018b4a:	fb03 630c 	mla	r3, r3, ip, r6
 8018b4e:	80d3      	strh	r3, [r2, #6]
 8018b50:	e750      	b.n	80189f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018b52:	9d05      	ldr	r5, [sp, #20]
 8018b54:	1aa2      	subs	r2, r4, r2
 8018b56:	eba5 0501 	sub.w	r5, r5, r1
 8018b5a:	9202      	str	r2, [sp, #8]
 8018b5c:	9508      	str	r5, [sp, #32]
 8018b5e:	f140 8128 	bpl.w	8018db2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8018b62:	9a03      	ldr	r2, [sp, #12]
 8018b64:	2a00      	cmp	r2, #0
 8018b66:	f6ff af45 	blt.w	80189f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018b6a:	9a02      	ldr	r2, [sp, #8]
 8018b6c:	f04f 34ff 	mov.w	r4, #4294967295
 8018b70:	4252      	negs	r2, r2
 8018b72:	940b      	str	r4, [sp, #44]	; 0x2c
 8018b74:	2400      	movs	r4, #0
 8018b76:	9202      	str	r2, [sp, #8]
 8018b78:	9a06      	ldr	r2, [sp, #24]
 8018b7a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8018b7e:	9206      	str	r2, [sp, #24]
 8018b80:	462a      	mov	r2, r5
 8018b82:	435a      	muls	r2, r3
 8018b84:	9401      	str	r4, [sp, #4]
 8018b86:	9c02      	ldr	r4, [sp, #8]
 8018b88:	9d02      	ldr	r5, [sp, #8]
 8018b8a:	fb92 f4f4 	sdiv	r4, r2, r4
 8018b8e:	fb05 2214 	mls	r2, r5, r4, r2
 8018b92:	2a00      	cmp	r2, #0
 8018b94:	9207      	str	r2, [sp, #28]
 8018b96:	bfbc      	itt	lt
 8018b98:	1952      	addlt	r2, r2, r5
 8018b9a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018b9e:	6905      	ldr	r5, [r0, #16]
 8018ba0:	bfb8      	it	lt
 8018ba2:	9207      	strlt	r2, [sp, #28]
 8018ba4:	eb04 0901 	add.w	r9, r4, r1
 8018ba8:	9a01      	ldr	r2, [sp, #4]
 8018baa:	ea4f 1669 	mov.w	r6, r9, asr #5
 8018bae:	429a      	cmp	r2, r3
 8018bb0:	f040 8111 	bne.w	8018dd6 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8018bb4:	f9b5 3000 	ldrsh.w	r3, [r5]
 8018bb8:	429e      	cmp	r6, r3
 8018bba:	d104      	bne.n	8018bc6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8018bbc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018bc0:	9a03      	ldr	r2, [sp, #12]
 8018bc2:	429a      	cmp	r2, r3
 8018bc4:	d01b      	beq.n	8018bfe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018bc6:	88ea      	ldrh	r2, [r5, #6]
 8018bc8:	88ab      	ldrh	r3, [r5, #4]
 8018bca:	4313      	orrs	r3, r2
 8018bcc:	d010      	beq.n	8018bf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018bce:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8018bd2:	2a00      	cmp	r2, #0
 8018bd4:	db0c      	blt.n	8018bf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018bd6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018bd8:	429a      	cmp	r2, r3
 8018bda:	da09      	bge.n	8018bf0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8018bdc:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8018be0:	429a      	cmp	r2, r3
 8018be2:	f102 0201 	add.w	r2, r2, #1
 8018be6:	bf38      	it	cc
 8018be8:	3508      	addcc	r5, #8
 8018bea:	6082      	str	r2, [r0, #8]
 8018bec:	bf38      	it	cc
 8018bee:	6105      	strcc	r5, [r0, #16]
 8018bf0:	6903      	ldr	r3, [r0, #16]
 8018bf2:	9a03      	ldr	r2, [sp, #12]
 8018bf4:	801e      	strh	r6, [r3, #0]
 8018bf6:	805a      	strh	r2, [r3, #2]
 8018bf8:	2200      	movs	r2, #0
 8018bfa:	809a      	strh	r2, [r3, #4]
 8018bfc:	80da      	strh	r2, [r3, #6]
 8018bfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018c00:	9a03      	ldr	r2, [sp, #12]
 8018c02:	6901      	ldr	r1, [r0, #16]
 8018c04:	441a      	add	r2, r3
 8018c06:	f9b1 3000 	ldrsh.w	r3, [r1]
 8018c0a:	42b3      	cmp	r3, r6
 8018c0c:	d103      	bne.n	8018c16 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8018c0e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8018c12:	429a      	cmp	r2, r3
 8018c14:	d01a      	beq.n	8018c4c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8018c16:	88cc      	ldrh	r4, [r1, #6]
 8018c18:	888b      	ldrh	r3, [r1, #4]
 8018c1a:	4323      	orrs	r3, r4
 8018c1c:	d010      	beq.n	8018c40 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018c1e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018c22:	2c00      	cmp	r4, #0
 8018c24:	db0c      	blt.n	8018c40 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018c26:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018c28:	429c      	cmp	r4, r3
 8018c2a:	da09      	bge.n	8018c40 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8018c2c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018c30:	429c      	cmp	r4, r3
 8018c32:	f104 0401 	add.w	r4, r4, #1
 8018c36:	bf38      	it	cc
 8018c38:	3108      	addcc	r1, #8
 8018c3a:	6084      	str	r4, [r0, #8]
 8018c3c:	bf38      	it	cc
 8018c3e:	6101      	strcc	r1, [r0, #16]
 8018c40:	6903      	ldr	r3, [r0, #16]
 8018c42:	2100      	movs	r1, #0
 8018c44:	801e      	strh	r6, [r3, #0]
 8018c46:	805a      	strh	r2, [r3, #2]
 8018c48:	8099      	strh	r1, [r3, #4]
 8018c4a:	80d9      	strh	r1, [r3, #6]
 8018c4c:	9b06      	ldr	r3, [sp, #24]
 8018c4e:	4293      	cmp	r3, r2
 8018c50:	f000 8082 	beq.w	8018d58 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8018c54:	9b08      	ldr	r3, [sp, #32]
 8018c56:	9902      	ldr	r1, [sp, #8]
 8018c58:	015b      	lsls	r3, r3, #5
 8018c5a:	9c02      	ldr	r4, [sp, #8]
 8018c5c:	fb93 f1f1 	sdiv	r1, r3, r1
 8018c60:	fb04 3311 	mls	r3, r4, r1, r3
 8018c64:	9103      	str	r1, [sp, #12]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	9308      	str	r3, [sp, #32]
 8018c6a:	da04      	bge.n	8018c76 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8018c6c:	1e4b      	subs	r3, r1, #1
 8018c6e:	9303      	str	r3, [sp, #12]
 8018c70:	9b08      	ldr	r3, [sp, #32]
 8018c72:	4423      	add	r3, r4
 8018c74:	9308      	str	r3, [sp, #32]
 8018c76:	9b07      	ldr	r3, [sp, #28]
 8018c78:	464f      	mov	r7, r9
 8018c7a:	9902      	ldr	r1, [sp, #8]
 8018c7c:	2600      	movs	r6, #0
 8018c7e:	1a5b      	subs	r3, r3, r1
 8018c80:	9307      	str	r3, [sp, #28]
 8018c82:	9b01      	ldr	r3, [sp, #4]
 8018c84:	f1c3 0320 	rsb	r3, r3, #32
 8018c88:	930e      	str	r3, [sp, #56]	; 0x38
 8018c8a:	990e      	ldr	r1, [sp, #56]	; 0x38
 8018c8c:	9b01      	ldr	r3, [sp, #4]
 8018c8e:	1a5b      	subs	r3, r3, r1
 8018c90:	930a      	str	r3, [sp, #40]	; 0x28
 8018c92:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8018c96:	185b      	adds	r3, r3, r1
 8018c98:	bf58      	it	pl
 8018c9a:	9902      	ldrpl	r1, [sp, #8]
 8018c9c:	9307      	str	r3, [sp, #28]
 8018c9e:	bf57      	itett	pl
 8018ca0:	1a5b      	subpl	r3, r3, r1
 8018ca2:	9903      	ldrmi	r1, [sp, #12]
 8018ca4:	9307      	strpl	r3, [sp, #28]
 8018ca6:	9b03      	ldrpl	r3, [sp, #12]
 8018ca8:	bf58      	it	pl
 8018caa:	1c59      	addpl	r1, r3, #1
 8018cac:	2a00      	cmp	r2, #0
 8018cae:	4489      	add	r9, r1
 8018cb0:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8018cb4:	db2e      	blt.n	8018d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018cb6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018cb8:	4293      	cmp	r3, r2
 8018cba:	dd2b      	ble.n	8018d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018cbc:	9c01      	ldr	r4, [sp, #4]
 8018cbe:	6905      	ldr	r5, [r0, #16]
 8018cc0:	46a0      	mov	r8, r4
 8018cc2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8018cc4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8018cc8:	45a0      	cmp	r8, r4
 8018cca:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8018cce:	f040 814c 	bne.w	8018f6a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8018cd2:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018cd6:	4551      	cmp	r1, sl
 8018cd8:	d103      	bne.n	8018ce2 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8018cda:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018cde:	4291      	cmp	r1, r2
 8018ce0:	d018      	beq.n	8018d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018ce2:	ea5c 010e 	orrs.w	r1, ip, lr
 8018ce6:	d00f      	beq.n	8018d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018ce8:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8018cec:	2900      	cmp	r1, #0
 8018cee:	db0b      	blt.n	8018d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018cf0:	428b      	cmp	r3, r1
 8018cf2:	dd09      	ble.n	8018d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8018cf4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8018cf8:	4299      	cmp	r1, r3
 8018cfa:	f101 0101 	add.w	r1, r1, #1
 8018cfe:	bf38      	it	cc
 8018d00:	3508      	addcc	r5, #8
 8018d02:	6081      	str	r1, [r0, #8]
 8018d04:	bf38      	it	cc
 8018d06:	6105      	strcc	r5, [r0, #16]
 8018d08:	6903      	ldr	r3, [r0, #16]
 8018d0a:	f8a3 a000 	strh.w	sl, [r3]
 8018d0e:	805a      	strh	r2, [r3, #2]
 8018d10:	809e      	strh	r6, [r3, #4]
 8018d12:	80de      	strh	r6, [r3, #6]
 8018d14:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018d16:	6901      	ldr	r1, [r0, #16]
 8018d18:	441a      	add	r2, r3
 8018d1a:	88cc      	ldrh	r4, [r1, #6]
 8018d1c:	888b      	ldrh	r3, [r1, #4]
 8018d1e:	4323      	orrs	r3, r4
 8018d20:	d010      	beq.n	8018d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018d22:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8018d26:	2c00      	cmp	r4, #0
 8018d28:	db0c      	blt.n	8018d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018d2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8018d2c:	429c      	cmp	r4, r3
 8018d2e:	da09      	bge.n	8018d44 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8018d30:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8018d34:	429c      	cmp	r4, r3
 8018d36:	f104 0401 	add.w	r4, r4, #1
 8018d3a:	bf38      	it	cc
 8018d3c:	3108      	addcc	r1, #8
 8018d3e:	6084      	str	r4, [r0, #8]
 8018d40:	bf38      	it	cc
 8018d42:	6101      	strcc	r1, [r0, #16]
 8018d44:	6903      	ldr	r3, [r0, #16]
 8018d46:	464f      	mov	r7, r9
 8018d48:	f8a3 a000 	strh.w	sl, [r3]
 8018d4c:	805a      	strh	r2, [r3, #2]
 8018d4e:	809e      	strh	r6, [r3, #4]
 8018d50:	80de      	strh	r6, [r3, #6]
 8018d52:	9b06      	ldr	r3, [sp, #24]
 8018d54:	4293      	cmp	r3, r2
 8018d56:	d19c      	bne.n	8018c92 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8018d58:	9b01      	ldr	r3, [sp, #4]
 8018d5a:	6907      	ldr	r7, [r0, #16]
 8018d5c:	f1c3 0620 	rsb	r6, r3, #32
 8018d60:	9b05      	ldr	r3, [sp, #20]
 8018d62:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8018d66:	9b04      	ldr	r3, [sp, #16]
 8018d68:	429e      	cmp	r6, r3
 8018d6a:	f040 81c7 	bne.w	80190fc <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8018d6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8018d72:	459e      	cmp	lr, r3
 8018d74:	d104      	bne.n	8018d80 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8018d76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018d7a:	429a      	cmp	r2, r3
 8018d7c:	f43f ae3a 	beq.w	80189f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018d80:	88f9      	ldrh	r1, [r7, #6]
 8018d82:	88bb      	ldrh	r3, [r7, #4]
 8018d84:	430b      	orrs	r3, r1
 8018d86:	d010      	beq.n	8018daa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018d88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	db0c      	blt.n	8018daa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018d90:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8018d92:	428b      	cmp	r3, r1
 8018d94:	da09      	bge.n	8018daa <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8018d96:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8018d9a:	428b      	cmp	r3, r1
 8018d9c:	f103 0301 	add.w	r3, r3, #1
 8018da0:	bf38      	it	cc
 8018da2:	3708      	addcc	r7, #8
 8018da4:	6083      	str	r3, [r0, #8]
 8018da6:	bf38      	it	cc
 8018da8:	6107      	strcc	r7, [r0, #16]
 8018daa:	6903      	ldr	r3, [r0, #16]
 8018dac:	f8a3 e000 	strh.w	lr, [r3]
 8018db0:	e603      	b.n	80189ba <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8018db2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8018db4:	9c03      	ldr	r4, [sp, #12]
 8018db6:	42a2      	cmp	r2, r4
 8018db8:	f6ff ae1c 	blt.w	80189f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8018dbc:	9c06      	ldr	r4, [sp, #24]
 8018dbe:	42a2      	cmp	r2, r4
 8018dc0:	9c08      	ldr	r4, [sp, #32]
 8018dc2:	bfbc      	itt	lt
 8018dc4:	3201      	addlt	r2, #1
 8018dc6:	9206      	strlt	r2, [sp, #24]
 8018dc8:	f1c3 0220 	rsb	r2, r3, #32
 8018dcc:	4362      	muls	r2, r4
 8018dce:	2401      	movs	r4, #1
 8018dd0:	940b      	str	r4, [sp, #44]	; 0x2c
 8018dd2:	2420      	movs	r4, #32
 8018dd4:	e6d6      	b.n	8018b84 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8018dd6:	ea4f 1861 	mov.w	r8, r1, asr #5
 8018dda:	f009 021f 	and.w	r2, r9, #31
 8018dde:	f001 011f 	and.w	r1, r1, #31
 8018de2:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8018de6:	920c      	str	r2, [sp, #48]	; 0x30
 8018de8:	45b0      	cmp	r8, r6
 8018dea:	9a01      	ldr	r2, [sp, #4]
 8018dec:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8018df0:	eba2 0203 	sub.w	r2, r2, r3
 8018df4:	d108      	bne.n	8018e08 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8018df6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018df8:	4496      	add	lr, r2
 8018dfa:	4419      	add	r1, r3
 8018dfc:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018e00:	fb02 a101 	mla	r1, r2, r1, sl
 8018e04:	80e9      	strh	r1, [r5, #6]
 8018e06:	e6fa      	b.n	8018bfe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018e08:	2c00      	cmp	r4, #0
 8018e0a:	f2c0 80a7 	blt.w	8018f5c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8018e0e:	2701      	movs	r7, #1
 8018e10:	f1c1 0c20 	rsb	ip, r1, #32
 8018e14:	970a      	str	r7, [sp, #40]	; 0x28
 8018e16:	2720      	movs	r7, #32
 8018e18:	fb02 f20c 	mul.w	r2, r2, ip
 8018e1c:	9709      	str	r7, [sp, #36]	; 0x24
 8018e1e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8018e20:	fb92 fcf4 	sdiv	ip, r2, r4
 8018e24:	fb04 221c 	mls	r2, r4, ip, r2
 8018e28:	4439      	add	r1, r7
 8018e2a:	2a00      	cmp	r2, #0
 8018e2c:	bfbc      	itt	lt
 8018e2e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8018e32:	1912      	addlt	r2, r2, r4
 8018e34:	fb0c a101 	mla	r1, ip, r1, sl
 8018e38:	44e6      	add	lr, ip
 8018e3a:	80e9      	strh	r1, [r5, #6]
 8018e3c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8018e3e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8018e42:	eb08 0501 	add.w	r5, r8, r1
 8018e46:	6901      	ldr	r1, [r0, #16]
 8018e48:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8018e4c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8018e50:	ea58 070e 	orrs.w	r7, r8, lr
 8018e54:	d010      	beq.n	8018e78 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018e56:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8018e5a:	f1be 0f00 	cmp.w	lr, #0
 8018e5e:	db0b      	blt.n	8018e78 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018e60:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018e62:	45be      	cmp	lr, r7
 8018e64:	da08      	bge.n	8018e78 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8018e66:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8018e6a:	45be      	cmp	lr, r7
 8018e6c:	bf3c      	itt	cc
 8018e6e:	3108      	addcc	r1, #8
 8018e70:	6101      	strcc	r1, [r0, #16]
 8018e72:	f10e 0101 	add.w	r1, lr, #1
 8018e76:	6081      	str	r1, [r0, #8]
 8018e78:	6901      	ldr	r1, [r0, #16]
 8018e7a:	f04f 0e00 	mov.w	lr, #0
 8018e7e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8018e82:	42ae      	cmp	r6, r5
 8018e84:	800d      	strh	r5, [r1, #0]
 8018e86:	4463      	add	r3, ip
 8018e88:	f8a1 8002 	strh.w	r8, [r1, #2]
 8018e8c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8018e90:	f8a1 e006 	strh.w	lr, [r1, #6]
 8018e94:	d053      	beq.n	8018f3e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8018e96:	9901      	ldr	r1, [sp, #4]
 8018e98:	1b12      	subs	r2, r2, r4
 8018e9a:	1ac9      	subs	r1, r1, r3
 8018e9c:	4461      	add	r1, ip
 8018e9e:	0149      	lsls	r1, r1, #5
 8018ea0:	fb91 fef4 	sdiv	lr, r1, r4
 8018ea4:	fb04 111e 	mls	r1, r4, lr, r1
 8018ea8:	2900      	cmp	r1, #0
 8018eaa:	bfbc      	itt	lt
 8018eac:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8018eb0:	1909      	addlt	r1, r1, r4
 8018eb2:	f10e 0701 	add.w	r7, lr, #1
 8018eb6:	970d      	str	r7, [sp, #52]	; 0x34
 8018eb8:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8018ebc:	1852      	adds	r2, r2, r1
 8018ebe:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018ec0:	bf54      	ite	pl
 8018ec2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	; 0x34
 8018ec6:	46f4      	movmi	ip, lr
 8018ec8:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8018ecc:	bf58      	it	pl
 8018ece:	1b12      	subpl	r2, r2, r4
 8018ed0:	4463      	add	r3, ip
 8018ed2:	443d      	add	r5, r7
 8018ed4:	44e3      	add	fp, ip
 8018ed6:	f8aa b004 	strh.w	fp, [sl, #4]
 8018eda:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8018ede:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8018ee2:	f8aa b006 	strh.w	fp, [sl, #6]
 8018ee6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018eea:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8018eee:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8018ef2:	ea5b 070a 	orrs.w	r7, fp, sl
 8018ef6:	d014      	beq.n	8018f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018ef8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8018efc:	f1ba 0f00 	cmp.w	sl, #0
 8018f00:	db0f      	blt.n	8018f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018f02:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018f04:	45ba      	cmp	sl, r7
 8018f06:	da0c      	bge.n	8018f22 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8018f08:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8018f0c:	45ba      	cmp	sl, r7
 8018f0e:	f10a 0a01 	add.w	sl, sl, #1
 8018f12:	bf38      	it	cc
 8018f14:	f10c 0c08 	addcc.w	ip, ip, #8
 8018f18:	f8c0 a008 	str.w	sl, [r0, #8]
 8018f1c:	bf38      	it	cc
 8018f1e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8018f22:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018f26:	f04f 0700 	mov.w	r7, #0
 8018f2a:	42ae      	cmp	r6, r5
 8018f2c:	f8ac 5000 	strh.w	r5, [ip]
 8018f30:	f8ac 8002 	strh.w	r8, [ip, #2]
 8018f34:	f8ac 7004 	strh.w	r7, [ip, #4]
 8018f38:	f8ac 7006 	strh.w	r7, [ip, #6]
 8018f3c:	d1bc      	bne.n	8018eb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8018f3e:	6904      	ldr	r4, [r0, #16]
 8018f40:	9a01      	ldr	r2, [sp, #4]
 8018f42:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018f44:	1ad3      	subs	r3, r2, r3
 8018f46:	88a2      	ldrh	r2, [r4, #4]
 8018f48:	3120      	adds	r1, #32
 8018f4a:	441a      	add	r2, r3
 8018f4c:	80a2      	strh	r2, [r4, #4]
 8018f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018f50:	1a89      	subs	r1, r1, r2
 8018f52:	88e2      	ldrh	r2, [r4, #6]
 8018f54:	fb03 2301 	mla	r3, r3, r1, r2
 8018f58:	80e3      	strh	r3, [r4, #6]
 8018f5a:	e650      	b.n	8018bfe <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8018f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8018f60:	434a      	muls	r2, r1
 8018f62:	4264      	negs	r4, r4
 8018f64:	970a      	str	r7, [sp, #40]	; 0x28
 8018f66:	2700      	movs	r7, #0
 8018f68:	e758      	b.n	8018e1c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8018f6a:	ea4f 1867 	mov.w	r8, r7, asr #5
 8018f6e:	f009 031f 	and.w	r3, r9, #31
 8018f72:	f007 071f 	and.w	r7, r7, #31
 8018f76:	fa1f fc8c 	uxth.w	ip, ip
 8018f7a:	45d0      	cmp	r8, sl
 8018f7c:	930f      	str	r3, [sp, #60]	; 0x3c
 8018f7e:	fa1f fe8e 	uxth.w	lr, lr
 8018f82:	d10a      	bne.n	8018f9a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8018f84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f86:	449c      	add	ip, r3
 8018f88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018f8a:	441f      	add	r7, r3
 8018f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018f8e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018f92:	fb03 e707 	mla	r7, r3, r7, lr
 8018f96:	80ef      	strh	r7, [r5, #6]
 8018f98:	e6bc      	b.n	8018d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8018f9a:	2900      	cmp	r1, #0
 8018f9c:	f2c0 80a6 	blt.w	80190ec <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8018fa0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8018fa2:	f1c7 0320 	rsb	r3, r7, #32
 8018fa6:	4363      	muls	r3, r4
 8018fa8:	2401      	movs	r4, #1
 8018faa:	940d      	str	r4, [sp, #52]	; 0x34
 8018fac:	2420      	movs	r4, #32
 8018fae:	940c      	str	r4, [sp, #48]	; 0x30
 8018fb0:	fb93 f4f1 	sdiv	r4, r3, r1
 8018fb4:	fb01 3b14 	mls	fp, r1, r4, r3
 8018fb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018fba:	f1bb 0f00 	cmp.w	fp, #0
 8018fbe:	441f      	add	r7, r3
 8018fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018fc2:	bfbc      	itt	lt
 8018fc4:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8018fc8:	448b      	addlt	fp, r1
 8018fca:	fb04 e707 	mla	r7, r4, r7, lr
 8018fce:	44a4      	add	ip, r4
 8018fd0:	80ef      	strh	r7, [r5, #6]
 8018fd2:	f8a5 c004 	strh.w	ip, [r5, #4]
 8018fd6:	eb08 0503 	add.w	r5, r8, r3
 8018fda:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8018fde:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8018fe2:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8018fe6:	ea5e 0307 	orrs.w	r3, lr, r7
 8018fea:	d011      	beq.n	8019010 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018fec:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8018ff0:	f1be 0f00 	cmp.w	lr, #0
 8018ff4:	db0c      	blt.n	8019010 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018ff6:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 8018ff8:	45be      	cmp	lr, r7
 8018ffa:	da09      	bge.n	8019010 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8018ffc:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8019000:	45be      	cmp	lr, r7
 8019002:	bf3c      	itt	cc
 8019004:	f10c 0708 	addcc.w	r7, ip, #8
 8019008:	6107      	strcc	r7, [r0, #16]
 801900a:	f10e 0701 	add.w	r7, lr, #1
 801900e:	6087      	str	r7, [r0, #8]
 8019010:	6907      	ldr	r7, [r0, #16]
 8019012:	b213      	sxth	r3, r2
 8019014:	4555      	cmp	r5, sl
 8019016:	9310      	str	r3, [sp, #64]	; 0x40
 8019018:	807b      	strh	r3, [r7, #2]
 801901a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801901c:	803d      	strh	r5, [r7, #0]
 801901e:	80be      	strh	r6, [r7, #4]
 8019020:	eb04 0c03 	add.w	ip, r4, r3
 8019024:	80fe      	strh	r6, [r7, #6]
 8019026:	d050      	beq.n	80190ca <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8019028:	9b01      	ldr	r3, [sp, #4]
 801902a:	eba3 070c 	sub.w	r7, r3, ip
 801902e:	ebab 0301 	sub.w	r3, fp, r1
 8019032:	443c      	add	r4, r7
 8019034:	9309      	str	r3, [sp, #36]	; 0x24
 8019036:	0164      	lsls	r4, r4, #5
 8019038:	fb94 f8f1 	sdiv	r8, r4, r1
 801903c:	fb01 4418 	mls	r4, r1, r8, r4
 8019040:	2c00      	cmp	r4, #0
 8019042:	bfbc      	itt	lt
 8019044:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8019048:	1864      	addlt	r4, r4, r1
 801904a:	f108 0701 	add.w	r7, r8, #1
 801904e:	9711      	str	r7, [sp, #68]	; 0x44
 8019050:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019052:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019056:	191b      	adds	r3, r3, r4
 8019058:	f8be b004 	ldrh.w	fp, [lr, #4]
 801905c:	bf54      	ite	pl
 801905e:	9f11      	ldrpl	r7, [sp, #68]	; 0x44
 8019060:	4647      	movmi	r7, r8
 8019062:	9309      	str	r3, [sp, #36]	; 0x24
 8019064:	bf58      	it	pl
 8019066:	1a5b      	subpl	r3, r3, r1
 8019068:	44bb      	add	fp, r7
 801906a:	44bc      	add	ip, r7
 801906c:	bf58      	it	pl
 801906e:	9309      	strpl	r3, [sp, #36]	; 0x24
 8019070:	f8ae b004 	strh.w	fp, [lr, #4]
 8019074:	f8be b006 	ldrh.w	fp, [lr, #6]
 8019078:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 801907c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 801907e:	f8ae b006 	strh.w	fp, [lr, #6]
 8019082:	443d      	add	r5, r7
 8019084:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8019088:	f8be b006 	ldrh.w	fp, [lr, #6]
 801908c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8019090:	ea5b 0307 	orrs.w	r3, fp, r7
 8019094:	d011      	beq.n	80190ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8019096:	f9be b002 	ldrsh.w	fp, [lr, #2]
 801909a:	f1bb 0f00 	cmp.w	fp, #0
 801909e:	db0c      	blt.n	80190ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80190a0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 80190a2:	45bb      	cmp	fp, r7
 80190a4:	da09      	bge.n	80190ba <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 80190a6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80190aa:	45bb      	cmp	fp, r7
 80190ac:	bf3c      	itt	cc
 80190ae:	f10e 0708 	addcc.w	r7, lr, #8
 80190b2:	6107      	strcc	r7, [r0, #16]
 80190b4:	f10b 0701 	add.w	r7, fp, #1
 80190b8:	6087      	str	r7, [r0, #8]
 80190ba:	6907      	ldr	r7, [r0, #16]
 80190bc:	4555      	cmp	r5, sl
 80190be:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80190c0:	803d      	strh	r5, [r7, #0]
 80190c2:	807b      	strh	r3, [r7, #2]
 80190c4:	80be      	strh	r6, [r7, #4]
 80190c6:	80fe      	strh	r6, [r7, #6]
 80190c8:	d1c2      	bne.n	8019050 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 80190ca:	9b01      	ldr	r3, [sp, #4]
 80190cc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 80190ce:	eba3 0c0c 	sub.w	ip, r3, ip
 80190d2:	6903      	ldr	r3, [r0, #16]
 80190d4:	3720      	adds	r7, #32
 80190d6:	8899      	ldrh	r1, [r3, #4]
 80190d8:	4461      	add	r1, ip
 80190da:	8099      	strh	r1, [r3, #4]
 80190dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80190de:	1a7f      	subs	r7, r7, r1
 80190e0:	88d9      	ldrh	r1, [r3, #6]
 80190e2:	fb0c 1c07 	mla	ip, ip, r7, r1
 80190e6:	f8a3 c006 	strh.w	ip, [r3, #6]
 80190ea:	e613      	b.n	8018d14 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80190ec:	f04f 34ff 	mov.w	r4, #4294967295
 80190f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80190f2:	4249      	negs	r1, r1
 80190f4:	940d      	str	r4, [sp, #52]	; 0x34
 80190f6:	2400      	movs	r4, #0
 80190f8:	437b      	muls	r3, r7
 80190fa:	e758      	b.n	8018fae <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 80190fc:	9905      	ldr	r1, [sp, #20]
 80190fe:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8019102:	f009 0c1f 	and.w	ip, r9, #31
 8019106:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 801910a:	f001 011f 	and.w	r1, r1, #31
 801910e:	45f3      	cmp	fp, lr
 8019110:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8019114:	9102      	str	r1, [sp, #8]
 8019116:	9904      	ldr	r1, [sp, #16]
 8019118:	eba1 0406 	sub.w	r4, r1, r6
 801911c:	d108      	bne.n	8019130 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 801911e:	9b02      	ldr	r3, [sp, #8]
 8019120:	44a0      	add	r8, r4
 8019122:	449c      	add	ip, r3
 8019124:	f8a7 8004 	strh.w	r8, [r7, #4]
 8019128:	fb04 a40c 	mla	r4, r4, ip, sl
 801912c:	80fc      	strh	r4, [r7, #6]
 801912e:	e461      	b.n	80189f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8019130:	9905      	ldr	r1, [sp, #20]
 8019132:	ebb1 0109 	subs.w	r1, r1, r9
 8019136:	bf51      	iteee	pl
 8019138:	f1cc 0520 	rsbpl	r5, ip, #32
 801913c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8019140:	4249      	negmi	r1, r1
 8019142:	2500      	movmi	r5, #0
 8019144:	bf5d      	ittte	pl
 8019146:	436c      	mulpl	r4, r5
 8019148:	2520      	movpl	r5, #32
 801914a:	f04f 0901 	movpl.w	r9, #1
 801914e:	f04f 39ff 	movmi.w	r9, #4294967295
 8019152:	9501      	str	r5, [sp, #4]
 8019154:	9b01      	ldr	r3, [sp, #4]
 8019156:	fb94 f5f1 	sdiv	r5, r4, r1
 801915a:	fb01 4415 	mls	r4, r1, r5, r4
 801915e:	449c      	add	ip, r3
 8019160:	eb0b 0309 	add.w	r3, fp, r9
 8019164:	2c00      	cmp	r4, #0
 8019166:	bfbc      	itt	lt
 8019168:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801916c:	1864      	addlt	r4, r4, r1
 801916e:	44a8      	add	r8, r5
 8019170:	fb05 ac0c 	mla	ip, r5, ip, sl
 8019174:	f8a7 8004 	strh.w	r8, [r7, #4]
 8019178:	f8a7 c006 	strh.w	ip, [r7, #6]
 801917c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019180:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8019184:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019188:	ea58 0707 	orrs.w	r7, r8, r7
 801918c:	d011      	beq.n	80191b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801918e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8019192:	f1b8 0f00 	cmp.w	r8, #0
 8019196:	db0c      	blt.n	80191b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8019198:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801919a:	45b8      	cmp	r8, r7
 801919c:	da09      	bge.n	80191b2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801919e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 80191a2:	45b8      	cmp	r8, r7
 80191a4:	bf3c      	itt	cc
 80191a6:	f10c 0708 	addcc.w	r7, ip, #8
 80191aa:	6107      	strcc	r7, [r0, #16]
 80191ac:	f108 0701 	add.w	r7, r8, #1
 80191b0:	6087      	str	r7, [r0, #8]
 80191b2:	6907      	ldr	r7, [r0, #16]
 80191b4:	f04f 0c00 	mov.w	ip, #0
 80191b8:	b212      	sxth	r2, r2
 80191ba:	459e      	cmp	lr, r3
 80191bc:	803b      	strh	r3, [r7, #0]
 80191be:	442e      	add	r6, r5
 80191c0:	807a      	strh	r2, [r7, #2]
 80191c2:	f8a7 c004 	strh.w	ip, [r7, #4]
 80191c6:	f8a7 c006 	strh.w	ip, [r7, #6]
 80191ca:	d04b      	beq.n	8019264 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 80191cc:	9f04      	ldr	r7, [sp, #16]
 80191ce:	1a64      	subs	r4, r4, r1
 80191d0:	f04f 0a00 	mov.w	sl, #0
 80191d4:	1bbf      	subs	r7, r7, r6
 80191d6:	443d      	add	r5, r7
 80191d8:	016d      	lsls	r5, r5, #5
 80191da:	fb95 f8f1 	sdiv	r8, r5, r1
 80191de:	fb01 5518 	mls	r5, r1, r8, r5
 80191e2:	4565      	cmp	r5, ip
 80191e4:	bfbc      	itt	lt
 80191e6:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80191ea:	186d      	addlt	r5, r5, r1
 80191ec:	f108 0701 	add.w	r7, r8, #1
 80191f0:	9703      	str	r7, [sp, #12]
 80191f2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80191f6:	1964      	adds	r4, r4, r5
 80191f8:	444b      	add	r3, r9
 80191fa:	bf54      	ite	pl
 80191fc:	9f03      	ldrpl	r7, [sp, #12]
 80191fe:	4647      	movmi	r7, r8
 8019200:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8019204:	bf58      	it	pl
 8019206:	1a64      	subpl	r4, r4, r1
 8019208:	443e      	add	r6, r7
 801920a:	44bb      	add	fp, r7
 801920c:	f8ac b004 	strh.w	fp, [ip, #4]
 8019210:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019214:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8019218:	f8ac b006 	strh.w	fp, [ip, #6]
 801921c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8019220:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8019224:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8019228:	ea5b 0707 	orrs.w	r7, fp, r7
 801922c:	d011      	beq.n	8019252 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801922e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8019232:	f1bb 0f00 	cmp.w	fp, #0
 8019236:	db0c      	blt.n	8019252 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8019238:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 801923a:	45bb      	cmp	fp, r7
 801923c:	da09      	bge.n	8019252 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801923e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8019242:	45bb      	cmp	fp, r7
 8019244:	bf3c      	itt	cc
 8019246:	f10c 0708 	addcc.w	r7, ip, #8
 801924a:	6107      	strcc	r7, [r0, #16]
 801924c:	f10b 0701 	add.w	r7, fp, #1
 8019250:	6087      	str	r7, [r0, #8]
 8019252:	6907      	ldr	r7, [r0, #16]
 8019254:	459e      	cmp	lr, r3
 8019256:	803b      	strh	r3, [r7, #0]
 8019258:	807a      	strh	r2, [r7, #2]
 801925a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801925e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8019262:	d1c6      	bne.n	80191f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8019264:	9b04      	ldr	r3, [sp, #16]
 8019266:	1b9e      	subs	r6, r3, r6
 8019268:	6903      	ldr	r3, [r0, #16]
 801926a:	889a      	ldrh	r2, [r3, #4]
 801926c:	4432      	add	r2, r6
 801926e:	809a      	strh	r2, [r3, #4]
 8019270:	9a02      	ldr	r2, [sp, #8]
 8019272:	f102 0c20 	add.w	ip, r2, #32
 8019276:	9a01      	ldr	r2, [sp, #4]
 8019278:	ebac 0c02 	sub.w	ip, ip, r2
 801927c:	88da      	ldrh	r2, [r3, #6]
 801927e:	fb06 260c 	mla	r6, r6, ip, r2
 8019282:	80de      	strh	r6, [r3, #6]
 8019284:	f7ff bbb6 	b.w	80189f4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08019288 <_ZN8touchgfx7Outline6lineToEii>:
 8019288:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801928a:	079b      	lsls	r3, r3, #30
 801928c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801928e:	460e      	mov	r6, r1
 8019290:	4615      	mov	r5, r2
 8019292:	d511      	bpl.n	80192b8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8019294:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8019298:	ea86 0701 	eor.w	r7, r6, r1
 801929c:	ea85 0302 	eor.w	r3, r5, r2
 80192a0:	433b      	orrs	r3, r7
 80192a2:	d009      	beq.n	80192b8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80192a4:	4633      	mov	r3, r6
 80192a6:	9500      	str	r5, [sp, #0]
 80192a8:	f7ff fb4c 	bl	8018944 <_ZN8touchgfx7Outline10renderLineEiiii>
 80192ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80192ae:	f043 0301 	orr.w	r3, r3, #1
 80192b2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80192b6:	6243      	str	r3, [r0, #36]	; 0x24
 80192b8:	b003      	add	sp, #12
 80192ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080192bc <_ZN8touchgfx7Outline6moveToEii>:
 80192bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80192c0:	4615      	mov	r5, r2
 80192c2:	4604      	mov	r4, r0
 80192c4:	460e      	mov	r6, r1
 80192c6:	079a      	lsls	r2, r3, #30
 80192c8:	d401      	bmi.n	80192ce <_ZN8touchgfx7Outline6moveToEii+0x12>
 80192ca:	f7ff fb08 	bl	80188de <_ZN8touchgfx7Outline5resetEv>
 80192ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80192d0:	07db      	lsls	r3, r3, #31
 80192d2:	d504      	bpl.n	80192de <_ZN8touchgfx7Outline6moveToEii+0x22>
 80192d4:	4620      	mov	r0, r4
 80192d6:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 80192da:	f7ff ffd5 	bl	8019288 <_ZN8touchgfx7Outline6lineToEii>
 80192de:	6923      	ldr	r3, [r4, #16]
 80192e0:	1170      	asrs	r0, r6, #5
 80192e2:	1169      	asrs	r1, r5, #5
 80192e4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80192e8:	4290      	cmp	r0, r2
 80192ea:	d103      	bne.n	80192f4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 80192ec:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80192f0:	4291      	cmp	r1, r2
 80192f2:	d01a      	beq.n	801932a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80192f4:	88df      	ldrh	r7, [r3, #6]
 80192f6:	889a      	ldrh	r2, [r3, #4]
 80192f8:	433a      	orrs	r2, r7
 80192fa:	d010      	beq.n	801931e <_ZN8touchgfx7Outline6moveToEii+0x62>
 80192fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8019300:	2a00      	cmp	r2, #0
 8019302:	db0c      	blt.n	801931e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8019304:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8019306:	42ba      	cmp	r2, r7
 8019308:	da09      	bge.n	801931e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801930a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801930e:	42ba      	cmp	r2, r7
 8019310:	f102 0201 	add.w	r2, r2, #1
 8019314:	bf38      	it	cc
 8019316:	3308      	addcc	r3, #8
 8019318:	60a2      	str	r2, [r4, #8]
 801931a:	bf38      	it	cc
 801931c:	6123      	strcc	r3, [r4, #16]
 801931e:	6923      	ldr	r3, [r4, #16]
 8019320:	2200      	movs	r2, #0
 8019322:	8018      	strh	r0, [r3, #0]
 8019324:	8059      	strh	r1, [r3, #2]
 8019326:	809a      	strh	r2, [r3, #4]
 8019328:	80da      	strh	r2, [r3, #6]
 801932a:	6166      	str	r6, [r4, #20]
 801932c:	6225      	str	r5, [r4, #32]
 801932e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8019332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019334 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8019334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019338:	b0d0      	sub	sp, #320	; 0x140
 801933a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801933e:	466c      	mov	r4, sp
 8019340:	4627      	mov	r7, r4
 8019342:	1a0d      	subs	r5, r1, r0
 8019344:	f100 0308 	add.w	r3, r0, #8
 8019348:	2d48      	cmp	r5, #72	; 0x48
 801934a:	f340 80d5 	ble.w	80194f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801934e:	112d      	asrs	r5, r5, #4
 8019350:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8019354:	f9b0 9000 	ldrsh.w	r9, [r0]
 8019358:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801935c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8019360:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8019364:	6816      	ldr	r6, [r2, #0]
 8019366:	6006      	str	r6, [r0, #0]
 8019368:	6856      	ldr	r6, [r2, #4]
 801936a:	6046      	str	r6, [r0, #4]
 801936c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8019370:	f8a2 8002 	strh.w	r8, [r2, #2]
 8019374:	f8a2 e004 	strh.w	lr, [r2, #4]
 8019378:	f8a2 c006 	strh.w	ip, [r2, #6]
 801937c:	f1a1 0208 	sub.w	r2, r1, #8
 8019380:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8019384:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8019388:	4565      	cmp	r5, ip
 801938a:	db06      	blt.n	801939a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801938c:	d119      	bne.n	80193c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801938e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8019392:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8019396:	42ae      	cmp	r6, r5
 8019398:	dd13      	ble.n	80193c2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801939a:	460e      	mov	r6, r1
 801939c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80193a0:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80193a4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80193a8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80193ac:	601d      	str	r5, [r3, #0]
 80193ae:	6875      	ldr	r5, [r6, #4]
 80193b0:	605d      	str	r5, [r3, #4]
 80193b2:	f821 9c08 	strh.w	r9, [r1, #-8]
 80193b6:	f821 cc06 	strh.w	ip, [r1, #-6]
 80193ba:	f821 8c04 	strh.w	r8, [r1, #-4]
 80193be:	f821 ec02 	strh.w	lr, [r1, #-2]
 80193c2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80193c6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80193ca:	42ae      	cmp	r6, r5
 80193cc:	db06      	blt.n	80193dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80193ce:	d116      	bne.n	80193fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80193d0:	f9b0 c000 	ldrsh.w	ip, [r0]
 80193d4:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80193d8:	45ac      	cmp	ip, r5
 80193da:	da10      	bge.n	80193fe <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 80193dc:	681d      	ldr	r5, [r3, #0]
 80193de:	f9b0 8000 	ldrsh.w	r8, [r0]
 80193e2:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 80193e6:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 80193ea:	6005      	str	r5, [r0, #0]
 80193ec:	685d      	ldr	r5, [r3, #4]
 80193ee:	f8a0 8008 	strh.w	r8, [r0, #8]
 80193f2:	6045      	str	r5, [r0, #4]
 80193f4:	8146      	strh	r6, [r0, #10]
 80193f6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80193fa:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80193fe:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8019402:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8019406:	4565      	cmp	r5, ip
 8019408:	db06      	blt.n	8019418 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801940a:	d119      	bne.n	8019440 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801940c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8019410:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019414:	42ae      	cmp	r6, r5
 8019416:	da13      	bge.n	8019440 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8019418:	460e      	mov	r6, r1
 801941a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801941e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8019422:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8019426:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801942a:	6005      	str	r5, [r0, #0]
 801942c:	6875      	ldr	r5, [r6, #4]
 801942e:	6045      	str	r5, [r0, #4]
 8019430:	f821 9c08 	strh.w	r9, [r1, #-8]
 8019434:	f821 cc06 	strh.w	ip, [r1, #-6]
 8019438:	f821 8c04 	strh.w	r8, [r1, #-4]
 801943c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8019440:	3308      	adds	r3, #8
 8019442:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8019446:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801944a:	45e6      	cmp	lr, ip
 801944c:	dbf8      	blt.n	8019440 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801944e:	d105      	bne.n	801945c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8019450:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019454:	f9b0 5000 	ldrsh.w	r5, [r0]
 8019458:	42ae      	cmp	r6, r5
 801945a:	dbf1      	blt.n	8019440 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801945c:	4615      	mov	r5, r2
 801945e:	3a08      	subs	r2, #8
 8019460:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8019464:	45b4      	cmp	ip, r6
 8019466:	dbf9      	blt.n	801945c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8019468:	d105      	bne.n	8019476 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801946a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801946e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8019472:	45b0      	cmp	r8, r6
 8019474:	dbf2      	blt.n	801945c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8019476:	4293      	cmp	r3, r2
 8019478:	f1a5 0608 	sub.w	r6, r5, #8
 801947c:	d816      	bhi.n	80194ac <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801947e:	f8d6 c000 	ldr.w	ip, [r6]
 8019482:	f9b3 a000 	ldrsh.w	sl, [r3]
 8019486:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801948a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801948e:	f8c3 c000 	str.w	ip, [r3]
 8019492:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8019496:	f8c3 c004 	str.w	ip, [r3, #4]
 801949a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801949e:	f825 ec06 	strh.w	lr, [r5, #-6]
 80194a2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80194a6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80194aa:	e7c9      	b.n	8019440 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80194ac:	f8d6 e000 	ldr.w	lr, [r6]
 80194b0:	f9b0 a000 	ldrsh.w	sl, [r0]
 80194b4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80194b8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80194bc:	f8c0 e000 	str.w	lr, [r0]
 80194c0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80194c4:	1a16      	subs	r6, r2, r0
 80194c6:	f8c0 e004 	str.w	lr, [r0, #4]
 80194ca:	f825 ac08 	strh.w	sl, [r5, #-8]
 80194ce:	f825 cc06 	strh.w	ip, [r5, #-6]
 80194d2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80194d6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80194da:	1acd      	subs	r5, r1, r3
 80194dc:	10ed      	asrs	r5, r5, #3
 80194de:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80194e2:	bfb5      	itete	lt
 80194e4:	e9c4 0200 	strdlt	r0, r2, [r4]
 80194e8:	e9c4 3100 	strdge	r3, r1, [r4]
 80194ec:	460a      	movlt	r2, r1
 80194ee:	4603      	movge	r3, r0
 80194f0:	3408      	adds	r4, #8
 80194f2:	4618      	mov	r0, r3
 80194f4:	4611      	mov	r1, r2
 80194f6:	e724      	b.n	8019342 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80194f8:	4299      	cmp	r1, r3
 80194fa:	d927      	bls.n	801954c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80194fc:	f1a3 0210 	sub.w	r2, r3, #16
 8019500:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8019504:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8019508:	45ac      	cmp	ip, r5
 801950a:	db06      	blt.n	801951a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801950c:	d11c      	bne.n	8019548 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801950e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8019512:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8019516:	42ae      	cmp	r6, r5
 8019518:	da16      	bge.n	8019548 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801951a:	4615      	mov	r5, r2
 801951c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8019520:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8019524:	3a08      	subs	r2, #8
 8019526:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801952a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801952e:	6196      	str	r6, [r2, #24]
 8019530:	42a8      	cmp	r0, r5
 8019532:	686e      	ldr	r6, [r5, #4]
 8019534:	f8a2 9010 	strh.w	r9, [r2, #16]
 8019538:	61d6      	str	r6, [r2, #28]
 801953a:	f8a2 c012 	strh.w	ip, [r2, #18]
 801953e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8019542:	f8a2 e016 	strh.w	lr, [r2, #22]
 8019546:	d1db      	bne.n	8019500 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8019548:	3308      	adds	r3, #8
 801954a:	e7d5      	b.n	80194f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801954c:	42bc      	cmp	r4, r7
 801954e:	d903      	bls.n	8019558 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8019550:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8019554:	3c08      	subs	r4, #8
 8019556:	e6f4      	b.n	8019342 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8019558:	b050      	add	sp, #320	; 0x140
 801955a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801955e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801955e:	b510      	push	{r4, lr}
 8019560:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019562:	4604      	mov	r4, r0
 8019564:	07da      	lsls	r2, r3, #31
 8019566:	d507      	bpl.n	8019578 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8019568:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801956c:	f7ff fe8c 	bl	8019288 <_ZN8touchgfx7Outline6lineToEii>
 8019570:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019572:	f023 0301 	bic.w	r3, r3, #1
 8019576:	6243      	str	r3, [r0, #36]	; 0x24
 8019578:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801957a:	079b      	lsls	r3, r3, #30
 801957c:	d521      	bpl.n	80195c2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801957e:	6923      	ldr	r3, [r4, #16]
 8019580:	88d9      	ldrh	r1, [r3, #6]
 8019582:	889a      	ldrh	r2, [r3, #4]
 8019584:	430a      	orrs	r2, r1
 8019586:	d010      	beq.n	80195aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019588:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801958c:	2a00      	cmp	r2, #0
 801958e:	db0c      	blt.n	80195aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019590:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8019592:	428a      	cmp	r2, r1
 8019594:	da09      	bge.n	80195aa <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8019596:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801959a:	4291      	cmp	r1, r2
 801959c:	f102 0201 	add.w	r2, r2, #1
 80195a0:	bf88      	it	hi
 80195a2:	3308      	addhi	r3, #8
 80195a4:	60a2      	str	r2, [r4, #8]
 80195a6:	bf88      	it	hi
 80195a8:	6123      	strhi	r3, [r4, #16]
 80195aa:	68a1      	ldr	r1, [r4, #8]
 80195ac:	b129      	cbz	r1, 80195ba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80195ae:	6863      	ldr	r3, [r4, #4]
 80195b0:	4299      	cmp	r1, r3
 80195b2:	d802      	bhi.n	80195ba <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80195b4:	68e0      	ldr	r0, [r4, #12]
 80195b6:	f7ff febd 	bl	8019334 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80195ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80195bc:	f023 0302 	bic.w	r3, r3, #2
 80195c0:	6263      	str	r3, [r4, #36]	; 0x24
 80195c2:	68e0      	ldr	r0, [r4, #12]
 80195c4:	bd10      	pop	{r4, pc}
	...

080195c8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj>:
 80195c8:	4b02      	ldr	r3, [pc, #8]	; (80195d4 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0xc>)
 80195ca:	6018      	str	r0, [r3, #0]
 80195cc:	4b02      	ldr	r3, [pc, #8]	; (80195d8 <_ZN8touchgfx20CanvasWidgetRenderer11setupBufferEPhj+0x10>)
 80195ce:	6019      	str	r1, [r3, #0]
 80195d0:	4770      	bx	lr
 80195d2:	bf00      	nop
 80195d4:	2003c2c4 	.word	0x2003c2c4
 80195d8:	2003c2c8 	.word	0x2003c2c8

080195dc <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80195dc:	4b01      	ldr	r3, [pc, #4]	; (80195e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80195de:	6818      	ldr	r0, [r3, #0]
 80195e0:	4770      	bx	lr
 80195e2:	bf00      	nop
 80195e4:	2003c2c4 	.word	0x2003c2c4

080195e8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80195e8:	4b01      	ldr	r3, [pc, #4]	; (80195f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80195ea:	6818      	ldr	r0, [r3, #0]
 80195ec:	4770      	bx	lr
 80195ee:	bf00      	nop
 80195f0:	2003c2c8 	.word	0x2003c2c8

080195f4 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80195f4:	b510      	push	{r4, lr}
 80195f6:	6803      	ldr	r3, [r0, #0]
 80195f8:	460c      	mov	r4, r1
 80195fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195fc:	4798      	blx	r3
 80195fe:	1b03      	subs	r3, r0, r4
 8019600:	4258      	negs	r0, r3
 8019602:	4158      	adcs	r0, r3
 8019604:	bd10      	pop	{r4, pc}
	...

08019608 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8019608:	4b01      	ldr	r3, [pc, #4]	; (8019610 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801960a:	6019      	str	r1, [r3, #0]
 801960c:	4770      	bx	lr
 801960e:	bf00      	nop
 8019610:	2003c2cc 	.word	0x2003c2cc

08019614 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019618:	4696      	mov	lr, r2
 801961a:	b097      	sub	sp, #92	; 0x5c
 801961c:	4605      	mov	r5, r0
 801961e:	4614      	mov	r4, r2
 8019620:	460e      	mov	r6, r1
 8019622:	461f      	mov	r7, r3
 8019624:	f10d 0c1c 	add.w	ip, sp, #28
 8019628:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801962c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8019630:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8019634:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019638:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801963c:	f8de 3000 	ldr.w	r3, [lr]
 8019640:	f104 0e14 	add.w	lr, r4, #20
 8019644:	f8cc 3000 	str.w	r3, [ip]
 8019648:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801964c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019650:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8019654:	f8de 3000 	ldr.w	r3, [lr]
 8019658:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 801965c:	f8cc 3000 	str.w	r3, [ip]
 8019660:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8019664:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8019668:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801966c:	f8de 3000 	ldr.w	r3, [lr]
 8019670:	4631      	mov	r1, r6
 8019672:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8019674:	4628      	mov	r0, r5
 8019676:	f8cc 3000 	str.w	r3, [ip]
 801967a:	682b      	ldr	r3, [r5, #0]
 801967c:	9201      	str	r2, [sp, #4]
 801967e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8019680:	f8cd 8008 	str.w	r8, [sp, #8]
 8019684:	9200      	str	r2, [sp, #0]
 8019686:	aa07      	add	r2, sp, #28
 8019688:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801968c:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8019690:	463b      	mov	r3, r7
 8019692:	47d8      	blx	fp
 8019694:	46a6      	mov	lr, r4
 8019696:	f10d 0c1c 	add.w	ip, sp, #28
 801969a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801969e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196a2:	f8de 3000 	ldr.w	r3, [lr]
 80196a6:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 80196aa:	343c      	adds	r4, #60	; 0x3c
 80196ac:	f8cc 3000 	str.w	r3, [ip]
 80196b0:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 80196b4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80196b8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196bc:	f8de 3000 	ldr.w	r3, [lr]
 80196c0:	f8cc 3000 	str.w	r3, [ip]
 80196c4:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 80196c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80196ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80196ce:	6823      	ldr	r3, [r4, #0]
 80196d0:	4631      	mov	r1, r6
 80196d2:	4628      	mov	r0, r5
 80196d4:	f8cc 3000 	str.w	r3, [ip]
 80196d8:	682b      	ldr	r3, [r5, #0]
 80196da:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80196de:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80196e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80196e4:	9201      	str	r2, [sp, #4]
 80196e6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80196e8:	9200      	str	r2, [sp, #0]
 80196ea:	aa07      	add	r2, sp, #28
 80196ec:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80196ee:	463b      	mov	r3, r7
 80196f0:	47a0      	blx	r4
 80196f2:	b017      	add	sp, #92	; 0x5c
 80196f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080196f8 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80196f8:	2000      	movs	r0, #0
 80196fa:	4770      	bx	lr

080196fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80196fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019700:	b08d      	sub	sp, #52	; 0x34
 8019702:	4688      	mov	r8, r1
 8019704:	f8d3 c000 	ldr.w	ip, [r3]
 8019708:	9916      	ldr	r1, [sp, #88]	; 0x58
 801970a:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 801970e:	680f      	ldr	r7, [r1, #0]
 8019710:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 8019714:	eba7 070c 	sub.w	r7, r7, ip
 8019718:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 801971c:	edd3 6a07 	vldr	s13, [r3, #28]
 8019720:	42bc      	cmp	r4, r7
 8019722:	9918      	ldr	r1, [sp, #96]	; 0x60
 8019724:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 8019728:	bfa8      	it	ge
 801972a:	463c      	movge	r4, r7
 801972c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8019730:	f9ba 1000 	ldrsh.w	r1, [sl]
 8019734:	ee07 4a90 	vmov	s15, r4
 8019738:	eb09 0e0c 	add.w	lr, r9, ip
 801973c:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8019740:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8019744:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8019748:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 801974c:	4571      	cmp	r1, lr
 801974e:	ee25 4a04 	vmul.f32	s8, s10, s8
 8019752:	ee65 4a24 	vmul.f32	s9, s10, s9
 8019756:	ee25 5a27 	vmul.f32	s10, s10, s15
 801975a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801975e:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8019762:	ee32 1a05 	vadd.f32	s2, s4, s10
 8019766:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801976a:	ee36 0a84 	vadd.f32	s0, s13, s8
 801976e:	ee61 1a87 	vmul.f32	s3, s3, s14
 8019772:	ee22 2a07 	vmul.f32	s4, s4, s14
 8019776:	f340 808c 	ble.w	8019892 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801977a:	eba1 060e 	sub.w	r6, r1, lr
 801977e:	fb96 f5f4 	sdiv	r5, r6, r4
 8019782:	ee07 5a10 	vmov	s14, r5
 8019786:	2d00      	cmp	r5, #0
 8019788:	fb04 6615 	mls	r6, r4, r5, r6
 801978c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019790:	eea7 0a04 	vfma.f32	s0, s14, s8
 8019794:	eee7 0a24 	vfma.f32	s1, s14, s9
 8019798:	eea7 1a05 	vfma.f32	s2, s14, s10
 801979c:	dd12      	ble.n	80197c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 801979e:	ee70 6a44 	vsub.f32	s13, s0, s8
 80197a2:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80197a6:	ee31 2a45 	vsub.f32	s4, s2, s10
 80197aa:	eef5 6a40 	vcmp.f32	s13, #0.0
 80197ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197b2:	bf14      	ite	ne
 80197b4:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80197b8:	eeb0 7a67 	vmoveq.f32	s14, s15
 80197bc:	ee61 1a87 	vmul.f32	s3, s3, s14
 80197c0:	ee22 2a07 	vmul.f32	s4, s4, s14
 80197c4:	fb05 f204 	mul.w	r2, r5, r4
 80197c8:	1abf      	subs	r7, r7, r2
 80197ca:	4494      	add	ip, r2
 80197cc:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80197d0:	4411      	add	r1, r2
 80197d2:	eb09 020c 	add.w	r2, r9, ip
 80197d6:	b209      	sxth	r1, r1
 80197d8:	443a      	add	r2, r7
 80197da:	428a      	cmp	r2, r1
 80197dc:	bfc4      	itt	gt
 80197de:	eba1 0209 	subgt.w	r2, r1, r9
 80197e2:	eba2 070c 	subgt.w	r7, r2, ip
 80197e6:	2f00      	cmp	r7, #0
 80197e8:	dd50      	ble.n	801988c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80197ea:	fb97 f1f4 	sdiv	r1, r7, r4
 80197ee:	fb04 7211 	mls	r2, r4, r1, r7
 80197f2:	b90a      	cbnz	r2, 80197f8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80197f4:	3901      	subs	r1, #1
 80197f6:	4622      	mov	r2, r4
 80197f8:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80197fc:	6840      	ldr	r0, [r0, #4]
 80197fe:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 8019802:	44b6      	add	lr, r6
 8019804:	f8d0 a000 	ldr.w	sl, [r0]
 8019808:	2900      	cmp	r1, #0
 801980a:	bfcc      	ite	gt
 801980c:	46a1      	movgt	r9, r4
 801980e:	4691      	movle	r9, r2
 8019810:	900b      	str	r0, [sp, #44]	; 0x2c
 8019812:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8019814:	fb04 e505 	mla	r5, r4, r5, lr
 8019818:	eef0 6a42 	vmov.f32	s13, s4
 801981c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8019820:	9008      	str	r0, [sp, #32]
 8019822:	eeb0 7a61 	vmov.f32	s14, s3
 8019826:	9818      	ldr	r0, [sp, #96]	; 0x60
 8019828:	695b      	ldr	r3, [r3, #20]
 801982a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801982e:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8019832:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8019836:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8019838:	445b      	add	r3, fp
 801983a:	9307      	str	r3, [sp, #28]
 801983c:	ee16 3a90 	vmov	r3, s13
 8019840:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8019844:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8019848:	ee21 3a23 	vmul.f32	s6, s2, s7
 801984c:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8019850:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019854:	ee17 7a90 	vmov	r7, s15
 8019858:	ee73 7a42 	vsub.f32	s15, s6, s4
 801985c:	fb97 f7f4 	sdiv	r7, r7, r4
 8019860:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8019864:	ee17 ca90 	vmov	ip, s15
 8019868:	fb9c fcf4 	sdiv	ip, ip, r4
 801986c:	fb0c 3306 	mla	r3, ip, r6, r3
 8019870:	9302      	str	r3, [sp, #8]
 8019872:	ee17 3a10 	vmov	r3, s14
 8019876:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801987a:	fb07 3706 	mla	r7, r7, r6, r3
 801987e:	eba9 0306 	sub.w	r3, r9, r6
 8019882:	e9cd 4700 	strd	r4, r7, [sp]
 8019886:	f8da 4008 	ldr.w	r4, [sl, #8]
 801988a:	47a0      	blx	r4
 801988c:	b00d      	add	sp, #52	; 0x34
 801988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019892:	2500      	movs	r5, #0
 8019894:	462e      	mov	r6, r5
 8019896:	e799      	b.n	80197cc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08019898 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8019898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801989c:	b0db      	sub	sp, #364	; 0x16c
 801989e:	461d      	mov	r5, r3
 80198a0:	4614      	mov	r4, r2
 80198a2:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 80198a6:	910f      	str	r1, [sp, #60]	; 0x3c
 80198a8:	4629      	mov	r1, r5
 80198aa:	930a      	str	r3, [sp, #40]	; 0x28
 80198ac:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 80198b0:	9009      	str	r0, [sp, #36]	; 0x24
 80198b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80198b4:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 80198b8:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 80198bc:	9310      	str	r3, [sp, #64]	; 0x40
 80198be:	6803      	ldr	r3, [r0, #0]
 80198c0:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 80198c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80198c6:	47b8      	blx	r7
 80198c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80198ca:	6058      	str	r0, [r3, #4]
 80198cc:	2800      	cmp	r0, #0
 80198ce:	f000 83a1 	beq.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80198d2:	682b      	ldr	r3, [r5, #0]
 80198d4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80198d8:	ed94 7a02 	vldr	s14, [r4, #8]
 80198dc:	9314      	str	r3, [sp, #80]	; 0x50
 80198de:	686b      	ldr	r3, [r5, #4]
 80198e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80198e4:	9315      	str	r3, [sp, #84]	; 0x54
 80198e6:	4bc1      	ldr	r3, [pc, #772]	; (8019bec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80198e8:	7819      	ldrb	r1, [r3, #0]
 80198ea:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80198ee:	2900      	cmp	r1, #0
 80198f0:	bf16      	itet	ne
 80198f2:	4619      	movne	r1, r3
 80198f4:	4611      	moveq	r1, r2
 80198f6:	4613      	movne	r3, r2
 80198f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198fc:	9116      	str	r1, [sp, #88]	; 0x58
 80198fe:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 8019902:	f240 8387 	bls.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019906:	ed94 7a07 	vldr	s14, [r4, #28]
 801990a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019912:	f240 837f 	bls.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019916:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 801991a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801991e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019922:	f240 8377 	bls.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019926:	6822      	ldr	r2, [r4, #0]
 8019928:	4bb1      	ldr	r3, [pc, #708]	; (8019bf0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801992a:	429a      	cmp	r2, r3
 801992c:	f2c0 8372 	blt.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019930:	49b0      	ldr	r1, [pc, #704]	; (8019bf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8019932:	6963      	ldr	r3, [r4, #20]
 8019934:	428a      	cmp	r2, r1
 8019936:	f300 836d 	bgt.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801993a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 801993e:	48ae      	ldr	r0, [pc, #696]	; (8019bf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8019940:	33ff      	adds	r3, #255	; 0xff
 8019942:	4283      	cmp	r3, r0
 8019944:	f200 8366 	bhi.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019948:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801994a:	4dac      	ldr	r5, [pc, #688]	; (8019bfc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 801994c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8019950:	33ff      	adds	r3, #255	; 0xff
 8019952:	42ab      	cmp	r3, r5
 8019954:	f200 835e 	bhi.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019958:	6862      	ldr	r2, [r4, #4]
 801995a:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 801995e:	33ff      	adds	r3, #255	; 0xff
 8019960:	4283      	cmp	r3, r0
 8019962:	f200 8357 	bhi.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019966:	69a1      	ldr	r1, [r4, #24]
 8019968:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 801996c:	33ff      	adds	r3, #255	; 0xff
 801996e:	4283      	cmp	r3, r0
 8019970:	f200 8350 	bhi.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019974:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8019976:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 801997a:	30ff      	adds	r0, #255	; 0xff
 801997c:	42a8      	cmp	r0, r5
 801997e:	f200 8349 	bhi.w	801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8019982:	428a      	cmp	r2, r1
 8019984:	f280 8110 	bge.w	8019ba8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8019988:	429a      	cmp	r2, r3
 801998a:	f300 8119 	bgt.w	8019bc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 801998e:	4299      	cmp	r1, r3
 8019990:	f280 811d 	bge.w	8019bce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8019994:	2502      	movs	r5, #2
 8019996:	2701      	movs	r7, #1
 8019998:	46a9      	mov	r9, r5
 801999a:	46b8      	mov	r8, r7
 801999c:	f04f 0a00 	mov.w	sl, #0
 80199a0:	4621      	mov	r1, r4
 80199a2:	a849      	add	r0, sp, #292	; 0x124
 80199a4:	f003 fd04 	bl	801d3b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80199a8:	4622      	mov	r2, r4
 80199aa:	4653      	mov	r3, sl
 80199ac:	a949      	add	r1, sp, #292	; 0x124
 80199ae:	f8cd 9000 	str.w	r9, [sp]
 80199b2:	a819      	add	r0, sp, #100	; 0x64
 80199b4:	f003 fe2c 	bl	801d610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80199b8:	4622      	mov	r2, r4
 80199ba:	4653      	mov	r3, sl
 80199bc:	a949      	add	r1, sp, #292	; 0x124
 80199be:	f8cd 8000 	str.w	r8, [sp]
 80199c2:	a829      	add	r0, sp, #164	; 0xa4
 80199c4:	f003 fe24 	bl	801d610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80199c8:	4643      	mov	r3, r8
 80199ca:	4622      	mov	r2, r4
 80199cc:	a949      	add	r1, sp, #292	; 0x124
 80199ce:	f8cd 9000 	str.w	r9, [sp]
 80199d2:	a839      	add	r0, sp, #228	; 0xe4
 80199d4:	f003 fe1c 	bl	801d610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80199d8:	42af      	cmp	r7, r5
 80199da:	af12      	add	r7, sp, #72	; 0x48
 80199dc:	bfb7      	itett	lt
 80199de:	2300      	movlt	r3, #0
 80199e0:	2301      	movge	r3, #1
 80199e2:	ad29      	addlt	r5, sp, #164	; 0xa4
 80199e4:	ac19      	addlt	r4, sp, #100	; 0x64
 80199e6:	bfb1      	iteee	lt
 80199e8:	930e      	strlt	r3, [sp, #56]	; 0x38
 80199ea:	ad19      	addge	r5, sp, #100	; 0x64
 80199ec:	930e      	strge	r3, [sp, #56]	; 0x38
 80199ee:	ac29      	addge	r4, sp, #164	; 0xa4
 80199f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80199f2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80199f6:	e887 0003 	stmia.w	r7, {r0, r1}
 80199fa:	b928      	cbnz	r0, 8019a08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 80199fc:	4b80      	ldr	r3, [pc, #512]	; (8019c00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 80199fe:	6818      	ldr	r0, [r3, #0]
 8019a00:	6803      	ldr	r3, [r0, #0]
 8019a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a04:	4798      	blx	r3
 8019a06:	6038      	str	r0, [r7, #0]
 8019a08:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019a0a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019a0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019a12:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8019a14:	930c      	str	r3, [sp, #48]	; 0x30
 8019a16:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019a18:	6963      	ldr	r3, [r4, #20]
 8019a1a:	440b      	add	r3, r1
 8019a1c:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019a20:	4408      	add	r0, r1
 8019a22:	b200      	sxth	r0, r0
 8019a24:	4283      	cmp	r3, r0
 8019a26:	900d      	str	r0, [sp, #52]	; 0x34
 8019a28:	f280 80dd 	bge.w	8019be6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8019a2c:	428b      	cmp	r3, r1
 8019a2e:	da08      	bge.n	8019a42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019a30:	2a00      	cmp	r2, #0
 8019a32:	dd06      	ble.n	8019a42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019a34:	1acb      	subs	r3, r1, r3
 8019a36:	429a      	cmp	r2, r3
 8019a38:	f2c0 80e4 	blt.w	8019c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	f300 80e2 	bgt.w	8019c06 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8019a42:	6967      	ldr	r7, [r4, #20]
 8019a44:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019a48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019a4a:	443b      	add	r3, r7
 8019a4c:	461f      	mov	r7, r3
 8019a4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019a50:	1bdf      	subs	r7, r3, r7
 8019a52:	4297      	cmp	r7, r2
 8019a54:	bfa8      	it	ge
 8019a56:	4617      	movge	r7, r2
 8019a58:	2f00      	cmp	r7, #0
 8019a5a:	f340 8166 	ble.w	8019d2a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8019a5e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019a60:	6829      	ldr	r1, [r5, #0]
 8019a62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019a66:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019a6a:	4411      	add	r1, r2
 8019a6c:	6820      	ldr	r0, [r4, #0]
 8019a6e:	4299      	cmp	r1, r3
 8019a70:	dd1a      	ble.n	8019aa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019a72:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019a76:	4402      	add	r2, r0
 8019a78:	440b      	add	r3, r1
 8019a7a:	b21b      	sxth	r3, r3
 8019a7c:	429a      	cmp	r2, r3
 8019a7e:	dc13      	bgt.n	8019aa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8019a80:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019a82:	a912      	add	r1, sp, #72	; 0x48
 8019a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019a86:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	9206      	str	r2, [sp, #24]
 8019a8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019a8e:	9500      	str	r5, [sp, #0]
 8019a90:	9205      	str	r2, [sp, #20]
 8019a92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019a94:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019a98:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019a9a:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019a9e:	aa49      	add	r2, sp, #292	; 0x124
 8019aa0:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8019aa4:	4623      	mov	r3, r4
 8019aa6:	47c8      	blx	r9
 8019aa8:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019aac:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019ab0:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019ab4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019ab8:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019abc:	68a1      	ldr	r1, [r4, #8]
 8019abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019ac2:	ed94 6a08 	vldr	s12, [r4, #32]
 8019ac6:	edd4 6a07 	vldr	s13, [r4, #28]
 8019aca:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019ace:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019ad2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019ad6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019ada:	edc4 6a07 	vstr	s13, [r4, #28]
 8019ade:	441a      	add	r2, r3
 8019ae0:	6963      	ldr	r3, [r4, #20]
 8019ae2:	3301      	adds	r3, #1
 8019ae4:	6022      	str	r2, [r4, #0]
 8019ae6:	6163      	str	r3, [r4, #20]
 8019ae8:	69a3      	ldr	r3, [r4, #24]
 8019aea:	3b01      	subs	r3, #1
 8019aec:	61a3      	str	r3, [r4, #24]
 8019aee:	6923      	ldr	r3, [r4, #16]
 8019af0:	440b      	add	r3, r1
 8019af2:	68e1      	ldr	r1, [r4, #12]
 8019af4:	428b      	cmp	r3, r1
 8019af6:	6123      	str	r3, [r4, #16]
 8019af8:	db15      	blt.n	8019b26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8019afa:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019afe:	3201      	adds	r2, #1
 8019b00:	1a5b      	subs	r3, r3, r1
 8019b02:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019b06:	6022      	str	r2, [r4, #0]
 8019b08:	6123      	str	r3, [r4, #16]
 8019b0a:	edc4 6a07 	vstr	s13, [r4, #28]
 8019b0e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019b12:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019b16:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019b1a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019b22:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019b26:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019b2a:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019b2e:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019b32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019b36:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019b3a:	68a9      	ldr	r1, [r5, #8]
 8019b3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019b40:	ed95 6a08 	vldr	s12, [r5, #32]
 8019b44:	edd5 6a07 	vldr	s13, [r5, #28]
 8019b48:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019b4c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019b50:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019b54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019b58:	edc5 6a07 	vstr	s13, [r5, #28]
 8019b5c:	441a      	add	r2, r3
 8019b5e:	696b      	ldr	r3, [r5, #20]
 8019b60:	3301      	adds	r3, #1
 8019b62:	602a      	str	r2, [r5, #0]
 8019b64:	616b      	str	r3, [r5, #20]
 8019b66:	69ab      	ldr	r3, [r5, #24]
 8019b68:	3b01      	subs	r3, #1
 8019b6a:	61ab      	str	r3, [r5, #24]
 8019b6c:	692b      	ldr	r3, [r5, #16]
 8019b6e:	440b      	add	r3, r1
 8019b70:	68e9      	ldr	r1, [r5, #12]
 8019b72:	428b      	cmp	r3, r1
 8019b74:	612b      	str	r3, [r5, #16]
 8019b76:	db15      	blt.n	8019ba4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8019b78:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019b7c:	3201      	adds	r2, #1
 8019b7e:	1a5b      	subs	r3, r3, r1
 8019b80:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019b84:	602a      	str	r2, [r5, #0]
 8019b86:	612b      	str	r3, [r5, #16]
 8019b88:	edc5 6a07 	vstr	s13, [r5, #28]
 8019b8c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019b90:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019b94:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019b98:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019b9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ba0:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019ba4:	3f01      	subs	r7, #1
 8019ba6:	e757      	b.n	8019a58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8019ba8:	4299      	cmp	r1, r3
 8019baa:	dc13      	bgt.n	8019bd4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8019bac:	429a      	cmp	r2, r3
 8019bae:	da14      	bge.n	8019bda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8019bb0:	2502      	movs	r5, #2
 8019bb2:	2703      	movs	r7, #3
 8019bb4:	f04f 0800 	mov.w	r8, #0
 8019bb8:	46a9      	mov	r9, r5
 8019bba:	f04f 0a01 	mov.w	sl, #1
 8019bbe:	e6ef      	b.n	80199a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019bc0:	2501      	movs	r5, #1
 8019bc2:	2700      	movs	r7, #0
 8019bc4:	46a9      	mov	r9, r5
 8019bc6:	46b8      	mov	r8, r7
 8019bc8:	f04f 0a02 	mov.w	sl, #2
 8019bcc:	e6e8      	b.n	80199a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8019bce:	2501      	movs	r5, #1
 8019bd0:	2702      	movs	r7, #2
 8019bd2:	e6e1      	b.n	8019998 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8019bd4:	2500      	movs	r5, #0
 8019bd6:	2701      	movs	r7, #1
 8019bd8:	e7f4      	b.n	8019bc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8019bda:	2702      	movs	r7, #2
 8019bdc:	2503      	movs	r5, #3
 8019bde:	f04f 0900 	mov.w	r9, #0
 8019be2:	46b8      	mov	r8, r7
 8019be4:	e7e9      	b.n	8019bba <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8019be6:	4613      	mov	r3, r2
 8019be8:	e728      	b.n	8019a3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8019bea:	bf00      	nop
 8019bec:	2003c2b4 	.word	0x2003c2b4
 8019bf0:	fffd8f01 	.word	0xfffd8f01
 8019bf4:	00027100 	.word	0x00027100
 8019bf8:	0004e1ff 	.word	0x0004e1ff
 8019bfc:	0004e1fe 	.word	0x0004e1fe
 8019c00:	2003c2bc 	.word	0x2003c2bc
 8019c04:	4613      	mov	r3, r2
 8019c06:	992b      	ldr	r1, [sp, #172]	; 0xac
 8019c08:	469e      	mov	lr, r3
 8019c0a:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8019c0c:	469c      	mov	ip, r3
 8019c0e:	9111      	str	r1, [sp, #68]	; 0x44
 8019c10:	f04f 0900 	mov.w	r9, #0
 8019c14:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8019c18:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8019c1c:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8019c20:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8019c24:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8019c28:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8019c2c:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8019c30:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8019c34:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8019c38:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8019c3c:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8019c40:	f1bc 0f00 	cmp.w	ip, #0
 8019c44:	d147      	bne.n	8019cd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8019c46:	eb03 0c07 	add.w	ip, r3, r7
 8019c4a:	1ad7      	subs	r7, r2, r3
 8019c4c:	f1b9 0f00 	cmp.w	r9, #0
 8019c50:	d009      	beq.n	8019c66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8019c52:	9029      	str	r0, [sp, #164]	; 0xa4
 8019c54:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8019c58:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8019c5c:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8019c60:	912d      	str	r1, [sp, #180]	; 0xb4
 8019c62:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8019c66:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019c68:	f04f 0800 	mov.w	r8, #0
 8019c6c:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019c70:	9111      	str	r1, [sp, #68]	; 0x44
 8019c72:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019c76:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019c7a:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019c7e:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019c82:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019c86:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019c8a:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019c8e:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019c92:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019c96:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019c9a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019c9e:	f1be 0f00 	cmp.w	lr, #0
 8019ca2:	d031      	beq.n	8019d08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8019ca4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019ca6:	4450      	add	r0, sl
 8019ca8:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019cac:	4431      	add	r1, r6
 8019cae:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019cb2:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019cb6:	4549      	cmp	r1, r9
 8019cb8:	db08      	blt.n	8019ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8019cba:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019cbe:	3001      	adds	r0, #1
 8019cc0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019cc4:	eba1 0109 	sub.w	r1, r1, r9
 8019cc8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019ccc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019cd0:	f04f 0801 	mov.w	r8, #1
 8019cd4:	e7e3      	b.n	8019c9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8019cd6:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8019cd8:	4450      	add	r0, sl
 8019cda:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019cde:	4431      	add	r1, r6
 8019ce0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019ce4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019ce8:	4541      	cmp	r1, r8
 8019cea:	db08      	blt.n	8019cfe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8019cec:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019cf0:	3001      	adds	r0, #1
 8019cf2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019cf6:	eba1 0108 	sub.w	r1, r1, r8
 8019cfa:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019cfe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019d02:	f04f 0901 	mov.w	r9, #1
 8019d06:	e79b      	b.n	8019c40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8019d08:	449c      	add	ip, r3
 8019d0a:	1aff      	subs	r7, r7, r3
 8019d0c:	f1b8 0f00 	cmp.w	r8, #0
 8019d10:	d009      	beq.n	8019d26 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8019d12:	9019      	str	r0, [sp, #100]	; 0x64
 8019d14:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019d18:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019d1c:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019d20:	911d      	str	r1, [sp, #116]	; 0x74
 8019d22:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8019d26:	1ad2      	subs	r2, r2, r3
 8019d28:	e68b      	b.n	8019a42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8019d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8019d2c:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8019d2e:	2b00      	cmp	r3, #0
 8019d30:	f000 80d1 	beq.w	8019ed6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8019d34:	ad19      	add	r5, sp, #100	; 0x64
 8019d36:	ac39      	add	r4, sp, #228	; 0xe4
 8019d38:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019d3a:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8019d3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019d42:	930c      	str	r3, [sp, #48]	; 0x30
 8019d44:	990c      	ldr	r1, [sp, #48]	; 0x30
 8019d46:	6963      	ldr	r3, [r4, #20]
 8019d48:	440b      	add	r3, r1
 8019d4a:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8019d4e:	4408      	add	r0, r1
 8019d50:	b200      	sxth	r0, r0
 8019d52:	4283      	cmp	r3, r0
 8019d54:	900d      	str	r0, [sp, #52]	; 0x34
 8019d56:	f280 80c1 	bge.w	8019edc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8019d5a:	428b      	cmp	r3, r1
 8019d5c:	da08      	bge.n	8019d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019d5e:	2a00      	cmp	r2, #0
 8019d60:	dd06      	ble.n	8019d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8019d62:	1acb      	subs	r3, r1, r3
 8019d64:	429a      	cmp	r2, r3
 8019d66:	f2c0 80bb 	blt.w	8019ee0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	f300 80b9 	bgt.w	8019ee2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8019d70:	6967      	ldr	r7, [r4, #20]
 8019d72:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8019d76:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019d78:	443b      	add	r3, r7
 8019d7a:	461f      	mov	r7, r3
 8019d7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019d7e:	1bdf      	subs	r7, r3, r7
 8019d80:	4297      	cmp	r7, r2
 8019d82:	bfa8      	it	ge
 8019d84:	4617      	movge	r7, r2
 8019d86:	2f00      	cmp	r7, #0
 8019d88:	f340 813c 	ble.w	801a004 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8019d8c:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8019d8e:	6829      	ldr	r1, [r5, #0]
 8019d90:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019d94:	f9bb 3000 	ldrsh.w	r3, [fp]
 8019d98:	4411      	add	r1, r2
 8019d9a:	6820      	ldr	r0, [r4, #0]
 8019d9c:	4299      	cmp	r1, r3
 8019d9e:	dd1a      	ble.n	8019dd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019da0:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8019da4:	4402      	add	r2, r0
 8019da6:	440b      	add	r3, r1
 8019da8:	b21b      	sxth	r3, r3
 8019daa:	429a      	cmp	r2, r3
 8019dac:	dc13      	bgt.n	8019dd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8019dae:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8019db0:	a912      	add	r1, sp, #72	; 0x48
 8019db2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	9206      	str	r2, [sp, #24]
 8019dba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8019dbc:	9500      	str	r5, [sp, #0]
 8019dbe:	9205      	str	r2, [sp, #20]
 8019dc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019dc2:	e9cd b203 	strd	fp, r2, [sp, #12]
 8019dc6:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8019dc8:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8019dcc:	aa49      	add	r2, sp, #292	; 0x124
 8019dce:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8019dd2:	4623      	mov	r3, r4
 8019dd4:	47c8      	blx	r9
 8019dd6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8019dda:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8019dde:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8019de2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019de6:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8019dea:	68a1      	ldr	r1, [r4, #8]
 8019dec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019df0:	ed94 6a08 	vldr	s12, [r4, #32]
 8019df4:	edd4 6a07 	vldr	s13, [r4, #28]
 8019df8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019dfc:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019e00:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019e04:	e9d4 2300 	ldrd	r2, r3, [r4]
 8019e08:	edc4 6a07 	vstr	s13, [r4, #28]
 8019e0c:	441a      	add	r2, r3
 8019e0e:	6963      	ldr	r3, [r4, #20]
 8019e10:	3301      	adds	r3, #1
 8019e12:	6022      	str	r2, [r4, #0]
 8019e14:	6163      	str	r3, [r4, #20]
 8019e16:	69a3      	ldr	r3, [r4, #24]
 8019e18:	3b01      	subs	r3, #1
 8019e1a:	61a3      	str	r3, [r4, #24]
 8019e1c:	6923      	ldr	r3, [r4, #16]
 8019e1e:	440b      	add	r3, r1
 8019e20:	68e1      	ldr	r1, [r4, #12]
 8019e22:	428b      	cmp	r3, r1
 8019e24:	6123      	str	r3, [r4, #16]
 8019e26:	db15      	blt.n	8019e54 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8019e28:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8019e2c:	3201      	adds	r2, #1
 8019e2e:	1a5b      	subs	r3, r3, r1
 8019e30:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019e34:	6022      	str	r2, [r4, #0]
 8019e36:	6123      	str	r3, [r4, #16]
 8019e38:	edc4 6a07 	vstr	s13, [r4, #28]
 8019e3c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8019e40:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019e44:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8019e48:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8019e4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019e50:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8019e54:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8019e58:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8019e5c:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8019e60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019e64:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8019e68:	68a9      	ldr	r1, [r5, #8]
 8019e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019e6e:	ed95 6a08 	vldr	s12, [r5, #32]
 8019e72:	edd5 6a07 	vldr	s13, [r5, #28]
 8019e76:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019e7a:	ee76 6a86 	vadd.f32	s13, s13, s12
 8019e7e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019e82:	e9d5 2300 	ldrd	r2, r3, [r5]
 8019e86:	edc5 6a07 	vstr	s13, [r5, #28]
 8019e8a:	441a      	add	r2, r3
 8019e8c:	696b      	ldr	r3, [r5, #20]
 8019e8e:	3301      	adds	r3, #1
 8019e90:	602a      	str	r2, [r5, #0]
 8019e92:	616b      	str	r3, [r5, #20]
 8019e94:	69ab      	ldr	r3, [r5, #24]
 8019e96:	3b01      	subs	r3, #1
 8019e98:	61ab      	str	r3, [r5, #24]
 8019e9a:	692b      	ldr	r3, [r5, #16]
 8019e9c:	440b      	add	r3, r1
 8019e9e:	68e9      	ldr	r1, [r5, #12]
 8019ea0:	428b      	cmp	r3, r1
 8019ea2:	612b      	str	r3, [r5, #16]
 8019ea4:	db15      	blt.n	8019ed2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8019ea6:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8019eaa:	3201      	adds	r2, #1
 8019eac:	1a5b      	subs	r3, r3, r1
 8019eae:	ee76 6a26 	vadd.f32	s13, s12, s13
 8019eb2:	602a      	str	r2, [r5, #0]
 8019eb4:	612b      	str	r3, [r5, #16]
 8019eb6:	edc5 6a07 	vstr	s13, [r5, #28]
 8019eba:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8019ebe:	ee36 7a87 	vadd.f32	s14, s13, s14
 8019ec2:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8019ec6:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8019eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ece:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8019ed2:	3f01      	subs	r7, #1
 8019ed4:	e757      	b.n	8019d86 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8019ed6:	ad39      	add	r5, sp, #228	; 0xe4
 8019ed8:	ac19      	add	r4, sp, #100	; 0x64
 8019eda:	e72d      	b.n	8019d38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8019edc:	4613      	mov	r3, r2
 8019ede:	e744      	b.n	8019d6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8019ee0:	4613      	mov	r3, r2
 8019ee2:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8019ee4:	469e      	mov	lr, r3
 8019ee6:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8019eea:	461f      	mov	r7, r3
 8019eec:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8019ef0:	f04f 0900 	mov.w	r9, #0
 8019ef4:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8019ef8:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8019efc:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8019f00:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8019f04:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8019f08:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8019f0a:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8019f0e:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8019f12:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8019f16:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8019f1a:	960e      	str	r6, [sp, #56]	; 0x38
 8019f1c:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8019f20:	2f00      	cmp	r7, #0
 8019f22:	d146      	bne.n	8019fb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8019f24:	449c      	add	ip, r3
 8019f26:	1ad7      	subs	r7, r2, r3
 8019f28:	f1b9 0f00 	cmp.w	r9, #0
 8019f2c:	d009      	beq.n	8019f42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8019f2e:	9039      	str	r0, [sp, #228]	; 0xe4
 8019f30:	913d      	str	r1, [sp, #244]	; 0xf4
 8019f32:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8019f36:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8019f3a:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8019f3e:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8019f42:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8019f44:	f04f 0800 	mov.w	r8, #0
 8019f48:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8019f4c:	910e      	str	r1, [sp, #56]	; 0x38
 8019f4e:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8019f52:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8019f56:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8019f5a:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8019f5e:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8019f62:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8019f66:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8019f6a:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8019f6e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8019f72:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8019f76:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8019f7a:	f1be 0f00 	cmp.w	lr, #0
 8019f7e:	d030      	beq.n	8019fe2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8019f80:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019f82:	4450      	add	r0, sl
 8019f84:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8019f88:	4431      	add	r1, r6
 8019f8a:	ee37 7a04 	vadd.f32	s14, s14, s8
 8019f8e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8019f92:	4549      	cmp	r1, r9
 8019f94:	db08      	blt.n	8019fa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8019f96:	ee77 7a85 	vadd.f32	s15, s15, s10
 8019f9a:	3001      	adds	r0, #1
 8019f9c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8019fa0:	eba1 0109 	sub.w	r1, r1, r9
 8019fa4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8019fa8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8019fac:	f04f 0801 	mov.w	r8, #1
 8019fb0:	e7e3      	b.n	8019f7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8019fb2:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8019fb4:	4450      	add	r0, sl
 8019fb6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8019fba:	4431      	add	r1, r6
 8019fbc:	ee77 7a84 	vadd.f32	s15, s15, s8
 8019fc0:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8019fc4:	4541      	cmp	r1, r8
 8019fc6:	db08      	blt.n	8019fda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8019fc8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8019fcc:	3001      	adds	r0, #1
 8019fce:	ee37 7a25 	vadd.f32	s14, s14, s11
 8019fd2:	eba1 0108 	sub.w	r1, r1, r8
 8019fd6:	ee77 7a86 	vadd.f32	s15, s15, s12
 8019fda:	3f01      	subs	r7, #1
 8019fdc:	f04f 0901 	mov.w	r9, #1
 8019fe0:	e79e      	b.n	8019f20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8019fe2:	449c      	add	ip, r3
 8019fe4:	1aff      	subs	r7, r7, r3
 8019fe6:	f1b8 0f00 	cmp.w	r8, #0
 8019fea:	d009      	beq.n	801a000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8019fec:	9019      	str	r0, [sp, #100]	; 0x64
 8019fee:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8019ff2:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8019ff6:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8019ffa:	911d      	str	r1, [sp, #116]	; 0x74
 8019ffc:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 801a000:	1ad2      	subs	r2, r2, r3
 801a002:	e6b5      	b.n	8019d70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 801a004:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	b923      	cbnz	r3, 801a014 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801a00a:	4b04      	ldr	r3, [pc, #16]	; (801a01c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 801a00c:	6818      	ldr	r0, [r3, #0]
 801a00e:	6803      	ldr	r3, [r0, #0]
 801a010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a012:	4798      	blx	r3
 801a014:	b05b      	add	sp, #364	; 0x16c
 801a016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a01a:	bf00      	nop
 801a01c:	2003c2bc 	.word	0x2003c2bc

0801a020 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801a020:	b570      	push	{r4, r5, r6, lr}
 801a022:	4604      	mov	r4, r0
 801a024:	2500      	movs	r5, #0
 801a026:	9804      	ldr	r0, [sp, #16]
 801a028:	f89d 6014 	ldrb.w	r6, [sp, #20]
 801a02c:	8025      	strh	r5, [r4, #0]
 801a02e:	6061      	str	r1, [r4, #4]
 801a030:	7223      	strb	r3, [r4, #8]
 801a032:	7266      	strb	r6, [r4, #9]
 801a034:	60e0      	str	r0, [r4, #12]
 801a036:	8222      	strh	r2, [r4, #16]
 801a038:	8265      	strh	r5, [r4, #18]
 801a03a:	82a5      	strh	r5, [r4, #20]
 801a03c:	82e5      	strh	r5, [r4, #22]
 801a03e:	8325      	strh	r5, [r4, #24]
 801a040:	8365      	strh	r5, [r4, #26]
 801a042:	83a5      	strh	r5, [r4, #28]
 801a044:	77a5      	strb	r5, [r4, #30]
 801a046:	b32e      	cbz	r6, 801a094 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a048:	6803      	ldr	r3, [r0, #0]
 801a04a:	695b      	ldr	r3, [r3, #20]
 801a04c:	4798      	blx	r3
 801a04e:	4606      	mov	r6, r0
 801a050:	b300      	cbz	r0, 801a094 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a052:	68e0      	ldr	r0, [r4, #12]
 801a054:	4631      	mov	r1, r6
 801a056:	6803      	ldr	r3, [r0, #0]
 801a058:	68db      	ldr	r3, [r3, #12]
 801a05a:	4798      	blx	r3
 801a05c:	4605      	mov	r5, r0
 801a05e:	b1c8      	cbz	r0, 801a094 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a060:	7b43      	ldrb	r3, [r0, #13]
 801a062:	7a82      	ldrb	r2, [r0, #10]
 801a064:	005b      	lsls	r3, r3, #1
 801a066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a06a:	4313      	orrs	r3, r2
 801a06c:	83a3      	strh	r3, [r4, #28]
 801a06e:	7a63      	ldrb	r3, [r4, #9]
 801a070:	2b04      	cmp	r3, #4
 801a072:	d10f      	bne.n	801a094 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x74>
 801a074:	68e0      	ldr	r0, [r4, #12]
 801a076:	462a      	mov	r2, r5
 801a078:	4631      	mov	r1, r6
 801a07a:	6803      	ldr	r3, [r0, #0]
 801a07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a07e:	4798      	blx	r3
 801a080:	7b6b      	ldrb	r3, [r5, #13]
 801a082:	005b      	lsls	r3, r3, #1
 801a084:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a088:	7aab      	ldrb	r3, [r5, #10]
 801a08a:	4313      	orrs	r3, r2
 801a08c:	4418      	add	r0, r3
 801a08e:	8ba3      	ldrh	r3, [r4, #28]
 801a090:	4418      	add	r0, r3
 801a092:	83a0      	strh	r0, [r4, #28]
 801a094:	4620      	mov	r0, r4
 801a096:	bd70      	pop	{r4, r5, r6, pc}

0801a098 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a09c:	2400      	movs	r4, #0
 801a09e:	b085      	sub	sp, #20
 801a0a0:	4681      	mov	r9, r0
 801a0a2:	4688      	mov	r8, r1
 801a0a4:	4692      	mov	sl, r2
 801a0a6:	469b      	mov	fp, r3
 801a0a8:	4627      	mov	r7, r4
 801a0aa:	4625      	mov	r5, r4
 801a0ac:	4626      	mov	r6, r4
 801a0ae:	4554      	cmp	r4, sl
 801a0b0:	da2a      	bge.n	801a108 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a0b2:	2300      	movs	r3, #0
 801a0b4:	9303      	str	r3, [sp, #12]
 801a0b6:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a0ba:	429d      	cmp	r5, r3
 801a0bc:	d004      	beq.n	801a0c8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 801a0be:	f242 030b 	movw	r3, #8203	; 0x200b
 801a0c2:	429d      	cmp	r5, r3
 801a0c4:	bf18      	it	ne
 801a0c6:	462f      	movne	r7, r5
 801a0c8:	ab03      	add	r3, sp, #12
 801a0ca:	4642      	mov	r2, r8
 801a0cc:	4659      	mov	r1, fp
 801a0ce:	4648      	mov	r0, r9
 801a0d0:	f002 ff84 	bl	801cfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a0d4:	4605      	mov	r5, r0
 801a0d6:	b1b8      	cbz	r0, 801a108 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a0d8:	280a      	cmp	r0, #10
 801a0da:	d015      	beq.n	801a108 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 801a0dc:	9a03      	ldr	r2, [sp, #12]
 801a0de:	b18a      	cbz	r2, 801a104 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 801a0e0:	7b50      	ldrb	r0, [r2, #13]
 801a0e2:	4639      	mov	r1, r7
 801a0e4:	7a93      	ldrb	r3, [r2, #10]
 801a0e6:	0040      	lsls	r0, r0, #1
 801a0e8:	8895      	ldrh	r5, [r2, #4]
 801a0ea:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801a0ee:	4303      	orrs	r3, r0
 801a0f0:	4640      	mov	r0, r8
 801a0f2:	9301      	str	r3, [sp, #4]
 801a0f4:	f8d8 3000 	ldr.w	r3, [r8]
 801a0f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a0fa:	4798      	blx	r3
 801a0fc:	9b01      	ldr	r3, [sp, #4]
 801a0fe:	4418      	add	r0, r3
 801a100:	4406      	add	r6, r0
 801a102:	b2b6      	uxth	r6, r6
 801a104:	3401      	adds	r4, #1
 801a106:	e7d2      	b.n	801a0ae <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 801a108:	4630      	mov	r0, r6
 801a10a:	b005      	add	sp, #20
 801a10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801a110 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801a110:	2a02      	cmp	r2, #2
 801a112:	b530      	push	{r4, r5, lr}
 801a114:	d011      	beq.n	801a13a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801a116:	2a03      	cmp	r2, #3
 801a118:	d01c      	beq.n	801a154 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801a11a:	2a01      	cmp	r2, #1
 801a11c:	d10c      	bne.n	801a138 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a11e:	888b      	ldrh	r3, [r1, #4]
 801a120:	8801      	ldrh	r1, [r0, #0]
 801a122:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801a126:	1a5b      	subs	r3, r3, r1
 801a128:	8844      	ldrh	r4, [r0, #2]
 801a12a:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801a12e:	1a9b      	subs	r3, r3, r2
 801a130:	8004      	strh	r4, [r0, #0]
 801a132:	8081      	strh	r1, [r0, #4]
 801a134:	8043      	strh	r3, [r0, #2]
 801a136:	80c2      	strh	r2, [r0, #6]
 801a138:	bd30      	pop	{r4, r5, pc}
 801a13a:	88cb      	ldrh	r3, [r1, #6]
 801a13c:	8842      	ldrh	r2, [r0, #2]
 801a13e:	1a9b      	subs	r3, r3, r2
 801a140:	88c2      	ldrh	r2, [r0, #6]
 801a142:	1a9b      	subs	r3, r3, r2
 801a144:	888a      	ldrh	r2, [r1, #4]
 801a146:	8801      	ldrh	r1, [r0, #0]
 801a148:	8043      	strh	r3, [r0, #2]
 801a14a:	1a52      	subs	r2, r2, r1
 801a14c:	8881      	ldrh	r1, [r0, #4]
 801a14e:	1a52      	subs	r2, r2, r1
 801a150:	8002      	strh	r2, [r0, #0]
 801a152:	e7f1      	b.n	801a138 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 801a154:	88cb      	ldrh	r3, [r1, #6]
 801a156:	8841      	ldrh	r1, [r0, #2]
 801a158:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801a15c:	1a5b      	subs	r3, r3, r1
 801a15e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801a162:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801a166:	1a9b      	subs	r3, r3, r2
 801a168:	8045      	strh	r5, [r0, #2]
 801a16a:	8082      	strh	r2, [r0, #4]
 801a16c:	8003      	strh	r3, [r0, #0]
 801a16e:	80c4      	strh	r4, [r0, #6]
 801a170:	e7e2      	b.n	801a138 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

0801a172 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801a172:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a176:	b09f      	sub	sp, #124	; 0x7c
 801a178:	9116      	str	r1, [sp, #88]	; 0x58
 801a17a:	9317      	str	r3, [sp, #92]	; 0x5c
 801a17c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a17e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a180:	8809      	ldrh	r1, [r1, #0]
 801a182:	889b      	ldrh	r3, [r3, #4]
 801a184:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
 801a188:	440b      	add	r3, r1
 801a18a:	9212      	str	r2, [sp, #72]	; 0x48
 801a18c:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
 801a190:	b21b      	sxth	r3, r3
 801a192:	9011      	str	r0, [sp, #68]	; 0x44
 801a194:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
 801a198:	9310      	str	r3, [sp, #64]	; 0x40
 801a19a:	f8d8 3000 	ldr.w	r3, [r8]
 801a19e:	f9bd 50a0 	ldrsh.w	r5, [sp, #160]	; 0xa0
 801a1a2:	7a59      	ldrb	r1, [r3, #9]
 801a1a4:	7a1b      	ldrb	r3, [r3, #8]
 801a1a6:	9114      	str	r1, [sp, #80]	; 0x50
 801a1a8:	9315      	str	r3, [sp, #84]	; 0x54
 801a1aa:	2a00      	cmp	r2, #0
 801a1ac:	d06a      	beq.n	801a284 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 801a1ae:	f898 3010 	ldrb.w	r3, [r8, #16]
 801a1b2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801a1b4:	2b04      	cmp	r3, #4
 801a1b6:	bf14      	ite	ne
 801a1b8:	2301      	movne	r3, #1
 801a1ba:	2302      	moveq	r3, #2
 801a1bc:	4413      	add	r3, r2
 801a1be:	f04f 0900 	mov.w	r9, #0
 801a1c2:	930f      	str	r3, [sp, #60]	; 0x3c
 801a1c4:	464c      	mov	r4, r9
 801a1c6:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801a1ca:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801a1ce:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 801a1d2:	4293      	cmp	r3, r2
 801a1d4:	f280 808f 	bge.w	801a2f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801a1d8:	2300      	movs	r3, #0
 801a1da:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 801a1de:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 801a1e2:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a1e6:	429c      	cmp	r4, r3
 801a1e8:	d006      	beq.n	801a1f8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
 801a1ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a1ec:	f242 020b 	movw	r2, #8203	; 0x200b
 801a1f0:	4294      	cmp	r4, r2
 801a1f2:	bf18      	it	ne
 801a1f4:	4623      	movne	r3, r4
 801a1f6:	930d      	str	r3, [sp, #52]	; 0x34
 801a1f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a1fa:	992d      	ldr	r1, [sp, #180]	; 0xb4
 801a1fc:	f8d8 2000 	ldr.w	r2, [r8]
 801a200:	428b      	cmp	r3, r1
 801a202:	db41      	blt.n	801a288 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 801a204:	6813      	ldr	r3, [r2, #0]
 801a206:	4610      	mov	r0, r2
 801a208:	695b      	ldr	r3, [r3, #20]
 801a20a:	4798      	blx	r3
 801a20c:	4604      	mov	r4, r0
 801a20e:	f8d8 0000 	ldr.w	r0, [r8]
 801a212:	aa1d      	add	r2, sp, #116	; 0x74
 801a214:	4621      	mov	r1, r4
 801a216:	6803      	ldr	r3, [r0, #0]
 801a218:	689e      	ldr	r6, [r3, #8]
 801a21a:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a21e:	47b0      	blx	r6
 801a220:	901c      	str	r0, [sp, #112]	; 0x70
 801a222:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a226:	429c      	cmp	r4, r3
 801a228:	f000 80ea 	beq.w	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801a22c:	f242 030b 	movw	r3, #8203	; 0x200b
 801a230:	429c      	cmp	r4, r3
 801a232:	f000 80e5 	beq.w	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801a236:	2c00      	cmp	r4, #0
 801a238:	f000 80f7 	beq.w	801a42a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801a23c:	2c0a      	cmp	r4, #10
 801a23e:	d060      	beq.n	801a302 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801a240:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a242:	b36a      	cbz	r2, 801a2a0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 801a244:	8894      	ldrh	r4, [r2, #4]
 801a246:	f1bb 0f00 	cmp.w	fp, #0
 801a24a:	d03b      	beq.n	801a2c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 801a24c:	f892 900d 	ldrb.w	r9, [r2, #13]
 801a250:	f1bb 0f01 	cmp.w	fp, #1
 801a254:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801a258:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a25c:	f892 900a 	ldrb.w	r9, [r2, #10]
 801a260:	ea49 0903 	orr.w	r9, r9, r3
 801a264:	d134      	bne.n	801a2d0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
 801a266:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a268:	eba5 0509 	sub.w	r5, r5, r9
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d14f      	bne.n	801a310 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801a270:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801a272:	eb09 0305 	add.w	r3, r9, r5
 801a276:	4413      	add	r3, r2
 801a278:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801a27a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801a27e:	4293      	cmp	r3, r2
 801a280:	da51      	bge.n	801a326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801a282:	e038      	b.n	801a2f6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
 801a284:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a286:	e79a      	b.n	801a1be <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
 801a288:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
 801a28c:	4659      	mov	r1, fp
 801a28e:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a290:	9301      	str	r3, [sp, #4]
 801a292:	ab1d      	add	r3, sp, #116	; 0x74
 801a294:	9300      	str	r3, [sp, #0]
 801a296:	ab1c      	add	r3, sp, #112	; 0x70
 801a298:	f002 fee9 	bl	801d06e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 801a29c:	4604      	mov	r4, r0
 801a29e:	e7c0      	b.n	801a222 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 801a2a0:	f8d8 0000 	ldr.w	r0, [r8]
 801a2a4:	6803      	ldr	r3, [r0, #0]
 801a2a6:	691b      	ldr	r3, [r3, #16]
 801a2a8:	4798      	blx	r3
 801a2aa:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a2ae:	4298      	cmp	r0, r3
 801a2b0:	f000 80a6 	beq.w	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801a2b4:	f242 030b 	movw	r3, #8203	; 0x200b
 801a2b8:	4298      	cmp	r0, r3
 801a2ba:	f000 80a1 	beq.w	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801a2be:	f1bb 0f00 	cmp.w	fp, #0
 801a2c2:	d100      	bne.n	801a2c6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
 801a2c4:	444d      	add	r5, r9
 801a2c6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801a2c8:	2a00      	cmp	r2, #0
 801a2ca:	d1bf      	bne.n	801a24c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 801a2cc:	4691      	mov	r9, r2
 801a2ce:	e097      	b.n	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801a2d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a2d2:	2b00      	cmp	r3, #0
 801a2d4:	f000 80ab 	beq.w	801a42e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
 801a2d8:	f1bb 0f00 	cmp.w	fp, #0
 801a2dc:	d118      	bne.n	801a310 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
 801a2de:	f8d8 0000 	ldr.w	r0, [r8]
 801a2e2:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a2e4:	6803      	ldr	r3, [r0, #0]
 801a2e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a2e8:	4798      	blx	r3
 801a2ea:	4405      	add	r5, r0
 801a2ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a2ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801a2f0:	1aeb      	subs	r3, r5, r3
 801a2f2:	4293      	cmp	r3, r2
 801a2f4:	dd17      	ble.n	801a326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
 801a2f6:	2c00      	cmp	r4, #0
 801a2f8:	f000 8097 	beq.w	801a42a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801a2fc:	2c0a      	cmp	r4, #10
 801a2fe:	f040 8085 	bne.w	801a40c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
 801a302:	240a      	movs	r4, #10
 801a304:	fab4 f084 	clz	r0, r4
 801a308:	0940      	lsrs	r0, r0, #5
 801a30a:	b01f      	add	sp, #124	; 0x7c
 801a30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a310:	f8d8 0000 	ldr.w	r0, [r8]
 801a314:	990d      	ldr	r1, [sp, #52]	; 0x34
 801a316:	6803      	ldr	r3, [r0, #0]
 801a318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a31a:	4798      	blx	r3
 801a31c:	f1bb 0f01 	cmp.w	fp, #1
 801a320:	eba5 0500 	sub.w	r5, r5, r0
 801a324:	d0a4      	beq.n	801a270 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 801a326:	981c      	ldr	r0, [sp, #112]	; 0x70
 801a328:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a32a:	f990 1009 	ldrsb.w	r1, [r0, #9]
 801a32e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801a332:	7b43      	ldrb	r3, [r0, #13]
 801a334:	4429      	add	r1, r5
 801a336:	015b      	lsls	r3, r3, #5
 801a338:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801a33c:	7983      	ldrb	r3, [r0, #6]
 801a33e:	4313      	orrs	r3, r2
 801a340:	440b      	add	r3, r1
 801a342:	42b3      	cmp	r3, r6
 801a344:	db5c      	blt.n	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801a346:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a348:	4299      	cmp	r1, r3
 801a34a:	da59      	bge.n	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801a34c:	f8d8 0000 	ldr.w	r0, [r8]
 801a350:	42ae      	cmp	r6, r5
 801a352:	6803      	ldr	r3, [r0, #0]
 801a354:	bfcc      	ite	gt
 801a356:	1b76      	subgt	r6, r6, r5
 801a358:	2600      	movle	r6, #0
 801a35a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a35c:	bfc8      	it	gt
 801a35e:	b2b6      	uxthgt	r6, r6
 801a360:	4798      	blx	r3
 801a362:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801a364:	7b5a      	ldrb	r2, [r3, #13]
 801a366:	00d1      	lsls	r1, r2, #3
 801a368:	f401 7780 	and.w	r7, r1, #256	; 0x100
 801a36c:	7a19      	ldrb	r1, [r3, #8]
 801a36e:	4339      	orrs	r1, r7
 801a370:	0657      	lsls	r7, r2, #25
 801a372:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 801a374:	bf48      	it	mi
 801a376:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
 801a37a:	4407      	add	r7, r0
 801a37c:	bf48      	it	mi
 801a37e:	b209      	sxthmi	r1, r1
 801a380:	1a7f      	subs	r7, r7, r1
 801a382:	9929      	ldr	r1, [sp, #164]	; 0xa4
 801a384:	b2bf      	uxth	r7, r7
 801a386:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801a38a:	fa0f fa87 	sxth.w	sl, r7
 801a38e:	4551      	cmp	r1, sl
 801a390:	dd3a      	ble.n	801a408 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x296>
 801a392:	0112      	lsls	r2, r2, #4
 801a394:	79d8      	ldrb	r0, [r3, #7]
 801a396:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801a39a:	4302      	orrs	r2, r0
 801a39c:	4492      	add	sl, r2
 801a39e:	4551      	cmp	r1, sl
 801a3a0:	dc2e      	bgt.n	801a400 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x28e>
 801a3a2:	1bcf      	subs	r7, r1, r7
 801a3a4:	468a      	mov	sl, r1
 801a3a6:	b2bf      	uxth	r7, r7
 801a3a8:	9319      	str	r3, [sp, #100]	; 0x64
 801a3aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a3ac:	f8d8 0000 	ldr.w	r0, [r8]
 801a3b0:	681a      	ldr	r2, [r3, #0]
 801a3b2:	6801      	ldr	r1, [r0, #0]
 801a3b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 801a3b6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a3b8:	9313      	str	r3, [sp, #76]	; 0x4c
 801a3ba:	9218      	str	r2, [sp, #96]	; 0x60
 801a3bc:	6b89      	ldr	r1, [r1, #56]	; 0x38
 801a3be:	4788      	blx	r1
 801a3c0:	f898 1006 	ldrb.w	r1, [r8, #6]
 801a3c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801a3c6:	910b      	str	r1, [sp, #44]	; 0x2c
 801a3c8:	f898 100e 	ldrb.w	r1, [r8, #14]
 801a3cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801a3ce:	910a      	str	r1, [sp, #40]	; 0x28
 801a3d0:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
 801a3d4:	9109      	str	r1, [sp, #36]	; 0x24
 801a3d6:	f8d8 1008 	ldr.w	r1, [r8, #8]
 801a3da:	9305      	str	r3, [sp, #20]
 801a3dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801a3de:	9206      	str	r2, [sp, #24]
 801a3e0:	e9cd a601 	strd	sl, r6, [sp, #4]
 801a3e4:	442e      	add	r6, r5
 801a3e6:	e9cd 7303 	strd	r7, r3, [sp, #12]
 801a3ea:	b236      	sxth	r6, r6
 801a3ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a3ee:	e9cd 0107 	strd	r0, r1, [sp, #28]
 801a3f2:	9600      	str	r6, [sp, #0]
 801a3f4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801a3f6:	681a      	ldr	r2, [r3, #0]
 801a3f8:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a3fa:	685b      	ldr	r3, [r3, #4]
 801a3fc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801a3fe:	47b0      	blx	r6
 801a400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a402:	3301      	adds	r3, #1
 801a404:	930e      	str	r3, [sp, #56]	; 0x38
 801a406:	e6e2      	b.n	801a1ce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
 801a408:	2700      	movs	r7, #0
 801a40a:	e7cd      	b.n	801a3a8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
 801a40c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801a40e:	3501      	adds	r5, #1
 801a410:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 801a412:	429d      	cmp	r5, r3
 801a414:	f6bf af76 	bge.w	801a304 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801a418:	4659      	mov	r1, fp
 801a41a:	982c      	ldr	r0, [sp, #176]	; 0xb0
 801a41c:	f7f7 fcf8 	bl	8011e10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a420:	4604      	mov	r4, r0
 801a422:	b110      	cbz	r0, 801a42a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2b8>
 801a424:	280a      	cmp	r0, #10
 801a426:	d1f2      	bne.n	801a40e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801a428:	e76b      	b.n	801a302 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
 801a42a:	2400      	movs	r4, #0
 801a42c:	e76a      	b.n	801a304 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
 801a42e:	f1bb 0f00 	cmp.w	fp, #0
 801a432:	f43f af5b 	beq.w	801a2ec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
 801a436:	e776      	b.n	801a326 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

0801a438 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801a438:	b530      	push	{r4, r5, lr}
 801a43a:	8a44      	ldrh	r4, [r0, #18]
 801a43c:	8ac5      	ldrh	r5, [r0, #22]
 801a43e:	82c3      	strh	r3, [r0, #22]
 801a440:	442c      	add	r4, r5
 801a442:	1ae4      	subs	r4, r4, r3
 801a444:	8b03      	ldrh	r3, [r0, #24]
 801a446:	8244      	strh	r4, [r0, #18]
 801a448:	8a84      	ldrh	r4, [r0, #20]
 801a44a:	4422      	add	r2, r4
 801a44c:	440c      	add	r4, r1
 801a44e:	1a59      	subs	r1, r3, r1
 801a450:	8342      	strh	r2, [r0, #26]
 801a452:	8284      	strh	r4, [r0, #20]
 801a454:	8301      	strh	r1, [r0, #24]
 801a456:	bd30      	pop	{r4, r5, pc}

0801a458 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801a458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a45c:	7a43      	ldrb	r3, [r0, #9]
 801a45e:	b087      	sub	sp, #28
 801a460:	4604      	mov	r4, r0
 801a462:	460f      	mov	r7, r1
 801a464:	1eda      	subs	r2, r3, #3
 801a466:	b2d2      	uxtb	r2, r2
 801a468:	2900      	cmp	r1, #0
 801a46a:	d036      	beq.n	801a4da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x82>
 801a46c:	2a01      	cmp	r2, #1
 801a46e:	d932      	bls.n	801a4d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x7e>
 801a470:	1e58      	subs	r0, r3, #1
 801a472:	f1d0 0b00 	rsbs	fp, r0, #0
 801a476:	eb4b 0b00 	adc.w	fp, fp, r0
 801a47a:	1e99      	subs	r1, r3, #2
 801a47c:	424b      	negs	r3, r1
 801a47e:	414b      	adcs	r3, r1
 801a480:	9303      	str	r3, [sp, #12]
 801a482:	2300      	movs	r3, #0
 801a484:	e9cd 3301 	strd	r3, r3, [sp, #4]
 801a488:	2500      	movs	r5, #0
 801a48a:	f242 0a0b 	movw	sl, #8203	; 0x200b
 801a48e:	46a9      	mov	r9, r5
 801a490:	8265      	strh	r5, [r4, #18]
 801a492:	82a5      	strh	r5, [r4, #20]
 801a494:	2300      	movs	r3, #0
 801a496:	9305      	str	r3, [sp, #20]
 801a498:	8823      	ldrh	r3, [r4, #0]
 801a49a:	2b20      	cmp	r3, #32
 801a49c:	d02b      	beq.n	801a4f6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x9e>
 801a49e:	eba3 020a 	sub.w	r2, r3, sl
 801a4a2:	4256      	negs	r6, r2
 801a4a4:	4156      	adcs	r6, r2
 801a4a6:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801a4aa:	4293      	cmp	r3, r2
 801a4ac:	d004      	beq.n	801a4b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a4ae:	4553      	cmp	r3, sl
 801a4b0:	bf16      	itet	ne
 801a4b2:	4699      	movne	r9, r3
 801a4b4:	2601      	moveq	r6, #1
 801a4b6:	2600      	movne	r6, #0
 801a4b8:	ab05      	add	r3, sp, #20
 801a4ba:	68e2      	ldr	r2, [r4, #12]
 801a4bc:	7a21      	ldrb	r1, [r4, #8]
 801a4be:	6860      	ldr	r0, [r4, #4]
 801a4c0:	f002 fd8c 	bl	801cfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801a4c4:	8020      	strh	r0, [r4, #0]
 801a4c6:	b9c8      	cbnz	r0, 801a4fc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xa4>
 801a4c8:	8b22      	ldrh	r2, [r4, #24]
 801a4ca:	2300      	movs	r3, #0
 801a4cc:	4611      	mov	r1, r2
 801a4ce:	4620      	mov	r0, r4
 801a4d0:	f7ff ffb2 	bl	801a438 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a4d4:	e066      	b.n	801a5a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a4d6:	468b      	mov	fp, r1
 801a4d8:	e7cf      	b.n	801a47a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x22>
 801a4da:	3b01      	subs	r3, #1
 801a4dc:	2a01      	cmp	r2, #1
 801a4de:	9103      	str	r1, [sp, #12]
 801a4e0:	468b      	mov	fp, r1
 801a4e2:	bf8c      	ite	hi
 801a4e4:	2200      	movhi	r2, #0
 801a4e6:	2201      	movls	r2, #1
 801a4e8:	2b01      	cmp	r3, #1
 801a4ea:	9202      	str	r2, [sp, #8]
 801a4ec:	bf8c      	ite	hi
 801a4ee:	2300      	movhi	r3, #0
 801a4f0:	2301      	movls	r3, #1
 801a4f2:	9301      	str	r3, [sp, #4]
 801a4f4:	e7c8      	b.n	801a488 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x30>
 801a4f6:	4699      	mov	r9, r3
 801a4f8:	2601      	movs	r6, #1
 801a4fa:	e7dd      	b.n	801a4b8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x60>
 801a4fc:	8ae3      	ldrh	r3, [r4, #22]
 801a4fe:	280a      	cmp	r0, #10
 801a500:	f103 0301 	add.w	r3, r3, #1
 801a504:	82e3      	strh	r3, [r4, #22]
 801a506:	d0df      	beq.n	801a4c8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x70>
 801a508:	9a05      	ldr	r2, [sp, #20]
 801a50a:	bb42      	cbnz	r2, 801a55e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x106>
 801a50c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801a510:	4298      	cmp	r0, r3
 801a512:	d001      	beq.n	801a518 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a514:	4550      	cmp	r0, sl
 801a516:	d1bd      	bne.n	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a518:	8823      	ldrh	r3, [r4, #0]
 801a51a:	8b21      	ldrh	r1, [r4, #24]
 801a51c:	2b20      	cmp	r3, #32
 801a51e:	d001      	beq.n	801a524 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xcc>
 801a520:	4553      	cmp	r3, sl
 801a522:	d131      	bne.n	801a588 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x130>
 801a524:	2e00      	cmp	r6, #0
 801a526:	bf0a      	itet	eq
 801a528:	460d      	moveq	r5, r1
 801a52a:	4630      	movne	r0, r6
 801a52c:	2001      	moveq	r0, #1
 801a52e:	440a      	add	r2, r1
 801a530:	8aa3      	ldrh	r3, [r4, #20]
 801a532:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801a536:	b292      	uxth	r2, r2
 801a538:	8322      	strh	r2, [r4, #24]
 801a53a:	4413      	add	r3, r2
 801a53c:	2f00      	cmp	r7, #0
 801a53e:	d03a      	beq.n	801a5b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x15e>
 801a540:	f1bb 0f00 	cmp.w	fp, #0
 801a544:	d102      	bne.n	801a54c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf4>
 801a546:	9903      	ldr	r1, [sp, #12]
 801a548:	b301      	cbz	r1, 801a58c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a54a:	b1f8      	cbz	r0, 801a58c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x134>
 801a54c:	8ba1      	ldrh	r1, [r4, #28]
 801a54e:	4419      	add	r1, r3
 801a550:	458c      	cmp	ip, r1
 801a552:	da2a      	bge.n	801a5aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a554:	8a61      	ldrh	r1, [r4, #18]
 801a556:	b341      	cbz	r1, 801a5aa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x152>
 801a558:	4563      	cmp	r3, ip
 801a55a:	dd9b      	ble.n	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a55c:	e01c      	b.n	801a598 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x140>
 801a55e:	8893      	ldrh	r3, [r2, #4]
 801a560:	4649      	mov	r1, r9
 801a562:	8023      	strh	r3, [r4, #0]
 801a564:	f892 800d 	ldrb.w	r8, [r2, #13]
 801a568:	ea4f 0848 	mov.w	r8, r8, lsl #1
 801a56c:	f408 7080 	and.w	r0, r8, #256	; 0x100
 801a570:	f892 800a 	ldrb.w	r8, [r2, #10]
 801a574:	ea48 0800 	orr.w	r8, r8, r0
 801a578:	68e0      	ldr	r0, [r4, #12]
 801a57a:	6803      	ldr	r3, [r0, #0]
 801a57c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a57e:	4798      	blx	r3
 801a580:	eb08 0200 	add.w	r2, r8, r0
 801a584:	b292      	uxth	r2, r2
 801a586:	e7c7      	b.n	801a518 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xc0>
 801a588:	2000      	movs	r0, #0
 801a58a:	e7d0      	b.n	801a52e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xd6>
 801a58c:	4563      	cmp	r3, ip
 801a58e:	dd81      	ble.n	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a590:	8a63      	ldrh	r3, [r4, #18]
 801a592:	2b00      	cmp	r3, #0
 801a594:	f43f af7e 	beq.w	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a598:	2301      	movs	r3, #1
 801a59a:	8ba2      	ldrh	r2, [r4, #28]
 801a59c:	77a3      	strb	r3, [r4, #30]
 801a59e:	8b63      	ldrh	r3, [r4, #26]
 801a5a0:	4413      	add	r3, r2
 801a5a2:	8363      	strh	r3, [r4, #26]
 801a5a4:	b007      	add	sp, #28
 801a5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5aa:	2300      	movs	r3, #0
 801a5ac:	4611      	mov	r1, r2
 801a5ae:	4620      	mov	r0, r4
 801a5b0:	f7ff ff42 	bl	801a438 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801a5b4:	e76e      	b.n	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a5b6:	4563      	cmp	r3, ip
 801a5b8:	dd14      	ble.n	801a5e4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x18c>
 801a5ba:	9b02      	ldr	r3, [sp, #8]
 801a5bc:	b113      	cbz	r3, 801a5c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x16c>
 801a5be:	2301      	movs	r3, #1
 801a5c0:	460a      	mov	r2, r1
 801a5c2:	e783      	b.n	801a4cc <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x74>
 801a5c4:	9b01      	ldr	r3, [sp, #4]
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	f43f af64 	beq.w	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a5cc:	2800      	cmp	r0, #0
 801a5ce:	f47f af61 	bne.w	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a5d2:	b116      	cbz	r6, 801a5da <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x182>
 801a5d4:	2301      	movs	r3, #1
 801a5d6:	462a      	mov	r2, r5
 801a5d8:	e779      	b.n	801a4ce <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x76>
 801a5da:	8a63      	ldrh	r3, [r4, #18]
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	f43f af59 	beq.w	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a5e2:	e7df      	b.n	801a5a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x14c>
 801a5e4:	2800      	cmp	r0, #0
 801a5e6:	f47f af55 	bne.w	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a5ea:	2e00      	cmp	r6, #0
 801a5ec:	f43f af52 	beq.w	801a494 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3c>
 801a5f0:	2301      	movs	r3, #1
 801a5f2:	462a      	mov	r2, r5
 801a5f4:	e7db      	b.n	801a5ae <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x156>

0801a5f6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801a5f6:	b530      	push	{r4, r5, lr}
 801a5f8:	4605      	mov	r5, r0
 801a5fa:	b08b      	sub	sp, #44	; 0x2c
 801a5fc:	b191      	cbz	r1, 801a624 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x2e>
 801a5fe:	2401      	movs	r4, #1
 801a600:	e9cd 3100 	strd	r3, r1, [sp]
 801a604:	4613      	mov	r3, r2
 801a606:	4601      	mov	r1, r0
 801a608:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801a60c:	a802      	add	r0, sp, #8
 801a60e:	f7ff fd07 	bl	801a020 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a612:	2100      	movs	r1, #0
 801a614:	a802      	add	r0, sp, #8
 801a616:	f7ff ff1f 	bl	801a458 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a61a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801a61e:	b163      	cbz	r3, 801a63a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 801a620:	3401      	adds	r4, #1
 801a622:	e7f6      	b.n	801a612 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1c>
 801a624:	2401      	movs	r4, #1
 801a626:	f002 fda5 	bl	801d174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a62a:	280a      	cmp	r0, #10
 801a62c:	4628      	mov	r0, r5
 801a62e:	bf08      	it	eq
 801a630:	3401      	addeq	r4, #1
 801a632:	f002 fd9f 	bl	801d174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a636:	2800      	cmp	r0, #0
 801a638:	d1f7      	bne.n	801a62a <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 801a63a:	b2a0      	uxth	r0, r4
 801a63c:	b00b      	add	sp, #44	; 0x2c
 801a63e:	bd30      	pop	{r4, r5, pc}

0801a640 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a644:	b0e5      	sub	sp, #404	; 0x194
 801a646:	4689      	mov	r9, r1
 801a648:	461c      	mov	r4, r3
 801a64a:	f8dd a1b8 	ldr.w	sl, [sp, #440]	; 0x1b8
 801a64e:	900a      	str	r0, [sp, #40]	; 0x28
 801a650:	f1ba 0f00 	cmp.w	sl, #0
 801a654:	f000 80b4 	beq.w	801a7c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a658:	681b      	ldr	r3, [r3, #0]
 801a65a:	2b00      	cmp	r3, #0
 801a65c:	f000 80b0 	beq.w	801a7c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a660:	7ba3      	ldrb	r3, [r4, #14]
 801a662:	2b00      	cmp	r3, #0
 801a664:	f000 80ac 	beq.w	801a7c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a668:	f10d 0834 	add.w	r8, sp, #52	; 0x34
 801a66c:	6810      	ldr	r0, [r2, #0]
 801a66e:	6851      	ldr	r1, [r2, #4]
 801a670:	2500      	movs	r5, #0
 801a672:	4643      	mov	r3, r8
 801a674:	f9b9 2004 	ldrsh.w	r2, [r9, #4]
 801a678:	950f      	str	r5, [sp, #60]	; 0x3c
 801a67a:	af19      	add	r7, sp, #100	; 0x64
 801a67c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 801a680:	79a2      	ldrb	r2, [r4, #6]
 801a682:	c303      	stmia	r3!, {r0, r1}
 801a684:	f9b9 3006 	ldrsh.w	r3, [r9, #6]
 801a688:	a90f      	add	r1, sp, #60	; 0x3c
 801a68a:	4640      	mov	r0, r8
 801a68c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a690:	f7ff fd3e 	bl	801a110 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a694:	a90f      	add	r1, sp, #60	; 0x3c
 801a696:	79a2      	ldrb	r2, [r4, #6]
 801a698:	4608      	mov	r0, r1
 801a69a:	f7ff fd39 	bl	801a110 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801a69e:	4638      	mov	r0, r7
 801a6a0:	f002 f93c 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 801a6a4:	6820      	ldr	r0, [r4, #0]
 801a6a6:	6803      	ldr	r3, [r0, #0]
 801a6a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6aa:	4798      	blx	r3
 801a6ac:	4606      	mov	r6, r0
 801a6ae:	6820      	ldr	r0, [r4, #0]
 801a6b0:	6803      	ldr	r3, [r0, #0]
 801a6b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a6b4:	4798      	blx	r3
 801a6b6:	4633      	mov	r3, r6
 801a6b8:	9000      	str	r0, [sp, #0]
 801a6ba:	4651      	mov	r1, sl
 801a6bc:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801a6be:	4638      	mov	r0, r7
 801a6c0:	f002 f987 	bl	801c9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a6c4:	7923      	ldrb	r3, [r4, #4]
 801a6c6:	6820      	ldr	r0, [r4, #0]
 801a6c8:	9308      	str	r3, [sp, #32]
 801a6ca:	6803      	ldr	r3, [r0, #0]
 801a6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a6ce:	4798      	blx	r3
 801a6d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6d4:	181e      	adds	r6, r3, r0
 801a6d6:	42ae      	cmp	r6, r5
 801a6d8:	dd06      	ble.n	801a6e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xa8>
 801a6da:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 801a6de:	4282      	cmp	r2, r0
 801a6e0:	bfa4      	itt	ge
 801a6e2:	189d      	addge	r5, r3, r2
 801a6e4:	fb95 f5f6 	sdivge	r5, r5, r6
 801a6e8:	a832      	add	r0, sp, #200	; 0xc8
 801a6ea:	f002 f917 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 801a6ee:	7c23      	ldrb	r3, [r4, #16]
 801a6f0:	b17b      	cbz	r3, 801a712 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xd2>
 801a6f2:	6820      	ldr	r0, [r4, #0]
 801a6f4:	6803      	ldr	r3, [r0, #0]
 801a6f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a6f8:	4798      	blx	r3
 801a6fa:	4683      	mov	fp, r0
 801a6fc:	6820      	ldr	r0, [r4, #0]
 801a6fe:	6803      	ldr	r3, [r0, #0]
 801a700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a702:	4798      	blx	r3
 801a704:	465b      	mov	r3, fp
 801a706:	9000      	str	r0, [sp, #0]
 801a708:	4651      	mov	r1, sl
 801a70a:	9a6f      	ldr	r2, [sp, #444]	; 0x1bc
 801a70c:	a832      	add	r0, sp, #200	; 0xc8
 801a70e:	f002 f960 	bl	801c9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801a712:	7be1      	ldrb	r1, [r4, #15]
 801a714:	a811      	add	r0, sp, #68	; 0x44
 801a716:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801a71a:	7963      	ldrb	r3, [r4, #5]
 801a71c:	1a52      	subs	r2, r2, r1
 801a71e:	7c21      	ldrb	r1, [r4, #16]
 801a720:	9101      	str	r1, [sp, #4]
 801a722:	b292      	uxth	r2, r2
 801a724:	6821      	ldr	r1, [r4, #0]
 801a726:	9100      	str	r1, [sp, #0]
 801a728:	a932      	add	r1, sp, #200	; 0xc8
 801a72a:	f7ff fc79 	bl	801a020 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801a72e:	7c23      	ldrb	r3, [r4, #16]
 801a730:	b9bb      	cbnz	r3, 801a762 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>
 801a732:	fa1f fa86 	uxth.w	sl, r6
 801a736:	2d00      	cmp	r5, #0
 801a738:	dd45      	ble.n	801a7c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a73a:	4638      	mov	r0, r7
 801a73c:	f002 fd1a 	bl	801d174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801a740:	2800      	cmp	r0, #0
 801a742:	d03d      	beq.n	801a7c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a744:	280a      	cmp	r0, #10
 801a746:	d1f6      	bne.n	801a736 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801a748:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a74c:	3d01      	subs	r5, #1
 801a74e:	4453      	add	r3, sl
 801a750:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a754:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a758:	eba3 030a 	sub.w	r3, r3, sl
 801a75c:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a760:	e7e9      	b.n	801a736 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf6>
 801a762:	0073      	lsls	r3, r6, #1
 801a764:	f64f 7bff 	movw	fp, #65535	; 0xffff
 801a768:	fa1f fa86 	uxth.w	sl, r6
 801a76c:	9309      	str	r3, [sp, #36]	; 0x24
 801a76e:	2d00      	cmp	r5, #0
 801a770:	dd29      	ble.n	801a7c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x186>
 801a772:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a776:	a811      	add	r0, sp, #68	; 0x44
 801a778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a77a:	428b      	cmp	r3, r1
 801a77c:	bfd4      	ite	le
 801a77e:	2100      	movle	r1, #0
 801a780:	2101      	movgt	r1, #1
 801a782:	f7ff fe69 	bl	801a458 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a786:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 801a78a:	3b01      	subs	r3, #1
 801a78c:	b29b      	uxth	r3, r3
 801a78e:	455b      	cmp	r3, fp
 801a790:	930b      	str	r3, [sp, #44]	; 0x2c
 801a792:	d005      	beq.n	801a7a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x160>
 801a794:	7961      	ldrb	r1, [r4, #5]
 801a796:	4638      	mov	r0, r7
 801a798:	f7f7 fb3a 	bl	8011e10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801a79c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a79e:	e7f4      	b.n	801a78a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x14a>
 801a7a0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a7a4:	3d01      	subs	r5, #1
 801a7a6:	4453      	add	r3, sl
 801a7a8:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a7ac:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
 801a7b0:	eba3 030a 	sub.w	r3, r3, sl
 801a7b4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 801a7b8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801a7bc:	2b00      	cmp	r3, #0
 801a7be:	d1d6      	bne.n	801a76e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801a7c0:	b065      	add	sp, #404	; 0x194
 801a7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7c6:	0075      	lsls	r5, r6, #1
 801a7c8:	f04f 0a00 	mov.w	sl, #0
 801a7cc:	7c23      	ldrb	r3, [r4, #16]
 801a7ce:	2b00      	cmp	r3, #0
 801a7d0:	d066      	beq.n	801a8a0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801a7d2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801a7d6:	a811      	add	r0, sp, #68	; 0x44
 801a7d8:	428d      	cmp	r5, r1
 801a7da:	bfd4      	ite	le
 801a7dc:	2100      	movle	r1, #0
 801a7de:	2101      	movgt	r1, #1
 801a7e0:	f7ff fe3a 	bl	801a458 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801a7e4:	9b08      	ldr	r3, [sp, #32]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d055      	beq.n	801a896 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a7ea:	f894 b010 	ldrb.w	fp, [r4, #16]
 801a7ee:	2264      	movs	r2, #100	; 0x64
 801a7f0:	4639      	mov	r1, r7
 801a7f2:	a84b      	add	r0, sp, #300	; 0x12c
 801a7f4:	f00f fb2a 	bl	8029e4c <memcpy>
 801a7f8:	f1bb 0f00 	cmp.w	fp, #0
 801a7fc:	d058      	beq.n	801a8b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x270>
 801a7fe:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801a802:	7922      	ldrb	r2, [r4, #4]
 801a804:	2a01      	cmp	r2, #1
 801a806:	d13c      	bne.n	801a882 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801a808:	f9bd 0040 	ldrsh.w	r0, [sp, #64]	; 0x40
 801a80c:	1ac0      	subs	r0, r0, r3
 801a80e:	2302      	movs	r3, #2
 801a810:	fb90 f0f3 	sdiv	r0, r0, r3
 801a814:	b200      	sxth	r0, r0
 801a816:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 801a81a:	4418      	add	r0, r3
 801a81c:	7c23      	ldrb	r3, [r4, #16]
 801a81e:	b200      	sxth	r0, r0
 801a820:	2b00      	cmp	r3, #0
 801a822:	d03a      	beq.n	801a89a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801a824:	f8bd 2056 	ldrh.w	r2, [sp, #86]	; 0x56
 801a828:	f89d 1062 	ldrb.w	r1, [sp, #98]	; 0x62
 801a82c:	9000      	str	r0, [sp, #0]
 801a82e:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	; 0x3e
 801a832:	980a      	ldr	r0, [sp, #40]	; 0x28
 801a834:	e9cd 2105 	strd	r2, r1, [sp, #20]
 801a838:	e9cd a703 	strd	sl, r7, [sp, #12]
 801a83c:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801a840:	464a      	mov	r2, r9
 801a842:	2100      	movs	r1, #0
 801a844:	f7ff fc95 	bl	801a172 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801a848:	2800      	cmp	r0, #0
 801a84a:	d1b9      	bne.n	801a7c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a84c:	b2b2      	uxth	r2, r6
 801a84e:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801a852:	4611      	mov	r1, r2
 801a854:	4413      	add	r3, r2
 801a856:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 801a85a:	b21b      	sxth	r3, r3
 801a85c:	1a52      	subs	r2, r2, r1
 801a85e:	7c21      	ldrb	r1, [r4, #16]
 801a860:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 801a864:	b212      	sxth	r2, r2
 801a866:	f8ad 2042 	strh.w	r2, [sp, #66]	; 0x42
 801a86a:	b109      	cbz	r1, 801a870 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x230>
 801a86c:	42b2      	cmp	r2, r6
 801a86e:	dba7      	blt.n	801a7c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a870:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 801a874:	f8b8 1002 	ldrh.w	r1, [r8, #2]
 801a878:	440a      	add	r2, r1
 801a87a:	b212      	sxth	r2, r2
 801a87c:	4293      	cmp	r3, r2
 801a87e:	dda5      	ble.n	801a7cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18c>
 801a880:	e79e      	b.n	801a7c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x180>
 801a882:	2a02      	cmp	r2, #2
 801a884:	d105      	bne.n	801a892 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801a886:	7be2      	ldrb	r2, [r4, #15]
 801a888:	f8bd 0040 	ldrh.w	r0, [sp, #64]	; 0x40
 801a88c:	1a80      	subs	r0, r0, r2
 801a88e:	1ac0      	subs	r0, r0, r3
 801a890:	e7c0      	b.n	801a814 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d4>
 801a892:	2000      	movs	r0, #0
 801a894:	e7bf      	b.n	801a816 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801a896:	7be0      	ldrb	r0, [r4, #15]
 801a898:	e7bd      	b.n	801a816 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801a89a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a89e:	e7c3      	b.n	801a828 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e8>
 801a8a0:	9b08      	ldr	r3, [sp, #32]
 801a8a2:	2b00      	cmp	r3, #0
 801a8a4:	d0f7      	beq.n	801a896 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801a8a6:	2264      	movs	r2, #100	; 0x64
 801a8a8:	4639      	mov	r1, r7
 801a8aa:	a84b      	add	r0, sp, #300	; 0x12c
 801a8ac:	f00f face 	bl	8029e4c <memcpy>
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a8b6:	6821      	ldr	r1, [r4, #0]
 801a8b8:	a84b      	add	r0, sp, #300	; 0x12c
 801a8ba:	f7ff fbed 	bl	801a098 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801a8be:	b203      	sxth	r3, r0
 801a8c0:	e79f      	b.n	801a802 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>

0801a8c2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801a8c2:	2b03      	cmp	r3, #3
 801a8c4:	d818      	bhi.n	801a8f8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 801a8c6:	e8df f003 	tbb	[pc, r3]
 801a8ca:	0602      	.short	0x0602
 801a8cc:	130d      	.short	0x130d
 801a8ce:	f9b0 2000 	ldrsh.w	r2, [r0]
 801a8d2:	1850      	adds	r0, r2, r1
 801a8d4:	4770      	bx	lr
 801a8d6:	8803      	ldrh	r3, [r0, #0]
 801a8d8:	8880      	ldrh	r0, [r0, #4]
 801a8da:	4418      	add	r0, r3
 801a8dc:	b200      	sxth	r0, r0
 801a8de:	1a80      	subs	r0, r0, r2
 801a8e0:	3801      	subs	r0, #1
 801a8e2:	4770      	bx	lr
 801a8e4:	8803      	ldrh	r3, [r0, #0]
 801a8e6:	8880      	ldrh	r0, [r0, #4]
 801a8e8:	4418      	add	r0, r3
 801a8ea:	b200      	sxth	r0, r0
 801a8ec:	1a40      	subs	r0, r0, r1
 801a8ee:	e7f7      	b.n	801a8e0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801a8f0:	f9b0 0000 	ldrsh.w	r0, [r0]
 801a8f4:	4410      	add	r0, r2
 801a8f6:	4770      	bx	lr
 801a8f8:	2000      	movs	r0, #0
 801a8fa:	4770      	bx	lr

0801a8fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801a8fc:	2b03      	cmp	r3, #3
 801a8fe:	d817      	bhi.n	801a930 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 801a900:	e8df f003 	tbb	[pc, r3]
 801a904:	10090602 	.word	0x10090602
 801a908:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801a90c:	1850      	adds	r0, r2, r1
 801a90e:	4770      	bx	lr
 801a910:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801a914:	e7fa      	b.n	801a90c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801a916:	8843      	ldrh	r3, [r0, #2]
 801a918:	88c0      	ldrh	r0, [r0, #6]
 801a91a:	4418      	add	r0, r3
 801a91c:	b200      	sxth	r0, r0
 801a91e:	1a80      	subs	r0, r0, r2
 801a920:	3801      	subs	r0, #1
 801a922:	4770      	bx	lr
 801a924:	8843      	ldrh	r3, [r0, #2]
 801a926:	88c0      	ldrh	r0, [r0, #6]
 801a928:	4418      	add	r0, r3
 801a92a:	b200      	sxth	r0, r0
 801a92c:	1a40      	subs	r0, r0, r1
 801a92e:	e7f7      	b.n	801a920 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801a930:	2000      	movs	r0, #0
 801a932:	4770      	bx	lr

0801a934 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801a934:	4b01      	ldr	r3, [pc, #4]	; (801a93c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 801a936:	2200      	movs	r2, #0
 801a938:	601a      	str	r2, [r3, #0]
 801a93a:	4770      	bx	lr
 801a93c:	2003c2cc 	.word	0x2003c2cc

0801a940 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 801a940:	4603      	mov	r3, r0
 801a942:	b1c8      	cbz	r0, 801a978 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801a944:	0c02      	lsrs	r2, r0, #16
 801a946:	0412      	lsls	r2, r2, #16
 801a948:	b9a2      	cbnz	r2, 801a974 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801a94a:	0403      	lsls	r3, r0, #16
 801a94c:	2010      	movs	r0, #16
 801a94e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801a952:	bf04      	itt	eq
 801a954:	021b      	lsleq	r3, r3, #8
 801a956:	3008      	addeq	r0, #8
 801a958:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801a95c:	bf04      	itt	eq
 801a95e:	011b      	lsleq	r3, r3, #4
 801a960:	3004      	addeq	r0, #4
 801a962:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801a966:	bf04      	itt	eq
 801a968:	009b      	lsleq	r3, r3, #2
 801a96a:	3002      	addeq	r0, #2
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	db04      	blt.n	801a97a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 801a970:	3001      	adds	r0, #1
 801a972:	4770      	bx	lr
 801a974:	2000      	movs	r0, #0
 801a976:	e7ea      	b.n	801a94e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 801a978:	2020      	movs	r0, #32
 801a97a:	4770      	bx	lr

0801a97c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801a97c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a980:	b087      	sub	sp, #28
 801a982:	4681      	mov	r9, r0
 801a984:	4698      	mov	r8, r3
 801a986:	4610      	mov	r0, r2
 801a988:	460d      	mov	r5, r1
 801a98a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 801a98e:	b981      	cbnz	r1, 801a9b2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 801a990:	b14b      	cbz	r3, 801a9a6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 801a992:	460b      	mov	r3, r1
 801a994:	464a      	mov	r2, r9
 801a996:	4641      	mov	r1, r8
 801a998:	e9cd 4700 	strd	r4, r7, [sp]
 801a99c:	f7ff ffee 	bl	801a97c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a9a0:	b007      	add	sp, #28
 801a9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a9a6:	f04f 33ff 	mov.w	r3, #4294967295
 801a9aa:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801a9ae:	603b      	str	r3, [r7, #0]
 801a9b0:	e7f6      	b.n	801a9a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a9b2:	fa32 fa01 	lsrs.w	sl, r2, r1
 801a9b6:	d107      	bne.n	801a9c8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 801a9b8:	fb09 f602 	mul.w	r6, r9, r2
 801a9bc:	fbb6 f0f4 	udiv	r0, r6, r4
 801a9c0:	fb04 6610 	mls	r6, r4, r0, r6
 801a9c4:	603e      	str	r6, [r7, #0]
 801a9c6:	e7eb      	b.n	801a9a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 801a9c8:	2601      	movs	r6, #1
 801a9ca:	fa09 fb01 	lsl.w	fp, r9, r1
 801a9ce:	408e      	lsls	r6, r1
 801a9d0:	fbbb f3f4 	udiv	r3, fp, r4
 801a9d4:	3e01      	subs	r6, #1
 801a9d6:	9302      	str	r3, [sp, #8]
 801a9d8:	fb0a f303 	mul.w	r3, sl, r3
 801a9dc:	4016      	ands	r6, r2
 801a9de:	9303      	str	r3, [sp, #12]
 801a9e0:	4630      	mov	r0, r6
 801a9e2:	f7ff ffad 	bl	801a940 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801a9e6:	464a      	mov	r2, r9
 801a9e8:	460b      	mov	r3, r1
 801a9ea:	4601      	mov	r1, r0
 801a9ec:	4630      	mov	r0, r6
 801a9ee:	e9cd 4700 	strd	r4, r7, [sp]
 801a9f2:	f7ff ffc3 	bl	801a97c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801a9f6:	9b02      	ldr	r3, [sp, #8]
 801a9f8:	4606      	mov	r6, r0
 801a9fa:	eb05 0108 	add.w	r1, r5, r8
 801a9fe:	fb04 bb13 	mls	fp, r4, r3, fp
 801aa02:	4658      	mov	r0, fp
 801aa04:	f7ff ff9c 	bl	801a940 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801aa08:	ab05      	add	r3, sp, #20
 801aa0a:	465a      	mov	r2, fp
 801aa0c:	e9cd 4300 	strd	r4, r3, [sp]
 801aa10:	4603      	mov	r3, r0
 801aa12:	4650      	mov	r0, sl
 801aa14:	f7ff ffb2 	bl	801a97c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801aa18:	6839      	ldr	r1, [r7, #0]
 801aa1a:	9a05      	ldr	r2, [sp, #20]
 801aa1c:	9b03      	ldr	r3, [sp, #12]
 801aa1e:	4411      	add	r1, r2
 801aa20:	fbb1 f2f4 	udiv	r2, r1, r4
 801aa24:	18d3      	adds	r3, r2, r3
 801aa26:	fb04 1412 	mls	r4, r4, r2, r1
 801aa2a:	441e      	add	r6, r3
 801aa2c:	603c      	str	r4, [r7, #0]
 801aa2e:	4430      	add	r0, r6
 801aa30:	e7b6      	b.n	801a9a0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801aa32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801aa32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801aa36:	b085      	sub	sp, #20
 801aa38:	f1b0 0900 	subs.w	r9, r0, #0
 801aa3c:	461d      	mov	r5, r3
 801aa3e:	4617      	mov	r7, r2
 801aa40:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801aa42:	bfbb      	ittet	lt
 801aa44:	f1c9 0900 	rsblt	r9, r9, #0
 801aa48:	f04f 36ff 	movlt.w	r6, #4294967295
 801aa4c:	2601      	movge	r6, #1
 801aa4e:	6823      	ldrlt	r3, [r4, #0]
 801aa50:	bfbc      	itt	lt
 801aa52:	425b      	neglt	r3, r3
 801aa54:	6023      	strlt	r3, [r4, #0]
 801aa56:	2a00      	cmp	r2, #0
 801aa58:	da04      	bge.n	801aa64 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 801aa5a:	6823      	ldr	r3, [r4, #0]
 801aa5c:	4257      	negs	r7, r2
 801aa5e:	4276      	negs	r6, r6
 801aa60:	425b      	negs	r3, r3
 801aa62:	6023      	str	r3, [r4, #0]
 801aa64:	2d00      	cmp	r5, #0
 801aa66:	4638      	mov	r0, r7
 801aa68:	bfba      	itte	lt
 801aa6a:	426d      	neglt	r5, r5
 801aa6c:	f04f 38ff 	movlt.w	r8, #4294967295
 801aa70:	f04f 0801 	movge.w	r8, #1
 801aa74:	f7ff ff64 	bl	801a940 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801aa78:	ab03      	add	r3, sp, #12
 801aa7a:	463a      	mov	r2, r7
 801aa7c:	e9cd 5300 	strd	r5, r3, [sp]
 801aa80:	4603      	mov	r3, r0
 801aa82:	4648      	mov	r0, r9
 801aa84:	f7ff ff7a 	bl	801a97c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801aa88:	6823      	ldr	r3, [r4, #0]
 801aa8a:	9a03      	ldr	r2, [sp, #12]
 801aa8c:	4546      	cmp	r6, r8
 801aa8e:	441a      	add	r2, r3
 801aa90:	fb92 f3f5 	sdiv	r3, r2, r5
 801aa94:	4418      	add	r0, r3
 801aa96:	fb05 2313 	mls	r3, r5, r3, r2
 801aa9a:	bf18      	it	ne
 801aa9c:	4240      	negne	r0, r0
 801aa9e:	1c72      	adds	r2, r6, #1
 801aaa0:	6023      	str	r3, [r4, #0]
 801aaa2:	d105      	bne.n	801aab0 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801aaa4:	2b00      	cmp	r3, #0
 801aaa6:	f1c3 0200 	rsb	r2, r3, #0
 801aaaa:	db0b      	blt.n	801aac4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 801aaac:	6022      	str	r2, [r4, #0]
 801aaae:	e006      	b.n	801aabe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801aab0:	2e01      	cmp	r6, #1
 801aab2:	d104      	bne.n	801aabe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	da02      	bge.n	801aabe <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801aab8:	442b      	add	r3, r5
 801aaba:	3801      	subs	r0, #1
 801aabc:	6023      	str	r3, [r4, #0]
 801aabe:	b005      	add	sp, #20
 801aac0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801aac4:	3801      	subs	r0, #1
 801aac6:	1b52      	subs	r2, r2, r5
 801aac8:	e7f0      	b.n	801aaac <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

0801aacc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801aacc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801aad0:	4c1c      	ldr	r4, [pc, #112]	; (801ab44 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 801aad2:	4605      	mov	r5, r0
 801aad4:	6807      	ldr	r7, [r0, #0]
 801aad6:	69a3      	ldr	r3, [r4, #24]
 801aad8:	b92b      	cbnz	r3, 801aae6 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801aada:	6840      	ldr	r0, [r0, #4]
 801aadc:	e9c5 7000 	strd	r7, r0, [r5]
 801aae0:	b004      	add	sp, #16
 801aae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aae6:	f04f 0802 	mov.w	r8, #2
 801aaea:	68a2      	ldr	r2, [r4, #8]
 801aaec:	ae04      	add	r6, sp, #16
 801aaee:	6820      	ldr	r0, [r4, #0]
 801aaf0:	fb93 f1f8 	sdiv	r1, r3, r8
 801aaf4:	440a      	add	r2, r1
 801aaf6:	69e1      	ldr	r1, [r4, #28]
 801aaf8:	f846 2d04 	str.w	r2, [r6, #-4]!
 801aafc:	463a      	mov	r2, r7
 801aafe:	9600      	str	r6, [sp, #0]
 801ab00:	f7ff ff97 	bl	801aa32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ab04:	69a3      	ldr	r3, [r4, #24]
 801ab06:	4607      	mov	r7, r0
 801ab08:	686a      	ldr	r2, [r5, #4]
 801ab0a:	6a21      	ldr	r1, [r4, #32]
 801ab0c:	9600      	str	r6, [sp, #0]
 801ab0e:	6860      	ldr	r0, [r4, #4]
 801ab10:	f7ff ff8f 	bl	801aa32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ab14:	69a3      	ldr	r3, [r4, #24]
 801ab16:	6962      	ldr	r2, [r4, #20]
 801ab18:	4407      	add	r7, r0
 801ab1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ab1c:	9600      	str	r6, [sp, #0]
 801ab1e:	68e0      	ldr	r0, [r4, #12]
 801ab20:	fb93 f8f8 	sdiv	r8, r3, r8
 801ab24:	4442      	add	r2, r8
 801ab26:	9203      	str	r2, [sp, #12]
 801ab28:	682a      	ldr	r2, [r5, #0]
 801ab2a:	f7ff ff82 	bl	801aa32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ab2e:	4680      	mov	r8, r0
 801ab30:	9600      	str	r6, [sp, #0]
 801ab32:	69a3      	ldr	r3, [r4, #24]
 801ab34:	686a      	ldr	r2, [r5, #4]
 801ab36:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801ab38:	6920      	ldr	r0, [r4, #16]
 801ab3a:	f7ff ff7a 	bl	801aa32 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801ab3e:	4440      	add	r0, r8
 801ab40:	e7cc      	b.n	801aadc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801ab42:	bf00      	nop
 801ab44:	2003c2d0 	.word	0x2003c2d0

0801ab48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801ab48:	4b07      	ldr	r3, [pc, #28]	; (801ab68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801ab4a:	781b      	ldrb	r3, [r3, #0]
 801ab4c:	2b01      	cmp	r3, #1
 801ab4e:	d109      	bne.n	801ab64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801ab50:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ab54:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ab58:	8003      	strh	r3, [r0, #0]
 801ab5a:	4b04      	ldr	r3, [pc, #16]	; (801ab6c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 801ab5c:	881b      	ldrh	r3, [r3, #0]
 801ab5e:	3b01      	subs	r3, #1
 801ab60:	1a9b      	subs	r3, r3, r2
 801ab62:	800b      	strh	r3, [r1, #0]
 801ab64:	4770      	bx	lr
 801ab66:	bf00      	nop
 801ab68:	2003c2b4 	.word	0x2003c2b4
 801ab6c:	2003c2b0 	.word	0x2003c2b0

0801ab70 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801ab70:	4b07      	ldr	r3, [pc, #28]	; (801ab90 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801ab72:	b510      	push	{r4, lr}
 801ab74:	781b      	ldrb	r3, [r3, #0]
 801ab76:	2b01      	cmp	r3, #1
 801ab78:	d108      	bne.n	801ab8c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801ab7a:	4b06      	ldr	r3, [pc, #24]	; (801ab94 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801ab7c:	880c      	ldrh	r4, [r1, #0]
 801ab7e:	881b      	ldrh	r3, [r3, #0]
 801ab80:	f9b0 2000 	ldrsh.w	r2, [r0]
 801ab84:	3b01      	subs	r3, #1
 801ab86:	1b1b      	subs	r3, r3, r4
 801ab88:	8003      	strh	r3, [r0, #0]
 801ab8a:	800a      	strh	r2, [r1, #0]
 801ab8c:	bd10      	pop	{r4, pc}
 801ab8e:	bf00      	nop
 801ab90:	2003c2b4 	.word	0x2003c2b4
 801ab94:	2003c2b0 	.word	0x2003c2b0

0801ab98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801ab98:	4b0a      	ldr	r3, [pc, #40]	; (801abc4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801ab9a:	b510      	push	{r4, lr}
 801ab9c:	781b      	ldrb	r3, [r3, #0]
 801ab9e:	2b01      	cmp	r3, #1
 801aba0:	d10e      	bne.n	801abc0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 801aba2:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801aba6:	8843      	ldrh	r3, [r0, #2]
 801aba8:	f9b0 4000 	ldrsh.w	r4, [r0]
 801abac:	18ca      	adds	r2, r1, r3
 801abae:	4b06      	ldr	r3, [pc, #24]	; (801abc8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 801abb0:	8044      	strh	r4, [r0, #2]
 801abb2:	881b      	ldrh	r3, [r3, #0]
 801abb4:	1a9b      	subs	r3, r3, r2
 801abb6:	8003      	strh	r3, [r0, #0]
 801abb8:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801abbc:	8081      	strh	r1, [r0, #4]
 801abbe:	80c3      	strh	r3, [r0, #6]
 801abc0:	bd10      	pop	{r4, pc}
 801abc2:	bf00      	nop
 801abc4:	2003c2b4 	.word	0x2003c2b4
 801abc8:	2003c2b0 	.word	0x2003c2b0

0801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801abcc:	4b08      	ldr	r3, [pc, #32]	; (801abf0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 801abce:	781b      	ldrb	r3, [r3, #0]
 801abd0:	2b01      	cmp	r3, #1
 801abd2:	d10c      	bne.n	801abee <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 801abd4:	8803      	ldrh	r3, [r0, #0]
 801abd6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801abda:	8842      	ldrh	r2, [r0, #2]
 801abdc:	8002      	strh	r2, [r0, #0]
 801abde:	185a      	adds	r2, r3, r1
 801abe0:	4b04      	ldr	r3, [pc, #16]	; (801abf4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801abe2:	881b      	ldrh	r3, [r3, #0]
 801abe4:	1a9b      	subs	r3, r3, r2
 801abe6:	8043      	strh	r3, [r0, #2]
 801abe8:	88c3      	ldrh	r3, [r0, #6]
 801abea:	80c1      	strh	r1, [r0, #6]
 801abec:	8083      	strh	r3, [r0, #4]
 801abee:	4770      	bx	lr
 801abf0:	2003c2b4 	.word	0x2003c2b4
 801abf4:	2003c2b0 	.word	0x2003c2b0

0801abf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801abf8:	4b07      	ldr	r3, [pc, #28]	; (801ac18 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801abfa:	b510      	push	{r4, lr}
 801abfc:	781b      	ldrb	r3, [r3, #0]
 801abfe:	2b01      	cmp	r3, #1
 801ac00:	d108      	bne.n	801ac14 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801ac02:	f9b1 3000 	ldrsh.w	r3, [r1]
 801ac06:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ac0a:	8003      	strh	r3, [r0, #0]
 801ac0c:	8893      	ldrh	r3, [r2, #4]
 801ac0e:	3b01      	subs	r3, #1
 801ac10:	1b1b      	subs	r3, r3, r4
 801ac12:	800b      	strh	r3, [r1, #0]
 801ac14:	bd10      	pop	{r4, pc}
 801ac16:	bf00      	nop
 801ac18:	2003c2b4 	.word	0x2003c2b4

0801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801ac1c:	4b0a      	ldr	r3, [pc, #40]	; (801ac48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801ac1e:	460a      	mov	r2, r1
 801ac20:	b510      	push	{r4, lr}
 801ac22:	781b      	ldrb	r3, [r3, #0]
 801ac24:	2b01      	cmp	r3, #1
 801ac26:	d10d      	bne.n	801ac44 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801ac28:	8881      	ldrh	r1, [r0, #4]
 801ac2a:	8803      	ldrh	r3, [r0, #0]
 801ac2c:	440b      	add	r3, r1
 801ac2e:	4601      	mov	r1, r0
 801ac30:	3b01      	subs	r3, #1
 801ac32:	f821 3b02 	strh.w	r3, [r1], #2
 801ac36:	f7ff ffdf 	bl	801abf8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801ac3a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ac3e:	88c2      	ldrh	r2, [r0, #6]
 801ac40:	80c3      	strh	r3, [r0, #6]
 801ac42:	8082      	strh	r2, [r0, #4]
 801ac44:	bd10      	pop	{r4, pc}
 801ac46:	bf00      	nop
 801ac48:	2003c2b4 	.word	0x2003c2b4

0801ac4c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801ac4c:	b570      	push	{r4, r5, r6, lr}
 801ac4e:	2300      	movs	r3, #0
 801ac50:	4c0a      	ldr	r4, [pc, #40]	; (801ac7c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801ac52:	4605      	mov	r5, r0
 801ac54:	460e      	mov	r6, r1
 801ac56:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801ac5a:	6820      	ldr	r0, [r4, #0]
 801ac5c:	b110      	cbz	r0, 801ac64 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x18>
 801ac5e:	6803      	ldr	r3, [r0, #0]
 801ac60:	695b      	ldr	r3, [r3, #20]
 801ac62:	4798      	blx	r3
 801ac64:	6026      	str	r6, [r4, #0]
 801ac66:	4630      	mov	r0, r6
 801ac68:	6833      	ldr	r3, [r6, #0]
 801ac6a:	68db      	ldr	r3, [r3, #12]
 801ac6c:	4798      	blx	r3
 801ac6e:	682b      	ldr	r3, [r5, #0]
 801ac70:	4628      	mov	r0, r5
 801ac72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ac74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ac78:	4718      	bx	r3
 801ac7a:	bf00      	nop
 801ac7c:	2003c300 	.word	0x2003c300

0801ac80 <_ZN8touchgfx11Application13requestRedrawEv>:
 801ac80:	4b06      	ldr	r3, [pc, #24]	; (801ac9c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 801ac82:	2100      	movs	r1, #0
 801ac84:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ac88:	4b05      	ldr	r3, [pc, #20]	; (801aca0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801ac8a:	f8c0 112c 	str.w	r1, [r0, #300]	; 0x12c
 801ac8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ac92:	f8a0 2130 	strh.w	r2, [r0, #304]	; 0x130
 801ac96:	f8a0 3132 	strh.w	r3, [r0, #306]	; 0x132
 801ac9a:	4770      	bx	lr
 801ac9c:	2003c2b0 	.word	0x2003c2b0
 801aca0:	2003c2b2 	.word	0x2003c2b2

0801aca4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801aca4:	4b03      	ldr	r3, [pc, #12]	; (801acb4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801aca6:	6818      	ldr	r0, [r3, #0]
 801aca8:	b110      	cbz	r0, 801acb0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801acaa:	6803      	ldr	r3, [r0, #0]
 801acac:	699b      	ldr	r3, [r3, #24]
 801acae:	4718      	bx	r3
 801acb0:	4770      	bx	lr
 801acb2:	bf00      	nop
 801acb4:	2003c300 	.word	0x2003c300

0801acb8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801acb8:	4770      	bx	lr
	...

0801acbc <_ZN8touchgfx11Application4drawEv>:
 801acbc:	4b09      	ldr	r3, [pc, #36]	; (801ace4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801acbe:	b507      	push	{r0, r1, r2, lr}
 801acc0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801acc4:	2100      	movs	r1, #0
 801acc6:	4b08      	ldr	r3, [pc, #32]	; (801ace8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 801acc8:	9100      	str	r1, [sp, #0]
 801acca:	4669      	mov	r1, sp
 801accc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801acd0:	f8ad 2004 	strh.w	r2, [sp, #4]
 801acd4:	f8ad 3006 	strh.w	r3, [sp, #6]
 801acd8:	6803      	ldr	r3, [r0, #0]
 801acda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801acdc:	4798      	blx	r3
 801acde:	b003      	add	sp, #12
 801ace0:	f85d fb04 	ldr.w	pc, [sp], #4
 801ace4:	2003c2b0 	.word	0x2003c2b0
 801ace8:	2003c2b2 	.word	0x2003c2b2

0801acec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801acec:	4b03      	ldr	r3, [pc, #12]	; (801acfc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801acee:	6818      	ldr	r0, [r3, #0]
 801acf0:	b110      	cbz	r0, 801acf8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801acf2:	6803      	ldr	r3, [r0, #0]
 801acf4:	69db      	ldr	r3, [r3, #28]
 801acf6:	4718      	bx	r3
 801acf8:	4770      	bx	lr
 801acfa:	bf00      	nop
 801acfc:	2003c300 	.word	0x2003c300

0801ad00 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801ad00:	4b03      	ldr	r3, [pc, #12]	; (801ad10 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801ad02:	6818      	ldr	r0, [r3, #0]
 801ad04:	b110      	cbz	r0, 801ad0c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801ad06:	6803      	ldr	r3, [r0, #0]
 801ad08:	6a1b      	ldr	r3, [r3, #32]
 801ad0a:	4718      	bx	r3
 801ad0c:	4770      	bx	lr
 801ad0e:	bf00      	nop
 801ad10:	2003c300 	.word	0x2003c300

0801ad14 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 801ad14:	2300      	movs	r3, #0
 801ad16:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801ad1a:	4770      	bx	lr

0801ad1c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801ad1c:	4b03      	ldr	r3, [pc, #12]	; (801ad2c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801ad1e:	6818      	ldr	r0, [r3, #0]
 801ad20:	b110      	cbz	r0, 801ad28 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801ad22:	6803      	ldr	r3, [r0, #0]
 801ad24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad26:	4718      	bx	r3
 801ad28:	4770      	bx	lr
 801ad2a:	bf00      	nop
 801ad2c:	2003c300 	.word	0x2003c300

0801ad30 <_ZN8touchgfx11Application15handleTickEventEv>:
 801ad30:	b570      	push	{r4, r5, r6, lr}
 801ad32:	4d32      	ldr	r5, [pc, #200]	; (801adfc <_ZN8touchgfx11Application15handleTickEventEv+0xcc>)
 801ad34:	4604      	mov	r4, r0
 801ad36:	6828      	ldr	r0, [r5, #0]
 801ad38:	b140      	cbz	r0, 801ad4c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ad3a:	7a03      	ldrb	r3, [r0, #8]
 801ad3c:	b933      	cbnz	r3, 801ad4c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801ad3e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801ad42:	6803      	ldr	r3, [r0, #0]
 801ad44:	689b      	ldr	r3, [r3, #8]
 801ad46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801ad4a:	4718      	bx	r3
 801ad4c:	f894 3134 	ldrb.w	r3, [r4, #308]	; 0x134
 801ad50:	b97b      	cbnz	r3, 801ad72 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ad52:	b170      	cbz	r0, 801ad72 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ad54:	7a03      	ldrb	r3, [r0, #8]
 801ad56:	b163      	cbz	r3, 801ad72 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801ad58:	4b29      	ldr	r3, [pc, #164]	; (801ae00 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801ad5a:	6818      	ldr	r0, [r3, #0]
 801ad5c:	b110      	cbz	r0, 801ad64 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801ad5e:	6803      	ldr	r3, [r0, #0]
 801ad60:	691b      	ldr	r3, [r3, #16]
 801ad62:	4798      	blx	r3
 801ad64:	6828      	ldr	r0, [r5, #0]
 801ad66:	6803      	ldr	r3, [r0, #0]
 801ad68:	68db      	ldr	r3, [r3, #12]
 801ad6a:	4798      	blx	r3
 801ad6c:	2301      	movs	r3, #1
 801ad6e:	f884 3134 	strb.w	r3, [r4, #308]	; 0x134
 801ad72:	2500      	movs	r5, #0
 801ad74:	f8b4 0084 	ldrh.w	r0, [r4, #132]	; 0x84
 801ad78:	42a8      	cmp	r0, r5
 801ad7a:	dd0c      	ble.n	801ad96 <_ZN8touchgfx11Application15handleTickEventEv+0x66>
 801ad7c:	1963      	adds	r3, r4, r5
 801ad7e:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
 801ad82:	b132      	cbz	r2, 801ad92 <_ZN8touchgfx11Application15handleTickEventEv+0x62>
 801ad84:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 801ad88:	4413      	add	r3, r2
 801ad8a:	6858      	ldr	r0, [r3, #4]
 801ad8c:	6803      	ldr	r3, [r0, #0]
 801ad8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ad90:	4798      	blx	r3
 801ad92:	3501      	adds	r5, #1
 801ad94:	e7ee      	b.n	801ad74 <_ZN8touchgfx11Application15handleTickEventEv+0x44>
 801ad96:	2300      	movs	r3, #0
 801ad98:	461a      	mov	r2, r3
 801ad9a:	4298      	cmp	r0, r3
 801ad9c:	d015      	beq.n	801adca <_ZN8touchgfx11Application15handleTickEventEv+0x9a>
 801ad9e:	18e1      	adds	r1, r4, r3
 801ada0:	f891 5088 	ldrb.w	r5, [r1, #136]	; 0x88
 801ada4:	b16d      	cbz	r5, 801adc2 <_ZN8touchgfx11Application15handleTickEventEv+0x92>
 801ada6:	429a      	cmp	r2, r3
 801ada8:	d00a      	beq.n	801adc0 <_ZN8touchgfx11Application15handleTickEventEv+0x90>
 801adaa:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801adae:	4431      	add	r1, r6
 801adb0:	684e      	ldr	r6, [r1, #4]
 801adb2:	b291      	uxth	r1, r2
 801adb4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801adb8:	604e      	str	r6, [r1, #4]
 801adba:	18a1      	adds	r1, r4, r2
 801adbc:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801adc0:	3201      	adds	r2, #1
 801adc2:	3301      	adds	r3, #1
 801adc4:	e7e9      	b.n	801ad9a <_ZN8touchgfx11Application15handleTickEventEv+0x6a>
 801adc6:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
 801adca:	f8b4 5084 	ldrh.w	r5, [r4, #132]	; 0x84
 801adce:	4295      	cmp	r5, r2
 801add0:	dd0d      	ble.n	801adee <_ZN8touchgfx11Application15handleTickEventEv+0xbe>
 801add2:	1e6b      	subs	r3, r5, #1
 801add4:	b29b      	uxth	r3, r3
 801add6:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 801adda:	4618      	mov	r0, r3
 801addc:	3104      	adds	r1, #4
 801adde:	4285      	cmp	r5, r0
 801ade0:	ddf1      	ble.n	801adc6 <_ZN8touchgfx11Application15handleTickEventEv+0x96>
 801ade2:	f851 6f04 	ldr.w	r6, [r1, #4]!
 801ade6:	3001      	adds	r0, #1
 801ade8:	f841 6c04 	str.w	r6, [r1, #-4]
 801adec:	e7f7      	b.n	801adde <_ZN8touchgfx11Application15handleTickEventEv+0xae>
 801adee:	4b04      	ldr	r3, [pc, #16]	; (801ae00 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>)
 801adf0:	6818      	ldr	r0, [r3, #0]
 801adf2:	b110      	cbz	r0, 801adfa <_ZN8touchgfx11Application15handleTickEventEv+0xca>
 801adf4:	6803      	ldr	r3, [r0, #0]
 801adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adf8:	e7a5      	b.n	801ad46 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801adfa:	bd70      	pop	{r4, r5, r6, pc}
 801adfc:	2003c304 	.word	0x2003c304
 801ae00:	2003c300 	.word	0x2003c300

0801ae04 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 801ae04:	b510      	push	{r4, lr}
 801ae06:	f9b1 4000 	ldrsh.w	r4, [r1]
 801ae0a:	888a      	ldrh	r2, [r1, #4]
 801ae0c:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ae10:	4422      	add	r2, r4
 801ae12:	b212      	sxth	r2, r2
 801ae14:	4293      	cmp	r3, r2
 801ae16:	da15      	bge.n	801ae44 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ae18:	8882      	ldrh	r2, [r0, #4]
 801ae1a:	4413      	add	r3, r2
 801ae1c:	b21b      	sxth	r3, r3
 801ae1e:	429c      	cmp	r4, r3
 801ae20:	da10      	bge.n	801ae44 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ae22:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801ae26:	88c9      	ldrh	r1, [r1, #6]
 801ae28:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801ae2c:	4419      	add	r1, r3
 801ae2e:	b209      	sxth	r1, r1
 801ae30:	428a      	cmp	r2, r1
 801ae32:	da07      	bge.n	801ae44 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 801ae34:	88c0      	ldrh	r0, [r0, #6]
 801ae36:	4410      	add	r0, r2
 801ae38:	b200      	sxth	r0, r0
 801ae3a:	4283      	cmp	r3, r0
 801ae3c:	bfac      	ite	ge
 801ae3e:	2000      	movge	r0, #0
 801ae40:	2001      	movlt	r0, #1
 801ae42:	bd10      	pop	{r4, pc}
 801ae44:	2000      	movs	r0, #0
 801ae46:	e7fc      	b.n	801ae42 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801ae48 <_ZN8touchgfx4Rect10restrictToEss>:
 801ae48:	f9b0 3000 	ldrsh.w	r3, [r0]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	b510      	push	{r4, lr}
 801ae50:	da04      	bge.n	801ae5c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 801ae52:	8884      	ldrh	r4, [r0, #4]
 801ae54:	4423      	add	r3, r4
 801ae56:	8083      	strh	r3, [r0, #4]
 801ae58:	2300      	movs	r3, #0
 801ae5a:	8003      	strh	r3, [r0, #0]
 801ae5c:	f9b0 4000 	ldrsh.w	r4, [r0]
 801ae60:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801ae64:	1b09      	subs	r1, r1, r4
 801ae66:	428b      	cmp	r3, r1
 801ae68:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801ae6c:	bfc8      	it	gt
 801ae6e:	8081      	strhgt	r1, [r0, #4]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	da04      	bge.n	801ae7e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 801ae74:	88c1      	ldrh	r1, [r0, #6]
 801ae76:	440b      	add	r3, r1
 801ae78:	80c3      	strh	r3, [r0, #6]
 801ae7a:	2300      	movs	r3, #0
 801ae7c:	8043      	strh	r3, [r0, #2]
 801ae7e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801ae82:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 801ae86:	1a52      	subs	r2, r2, r1
 801ae88:	4293      	cmp	r3, r2
 801ae8a:	bfc8      	it	gt
 801ae8c:	80c2      	strhgt	r2, [r0, #6]
 801ae8e:	bd10      	pop	{r4, pc}

0801ae90 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801ae90:	4b10      	ldr	r3, [pc, #64]	; (801aed4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801ae92:	b510      	push	{r4, lr}
 801ae94:	460c      	mov	r4, r1
 801ae96:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ae9a:	4b0f      	ldr	r3, [pc, #60]	; (801aed8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 801ae9c:	4620      	mov	r0, r4
 801ae9e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801aea2:	f7ff ffd1 	bl	801ae48 <_ZN8touchgfx4Rect10restrictToEss>
 801aea6:	4b0d      	ldr	r3, [pc, #52]	; (801aedc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801aea8:	6818      	ldr	r0, [r3, #0]
 801aeaa:	b190      	cbz	r0, 801aed2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 801aeac:	6803      	ldr	r3, [r0, #0]
 801aeae:	4621      	mov	r1, r4
 801aeb0:	689b      	ldr	r3, [r3, #8]
 801aeb2:	4798      	blx	r3
 801aeb4:	4b0a      	ldr	r3, [pc, #40]	; (801aee0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801aeb6:	6818      	ldr	r0, [r3, #0]
 801aeb8:	b118      	cbz	r0, 801aec2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801aeba:	6803      	ldr	r3, [r0, #0]
 801aebc:	4621      	mov	r1, r4
 801aebe:	689b      	ldr	r3, [r3, #8]
 801aec0:	4798      	blx	r3
 801aec2:	4b08      	ldr	r3, [pc, #32]	; (801aee4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 801aec4:	4621      	mov	r1, r4
 801aec6:	6818      	ldr	r0, [r3, #0]
 801aec8:	6803      	ldr	r3, [r0, #0]
 801aeca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aece:	69db      	ldr	r3, [r3, #28]
 801aed0:	4718      	bx	r3
 801aed2:	bd10      	pop	{r4, pc}
 801aed4:	2003c2b2 	.word	0x2003c2b2
 801aed8:	2003c2b0 	.word	0x2003c2b0
 801aedc:	2003c300 	.word	0x2003c300
 801aee0:	2003c2fc 	.word	0x2003c2fc
 801aee4:	2003c2bc 	.word	0x2003c2bc

0801aee8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801aee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aeea:	4606      	mov	r6, r0
 801aeec:	4608      	mov	r0, r1
 801aeee:	460f      	mov	r7, r1
 801aef0:	f7fb fb43 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801aef4:	b9e8      	cbnz	r0, 801af32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801aef6:	f9b7 5000 	ldrsh.w	r5, [r7]
 801aefa:	f9b6 4000 	ldrsh.w	r4, [r6]
 801aefe:	42a5      	cmp	r5, r4
 801af00:	db17      	blt.n	801af32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801af02:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801af06:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801af0a:	429a      	cmp	r2, r3
 801af0c:	db11      	blt.n	801af32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801af0e:	88b9      	ldrh	r1, [r7, #4]
 801af10:	440d      	add	r5, r1
 801af12:	88b1      	ldrh	r1, [r6, #4]
 801af14:	440c      	add	r4, r1
 801af16:	b22d      	sxth	r5, r5
 801af18:	b224      	sxth	r4, r4
 801af1a:	42a5      	cmp	r5, r4
 801af1c:	dc09      	bgt.n	801af32 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801af1e:	88f8      	ldrh	r0, [r7, #6]
 801af20:	4410      	add	r0, r2
 801af22:	88f2      	ldrh	r2, [r6, #6]
 801af24:	4413      	add	r3, r2
 801af26:	b200      	sxth	r0, r0
 801af28:	b21b      	sxth	r3, r3
 801af2a:	4298      	cmp	r0, r3
 801af2c:	bfcc      	ite	gt
 801af2e:	2000      	movgt	r0, #0
 801af30:	2001      	movle	r0, #1
 801af32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801af34 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 801af34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af36:	4604      	mov	r4, r0
 801af38:	4608      	mov	r0, r1
 801af3a:	460d      	mov	r5, r1
 801af3c:	f7fb fb1d 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801af40:	b978      	cbnz	r0, 801af62 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 801af42:	4620      	mov	r0, r4
 801af44:	f7fb fb19 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801af48:	f9b5 6000 	ldrsh.w	r6, [r5]
 801af4c:	b150      	cbz	r0, 801af64 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801af4e:	8026      	strh	r6, [r4, #0]
 801af50:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 801af54:	8063      	strh	r3, [r4, #2]
 801af56:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801af5a:	80a3      	strh	r3, [r4, #4]
 801af5c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801af60:	80e3      	strh	r3, [r4, #6]
 801af62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801af64:	f9b4 1000 	ldrsh.w	r1, [r4]
 801af68:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801af6c:	42b1      	cmp	r1, r6
 801af6e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801af72:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801af76:	460f      	mov	r7, r1
 801af78:	88ed      	ldrh	r5, [r5, #6]
 801af7a:	bfa8      	it	ge
 801af7c:	4637      	movge	r7, r6
 801af7e:	4293      	cmp	r3, r2
 801af80:	4618      	mov	r0, r3
 801af82:	4466      	add	r6, ip
 801af84:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801af88:	bfa8      	it	ge
 801af8a:	4610      	movge	r0, r2
 801af8c:	442a      	add	r2, r5
 801af8e:	88e5      	ldrh	r5, [r4, #6]
 801af90:	4461      	add	r1, ip
 801af92:	b236      	sxth	r6, r6
 801af94:	8027      	strh	r7, [r4, #0]
 801af96:	442b      	add	r3, r5
 801af98:	b209      	sxth	r1, r1
 801af9a:	b212      	sxth	r2, r2
 801af9c:	8060      	strh	r0, [r4, #2]
 801af9e:	b21b      	sxth	r3, r3
 801afa0:	428e      	cmp	r6, r1
 801afa2:	bfac      	ite	ge
 801afa4:	ebc7 0106 	rsbge	r1, r7, r6
 801afa8:	ebc7 0101 	rsblt	r1, r7, r1
 801afac:	429a      	cmp	r2, r3
 801afae:	bfac      	ite	ge
 801afb0:	ebc0 0202 	rsbge	r2, r0, r2
 801afb4:	ebc0 0203 	rsblt	r2, r0, r3
 801afb8:	80a1      	strh	r1, [r4, #4]
 801afba:	80e2      	strh	r2, [r4, #6]
 801afbc:	e7d1      	b.n	801af62 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801afc0 <_ZN8touchgfx11Application11getInstanceEv>:
 801afc0:	4b01      	ldr	r3, [pc, #4]	; (801afc8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801afc2:	6818      	ldr	r0, [r3, #0]
 801afc4:	4770      	bx	lr
 801afc6:	bf00      	nop
 801afc8:	2003c310 	.word	0x2003c310

0801afcc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801afcc:	2300      	movs	r3, #0
 801afce:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801afd2:	30a8      	adds	r0, #168	; 0xa8
 801afd4:	f820 3c24 	strh.w	r3, [r0, #-36]
 801afd8:	f802 3b01 	strb.w	r3, [r2], #1
 801afdc:	4282      	cmp	r2, r0
 801afde:	d1fb      	bne.n	801afd8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801afe0:	4770      	bx	lr

0801afe2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801afe2:	4603      	mov	r3, r0
 801afe4:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801afe8:	2200      	movs	r2, #0
 801afea:	801a      	strh	r2, [r3, #0]
 801afec:	3308      	adds	r3, #8
 801afee:	f823 2c06 	strh.w	r2, [r3, #-6]
 801aff2:	f823 2c04 	strh.w	r2, [r3, #-4]
 801aff6:	f823 2c02 	strh.w	r2, [r3, #-2]
 801affa:	428b      	cmp	r3, r1
 801affc:	d1f5      	bne.n	801afea <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801affe:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801b002:	4770      	bx	lr

0801b004 <_ZN8touchgfx11ApplicationC1Ev>:
 801b004:	b570      	push	{r4, r5, r6, lr}
 801b006:	4b19      	ldr	r3, [pc, #100]	; (801b06c <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801b008:	2500      	movs	r5, #0
 801b00a:	4604      	mov	r4, r0
 801b00c:	30a8      	adds	r0, #168	; 0xa8
 801b00e:	f840 3ca8 	str.w	r3, [r0, #-168]
 801b012:	f820 5c24 	strh.w	r5, [r0, #-36]
 801b016:	f7ff ffe4 	bl	801afe2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b01a:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801b01e:	f7ff ffe0 	bl	801afe2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b022:	f8a4 512c 	strh.w	r5, [r4, #300]	; 0x12c
 801b026:	f8a4 512e 	strh.w	r5, [r4, #302]	; 0x12e
 801b02a:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 801b02e:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 801b032:	f884 5134 	strb.w	r5, [r4, #308]	; 0x134
 801b036:	490e      	ldr	r1, [pc, #56]	; (801b070 <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801b038:	480e      	ldr	r0, [pc, #56]	; (801b074 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801b03a:	f00e f9c7 	bl	80293cc <CRC_Lock>
 801b03e:	4e0e      	ldr	r6, [pc, #56]	; (801b078 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801b040:	4b0e      	ldr	r3, [pc, #56]	; (801b07c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801b042:	b158      	cbz	r0, 801b05c <_ZN8touchgfx11ApplicationC1Ev+0x58>
 801b044:	801d      	strh	r5, [r3, #0]
 801b046:	2300      	movs	r3, #0
 801b048:	4a0d      	ldr	r2, [pc, #52]	; (801b080 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 801b04a:	4620      	mov	r0, r4
 801b04c:	6013      	str	r3, [r2, #0]
 801b04e:	4a0d      	ldr	r2, [pc, #52]	; (801b084 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801b050:	6033      	str	r3, [r6, #0]
 801b052:	6013      	str	r3, [r2, #0]
 801b054:	f7ff ffba 	bl	801afcc <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801b058:	4620      	mov	r0, r4
 801b05a:	bd70      	pop	{r4, r5, r6, pc}
 801b05c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801b060:	2002      	movs	r0, #2
 801b062:	801a      	strh	r2, [r3, #0]
 801b064:	6030      	str	r0, [r6, #0]
 801b066:	f001 fadf 	bl	801c628 <_ZN8touchgfx6Screen4drawEv>
 801b06a:	e7ec      	b.n	801b046 <_ZN8touchgfx11ApplicationC1Ev+0x42>
 801b06c:	08030900 	.word	0x08030900
 801b070:	b5e8b5cd 	.word	0xb5e8b5cd
 801b074:	f407a5c2 	.word	0xf407a5c2
 801b078:	2003c300 	.word	0x2003c300
 801b07c:	20000044 	.word	0x20000044
 801b080:	2003c310 	.word	0x2003c310
 801b084:	2003c304 	.word	0x2003c304

0801b088 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801b088:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 801b08c:	3b01      	subs	r3, #1
 801b08e:	b29b      	uxth	r3, r3
 801b090:	428b      	cmp	r3, r1
 801b092:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 801b096:	b510      	push	{r4, lr}
 801b098:	d908      	bls.n	801b0ac <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801b09a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801b09e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801b0a2:	681a      	ldr	r2, [r3, #0]
 801b0a4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801b0a8:	685a      	ldr	r2, [r3, #4]
 801b0aa:	6062      	str	r2, [r4, #4]
 801b0ac:	bd10      	pop	{r4, pc}
	...

0801b0b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801b0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0b4:	b08f      	sub	sp, #60	; 0x3c
 801b0b6:	4b94      	ldr	r3, [pc, #592]	; (801b308 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>)
 801b0b8:	4683      	mov	fp, r0
 801b0ba:	ac0a      	add	r4, sp, #40	; 0x28
 801b0bc:	e884 0006 	stmia.w	r4, {r1, r2}
 801b0c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b0c4:	4620      	mov	r0, r4
 801b0c6:	4b91      	ldr	r3, [pc, #580]	; (801b30c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x25c>)
 801b0c8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801b0cc:	f7ff febc 	bl	801ae48 <_ZN8touchgfx4Rect10restrictToEss>
 801b0d0:	4620      	mov	r0, r4
 801b0d2:	f7fb fa52 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b0d6:	2800      	cmp	r0, #0
 801b0d8:	d16a      	bne.n	801b1b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b0da:	9403      	str	r4, [sp, #12]
 801b0dc:	f8bb 50e8 	ldrh.w	r5, [fp, #232]	; 0xe8
 801b0e0:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b0e4:	2400      	movs	r4, #0
 801b0e6:	eb0b 06c5 	add.w	r6, fp, r5, lsl #3
 801b0ea:	9301      	str	r3, [sp, #4]
 801b0ec:	36a0      	adds	r6, #160	; 0xa0
 801b0ee:	42a5      	cmp	r5, r4
 801b0f0:	d00d      	beq.n	801b10e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5e>
 801b0f2:	eba6 01c4 	sub.w	r1, r6, r4, lsl #3
 801b0f6:	9803      	ldr	r0, [sp, #12]
 801b0f8:	f7ff fef6 	bl	801aee8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b0fc:	b128      	cbz	r0, 801b10a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5a>
 801b0fe:	1e69      	subs	r1, r5, #1
 801b100:	9801      	ldr	r0, [sp, #4]
 801b102:	1b09      	subs	r1, r1, r4
 801b104:	b289      	uxth	r1, r1
 801b106:	f7ff ffbf 	bl	801b088 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b10a:	3401      	adds	r4, #1
 801b10c:	e7ef      	b.n	801b0ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3e>
 801b10e:	f8bb 70e8 	ldrh.w	r7, [fp, #232]	; 0xe8
 801b112:	1e7b      	subs	r3, r7, #1
 801b114:	eb0b 0ac7 	add.w	sl, fp, r7, lsl #3
 801b118:	9704      	str	r7, [sp, #16]
 801b11a:	9302      	str	r3, [sp, #8]
 801b11c:	2400      	movs	r4, #0
 801b11e:	4655      	mov	r5, sl
 801b120:	9705      	str	r7, [sp, #20]
 801b122:	4626      	mov	r6, r4
 801b124:	9b05      	ldr	r3, [sp, #20]
 801b126:	2b00      	cmp	r3, #0
 801b128:	d078      	beq.n	801b21c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x16c>
 801b12a:	9903      	ldr	r1, [sp, #12]
 801b12c:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b130:	f7ff fe68 	bl	801ae04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b134:	b360      	cbz	r0, 801b190 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b136:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 801b13a:	f9b5 c0a0 	ldrsh.w	ip, [r5, #160]	; 0xa0
 801b13e:	f9bd 902a 	ldrsh.w	r9, [sp, #42]	; 0x2a
 801b142:	45e6      	cmp	lr, ip
 801b144:	f9b5 80a2 	ldrsh.w	r8, [r5, #162]	; 0xa2
 801b148:	db35      	blt.n	801b1b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b14a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b14e:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b152:	4472      	add	r2, lr
 801b154:	4463      	add	r3, ip
 801b156:	b212      	sxth	r2, r2
 801b158:	b21b      	sxth	r3, r3
 801b15a:	429a      	cmp	r2, r3
 801b15c:	dc2b      	bgt.n	801b1b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801b15e:	fa1f f288 	uxth.w	r2, r8
 801b162:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b166:	45c1      	cmp	r9, r8
 801b168:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b16c:	4413      	add	r3, r2
 801b16e:	fa1f fc89 	uxth.w	ip, r9
 801b172:	b29b      	uxth	r3, r3
 801b174:	fa0f fe83 	sxth.w	lr, r3
 801b178:	db0f      	blt.n	801b19a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801b17a:	eba3 030c 	sub.w	r3, r3, ip
 801b17e:	1ac9      	subs	r1, r1, r3
 801b180:	b209      	sxth	r1, r1
 801b182:	2900      	cmp	r1, #0
 801b184:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b188:	dd12      	ble.n	801b1b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b18a:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 801b18e:	4604      	mov	r4, r0
 801b190:	9b05      	ldr	r3, [sp, #20]
 801b192:	3d08      	subs	r5, #8
 801b194:	3b01      	subs	r3, #1
 801b196:	9305      	str	r3, [sp, #20]
 801b198:	e7c4      	b.n	801b124 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x74>
 801b19a:	4461      	add	r1, ip
 801b19c:	b209      	sxth	r1, r1
 801b19e:	4571      	cmp	r1, lr
 801b1a0:	dc3a      	bgt.n	801b218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b1a2:	eba2 020c 	sub.w	r2, r2, ip
 801b1a6:	b212      	sxth	r2, r2
 801b1a8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 801b1ac:	2a00      	cmp	r2, #0
 801b1ae:	dcee      	bgt.n	801b18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b1b0:	b00f      	add	sp, #60	; 0x3c
 801b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b1b6:	45c1      	cmp	r9, r8
 801b1b8:	db2e      	blt.n	801b218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b1ba:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 801b1be:	4499      	add	r9, r3
 801b1c0:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
 801b1c4:	4498      	add	r8, r3
 801b1c6:	fa0f f989 	sxth.w	r9, r9
 801b1ca:	fa0f f888 	sxth.w	r8, r8
 801b1ce:	45c1      	cmp	r9, r8
 801b1d0:	dc22      	bgt.n	801b218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b1d2:	fa1f f28c 	uxth.w	r2, ip
 801b1d6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
 801b1da:	45e6      	cmp	lr, ip
 801b1dc:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 801b1e0:	4413      	add	r3, r2
 801b1e2:	fa1f f88e 	uxth.w	r8, lr
 801b1e6:	b29b      	uxth	r3, r3
 801b1e8:	fa0f f983 	sxth.w	r9, r3
 801b1ec:	db0a      	blt.n	801b204 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x154>
 801b1ee:	eba3 0308 	sub.w	r3, r3, r8
 801b1f2:	1ac9      	subs	r1, r1, r3
 801b1f4:	b209      	sxth	r1, r1
 801b1f6:	2900      	cmp	r1, #0
 801b1f8:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 801b1fc:	ddd8      	ble.n	801b1b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b1fe:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 801b202:	e7c4      	b.n	801b18e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 801b204:	4441      	add	r1, r8
 801b206:	b209      	sxth	r1, r1
 801b208:	4549      	cmp	r1, r9
 801b20a:	dc05      	bgt.n	801b218 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 801b20c:	eba2 0208 	sub.w	r2, r2, r8
 801b210:	b212      	sxth	r2, r2
 801b212:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801b216:	e7c9      	b.n	801b1ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 801b218:	4606      	mov	r6, r0
 801b21a:	e7b9      	b.n	801b190 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801b21c:	2c00      	cmp	r4, #0
 801b21e:	f47f af7d 	bne.w	801b11c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c>
 801b222:	2e00      	cmp	r6, #0
 801b224:	f000 81e1 	beq.w	801b5ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801b228:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 801b22c:	4655      	mov	r5, sl
 801b22e:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 801b232:	b2b9      	uxth	r1, r7
 801b234:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801b238:	b2b3      	uxth	r3, r6
 801b23a:	9105      	str	r1, [sp, #20]
 801b23c:	9805      	ldr	r0, [sp, #20]
 801b23e:	441a      	add	r2, r3
 801b240:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 801b244:	b292      	uxth	r2, r2
 801b246:	4401      	add	r1, r0
 801b248:	fa0f f882 	sxth.w	r8, r2
 801b24c:	b289      	uxth	r1, r1
 801b24e:	9106      	str	r1, [sp, #24]
 801b250:	f9bd 9018 	ldrsh.w	r9, [sp, #24]
 801b254:	e9cd 2307 	strd	r2, r3, [sp, #28]
 801b258:	9b04      	ldr	r3, [sp, #16]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d058      	beq.n	801b310 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x260>
 801b25e:	9903      	ldr	r1, [sp, #12]
 801b260:	f105 00a0 	add.w	r0, r5, #160	; 0xa0
 801b264:	f7ff fdce 	bl	801ae04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b268:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b26c:	b1d8      	cbz	r0, 801b2a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b26e:	f9b5 e0a0 	ldrsh.w	lr, [r5, #160]	; 0xa0
 801b272:	f9b5 10a2 	ldrsh.w	r1, [r5, #162]	; 0xa2
 801b276:	4576      	cmp	r6, lr
 801b278:	dc26      	bgt.n	801b2c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801b27a:	f8b5 c0a4 	ldrh.w	ip, [r5, #164]	; 0xa4
 801b27e:	44f4      	add	ip, lr
 801b280:	fa0f fc8c 	sxth.w	ip, ip
 801b284:	45e0      	cmp	r8, ip
 801b286:	db1f      	blt.n	801b2c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x218>
 801b288:	428f      	cmp	r7, r1
 801b28a:	fa1f fc81 	uxth.w	ip, r1
 801b28e:	f8b5 10a6 	ldrh.w	r1, [r5, #166]	; 0xa6
 801b292:	dc0f      	bgt.n	801b2b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x204>
 801b294:	9806      	ldr	r0, [sp, #24]
 801b296:	f8a5 90a2 	strh.w	r9, [r5, #162]	; 0xa2
 801b29a:	eba0 0c0c 	sub.w	ip, r0, ip
 801b29e:	eba1 010c 	sub.w	r1, r1, ip
 801b2a2:	f8a5 10a6 	strh.w	r1, [r5, #166]	; 0xa6
 801b2a6:	4620      	mov	r0, r4
 801b2a8:	9904      	ldr	r1, [sp, #16]
 801b2aa:	3d08      	subs	r5, #8
 801b2ac:	4604      	mov	r4, r0
 801b2ae:	3901      	subs	r1, #1
 801b2b0:	9104      	str	r1, [sp, #16]
 801b2b2:	e7cf      	b.n	801b254 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1a4>
 801b2b4:	4461      	add	r1, ip
 801b2b6:	b209      	sxth	r1, r1
 801b2b8:	4549      	cmp	r1, r9
 801b2ba:	dcf5      	bgt.n	801b2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b2bc:	9905      	ldr	r1, [sp, #20]
 801b2be:	eba1 0c0c 	sub.w	ip, r1, ip
 801b2c2:	f8a5 c0a6 	strh.w	ip, [r5, #166]	; 0xa6
 801b2c6:	e7ee      	b.n	801b2a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b2c8:	428f      	cmp	r7, r1
 801b2ca:	dced      	bgt.n	801b2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b2cc:	f8b5 c0a6 	ldrh.w	ip, [r5, #166]	; 0xa6
 801b2d0:	4461      	add	r1, ip
 801b2d2:	b209      	sxth	r1, r1
 801b2d4:	4589      	cmp	r9, r1
 801b2d6:	dbe7      	blt.n	801b2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b2d8:	4576      	cmp	r6, lr
 801b2da:	fa1f fc8e 	uxth.w	ip, lr
 801b2de:	f8b5 10a4 	ldrh.w	r1, [r5, #164]	; 0xa4
 801b2e2:	dc08      	bgt.n	801b2f6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x246>
 801b2e4:	eba2 0c0c 	sub.w	ip, r2, ip
 801b2e8:	f8a5 80a0 	strh.w	r8, [r5, #160]	; 0xa0
 801b2ec:	eba1 010c 	sub.w	r1, r1, ip
 801b2f0:	f8a5 10a4 	strh.w	r1, [r5, #164]	; 0xa4
 801b2f4:	e7d7      	b.n	801b2a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b2f6:	4461      	add	r1, ip
 801b2f8:	b209      	sxth	r1, r1
 801b2fa:	4588      	cmp	r8, r1
 801b2fc:	dbd4      	blt.n	801b2a8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f8>
 801b2fe:	eba3 0c0c 	sub.w	ip, r3, ip
 801b302:	f8a5 c0a4 	strh.w	ip, [r5, #164]	; 0xa4
 801b306:	e7ce      	b.n	801b2a6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f6>
 801b308:	2003c2b2 	.word	0x2003c2b2
 801b30c:	2003c2b0 	.word	0x2003c2b0
 801b310:	2c00      	cmp	r4, #0
 801b312:	f000 816a 	beq.w	801b5ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801b316:	9b02      	ldr	r3, [sp, #8]
 801b318:	3301      	adds	r3, #1
 801b31a:	f000 8166 	beq.w	801b5ea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53a>
 801b31e:	f10a 04a0 	add.w	r4, sl, #160	; 0xa0
 801b322:	9803      	ldr	r0, [sp, #12]
 801b324:	4621      	mov	r1, r4
 801b326:	f7ff fddf 	bl	801aee8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801b32a:	b120      	cbz	r0, 801b336 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x286>
 801b32c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 801b330:	9801      	ldr	r0, [sp, #4]
 801b332:	f7ff fea9 	bl	801b088 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b336:	9903      	ldr	r1, [sp, #12]
 801b338:	4620      	mov	r0, r4
 801b33a:	f7ff fd63 	bl	801ae04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b33e:	2800      	cmp	r0, #0
 801b340:	f000 809b 	beq.w	801b47a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801b344:	f9ba 00a0 	ldrsh.w	r0, [sl, #160]	; 0xa0
 801b348:	f9ba 30a4 	ldrsh.w	r3, [sl, #164]	; 0xa4
 801b34c:	b281      	uxth	r1, r0
 801b34e:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 801b352:	9309      	str	r3, [sp, #36]	; 0x24
 801b354:	eb01 0c03 	add.w	ip, r1, r3
 801b358:	b2ab      	uxth	r3, r5
 801b35a:	4285      	cmp	r5, r0
 801b35c:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 801b360:	fa1f f98c 	uxth.w	r9, ip
 801b364:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 801b368:	f9ba 20a2 	ldrsh.w	r2, [sl, #162]	; 0xa2
 801b36c:	eb03 040c 	add.w	r4, r3, ip
 801b370:	b2a4      	uxth	r4, r4
 801b372:	9405      	str	r4, [sp, #20]
 801b374:	f9bd 4014 	ldrsh.w	r4, [sp, #20]
 801b378:	9404      	str	r4, [sp, #16]
 801b37a:	f8bb 40e8 	ldrh.w	r4, [fp, #232]	; 0xe8
 801b37e:	f340 809a 	ble.w	801b4b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x406>
 801b382:	1a5b      	subs	r3, r3, r1
 801b384:	4596      	cmp	lr, r2
 801b386:	fa0f f589 	sxth.w	r5, r9
 801b38a:	b29b      	uxth	r3, r3
 801b38c:	b21e      	sxth	r6, r3
 801b38e:	dd2e      	ble.n	801b3ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x33e>
 801b390:	9f02      	ldr	r7, [sp, #8]
 801b392:	fa1f fe8e 	uxth.w	lr, lr
 801b396:	b292      	uxth	r2, r2
 801b398:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
 801b39c:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 801b3a0:	9f04      	ldr	r7, [sp, #16]
 801b3a2:	ebae 0102 	sub.w	r1, lr, r2
 801b3a6:	4486      	add	lr, r0
 801b3a8:	1b7f      	subs	r7, r7, r5
 801b3aa:	f8b8 50ae 	ldrh.w	r5, [r8, #174]	; 0xae
 801b3ae:	b289      	uxth	r1, r1
 801b3b0:	442a      	add	r2, r5
 801b3b2:	fa0f fe8e 	sxth.w	lr, lr
 801b3b6:	b20c      	sxth	r4, r1
 801b3b8:	b212      	sxth	r2, r2
 801b3ba:	4367      	muls	r7, r4
 801b3bc:	ebae 0202 	sub.w	r2, lr, r2
 801b3c0:	4372      	muls	r2, r6
 801b3c2:	4297      	cmp	r7, r2
 801b3c4:	db09      	blt.n	801b3da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x32a>
 801b3c6:	f8b8 20a8 	ldrh.w	r2, [r8, #168]	; 0xa8
 801b3ca:	f8a8 40ae 	strh.w	r4, [r8, #174]	; 0xae
 801b3ce:	449c      	add	ip, r3
 801b3d0:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 801b3d4:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b3d8:	e680      	b.n	801b0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b3da:	4401      	add	r1, r0
 801b3dc:	f8b8 30aa 	ldrh.w	r3, [r8, #170]	; 0xaa
 801b3e0:	f8a8 60ac 	strh.w	r6, [r8, #172]	; 0xac
 801b3e4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b3e8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b3ec:	e676      	b.n	801b0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b3ee:	9f04      	ldr	r7, [sp, #16]
 801b3f0:	42bd      	cmp	r5, r7
 801b3f2:	da27      	bge.n	801b444 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x394>
 801b3f4:	9902      	ldr	r1, [sp, #8]
 801b3f6:	1b7f      	subs	r7, r7, r5
 801b3f8:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 801b3fc:	eb0b 00c1 	add.w	r0, fp, r1, lsl #3
 801b400:	eb04 010e 	add.w	r1, r4, lr
 801b404:	fa1f f881 	uxth.w	r8, r1
 801b408:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
 801b40c:	4411      	add	r1, r2
 801b40e:	fa0f f988 	sxth.w	r9, r8
 801b412:	eba2 020e 	sub.w	r2, r2, lr
 801b416:	eba1 0108 	sub.w	r1, r1, r8
 801b41a:	4372      	muls	r2, r6
 801b41c:	b289      	uxth	r1, r1
 801b41e:	fa0f f881 	sxth.w	r8, r1
 801b422:	fb08 f707 	mul.w	r7, r8, r7
 801b426:	42ba      	cmp	r2, r7
 801b428:	dc06      	bgt.n	801b438 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801b42a:	f8a0 90aa 	strh.w	r9, [r0, #170]	; 0xaa
 801b42e:	f8a0 80ae 	strh.w	r8, [r0, #174]	; 0xae
 801b432:	f8b0 20a8 	ldrh.w	r2, [r0, #168]	; 0xa8
 801b436:	e7ca      	b.n	801b3ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801b438:	4421      	add	r1, r4
 801b43a:	f8a0 60ac 	strh.w	r6, [r0, #172]	; 0xac
 801b43e:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b442:	e64b      	b.n	801b0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b444:	9d05      	ldr	r5, [sp, #20]
 801b446:	2c06      	cmp	r4, #6
 801b448:	eba9 0505 	sub.w	r5, r9, r5
 801b44c:	b2ad      	uxth	r5, r5
 801b44e:	fa0f fe85 	sxth.w	lr, r5
 801b452:	d818      	bhi.n	801b486 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3d6>
 801b454:	9b04      	ldr	r3, [sp, #16]
 801b456:	f9ba 10a6 	ldrsh.w	r1, [sl, #166]	; 0xa6
 801b45a:	f8aa 30a0 	strh.w	r3, [sl, #160]	; 0xa0
 801b45e:	1c63      	adds	r3, r4, #1
 801b460:	f8aa e0a4 	strh.w	lr, [sl, #164]	; 0xa4
 801b464:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801b468:	9b01      	ldr	r3, [sp, #4]
 801b46a:	9d01      	ldr	r5, [sp, #4]
 801b46c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b470:	f825 0034 	strh.w	r0, [r5, r4, lsl #3]
 801b474:	805a      	strh	r2, [r3, #2]
 801b476:	809e      	strh	r6, [r3, #4]
 801b478:	80d9      	strh	r1, [r3, #6]
 801b47a:	9b02      	ldr	r3, [sp, #8]
 801b47c:	f1aa 0a08 	sub.w	sl, sl, #8
 801b480:	3b01      	subs	r3, #1
 801b482:	9302      	str	r3, [sp, #8]
 801b484:	e747      	b.n	801b316 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x266>
 801b486:	9a02      	ldr	r2, [sp, #8]
 801b488:	45b6      	cmp	lr, r6
 801b48a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b48e:	db0d      	blt.n	801b4ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3fc>
 801b490:	449c      	add	ip, r3
 801b492:	445a      	add	r2, fp
 801b494:	f8ad 0028 	strh.w	r0, [sp, #40]	; 0x28
 801b498:	fa1f fc8c 	uxth.w	ip, ip
 801b49c:	f8a2 e0ac 	strh.w	lr, [r2, #172]	; 0xac
 801b4a0:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 801b4a4:	448c      	add	ip, r1
 801b4a6:	f8a2 c0a8 	strh.w	ip, [r2, #168]	; 0xa8
 801b4aa:	e617      	b.n	801b0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b4ac:	445a      	add	r2, fp
 801b4ae:	44ac      	add	ip, r5
 801b4b0:	f8a2 60ac 	strh.w	r6, [r2, #172]	; 0xac
 801b4b4:	e78e      	b.n	801b3d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b4b6:	fa1f f18e 	uxth.w	r1, lr
 801b4ba:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 801b4be:	b293      	uxth	r3, r2
 801b4c0:	4596      	cmp	lr, r2
 801b4c2:	eb01 0806 	add.w	r8, r1, r6
 801b4c6:	9306      	str	r3, [sp, #24]
 801b4c8:	fa1f f888 	uxth.w	r8, r8
 801b4cc:	9f06      	ldr	r7, [sp, #24]
 801b4ce:	fa0f f388 	sxth.w	r3, r8
 801b4d2:	9307      	str	r3, [sp, #28]
 801b4d4:	f8ba 30a6 	ldrh.w	r3, [sl, #166]	; 0xa6
 801b4d8:	443b      	add	r3, r7
 801b4da:	b29b      	uxth	r3, r3
 801b4dc:	9308      	str	r3, [sp, #32]
 801b4de:	da25      	bge.n	801b52c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x47c>
 801b4e0:	9905      	ldr	r1, [sp, #20]
 801b4e2:	eba3 0308 	sub.w	r3, r3, r8
 801b4e6:	eba2 020e 	sub.w	r2, r2, lr
 801b4ea:	1b40      	subs	r0, r0, r5
 801b4ec:	eba9 0401 	sub.w	r4, r9, r1
 801b4f0:	b29b      	uxth	r3, r3
 801b4f2:	b2a4      	uxth	r4, r4
 801b4f4:	b219      	sxth	r1, r3
 801b4f6:	fa0f f984 	sxth.w	r9, r4
 801b4fa:	4348      	muls	r0, r1
 801b4fc:	fb09 f202 	mul.w	r2, r9, r2
 801b500:	4282      	cmp	r2, r0
 801b502:	9a02      	ldr	r2, [sp, #8]
 801b504:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801b508:	445a      	add	r2, fp
 801b50a:	dc06      	bgt.n	801b51a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46a>
 801b50c:	9b07      	ldr	r3, [sp, #28]
 801b50e:	44a4      	add	ip, r4
 801b510:	f8a2 10ae 	strh.w	r1, [r2, #174]	; 0xae
 801b514:	f8a2 30aa 	strh.w	r3, [r2, #170]	; 0xaa
 801b518:	e75c      	b.n	801b3d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b51a:	9904      	ldr	r1, [sp, #16]
 801b51c:	f8a2 90ac 	strh.w	r9, [r2, #172]	; 0xac
 801b520:	f8a2 10a8 	strh.w	r1, [r2, #168]	; 0xa8
 801b524:	4433      	add	r3, r6
 801b526:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801b52a:	e5d7      	b.n	801b0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b52c:	9f06      	ldr	r7, [sp, #24]
 801b52e:	9b04      	ldr	r3, [sp, #16]
 801b530:	1bc9      	subs	r1, r1, r7
 801b532:	fa0f f789 	sxth.w	r7, r9
 801b536:	b289      	uxth	r1, r1
 801b538:	429f      	cmp	r7, r3
 801b53a:	fa0f fe81 	sxth.w	lr, r1
 801b53e:	dd22      	ble.n	801b586 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4d6>
 801b540:	9a05      	ldr	r2, [sp, #20]
 801b542:	1b40      	subs	r0, r0, r5
 801b544:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801b548:	eba9 0202 	sub.w	r2, r9, r2
 801b54c:	9d07      	ldr	r5, [sp, #28]
 801b54e:	fb0e f000 	mul.w	r0, lr, r0
 801b552:	b292      	uxth	r2, r2
 801b554:	eba5 0a03 	sub.w	sl, r5, r3
 801b558:	9b02      	ldr	r3, [sp, #8]
 801b55a:	b214      	sxth	r4, r2
 801b55c:	00db      	lsls	r3, r3, #3
 801b55e:	fb04 fa0a 	mul.w	sl, r4, sl
 801b562:	445b      	add	r3, fp
 801b564:	4550      	cmp	r0, sl
 801b566:	db03      	blt.n	801b570 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c0>
 801b568:	f8a3 e0ae 	strh.w	lr, [r3, #174]	; 0xae
 801b56c:	4494      	add	ip, r2
 801b56e:	e731      	b.n	801b3d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x324>
 801b570:	9a04      	ldr	r2, [sp, #16]
 801b572:	4431      	add	r1, r6
 801b574:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
 801b578:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 801b57c:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 801b580:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 801b584:	e75b      	b.n	801b43e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x38e>
 801b586:	9b08      	ldr	r3, [sp, #32]
 801b588:	2c06      	cmp	r4, #6
 801b58a:	eba3 0308 	sub.w	r3, r3, r8
 801b58e:	b29b      	uxth	r3, r3
 801b590:	b21d      	sxth	r5, r3
 801b592:	d813      	bhi.n	801b5bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x50c>
 801b594:	9b07      	ldr	r3, [sp, #28]
 801b596:	f8aa 50a6 	strh.w	r5, [sl, #166]	; 0xa6
 801b59a:	f8aa 30a2 	strh.w	r3, [sl, #162]	; 0xa2
 801b59e:	1c63      	adds	r3, r4, #1
 801b5a0:	9901      	ldr	r1, [sp, #4]
 801b5a2:	f8ab 30e8 	strh.w	r3, [fp, #232]	; 0xe8
 801b5a6:	9b01      	ldr	r3, [sp, #4]
 801b5a8:	f821 0034 	strh.w	r0, [r1, r4, lsl #3]
 801b5ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b5b0:	805a      	strh	r2, [r3, #2]
 801b5b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b5b4:	f8a3 e006 	strh.w	lr, [r3, #6]
 801b5b8:	809a      	strh	r2, [r3, #4]
 801b5ba:	e75e      	b.n	801b47a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ca>
 801b5bc:	9802      	ldr	r0, [sp, #8]
 801b5be:	4575      	cmp	r5, lr
 801b5c0:	ea4f 00c0 	mov.w	r0, r0, lsl #3
 801b5c4:	db0d      	blt.n	801b5e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x532>
 801b5c6:	4431      	add	r1, r6
 801b5c8:	9b06      	ldr	r3, [sp, #24]
 801b5ca:	4458      	add	r0, fp
 801b5cc:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 801b5d0:	b289      	uxth	r1, r1
 801b5d2:	f8a0 50ae 	strh.w	r5, [r0, #174]	; 0xae
 801b5d6:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 801b5da:	4419      	add	r1, r3
 801b5dc:	f8a0 10aa 	strh.w	r1, [r0, #170]	; 0xaa
 801b5e0:	e57c      	b.n	801b0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b5e2:	4458      	add	r0, fp
 801b5e4:	f8a0 e0ae 	strh.w	lr, [r0, #174]	; 0xae
 801b5e8:	e79c      	b.n	801b524 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x474>
 801b5ea:	f8bb 60e8 	ldrh.w	r6, [fp, #232]	; 0xe8
 801b5ee:	2e07      	cmp	r6, #7
 801b5f0:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 801b5f4:	d812      	bhi.n	801b61c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56c>
 801b5f6:	1c75      	adds	r5, r6, #1
 801b5f8:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 801b5fc:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 801b600:	f8ab 50e8 	strh.w	r5, [fp, #232]	; 0xe8
 801b604:	9d01      	ldr	r5, [sp, #4]
 801b606:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 801b60a:	442c      	add	r4, r5
 801b60c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 801b610:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 801b614:	8061      	strh	r1, [r4, #2]
 801b616:	80a2      	strh	r2, [r4, #4]
 801b618:	80e3      	strh	r3, [r4, #6]
 801b61a:	e5c9      	b.n	801b1b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801b61c:	f10b 03a8 	add.w	r3, fp, #168	; 0xa8
 801b620:	3e01      	subs	r6, #1
 801b622:	445c      	add	r4, fp
 801b624:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 801b628:	f04f 37ff 	mov.w	r7, #4294967295
 801b62c:	2500      	movs	r5, #0
 801b62e:	9305      	str	r3, [sp, #20]
 801b630:	f9b4 30a4 	ldrsh.w	r3, [r4, #164]	; 0xa4
 801b634:	1e72      	subs	r2, r6, #1
 801b636:	9302      	str	r3, [sp, #8]
 801b638:	4691      	mov	r9, r2
 801b63a:	f9b4 30a6 	ldrsh.w	r3, [r4, #166]	; 0xa6
 801b63e:	9304      	str	r3, [sp, #16]
 801b640:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
 801b644:	f1b9 3fff 	cmp.w	r9, #4294967295
 801b648:	6818      	ldr	r0, [r3, #0]
 801b64a:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801b64e:	9207      	str	r2, [sp, #28]
 801b650:	bf16      	itet	ne
 801b652:	9905      	ldrne	r1, [sp, #20]
 801b654:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801b658:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 801b65c:	9306      	str	r3, [sp, #24]
 801b65e:	f8be 1006 	ldrh.w	r1, [lr, #6]
 801b662:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801b666:	fb18 f801 	smulbb	r8, r8, r1
 801b66a:	6859      	ldr	r1, [r3, #4]
 801b66c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801b670:	4671      	mov	r1, lr
 801b672:	a80c      	add	r0, sp, #48	; 0x30
 801b674:	f7ff fc5e 	bl	801af34 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b678:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 801b67c:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 801b680:	f04f 0c08 	mov.w	ip, #8
 801b684:	9b04      	ldr	r3, [sp, #16]
 801b686:	9a02      	ldr	r2, [sp, #8]
 801b688:	fb10 f001 	smulbb	r0, r0, r1
 801b68c:	fb02 8803 	mla	r8, r2, r3, r8
 801b690:	eba0 0108 	sub.w	r1, r0, r8
 801b694:	fb90 f0fc 	sdiv	r0, r0, ip
 801b698:	4288      	cmp	r0, r1
 801b69a:	dc20      	bgt.n	801b6de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801b69c:	4551      	cmp	r1, sl
 801b69e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801b6a2:	da03      	bge.n	801b6ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801b6a4:	b1d9      	cbz	r1, 801b6de <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x62e>
 801b6a6:	468a      	mov	sl, r1
 801b6a8:	464f      	mov	r7, r9
 801b6aa:	4635      	mov	r5, r6
 801b6ac:	f109 39ff 	add.w	r9, r9, #4294967295
 801b6b0:	f119 0f02 	cmn.w	r9, #2
 801b6b4:	d1c6      	bne.n	801b644 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 801b6b6:	4616      	mov	r6, r2
 801b6b8:	3201      	adds	r2, #1
 801b6ba:	f1a4 0408 	sub.w	r4, r4, #8
 801b6be:	d1b7      	bne.n	801b630 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x580>
 801b6c0:	9b01      	ldr	r3, [sp, #4]
 801b6c2:	b2ac      	uxth	r4, r5
 801b6c4:	00ed      	lsls	r5, r5, #3
 801b6c6:	1958      	adds	r0, r3, r5
 801b6c8:	1c7b      	adds	r3, r7, #1
 801b6ca:	d10b      	bne.n	801b6e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x634>
 801b6cc:	4601      	mov	r1, r0
 801b6ce:	9803      	ldr	r0, [sp, #12]
 801b6d0:	f7ff fc30 	bl	801af34 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b6d4:	4621      	mov	r1, r4
 801b6d6:	9801      	ldr	r0, [sp, #4]
 801b6d8:	f7ff fcd6 	bl	801b088 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801b6dc:	e4fe      	b.n	801b0dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801b6de:	464f      	mov	r7, r9
 801b6e0:	4635      	mov	r5, r6
 801b6e2:	e7ed      	b.n	801b6c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 801b6e4:	9b01      	ldr	r3, [sp, #4]
 801b6e6:	00ff      	lsls	r7, r7, #3
 801b6e8:	445d      	add	r5, fp
 801b6ea:	19d9      	adds	r1, r3, r7
 801b6ec:	445f      	add	r7, fp
 801b6ee:	f7ff fc21 	bl	801af34 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801b6f2:	9b03      	ldr	r3, [sp, #12]
 801b6f4:	cb03      	ldmia	r3!, {r0, r1}
 801b6f6:	9b03      	ldr	r3, [sp, #12]
 801b6f8:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
 801b6fc:	f8c7 10ac 	str.w	r1, [r7, #172]	; 0xac
 801b700:	f855 0fa8 	ldr.w	r0, [r5, #168]!
 801b704:	6869      	ldr	r1, [r5, #4]
 801b706:	c303      	stmia	r3!, {r0, r1}
 801b708:	e7e4      	b.n	801b6d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 801b70a:	bf00      	nop

0801b70c <_ZN8touchgfx11Application10invalidateEv>:
 801b70c:	4b09      	ldr	r3, [pc, #36]	; (801b734 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801b70e:	b082      	sub	sp, #8
 801b710:	2100      	movs	r1, #0
 801b712:	f9b3 2000 	ldrsh.w	r2, [r3]
 801b716:	4b08      	ldr	r3, [pc, #32]	; (801b738 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801b718:	9100      	str	r1, [sp, #0]
 801b71a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b71e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801b722:	f8ad 3006 	strh.w	r3, [sp, #6]
 801b726:	ab02      	add	r3, sp, #8
 801b728:	e913 0006 	ldmdb	r3, {r1, r2}
 801b72c:	b002      	add	sp, #8
 801b72e:	f7ff bcbf 	b.w	801b0b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b732:	bf00      	nop
 801b734:	2003c2b0 	.word	0x2003c2b0
 801b738:	2003c2b2 	.word	0x2003c2b2

0801b73c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 801b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b740:	f500 7696 	add.w	r6, r0, #300	; 0x12c
 801b744:	b09b      	sub	sp, #108	; 0x6c
 801b746:	4604      	mov	r4, r0
 801b748:	4630      	mov	r0, r6
 801b74a:	f7fa ff16 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b74e:	4605      	mov	r5, r0
 801b750:	b940      	cbnz	r0, 801b764 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 801b752:	4620      	mov	r0, r4
 801b754:	e896 0006 	ldmia.w	r6, {r1, r2}
 801b758:	f7ff fcaa 	bl	801b0b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b75c:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
 801b760:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 801b764:	4bc8      	ldr	r3, [pc, #800]	; (801ba88 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	2b00      	cmp	r3, #0
 801b76a:	d03e      	beq.n	801b7ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801b76c:	4dc7      	ldr	r5, [pc, #796]	; (801ba8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 801b76e:	4628      	mov	r0, r5
 801b770:	f7fa ff03 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b774:	4606      	mov	r6, r0
 801b776:	2800      	cmp	r0, #0
 801b778:	d137      	bne.n	801b7ea <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 801b77a:	4628      	mov	r0, r5
 801b77c:	f7ff fa0c 	bl	801ab98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801b780:	6829      	ldr	r1, [r5, #0]
 801b782:	686a      	ldr	r2, [r5, #4]
 801b784:	4620      	mov	r0, r4
 801b786:	f7ff fc93 	bl	801b0b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b78a:	802e      	strh	r6, [r5, #0]
 801b78c:	806e      	strh	r6, [r5, #2]
 801b78e:	80ae      	strh	r6, [r5, #4]
 801b790:	80ee      	strh	r6, [r5, #6]
 801b792:	ae09      	add	r6, sp, #36	; 0x24
 801b794:	4630      	mov	r0, r6
 801b796:	f7ff fc24 	bl	801afe2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801b79a:	4abd      	ldr	r2, [pc, #756]	; (801ba90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 801b79c:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801b7a0:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 801b7a4:	8815      	ldrh	r5, [r2, #0]
 801b7a6:	9202      	str	r2, [sp, #8]
 801b7a8:	462b      	mov	r3, r5
 801b7aa:	429f      	cmp	r7, r3
 801b7ac:	d924      	bls.n	801b7f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 801b7ae:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 801b7b2:	2907      	cmp	r1, #7
 801b7b4:	d816      	bhi.n	801b7e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801b7b6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801b7ba:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801b7be:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 801b7c2:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 801b7c6:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801b7ca:	1c4a      	adds	r2, r1, #1
 801b7cc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 801b7d0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 801b7d4:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801b7d8:	f8a2 9002 	strh.w	r9, [r2, #2]
 801b7dc:	f8a2 e004 	strh.w	lr, [r2, #4]
 801b7e0:	f8a2 c006 	strh.w	ip, [r2, #6]
 801b7e4:	3301      	adds	r3, #1
 801b7e6:	b29b      	uxth	r3, r3
 801b7e8:	e7df      	b.n	801b7aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801b7ea:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	d1cf      	bne.n	801b792 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 801b7f2:	b01b      	add	sp, #108	; 0x6c
 801b7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7f8:	462f      	mov	r7, r5
 801b7fa:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801b7fe:	42bb      	cmp	r3, r7
 801b800:	d90b      	bls.n	801b81a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 801b802:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801b806:	3701      	adds	r7, #1
 801b808:	4620      	mov	r0, r4
 801b80a:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801b80e:	b2bf      	uxth	r7, r7
 801b810:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801b814:	f7ff fc4c 	bl	801b0b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801b818:	e7ef      	b.n	801b7fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801b81a:	4a9e      	ldr	r2, [pc, #632]	; (801ba94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801b81c:	6813      	ldr	r3, [r2, #0]
 801b81e:	4690      	mov	r8, r2
 801b820:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 801b824:	2b01      	cmp	r3, #1
 801b826:	f040 80e4 	bne.w	801b9f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
 801b82a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801b82e:	4629      	mov	r1, r5
 801b830:	f8b4 70e8 	ldrh.w	r7, [r4, #232]	; 0xe8
 801b834:	2500      	movs	r5, #0
 801b836:	33aa      	adds	r3, #170	; 0xaa
 801b838:	428f      	cmp	r7, r1
 801b83a:	f103 0308 	add.w	r3, r3, #8
 801b83e:	dd0a      	ble.n	801b856 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 801b840:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801b844:	3101      	adds	r1, #1
 801b846:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 801b84a:	4402      	add	r2, r0
 801b84c:	b212      	sxth	r2, r2
 801b84e:	4295      	cmp	r5, r2
 801b850:	bfb8      	it	lt
 801b852:	4615      	movlt	r5, r2
 801b854:	e7f0      	b.n	801b838 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 801b856:	4b90      	ldr	r3, [pc, #576]	; (801ba98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801b858:	f8df b238 	ldr.w	fp, [pc, #568]	; 801ba94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
 801b85c:	881b      	ldrh	r3, [r3, #0]
 801b85e:	46d8      	mov	r8, fp
 801b860:	2b0f      	cmp	r3, #15
 801b862:	bf8c      	ite	hi
 801b864:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 801b868:	f04f 0a01 	movls.w	sl, #1
 801b86c:	2300      	movs	r3, #0
 801b86e:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801b872:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 801b876:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801b87a:	4438      	add	r0, r7
 801b87c:	b207      	sxth	r7, r0
 801b87e:	f8db 0000 	ldr.w	r0, [fp]
 801b882:	42bd      	cmp	r5, r7
 801b884:	6803      	ldr	r3, [r0, #0]
 801b886:	f340 8084 	ble.w	801b992 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 801b88a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b88e:	4798      	blx	r3
 801b890:	eb07 030a 	add.w	r3, r7, sl
 801b894:	4298      	cmp	r0, r3
 801b896:	da07      	bge.n	801b8a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801b898:	4285      	cmp	r5, r0
 801b89a:	dd05      	ble.n	801b8a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 801b89c:	4287      	cmp	r7, r0
 801b89e:	dd6d      	ble.n	801b97c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b8a0:	2f00      	cmp	r7, #0
 801b8a2:	dd6b      	ble.n	801b97c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 801b8a4:	4628      	mov	r0, r5
 801b8a6:	e004      	b.n	801b8b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
 801b8a8:	4287      	cmp	r7, r0
 801b8aa:	dcfb      	bgt.n	801b8a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
 801b8ac:	42a8      	cmp	r0, r5
 801b8ae:	bfa8      	it	ge
 801b8b0:	4628      	movge	r0, r5
 801b8b2:	4b7a      	ldr	r3, [pc, #488]	; (801ba9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 801b8b4:	1bc0      	subs	r0, r0, r7
 801b8b6:	2200      	movs	r2, #0
 801b8b8:	f8ad 7016 	strh.w	r7, [sp, #22]
 801b8bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b8c0:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b8c4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801b8c8:	9b02      	ldr	r3, [sp, #8]
 801b8ca:	f8ad 001a 	strh.w	r0, [sp, #26]
 801b8ce:	881f      	ldrh	r7, [r3, #0]
 801b8d0:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801b8d4:	42bb      	cmp	r3, r7
 801b8d6:	d9cc      	bls.n	801b872 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801b8d8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 801b8dc:	ab07      	add	r3, sp, #28
 801b8de:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801b8e2:	6851      	ldr	r1, [r2, #4]
 801b8e4:	c303      	stmia	r3!, {r0, r1}
 801b8e6:	a905      	add	r1, sp, #20
 801b8e8:	a807      	add	r0, sp, #28
 801b8ea:	f7ff fa8b 	bl	801ae04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801b8ee:	2800      	cmp	r0, #0
 801b8f0:	d04c      	beq.n	801b98c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 801b8f2:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801b8f6:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 801b8fa:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 801b8fe:	4686      	mov	lr, r0
 801b900:	4290      	cmp	r0, r2
 801b902:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801b906:	4448      	add	r0, r9
 801b908:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 801b90c:	bfb8      	it	lt
 801b90e:	4696      	movlt	lr, r2
 801b910:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801b914:	444a      	add	r2, r9
 801b916:	b280      	uxth	r0, r0
 801b918:	4299      	cmp	r1, r3
 801b91a:	468c      	mov	ip, r1
 801b91c:	b292      	uxth	r2, r2
 801b91e:	9303      	str	r3, [sp, #12]
 801b920:	bfb8      	it	lt
 801b922:	469c      	movlt	ip, r3
 801b924:	b203      	sxth	r3, r0
 801b926:	fa0f f982 	sxth.w	r9, r2
 801b92a:	f8ad e01c 	strh.w	lr, [sp, #28]
 801b92e:	f8ad c01e 	strh.w	ip, [sp, #30]
 801b932:	454b      	cmp	r3, r9
 801b934:	bfb8      	it	lt
 801b936:	4602      	movlt	r2, r0
 801b938:	9b03      	ldr	r3, [sp, #12]
 801b93a:	eba2 020e 	sub.w	r2, r2, lr
 801b93e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801b942:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 801b946:	4411      	add	r1, r2
 801b948:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801b94c:	4413      	add	r3, r2
 801b94e:	b289      	uxth	r1, r1
 801b950:	b29b      	uxth	r3, r3
 801b952:	b208      	sxth	r0, r1
 801b954:	b21a      	sxth	r2, r3
 801b956:	4290      	cmp	r0, r2
 801b958:	bfb8      	it	lt
 801b95a:	460b      	movlt	r3, r1
 801b95c:	eba3 030c 	sub.w	r3, r3, ip
 801b960:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801b964:	a807      	add	r0, sp, #28
 801b966:	f7fa fe08 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801b96a:	b920      	cbnz	r0, 801b976 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 801b96c:	6823      	ldr	r3, [r4, #0]
 801b96e:	a907      	add	r1, sp, #28
 801b970:	4620      	mov	r0, r4
 801b972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b974:	4798      	blx	r3
 801b976:	3701      	adds	r7, #1
 801b978:	b2bf      	uxth	r7, r7
 801b97a:	e7a9      	b.n	801b8d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 801b97c:	f8d8 0000 	ldr.w	r0, [r8]
 801b980:	2101      	movs	r1, #1
 801b982:	6803      	ldr	r3, [r0, #0]
 801b984:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b988:	4798      	blx	r3
 801b98a:	e772      	b.n	801b872 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
 801b98c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 801b990:	e7e8      	b.n	801b964 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801b992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b994:	4798      	blx	r3
 801b996:	4b42      	ldr	r3, [pc, #264]	; (801baa0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801b998:	781b      	ldrb	r3, [r3, #0]
 801b99a:	2b00      	cmp	r3, #0
 801b99c:	f43f af29 	beq.w	801b7f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801b9a0:	2300      	movs	r3, #0
 801b9a2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 801b9a6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801b9aa:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
 801b9ae:	9b02      	ldr	r3, [sp, #8]
 801b9b0:	881b      	ldrh	r3, [r3, #0]
 801b9b2:	429d      	cmp	r5, r3
 801b9b4:	f67f af1d 	bls.w	801b7f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 801b9b8:	f8b4 112a 	ldrh.w	r1, [r4, #298]	; 0x12a
 801b9bc:	2907      	cmp	r1, #7
 801b9be:	d815      	bhi.n	801b9ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
 801b9c0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801b9c4:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801b9c8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 801b9cc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 801b9d0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 801b9d4:	1c4a      	adds	r2, r1, #1
 801b9d6:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
 801b9da:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 801b9de:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801b9e2:	f8a2 e002 	strh.w	lr, [r2, #2]
 801b9e6:	f8a2 c004 	strh.w	ip, [r2, #4]
 801b9ea:	80d7      	strh	r7, [r2, #6]
 801b9ec:	3301      	adds	r3, #1
 801b9ee:	b29b      	uxth	r3, r3
 801b9f0:	e7df      	b.n	801b9b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
 801b9f2:	2b02      	cmp	r3, #2
 801b9f4:	f040 8135 	bne.w	801bc62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801b9f8:	4b2a      	ldr	r3, [pc, #168]	; (801baa4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 801b9fa:	f104 09a8 	add.w	r9, r4, #168	; 0xa8
 801b9fe:	781b      	ldrb	r3, [r3, #0]
 801ba00:	2b01      	cmp	r3, #1
 801ba02:	f000 809c 	beq.w	801bb3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801ba06:	9b02      	ldr	r3, [sp, #8]
 801ba08:	f8b4 20e8 	ldrh.w	r2, [r4, #232]	; 0xe8
 801ba0c:	f8b3 b000 	ldrh.w	fp, [r3]
 801ba10:	f10b 0b01 	add.w	fp, fp, #1
 801ba14:	fa1f fb8b 	uxth.w	fp, fp
 801ba18:	2a00      	cmp	r2, #0
 801ba1a:	d0bc      	beq.n	801b996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801ba1c:	f8b4 50aa 	ldrh.w	r5, [r4, #170]	; 0xaa
 801ba20:	4659      	mov	r1, fp
 801ba22:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
 801ba26:	f04f 0800 	mov.w	r8, #0
 801ba2a:	441d      	add	r5, r3
 801ba2c:	b22d      	sxth	r5, r5
 801ba2e:	b28b      	uxth	r3, r1
 801ba30:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801ba34:	429a      	cmp	r2, r3
 801ba36:	f240 80c0 	bls.w	801bbba <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
 801ba3a:	4427      	add	r7, r4
 801ba3c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 801ba40:	4608      	mov	r0, r1
 801ba42:	f9b7 30aa 	ldrsh.w	r3, [r7, #170]	; 0xaa
 801ba46:	f9be c0aa 	ldrsh.w	ip, [lr, #170]	; 0xaa
 801ba4a:	4563      	cmp	r3, ip
 801ba4c:	f340 80a2 	ble.w	801bb94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 801ba50:	f8be 50ae 	ldrh.w	r5, [lr, #174]	; 0xae
 801ba54:	4465      	add	r5, ip
 801ba56:	b22d      	sxth	r5, r5
 801ba58:	429d      	cmp	r5, r3
 801ba5a:	bfa8      	it	ge
 801ba5c:	461d      	movge	r5, r3
 801ba5e:	3101      	adds	r1, #1
 801ba60:	4680      	mov	r8, r0
 801ba62:	e7e4      	b.n	801ba2e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
 801ba64:	d10b      	bne.n	801ba7e <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
 801ba66:	f9b5 c0ae 	ldrsh.w	ip, [r5, #174]	; 0xae
 801ba6a:	f9ba 10ae 	ldrsh.w	r1, [sl, #174]	; 0xae
 801ba6e:	458c      	cmp	ip, r1
 801ba70:	bfb4      	ite	lt
 801ba72:	469c      	movlt	ip, r3
 801ba74:	46bc      	movge	ip, r7
 801ba76:	4572      	cmp	r2, lr
 801ba78:	bfb8      	it	lt
 801ba7a:	4672      	movlt	r2, lr
 801ba7c:	e087      	b.n	801bb8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801ba7e:	428a      	cmp	r2, r1
 801ba80:	46bc      	mov	ip, r7
 801ba82:	bfb8      	it	lt
 801ba84:	460a      	movlt	r2, r1
 801ba86:	e082      	b.n	801bb8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
 801ba88:	2003c2fc 	.word	0x2003c2fc
 801ba8c:	2003c308 	.word	0x2003c308
 801ba90:	20000044 	.word	0x20000044
 801ba94:	2003c2bc 	.word	0x2003c2bc
 801ba98:	2003c2b2 	.word	0x2003c2b2
 801ba9c:	2003c2b0 	.word	0x2003c2b0
 801baa0:	2003c2ba 	.word	0x2003c2ba
 801baa4:	2003c2b4 	.word	0x2003c2b4
 801baa8:	1961      	adds	r1, r4, r5
 801baaa:	ab07      	add	r3, sp, #28
 801baac:	f851 0fa8 	ldr.w	r0, [r1, #168]!
 801bab0:	6849      	ldr	r1, [r1, #4]
 801bab2:	c303      	stmia	r3!, {r0, r1}
 801bab4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 801bab8:	a807      	add	r0, sp, #28
 801baba:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801babe:	2b13      	cmp	r3, #19
 801bac0:	440b      	add	r3, r1
 801bac2:	bfd8      	it	le
 801bac4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801bac8:	1a9b      	subs	r3, r3, r2
 801baca:	f8ad 201c 	strh.w	r2, [sp, #28]
 801bace:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bad2:	f7ff f87b 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801bad6:	a807      	add	r0, sp, #28
 801bad8:	f7fa fd4f 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801badc:	bb78      	cbnz	r0, 801bb3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801bade:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801bae2:	4425      	add	r5, r4
 801bae4:	f8d8 0000 	ldr.w	r0, [r8]
 801bae8:	f1bc 0f14 	cmp.w	ip, #20
 801baec:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801baf0:	f8d0 e000 	ldr.w	lr, [r0]
 801baf4:	bfa8      	it	ge
 801baf6:	f04f 0c14 	movge.w	ip, #20
 801bafa:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 801bafe:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801bb02:	fa1f fc8c 	uxth.w	ip, ip
 801bb06:	f8cd c000 	str.w	ip, [sp]
 801bb0a:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 801bb0e:	47d0      	blx	sl
 801bb10:	4682      	mov	sl, r0
 801bb12:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bb16:	a807      	add	r0, sp, #28
 801bb18:	f7ff f83e 	bl	801ab98 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 801bb1c:	6823      	ldr	r3, [r4, #0]
 801bb1e:	4620      	mov	r0, r4
 801bb20:	a907      	add	r1, sp, #28
 801bb22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bb24:	4798      	blx	r3
 801bb26:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 801bb2a:	eba0 000a 	sub.w	r0, r0, sl
 801bb2e:	b200      	sxth	r0, r0
 801bb30:	f8a5 00ac 	strh.w	r0, [r5, #172]	; 0xac
 801bb34:	b918      	cbnz	r0, 801bb3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
 801bb36:	b2b9      	uxth	r1, r7
 801bb38:	4648      	mov	r0, r9
 801bb3a:	f7ff faa5 	bl	801b088 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bb3e:	f8b4 b0e8 	ldrh.w	fp, [r4, #232]	; 0xe8
 801bb42:	f1bb 0f00 	cmp.w	fp, #0
 801bb46:	f43f af26 	beq.w	801b996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bb4a:	9b02      	ldr	r3, [sp, #8]
 801bb4c:	2700      	movs	r7, #0
 801bb4e:	f9b4 20a8 	ldrsh.w	r2, [r4, #168]	; 0xa8
 801bb52:	881b      	ldrh	r3, [r3, #0]
 801bb54:	3301      	adds	r3, #1
 801bb56:	b29b      	uxth	r3, r3
 801bb58:	b299      	uxth	r1, r3
 801bb5a:	00fd      	lsls	r5, r7, #3
 801bb5c:	458b      	cmp	fp, r1
 801bb5e:	d9a3      	bls.n	801baa8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
 801bb60:	4425      	add	r5, r4
 801bb62:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 801bb66:	469c      	mov	ip, r3
 801bb68:	f8b5 10ac 	ldrh.w	r1, [r5, #172]	; 0xac
 801bb6c:	f8b5 00a8 	ldrh.w	r0, [r5, #168]	; 0xa8
 801bb70:	f9ba e0a8 	ldrsh.w	lr, [sl, #168]	; 0xa8
 801bb74:	4408      	add	r0, r1
 801bb76:	f8ba 10ac 	ldrh.w	r1, [sl, #172]	; 0xac
 801bb7a:	4471      	add	r1, lr
 801bb7c:	b200      	sxth	r0, r0
 801bb7e:	b209      	sxth	r1, r1
 801bb80:	4288      	cmp	r0, r1
 801bb82:	f6bf af6f 	bge.w	801ba64 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
 801bb86:	4586      	cmp	lr, r0
 801bb88:	4672      	mov	r2, lr
 801bb8a:	bfb8      	it	lt
 801bb8c:	4602      	movlt	r2, r0
 801bb8e:	3301      	adds	r3, #1
 801bb90:	4667      	mov	r7, ip
 801bb92:	e7e1      	b.n	801bb58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
 801bb94:	d10c      	bne.n	801bbb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
 801bb96:	f9b7 70ac 	ldrsh.w	r7, [r7, #172]	; 0xac
 801bb9a:	f9be 00ac 	ldrsh.w	r0, [lr, #172]	; 0xac
 801bb9e:	4287      	cmp	r7, r0
 801bba0:	bfb4      	ite	lt
 801bba2:	4608      	movlt	r0, r1
 801bba4:	4640      	movge	r0, r8
 801bba6:	f8be 70ae 	ldrh.w	r7, [lr, #174]	; 0xae
 801bbaa:	443b      	add	r3, r7
 801bbac:	b21b      	sxth	r3, r3
 801bbae:	e753      	b.n	801ba58 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
 801bbb0:	4565      	cmp	r5, ip
 801bbb2:	4640      	mov	r0, r8
 801bbb4:	bfa8      	it	ge
 801bbb6:	4665      	movge	r5, ip
 801bbb8:	e751      	b.n	801ba5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
 801bbba:	eb09 0007 	add.w	r0, r9, r7
 801bbbe:	4427      	add	r7, r4
 801bbc0:	9203      	str	r2, [sp, #12]
 801bbc2:	f9b7 a0ae 	ldrsh.w	sl, [r7, #174]	; 0xae
 801bbc6:	f1ba 0f13 	cmp.w	sl, #19
 801bbca:	bfde      	ittt	le
 801bbcc:	f8b7 50aa 	ldrhle.w	r5, [r7, #170]	; 0xaa
 801bbd0:	4455      	addle	r5, sl
 801bbd2:	b22d      	sxthle	r5, r5
 801bbd4:	f7fa fcd1 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bbd8:	9a03      	ldr	r2, [sp, #12]
 801bbda:	2800      	cmp	r0, #0
 801bbdc:	f47f af1c 	bne.w	801ba18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
 801bbe0:	f9b7 20aa 	ldrsh.w	r2, [r7, #170]	; 0xaa
 801bbe4:	fa1f fa8a 	uxth.w	sl, sl
 801bbe8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bbec:	1aad      	subs	r5, r5, r2
 801bbee:	4829      	ldr	r0, [pc, #164]	; (801bc94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
 801bbf0:	f9b7 10a8 	ldrsh.w	r1, [r7, #168]	; 0xa8
 801bbf4:	2d14      	cmp	r5, #20
 801bbf6:	f9b7 30ac 	ldrsh.w	r3, [r7, #172]	; 0xac
 801bbfa:	6800      	ldr	r0, [r0, #0]
 801bbfc:	bfa8      	it	ge
 801bbfe:	2514      	movge	r5, #20
 801bc00:	f8ad 101c 	strh.w	r1, [sp, #28]
 801bc04:	f8ad 201e 	strh.w	r2, [sp, #30]
 801bc08:	b289      	uxth	r1, r1
 801bc0a:	f8ad 3020 	strh.w	r3, [sp, #32]
 801bc0e:	b2ad      	uxth	r5, r5
 801bc10:	f8d0 c000 	ldr.w	ip, [r0]
 801bc14:	b292      	uxth	r2, r2
 801bc16:	4555      	cmp	r5, sl
 801bc18:	bf94      	ite	ls
 801bc1a:	9500      	strls	r5, [sp, #0]
 801bc1c:	f8cd a000 	strhi.w	sl, [sp]
 801bc20:	b29b      	uxth	r3, r3
 801bc22:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801bc26:	47a8      	blx	r5
 801bc28:	6823      	ldr	r3, [r4, #0]
 801bc2a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801bc2e:	a907      	add	r1, sp, #28
 801bc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc32:	4620      	mov	r0, r4
 801bc34:	4798      	blx	r3
 801bc36:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 801bc3a:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 801bc3e:	f8b7 20aa 	ldrh.w	r2, [r7, #170]	; 0xaa
 801bc42:	1a5b      	subs	r3, r3, r1
 801bc44:	440a      	add	r2, r1
 801bc46:	b21b      	sxth	r3, r3
 801bc48:	f8a7 20aa 	strh.w	r2, [r7, #170]	; 0xaa
 801bc4c:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	f47f aed8 	bne.w	801ba06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801bc56:	fa1f f188 	uxth.w	r1, r8
 801bc5a:	4648      	mov	r0, r9
 801bc5c:	f7ff fa14 	bl	801b088 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801bc60:	e6d1      	b.n	801ba06 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
 801bc62:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801bc66:	42ab      	cmp	r3, r5
 801bc68:	f67f ae95 	bls.w	801b996 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801bc6c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801bc70:	ab07      	add	r3, sp, #28
 801bc72:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801bc76:	6851      	ldr	r1, [r2, #4]
 801bc78:	c303      	stmia	r3!, {r0, r1}
 801bc7a:	a807      	add	r0, sp, #28
 801bc7c:	f7fa fc7d 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801bc80:	b920      	cbnz	r0, 801bc8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
 801bc82:	6823      	ldr	r3, [r4, #0]
 801bc84:	a907      	add	r1, sp, #28
 801bc86:	4620      	mov	r0, r4
 801bc88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc8a:	4798      	blx	r3
 801bc8c:	3501      	adds	r5, #1
 801bc8e:	b2ad      	uxth	r5, r5
 801bc90:	e7e7      	b.n	801bc62 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
 801bc92:	bf00      	nop
 801bc94:	2003c2bc 	.word	0x2003c2bc

0801bc98 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 801bc98:	4b03      	ldr	r3, [pc, #12]	; (801bca8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	801a      	strh	r2, [r3, #0]
 801bc9e:	805a      	strh	r2, [r3, #2]
 801bca0:	809a      	strh	r2, [r3, #4]
 801bca2:	80da      	strh	r2, [r3, #6]
 801bca4:	4770      	bx	lr
 801bca6:	bf00      	nop
 801bca8:	2003c308 	.word	0x2003c308

0801bcac <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcb0:	b09d      	sub	sp, #116	; 0x74
 801bcb2:	4606      	mov	r6, r0
 801bcb4:	4614      	mov	r4, r2
 801bcb6:	468a      	mov	sl, r1
 801bcb8:	a803      	add	r0, sp, #12
 801bcba:	461d      	mov	r5, r3
 801bcbc:	f000 fe2e 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 801bcc0:	6833      	ldr	r3, [r6, #0]
 801bcc2:	4630      	mov	r0, r6
 801bcc4:	f242 0b0b 	movw	fp, #8203	; 0x200b
 801bcc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcca:	4798      	blx	r3
 801bccc:	6833      	ldr	r3, [r6, #0]
 801bcce:	4607      	mov	r7, r0
 801bcd0:	4630      	mov	r0, r6
 801bcd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bcd4:	4798      	blx	r3
 801bcd6:	462a      	mov	r2, r5
 801bcd8:	2500      	movs	r5, #0
 801bcda:	4621      	mov	r1, r4
 801bcdc:	9000      	str	r0, [sp, #0]
 801bcde:	463b      	mov	r3, r7
 801bce0:	462c      	mov	r4, r5
 801bce2:	46a9      	mov	r9, r5
 801bce4:	46a8      	mov	r8, r5
 801bce6:	a803      	add	r0, sp, #12
 801bce8:	f000 fe73 	bl	801c9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bcec:	2300      	movs	r3, #0
 801bcee:	9302      	str	r3, [sp, #8]
 801bcf0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801bcf4:	429c      	cmp	r4, r3
 801bcf6:	d002      	beq.n	801bcfe <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 801bcf8:	455c      	cmp	r4, fp
 801bcfa:	bf18      	it	ne
 801bcfc:	4625      	movne	r5, r4
 801bcfe:	ab02      	add	r3, sp, #8
 801bd00:	4632      	mov	r2, r6
 801bd02:	4651      	mov	r1, sl
 801bd04:	a803      	add	r0, sp, #12
 801bd06:	f001 f969 	bl	801cfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bd0a:	4604      	mov	r4, r0
 801bd0c:	b108      	cbz	r0, 801bd12 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801bd0e:	280a      	cmp	r0, #10
 801bd10:	d10a      	bne.n	801bd28 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801bd12:	45c1      	cmp	r9, r8
 801bd14:	bf38      	it	cc
 801bd16:	46c1      	movcc	r9, r8
 801bd18:	f04f 0800 	mov.w	r8, #0
 801bd1c:	2c00      	cmp	r4, #0
 801bd1e:	d1e5      	bne.n	801bcec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801bd20:	4648      	mov	r0, r9
 801bd22:	b01d      	add	sp, #116	; 0x74
 801bd24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd28:	9a02      	ldr	r2, [sp, #8]
 801bd2a:	2a00      	cmp	r2, #0
 801bd2c:	d0de      	beq.n	801bcec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801bd2e:	7b57      	ldrb	r7, [r2, #13]
 801bd30:	4629      	mov	r1, r5
 801bd32:	6833      	ldr	r3, [r6, #0]
 801bd34:	007f      	lsls	r7, r7, #1
 801bd36:	8894      	ldrh	r4, [r2, #4]
 801bd38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801bd3a:	f407 7080 	and.w	r0, r7, #256	; 0x100
 801bd3e:	7a97      	ldrb	r7, [r2, #10]
 801bd40:	4307      	orrs	r7, r0
 801bd42:	4630      	mov	r0, r6
 801bd44:	4798      	blx	r3
 801bd46:	4438      	add	r0, r7
 801bd48:	4480      	add	r8, r0
 801bd4a:	fa1f f888 	uxth.w	r8, r8
 801bd4e:	e7e5      	b.n	801bd1c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801bd50 <_ZNK8touchgfx4Font12getCharWidthEt>:
 801bd50:	b508      	push	{r3, lr}
 801bd52:	6803      	ldr	r3, [r0, #0]
 801bd54:	68db      	ldr	r3, [r3, #12]
 801bd56:	4798      	blx	r3
 801bd58:	b128      	cbz	r0, 801bd66 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801bd5a:	7b43      	ldrb	r3, [r0, #13]
 801bd5c:	7a80      	ldrb	r0, [r0, #10]
 801bd5e:	005b      	lsls	r3, r3, #1
 801bd60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bd64:	4318      	orrs	r0, r3
 801bd66:	bd08      	pop	{r3, pc}

0801bd68 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801bd68:	b40e      	push	{r1, r2, r3}
 801bd6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bd6c:	b09e      	sub	sp, #120	; 0x78
 801bd6e:	4605      	mov	r5, r0
 801bd70:	ab23      	add	r3, sp, #140	; 0x8c
 801bd72:	a805      	add	r0, sp, #20
 801bd74:	f853 4b04 	ldr.w	r4, [r3], #4
 801bd78:	9303      	str	r3, [sp, #12]
 801bd7a:	f000 fdcf 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 801bd7e:	682b      	ldr	r3, [r5, #0]
 801bd80:	4628      	mov	r0, r5
 801bd82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bd84:	4798      	blx	r3
 801bd86:	682b      	ldr	r3, [r5, #0]
 801bd88:	4606      	mov	r6, r0
 801bd8a:	4628      	mov	r0, r5
 801bd8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801bd8e:	4798      	blx	r3
 801bd90:	4633      	mov	r3, r6
 801bd92:	4621      	mov	r1, r4
 801bd94:	ae1e      	add	r6, sp, #120	; 0x78
 801bd96:	2400      	movs	r4, #0
 801bd98:	9000      	str	r0, [sp, #0]
 801bd9a:	9a03      	ldr	r2, [sp, #12]
 801bd9c:	a805      	add	r0, sp, #20
 801bd9e:	f000 fe18 	bl	801c9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801bda2:	f846 4d68 	str.w	r4, [r6, #-104]!
 801bda6:	462a      	mov	r2, r5
 801bda8:	4633      	mov	r3, r6
 801bdaa:	4621      	mov	r1, r4
 801bdac:	a805      	add	r0, sp, #20
 801bdae:	f001 f915 	bl	801cfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bdb2:	b300      	cbz	r0, 801bdf6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801bdb4:	280a      	cmp	r0, #10
 801bdb6:	d01a      	beq.n	801bdee <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bdb8:	9f04      	ldr	r7, [sp, #16]
 801bdba:	b1c7      	cbz	r7, 801bdee <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 801bdbc:	7b78      	ldrb	r0, [r7, #13]
 801bdbe:	7a3b      	ldrb	r3, [r7, #8]
 801bdc0:	00c1      	lsls	r1, r0, #3
 801bdc2:	88aa      	ldrh	r2, [r5, #4]
 801bdc4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801bdc8:	4319      	orrs	r1, r3
 801bdca:	0643      	lsls	r3, r0, #25
 801bdcc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 801bdd0:	bf48      	it	mi
 801bdd2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 801bdd6:	f400 7080 	and.w	r0, r0, #256	; 0x100
 801bdda:	bf48      	it	mi
 801bddc:	b219      	sxthmi	r1, r3
 801bdde:	79fb      	ldrb	r3, [r7, #7]
 801bde0:	4303      	orrs	r3, r0
 801bde2:	4413      	add	r3, r2
 801bde4:	1a5b      	subs	r3, r3, r1
 801bde6:	b29b      	uxth	r3, r3
 801bde8:	42a3      	cmp	r3, r4
 801bdea:	bfc8      	it	gt
 801bdec:	b21c      	sxthgt	r4, r3
 801bdee:	4633      	mov	r3, r6
 801bdf0:	462a      	mov	r2, r5
 801bdf2:	2100      	movs	r1, #0
 801bdf4:	e7da      	b.n	801bdac <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801bdf6:	b2a0      	uxth	r0, r4
 801bdf8:	b01e      	add	sp, #120	; 0x78
 801bdfa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801bdfe:	b003      	add	sp, #12
 801be00:	4770      	bx	lr

0801be02 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801be02:	b40e      	push	{r1, r2, r3}
 801be04:	b570      	push	{r4, r5, r6, lr}
 801be06:	b09d      	sub	sp, #116	; 0x74
 801be08:	4604      	mov	r4, r0
 801be0a:	ab21      	add	r3, sp, #132	; 0x84
 801be0c:	a803      	add	r0, sp, #12
 801be0e:	f853 5b04 	ldr.w	r5, [r3], #4
 801be12:	9302      	str	r3, [sp, #8]
 801be14:	f000 fd82 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 801be18:	6823      	ldr	r3, [r4, #0]
 801be1a:	4620      	mov	r0, r4
 801be1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be1e:	4798      	blx	r3
 801be20:	6823      	ldr	r3, [r4, #0]
 801be22:	4606      	mov	r6, r0
 801be24:	4620      	mov	r0, r4
 801be26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be28:	2401      	movs	r4, #1
 801be2a:	4798      	blx	r3
 801be2c:	4633      	mov	r3, r6
 801be2e:	9000      	str	r0, [sp, #0]
 801be30:	4629      	mov	r1, r5
 801be32:	9a02      	ldr	r2, [sp, #8]
 801be34:	a803      	add	r0, sp, #12
 801be36:	f000 fdcc 	bl	801c9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801be3a:	a803      	add	r0, sp, #12
 801be3c:	f001 f99a 	bl	801d174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801be40:	b2a3      	uxth	r3, r4
 801be42:	b138      	cbz	r0, 801be54 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801be44:	280a      	cmp	r0, #10
 801be46:	a803      	add	r0, sp, #12
 801be48:	bf04      	itt	eq
 801be4a:	3301      	addeq	r3, #1
 801be4c:	b21c      	sxtheq	r4, r3
 801be4e:	f001 f991 	bl	801d174 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801be52:	e7f5      	b.n	801be40 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801be54:	4618      	mov	r0, r3
 801be56:	b01d      	add	sp, #116	; 0x74
 801be58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801be5c:	b003      	add	sp, #12
 801be5e:	4770      	bx	lr

0801be60 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801be60:	b40e      	push	{r1, r2, r3}
 801be62:	b5f0      	push	{r4, r5, r6, r7, lr}
 801be64:	b09e      	sub	sp, #120	; 0x78
 801be66:	4604      	mov	r4, r0
 801be68:	ab23      	add	r3, sp, #140	; 0x8c
 801be6a:	a805      	add	r0, sp, #20
 801be6c:	f853 5b04 	ldr.w	r5, [r3], #4
 801be70:	9303      	str	r3, [sp, #12]
 801be72:	f000 fd53 	bl	801c91c <_ZN8touchgfx12TextProviderC1Ev>
 801be76:	6823      	ldr	r3, [r4, #0]
 801be78:	4620      	mov	r0, r4
 801be7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801be7c:	4798      	blx	r3
 801be7e:	6823      	ldr	r3, [r4, #0]
 801be80:	4606      	mov	r6, r0
 801be82:	4620      	mov	r0, r4
 801be84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801be86:	4798      	blx	r3
 801be88:	4633      	mov	r3, r6
 801be8a:	4629      	mov	r1, r5
 801be8c:	9000      	str	r0, [sp, #0]
 801be8e:	9a03      	ldr	r2, [sp, #12]
 801be90:	a805      	add	r0, sp, #20
 801be92:	f000 fd9e 	bl	801c9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801be96:	ad1e      	add	r5, sp, #120	; 0x78
 801be98:	2100      	movs	r1, #0
 801be9a:	26ff      	movs	r6, #255	; 0xff
 801be9c:	4622      	mov	r2, r4
 801be9e:	a805      	add	r0, sp, #20
 801bea0:	f845 1d68 	str.w	r1, [r5, #-104]!
 801bea4:	462b      	mov	r3, r5
 801bea6:	f001 f899 	bl	801cfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801beaa:	b1d8      	cbz	r0, 801bee4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x84>
 801beac:	280a      	cmp	r0, #10
 801beae:	d012      	beq.n	801bed6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801beb0:	9804      	ldr	r0, [sp, #16]
 801beb2:	b180      	cbz	r0, 801bed6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x76>
 801beb4:	7b47      	ldrb	r7, [r0, #13]
 801beb6:	7922      	ldrb	r2, [r4, #4]
 801beb8:	00fb      	lsls	r3, r7, #3
 801beba:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801bebe:	7a03      	ldrb	r3, [r0, #8]
 801bec0:	430b      	orrs	r3, r1
 801bec2:	0679      	lsls	r1, r7, #25
 801bec4:	bf44      	itt	mi
 801bec6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801beca:	b21b      	sxthmi	r3, r3
 801becc:	1ad3      	subs	r3, r2, r3
 801bece:	b2db      	uxtb	r3, r3
 801bed0:	429e      	cmp	r6, r3
 801bed2:	bf28      	it	cs
 801bed4:	461e      	movcs	r6, r3
 801bed6:	462b      	mov	r3, r5
 801bed8:	4622      	mov	r2, r4
 801beda:	2100      	movs	r1, #0
 801bedc:	a805      	add	r0, sp, #20
 801bede:	f001 f87d 	bl	801cfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801bee2:	e7e2      	b.n	801beaa <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4a>
 801bee4:	4630      	mov	r0, r6
 801bee6:	b01e      	add	sp, #120	; 0x78
 801bee8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801beec:	b003      	add	sp, #12
 801beee:	4770      	bx	lr

0801bef0 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801bef0:	b513      	push	{r0, r1, r4, lr}
 801bef2:	6803      	ldr	r3, [r0, #0]
 801bef4:	2400      	movs	r4, #0
 801bef6:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801befa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801befe:	f8ad 1004 	strh.w	r1, [sp, #4]
 801bf02:	4669      	mov	r1, sp
 801bf04:	691b      	ldr	r3, [r3, #16]
 801bf06:	9400      	str	r4, [sp, #0]
 801bf08:	f8ad 2006 	strh.w	r2, [sp, #6]
 801bf0c:	4798      	blx	r3
 801bf0e:	b002      	add	sp, #8
 801bf10:	bd10      	pop	{r4, pc}

0801bf12 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801bf12:	b538      	push	{r3, r4, r5, lr}
 801bf14:	680b      	ldr	r3, [r1, #0]
 801bf16:	460c      	mov	r4, r1
 801bf18:	4605      	mov	r5, r0
 801bf1a:	68db      	ldr	r3, [r3, #12]
 801bf1c:	4798      	blx	r3
 801bf1e:	6823      	ldr	r3, [r4, #0]
 801bf20:	4620      	mov	r0, r4
 801bf22:	4629      	mov	r1, r5
 801bf24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf26:	4798      	blx	r3
 801bf28:	4628      	mov	r0, r5
 801bf2a:	bd38      	pop	{r3, r4, r5, pc}

0801bf2c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801bf2c:	b410      	push	{r4}
 801bf2e:	880a      	ldrh	r2, [r1, #0]
 801bf30:	8884      	ldrh	r4, [r0, #4]
 801bf32:	4422      	add	r2, r4
 801bf34:	800a      	strh	r2, [r1, #0]
 801bf36:	884a      	ldrh	r2, [r1, #2]
 801bf38:	88c4      	ldrh	r4, [r0, #6]
 801bf3a:	4422      	add	r2, r4
 801bf3c:	804a      	strh	r2, [r1, #2]
 801bf3e:	6940      	ldr	r0, [r0, #20]
 801bf40:	b120      	cbz	r0, 801bf4c <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801bf42:	6803      	ldr	r3, [r0, #0]
 801bf44:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf4a:	4718      	bx	r3
 801bf4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bf50:	4770      	bx	lr

0801bf52 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801bf52:	b570      	push	{r4, r5, r6, lr}
 801bf54:	8882      	ldrh	r2, [r0, #4]
 801bf56:	460c      	mov	r4, r1
 801bf58:	880b      	ldrh	r3, [r1, #0]
 801bf5a:	4605      	mov	r5, r0
 801bf5c:	4413      	add	r3, r2
 801bf5e:	800b      	strh	r3, [r1, #0]
 801bf60:	884b      	ldrh	r3, [r1, #2]
 801bf62:	88c2      	ldrh	r2, [r0, #6]
 801bf64:	4413      	add	r3, r2
 801bf66:	804b      	strh	r3, [r1, #2]
 801bf68:	1d01      	adds	r1, r0, #4
 801bf6a:	4620      	mov	r0, r4
 801bf6c:	f7fa fac2 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801bf70:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	dd0b      	ble.n	801bf90 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bf78:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	dd07      	ble.n	801bf90 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bf80:	6968      	ldr	r0, [r5, #20]
 801bf82:	b128      	cbz	r0, 801bf90 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801bf84:	6803      	ldr	r3, [r0, #0]
 801bf86:	4621      	mov	r1, r4
 801bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bf8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bf8e:	4718      	bx	r3
 801bf90:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bf94 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801bf94:	b570      	push	{r4, r5, r6, lr}
 801bf96:	8882      	ldrh	r2, [r0, #4]
 801bf98:	460c      	mov	r4, r1
 801bf9a:	880b      	ldrh	r3, [r1, #0]
 801bf9c:	4605      	mov	r5, r0
 801bf9e:	4413      	add	r3, r2
 801bfa0:	800b      	strh	r3, [r1, #0]
 801bfa2:	884b      	ldrh	r3, [r1, #2]
 801bfa4:	88c2      	ldrh	r2, [r0, #6]
 801bfa6:	4413      	add	r3, r2
 801bfa8:	804b      	strh	r3, [r1, #2]
 801bfaa:	1d01      	adds	r1, r0, #4
 801bfac:	4620      	mov	r0, r4
 801bfae:	f7fa faa1 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801bfb2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801bfb6:	2b00      	cmp	r3, #0
 801bfb8:	dd18      	ble.n	801bfec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801bfba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	dd14      	ble.n	801bfec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801bfc2:	6968      	ldr	r0, [r5, #20]
 801bfc4:	b128      	cbz	r0, 801bfd2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801bfc6:	6803      	ldr	r3, [r0, #0]
 801bfc8:	4621      	mov	r1, r4
 801bfca:	691b      	ldr	r3, [r3, #16]
 801bfcc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bfd0:	4718      	bx	r3
 801bfd2:	4b07      	ldr	r3, [pc, #28]	; (801bff0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	3304      	adds	r3, #4
 801bfd8:	429d      	cmp	r5, r3
 801bfda:	d107      	bne.n	801bfec <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801bfdc:	f7fe fff0 	bl	801afc0 <_ZN8touchgfx11Application11getInstanceEv>
 801bfe0:	6821      	ldr	r1, [r4, #0]
 801bfe2:	6862      	ldr	r2, [r4, #4]
 801bfe4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801bfe8:	f7ff b862 	b.w	801b0b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801bfec:	bd70      	pop	{r4, r5, r6, pc}
 801bfee:	bf00      	nop
 801bff0:	2003c300 	.word	0x2003c300

0801bff4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801bff4:	b570      	push	{r4, r5, r6, lr}
 801bff6:	4604      	mov	r4, r0
 801bff8:	4616      	mov	r6, r2
 801bffa:	460d      	mov	r5, r1
 801bffc:	b901      	cbnz	r1, 801c000 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801bffe:	b192      	cbz	r2, 801c026 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801c000:	6823      	ldr	r3, [r4, #0]
 801c002:	4620      	mov	r0, r4
 801c004:	699b      	ldr	r3, [r3, #24]
 801c006:	4798      	blx	r3
 801c008:	88e2      	ldrh	r2, [r4, #6]
 801c00a:	88a1      	ldrh	r1, [r4, #4]
 801c00c:	4620      	mov	r0, r4
 801c00e:	4432      	add	r2, r6
 801c010:	4429      	add	r1, r5
 801c012:	b212      	sxth	r2, r2
 801c014:	b209      	sxth	r1, r1
 801c016:	f7f3 fbb5 	bl	800f784 <_ZN8touchgfx8Drawable5setXYEss>
 801c01a:	6823      	ldr	r3, [r4, #0]
 801c01c:	4620      	mov	r0, r4
 801c01e:	699b      	ldr	r3, [r3, #24]
 801c020:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801c024:	4718      	bx	r3
 801c026:	bd70      	pop	{r4, r5, r6, pc}

0801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801c028:	b510      	push	{r4, lr}
 801c02a:	2300      	movs	r3, #0
 801c02c:	4604      	mov	r4, r0
 801c02e:	4608      	mov	r0, r1
 801c030:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801c034:	8023      	strh	r3, [r4, #0]
 801c036:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c03a:	8063      	strh	r3, [r4, #2]
 801c03c:	6803      	ldr	r3, [r0, #0]
 801c03e:	80a1      	strh	r1, [r4, #4]
 801c040:	4621      	mov	r1, r4
 801c042:	80e2      	strh	r2, [r4, #6]
 801c044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c046:	4798      	blx	r3
 801c048:	4620      	mov	r0, r4
 801c04a:	bd10      	pop	{r4, pc}

0801c04c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt>:
 801c04c:	b530      	push	{r4, r5, lr}
 801c04e:	8083      	strh	r3, [r0, #4]
 801c050:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801c054:	f89d 5010 	ldrb.w	r5, [sp, #16]
 801c058:	7183      	strb	r3, [r0, #6]
 801c05a:	79c3      	ldrb	r3, [r0, #7]
 801c05c:	6101      	str	r1, [r0, #16]
 801c05e:	f365 0306 	bfi	r3, r5, #0, #7
 801c062:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801c066:	8282      	strh	r2, [r0, #20]
 801c068:	f365 13c7 	bfi	r3, r5, #7, #1
 801c06c:	71c3      	strb	r3, [r0, #7]
 801c06e:	f89d 3018 	ldrb.w	r3, [sp, #24]
 801c072:	7203      	strb	r3, [r0, #8]
 801c074:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801c078:	7243      	strb	r3, [r0, #9]
 801c07a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801c07e:	8143      	strh	r3, [r0, #10]
 801c080:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801c084:	8183      	strh	r3, [r0, #12]
 801c086:	4b01      	ldr	r3, [pc, #4]	; (801c08c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhhtt+0x40>)
 801c088:	6003      	str	r3, [r0, #0]
 801c08a:	bd30      	pop	{r4, r5, pc}
 801c08c:	080309b4 	.word	0x080309b4

0801c090 <_ZNK8touchgfx9ConstFont4findEt>:
 801c090:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c092:	6904      	ldr	r4, [r0, #16]
 801c094:	b3bc      	cbz	r4, 801c106 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c096:	88a3      	ldrh	r3, [r4, #4]
 801c098:	8a82      	ldrh	r2, [r0, #20]
 801c09a:	1acb      	subs	r3, r1, r3
 801c09c:	f102 32ff 	add.w	r2, r2, #4294967295
 801c0a0:	d431      	bmi.n	801c106 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c0a2:	4293      	cmp	r3, r2
 801c0a4:	dd0c      	ble.n	801c0c0 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801c0a6:	230e      	movs	r3, #14
 801c0a8:	fb03 4302 	mla	r3, r3, r2, r4
 801c0ac:	889b      	ldrh	r3, [r3, #4]
 801c0ae:	1a5b      	subs	r3, r3, r1
 801c0b0:	1ad3      	subs	r3, r2, r3
 801c0b2:	429a      	cmp	r2, r3
 801c0b4:	db27      	blt.n	801c106 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c0b6:	2b00      	cmp	r3, #0
 801c0b8:	bfbc      	itt	lt
 801c0ba:	2302      	movlt	r3, #2
 801c0bc:	fb92 f3f3 	sdivlt	r3, r2, r3
 801c0c0:	2500      	movs	r5, #0
 801c0c2:	260e      	movs	r6, #14
 801c0c4:	4295      	cmp	r5, r2
 801c0c6:	dc1e      	bgt.n	801c106 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c0c8:	fb06 4003 	mla	r0, r6, r3, r4
 801c0cc:	8887      	ldrh	r7, [r0, #4]
 801c0ce:	42b9      	cmp	r1, r7
 801c0d0:	d01a      	beq.n	801c108 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 801c0d2:	d20d      	bcs.n	801c0f0 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 801c0d4:	1e5a      	subs	r2, r3, #1
 801c0d6:	4295      	cmp	r5, r2
 801c0d8:	dc15      	bgt.n	801c106 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c0da:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801c0de:	1a5b      	subs	r3, r3, r1
 801c0e0:	1ad3      	subs	r3, r2, r3
 801c0e2:	429a      	cmp	r2, r3
 801c0e4:	db0f      	blt.n	801c106 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c0e6:	429d      	cmp	r5, r3
 801c0e8:	ddec      	ble.n	801c0c4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c0ea:	1953      	adds	r3, r2, r5
 801c0ec:	105b      	asrs	r3, r3, #1
 801c0ee:	e7e9      	b.n	801c0c4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c0f0:	1c5d      	adds	r5, r3, #1
 801c0f2:	42aa      	cmp	r2, r5
 801c0f4:	db07      	blt.n	801c106 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c0f6:	8a43      	ldrh	r3, [r0, #18]
 801c0f8:	1acb      	subs	r3, r1, r3
 801c0fa:	442b      	add	r3, r5
 801c0fc:	429d      	cmp	r5, r3
 801c0fe:	dc02      	bgt.n	801c106 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801c100:	429a      	cmp	r2, r3
 801c102:	dadf      	bge.n	801c0c4 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801c104:	e7f1      	b.n	801c0ea <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801c106:	2000      	movs	r0, #0
 801c108:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c10a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801c10a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c10c:	4604      	mov	r4, r0
 801c10e:	4617      	mov	r7, r2
 801c110:	461e      	mov	r6, r3
 801c112:	b911      	cbnz	r1, 801c11a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801c114:	2500      	movs	r5, #0
 801c116:	4628      	mov	r0, r5
 801c118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c11a:	290a      	cmp	r1, #10
 801c11c:	d0fa      	beq.n	801c114 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c11e:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 801c122:	4291      	cmp	r1, r2
 801c124:	d0f6      	beq.n	801c114 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c126:	f242 020b 	movw	r2, #8203	; 0x200b
 801c12a:	4291      	cmp	r1, r2
 801c12c:	d0f2      	beq.n	801c114 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c12e:	f7ff ffaf 	bl	801c090 <_ZNK8touchgfx9ConstFont4findEt>
 801c132:	4605      	mov	r5, r0
 801c134:	b950      	cbnz	r0, 801c14c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 801c136:	6823      	ldr	r3, [r4, #0]
 801c138:	4620      	mov	r0, r4
 801c13a:	691b      	ldr	r3, [r3, #16]
 801c13c:	4798      	blx	r3
 801c13e:	4601      	mov	r1, r0
 801c140:	4620      	mov	r0, r4
 801c142:	f7ff ffa5 	bl	801c090 <_ZNK8touchgfx9ConstFont4findEt>
 801c146:	4605      	mov	r5, r0
 801c148:	2800      	cmp	r0, #0
 801c14a:	d0e3      	beq.n	801c114 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801c14c:	6823      	ldr	r3, [r4, #0]
 801c14e:	4629      	mov	r1, r5
 801c150:	4620      	mov	r0, r4
 801c152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c154:	4798      	blx	r3
 801c156:	6038      	str	r0, [r7, #0]
 801c158:	6823      	ldr	r3, [r4, #0]
 801c15a:	4620      	mov	r0, r4
 801c15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c15e:	4798      	blx	r3
 801c160:	7030      	strb	r0, [r6, #0]
 801c162:	e7d8      	b.n	801c116 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

0801c164 <_ZN8touchgfx4clzuEm>:
 801c164:	4603      	mov	r3, r0
 801c166:	b1c8      	cbz	r0, 801c19c <_ZN8touchgfx4clzuEm+0x38>
 801c168:	0c02      	lsrs	r2, r0, #16
 801c16a:	0412      	lsls	r2, r2, #16
 801c16c:	b9a2      	cbnz	r2, 801c198 <_ZN8touchgfx4clzuEm+0x34>
 801c16e:	0403      	lsls	r3, r0, #16
 801c170:	2010      	movs	r0, #16
 801c172:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801c176:	bf04      	itt	eq
 801c178:	021b      	lsleq	r3, r3, #8
 801c17a:	3008      	addeq	r0, #8
 801c17c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801c180:	bf04      	itt	eq
 801c182:	011b      	lsleq	r3, r3, #4
 801c184:	3004      	addeq	r0, #4
 801c186:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801c18a:	bf04      	itt	eq
 801c18c:	009b      	lsleq	r3, r3, #2
 801c18e:	3002      	addeq	r0, #2
 801c190:	2b00      	cmp	r3, #0
 801c192:	db04      	blt.n	801c19e <_ZN8touchgfx4clzuEm+0x3a>
 801c194:	3001      	adds	r0, #1
 801c196:	4770      	bx	lr
 801c198:	2000      	movs	r0, #0
 801c19a:	e7ea      	b.n	801c172 <_ZN8touchgfx4clzuEm+0xe>
 801c19c:	2020      	movs	r0, #32
 801c19e:	4770      	bx	lr

0801c1a0 <_ZN8touchgfx7muldivuEmmmRm>:
 801c1a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c1a4:	4680      	mov	r8, r0
 801c1a6:	460f      	mov	r7, r1
 801c1a8:	4615      	mov	r5, r2
 801c1aa:	461e      	mov	r6, r3
 801c1ac:	f7ff ffda 	bl	801c164 <_ZN8touchgfx4clzuEm>
 801c1b0:	b998      	cbnz	r0, 801c1da <_ZN8touchgfx7muldivuEmmmRm+0x3a>
 801c1b2:	4608      	mov	r0, r1
 801c1b4:	f7ff ffd6 	bl	801c164 <_ZN8touchgfx4clzuEm>
 801c1b8:	2800      	cmp	r0, #0
 801c1ba:	dd08      	ble.n	801c1ce <_ZN8touchgfx7muldivuEmmmRm+0x2e>
 801c1bc:	4633      	mov	r3, r6
 801c1be:	462a      	mov	r2, r5
 801c1c0:	4641      	mov	r1, r8
 801c1c2:	4638      	mov	r0, r7
 801c1c4:	f7ff ffec 	bl	801c1a0 <_ZN8touchgfx7muldivuEmmmRm>
 801c1c8:	b003      	add	sp, #12
 801c1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c1ce:	f04f 33ff 	mov.w	r3, #4294967295
 801c1d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 801c1d6:	6033      	str	r3, [r6, #0]
 801c1d8:	e7f6      	b.n	801c1c8 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801c1da:	fa31 f900 	lsrs.w	r9, r1, r0
 801c1de:	fb01 f308 	mul.w	r3, r1, r8
 801c1e2:	d105      	bne.n	801c1f0 <_ZN8touchgfx7muldivuEmmmRm+0x50>
 801c1e4:	fbb3 f0f5 	udiv	r0, r3, r5
 801c1e8:	fb05 3510 	mls	r5, r5, r0, r3
 801c1ec:	6035      	str	r5, [r6, #0]
 801c1ee:	e7eb      	b.n	801c1c8 <_ZN8touchgfx7muldivuEmmmRm+0x28>
 801c1f0:	2301      	movs	r3, #1
 801c1f2:	fa08 fb00 	lsl.w	fp, r8, r0
 801c1f6:	462a      	mov	r2, r5
 801c1f8:	4641      	mov	r1, r8
 801c1fa:	fa03 f000 	lsl.w	r0, r3, r0
 801c1fe:	4633      	mov	r3, r6
 801c200:	fbbb faf5 	udiv	sl, fp, r5
 801c204:	3801      	subs	r0, #1
 801c206:	fb09 f40a 	mul.w	r4, r9, sl
 801c20a:	4038      	ands	r0, r7
 801c20c:	f7ff ffc8 	bl	801c1a0 <_ZN8touchgfx7muldivuEmmmRm>
 801c210:	462a      	mov	r2, r5
 801c212:	4607      	mov	r7, r0
 801c214:	ab01      	add	r3, sp, #4
 801c216:	fb05 b11a 	mls	r1, r5, sl, fp
 801c21a:	4648      	mov	r0, r9
 801c21c:	f7ff ffc0 	bl	801c1a0 <_ZN8touchgfx7muldivuEmmmRm>
 801c220:	9b01      	ldr	r3, [sp, #4]
 801c222:	6832      	ldr	r2, [r6, #0]
 801c224:	441a      	add	r2, r3
 801c226:	fbb2 f3f5 	udiv	r3, r2, r5
 801c22a:	441c      	add	r4, r3
 801c22c:	fb05 2513 	mls	r5, r5, r3, r2
 801c230:	443c      	add	r4, r7
 801c232:	4420      	add	r0, r4
 801c234:	e7da      	b.n	801c1ec <_ZN8touchgfx7muldivuEmmmRm+0x4c>

0801c236 <_ZN8touchgfx6muldivElllRl>:
 801c236:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c238:	2800      	cmp	r0, #0
 801c23a:	461e      	mov	r6, r3
 801c23c:	bfba      	itte	lt
 801c23e:	4240      	neglt	r0, r0
 801c240:	f04f 34ff 	movlt.w	r4, #4294967295
 801c244:	2401      	movge	r4, #1
 801c246:	2900      	cmp	r1, #0
 801c248:	bfbc      	itt	lt
 801c24a:	4249      	neglt	r1, r1
 801c24c:	4264      	neglt	r4, r4
 801c24e:	2a00      	cmp	r2, #0
 801c250:	bfb6      	itet	lt
 801c252:	4265      	neglt	r5, r4
 801c254:	4625      	movge	r5, r4
 801c256:	4252      	neglt	r2, r2
 801c258:	4288      	cmp	r0, r1
 801c25a:	bfc2      	ittt	gt
 801c25c:	4603      	movgt	r3, r0
 801c25e:	4608      	movgt	r0, r1
 801c260:	4619      	movgt	r1, r3
 801c262:	ab01      	add	r3, sp, #4
 801c264:	f7ff ff9c 	bl	801c1a0 <_ZN8touchgfx7muldivuEmmmRm>
 801c268:	9b01      	ldr	r3, [sp, #4]
 801c26a:	4368      	muls	r0, r5
 801c26c:	435c      	muls	r4, r3
 801c26e:	6034      	str	r4, [r6, #0]
 801c270:	b002      	add	sp, #8
 801c272:	bd70      	pop	{r4, r5, r6, pc}

0801c274 <_ZN8touchgfx6muldivElll>:
 801c274:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c276:	4606      	mov	r6, r0
 801c278:	ab01      	add	r3, sp, #4
 801c27a:	460d      	mov	r5, r1
 801c27c:	4614      	mov	r4, r2
 801c27e:	f7ff ffda 	bl	801c236 <_ZN8touchgfx6muldivElllRl>
 801c282:	2e00      	cmp	r6, #0
 801c284:	db20      	blt.n	801c2c8 <_ZN8touchgfx6muldivElll+0x54>
 801c286:	bf14      	ite	ne
 801c288:	2301      	movne	r3, #1
 801c28a:	2300      	moveq	r3, #0
 801c28c:	2d00      	cmp	r5, #0
 801c28e:	db1e      	blt.n	801c2ce <_ZN8touchgfx6muldivElll+0x5a>
 801c290:	bf14      	ite	ne
 801c292:	2201      	movne	r2, #1
 801c294:	2200      	moveq	r2, #0
 801c296:	2c00      	cmp	r4, #0
 801c298:	fb03 f202 	mul.w	r2, r3, r2
 801c29c:	db1a      	blt.n	801c2d4 <_ZN8touchgfx6muldivElll+0x60>
 801c29e:	bf14      	ite	ne
 801c2a0:	2301      	movne	r3, #1
 801c2a2:	2300      	moveq	r3, #0
 801c2a4:	4353      	muls	r3, r2
 801c2a6:	2b01      	cmp	r3, #1
 801c2a8:	d117      	bne.n	801c2da <_ZN8touchgfx6muldivElll+0x66>
 801c2aa:	2c00      	cmp	r4, #0
 801c2ac:	9b01      	ldr	r3, [sp, #4]
 801c2ae:	bfb8      	it	lt
 801c2b0:	4264      	neglt	r4, r4
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	f104 0401 	add.w	r4, r4, #1
 801c2b8:	bfb8      	it	lt
 801c2ba:	425b      	neglt	r3, r3
 801c2bc:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c2c0:	db00      	blt.n	801c2c4 <_ZN8touchgfx6muldivElll+0x50>
 801c2c2:	3001      	adds	r0, #1
 801c2c4:	b002      	add	sp, #8
 801c2c6:	bd70      	pop	{r4, r5, r6, pc}
 801c2c8:	f04f 33ff 	mov.w	r3, #4294967295
 801c2cc:	e7de      	b.n	801c28c <_ZN8touchgfx6muldivElll+0x18>
 801c2ce:	f04f 32ff 	mov.w	r2, #4294967295
 801c2d2:	e7e0      	b.n	801c296 <_ZN8touchgfx6muldivElll+0x22>
 801c2d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c2d8:	e7e4      	b.n	801c2a4 <_ZN8touchgfx6muldivElll+0x30>
 801c2da:	3301      	adds	r3, #1
 801c2dc:	d1f2      	bne.n	801c2c4 <_ZN8touchgfx6muldivElll+0x50>
 801c2de:	9b01      	ldr	r3, [sp, #4]
 801c2e0:	2c00      	cmp	r4, #0
 801c2e2:	bfb8      	it	lt
 801c2e4:	4264      	neglt	r4, r4
 801c2e6:	2b00      	cmp	r3, #0
 801c2e8:	bfb8      	it	lt
 801c2ea:	425b      	neglt	r3, r3
 801c2ec:	ebb3 0f64 	cmp.w	r3, r4, asr #1
 801c2f0:	bfc8      	it	gt
 801c2f2:	f100 30ff 	addgt.w	r0, r0, #4294967295
 801c2f6:	e7e5      	b.n	801c2c4 <_ZN8touchgfx6muldivElll+0x50>

0801c2f8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 801c2f8:	2000      	movs	r0, #0
 801c2fa:	4770      	bx	lr

0801c2fc <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 801c2fc:	2001      	movs	r0, #1
 801c2fe:	4770      	bx	lr

0801c300 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801c300:	2002      	movs	r0, #2
 801c302:	4770      	bx	lr

0801c304 <_ZN8touchgfx12GestureEventD1Ev>:
 801c304:	4770      	bx	lr

0801c306 <_ZN8touchgfx9DragEventD1Ev>:
 801c306:	4770      	bx	lr

0801c308 <_ZN8touchgfx10ClickEventD1Ev>:
 801c308:	4770      	bx	lr

0801c30a <_ZN8touchgfx10ClickEventD0Ev>:
 801c30a:	b510      	push	{r4, lr}
 801c30c:	4604      	mov	r4, r0
 801c30e:	210c      	movs	r1, #12
 801c310:	f00d fc74 	bl	8029bfc <_ZdlPvj>
 801c314:	4620      	mov	r0, r4
 801c316:	bd10      	pop	{r4, pc}

0801c318 <_ZN8touchgfx9DragEventD0Ev>:
 801c318:	b510      	push	{r4, lr}
 801c31a:	4604      	mov	r4, r0
 801c31c:	2110      	movs	r1, #16
 801c31e:	f00d fc6d 	bl	8029bfc <_ZdlPvj>
 801c322:	4620      	mov	r0, r4
 801c324:	bd10      	pop	{r4, pc}

0801c326 <_ZN8touchgfx12GestureEventD0Ev>:
 801c326:	b510      	push	{r4, lr}
 801c328:	4604      	mov	r4, r0
 801c32a:	210c      	movs	r1, #12
 801c32c:	f00d fc66 	bl	8029bfc <_ZdlPvj>
 801c330:	4620      	mov	r0, r4
 801c332:	bd10      	pop	{r4, pc}

0801c334 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801c334:	b530      	push	{r4, r5, lr}
 801c336:	460d      	mov	r5, r1
 801c338:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c33a:	b087      	sub	sp, #28
 801c33c:	4604      	mov	r4, r0
 801c33e:	b301      	cbz	r1, 801c382 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801c340:	a801      	add	r0, sp, #4
 801c342:	f7ff fe71 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c346:	892a      	ldrh	r2, [r5, #8]
 801c348:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801c34c:	7928      	ldrb	r0, [r5, #4]
 801c34e:	1ad2      	subs	r2, r2, r3
 801c350:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801c352:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801c356:	441a      	add	r2, r3
 801c358:	896b      	ldrh	r3, [r5, #10]
 801c35a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801c35e:	f88d 0010 	strb.w	r0, [sp, #16]
 801c362:	1b5b      	subs	r3, r3, r5
 801c364:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801c366:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c368:	442b      	add	r3, r5
 801c36a:	4d07      	ldr	r5, [pc, #28]	; (801c388 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801c36c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801c370:	a903      	add	r1, sp, #12
 801c372:	9503      	str	r5, [sp, #12]
 801c374:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c378:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c37c:	6803      	ldr	r3, [r0, #0]
 801c37e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c380:	4798      	blx	r3
 801c382:	b007      	add	sp, #28
 801c384:	bd30      	pop	{r4, r5, pc}
 801c386:	bf00      	nop
 801c388:	08030a34 	.word	0x08030a34

0801c38c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801c38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c390:	6b03      	ldr	r3, [r0, #48]	; 0x30
 801c392:	b08a      	sub	sp, #40	; 0x28
 801c394:	4604      	mov	r4, r0
 801c396:	460d      	mov	r5, r1
 801c398:	b113      	cbz	r3, 801c3a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 801c39a:	790b      	ldrb	r3, [r1, #4]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d044      	beq.n	801c42a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c3a0:	f104 0804 	add.w	r8, r4, #4
 801c3a4:	a803      	add	r0, sp, #12
 801c3a6:	4641      	mov	r1, r8
 801c3a8:	f7ff fe3e 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c3ac:	792b      	ldrb	r3, [r5, #4]
 801c3ae:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801c3b2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 801c3b6:	b983      	cbnz	r3, 801c3da <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 801c3b8:	f104 0336 	add.w	r3, r4, #54	; 0x36
 801c3bc:	892a      	ldrh	r2, [r5, #8]
 801c3be:	88e9      	ldrh	r1, [r5, #6]
 801c3c0:	4640      	mov	r0, r8
 801c3c2:	1b92      	subs	r2, r2, r6
 801c3c4:	9301      	str	r3, [sp, #4]
 801c3c6:	1bc9      	subs	r1, r1, r7
 801c3c8:	f104 0334 	add.w	r3, r4, #52	; 0x34
 801c3cc:	b212      	sxth	r2, r2
 801c3ce:	9300      	str	r3, [sp, #0]
 801c3d0:	b209      	sxth	r1, r1
 801c3d2:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801c3d6:	f7f9 ffab 	bl	8016330 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 801c3da:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c3dc:	b329      	cbz	r1, 801c42a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c3de:	a805      	add	r0, sp, #20
 801c3e0:	f7ff fe22 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c3e4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801c3e8:	792b      	ldrb	r3, [r5, #4]
 801c3ea:	a907      	add	r1, sp, #28
 801c3ec:	1abf      	subs	r7, r7, r2
 801c3ee:	88ea      	ldrh	r2, [r5, #6]
 801c3f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801c3f2:	4417      	add	r7, r2
 801c3f4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 801c3f6:	f88d 3020 	strb.w	r3, [sp, #32]
 801c3fa:	4417      	add	r7, r2
 801c3fc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801c400:	1ab6      	subs	r6, r6, r2
 801c402:	892a      	ldrh	r2, [r5, #8]
 801c404:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 801c408:	4416      	add	r6, r2
 801c40a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801c40c:	4416      	add	r6, r2
 801c40e:	4a08      	ldr	r2, [pc, #32]	; (801c430 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801c410:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 801c414:	2600      	movs	r6, #0
 801c416:	9207      	str	r2, [sp, #28]
 801c418:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 801c41c:	6803      	ldr	r3, [r0, #0]
 801c41e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c420:	4798      	blx	r3
 801c422:	792b      	ldrb	r3, [r5, #4]
 801c424:	b10b      	cbz	r3, 801c42a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 801c426:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 801c42a:	b00a      	add	sp, #40	; 0x28
 801c42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c430:	08030a0c 	.word	0x08030a0c

0801c434 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801c434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c438:	460c      	mov	r4, r1
 801c43a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801c43c:	b088      	sub	sp, #32
 801c43e:	4605      	mov	r5, r0
 801c440:	2900      	cmp	r1, #0
 801c442:	d06d      	beq.n	801c520 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 801c444:	4668      	mov	r0, sp
 801c446:	f7ff fdef 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c44a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 801c44c:	88e3      	ldrh	r3, [r4, #6]
 801c44e:	f9bd 8000 	ldrsh.w	r8, [sp]
 801c452:	440b      	add	r3, r1
 801c454:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 801c458:	b21b      	sxth	r3, r3
 801c45a:	4543      	cmp	r3, r8
 801c45c:	db31      	blt.n	801c4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c45e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801c462:	44c4      	add	ip, r8
 801c464:	fa0f fc8c 	sxth.w	ip, ip
 801c468:	4563      	cmp	r3, ip
 801c46a:	da2a      	bge.n	801c4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c46c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 801c46e:	8926      	ldrh	r6, [r4, #8]
 801c470:	4416      	add	r6, r2
 801c472:	b236      	sxth	r6, r6
 801c474:	42be      	cmp	r6, r7
 801c476:	db24      	blt.n	801c4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c478:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801c47c:	4438      	add	r0, r7
 801c47e:	b200      	sxth	r0, r0
 801c480:	4286      	cmp	r6, r0
 801c482:	da1e      	bge.n	801c4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c484:	8963      	ldrh	r3, [r4, #10]
 801c486:	4419      	add	r1, r3
 801c488:	b209      	sxth	r1, r1
 801c48a:	4541      	cmp	r1, r8
 801c48c:	db08      	blt.n	801c4a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c48e:	4561      	cmp	r1, ip
 801c490:	da06      	bge.n	801c4a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c492:	89a3      	ldrh	r3, [r4, #12]
 801c494:	441a      	add	r2, r3
 801c496:	b212      	sxth	r2, r2
 801c498:	42ba      	cmp	r2, r7
 801c49a:	db01      	blt.n	801c4a0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801c49c:	4282      	cmp	r2, r0
 801c49e:	db10      	blt.n	801c4c2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801c4a0:	4b21      	ldr	r3, [pc, #132]	; (801c528 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 801c4a2:	a904      	add	r1, sp, #16
 801c4a4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c4a6:	9304      	str	r3, [sp, #16]
 801c4a8:	2302      	movs	r3, #2
 801c4aa:	f88d 3014 	strb.w	r3, [sp, #20]
 801c4ae:	2300      	movs	r3, #0
 801c4b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c4b4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801c4b8:	f8ad 301a 	strh.w	r3, [sp, #26]
 801c4bc:	6803      	ldr	r3, [r0, #0]
 801c4be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c4c0:	4798      	blx	r3
 801c4c2:	1d29      	adds	r1, r5, #4
 801c4c4:	a802      	add	r0, sp, #8
 801c4c6:	f7ff fdaf 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c4ca:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c4ce:	88e0      	ldrh	r0, [r4, #6]
 801c4d0:	eba3 0808 	sub.w	r8, r3, r8
 801c4d4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c4d8:	7921      	ldrb	r1, [r4, #4]
 801c4da:	fa1f f888 	uxth.w	r8, r8
 801c4de:	1bdf      	subs	r7, r3, r7
 801c4e0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 801c4e4:	b2bb      	uxth	r3, r7
 801c4e6:	4440      	add	r0, r8
 801c4e8:	8922      	ldrh	r2, [r4, #8]
 801c4ea:	8967      	ldrh	r7, [r4, #10]
 801c4ec:	4460      	add	r0, ip
 801c4ee:	89a4      	ldrh	r4, [r4, #12]
 801c4f0:	441a      	add	r2, r3
 801c4f2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801c4f4:	44b8      	add	r8, r7
 801c4f6:	4423      	add	r3, r4
 801c4f8:	f8ad 0016 	strh.w	r0, [sp, #22]
 801c4fc:	4432      	add	r2, r6
 801c4fe:	44e0      	add	r8, ip
 801c500:	4433      	add	r3, r6
 801c502:	4c0a      	ldr	r4, [pc, #40]	; (801c52c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 801c504:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801c506:	f88d 1014 	strb.w	r1, [sp, #20]
 801c50a:	a904      	add	r1, sp, #16
 801c50c:	9404      	str	r4, [sp, #16]
 801c50e:	f8ad 2018 	strh.w	r2, [sp, #24]
 801c512:	f8ad 801a 	strh.w	r8, [sp, #26]
 801c516:	f8ad 301c 	strh.w	r3, [sp, #28]
 801c51a:	6803      	ldr	r3, [r0, #0]
 801c51c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c51e:	4798      	blx	r3
 801c520:	b008      	add	sp, #32
 801c522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c526:	bf00      	nop
 801c528:	08030a0c 	.word	0x08030a0c
 801c52c:	08030a20 	.word	0x08030a20

0801c530 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801c530:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c532:	4604      	mov	r4, r0
 801c534:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801c538:	3201      	adds	r2, #1
 801c53a:	d112      	bne.n	801c562 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801c53c:	2500      	movs	r5, #0
 801c53e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801c542:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801c546:	6803      	ldr	r3, [r0, #0]
 801c548:	9500      	str	r5, [sp, #0]
 801c54a:	466d      	mov	r5, sp
 801c54c:	f8ad 1004 	strh.w	r1, [sp, #4]
 801c550:	f8ad 2006 	strh.w	r2, [sp, #6]
 801c554:	4629      	mov	r1, r5
 801c556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c558:	4798      	blx	r3
 801c55a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801c55e:	e884 0003 	stmia.w	r4, {r0, r1}
 801c562:	4620      	mov	r0, r4
 801c564:	b003      	add	sp, #12
 801c566:	bd30      	pop	{r4, r5, pc}

0801c568 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801c568:	b513      	push	{r0, r1, r4, lr}
 801c56a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801c56e:	4604      	mov	r4, r0
 801c570:	3301      	adds	r3, #1
 801c572:	d109      	bne.n	801c588 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801c574:	4601      	mov	r1, r0
 801c576:	4668      	mov	r0, sp
 801c578:	f7ff fd56 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c57c:	f8bd 3000 	ldrh.w	r3, [sp]
 801c580:	8423      	strh	r3, [r4, #32]
 801c582:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c586:	8463      	strh	r3, [r4, #34]	; 0x22
 801c588:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801c58c:	b002      	add	sp, #8
 801c58e:	bd10      	pop	{r4, pc}

0801c590 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801c590:	b513      	push	{r0, r1, r4, lr}
 801c592:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801c596:	4604      	mov	r4, r0
 801c598:	3301      	adds	r3, #1
 801c59a:	d109      	bne.n	801c5b0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801c59c:	4601      	mov	r1, r0
 801c59e:	4668      	mov	r0, sp
 801c5a0:	f7ff fd42 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c5a4:	f8bd 3000 	ldrh.w	r3, [sp]
 801c5a8:	8423      	strh	r3, [r4, #32]
 801c5aa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c5ae:	8463      	strh	r3, [r4, #34]	; 0x22
 801c5b0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801c5b4:	b002      	add	sp, #8
 801c5b6:	bd10      	pop	{r4, pc}

0801c5b8 <_ZN8touchgfx6ScreenC1Ev>:
 801c5b8:	b570      	push	{r4, r5, r6, lr}
 801c5ba:	4b17      	ldr	r3, [pc, #92]	; (801c618 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801c5bc:	4605      	mov	r5, r0
 801c5be:	4a17      	ldr	r2, [pc, #92]	; (801c61c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 801c5c0:	2101      	movs	r1, #1
 801c5c2:	f845 3b04 	str.w	r3, [r5], #4
 801c5c6:	2300      	movs	r3, #0
 801c5c8:	6042      	str	r2, [r0, #4]
 801c5ca:	4604      	mov	r4, r0
 801c5cc:	8103      	strh	r3, [r0, #8]
 801c5ce:	8143      	strh	r3, [r0, #10]
 801c5d0:	8183      	strh	r3, [r0, #12]
 801c5d2:	81c3      	strh	r3, [r0, #14]
 801c5d4:	8203      	strh	r3, [r0, #16]
 801c5d6:	8243      	strh	r3, [r0, #18]
 801c5d8:	8283      	strh	r3, [r0, #20]
 801c5da:	82c3      	strh	r3, [r0, #22]
 801c5dc:	6203      	str	r3, [r0, #32]
 801c5de:	8483      	strh	r3, [r0, #36]	; 0x24
 801c5e0:	84c3      	strh	r3, [r0, #38]	; 0x26
 801c5e2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 801c5e6:	6343      	str	r3, [r0, #52]	; 0x34
 801c5e8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 801c5ec:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 801c5f0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 801c5f4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 801c5f8:	4b09      	ldr	r3, [pc, #36]	; (801c620 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801c5fa:	4628      	mov	r0, r5
 801c5fc:	f9b3 6000 	ldrsh.w	r6, [r3]
 801c600:	6b93      	ldr	r3, [r2, #56]	; 0x38
 801c602:	4a08      	ldr	r2, [pc, #32]	; (801c624 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801c604:	f9b2 1000 	ldrsh.w	r1, [r2]
 801c608:	4798      	blx	r3
 801c60a:	6863      	ldr	r3, [r4, #4]
 801c60c:	4628      	mov	r0, r5
 801c60e:	4631      	mov	r1, r6
 801c610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c612:	4798      	blx	r3
 801c614:	4620      	mov	r0, r4
 801c616:	bd70      	pop	{r4, r5, r6, pc}
 801c618:	08030a48 	.word	0x08030a48
 801c61c:	08030274 	.word	0x08030274
 801c620:	2003c2b2 	.word	0x2003c2b2
 801c624:	2003c2b0 	.word	0x2003c2b0

0801c628 <_ZN8touchgfx6Screen4drawEv>:
 801c628:	4b09      	ldr	r3, [pc, #36]	; (801c650 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801c62a:	b507      	push	{r0, r1, r2, lr}
 801c62c:	f9b3 2000 	ldrsh.w	r2, [r3]
 801c630:	2100      	movs	r1, #0
 801c632:	4b08      	ldr	r3, [pc, #32]	; (801c654 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801c634:	9100      	str	r1, [sp, #0]
 801c636:	4669      	mov	r1, sp
 801c638:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c63c:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c640:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c644:	6803      	ldr	r3, [r0, #0]
 801c646:	689b      	ldr	r3, [r3, #8]
 801c648:	4798      	blx	r3
 801c64a:	b003      	add	sp, #12
 801c64c:	f85d fb04 	ldr.w	pc, [sp], #4
 801c650:	2003c2b0 	.word	0x2003c2b0
 801c654:	2003c2b2 	.word	0x2003c2b2

0801c658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c65c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c660:	b089      	sub	sp, #36	; 0x24
 801c662:	4680      	mov	r8, r0
 801c664:	460c      	mov	r4, r1
 801c666:	2b00      	cmp	r3, #0
 801c668:	4615      	mov	r5, r2
 801c66a:	dd0e      	ble.n	801c68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c66c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c670:	2b00      	cmp	r3, #0
 801c672:	dd0a      	ble.n	801c68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c674:	4628      	mov	r0, r5
 801c676:	f7ff ff5b 	bl	801c530 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c67a:	4621      	mov	r1, r4
 801c67c:	f7fe fbc2 	bl	801ae04 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801c680:	69eb      	ldr	r3, [r5, #28]
 801c682:	b928      	cbnz	r0, 801c690 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801c684:	461d      	mov	r5, r3
 801c686:	2b00      	cmp	r3, #0
 801c688:	d1f4      	bne.n	801c674 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801c68a:	b009      	add	sp, #36	; 0x24
 801c68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c690:	ae04      	add	r6, sp, #16
 801c692:	2b00      	cmp	r3, #0
 801c694:	f000 80b5 	beq.w	801c802 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c698:	682b      	ldr	r3, [r5, #0]
 801c69a:	4629      	mov	r1, r5
 801c69c:	a802      	add	r0, sp, #8
 801c69e:	68db      	ldr	r3, [r3, #12]
 801c6a0:	4798      	blx	r3
 801c6a2:	4628      	mov	r0, r5
 801c6a4:	f7ff ff60 	bl	801c568 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c6a8:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801c6ac:	4407      	add	r7, r0
 801c6ae:	4628      	mov	r0, r5
 801c6b0:	f7ff ff6e 	bl	801c590 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c6b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c6b8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801c6bc:	b23f      	sxth	r7, r7
 801c6be:	4418      	add	r0, r3
 801c6c0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801c6c4:	4621      	mov	r1, r4
 801c6c6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c6ca:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c6ce:	4630      	mov	r0, r6
 801c6d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c6d4:	f8ad 7010 	strh.w	r7, [sp, #16]
 801c6d8:	f7f9 ff0c 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801c6dc:	4628      	mov	r0, r5
 801c6de:	f7ff ff27 	bl	801c530 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c6e2:	ab06      	add	r3, sp, #24
 801c6e4:	4602      	mov	r2, r0
 801c6e6:	e896 0003 	ldmia.w	r6, {r0, r1}
 801c6ea:	e883 0003 	stmia.w	r3, {r0, r1}
 801c6ee:	4611      	mov	r1, r2
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f7f9 feff 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801c6f6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801c6fa:	f9b4 1000 	ldrsh.w	r1, [r4]
 801c6fe:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 801c702:	4299      	cmp	r1, r3
 801c704:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801c708:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 801c70c:	d10b      	bne.n	801c726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c70e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c712:	4552      	cmp	r2, sl
 801c714:	d107      	bne.n	801c726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c716:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801c71a:	455a      	cmp	r2, fp
 801c71c:	d103      	bne.n	801c726 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801c71e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801c722:	454a      	cmp	r2, r9
 801c724:	d06d      	beq.n	801c802 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c726:	f1bb 0f00 	cmp.w	fp, #0
 801c72a:	dd65      	ble.n	801c7f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c72c:	f1b9 0f00 	cmp.w	r9, #0
 801c730:	dd62      	ble.n	801c7f8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801c732:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801c736:	fa1f f08a 	uxth.w	r0, sl
 801c73a:	4552      	cmp	r2, sl
 801c73c:	9000      	str	r0, [sp, #0]
 801c73e:	da12      	bge.n	801c766 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 801c740:	9301      	str	r3, [sp, #4]
 801c742:	9b00      	ldr	r3, [sp, #0]
 801c744:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c748:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c74c:	1a9a      	subs	r2, r3, r2
 801c74e:	f8ad 1010 	strh.w	r1, [sp, #16]
 801c752:	4631      	mov	r1, r6
 801c754:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c758:	4640      	mov	r0, r8
 801c75a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801c75e:	69ea      	ldr	r2, [r5, #28]
 801c760:	f7ff ff7a 	bl	801c658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c764:	9b01      	ldr	r3, [sp, #4]
 801c766:	f9b4 2000 	ldrsh.w	r2, [r4]
 801c76a:	b29f      	uxth	r7, r3
 801c76c:	429a      	cmp	r2, r3
 801c76e:	da0d      	bge.n	801c78c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 801c770:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c774:	1aba      	subs	r2, r7, r2
 801c776:	f8ad a012 	strh.w	sl, [sp, #18]
 801c77a:	4631      	mov	r1, r6
 801c77c:	f8ad 2014 	strh.w	r2, [sp, #20]
 801c780:	4640      	mov	r0, r8
 801c782:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c786:	69ea      	ldr	r2, [r5, #28]
 801c788:	f7ff ff66 	bl	801c658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c78c:	8822      	ldrh	r2, [r4, #0]
 801c78e:	445f      	add	r7, fp
 801c790:	88a3      	ldrh	r3, [r4, #4]
 801c792:	b2bf      	uxth	r7, r7
 801c794:	4413      	add	r3, r2
 801c796:	b23a      	sxth	r2, r7
 801c798:	b29b      	uxth	r3, r3
 801c79a:	b219      	sxth	r1, r3
 801c79c:	4291      	cmp	r1, r2
 801c79e:	dd0d      	ble.n	801c7bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 801c7a0:	1bdb      	subs	r3, r3, r7
 801c7a2:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c7a6:	f8ad a012 	strh.w	sl, [sp, #18]
 801c7aa:	4631      	mov	r1, r6
 801c7ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 801c7b0:	4640      	mov	r0, r8
 801c7b2:	f8ad 9016 	strh.w	r9, [sp, #22]
 801c7b6:	69ea      	ldr	r2, [r5, #28]
 801c7b8:	f7ff ff4e 	bl	801c658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c7bc:	88e2      	ldrh	r2, [r4, #6]
 801c7be:	8863      	ldrh	r3, [r4, #2]
 801c7c0:	4413      	add	r3, r2
 801c7c2:	9a00      	ldr	r2, [sp, #0]
 801c7c4:	444a      	add	r2, r9
 801c7c6:	b29b      	uxth	r3, r3
 801c7c8:	fa1f f982 	uxth.w	r9, r2
 801c7cc:	b219      	sxth	r1, r3
 801c7ce:	fa0f f289 	sxth.w	r2, r9
 801c7d2:	428a      	cmp	r2, r1
 801c7d4:	da15      	bge.n	801c802 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801c7d6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801c7da:	eba3 0309 	sub.w	r3, r3, r9
 801c7de:	f9b4 0000 	ldrsh.w	r0, [r4]
 801c7e2:	f8ad 1014 	strh.w	r1, [sp, #20]
 801c7e6:	4631      	mov	r1, r6
 801c7e8:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c7ec:	f8ad 2012 	strh.w	r2, [sp, #18]
 801c7f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 801c7f4:	69ea      	ldr	r2, [r5, #28]
 801c7f6:	e001      	b.n	801c7fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801c7f8:	69ea      	ldr	r2, [r5, #28]
 801c7fa:	4621      	mov	r1, r4
 801c7fc:	4640      	mov	r0, r8
 801c7fe:	f7ff ff2b 	bl	801c658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c802:	4628      	mov	r0, r5
 801c804:	f7ff fe94 	bl	801c530 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801c808:	6861      	ldr	r1, [r4, #4]
 801c80a:	4602      	mov	r2, r0
 801c80c:	4633      	mov	r3, r6
 801c80e:	6820      	ldr	r0, [r4, #0]
 801c810:	c303      	stmia	r3!, {r0, r1}
 801c812:	4611      	mov	r1, r2
 801c814:	4630      	mov	r0, r6
 801c816:	f7f9 fe6d 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801c81a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 801c81e:	2b00      	cmp	r3, #0
 801c820:	f77f af33 	ble.w	801c68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c824:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801c828:	2b00      	cmp	r3, #0
 801c82a:	f77f af2e 	ble.w	801c68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801c82e:	4628      	mov	r0, r5
 801c830:	f7ff fe9a 	bl	801c568 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801c834:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801c838:	1a18      	subs	r0, r3, r0
 801c83a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801c83e:	4628      	mov	r0, r5
 801c840:	f7ff fea6 	bl	801c590 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801c844:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c848:	4631      	mov	r1, r6
 801c84a:	1a18      	subs	r0, r3, r0
 801c84c:	f8ad 0012 	strh.w	r0, [sp, #18]
 801c850:	4628      	mov	r0, r5
 801c852:	682b      	ldr	r3, [r5, #0]
 801c854:	689b      	ldr	r3, [r3, #8]
 801c856:	4798      	blx	r3
 801c858:	e717      	b.n	801c68a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801c85a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801c85a:	b570      	push	{r4, r5, r6, lr}
 801c85c:	1d06      	adds	r6, r0, #4
 801c85e:	b086      	sub	sp, #24
 801c860:	460c      	mov	r4, r1
 801c862:	2300      	movs	r3, #0
 801c864:	4631      	mov	r1, r6
 801c866:	4605      	mov	r5, r0
 801c868:	a802      	add	r0, sp, #8
 801c86a:	9301      	str	r3, [sp, #4]
 801c86c:	f7ff fbdc 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c870:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c874:	8822      	ldrh	r2, [r4, #0]
 801c876:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801c87a:	1ad2      	subs	r2, r2, r3
 801c87c:	8863      	ldrh	r3, [r4, #2]
 801c87e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801c882:	1a5b      	subs	r3, r3, r1
 801c884:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801c888:	f8ad 2010 	strh.w	r2, [sp, #16]
 801c88c:	aa01      	add	r2, sp, #4
 801c88e:	f8ad 0014 	strh.w	r0, [sp, #20]
 801c892:	4630      	mov	r0, r6
 801c894:	f8ad 1016 	strh.w	r1, [sp, #22]
 801c898:	a904      	add	r1, sp, #16
 801c89a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801c89e:	f7f9 ff01 	bl	80166a4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801c8a2:	9a01      	ldr	r2, [sp, #4]
 801c8a4:	b11a      	cbz	r2, 801c8ae <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801c8a6:	4621      	mov	r1, r4
 801c8a8:	4628      	mov	r0, r5
 801c8aa:	f7ff fed5 	bl	801c658 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801c8ae:	b006      	add	sp, #24
 801c8b0:	bd70      	pop	{r4, r5, r6, pc}

0801c8b2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801c8b2:	4602      	mov	r2, r0
 801c8b4:	b530      	push	{r4, r5, lr}
 801c8b6:	4604      	mov	r4, r0
 801c8b8:	b085      	sub	sp, #20
 801c8ba:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801c8be:	460d      	mov	r5, r1
 801c8c0:	466b      	mov	r3, sp
 801c8c2:	6851      	ldr	r1, [r2, #4]
 801c8c4:	c303      	stmia	r3!, {r0, r1}
 801c8c6:	4629      	mov	r1, r5
 801c8c8:	4668      	mov	r0, sp
 801c8ca:	f7f9 fe13 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 801c8ce:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801c8d2:	b12b      	cbz	r3, 801c8e0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 801c8d4:	4669      	mov	r1, sp
 801c8d6:	4620      	mov	r0, r4
 801c8d8:	f7ff ffbf 	bl	801c85a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 801c8dc:	b005      	add	sp, #20
 801c8de:	bd30      	pop	{r4, r5, pc}
 801c8e0:	3404      	adds	r4, #4
 801c8e2:	a802      	add	r0, sp, #8
 801c8e4:	4621      	mov	r1, r4
 801c8e6:	f7ff fb9f 	bl	801c028 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801c8ea:	f8bd 3000 	ldrh.w	r3, [sp]
 801c8ee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801c8f2:	4669      	mov	r1, sp
 801c8f4:	4620      	mov	r0, r4
 801c8f6:	1a9b      	subs	r3, r3, r2
 801c8f8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c8fc:	f8ad 3000 	strh.w	r3, [sp]
 801c900:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801c904:	1a9b      	subs	r3, r3, r2
 801c906:	f8ad 3002 	strh.w	r3, [sp, #2]
 801c90a:	f7f9 fe92 	bl	8016632 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801c90e:	e7e5      	b.n	801c8dc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

0801c910 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801c910:	460b      	mov	r3, r1
 801c912:	680a      	ldr	r2, [r1, #0]
 801c914:	1d01      	adds	r1, r0, #4
 801c916:	6992      	ldr	r2, [r2, #24]
 801c918:	4618      	mov	r0, r3
 801c91a:	4710      	bx	r2

0801c91c <_ZN8touchgfx12TextProviderC1Ev>:
 801c91c:	b538      	push	{r3, r4, r5, lr}
 801c91e:	2500      	movs	r5, #0
 801c920:	2302      	movs	r3, #2
 801c922:	4604      	mov	r4, r0
 801c924:	220e      	movs	r2, #14
 801c926:	7403      	strb	r3, [r0, #16]
 801c928:	4629      	mov	r1, r5
 801c92a:	6145      	str	r5, [r0, #20]
 801c92c:	7605      	strb	r5, [r0, #24]
 801c92e:	83c5      	strh	r5, [r0, #30]
 801c930:	8405      	strh	r5, [r0, #32]
 801c932:	86c5      	strh	r5, [r0, #54]	; 0x36
 801c934:	8705      	strh	r5, [r0, #56]	; 0x38
 801c936:	87c5      	strh	r5, [r0, #62]	; 0x3e
 801c938:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801c93c:	e9c0 5500 	strd	r5, r5, [r0]
 801c940:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 801c944:	304c      	adds	r0, #76	; 0x4c
 801c946:	f00d fa8f 	bl	8029e68 <memset>
 801c94a:	2301      	movs	r3, #1
 801c94c:	4620      	mov	r0, r4
 801c94e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 801c952:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801c956:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801c95a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801c95e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 801c962:	f7f5 fafb 	bl	8011f5c <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801c966:	4620      	mov	r0, r4
 801c968:	bd38      	pop	{r3, r4, r5, pc}

0801c96a <_ZN8touchgfx12TextProvider11endOfStringEv>:
 801c96a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801c96c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801c970:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 801c972:	fab0 f080 	clz	r0, r0
 801c976:	0940      	lsrs	r0, r0, #5
 801c978:	4770      	bx	lr

0801c97a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801c97a:	b530      	push	{r4, r5, lr}
 801c97c:	2500      	movs	r5, #0
 801c97e:	2401      	movs	r4, #1
 801c980:	6843      	ldr	r3, [r0, #4]
 801c982:	b913      	cbnz	r3, 801c98a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801c984:	6803      	ldr	r3, [r0, #0]
 801c986:	b313      	cbz	r3, 801c9ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c988:	6043      	str	r3, [r0, #4]
 801c98a:	7e03      	ldrb	r3, [r0, #24]
 801c98c:	b143      	cbz	r3, 801c9a0 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801c98e:	6943      	ldr	r3, [r0, #20]
 801c990:	b12b      	cbz	r3, 801c99e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c992:	881a      	ldrh	r2, [r3, #0]
 801c994:	b11a      	cbz	r2, 801c99e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801c996:	1c9a      	adds	r2, r3, #2
 801c998:	6142      	str	r2, [r0, #20]
 801c99a:	8818      	ldrh	r0, [r3, #0]
 801c99c:	bd30      	pop	{r4, r5, pc}
 801c99e:	7605      	strb	r5, [r0, #24]
 801c9a0:	6843      	ldr	r3, [r0, #4]
 801c9a2:	8819      	ldrh	r1, [r3, #0]
 801c9a4:	b199      	cbz	r1, 801c9ce <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801c9a6:	1c9a      	adds	r2, r3, #2
 801c9a8:	2902      	cmp	r1, #2
 801c9aa:	6042      	str	r2, [r0, #4]
 801c9ac:	d1f5      	bne.n	801c99a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801c9ae:	7c03      	ldrb	r3, [r0, #16]
 801c9b0:	2b01      	cmp	r3, #1
 801c9b2:	d8e5      	bhi.n	801c980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c9b4:	1c5a      	adds	r2, r3, #1
 801c9b6:	3302      	adds	r3, #2
 801c9b8:	7402      	strb	r2, [r0, #16]
 801c9ba:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801c9be:	6143      	str	r3, [r0, #20]
 801c9c0:	2b00      	cmp	r3, #0
 801c9c2:	d0dd      	beq.n	801c980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c9c4:	881b      	ldrh	r3, [r3, #0]
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	d0da      	beq.n	801c980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c9ca:	7604      	strb	r4, [r0, #24]
 801c9cc:	e7d8      	b.n	801c980 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801c9ce:	2000      	movs	r0, #0
 801c9d0:	e7e4      	b.n	801c99c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

0801c9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 801c9d2:	6001      	str	r1, [r0, #0]
 801c9d4:	2100      	movs	r1, #0
 801c9d6:	b430      	push	{r4, r5}
 801c9d8:	6041      	str	r1, [r0, #4]
 801c9da:	6815      	ldr	r5, [r2, #0]
 801c9dc:	6085      	str	r5, [r0, #8]
 801c9de:	6852      	ldr	r2, [r2, #4]
 801c9e0:	6443      	str	r3, [r0, #68]	; 0x44
 801c9e2:	9b02      	ldr	r3, [sp, #8]
 801c9e4:	60c2      	str	r2, [r0, #12]
 801c9e6:	7401      	strb	r1, [r0, #16]
 801c9e8:	6141      	str	r1, [r0, #20]
 801c9ea:	7601      	strb	r1, [r0, #24]
 801c9ec:	8701      	strh	r1, [r0, #56]	; 0x38
 801c9ee:	8401      	strh	r1, [r0, #32]
 801c9f0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801c9f4:	6483      	str	r3, [r0, #72]	; 0x48
 801c9f6:	bc30      	pop	{r4, r5}
 801c9f8:	f7f5 bab0 	b.w	8011f5c <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801c9fc <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 801c9fc:	b408      	push	{r3}
 801c9fe:	b510      	push	{r4, lr}
 801ca00:	b085      	sub	sp, #20
 801ca02:	ac07      	add	r4, sp, #28
 801ca04:	f854 3b04 	ldr.w	r3, [r4], #4
 801ca08:	9300      	str	r3, [sp, #0]
 801ca0a:	4613      	mov	r3, r2
 801ca0c:	4622      	mov	r2, r4
 801ca0e:	9403      	str	r4, [sp, #12]
 801ca10:	f7ff ffdf 	bl	801c9d2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801ca14:	b005      	add	sp, #20
 801ca16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ca1a:	b001      	add	sp, #4
 801ca1c:	4770      	bx	lr

0801ca1e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 801ca1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca20:	4605      	mov	r5, r0
 801ca22:	4608      	mov	r0, r1
 801ca24:	b1f1      	cbz	r1, 801ca64 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 801ca26:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 801ca2a:	460b      	mov	r3, r1
 801ca2c:	f101 0708 	add.w	r7, r1, #8
 801ca30:	4622      	mov	r2, r4
 801ca32:	6818      	ldr	r0, [r3, #0]
 801ca34:	3308      	adds	r3, #8
 801ca36:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801ca3a:	4626      	mov	r6, r4
 801ca3c:	42bb      	cmp	r3, r7
 801ca3e:	c603      	stmia	r6!, {r0, r1}
 801ca40:	4634      	mov	r4, r6
 801ca42:	d1f6      	bne.n	801ca32 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801ca44:	6818      	ldr	r0, [r3, #0]
 801ca46:	6030      	str	r0, [r6, #0]
 801ca48:	4610      	mov	r0, r2
 801ca4a:	889b      	ldrh	r3, [r3, #4]
 801ca4c:	80b3      	strh	r3, [r6, #4]
 801ca4e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801ca52:	015b      	lsls	r3, r3, #5
 801ca54:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801ca58:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 801ca5c:	430b      	orrs	r3, r1
 801ca5e:	425b      	negs	r3, r3
 801ca60:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 801ca64:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801ca66 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801ca66:	b538      	push	{r3, r4, r5, lr}
 801ca68:	460c      	mov	r4, r1
 801ca6a:	6811      	ldr	r1, [r2, #0]
 801ca6c:	4610      	mov	r0, r2
 801ca6e:	68cd      	ldr	r5, [r1, #12]
 801ca70:	4619      	mov	r1, r3
 801ca72:	47a8      	blx	r5
 801ca74:	2800      	cmp	r0, #0
 801ca76:	bf08      	it	eq
 801ca78:	4620      	moveq	r0, r4
 801ca7a:	bd38      	pop	{r3, r4, r5, pc}

0801ca7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801ca7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ca7e:	4604      	mov	r4, r0
 801ca80:	4615      	mov	r5, r2
 801ca82:	4608      	mov	r0, r1
 801ca84:	b93a      	cbnz	r2, 801ca96 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 801ca86:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801ca8a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801ca8e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801ca92:	4628      	mov	r0, r5
 801ca94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ca96:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801ca9a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 801ca9e:	8893      	ldrh	r3, [r2, #4]
 801caa0:	ea4f 160c 	mov.w	r6, ip, lsl #4
 801caa4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801caa8:	79ee      	ldrb	r6, [r5, #7]
 801caaa:	4316      	orrs	r6, r2
 801caac:	19da      	adds	r2, r3, r7
 801caae:	b291      	uxth	r1, r2
 801cab0:	b2b7      	uxth	r7, r6
 801cab2:	291d      	cmp	r1, #29
 801cab4:	d87b      	bhi.n	801cbae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801cab6:	2201      	movs	r2, #1
 801cab8:	10f6      	asrs	r6, r6, #3
 801caba:	408a      	lsls	r2, r1
 801cabc:	4974      	ldr	r1, [pc, #464]	; (801cc90 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
 801cabe:	420a      	tst	r2, r1
 801cac0:	d12e      	bne.n	801cb20 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801cac2:	f412 7f60 	tst.w	r2, #896	; 0x380
 801cac6:	d072      	beq.n	801cbae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
 801cac8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 801cacc:	462b      	mov	r3, r5
 801cace:	f105 0e08 	add.w	lr, r5, #8
 801cad2:	4615      	mov	r5, r2
 801cad4:	6818      	ldr	r0, [r3, #0]
 801cad6:	3308      	adds	r3, #8
 801cad8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801cadc:	4694      	mov	ip, r2
 801cade:	4573      	cmp	r3, lr
 801cae0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801cae4:	4662      	mov	r2, ip
 801cae6:	d1f5      	bne.n	801cad4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 801cae8:	6818      	ldr	r0, [r3, #0]
 801caea:	f8cc 0000 	str.w	r0, [ip]
 801caee:	889b      	ldrh	r3, [r3, #4]
 801caf0:	f8ac 3004 	strh.w	r3, [ip, #4]
 801caf4:	b2b3      	uxth	r3, r6
 801caf6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 801cafa:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 801cafe:	1aca      	subs	r2, r1, r3
 801cb00:	1bcf      	subs	r7, r1, r7
 801cb02:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 801cb06:	b292      	uxth	r2, r2
 801cb08:	1afb      	subs	r3, r7, r3
 801cb0a:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 801cb0e:	10d2      	asrs	r2, r2, #3
 801cb10:	f002 0260 	and.w	r2, r2, #96	; 0x60
 801cb14:	4302      	orrs	r2, r0
 801cb16:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 801cb1a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801cb1e:	e7b8      	b.n	801ca92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801cb20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801cb22:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801cb26:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 801cb28:	f640 6333 	movw	r3, #3635	; 0xe33
 801cb2c:	4299      	cmp	r1, r3
 801cb2e:	d110      	bne.n	801cb52 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
 801cb30:	6803      	ldr	r3, [r0, #0]
 801cb32:	68db      	ldr	r3, [r3, #12]
 801cb34:	4798      	blx	r3
 801cb36:	7b41      	ldrb	r1, [r0, #13]
 801cb38:	00cb      	lsls	r3, r1, #3
 801cb3a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cb3e:	7a03      	ldrb	r3, [r0, #8]
 801cb40:	0648      	lsls	r0, r1, #25
 801cb42:	ea43 0302 	orr.w	r3, r3, r2
 801cb46:	bf44      	itt	mi
 801cb48:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cb4c:	b21b      	sxthmi	r3, r3
 801cb4e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cb52:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 801cb56:	462a      	mov	r2, r5
 801cb58:	f105 0c08 	add.w	ip, r5, #8
 801cb5c:	443b      	add	r3, r7
 801cb5e:	4433      	add	r3, r6
 801cb60:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801cb64:	b29b      	uxth	r3, r3
 801cb66:	4635      	mov	r5, r6
 801cb68:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cb6c:	6810      	ldr	r0, [r2, #0]
 801cb6e:	3208      	adds	r2, #8
 801cb70:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801cb74:	4637      	mov	r7, r6
 801cb76:	4562      	cmp	r2, ip
 801cb78:	c703      	stmia	r7!, {r0, r1}
 801cb7a:	463e      	mov	r6, r7
 801cb7c:	d1f6      	bne.n	801cb6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
 801cb7e:	6810      	ldr	r0, [r2, #0]
 801cb80:	6038      	str	r0, [r7, #0]
 801cb82:	8892      	ldrh	r2, [r2, #4]
 801cb84:	80ba      	strh	r2, [r7, #4]
 801cb86:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cb8a:	10db      	asrs	r3, r3, #3
 801cb8c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cb90:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cb94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cb98:	4313      	orrs	r3, r2
 801cb9a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801cb9e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cba2:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801cba6:	1a9b      	subs	r3, r3, r2
 801cba8:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 801cbac:	e771      	b.n	801ca92 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 801cbae:	f023 0204 	bic.w	r2, r3, #4
 801cbb2:	f640 611b 	movw	r1, #3611	; 0xe1b
 801cbb6:	428a      	cmp	r2, r1
 801cbb8:	d003      	beq.n	801cbc2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
 801cbba:	f640 621d 	movw	r2, #3613	; 0xe1d
 801cbbe:	4293      	cmp	r3, r2
 801cbc0:	d120      	bne.n	801cc04 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
 801cbc2:	3b01      	subs	r3, #1
 801cbc4:	4602      	mov	r2, r0
 801cbc6:	4629      	mov	r1, r5
 801cbc8:	4620      	mov	r0, r4
 801cbca:	b29b      	uxth	r3, r3
 801cbcc:	f7ff ff4b 	bl	801ca66 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801cbd0:	7b41      	ldrb	r1, [r0, #13]
 801cbd2:	00cb      	lsls	r3, r1, #3
 801cbd4:	0649      	lsls	r1, r1, #25
 801cbd6:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cbda:	7a03      	ldrb	r3, [r0, #8]
 801cbdc:	ea43 0302 	orr.w	r3, r3, r2
 801cbe0:	bf44      	itt	mi
 801cbe2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cbe6:	b21b      	sxthmi	r3, r3
 801cbe8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cbec:	7b6b      	ldrb	r3, [r5, #13]
 801cbee:	7aaa      	ldrb	r2, [r5, #10]
 801cbf0:	005b      	lsls	r3, r3, #1
 801cbf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cbf6:	4313      	orrs	r3, r2
 801cbf8:	115a      	asrs	r2, r3, #5
 801cbfa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 801cbfe:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801cc02:	e035      	b.n	801cc70 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
 801cc04:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 801cc08:	f01c 0f40 	tst.w	ip, #64	; 0x40
 801cc0c:	f402 7180 	and.w	r1, r2, #256	; 0x100
 801cc10:	7a2a      	ldrb	r2, [r5, #8]
 801cc12:	ea42 0201 	orr.w	r2, r2, r1
 801cc16:	f640 6109 	movw	r1, #3593	; 0xe09
 801cc1a:	bf1c      	itt	ne
 801cc1c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 801cc20:	b212      	sxthne	r2, r2
 801cc22:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 801cc26:	f023 0210 	bic.w	r2, r3, #16
 801cc2a:	428a      	cmp	r2, r1
 801cc2c:	d003      	beq.n	801cc36 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801cc2e:	f640 6213 	movw	r2, #3603	; 0xe13
 801cc32:	4293      	cmp	r3, r2
 801cc34:	d129      	bne.n	801cc8a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
 801cc36:	7b6e      	ldrb	r6, [r5, #13]
 801cc38:	4629      	mov	r1, r5
 801cc3a:	0076      	lsls	r6, r6, #1
 801cc3c:	f406 7280 	and.w	r2, r6, #256	; 0x100
 801cc40:	7aae      	ldrb	r6, [r5, #10]
 801cc42:	4316      	orrs	r6, r2
 801cc44:	f640 6213 	movw	r2, #3603	; 0xe13
 801cc48:	4293      	cmp	r3, r2
 801cc4a:	4602      	mov	r2, r0
 801cc4c:	4620      	mov	r0, r4
 801cc4e:	bf16      	itet	ne
 801cc50:	f103 33ff 	addne.w	r3, r3, #4294967295
 801cc54:	f640 630c 	movweq	r3, #3596	; 0xe0c
 801cc58:	b29b      	uxthne	r3, r3
 801cc5a:	f7ff ff04 	bl	801ca66 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801cc5e:	7b43      	ldrb	r3, [r0, #13]
 801cc60:	7a82      	ldrb	r2, [r0, #10]
 801cc62:	005b      	lsls	r3, r3, #1
 801cc64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cc68:	4313      	orrs	r3, r2
 801cc6a:	1af6      	subs	r6, r6, r3
 801cc6c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801cc70:	7b69      	ldrb	r1, [r5, #13]
 801cc72:	00cb      	lsls	r3, r1, #3
 801cc74:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cc78:	7a2b      	ldrb	r3, [r5, #8]
 801cc7a:	4313      	orrs	r3, r2
 801cc7c:	064a      	lsls	r2, r1, #25
 801cc7e:	bf44      	itt	mi
 801cc80:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cc84:	b21b      	sxthmi	r3, r3
 801cc86:	1bdb      	subs	r3, r3, r7
 801cc88:	e747      	b.n	801cb1a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 801cc8a:	2300      	movs	r3, #0
 801cc8c:	e7b7      	b.n	801cbfe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
 801cc8e:	bf00      	nop
 801cc90:	3fc00079 	.word	0x3fc00079

0801cc94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801cc94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801cc98:	4604      	mov	r4, r0
 801cc9a:	b942      	cbnz	r2, 801ccae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 801cc9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801cca0:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801cca4:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 801cca8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 801ccac:	e047      	b.n	801cd3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801ccae:	7b51      	ldrb	r1, [r2, #13]
 801ccb0:	8893      	ldrh	r3, [r2, #4]
 801ccb2:	010d      	lsls	r5, r1, #4
 801ccb4:	f405 7080 	and.w	r0, r5, #256	; 0x100
 801ccb8:	79d5      	ldrb	r5, [r2, #7]
 801ccba:	4305      	orrs	r5, r0
 801ccbc:	2d04      	cmp	r5, #4
 801ccbe:	bfcc      	ite	gt
 801ccc0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801ccc4:	f04f 0e01 	movle.w	lr, #1
 801ccc8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 801cccc:	f200 80ab 	bhi.w	801ce26 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 801ccd0:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801ccd4:	4283      	cmp	r3, r0
 801ccd6:	d216      	bcs.n	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ccd8:	f240 605b 	movw	r0, #1627	; 0x65b
 801ccdc:	4283      	cmp	r3, r0
 801ccde:	d859      	bhi.n	801cd94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 801cce0:	f240 6057 	movw	r0, #1623	; 0x657
 801cce4:	4283      	cmp	r3, r0
 801cce6:	d20e      	bcs.n	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cce8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801ccec:	d24a      	bcs.n	801cd84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 801ccee:	f240 604e 	movw	r0, #1614	; 0x64e
 801ccf2:	4283      	cmp	r3, r0
 801ccf4:	d207      	bcs.n	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ccf6:	f240 601a 	movw	r0, #1562	; 0x61a
 801ccfa:	4283      	cmp	r3, r0
 801ccfc:	d02a      	beq.n	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ccfe:	d821      	bhi.n	801cd44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 801cd00:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 801cd04:	d35b      	bcc.n	801cdbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801cd06:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 801cd0a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cd0e:	f040 80d0 	bne.w	801ceb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801cd12:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 801cd16:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cd1a:	f040 80ca 	bne.w	801ceb2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801cd1e:	00cb      	lsls	r3, r1, #3
 801cd20:	0649      	lsls	r1, r1, #25
 801cd22:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cd26:	7a13      	ldrb	r3, [r2, #8]
 801cd28:	ea43 0300 	orr.w	r3, r3, r0
 801cd2c:	bf44      	itt	mi
 801cd2e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cd32:	b21b      	sxthmi	r3, r3
 801cd34:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cd38:	1b5d      	subs	r5, r3, r5
 801cd3a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cd3e:	4610      	mov	r0, r2
 801cd40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cd44:	f240 604b 	movw	r0, #1611	; 0x64b
 801cd48:	4283      	cmp	r3, r0
 801cd4a:	d338      	bcc.n	801cdbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801cd4c:	f240 604c 	movw	r0, #1612	; 0x64c
 801cd50:	4283      	cmp	r3, r0
 801cd52:	d9d8      	bls.n	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cd54:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 801cd58:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 801cd5c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cd60:	f040 80f3 	bne.w	801cf4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801cd64:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cd68:	f040 80ef 	bne.w	801cf4a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801cd6c:	00cb      	lsls	r3, r1, #3
 801cd6e:	064e      	lsls	r6, r1, #25
 801cd70:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cd74:	7a13      	ldrb	r3, [r2, #8]
 801cd76:	ea43 0300 	orr.w	r3, r3, r0
 801cd7a:	bf44      	itt	mi
 801cd7c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cd80:	b21b      	sxthmi	r3, r3
 801cd82:	e7d9      	b.n	801cd38 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801cd84:	f240 6054 	movw	r0, #1620	; 0x654
 801cd88:	4283      	cmp	r3, r0
 801cd8a:	d8e3      	bhi.n	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cd8c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 801cd90:	d9e0      	bls.n	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cd92:	e7b8      	b.n	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cd94:	f240 6074 	movw	r0, #1652	; 0x674
 801cd98:	4283      	cmp	r3, r0
 801cd9a:	d0b4      	beq.n	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cd9c:	d82d      	bhi.n	801cdfa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801cd9e:	f240 605e 	movw	r0, #1630	; 0x65e
 801cda2:	4283      	cmp	r3, r0
 801cda4:	d804      	bhi.n	801cdb0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801cda6:	f240 605d 	movw	r0, #1629	; 0x65d
 801cdaa:	4283      	cmp	r3, r0
 801cdac:	d3d2      	bcc.n	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cdae:	e7aa      	b.n	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cdb0:	f240 605f 	movw	r0, #1631	; 0x65f
 801cdb4:	4283      	cmp	r3, r0
 801cdb6:	d0cd      	beq.n	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801cdb8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 801cdbc:	d0a3      	beq.n	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cdbe:	00cb      	lsls	r3, r1, #3
 801cdc0:	0649      	lsls	r1, r1, #25
 801cdc2:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801cdc6:	7a13      	ldrb	r3, [r2, #8]
 801cdc8:	ea43 0300 	orr.w	r3, r3, r0
 801cdcc:	bf44      	itt	mi
 801cdce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cdd2:	b21b      	sxthmi	r3, r3
 801cdd4:	1b5d      	subs	r5, r3, r5
 801cdd6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cdda:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cdde:	7b53      	ldrb	r3, [r2, #13]
 801cde0:	015b      	lsls	r3, r3, #5
 801cde2:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801cde6:	7993      	ldrb	r3, [r2, #6]
 801cde8:	430b      	orrs	r3, r1
 801cdea:	2105      	movs	r1, #5
 801cdec:	005b      	lsls	r3, r3, #1
 801cdee:	fb93 f3f1 	sdiv	r3, r3, r1
 801cdf2:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801cdf6:	440b      	add	r3, r1
 801cdf8:	e756      	b.n	801cca8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801cdfa:	f240 60e2 	movw	r0, #1762	; 0x6e2
 801cdfe:	4283      	cmp	r3, r0
 801ce00:	d809      	bhi.n	801ce16 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801ce02:	f240 60df 	movw	r0, #1759	; 0x6df
 801ce06:	4283      	cmp	r3, r0
 801ce08:	f4bf af7d 	bcs.w	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ce0c:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 801ce10:	2b05      	cmp	r3, #5
 801ce12:	d8d4      	bhi.n	801cdbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ce14:	e777      	b.n	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ce16:	f240 60e3 	movw	r0, #1763	; 0x6e3
 801ce1a:	4283      	cmp	r3, r0
 801ce1c:	d09a      	beq.n	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ce1e:	f240 60e4 	movw	r0, #1764	; 0x6e4
 801ce22:	4283      	cmp	r3, r0
 801ce24:	e7ca      	b.n	801cdbc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801ce26:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 801ce2a:	d22b      	bcs.n	801ce84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 801ce2c:	f640 00ed 	movw	r0, #2285	; 0x8ed
 801ce30:	4283      	cmp	r3, r0
 801ce32:	d28f      	bcs.n	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ce34:	f640 00e5 	movw	r0, #2277	; 0x8e5
 801ce38:	4283      	cmp	r3, r0
 801ce3a:	d816      	bhi.n	801ce6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 801ce3c:	f640 00e4 	movw	r0, #2276	; 0x8e4
 801ce40:	4283      	cmp	r3, r0
 801ce42:	f4bf af60 	bcs.w	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ce46:	f240 60ec 	movw	r0, #1772	; 0x6ec
 801ce4a:	4283      	cmp	r3, r0
 801ce4c:	d80a      	bhi.n	801ce64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 801ce4e:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801ce52:	4283      	cmp	r3, r0
 801ce54:	f4bf af57 	bcs.w	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ce58:	f240 60ea 	movw	r0, #1770	; 0x6ea
 801ce5c:	4283      	cmp	r3, r0
 801ce5e:	f43f af79 	beq.w	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ce62:	e7ac      	b.n	801cdbe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801ce64:	f240 60ed 	movw	r0, #1773	; 0x6ed
 801ce68:	e7f8      	b.n	801ce5c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801ce6a:	f640 00e8 	movw	r0, #2280	; 0x8e8
 801ce6e:	4283      	cmp	r3, r0
 801ce70:	d802      	bhi.n	801ce78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801ce72:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801ce76:	e798      	b.n	801cdaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801ce78:	f640 00e9 	movw	r0, #2281	; 0x8e9
 801ce7c:	4283      	cmp	r3, r0
 801ce7e:	f47f af42 	bne.w	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801ce82:	e767      	b.n	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ce84:	f640 00f6 	movw	r0, #2294	; 0x8f6
 801ce88:	4283      	cmp	r3, r0
 801ce8a:	f43f af63 	beq.w	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ce8e:	d802      	bhi.n	801ce96 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 801ce90:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801ce94:	e7f2      	b.n	801ce7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801ce96:	f640 00fa 	movw	r0, #2298	; 0x8fa
 801ce9a:	4283      	cmp	r3, r0
 801ce9c:	d805      	bhi.n	801ceaa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 801ce9e:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801cea2:	4283      	cmp	r3, r0
 801cea4:	f4ff af2f 	bcc.w	801cd06 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801cea8:	e754      	b.n	801cd54 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801ceaa:	f640 00fe 	movw	r0, #2302	; 0x8fe
 801ceae:	4283      	cmp	r3, r0
 801ceb0:	e7af      	b.n	801ce12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801ceb2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801ceb6:	4617      	mov	r7, r2
 801ceb8:	f102 0808 	add.w	r8, r2, #8
 801cebc:	4666      	mov	r6, ip
 801cebe:	6838      	ldr	r0, [r7, #0]
 801cec0:	3708      	adds	r7, #8
 801cec2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801cec6:	46e6      	mov	lr, ip
 801cec8:	4547      	cmp	r7, r8
 801ceca:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 801cece:	46f4      	mov	ip, lr
 801ced0:	d1f5      	bne.n	801cebe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801ced2:	6838      	ldr	r0, [r7, #0]
 801ced4:	f8ce 0000 	str.w	r0, [lr]
 801ced8:	88b9      	ldrh	r1, [r7, #4]
 801ceda:	f8ae 1004 	strh.w	r1, [lr, #4]
 801cede:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801cee2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cee6:	d009      	beq.n	801cefc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 801cee8:	7b51      	ldrb	r1, [r2, #13]
 801ceea:	7992      	ldrb	r2, [r2, #6]
 801ceec:	0149      	lsls	r1, r1, #5
 801ceee:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cef2:	4311      	orrs	r1, r2
 801cef4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cef8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801cefc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cf00:	b2ad      	uxth	r5, r5
 801cf02:	d00d      	beq.n	801cf20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801cf04:	442b      	add	r3, r5
 801cf06:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cf0a:	b29b      	uxth	r3, r3
 801cf0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cf10:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cf14:	10db      	asrs	r3, r3, #3
 801cf16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cf1a:	4313      	orrs	r3, r2
 801cf1c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cf20:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801cf24:	00cb      	lsls	r3, r1, #3
 801cf26:	064f      	lsls	r7, r1, #25
 801cf28:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cf2c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cf30:	ea43 0302 	orr.w	r3, r3, r2
 801cf34:	bf44      	itt	mi
 801cf36:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cf3a:	b21b      	sxthmi	r3, r3
 801cf3c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801cf40:	1b5b      	subs	r3, r3, r5
 801cf42:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 801cf46:	4632      	mov	r2, r6
 801cf48:	e6f9      	b.n	801cd3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 801cf4a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801cf4e:	4617      	mov	r7, r2
 801cf50:	f102 0908 	add.w	r9, r2, #8
 801cf54:	4666      	mov	r6, ip
 801cf56:	6838      	ldr	r0, [r7, #0]
 801cf58:	3708      	adds	r7, #8
 801cf5a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801cf5e:	46e0      	mov	r8, ip
 801cf60:	454f      	cmp	r7, r9
 801cf62:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 801cf66:	46c4      	mov	ip, r8
 801cf68:	d1f5      	bne.n	801cf56 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 801cf6a:	6838      	ldr	r0, [r7, #0]
 801cf6c:	f8c8 0000 	str.w	r0, [r8]
 801cf70:	88b9      	ldrh	r1, [r7, #4]
 801cf72:	f8a8 1004 	strh.w	r1, [r8, #4]
 801cf76:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801cf7a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801cf7e:	d009      	beq.n	801cf94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 801cf80:	7b51      	ldrb	r1, [r2, #13]
 801cf82:	7992      	ldrb	r2, [r2, #6]
 801cf84:	0149      	lsls	r1, r1, #5
 801cf86:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801cf8a:	4311      	orrs	r1, r2
 801cf8c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 801cf90:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 801cf94:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801cf98:	d00e      	beq.n	801cfb8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 801cf9a:	eba3 030e 	sub.w	r3, r3, lr
 801cf9e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 801cfa2:	b29b      	uxth	r3, r3
 801cfa4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801cfa8:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801cfac:	10db      	asrs	r3, r3, #3
 801cfae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cfb2:	4313      	orrs	r3, r2
 801cfb4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801cfb8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 801cfbc:	00cb      	lsls	r3, r1, #3
 801cfbe:	0648      	lsls	r0, r1, #25
 801cfc0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 801cfc4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801cfc8:	ea43 0302 	orr.w	r3, r3, r2
 801cfcc:	bf44      	itt	mi
 801cfce:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801cfd2:	b21b      	sxthmi	r3, r3
 801cfd4:	1b5d      	subs	r5, r3, r5
 801cfd6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801cfda:	e7b4      	b.n	801cf46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

0801cfdc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 801cfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfe0:	461e      	mov	r6, r3
 801cfe2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801cfe4:	4604      	mov	r4, r0
 801cfe6:	4617      	mov	r7, r2
 801cfe8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801cfec:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801cff0:	f7f4 ff0e 	bl	8011e10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801cff4:	4605      	mov	r5, r0
 801cff6:	b918      	cbnz	r0, 801d000 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 801cff8:	6030      	str	r0, [r6, #0]
 801cffa:	4628      	mov	r0, r5
 801cffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d000:	683b      	ldr	r3, [r7, #0]
 801d002:	4601      	mov	r1, r0
 801d004:	4638      	mov	r0, r7
 801d006:	68db      	ldr	r3, [r3, #12]
 801d008:	4798      	blx	r3
 801d00a:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d00e:	4602      	mov	r2, r0
 801d010:	6030      	str	r0, [r6, #0]
 801d012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d016:	d213      	bcs.n	801d040 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 801d018:	4643      	mov	r3, r8
 801d01a:	4639      	mov	r1, r7
 801d01c:	4620      	mov	r0, r4
 801d01e:	f7ff fe39 	bl	801cc94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d022:	6030      	str	r0, [r6, #0]
 801d024:	6833      	ldr	r3, [r6, #0]
 801d026:	b143      	cbz	r3, 801d03a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 801d028:	7b5a      	ldrb	r2, [r3, #13]
 801d02a:	7a9b      	ldrb	r3, [r3, #10]
 801d02c:	0052      	lsls	r2, r2, #1
 801d02e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d032:	4313      	orrs	r3, r2
 801d034:	bf0c      	ite	eq
 801d036:	2301      	moveq	r3, #1
 801d038:	2300      	movne	r3, #0
 801d03a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d03e:	e7dc      	b.n	801cffa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 801d040:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d044:	b29b      	uxth	r3, r3
 801d046:	2b7f      	cmp	r3, #127	; 0x7f
 801d048:	d804      	bhi.n	801d054 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 801d04a:	4639      	mov	r1, r7
 801d04c:	4620      	mov	r0, r4
 801d04e:	f7ff fd15 	bl	801ca7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d052:	e7e6      	b.n	801d022 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 801d054:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d058:	2b00      	cmp	r3, #0
 801d05a:	d0e3      	beq.n	801d024 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d05c:	f640 1302 	movw	r3, #2306	; 0x902
 801d060:	429d      	cmp	r5, r3
 801d062:	d1df      	bne.n	801d024 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 801d064:	4601      	mov	r1, r0
 801d066:	4620      	mov	r0, r4
 801d068:	f7ff fcd9 	bl	801ca1e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d06c:	e7d9      	b.n	801d022 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

0801d06e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 801d06e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d072:	461e      	mov	r6, r3
 801d074:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d076:	4604      	mov	r4, r0
 801d078:	4617      	mov	r7, r2
 801d07a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801d07e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d082:	f7f4 fec5 	bl	8011e10 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801d086:	4605      	mov	r5, r0
 801d088:	b918      	cbnz	r0, 801d092 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 801d08a:	6030      	str	r0, [r6, #0]
 801d08c:	4628      	mov	r0, r5
 801d08e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d092:	683b      	ldr	r3, [r7, #0]
 801d094:	4601      	mov	r1, r0
 801d096:	4638      	mov	r0, r7
 801d098:	f8d3 9008 	ldr.w	r9, [r3, #8]
 801d09c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801d0a0:	47c8      	blx	r9
 801d0a2:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 801d0a6:	4602      	mov	r2, r0
 801d0a8:	6030      	str	r0, [r6, #0]
 801d0aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d0ae:	d213      	bcs.n	801d0d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 801d0b0:	4643      	mov	r3, r8
 801d0b2:	4639      	mov	r1, r7
 801d0b4:	4620      	mov	r0, r4
 801d0b6:	f7ff fded 	bl	801cc94 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801d0ba:	6030      	str	r0, [r6, #0]
 801d0bc:	6833      	ldr	r3, [r6, #0]
 801d0be:	b143      	cbz	r3, 801d0d2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 801d0c0:	7b5a      	ldrb	r2, [r3, #13]
 801d0c2:	7a9b      	ldrb	r3, [r3, #10]
 801d0c4:	0052      	lsls	r2, r2, #1
 801d0c6:	f402 7280 	and.w	r2, r2, #256	; 0x100
 801d0ca:	4313      	orrs	r3, r2
 801d0cc:	bf0c      	ite	eq
 801d0ce:	2301      	moveq	r3, #1
 801d0d0:	2300      	movne	r3, #0
 801d0d2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 801d0d6:	e7d9      	b.n	801d08c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 801d0d8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 801d0dc:	b29b      	uxth	r3, r3
 801d0de:	2b7f      	cmp	r3, #127	; 0x7f
 801d0e0:	d804      	bhi.n	801d0ec <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801d0e2:	4639      	mov	r1, r7
 801d0e4:	4620      	mov	r0, r4
 801d0e6:	f7ff fcc9 	bl	801ca7c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 801d0ea:	e7e6      	b.n	801d0ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 801d0ec:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801d0f0:	2b00      	cmp	r3, #0
 801d0f2:	d0e3      	beq.n	801d0bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d0f4:	f640 1302 	movw	r3, #2306	; 0x902
 801d0f8:	429d      	cmp	r5, r3
 801d0fa:	d1df      	bne.n	801d0bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801d0fc:	4601      	mov	r1, r0
 801d0fe:	4620      	mov	r0, r4
 801d100:	f7ff fc8d 	bl	801ca1e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801d104:	e7d9      	b.n	801d0ba <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801d106 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801d106:	b510      	push	{r4, lr}
 801d108:	4604      	mov	r4, r0
 801d10a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801d10e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d110:	b1e1      	cbz	r1, 801d14c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d112:	2b0a      	cmp	r3, #10
 801d114:	d02d      	beq.n	801d172 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d116:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 801d118:	3901      	subs	r1, #1
 801d11a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801d11e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801d120:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 801d124:	1c51      	adds	r1, r2, #1
 801d126:	b289      	uxth	r1, r1
 801d128:	2901      	cmp	r1, #1
 801d12a:	bf8a      	itet	hi
 801d12c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801d130:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801d132:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801d134:	1c5a      	adds	r2, r3, #1
 801d136:	8722      	strh	r2, [r4, #56]	; 0x38
 801d138:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d13a:	4413      	add	r3, r2
 801d13c:	b29b      	uxth	r3, r3
 801d13e:	2b09      	cmp	r3, #9
 801d140:	bf88      	it	hi
 801d142:	3b0a      	subhi	r3, #10
 801d144:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d148:	8458      	strh	r0, [r3, #34]	; 0x22
 801d14a:	e7de      	b.n	801d10a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801d14c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d14e:	2b0a      	cmp	r3, #10
 801d150:	d00f      	beq.n	801d172 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801d152:	4620      	mov	r0, r4
 801d154:	f7ff fc11 	bl	801c97a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801d158:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801d15a:	1c5a      	adds	r2, r3, #1
 801d15c:	8722      	strh	r2, [r4, #56]	; 0x38
 801d15e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 801d160:	4413      	add	r3, r2
 801d162:	b29b      	uxth	r3, r3
 801d164:	2b09      	cmp	r3, #9
 801d166:	bf88      	it	hi
 801d168:	3b0a      	subhi	r3, #10
 801d16a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d16e:	8458      	strh	r0, [r3, #34]	; 0x22
 801d170:	e7ec      	b.n	801d14c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801d172:	bd10      	pop	{r4, pc}

0801d174 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801d174:	b538      	push	{r3, r4, r5, lr}
 801d176:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801d178:	4604      	mov	r4, r0
 801d17a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801d17e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 801d180:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 801d182:	3a01      	subs	r2, #1
 801d184:	8702      	strh	r2, [r0, #56]	; 0x38
 801d186:	1c5a      	adds	r2, r3, #1
 801d188:	b292      	uxth	r2, r2
 801d18a:	2a09      	cmp	r2, #9
 801d18c:	bf8a      	itet	hi
 801d18e:	3b09      	subhi	r3, #9
 801d190:	86c2      	strhls	r2, [r0, #54]	; 0x36
 801d192:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 801d194:	f7ff ffb7 	bl	801d106 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 801d198:	8c23      	ldrh	r3, [r4, #32]
 801d19a:	2b01      	cmp	r3, #1
 801d19c:	bf9c      	itt	ls
 801d19e:	3301      	addls	r3, #1
 801d1a0:	8423      	strhls	r3, [r4, #32]
 801d1a2:	8be3      	ldrh	r3, [r4, #30]
 801d1a4:	b90b      	cbnz	r3, 801d1aa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801d1a6:	2302      	movs	r3, #2
 801d1a8:	83e3      	strh	r3, [r4, #30]
 801d1aa:	8be3      	ldrh	r3, [r4, #30]
 801d1ac:	4628      	mov	r0, r5
 801d1ae:	3b01      	subs	r3, #1
 801d1b0:	b29b      	uxth	r3, r3
 801d1b2:	83e3      	strh	r3, [r4, #30]
 801d1b4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801d1b8:	8365      	strh	r5, [r4, #26]
 801d1ba:	bd38      	pop	{r3, r4, r5, pc}

0801d1bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 801d1bc:	428a      	cmp	r2, r1
 801d1be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d1c2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 801d1c4:	d932      	bls.n	801d22c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801d1c6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 801d1c8:	1a54      	subs	r4, r2, r1
 801d1ca:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 801d1ce:	19ee      	adds	r6, r5, r7
 801d1d0:	fa1f fe84 	uxth.w	lr, r4
 801d1d4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 801d1d8:	3e01      	subs	r6, #1
 801d1da:	b2b4      	uxth	r4, r6
 801d1dc:	eba4 090e 	sub.w	r9, r4, lr
 801d1e0:	fa1f f989 	uxth.w	r9, r9
 801d1e4:	2c09      	cmp	r4, #9
 801d1e6:	4626      	mov	r6, r4
 801d1e8:	bf88      	it	hi
 801d1ea:	f1a4 060a 	subhi.w	r6, r4, #10
 801d1ee:	f1bc 0f00 	cmp.w	ip, #0
 801d1f2:	f104 34ff 	add.w	r4, r4, #4294967295
 801d1f6:	bf08      	it	eq
 801d1f8:	f04f 0c02 	moveq.w	ip, #2
 801d1fc:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801d200:	b2a4      	uxth	r4, r4
 801d202:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d206:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 801d20a:	454c      	cmp	r4, r9
 801d20c:	fa1f fc8c 	uxth.w	ip, ip
 801d210:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801d214:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 801d218:	d1e4      	bne.n	801d1e4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 801d21a:	eba5 050e 	sub.w	r5, r5, lr
 801d21e:	eb0e 0408 	add.w	r4, lr, r8
 801d222:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801d226:	8705      	strh	r5, [r0, #56]	; 0x38
 801d228:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 801d22c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801d22e:	250a      	movs	r5, #10
 801d230:	1a64      	subs	r4, r4, r1
 801d232:	4439      	add	r1, r7
 801d234:	b289      	uxth	r1, r1
 801d236:	8704      	strh	r4, [r0, #56]	; 0x38
 801d238:	2909      	cmp	r1, #9
 801d23a:	bf88      	it	hi
 801d23c:	390a      	subhi	r1, #10
 801d23e:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d240:	b18a      	cbz	r2, 801d266 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 801d242:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 801d244:	3a01      	subs	r2, #1
 801d246:	3101      	adds	r1, #1
 801d248:	b292      	uxth	r2, r2
 801d24a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801d24e:	8701      	strh	r1, [r0, #56]	; 0x38
 801d250:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d252:	b901      	cbnz	r1, 801d256 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 801d254:	86c5      	strh	r5, [r0, #54]	; 0x36
 801d256:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 801d258:	3901      	subs	r1, #1
 801d25a:	b289      	uxth	r1, r1
 801d25c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801d25e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 801d262:	844c      	strh	r4, [r1, #34]	; 0x22
 801d264:	e7ec      	b.n	801d240 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 801d266:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d26a:	f7ff bf4c 	b.w	801d106 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801d26e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801d26e:	b570      	push	{r4, r5, r6, lr}
 801d270:	2500      	movs	r5, #0
 801d272:	4295      	cmp	r5, r2
 801d274:	d011      	beq.n	801d29a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 801d276:	8bc4      	ldrh	r4, [r0, #30]
 801d278:	f831 6b02 	ldrh.w	r6, [r1], #2
 801d27c:	4414      	add	r4, r2
 801d27e:	3c01      	subs	r4, #1
 801d280:	1b64      	subs	r4, r4, r5
 801d282:	b2a4      	uxth	r4, r4
 801d284:	2c01      	cmp	r4, #1
 801d286:	bf88      	it	hi
 801d288:	3c02      	subhi	r4, #2
 801d28a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 801d28e:	8b64      	ldrh	r4, [r4, #26]
 801d290:	42b4      	cmp	r4, r6
 801d292:	d117      	bne.n	801d2c4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 801d294:	3501      	adds	r5, #1
 801d296:	b2ad      	uxth	r5, r5
 801d298:	e7eb      	b.n	801d272 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 801d29a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801d29e:	2400      	movs	r4, #0
 801d2a0:	4413      	add	r3, r2
 801d2a2:	b2a2      	uxth	r2, r4
 801d2a4:	429a      	cmp	r2, r3
 801d2a6:	da0f      	bge.n	801d2c8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 801d2a8:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 801d2aa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 801d2ae:	3401      	adds	r4, #1
 801d2b0:	4432      	add	r2, r6
 801d2b2:	b292      	uxth	r2, r2
 801d2b4:	2a09      	cmp	r2, #9
 801d2b6:	bf88      	it	hi
 801d2b8:	3a0a      	subhi	r2, #10
 801d2ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801d2be:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 801d2c0:	42aa      	cmp	r2, r5
 801d2c2:	d0ee      	beq.n	801d2a2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801d2c4:	2000      	movs	r0, #0
 801d2c6:	bd70      	pop	{r4, r5, r6, pc}
 801d2c8:	2001      	movs	r0, #1
 801d2ca:	e7fc      	b.n	801d2c6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

0801d2cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 801d2cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2d0:	4605      	mov	r5, r0
 801d2d2:	4616      	mov	r6, r2
 801d2d4:	1c8c      	adds	r4, r1, #2
 801d2d6:	8809      	ldrh	r1, [r1, #0]
 801d2d8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 801d2dc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 801d2e0:	42b3      	cmp	r3, r6
 801d2e2:	d124      	bne.n	801d32e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801d2e4:	f3c1 2903 	ubfx	r9, r1, #8, #4
 801d2e8:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801d2ec:	f001 070f 	and.w	r7, r1, #15
 801d2f0:	4652      	mov	r2, sl
 801d2f2:	f8cd 8000 	str.w	r8, [sp]
 801d2f6:	464b      	mov	r3, r9
 801d2f8:	4621      	mov	r1, r4
 801d2fa:	4628      	mov	r0, r5
 801d2fc:	f7ff ffb7 	bl	801d26e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801d300:	4683      	mov	fp, r0
 801d302:	b168      	cbz	r0, 801d320 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801d304:	eb0a 0109 	add.w	r1, sl, r9
 801d308:	463a      	mov	r2, r7
 801d30a:	4628      	mov	r0, r5
 801d30c:	4441      	add	r1, r8
 801d30e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801d312:	4649      	mov	r1, r9
 801d314:	f7ff ff52 	bl	801d1bc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 801d318:	4658      	mov	r0, fp
 801d31a:	b003      	add	sp, #12
 801d31c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d320:	eb07 010a 	add.w	r1, r7, sl
 801d324:	4449      	add	r1, r9
 801d326:	4441      	add	r1, r8
 801d328:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801d32c:	e7d2      	b.n	801d2d4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801d32e:	f04f 0b00 	mov.w	fp, #0
 801d332:	e7f1      	b.n	801d318 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801d334 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801d334:	b570      	push	{r4, r5, r6, lr}
 801d336:	8810      	ldrh	r0, [r2, #0]
 801d338:	4298      	cmp	r0, r3
 801d33a:	d817      	bhi.n	801d36c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d33c:	1e48      	subs	r0, r1, #1
 801d33e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 801d342:	4298      	cmp	r0, r3
 801d344:	d312      	bcc.n	801d36c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d346:	2400      	movs	r4, #0
 801d348:	428c      	cmp	r4, r1
 801d34a:	d20f      	bcs.n	801d36c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801d34c:	1860      	adds	r0, r4, r1
 801d34e:	1040      	asrs	r0, r0, #1
 801d350:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 801d354:	0085      	lsls	r5, r0, #2
 801d356:	42b3      	cmp	r3, r6
 801d358:	d902      	bls.n	801d360 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 801d35a:	3001      	adds	r0, #1
 801d35c:	b284      	uxth	r4, r0
 801d35e:	e7f3      	b.n	801d348 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d360:	d201      	bcs.n	801d366 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 801d362:	b281      	uxth	r1, r0
 801d364:	e7f0      	b.n	801d348 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801d366:	442a      	add	r2, r5
 801d368:	8850      	ldrh	r0, [r2, #2]
 801d36a:	bd70      	pop	{r4, r5, r6, pc}
 801d36c:	2000      	movs	r0, #0
 801d36e:	e7fc      	b.n	801d36a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801d370 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801d370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d374:	6c45      	ldr	r5, [r0, #68]	; 0x44
 801d376:	4604      	mov	r4, r0
 801d378:	260b      	movs	r6, #11
 801d37a:	886f      	ldrh	r7, [r5, #2]
 801d37c:	087f      	lsrs	r7, r7, #1
 801d37e:	3e01      	subs	r6, #1
 801d380:	d013      	beq.n	801d3aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d382:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 801d384:	462a      	mov	r2, r5
 801d386:	4639      	mov	r1, r7
 801d388:	4620      	mov	r0, r4
 801d38a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801d38e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 801d392:	4643      	mov	r3, r8
 801d394:	f7ff ffce 	bl	801d334 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 801d398:	b138      	cbz	r0, 801d3aa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 801d39a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 801d39e:	4642      	mov	r2, r8
 801d3a0:	4620      	mov	r0, r4
 801d3a2:	f7ff ff93 	bl	801d2cc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801d3a6:	2800      	cmp	r0, #0
 801d3a8:	d1e9      	bne.n	801d37e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 801d3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801d3b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 801d3b0:	b570      	push	{r4, r5, r6, lr}
 801d3b2:	694a      	ldr	r2, [r1, #20]
 801d3b4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 801d3b6:	684b      	ldr	r3, [r1, #4]
 801d3b8:	1b54      	subs	r4, r2, r5
 801d3ba:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 801d3bc:	f000 8106 	beq.w	801d5cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 801d3c0:	1b9b      	subs	r3, r3, r6
 801d3c2:	d003      	beq.n	801d3cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d3c4:	4363      	muls	r3, r4
 801d3c6:	2210      	movs	r2, #16
 801d3c8:	fb93 f3f2 	sdiv	r3, r3, r2
 801d3cc:	680c      	ldr	r4, [r1, #0]
 801d3ce:	698a      	ldr	r2, [r1, #24]
 801d3d0:	1b65      	subs	r5, r4, r5
 801d3d2:	f000 80fd 	beq.w	801d5d0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801d3d6:	1b92      	subs	r2, r2, r6
 801d3d8:	d003      	beq.n	801d3e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d3da:	436a      	muls	r2, r5
 801d3dc:	2410      	movs	r4, #16
 801d3de:	fb92 f2f4 	sdiv	r2, r2, r4
 801d3e2:	1a9b      	subs	r3, r3, r2
 801d3e4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 801d60c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 801d3e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d3ec:	460a      	mov	r2, r1
 801d3ee:	ee07 3a90 	vmov	s15, r3
 801d3f2:	f100 040c 	add.w	r4, r0, #12
 801d3f6:	4603      	mov	r3, r0
 801d3f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d3fc:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d400:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801d404:	eeb1 6a43 	vneg.f32	s12, s6
 801d408:	edd2 7a02 	vldr	s15, [r2, #8]
 801d40c:	3214      	adds	r2, #20
 801d40e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801d412:	ece3 6a01 	vstmia	r3!, {s13}
 801d416:	429c      	cmp	r4, r3
 801d418:	ed52 7a02 	vldr	s15, [r2, #-8]
 801d41c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d420:	edc3 7a02 	vstr	s15, [r3, #8]
 801d424:	ed52 7a01 	vldr	s15, [r2, #-4]
 801d428:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d42c:	edc3 7a05 	vstr	s15, [r3, #20]
 801d430:	d1ea      	bne.n	801d408 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801d432:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d434:	698b      	ldr	r3, [r1, #24]
 801d436:	edd0 4a02 	vldr	s9, [r0, #8]
 801d43a:	1a9b      	subs	r3, r3, r2
 801d43c:	edd0 3a00 	vldr	s7, [r0]
 801d440:	edd0 6a01 	vldr	s13, [r0, #4]
 801d444:	ee07 3a90 	vmov	s15, r3
 801d448:	684b      	ldr	r3, [r1, #4]
 801d44a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 801d44e:	ed90 5a05 	vldr	s10, [r0, #20]
 801d452:	1a9b      	subs	r3, r3, r2
 801d454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d458:	ee73 4ae4 	vsub.f32	s9, s7, s9
 801d45c:	ed90 2a03 	vldr	s4, [r0, #12]
 801d460:	ee07 3a10 	vmov	s14, r3
 801d464:	edd0 5a04 	vldr	s11, [r0, #16]
 801d468:	ee67 7a84 	vmul.f32	s15, s15, s8
 801d46c:	ed90 1a07 	vldr	s2, [r0, #28]
 801d470:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d474:	edd0 2a06 	vldr	s5, [r0, #24]
 801d478:	ee75 5ac5 	vsub.f32	s11, s11, s10
 801d47c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 801d480:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d484:	ee32 5a45 	vsub.f32	s10, s4, s10
 801d488:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d48c:	ee67 7a83 	vmul.f32	s15, s15, s6
 801d490:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 801d494:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d496:	694a      	ldr	r2, [r1, #20]
 801d498:	1b13      	subs	r3, r2, r4
 801d49a:	ee07 3a10 	vmov	s14, r3
 801d49e:	680b      	ldr	r3, [r1, #0]
 801d4a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d4a4:	1b1b      	subs	r3, r3, r4
 801d4a6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d4aa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 801d4ae:	ee07 3a10 	vmov	s14, r3
 801d4b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d4b6:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d4ba:	eee6 4a87 	vfma.f32	s9, s13, s14
 801d4be:	ee64 4a86 	vmul.f32	s9, s9, s12
 801d4c2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 801d4c6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d4c8:	698b      	ldr	r3, [r1, #24]
 801d4ca:	1a9b      	subs	r3, r3, r2
 801d4cc:	ee06 3a90 	vmov	s13, r3
 801d4d0:	684b      	ldr	r3, [r1, #4]
 801d4d2:	1a9b      	subs	r3, r3, r2
 801d4d4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d4d8:	ee07 3a10 	vmov	s14, r3
 801d4dc:	ee66 6a84 	vmul.f32	s13, s13, s8
 801d4e0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d4e4:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801d4e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d4ec:	eee5 6a87 	vfma.f32	s13, s11, s14
 801d4f0:	ee66 6a83 	vmul.f32	s13, s13, s6
 801d4f4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 801d4f8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d4fa:	694a      	ldr	r2, [r1, #20]
 801d4fc:	1b13      	subs	r3, r2, r4
 801d4fe:	ee07 3a10 	vmov	s14, r3
 801d502:	680b      	ldr	r3, [r1, #0]
 801d504:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d508:	1b1b      	subs	r3, r3, r4
 801d50a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d50e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801d512:	ee07 3a10 	vmov	s14, r3
 801d516:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d51a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d51e:	eea5 5a87 	vfma.f32	s10, s11, s14
 801d522:	edd0 5a08 	vldr	s11, [r0, #32]
 801d526:	ee31 1a65 	vsub.f32	s2, s2, s11
 801d52a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801d52e:	ee25 5a06 	vmul.f32	s10, s10, s12
 801d532:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 801d536:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d538:	698b      	ldr	r3, [r1, #24]
 801d53a:	1a9b      	subs	r3, r3, r2
 801d53c:	ee07 3a10 	vmov	s14, r3
 801d540:	684b      	ldr	r3, [r1, #4]
 801d542:	1a9b      	subs	r3, r3, r2
 801d544:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d548:	ee01 3a90 	vmov	s3, r3
 801d54c:	ee27 7a04 	vmul.f32	s14, s14, s8
 801d550:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 801d554:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801d558:	ee61 1a84 	vmul.f32	s3, s3, s8
 801d55c:	eea1 7a21 	vfma.f32	s14, s2, s3
 801d560:	ee27 7a03 	vmul.f32	s14, s14, s6
 801d564:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d568:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801d56a:	694a      	ldr	r2, [r1, #20]
 801d56c:	1b13      	subs	r3, r2, r4
 801d56e:	ee03 3a10 	vmov	s6, r3
 801d572:	680b      	ldr	r3, [r1, #0]
 801d574:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d578:	1b1b      	subs	r3, r3, r4
 801d57a:	ee23 3a04 	vmul.f32	s6, s6, s8
 801d57e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801d582:	ee03 3a10 	vmov	s6, r3
 801d586:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 801d58a:	ee23 4a04 	vmul.f32	s8, s6, s8
 801d58e:	eee1 5a04 	vfma.f32	s11, s2, s8
 801d592:	ee25 6a86 	vmul.f32	s12, s11, s12
 801d596:	ee62 5a67 	vnmul.f32	s11, s4, s15
 801d59a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 801d59e:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801d5a2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801d5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5aa:	dd13      	ble.n	801d5d4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 801d5ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d5b0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801d5b4:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d5b6:	eee3 7a87 	vfma.f32	s15, s7, s14
 801d5ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801d5be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5c2:	dd15      	ble.n	801d5f0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801d5c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801d5c8:	6403      	str	r3, [r0, #64]	; 0x40
 801d5ca:	bd70      	pop	{r4, r5, r6, pc}
 801d5cc:	4623      	mov	r3, r4
 801d5ce:	e6fd      	b.n	801d3cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801d5d0:	462a      	mov	r2, r5
 801d5d2:	e706      	b.n	801d3e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801d5d4:	d502      	bpl.n	801d5dc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801d5d6:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d5da:	e7e9      	b.n	801d5b0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801d5dc:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801d5e0:	eea3 2a85 	vfma.f32	s4, s7, s10
 801d5e4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801d5e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d5ec:	dade      	bge.n	801d5ac <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801d5ee:	e7f2      	b.n	801d5d6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801d5f0:	d502      	bpl.n	801d5f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801d5f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 801d5f6:	e7e7      	b.n	801d5c8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801d5f8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801d5fc:	eee3 4a86 	vfma.f32	s9, s7, s12
 801d600:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801d604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d608:	dadc      	bge.n	801d5c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801d60a:	e7f2      	b.n	801d5f2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801d60c:	3d800000 	.word	0x3d800000

0801d610 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801d610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d614:	2714      	movs	r7, #20
 801d616:	435f      	muls	r7, r3
 801d618:	eb02 0c07 	add.w	ip, r2, r7
 801d61c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 801d620:	f115 0e0f 	adds.w	lr, r5, #15
 801d624:	f100 80a2 	bmi.w	801d76c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801d628:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801d62c:	9c08      	ldr	r4, [sp, #32]
 801d62e:	2614      	movs	r6, #20
 801d630:	f8c0 e014 	str.w	lr, [r0, #20]
 801d634:	4366      	muls	r6, r4
 801d636:	eb02 0806 	add.w	r8, r2, r6
 801d63a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801d63e:	f115 040f 	adds.w	r4, r5, #15
 801d642:	f100 809f 	bmi.w	801d784 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 801d646:	1124      	asrs	r4, r4, #4
 801d648:	eba4 040e 	sub.w	r4, r4, lr
 801d64c:	6184      	str	r4, [r0, #24]
 801d64e:	2c00      	cmp	r4, #0
 801d650:	f000 808a 	beq.w	801d768 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 801d654:	f8dc 9004 	ldr.w	r9, [ip, #4]
 801d658:	f8d8 4004 	ldr.w	r4, [r8, #4]
 801d65c:	5995      	ldr	r5, [r2, r6]
 801d65e:	eba4 0809 	sub.w	r8, r4, r9
 801d662:	59d4      	ldr	r4, [r2, r7]
 801d664:	eba5 0a04 	sub.w	sl, r5, r4
 801d668:	ea4f 1608 	mov.w	r6, r8, lsl #4
 801d66c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 801d670:	fb0e fe05 	mul.w	lr, lr, r5
 801d674:	fb0a ee19 	mls	lr, sl, r9, lr
 801d678:	fb08 e404 	mla	r4, r8, r4, lr
 801d67c:	3c01      	subs	r4, #1
 801d67e:	19a4      	adds	r4, r4, r6
 801d680:	f100 808c 	bmi.w	801d79c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 801d684:	fb94 fef6 	sdiv	lr, r4, r6
 801d688:	fb06 441e 	mls	r4, r6, lr, r4
 801d68c:	f8c0 e000 	str.w	lr, [r0]
 801d690:	6104      	str	r4, [r0, #16]
 801d692:	2d00      	cmp	r5, #0
 801d694:	f2c0 8095 	blt.w	801d7c2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 801d698:	fb95 f4f6 	sdiv	r4, r5, r6
 801d69c:	fb06 5514 	mls	r5, r6, r4, r5
 801d6a0:	6044      	str	r4, [r0, #4]
 801d6a2:	6085      	str	r5, [r0, #8]
 801d6a4:	60c6      	str	r6, [r0, #12]
 801d6a6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d6aa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801d6ae:	6945      	ldr	r5, [r0, #20]
 801d6b0:	59d2      	ldr	r2, [r2, r7]
 801d6b2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801d6b6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 801d7e4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801d6ba:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d6be:	ee07 4a10 	vmov	s14, r4
 801d6c2:	6804      	ldr	r4, [r0, #0]
 801d6c4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801d6c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801d6cc:	ee07 2a90 	vmov	s15, r2
 801d6d0:	ee27 7a26 	vmul.f32	s14, s14, s13
 801d6d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d6d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d6dc:	edd3 6a00 	vldr	s13, [r3]
 801d6e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801d6e4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 801d6e8:	eee6 6a27 	vfma.f32	s13, s12, s15
 801d6ec:	edc0 6a07 	vstr	s13, [r0, #28]
 801d6f0:	edd0 6a01 	vldr	s13, [r0, #4]
 801d6f4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 801d6f8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801d6fc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 801d700:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d704:	ed80 6a08 	vstr	s12, [r0, #32]
 801d708:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 801d70a:	6242      	str	r2, [r0, #36]	; 0x24
 801d70c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 801d710:	ed93 6a03 	vldr	s12, [r3, #12]
 801d714:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d718:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d71c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 801d720:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 801d724:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 801d728:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 801d72c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801d730:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 801d734:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 801d736:	6302      	str	r2, [r0, #48]	; 0x30
 801d738:	ed93 6a06 	vldr	s12, [r3, #24]
 801d73c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 801d740:	eea5 6a87 	vfma.f32	s12, s11, s14
 801d744:	eeb0 7a46 	vmov.f32	s14, s12
 801d748:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 801d74c:	eea6 7a27 	vfma.f32	s14, s12, s15
 801d750:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 801d754:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 801d758:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 801d75c:	eee6 7a87 	vfma.f32	s15, s13, s14
 801d760:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 801d764:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 801d766:	63c3      	str	r3, [r0, #60]	; 0x3c
 801d768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d76c:	2410      	movs	r4, #16
 801d76e:	f1c5 0501 	rsb	r5, r5, #1
 801d772:	fb9e fef4 	sdiv	lr, lr, r4
 801d776:	f015 050f 	ands.w	r5, r5, #15
 801d77a:	bf18      	it	ne
 801d77c:	2501      	movne	r5, #1
 801d77e:	ebae 0e05 	sub.w	lr, lr, r5
 801d782:	e753      	b.n	801d62c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 801d784:	f04f 0910 	mov.w	r9, #16
 801d788:	f1c5 0501 	rsb	r5, r5, #1
 801d78c:	fb94 f4f9 	sdiv	r4, r4, r9
 801d790:	f015 050f 	ands.w	r5, r5, #15
 801d794:	bf18      	it	ne
 801d796:	2501      	movne	r5, #1
 801d798:	1b64      	subs	r4, r4, r5
 801d79a:	e755      	b.n	801d648 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 801d79c:	4264      	negs	r4, r4
 801d79e:	fb94 fef6 	sdiv	lr, r4, r6
 801d7a2:	f1ce 0800 	rsb	r8, lr, #0
 801d7a6:	fb06 441e 	mls	r4, r6, lr, r4
 801d7aa:	f8c0 8000 	str.w	r8, [r0]
 801d7ae:	6104      	str	r4, [r0, #16]
 801d7b0:	2c00      	cmp	r4, #0
 801d7b2:	f43f af6e 	beq.w	801d692 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801d7b6:	ea6f 0e0e 	mvn.w	lr, lr
 801d7ba:	1b34      	subs	r4, r6, r4
 801d7bc:	f8c0 e000 	str.w	lr, [r0]
 801d7c0:	e766      	b.n	801d690 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801d7c2:	426d      	negs	r5, r5
 801d7c4:	fb95 f4f6 	sdiv	r4, r5, r6
 801d7c8:	f1c4 0e00 	rsb	lr, r4, #0
 801d7cc:	fb06 5514 	mls	r5, r6, r4, r5
 801d7d0:	f8c0 e004 	str.w	lr, [r0, #4]
 801d7d4:	6085      	str	r5, [r0, #8]
 801d7d6:	2d00      	cmp	r5, #0
 801d7d8:	f43f af64 	beq.w	801d6a4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801d7dc:	43e4      	mvns	r4, r4
 801d7de:	1b75      	subs	r5, r6, r5
 801d7e0:	6044      	str	r4, [r0, #4]
 801d7e2:	e75e      	b.n	801d6a2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 801d7e4:	3d800000 	.word	0x3d800000

0801d7e8 <_ZN8touchgfx7Unicode6strlenEPKt>:
 801d7e8:	4602      	mov	r2, r0
 801d7ea:	b148      	cbz	r0, 801d800 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801d7ec:	2300      	movs	r3, #0
 801d7ee:	b298      	uxth	r0, r3
 801d7f0:	3301      	adds	r3, #1
 801d7f2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801d7f6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801d7fa:	2900      	cmp	r1, #0
 801d7fc:	d1f7      	bne.n	801d7ee <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801d7fe:	4770      	bx	lr
 801d800:	4770      	bx	lr

0801d802 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801d802:	b530      	push	{r4, r5, lr}
 801d804:	4604      	mov	r4, r0
 801d806:	b159      	cbz	r1, 801d820 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 801d808:	b148      	cbz	r0, 801d81e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d80a:	2300      	movs	r3, #0
 801d80c:	b298      	uxth	r0, r3
 801d80e:	4282      	cmp	r2, r0
 801d810:	d905      	bls.n	801d81e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 801d812:	5ccd      	ldrb	r5, [r1, r3]
 801d814:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 801d818:	3301      	adds	r3, #1
 801d81a:	2d00      	cmp	r5, #0
 801d81c:	d1f6      	bne.n	801d80c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801d81e:	bd30      	pop	{r4, r5, pc}
 801d820:	4608      	mov	r0, r1
 801d822:	e7fc      	b.n	801d81e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

0801d824 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
 801d824:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d826:	468c      	mov	ip, r1
 801d828:	b08b      	sub	sp, #44	; 0x2c
 801d82a:	2100      	movs	r1, #0
 801d82c:	ae01      	add	r6, sp, #4
 801d82e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d832:	211f      	movs	r1, #31
 801d834:	fbb0 f7f3 	udiv	r7, r0, r3
 801d838:	fb03 0517 	mls	r5, r3, r7, r0
 801d83c:	4638      	mov	r0, r7
 801d83e:	b2ec      	uxtb	r4, r5
 801d840:	2d09      	cmp	r5, #9
 801d842:	bfd4      	ite	le
 801d844:	3430      	addle	r4, #48	; 0x30
 801d846:	3457      	addgt	r4, #87	; 0x57
 801d848:	b2e4      	uxtb	r4, r4
 801d84a:	558c      	strb	r4, [r1, r6]
 801d84c:	1e4c      	subs	r4, r1, #1
 801d84e:	b92f      	cbnz	r7, 801d85c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
 801d850:	4431      	add	r1, r6
 801d852:	4660      	mov	r0, ip
 801d854:	f7ff ffd5 	bl	801d802 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d858:	b00b      	add	sp, #44	; 0x2c
 801d85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d85c:	4621      	mov	r1, r4
 801d85e:	e7e9      	b.n	801d834 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

0801d860 <_ZN8touchgfx7Unicode4itoaElPtti>:
 801d860:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d862:	4607      	mov	r7, r0
 801d864:	b08b      	sub	sp, #44	; 0x2c
 801d866:	4608      	mov	r0, r1
 801d868:	b341      	cbz	r1, 801d8bc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d86a:	1e99      	subs	r1, r3, #2
 801d86c:	2922      	cmp	r1, #34	; 0x22
 801d86e:	d825      	bhi.n	801d8bc <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801d870:	2100      	movs	r1, #0
 801d872:	463c      	mov	r4, r7
 801d874:	261f      	movs	r6, #31
 801d876:	f10d 0c04 	add.w	ip, sp, #4
 801d87a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801d87e:	1e71      	subs	r1, r6, #1
 801d880:	fb94 fef3 	sdiv	lr, r4, r3
 801d884:	fb03 441e 	mls	r4, r3, lr, r4
 801d888:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 801d88c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 801d890:	b2ec      	uxtb	r4, r5
 801d892:	2d09      	cmp	r5, #9
 801d894:	bfd4      	ite	le
 801d896:	3430      	addle	r4, #48	; 0x30
 801d898:	3457      	addgt	r4, #87	; 0x57
 801d89a:	b2e4      	uxtb	r4, r4
 801d89c:	f80c 4006 	strb.w	r4, [ip, r6]
 801d8a0:	4674      	mov	r4, lr
 801d8a2:	b96c      	cbnz	r4, 801d8c0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801d8a4:	2f00      	cmp	r7, #0
 801d8a6:	da05      	bge.n	801d8b4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
 801d8a8:	ab0a      	add	r3, sp, #40	; 0x28
 801d8aa:	4419      	add	r1, r3
 801d8ac:	232d      	movs	r3, #45	; 0x2d
 801d8ae:	f801 3c24 	strb.w	r3, [r1, #-36]
 801d8b2:	1eb1      	subs	r1, r6, #2
 801d8b4:	3101      	adds	r1, #1
 801d8b6:	4461      	add	r1, ip
 801d8b8:	f7ff ffa3 	bl	801d802 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801d8bc:	b00b      	add	sp, #44	; 0x2c
 801d8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d8c0:	460e      	mov	r6, r1
 801d8c2:	e7dc      	b.n	801d87e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

0801d8c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 801d8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8c8:	b085      	sub	sp, #20
 801d8ca:	4691      	mov	r9, r2
 801d8cc:	6802      	ldr	r2, [r0, #0]
 801d8ce:	4688      	mov	r8, r1
 801d8d0:	461c      	mov	r4, r3
 801d8d2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 801d8d6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d8da:	4683      	mov	fp, r0
 801d8dc:	4610      	mov	r0, r2
 801d8de:	9103      	str	r1, [sp, #12]
 801d8e0:	9302      	str	r3, [sp, #8]
 801d8e2:	9201      	str	r2, [sp, #4]
 801d8e4:	f7ff ff80 	bl	801d7e8 <_ZN8touchgfx7Unicode6strlenEPKt>
 801d8e8:	f1b8 0f00 	cmp.w	r8, #0
 801d8ec:	bf0c      	ite	eq
 801d8ee:	4684      	moveq	ip, r0
 801d8f0:	f100 0c01 	addne.w	ip, r0, #1
 801d8f4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
 801d8f8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
 801d8fc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801d8fe:	fa1f fc8c 	uxth.w	ip, ip
 801d902:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801d904:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 801d908:	9903      	ldr	r1, [sp, #12]
 801d90a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801d90e:	d041      	beq.n	801d994 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d910:	d834      	bhi.n	801d97c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 801d912:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
 801d916:	d059      	beq.n	801d9cc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 801d918:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
 801d91c:	d03a      	beq.n	801d994 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 801d91e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
 801d922:	d034      	beq.n	801d98e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d924:	2400      	movs	r4, #0
 801d926:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
 801d92a:	3a01      	subs	r2, #1
 801d92c:	b169      	cbz	r1, 801d94a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d92e:	9911      	ldr	r1, [sp, #68]	; 0x44
 801d930:	458c      	cmp	ip, r1
 801d932:	da09      	bge.n	801d948 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d934:	eba1 010c 	sub.w	r1, r1, ip
 801d938:	b289      	uxth	r1, r1
 801d93a:	b933      	cbnz	r3, 801d94a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d93c:	2e00      	cmp	r6, #0
 801d93e:	d051      	beq.n	801d9e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d940:	2800      	cmp	r0, #0
 801d942:	d04f      	beq.n	801d9e4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 801d944:	440c      	add	r4, r1
 801d946:	b2a4      	uxth	r4, r4
 801d948:	2100      	movs	r1, #0
 801d94a:	682b      	ldr	r3, [r5, #0]
 801d94c:	4293      	cmp	r3, r2
 801d94e:	da07      	bge.n	801d960 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d950:	f1b8 0f00 	cmp.w	r8, #0
 801d954:	d004      	beq.n	801d960 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 801d956:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 801d95a:	682b      	ldr	r3, [r5, #0]
 801d95c:	3301      	adds	r3, #1
 801d95e:	602b      	str	r3, [r5, #0]
 801d960:	2730      	movs	r7, #48	; 0x30
 801d962:	2c00      	cmp	r4, #0
 801d964:	d04e      	beq.n	801da04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d966:	682e      	ldr	r6, [r5, #0]
 801d968:	3c01      	subs	r4, #1
 801d96a:	42b2      	cmp	r2, r6
 801d96c:	b2a4      	uxth	r4, r4
 801d96e:	dd49      	ble.n	801da04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801d970:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d974:	682b      	ldr	r3, [r5, #0]
 801d976:	3301      	adds	r3, #1
 801d978:	602b      	str	r3, [r5, #0]
 801d97a:	e7f2      	b.n	801d962 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 801d97c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
 801d980:	d01d      	beq.n	801d9be <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 801d982:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
 801d986:	d002      	beq.n	801d98e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 801d988:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
 801d98c:	e7c9      	b.n	801d922 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 801d98e:	4684      	mov	ip, r0
 801d990:	f04f 0800 	mov.w	r8, #0
 801d994:	2c00      	cmp	r4, #0
 801d996:	d0c6      	beq.n	801d926 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d998:	b947      	cbnz	r7, 801d9ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d99a:	2801      	cmp	r0, #1
 801d99c:	d106      	bne.n	801d9ac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 801d99e:	8814      	ldrh	r4, [r2, #0]
 801d9a0:	2c30      	cmp	r4, #48	; 0x30
 801d9a2:	bf02      	ittt	eq
 801d9a4:	3202      	addeq	r2, #2
 801d9a6:	4638      	moveq	r0, r7
 801d9a8:	f8cb 2000 	streq.w	r2, [fp]
 801d9ac:	45bc      	cmp	ip, r7
 801d9ae:	da14      	bge.n	801d9da <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 801d9b0:	b2bf      	uxth	r7, r7
 801d9b2:	eba7 040c 	sub.w	r4, r7, ip
 801d9b6:	46bc      	mov	ip, r7
 801d9b8:	b2a4      	uxth	r4, r4
 801d9ba:	2600      	movs	r6, #0
 801d9bc:	e7b3      	b.n	801d926 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d9be:	4684      	mov	ip, r0
 801d9c0:	b16c      	cbz	r4, 801d9de <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 801d9c2:	42b8      	cmp	r0, r7
 801d9c4:	dd00      	ble.n	801d9c8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 801d9c6:	b2b8      	uxth	r0, r7
 801d9c8:	2400      	movs	r4, #0
 801d9ca:	e003      	b.n	801d9d4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 801d9cc:	f04f 0c01 	mov.w	ip, #1
 801d9d0:	2400      	movs	r4, #0
 801d9d2:	4660      	mov	r0, ip
 801d9d4:	4626      	mov	r6, r4
 801d9d6:	46a0      	mov	r8, r4
 801d9d8:	e7a5      	b.n	801d926 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d9da:	2400      	movs	r4, #0
 801d9dc:	e7ed      	b.n	801d9ba <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 801d9de:	4626      	mov	r6, r4
 801d9e0:	46a0      	mov	r8, r4
 801d9e2:	e7a0      	b.n	801d926 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 801d9e4:	2900      	cmp	r1, #0
 801d9e6:	d0b0      	beq.n	801d94a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d9e8:	2720      	movs	r7, #32
 801d9ea:	682e      	ldr	r6, [r5, #0]
 801d9ec:	2900      	cmp	r1, #0
 801d9ee:	d0ac      	beq.n	801d94a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 801d9f0:	3901      	subs	r1, #1
 801d9f2:	4296      	cmp	r6, r2
 801d9f4:	b289      	uxth	r1, r1
 801d9f6:	daa7      	bge.n	801d948 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 801d9f8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 801d9fc:	682b      	ldr	r3, [r5, #0]
 801d9fe:	3301      	adds	r3, #1
 801da00:	602b      	str	r3, [r5, #0]
 801da02:	e7f2      	b.n	801d9ea <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 801da04:	b188      	cbz	r0, 801da2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801da06:	682b      	ldr	r3, [r5, #0]
 801da08:	3801      	subs	r0, #1
 801da0a:	429a      	cmp	r2, r3
 801da0c:	b280      	uxth	r0, r0
 801da0e:	dd0c      	ble.n	801da2a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 801da10:	f8db 3000 	ldr.w	r3, [fp]
 801da14:	1c9c      	adds	r4, r3, #2
 801da16:	f8cb 4000 	str.w	r4, [fp]
 801da1a:	881c      	ldrh	r4, [r3, #0]
 801da1c:	682b      	ldr	r3, [r5, #0]
 801da1e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 801da22:	682b      	ldr	r3, [r5, #0]
 801da24:	3301      	adds	r3, #1
 801da26:	602b      	str	r3, [r5, #0]
 801da28:	e7ec      	b.n	801da04 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 801da2a:	2620      	movs	r6, #32
 801da2c:	b151      	cbz	r1, 801da44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801da2e:	6828      	ldr	r0, [r5, #0]
 801da30:	3901      	subs	r1, #1
 801da32:	4282      	cmp	r2, r0
 801da34:	b289      	uxth	r1, r1
 801da36:	dd05      	ble.n	801da44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 801da38:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 801da3c:	682b      	ldr	r3, [r5, #0]
 801da3e:	3301      	adds	r3, #1
 801da40:	602b      	str	r3, [r5, #0]
 801da42:	e7f3      	b.n	801da2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 801da44:	b005      	add	sp, #20
 801da46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 801da4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801da4e:	2400      	movs	r4, #0
 801da50:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 801da54:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
 801da58:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
 801da5c:	8014      	strh	r4, [r2, #0]
 801da5e:	701c      	strb	r4, [r3, #0]
 801da60:	f888 4000 	strb.w	r4, [r8]
 801da64:	f88c 4000 	strb.w	r4, [ip]
 801da68:	f88e 4000 	strb.w	r4, [lr]
 801da6c:	703c      	strb	r4, [r7, #0]
 801da6e:	6804      	ldr	r4, [r0, #0]
 801da70:	b1a4      	cbz	r4, 801da9c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 801da72:	8824      	ldrh	r4, [r4, #0]
 801da74:	f04f 0901 	mov.w	r9, #1
 801da78:	b314      	cbz	r4, 801dac0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801da7a:	2c2b      	cmp	r4, #43	; 0x2b
 801da7c:	d001      	beq.n	801da82 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 801da7e:	2c20      	cmp	r4, #32
 801da80:	d110      	bne.n	801daa4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 801da82:	8014      	strh	r4, [r2, #0]
 801da84:	6804      	ldr	r4, [r0, #0]
 801da86:	b10c      	cbz	r4, 801da8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 801da88:	3402      	adds	r4, #2
 801da8a:	6004      	str	r4, [r0, #0]
 801da8c:	680c      	ldr	r4, [r1, #0]
 801da8e:	b10c      	cbz	r4, 801da94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 801da90:	3401      	adds	r4, #1
 801da92:	600c      	str	r4, [r1, #0]
 801da94:	6804      	ldr	r4, [r0, #0]
 801da96:	b17c      	cbz	r4, 801dab8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 801da98:	8824      	ldrh	r4, [r4, #0]
 801da9a:	e7ed      	b.n	801da78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801da9c:	680c      	ldr	r4, [r1, #0]
 801da9e:	b17c      	cbz	r4, 801dac0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801daa0:	7824      	ldrb	r4, [r4, #0]
 801daa2:	e7e7      	b.n	801da74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 801daa4:	2c2d      	cmp	r4, #45	; 0x2d
 801daa6:	d102      	bne.n	801daae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 801daa8:	f883 9000 	strb.w	r9, [r3]
 801daac:	e7ea      	b.n	801da84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801daae:	2c23      	cmp	r4, #35	; 0x23
 801dab0:	d107      	bne.n	801dac2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 801dab2:	f888 9000 	strb.w	r9, [r8]
 801dab6:	e7e5      	b.n	801da84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 801dab8:	680c      	ldr	r4, [r1, #0]
 801daba:	b10c      	cbz	r4, 801dac0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 801dabc:	7824      	ldrb	r4, [r4, #0]
 801dabe:	e7db      	b.n	801da78 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 801dac0:	2400      	movs	r4, #0
 801dac2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801dac6:	2b09      	cmp	r3, #9
 801dac8:	d901      	bls.n	801dace <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 801daca:	2c2a      	cmp	r4, #42	; 0x2a
 801dacc:	d122      	bne.n	801db14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801dace:	2301      	movs	r3, #1
 801dad0:	2c30      	cmp	r4, #48	; 0x30
 801dad2:	f88e 3000 	strb.w	r3, [lr]
 801dad6:	d10d      	bne.n	801daf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801dad8:	f88c 3000 	strb.w	r3, [ip]
 801dadc:	6803      	ldr	r3, [r0, #0]
 801dade:	b10b      	cbz	r3, 801dae4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 801dae0:	3302      	adds	r3, #2
 801dae2:	6003      	str	r3, [r0, #0]
 801dae4:	680b      	ldr	r3, [r1, #0]
 801dae6:	b10b      	cbz	r3, 801daec <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 801dae8:	3301      	adds	r3, #1
 801daea:	600b      	str	r3, [r1, #0]
 801daec:	6803      	ldr	r3, [r0, #0]
 801daee:	2b00      	cmp	r3, #0
 801daf0:	d02f      	beq.n	801db52 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 801daf2:	881c      	ldrh	r4, [r3, #0]
 801daf4:	2c2a      	cmp	r4, #42	; 0x2a
 801daf6:	d135      	bne.n	801db64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801daf8:	f04f 33ff 	mov.w	r3, #4294967295
 801dafc:	6033      	str	r3, [r6, #0]
 801dafe:	6803      	ldr	r3, [r0, #0]
 801db00:	b10b      	cbz	r3, 801db06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 801db02:	3302      	adds	r3, #2
 801db04:	6003      	str	r3, [r0, #0]
 801db06:	680b      	ldr	r3, [r1, #0]
 801db08:	b10b      	cbz	r3, 801db0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 801db0a:	3301      	adds	r3, #1
 801db0c:	600b      	str	r3, [r1, #0]
 801db0e:	6803      	ldr	r3, [r0, #0]
 801db10:	b31b      	cbz	r3, 801db5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 801db12:	881c      	ldrh	r4, [r3, #0]
 801db14:	2c2e      	cmp	r4, #46	; 0x2e
 801db16:	d11a      	bne.n	801db4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801db18:	2301      	movs	r3, #1
 801db1a:	703b      	strb	r3, [r7, #0]
 801db1c:	6803      	ldr	r3, [r0, #0]
 801db1e:	b10b      	cbz	r3, 801db24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 801db20:	3302      	adds	r3, #2
 801db22:	6003      	str	r3, [r0, #0]
 801db24:	680b      	ldr	r3, [r1, #0]
 801db26:	b10b      	cbz	r3, 801db2c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 801db28:	3301      	adds	r3, #1
 801db2a:	600b      	str	r3, [r1, #0]
 801db2c:	6803      	ldr	r3, [r0, #0]
 801db2e:	2b00      	cmp	r3, #0
 801db30:	d036      	beq.n	801dba0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 801db32:	881b      	ldrh	r3, [r3, #0]
 801db34:	2b2a      	cmp	r3, #42	; 0x2a
 801db36:	d137      	bne.n	801dba8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801db38:	f04f 33ff 	mov.w	r3, #4294967295
 801db3c:	602b      	str	r3, [r5, #0]
 801db3e:	6803      	ldr	r3, [r0, #0]
 801db40:	b10b      	cbz	r3, 801db46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 801db42:	3302      	adds	r3, #2
 801db44:	6003      	str	r3, [r0, #0]
 801db46:	680b      	ldr	r3, [r1, #0]
 801db48:	b10b      	cbz	r3, 801db4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801db4a:	3301      	adds	r3, #1
 801db4c:	600b      	str	r3, [r1, #0]
 801db4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801db52:	680c      	ldr	r4, [r1, #0]
 801db54:	b134      	cbz	r4, 801db64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 801db56:	7824      	ldrb	r4, [r4, #0]
 801db58:	e7cc      	b.n	801daf4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 801db5a:	680b      	ldr	r3, [r1, #0]
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	d0f6      	beq.n	801db4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 801db60:	781c      	ldrb	r4, [r3, #0]
 801db62:	e7d7      	b.n	801db14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801db64:	2300      	movs	r3, #0
 801db66:	220a      	movs	r2, #10
 801db68:	6033      	str	r3, [r6, #0]
 801db6a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801db6e:	fa1f f38c 	uxth.w	r3, ip
 801db72:	2b09      	cmp	r3, #9
 801db74:	d8ce      	bhi.n	801db14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 801db76:	6833      	ldr	r3, [r6, #0]
 801db78:	fb02 c303 	mla	r3, r2, r3, ip
 801db7c:	6033      	str	r3, [r6, #0]
 801db7e:	6803      	ldr	r3, [r0, #0]
 801db80:	b10b      	cbz	r3, 801db86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 801db82:	3302      	adds	r3, #2
 801db84:	6003      	str	r3, [r0, #0]
 801db86:	680b      	ldr	r3, [r1, #0]
 801db88:	b10b      	cbz	r3, 801db8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 801db8a:	3301      	adds	r3, #1
 801db8c:	600b      	str	r3, [r1, #0]
 801db8e:	6803      	ldr	r3, [r0, #0]
 801db90:	b10b      	cbz	r3, 801db96 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 801db92:	881c      	ldrh	r4, [r3, #0]
 801db94:	e7e9      	b.n	801db6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801db96:	680c      	ldr	r4, [r1, #0]
 801db98:	2c00      	cmp	r4, #0
 801db9a:	d0e6      	beq.n	801db6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801db9c:	7824      	ldrb	r4, [r4, #0]
 801db9e:	e7e4      	b.n	801db6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 801dba0:	680b      	ldr	r3, [r1, #0]
 801dba2:	b10b      	cbz	r3, 801dba8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 801dba4:	781b      	ldrb	r3, [r3, #0]
 801dba6:	e7c5      	b.n	801db34 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 801dba8:	2200      	movs	r2, #0
 801dbaa:	240a      	movs	r4, #10
 801dbac:	602a      	str	r2, [r5, #0]
 801dbae:	3b30      	subs	r3, #48	; 0x30
 801dbb0:	682a      	ldr	r2, [r5, #0]
 801dbb2:	b29e      	uxth	r6, r3
 801dbb4:	2e09      	cmp	r6, #9
 801dbb6:	d813      	bhi.n	801dbe0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 801dbb8:	fb04 3302 	mla	r3, r4, r2, r3
 801dbbc:	602b      	str	r3, [r5, #0]
 801dbbe:	6803      	ldr	r3, [r0, #0]
 801dbc0:	b10b      	cbz	r3, 801dbc6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 801dbc2:	3302      	adds	r3, #2
 801dbc4:	6003      	str	r3, [r0, #0]
 801dbc6:	680b      	ldr	r3, [r1, #0]
 801dbc8:	b10b      	cbz	r3, 801dbce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 801dbca:	3301      	adds	r3, #1
 801dbcc:	600b      	str	r3, [r1, #0]
 801dbce:	6803      	ldr	r3, [r0, #0]
 801dbd0:	b10b      	cbz	r3, 801dbd6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 801dbd2:	881b      	ldrh	r3, [r3, #0]
 801dbd4:	e7eb      	b.n	801dbae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801dbd6:	680b      	ldr	r3, [r1, #0]
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	d0e8      	beq.n	801dbae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801dbdc:	781b      	ldrb	r3, [r3, #0]
 801dbde:	e7e6      	b.n	801dbae <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 801dbe0:	2a06      	cmp	r2, #6
 801dbe2:	bfa8      	it	ge
 801dbe4:	2206      	movge	r2, #6
 801dbe6:	602a      	str	r2, [r5, #0]
 801dbe8:	e7b1      	b.n	801db4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

0801dbea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 801dbea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbee:	b0a3      	sub	sp, #140	; 0x8c
 801dbf0:	2600      	movs	r6, #0
 801dbf2:	4607      	mov	r7, r0
 801dbf4:	4688      	mov	r8, r1
 801dbf6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
 801dbfa:	4631      	mov	r1, r6
 801dbfc:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 801dbfe:	4648      	mov	r0, r9
 801dc00:	960d      	str	r6, [sp, #52]	; 0x34
 801dc02:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801dc06:	2242      	movs	r2, #66	; 0x42
 801dc08:	f00c f92e 	bl	8029e68 <memset>
 801dc0c:	b15f      	cbz	r7, 801dc26 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 801dc0e:	f108 3aff 	add.w	sl, r8, #4294967295
 801dc12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc16:	b152      	cbz	r2, 801dc2e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 801dc18:	8812      	ldrh	r2, [r2, #0]
 801dc1a:	b10a      	cbz	r2, 801dc20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801dc1c:	459a      	cmp	sl, r3
 801dc1e:	dc2e      	bgt.n	801dc7e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 801dc20:	2200      	movs	r2, #0
 801dc22:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801dc26:	4638      	mov	r0, r7
 801dc28:	b023      	add	sp, #140	; 0x8c
 801dc2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc2e:	9a08      	ldr	r2, [sp, #32]
 801dc30:	2a00      	cmp	r2, #0
 801dc32:	d0f5      	beq.n	801dc20 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 801dc34:	7812      	ldrb	r2, [r2, #0]
 801dc36:	e7f0      	b.n	801dc1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 801dc38:	2d00      	cmp	r5, #0
 801dc3a:	d0ea      	beq.n	801dc12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc3c:	782a      	ldrb	r2, [r5, #0]
 801dc3e:	b142      	cbz	r2, 801dc52 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 801dc40:	2a25      	cmp	r2, #37	; 0x25
 801dc42:	d001      	beq.n	801dc48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 801dc44:	459a      	cmp	sl, r3
 801dc46:	dc08      	bgt.n	801dc5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 801dc48:	f1bb 0f00 	cmp.w	fp, #0
 801dc4c:	d121      	bne.n	801dc92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 801dc4e:	2d00      	cmp	r5, #0
 801dc50:	d0df      	beq.n	801dc12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc52:	782a      	ldrb	r2, [r5, #0]
 801dc54:	f04f 0b00 	mov.w	fp, #0
 801dc58:	e01d      	b.n	801dc96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 801dc5a:	f1bb 0f00 	cmp.w	fp, #0
 801dc5e:	d077      	beq.n	801dd50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 801dc60:	f8bb 2000 	ldrh.w	r2, [fp]
 801dc64:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 801dc68:	f1bb 0f00 	cmp.w	fp, #0
 801dc6c:	d002      	beq.n	801dc74 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 801dc6e:	f10b 0202 	add.w	r2, fp, #2
 801dc72:	9209      	str	r2, [sp, #36]	; 0x24
 801dc74:	b10d      	cbz	r5, 801dc7a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 801dc76:	3501      	adds	r5, #1
 801dc78:	9508      	str	r5, [sp, #32]
 801dc7a:	3301      	adds	r3, #1
 801dc7c:	930d      	str	r3, [sp, #52]	; 0x34
 801dc7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dc80:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801dc84:	f1bb 0f00 	cmp.w	fp, #0
 801dc88:	d0d6      	beq.n	801dc38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801dc8a:	f8bb 2000 	ldrh.w	r2, [fp]
 801dc8e:	2a00      	cmp	r2, #0
 801dc90:	d1d6      	bne.n	801dc40 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801dc92:	f8bb 2000 	ldrh.w	r2, [fp]
 801dc96:	2a00      	cmp	r2, #0
 801dc98:	d0bb      	beq.n	801dc12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc9a:	459a      	cmp	sl, r3
 801dc9c:	ddb9      	ble.n	801dc12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801dc9e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
 801dca2:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 801dca6:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
 801dcaa:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 801dcae:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
 801dcb2:	960e      	str	r6, [sp, #56]	; 0x38
 801dcb4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
 801dcb8:	960f      	str	r6, [sp, #60]	; 0x3c
 801dcba:	f1bb 0f00 	cmp.w	fp, #0
 801dcbe:	d002      	beq.n	801dcc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801dcc0:	f10b 0302 	add.w	r3, fp, #2
 801dcc4:	9309      	str	r3, [sp, #36]	; 0x24
 801dcc6:	b10d      	cbz	r5, 801dccc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801dcc8:	1c6b      	adds	r3, r5, #1
 801dcca:	9308      	str	r3, [sp, #32]
 801dccc:	ab0f      	add	r3, sp, #60	; 0x3c
 801dcce:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 801dcd2:	a908      	add	r1, sp, #32
 801dcd4:	a809      	add	r0, sp, #36	; 0x24
 801dcd6:	9305      	str	r3, [sp, #20]
 801dcd8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801dcdc:	9304      	str	r3, [sp, #16]
 801dcde:	ab0e      	add	r3, sp, #56	; 0x38
 801dce0:	9303      	str	r3, [sp, #12]
 801dce2:	ab0c      	add	r3, sp, #48	; 0x30
 801dce4:	9302      	str	r3, [sp, #8]
 801dce6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801dcea:	9301      	str	r3, [sp, #4]
 801dcec:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801dcf0:	9300      	str	r3, [sp, #0]
 801dcf2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
 801dcf6:	f7ff fea8 	bl	801da4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801dcfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801dcfc:	2b00      	cmp	r3, #0
 801dcfe:	bfbf      	itttt	lt
 801dd00:	6823      	ldrlt	r3, [r4, #0]
 801dd02:	3404      	addlt	r4, #4
 801dd04:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801dd08:	930e      	strlt	r3, [sp, #56]	; 0x38
 801dd0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801dd0c:	2b00      	cmp	r3, #0
 801dd0e:	bfbe      	ittt	lt
 801dd10:	6823      	ldrlt	r3, [r4, #0]
 801dd12:	3404      	addlt	r4, #4
 801dd14:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801dd18:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801dd1c:	bfb8      	it	lt
 801dd1e:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801dd20:	b1d9      	cbz	r1, 801dd5a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801dd22:	880b      	ldrh	r3, [r1, #0]
 801dd24:	2b69      	cmp	r3, #105	; 0x69
 801dd26:	d01f      	beq.n	801dd68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801dd28:	d82f      	bhi.n	801dd8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801dd2a:	2b58      	cmp	r3, #88	; 0x58
 801dd2c:	d01c      	beq.n	801dd68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801dd2e:	d818      	bhi.n	801dd62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801dd30:	2b25      	cmp	r3, #37	; 0x25
 801dd32:	d034      	beq.n	801dd9e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801dd34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dd36:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801dd3a:	f1bb 0f00 	cmp.w	fp, #0
 801dd3e:	f000 80b7 	beq.w	801deb0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801dd42:	f8bb 5000 	ldrh.w	r5, [fp]
 801dd46:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801dd4a:	3301      	adds	r3, #1
 801dd4c:	930d      	str	r3, [sp, #52]	; 0x34
 801dd4e:	e029      	b.n	801dda4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801dd50:	b10d      	cbz	r5, 801dd56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801dd52:	782a      	ldrb	r2, [r5, #0]
 801dd54:	e786      	b.n	801dc64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801dd56:	462a      	mov	r2, r5
 801dd58:	e784      	b.n	801dc64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801dd5a:	2a00      	cmp	r2, #0
 801dd5c:	d0ea      	beq.n	801dd34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801dd5e:	7813      	ldrb	r3, [r2, #0]
 801dd60:	e7e0      	b.n	801dd24 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801dd62:	3b63      	subs	r3, #99	; 0x63
 801dd64:	2b01      	cmp	r3, #1
 801dd66:	d8e5      	bhi.n	801dd34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801dd68:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 801dd6c:	b329      	cbz	r1, 801ddba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801dd6e:	880b      	ldrh	r3, [r1, #0]
 801dd70:	2b69      	cmp	r3, #105	; 0x69
 801dd72:	d063      	beq.n	801de3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801dd74:	d825      	bhi.n	801ddc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801dd76:	2b63      	cmp	r3, #99	; 0x63
 801dd78:	d038      	beq.n	801ddec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801dd7a:	2b64      	cmp	r3, #100	; 0x64
 801dd7c:	d05e      	beq.n	801de3c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801dd7e:	2b58      	cmp	r3, #88	; 0x58
 801dd80:	d07a      	beq.n	801de78 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801dd82:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
 801dd86:	4625      	mov	r5, r4
 801dd88:	e036      	b.n	801ddf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801dd8a:	2b73      	cmp	r3, #115	; 0x73
 801dd8c:	d0ec      	beq.n	801dd68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801dd8e:	d802      	bhi.n	801dd96 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801dd90:	2b6f      	cmp	r3, #111	; 0x6f
 801dd92:	d1cf      	bne.n	801dd34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801dd94:	e7e8      	b.n	801dd68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801dd96:	2b75      	cmp	r3, #117	; 0x75
 801dd98:	d0e6      	beq.n	801dd68 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801dd9a:	2b78      	cmp	r3, #120	; 0x78
 801dd9c:	e7f9      	b.n	801dd92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801dd9e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dda0:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801dda4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dda6:	b10b      	cbz	r3, 801ddac <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801dda8:	3302      	adds	r3, #2
 801ddaa:	9309      	str	r3, [sp, #36]	; 0x24
 801ddac:	9b08      	ldr	r3, [sp, #32]
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	f43f af2f 	beq.w	801dc12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ddb4:	3301      	adds	r3, #1
 801ddb6:	9308      	str	r3, [sp, #32]
 801ddb8:	e72b      	b.n	801dc12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801ddba:	2a00      	cmp	r2, #0
 801ddbc:	d0e1      	beq.n	801dd82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ddbe:	7813      	ldrb	r3, [r2, #0]
 801ddc0:	e7d6      	b.n	801dd70 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801ddc2:	2b73      	cmp	r3, #115	; 0x73
 801ddc4:	d036      	beq.n	801de34 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801ddc6:	d807      	bhi.n	801ddd8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801ddc8:	2b6f      	cmp	r3, #111	; 0x6f
 801ddca:	d1da      	bne.n	801dd82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801ddcc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ddce:	1d25      	adds	r5, r4, #4
 801ddd0:	2308      	movs	r3, #8
 801ddd2:	eba8 0202 	sub.w	r2, r8, r2
 801ddd6:	e049      	b.n	801de6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ddd8:	2b75      	cmp	r3, #117	; 0x75
 801ddda:	d042      	beq.n	801de62 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801dddc:	2b78      	cmp	r3, #120	; 0x78
 801ddde:	d1d0      	bne.n	801dd82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801dde0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801dde2:	1d25      	adds	r5, r4, #4
 801dde4:	2310      	movs	r3, #16
 801dde6:	eba8 0202 	sub.w	r2, r8, r2
 801ddea:	e03f      	b.n	801de6c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801ddec:	6823      	ldr	r3, [r4, #0]
 801ddee:	1d25      	adds	r5, r4, #4
 801ddf0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
 801ddf4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801ddf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ddfa:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801ddfe:	2b00      	cmp	r3, #0
 801de00:	d051      	beq.n	801dea6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801de02:	881a      	ldrh	r2, [r3, #0]
 801de04:	a80d      	add	r0, sp, #52	; 0x34
 801de06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801de0a:	462c      	mov	r4, r5
 801de0c:	9005      	str	r0, [sp, #20]
 801de0e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
 801de12:	9004      	str	r0, [sp, #16]
 801de14:	980e      	ldr	r0, [sp, #56]	; 0x38
 801de16:	9003      	str	r0, [sp, #12]
 801de18:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
 801de1c:	9002      	str	r0, [sp, #8]
 801de1e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801de20:	9001      	str	r0, [sp, #4]
 801de22:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
 801de26:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801de2a:	9000      	str	r0, [sp, #0]
 801de2c:	a810      	add	r0, sp, #64	; 0x40
 801de2e:	f7ff fd49 	bl	801d8c4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801de32:	e7b7      	b.n	801dda4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801de34:	1d25      	adds	r5, r4, #4
 801de36:	6823      	ldr	r3, [r4, #0]
 801de38:	9310      	str	r3, [sp, #64]	; 0x40
 801de3a:	e7dd      	b.n	801ddf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801de3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de3e:	230a      	movs	r3, #10
 801de40:	4649      	mov	r1, r9
 801de42:	6820      	ldr	r0, [r4, #0]
 801de44:	eba8 0202 	sub.w	r2, r8, r2
 801de48:	1d25      	adds	r5, r4, #4
 801de4a:	b292      	uxth	r2, r2
 801de4c:	f7ff fd08 	bl	801d860 <_ZN8touchgfx7Unicode4itoaElPtti>
 801de50:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801de54:	2b2d      	cmp	r3, #45	; 0x2d
 801de56:	d1cf      	bne.n	801ddf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801de58:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801de5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801de5e:	3302      	adds	r3, #2
 801de60:	e7ea      	b.n	801de38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801de62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de64:	1d25      	adds	r5, r4, #4
 801de66:	230a      	movs	r3, #10
 801de68:	eba8 0202 	sub.w	r2, r8, r2
 801de6c:	b292      	uxth	r2, r2
 801de6e:	4649      	mov	r1, r9
 801de70:	6820      	ldr	r0, [r4, #0]
 801de72:	f7ff fcd7 	bl	801d824 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801de76:	e7bf      	b.n	801ddf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801de78:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801de7a:	2310      	movs	r3, #16
 801de7c:	4649      	mov	r1, r9
 801de7e:	6820      	ldr	r0, [r4, #0]
 801de80:	eba8 0202 	sub.w	r2, r8, r2
 801de84:	1d25      	adds	r5, r4, #4
 801de86:	b292      	uxth	r2, r2
 801de88:	f7ff fccc 	bl	801d824 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
 801de8c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 801de90:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801de94:	2b00      	cmp	r3, #0
 801de96:	d0af      	beq.n	801ddf8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801de98:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801de9c:	2919      	cmp	r1, #25
 801de9e:	d8f7      	bhi.n	801de90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801dea0:	3b20      	subs	r3, #32
 801dea2:	8013      	strh	r3, [r2, #0]
 801dea4:	e7f4      	b.n	801de90 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801dea6:	9a08      	ldr	r2, [sp, #32]
 801dea8:	2a00      	cmp	r2, #0
 801deaa:	d0ab      	beq.n	801de04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801deac:	7812      	ldrb	r2, [r2, #0]
 801deae:	e7a9      	b.n	801de04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801deb0:	2d00      	cmp	r5, #0
 801deb2:	f43f af48 	beq.w	801dd46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801deb6:	782d      	ldrb	r5, [r5, #0]
 801deb8:	e745      	b.n	801dd46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801deba <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801deba:	b507      	push	{r0, r1, r2, lr}
 801debc:	9300      	str	r3, [sp, #0]
 801debe:	4613      	mov	r3, r2
 801dec0:	2200      	movs	r2, #0
 801dec2:	f7ff fe92 	bl	801dbea <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801dec6:	b003      	add	sp, #12
 801dec8:	f85d fb04 	ldr.w	pc, [sp], #4

0801decc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801decc:	b40c      	push	{r2, r3}
 801dece:	b507      	push	{r0, r1, r2, lr}
 801ded0:	ab04      	add	r3, sp, #16
 801ded2:	f853 2b04 	ldr.w	r2, [r3], #4
 801ded6:	9301      	str	r3, [sp, #4]
 801ded8:	f7ff ffef 	bl	801deba <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801dedc:	b003      	add	sp, #12
 801dede:	f85d eb04 	ldr.w	lr, [sp], #4
 801dee2:	b002      	add	sp, #8
 801dee4:	4770      	bx	lr
	...

0801dee8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801dee8:	4b01      	ldr	r3, [pc, #4]	; (801def0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801deea:	6018      	str	r0, [r3, #0]
 801deec:	4770      	bx	lr
 801deee:	bf00      	nop
 801def0:	2003c324 	.word	0x2003c324

0801def4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801def4:	4b06      	ldr	r3, [pc, #24]	; (801df10 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801def6:	881a      	ldrh	r2, [r3, #0]
 801def8:	4282      	cmp	r2, r0
 801defa:	d807      	bhi.n	801df0c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801defc:	4b05      	ldr	r3, [pc, #20]	; (801df14 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801defe:	881b      	ldrh	r3, [r3, #0]
 801df00:	4413      	add	r3, r2
 801df02:	4298      	cmp	r0, r3
 801df04:	bfac      	ite	ge
 801df06:	2000      	movge	r0, #0
 801df08:	2001      	movlt	r0, #1
 801df0a:	4770      	bx	lr
 801df0c:	2000      	movs	r0, #0
 801df0e:	4770      	bx	lr
 801df10:	2003c344 	.word	0x2003c344
 801df14:	2003c348 	.word	0x2003c348

0801df18 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801df18:	b508      	push	{r3, lr}
 801df1a:	4601      	mov	r1, r0
 801df1c:	f7ff ffea 	bl	801def4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801df20:	b118      	cbz	r0, 801df2a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801df22:	4b02      	ldr	r3, [pc, #8]	; (801df2c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801df24:	681b      	ldr	r3, [r3, #0]
 801df26:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801df2a:	bd08      	pop	{r3, pc}
 801df2c:	2003c328 	.word	0x2003c328

0801df30 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801df30:	b538      	push	{r3, r4, r5, lr}
 801df32:	4604      	mov	r4, r0
 801df34:	f7ff ffde 	bl	801def4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801df38:	b188      	cbz	r0, 801df5e <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x2e>
 801df3a:	4b09      	ldr	r3, [pc, #36]	; (801df60 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x30>)
 801df3c:	881a      	ldrh	r2, [r3, #0]
 801df3e:	4b09      	ldr	r3, [pc, #36]	; (801df64 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x34>)
 801df40:	1aa4      	subs	r4, r4, r2
 801df42:	220e      	movs	r2, #14
 801df44:	681d      	ldr	r5, [r3, #0]
 801df46:	4362      	muls	r2, r4
 801df48:	18ac      	adds	r4, r5, r2
 801df4a:	7b23      	ldrb	r3, [r4, #12]
 801df4c:	f013 0320 	ands.w	r3, r3, #32
 801df50:	bf17      	itett	ne
 801df52:	680b      	ldrne	r3, [r1, #0]
 801df54:	4618      	moveq	r0, r3
 801df56:	50ab      	strne	r3, [r5, r2]
 801df58:	684b      	ldrne	r3, [r1, #4]
 801df5a:	bf18      	it	ne
 801df5c:	6063      	strne	r3, [r4, #4]
 801df5e:	bd38      	pop	{r3, r4, r5, pc}
 801df60:	2003c344 	.word	0x2003c344
 801df64:	2003c32c 	.word	0x2003c32c

0801df68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801df68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801df6c:	4606      	mov	r6, r0
 801df6e:	460c      	mov	r4, r1
 801df70:	f7ff ffc0 	bl	801def4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801df74:	b918      	cbnz	r0, 801df7e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801df76:	2000      	movs	r0, #0
 801df78:	b002      	add	sp, #8
 801df7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801df7e:	4608      	mov	r0, r1
 801df80:	f7f8 fafb 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801df84:	2800      	cmp	r0, #0
 801df86:	d1f6      	bne.n	801df76 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801df88:	4b3f      	ldr	r3, [pc, #252]	; (801e088 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801df8a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 801e08c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801df8e:	881d      	ldrh	r5, [r3, #0]
 801df90:	f8d9 a000 	ldr.w	sl, [r9]
 801df94:	46c8      	mov	r8, r9
 801df96:	1b73      	subs	r3, r6, r5
 801df98:	250e      	movs	r5, #14
 801df9a:	435d      	muls	r5, r3
 801df9c:	eb0a 0705 	add.w	r7, sl, r5
 801dfa0:	7b3b      	ldrb	r3, [r7, #12]
 801dfa2:	f013 0f20 	tst.w	r3, #32
 801dfa6:	d0e6      	beq.n	801df76 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801dfa8:	4621      	mov	r1, r4
 801dfaa:	4638      	mov	r0, r7
 801dfac:	f7fc ff9c 	bl	801aee8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801dfb0:	2800      	cmp	r0, #0
 801dfb2:	d1e1      	bne.n	801df78 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801dfb4:	4639      	mov	r1, r7
 801dfb6:	4620      	mov	r0, r4
 801dfb8:	f7fc ff96 	bl	801aee8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801dfbc:	b108      	cbz	r0, 801dfc2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801dfbe:	4621      	mov	r1, r4
 801dfc0:	e020      	b.n	801e004 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801dfc2:	f9b4 2000 	ldrsh.w	r2, [r4]
 801dfc6:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801dfca:	429a      	cmp	r2, r3
 801dfcc:	d11e      	bne.n	801e00c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801dfce:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801dfd2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801dfd6:	429a      	cmp	r2, r3
 801dfd8:	d118      	bne.n	801e00c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801dfda:	6820      	ldr	r0, [r4, #0]
 801dfdc:	466b      	mov	r3, sp
 801dfde:	6861      	ldr	r1, [r4, #4]
 801dfe0:	c303      	stmia	r3!, {r0, r1}
 801dfe2:	4639      	mov	r1, r7
 801dfe4:	4668      	mov	r0, sp
 801dfe6:	f7fc ffa5 	bl	801af34 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801dfea:	f8d9 3000 	ldr.w	r3, [r9]
 801dfee:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801dff2:	442b      	add	r3, r5
 801dff4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801dff8:	4413      	add	r3, r2
 801dffa:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801dffe:	4293      	cmp	r3, r2
 801e000:	dc04      	bgt.n	801e00c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801e002:	4669      	mov	r1, sp
 801e004:	4630      	mov	r0, r6
 801e006:	f7ff ff93 	bl	801df30 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801e00a:	e7b5      	b.n	801df78 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801e00c:	f8d8 3000 	ldr.w	r3, [r8]
 801e010:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801e014:	442b      	add	r3, r5
 801e016:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801e01a:	4291      	cmp	r1, r2
 801e01c:	d119      	bne.n	801e052 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e01e:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801e022:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801e026:	4291      	cmp	r1, r2
 801e028:	d113      	bne.n	801e052 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801e02a:	6820      	ldr	r0, [r4, #0]
 801e02c:	466a      	mov	r2, sp
 801e02e:	6861      	ldr	r1, [r4, #4]
 801e030:	c203      	stmia	r2!, {r0, r1}
 801e032:	4619      	mov	r1, r3
 801e034:	4668      	mov	r0, sp
 801e036:	f7fc ff7d 	bl	801af34 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e03a:	f8d8 3000 	ldr.w	r3, [r8]
 801e03e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801e042:	442b      	add	r3, r5
 801e044:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801e048:	4413      	add	r3, r2
 801e04a:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801e04e:	4293      	cmp	r3, r2
 801e050:	ddd7      	ble.n	801e002 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801e052:	4620      	mov	r0, r4
 801e054:	f7f8 fa91 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801e058:	b990      	cbnz	r0, 801e080 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801e05a:	88a7      	ldrh	r7, [r4, #4]
 801e05c:	88e3      	ldrh	r3, [r4, #6]
 801e05e:	fb17 f703 	smulbb	r7, r7, r3
 801e062:	f8d8 3000 	ldr.w	r3, [r8]
 801e066:	441d      	add	r5, r3
 801e068:	4628      	mov	r0, r5
 801e06a:	f7f8 fa86 	bl	801657a <_ZNK8touchgfx4Rect7isEmptyEv>
 801e06e:	b948      	cbnz	r0, 801e084 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801e070:	88ab      	ldrh	r3, [r5, #4]
 801e072:	88ea      	ldrh	r2, [r5, #6]
 801e074:	fb13 f302 	smulbb	r3, r3, r2
 801e078:	42bb      	cmp	r3, r7
 801e07a:	f6bf af7c 	bge.w	801df76 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801e07e:	e79e      	b.n	801dfbe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801e080:	2700      	movs	r7, #0
 801e082:	e7ee      	b.n	801e062 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801e084:	2300      	movs	r3, #0
 801e086:	e7f7      	b.n	801e078 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801e088:	2003c344 	.word	0x2003c344
 801e08c:	2003c32c 	.word	0x2003c32c

0801e090 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801e090:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e092:	4c24      	ldr	r4, [pc, #144]	; (801e124 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801e094:	6823      	ldr	r3, [r4, #0]
 801e096:	2b00      	cmp	r3, #0
 801e098:	d042      	beq.n	801e120 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e09a:	4a23      	ldr	r2, [pc, #140]	; (801e128 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801e09c:	4d23      	ldr	r5, [pc, #140]	; (801e12c <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801e09e:	8811      	ldrh	r1, [r2, #0]
 801e0a0:	f8b5 c000 	ldrh.w	ip, [r5]
 801e0a4:	4822      	ldr	r0, [pc, #136]	; (801e130 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801e0a6:	4461      	add	r1, ip
 801e0a8:	1c4a      	adds	r2, r1, #1
 801e0aa:	008f      	lsls	r7, r1, #2
 801e0ac:	f022 0201 	bic.w	r2, r2, #1
 801e0b0:	19de      	adds	r6, r3, r7
 801e0b2:	0412      	lsls	r2, r2, #16
 801e0b4:	6006      	str	r6, [r0, #0]
 801e0b6:	4e1f      	ldr	r6, [pc, #124]	; (801e134 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801e0b8:	0c12      	lsrs	r2, r2, #16
 801e0ba:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801e0be:	19da      	adds	r2, r3, r7
 801e0c0:	6032      	str	r2, [r6, #0]
 801e0c2:	220e      	movs	r2, #14
 801e0c4:	fb02 f20c 	mul.w	r2, r2, ip
 801e0c8:	3203      	adds	r2, #3
 801e0ca:	f022 0203 	bic.w	r2, r2, #3
 801e0ce:	443a      	add	r2, r7
 801e0d0:	4f19      	ldr	r7, [pc, #100]	; (801e138 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801e0d2:	4413      	add	r3, r2
 801e0d4:	603b      	str	r3, [r7, #0]
 801e0d6:	2300      	movs	r3, #0
 801e0d8:	4f18      	ldr	r7, [pc, #96]	; (801e13c <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801e0da:	469c      	mov	ip, r3
 801e0dc:	803b      	strh	r3, [r7, #0]
 801e0de:	4f18      	ldr	r7, [pc, #96]	; (801e140 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801e0e0:	683f      	ldr	r7, [r7, #0]
 801e0e2:	1aba      	subs	r2, r7, r2
 801e0e4:	4f17      	ldr	r7, [pc, #92]	; (801e144 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801e0e6:	603a      	str	r2, [r7, #0]
 801e0e8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 801e0ec:	4a16      	ldr	r2, [pc, #88]	; (801e148 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801e0ee:	8013      	strh	r3, [r2, #0]
 801e0f0:	428b      	cmp	r3, r1
 801e0f2:	d10d      	bne.n	801e110 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801e0f4:	882d      	ldrh	r5, [r5, #0]
 801e0f6:	2300      	movs	r3, #0
 801e0f8:	6830      	ldr	r0, [r6, #0]
 801e0fa:	240e      	movs	r4, #14
 801e0fc:	429d      	cmp	r5, r3
 801e0fe:	d90f      	bls.n	801e120 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801e100:	fb04 0203 	mla	r2, r4, r3, r0
 801e104:	3301      	adds	r3, #1
 801e106:	7b11      	ldrb	r1, [r2, #12]
 801e108:	f36f 1145 	bfc	r1, #5, #1
 801e10c:	7311      	strb	r1, [r2, #12]
 801e10e:	e7f5      	b.n	801e0fc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801e110:	6822      	ldr	r2, [r4, #0]
 801e112:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801e116:	6802      	ldr	r2, [r0, #0]
 801e118:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801e11c:	3301      	adds	r3, #1
 801e11e:	e7e7      	b.n	801e0f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801e120:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e122:	bf00      	nop
 801e124:	2003c328 	.word	0x2003c328
 801e128:	2003c344 	.word	0x2003c344
 801e12c:	2003c348 	.word	0x2003c348
 801e130:	2003c33c 	.word	0x2003c33c
 801e134:	2003c32c 	.word	0x2003c32c
 801e138:	2003c334 	.word	0x2003c334
 801e13c:	2003c346 	.word	0x2003c346
 801e140:	2003c330 	.word	0x2003c330
 801e144:	2003c340 	.word	0x2003c340
 801e148:	2003c338 	.word	0x2003c338

0801e14c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801e14c:	4b06      	ldr	r3, [pc, #24]	; (801e168 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	b943      	cbnz	r3, 801e164 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e152:	b139      	cbz	r1, 801e164 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801e154:	4b05      	ldr	r3, [pc, #20]	; (801e16c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801e156:	801a      	strh	r2, [r3, #0]
 801e158:	4b05      	ldr	r3, [pc, #20]	; (801e170 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801e15a:	6019      	str	r1, [r3, #0]
 801e15c:	4b05      	ldr	r3, [pc, #20]	; (801e174 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801e15e:	6018      	str	r0, [r3, #0]
 801e160:	f7ff bf96 	b.w	801e090 <_ZN8touchgfx6Bitmap10clearCacheEv>
 801e164:	4770      	bx	lr
 801e166:	bf00      	nop
 801e168:	2003c334 	.word	0x2003c334
 801e16c:	2003c348 	.word	0x2003c348
 801e170:	2003c330 	.word	0x2003c330
 801e174:	2003c328 	.word	0x2003c328

0801e178 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801e178:	b470      	push	{r4, r5, r6}
 801e17a:	4c07      	ldr	r4, [pc, #28]	; (801e198 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801e17c:	4605      	mov	r5, r0
 801e17e:	4610      	mov	r0, r2
 801e180:	9a03      	ldr	r2, [sp, #12]
 801e182:	6826      	ldr	r6, [r4, #0]
 801e184:	b936      	cbnz	r6, 801e194 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801e186:	6025      	str	r5, [r4, #0]
 801e188:	4c04      	ldr	r4, [pc, #16]	; (801e19c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801e18a:	8021      	strh	r1, [r4, #0]
 801e18c:	4619      	mov	r1, r3
 801e18e:	bc70      	pop	{r4, r5, r6}
 801e190:	f7ff bfdc 	b.w	801e14c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801e194:	bc70      	pop	{r4, r5, r6}
 801e196:	4770      	bx	lr
 801e198:	2003c34c 	.word	0x2003c34c
 801e19c:	2003c344 	.word	0x2003c344

0801e1a0 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801e1a0:	4a12      	ldr	r2, [pc, #72]	; (801e1ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801e1a2:	8803      	ldrh	r3, [r0, #0]
 801e1a4:	8812      	ldrh	r2, [r2, #0]
 801e1a6:	4293      	cmp	r3, r2
 801e1a8:	d207      	bcs.n	801e1ba <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801e1aa:	4a11      	ldr	r2, [pc, #68]	; (801e1f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801e1ac:	2114      	movs	r1, #20
 801e1ae:	6812      	ldr	r2, [r2, #0]
 801e1b0:	fb01 2303 	mla	r3, r1, r3, r2
 801e1b4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801e1b8:	4770      	bx	lr
 801e1ba:	490e      	ldr	r1, [pc, #56]	; (801e1f4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801e1bc:	8809      	ldrh	r1, [r1, #0]
 801e1be:	4411      	add	r1, r2
 801e1c0:	428b      	cmp	r3, r1
 801e1c2:	da04      	bge.n	801e1ce <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801e1c4:	1a9b      	subs	r3, r3, r2
 801e1c6:	4a0c      	ldr	r2, [pc, #48]	; (801e1f8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801e1c8:	210e      	movs	r1, #14
 801e1ca:	6812      	ldr	r2, [r2, #0]
 801e1cc:	e7f0      	b.n	801e1b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801e1ce:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e1d2:	4293      	cmp	r3, r2
 801e1d4:	d108      	bne.n	801e1e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801e1d6:	4b09      	ldr	r3, [pc, #36]	; (801e1fc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801e1d8:	781b      	ldrb	r3, [r3, #0]
 801e1da:	b91b      	cbnz	r3, 801e1e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801e1dc:	4b08      	ldr	r3, [pc, #32]	; (801e200 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801e1de:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e1e2:	4770      	bx	lr
 801e1e4:	4b07      	ldr	r3, [pc, #28]	; (801e204 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801e1e6:	e7fa      	b.n	801e1de <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801e1e8:	2000      	movs	r0, #0
 801e1ea:	4770      	bx	lr
 801e1ec:	2003c344 	.word	0x2003c344
 801e1f0:	2003c34c 	.word	0x2003c34c
 801e1f4:	2003c348 	.word	0x2003c348
 801e1f8:	2003c32c 	.word	0x2003c32c
 801e1fc:	2003c2b4 	.word	0x2003c2b4
 801e200:	2003c2b6 	.word	0x2003c2b6
 801e204:	2003c2b8 	.word	0x2003c2b8

0801e208 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801e208:	4a12      	ldr	r2, [pc, #72]	; (801e254 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801e20a:	8803      	ldrh	r3, [r0, #0]
 801e20c:	8812      	ldrh	r2, [r2, #0]
 801e20e:	4293      	cmp	r3, r2
 801e210:	d207      	bcs.n	801e222 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801e212:	4a11      	ldr	r2, [pc, #68]	; (801e258 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801e214:	2114      	movs	r1, #20
 801e216:	6812      	ldr	r2, [r2, #0]
 801e218:	fb01 2303 	mla	r3, r1, r3, r2
 801e21c:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801e220:	4770      	bx	lr
 801e222:	490e      	ldr	r1, [pc, #56]	; (801e25c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801e224:	8809      	ldrh	r1, [r1, #0]
 801e226:	4411      	add	r1, r2
 801e228:	428b      	cmp	r3, r1
 801e22a:	da04      	bge.n	801e236 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801e22c:	1a9b      	subs	r3, r3, r2
 801e22e:	4a0c      	ldr	r2, [pc, #48]	; (801e260 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801e230:	210e      	movs	r1, #14
 801e232:	6812      	ldr	r2, [r2, #0]
 801e234:	e7f0      	b.n	801e218 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801e236:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e23a:	4293      	cmp	r3, r2
 801e23c:	d108      	bne.n	801e250 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801e23e:	4b09      	ldr	r3, [pc, #36]	; (801e264 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801e240:	781b      	ldrb	r3, [r3, #0]
 801e242:	b91b      	cbnz	r3, 801e24c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801e244:	4b08      	ldr	r3, [pc, #32]	; (801e268 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801e246:	f9b3 0000 	ldrsh.w	r0, [r3]
 801e24a:	4770      	bx	lr
 801e24c:	4b07      	ldr	r3, [pc, #28]	; (801e26c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801e24e:	e7fa      	b.n	801e246 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801e250:	2000      	movs	r0, #0
 801e252:	4770      	bx	lr
 801e254:	2003c344 	.word	0x2003c344
 801e258:	2003c34c 	.word	0x2003c34c
 801e25c:	2003c348 	.word	0x2003c348
 801e260:	2003c32c 	.word	0x2003c32c
 801e264:	2003c2b4 	.word	0x2003c2b4
 801e268:	2003c2b8 	.word	0x2003c2b8
 801e26c:	2003c2b6 	.word	0x2003c2b6

0801e270 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801e270:	4a17      	ldr	r2, [pc, #92]	; (801e2d0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801e272:	8803      	ldrh	r3, [r0, #0]
 801e274:	8812      	ldrh	r2, [r2, #0]
 801e276:	4293      	cmp	r3, r2
 801e278:	d213      	bcs.n	801e2a2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801e27a:	4a16      	ldr	r2, [pc, #88]	; (801e2d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801e27c:	2114      	movs	r1, #20
 801e27e:	6812      	ldr	r2, [r2, #0]
 801e280:	fb01 2303 	mla	r3, r1, r3, r2
 801e284:	8a1a      	ldrh	r2, [r3, #16]
 801e286:	8919      	ldrh	r1, [r3, #8]
 801e288:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801e28c:	428a      	cmp	r2, r1
 801e28e:	db1d      	blt.n	801e2cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e290:	8a58      	ldrh	r0, [r3, #18]
 801e292:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801e296:	895b      	ldrh	r3, [r3, #10]
 801e298:	4298      	cmp	r0, r3
 801e29a:	bfac      	ite	ge
 801e29c:	2000      	movge	r0, #0
 801e29e:	2001      	movlt	r0, #1
 801e2a0:	4770      	bx	lr
 801e2a2:	490d      	ldr	r1, [pc, #52]	; (801e2d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801e2a4:	8809      	ldrh	r1, [r1, #0]
 801e2a6:	4411      	add	r1, r2
 801e2a8:	428b      	cmp	r3, r1
 801e2aa:	da0d      	bge.n	801e2c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801e2ac:	1a9b      	subs	r3, r3, r2
 801e2ae:	4a0b      	ldr	r2, [pc, #44]	; (801e2dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801e2b0:	210e      	movs	r1, #14
 801e2b2:	6812      	ldr	r2, [r2, #0]
 801e2b4:	fb01 2303 	mla	r3, r1, r3, r2
 801e2b8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801e2bc:	891a      	ldrh	r2, [r3, #8]
 801e2be:	4291      	cmp	r1, r2
 801e2c0:	db04      	blt.n	801e2cc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801e2c2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801e2c6:	e7e6      	b.n	801e296 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801e2c8:	2000      	movs	r0, #0
 801e2ca:	4770      	bx	lr
 801e2cc:	2001      	movs	r0, #1
 801e2ce:	4770      	bx	lr
 801e2d0:	2003c344 	.word	0x2003c344
 801e2d4:	2003c34c 	.word	0x2003c34c
 801e2d8:	2003c348 	.word	0x2003c348
 801e2dc:	2003c32c 	.word	0x2003c32c

0801e2e0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801e2e0:	4a12      	ldr	r2, [pc, #72]	; (801e32c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801e2e2:	8803      	ldrh	r3, [r0, #0]
 801e2e4:	8811      	ldrh	r1, [r2, #0]
 801e2e6:	428b      	cmp	r3, r1
 801e2e8:	d20b      	bcs.n	801e302 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801e2ea:	4a11      	ldr	r2, [pc, #68]	; (801e330 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e2ec:	6812      	ldr	r2, [r2, #0]
 801e2ee:	b112      	cbz	r2, 801e2f6 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801e2f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e2f4:	b9c0      	cbnz	r0, 801e328 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801e2f6:	4a0f      	ldr	r2, [pc, #60]	; (801e334 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801e2f8:	6811      	ldr	r1, [r2, #0]
 801e2fa:	2214      	movs	r2, #20
 801e2fc:	4353      	muls	r3, r2
 801e2fe:	58c8      	ldr	r0, [r1, r3]
 801e300:	4770      	bx	lr
 801e302:	4a0d      	ldr	r2, [pc, #52]	; (801e338 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801e304:	8812      	ldrh	r2, [r2, #0]
 801e306:	440a      	add	r2, r1
 801e308:	4293      	cmp	r3, r2
 801e30a:	da04      	bge.n	801e316 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801e30c:	4a08      	ldr	r2, [pc, #32]	; (801e330 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801e30e:	6812      	ldr	r2, [r2, #0]
 801e310:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801e314:	4770      	bx	lr
 801e316:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e31a:	4293      	cmp	r3, r2
 801e31c:	d103      	bne.n	801e326 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801e31e:	4b07      	ldr	r3, [pc, #28]	; (801e33c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801e320:	681b      	ldr	r3, [r3, #0]
 801e322:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801e324:	4770      	bx	lr
 801e326:	2000      	movs	r0, #0
 801e328:	4770      	bx	lr
 801e32a:	bf00      	nop
 801e32c:	2003c344 	.word	0x2003c344
 801e330:	2003c328 	.word	0x2003c328
 801e334:	2003c34c 	.word	0x2003c34c
 801e338:	2003c348 	.word	0x2003c348
 801e33c:	2003c2bc 	.word	0x2003c2bc

0801e340 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801e340:	4b24      	ldr	r3, [pc, #144]	; (801e3d4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801e342:	8802      	ldrh	r2, [r0, #0]
 801e344:	8818      	ldrh	r0, [r3, #0]
 801e346:	4282      	cmp	r2, r0
 801e348:	d221      	bcs.n	801e38e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801e34a:	4b23      	ldr	r3, [pc, #140]	; (801e3d8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801e34c:	6819      	ldr	r1, [r3, #0]
 801e34e:	2314      	movs	r3, #20
 801e350:	fb03 1302 	mla	r3, r3, r2, r1
 801e354:	6858      	ldr	r0, [r3, #4]
 801e356:	2800      	cmp	r0, #0
 801e358:	d03a      	beq.n	801e3d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e35a:	4920      	ldr	r1, [pc, #128]	; (801e3dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e35c:	6809      	ldr	r1, [r1, #0]
 801e35e:	2900      	cmp	r1, #0
 801e360:	d036      	beq.n	801e3d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e362:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801e366:	2900      	cmp	r1, #0
 801e368:	d032      	beq.n	801e3d0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801e36a:	891a      	ldrh	r2, [r3, #8]
 801e36c:	8958      	ldrh	r0, [r3, #10]
 801e36e:	4350      	muls	r0, r2
 801e370:	7c5a      	ldrb	r2, [r3, #17]
 801e372:	7cdb      	ldrb	r3, [r3, #19]
 801e374:	0952      	lsrs	r2, r2, #5
 801e376:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801e37a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801e37e:	2b0b      	cmp	r3, #11
 801e380:	bf18      	it	ne
 801e382:	0040      	lslne	r0, r0, #1
 801e384:	3003      	adds	r0, #3
 801e386:	f020 0003 	bic.w	r0, r0, #3
 801e38a:	4408      	add	r0, r1
 801e38c:	4770      	bx	lr
 801e38e:	4b14      	ldr	r3, [pc, #80]	; (801e3e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801e390:	881b      	ldrh	r3, [r3, #0]
 801e392:	4403      	add	r3, r0
 801e394:	429a      	cmp	r2, r3
 801e396:	da1a      	bge.n	801e3ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e398:	4b12      	ldr	r3, [pc, #72]	; (801e3e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801e39a:	1a10      	subs	r0, r2, r0
 801e39c:	210e      	movs	r1, #14
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	fb01 3000 	mla	r0, r1, r0, r3
 801e3a4:	7b03      	ldrb	r3, [r0, #12]
 801e3a6:	f003 031f 	and.w	r3, r3, #31
 801e3aa:	2b0b      	cmp	r3, #11
 801e3ac:	d10b      	bne.n	801e3c6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801e3ae:	8903      	ldrh	r3, [r0, #8]
 801e3b0:	8940      	ldrh	r0, [r0, #10]
 801e3b2:	4358      	muls	r0, r3
 801e3b4:	4b09      	ldr	r3, [pc, #36]	; (801e3dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801e3b6:	3003      	adds	r0, #3
 801e3b8:	6819      	ldr	r1, [r3, #0]
 801e3ba:	f020 0303 	bic.w	r3, r0, #3
 801e3be:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801e3c2:	4418      	add	r0, r3
 801e3c4:	4770      	bx	lr
 801e3c6:	2b0d      	cmp	r3, #13
 801e3c8:	d101      	bne.n	801e3ce <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801e3ca:	300d      	adds	r0, #13
 801e3cc:	4770      	bx	lr
 801e3ce:	2000      	movs	r0, #0
 801e3d0:	4770      	bx	lr
 801e3d2:	bf00      	nop
 801e3d4:	2003c344 	.word	0x2003c344
 801e3d8:	2003c34c 	.word	0x2003c34c
 801e3dc:	2003c328 	.word	0x2003c328
 801e3e0:	2003c348 	.word	0x2003c348
 801e3e4:	2003c32c 	.word	0x2003c32c

0801e3e8 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801e3e8:	4a17      	ldr	r2, [pc, #92]	; (801e448 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 801e3ea:	b510      	push	{r4, lr}
 801e3ec:	8803      	ldrh	r3, [r0, #0]
 801e3ee:	8812      	ldrh	r2, [r2, #0]
 801e3f0:	4293      	cmp	r3, r2
 801e3f2:	d20c      	bcs.n	801e40e <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801e3f4:	4a15      	ldr	r2, [pc, #84]	; (801e44c <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 801e3f6:	2114      	movs	r1, #20
 801e3f8:	6812      	ldr	r2, [r2, #0]
 801e3fa:	fb01 2303 	mla	r3, r1, r3, r2
 801e3fe:	7c58      	ldrb	r0, [r3, #17]
 801e400:	0942      	lsrs	r2, r0, #5
 801e402:	7cd8      	ldrb	r0, [r3, #19]
 801e404:	f3c0 1042 	ubfx	r0, r0, #5, #3
 801e408:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 801e40c:	bd10      	pop	{r4, pc}
 801e40e:	4910      	ldr	r1, [pc, #64]	; (801e450 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 801e410:	8809      	ldrh	r1, [r1, #0]
 801e412:	4411      	add	r1, r2
 801e414:	428b      	cmp	r3, r1
 801e416:	da09      	bge.n	801e42c <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 801e418:	1a9b      	subs	r3, r3, r2
 801e41a:	4a0e      	ldr	r2, [pc, #56]	; (801e454 <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 801e41c:	210e      	movs	r1, #14
 801e41e:	6812      	ldr	r2, [r2, #0]
 801e420:	fb01 2303 	mla	r3, r1, r3, r2
 801e424:	7b18      	ldrb	r0, [r3, #12]
 801e426:	f000 001f 	and.w	r0, r0, #31
 801e42a:	e7ef      	b.n	801e40c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801e42c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801e430:	4293      	cmp	r3, r2
 801e432:	d106      	bne.n	801e442 <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801e434:	f7f0 fb7e 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 801e438:	6803      	ldr	r3, [r0, #0]
 801e43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e440:	4718      	bx	r3
 801e442:	2000      	movs	r0, #0
 801e444:	e7e2      	b.n	801e40c <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801e446:	bf00      	nop
 801e448:	2003c344 	.word	0x2003c344
 801e44c:	2003c34c 	.word	0x2003c34c
 801e450:	2003c348 	.word	0x2003c348
 801e454:	2003c32c 	.word	0x2003c32c

0801e458 <_ZNK8touchgfx8LCD32bpp8bitDepthEv>:
 801e458:	2020      	movs	r0, #32
 801e45a:	4770      	bx	lr

0801e45c <_ZNK8touchgfx8LCD32bpp17framebufferFormatEv>:
 801e45c:	2002      	movs	r0, #2
 801e45e:	4770      	bx	lr

0801e460 <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv>:
 801e460:	4b02      	ldr	r3, [pc, #8]	; (801e46c <_ZNK8touchgfx8LCD32bpp17framebufferStrideEv+0xc>)
 801e462:	8818      	ldrh	r0, [r3, #0]
 801e464:	0080      	lsls	r0, r0, #2
 801e466:	b280      	uxth	r0, r0
 801e468:	4770      	bx	lr
 801e46a:	bf00      	nop
 801e46c:	2003c2b6 	.word	0x2003c2b6

0801e470 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801e470:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e474:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 801e478:	980c      	ldr	r0, [sp, #48]	; 0x30
 801e47a:	f1bc 0f00 	cmp.w	ip, #0
 801e47e:	d073      	beq.n	801e568 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e480:	f9b3 4004 	ldrsh.w	r4, [r3, #4]
 801e484:	2c00      	cmp	r4, #0
 801e486:	dd6f      	ble.n	801e568 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e488:	f9b3 6006 	ldrsh.w	r6, [r3, #6]
 801e48c:	2e00      	cmp	r6, #0
 801e48e:	dd6b      	ble.n	801e568 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e490:	f9b3 5002 	ldrsh.w	r5, [r3, #2]
 801e494:	4356      	muls	r6, r2
 801e496:	f9b3 3000 	ldrsh.w	r3, [r3]
 801e49a:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801e49e:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 801e4a2:	fb02 3305 	mla	r3, r2, r5, r3
 801e4a6:	eba2 0204 	sub.w	r2, r2, r4
 801e4aa:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e4ae:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801e4b2:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 801e4b6:	d10a      	bne.n	801e4ce <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5e>
 801e4b8:	42b1      	cmp	r1, r6
 801e4ba:	d255      	bcs.n	801e568 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e4bc:	eb01 030a 	add.w	r3, r1, sl
 801e4c0:	4299      	cmp	r1, r3
 801e4c2:	d202      	bcs.n	801e4ca <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x5a>
 801e4c4:	f841 0b04 	str.w	r0, [r1], #4
 801e4c8:	e7fa      	b.n	801e4c0 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x50>
 801e4ca:	4411      	add	r1, r2
 801e4cc:	e7f4      	b.n	801e4b8 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x48>
 801e4ce:	fa1f fe8c 	uxth.w	lr, ip
 801e4d2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801e4d6:	f3c0 2807 	ubfx	r8, r0, #8, #8
 801e4da:	fa5f f980 	uxtb.w	r9, r0
 801e4de:	fb03 f30e 	mul.w	r3, r3, lr
 801e4e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 801e4e6:	fb08 f80e 	mul.w	r8, r8, lr
 801e4ea:	9301      	str	r3, [sp, #4]
 801e4ec:	ea40 630c 	orr.w	r3, r0, ip, lsl #24
 801e4f0:	fb09 f90e 	mul.w	r9, r9, lr
 801e4f4:	9300      	str	r3, [sp, #0]
 801e4f6:	42b1      	cmp	r1, r6
 801e4f8:	d236      	bcs.n	801e568 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf8>
 801e4fa:	eb01 0b0a 	add.w	fp, r1, sl
 801e4fe:	4559      	cmp	r1, fp
 801e500:	d230      	bcs.n	801e564 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xf4>
 801e502:	680b      	ldr	r3, [r1, #0]
 801e504:	0e1c      	lsrs	r4, r3, #24
 801e506:	d102      	bne.n	801e50e <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x9e>
 801e508:	9b00      	ldr	r3, [sp, #0]
 801e50a:	600b      	str	r3, [r1, #0]
 801e50c:	e7f7      	b.n	801e4fe <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801e50e:	fb04 f00e 	mul.w	r0, r4, lr
 801e512:	eb0c 0504 	add.w	r5, ip, r4
 801e516:	3104      	adds	r1, #4
 801e518:	1c47      	adds	r7, r0, #1
 801e51a:	eb07 2720 	add.w	r7, r7, r0, asr #8
 801e51e:	1238      	asrs	r0, r7, #8
 801e520:	1a27      	subs	r7, r4, r0
 801e522:	1a2d      	subs	r5, r5, r0
 801e524:	f3c3 4407 	ubfx	r4, r3, #16, #8
 801e528:	9801      	ldr	r0, [sp, #4]
 801e52a:	b2ed      	uxtb	r5, r5
 801e52c:	fb07 0404 	mla	r4, r7, r4, r0
 801e530:	b2d8      	uxtb	r0, r3
 801e532:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e536:	fb07 9000 	mla	r0, r7, r0, r9
 801e53a:	fbb4 f4f5 	udiv	r4, r4, r5
 801e53e:	fbb0 f0f5 	udiv	r0, r0, r5
 801e542:	0424      	lsls	r4, r4, #16
 801e544:	b2c0      	uxtb	r0, r0
 801e546:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 801e54a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
 801e54e:	4320      	orrs	r0, r4
 801e550:	fb07 8403 	mla	r4, r7, r3, r8
 801e554:	fbb4 f4f5 	udiv	r4, r4, r5
 801e558:	0224      	lsls	r4, r4, #8
 801e55a:	b2a4      	uxth	r4, r4
 801e55c:	4320      	orrs	r0, r4
 801e55e:	f841 0c04 	str.w	r0, [r1, #-4]
 801e562:	e7cc      	b.n	801e4fe <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x8e>
 801e564:	4411      	add	r1, r2
 801e566:	e7c6      	b.n	801e4f6 <_ZN8touchgfx8LCD32bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x86>
 801e568:	b003      	add	sp, #12
 801e56a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e570 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801e570:	2bff      	cmp	r3, #255	; 0xff
 801e572:	d061      	beq.n	801e638 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc8>
 801e574:	2a33      	cmp	r2, #51	; 0x33
 801e576:	d83d      	bhi.n	801e5f4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e578:	e8df f012 	tbh	[pc, r2, lsl #1]
 801e57c:	00500054 	.word	0x00500054
 801e580:	004e0052 	.word	0x004e0052
 801e584:	00560058 	.word	0x00560058
 801e588:	003c003c 	.word	0x003c003c
 801e58c:	010000fe 	.word	0x010000fe
 801e590:	010000fe 	.word	0x010000fe
 801e594:	003c003c 	.word	0x003c003c
 801e598:	003c003c 	.word	0x003c003c
 801e59c:	003c003c 	.word	0x003c003c
 801e5a0:	003c003c 	.word	0x003c003c
 801e5a4:	003c003c 	.word	0x003c003c
 801e5a8:	003c003c 	.word	0x003c003c
 801e5ac:	003c003c 	.word	0x003c003c
 801e5b0:	003c003c 	.word	0x003c003c
 801e5b4:	003c003c 	.word	0x003c003c
 801e5b8:	003c003c 	.word	0x003c003c
 801e5bc:	003c003c 	.word	0x003c003c
 801e5c0:	003c003c 	.word	0x003c003c
 801e5c4:	003c003c 	.word	0x003c003c
 801e5c8:	003c003c 	.word	0x003c003c
 801e5cc:	003c003c 	.word	0x003c003c
 801e5d0:	003c003c 	.word	0x003c003c
 801e5d4:	00340042 	.word	0x00340042
 801e5d8:	00e400eb 	.word	0x00e400eb
 801e5dc:	005a005c 	.word	0x005a005c
 801e5e0:	005a005c 	.word	0x005a005c
 801e5e4:	684b      	ldr	r3, [r1, #4]
 801e5e6:	781b      	ldrb	r3, [r3, #0]
 801e5e8:	2b01      	cmp	r3, #1
 801e5ea:	d005      	beq.n	801e5f8 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x88>
 801e5ec:	f0c0 80af 	bcc.w	801e74e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801e5f0:	2b02      	cmp	r3, #2
 801e5f2:	d003      	beq.n	801e5fc <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8c>
 801e5f4:	2000      	movs	r0, #0
 801e5f6:	4770      	bx	lr
 801e5f8:	6a00      	ldr	r0, [r0, #32]
 801e5fa:	4770      	bx	lr
 801e5fc:	6900      	ldr	r0, [r0, #16]
 801e5fe:	4770      	bx	lr
 801e600:	684b      	ldr	r3, [r1, #4]
 801e602:	781b      	ldrb	r3, [r3, #0]
 801e604:	2b01      	cmp	r3, #1
 801e606:	d005      	beq.n	801e614 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa4>
 801e608:	f0c0 80a8 	bcc.w	801e75c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801e60c:	2b02      	cmp	r3, #2
 801e60e:	d1f1      	bne.n	801e5f4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e610:	6880      	ldr	r0, [r0, #8]
 801e612:	4770      	bx	lr
 801e614:	6980      	ldr	r0, [r0, #24]
 801e616:	4770      	bx	lr
 801e618:	6c00      	ldr	r0, [r0, #64]	; 0x40
 801e61a:	4770      	bx	lr
 801e61c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 801e61e:	4770      	bx	lr
 801e620:	6b00      	ldr	r0, [r0, #48]	; 0x30
 801e622:	4770      	bx	lr
 801e624:	6b80      	ldr	r0, [r0, #56]	; 0x38
 801e626:	4770      	bx	lr
 801e628:	6d80      	ldr	r0, [r0, #88]	; 0x58
 801e62a:	4770      	bx	lr
 801e62c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801e62e:	4770      	bx	lr
 801e630:	6f00      	ldr	r0, [r0, #112]	; 0x70
 801e632:	4770      	bx	lr
 801e634:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801e636:	4770      	bx	lr
 801e638:	2a33      	cmp	r2, #51	; 0x33
 801e63a:	d8db      	bhi.n	801e5f4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e63c:	a301      	add	r3, pc, #4	; (adr r3, 801e644 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xd4>)
 801e63e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 801e642:	bf00      	nop
 801e644:	0801e76d 	.word	0x0801e76d
 801e648:	0801e765 	.word	0x0801e765
 801e64c:	0801e769 	.word	0x0801e769
 801e650:	0801e761 	.word	0x0801e761
 801e654:	0801e775 	.word	0x0801e775
 801e658:	0801e771 	.word	0x0801e771
 801e65c:	0801e5f5 	.word	0x0801e5f5
 801e660:	0801e5f5 	.word	0x0801e5f5
 801e664:	0801e779 	.word	0x0801e779
 801e668:	0801e77d 	.word	0x0801e77d
 801e66c:	0801e779 	.word	0x0801e779
 801e670:	0801e77d 	.word	0x0801e77d
 801e674:	0801e5f5 	.word	0x0801e5f5
 801e678:	0801e5f5 	.word	0x0801e5f5
 801e67c:	0801e5f5 	.word	0x0801e5f5
 801e680:	0801e5f5 	.word	0x0801e5f5
 801e684:	0801e5f5 	.word	0x0801e5f5
 801e688:	0801e5f5 	.word	0x0801e5f5
 801e68c:	0801e5f5 	.word	0x0801e5f5
 801e690:	0801e5f5 	.word	0x0801e5f5
 801e694:	0801e5f5 	.word	0x0801e5f5
 801e698:	0801e5f5 	.word	0x0801e5f5
 801e69c:	0801e5f5 	.word	0x0801e5f5
 801e6a0:	0801e5f5 	.word	0x0801e5f5
 801e6a4:	0801e5f5 	.word	0x0801e5f5
 801e6a8:	0801e5f5 	.word	0x0801e5f5
 801e6ac:	0801e5f5 	.word	0x0801e5f5
 801e6b0:	0801e5f5 	.word	0x0801e5f5
 801e6b4:	0801e5f5 	.word	0x0801e5f5
 801e6b8:	0801e5f5 	.word	0x0801e5f5
 801e6bc:	0801e5f5 	.word	0x0801e5f5
 801e6c0:	0801e5f5 	.word	0x0801e5f5
 801e6c4:	0801e5f5 	.word	0x0801e5f5
 801e6c8:	0801e5f5 	.word	0x0801e5f5
 801e6cc:	0801e5f5 	.word	0x0801e5f5
 801e6d0:	0801e5f5 	.word	0x0801e5f5
 801e6d4:	0801e5f5 	.word	0x0801e5f5
 801e6d8:	0801e5f5 	.word	0x0801e5f5
 801e6dc:	0801e5f5 	.word	0x0801e5f5
 801e6e0:	0801e5f5 	.word	0x0801e5f5
 801e6e4:	0801e5f5 	.word	0x0801e5f5
 801e6e8:	0801e5f5 	.word	0x0801e5f5
 801e6ec:	0801e5f5 	.word	0x0801e5f5
 801e6f0:	0801e5f5 	.word	0x0801e5f5
 801e6f4:	0801e72d 	.word	0x0801e72d
 801e6f8:	0801e715 	.word	0x0801e715
 801e6fc:	0801e753 	.word	0x0801e753
 801e700:	0801e745 	.word	0x0801e745
 801e704:	0801e785 	.word	0x0801e785
 801e708:	0801e781 	.word	0x0801e781
 801e70c:	0801e785 	.word	0x0801e785
 801e710:	0801e781 	.word	0x0801e781
 801e714:	684b      	ldr	r3, [r1, #4]
 801e716:	781b      	ldrb	r3, [r3, #0]
 801e718:	2b01      	cmp	r3, #1
 801e71a:	d005      	beq.n	801e728 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1b8>
 801e71c:	d317      	bcc.n	801e74e <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1de>
 801e71e:	2b02      	cmp	r3, #2
 801e720:	f47f af68 	bne.w	801e5f4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e724:	6940      	ldr	r0, [r0, #20]
 801e726:	4770      	bx	lr
 801e728:	6a40      	ldr	r0, [r0, #36]	; 0x24
 801e72a:	4770      	bx	lr
 801e72c:	684b      	ldr	r3, [r1, #4]
 801e72e:	781b      	ldrb	r3, [r3, #0]
 801e730:	2b01      	cmp	r3, #1
 801e732:	d005      	beq.n	801e740 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1d0>
 801e734:	d312      	bcc.n	801e75c <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1ec>
 801e736:	2b02      	cmp	r3, #2
 801e738:	f47f af5c 	bne.w	801e5f4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e73c:	68c0      	ldr	r0, [r0, #12]
 801e73e:	4770      	bx	lr
 801e740:	69c0      	ldr	r0, [r0, #28]
 801e742:	4770      	bx	lr
 801e744:	684b      	ldr	r3, [r1, #4]
 801e746:	781b      	ldrb	r3, [r3, #0]
 801e748:	2b00      	cmp	r3, #0
 801e74a:	f47f af53 	bne.w	801e5f4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e74e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 801e750:	4770      	bx	lr
 801e752:	684b      	ldr	r3, [r1, #4]
 801e754:	781b      	ldrb	r3, [r3, #0]
 801e756:	2b00      	cmp	r3, #0
 801e758:	f47f af4c 	bne.w	801e5f4 <_ZN8touchgfx8LCD32bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x84>
 801e75c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 801e75e:	4770      	bx	lr
 801e760:	6c40      	ldr	r0, [r0, #68]	; 0x44
 801e762:	4770      	bx	lr
 801e764:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 801e766:	4770      	bx	lr
 801e768:	6b40      	ldr	r0, [r0, #52]	; 0x34
 801e76a:	4770      	bx	lr
 801e76c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 801e76e:	4770      	bx	lr
 801e770:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 801e772:	4770      	bx	lr
 801e774:	6d40      	ldr	r0, [r0, #84]	; 0x54
 801e776:	4770      	bx	lr
 801e778:	6e00      	ldr	r0, [r0, #96]	; 0x60
 801e77a:	4770      	bx	lr
 801e77c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 801e77e:	4770      	bx	lr
 801e780:	6f40      	ldr	r0, [r0, #116]	; 0x74
 801e782:	4770      	bx	lr
 801e784:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801e786:	4770      	bx	lr

0801e788 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e78c:	b087      	sub	sp, #28
 801e78e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e792:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801e794:	9100      	str	r1, [sp, #0]
 801e796:	6868      	ldr	r0, [r5, #4]
 801e798:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801e79c:	9204      	str	r2, [sp, #16]
 801e79e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801e7a2:	e9dd 1416 	ldrd	r1, r4, [sp, #88]	; 0x58
 801e7a6:	fb00 1404 	mla	r4, r0, r4, r1
 801e7aa:	6829      	ldr	r1, [r5, #0]
 801e7ac:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801e7b0:	f8db 1000 	ldr.w	r1, [fp]
 801e7b4:	9101      	str	r1, [sp, #4]
 801e7b6:	f8db 1004 	ldr.w	r1, [fp, #4]
 801e7ba:	3104      	adds	r1, #4
 801e7bc:	9102      	str	r1, [sp, #8]
 801e7be:	9900      	ldr	r1, [sp, #0]
 801e7c0:	2900      	cmp	r1, #0
 801e7c2:	dc03      	bgt.n	801e7cc <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801e7c4:	9904      	ldr	r1, [sp, #16]
 801e7c6:	2900      	cmp	r1, #0
 801e7c8:	f340 815a 	ble.w	801ea80 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801e7cc:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e7ce:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801e7d2:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801e7d6:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e7d8:	f9bb 700c 	ldrsh.w	r7, [fp, #12]
 801e7dc:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	dd0e      	ble.n	801e802 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801e7e4:	1405      	asrs	r5, r0, #16
 801e7e6:	d405      	bmi.n	801e7f4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e7e8:	4565      	cmp	r5, ip
 801e7ea:	da03      	bge.n	801e7f4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e7ec:	140d      	asrs	r5, r1, #16
 801e7ee:	d401      	bmi.n	801e7f4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e7f0:	42bd      	cmp	r5, r7
 801e7f2:	db07      	blt.n	801e804 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e7f4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e7f6:	3b01      	subs	r3, #1
 801e7f8:	3404      	adds	r4, #4
 801e7fa:	4428      	add	r0, r5
 801e7fc:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e7fe:	4429      	add	r1, r5
 801e800:	e7ee      	b.n	801e7e0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801e802:	d04d      	beq.n	801e8a0 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801e804:	1e5d      	subs	r5, r3, #1
 801e806:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e808:	fb06 0605 	mla	r6, r6, r5, r0
 801e80c:	1436      	asrs	r6, r6, #16
 801e80e:	d43d      	bmi.n	801e88c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e810:	4566      	cmp	r6, ip
 801e812:	da3b      	bge.n	801e88c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e814:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e816:	fb06 1505 	mla	r5, r6, r5, r1
 801e81a:	142d      	asrs	r5, r5, #16
 801e81c:	d436      	bmi.n	801e88c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e81e:	42bd      	cmp	r5, r7
 801e820:	da34      	bge.n	801e88c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801e822:	1d25      	adds	r5, r4, #4
 801e824:	4699      	mov	r9, r3
 801e826:	f1b9 0f00 	cmp.w	r9, #0
 801e82a:	dd35      	ble.n	801e898 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 801e82c:	140e      	asrs	r6, r1, #16
 801e82e:	f9bb c008 	ldrsh.w	ip, [fp, #8]
 801e832:	1407      	asrs	r7, r0, #16
 801e834:	2aff      	cmp	r2, #255	; 0xff
 801e836:	46b6      	mov	lr, r6
 801e838:	9e01      	ldr	r6, [sp, #4]
 801e83a:	fb0c 660e 	mla	r6, ip, lr, r6
 801e83e:	5df6      	ldrb	r6, [r6, r7]
 801e840:	9f02      	ldr	r7, [sp, #8]
 801e842:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801e846:	ea4f 2726 	mov.w	r7, r6, asr #8
 801e84a:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801e84e:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801e852:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801e856:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801e85a:	b2f6      	uxtb	r6, r6
 801e85c:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801e860:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801e864:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e868:	f040 80d4 	bne.w	801ea14 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801e86c:	f805 6c04 	strb.w	r6, [r5, #-4]
 801e870:	f805 cc03 	strb.w	ip, [r5, #-3]
 801e874:	f805 7c02 	strb.w	r7, [r5, #-2]
 801e878:	f805 2c01 	strb.w	r2, [r5, #-1]
 801e87c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 801e87e:	3504      	adds	r5, #4
 801e880:	f109 39ff 	add.w	r9, r9, #4294967295
 801e884:	4430      	add	r0, r6
 801e886:	9e14      	ldr	r6, [sp, #80]	; 0x50
 801e888:	4431      	add	r1, r6
 801e88a:	e7cc      	b.n	801e826 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801e88c:	f04f 0c00 	mov.w	ip, #0
 801e890:	eb03 050c 	add.w	r5, r3, ip
 801e894:	2d00      	cmp	r5, #0
 801e896:	dc3f      	bgt.n	801e918 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801e898:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801e89c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801e8a0:	9b00      	ldr	r3, [sp, #0]
 801e8a2:	2b00      	cmp	r3, #0
 801e8a4:	f340 80ec 	ble.w	801ea80 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801e8a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e8ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8ae:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e8b2:	eeb0 6a62 	vmov.f32	s12, s5
 801e8b6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801e8ba:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e8be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8c2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801e8c6:	eeb0 6a43 	vmov.f32	s12, s6
 801e8ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801e8ce:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801e8d2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e8d6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e8da:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e8de:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e8e2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e8e6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e8ea:	ee12 1a90 	vmov	r1, s5
 801e8ee:	eef0 2a47 	vmov.f32	s5, s14
 801e8f2:	fb91 f3f3 	sdiv	r3, r1, r3
 801e8f6:	ee13 1a10 	vmov	r1, s6
 801e8fa:	9313      	str	r3, [sp, #76]	; 0x4c
 801e8fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e8fe:	eeb0 3a67 	vmov.f32	s6, s15
 801e902:	fb91 f3f3 	sdiv	r3, r1, r3
 801e906:	9314      	str	r3, [sp, #80]	; 0x50
 801e908:	9b00      	ldr	r3, [sp, #0]
 801e90a:	9904      	ldr	r1, [sp, #16]
 801e90c:	3b01      	subs	r3, #1
 801e90e:	9300      	str	r3, [sp, #0]
 801e910:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e912:	bf08      	it	eq
 801e914:	460b      	moveq	r3, r1
 801e916:	e752      	b.n	801e7be <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801e918:	1407      	asrs	r7, r0, #16
 801e91a:	d435      	bmi.n	801e988 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e91c:	f8db 6008 	ldr.w	r6, [fp, #8]
 801e920:	42be      	cmp	r6, r7
 801e922:	dd31      	ble.n	801e988 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e924:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801e928:	d42e      	bmi.n	801e988 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e92a:	f8db 500c 	ldr.w	r5, [fp, #12]
 801e92e:	4575      	cmp	r5, lr
 801e930:	dd2a      	ble.n	801e988 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e932:	9d01      	ldr	r5, [sp, #4]
 801e934:	b236      	sxth	r6, r6
 801e936:	2aff      	cmp	r2, #255	; 0xff
 801e938:	fb0e 5606 	mla	r6, lr, r6, r5
 801e93c:	5df5      	ldrb	r5, [r6, r7]
 801e93e:	9e02      	ldr	r6, [sp, #8]
 801e940:	f836 5015 	ldrh.w	r5, [r6, r5, lsl #1]
 801e944:	ea4f 2625 	mov.w	r6, r5, asr #8
 801e948:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801e94c:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801e950:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801e954:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e958:	b2ed      	uxtb	r5, r5
 801e95a:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801e95e:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801e962:	9603      	str	r6, [sp, #12]
 801e964:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801e968:	462e      	mov	r6, r5
 801e96a:	d114      	bne.n	801e996 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801e96c:	f06f 0503 	mvn.w	r5, #3
 801e970:	fb05 fe0c 	mul.w	lr, r5, ip
 801e974:	9d03      	ldr	r5, [sp, #12]
 801e976:	f804 600e 	strb.w	r6, [r4, lr]
 801e97a:	44a6      	add	lr, r4
 801e97c:	f88e 7001 	strb.w	r7, [lr, #1]
 801e980:	f88e 5002 	strb.w	r5, [lr, #2]
 801e984:	f88e 2003 	strb.w	r2, [lr, #3]
 801e988:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801e98a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e98e:	4428      	add	r0, r5
 801e990:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801e992:	4429      	add	r1, r5
 801e994:	e77c      	b.n	801e890 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801e996:	2a00      	cmp	r2, #0
 801e998:	d0f6      	beq.n	801e988 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801e99a:	fb12 f707 	smulbb	r7, r2, r7
 801e99e:	f06f 0503 	mvn.w	r5, #3
 801e9a2:	fb05 fa0c 	mul.w	sl, r5, ip
 801e9a6:	eb04 090a 	add.w	r9, r4, sl
 801e9aa:	f899 5003 	ldrb.w	r5, [r9, #3]
 801e9ae:	fb02 fe05 	mul.w	lr, r2, r5
 801e9b2:	f10e 0801 	add.w	r8, lr, #1
 801e9b6:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801e9ba:	eb02 0e05 	add.w	lr, r2, r5
 801e9be:	ea4f 2828 	mov.w	r8, r8, asr #8
 801e9c2:	ebae 0e08 	sub.w	lr, lr, r8
 801e9c6:	eba5 0808 	sub.w	r8, r5, r8
 801e9ca:	f814 500a 	ldrb.w	r5, [r4, sl]
 801e9ce:	fa5f fe8e 	uxtb.w	lr, lr
 801e9d2:	9505      	str	r5, [sp, #20]
 801e9d4:	fb16 f502 	smulbb	r5, r6, r2
 801e9d8:	462e      	mov	r6, r5
 801e9da:	9d05      	ldr	r5, [sp, #20]
 801e9dc:	fb08 6505 	mla	r5, r8, r5, r6
 801e9e0:	9e03      	ldr	r6, [sp, #12]
 801e9e2:	fb95 f5fe 	sdiv	r5, r5, lr
 801e9e6:	f804 500a 	strb.w	r5, [r4, sl]
 801e9ea:	fb12 f606 	smulbb	r6, r2, r6
 801e9ee:	f899 5001 	ldrb.w	r5, [r9, #1]
 801e9f2:	f889 e003 	strb.w	lr, [r9, #3]
 801e9f6:	fb08 7705 	mla	r7, r8, r5, r7
 801e9fa:	f899 5002 	ldrb.w	r5, [r9, #2]
 801e9fe:	fb08 6605 	mla	r6, r8, r5, r6
 801ea02:	fb97 f7fe 	sdiv	r7, r7, lr
 801ea06:	fb96 f6fe 	sdiv	r6, r6, lr
 801ea0a:	f889 7001 	strb.w	r7, [r9, #1]
 801ea0e:	f889 6002 	strb.w	r6, [r9, #2]
 801ea12:	e7b9      	b.n	801e988 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ea14:	2a00      	cmp	r2, #0
 801ea16:	f43f af31 	beq.w	801e87c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ea1a:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801ea1e:	fb16 f602 	smulbb	r6, r6, r2
 801ea22:	fb12 fc0c 	smulbb	ip, r2, ip
 801ea26:	fb12 f707 	smulbb	r7, r2, r7
 801ea2a:	fb02 fe0a 	mul.w	lr, r2, sl
 801ea2e:	f10e 0801 	add.w	r8, lr, #1
 801ea32:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801ea36:	eb02 0e0a 	add.w	lr, r2, sl
 801ea3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ea3e:	ebae 0e08 	sub.w	lr, lr, r8
 801ea42:	ebaa 0808 	sub.w	r8, sl, r8
 801ea46:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801ea4a:	fa5f fe8e 	uxtb.w	lr, lr
 801ea4e:	fb08 660a 	mla	r6, r8, sl, r6
 801ea52:	f805 ec01 	strb.w	lr, [r5, #-1]
 801ea56:	fb96 f6fe 	sdiv	r6, r6, lr
 801ea5a:	f805 6c04 	strb.w	r6, [r5, #-4]
 801ea5e:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801ea62:	fb08 cc06 	mla	ip, r8, r6, ip
 801ea66:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801ea6a:	fb08 7706 	mla	r7, r8, r6, r7
 801ea6e:	fb9c fcfe 	sdiv	ip, ip, lr
 801ea72:	fb97 f7fe 	sdiv	r7, r7, lr
 801ea76:	f805 cc03 	strb.w	ip, [r5, #-3]
 801ea7a:	f805 7c02 	strb.w	r7, [r5, #-2]
 801ea7e:	e6fd      	b.n	801e87c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ea80:	b007      	add	sp, #28
 801ea82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea86 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ea86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea8a:	b085      	sub	sp, #20
 801ea8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ea90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801ea92:	9203      	str	r2, [sp, #12]
 801ea94:	6860      	ldr	r0, [r4, #4]
 801ea96:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801ea98:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	; 0x50
 801ea9c:	e9dd 8e11 	ldrd	r8, lr, [sp, #68]	; 0x44
 801eaa0:	fb00 2505 	mla	r5, r0, r5, r2
 801eaa4:	6822      	ldr	r2, [r4, #0]
 801eaa6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801eaaa:	683a      	ldr	r2, [r7, #0]
 801eaac:	9201      	str	r2, [sp, #4]
 801eaae:	687a      	ldr	r2, [r7, #4]
 801eab0:	3204      	adds	r2, #4
 801eab2:	9202      	str	r2, [sp, #8]
 801eab4:	2900      	cmp	r1, #0
 801eab6:	dc03      	bgt.n	801eac0 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801eab8:	9a03      	ldr	r2, [sp, #12]
 801eaba:	2a00      	cmp	r2, #0
 801eabc:	f340 80c4 	ble.w	801ec48 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801eac0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801eac2:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801eac6:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801eaca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801eacc:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801ead0:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ead4:	2b00      	cmp	r3, #0
 801ead6:	dd0c      	ble.n	801eaf2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ead8:	1404      	asrs	r4, r0, #16
 801eada:	d405      	bmi.n	801eae8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801eadc:	454c      	cmp	r4, r9
 801eade:	da03      	bge.n	801eae8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801eae0:	1414      	asrs	r4, r2, #16
 801eae2:	d401      	bmi.n	801eae8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801eae4:	4564      	cmp	r4, ip
 801eae6:	db05      	blt.n	801eaf4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801eae8:	4440      	add	r0, r8
 801eaea:	4472      	add	r2, lr
 801eaec:	3b01      	subs	r3, #1
 801eaee:	3504      	adds	r5, #4
 801eaf0:	e7f0      	b.n	801ead4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801eaf2:	d00e      	beq.n	801eb12 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801eaf4:	1e5c      	subs	r4, r3, #1
 801eaf6:	fb08 0604 	mla	r6, r8, r4, r0
 801eafa:	1436      	asrs	r6, r6, #16
 801eafc:	d53e      	bpl.n	801eb7c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801eafe:	4699      	mov	r9, r3
 801eb00:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801eb04:	f1b9 0f00 	cmp.w	r9, #0
 801eb08:	dc6b      	bgt.n	801ebe2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801eb0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eb0e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801eb12:	2900      	cmp	r1, #0
 801eb14:	f340 8098 	ble.w	801ec48 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801eb18:	ee30 0a04 	vadd.f32	s0, s0, s8
 801eb1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801eb1e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801eb22:	3901      	subs	r1, #1
 801eb24:	eeb0 6a62 	vmov.f32	s12, s5
 801eb28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801eb2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801eb30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb34:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801eb38:	eeb0 6a43 	vmov.f32	s12, s6
 801eb3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801eb40:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801eb44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801eb48:	ee61 7a27 	vmul.f32	s15, s2, s15
 801eb4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801eb50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eb54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eb58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eb5c:	ee12 2a90 	vmov	r2, s5
 801eb60:	eef0 2a47 	vmov.f32	s5, s14
 801eb64:	fb92 f8f3 	sdiv	r8, r2, r3
 801eb68:	ee13 2a10 	vmov	r2, s6
 801eb6c:	eeb0 3a67 	vmov.f32	s6, s15
 801eb70:	fb92 fef3 	sdiv	lr, r2, r3
 801eb74:	9a03      	ldr	r2, [sp, #12]
 801eb76:	bf08      	it	eq
 801eb78:	4613      	moveq	r3, r2
 801eb7a:	e79b      	b.n	801eab4 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801eb7c:	454e      	cmp	r6, r9
 801eb7e:	dabe      	bge.n	801eafe <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eb80:	fb0e 2404 	mla	r4, lr, r4, r2
 801eb84:	1424      	asrs	r4, r4, #16
 801eb86:	d4ba      	bmi.n	801eafe <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eb88:	4564      	cmp	r4, ip
 801eb8a:	dab8      	bge.n	801eafe <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eb8c:	4699      	mov	r9, r3
 801eb8e:	46aa      	mov	sl, r5
 801eb90:	f1b9 0f00 	cmp.w	r9, #0
 801eb94:	ddb9      	ble.n	801eb0a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801eb96:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801eb9a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 801eb9e:	9c01      	ldr	r4, [sp, #4]
 801eba0:	1406      	asrs	r6, r0, #16
 801eba2:	4472      	add	r2, lr
 801eba4:	4440      	add	r0, r8
 801eba6:	fb0c 440b 	mla	r4, ip, fp, r4
 801ebaa:	f109 39ff 	add.w	r9, r9, #4294967295
 801ebae:	5da4      	ldrb	r4, [r4, r6]
 801ebb0:	9e02      	ldr	r6, [sp, #8]
 801ebb2:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801ebb6:	10f4      	asrs	r4, r6, #3
 801ebb8:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801ebbc:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ebc0:	00f6      	lsls	r6, r6, #3
 801ebc2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ebc6:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801ebca:	b2f6      	uxtb	r6, r6
 801ebcc:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801ebd0:	0224      	lsls	r4, r4, #8
 801ebd2:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ebd6:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801ebda:	4334      	orrs	r4, r6
 801ebdc:	f84a 4b04 	str.w	r4, [sl], #4
 801ebe0:	e7d6      	b.n	801eb90 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801ebe2:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801ebe6:	d42a      	bmi.n	801ec3e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801ebe8:	68be      	ldr	r6, [r7, #8]
 801ebea:	4566      	cmp	r6, ip
 801ebec:	dd27      	ble.n	801ec3e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801ebee:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801ebf2:	d424      	bmi.n	801ec3e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801ebf4:	68fc      	ldr	r4, [r7, #12]
 801ebf6:	455c      	cmp	r4, fp
 801ebf8:	dd21      	ble.n	801ec3e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 801ebfa:	9c01      	ldr	r4, [sp, #4]
 801ebfc:	b236      	sxth	r6, r6
 801ebfe:	fb0b 4606 	mla	r6, fp, r6, r4
 801ec02:	f06f 0b03 	mvn.w	fp, #3
 801ec06:	f816 400c 	ldrb.w	r4, [r6, ip]
 801ec0a:	fb0b fb09 	mul.w	fp, fp, r9
 801ec0e:	9e02      	ldr	r6, [sp, #8]
 801ec10:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801ec14:	10f4      	asrs	r4, r6, #3
 801ec16:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801ec1a:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801ec1e:	00f6      	lsls	r6, r6, #3
 801ec20:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801ec24:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801ec28:	b2f6      	uxtb	r6, r6
 801ec2a:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801ec2e:	0224      	lsls	r4, r4, #8
 801ec30:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801ec34:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801ec38:	4334      	orrs	r4, r6
 801ec3a:	f84a 400b 	str.w	r4, [sl, fp]
 801ec3e:	4440      	add	r0, r8
 801ec40:	4472      	add	r2, lr
 801ec42:	f109 39ff 	add.w	r9, r9, #4294967295
 801ec46:	e75d      	b.n	801eb04 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801ec48:	b005      	add	sp, #20
 801ec4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ec4e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ec4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec52:	b085      	sub	sp, #20
 801ec54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ec58:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801ec5a:	9101      	str	r1, [sp, #4]
 801ec5c:	6868      	ldr	r0, [r5, #4]
 801ec5e:	9203      	str	r2, [sp, #12]
 801ec60:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801ec64:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801ec68:	fb00 1404 	mla	r4, r0, r4, r1
 801ec6c:	6829      	ldr	r1, [r5, #0]
 801ec6e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801ec72:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ec74:	6809      	ldr	r1, [r1, #0]
 801ec76:	9102      	str	r1, [sp, #8]
 801ec78:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ec7a:	6849      	ldr	r1, [r1, #4]
 801ec7c:	3104      	adds	r1, #4
 801ec7e:	9100      	str	r1, [sp, #0]
 801ec80:	9901      	ldr	r1, [sp, #4]
 801ec82:	2900      	cmp	r1, #0
 801ec84:	dc03      	bgt.n	801ec8e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801ec86:	9903      	ldr	r1, [sp, #12]
 801ec88:	2900      	cmp	r1, #0
 801ec8a:	f340 813d 	ble.w	801ef08 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ec8e:	9916      	ldr	r1, [sp, #88]	; 0x58
 801ec90:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801ec94:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801ec98:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801ec9a:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801ec9e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801eca0:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801eca4:	2b00      	cmp	r3, #0
 801eca6:	dd0e      	ble.n	801ecc6 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801eca8:	1405      	asrs	r5, r0, #16
 801ecaa:	d405      	bmi.n	801ecb8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ecac:	4565      	cmp	r5, ip
 801ecae:	da03      	bge.n	801ecb8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ecb0:	140d      	asrs	r5, r1, #16
 801ecb2:	d401      	bmi.n	801ecb8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ecb4:	42bd      	cmp	r5, r7
 801ecb6:	db07      	blt.n	801ecc8 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ecb8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801ecba:	3b01      	subs	r3, #1
 801ecbc:	3404      	adds	r4, #4
 801ecbe:	4428      	add	r0, r5
 801ecc0:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ecc2:	4429      	add	r1, r5
 801ecc4:	e7ee      	b.n	801eca4 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ecc6:	d044      	beq.n	801ed52 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801ecc8:	1e5d      	subs	r5, r3, #1
 801ecca:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801eccc:	fb06 0605 	mla	r6, r6, r5, r0
 801ecd0:	1436      	asrs	r6, r6, #16
 801ecd2:	d436      	bmi.n	801ed42 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ecd4:	4566      	cmp	r6, ip
 801ecd6:	da34      	bge.n	801ed42 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ecd8:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ecda:	fb06 1505 	mla	r5, r6, r5, r1
 801ecde:	142d      	asrs	r5, r5, #16
 801ece0:	d42f      	bmi.n	801ed42 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ece2:	42bd      	cmp	r5, r7
 801ece4:	da2d      	bge.n	801ed42 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 801ece6:	1d25      	adds	r5, r4, #4
 801ece8:	469a      	mov	sl, r3
 801ecea:	f1ba 0f00 	cmp.w	sl, #0
 801ecee:	dd2c      	ble.n	801ed4a <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801ecf0:	140e      	asrs	r6, r1, #16
 801ecf2:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801ecf4:	2aff      	cmp	r2, #255	; 0xff
 801ecf6:	46b6      	mov	lr, r6
 801ecf8:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801ecfc:	9e02      	ldr	r6, [sp, #8]
 801ecfe:	ea4f 4720 	mov.w	r7, r0, asr #16
 801ed02:	fb0c 660e 	mla	r6, ip, lr, r6
 801ed06:	5df6      	ldrb	r6, [r6, r7]
 801ed08:	9f00      	ldr	r7, [sp, #0]
 801ed0a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801ed0e:	4437      	add	r7, r6
 801ed10:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ed14:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ed18:	9f00      	ldr	r7, [sp, #0]
 801ed1a:	f817 9006 	ldrb.w	r9, [r7, r6]
 801ed1e:	f040 80be 	bne.w	801ee9e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ed22:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ed26:	f805 8c03 	strb.w	r8, [r5, #-3]
 801ed2a:	f805 ec02 	strb.w	lr, [r5, #-2]
 801ed2e:	f805 2c01 	strb.w	r2, [r5, #-1]
 801ed32:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ed34:	3504      	adds	r5, #4
 801ed36:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ed3a:	4430      	add	r0, r6
 801ed3c:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ed3e:	4431      	add	r1, r6
 801ed40:	e7d3      	b.n	801ecea <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 801ed42:	2500      	movs	r5, #0
 801ed44:	195e      	adds	r6, r3, r5
 801ed46:	2e00      	cmp	r6, #0
 801ed48:	dc3f      	bgt.n	801edca <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 801ed4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ed4e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801ed52:	9b01      	ldr	r3, [sp, #4]
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	f340 80d7 	ble.w	801ef08 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801ed5a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ed60:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed64:	eeb0 6a62 	vmov.f32	s12, s5
 801ed68:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ed6c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed70:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed74:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ed78:	eeb0 6a43 	vmov.f32	s12, s6
 801ed7c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ed80:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ed84:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed88:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed8c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed90:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed94:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed98:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed9c:	ee12 1a90 	vmov	r1, s5
 801eda0:	eef0 2a47 	vmov.f32	s5, s14
 801eda4:	fb91 f3f3 	sdiv	r3, r1, r3
 801eda8:	ee13 1a10 	vmov	r1, s6
 801edac:	9311      	str	r3, [sp, #68]	; 0x44
 801edae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edb0:	eeb0 3a67 	vmov.f32	s6, s15
 801edb4:	fb91 f3f3 	sdiv	r3, r1, r3
 801edb8:	9312      	str	r3, [sp, #72]	; 0x48
 801edba:	9b01      	ldr	r3, [sp, #4]
 801edbc:	9903      	ldr	r1, [sp, #12]
 801edbe:	3b01      	subs	r3, #1
 801edc0:	9301      	str	r3, [sp, #4]
 801edc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801edc4:	bf08      	it	eq
 801edc6:	460b      	moveq	r3, r1
 801edc8:	e75a      	b.n	801ec80 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801edca:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801edce:	d427      	bmi.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801edd0:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801edd2:	68b7      	ldr	r7, [r6, #8]
 801edd4:	4567      	cmp	r7, ip
 801edd6:	dd23      	ble.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801edd8:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801eddc:	d420      	bmi.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801edde:	68f6      	ldr	r6, [r6, #12]
 801ede0:	4576      	cmp	r6, lr
 801ede2:	dd1d      	ble.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801ede4:	9e02      	ldr	r6, [sp, #8]
 801ede6:	b23f      	sxth	r7, r7
 801ede8:	2aff      	cmp	r2, #255	; 0xff
 801edea:	fb0e 6707 	mla	r7, lr, r7, r6
 801edee:	f817 600c 	ldrb.w	r6, [r7, ip]
 801edf2:	9f00      	ldr	r7, [sp, #0]
 801edf4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801edf8:	4437      	add	r7, r6
 801edfa:	f897 8002 	ldrb.w	r8, [r7, #2]
 801edfe:	f897 9001 	ldrb.w	r9, [r7, #1]
 801ee02:	9f00      	ldr	r7, [sp, #0]
 801ee04:	f817 a006 	ldrb.w	sl, [r7, r6]
 801ee08:	d110      	bne.n	801ee2c <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 801ee0a:	f06f 0603 	mvn.w	r6, #3
 801ee0e:	436e      	muls	r6, r5
 801ee10:	f804 a006 	strb.w	sl, [r4, r6]
 801ee14:	4426      	add	r6, r4
 801ee16:	f886 9001 	strb.w	r9, [r6, #1]
 801ee1a:	f886 8002 	strb.w	r8, [r6, #2]
 801ee1e:	70f2      	strb	r2, [r6, #3]
 801ee20:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ee22:	3d01      	subs	r5, #1
 801ee24:	4430      	add	r0, r6
 801ee26:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ee28:	4431      	add	r1, r6
 801ee2a:	e78b      	b.n	801ed44 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801ee2c:	2a00      	cmp	r2, #0
 801ee2e:	d0f7      	beq.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801ee30:	fb1a fa02 	smulbb	sl, sl, r2
 801ee34:	f06f 0603 	mvn.w	r6, #3
 801ee38:	fb12 f909 	smulbb	r9, r2, r9
 801ee3c:	fb12 f808 	smulbb	r8, r2, r8
 801ee40:	fb06 fb05 	mul.w	fp, r6, r5
 801ee44:	eb04 0c0b 	add.w	ip, r4, fp
 801ee48:	f89c 7003 	ldrb.w	r7, [ip, #3]
 801ee4c:	fb02 f607 	mul.w	r6, r2, r7
 801ee50:	f106 0e01 	add.w	lr, r6, #1
 801ee54:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 801ee58:	19d6      	adds	r6, r2, r7
 801ee5a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ee5e:	eba7 070e 	sub.w	r7, r7, lr
 801ee62:	eba6 060e 	sub.w	r6, r6, lr
 801ee66:	f814 e00b 	ldrb.w	lr, [r4, fp]
 801ee6a:	b2f6      	uxtb	r6, r6
 801ee6c:	fb07 aa0e 	mla	sl, r7, lr, sl
 801ee70:	fb9a faf6 	sdiv	sl, sl, r6
 801ee74:	f804 a00b 	strb.w	sl, [r4, fp]
 801ee78:	f89c e001 	ldrb.w	lr, [ip, #1]
 801ee7c:	f88c 6003 	strb.w	r6, [ip, #3]
 801ee80:	fb07 990e 	mla	r9, r7, lr, r9
 801ee84:	f89c e002 	ldrb.w	lr, [ip, #2]
 801ee88:	fb07 880e 	mla	r8, r7, lr, r8
 801ee8c:	fb99 f9f6 	sdiv	r9, r9, r6
 801ee90:	fb98 f8f6 	sdiv	r8, r8, r6
 801ee94:	f88c 9001 	strb.w	r9, [ip, #1]
 801ee98:	f88c 8002 	strb.w	r8, [ip, #2]
 801ee9c:	e7c0      	b.n	801ee20 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801ee9e:	2a00      	cmp	r2, #0
 801eea0:	f43f af47 	beq.w	801ed32 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801eea4:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 801eea8:	fb19 f902 	smulbb	r9, r9, r2
 801eeac:	fb12 f808 	smulbb	r8, r2, r8
 801eeb0:	fb02 fc0b 	mul.w	ip, r2, fp
 801eeb4:	eb02 060b 	add.w	r6, r2, fp
 801eeb8:	fb12 fe0e 	smulbb	lr, r2, lr
 801eebc:	f10c 0701 	add.w	r7, ip, #1
 801eec0:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801eec4:	ea4f 2c27 	mov.w	ip, r7, asr #8
 801eec8:	ebab 070c 	sub.w	r7, fp, ip
 801eecc:	eba6 060c 	sub.w	r6, r6, ip
 801eed0:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 801eed4:	b2f6      	uxtb	r6, r6
 801eed6:	fb07 990c 	mla	r9, r7, ip, r9
 801eeda:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 801eede:	f805 6c01 	strb.w	r6, [r5, #-1]
 801eee2:	fb07 880c 	mla	r8, r7, ip, r8
 801eee6:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 801eeea:	fb07 ee0c 	mla	lr, r7, ip, lr
 801eeee:	fb99 f9f6 	sdiv	r9, r9, r6
 801eef2:	fb98 f8f6 	sdiv	r8, r8, r6
 801eef6:	fb9e fef6 	sdiv	lr, lr, r6
 801eefa:	f805 9c04 	strb.w	r9, [r5, #-4]
 801eefe:	f805 8c03 	strb.w	r8, [r5, #-3]
 801ef02:	f805 ec02 	strb.w	lr, [r5, #-2]
 801ef06:	e714      	b.n	801ed32 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801ef08:	b005      	add	sp, #20
 801ef0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef0e <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ef0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef12:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ef14:	4693      	mov	fp, r2
 801ef16:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801ef18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ef1c:	6870      	ldr	r0, [r6, #4]
 801ef1e:	686f      	ldr	r7, [r5, #4]
 801ef20:	9100      	str	r1, [sp, #0]
 801ef22:	3704      	adds	r7, #4
 801ef24:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 801ef28:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801ef2c:	fb00 2404 	mla	r4, r0, r4, r2
 801ef30:	6832      	ldr	r2, [r6, #0]
 801ef32:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801ef36:	682a      	ldr	r2, [r5, #0]
 801ef38:	9201      	str	r2, [sp, #4]
 801ef3a:	9a00      	ldr	r2, [sp, #0]
 801ef3c:	2a00      	cmp	r2, #0
 801ef3e:	dc03      	bgt.n	801ef48 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801ef40:	f1bb 0f00 	cmp.w	fp, #0
 801ef44:	f340 80bd 	ble.w	801f0c2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ef48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ef4a:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 801ef4e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801ef52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ef54:	f9b5 900c 	ldrsh.w	r9, [r5, #12]
 801ef58:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801ef5c:	2b00      	cmp	r3, #0
 801ef5e:	dd0c      	ble.n	801ef7a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ef60:	1406      	asrs	r6, r0, #16
 801ef62:	d405      	bmi.n	801ef70 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef64:	4556      	cmp	r6, sl
 801ef66:	da03      	bge.n	801ef70 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef68:	1416      	asrs	r6, r2, #16
 801ef6a:	d401      	bmi.n	801ef70 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801ef6c:	454e      	cmp	r6, r9
 801ef6e:	db05      	blt.n	801ef7c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801ef70:	4440      	add	r0, r8
 801ef72:	4472      	add	r2, lr
 801ef74:	3b01      	subs	r3, #1
 801ef76:	3404      	adds	r4, #4
 801ef78:	e7f0      	b.n	801ef5c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801ef7a:	d03e      	beq.n	801effa <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xec>
 801ef7c:	1e5e      	subs	r6, r3, #1
 801ef7e:	fb08 0c06 	mla	ip, r8, r6, r0
 801ef82:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ef86:	d42e      	bmi.n	801efe6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801ef88:	45d4      	cmp	ip, sl
 801ef8a:	da2c      	bge.n	801efe6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801ef8c:	fb0e 2606 	mla	r6, lr, r6, r2
 801ef90:	1436      	asrs	r6, r6, #16
 801ef92:	d428      	bmi.n	801efe6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801ef94:	454e      	cmp	r6, r9
 801ef96:	da26      	bge.n	801efe6 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd8>
 801ef98:	1d26      	adds	r6, r4, #4
 801ef9a:	469c      	mov	ip, r3
 801ef9c:	f1bc 0f00 	cmp.w	ip, #0
 801efa0:	f106 0604 	add.w	r6, r6, #4
 801efa4:	dd25      	ble.n	801eff2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 801efa6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 801efaa:	ea4f 4922 	mov.w	r9, r2, asr #16
 801efae:	f10c 3cff 	add.w	ip, ip, #4294967295
 801efb2:	4472      	add	r2, lr
 801efb4:	468a      	mov	sl, r1
 801efb6:	9901      	ldr	r1, [sp, #4]
 801efb8:	fb0a 1909 	mla	r9, sl, r9, r1
 801efbc:	1401      	asrs	r1, r0, #16
 801efbe:	4440      	add	r0, r8
 801efc0:	f819 9001 	ldrb.w	r9, [r9, r1]
 801efc4:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801efc8:	eb07 0a09 	add.w	sl, r7, r9
 801efcc:	f817 9009 	ldrb.w	r9, [r7, r9]
 801efd0:	f806 9c08 	strb.w	r9, [r6, #-8]
 801efd4:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801efd8:	f806 9c07 	strb.w	r9, [r6, #-7]
 801efdc:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801efe0:	f806 9c06 	strb.w	r9, [r6, #-6]
 801efe4:	e7da      	b.n	801ef9c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801efe6:	2600      	movs	r6, #0
 801efe8:	eb03 0c06 	add.w	ip, r3, r6
 801efec:	f1bc 0f00 	cmp.w	ip, #0
 801eff0:	dc3a      	bgt.n	801f068 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801eff2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801eff6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801effa:	9b00      	ldr	r3, [sp, #0]
 801effc:	2b00      	cmp	r3, #0
 801effe:	dd60      	ble.n	801f0c2 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f000:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f004:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f006:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f00a:	eeb0 6a62 	vmov.f32	s12, s5
 801f00e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f012:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f016:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f01a:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801f01e:	eeb0 6a43 	vmov.f32	s12, s6
 801f022:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f026:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801f02a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f02e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f032:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f036:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f03a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f03e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f042:	ee12 2a90 	vmov	r2, s5
 801f046:	eef0 2a47 	vmov.f32	s5, s14
 801f04a:	fb92 f8f3 	sdiv	r8, r2, r3
 801f04e:	ee13 2a10 	vmov	r2, s6
 801f052:	eeb0 3a67 	vmov.f32	s6, s15
 801f056:	fb92 fef3 	sdiv	lr, r2, r3
 801f05a:	9b00      	ldr	r3, [sp, #0]
 801f05c:	3b01      	subs	r3, #1
 801f05e:	9300      	str	r3, [sp, #0]
 801f060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f062:	bf08      	it	eq
 801f064:	465b      	moveq	r3, fp
 801f066:	e768      	b.n	801ef3a <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 801f068:	ea5f 4920 	movs.w	r9, r0, asr #16
 801f06c:	d425      	bmi.n	801f0ba <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f06e:	f8d5 c008 	ldr.w	ip, [r5, #8]
 801f072:	45cc      	cmp	ip, r9
 801f074:	dd21      	ble.n	801f0ba <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f076:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801f07a:	d41e      	bmi.n	801f0ba <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f07c:	68e9      	ldr	r1, [r5, #12]
 801f07e:	4551      	cmp	r1, sl
 801f080:	dd1b      	ble.n	801f0ba <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801f082:	9901      	ldr	r1, [sp, #4]
 801f084:	fa0f fc8c 	sxth.w	ip, ip
 801f088:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801f08c:	f06f 0103 	mvn.w	r1, #3
 801f090:	f81c c009 	ldrb.w	ip, [ip, r9]
 801f094:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f098:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801f09c:	eb07 090c 	add.w	r9, r7, ip
 801f0a0:	fb01 fc06 	mul.w	ip, r1, r6
 801f0a4:	f804 a00c 	strb.w	sl, [r4, ip]
 801f0a8:	44a4      	add	ip, r4
 801f0aa:	f899 a001 	ldrb.w	sl, [r9, #1]
 801f0ae:	f88c a001 	strb.w	sl, [ip, #1]
 801f0b2:	f899 9002 	ldrb.w	r9, [r9, #2]
 801f0b6:	f88c 9002 	strb.w	r9, [ip, #2]
 801f0ba:	4440      	add	r0, r8
 801f0bc:	4472      	add	r2, lr
 801f0be:	3e01      	subs	r6, #1
 801f0c0:	e792      	b.n	801efe8 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801f0c2:	b003      	add	sp, #12
 801f0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0c8 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0cc:	b089      	sub	sp, #36	; 0x24
 801f0ce:	469b      	mov	fp, r3
 801f0d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f0d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801f0d6:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 801f0da:	9101      	str	r1, [sp, #4]
 801f0dc:	9205      	str	r2, [sp, #20]
 801f0de:	9306      	str	r3, [sp, #24]
 801f0e0:	6842      	ldr	r2, [r0, #4]
 801f0e2:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 801f0e6:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 801f0ea:	fb02 3101 	mla	r1, r2, r1, r3
 801f0ee:	6803      	ldr	r3, [r0, #0]
 801f0f0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f0f4:	f8da 3000 	ldr.w	r3, [sl]
 801f0f8:	9302      	str	r3, [sp, #8]
 801f0fa:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f0fe:	3304      	adds	r3, #4
 801f100:	9303      	str	r3, [sp, #12]
 801f102:	9b01      	ldr	r3, [sp, #4]
 801f104:	2b00      	cmp	r3, #0
 801f106:	dc03      	bgt.n	801f110 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f108:	9b05      	ldr	r3, [sp, #20]
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	f340 814e 	ble.w	801f3ac <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f110:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801f112:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801f116:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801f11a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801f11c:	f9ba 500c 	ldrsh.w	r5, [sl, #12]
 801f120:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801f124:	f1bb 0f00 	cmp.w	fp, #0
 801f128:	dd0f      	ble.n	801f14a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801f12a:	1410      	asrs	r0, r2, #16
 801f12c:	d405      	bmi.n	801f13a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f12e:	42b0      	cmp	r0, r6
 801f130:	da03      	bge.n	801f13a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f132:	1418      	asrs	r0, r3, #16
 801f134:	d401      	bmi.n	801f13a <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f136:	42a8      	cmp	r0, r5
 801f138:	db08      	blt.n	801f14c <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801f13a:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f13c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f140:	3104      	adds	r1, #4
 801f142:	4402      	add	r2, r0
 801f144:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f146:	4403      	add	r3, r0
 801f148:	e7ec      	b.n	801f124 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f14a:	d04a      	beq.n	801f1e2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 801f14c:	f10b 30ff 	add.w	r0, fp, #4294967295
 801f150:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f152:	fb04 2400 	mla	r4, r4, r0, r2
 801f156:	1424      	asrs	r4, r4, #16
 801f158:	d43a      	bmi.n	801f1d0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f15a:	42b4      	cmp	r4, r6
 801f15c:	da38      	bge.n	801f1d0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f15e:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f160:	fb04 3000 	mla	r0, r4, r0, r3
 801f164:	1400      	asrs	r0, r0, #16
 801f166:	d433      	bmi.n	801f1d0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f168:	42a8      	cmp	r0, r5
 801f16a:	da31      	bge.n	801f1d0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 801f16c:	1d08      	adds	r0, r1, #4
 801f16e:	46dc      	mov	ip, fp
 801f170:	f1bc 0f00 	cmp.w	ip, #0
 801f174:	dd31      	ble.n	801f1da <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801f176:	f9ba 6008 	ldrsh.w	r6, [sl, #8]
 801f17a:	141c      	asrs	r4, r3, #16
 801f17c:	9f02      	ldr	r7, [sp, #8]
 801f17e:	1415      	asrs	r5, r2, #16
 801f180:	fb06 7404 	mla	r4, r6, r4, r7
 801f184:	5d64      	ldrb	r4, [r4, r5]
 801f186:	9d03      	ldr	r5, [sp, #12]
 801f188:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
 801f18c:	9d06      	ldr	r5, [sp, #24]
 801f18e:	0e34      	lsrs	r4, r6, #24
 801f190:	436c      	muls	r4, r5
 801f192:	1c65      	adds	r5, r4, #1
 801f194:	eb05 2424 	add.w	r4, r5, r4, asr #8
 801f198:	f3c6 4507 	ubfx	r5, r6, #16, #8
 801f19c:	1224      	asrs	r4, r4, #8
 801f19e:	b2ef      	uxtb	r7, r5
 801f1a0:	2cff      	cmp	r4, #255	; 0xff
 801f1a2:	9704      	str	r7, [sp, #16]
 801f1a4:	f3c6 2707 	ubfx	r7, r6, #8, #8
 801f1a8:	fa5f fe87 	uxtb.w	lr, r7
 801f1ac:	f040 80ca 	bne.w	801f344 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801f1b0:	f800 6c04 	strb.w	r6, [r0, #-4]
 801f1b4:	f800 7c03 	strb.w	r7, [r0, #-3]
 801f1b8:	f800 5c02 	strb.w	r5, [r0, #-2]
 801f1bc:	f800 4c01 	strb.w	r4, [r0, #-1]
 801f1c0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f1c2:	3004      	adds	r0, #4
 801f1c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f1c8:	4422      	add	r2, r4
 801f1ca:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801f1cc:	4423      	add	r3, r4
 801f1ce:	e7cf      	b.n	801f170 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 801f1d0:	2700      	movs	r7, #0
 801f1d2:	eb0b 0007 	add.w	r0, fp, r7
 801f1d6:	2800      	cmp	r0, #0
 801f1d8:	dc41      	bgt.n	801f25e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801f1da:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801f1de:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f1e2:	9b01      	ldr	r3, [sp, #4]
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	f340 80e1 	ble.w	801f3ac <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801f1ea:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f1ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f1f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f1f4:	eeb0 6a62 	vmov.f32	s12, s5
 801f1f8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f1fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f200:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f204:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 801f208:	eeb0 6a43 	vmov.f32	s12, s6
 801f20c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f210:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 801f214:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f218:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f21c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f220:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f224:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f228:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f22c:	ee12 2a90 	vmov	r2, s5
 801f230:	eef0 2a47 	vmov.f32	s5, s14
 801f234:	fb92 f3f3 	sdiv	r3, r2, r3
 801f238:	ee13 2a10 	vmov	r2, s6
 801f23c:	9315      	str	r3, [sp, #84]	; 0x54
 801f23e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f240:	eeb0 3a67 	vmov.f32	s6, s15
 801f244:	fb92 f3f3 	sdiv	r3, r2, r3
 801f248:	9316      	str	r3, [sp, #88]	; 0x58
 801f24a:	9b01      	ldr	r3, [sp, #4]
 801f24c:	9a05      	ldr	r2, [sp, #20]
 801f24e:	3b01      	subs	r3, #1
 801f250:	9301      	str	r3, [sp, #4]
 801f252:	bf08      	it	eq
 801f254:	4693      	moveq	fp, r2
 801f256:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f258:	bf18      	it	ne
 801f25a:	469b      	movne	fp, r3
 801f25c:	e751      	b.n	801f102 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f25e:	1415      	asrs	r5, r2, #16
 801f260:	d42f      	bmi.n	801f2c2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f262:	f8da 4008 	ldr.w	r4, [sl, #8]
 801f266:	42ac      	cmp	r4, r5
 801f268:	dd2b      	ble.n	801f2c2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f26a:	141e      	asrs	r6, r3, #16
 801f26c:	d429      	bmi.n	801f2c2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f26e:	f8da 000c 	ldr.w	r0, [sl, #12]
 801f272:	42b0      	cmp	r0, r6
 801f274:	dd25      	ble.n	801f2c2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f276:	9802      	ldr	r0, [sp, #8]
 801f278:	b224      	sxth	r4, r4
 801f27a:	fb06 0404 	mla	r4, r6, r4, r0
 801f27e:	5d60      	ldrb	r0, [r4, r5]
 801f280:	9c03      	ldr	r4, [sp, #12]
 801f282:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 801f286:	9c06      	ldr	r4, [sp, #24]
 801f288:	0e28      	lsrs	r0, r5, #24
 801f28a:	4360      	muls	r0, r4
 801f28c:	1c44      	adds	r4, r0, #1
 801f28e:	eb04 2020 	add.w	r0, r4, r0, asr #8
 801f292:	f3c5 4407 	ubfx	r4, r5, #16, #8
 801f296:	1200      	asrs	r0, r0, #8
 801f298:	b2e6      	uxtb	r6, r4
 801f29a:	28ff      	cmp	r0, #255	; 0xff
 801f29c:	9607      	str	r6, [sp, #28]
 801f29e:	f3c5 2607 	ubfx	r6, r5, #8, #8
 801f2a2:	fa5f fe86 	uxtb.w	lr, r6
 801f2a6:	d112      	bne.n	801f2ce <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f2a8:	f06f 0c03 	mvn.w	ip, #3
 801f2ac:	fb0c fc07 	mul.w	ip, ip, r7
 801f2b0:	f801 500c 	strb.w	r5, [r1, ip]
 801f2b4:	448c      	add	ip, r1
 801f2b6:	f88c 6001 	strb.w	r6, [ip, #1]
 801f2ba:	f88c 4002 	strb.w	r4, [ip, #2]
 801f2be:	f88c 0003 	strb.w	r0, [ip, #3]
 801f2c2:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f2c4:	3f01      	subs	r7, #1
 801f2c6:	4402      	add	r2, r0
 801f2c8:	9816      	ldr	r0, [sp, #88]	; 0x58
 801f2ca:	4403      	add	r3, r0
 801f2cc:	e781      	b.n	801f1d2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f2ce:	b2c4      	uxtb	r4, r0
 801f2d0:	9404      	str	r4, [sp, #16]
 801f2d2:	2800      	cmp	r0, #0
 801f2d4:	d0f5      	beq.n	801f2c2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f2d6:	f06f 0403 	mvn.w	r4, #3
 801f2da:	b2ed      	uxtb	r5, r5
 801f2dc:	fb00 fe0e 	mul.w	lr, r0, lr
 801f2e0:	fb04 f807 	mul.w	r8, r4, r7
 801f2e4:	9c04      	ldr	r4, [sp, #16]
 801f2e6:	eb01 0c08 	add.w	ip, r1, r8
 801f2ea:	f89c 9003 	ldrb.w	r9, [ip, #3]
 801f2ee:	fb04 f609 	mul.w	r6, r4, r9
 801f2f2:	1c74      	adds	r4, r6, #1
 801f2f4:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801f2f8:	9c04      	ldr	r4, [sp, #16]
 801f2fa:	1236      	asrs	r6, r6, #8
 801f2fc:	444c      	add	r4, r9
 801f2fe:	1ba4      	subs	r4, r4, r6
 801f300:	eba9 0606 	sub.w	r6, r9, r6
 801f304:	f811 9008 	ldrb.w	r9, [r1, r8]
 801f308:	b2e4      	uxtb	r4, r4
 801f30a:	fb06 f909 	mul.w	r9, r6, r9
 801f30e:	fb00 9505 	mla	r5, r0, r5, r9
 801f312:	fb95 f5f4 	sdiv	r5, r5, r4
 801f316:	f801 5008 	strb.w	r5, [r1, r8]
 801f31a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801f31e:	f89c 9002 	ldrb.w	r9, [ip, #2]
 801f322:	fb06 ee05 	mla	lr, r6, r5, lr
 801f326:	9d07      	ldr	r5, [sp, #28]
 801f328:	f88c 4003 	strb.w	r4, [ip, #3]
 801f32c:	4368      	muls	r0, r5
 801f32e:	fb06 0609 	mla	r6, r6, r9, r0
 801f332:	fb9e fef4 	sdiv	lr, lr, r4
 801f336:	fb96 f6f4 	sdiv	r6, r6, r4
 801f33a:	f88c e001 	strb.w	lr, [ip, #1]
 801f33e:	f88c 6002 	strb.w	r6, [ip, #2]
 801f342:	e7be      	b.n	801f2c2 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801f344:	b2e5      	uxtb	r5, r4
 801f346:	2c00      	cmp	r4, #0
 801f348:	f43f af3a 	beq.w	801f1c0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f34c:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 801f350:	b2f6      	uxtb	r6, r6
 801f352:	fb04 fe0e 	mul.w	lr, r4, lr
 801f356:	fb05 f908 	mul.w	r9, r5, r8
 801f35a:	4445      	add	r5, r8
 801f35c:	f109 0701 	add.w	r7, r9, #1
 801f360:	eb07 2719 	add.w	r7, r7, r9, lsr #8
 801f364:	123f      	asrs	r7, r7, #8
 801f366:	1bed      	subs	r5, r5, r7
 801f368:	eba8 0707 	sub.w	r7, r8, r7
 801f36c:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 801f370:	b2ed      	uxtb	r5, r5
 801f372:	fb07 f808 	mul.w	r8, r7, r8
 801f376:	f800 5c01 	strb.w	r5, [r0, #-1]
 801f37a:	fb04 8606 	mla	r6, r4, r6, r8
 801f37e:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 801f382:	fb96 f6f5 	sdiv	r6, r6, r5
 801f386:	f800 6c04 	strb.w	r6, [r0, #-4]
 801f38a:	f810 6c03 	ldrb.w	r6, [r0, #-3]
 801f38e:	fb07 ee06 	mla	lr, r7, r6, lr
 801f392:	9e04      	ldr	r6, [sp, #16]
 801f394:	4374      	muls	r4, r6
 801f396:	fb07 4708 	mla	r7, r7, r8, r4
 801f39a:	fb9e fef5 	sdiv	lr, lr, r5
 801f39e:	fb97 f7f5 	sdiv	r7, r7, r5
 801f3a2:	f800 ec03 	strb.w	lr, [r0, #-3]
 801f3a6:	f800 7c02 	strb.w	r7, [r0, #-2]
 801f3aa:	e709      	b.n	801f1c0 <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801f3ac:	b009      	add	sp, #36	; 0x24
 801f3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f3b2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f3b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f3b6:	b087      	sub	sp, #28
 801f3b8:	469b      	mov	fp, r3
 801f3ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f3be:	9815      	ldr	r0, [sp, #84]	; 0x54
 801f3c0:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 801f3c4:	9100      	str	r1, [sp, #0]
 801f3c6:	9204      	str	r2, [sp, #16]
 801f3c8:	9305      	str	r3, [sp, #20]
 801f3ca:	6842      	ldr	r2, [r0, #4]
 801f3cc:	e9dd 3116 	ldrd	r3, r1, [sp, #88]	; 0x58
 801f3d0:	fb02 3101 	mla	r1, r2, r1, r3
 801f3d4:	6803      	ldr	r3, [r0, #0]
 801f3d6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801f3da:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f3dc:	681b      	ldr	r3, [r3, #0]
 801f3de:	9301      	str	r3, [sp, #4]
 801f3e0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f3e2:	685b      	ldr	r3, [r3, #4]
 801f3e4:	9302      	str	r3, [sp, #8]
 801f3e6:	9b00      	ldr	r3, [sp, #0]
 801f3e8:	2b00      	cmp	r3, #0
 801f3ea:	dc03      	bgt.n	801f3f4 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801f3ec:	9b04      	ldr	r3, [sp, #16]
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	f340 8156 	ble.w	801f6a0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f3f4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f3f6:	f9b3 6008 	ldrsh.w	r6, [r3, #8]
 801f3fa:	f9b3 500c 	ldrsh.w	r5, [r3, #12]
 801f3fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801f400:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 801f404:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801f406:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801f40a:	f1bb 0f00 	cmp.w	fp, #0
 801f40e:	dd0f      	ble.n	801f430 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801f410:	1410      	asrs	r0, r2, #16
 801f412:	d405      	bmi.n	801f420 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f414:	42b0      	cmp	r0, r6
 801f416:	da03      	bge.n	801f420 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f418:	1418      	asrs	r0, r3, #16
 801f41a:	d401      	bmi.n	801f420 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801f41c:	42a8      	cmp	r0, r5
 801f41e:	db08      	blt.n	801f432 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f420:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f422:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f426:	3104      	adds	r1, #4
 801f428:	4402      	add	r2, r0
 801f42a:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f42c:	4403      	add	r3, r0
 801f42e:	e7ec      	b.n	801f40a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f430:	d053      	beq.n	801f4da <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801f432:	f10b 30ff 	add.w	r0, fp, #4294967295
 801f436:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f438:	fb04 2400 	mla	r4, r4, r0, r2
 801f43c:	1424      	asrs	r4, r4, #16
 801f43e:	d442      	bmi.n	801f4c6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f440:	42b4      	cmp	r4, r6
 801f442:	da40      	bge.n	801f4c6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f444:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f446:	fb04 3000 	mla	r0, r4, r0, r3
 801f44a:	1400      	asrs	r0, r0, #16
 801f44c:	d43b      	bmi.n	801f4c6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f44e:	42a8      	cmp	r0, r5
 801f450:	da39      	bge.n	801f4c6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801f452:	1d08      	adds	r0, r1, #4
 801f454:	46d8      	mov	r8, fp
 801f456:	f1b8 0f00 	cmp.w	r8, #0
 801f45a:	dd3a      	ble.n	801f4d2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 801f45c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 801f45e:	141c      	asrs	r4, r3, #16
 801f460:	f9b5 6008 	ldrsh.w	r6, [r5, #8]
 801f464:	1415      	asrs	r5, r2, #16
 801f466:	fb06 5404 	mla	r4, r6, r4, r5
 801f46a:	9e02      	ldr	r6, [sp, #8]
 801f46c:	9d01      	ldr	r5, [sp, #4]
 801f46e:	f835 5014 	ldrh.w	r5, [r5, r4, lsl #1]
 801f472:	5d34      	ldrb	r4, [r6, r4]
 801f474:	9e05      	ldr	r6, [sp, #20]
 801f476:	ea4f 2e25 	mov.w	lr, r5, asr #8
 801f47a:	ea4f 0ce5 	mov.w	ip, r5, asr #3
 801f47e:	4374      	muls	r4, r6
 801f480:	00ed      	lsls	r5, r5, #3
 801f482:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f486:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f48a:	1c66      	adds	r6, r4, #1
 801f48c:	b2ed      	uxtb	r5, r5
 801f48e:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801f492:	eb06 2414 	add.w	r4, r6, r4, lsr #8
 801f496:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801f49a:	1224      	asrs	r4, r4, #8
 801f49c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801f4a0:	2cff      	cmp	r4, #255	; 0xff
 801f4a2:	f040 80cb 	bne.w	801f63c <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801f4a6:	f800 5c04 	strb.w	r5, [r0, #-4]
 801f4aa:	f800 cc03 	strb.w	ip, [r0, #-3]
 801f4ae:	f800 ec02 	strb.w	lr, [r0, #-2]
 801f4b2:	f800 4c01 	strb.w	r4, [r0, #-1]
 801f4b6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f4b8:	3004      	adds	r0, #4
 801f4ba:	f108 38ff 	add.w	r8, r8, #4294967295
 801f4be:	4422      	add	r2, r4
 801f4c0:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f4c2:	4423      	add	r3, r4
 801f4c4:	e7c7      	b.n	801f456 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801f4c6:	f04f 0c00 	mov.w	ip, #0
 801f4ca:	eb0b 000c 	add.w	r0, fp, ip
 801f4ce:	2800      	cmp	r0, #0
 801f4d0:	dc41      	bgt.n	801f556 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801f4d2:	ea2b 73eb 	bic.w	r3, fp, fp, asr #31
 801f4d6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801f4da:	9b00      	ldr	r3, [sp, #0]
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	f340 80df 	ble.w	801f6a0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
 801f4e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f4e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f4e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f4ec:	eeb0 6a62 	vmov.f32	s12, s5
 801f4f0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f4f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f4f8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f4fc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f500:	eeb0 6a43 	vmov.f32	s12, s6
 801f504:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f508:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f50c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f510:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f514:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f518:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f51c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f520:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f524:	ee12 2a90 	vmov	r2, s5
 801f528:	eef0 2a47 	vmov.f32	s5, s14
 801f52c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f530:	ee13 2a10 	vmov	r2, s6
 801f534:	9313      	str	r3, [sp, #76]	; 0x4c
 801f536:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f538:	eeb0 3a67 	vmov.f32	s6, s15
 801f53c:	fb92 f3f3 	sdiv	r3, r2, r3
 801f540:	9314      	str	r3, [sp, #80]	; 0x50
 801f542:	9b00      	ldr	r3, [sp, #0]
 801f544:	9a04      	ldr	r2, [sp, #16]
 801f546:	3b01      	subs	r3, #1
 801f548:	9300      	str	r3, [sp, #0]
 801f54a:	bf08      	it	eq
 801f54c:	4693      	moveq	fp, r2
 801f54e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f550:	bf18      	it	ne
 801f552:	469b      	movne	fp, r3
 801f554:	e747      	b.n	801f3e6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801f556:	1415      	asrs	r5, r2, #16
 801f558:	d433      	bmi.n	801f5c2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f55a:	9818      	ldr	r0, [sp, #96]	; 0x60
 801f55c:	6884      	ldr	r4, [r0, #8]
 801f55e:	42ac      	cmp	r4, r5
 801f560:	dd2f      	ble.n	801f5c2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f562:	141e      	asrs	r6, r3, #16
 801f564:	d42d      	bmi.n	801f5c2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f566:	68c0      	ldr	r0, [r0, #12]
 801f568:	42b0      	cmp	r0, r6
 801f56a:	dd2a      	ble.n	801f5c2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f56c:	b224      	sxth	r4, r4
 801f56e:	9801      	ldr	r0, [sp, #4]
 801f570:	fb06 5504 	mla	r5, r6, r4, r5
 801f574:	f830 4015 	ldrh.w	r4, [r0, r5, lsl #1]
 801f578:	9802      	ldr	r0, [sp, #8]
 801f57a:	ea4f 2e24 	mov.w	lr, r4, asr #8
 801f57e:	5d40      	ldrb	r0, [r0, r5]
 801f580:	10e7      	asrs	r7, r4, #3
 801f582:	9d05      	ldr	r5, [sp, #20]
 801f584:	00e4      	lsls	r4, r4, #3
 801f586:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 801f58a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f58e:	4368      	muls	r0, r5
 801f590:	b2e4      	uxtb	r4, r4
 801f592:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 801f596:	1c45      	adds	r5, r0, #1
 801f598:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f59c:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801f5a0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f5a4:	9403      	str	r4, [sp, #12]
 801f5a6:	1200      	asrs	r0, r0, #8
 801f5a8:	28ff      	cmp	r0, #255	; 0xff
 801f5aa:	d111      	bne.n	801f5d0 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21e>
 801f5ac:	f06f 0403 	mvn.w	r4, #3
 801f5b0:	fb04 f50c 	mul.w	r5, r4, ip
 801f5b4:	9c03      	ldr	r4, [sp, #12]
 801f5b6:	554c      	strb	r4, [r1, r5]
 801f5b8:	440d      	add	r5, r1
 801f5ba:	706f      	strb	r7, [r5, #1]
 801f5bc:	f885 e002 	strb.w	lr, [r5, #2]
 801f5c0:	70e8      	strb	r0, [r5, #3]
 801f5c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801f5c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 801f5c8:	4402      	add	r2, r0
 801f5ca:	9814      	ldr	r0, [sp, #80]	; 0x50
 801f5cc:	4403      	add	r3, r0
 801f5ce:	e77c      	b.n	801f4ca <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801f5d0:	b2c5      	uxtb	r5, r0
 801f5d2:	2800      	cmp	r0, #0
 801f5d4:	d0f5      	beq.n	801f5c2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f5d6:	f06f 0403 	mvn.w	r4, #3
 801f5da:	4347      	muls	r7, r0
 801f5dc:	fb04 f90c 	mul.w	r9, r4, ip
 801f5e0:	eb01 0809 	add.w	r8, r1, r9
 801f5e4:	f898 a003 	ldrb.w	sl, [r8, #3]
 801f5e8:	fb05 f60a 	mul.w	r6, r5, sl
 801f5ec:	4455      	add	r5, sl
 801f5ee:	1c74      	adds	r4, r6, #1
 801f5f0:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 801f5f4:	9c03      	ldr	r4, [sp, #12]
 801f5f6:	1236      	asrs	r6, r6, #8
 801f5f8:	4344      	muls	r4, r0
 801f5fa:	fb00 f00e 	mul.w	r0, r0, lr
 801f5fe:	1bad      	subs	r5, r5, r6
 801f600:	ebaa 0606 	sub.w	r6, sl, r6
 801f604:	f811 a009 	ldrb.w	sl, [r1, r9]
 801f608:	b2ed      	uxtb	r5, r5
 801f60a:	fb06 440a 	mla	r4, r6, sl, r4
 801f60e:	fb94 f4f5 	sdiv	r4, r4, r5
 801f612:	f801 4009 	strb.w	r4, [r1, r9]
 801f616:	f898 4001 	ldrb.w	r4, [r8, #1]
 801f61a:	f898 a002 	ldrb.w	sl, [r8, #2]
 801f61e:	fb06 7704 	mla	r7, r6, r4, r7
 801f622:	fb06 060a 	mla	r6, r6, sl, r0
 801f626:	f888 5003 	strb.w	r5, [r8, #3]
 801f62a:	fb97 f7f5 	sdiv	r7, r7, r5
 801f62e:	fb96 f6f5 	sdiv	r6, r6, r5
 801f632:	f888 7001 	strb.w	r7, [r8, #1]
 801f636:	f888 6002 	strb.w	r6, [r8, #2]
 801f63a:	e7c2      	b.n	801f5c2 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 801f63c:	b2e6      	uxtb	r6, r4
 801f63e:	2c00      	cmp	r4, #0
 801f640:	f43f af39 	beq.w	801f4b6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f644:	f810 9c01 	ldrb.w	r9, [r0, #-1]
 801f648:	4365      	muls	r5, r4
 801f64a:	fb04 fc0c 	mul.w	ip, r4, ip
 801f64e:	fb06 fa09 	mul.w	sl, r6, r9
 801f652:	444e      	add	r6, r9
 801f654:	fb04 f40e 	mul.w	r4, r4, lr
 801f658:	f10a 0701 	add.w	r7, sl, #1
 801f65c:	eb07 271a 	add.w	r7, r7, sl, lsr #8
 801f660:	123f      	asrs	r7, r7, #8
 801f662:	1bf6      	subs	r6, r6, r7
 801f664:	eba9 0707 	sub.w	r7, r9, r7
 801f668:	f810 9c04 	ldrb.w	r9, [r0, #-4]
 801f66c:	b2f6      	uxtb	r6, r6
 801f66e:	fb07 5509 	mla	r5, r7, r9, r5
 801f672:	f810 9c02 	ldrb.w	r9, [r0, #-2]
 801f676:	f800 6c01 	strb.w	r6, [r0, #-1]
 801f67a:	fb95 f5f6 	sdiv	r5, r5, r6
 801f67e:	f800 5c04 	strb.w	r5, [r0, #-4]
 801f682:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 801f686:	fb07 cc05 	mla	ip, r7, r5, ip
 801f68a:	fb07 4709 	mla	r7, r7, r9, r4
 801f68e:	fb9c fcf6 	sdiv	ip, ip, r6
 801f692:	fb97 f7f6 	sdiv	r7, r7, r6
 801f696:	f800 cc03 	strb.w	ip, [r0, #-3]
 801f69a:	f800 7c02 	strb.w	r7, [r0, #-2]
 801f69e:	e70a      	b.n	801f4b6 <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801f6a0:	b007      	add	sp, #28
 801f6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f6a6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f6a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6aa:	b087      	sub	sp, #28
 801f6ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f6b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801f6b2:	9101      	str	r1, [sp, #4]
 801f6b4:	9205      	str	r2, [sp, #20]
 801f6b6:	6861      	ldr	r1, [r4, #4]
 801f6b8:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 801f6bc:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801f6c0:	fb01 2000 	mla	r0, r1, r0, r2
 801f6c4:	6822      	ldr	r2, [r4, #0]
 801f6c6:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 801f6ca:	f8db 2000 	ldr.w	r2, [fp]
 801f6ce:	9202      	str	r2, [sp, #8]
 801f6d0:	f8db 2004 	ldr.w	r2, [fp, #4]
 801f6d4:	9203      	str	r2, [sp, #12]
 801f6d6:	9a01      	ldr	r2, [sp, #4]
 801f6d8:	2a00      	cmp	r2, #0
 801f6da:	dc03      	bgt.n	801f6e4 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f6dc:	9a05      	ldr	r2, [sp, #20]
 801f6de:	2a00      	cmp	r2, #0
 801f6e0:	f340 8151 	ble.w	801f986 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f6e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801f6e6:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f6ea:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801f6ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801f6f0:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801f6f4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801f6f8:	2b00      	cmp	r3, #0
 801f6fa:	dd0e      	ble.n	801f71a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801f6fc:	140c      	asrs	r4, r1, #16
 801f6fe:	d405      	bmi.n	801f70c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f700:	42bc      	cmp	r4, r7
 801f702:	da03      	bge.n	801f70c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f704:	1414      	asrs	r4, r2, #16
 801f706:	d401      	bmi.n	801f70c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f708:	42b4      	cmp	r4, r6
 801f70a:	db07      	blt.n	801f71c <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801f70c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f70e:	3b01      	subs	r3, #1
 801f710:	3004      	adds	r0, #4
 801f712:	4421      	add	r1, r4
 801f714:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f716:	4422      	add	r2, r4
 801f718:	e7ee      	b.n	801f6f8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801f71a:	d049      	beq.n	801f7b0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 801f71c:	1e5c      	subs	r4, r3, #1
 801f71e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f720:	fb05 1504 	mla	r5, r5, r4, r1
 801f724:	142d      	asrs	r5, r5, #16
 801f726:	d43b      	bmi.n	801f7a0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f728:	42bd      	cmp	r5, r7
 801f72a:	da39      	bge.n	801f7a0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f72c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f72e:	fb05 2404 	mla	r4, r5, r4, r2
 801f732:	1424      	asrs	r4, r4, #16
 801f734:	d434      	bmi.n	801f7a0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f736:	42b4      	cmp	r4, r6
 801f738:	da32      	bge.n	801f7a0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 801f73a:	1d04      	adds	r4, r0, #4
 801f73c:	4699      	mov	r9, r3
 801f73e:	f1b9 0f00 	cmp.w	r9, #0
 801f742:	dd31      	ble.n	801f7a8 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801f744:	1415      	asrs	r5, r2, #16
 801f746:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 801f74a:	140e      	asrs	r6, r1, #16
 801f74c:	fb07 6605 	mla	r6, r7, r5, r6
 801f750:	9d02      	ldr	r5, [sp, #8]
 801f752:	9f03      	ldr	r7, [sp, #12]
 801f754:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801f758:	5dbe      	ldrb	r6, [r7, r6]
 801f75a:	ea4f 2825 	mov.w	r8, r5, asr #8
 801f75e:	10ef      	asrs	r7, r5, #3
 801f760:	2eff      	cmp	r6, #255	; 0xff
 801f762:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801f766:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801f76a:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801f76e:	b2ed      	uxtb	r5, r5
 801f770:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801f774:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801f778:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801f77c:	f040 80cd 	bne.w	801f91a <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801f780:	f804 5c04 	strb.w	r5, [r4, #-4]
 801f784:	f804 7c03 	strb.w	r7, [r4, #-3]
 801f788:	f804 8c02 	strb.w	r8, [r4, #-2]
 801f78c:	f804 6c01 	strb.w	r6, [r4, #-1]
 801f790:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f792:	3404      	adds	r4, #4
 801f794:	f109 39ff 	add.w	r9, r9, #4294967295
 801f798:	4429      	add	r1, r5
 801f79a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801f79c:	442a      	add	r2, r5
 801f79e:	e7ce      	b.n	801f73e <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f7a0:	2700      	movs	r7, #0
 801f7a2:	19dc      	adds	r4, r3, r7
 801f7a4:	2c00      	cmp	r4, #0
 801f7a6:	dc3f      	bgt.n	801f828 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x182>
 801f7a8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801f7ac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801f7b0:	9b01      	ldr	r3, [sp, #4]
 801f7b2:	2b00      	cmp	r3, #0
 801f7b4:	f340 80e7 	ble.w	801f986 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801f7b8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f7bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f7be:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f7c2:	eeb0 6a62 	vmov.f32	s12, s5
 801f7c6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801f7ca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f7ce:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7d2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801f7d6:	eeb0 6a43 	vmov.f32	s12, s6
 801f7da:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801f7de:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801f7e2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f7e6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f7ea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f7ee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f7f2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f7f6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f7fa:	ee12 2a90 	vmov	r2, s5
 801f7fe:	eef0 2a47 	vmov.f32	s5, s14
 801f802:	fb92 f3f3 	sdiv	r3, r2, r3
 801f806:	ee13 2a10 	vmov	r2, s6
 801f80a:	9313      	str	r3, [sp, #76]	; 0x4c
 801f80c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f80e:	eeb0 3a67 	vmov.f32	s6, s15
 801f812:	fb92 f3f3 	sdiv	r3, r2, r3
 801f816:	9314      	str	r3, [sp, #80]	; 0x50
 801f818:	9b01      	ldr	r3, [sp, #4]
 801f81a:	9a05      	ldr	r2, [sp, #20]
 801f81c:	3b01      	subs	r3, #1
 801f81e:	9301      	str	r3, [sp, #4]
 801f820:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801f822:	bf08      	it	eq
 801f824:	4613      	moveq	r3, r2
 801f826:	e756      	b.n	801f6d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801f828:	140e      	asrs	r6, r1, #16
 801f82a:	d434      	bmi.n	801f896 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f82c:	f8db 5008 	ldr.w	r5, [fp, #8]
 801f830:	42b5      	cmp	r5, r6
 801f832:	dd30      	ble.n	801f896 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f834:	ea5f 4c22 	movs.w	ip, r2, asr #16
 801f838:	d42d      	bmi.n	801f896 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f83a:	f8db 400c 	ldr.w	r4, [fp, #12]
 801f83e:	4564      	cmp	r4, ip
 801f840:	dd29      	ble.n	801f896 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f842:	b22d      	sxth	r5, r5
 801f844:	9c02      	ldr	r4, [sp, #8]
 801f846:	fb0c 6505 	mla	r5, ip, r5, r6
 801f84a:	9e03      	ldr	r6, [sp, #12]
 801f84c:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801f850:	5d75      	ldrb	r5, [r6, r5]
 801f852:	ea4f 2824 	mov.w	r8, r4, asr #8
 801f856:	2dff      	cmp	r5, #255	; 0xff
 801f858:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 801f85c:	ea48 1658 	orr.w	r6, r8, r8, lsr #5
 801f860:	9604      	str	r6, [sp, #16]
 801f862:	ea4f 06e4 	mov.w	r6, r4, asr #3
 801f866:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801f86a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801f86e:	b2e4      	uxtb	r4, r4
 801f870:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 801f874:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801f878:	d113      	bne.n	801f8a2 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 801f87a:	f06f 0c03 	mvn.w	ip, #3
 801f87e:	fb0c fc07 	mul.w	ip, ip, r7
 801f882:	f800 400c 	strb.w	r4, [r0, ip]
 801f886:	4484      	add	ip, r0
 801f888:	9c04      	ldr	r4, [sp, #16]
 801f88a:	f88c 6001 	strb.w	r6, [ip, #1]
 801f88e:	f88c 4002 	strb.w	r4, [ip, #2]
 801f892:	f88c 5003 	strb.w	r5, [ip, #3]
 801f896:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801f898:	3f01      	subs	r7, #1
 801f89a:	4421      	add	r1, r4
 801f89c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801f89e:	4422      	add	r2, r4
 801f8a0:	e77f      	b.n	801f7a2 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801f8a2:	2d00      	cmp	r5, #0
 801f8a4:	d0f7      	beq.n	801f896 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f8a6:	fb14 f405 	smulbb	r4, r4, r5
 801f8aa:	f06f 0c03 	mvn.w	ip, #3
 801f8ae:	fb15 f606 	smulbb	r6, r5, r6
 801f8b2:	fb0c fa07 	mul.w	sl, ip, r7
 801f8b6:	eb00 090a 	add.w	r9, r0, sl
 801f8ba:	f899 8003 	ldrb.w	r8, [r9, #3]
 801f8be:	fb05 fc08 	mul.w	ip, r5, r8
 801f8c2:	f10c 0e01 	add.w	lr, ip, #1
 801f8c6:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801f8ca:	eb05 0c08 	add.w	ip, r5, r8
 801f8ce:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f8d2:	ebac 0c0e 	sub.w	ip, ip, lr
 801f8d6:	eba8 0e0e 	sub.w	lr, r8, lr
 801f8da:	f810 800a 	ldrb.w	r8, [r0, sl]
 801f8de:	fa5f fc8c 	uxtb.w	ip, ip
 801f8e2:	fb0e 4408 	mla	r4, lr, r8, r4
 801f8e6:	fb94 f4fc 	sdiv	r4, r4, ip
 801f8ea:	f800 400a 	strb.w	r4, [r0, sl]
 801f8ee:	f899 4001 	ldrb.w	r4, [r9, #1]
 801f8f2:	f889 c003 	strb.w	ip, [r9, #3]
 801f8f6:	fb0e 6604 	mla	r6, lr, r4, r6
 801f8fa:	f899 4002 	ldrb.w	r4, [r9, #2]
 801f8fe:	fb96 f6fc 	sdiv	r6, r6, ip
 801f902:	f889 6001 	strb.w	r6, [r9, #1]
 801f906:	9e04      	ldr	r6, [sp, #16]
 801f908:	fb15 f506 	smulbb	r5, r5, r6
 801f90c:	fb0e 5504 	mla	r5, lr, r4, r5
 801f910:	fb95 f5fc 	sdiv	r5, r5, ip
 801f914:	f889 5002 	strb.w	r5, [r9, #2]
 801f918:	e7bd      	b.n	801f896 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801f91a:	2e00      	cmp	r6, #0
 801f91c:	f43f af38 	beq.w	801f790 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801f920:	f814 ac01 	ldrb.w	sl, [r4, #-1]
 801f924:	fb15 f506 	smulbb	r5, r5, r6
 801f928:	fb16 f707 	smulbb	r7, r6, r7
 801f92c:	fb06 fc0a 	mul.w	ip, r6, sl
 801f930:	f10c 0e01 	add.w	lr, ip, #1
 801f934:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 801f938:	eb06 0c0a 	add.w	ip, r6, sl
 801f93c:	fb16 f608 	smulbb	r6, r6, r8
 801f940:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801f944:	ebac 0c0e 	sub.w	ip, ip, lr
 801f948:	ebaa 0e0e 	sub.w	lr, sl, lr
 801f94c:	f814 ac04 	ldrb.w	sl, [r4, #-4]
 801f950:	fa5f fc8c 	uxtb.w	ip, ip
 801f954:	fb0e 550a 	mla	r5, lr, sl, r5
 801f958:	f804 cc01 	strb.w	ip, [r4, #-1]
 801f95c:	fb95 f5fc 	sdiv	r5, r5, ip
 801f960:	f804 5c04 	strb.w	r5, [r4, #-4]
 801f964:	f814 5c03 	ldrb.w	r5, [r4, #-3]
 801f968:	fb0e 7705 	mla	r7, lr, r5, r7
 801f96c:	f814 5c02 	ldrb.w	r5, [r4, #-2]
 801f970:	fb0e 6605 	mla	r6, lr, r5, r6
 801f974:	fb97 f7fc 	sdiv	r7, r7, ip
 801f978:	fb96 f6fc 	sdiv	r6, r6, ip
 801f97c:	f804 7c03 	strb.w	r7, [r4, #-3]
 801f980:	f804 6c02 	strb.w	r6, [r4, #-2]
 801f984:	e704      	b.n	801f790 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801f986:	b007      	add	sp, #28
 801f988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f98c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f990:	b085      	sub	sp, #20
 801f992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801f996:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801f998:	9101      	str	r1, [sp, #4]
 801f99a:	6868      	ldr	r0, [r5, #4]
 801f99c:	9203      	str	r2, [sp, #12]
 801f99e:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801f9a2:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801f9a6:	fb00 1404 	mla	r4, r0, r4, r1
 801f9aa:	6829      	ldr	r1, [r5, #0]
 801f9ac:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801f9b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f9b2:	6809      	ldr	r1, [r1, #0]
 801f9b4:	9102      	str	r1, [sp, #8]
 801f9b6:	9901      	ldr	r1, [sp, #4]
 801f9b8:	2900      	cmp	r1, #0
 801f9ba:	dc03      	bgt.n	801f9c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f9bc:	9903      	ldr	r1, [sp, #12]
 801f9be:	2900      	cmp	r1, #0
 801f9c0:	f340 8150 	ble.w	801fc64 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801f9c4:	9916      	ldr	r1, [sp, #88]	; 0x58
 801f9c6:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801f9ca:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801f9ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801f9d0:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801f9d4:	9910      	ldr	r1, [sp, #64]	; 0x40
 801f9d6:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801f9da:	2b00      	cmp	r3, #0
 801f9dc:	dd0e      	ble.n	801f9fc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801f9de:	1405      	asrs	r5, r0, #16
 801f9e0:	d405      	bmi.n	801f9ee <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f9e2:	4565      	cmp	r5, ip
 801f9e4:	da03      	bge.n	801f9ee <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f9e6:	140d      	asrs	r5, r1, #16
 801f9e8:	d401      	bmi.n	801f9ee <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801f9ea:	42bd      	cmp	r5, r7
 801f9ec:	db07      	blt.n	801f9fe <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801f9ee:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801f9f0:	3b01      	subs	r3, #1
 801f9f2:	3404      	adds	r4, #4
 801f9f4:	4428      	add	r0, r5
 801f9f6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801f9f8:	4429      	add	r1, r5
 801f9fa:	e7ee      	b.n	801f9da <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801f9fc:	d04c      	beq.n	801fa98 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801f9fe:	1e5d      	subs	r5, r3, #1
 801fa00:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fa02:	fb06 0605 	mla	r6, r6, r5, r0
 801fa06:	1436      	asrs	r6, r6, #16
 801fa08:	d43c      	bmi.n	801fa84 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801fa0a:	4566      	cmp	r6, ip
 801fa0c:	da3a      	bge.n	801fa84 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801fa0e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fa10:	fb06 1505 	mla	r5, r6, r5, r1
 801fa14:	142d      	asrs	r5, r5, #16
 801fa16:	d435      	bmi.n	801fa84 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801fa18:	42bd      	cmp	r5, r7
 801fa1a:	da33      	bge.n	801fa84 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 801fa1c:	1d25      	adds	r5, r4, #4
 801fa1e:	4699      	mov	r9, r3
 801fa20:	f1b9 0f00 	cmp.w	r9, #0
 801fa24:	dd34      	ble.n	801fa90 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
 801fa26:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801fa28:	140e      	asrs	r6, r1, #16
 801fa2a:	2aff      	cmp	r2, #255	; 0xff
 801fa2c:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801fa30:	ea4f 4720 	mov.w	r7, r0, asr #16
 801fa34:	fb0c 7606 	mla	r6, ip, r6, r7
 801fa38:	9f02      	ldr	r7, [sp, #8]
 801fa3a:	f837 6016 	ldrh.w	r6, [r7, r6, lsl #1]
 801fa3e:	ea4f 2726 	mov.w	r7, r6, asr #8
 801fa42:	ea4f 0ce6 	mov.w	ip, r6, asr #3
 801fa46:	ea4f 06c6 	mov.w	r6, r6, lsl #3
 801fa4a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801fa4e:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801fa52:	b2f6      	uxtb	r6, r6
 801fa54:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 801fa58:	ea4c 1c9c 	orr.w	ip, ip, ip, lsr #6
 801fa5c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fa60:	f040 80ca 	bne.w	801fbf8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801fa64:	f805 6c04 	strb.w	r6, [r5, #-4]
 801fa68:	f805 cc03 	strb.w	ip, [r5, #-3]
 801fa6c:	f805 7c02 	strb.w	r7, [r5, #-2]
 801fa70:	f805 2c01 	strb.w	r2, [r5, #-1]
 801fa74:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fa76:	3504      	adds	r5, #4
 801fa78:	f109 39ff 	add.w	r9, r9, #4294967295
 801fa7c:	4430      	add	r0, r6
 801fa7e:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fa80:	4431      	add	r1, r6
 801fa82:	e7cd      	b.n	801fa20 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fa84:	f04f 0c00 	mov.w	ip, #0
 801fa88:	eb03 050c 	add.w	r5, r3, ip
 801fa8c:	2d00      	cmp	r5, #0
 801fa8e:	dc3f      	bgt.n	801fb10 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801fa90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa94:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801fa98:	9b01      	ldr	r3, [sp, #4]
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	f340 80e2 	ble.w	801fc64 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801faa0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801faa4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801faa6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801faaa:	eeb0 6a62 	vmov.f32	s12, s5
 801faae:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fab2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fab6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801faba:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801fabe:	eeb0 6a43 	vmov.f32	s12, s6
 801fac2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fac6:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801faca:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801face:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fad2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fad6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fada:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fade:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fae2:	ee12 1a90 	vmov	r1, s5
 801fae6:	eef0 2a47 	vmov.f32	s5, s14
 801faea:	fb91 f3f3 	sdiv	r3, r1, r3
 801faee:	ee13 1a10 	vmov	r1, s6
 801faf2:	9311      	str	r3, [sp, #68]	; 0x44
 801faf4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801faf6:	eeb0 3a67 	vmov.f32	s6, s15
 801fafa:	fb91 f3f3 	sdiv	r3, r1, r3
 801fafe:	9312      	str	r3, [sp, #72]	; 0x48
 801fb00:	9b01      	ldr	r3, [sp, #4]
 801fb02:	9903      	ldr	r1, [sp, #12]
 801fb04:	3b01      	subs	r3, #1
 801fb06:	9301      	str	r3, [sp, #4]
 801fb08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fb0a:	bf08      	it	eq
 801fb0c:	460b      	moveq	r3, r1
 801fb0e:	e752      	b.n	801f9b6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801fb10:	1407      	asrs	r7, r0, #16
 801fb12:	d42f      	bmi.n	801fb74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fb14:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801fb16:	68ae      	ldr	r6, [r5, #8]
 801fb18:	42be      	cmp	r6, r7
 801fb1a:	dd2b      	ble.n	801fb74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fb1c:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801fb20:	d428      	bmi.n	801fb74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fb22:	68ed      	ldr	r5, [r5, #12]
 801fb24:	4575      	cmp	r5, lr
 801fb26:	dd25      	ble.n	801fb74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fb28:	b236      	sxth	r6, r6
 801fb2a:	9d02      	ldr	r5, [sp, #8]
 801fb2c:	2aff      	cmp	r2, #255	; 0xff
 801fb2e:	fb0e 7606 	mla	r6, lr, r6, r7
 801fb32:	f835 5016 	ldrh.w	r5, [r5, r6, lsl #1]
 801fb36:	ea4f 2625 	mov.w	r6, r5, asr #8
 801fb3a:	ea4f 07e5 	mov.w	r7, r5, asr #3
 801fb3e:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 801fb42:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801fb46:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801fb4a:	b2ed      	uxtb	r5, r5
 801fb4c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fb50:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 801fb54:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 801fb58:	d113      	bne.n	801fb82 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 801fb5a:	f06f 0e03 	mvn.w	lr, #3
 801fb5e:	fb0e fe0c 	mul.w	lr, lr, ip
 801fb62:	f804 500e 	strb.w	r5, [r4, lr]
 801fb66:	44a6      	add	lr, r4
 801fb68:	f88e 7001 	strb.w	r7, [lr, #1]
 801fb6c:	f88e 6002 	strb.w	r6, [lr, #2]
 801fb70:	f88e 2003 	strb.w	r2, [lr, #3]
 801fb74:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fb76:	f10c 3cff 	add.w	ip, ip, #4294967295
 801fb7a:	4428      	add	r0, r5
 801fb7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fb7e:	4429      	add	r1, r5
 801fb80:	e782      	b.n	801fa88 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801fb82:	2a00      	cmp	r2, #0
 801fb84:	d0f6      	beq.n	801fb74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fb86:	fb15 f502 	smulbb	r5, r5, r2
 801fb8a:	f06f 0e03 	mvn.w	lr, #3
 801fb8e:	fb12 f707 	smulbb	r7, r2, r7
 801fb92:	fb12 f606 	smulbb	r6, r2, r6
 801fb96:	fb0e fa0c 	mul.w	sl, lr, ip
 801fb9a:	eb04 090a 	add.w	r9, r4, sl
 801fb9e:	f899 b003 	ldrb.w	fp, [r9, #3]
 801fba2:	fb02 fe0b 	mul.w	lr, r2, fp
 801fba6:	f10e 0801 	add.w	r8, lr, #1
 801fbaa:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801fbae:	eb02 0e0b 	add.w	lr, r2, fp
 801fbb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fbb6:	ebae 0e08 	sub.w	lr, lr, r8
 801fbba:	ebab 0808 	sub.w	r8, fp, r8
 801fbbe:	f814 b00a 	ldrb.w	fp, [r4, sl]
 801fbc2:	fa5f fe8e 	uxtb.w	lr, lr
 801fbc6:	fb08 550b 	mla	r5, r8, fp, r5
 801fbca:	fb95 f5fe 	sdiv	r5, r5, lr
 801fbce:	f804 500a 	strb.w	r5, [r4, sl]
 801fbd2:	f899 5001 	ldrb.w	r5, [r9, #1]
 801fbd6:	f889 e003 	strb.w	lr, [r9, #3]
 801fbda:	fb08 7705 	mla	r7, r8, r5, r7
 801fbde:	f899 5002 	ldrb.w	r5, [r9, #2]
 801fbe2:	fb08 6605 	mla	r6, r8, r5, r6
 801fbe6:	fb97 f7fe 	sdiv	r7, r7, lr
 801fbea:	fb96 f6fe 	sdiv	r6, r6, lr
 801fbee:	f889 7001 	strb.w	r7, [r9, #1]
 801fbf2:	f889 6002 	strb.w	r6, [r9, #2]
 801fbf6:	e7bd      	b.n	801fb74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801fbf8:	2a00      	cmp	r2, #0
 801fbfa:	f43f af3b 	beq.w	801fa74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801fbfe:	f815 ac01 	ldrb.w	sl, [r5, #-1]
 801fc02:	fb16 f602 	smulbb	r6, r6, r2
 801fc06:	fb12 fc0c 	smulbb	ip, r2, ip
 801fc0a:	fb12 f707 	smulbb	r7, r2, r7
 801fc0e:	fb02 fe0a 	mul.w	lr, r2, sl
 801fc12:	f10e 0801 	add.w	r8, lr, #1
 801fc16:	eb08 281e 	add.w	r8, r8, lr, lsr #8
 801fc1a:	eb02 0e0a 	add.w	lr, r2, sl
 801fc1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fc22:	ebae 0e08 	sub.w	lr, lr, r8
 801fc26:	ebaa 0808 	sub.w	r8, sl, r8
 801fc2a:	f815 ac04 	ldrb.w	sl, [r5, #-4]
 801fc2e:	fa5f fe8e 	uxtb.w	lr, lr
 801fc32:	fb08 660a 	mla	r6, r8, sl, r6
 801fc36:	f805 ec01 	strb.w	lr, [r5, #-1]
 801fc3a:	fb96 f6fe 	sdiv	r6, r6, lr
 801fc3e:	f805 6c04 	strb.w	r6, [r5, #-4]
 801fc42:	f815 6c03 	ldrb.w	r6, [r5, #-3]
 801fc46:	fb08 cc06 	mla	ip, r8, r6, ip
 801fc4a:	f815 6c02 	ldrb.w	r6, [r5, #-2]
 801fc4e:	fb08 7706 	mla	r7, r8, r6, r7
 801fc52:	fb9c fcfe 	sdiv	ip, ip, lr
 801fc56:	fb97 f7fe 	sdiv	r7, r7, lr
 801fc5a:	f805 cc03 	strb.w	ip, [r5, #-3]
 801fc5e:	f805 7c02 	strb.w	r7, [r5, #-2]
 801fc62:	e707      	b.n	801fa74 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801fc64:	b005      	add	sp, #20
 801fc66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc6a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fc6a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc6e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801fc70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fc74:	9201      	str	r2, [sp, #4]
 801fc76:	6860      	ldr	r0, [r4, #4]
 801fc78:	9f14      	ldr	r7, [sp, #80]	; 0x50
 801fc7a:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	; 0x48
 801fc7e:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	; 0x3c
 801fc82:	fb00 2505 	mla	r5, r0, r5, r2
 801fc86:	6822      	ldr	r2, [r4, #0]
 801fc88:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 801fc8c:	683a      	ldr	r2, [r7, #0]
 801fc8e:	9200      	str	r2, [sp, #0]
 801fc90:	2900      	cmp	r1, #0
 801fc92:	dc03      	bgt.n	801fc9c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801fc94:	9a01      	ldr	r2, [sp, #4]
 801fc96:	2a00      	cmp	r2, #0
 801fc98:	f340 80be 	ble.w	801fe18 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801fc9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fc9e:	f9b7 9008 	ldrsh.w	r9, [r7, #8]
 801fca2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 801fca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801fca8:	f9b7 c00c 	ldrsh.w	ip, [r7, #12]
 801fcac:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801fcb0:	2b00      	cmp	r3, #0
 801fcb2:	dd0c      	ble.n	801fcce <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801fcb4:	1404      	asrs	r4, r0, #16
 801fcb6:	d405      	bmi.n	801fcc4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fcb8:	454c      	cmp	r4, r9
 801fcba:	da03      	bge.n	801fcc4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fcbc:	1414      	asrs	r4, r2, #16
 801fcbe:	d401      	bmi.n	801fcc4 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801fcc0:	4564      	cmp	r4, ip
 801fcc2:	db05      	blt.n	801fcd0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801fcc4:	4440      	add	r0, r8
 801fcc6:	4472      	add	r2, lr
 801fcc8:	3b01      	subs	r3, #1
 801fcca:	3504      	adds	r5, #4
 801fccc:	e7f0      	b.n	801fcb0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801fcce:	d00e      	beq.n	801fcee <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801fcd0:	1e5c      	subs	r4, r3, #1
 801fcd2:	fb08 0604 	mla	r6, r8, r4, r0
 801fcd6:	1436      	asrs	r6, r6, #16
 801fcd8:	d53e      	bpl.n	801fd58 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801fcda:	4699      	mov	r9, r3
 801fcdc:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
 801fce0:	f1b9 0f00 	cmp.w	r9, #0
 801fce4:	dc68      	bgt.n	801fdb8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fce6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fcea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 801fcee:	2900      	cmp	r1, #0
 801fcf0:	f340 8092 	ble.w	801fe18 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801fcf4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fcf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fcfa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fcfe:	3901      	subs	r1, #1
 801fd00:	eeb0 6a62 	vmov.f32	s12, s5
 801fd04:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801fd08:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fd0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd10:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 801fd14:	eeb0 6a43 	vmov.f32	s12, s6
 801fd18:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fd1c:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 801fd20:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fd24:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fd28:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fd2c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fd30:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fd34:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fd38:	ee12 2a90 	vmov	r2, s5
 801fd3c:	eef0 2a47 	vmov.f32	s5, s14
 801fd40:	fb92 f8f3 	sdiv	r8, r2, r3
 801fd44:	ee13 2a10 	vmov	r2, s6
 801fd48:	eeb0 3a67 	vmov.f32	s6, s15
 801fd4c:	fb92 fef3 	sdiv	lr, r2, r3
 801fd50:	9a01      	ldr	r2, [sp, #4]
 801fd52:	bf08      	it	eq
 801fd54:	4613      	moveq	r3, r2
 801fd56:	e79b      	b.n	801fc90 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 801fd58:	454e      	cmp	r6, r9
 801fd5a:	dabe      	bge.n	801fcda <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd5c:	fb0e 2404 	mla	r4, lr, r4, r2
 801fd60:	1424      	asrs	r4, r4, #16
 801fd62:	d4ba      	bmi.n	801fcda <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd64:	4564      	cmp	r4, ip
 801fd66:	dab8      	bge.n	801fcda <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fd68:	4699      	mov	r9, r3
 801fd6a:	46aa      	mov	sl, r5
 801fd6c:	f1b9 0f00 	cmp.w	r9, #0
 801fd70:	ddb9      	ble.n	801fce6 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801fd72:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801fd76:	1406      	asrs	r6, r0, #16
 801fd78:	1414      	asrs	r4, r2, #16
 801fd7a:	4440      	add	r0, r8
 801fd7c:	4472      	add	r2, lr
 801fd7e:	f109 39ff 	add.w	r9, r9, #4294967295
 801fd82:	fb0c 6404 	mla	r4, ip, r4, r6
 801fd86:	9e00      	ldr	r6, [sp, #0]
 801fd88:	f836 6014 	ldrh.w	r6, [r6, r4, lsl #1]
 801fd8c:	10f4      	asrs	r4, r6, #3
 801fd8e:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801fd92:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801fd96:	00f6      	lsls	r6, r6, #3
 801fd98:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fd9c:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801fda0:	b2f6      	uxtb	r6, r6
 801fda2:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801fda6:	0224      	lsls	r4, r4, #8
 801fda8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fdac:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801fdb0:	4334      	orrs	r4, r6
 801fdb2:	f84a 4b04 	str.w	r4, [sl], #4
 801fdb6:	e7d9      	b.n	801fd6c <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x102>
 801fdb8:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801fdbc:	d427      	bmi.n	801fe0e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fdbe:	68be      	ldr	r6, [r7, #8]
 801fdc0:	4566      	cmp	r6, ip
 801fdc2:	dd24      	ble.n	801fe0e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fdc4:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801fdc8:	d421      	bmi.n	801fe0e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fdca:	68fc      	ldr	r4, [r7, #12]
 801fdcc:	455c      	cmp	r4, fp
 801fdce:	dd1e      	ble.n	801fe0e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801fdd0:	b236      	sxth	r6, r6
 801fdd2:	9c00      	ldr	r4, [sp, #0]
 801fdd4:	fb0b c606 	mla	r6, fp, r6, ip
 801fdd8:	f06f 0b03 	mvn.w	fp, #3
 801fddc:	f834 6016 	ldrh.w	r6, [r4, r6, lsl #1]
 801fde0:	fb0b fb09 	mul.w	fp, fp, r9
 801fde4:	10f4      	asrs	r4, r6, #3
 801fde6:	ea4f 2c26 	mov.w	ip, r6, asr #8
 801fdea:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801fdee:	00f6      	lsls	r6, r6, #3
 801fdf0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801fdf4:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 801fdf8:	b2f6      	uxtb	r6, r6
 801fdfa:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 801fdfe:	0224      	lsls	r4, r4, #8
 801fe00:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 801fe04:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801fe08:	4334      	orrs	r4, r6
 801fe0a:	f84a 400b 	str.w	r4, [sl, fp]
 801fe0e:	4440      	add	r0, r8
 801fe10:	4472      	add	r2, lr
 801fe12:	f109 39ff 	add.w	r9, r9, #4294967295
 801fe16:	e763      	b.n	801fce0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801fe18:	b003      	add	sp, #12
 801fe1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fe1e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fe1e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fe22:	b085      	sub	sp, #20
 801fe24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801fe28:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fe2a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801fe2e:	6868      	ldr	r0, [r5, #4]
 801fe30:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 801fe34:	e9dd 1414 	ldrd	r1, r4, [sp, #80]	; 0x50
 801fe38:	fb00 1404 	mla	r4, r0, r4, r1
 801fe3c:	6829      	ldr	r1, [r5, #0]
 801fe3e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 801fe42:	9916      	ldr	r1, [sp, #88]	; 0x58
 801fe44:	6809      	ldr	r1, [r1, #0]
 801fe46:	9101      	str	r1, [sp, #4]
 801fe48:	9902      	ldr	r1, [sp, #8]
 801fe4a:	2900      	cmp	r1, #0
 801fe4c:	dc03      	bgt.n	801fe56 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fe4e:	9903      	ldr	r1, [sp, #12]
 801fe50:	2900      	cmp	r1, #0
 801fe52:	f340 8137 	ble.w	80200c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801fe56:	9916      	ldr	r1, [sp, #88]	; 0x58
 801fe58:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801fe5c:	f9b1 700c 	ldrsh.w	r7, [r1, #12]
 801fe60:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801fe62:	f501 4000 	add.w	r0, r1, #32768	; 0x8000
 801fe66:	9910      	ldr	r1, [sp, #64]	; 0x40
 801fe68:	f501 4100 	add.w	r1, r1, #32768	; 0x8000
 801fe6c:	2b00      	cmp	r3, #0
 801fe6e:	dd0e      	ble.n	801fe8e <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801fe70:	1405      	asrs	r5, r0, #16
 801fe72:	d405      	bmi.n	801fe80 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fe74:	4565      	cmp	r5, ip
 801fe76:	da03      	bge.n	801fe80 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fe78:	140d      	asrs	r5, r1, #16
 801fe7a:	d401      	bmi.n	801fe80 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801fe7c:	42bd      	cmp	r5, r7
 801fe7e:	db07      	blt.n	801fe90 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe80:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fe82:	3b01      	subs	r3, #1
 801fe84:	3404      	adds	r4, #4
 801fe86:	4428      	add	r0, r5
 801fe88:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fe8a:	4429      	add	r1, r5
 801fe8c:	e7ee      	b.n	801fe6c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801fe8e:	d041      	beq.n	801ff14 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf6>
 801fe90:	1e5d      	subs	r5, r3, #1
 801fe92:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fe94:	fb06 0605 	mla	r6, r6, r5, r0
 801fe98:	1436      	asrs	r6, r6, #16
 801fe9a:	d433      	bmi.n	801ff04 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801fe9c:	4566      	cmp	r6, ip
 801fe9e:	da31      	bge.n	801ff04 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801fea0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801fea2:	fb06 1505 	mla	r5, r6, r5, r1
 801fea6:	142d      	asrs	r5, r5, #16
 801fea8:	d42c      	bmi.n	801ff04 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801feaa:	42bd      	cmp	r5, r7
 801feac:	da2a      	bge.n	801ff04 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801feae:	1d25      	adds	r5, r4, #4
 801feb0:	469a      	mov	sl, r3
 801feb2:	f1ba 0f00 	cmp.w	sl, #0
 801feb6:	dd29      	ble.n	801ff0c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 801feb8:	9f16      	ldr	r7, [sp, #88]	; 0x58
 801feba:	140e      	asrs	r6, r1, #16
 801febc:	2aff      	cmp	r2, #255	; 0xff
 801febe:	f9b7 c008 	ldrsh.w	ip, [r7, #8]
 801fec2:	ea4f 4720 	mov.w	r7, r0, asr #16
 801fec6:	fb0c 7606 	mla	r6, ip, r6, r7
 801feca:	9f01      	ldr	r7, [sp, #4]
 801fecc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801fed0:	4437      	add	r7, r6
 801fed2:	f897 e002 	ldrb.w	lr, [r7, #2]
 801fed6:	f897 8001 	ldrb.w	r8, [r7, #1]
 801feda:	9f01      	ldr	r7, [sp, #4]
 801fedc:	f817 9006 	ldrb.w	r9, [r7, r6]
 801fee0:	f040 80bb 	bne.w	802005a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 801fee4:	f805 9c04 	strb.w	r9, [r5, #-4]
 801fee8:	f805 8c03 	strb.w	r8, [r5, #-3]
 801feec:	f805 ec02 	strb.w	lr, [r5, #-2]
 801fef0:	f805 2c01 	strb.w	r2, [r5, #-1]
 801fef4:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801fef6:	3504      	adds	r5, #4
 801fef8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fefc:	4430      	add	r0, r6
 801fefe:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ff00:	4431      	add	r1, r6
 801ff02:	e7d6      	b.n	801feb2 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801ff04:	2500      	movs	r5, #0
 801ff06:	195e      	adds	r6, r3, r5
 801ff08:	2e00      	cmp	r6, #0
 801ff0a:	dc3f      	bgt.n	801ff8c <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 801ff0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ff10:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801ff14:	9b02      	ldr	r3, [sp, #8]
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	f340 80d4 	ble.w	80200c4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801ff1c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ff20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ff26:	eeb0 6a62 	vmov.f32	s12, s5
 801ff2a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ff2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ff32:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff36:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801ff3a:	eeb0 6a43 	vmov.f32	s12, s6
 801ff3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ff42:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801ff46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ff4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ff4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ff52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ff56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ff5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ff5e:	ee12 1a90 	vmov	r1, s5
 801ff62:	eef0 2a47 	vmov.f32	s5, s14
 801ff66:	fb91 f3f3 	sdiv	r3, r1, r3
 801ff6a:	ee13 1a10 	vmov	r1, s6
 801ff6e:	9311      	str	r3, [sp, #68]	; 0x44
 801ff70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff72:	eeb0 3a67 	vmov.f32	s6, s15
 801ff76:	fb91 f3f3 	sdiv	r3, r1, r3
 801ff7a:	9312      	str	r3, [sp, #72]	; 0x48
 801ff7c:	9b02      	ldr	r3, [sp, #8]
 801ff7e:	9903      	ldr	r1, [sp, #12]
 801ff80:	3b01      	subs	r3, #1
 801ff82:	9302      	str	r3, [sp, #8]
 801ff84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ff86:	bf08      	it	eq
 801ff88:	460b      	moveq	r3, r1
 801ff8a:	e75d      	b.n	801fe48 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801ff8c:	ea5f 4c20 	movs.w	ip, r0, asr #16
 801ff90:	d424      	bmi.n	801ffdc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ff92:	9e16      	ldr	r6, [sp, #88]	; 0x58
 801ff94:	68b7      	ldr	r7, [r6, #8]
 801ff96:	4567      	cmp	r7, ip
 801ff98:	dd20      	ble.n	801ffdc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ff9a:	ea5f 4e21 	movs.w	lr, r1, asr #16
 801ff9e:	d41d      	bmi.n	801ffdc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ffa0:	68f6      	ldr	r6, [r6, #12]
 801ffa2:	4576      	cmp	r6, lr
 801ffa4:	dd1a      	ble.n	801ffdc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ffa6:	b23f      	sxth	r7, r7
 801ffa8:	9e01      	ldr	r6, [sp, #4]
 801ffaa:	2aff      	cmp	r2, #255	; 0xff
 801ffac:	fb0e cc07 	mla	ip, lr, r7, ip
 801ffb0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ffb4:	4466      	add	r6, ip
 801ffb6:	f896 8002 	ldrb.w	r8, [r6, #2]
 801ffba:	f896 9001 	ldrb.w	r9, [r6, #1]
 801ffbe:	9e01      	ldr	r6, [sp, #4]
 801ffc0:	f816 a00c 	ldrb.w	sl, [r6, ip]
 801ffc4:	d110      	bne.n	801ffe8 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801ffc6:	f06f 0603 	mvn.w	r6, #3
 801ffca:	436e      	muls	r6, r5
 801ffcc:	f804 a006 	strb.w	sl, [r4, r6]
 801ffd0:	4426      	add	r6, r4
 801ffd2:	f886 9001 	strb.w	r9, [r6, #1]
 801ffd6:	f886 8002 	strb.w	r8, [r6, #2]
 801ffda:	70f2      	strb	r2, [r6, #3]
 801ffdc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801ffde:	3d01      	subs	r5, #1
 801ffe0:	4430      	add	r0, r6
 801ffe2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 801ffe4:	4431      	add	r1, r6
 801ffe6:	e78e      	b.n	801ff06 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe8>
 801ffe8:	2a00      	cmp	r2, #0
 801ffea:	d0f7      	beq.n	801ffdc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801ffec:	fb1a fa02 	smulbb	sl, sl, r2
 801fff0:	f06f 0603 	mvn.w	r6, #3
 801fff4:	fb12 f909 	smulbb	r9, r2, r9
 801fff8:	fb12 f808 	smulbb	r8, r2, r8
 801fffc:	fb06 fb05 	mul.w	fp, r6, r5
 8020000:	eb04 0c0b 	add.w	ip, r4, fp
 8020004:	f89c 7003 	ldrb.w	r7, [ip, #3]
 8020008:	fb02 f607 	mul.w	r6, r2, r7
 802000c:	f106 0e01 	add.w	lr, r6, #1
 8020010:	eb0e 2e16 	add.w	lr, lr, r6, lsr #8
 8020014:	19d6      	adds	r6, r2, r7
 8020016:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802001a:	eba7 070e 	sub.w	r7, r7, lr
 802001e:	eba6 060e 	sub.w	r6, r6, lr
 8020022:	f814 e00b 	ldrb.w	lr, [r4, fp]
 8020026:	b2f6      	uxtb	r6, r6
 8020028:	fb07 aa0e 	mla	sl, r7, lr, sl
 802002c:	fb9a faf6 	sdiv	sl, sl, r6
 8020030:	f804 a00b 	strb.w	sl, [r4, fp]
 8020034:	f89c e001 	ldrb.w	lr, [ip, #1]
 8020038:	f88c 6003 	strb.w	r6, [ip, #3]
 802003c:	fb07 990e 	mla	r9, r7, lr, r9
 8020040:	f89c e002 	ldrb.w	lr, [ip, #2]
 8020044:	fb07 880e 	mla	r8, r7, lr, r8
 8020048:	fb99 f9f6 	sdiv	r9, r9, r6
 802004c:	fb98 f8f6 	sdiv	r8, r8, r6
 8020050:	f88c 9001 	strb.w	r9, [ip, #1]
 8020054:	f88c 8002 	strb.w	r8, [ip, #2]
 8020058:	e7c0      	b.n	801ffdc <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802005a:	2a00      	cmp	r2, #0
 802005c:	f43f af4a 	beq.w	801fef4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 8020060:	f815 bc01 	ldrb.w	fp, [r5, #-1]
 8020064:	fb19 f902 	smulbb	r9, r9, r2
 8020068:	fb12 f808 	smulbb	r8, r2, r8
 802006c:	fb02 fc0b 	mul.w	ip, r2, fp
 8020070:	eb02 060b 	add.w	r6, r2, fp
 8020074:	fb12 fe0e 	smulbb	lr, r2, lr
 8020078:	f10c 0701 	add.w	r7, ip, #1
 802007c:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8020080:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8020084:	ebab 070c 	sub.w	r7, fp, ip
 8020088:	eba6 060c 	sub.w	r6, r6, ip
 802008c:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8020090:	b2f6      	uxtb	r6, r6
 8020092:	fb07 990c 	mla	r9, r7, ip, r9
 8020096:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 802009a:	f805 6c01 	strb.w	r6, [r5, #-1]
 802009e:	fb07 880c 	mla	r8, r7, ip, r8
 80200a2:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 80200a6:	fb07 ee0c 	mla	lr, r7, ip, lr
 80200aa:	fb99 f9f6 	sdiv	r9, r9, r6
 80200ae:	fb98 f8f6 	sdiv	r8, r8, r6
 80200b2:	fb9e fef6 	sdiv	lr, lr, r6
 80200b6:	f805 9c04 	strb.w	r9, [r5, #-4]
 80200ba:	f805 8c03 	strb.w	r8, [r5, #-3]
 80200be:	f805 ec02 	strb.w	lr, [r5, #-2]
 80200c2:	e717      	b.n	801fef4 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 80200c4:	b005      	add	sp, #20
 80200c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080200ca <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80200ca:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80200ce:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80200d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80200d4:	9201      	str	r2, [sp, #4]
 80200d6:	6868      	ldr	r0, [r5, #4]
 80200d8:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80200da:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	; 0x48
 80200de:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	; 0x3c
 80200e2:	fb00 2404 	mla	r4, r0, r4, r2
 80200e6:	682a      	ldr	r2, [r5, #0]
 80200e8:	f8d7 8000 	ldr.w	r8, [r7]
 80200ec:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 80200f0:	2900      	cmp	r1, #0
 80200f2:	dc03      	bgt.n	80200fc <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80200f4:	9a01      	ldr	r2, [sp, #4]
 80200f6:	2a00      	cmp	r2, #0
 80200f8:	f340 80af 	ble.w	802025a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80200fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80200fe:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 8020102:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8020106:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020108:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 802010c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8020110:	2b00      	cmp	r3, #0
 8020112:	dd0c      	ble.n	802012e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8020114:	1405      	asrs	r5, r0, #16
 8020116:	d405      	bmi.n	8020124 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020118:	4555      	cmp	r5, sl
 802011a:	da03      	bge.n	8020124 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 802011c:	1415      	asrs	r5, r2, #16
 802011e:	d401      	bmi.n	8020124 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8020120:	454d      	cmp	r5, r9
 8020122:	db05      	blt.n	8020130 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8020124:	4470      	add	r0, lr
 8020126:	4462      	add	r2, ip
 8020128:	3b01      	subs	r3, #1
 802012a:	3404      	adds	r4, #4
 802012c:	e7f0      	b.n	8020110 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 802012e:	d037      	beq.n	80201a0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd6>
 8020130:	1e5d      	subs	r5, r3, #1
 8020132:	fb0e 0605 	mla	r6, lr, r5, r0
 8020136:	1436      	asrs	r6, r6, #16
 8020138:	d42a      	bmi.n	8020190 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 802013a:	4556      	cmp	r6, sl
 802013c:	da28      	bge.n	8020190 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 802013e:	fb0c 2505 	mla	r5, ip, r5, r2
 8020142:	142d      	asrs	r5, r5, #16
 8020144:	d424      	bmi.n	8020190 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 8020146:	454d      	cmp	r5, r9
 8020148:	da22      	bge.n	8020190 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc6>
 802014a:	1d26      	adds	r6, r4, #4
 802014c:	4699      	mov	r9, r3
 802014e:	f1b9 0f00 	cmp.w	r9, #0
 8020152:	f106 0604 	add.w	r6, r6, #4
 8020156:	dd1f      	ble.n	8020198 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xce>
 8020158:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 802015c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8020160:	1415      	asrs	r5, r2, #16
 8020162:	4470      	add	r0, lr
 8020164:	4462      	add	r2, ip
 8020166:	f109 39ff 	add.w	r9, r9, #4294967295
 802016a:	fb0b a505 	mla	r5, fp, r5, sl
 802016e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020172:	eb08 0a05 	add.w	sl, r8, r5
 8020176:	f818 5005 	ldrb.w	r5, [r8, r5]
 802017a:	f806 5c08 	strb.w	r5, [r6, #-8]
 802017e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8020182:	f806 5c07 	strb.w	r5, [r6, #-7]
 8020186:	f89a 5002 	ldrb.w	r5, [sl, #2]
 802018a:	f806 5c06 	strb.w	r5, [r6, #-6]
 802018e:	e7de      	b.n	802014e <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8020190:	2600      	movs	r6, #0
 8020192:	199d      	adds	r5, r3, r6
 8020194:	2d00      	cmp	r5, #0
 8020196:	dc37      	bgt.n	8020208 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8020198:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802019c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80201a0:	2900      	cmp	r1, #0
 80201a2:	dd5a      	ble.n	802025a <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80201a4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80201a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80201aa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80201ae:	3901      	subs	r1, #1
 80201b0:	eeb0 6a62 	vmov.f32	s12, s5
 80201b4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80201b8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80201bc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201c0:	ed8d 6a0d 	vstr	s12, [sp, #52]	; 0x34
 80201c4:	eeb0 6a43 	vmov.f32	s12, s6
 80201c8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80201cc:	ed8d 6a0e 	vstr	s12, [sp, #56]	; 0x38
 80201d0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80201d4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80201d8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80201dc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80201e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80201e4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80201e8:	ee12 2a90 	vmov	r2, s5
 80201ec:	eef0 2a47 	vmov.f32	s5, s14
 80201f0:	fb92 fef3 	sdiv	lr, r2, r3
 80201f4:	ee13 2a10 	vmov	r2, s6
 80201f8:	eeb0 3a67 	vmov.f32	s6, s15
 80201fc:	fb92 fcf3 	sdiv	ip, r2, r3
 8020200:	9a01      	ldr	r2, [sp, #4]
 8020202:	bf08      	it	eq
 8020204:	4613      	moveq	r3, r2
 8020206:	e773      	b.n	80200f0 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26>
 8020208:	ea5f 4920 	movs.w	r9, r0, asr #16
 802020c:	d421      	bmi.n	8020252 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802020e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8020212:	45cb      	cmp	fp, r9
 8020214:	dd1d      	ble.n	8020252 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020216:	ea5f 4a22 	movs.w	sl, r2, asr #16
 802021a:	d41a      	bmi.n	8020252 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 802021c:	68fd      	ldr	r5, [r7, #12]
 802021e:	4555      	cmp	r5, sl
 8020220:	dd17      	ble.n	8020252 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8020222:	fa0f f58b 	sxth.w	r5, fp
 8020226:	fb0a 9505 	mla	r5, sl, r5, r9
 802022a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802022e:	f818 9005 	ldrb.w	r9, [r8, r5]
 8020232:	eb08 0b05 	add.w	fp, r8, r5
 8020236:	f06f 0503 	mvn.w	r5, #3
 802023a:	4375      	muls	r5, r6
 802023c:	f804 9005 	strb.w	r9, [r4, r5]
 8020240:	4425      	add	r5, r4
 8020242:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8020246:	f885 9001 	strb.w	r9, [r5, #1]
 802024a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 802024e:	f885 9002 	strb.w	r9, [r5, #2]
 8020252:	4470      	add	r0, lr
 8020254:	4462      	add	r2, ip
 8020256:	3e01      	subs	r6, #1
 8020258:	e79b      	b.n	8020192 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 802025a:	b003      	add	sp, #12
 802025c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020260 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020264:	b087      	sub	sp, #28
 8020266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 802026a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 802026c:	9203      	str	r2, [sp, #12]
 802026e:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8020272:	9100      	str	r1, [sp, #0]
 8020274:	9204      	str	r2, [sp, #16]
 8020276:	6861      	ldr	r1, [r4, #4]
 8020278:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 802027c:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8020280:	fb01 2000 	mla	r0, r1, r0, r2
 8020284:	6822      	ldr	r2, [r4, #0]
 8020286:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 802028a:	f8db 2000 	ldr.w	r2, [fp]
 802028e:	9201      	str	r2, [sp, #4]
 8020290:	9a00      	ldr	r2, [sp, #0]
 8020292:	2a00      	cmp	r2, #0
 8020294:	dc03      	bgt.n	802029e <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020296:	9a03      	ldr	r2, [sp, #12]
 8020298:	2a00      	cmp	r2, #0
 802029a:	f340 8147 	ble.w	802052c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 802029e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80202a0:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 80202a4:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80202a8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80202aa:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 80202ae:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80202b2:	2b00      	cmp	r3, #0
 80202b4:	dd0e      	ble.n	80202d4 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80202b6:	140c      	asrs	r4, r1, #16
 80202b8:	d405      	bmi.n	80202c6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80202ba:	42bc      	cmp	r4, r7
 80202bc:	da03      	bge.n	80202c6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80202be:	1414      	asrs	r4, r2, #16
 80202c0:	d401      	bmi.n	80202c6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 80202c2:	42b4      	cmp	r4, r6
 80202c4:	db07      	blt.n	80202d6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80202c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80202c8:	3b01      	subs	r3, #1
 80202ca:	3004      	adds	r0, #4
 80202cc:	4421      	add	r1, r4
 80202ce:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80202d0:	4422      	add	r2, r4
 80202d2:	e7ee      	b.n	80202b2 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80202d4:	d048      	beq.n	8020368 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 80202d6:	1e5c      	subs	r4, r3, #1
 80202d8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80202da:	fb05 1504 	mla	r5, r5, r4, r1
 80202de:	142d      	asrs	r5, r5, #16
 80202e0:	d438      	bmi.n	8020354 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 80202e2:	42bd      	cmp	r5, r7
 80202e4:	da36      	bge.n	8020354 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 80202e6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80202e8:	fb05 2404 	mla	r4, r5, r4, r2
 80202ec:	1424      	asrs	r4, r4, #16
 80202ee:	d431      	bmi.n	8020354 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 80202f0:	42b4      	cmp	r4, r6
 80202f2:	da2f      	bge.n	8020354 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 80202f4:	469e      	mov	lr, r3
 80202f6:	4604      	mov	r4, r0
 80202f8:	f1be 0f00 	cmp.w	lr, #0
 80202fc:	dd30      	ble.n	8020360 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 80202fe:	140e      	asrs	r6, r1, #16
 8020300:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020304:	1415      	asrs	r5, r2, #16
 8020306:	fb07 6505 	mla	r5, r7, r5, r6
 802030a:	9e01      	ldr	r6, [sp, #4]
 802030c:	f856 6025 	ldr.w	r6, [r6, r5, lsl #2]
 8020310:	0e35      	lsrs	r5, r6, #24
 8020312:	d017      	beq.n	8020344 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 8020314:	9f04      	ldr	r7, [sp, #16]
 8020316:	f3c6 4907 	ubfx	r9, r6, #16, #8
 802031a:	f3c6 2c07 	ubfx	ip, r6, #8, #8
 802031e:	437d      	muls	r5, r7
 8020320:	fa5f f88c 	uxtb.w	r8, ip
 8020324:	1c6f      	adds	r7, r5, #1
 8020326:	eb07 2525 	add.w	r5, r7, r5, asr #8
 802032a:	fa5f f789 	uxtb.w	r7, r9
 802032e:	122d      	asrs	r5, r5, #8
 8020330:	9702      	str	r7, [sp, #8]
 8020332:	2dff      	cmp	r5, #255	; 0xff
 8020334:	f040 80c7 	bne.w	80204c6 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8020338:	7026      	strb	r6, [r4, #0]
 802033a:	f884 c001 	strb.w	ip, [r4, #1]
 802033e:	f884 9002 	strb.w	r9, [r4, #2]
 8020342:	70e5      	strb	r5, [r4, #3]
 8020344:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020346:	3404      	adds	r4, #4
 8020348:	f10e 3eff 	add.w	lr, lr, #4294967295
 802034c:	4429      	add	r1, r5
 802034e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8020350:	442a      	add	r2, r5
 8020352:	e7d1      	b.n	80202f8 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8020354:	f04f 0c00 	mov.w	ip, #0
 8020358:	eb03 040c 	add.w	r4, r3, ip
 802035c:	2c00      	cmp	r4, #0
 802035e:	dc3f      	bgt.n	80203e0 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x180>
 8020360:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8020364:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020368:	9b00      	ldr	r3, [sp, #0]
 802036a:	2b00      	cmp	r3, #0
 802036c:	f340 80de 	ble.w	802052c <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>
 8020370:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020374:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020376:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802037a:	eeb0 6a62 	vmov.f32	s12, s5
 802037e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020382:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020386:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802038a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 802038e:	eeb0 6a43 	vmov.f32	s12, s6
 8020392:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020396:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 802039a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802039e:	ee61 7a27 	vmul.f32	s15, s2, s15
 80203a2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80203a6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80203aa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80203ae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80203b2:	ee12 2a90 	vmov	r2, s5
 80203b6:	eef0 2a47 	vmov.f32	s5, s14
 80203ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80203be:	ee13 2a10 	vmov	r2, s6
 80203c2:	9313      	str	r3, [sp, #76]	; 0x4c
 80203c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203c6:	eeb0 3a67 	vmov.f32	s6, s15
 80203ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80203ce:	9314      	str	r3, [sp, #80]	; 0x50
 80203d0:	9b00      	ldr	r3, [sp, #0]
 80203d2:	9a03      	ldr	r2, [sp, #12]
 80203d4:	3b01      	subs	r3, #1
 80203d6:	9300      	str	r3, [sp, #0]
 80203d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80203da:	bf08      	it	eq
 80203dc:	4613      	moveq	r3, r2
 80203de:	e757      	b.n	8020290 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80203e0:	140e      	asrs	r6, r1, #16
 80203e2:	d42e      	bmi.n	8020442 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80203e4:	f8db 5008 	ldr.w	r5, [fp, #8]
 80203e8:	42b5      	cmp	r5, r6
 80203ea:	dd2a      	ble.n	8020442 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80203ec:	1417      	asrs	r7, r2, #16
 80203ee:	d428      	bmi.n	8020442 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80203f0:	f8db 400c 	ldr.w	r4, [fp, #12]
 80203f4:	42bc      	cmp	r4, r7
 80203f6:	dd24      	ble.n	8020442 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80203f8:	b22d      	sxth	r5, r5
 80203fa:	9c01      	ldr	r4, [sp, #4]
 80203fc:	fb07 6505 	mla	r5, r7, r5, r6
 8020400:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8020404:	0e2c      	lsrs	r4, r5, #24
 8020406:	d01c      	beq.n	8020442 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020408:	9e04      	ldr	r6, [sp, #16]
 802040a:	4374      	muls	r4, r6
 802040c:	1c66      	adds	r6, r4, #1
 802040e:	eb06 2424 	add.w	r4, r6, r4, asr #8
 8020412:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8020416:	1224      	asrs	r4, r4, #8
 8020418:	b2f7      	uxtb	r7, r6
 802041a:	2cff      	cmp	r4, #255	; 0xff
 802041c:	9705      	str	r7, [sp, #20]
 802041e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8020422:	fa5f f887 	uxtb.w	r8, r7
 8020426:	d113      	bne.n	8020450 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8020428:	f06f 0e03 	mvn.w	lr, #3
 802042c:	fb0e fe0c 	mul.w	lr, lr, ip
 8020430:	f800 500e 	strb.w	r5, [r0, lr]
 8020434:	4486      	add	lr, r0
 8020436:	f88e 7001 	strb.w	r7, [lr, #1]
 802043a:	f88e 6002 	strb.w	r6, [lr, #2]
 802043e:	f88e 4003 	strb.w	r4, [lr, #3]
 8020442:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8020444:	f10c 3cff 	add.w	ip, ip, #4294967295
 8020448:	4421      	add	r1, r4
 802044a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 802044c:	4422      	add	r2, r4
 802044e:	e783      	b.n	8020358 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf8>
 8020450:	b2e6      	uxtb	r6, r4
 8020452:	9602      	str	r6, [sp, #8]
 8020454:	2c00      	cmp	r4, #0
 8020456:	d0f4      	beq.n	8020442 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8020458:	f06f 0603 	mvn.w	r6, #3
 802045c:	b2ed      	uxtb	r5, r5
 802045e:	fb04 f808 	mul.w	r8, r4, r8
 8020462:	fb06 f90c 	mul.w	r9, r6, ip
 8020466:	9e02      	ldr	r6, [sp, #8]
 8020468:	eb00 0e09 	add.w	lr, r0, r9
 802046c:	f89e a003 	ldrb.w	sl, [lr, #3]
 8020470:	fb06 f70a 	mul.w	r7, r6, sl
 8020474:	1c7e      	adds	r6, r7, #1
 8020476:	eb06 2717 	add.w	r7, r6, r7, lsr #8
 802047a:	9e02      	ldr	r6, [sp, #8]
 802047c:	123f      	asrs	r7, r7, #8
 802047e:	4456      	add	r6, sl
 8020480:	1bf6      	subs	r6, r6, r7
 8020482:	ebaa 0707 	sub.w	r7, sl, r7
 8020486:	f810 a009 	ldrb.w	sl, [r0, r9]
 802048a:	b2f6      	uxtb	r6, r6
 802048c:	fb07 fa0a 	mul.w	sl, r7, sl
 8020490:	fb04 a505 	mla	r5, r4, r5, sl
 8020494:	fb95 f5f6 	sdiv	r5, r5, r6
 8020498:	f800 5009 	strb.w	r5, [r0, r9]
 802049c:	f89e 5001 	ldrb.w	r5, [lr, #1]
 80204a0:	f89e a002 	ldrb.w	sl, [lr, #2]
 80204a4:	fb07 8805 	mla	r8, r7, r5, r8
 80204a8:	9d05      	ldr	r5, [sp, #20]
 80204aa:	f88e 6003 	strb.w	r6, [lr, #3]
 80204ae:	436c      	muls	r4, r5
 80204b0:	fb07 470a 	mla	r7, r7, sl, r4
 80204b4:	fb98 f8f6 	sdiv	r8, r8, r6
 80204b8:	fb97 f7f6 	sdiv	r7, r7, r6
 80204bc:	f88e 8001 	strb.w	r8, [lr, #1]
 80204c0:	f88e 7002 	strb.w	r7, [lr, #2]
 80204c4:	e7bd      	b.n	8020442 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80204c6:	b2ef      	uxtb	r7, r5
 80204c8:	2d00      	cmp	r5, #0
 80204ca:	f43f af3b 	beq.w	8020344 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 80204ce:	f894 9003 	ldrb.w	r9, [r4, #3]
 80204d2:	b2f6      	uxtb	r6, r6
 80204d4:	fb05 f808 	mul.w	r8, r5, r8
 80204d8:	fb07 fa09 	mul.w	sl, r7, r9
 80204dc:	444f      	add	r7, r9
 80204de:	f10a 0c01 	add.w	ip, sl, #1
 80204e2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 80204e6:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80204ea:	eba7 070c 	sub.w	r7, r7, ip
 80204ee:	eba9 0c0c 	sub.w	ip, r9, ip
 80204f2:	f894 9000 	ldrb.w	r9, [r4]
 80204f6:	b2ff      	uxtb	r7, r7
 80204f8:	fb0c f909 	mul.w	r9, ip, r9
 80204fc:	70e7      	strb	r7, [r4, #3]
 80204fe:	fb05 9606 	mla	r6, r5, r6, r9
 8020502:	f894 9002 	ldrb.w	r9, [r4, #2]
 8020506:	fb96 f6f7 	sdiv	r6, r6, r7
 802050a:	7026      	strb	r6, [r4, #0]
 802050c:	7866      	ldrb	r6, [r4, #1]
 802050e:	fb0c 8806 	mla	r8, ip, r6, r8
 8020512:	9e02      	ldr	r6, [sp, #8]
 8020514:	4375      	muls	r5, r6
 8020516:	fb0c 5c09 	mla	ip, ip, r9, r5
 802051a:	fb98 f8f7 	sdiv	r8, r8, r7
 802051e:	fb9c fcf7 	sdiv	ip, ip, r7
 8020522:	f884 8001 	strb.w	r8, [r4, #1]
 8020526:	f884 c002 	strb.w	ip, [r4, #2]
 802052a:	e70b      	b.n	8020344 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe4>
 802052c:	b007      	add	sp, #28
 802052e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08020534 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020538:	b089      	sub	sp, #36	; 0x24
 802053a:	469a      	mov	sl, r3
 802053c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020540:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8020542:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8020546:	9102      	str	r1, [sp, #8]
 8020548:	9206      	str	r2, [sp, #24]
 802054a:	9307      	str	r3, [sp, #28]
 802054c:	6842      	ldr	r2, [r0, #4]
 802054e:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 8020552:	e9dd 3118 	ldrd	r3, r1, [sp, #96]	; 0x60
 8020556:	fb02 3101 	mla	r1, r2, r1, r3
 802055a:	6803      	ldr	r3, [r0, #0]
 802055c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8020560:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020564:	3301      	adds	r3, #1
 8020566:	f023 0301 	bic.w	r3, r3, #1
 802056a:	9303      	str	r3, [sp, #12]
 802056c:	f8db 3000 	ldr.w	r3, [fp]
 8020570:	9304      	str	r3, [sp, #16]
 8020572:	9b02      	ldr	r3, [sp, #8]
 8020574:	2b00      	cmp	r3, #0
 8020576:	dc03      	bgt.n	8020580 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8020578:	9b06      	ldr	r3, [sp, #24]
 802057a:	2b00      	cmp	r3, #0
 802057c:	f340 8154 	ble.w	8020828 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8020580:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8020582:	f9bb 6008 	ldrsh.w	r6, [fp, #8]
 8020586:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 802058a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802058c:	f9bb 500c 	ldrsh.w	r5, [fp, #12]
 8020590:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8020594:	9301      	str	r3, [sp, #4]
 8020596:	f1ba 0f00 	cmp.w	sl, #0
 802059a:	dd12      	ble.n	80205c2 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 802059c:	1410      	asrs	r0, r2, #16
 802059e:	d406      	bmi.n	80205ae <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80205a0:	42b0      	cmp	r0, r6
 80205a2:	da04      	bge.n	80205ae <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80205a4:	9b01      	ldr	r3, [sp, #4]
 80205a6:	1418      	asrs	r0, r3, #16
 80205a8:	d401      	bmi.n	80205ae <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80205aa:	42a8      	cmp	r0, r5
 80205ac:	db0a      	blt.n	80205c4 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80205ae:	9815      	ldr	r0, [sp, #84]	; 0x54
 80205b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80205b4:	9b01      	ldr	r3, [sp, #4]
 80205b6:	3104      	adds	r1, #4
 80205b8:	4402      	add	r2, r0
 80205ba:	9816      	ldr	r0, [sp, #88]	; 0x58
 80205bc:	4403      	add	r3, r0
 80205be:	9301      	str	r3, [sp, #4]
 80205c0:	e7e9      	b.n	8020596 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80205c2:	d050      	beq.n	8020666 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 80205c4:	f10a 30ff 	add.w	r0, sl, #4294967295
 80205c8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80205ca:	fb04 2400 	mla	r4, r4, r0, r2
 80205ce:	1424      	asrs	r4, r4, #16
 80205d0:	d440      	bmi.n	8020654 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80205d2:	42b4      	cmp	r4, r6
 80205d4:	da3e      	bge.n	8020654 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80205d6:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80205d8:	9b01      	ldr	r3, [sp, #4]
 80205da:	fb04 3000 	mla	r0, r4, r0, r3
 80205de:	1400      	asrs	r0, r0, #16
 80205e0:	d438      	bmi.n	8020654 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80205e2:	42a8      	cmp	r0, r5
 80205e4:	da36      	bge.n	8020654 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80205e6:	1d08      	adds	r0, r1, #4
 80205e8:	46d6      	mov	lr, sl
 80205ea:	f1be 0f00 	cmp.w	lr, #0
 80205ee:	dd36      	ble.n	802065e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80205f0:	9b01      	ldr	r3, [sp, #4]
 80205f2:	1414      	asrs	r4, r2, #16
 80205f4:	141d      	asrs	r5, r3, #16
 80205f6:	9b03      	ldr	r3, [sp, #12]
 80205f8:	fb03 4505 	mla	r5, r3, r5, r4
 80205fc:	9b04      	ldr	r3, [sp, #16]
 80205fe:	086c      	lsrs	r4, r5, #1
 8020600:	5d1c      	ldrb	r4, [r3, r4]
 8020602:	07eb      	lsls	r3, r5, #31
 8020604:	9b07      	ldr	r3, [sp, #28]
 8020606:	bf54      	ite	pl
 8020608:	f004 040f 	andpl.w	r4, r4, #15
 802060c:	1124      	asrmi	r4, r4, #4
 802060e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020612:	b2e4      	uxtb	r4, r4
 8020614:	435c      	muls	r4, r3
 8020616:	1c65      	adds	r5, r4, #1
 8020618:	eb05 2424 	add.w	r4, r5, r4, asr #8
 802061c:	4d84      	ldr	r5, [pc, #528]	; (8020830 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 802061e:	1224      	asrs	r4, r4, #8
 8020620:	f895 9002 	ldrb.w	r9, [r5, #2]
 8020624:	786f      	ldrb	r7, [r5, #1]
 8020626:	2cff      	cmp	r4, #255	; 0xff
 8020628:	f895 c000 	ldrb.w	ip, [r5]
 802062c:	f040 80cb 	bne.w	80207c6 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8020630:	f800 cc04 	strb.w	ip, [r0, #-4]
 8020634:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020638:	f800 9c02 	strb.w	r9, [r0, #-2]
 802063c:	f800 4c01 	strb.w	r4, [r0, #-1]
 8020640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020642:	3004      	adds	r0, #4
 8020644:	9c01      	ldr	r4, [sp, #4]
 8020646:	f10e 3eff 	add.w	lr, lr, #4294967295
 802064a:	441a      	add	r2, r3
 802064c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802064e:	441c      	add	r4, r3
 8020650:	9401      	str	r4, [sp, #4]
 8020652:	e7ca      	b.n	80205ea <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb6>
 8020654:	2600      	movs	r6, #0
 8020656:	eb0a 0006 	add.w	r0, sl, r6
 802065a:	2800      	cmp	r0, #0
 802065c:	dc41      	bgt.n	80206e2 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 802065e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8020662:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020666:	9b02      	ldr	r3, [sp, #8]
 8020668:	2b00      	cmp	r3, #0
 802066a:	f340 80dd 	ble.w	8020828 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 802066e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020672:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020674:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020678:	eeb0 6a62 	vmov.f32	s12, s5
 802067c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020680:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020684:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020688:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 802068c:	eeb0 6a43 	vmov.f32	s12, s6
 8020690:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020694:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8020698:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802069c:	ee61 7a27 	vmul.f32	s15, s2, s15
 80206a0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80206a4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80206a8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80206ac:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80206b0:	ee12 2a90 	vmov	r2, s5
 80206b4:	eef0 2a47 	vmov.f32	s5, s14
 80206b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80206bc:	ee13 2a10 	vmov	r2, s6
 80206c0:	9315      	str	r3, [sp, #84]	; 0x54
 80206c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80206c4:	eeb0 3a67 	vmov.f32	s6, s15
 80206c8:	fb92 f3f3 	sdiv	r3, r2, r3
 80206cc:	9316      	str	r3, [sp, #88]	; 0x58
 80206ce:	9b02      	ldr	r3, [sp, #8]
 80206d0:	9a06      	ldr	r2, [sp, #24]
 80206d2:	3b01      	subs	r3, #1
 80206d4:	9302      	str	r3, [sp, #8]
 80206d6:	bf08      	it	eq
 80206d8:	4692      	moveq	sl, r2
 80206da:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80206dc:	bf18      	it	ne
 80206de:	469a      	movne	sl, r3
 80206e0:	e747      	b.n	8020572 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80206e2:	1414      	asrs	r4, r2, #16
 80206e4:	d432      	bmi.n	802074c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80206e6:	f8db 0008 	ldr.w	r0, [fp, #8]
 80206ea:	42a0      	cmp	r0, r4
 80206ec:	dd2e      	ble.n	802074c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80206ee:	9b01      	ldr	r3, [sp, #4]
 80206f0:	141d      	asrs	r5, r3, #16
 80206f2:	d42b      	bmi.n	802074c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80206f4:	f8db 000c 	ldr.w	r0, [fp, #12]
 80206f8:	42a8      	cmp	r0, r5
 80206fa:	dd27      	ble.n	802074c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80206fc:	9803      	ldr	r0, [sp, #12]
 80206fe:	fb05 4400 	mla	r4, r5, r0, r4
 8020702:	9d04      	ldr	r5, [sp, #16]
 8020704:	0860      	lsrs	r0, r4, #1
 8020706:	07e4      	lsls	r4, r4, #31
 8020708:	9c07      	ldr	r4, [sp, #28]
 802070a:	5c28      	ldrb	r0, [r5, r0]
 802070c:	bf54      	ite	pl
 802070e:	f000 000f 	andpl.w	r0, r0, #15
 8020712:	1100      	asrmi	r0, r0, #4
 8020714:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020718:	b2c0      	uxtb	r0, r0
 802071a:	4360      	muls	r0, r4
 802071c:	1c44      	adds	r4, r0, #1
 802071e:	eb04 2020 	add.w	r0, r4, r0, asr #8
 8020722:	4c43      	ldr	r4, [pc, #268]	; (8020830 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>)
 8020724:	1200      	asrs	r0, r0, #8
 8020726:	78a5      	ldrb	r5, [r4, #2]
 8020728:	f894 c001 	ldrb.w	ip, [r4, #1]
 802072c:	28ff      	cmp	r0, #255	; 0xff
 802072e:	9505      	str	r5, [sp, #20]
 8020730:	f894 e000 	ldrb.w	lr, [r4]
 8020734:	d112      	bne.n	802075c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020736:	f06f 0303 	mvn.w	r3, #3
 802073a:	fb03 f406 	mul.w	r4, r3, r6
 802073e:	f801 e004 	strb.w	lr, [r1, r4]
 8020742:	440c      	add	r4, r1
 8020744:	f884 c001 	strb.w	ip, [r4, #1]
 8020748:	70a5      	strb	r5, [r4, #2]
 802074a:	70e0      	strb	r0, [r4, #3]
 802074c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802074e:	3e01      	subs	r6, #1
 8020750:	9801      	ldr	r0, [sp, #4]
 8020752:	441a      	add	r2, r3
 8020754:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020756:	4418      	add	r0, r3
 8020758:	9001      	str	r0, [sp, #4]
 802075a:	e77c      	b.n	8020656 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 802075c:	b2c4      	uxtb	r4, r0
 802075e:	2800      	cmp	r0, #0
 8020760:	d0f4      	beq.n	802074c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8020762:	f06f 0303 	mvn.w	r3, #3
 8020766:	fb00 fe0e 	mul.w	lr, r0, lr
 802076a:	fb00 fc0c 	mul.w	ip, r0, ip
 802076e:	fb03 f806 	mul.w	r8, r3, r6
 8020772:	eb01 0708 	add.w	r7, r1, r8
 8020776:	f897 9003 	ldrb.w	r9, [r7, #3]
 802077a:	fb04 f509 	mul.w	r5, r4, r9
 802077e:	444c      	add	r4, r9
 8020780:	1c6b      	adds	r3, r5, #1
 8020782:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 8020786:	9b05      	ldr	r3, [sp, #20]
 8020788:	122d      	asrs	r5, r5, #8
 802078a:	4358      	muls	r0, r3
 802078c:	1b64      	subs	r4, r4, r5
 802078e:	eba9 0505 	sub.w	r5, r9, r5
 8020792:	f811 9008 	ldrb.w	r9, [r1, r8]
 8020796:	b2e4      	uxtb	r4, r4
 8020798:	fb05 ee09 	mla	lr, r5, r9, lr
 802079c:	fb9e fef4 	sdiv	lr, lr, r4
 80207a0:	f801 e008 	strb.w	lr, [r1, r8]
 80207a4:	f897 e001 	ldrb.w	lr, [r7, #1]
 80207a8:	f897 9002 	ldrb.w	r9, [r7, #2]
 80207ac:	fb05 cc0e 	mla	ip, r5, lr, ip
 80207b0:	fb05 0509 	mla	r5, r5, r9, r0
 80207b4:	70fc      	strb	r4, [r7, #3]
 80207b6:	fb9c fcf4 	sdiv	ip, ip, r4
 80207ba:	fb95 f5f4 	sdiv	r5, r5, r4
 80207be:	f887 c001 	strb.w	ip, [r7, #1]
 80207c2:	70bd      	strb	r5, [r7, #2]
 80207c4:	e7c2      	b.n	802074c <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80207c6:	b2e5      	uxtb	r5, r4
 80207c8:	2c00      	cmp	r4, #0
 80207ca:	f43f af39 	beq.w	8020640 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80207ce:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 80207d2:	fb04 fc0c 	mul.w	ip, r4, ip
 80207d6:	4367      	muls	r7, r4
 80207d8:	fb05 f608 	mul.w	r6, r5, r8
 80207dc:	4445      	add	r5, r8
 80207de:	fb04 f409 	mul.w	r4, r4, r9
 80207e2:	1c73      	adds	r3, r6, #1
 80207e4:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80207e8:	1236      	asrs	r6, r6, #8
 80207ea:	1bad      	subs	r5, r5, r6
 80207ec:	eba8 0606 	sub.w	r6, r8, r6
 80207f0:	f810 8c04 	ldrb.w	r8, [r0, #-4]
 80207f4:	b2ed      	uxtb	r5, r5
 80207f6:	fb06 cc08 	mla	ip, r6, r8, ip
 80207fa:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 80207fe:	f800 5c01 	strb.w	r5, [r0, #-1]
 8020802:	fb9c fcf5 	sdiv	ip, ip, r5
 8020806:	f800 cc04 	strb.w	ip, [r0, #-4]
 802080a:	f810 cc03 	ldrb.w	ip, [r0, #-3]
 802080e:	fb06 770c 	mla	r7, r6, ip, r7
 8020812:	fb06 4608 	mla	r6, r6, r8, r4
 8020816:	fb97 f7f5 	sdiv	r7, r7, r5
 802081a:	fb96 f6f5 	sdiv	r6, r6, r5
 802081e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8020822:	f800 6c02 	strb.w	r6, [r0, #-2]
 8020826:	e70b      	b.n	8020640 <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8020828:	b009      	add	sp, #36	; 0x24
 802082a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802082e:	bf00      	nop
 8020830:	2003c2cc 	.word	0x2003c2cc

08020834 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020838:	b089      	sub	sp, #36	; 0x24
 802083a:	469a      	mov	sl, r3
 802083c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8020840:	4cb8      	ldr	r4, [pc, #736]	; (8020b24 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>)
 8020842:	9102      	str	r1, [sp, #8]
 8020844:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8020846:	9205      	str	r2, [sp, #20]
 8020848:	684a      	ldr	r2, [r1, #4]
 802084a:	f8dd b068 	ldr.w	fp, [sp, #104]	; 0x68
 802084e:	e9dd 3018 	ldrd	r3, r0, [sp, #96]	; 0x60
 8020852:	fb02 3000 	mla	r0, r2, r0, r3
 8020856:	680b      	ldr	r3, [r1, #0]
 8020858:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 802085c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8020860:	3301      	adds	r3, #1
 8020862:	f023 0301 	bic.w	r3, r3, #1
 8020866:	9303      	str	r3, [sp, #12]
 8020868:	f8db 3000 	ldr.w	r3, [fp]
 802086c:	9304      	str	r3, [sp, #16]
 802086e:	9b02      	ldr	r3, [sp, #8]
 8020870:	2b00      	cmp	r3, #0
 8020872:	dc03      	bgt.n	802087c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020874:	9b05      	ldr	r3, [sp, #20]
 8020876:	2b00      	cmp	r3, #0
 8020878:	f340 8150 	ble.w	8020b1c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 802087c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802087e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8020882:	f503 4100 	add.w	r1, r3, #32768	; 0x8000
 8020886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020888:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 802088c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8020890:	9301      	str	r3, [sp, #4]
 8020892:	f1ba 0f00 	cmp.w	sl, #0
 8020896:	dd12      	ble.n	80208be <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8020898:	140b      	asrs	r3, r1, #16
 802089a:	d406      	bmi.n	80208aa <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802089c:	42bb      	cmp	r3, r7
 802089e:	da04      	bge.n	80208aa <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80208a0:	9b01      	ldr	r3, [sp, #4]
 80208a2:	141b      	asrs	r3, r3, #16
 80208a4:	d401      	bmi.n	80208aa <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80208a6:	42b3      	cmp	r3, r6
 80208a8:	db0a      	blt.n	80208c0 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80208aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80208ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 80208b0:	9a01      	ldr	r2, [sp, #4]
 80208b2:	3004      	adds	r0, #4
 80208b4:	4419      	add	r1, r3
 80208b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80208b8:	441a      	add	r2, r3
 80208ba:	9201      	str	r2, [sp, #4]
 80208bc:	e7e9      	b.n	8020892 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80208be:	d046      	beq.n	802094e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 80208c0:	f10a 33ff 	add.w	r3, sl, #4294967295
 80208c4:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80208c6:	fb05 1503 	mla	r5, r5, r3, r1
 80208ca:	142d      	asrs	r5, r5, #16
 80208cc:	d436      	bmi.n	802093c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 80208ce:	42bd      	cmp	r5, r7
 80208d0:	da34      	bge.n	802093c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 80208d2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80208d4:	9a01      	ldr	r2, [sp, #4]
 80208d6:	fb05 2303 	mla	r3, r5, r3, r2
 80208da:	141b      	asrs	r3, r3, #16
 80208dc:	d42e      	bmi.n	802093c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 80208de:	42b3      	cmp	r3, r6
 80208e0:	da2c      	bge.n	802093c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x108>
 80208e2:	1d05      	adds	r5, r0, #4
 80208e4:	46d0      	mov	r8, sl
 80208e6:	f1b8 0f00 	cmp.w	r8, #0
 80208ea:	dd2c      	ble.n	8020946 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 80208ec:	9b01      	ldr	r3, [sp, #4]
 80208ee:	9a03      	ldr	r2, [sp, #12]
 80208f0:	141e      	asrs	r6, r3, #16
 80208f2:	f894 e000 	ldrb.w	lr, [r4]
 80208f6:	140b      	asrs	r3, r1, #16
 80208f8:	fb02 3606 	mla	r6, r2, r6, r3
 80208fc:	9a04      	ldr	r2, [sp, #16]
 80208fe:	0873      	lsrs	r3, r6, #1
 8020900:	5cd3      	ldrb	r3, [r2, r3]
 8020902:	07f2      	lsls	r2, r6, #31
 8020904:	bf54      	ite	pl
 8020906:	f003 030f 	andpl.w	r3, r3, #15
 802090a:	111b      	asrmi	r3, r3, #4
 802090c:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020910:	b2db      	uxtb	r3, r3
 8020912:	2bff      	cmp	r3, #255	; 0xff
 8020914:	f040 80c9 	bne.w	8020aaa <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8020918:	f805 ec04 	strb.w	lr, [r5, #-4]
 802091c:	7863      	ldrb	r3, [r4, #1]
 802091e:	f805 3c03 	strb.w	r3, [r5, #-3]
 8020922:	78a3      	ldrb	r3, [r4, #2]
 8020924:	f805 3c02 	strb.w	r3, [r5, #-2]
 8020928:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802092a:	3504      	adds	r5, #4
 802092c:	9a01      	ldr	r2, [sp, #4]
 802092e:	f108 38ff 	add.w	r8, r8, #4294967295
 8020932:	4419      	add	r1, r3
 8020934:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020936:	441a      	add	r2, r3
 8020938:	9201      	str	r2, [sp, #4]
 802093a:	e7d4      	b.n	80208e6 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 802093c:	2500      	movs	r5, #0
 802093e:	eb0a 0305 	add.w	r3, sl, r5
 8020942:	2b00      	cmp	r3, #0
 8020944:	dc41      	bgt.n	80209ca <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 8020946:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 802094a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 802094e:	9b02      	ldr	r3, [sp, #8]
 8020950:	2b00      	cmp	r3, #0
 8020952:	f340 80e3 	ble.w	8020b1c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 8020956:	ee30 0a04 	vadd.f32	s0, s0, s8
 802095a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802095c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020960:	eeb0 6a62 	vmov.f32	s12, s5
 8020964:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8020968:	ee31 1a05 	vadd.f32	s2, s2, s10
 802096c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8020970:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
 8020974:	eeb0 6a43 	vmov.f32	s12, s6
 8020978:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802097c:	ed8d 6a14 	vstr	s12, [sp, #80]	; 0x50
 8020980:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020984:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020988:	ee77 2a62 	vsub.f32	s5, s14, s5
 802098c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020990:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020994:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020998:	ee12 2a90 	vmov	r2, s5
 802099c:	eef0 2a47 	vmov.f32	s5, s14
 80209a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80209a4:	ee13 2a10 	vmov	r2, s6
 80209a8:	9315      	str	r3, [sp, #84]	; 0x54
 80209aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80209ac:	eeb0 3a67 	vmov.f32	s6, s15
 80209b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80209b4:	9316      	str	r3, [sp, #88]	; 0x58
 80209b6:	9b02      	ldr	r3, [sp, #8]
 80209b8:	9a05      	ldr	r2, [sp, #20]
 80209ba:	3b01      	subs	r3, #1
 80209bc:	9302      	str	r3, [sp, #8]
 80209be:	bf08      	it	eq
 80209c0:	4692      	moveq	sl, r2
 80209c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80209c4:	bf18      	it	ne
 80209c6:	469a      	movne	sl, r3
 80209c8:	e751      	b.n	802086e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80209ca:	140e      	asrs	r6, r1, #16
 80209cc:	d426      	bmi.n	8020a1c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80209ce:	f8db 3008 	ldr.w	r3, [fp, #8]
 80209d2:	42b3      	cmp	r3, r6
 80209d4:	dd22      	ble.n	8020a1c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80209d6:	9b01      	ldr	r3, [sp, #4]
 80209d8:	141f      	asrs	r7, r3, #16
 80209da:	d41f      	bmi.n	8020a1c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80209dc:	f8db 300c 	ldr.w	r3, [fp, #12]
 80209e0:	42bb      	cmp	r3, r7
 80209e2:	dd1b      	ble.n	8020a1c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 80209e4:	9b03      	ldr	r3, [sp, #12]
 80209e6:	f894 8000 	ldrb.w	r8, [r4]
 80209ea:	fb07 6603 	mla	r6, r7, r3, r6
 80209ee:	9f04      	ldr	r7, [sp, #16]
 80209f0:	0873      	lsrs	r3, r6, #1
 80209f2:	07f6      	lsls	r6, r6, #31
 80209f4:	5cfb      	ldrb	r3, [r7, r3]
 80209f6:	bf54      	ite	pl
 80209f8:	f003 030f 	andpl.w	r3, r3, #15
 80209fc:	111b      	asrmi	r3, r3, #4
 80209fe:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020a02:	b2db      	uxtb	r3, r3
 8020a04:	2bff      	cmp	r3, #255	; 0xff
 8020a06:	d111      	bne.n	8020a2c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8020a08:	f06f 0303 	mvn.w	r3, #3
 8020a0c:	436b      	muls	r3, r5
 8020a0e:	f800 8003 	strb.w	r8, [r0, r3]
 8020a12:	4403      	add	r3, r0
 8020a14:	7866      	ldrb	r6, [r4, #1]
 8020a16:	705e      	strb	r6, [r3, #1]
 8020a18:	78a6      	ldrb	r6, [r4, #2]
 8020a1a:	709e      	strb	r6, [r3, #2]
 8020a1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8020a1e:	3d01      	subs	r5, #1
 8020a20:	9a01      	ldr	r2, [sp, #4]
 8020a22:	4419      	add	r1, r3
 8020a24:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8020a26:	441a      	add	r2, r3
 8020a28:	9201      	str	r2, [sp, #4]
 8020a2a:	e788      	b.n	802093e <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10a>
 8020a2c:	2b00      	cmp	r3, #0
 8020a2e:	d0f5      	beq.n	8020a1c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020a30:	f06f 0203 	mvn.w	r2, #3
 8020a34:	78a6      	ldrb	r6, [r4, #2]
 8020a36:	fb18 f803 	smulbb	r8, r8, r3
 8020a3a:	fb02 f905 	mul.w	r9, r2, r5
 8020a3e:	9606      	str	r6, [sp, #24]
 8020a40:	eb00 0c09 	add.w	ip, r0, r9
 8020a44:	7866      	ldrb	r6, [r4, #1]
 8020a46:	f89c 7003 	ldrb.w	r7, [ip, #3]
 8020a4a:	9607      	str	r6, [sp, #28]
 8020a4c:	fb03 f607 	mul.w	r6, r3, r7
 8020a50:	9a07      	ldr	r2, [sp, #28]
 8020a52:	f106 0e01 	add.w	lr, r6, #1
 8020a56:	eb0e 2e26 	add.w	lr, lr, r6, asr #8
 8020a5a:	18fe      	adds	r6, r7, r3
 8020a5c:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020a60:	eba7 070e 	sub.w	r7, r7, lr
 8020a64:	eba6 060e 	sub.w	r6, r6, lr
 8020a68:	f810 e009 	ldrb.w	lr, [r0, r9]
 8020a6c:	b2f6      	uxtb	r6, r6
 8020a6e:	fb07 880e 	mla	r8, r7, lr, r8
 8020a72:	fb98 f8f6 	sdiv	r8, r8, r6
 8020a76:	f800 8009 	strb.w	r8, [r0, r9]
 8020a7a:	fb13 f902 	smulbb	r9, r3, r2
 8020a7e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8020a82:	9a06      	ldr	r2, [sp, #24]
 8020a84:	fb07 990e 	mla	r9, r7, lr, r9
 8020a88:	f89c e002 	ldrb.w	lr, [ip, #2]
 8020a8c:	fb13 f302 	smulbb	r3, r3, r2
 8020a90:	f88c 6003 	strb.w	r6, [ip, #3]
 8020a94:	fb07 330e 	mla	r3, r7, lr, r3
 8020a98:	fb99 f9f6 	sdiv	r9, r9, r6
 8020a9c:	fb93 f3f6 	sdiv	r3, r3, r6
 8020aa0:	f88c 9001 	strb.w	r9, [ip, #1]
 8020aa4:	f88c 3002 	strb.w	r3, [ip, #2]
 8020aa8:	e7b8      	b.n	8020a1c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	f43f af3c 	beq.w	8020928 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8020ab0:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 8020ab4:	fb1e fe03 	smulbb	lr, lr, r3
 8020ab8:	78a2      	ldrb	r2, [r4, #2]
 8020aba:	fb03 fc09 	mul.w	ip, r3, r9
 8020abe:	eb09 0603 	add.w	r6, r9, r3
 8020ac2:	9206      	str	r2, [sp, #24]
 8020ac4:	f10c 0701 	add.w	r7, ip, #1
 8020ac8:	7862      	ldrb	r2, [r4, #1]
 8020aca:	eb07 272c 	add.w	r7, r7, ip, asr #8
 8020ace:	ea4f 2c27 	mov.w	ip, r7, asr #8
 8020ad2:	eba9 070c 	sub.w	r7, r9, ip
 8020ad6:	eba6 060c 	sub.w	r6, r6, ip
 8020ada:	f815 cc04 	ldrb.w	ip, [r5, #-4]
 8020ade:	fb13 f902 	smulbb	r9, r3, r2
 8020ae2:	9a06      	ldr	r2, [sp, #24]
 8020ae4:	b2f6      	uxtb	r6, r6
 8020ae6:	fb07 ee0c 	mla	lr, r7, ip, lr
 8020aea:	f815 cc03 	ldrb.w	ip, [r5, #-3]
 8020aee:	fb13 f302 	smulbb	r3, r3, r2
 8020af2:	f805 6c01 	strb.w	r6, [r5, #-1]
 8020af6:	fb07 990c 	mla	r9, r7, ip, r9
 8020afa:	f815 cc02 	ldrb.w	ip, [r5, #-2]
 8020afe:	fb07 330c 	mla	r3, r7, ip, r3
 8020b02:	fb9e fef6 	sdiv	lr, lr, r6
 8020b06:	fb99 f9f6 	sdiv	r9, r9, r6
 8020b0a:	fb93 f3f6 	sdiv	r3, r3, r6
 8020b0e:	f805 ec04 	strb.w	lr, [r5, #-4]
 8020b12:	f805 9c03 	strb.w	r9, [r5, #-3]
 8020b16:	f805 3c02 	strb.w	r3, [r5, #-2]
 8020b1a:	e705      	b.n	8020928 <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf4>
 8020b1c:	b009      	add	sp, #36	; 0x24
 8020b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b22:	bf00      	nop
 8020b24:	2003c2cc 	.word	0x2003c2cc

08020b28 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8020b28:	4770      	bx	lr

08020b2a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8020b2a:	4770      	bx	lr

08020b2c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8020b2c:	4770      	bx	lr

08020b2e <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8020b2e:	4770      	bx	lr

08020b30 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020b30:	4770      	bx	lr

08020b32 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020b32:	4770      	bx	lr

08020b34 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020b34:	4770      	bx	lr

08020b36 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020b36:	4770      	bx	lr

08020b38 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020b38:	4770      	bx	lr

08020b3a <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020b3a:	4770      	bx	lr

08020b3c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020b3c:	4770      	bx	lr

08020b3e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020b3e:	4770      	bx	lr

08020b40 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020b40:	4770      	bx	lr

08020b42 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020b42:	4770      	bx	lr

08020b44 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8020b44:	4770      	bx	lr

08020b46 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020b46:	4770      	bx	lr

08020b48 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8020b48:	4770      	bx	lr

08020b4a <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020b4a:	4770      	bx	lr

08020b4c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8020b4c:	4770      	bx	lr

08020b4e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8020b4e:	4770      	bx	lr

08020b50 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020b50:	4770      	bx	lr

08020b52 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8020b52:	4770      	bx	lr

08020b54 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020b54:	4770      	bx	lr

08020b56 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8020b56:	4770      	bx	lr

08020b58 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8020b58:	4770      	bx	lr

08020b5a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 8020b5a:	4770      	bx	lr

08020b5c <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8020b5c:	4770      	bx	lr

08020b5e <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8020b5e:	4770      	bx	lr

08020b60 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b64:	b091      	sub	sp, #68	; 0x44
 8020b66:	460f      	mov	r7, r1
 8020b68:	4614      	mov	r4, r2
 8020b6a:	f89d 8068 	ldrb.w	r8, [sp, #104]	; 0x68
 8020b6e:	f89d 506c 	ldrb.w	r5, [sp, #108]	; 0x6c
 8020b72:	f1b8 0f00 	cmp.w	r8, #0
 8020b76:	d054      	beq.n	8020c22 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8020b78:	6810      	ldr	r0, [r2, #0]
 8020b7a:	ae0c      	add	r6, sp, #48	; 0x30
 8020b7c:	6851      	ldr	r1, [r2, #4]
 8020b7e:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8020d54 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>
 8020b82:	f8df a1d4 	ldr.w	sl, [pc, #468]	; 8020d58 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f8>
 8020b86:	c603      	stmia	r6!, {r0, r1}
 8020b88:	6818      	ldr	r0, [r3, #0]
 8020b8a:	ae0e      	add	r6, sp, #56	; 0x38
 8020b8c:	6859      	ldr	r1, [r3, #4]
 8020b8e:	c603      	stmia	r6!, {r0, r1}
 8020b90:	a80c      	add	r0, sp, #48	; 0x30
 8020b92:	f7fa f81b 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b96:	4621      	mov	r1, r4
 8020b98:	a80e      	add	r0, sp, #56	; 0x38
 8020b9a:	f7fa f83f 	bl	801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020b9e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020ba2:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020ba6:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020baa:	f8d9 0000 	ldr.w	r0, [r9]
 8020bae:	fb11 2103 	smlabb	r1, r1, r3, r2
 8020bb2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	; 0x3e
 8020bb6:	eb07 0481 	add.w	r4, r7, r1, lsl #2
 8020bba:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8020bbe:	f9bd 703c 	ldrsh.w	r7, [sp, #60]	; 0x3c
 8020bc2:	440a      	add	r2, r1
 8020bc4:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8020bc8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8020bcc:	4413      	add	r3, r2
 8020bce:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8020bd2:	6803      	ldr	r3, [r0, #0]
 8020bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020bd6:	4798      	blx	r3
 8020bd8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020bdc:	d024      	beq.n	8020c28 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc8>
 8020bde:	f010 0f40 	tst.w	r0, #64	; 0x40
 8020be2:	f8d9 0000 	ldr.w	r0, [r9]
 8020be6:	d022      	beq.n	8020c2e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xce>
 8020be8:	2102      	movs	r1, #2
 8020bea:	f04f 0e00 	mov.w	lr, #0
 8020bee:	f8d0 c000 	ldr.w	ip, [r0]
 8020bf2:	b2b6      	uxth	r6, r6
 8020bf4:	9106      	str	r1, [sp, #24]
 8020bf6:	b2bf      	uxth	r7, r7
 8020bf8:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 8020bfc:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 8020c00:	e9cd 1e07 	strd	r1, lr, [sp, #28]
 8020c04:	f8ba 1000 	ldrh.w	r1, [sl]
 8020c08:	f8cd 800c 	str.w	r8, [sp, #12]
 8020c0c:	9601      	str	r6, [sp, #4]
 8020c0e:	9700      	str	r7, [sp, #0]
 8020c10:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8020c14:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8020c18:	9102      	str	r1, [sp, #8]
 8020c1a:	4621      	mov	r1, r4
 8020c1c:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 8020c20:	47a8      	blx	r5
 8020c22:	b011      	add	sp, #68	; 0x44
 8020c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020c28:	f010 0f20 	tst.w	r0, #32
 8020c2c:	e7d9      	b.n	8020be2 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x82>
 8020c2e:	6803      	ldr	r3, [r0, #0]
 8020c30:	ea4f 0b87 	mov.w	fp, r7, lsl #2
 8020c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020c36:	4798      	blx	r3
 8020c38:	f8ba c000 	ldrh.w	ip, [sl]
 8020c3c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8020c40:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8020c44:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8020c48:	fb0c f606 	mul.w	r6, ip, r6
 8020c4c:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 8020c50:	fb0c 2303 	mla	r3, ip, r3, r2
 8020c54:	ebac 0c07 	sub.w	ip, ip, r7
 8020c58:	eba9 0907 	sub.w	r9, r9, r7
 8020c5c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020c60:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8020c64:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8020c68:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8020c6c:	d148      	bne.n	8020d00 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020c6e:	2d00      	cmp	r5, #0
 8020c70:	d146      	bne.n	8020d00 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8020c72:	42b0      	cmp	r0, r6
 8020c74:	d268      	bcs.n	8020d48 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 8020c76:	eb00 020b 	add.w	r2, r0, fp
 8020c7a:	4290      	cmp	r0, r2
 8020c7c:	d204      	bcs.n	8020c88 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8020c7e:	f854 3b04 	ldr.w	r3, [r4], #4
 8020c82:	f840 3b04 	str.w	r3, [r0], #4
 8020c86:	e7f8      	b.n	8020c7a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x11a>
 8020c88:	4460      	add	r0, ip
 8020c8a:	444c      	add	r4, r9
 8020c8c:	e7f1      	b.n	8020c72 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x112>
 8020c8e:	fb04 f70a 	mul.w	r7, r4, sl
 8020c92:	4454      	add	r4, sl
 8020c94:	1c7a      	adds	r2, r7, #1
 8020c96:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8020c9a:	1212      	asrs	r2, r2, #8
 8020c9c:	ebaa 0702 	sub.w	r7, sl, r2
 8020ca0:	f3ce 4a07 	ubfx	sl, lr, #16, #8
 8020ca4:	1aa4      	subs	r4, r4, r2
 8020ca6:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8020caa:	fb07 fa0a 	mul.w	sl, r7, sl
 8020cae:	b2e4      	uxtb	r4, r4
 8020cb0:	fb05 a202 	mla	r2, r5, r2, sl
 8020cb4:	fa5f fa8e 	uxtb.w	sl, lr
 8020cb8:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8020cbc:	fb07 fa0a 	mul.w	sl, r7, sl
 8020cc0:	fb07 fe0e 	mul.w	lr, r7, lr
 8020cc4:	fbb2 f2f4 	udiv	r2, r2, r4
 8020cc8:	0412      	lsls	r2, r2, #16
 8020cca:	f402 027f 	and.w	r2, r2, #16711680	; 0xff0000
 8020cce:	4611      	mov	r1, r2
 8020cd0:	b2da      	uxtb	r2, r3
 8020cd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020cd6:	fb05 a202 	mla	r2, r5, r2, sl
 8020cda:	fb05 e503 	mla	r5, r5, r3, lr
 8020cde:	fbb2 f2f4 	udiv	r2, r2, r4
 8020ce2:	b2d2      	uxtb	r2, r2
 8020ce4:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
 8020ce8:	fbb5 f4f4 	udiv	r4, r5, r4
 8020cec:	0224      	lsls	r4, r4, #8
 8020cee:	430a      	orrs	r2, r1
 8020cf0:	b2a4      	uxth	r4, r4
 8020cf2:	4322      	orrs	r2, r4
 8020cf4:	6002      	str	r2, [r0, #0]
 8020cf6:	e025      	b.n	8020d44 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 8020cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020cfa:	4460      	add	r0, ip
 8020cfc:	444b      	add	r3, r9
 8020cfe:	461c      	mov	r4, r3
 8020d00:	42b0      	cmp	r0, r6
 8020d02:	d221      	bcs.n	8020d48 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e8>
 8020d04:	eb00 030b 	add.w	r3, r0, fp
 8020d08:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
 8020d0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020d0e:	4298      	cmp	r0, r3
 8020d10:	d2f2      	bcs.n	8020cf8 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x198>
 8020d12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020d14:	f852 3b04 	ldr.w	r3, [r2], #4
 8020d18:	0e1d      	lsrs	r5, r3, #24
 8020d1a:	920a      	str	r2, [sp, #40]	; 0x28
 8020d1c:	fb05 f408 	mul.w	r4, r5, r8
 8020d20:	1c65      	adds	r5, r4, #1
 8020d22:	eb05 2524 	add.w	r5, r5, r4, asr #8
 8020d26:	122d      	asrs	r5, r5, #8
 8020d28:	d00c      	beq.n	8020d44 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1e4>
 8020d2a:	2dff      	cmp	r5, #255	; 0xff
 8020d2c:	b2ec      	uxtb	r4, r5
 8020d2e:	d004      	beq.n	8020d3a <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1da>
 8020d30:	f8d0 e000 	ldr.w	lr, [r0]
 8020d34:	ea5f 6a1e 	movs.w	sl, lr, lsr #24
 8020d38:	d1a9      	bne.n	8020c8e <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x12e>
 8020d3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8020d3e:	ea43 6505 	orr.w	r5, r3, r5, lsl #24
 8020d42:	6005      	str	r5, [r0, #0]
 8020d44:	3004      	adds	r0, #4
 8020d46:	e7e1      	b.n	8020d0c <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ac>
 8020d48:	4b02      	ldr	r3, [pc, #8]	; (8020d54 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1f4>)
 8020d4a:	6818      	ldr	r0, [r3, #0]
 8020d4c:	6803      	ldr	r3, [r0, #0]
 8020d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020d50:	4798      	blx	r3
 8020d52:	e766      	b.n	8020c22 <_ZN8touchgfx8LCD32bpp8blitCopyEPKtRKNS_4RectES5_hb+0xc2>
 8020d54:	2003c2bc 	.word	0x2003c2bc
 8020d58:	2003c2b6 	.word	0x2003c2b6

08020d5c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8020d5c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8020d60:	2300      	movs	r3, #0
 8020d62:	9300      	str	r3, [sp, #0]
 8020d64:	4b3e      	ldr	r3, [pc, #248]	; (8020e60 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8020d66:	781b      	ldrb	r3, [r3, #0]
 8020d68:	2b00      	cmp	r3, #0
 8020d6a:	d137      	bne.n	8020ddc <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 8020d6c:	4a3d      	ldr	r2, [pc, #244]	; (8020e64 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020d6e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8020d72:	f8ad 2004 	strh.w	r2, [sp, #4]
 8020d76:	2b00      	cmp	r3, #0
 8020d78:	d132      	bne.n	8020de0 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 8020d7a:	4b3b      	ldr	r3, [pc, #236]	; (8020e68 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8020d7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8020d80:	ac02      	add	r4, sp, #8
 8020d82:	6808      	ldr	r0, [r1, #0]
 8020d84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020d88:	ab02      	add	r3, sp, #8
 8020d8a:	6849      	ldr	r1, [r1, #4]
 8020d8c:	4d37      	ldr	r5, [pc, #220]	; (8020e6c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8020d8e:	c303      	stmia	r3!, {r0, r1}
 8020d90:	4669      	mov	r1, sp
 8020d92:	4620      	mov	r0, r4
 8020d94:	f7f9 ff42 	bl	801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8020d98:	4668      	mov	r0, sp
 8020d9a:	f7f9 ff17 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020d9e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8020da2:	f8bd 2000 	ldrh.w	r2, [sp]
 8020da6:	462f      	mov	r7, r5
 8020da8:	6828      	ldr	r0, [r5, #0]
 8020daa:	4413      	add	r3, r2
 8020dac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8020db0:	f8ad 3008 	strh.w	r3, [sp, #8]
 8020db4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8020db8:	4413      	add	r3, r2
 8020dba:	f8ad 300a 	strh.w	r3, [sp, #10]
 8020dbe:	6803      	ldr	r3, [r0, #0]
 8020dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020dc2:	4798      	blx	r3
 8020dc4:	f010 0f01 	tst.w	r0, #1
 8020dc8:	d00c      	beq.n	8020de4 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8020dca:	6828      	ldr	r0, [r5, #0]
 8020dcc:	6803      	ldr	r3, [r0, #0]
 8020dce:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8020dd4:	4798      	blx	r3
 8020dd6:	b004      	add	sp, #16
 8020dd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020ddc:	4a22      	ldr	r2, [pc, #136]	; (8020e68 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 8020dde:	e7c6      	b.n	8020d6e <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 8020de0:	4b20      	ldr	r3, [pc, #128]	; (8020e64 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020de2:	e7cb      	b.n	8020d7c <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8020de4:	6828      	ldr	r0, [r5, #0]
 8020de6:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8020dea:	6803      	ldr	r3, [r0, #0]
 8020dec:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8020df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020df2:	4798      	blx	r3
 8020df4:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8020df8:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8020dfc:	f8bd 400a 	ldrh.w	r4, [sp, #10]
 8020e00:	fb15 3404 	smlabb	r4, r5, r4, r3
 8020e04:	eba5 0508 	sub.w	r5, r5, r8
 8020e08:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8020e0c:	6838      	ldr	r0, [r7, #0]
 8020e0e:	00ad      	lsls	r5, r5, #2
 8020e10:	6803      	ldr	r3, [r0, #0]
 8020e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020e14:	4798      	blx	r3
 8020e16:	4b13      	ldr	r3, [pc, #76]	; (8020e64 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 8020e18:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8020e1c:	881a      	ldrh	r2, [r3, #0]
 8020e1e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8020e22:	4356      	muls	r6, r2
 8020e24:	fb02 1303 	mla	r3, r2, r3, r1
 8020e28:	eba2 0208 	sub.w	r2, r2, r8
 8020e2c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8020e30:	0092      	lsls	r2, r2, #2
 8020e32:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8020e36:	ea4f 0388 	mov.w	r3, r8, lsl #2
 8020e3a:	42b0      	cmp	r0, r6
 8020e3c:	d20b      	bcs.n	8020e56 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8020e3e:	eb00 0c03 	add.w	ip, r0, r3
 8020e42:	4560      	cmp	r0, ip
 8020e44:	d204      	bcs.n	8020e50 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xf4>
 8020e46:	f854 1b04 	ldr.w	r1, [r4], #4
 8020e4a:	f840 1b04 	str.w	r1, [r0], #4
 8020e4e:	e7f8      	b.n	8020e42 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xe6>
 8020e50:	4410      	add	r0, r2
 8020e52:	442c      	add	r4, r5
 8020e54:	e7f1      	b.n	8020e3a <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8020e56:	6838      	ldr	r0, [r7, #0]
 8020e58:	6803      	ldr	r3, [r0, #0]
 8020e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8020e5c:	4798      	blx	r3
 8020e5e:	e7ba      	b.n	8020dd6 <_ZN8touchgfx8LCD32bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8020e60:	2003c2b4 	.word	0x2003c2b4
 8020e64:	2003c2b6 	.word	0x2003c2b6
 8020e68:	2003c2b8 	.word	0x2003c2b8
 8020e6c:	2003c2bc 	.word	0x2003c2bc

08020e70 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8020e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e74:	b089      	sub	sp, #36	; 0x24
 8020e76:	4607      	mov	r7, r0
 8020e78:	4689      	mov	r9, r1
 8020e7a:	4692      	mov	sl, r2
 8020e7c:	ac08      	add	r4, sp, #32
 8020e7e:	461e      	mov	r6, r3
 8020e80:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8020e84:	4620      	mov	r0, r4
 8020e86:	f7fd fa2b 	bl	801e2e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020e8a:	683b      	ldr	r3, [r7, #0]
 8020e8c:	4605      	mov	r5, r0
 8020e8e:	4620      	mov	r0, r4
 8020e90:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8020e94:	f7fd f984 	bl	801e1a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020e98:	4683      	mov	fp, r0
 8020e9a:	4620      	mov	r0, r4
 8020e9c:	f7fd f9b4 	bl	801e208 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020ea0:	4653      	mov	r3, sl
 8020ea2:	464a      	mov	r2, r9
 8020ea4:	4639      	mov	r1, r7
 8020ea6:	9500      	str	r5, [sp, #0]
 8020ea8:	e9cd b001 	strd	fp, r0, [sp, #4]
 8020eac:	a806      	add	r0, sp, #24
 8020eae:	47c0      	blx	r8
 8020eb0:	a906      	add	r1, sp, #24
 8020eb2:	4630      	mov	r0, r6
 8020eb4:	f7fd f858 	bl	801df68 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8020eb8:	4628      	mov	r0, r5
 8020eba:	b009      	add	sp, #36	; 0x24
 8020ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020ec0 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020ec0:	b510      	push	{r4, lr}
 8020ec2:	4604      	mov	r4, r0
 8020ec4:	2104      	movs	r1, #4
 8020ec6:	f008 fe99 	bl	8029bfc <_ZdlPvj>
 8020eca:	4620      	mov	r0, r4
 8020ecc:	bd10      	pop	{r4, pc}

08020ece <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020ece:	b510      	push	{r4, lr}
 8020ed0:	4604      	mov	r4, r0
 8020ed2:	2104      	movs	r1, #4
 8020ed4:	f008 fe92 	bl	8029bfc <_ZdlPvj>
 8020ed8:	4620      	mov	r0, r4
 8020eda:	bd10      	pop	{r4, pc}

08020edc <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020edc:	b510      	push	{r4, lr}
 8020ede:	4604      	mov	r4, r0
 8020ee0:	2104      	movs	r1, #4
 8020ee2:	f008 fe8b 	bl	8029bfc <_ZdlPvj>
 8020ee6:	4620      	mov	r0, r4
 8020ee8:	bd10      	pop	{r4, pc}

08020eea <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020eea:	b510      	push	{r4, lr}
 8020eec:	4604      	mov	r4, r0
 8020eee:	2104      	movs	r1, #4
 8020ef0:	f008 fe84 	bl	8029bfc <_ZdlPvj>
 8020ef4:	4620      	mov	r0, r4
 8020ef6:	bd10      	pop	{r4, pc}

08020ef8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020ef8:	b510      	push	{r4, lr}
 8020efa:	4604      	mov	r4, r0
 8020efc:	2104      	movs	r1, #4
 8020efe:	f008 fe7d 	bl	8029bfc <_ZdlPvj>
 8020f02:	4620      	mov	r0, r4
 8020f04:	bd10      	pop	{r4, pc}

08020f06 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020f06:	b510      	push	{r4, lr}
 8020f08:	4604      	mov	r4, r0
 8020f0a:	2104      	movs	r1, #4
 8020f0c:	f008 fe76 	bl	8029bfc <_ZdlPvj>
 8020f10:	4620      	mov	r0, r4
 8020f12:	bd10      	pop	{r4, pc}

08020f14 <_ZN8touchgfx8LCD32bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020f14:	b510      	push	{r4, lr}
 8020f16:	4604      	mov	r4, r0
 8020f18:	2104      	movs	r1, #4
 8020f1a:	f008 fe6f 	bl	8029bfc <_ZdlPvj>
 8020f1e:	4620      	mov	r0, r4
 8020f20:	bd10      	pop	{r4, pc}

08020f22 <_ZN8touchgfx8LCD32bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020f22:	b510      	push	{r4, lr}
 8020f24:	4604      	mov	r4, r0
 8020f26:	2104      	movs	r1, #4
 8020f28:	f008 fe68 	bl	8029bfc <_ZdlPvj>
 8020f2c:	4620      	mov	r0, r4
 8020f2e:	bd10      	pop	{r4, pc}

08020f30 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020f30:	b510      	push	{r4, lr}
 8020f32:	4604      	mov	r4, r0
 8020f34:	2104      	movs	r1, #4
 8020f36:	f008 fe61 	bl	8029bfc <_ZdlPvj>
 8020f3a:	4620      	mov	r0, r4
 8020f3c:	bd10      	pop	{r4, pc}

08020f3e <_ZN8touchgfx8LCD32bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020f3e:	b510      	push	{r4, lr}
 8020f40:	4604      	mov	r4, r0
 8020f42:	2104      	movs	r1, #4
 8020f44:	f008 fe5a 	bl	8029bfc <_ZdlPvj>
 8020f48:	4620      	mov	r0, r4
 8020f4a:	bd10      	pop	{r4, pc}

08020f4c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020f4c:	b510      	push	{r4, lr}
 8020f4e:	4604      	mov	r4, r0
 8020f50:	2104      	movs	r1, #4
 8020f52:	f008 fe53 	bl	8029bfc <_ZdlPvj>
 8020f56:	4620      	mov	r0, r4
 8020f58:	bd10      	pop	{r4, pc}

08020f5a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8020f5a:	b510      	push	{r4, lr}
 8020f5c:	4604      	mov	r4, r0
 8020f5e:	2104      	movs	r1, #4
 8020f60:	f008 fe4c 	bl	8029bfc <_ZdlPvj>
 8020f64:	4620      	mov	r0, r4
 8020f66:	bd10      	pop	{r4, pc}

08020f68 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8020f68:	b510      	push	{r4, lr}
 8020f6a:	4604      	mov	r4, r0
 8020f6c:	2104      	movs	r1, #4
 8020f6e:	f008 fe45 	bl	8029bfc <_ZdlPvj>
 8020f72:	4620      	mov	r0, r4
 8020f74:	bd10      	pop	{r4, pc}

08020f76 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020f76:	b510      	push	{r4, lr}
 8020f78:	4604      	mov	r4, r0
 8020f7a:	2104      	movs	r1, #4
 8020f7c:	f008 fe3e 	bl	8029bfc <_ZdlPvj>
 8020f80:	4620      	mov	r0, r4
 8020f82:	bd10      	pop	{r4, pc}

08020f84 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020f84:	b510      	push	{r4, lr}
 8020f86:	4604      	mov	r4, r0
 8020f88:	2104      	movs	r1, #4
 8020f8a:	f008 fe37 	bl	8029bfc <_ZdlPvj>
 8020f8e:	4620      	mov	r0, r4
 8020f90:	bd10      	pop	{r4, pc}

08020f92 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8020f92:	b510      	push	{r4, lr}
 8020f94:	4604      	mov	r4, r0
 8020f96:	2104      	movs	r1, #4
 8020f98:	f008 fe30 	bl	8029bfc <_ZdlPvj>
 8020f9c:	4620      	mov	r0, r4
 8020f9e:	bd10      	pop	{r4, pc}

08020fa0 <_ZN8touchgfx8LCD32bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8020fa0:	b510      	push	{r4, lr}
 8020fa2:	4604      	mov	r4, r0
 8020fa4:	2104      	movs	r1, #4
 8020fa6:	f008 fe29 	bl	8029bfc <_ZdlPvj>
 8020faa:	4620      	mov	r0, r4
 8020fac:	bd10      	pop	{r4, pc}

08020fae <_ZN8touchgfx8LCD32bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8020fae:	b510      	push	{r4, lr}
 8020fb0:	4604      	mov	r4, r0
 8020fb2:	2104      	movs	r1, #4
 8020fb4:	f008 fe22 	bl	8029bfc <_ZdlPvj>
 8020fb8:	4620      	mov	r0, r4
 8020fba:	bd10      	pop	{r4, pc}

08020fbc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8020fbc:	b510      	push	{r4, lr}
 8020fbe:	4604      	mov	r4, r0
 8020fc0:	2104      	movs	r1, #4
 8020fc2:	f008 fe1b 	bl	8029bfc <_ZdlPvj>
 8020fc6:	4620      	mov	r0, r4
 8020fc8:	bd10      	pop	{r4, pc}

08020fca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8020fca:	b510      	push	{r4, lr}
 8020fcc:	4604      	mov	r4, r0
 8020fce:	2104      	movs	r1, #4
 8020fd0:	f008 fe14 	bl	8029bfc <_ZdlPvj>
 8020fd4:	4620      	mov	r0, r4
 8020fd6:	bd10      	pop	{r4, pc}

08020fd8 <_ZN8touchgfx8LCD32bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8020fd8:	b510      	push	{r4, lr}
 8020fda:	4604      	mov	r4, r0
 8020fdc:	2104      	movs	r1, #4
 8020fde:	f008 fe0d 	bl	8029bfc <_ZdlPvj>
 8020fe2:	4620      	mov	r0, r4
 8020fe4:	bd10      	pop	{r4, pc}

08020fe6 <_ZN8touchgfx8LCD32bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8020fe6:	b510      	push	{r4, lr}
 8020fe8:	4604      	mov	r4, r0
 8020fea:	2104      	movs	r1, #4
 8020fec:	f008 fe06 	bl	8029bfc <_ZdlPvj>
 8020ff0:	4620      	mov	r0, r4
 8020ff2:	bd10      	pop	{r4, pc}

08020ff4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8020ff4:	b510      	push	{r4, lr}
 8020ff6:	4604      	mov	r4, r0
 8020ff8:	2104      	movs	r1, #4
 8020ffa:	f008 fdff 	bl	8029bfc <_ZdlPvj>
 8020ffe:	4620      	mov	r0, r4
 8021000:	bd10      	pop	{r4, pc}

08021002 <_ZN8touchgfx8LCD32bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8021002:	b510      	push	{r4, lr}
 8021004:	4604      	mov	r4, r0
 8021006:	2104      	movs	r1, #4
 8021008:	f008 fdf8 	bl	8029bfc <_ZdlPvj>
 802100c:	4620      	mov	r0, r4
 802100e:	bd10      	pop	{r4, pc}

08021010 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8021010:	b510      	push	{r4, lr}
 8021012:	4604      	mov	r4, r0
 8021014:	2104      	movs	r1, #4
 8021016:	f008 fdf1 	bl	8029bfc <_ZdlPvj>
 802101a:	4620      	mov	r0, r4
 802101c:	bd10      	pop	{r4, pc}

0802101e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 802101e:	b510      	push	{r4, lr}
 8021020:	4604      	mov	r4, r0
 8021022:	2104      	movs	r1, #4
 8021024:	f008 fdea 	bl	8029bfc <_ZdlPvj>
 8021028:	4620      	mov	r0, r4
 802102a:	bd10      	pop	{r4, pc}

0802102c <_ZN8touchgfx8LCD32bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 802102c:	b510      	push	{r4, lr}
 802102e:	4604      	mov	r4, r0
 8021030:	2104      	movs	r1, #4
 8021032:	f008 fde3 	bl	8029bfc <_ZdlPvj>
 8021036:	4620      	mov	r0, r4
 8021038:	bd10      	pop	{r4, pc}

0802103a <_ZN8touchgfx8LCD32bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 802103a:	b510      	push	{r4, lr}
 802103c:	4604      	mov	r4, r0
 802103e:	2104      	movs	r1, #4
 8021040:	f008 fddc 	bl	8029bfc <_ZdlPvj>
 8021044:	4620      	mov	r0, r4
 8021046:	bd10      	pop	{r4, pc}

08021048 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8021048:	b5f0      	push	{r4, r5, r6, r7, lr}
 802104a:	4606      	mov	r6, r0
 802104c:	b087      	sub	sp, #28
 802104e:	4615      	mov	r5, r2
 8021050:	461f      	mov	r7, r3
 8021052:	b353      	cbz	r3, 80210aa <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021054:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8021058:	2b00      	cmp	r3, #0
 802105a:	dd26      	ble.n	80210aa <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 802105c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8021060:	2b00      	cmp	r3, #0
 8021062:	dd22      	ble.n	80210aa <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8021064:	6808      	ldr	r0, [r1, #0]
 8021066:	aa04      	add	r2, sp, #16
 8021068:	6849      	ldr	r1, [r1, #4]
 802106a:	4c1b      	ldr	r4, [pc, #108]	; (80210d8 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 802106c:	c203      	stmia	r2!, {r0, r1}
 802106e:	a804      	add	r0, sp, #16
 8021070:	f7f9 fdac 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021074:	6820      	ldr	r0, [r4, #0]
 8021076:	6803      	ldr	r3, [r0, #0]
 8021078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802107a:	4798      	blx	r3
 802107c:	2fff      	cmp	r7, #255	; 0xff
 802107e:	d016      	beq.n	80210ae <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8021080:	f010 0f08 	tst.w	r0, #8
 8021084:	6820      	ldr	r0, [r4, #0]
 8021086:	d015      	beq.n	80210b4 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8021088:	2400      	movs	r4, #0
 802108a:	6801      	ldr	r1, [r0, #0]
 802108c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8021090:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021094:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8021098:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802109c:	9401      	str	r4, [sp, #4]
 802109e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80210a2:	9400      	str	r4, [sp, #0]
 80210a4:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 80210a6:	4629      	mov	r1, r5
 80210a8:	47a0      	blx	r4
 80210aa:	b007      	add	sp, #28
 80210ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80210ae:	f010 0f02 	tst.w	r0, #2
 80210b2:	e7e7      	b.n	8021084 <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80210b4:	6803      	ldr	r3, [r0, #0]
 80210b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80210b8:	4798      	blx	r3
 80210ba:	4b08      	ldr	r3, [pc, #32]	; (80210dc <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80210bc:	4601      	mov	r1, r0
 80210be:	4630      	mov	r0, r6
 80210c0:	881a      	ldrh	r2, [r3, #0]
 80210c2:	6833      	ldr	r3, [r6, #0]
 80210c4:	e9cd 5700 	strd	r5, r7, [sp]
 80210c8:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80210ca:	ab04      	add	r3, sp, #16
 80210cc:	47a8      	blx	r5
 80210ce:	6820      	ldr	r0, [r4, #0]
 80210d0:	6803      	ldr	r3, [r0, #0]
 80210d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80210d4:	4798      	blx	r3
 80210d6:	e7e8      	b.n	80210aa <_ZN8touchgfx8LCD32bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80210d8:	2003c2bc 	.word	0x2003c2bc
 80210dc:	2003c2b6 	.word	0x2003c2b6

080210e0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80210e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80210e4:	b08d      	sub	sp, #52	; 0x34
 80210e6:	469b      	mov	fp, r3
 80210e8:	4617      	mov	r7, r2
 80210ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80210ee:	f9bd a05c 	ldrsh.w	sl, [sp, #92]	; 0x5c
 80210f2:	4605      	mov	r5, r0
 80210f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80210f8:	a806      	add	r0, sp, #24
 80210fa:	f9bd 6060 	ldrsh.w	r6, [sp, #96]	; 0x60
 80210fe:	460c      	mov	r4, r1
 8021100:	4659      	mov	r1, fp
 8021102:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021106:	f8ad 301a 	strh.w	r3, [sp, #26]
 802110a:	f8ad a01c 	strh.w	sl, [sp, #28]
 802110e:	f8ad 601e 	strh.w	r6, [sp, #30]
 8021112:	f7f5 f9ef 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 8021116:	4639      	mov	r1, r7
 8021118:	a806      	add	r0, sp, #24
 802111a:	f7f5 f9eb 	bl	80164f4 <_ZN8touchgfx4RectaNERKS0_>
 802111e:	4b74      	ldr	r3, [pc, #464]	; (80212f0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x210>)
 8021120:	f8b3 9000 	ldrh.w	r9, [r3]
 8021124:	4b73      	ldr	r3, [pc, #460]	; (80212f4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8021126:	fa0f f289 	sxth.w	r2, r9
 802112a:	8819      	ldrh	r1, [r3, #0]
 802112c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8021130:	b208      	sxth	r0, r1
 8021132:	2b00      	cmp	r3, #0
 8021134:	da07      	bge.n	8021146 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8021136:	f8bd 701c 	ldrh.w	r7, [sp, #28]
 802113a:	443b      	add	r3, r7
 802113c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021140:	2300      	movs	r3, #0
 8021142:	f8ad 3018 	strh.w	r3, [sp, #24]
 8021146:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 802114a:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 802114e:	1ad2      	subs	r2, r2, r3
 8021150:	4297      	cmp	r7, r2
 8021152:	bfc4      	itt	gt
 8021154:	eba9 0203 	subgt.w	r2, r9, r3
 8021158:	f8ad 201c 	strhgt.w	r2, [sp, #28]
 802115c:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8021160:	2a00      	cmp	r2, #0
 8021162:	da07      	bge.n	8021174 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x94>
 8021164:	f8bd 701e 	ldrh.w	r7, [sp, #30]
 8021168:	443a      	add	r2, r7
 802116a:	f8ad 201e 	strh.w	r2, [sp, #30]
 802116e:	2200      	movs	r2, #0
 8021170:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021174:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8021178:	f9bd 701e 	ldrsh.w	r7, [sp, #30]
 802117c:	1a80      	subs	r0, r0, r2
 802117e:	4287      	cmp	r7, r0
 8021180:	f9bd 701c 	ldrsh.w	r7, [sp, #28]
 8021184:	bfc4      	itt	gt
 8021186:	1a88      	subgt	r0, r1, r2
 8021188:	f8ad 001e 	strhgt.w	r0, [sp, #30]
 802118c:	485a      	ldr	r0, [pc, #360]	; (80212f8 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 802118e:	7800      	ldrb	r0, [r0, #0]
 8021190:	2800      	cmp	r0, #0
 8021192:	f040 8082 	bne.w	802129a <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ba>
 8021196:	454f      	cmp	r7, r9
 8021198:	bf14      	ite	ne
 802119a:	f04f 0900 	movne.w	r9, #0
 802119e:	f04f 0901 	moveq.w	r9, #1
 80211a2:	2f00      	cmp	r7, #0
 80211a4:	dd7d      	ble.n	80212a2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 80211a6:	f9bd 801e 	ldrsh.w	r8, [sp, #30]
 80211aa:	f1b8 0f00 	cmp.w	r8, #0
 80211ae:	dd78      	ble.n	80212a2 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1c2>
 80211b0:	f8bb 1000 	ldrh.w	r1, [fp]
 80211b4:	a808      	add	r0, sp, #32
 80211b6:	f8ad a02c 	strh.w	sl, [sp, #44]	; 0x2c
 80211ba:	1a5b      	subs	r3, r3, r1
 80211bc:	a90a      	add	r1, sp, #40	; 0x28
 80211be:	f8ad 602e 	strh.w	r6, [sp, #46]	; 0x2e
 80211c2:	b21b      	sxth	r3, r3
 80211c4:	f8ad 7024 	strh.w	r7, [sp, #36]	; 0x24
 80211c8:	f8ad 8026 	strh.w	r8, [sp, #38]	; 0x26
 80211cc:	9302      	str	r3, [sp, #8]
 80211ce:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80211d2:	1ad2      	subs	r2, r2, r3
 80211d4:	b213      	sxth	r3, r2
 80211d6:	9303      	str	r3, [sp, #12]
 80211d8:	9b02      	ldr	r3, [sp, #8]
 80211da:	f8ad 3020 	strh.w	r3, [sp, #32]
 80211de:	9b03      	ldr	r3, [sp, #12]
 80211e0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80211e4:	2300      	movs	r3, #0
 80211e6:	930a      	str	r3, [sp, #40]	; 0x28
 80211e8:	f7f9 fd18 	bl	801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80211ec:	a806      	add	r0, sp, #24
 80211ee:	f7f9 fced 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211f2:	a80a      	add	r0, sp, #40	; 0x28
 80211f4:	f7f9 fcea 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80211f8:	4b40      	ldr	r3, [pc, #256]	; (80212fc <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 80211fa:	4620      	mov	r0, r4
 80211fc:	f9bd a02c 	ldrsh.w	sl, [sp, #44]	; 0x2c
 8021200:	881a      	ldrh	r2, [r3, #0]
 8021202:	6823      	ldr	r3, [r4, #0]
 8021204:	9205      	str	r2, [sp, #20]
 8021206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021208:	4798      	blx	r3
 802120a:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 802120e:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8021212:	f3c0 0b8f 	ubfx	fp, r0, #2, #16
 8021216:	fb1a 3304 	smlabb	r3, sl, r4, r3
 802121a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 802121c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8021220:	4b37      	ldr	r3, [pc, #220]	; (8021300 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8021222:	6818      	ldr	r0, [r3, #0]
 8021224:	9304      	str	r3, [sp, #16]
 8021226:	6801      	ldr	r1, [r0, #0]
 8021228:	6b09      	ldr	r1, [r1, #48]	; 0x30
 802122a:	4788      	blx	r1
 802122c:	f9bd 601a 	ldrsh.w	r6, [sp, #26]
 8021230:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8021234:	fb0b 1606 	mla	r6, fp, r6, r1
 8021238:	eb00 0386 	add.w	r3, r0, r6, lsl #2
 802123c:	9301      	str	r3, [sp, #4]
 802123e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8021242:	f1b9 0f00 	cmp.w	r9, #0
 8021246:	d135      	bne.n	80212b4 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1d4>
 8021248:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802124c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8021250:	f04f 0900 	mov.w	r9, #0
 8021254:	ebaa 0a03 	sub.w	sl, sl, r3
 8021258:	ea4f 038a 	mov.w	r3, sl, lsl #2
 802125c:	f8df a0a0 	ldr.w	sl, [pc, #160]	; 8021300 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>
 8021260:	9304      	str	r3, [sp, #16]
 8021262:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8021266:	454b      	cmp	r3, r9
 8021268:	dd32      	ble.n	80212d0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 802126a:	f8da 0000 	ldr.w	r0, [sl]
 802126e:	4621      	mov	r1, r4
 8021270:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8021274:	6802      	ldr	r2, [r0, #0]
 8021276:	009b      	lsls	r3, r3, #2
 8021278:	6b52      	ldr	r2, [r2, #52]	; 0x34
 802127a:	4616      	mov	r6, r2
 802127c:	9a01      	ldr	r2, [sp, #4]
 802127e:	47b0      	blx	r6
 8021280:	f9bd 2024 	ldrsh.w	r2, [sp, #36]	; 0x24
 8021284:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8021288:	4294      	cmp	r4, r2
 802128a:	d229      	bcs.n	80212e0 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x200>
 802128c:	f854 3b04 	ldr.w	r3, [r4], #4
 8021290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8021294:	f844 3c04 	str.w	r3, [r4, #-4]
 8021298:	e7f6      	b.n	8021288 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 802129a:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 802129e:	4589      	cmp	r9, r1
 80212a0:	e77a      	b.n	8021198 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 80212a2:	2300      	movs	r3, #0
 80212a4:	802b      	strh	r3, [r5, #0]
 80212a6:	806b      	strh	r3, [r5, #2]
 80212a8:	80ab      	strh	r3, [r5, #4]
 80212aa:	80eb      	strh	r3, [r5, #6]
 80212ac:	4628      	mov	r0, r5
 80212ae:	b00d      	add	sp, #52	; 0x34
 80212b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80212b4:	4592      	cmp	sl, r2
 80212b6:	d1c7      	bne.n	8021248 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x168>
 80212b8:	6818      	ldr	r0, [r3, #0]
 80212ba:	4621      	mov	r1, r4
 80212bc:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 80212c0:	6802      	ldr	r2, [r0, #0]
 80212c2:	fb0b f303 	mul.w	r3, fp, r3
 80212c6:	f8d2 9034 	ldr.w	r9, [r2, #52]	; 0x34
 80212ca:	009b      	lsls	r3, r3, #2
 80212cc:	9a01      	ldr	r2, [sp, #4]
 80212ce:	47c8      	blx	r9
 80212d0:	9b02      	ldr	r3, [sp, #8]
 80212d2:	80af      	strh	r7, [r5, #4]
 80212d4:	802b      	strh	r3, [r5, #0]
 80212d6:	9b03      	ldr	r3, [sp, #12]
 80212d8:	f8a5 8006 	strh.w	r8, [r5, #6]
 80212dc:	806b      	strh	r3, [r5, #2]
 80212de:	e7e5      	b.n	80212ac <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1cc>
 80212e0:	9b01      	ldr	r3, [sp, #4]
 80212e2:	f109 0901 	add.w	r9, r9, #1
 80212e6:	445b      	add	r3, fp
 80212e8:	9301      	str	r3, [sp, #4]
 80212ea:	9b04      	ldr	r3, [sp, #16]
 80212ec:	441c      	add	r4, r3
 80212ee:	e7b8      	b.n	8021262 <_ZN8touchgfx8LCD32bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x182>
 80212f0:	2003c2b0 	.word	0x2003c2b0
 80212f4:	2003c2b2 	.word	0x2003c2b2
 80212f8:	2003c2b4 	.word	0x2003c2b4
 80212fc:	2003c2b6 	.word	0x2003c2b6
 8021300:	2003c2bc 	.word	0x2003c2bc

08021304 <_ZN8touchgfx8LCD32bppC1Ev>:
 8021304:	2200      	movs	r2, #0
 8021306:	4910      	ldr	r1, [pc, #64]	; (8021348 <_ZN8touchgfx8LCD32bppC1Ev+0x44>)
 8021308:	6042      	str	r2, [r0, #4]
 802130a:	6001      	str	r1, [r0, #0]
 802130c:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8021310:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8021314:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8021318:	e9c0 2208 	strd	r2, r2, [r0, #32]
 802131c:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8021320:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8021324:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 8021328:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 802132c:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8021330:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8021334:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 8021338:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 802133c:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8021340:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8021344:	4770      	bx	lr
 8021346:	bf00      	nop
 8021348:	08030cac 	.word	0x08030cac

0802134c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>:
 802134c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021350:	4604      	mov	r4, r0
 8021352:	b08f      	sub	sp, #60	; 0x3c
 8021354:	460d      	mov	r5, r1
 8021356:	461e      	mov	r6, r3
 8021358:	2b00      	cmp	r3, #0
 802135a:	d052      	beq.n	8021402 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 802135c:	6808      	ldr	r0, [r1, #0]
 802135e:	ab0a      	add	r3, sp, #40	; 0x28
 8021360:	6849      	ldr	r1, [r1, #4]
 8021362:	4f70      	ldr	r7, [pc, #448]	; (8021524 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 8021364:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8021528 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1dc>
 8021368:	c303      	stmia	r3!, {r0, r1}
 802136a:	6810      	ldr	r0, [r2, #0]
 802136c:	ab0c      	add	r3, sp, #48	; 0x30
 802136e:	6851      	ldr	r1, [r2, #4]
 8021370:	c303      	stmia	r3!, {r0, r1}
 8021372:	a80a      	add	r0, sp, #40	; 0x28
 8021374:	f7f9 fc2a 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021378:	4629      	mov	r1, r5
 802137a:	a80c      	add	r0, sp, #48	; 0x30
 802137c:	f7f9 fc4e 	bl	801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021380:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021384:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021388:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 802138c:	6838      	ldr	r0, [r7, #0]
 802138e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021392:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	; 0x34
 8021396:	f9bd 5036 	ldrsh.w	r5, [sp, #54]	; 0x36
 802139a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802139e:	440c      	add	r4, r1
 80213a0:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80213a4:	440a      	add	r2, r1
 80213a6:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80213aa:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80213ae:	4413      	add	r3, r2
 80213b0:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80213b4:	6803      	ldr	r3, [r0, #0]
 80213b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80213b8:	4798      	blx	r3
 80213ba:	2eff      	cmp	r6, #255	; 0xff
 80213bc:	d024      	beq.n	8021408 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xbc>
 80213be:	f010 0f04 	tst.w	r0, #4
 80213c2:	6838      	ldr	r0, [r7, #0]
 80213c4:	d023      	beq.n	802140e <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xc2>
 80213c6:	2100      	movs	r1, #0
 80213c8:	f04f 0c02 	mov.w	ip, #2
 80213cc:	6807      	ldr	r7, [r0, #0]
 80213ce:	b2ad      	uxth	r5, r5
 80213d0:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80213d4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80213d8:	e9cd c107 	strd	ip, r1, [sp, #28]
 80213dc:	f04f 0c01 	mov.w	ip, #1
 80213e0:	f8cd c018 	str.w	ip, [sp, #24]
 80213e4:	f8b9 c000 	ldrh.w	ip, [r9]
 80213e8:	9603      	str	r6, [sp, #12]
 80213ea:	9501      	str	r5, [sp, #4]
 80213ec:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80213f0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80213f4:	9102      	str	r1, [sp, #8]
 80213f6:	fa1f f188 	uxth.w	r1, r8
 80213fa:	9100      	str	r1, [sp, #0]
 80213fc:	4621      	mov	r1, r4
 80213fe:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 8021400:	47a8      	blx	r5
 8021402:	b00f      	add	sp, #60	; 0x3c
 8021404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021408:	f010 0f01 	tst.w	r0, #1
 802140c:	e7d9      	b.n	80213c2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x76>
 802140e:	6803      	ldr	r3, [r0, #0]
 8021410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021412:	4798      	blx	r3
 8021414:	f8b9 3000 	ldrh.w	r3, [r9]
 8021418:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 802141c:	2eff      	cmp	r6, #255	; 0xff
 802141e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021422:	fb03 f505 	mul.w	r5, r3, r5
 8021426:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	; 0x2c
 802142a:	ea4f 0c88 	mov.w	ip, r8, lsl #2
 802142e:	fb03 1202 	mla	r2, r3, r2, r1
 8021432:	eba3 0308 	sub.w	r3, r3, r8
 8021436:	eba7 0708 	sub.w	r7, r7, r8
 802143a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802143e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8021442:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8021446:	ea4f 0383 	mov.w	r3, r3, lsl #2
 802144a:	d04c      	beq.n	80214e6 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x19a>
 802144c:	42a8      	cmp	r0, r5
 802144e:	d263      	bcs.n	8021518 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 8021450:	eb00 0e0c 	add.w	lr, r0, ip
 8021454:	4621      	mov	r1, r4
 8021456:	4570      	cmp	r0, lr
 8021458:	460c      	mov	r4, r1
 802145a:	f101 0103 	add.w	r1, r1, #3
 802145e:	d23d      	bcs.n	80214dc <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x190>
 8021460:	6802      	ldr	r2, [r0, #0]
 8021462:	f811 bc01 	ldrb.w	fp, [r1, #-1]
 8021466:	ea4f 6912 	mov.w	r9, r2, lsr #24
 802146a:	fb1b fb06 	smulbb	fp, fp, r6
 802146e:	fa5f fa82 	uxtb.w	sl, r2
 8021472:	fb06 f809 	mul.w	r8, r6, r9
 8021476:	f108 0401 	add.w	r4, r8, #1
 802147a:	eb04 2428 	add.w	r4, r4, r8, asr #8
 802147e:	eb06 0809 	add.w	r8, r6, r9
 8021482:	1224      	asrs	r4, r4, #8
 8021484:	eba9 0904 	sub.w	r9, r9, r4
 8021488:	eba8 0804 	sub.w	r8, r8, r4
 802148c:	f811 4c03 	ldrb.w	r4, [r1, #-3]
 8021490:	fb09 fa0a 	mul.w	sl, r9, sl
 8021494:	fa5f f888 	uxtb.w	r8, r8
 8021498:	fb04 a406 	mla	r4, r4, r6, sl
 802149c:	fbb4 f4f8 	udiv	r4, r4, r8
 80214a0:	b2e4      	uxtb	r4, r4
 80214a2:	ea44 6a08 	orr.w	sl, r4, r8, lsl #24
 80214a6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80214aa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80214ae:	fb09 b404 	mla	r4, r9, r4, fp
 80214b2:	fbb4 f4f8 	udiv	r4, r4, r8
 80214b6:	0424      	lsls	r4, r4, #16
 80214b8:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80214bc:	ea4a 0404 	orr.w	r4, sl, r4
 80214c0:	f811 ac02 	ldrb.w	sl, [r1, #-2]
 80214c4:	fb1a fa06 	smulbb	sl, sl, r6
 80214c8:	fb09 a202 	mla	r2, r9, r2, sl
 80214cc:	fbb2 f2f8 	udiv	r2, r2, r8
 80214d0:	0212      	lsls	r2, r2, #8
 80214d2:	b292      	uxth	r2, r2
 80214d4:	4322      	orrs	r2, r4
 80214d6:	f840 2b04 	str.w	r2, [r0], #4
 80214da:	e7bc      	b.n	8021456 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x10a>
 80214dc:	4418      	add	r0, r3
 80214de:	443c      	add	r4, r7
 80214e0:	e7b4      	b.n	802144c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x100>
 80214e2:	4418      	add	r0, r3
 80214e4:	443c      	add	r4, r7
 80214e6:	42a8      	cmp	r0, r5
 80214e8:	d216      	bcs.n	8021518 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1cc>
 80214ea:	eb00 060c 	add.w	r6, r0, ip
 80214ee:	4621      	mov	r1, r4
 80214f0:	42b0      	cmp	r0, r6
 80214f2:	460c      	mov	r4, r1
 80214f4:	f101 0103 	add.w	r1, r1, #3
 80214f8:	d2f3      	bcs.n	80214e2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x196>
 80214fa:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 80214fe:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8021502:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 8021506:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802150a:	f811 4c02 	ldrb.w	r4, [r1, #-2]
 802150e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8021512:	f840 2b04 	str.w	r2, [r0], #4
 8021516:	e7eb      	b.n	80214f0 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1a4>
 8021518:	4b02      	ldr	r3, [pc, #8]	; (8021524 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0x1d8>)
 802151a:	6818      	ldr	r0, [r3, #0]
 802151c:	6803      	ldr	r3, [r0, #0]
 802151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021520:	4798      	blx	r3
 8021522:	e76e      	b.n	8021402 <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h+0xb6>
 8021524:	2003c2bc 	.word	0x2003c2bc
 8021528:	2003c2b6 	.word	0x2003c2b6

0802152c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 802152c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021530:	4607      	mov	r7, r0
 8021532:	b091      	sub	sp, #68	; 0x44
 8021534:	460c      	mov	r4, r1
 8021536:	4698      	mov	r8, r3
 8021538:	2b00      	cmp	r3, #0
 802153a:	d04f      	beq.n	80215dc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 802153c:	6808      	ldr	r0, [r1, #0]
 802153e:	ab0c      	add	r3, sp, #48	; 0x30
 8021540:	6849      	ldr	r1, [r1, #4]
 8021542:	4e7e      	ldr	r6, [pc, #504]	; (802173c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8021544:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8021740 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x214>
 8021548:	c303      	stmia	r3!, {r0, r1}
 802154a:	6810      	ldr	r0, [r2, #0]
 802154c:	ab0e      	add	r3, sp, #56	; 0x38
 802154e:	6851      	ldr	r1, [r2, #4]
 8021550:	c303      	stmia	r3!, {r0, r1}
 8021552:	a80c      	add	r0, sp, #48	; 0x30
 8021554:	f7f9 fb3a 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021558:	4621      	mov	r1, r4
 802155a:	a80e      	add	r0, sp, #56	; 0x38
 802155c:	f7f9 fb5e 	bl	801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021560:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021564:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8021568:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 802156c:	6830      	ldr	r0, [r6, #0]
 802156e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021572:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	; 0x3c
 8021576:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	; 0x3e
 802157a:	eb07 0741 	add.w	r7, r7, r1, lsl #1
 802157e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8021582:	440a      	add	r2, r1
 8021584:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8021588:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 802158c:	4413      	add	r3, r2
 802158e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8021592:	6803      	ldr	r3, [r0, #0]
 8021594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021596:	4798      	blx	r3
 8021598:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802159c:	d021      	beq.n	80215e2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 802159e:	f010 0f04 	tst.w	r0, #4
 80215a2:	6830      	ldr	r0, [r6, #0]
 80215a4:	d020      	beq.n	80215e8 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 80215a6:	2100      	movs	r1, #0
 80215a8:	f04f 0c02 	mov.w	ip, #2
 80215ac:	6806      	ldr	r6, [r0, #0]
 80215ae:	b2a4      	uxth	r4, r4
 80215b0:	9106      	str	r1, [sp, #24]
 80215b2:	b2ad      	uxth	r5, r5
 80215b4:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 80215b8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 80215bc:	e9cd c107 	strd	ip, r1, [sp, #28]
 80215c0:	f8b9 c000 	ldrh.w	ip, [r9]
 80215c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80215c8:	9501      	str	r5, [sp, #4]
 80215ca:	9400      	str	r4, [sp, #0]
 80215cc:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80215d0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 80215d4:	9102      	str	r1, [sp, #8]
 80215d6:	4639      	mov	r1, r7
 80215d8:	6c34      	ldr	r4, [r6, #64]	; 0x40
 80215da:	47a0      	blx	r4
 80215dc:	b011      	add	sp, #68	; 0x44
 80215de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215e2:	f010 0f01 	tst.w	r0, #1
 80215e6:	e7dc      	b.n	80215a2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x76>
 80215e8:	6803      	ldr	r3, [r0, #0]
 80215ea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80215ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80215f0:	4798      	blx	r3
 80215f2:	f8b9 c000 	ldrh.w	ip, [r9]
 80215f6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 80215fa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80215fe:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 8021602:	f9bd a034 	ldrsh.w	sl, [sp, #52]	; 0x34
 8021606:	fb0c 2303 	mla	r3, ip, r3, r2
 802160a:	ebaa 0a04 	sub.w	sl, sl, r4
 802160e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021612:	fb0c f305 	mul.w	r3, ip, r5
 8021616:	ebac 0c04 	sub.w	ip, ip, r4
 802161a:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 802161e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021622:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8021626:	d02d      	beq.n	8021684 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x158>
 8021628:	ea4f 6208 	mov.w	r2, r8, lsl #24
 802162c:	920a      	str	r2, [sp, #40]	; 0x28
 802162e:	4298      	cmp	r0, r3
 8021630:	d27d      	bcs.n	802172e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8021632:	eb00 020b 	add.w	r2, r0, fp
 8021636:	920b      	str	r2, [sp, #44]	; 0x2c
 8021638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802163a:	4290      	cmp	r0, r2
 802163c:	d274      	bcs.n	8021728 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1fc>
 802163e:	f837 eb02 	ldrh.w	lr, [r7], #2
 8021642:	f850 4b04 	ldr.w	r4, [r0], #4
 8021646:	ea4f 05ce 	mov.w	r5, lr, lsl #3
 802164a:	ea4f 02ee 	mov.w	r2, lr, asr #3
 802164e:	ea4f 262e 	mov.w	r6, lr, asr #8
 8021652:	b2ed      	uxtb	r5, r5
 8021654:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021658:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 802165c:	ea5f 6914 	movs.w	r9, r4, lsr #24
 8021660:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021664:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8021668:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 802166c:	d129      	bne.n	80216c2 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x196>
 802166e:	0212      	lsls	r2, r2, #8
 8021670:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8021674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021676:	4335      	orrs	r5, r6
 8021678:	4315      	orrs	r5, r2
 802167a:	f840 5c04 	str.w	r5, [r0, #-4]
 802167e:	e7db      	b.n	8021638 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8021680:	4460      	add	r0, ip
 8021682:	4457      	add	r7, sl
 8021684:	4298      	cmp	r0, r3
 8021686:	d252      	bcs.n	802172e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x202>
 8021688:	eb00 040b 	add.w	r4, r0, fp
 802168c:	42a0      	cmp	r0, r4
 802168e:	d2f7      	bcs.n	8021680 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x154>
 8021690:	f837 5b02 	ldrh.w	r5, [r7], #2
 8021694:	10e9      	asrs	r1, r5, #3
 8021696:	122e      	asrs	r6, r5, #8
 8021698:	f001 02fc 	and.w	r2, r1, #252	; 0xfc
 802169c:	00ed      	lsls	r5, r5, #3
 802169e:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80216a2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80216a6:	b2ed      	uxtb	r5, r5
 80216a8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80216ac:	0212      	lsls	r2, r2, #8
 80216ae:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80216b2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80216b6:	432a      	orrs	r2, r5
 80216b8:	f042 427f 	orr.w	r2, r2, #4278190080	; 0xff000000
 80216bc:	f840 2b04 	str.w	r2, [r0], #4
 80216c0:	e7e4      	b.n	802168c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x160>
 80216c2:	fb18 f505 	smulbb	r5, r8, r5
 80216c6:	fb08 fe09 	mul.w	lr, r8, r9
 80216ca:	fb18 f606 	smulbb	r6, r8, r6
 80216ce:	fb18 f202 	smulbb	r2, r8, r2
 80216d2:	f10e 0101 	add.w	r1, lr, #1
 80216d6:	eb01 212e 	add.w	r1, r1, lr, asr #8
 80216da:	eb08 0e09 	add.w	lr, r8, r9
 80216de:	1209      	asrs	r1, r1, #8
 80216e0:	eba9 0901 	sub.w	r9, r9, r1
 80216e4:	ebae 0e01 	sub.w	lr, lr, r1
 80216e8:	b2e1      	uxtb	r1, r4
 80216ea:	fa5f fe8e 	uxtb.w	lr, lr
 80216ee:	fb09 5101 	mla	r1, r9, r1, r5
 80216f2:	f3c4 4507 	ubfx	r5, r4, #16, #8
 80216f6:	fb09 6605 	mla	r6, r9, r5, r6
 80216fa:	fbb1 f1fe 	udiv	r1, r1, lr
 80216fe:	fbb6 f6fe 	udiv	r6, r6, lr
 8021702:	b2c9      	uxtb	r1, r1
 8021704:	0436      	lsls	r6, r6, #16
 8021706:	ea41 610e 	orr.w	r1, r1, lr, lsl #24
 802170a:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 802170e:	4331      	orrs	r1, r6
 8021710:	f3c4 2607 	ubfx	r6, r4, #8, #8
 8021714:	fb09 2606 	mla	r6, r9, r6, r2
 8021718:	fbb6 f6fe 	udiv	r6, r6, lr
 802171c:	0236      	lsls	r6, r6, #8
 802171e:	b2b6      	uxth	r6, r6
 8021720:	4331      	orrs	r1, r6
 8021722:	f840 1c04 	str.w	r1, [r0, #-4]
 8021726:	e787      	b.n	8021638 <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x10c>
 8021728:	4460      	add	r0, ip
 802172a:	4457      	add	r7, sl
 802172c:	e77f      	b.n	802162e <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x102>
 802172e:	4b03      	ldr	r3, [pc, #12]	; (802173c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x210>)
 8021730:	6818      	ldr	r0, [r3, #0]
 8021732:	6803      	ldr	r3, [r0, #0]
 8021734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021736:	4798      	blx	r3
 8021738:	e750      	b.n	80215dc <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb0>
 802173a:	bf00      	nop
 802173c:	2003c2bc 	.word	0x2003c2bc
 8021740:	2003c2b6 	.word	0x2003c2b6

08021744 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021744:	b4f0      	push	{r4, r5, r6, r7}
 8021746:	4616      	mov	r6, r2
 8021748:	461c      	mov	r4, r3
 802174a:	460d      	mov	r5, r1
 802174c:	9a04      	ldr	r2, [sp, #16]
 802174e:	2e01      	cmp	r6, #1
 8021750:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8021754:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8021758:	d012      	beq.n	8021780 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 802175a:	d303      	bcc.n	8021764 <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 802175c:	2e02      	cmp	r6, #2
 802175e:	d006      	beq.n	802176e <_ZN8touchgfx8LCD32bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x2a>
 8021760:	bcf0      	pop	{r4, r5, r6, r7}
 8021762:	4770      	bx	lr
 8021764:	4621      	mov	r1, r4
 8021766:	4628      	mov	r0, r5
 8021768:	bcf0      	pop	{r4, r5, r6, r7}
 802176a:	f7ff bedf 	b.w	802152c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 802176e:	6805      	ldr	r5, [r0, #0]
 8021770:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8021774:	68ed      	ldr	r5, [r5, #12]
 8021776:	4613      	mov	r3, r2
 8021778:	4622      	mov	r2, r4
 802177a:	46ac      	mov	ip, r5
 802177c:	bcf0      	pop	{r4, r5, r6, r7}
 802177e:	4760      	bx	ip
 8021780:	4621      	mov	r1, r4
 8021782:	4628      	mov	r0, r5
 8021784:	bcf0      	pop	{r4, r5, r6, r7}
 8021786:	f7ff bde1 	b.w	802134c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
	...

0802178c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 802178c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021790:	b093      	sub	sp, #76	; 0x4c
 8021792:	4681      	mov	r9, r0
 8021794:	460f      	mov	r7, r1
 8021796:	6810      	ldr	r0, [r2, #0]
 8021798:	6851      	ldr	r1, [r2, #4]
 802179a:	ac0e      	add	r4, sp, #56	; 0x38
 802179c:	4616      	mov	r6, r2
 802179e:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 80217a2:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8021950 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>
 80217a6:	c403      	stmia	r4!, {r0, r1}
 80217a8:	6818      	ldr	r0, [r3, #0]
 80217aa:	ac10      	add	r4, sp, #64	; 0x40
 80217ac:	6859      	ldr	r1, [r3, #4]
 80217ae:	c403      	stmia	r4!, {r0, r1}
 80217b0:	a80e      	add	r0, sp, #56	; 0x38
 80217b2:	f7f9 fa0b 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80217b6:	4631      	mov	r1, r6
 80217b8:	a810      	add	r0, sp, #64	; 0x40
 80217ba:	4e64      	ldr	r6, [pc, #400]	; (802194c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 80217bc:	f7f9 fa2e 	bl	801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80217c0:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 80217c4:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 80217c8:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 80217cc:	6830      	ldr	r0, [r6, #0]
 80217ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 80217d2:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80217d6:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80217da:	4489      	add	r9, r1
 80217dc:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80217e0:	440a      	add	r2, r1
 80217e2:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80217e6:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80217ea:	4413      	add	r3, r2
 80217ec:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80217f0:	6803      	ldr	r3, [r0, #0]
 80217f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80217f4:	4798      	blx	r3
 80217f6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80217fa:	6830      	ldr	r0, [r6, #0]
 80217fc:	d01f      	beq.n	802183e <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80217fe:	2102      	movs	r1, #2
 8021800:	2600      	movs	r6, #0
 8021802:	6802      	ldr	r2, [r0, #0]
 8021804:	b2a4      	uxth	r4, r4
 8021806:	b2ad      	uxth	r5, r5
 8021808:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 802180c:	e9cd 1608 	strd	r1, r6, [sp, #32]
 8021810:	210b      	movs	r1, #11
 8021812:	9107      	str	r1, [sp, #28]
 8021814:	f8ba 1000 	ldrh.w	r1, [sl]
 8021818:	9502      	str	r5, [sp, #8]
 802181a:	9106      	str	r1, [sp, #24]
 802181c:	2101      	movs	r1, #1
 802181e:	9401      	str	r4, [sp, #4]
 8021820:	e9cd 8104 	strd	r8, r1, [sp, #16]
 8021824:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021828:	9103      	str	r1, [sp, #12]
 802182a:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 802182e:	9100      	str	r1, [sp, #0]
 8021830:	4649      	mov	r1, r9
 8021832:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 8021834:	463a      	mov	r2, r7
 8021836:	47a0      	blx	r4
 8021838:	b013      	add	sp, #76	; 0x4c
 802183a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802183e:	6803      	ldr	r3, [r0, #0]
 8021840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021842:	4798      	blx	r3
 8021844:	f8ba 3000 	ldrh.w	r3, [sl]
 8021848:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 802184c:	f04f 0e04 	mov.w	lr, #4
 8021850:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8021854:	435d      	muls	r5, r3
 8021856:	fb03 1202 	mla	r2, r3, r2, r1
 802185a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 802185e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8021862:	920c      	str	r2, [sp, #48]	; 0x30
 8021864:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8021868:	1b12      	subs	r2, r2, r4
 802186a:	920d      	str	r2, [sp, #52]	; 0x34
 802186c:	00a2      	lsls	r2, r4, #2
 802186e:	1b1c      	subs	r4, r3, r4
 8021870:	920a      	str	r2, [sp, #40]	; 0x28
 8021872:	00a3      	lsls	r3, r4, #2
 8021874:	930b      	str	r3, [sp, #44]	; 0x2c
 8021876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021878:	4298      	cmp	r0, r3
 802187a:	d261      	bcs.n	8021940 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b4>
 802187c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802187e:	eb00 0a03 	add.w	sl, r0, r3
 8021882:	4550      	cmp	r0, sl
 8021884:	d257      	bcs.n	8021936 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8021886:	f819 2b01 	ldrb.w	r2, [r9], #1
 802188a:	fb1e e202 	smlabb	r2, lr, r2, lr
 802188e:	eb07 0c02 	add.w	ip, r7, r2
 8021892:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021896:	fb03 f308 	mul.w	r3, r3, r8
 802189a:	1c5c      	adds	r4, r3, #1
 802189c:	eb04 2413 	add.w	r4, r4, r3, lsr #8
 80218a0:	1224      	asrs	r4, r4, #8
 80218a2:	2cff      	cmp	r4, #255	; 0xff
 80218a4:	d003      	beq.n	80218ae <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x122>
 80218a6:	6803      	ldr	r3, [r0, #0]
 80218a8:	ea5f 6b13 	movs.w	fp, r3, lsr #24
 80218ac:	d10d      	bne.n	80218ca <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13e>
 80218ae:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80218b2:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80218b6:	021b      	lsls	r3, r3, #8
 80218b8:	5cba      	ldrb	r2, [r7, r2]
 80218ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80218be:	4313      	orrs	r3, r2
 80218c0:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
 80218c4:	6004      	str	r4, [r0, #0]
 80218c6:	3004      	adds	r0, #4
 80218c8:	e7db      	b.n	8021882 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf6>
 80218ca:	b2e5      	uxtb	r5, r4
 80218cc:	2c00      	cmp	r4, #0
 80218ce:	d0fa      	beq.n	80218c6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 80218d0:	fb05 f10b 	mul.w	r1, r5, fp
 80218d4:	445d      	add	r5, fp
 80218d6:	5cba      	ldrb	r2, [r7, r2]
 80218d8:	1c4e      	adds	r6, r1, #1
 80218da:	eb06 2121 	add.w	r1, r6, r1, asr #8
 80218de:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80218e2:	1209      	asrs	r1, r1, #8
 80218e4:	1a6d      	subs	r5, r5, r1
 80218e6:	ebab 0101 	sub.w	r1, fp, r1
 80218ea:	f89c b002 	ldrb.w	fp, [ip, #2]
 80218ee:	b2ed      	uxtb	r5, r5
 80218f0:	fb04 fb0b 	mul.w	fp, r4, fp
 80218f4:	fb01 b606 	mla	r6, r1, r6, fp
 80218f8:	fa5f fb83 	uxtb.w	fp, r3
 80218fc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021900:	fb01 fb0b 	mul.w	fp, r1, fp
 8021904:	fb04 b202 	mla	r2, r4, r2, fp
 8021908:	fbb6 f6f5 	udiv	r6, r6, r5
 802190c:	fbb2 f2f5 	udiv	r2, r2, r5
 8021910:	0436      	lsls	r6, r6, #16
 8021912:	b2d2      	uxtb	r2, r2
 8021914:	f406 067f 	and.w	r6, r6, #16711680	; 0xff0000
 8021918:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 802191c:	4316      	orrs	r6, r2
 802191e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8021922:	4354      	muls	r4, r2
 8021924:	fb01 4203 	mla	r2, r1, r3, r4
 8021928:	fbb2 f2f5 	udiv	r2, r2, r5
 802192c:	0212      	lsls	r2, r2, #8
 802192e:	b292      	uxth	r2, r2
 8021930:	4316      	orrs	r6, r2
 8021932:	6006      	str	r6, [r0, #0]
 8021934:	e7c7      	b.n	80218c6 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x13a>
 8021936:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021938:	4418      	add	r0, r3
 802193a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802193c:	4499      	add	r9, r3
 802193e:	e79a      	b.n	8021876 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xea>
 8021940:	4b02      	ldr	r3, [pc, #8]	; (802194c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8021942:	6818      	ldr	r0, [r3, #0]
 8021944:	6803      	ldr	r3, [r0, #0]
 8021946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021948:	4798      	blx	r3
 802194a:	e775      	b.n	8021838 <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 802194c:	2003c2bc 	.word	0x2003c2bc
 8021950:	2003c2b6 	.word	0x2003c2b6

08021954 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8021954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021958:	b093      	sub	sp, #76	; 0x4c
 802195a:	4606      	mov	r6, r0
 802195c:	4689      	mov	r9, r1
 802195e:	6810      	ldr	r0, [r2, #0]
 8021960:	6851      	ldr	r1, [r2, #4]
 8021962:	ac0e      	add	r4, sp, #56	; 0x38
 8021964:	4615      	mov	r5, r2
 8021966:	f89d 8070 	ldrb.w	r8, [sp, #112]	; 0x70
 802196a:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8021b50 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1fc>
 802196e:	c403      	stmia	r4!, {r0, r1}
 8021970:	6818      	ldr	r0, [r3, #0]
 8021972:	ac10      	add	r4, sp, #64	; 0x40
 8021974:	6859      	ldr	r1, [r3, #4]
 8021976:	c403      	stmia	r4!, {r0, r1}
 8021978:	a80e      	add	r0, sp, #56	; 0x38
 802197a:	f7f9 f927 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802197e:	4629      	mov	r1, r5
 8021980:	a810      	add	r0, sp, #64	; 0x40
 8021982:	f7f9 f94b 	bl	801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021986:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 802198a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 802198e:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 8021992:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 8021996:	fb11 2103 	smlabb	r1, r1, r3, r2
 802199a:	f9bd 7046 	ldrsh.w	r7, [sp, #70]	; 0x46
 802199e:	1875      	adds	r5, r6, r1
 80219a0:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80219a4:	4e69      	ldr	r6, [pc, #420]	; (8021b4c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 80219a6:	440a      	add	r2, r1
 80219a8:	6830      	ldr	r0, [r6, #0]
 80219aa:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80219ae:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80219b2:	4413      	add	r3, r2
 80219b4:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80219b8:	6803      	ldr	r3, [r0, #0]
 80219ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80219bc:	4798      	blx	r3
 80219be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80219c2:	d020      	beq.n	8021a06 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb2>
 80219c4:	6830      	ldr	r0, [r6, #0]
 80219c6:	2200      	movs	r2, #0
 80219c8:	2602      	movs	r6, #2
 80219ca:	b2a4      	uxth	r4, r4
 80219cc:	6801      	ldr	r1, [r0, #0]
 80219ce:	b2bf      	uxth	r7, r7
 80219d0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 80219d4:	e9cd 6208 	strd	r6, r2, [sp, #32]
 80219d8:	260b      	movs	r6, #11
 80219da:	9607      	str	r6, [sp, #28]
 80219dc:	f8ba 6000 	ldrh.w	r6, [sl]
 80219e0:	f8cd 8010 	str.w	r8, [sp, #16]
 80219e4:	9702      	str	r7, [sp, #8]
 80219e6:	9401      	str	r4, [sp, #4]
 80219e8:	e9cd 2605 	strd	r2, r6, [sp, #20]
 80219ec:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80219f0:	9203      	str	r2, [sp, #12]
 80219f2:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80219f6:	9200      	str	r2, [sp, #0]
 80219f8:	464a      	mov	r2, r9
 80219fa:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 80219fc:	4629      	mov	r1, r5
 80219fe:	47a0      	blx	r4
 8021a00:	b013      	add	sp, #76	; 0x4c
 8021a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a06:	6830      	ldr	r0, [r6, #0]
 8021a08:	f109 0904 	add.w	r9, r9, #4
 8021a0c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8021a10:	6803      	ldr	r3, [r0, #0]
 8021a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021a14:	4798      	blx	r3
 8021a16:	f8ba c000 	ldrh.w	ip, [sl]
 8021a1a:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 8021a1e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021a22:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8021a26:	fb0c f707 	mul.w	r7, ip, r7
 8021a2a:	fb0c 2303 	mla	r3, ip, r3, r2
 8021a2e:	ebac 0c04 	sub.w	ip, ip, r4
 8021a32:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021a36:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8021a3a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8021a3e:	eba3 0304 	sub.w	r3, r3, r4
 8021a42:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8021a46:	930b      	str	r3, [sp, #44]	; 0x2c
 8021a48:	d025      	beq.n	8021a96 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x142>
 8021a4a:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8021a4e:	930c      	str	r3, [sp, #48]	; 0x30
 8021a50:	42b8      	cmp	r0, r7
 8021a52:	d274      	bcs.n	8021b3e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 8021a54:	eb00 030b 	add.w	r3, r0, fp
 8021a58:	930d      	str	r3, [sp, #52]	; 0x34
 8021a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021a5c:	4298      	cmp	r0, r3
 8021a5e:	d26a      	bcs.n	8021b36 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1e2>
 8021a60:	f815 1b01 	ldrb.w	r1, [r5], #1
 8021a64:	f850 3b04 	ldr.w	r3, [r0], #4
 8021a68:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021a6c:	0e1c      	lsrs	r4, r3, #24
 8021a6e:	eb09 0201 	add.w	r2, r9, r1
 8021a72:	f819 6001 	ldrb.w	r6, [r9, r1]
 8021a76:	f892 a002 	ldrb.w	sl, [r2, #2]
 8021a7a:	7851      	ldrb	r1, [r2, #1]
 8021a7c:	d124      	bne.n	8021ac8 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x174>
 8021a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021a80:	431e      	orrs	r6, r3
 8021a82:	ea46 4a0a 	orr.w	sl, r6, sl, lsl #16
 8021a86:	ea4a 2101 	orr.w	r1, sl, r1, lsl #8
 8021a8a:	f840 1c04 	str.w	r1, [r0, #-4]
 8021a8e:	e7e4      	b.n	8021a5a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8021a90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021a92:	4460      	add	r0, ip
 8021a94:	441d      	add	r5, r3
 8021a96:	42b8      	cmp	r0, r7
 8021a98:	d251      	bcs.n	8021b3e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1ea>
 8021a9a:	eb00 010b 	add.w	r1, r0, fp
 8021a9e:	4288      	cmp	r0, r1
 8021aa0:	d2f6      	bcs.n	8021a90 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x13c>
 8021aa2:	f815 2b01 	ldrb.w	r2, [r5], #1
 8021aa6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8021aaa:	f819 3002 	ldrb.w	r3, [r9, r2]
 8021aae:	eb09 0402 	add.w	r4, r9, r2
 8021ab2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8021ab6:	78a6      	ldrb	r6, [r4, #2]
 8021ab8:	7862      	ldrb	r2, [r4, #1]
 8021aba:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8021abe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8021ac2:	f840 3b04 	str.w	r3, [r0], #4
 8021ac6:	e7ea      	b.n	8021a9e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x14a>
 8021ac8:	fb18 f606 	smulbb	r6, r8, r6
 8021acc:	fb08 fe04 	mul.w	lr, r8, r4
 8021ad0:	fb18 fa0a 	smulbb	sl, r8, sl
 8021ad4:	fb18 f101 	smulbb	r1, r8, r1
 8021ad8:	f10e 0201 	add.w	r2, lr, #1
 8021adc:	eb02 222e 	add.w	r2, r2, lr, asr #8
 8021ae0:	eb08 0e04 	add.w	lr, r8, r4
 8021ae4:	1212      	asrs	r2, r2, #8
 8021ae6:	ebae 0e02 	sub.w	lr, lr, r2
 8021aea:	1aa2      	subs	r2, r4, r2
 8021aec:	b2dc      	uxtb	r4, r3
 8021aee:	fa5f fe8e 	uxtb.w	lr, lr
 8021af2:	fb02 6604 	mla	r6, r2, r4, r6
 8021af6:	f3c3 4407 	ubfx	r4, r3, #16, #8
 8021afa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021afe:	fb02 aa04 	mla	sl, r2, r4, sl
 8021b02:	fb02 1303 	mla	r3, r2, r3, r1
 8021b06:	fbb6 f6fe 	udiv	r6, r6, lr
 8021b0a:	fbba fafe 	udiv	sl, sl, lr
 8021b0e:	b2f6      	uxtb	r6, r6
 8021b10:	ea4f 4a0a 	mov.w	sl, sl, lsl #16
 8021b14:	ea46 660e 	orr.w	r6, r6, lr, lsl #24
 8021b18:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 8021b1c:	ea46 060a 	orr.w	r6, r6, sl
 8021b20:	fbb3 fafe 	udiv	sl, r3, lr
 8021b24:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 8021b28:	fa1f fa8a 	uxth.w	sl, sl
 8021b2c:	ea46 060a 	orr.w	r6, r6, sl
 8021b30:	f840 6c04 	str.w	r6, [r0, #-4]
 8021b34:	e791      	b.n	8021a5a <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x106>
 8021b36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021b38:	4460      	add	r0, ip
 8021b3a:	441d      	add	r5, r3
 8021b3c:	e788      	b.n	8021a50 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xfc>
 8021b3e:	4b03      	ldr	r3, [pc, #12]	; (8021b4c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f8>)
 8021b40:	6818      	ldr	r0, [r3, #0]
 8021b42:	6803      	ldr	r3, [r0, #0]
 8021b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021b46:	4798      	blx	r3
 8021b48:	e75a      	b.n	8021a00 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xac>
 8021b4a:	bf00      	nop
 8021b4c:	2003c2bc 	.word	0x2003c2bc
 8021b50:	2003c2b6 	.word	0x2003c2b6

08021b54 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8021b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b58:	b089      	sub	sp, #36	; 0x24
 8021b5a:	4605      	mov	r5, r0
 8021b5c:	4689      	mov	r9, r1
 8021b5e:	6810      	ldr	r0, [r2, #0]
 8021b60:	6851      	ldr	r1, [r2, #4]
 8021b62:	ac04      	add	r4, sp, #16
 8021b64:	4616      	mov	r6, r2
 8021b66:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8021b6a:	f109 0904 	add.w	r9, r9, #4
 8021b6e:	c403      	stmia	r4!, {r0, r1}
 8021b70:	6818      	ldr	r0, [r3, #0]
 8021b72:	ac06      	add	r4, sp, #24
 8021b74:	6859      	ldr	r1, [r3, #4]
 8021b76:	c403      	stmia	r4!, {r0, r1}
 8021b78:	a804      	add	r0, sp, #16
 8021b7a:	f7f9 f827 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021b7e:	4631      	mov	r1, r6
 8021b80:	a806      	add	r0, sp, #24
 8021b82:	f7f9 f84b 	bl	801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021b86:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8021b8a:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8021b8e:	f8bd 6014 	ldrh.w	r6, [sp, #20]
 8021b92:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8021b96:	fb16 2103 	smlabb	r1, r6, r3, r2
 8021b9a:	f9bd a01e 	ldrsh.w	sl, [sp, #30]
 8021b9e:	186e      	adds	r6, r5, r1
 8021ba0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8021ba4:	440a      	add	r2, r1
 8021ba6:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021baa:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021bae:	4413      	add	r3, r2
 8021bb0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8021bb4:	4b57      	ldr	r3, [pc, #348]	; (8021d14 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8021bb6:	6818      	ldr	r0, [r3, #0]
 8021bb8:	6803      	ldr	r3, [r0, #0]
 8021bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8021bbc:	4798      	blx	r3
 8021bbe:	4b56      	ldr	r3, [pc, #344]	; (8021d18 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c4>)
 8021bc0:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
 8021bc4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8021bc8:	f8b3 c000 	ldrh.w	ip, [r3]
 8021bcc:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8021bd0:	fb0a fa0c 	mul.w	sl, sl, ip
 8021bd4:	fb0c 2303 	mla	r3, ip, r3, r2
 8021bd8:	ebac 0c0b 	sub.w	ip, ip, fp
 8021bdc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8021be0:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8021be4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8021be8:	eba3 030b 	sub.w	r3, r3, fp
 8021bec:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8021bf0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8021bf4:	9301      	str	r3, [sp, #4]
 8021bf6:	d02e      	beq.n	8021c56 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x102>
 8021bf8:	ea4f 6308 	mov.w	r3, r8, lsl #24
 8021bfc:	9302      	str	r3, [sp, #8]
 8021bfe:	4550      	cmp	r0, sl
 8021c00:	d27f      	bcs.n	8021d02 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 8021c02:	eb00 030b 	add.w	r3, r0, fp
 8021c06:	9303      	str	r3, [sp, #12]
 8021c08:	9b03      	ldr	r3, [sp, #12]
 8021c0a:	4298      	cmp	r0, r3
 8021c0c:	d275      	bcs.n	8021cfa <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1a6>
 8021c0e:	f816 3b01 	ldrb.w	r3, [r6], #1
 8021c12:	6802      	ldr	r2, [r0, #0]
 8021c14:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 8021c18:	0e17      	lsrs	r7, r2, #24
 8021c1a:	ea4f 04c1 	mov.w	r4, r1, lsl #3
 8021c1e:	ea4f 03e1 	mov.w	r3, r1, asr #3
 8021c22:	ea4f 2521 	mov.w	r5, r1, asr #8
 8021c26:	b2e4      	uxtb	r4, r4
 8021c28:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8021c2c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8021c30:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021c34:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8021c38:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 8021c3c:	d12c      	bne.n	8021c98 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x144>
 8021c3e:	021b      	lsls	r3, r3, #8
 8021c40:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 8021c44:	9b02      	ldr	r3, [sp, #8]
 8021c46:	432c      	orrs	r4, r5
 8021c48:	431c      	orrs	r4, r3
 8021c4a:	6004      	str	r4, [r0, #0]
 8021c4c:	3004      	adds	r0, #4
 8021c4e:	e7db      	b.n	8021c08 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xb4>
 8021c50:	9b01      	ldr	r3, [sp, #4]
 8021c52:	4460      	add	r0, ip
 8021c54:	441e      	add	r6, r3
 8021c56:	4550      	cmp	r0, sl
 8021c58:	d253      	bcs.n	8021d02 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1ae>
 8021c5a:	eb00 020b 	add.w	r2, r0, fp
 8021c5e:	4290      	cmp	r0, r2
 8021c60:	d2f6      	bcs.n	8021c50 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xfc>
 8021c62:	f816 3b01 	ldrb.w	r3, [r6], #1
 8021c66:	f839 5013 	ldrh.w	r5, [r9, r3, lsl #1]
 8021c6a:	10e9      	asrs	r1, r5, #3
 8021c6c:	122c      	asrs	r4, r5, #8
 8021c6e:	f001 03fc 	and.w	r3, r1, #252	; 0xfc
 8021c72:	00e9      	lsls	r1, r5, #3
 8021c74:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021c78:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8021c7c:	b2c9      	uxtb	r1, r1
 8021c7e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8021c82:	021b      	lsls	r3, r3, #8
 8021c84:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8021c88:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8021c8c:	430b      	orrs	r3, r1
 8021c8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8021c92:	f840 3b04 	str.w	r3, [r0], #4
 8021c96:	e7e2      	b.n	8021c5e <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x10a>
 8021c98:	fb18 f404 	smulbb	r4, r8, r4
 8021c9c:	fb08 fe07 	mul.w	lr, r8, r7
 8021ca0:	fb18 f505 	smulbb	r5, r8, r5
 8021ca4:	fb18 f303 	smulbb	r3, r8, r3
 8021ca8:	f10e 0101 	add.w	r1, lr, #1
 8021cac:	eb01 212e 	add.w	r1, r1, lr, asr #8
 8021cb0:	eb08 0e07 	add.w	lr, r8, r7
 8021cb4:	1209      	asrs	r1, r1, #8
 8021cb6:	ebae 0e01 	sub.w	lr, lr, r1
 8021cba:	1a79      	subs	r1, r7, r1
 8021cbc:	b2d7      	uxtb	r7, r2
 8021cbe:	fa5f fe8e 	uxtb.w	lr, lr
 8021cc2:	fb01 4707 	mla	r7, r1, r7, r4
 8021cc6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8021cca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8021cce:	fb01 5504 	mla	r5, r1, r4, r5
 8021cd2:	fb01 3202 	mla	r2, r1, r2, r3
 8021cd6:	fbb7 f7fe 	udiv	r7, r7, lr
 8021cda:	fbb5 f5fe 	udiv	r5, r5, lr
 8021cde:	b2ff      	uxtb	r7, r7
 8021ce0:	042d      	lsls	r5, r5, #16
 8021ce2:	ea47 670e 	orr.w	r7, r7, lr, lsl #24
 8021ce6:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 8021cea:	432f      	orrs	r7, r5
 8021cec:	fbb2 f5fe 	udiv	r5, r2, lr
 8021cf0:	022d      	lsls	r5, r5, #8
 8021cf2:	b2ad      	uxth	r5, r5
 8021cf4:	432f      	orrs	r7, r5
 8021cf6:	6007      	str	r7, [r0, #0]
 8021cf8:	e7a8      	b.n	8021c4c <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xf8>
 8021cfa:	9b01      	ldr	r3, [sp, #4]
 8021cfc:	4460      	add	r0, ip
 8021cfe:	441e      	add	r6, r3
 8021d00:	e77d      	b.n	8021bfe <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xaa>
 8021d02:	4b04      	ldr	r3, [pc, #16]	; (8021d14 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x1c0>)
 8021d04:	6818      	ldr	r0, [r3, #0]
 8021d06:	6803      	ldr	r3, [r0, #0]
 8021d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8021d0a:	4798      	blx	r3
 8021d0c:	b009      	add	sp, #36	; 0x24
 8021d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d12:	bf00      	nop
 8021d14:	2003c2bc 	.word	0x2003c2bc
 8021d18:	2003c2b6 	.word	0x2003c2b6

08021d1c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8021d1c:	b430      	push	{r4, r5}
 8021d1e:	780d      	ldrb	r5, [r1, #0]
 8021d20:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8021d24:	2d01      	cmp	r5, #1
 8021d26:	d00a      	beq.n	8021d3e <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8021d28:	d305      	bcc.n	8021d36 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8021d2a:	2d02      	cmp	r5, #2
 8021d2c:	d10b      	bne.n	8021d46 <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8021d2e:	9402      	str	r4, [sp, #8]
 8021d30:	bc30      	pop	{r4, r5}
 8021d32:	f7ff bf0f 	b.w	8021b54 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8021d36:	9402      	str	r4, [sp, #8]
 8021d38:	bc30      	pop	{r4, r5}
 8021d3a:	f7ff bd27 	b.w	802178c <_ZN8touchgfx8LCD32bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8021d3e:	9402      	str	r4, [sp, #8]
 8021d40:	bc30      	pop	{r4, r5}
 8021d42:	f7ff be07 	b.w	8021954 <_ZN8touchgfx8LCD32bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8021d46:	bc30      	pop	{r4, r5}
 8021d48:	4770      	bx	lr

08021d4a <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021d4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021d4e:	b085      	sub	sp, #20
 8021d50:	4606      	mov	r6, r0
 8021d52:	460c      	mov	r4, r1
 8021d54:	4691      	mov	r9, r2
 8021d56:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8021d5a:	4698      	mov	r8, r3
 8021d5c:	b1d5      	cbz	r5, 8021d94 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021d5e:	4608      	mov	r0, r1
 8021d60:	f7fc fa1e 	bl	801e1a0 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021d64:	4607      	mov	r7, r0
 8021d66:	4620      	mov	r0, r4
 8021d68:	f7fc fa4e 	bl	801e208 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021d6c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021d70:	4620      	mov	r0, r4
 8021d72:	f8ad 9008 	strh.w	r9, [sp, #8]
 8021d76:	f8ad 800a 	strh.w	r8, [sp, #10]
 8021d7a:	f8ad 700c 	strh.w	r7, [sp, #12]
 8021d7e:	f7fc fb33 	bl	801e3e8 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021d82:	b950      	cbnz	r0, 8021d9a <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x50>
 8021d84:	4620      	mov	r0, r4
 8021d86:	f7fc faab 	bl	801e2e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021d8a:	462b      	mov	r3, r5
 8021d8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021d8e:	a902      	add	r1, sp, #8
 8021d90:	f7ff fbcc 	bl	802152c <_ZN8touchgfx8LCD32bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8021d94:	b005      	add	sp, #20
 8021d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021d9a:	2801      	cmp	r0, #1
 8021d9c:	d108      	bne.n	8021db0 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x66>
 8021d9e:	4620      	mov	r0, r4
 8021da0:	f7fc fa9e 	bl	801e2e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021da4:	462b      	mov	r3, r5
 8021da6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8021da8:	a902      	add	r1, sp, #8
 8021daa:	f7ff facf 	bl	802134c <_ZN8touchgfx8LCD32bpp14blitCopyRGB888EPKtRKNS_4RectES5_h>
 8021dae:	e7f1      	b.n	8021d94 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021db0:	2802      	cmp	r0, #2
 8021db2:	d110      	bne.n	8021dd6 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8021db4:	6833      	ldr	r3, [r6, #0]
 8021db6:	4620      	mov	r0, r4
 8021db8:	68df      	ldr	r7, [r3, #12]
 8021dba:	f7fc fa91 	bl	801e2e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021dbe:	4680      	mov	r8, r0
 8021dc0:	4620      	mov	r0, r4
 8021dc2:	f7fc fa55 	bl	801e270 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021dc8:	aa02      	add	r2, sp, #8
 8021dca:	4641      	mov	r1, r8
 8021dcc:	e9cd 5000 	strd	r5, r0, [sp]
 8021dd0:	4630      	mov	r0, r6
 8021dd2:	47b8      	blx	r7
 8021dd4:	e7de      	b.n	8021d94 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021dd6:	280b      	cmp	r0, #11
 8021dd8:	d1dc      	bne.n	8021d94 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021dda:	4620      	mov	r0, r4
 8021ddc:	f7fc fa80 	bl	801e2e0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021de0:	4606      	mov	r6, r0
 8021de2:	4620      	mov	r0, r4
 8021de4:	f7fc faac 	bl	801e340 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021de8:	9500      	str	r5, [sp, #0]
 8021dea:	4601      	mov	r1, r0
 8021dec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8021dee:	aa02      	add	r2, sp, #8
 8021df0:	4630      	mov	r0, r6
 8021df2:	f7ff ff93 	bl	8021d1c <_ZN8touchgfx8LCD32bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8021df6:	e7cd      	b.n	8021d94 <_ZN8touchgfx8LCD32bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>

08021df8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>:
 8021df8:	b160      	cbz	r0, 8021e14 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8021dfa:	2903      	cmp	r1, #3
 8021dfc:	d818      	bhi.n	8021e30 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8021dfe:	e8df f001 	tbb	[pc, r1]
 8021e02:	1902      	.short	0x1902
 8021e04:	1b06      	.short	0x1b06
 8021e06:	4b0e      	ldr	r3, [pc, #56]	; (8021e40 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8021e08:	8818      	ldrh	r0, [r3, #0]
 8021e0a:	4240      	negs	r0, r0
 8021e0c:	4770      	bx	lr
 8021e0e:	4b0c      	ldr	r3, [pc, #48]	; (8021e40 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8021e10:	8818      	ldrh	r0, [r3, #0]
 8021e12:	4770      	bx	lr
 8021e14:	2903      	cmp	r1, #3
 8021e16:	d80b      	bhi.n	8021e30 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x38>
 8021e18:	a301      	add	r3, pc, #4	; (adr r3, 8021e20 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8021e1a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021e1e:	bf00      	nop
 8021e20:	08021e35 	.word	0x08021e35
 8021e24:	08021e0f 	.word	0x08021e0f
 8021e28:	08021e39 	.word	0x08021e39
 8021e2c:	08021e07 	.word	0x08021e07
 8021e30:	2000      	movs	r0, #0
 8021e32:	4770      	bx	lr
 8021e34:	2001      	movs	r0, #1
 8021e36:	4770      	bx	lr
 8021e38:	f04f 30ff 	mov.w	r0, #4294967295
 8021e3c:	4770      	bx	lr
 8021e3e:	bf00      	nop
 8021e40:	2003c2b6 	.word	0x2003c2b6

08021e44 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>:
 8021e44:	b160      	cbz	r0, 8021e60 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x1c>
 8021e46:	2903      	cmp	r1, #3
 8021e48:	d818      	bhi.n	8021e7c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8021e4a:	e8df f001 	tbb	[pc, r1]
 8021e4e:	0219      	.short	0x0219
 8021e50:	051b      	.short	0x051b
 8021e52:	4b0e      	ldr	r3, [pc, #56]	; (8021e8c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8021e54:	8818      	ldrh	r0, [r3, #0]
 8021e56:	4770      	bx	lr
 8021e58:	4b0c      	ldr	r3, [pc, #48]	; (8021e8c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x48>)
 8021e5a:	8818      	ldrh	r0, [r3, #0]
 8021e5c:	4240      	negs	r0, r0
 8021e5e:	4770      	bx	lr
 8021e60:	2903      	cmp	r1, #3
 8021e62:	d80b      	bhi.n	8021e7c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x38>
 8021e64:	a301      	add	r3, pc, #4	; (adr r3, 8021e6c <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE+0x28>)
 8021e66:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8021e6a:	bf00      	nop
 8021e6c:	08021e53 	.word	0x08021e53
 8021e70:	08021e85 	.word	0x08021e85
 8021e74:	08021e59 	.word	0x08021e59
 8021e78:	08021e81 	.word	0x08021e81
 8021e7c:	2000      	movs	r0, #0
 8021e7e:	4770      	bx	lr
 8021e80:	2001      	movs	r0, #1
 8021e82:	4770      	bx	lr
 8021e84:	f04f 30ff 	mov.w	r0, #4294967295
 8021e88:	4770      	bx	lr
 8021e8a:	bf00      	nop
 8021e8c:	2003c2b6 	.word	0x2003c2b6

08021e90 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8021e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e94:	b099      	sub	sp, #100	; 0x64
 8021e96:	910b      	str	r1, [sp, #44]	; 0x2c
 8021e98:	a914      	add	r1, sp, #80	; 0x50
 8021e9a:	f9bd 6088 	ldrsh.w	r6, [sp, #136]	; 0x88
 8021e9e:	f8bd 7090 	ldrh.w	r7, [sp, #144]	; 0x90
 8021ea2:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 8021ea6:	f89d 90b4 	ldrb.w	r9, [sp, #180]	; 0xb4
 8021eaa:	e881 000c 	stmia.w	r1, {r2, r3}
 8021eae:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 8021eb2:	930a      	str	r3, [sp, #40]	; 0x28
 8021eb4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8021eb8:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 8021ebc:	9310      	str	r3, [sp, #64]	; 0x40
 8021ebe:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 8021ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8021ec4:	7b4b      	ldrb	r3, [r1, #13]
 8021ec6:	ea4f 1843 	mov.w	r8, r3, lsl #5
 8021eca:	f408 7080 	and.w	r0, r8, #256	; 0x100
 8021ece:	f891 8006 	ldrb.w	r8, [r1, #6]
 8021ed2:	ea58 0800 	orrs.w	r8, r8, r0
 8021ed6:	f000 815b 	beq.w	8022190 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021eda:	011b      	lsls	r3, r3, #4
 8021edc:	79c8      	ldrb	r0, [r1, #7]
 8021ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8021ee2:	4303      	orrs	r3, r0
 8021ee4:	930d      	str	r3, [sp, #52]	; 0x34
 8021ee6:	f000 8153 	beq.w	8022190 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021eea:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8021eee:	b29b      	uxth	r3, r3
 8021ef0:	2f00      	cmp	r7, #0
 8021ef2:	f000 80f3 	beq.w	80220dc <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x24c>
 8021ef6:	1aff      	subs	r7, r7, r3
 8021ef8:	b2bf      	uxth	r7, r7
 8021efa:	043d      	lsls	r5, r7, #16
 8021efc:	d502      	bpl.n	8021f04 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8021efe:	1bf6      	subs	r6, r6, r7
 8021f00:	2700      	movs	r7, #0
 8021f02:	b236      	sxth	r6, r6
 8021f04:	f9b2 1000 	ldrsh.w	r1, [r2]
 8021f08:	fa1f f588 	uxth.w	r5, r8
 8021f0c:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8021f10:	428e      	cmp	r6, r1
 8021f12:	b28b      	uxth	r3, r1
 8021f14:	bfbf      	itttt	lt
 8021f16:	18ff      	addlt	r7, r7, r3
 8021f18:	1bbe      	sublt	r6, r7, r6
 8021f1a:	b2b7      	uxthlt	r7, r6
 8021f1c:	460e      	movlt	r6, r1
 8021f1e:	8891      	ldrh	r1, [r2, #4]
 8021f20:	440b      	add	r3, r1
 8021f22:	4631      	mov	r1, r6
 8021f24:	b21b      	sxth	r3, r3
 8021f26:	930f      	str	r3, [sp, #60]	; 0x3c
 8021f28:	88d3      	ldrh	r3, [r2, #6]
 8021f2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f2c:	449a      	add	sl, r3
 8021f2e:	fa0f f38a 	sxth.w	r3, sl
 8021f32:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8021f36:	930e      	str	r3, [sp, #56]	; 0x38
 8021f38:	4bb1      	ldr	r3, [pc, #708]	; (8022200 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x370>)
 8021f3a:	f893 b000 	ldrb.w	fp, [r3]
 8021f3e:	f10b 30ff 	add.w	r0, fp, #4294967295
 8021f42:	4243      	negs	r3, r0
 8021f44:	4143      	adcs	r3, r0
 8021f46:	a814      	add	r0, sp, #80	; 0x50
 8021f48:	930c      	str	r3, [sp, #48]	; 0x30
 8021f4a:	464b      	mov	r3, r9
 8021f4c:	f7f8 fcb9 	bl	801a8c2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021f50:	4631      	mov	r1, r6
 8021f52:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 8021f56:	464b      	mov	r3, r9
 8021f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021f5a:	a814      	add	r0, sp, #80	; 0x50
 8021f5c:	f7f8 fcce 	bl	801a8fc <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021f60:	a918      	add	r1, sp, #96	; 0x60
 8021f62:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021f66:	a817      	add	r0, sp, #92	; 0x5c
 8021f68:	f7f8 fdee 	bl	801ab48 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021f6c:	f1b9 0f00 	cmp.w	r9, #0
 8021f70:	f040 80b7 	bne.w	80220e2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x252>
 8021f74:	f1bb 0f01 	cmp.w	fp, #1
 8021f78:	f040 80bb 	bne.w	80220f2 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x262>
 8021f7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021f7e:	b153      	cbz	r3, 8021f96 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x106>
 8021f80:	2508      	movs	r5, #8
 8021f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f84:	fb95 f3f3 	sdiv	r3, r5, r3
 8021f88:	1e5d      	subs	r5, r3, #1
 8021f8a:	4445      	add	r5, r8
 8021f8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8021f90:	fb15 f503 	smulbb	r5, r5, r3
 8021f94:	b2ad      	uxth	r5, r5
 8021f96:	b907      	cbnz	r7, 8021f9a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8021f98:	b16c      	cbz	r4, 8021fb6 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x126>
 8021f9a:	fb04 7305 	mla	r3, r4, r5, r7
 8021f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021fa0:	ebaa 0a04 	sub.w	sl, sl, r4
 8021fa4:	4353      	muls	r3, r2
 8021fa6:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8021fa8:	fa1f fa8a 	uxth.w	sl, sl
 8021fac:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8021fb0:	f003 0407 	and.w	r4, r3, #7
 8021fb4:	9228      	str	r2, [sp, #160]	; 0xa0
 8021fb6:	4649      	mov	r1, r9
 8021fb8:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021fba:	f7ff ff1d 	bl	8021df8 <_ZN8touchgfx8LCD32bpp9nextPixelEbNS_12TextRotationE>
 8021fbe:	4683      	mov	fp, r0
 8021fc0:	980c      	ldr	r0, [sp, #48]	; 0x30
 8021fc2:	f7ff ff3f 	bl	8021e44 <_ZN8touchgfx8LCD32bpp8nextLineEbNS_12TextRotationE>
 8021fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021fc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8021fca:	4681      	mov	r9, r0
 8021fcc:	1a9b      	subs	r3, r3, r2
 8021fce:	459a      	cmp	sl, r3
 8021fd0:	bfa8      	it	ge
 8021fd2:	469a      	movge	sl, r3
 8021fd4:	f1ba 0f00 	cmp.w	sl, #0
 8021fd8:	f340 80da 	ble.w	8022190 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021fdc:	1bf6      	subs	r6, r6, r7
 8021fde:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021fe0:	1b9e      	subs	r6, r3, r6
 8021fe2:	4546      	cmp	r6, r8
 8021fe4:	bfd4      	ite	le
 8021fe6:	ebc7 0706 	rsble	r7, r7, r6
 8021fea:	ebc7 0708 	rsbgt	r7, r7, r8
 8021fee:	2f00      	cmp	r7, #0
 8021ff0:	f340 80ce 	ble.w	8022190 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8021ff4:	1bed      	subs	r5, r5, r7
 8021ff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ff8:	436b      	muls	r3, r5
 8021ffa:	930e      	str	r3, [sp, #56]	; 0x38
 8021ffc:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8021ffe:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8022002:	0c1d      	lsrs	r5, r3, #16
 8022004:	0a1e      	lsrs	r6, r3, #8
 8022006:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 802200a:	930f      	str	r3, [sp, #60]	; 0x3c
 802200c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802200e:	2b00      	cmp	r3, #0
 8022010:	f040 80c3 	bne.w	802219a <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30a>
 8022014:	4b7b      	ldr	r3, [pc, #492]	; (8022204 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>)
 8022016:	6818      	ldr	r0, [r3, #0]
 8022018:	6803      	ldr	r3, [r0, #0]
 802201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802201c:	4798      	blx	r3
 802201e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022020:	2301      	movs	r3, #1
 8022022:	4093      	lsls	r3, r2
 8022024:	4a78      	ldr	r2, [pc, #480]	; (8022208 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>)
 8022026:	3b01      	subs	r3, #1
 8022028:	8811      	ldrh	r1, [r2, #0]
 802202a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 802202e:	b2db      	uxtb	r3, r3
 8022030:	930d      	str	r3, [sp, #52]	; 0x34
 8022032:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 8022036:	fb01 2303 	mla	r3, r1, r3, r2
 802203a:	22ff      	movs	r2, #255	; 0xff
 802203c:	990d      	ldr	r1, [sp, #52]	; 0x34
 802203e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8022042:	fb92 f2f1 	sdiv	r2, r2, r1
 8022046:	fb02 f208 	mul.w	r2, r2, r8
 802204a:	930a      	str	r3, [sp, #40]	; 0x28
 802204c:	9210      	str	r2, [sp, #64]	; 0x40
 802204e:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8022052:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022054:	fb07 9b1b 	mls	fp, r7, fp, r9
 8022058:	920c      	str	r2, [sp, #48]	; 0x30
 802205a:	fb02 f907 	mul.w	r9, r2, r7
 802205e:	b2f2      	uxtb	r2, r6
 8022060:	781b      	ldrb	r3, [r3, #0]
 8022062:	9211      	str	r2, [sp, #68]	; 0x44
 8022064:	eb09 0b8b 	add.w	fp, r9, fp, lsl #2
 8022068:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 802206a:	4123      	asrs	r3, r4
 802206c:	b2d2      	uxtb	r2, r2
 802206e:	b2db      	uxtb	r3, r3
 8022070:	9212      	str	r2, [sp, #72]	; 0x48
 8022072:	b2ea      	uxtb	r2, r5
 8022074:	9213      	str	r2, [sp, #76]	; 0x4c
 8022076:	f11a 3aff 	adds.w	sl, sl, #4294967295
 802207a:	f0c0 80d8 	bcc.w	802222e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 802207e:	46b8      	mov	r8, r7
 8022080:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8022084:	f118 38ff 	adds.w	r8, r8, #4294967295
 8022088:	f0c0 80c0 	bcc.w	802220c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
 802208c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802208e:	401a      	ands	r2, r3
 8022090:	d013      	beq.n	80220ba <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8022092:	9910      	ldr	r1, [sp, #64]	; 0x40
 8022094:	fb12 f201 	smulbb	r2, r2, r1
 8022098:	b292      	uxth	r2, r2
 802209a:	1c51      	adds	r1, r2, #1
 802209c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80220a0:	1209      	asrs	r1, r1, #8
 80220a2:	b2ce      	uxtb	r6, r1
 80220a4:	2eff      	cmp	r6, #255	; 0xff
 80220a6:	d003      	beq.n	80220b0 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x220>
 80220a8:	f8dc 5000 	ldr.w	r5, [ip]
 80220ac:	0e2a      	lsrs	r2, r5, #24
 80220ae:	d176      	bne.n	802219e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x30e>
 80220b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80220b2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80220b6:	f8cc 1000 	str.w	r1, [ip]
 80220ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80220bc:	4414      	add	r4, r2
 80220be:	b2a4      	uxth	r4, r4
 80220c0:	2c07      	cmp	r4, #7
 80220c2:	bf89      	itett	hi
 80220c4:	9a28      	ldrhi	r2, [sp, #160]	; 0xa0
 80220c6:	4113      	asrls	r3, r2
 80220c8:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 80220ca:	2400      	movhi	r4, #0
 80220cc:	bf89      	itett	hi
 80220ce:	3201      	addhi	r2, #1
 80220d0:	b2db      	uxtbls	r3, r3
 80220d2:	785b      	ldrbhi	r3, [r3, #1]
 80220d4:	9228      	strhi	r2, [sp, #160]	; 0xa0
 80220d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80220d8:	4494      	add	ip, r2
 80220da:	e7d3      	b.n	8022084 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1f4>
 80220dc:	441e      	add	r6, r3
 80220de:	b236      	sxth	r6, r6
 80220e0:	e710      	b.n	8021f04 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 80220e2:	f1b9 0f01 	cmp.w	r9, #1
 80220e6:	f47f af49 	bne.w	8021f7c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80220ea:	f1bb 0f01 	cmp.w	fp, #1
 80220ee:	f47f af45 	bne.w	8021f7c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 80220f2:	f8df b110 	ldr.w	fp, [pc, #272]	; 8022204 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 80220f6:	f8db 0000 	ldr.w	r0, [fp]
 80220fa:	6803      	ldr	r3, [r0, #0]
 80220fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80220fe:	4798      	blx	r3
 8022100:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 8022104:	465a      	mov	r2, fp
 8022106:	d006      	beq.n	8022116 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 8022108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802210a:	2b04      	cmp	r3, #4
 802210c:	d143      	bne.n	8022196 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x306>
 802210e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022110:	3300      	adds	r3, #0
 8022112:	bf18      	it	ne
 8022114:	2301      	movne	r3, #1
 8022116:	0581      	lsls	r1, r0, #22
 8022118:	f140 8092 	bpl.w	8022240 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 802211c:	9909      	ldr	r1, [sp, #36]	; 0x24
 802211e:	2908      	cmp	r1, #8
 8022120:	f040 808e 	bne.w	8022240 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
 8022124:	2b00      	cmp	r3, #0
 8022126:	bf0c      	ite	eq
 8022128:	f44f 7100 	moveq.w	r1, #512	; 0x200
 802212c:	f44f 7180 	movne.w	r1, #256	; 0x100
 8022130:	2f00      	cmp	r7, #0
 8022132:	f47f af23 	bne.w	8021f7c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8022136:	2c00      	cmp	r4, #0
 8022138:	f47f af20 	bne.w	8021f7c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 802213c:	eb08 0306 	add.w	r3, r8, r6
 8022140:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022142:	4283      	cmp	r3, r0
 8022144:	f73f af1a 	bgt.w	8021f7c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8022148:	980a      	ldr	r0, [sp, #40]	; 0x28
 802214a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802214c:	4403      	add	r3, r0
 802214e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022150:	4283      	cmp	r3, r0
 8022152:	f73f af13 	bgt.w	8021f7c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8022156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022158:	2600      	movs	r6, #0
 802215a:	6810      	ldr	r0, [r2, #0]
 802215c:	2b08      	cmp	r3, #8
 802215e:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 8022162:	6804      	ldr	r4, [r0, #0]
 8022164:	bf18      	it	ne
 8022166:	3501      	addne	r5, #1
 8022168:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 802216c:	bf18      	it	ne
 802216e:	f025 0501 	bicne.w	r5, r5, #1
 8022172:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8022176:	f89d 10b0 	ldrb.w	r1, [sp, #176]	; 0xb0
 802217a:	bf18      	it	ne
 802217c:	b2ad      	uxthne	r5, r5
 802217e:	9104      	str	r1, [sp, #16]
 8022180:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8022182:	e9cd 5a00 	strd	r5, sl, [sp]
 8022186:	e9cd 5102 	strd	r5, r1, [sp, #8]
 802218a:	9928      	ldr	r1, [sp, #160]	; 0xa0
 802218c:	6d64      	ldr	r4, [r4, #84]	; 0x54
 802218e:	47a0      	blx	r4
 8022190:	b019      	add	sp, #100	; 0x64
 8022192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022196:	2300      	movs	r3, #0
 8022198:	e7bd      	b.n	8022116 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x286>
 802219a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 802219c:	e73f      	b.n	802201e <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x18e>
 802219e:	2e00      	cmp	r6, #0
 80221a0:	d08b      	beq.n	80220ba <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 80221a2:	fb06 f102 	mul.w	r1, r6, r2
 80221a6:	9812      	ldr	r0, [sp, #72]	; 0x48
 80221a8:	f101 0e01 	add.w	lr, r1, #1
 80221ac:	eb0e 2e21 	add.w	lr, lr, r1, asr #8
 80221b0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80221b4:	eba2 090e 	sub.w	r9, r2, lr
 80221b8:	4432      	add	r2, r6
 80221ba:	eba2 020e 	sub.w	r2, r2, lr
 80221be:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 80221c2:	b2d1      	uxtb	r1, r2
 80221c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80221c6:	4372      	muls	r2, r6
 80221c8:	fb09 2e0e 	mla	lr, r9, lr, r2
 80221cc:	b2ea      	uxtb	r2, r5
 80221ce:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80221d2:	fb09 f202 	mul.w	r2, r9, r2
 80221d6:	fb06 2200 	mla	r2, r6, r0, r2
 80221da:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80221dc:	fb92 f2f1 	sdiv	r2, r2, r1
 80221e0:	4346      	muls	r6, r0
 80221e2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80221e6:	fb9e fef1 	sdiv	lr, lr, r1
 80221ea:	fb09 6505 	mla	r5, r9, r5, r6
 80221ee:	ea42 220e 	orr.w	r2, r2, lr, lsl #8
 80221f2:	fb95 f5f1 	sdiv	r5, r5, r1
 80221f6:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 80221fa:	f8cc 5000 	str.w	r5, [ip]
 80221fe:	e75c      	b.n	80220ba <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8022200:	2003c2b4 	.word	0x2003c2b4
 8022204:	2003c2bc 	.word	0x2003c2bc
 8022208:	2003c2b6 	.word	0x2003c2b6
 802220c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802220e:	b152      	cbz	r2, 8022226 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
 8022210:	4414      	add	r4, r2
 8022212:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022214:	b2a4      	uxth	r4, r4
 8022216:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 802221a:	f004 0407 	and.w	r4, r4, #7
 802221e:	9328      	str	r3, [sp, #160]	; 0xa0
 8022220:	781b      	ldrb	r3, [r3, #0]
 8022222:	4123      	asrs	r3, r4
 8022224:	b2db      	uxtb	r3, r3
 8022226:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8022228:	445a      	add	r2, fp
 802222a:	920a      	str	r2, [sp, #40]	; 0x28
 802222c:	e723      	b.n	8022076 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e6>
 802222e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8022230:	2b00      	cmp	r3, #0
 8022232:	d1ad      	bne.n	8022190 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8022234:	4b05      	ldr	r3, [pc, #20]	; (802224c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3bc>)
 8022236:	6818      	ldr	r0, [r3, #0]
 8022238:	6803      	ldr	r3, [r0, #0]
 802223a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 802223c:	4798      	blx	r3
 802223e:	e7a7      	b.n	8022190 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x300>
 8022240:	2b00      	cmp	r3, #0
 8022242:	f43f ae9b 	beq.w	8021f7c <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xec>
 8022246:	f44f 7180 	mov.w	r1, #256	; 0x100
 802224a:	e771      	b.n	8022130 <_ZN8touchgfx8LCD32bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a0>
 802224c:	2003c2bc 	.word	0x2003c2bc

08022250 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 8022250:	b538      	push	{r3, r4, r5, lr}
 8022252:	4c15      	ldr	r4, [pc, #84]	; (80222a8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 8022254:	4605      	mov	r5, r0
 8022256:	7823      	ldrb	r3, [r4, #0]
 8022258:	f3bf 8f5b 	dmb	ish
 802225c:	07da      	lsls	r2, r3, #31
 802225e:	d40b      	bmi.n	8022278 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022260:	4620      	mov	r0, r4
 8022262:	f007 fccd 	bl	8029c00 <__cxa_guard_acquire>
 8022266:	b138      	cbz	r0, 8022278 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
 8022268:	4620      	mov	r0, r4
 802226a:	f007 fcd5 	bl	8029c18 <__cxa_guard_release>
 802226e:	4a0f      	ldr	r2, [pc, #60]	; (80222ac <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022270:	490f      	ldr	r1, [pc, #60]	; (80222b0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 8022272:	4810      	ldr	r0, [pc, #64]	; (80222b4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 8022274:	f007 fcbd 	bl	8029bf2 <__aeabi_atexit>
 8022278:	4c0f      	ldr	r4, [pc, #60]	; (80222b8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 802227a:	7823      	ldrb	r3, [r4, #0]
 802227c:	f3bf 8f5b 	dmb	ish
 8022280:	07db      	lsls	r3, r3, #31
 8022282:	d40b      	bmi.n	802229c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 8022284:	4620      	mov	r0, r4
 8022286:	f007 fcbb 	bl	8029c00 <__cxa_guard_acquire>
 802228a:	b138      	cbz	r0, 802229c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
 802228c:	4620      	mov	r0, r4
 802228e:	f007 fcc3 	bl	8029c18 <__cxa_guard_release>
 8022292:	4a06      	ldr	r2, [pc, #24]	; (80222ac <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 8022294:	4909      	ldr	r1, [pc, #36]	; (80222bc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 8022296:	480a      	ldr	r0, [pc, #40]	; (80222c0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 8022298:	f007 fcab 	bl	8029bf2 <__aeabi_atexit>
 802229c:	4b05      	ldr	r3, [pc, #20]	; (80222b4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 802229e:	612b      	str	r3, [r5, #16]
 80222a0:	4b07      	ldr	r3, [pc, #28]	; (80222c0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
 80222a2:	616b      	str	r3, [r5, #20]
 80222a4:	bd38      	pop	{r3, r4, r5, pc}
 80222a6:	bf00      	nop
 80222a8:	2003c394 	.word	0x2003c394
 80222ac:	20000000 	.word	0x20000000
 80222b0:	08020b5b 	.word	0x08020b5b
 80222b4:	2000008c 	.word	0x2000008c
 80222b8:	2003c398 	.word	0x2003c398
 80222bc:	08020b59 	.word	0x08020b59
 80222c0:	20000090 	.word	0x20000090

080222c4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 80222c4:	b538      	push	{r3, r4, r5, lr}
 80222c6:	4c15      	ldr	r4, [pc, #84]	; (802231c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 80222c8:	4605      	mov	r5, r0
 80222ca:	7823      	ldrb	r3, [r4, #0]
 80222cc:	f3bf 8f5b 	dmb	ish
 80222d0:	07da      	lsls	r2, r3, #31
 80222d2:	d40b      	bmi.n	80222ec <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80222d4:	4620      	mov	r0, r4
 80222d6:	f007 fc93 	bl	8029c00 <__cxa_guard_acquire>
 80222da:	b138      	cbz	r0, 80222ec <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
 80222dc:	4620      	mov	r0, r4
 80222de:	f007 fc9b 	bl	8029c18 <__cxa_guard_release>
 80222e2:	4a0f      	ldr	r2, [pc, #60]	; (8022320 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 80222e4:	490f      	ldr	r1, [pc, #60]	; (8022324 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 80222e6:	4810      	ldr	r0, [pc, #64]	; (8022328 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 80222e8:	f007 fc83 	bl	8029bf2 <__aeabi_atexit>
 80222ec:	4c0f      	ldr	r4, [pc, #60]	; (802232c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 80222ee:	7823      	ldrb	r3, [r4, #0]
 80222f0:	f3bf 8f5b 	dmb	ish
 80222f4:	07db      	lsls	r3, r3, #31
 80222f6:	d40b      	bmi.n	8022310 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 80222f8:	4620      	mov	r0, r4
 80222fa:	f007 fc81 	bl	8029c00 <__cxa_guard_acquire>
 80222fe:	b138      	cbz	r0, 8022310 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
 8022300:	4620      	mov	r0, r4
 8022302:	f007 fc89 	bl	8029c18 <__cxa_guard_release>
 8022306:	4a06      	ldr	r2, [pc, #24]	; (8022320 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 8022308:	4909      	ldr	r1, [pc, #36]	; (8022330 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 802230a:	480a      	ldr	r0, [pc, #40]	; (8022334 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 802230c:	f007 fc71 	bl	8029bf2 <__aeabi_atexit>
 8022310:	4b05      	ldr	r3, [pc, #20]	; (8022328 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 8022312:	60ab      	str	r3, [r5, #8]
 8022314:	4b07      	ldr	r3, [pc, #28]	; (8022334 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
 8022316:	60eb      	str	r3, [r5, #12]
 8022318:	bd38      	pop	{r3, r4, r5, pc}
 802231a:	bf00      	nop
 802231c:	2003c36c 	.word	0x2003c36c
 8022320:	20000000 	.word	0x20000000
 8022324:	08020b5f 	.word	0x08020b5f
 8022328:	20000064 	.word	0x20000064
 802232c:	2003c370 	.word	0x2003c370
 8022330:	08020b5d 	.word	0x08020b5d
 8022334:	20000068 	.word	0x20000068

08022338 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>:
 8022338:	b510      	push	{r4, lr}
 802233a:	4604      	mov	r4, r0
 802233c:	f7ff ff88 	bl	8022250 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 8022340:	4620      	mov	r0, r4
 8022342:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022346:	f7ff bfbd 	b.w	80222c4 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0802234c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 802234c:	b538      	push	{r3, r4, r5, lr}
 802234e:	4c15      	ldr	r4, [pc, #84]	; (80223a4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8022350:	4605      	mov	r5, r0
 8022352:	7823      	ldrb	r3, [r4, #0]
 8022354:	f3bf 8f5b 	dmb	ish
 8022358:	07da      	lsls	r2, r3, #31
 802235a:	d40b      	bmi.n	8022374 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 802235c:	4620      	mov	r0, r4
 802235e:	f007 fc4f 	bl	8029c00 <__cxa_guard_acquire>
 8022362:	b138      	cbz	r0, 8022374 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8022364:	4620      	mov	r0, r4
 8022366:	f007 fc57 	bl	8029c18 <__cxa_guard_release>
 802236a:	4a0f      	ldr	r2, [pc, #60]	; (80223a8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 802236c:	490f      	ldr	r1, [pc, #60]	; (80223ac <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 802236e:	4810      	ldr	r0, [pc, #64]	; (80223b0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8022370:	f007 fc3f 	bl	8029bf2 <__aeabi_atexit>
 8022374:	4c0f      	ldr	r4, [pc, #60]	; (80223b4 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8022376:	7823      	ldrb	r3, [r4, #0]
 8022378:	f3bf 8f5b 	dmb	ish
 802237c:	07db      	lsls	r3, r3, #31
 802237e:	d40b      	bmi.n	8022398 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022380:	4620      	mov	r0, r4
 8022382:	f007 fc3d 	bl	8029c00 <__cxa_guard_acquire>
 8022386:	b138      	cbz	r0, 8022398 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8022388:	4620      	mov	r0, r4
 802238a:	f007 fc45 	bl	8029c18 <__cxa_guard_release>
 802238e:	4a06      	ldr	r2, [pc, #24]	; (80223a8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8022390:	4909      	ldr	r1, [pc, #36]	; (80223b8 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8022392:	480a      	ldr	r0, [pc, #40]	; (80223bc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8022394:	f007 fc2d 	bl	8029bf2 <__aeabi_atexit>
 8022398:	4b05      	ldr	r3, [pc, #20]	; (80223b0 <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 802239a:	622b      	str	r3, [r5, #32]
 802239c:	4b07      	ldr	r3, [pc, #28]	; (80223bc <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 802239e:	626b      	str	r3, [r5, #36]	; 0x24
 80223a0:	bd38      	pop	{r3, r4, r5, pc}
 80223a2:	bf00      	nop
 80223a4:	2003c39c 	.word	0x2003c39c
 80223a8:	20000000 	.word	0x20000000
 80223ac:	08020b53 	.word	0x08020b53
 80223b0:	20000094 	.word	0x20000094
 80223b4:	2003c3a0 	.word	0x2003c3a0
 80223b8:	08020b51 	.word	0x08020b51
 80223bc:	20000098 	.word	0x20000098

080223c0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 80223c0:	b538      	push	{r3, r4, r5, lr}
 80223c2:	4c15      	ldr	r4, [pc, #84]	; (8022418 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 80223c4:	4605      	mov	r5, r0
 80223c6:	7823      	ldrb	r3, [r4, #0]
 80223c8:	f3bf 8f5b 	dmb	ish
 80223cc:	07da      	lsls	r2, r3, #31
 80223ce:	d40b      	bmi.n	80223e8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80223d0:	4620      	mov	r0, r4
 80223d2:	f007 fc15 	bl	8029c00 <__cxa_guard_acquire>
 80223d6:	b138      	cbz	r0, 80223e8 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 80223d8:	4620      	mov	r0, r4
 80223da:	f007 fc1d 	bl	8029c18 <__cxa_guard_release>
 80223de:	4a0f      	ldr	r2, [pc, #60]	; (802241c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 80223e0:	490f      	ldr	r1, [pc, #60]	; (8022420 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 80223e2:	4810      	ldr	r0, [pc, #64]	; (8022424 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 80223e4:	f007 fc05 	bl	8029bf2 <__aeabi_atexit>
 80223e8:	4c0f      	ldr	r4, [pc, #60]	; (8022428 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 80223ea:	7823      	ldrb	r3, [r4, #0]
 80223ec:	f3bf 8f5b 	dmb	ish
 80223f0:	07db      	lsls	r3, r3, #31
 80223f2:	d40b      	bmi.n	802240c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80223f4:	4620      	mov	r0, r4
 80223f6:	f007 fc03 	bl	8029c00 <__cxa_guard_acquire>
 80223fa:	b138      	cbz	r0, 802240c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 80223fc:	4620      	mov	r0, r4
 80223fe:	f007 fc0b 	bl	8029c18 <__cxa_guard_release>
 8022402:	4a06      	ldr	r2, [pc, #24]	; (802241c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8022404:	4909      	ldr	r1, [pc, #36]	; (802242c <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8022406:	480a      	ldr	r0, [pc, #40]	; (8022430 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022408:	f007 fbf3 	bl	8029bf2 <__aeabi_atexit>
 802240c:	4b05      	ldr	r3, [pc, #20]	; (8022424 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 802240e:	61ab      	str	r3, [r5, #24]
 8022410:	4b07      	ldr	r3, [pc, #28]	; (8022430 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8022412:	61eb      	str	r3, [r5, #28]
 8022414:	bd38      	pop	{r3, r4, r5, pc}
 8022416:	bf00      	nop
 8022418:	2003c374 	.word	0x2003c374
 802241c:	20000000 	.word	0x20000000
 8022420:	08020b57 	.word	0x08020b57
 8022424:	2000006c 	.word	0x2000006c
 8022428:	2003c378 	.word	0x2003c378
 802242c:	08020b55 	.word	0x08020b55
 8022430:	20000070 	.word	0x20000070

08022434 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>:
 8022434:	b510      	push	{r4, lr}
 8022436:	4604      	mov	r4, r0
 8022438:	f7ff ff88 	bl	802234c <_ZN8touchgfx8LCD32bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 802243c:	4620      	mov	r0, r4
 802243e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022442:	f7ff bfbd 	b.w	80223c0 <_ZN8touchgfx8LCD32bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

08022448 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 8022448:	b538      	push	{r3, r4, r5, lr}
 802244a:	4c0b      	ldr	r4, [pc, #44]	; (8022478 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x30>)
 802244c:	4605      	mov	r5, r0
 802244e:	7823      	ldrb	r3, [r4, #0]
 8022450:	f3bf 8f5b 	dmb	ish
 8022454:	07db      	lsls	r3, r3, #31
 8022456:	d40b      	bmi.n	8022470 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022458:	4620      	mov	r0, r4
 802245a:	f007 fbd1 	bl	8029c00 <__cxa_guard_acquire>
 802245e:	b138      	cbz	r0, 8022470 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 8022460:	4620      	mov	r0, r4
 8022462:	f007 fbd9 	bl	8029c18 <__cxa_guard_release>
 8022466:	4a05      	ldr	r2, [pc, #20]	; (802247c <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x34>)
 8022468:	4905      	ldr	r1, [pc, #20]	; (8022480 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x38>)
 802246a:	4806      	ldr	r0, [pc, #24]	; (8022484 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 802246c:	f007 fbc1 	bl	8029bf2 <__aeabi_atexit>
 8022470:	4b04      	ldr	r3, [pc, #16]	; (8022484 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x3c>)
 8022472:	62eb      	str	r3, [r5, #44]	; 0x2c
 8022474:	bd38      	pop	{r3, r4, r5, pc}
 8022476:	bf00      	nop
 8022478:	2003c3ac 	.word	0x2003c3ac
 802247c:	20000000 	.word	0x20000000
 8022480:	08020b4d 	.word	0x08020b4d
 8022484:	200000a4 	.word	0x200000a4

08022488 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 8022488:	b538      	push	{r3, r4, r5, lr}
 802248a:	4c0b      	ldr	r4, [pc, #44]	; (80224b8 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x30>)
 802248c:	4605      	mov	r5, r0
 802248e:	7823      	ldrb	r3, [r4, #0]
 8022490:	f3bf 8f5b 	dmb	ish
 8022494:	07db      	lsls	r3, r3, #31
 8022496:	d40b      	bmi.n	80224b0 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 8022498:	4620      	mov	r0, r4
 802249a:	f007 fbb1 	bl	8029c00 <__cxa_guard_acquire>
 802249e:	b138      	cbz	r0, 80224b0 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 80224a0:	4620      	mov	r0, r4
 80224a2:	f007 fbb9 	bl	8029c18 <__cxa_guard_release>
 80224a6:	4a05      	ldr	r2, [pc, #20]	; (80224bc <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x34>)
 80224a8:	4905      	ldr	r1, [pc, #20]	; (80224c0 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x38>)
 80224aa:	4806      	ldr	r0, [pc, #24]	; (80224c4 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 80224ac:	f007 fba1 	bl	8029bf2 <__aeabi_atexit>
 80224b0:	4b04      	ldr	r3, [pc, #16]	; (80224c4 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x3c>)
 80224b2:	62ab      	str	r3, [r5, #40]	; 0x28
 80224b4:	bd38      	pop	{r3, r4, r5, pc}
 80224b6:	bf00      	nop
 80224b8:	2003c37c 	.word	0x2003c37c
 80224bc:	20000000 	.word	0x20000000
 80224c0:	08020b4f 	.word	0x08020b4f
 80224c4:	20000074 	.word	0x20000074

080224c8 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>:
 80224c8:	b510      	push	{r4, lr}
 80224ca:	4604      	mov	r4, r0
 80224cc:	f7ff ffbc 	bl	8022448 <_ZN8touchgfx8LCD32bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 80224d0:	4620      	mov	r0, r4
 80224d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80224d6:	f7ff bfd7 	b.w	8022488 <_ZN8touchgfx8LCD32bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

080224dc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 80224dc:	b538      	push	{r3, r4, r5, lr}
 80224de:	4c15      	ldr	r4, [pc, #84]	; (8022534 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 80224e0:	4605      	mov	r5, r0
 80224e2:	7823      	ldrb	r3, [r4, #0]
 80224e4:	f3bf 8f5b 	dmb	ish
 80224e8:	07da      	lsls	r2, r3, #31
 80224ea:	d40b      	bmi.n	8022504 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80224ec:	4620      	mov	r0, r4
 80224ee:	f007 fb87 	bl	8029c00 <__cxa_guard_acquire>
 80224f2:	b138      	cbz	r0, 8022504 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
 80224f4:	4620      	mov	r0, r4
 80224f6:	f007 fb8f 	bl	8029c18 <__cxa_guard_release>
 80224fa:	4a0f      	ldr	r2, [pc, #60]	; (8022538 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 80224fc:	490f      	ldr	r1, [pc, #60]	; (802253c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 80224fe:	4810      	ldr	r0, [pc, #64]	; (8022540 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 8022500:	f007 fb77 	bl	8029bf2 <__aeabi_atexit>
 8022504:	4c0f      	ldr	r4, [pc, #60]	; (8022544 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 8022506:	7823      	ldrb	r3, [r4, #0]
 8022508:	f3bf 8f5b 	dmb	ish
 802250c:	07db      	lsls	r3, r3, #31
 802250e:	d40b      	bmi.n	8022528 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022510:	4620      	mov	r0, r4
 8022512:	f007 fb75 	bl	8029c00 <__cxa_guard_acquire>
 8022516:	b138      	cbz	r0, 8022528 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
 8022518:	4620      	mov	r0, r4
 802251a:	f007 fb7d 	bl	8029c18 <__cxa_guard_release>
 802251e:	4a06      	ldr	r2, [pc, #24]	; (8022538 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 8022520:	4909      	ldr	r1, [pc, #36]	; (8022548 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 8022522:	480a      	ldr	r0, [pc, #40]	; (802254c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 8022524:	f007 fb65 	bl	8029bf2 <__aeabi_atexit>
 8022528:	4b05      	ldr	r3, [pc, #20]	; (8022540 <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 802252a:	64ab      	str	r3, [r5, #72]	; 0x48
 802252c:	4b07      	ldr	r3, [pc, #28]	; (802254c <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
 802252e:	64eb      	str	r3, [r5, #76]	; 0x4c
 8022530:	bd38      	pop	{r3, r4, r5, pc}
 8022532:	bf00      	nop
 8022534:	2003c3b0 	.word	0x2003c3b0
 8022538:	20000000 	.word	0x20000000
 802253c:	08020b3f 	.word	0x08020b3f
 8022540:	200000a8 	.word	0x200000a8
 8022544:	2003c3b4 	.word	0x2003c3b4
 8022548:	08020b3d 	.word	0x08020b3d
 802254c:	200000ac 	.word	0x200000ac

08022550 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 8022550:	b538      	push	{r3, r4, r5, lr}
 8022552:	4c15      	ldr	r4, [pc, #84]	; (80225a8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 8022554:	4605      	mov	r5, r0
 8022556:	7823      	ldrb	r3, [r4, #0]
 8022558:	f3bf 8f5b 	dmb	ish
 802255c:	07da      	lsls	r2, r3, #31
 802255e:	d40b      	bmi.n	8022578 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022560:	4620      	mov	r0, r4
 8022562:	f007 fb4d 	bl	8029c00 <__cxa_guard_acquire>
 8022566:	b138      	cbz	r0, 8022578 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
 8022568:	4620      	mov	r0, r4
 802256a:	f007 fb55 	bl	8029c18 <__cxa_guard_release>
 802256e:	4a0f      	ldr	r2, [pc, #60]	; (80225ac <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022570:	490f      	ldr	r1, [pc, #60]	; (80225b0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 8022572:	4810      	ldr	r0, [pc, #64]	; (80225b4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 8022574:	f007 fb3d 	bl	8029bf2 <__aeabi_atexit>
 8022578:	4c0f      	ldr	r4, [pc, #60]	; (80225b8 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 802257a:	7823      	ldrb	r3, [r4, #0]
 802257c:	f3bf 8f5b 	dmb	ish
 8022580:	07db      	lsls	r3, r3, #31
 8022582:	d40b      	bmi.n	802259c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 8022584:	4620      	mov	r0, r4
 8022586:	f007 fb3b 	bl	8029c00 <__cxa_guard_acquire>
 802258a:	b138      	cbz	r0, 802259c <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
 802258c:	4620      	mov	r0, r4
 802258e:	f007 fb43 	bl	8029c18 <__cxa_guard_release>
 8022592:	4a06      	ldr	r2, [pc, #24]	; (80225ac <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 8022594:	4909      	ldr	r1, [pc, #36]	; (80225bc <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 8022596:	480a      	ldr	r0, [pc, #40]	; (80225c0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 8022598:	f007 fb2b 	bl	8029bf2 <__aeabi_atexit>
 802259c:	4b05      	ldr	r3, [pc, #20]	; (80225b4 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 802259e:	642b      	str	r3, [r5, #64]	; 0x40
 80225a0:	4b07      	ldr	r3, [pc, #28]	; (80225c0 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
 80225a2:	646b      	str	r3, [r5, #68]	; 0x44
 80225a4:	bd38      	pop	{r3, r4, r5, pc}
 80225a6:	bf00      	nop
 80225a8:	2003c3b8 	.word	0x2003c3b8
 80225ac:	20000000 	.word	0x20000000
 80225b0:	08020b47 	.word	0x08020b47
 80225b4:	200000b0 	.word	0x200000b0
 80225b8:	2003c3bc 	.word	0x2003c3bc
 80225bc:	08020b45 	.word	0x08020b45
 80225c0:	200000b4 	.word	0x200000b4

080225c4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 80225c4:	b538      	push	{r3, r4, r5, lr}
 80225c6:	4c15      	ldr	r4, [pc, #84]	; (802261c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 80225c8:	4605      	mov	r5, r0
 80225ca:	7823      	ldrb	r3, [r4, #0]
 80225cc:	f3bf 8f5b 	dmb	ish
 80225d0:	07da      	lsls	r2, r3, #31
 80225d2:	d40b      	bmi.n	80225ec <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80225d4:	4620      	mov	r0, r4
 80225d6:	f007 fb13 	bl	8029c00 <__cxa_guard_acquire>
 80225da:	b138      	cbz	r0, 80225ec <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
 80225dc:	4620      	mov	r0, r4
 80225de:	f007 fb1b 	bl	8029c18 <__cxa_guard_release>
 80225e2:	4a0f      	ldr	r2, [pc, #60]	; (8022620 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 80225e4:	490f      	ldr	r1, [pc, #60]	; (8022624 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 80225e6:	4810      	ldr	r0, [pc, #64]	; (8022628 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 80225e8:	f007 fb03 	bl	8029bf2 <__aeabi_atexit>
 80225ec:	4c0f      	ldr	r4, [pc, #60]	; (802262c <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 80225ee:	7823      	ldrb	r3, [r4, #0]
 80225f0:	f3bf 8f5b 	dmb	ish
 80225f4:	07db      	lsls	r3, r3, #31
 80225f6:	d40b      	bmi.n	8022610 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 80225f8:	4620      	mov	r0, r4
 80225fa:	f007 fb01 	bl	8029c00 <__cxa_guard_acquire>
 80225fe:	b138      	cbz	r0, 8022610 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
 8022600:	4620      	mov	r0, r4
 8022602:	f007 fb09 	bl	8029c18 <__cxa_guard_release>
 8022606:	4a06      	ldr	r2, [pc, #24]	; (8022620 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 8022608:	4909      	ldr	r1, [pc, #36]	; (8022630 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 802260a:	480a      	ldr	r0, [pc, #40]	; (8022634 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 802260c:	f007 faf1 	bl	8029bf2 <__aeabi_atexit>
 8022610:	4b05      	ldr	r3, [pc, #20]	; (8022628 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 8022612:	63ab      	str	r3, [r5, #56]	; 0x38
 8022614:	4b07      	ldr	r3, [pc, #28]	; (8022634 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
 8022616:	63eb      	str	r3, [r5, #60]	; 0x3c
 8022618:	bd38      	pop	{r3, r4, r5, pc}
 802261a:	bf00      	nop
 802261c:	2003c388 	.word	0x2003c388
 8022620:	20000000 	.word	0x20000000
 8022624:	08020b43 	.word	0x08020b43
 8022628:	20000080 	.word	0x20000080
 802262c:	2003c38c 	.word	0x2003c38c
 8022630:	08020b41 	.word	0x08020b41
 8022634:	20000084 	.word	0x20000084

08022638 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 8022638:	b538      	push	{r3, r4, r5, lr}
 802263a:	4c15      	ldr	r4, [pc, #84]	; (8022690 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 802263c:	4605      	mov	r5, r0
 802263e:	7823      	ldrb	r3, [r4, #0]
 8022640:	f3bf 8f5b 	dmb	ish
 8022644:	07da      	lsls	r2, r3, #31
 8022646:	d40b      	bmi.n	8022660 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022648:	4620      	mov	r0, r4
 802264a:	f007 fad9 	bl	8029c00 <__cxa_guard_acquire>
 802264e:	b138      	cbz	r0, 8022660 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
 8022650:	4620      	mov	r0, r4
 8022652:	f007 fae1 	bl	8029c18 <__cxa_guard_release>
 8022656:	4a0f      	ldr	r2, [pc, #60]	; (8022694 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 8022658:	490f      	ldr	r1, [pc, #60]	; (8022698 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 802265a:	4810      	ldr	r0, [pc, #64]	; (802269c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 802265c:	f007 fac9 	bl	8029bf2 <__aeabi_atexit>
 8022660:	4c0f      	ldr	r4, [pc, #60]	; (80226a0 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 8022662:	7823      	ldrb	r3, [r4, #0]
 8022664:	f3bf 8f5b 	dmb	ish
 8022668:	07db      	lsls	r3, r3, #31
 802266a:	d40b      	bmi.n	8022684 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 802266c:	4620      	mov	r0, r4
 802266e:	f007 fac7 	bl	8029c00 <__cxa_guard_acquire>
 8022672:	b138      	cbz	r0, 8022684 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
 8022674:	4620      	mov	r0, r4
 8022676:	f007 facf 	bl	8029c18 <__cxa_guard_release>
 802267a:	4a06      	ldr	r2, [pc, #24]	; (8022694 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 802267c:	4909      	ldr	r1, [pc, #36]	; (80226a4 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 802267e:	480a      	ldr	r0, [pc, #40]	; (80226a8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 8022680:	f007 fab7 	bl	8029bf2 <__aeabi_atexit>
 8022684:	4b05      	ldr	r3, [pc, #20]	; (802269c <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 8022686:	632b      	str	r3, [r5, #48]	; 0x30
 8022688:	4b07      	ldr	r3, [pc, #28]	; (80226a8 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
 802268a:	636b      	str	r3, [r5, #52]	; 0x34
 802268c:	bd38      	pop	{r3, r4, r5, pc}
 802268e:	bf00      	nop
 8022690:	2003c3a4 	.word	0x2003c3a4
 8022694:	20000000 	.word	0x20000000
 8022698:	08020b4b 	.word	0x08020b4b
 802269c:	2000009c 	.word	0x2000009c
 80226a0:	2003c3a8 	.word	0x2003c3a8
 80226a4:	08020b49 	.word	0x08020b49
 80226a8:	200000a0 	.word	0x200000a0

080226ac <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>:
 80226ac:	b510      	push	{r4, lr}
 80226ae:	4604      	mov	r4, r0
 80226b0:	f7ff ff14 	bl	80224dc <_ZN8touchgfx8LCD32bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 80226b4:	4620      	mov	r0, r4
 80226b6:	f7ff ff85 	bl	80225c4 <_ZN8touchgfx8LCD32bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 80226ba:	4620      	mov	r0, r4
 80226bc:	f7ff ff48 	bl	8022550 <_ZN8touchgfx8LCD32bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 80226c0:	4620      	mov	r0, r4
 80226c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80226c6:	f7ff bfb7 	b.w	8022638 <_ZN8touchgfx8LCD32bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

080226cc <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 80226cc:	b538      	push	{r3, r4, r5, lr}
 80226ce:	4c15      	ldr	r4, [pc, #84]	; (8022724 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 80226d0:	4605      	mov	r5, r0
 80226d2:	7823      	ldrb	r3, [r4, #0]
 80226d4:	f3bf 8f5b 	dmb	ish
 80226d8:	07da      	lsls	r2, r3, #31
 80226da:	d40b      	bmi.n	80226f4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80226dc:	4620      	mov	r0, r4
 80226de:	f007 fa8f 	bl	8029c00 <__cxa_guard_acquire>
 80226e2:	b138      	cbz	r0, 80226f4 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 80226e4:	4620      	mov	r0, r4
 80226e6:	f007 fa97 	bl	8029c18 <__cxa_guard_release>
 80226ea:	4a0f      	ldr	r2, [pc, #60]	; (8022728 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 80226ec:	490f      	ldr	r1, [pc, #60]	; (802272c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 80226ee:	4810      	ldr	r0, [pc, #64]	; (8022730 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 80226f0:	f007 fa7f 	bl	8029bf2 <__aeabi_atexit>
 80226f4:	4c0f      	ldr	r4, [pc, #60]	; (8022734 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 80226f6:	7823      	ldrb	r3, [r4, #0]
 80226f8:	f3bf 8f5b 	dmb	ish
 80226fc:	07db      	lsls	r3, r3, #31
 80226fe:	d40b      	bmi.n	8022718 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022700:	4620      	mov	r0, r4
 8022702:	f007 fa7d 	bl	8029c00 <__cxa_guard_acquire>
 8022706:	b138      	cbz	r0, 8022718 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 8022708:	4620      	mov	r0, r4
 802270a:	f007 fa85 	bl	8029c18 <__cxa_guard_release>
 802270e:	4a06      	ldr	r2, [pc, #24]	; (8022728 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 8022710:	4909      	ldr	r1, [pc, #36]	; (8022738 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 8022712:	480a      	ldr	r0, [pc, #40]	; (802273c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 8022714:	f007 fa6d 	bl	8029bf2 <__aeabi_atexit>
 8022718:	4b05      	ldr	r3, [pc, #20]	; (8022730 <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 802271a:	65ab      	str	r3, [r5, #88]	; 0x58
 802271c:	4b07      	ldr	r3, [pc, #28]	; (802273c <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 802271e:	65eb      	str	r3, [r5, #92]	; 0x5c
 8022720:	bd38      	pop	{r3, r4, r5, pc}
 8022722:	bf00      	nop
 8022724:	2003c380 	.word	0x2003c380
 8022728:	20000000 	.word	0x20000000
 802272c:	08020b37 	.word	0x08020b37
 8022730:	20000078 	.word	0x20000078
 8022734:	2003c384 	.word	0x2003c384
 8022738:	08020b35 	.word	0x08020b35
 802273c:	2000007c 	.word	0x2000007c

08022740 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 8022740:	b538      	push	{r3, r4, r5, lr}
 8022742:	4c15      	ldr	r4, [pc, #84]	; (8022798 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 8022744:	4605      	mov	r5, r0
 8022746:	7823      	ldrb	r3, [r4, #0]
 8022748:	f3bf 8f5b 	dmb	ish
 802274c:	07da      	lsls	r2, r3, #31
 802274e:	d40b      	bmi.n	8022768 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022750:	4620      	mov	r0, r4
 8022752:	f007 fa55 	bl	8029c00 <__cxa_guard_acquire>
 8022756:	b138      	cbz	r0, 8022768 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 8022758:	4620      	mov	r0, r4
 802275a:	f007 fa5d 	bl	8029c18 <__cxa_guard_release>
 802275e:	4a0f      	ldr	r2, [pc, #60]	; (802279c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022760:	490f      	ldr	r1, [pc, #60]	; (80227a0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 8022762:	4810      	ldr	r0, [pc, #64]	; (80227a4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 8022764:	f007 fa45 	bl	8029bf2 <__aeabi_atexit>
 8022768:	4c0f      	ldr	r4, [pc, #60]	; (80227a8 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 802276a:	7823      	ldrb	r3, [r4, #0]
 802276c:	f3bf 8f5b 	dmb	ish
 8022770:	07db      	lsls	r3, r3, #31
 8022772:	d40b      	bmi.n	802278c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 8022774:	4620      	mov	r0, r4
 8022776:	f007 fa43 	bl	8029c00 <__cxa_guard_acquire>
 802277a:	b138      	cbz	r0, 802278c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 802277c:	4620      	mov	r0, r4
 802277e:	f007 fa4b 	bl	8029c18 <__cxa_guard_release>
 8022782:	4a06      	ldr	r2, [pc, #24]	; (802279c <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 8022784:	4909      	ldr	r1, [pc, #36]	; (80227ac <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 8022786:	480a      	ldr	r0, [pc, #40]	; (80227b0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022788:	f007 fa33 	bl	8029bf2 <__aeabi_atexit>
 802278c:	4b05      	ldr	r3, [pc, #20]	; (80227a4 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 802278e:	652b      	str	r3, [r5, #80]	; 0x50
 8022790:	4b07      	ldr	r3, [pc, #28]	; (80227b0 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 8022792:	656b      	str	r3, [r5, #84]	; 0x54
 8022794:	bd38      	pop	{r3, r4, r5, pc}
 8022796:	bf00      	nop
 8022798:	2003c358 	.word	0x2003c358
 802279c:	20000000 	.word	0x20000000
 80227a0:	08020b3b 	.word	0x08020b3b
 80227a4:	20000050 	.word	0x20000050
 80227a8:	2003c35c 	.word	0x2003c35c
 80227ac:	08020b39 	.word	0x08020b39
 80227b0:	20000054 	.word	0x20000054

080227b4 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>:
 80227b4:	b510      	push	{r4, lr}
 80227b6:	4604      	mov	r4, r0
 80227b8:	f7ff ff88 	bl	80226cc <_ZN8touchgfx8LCD32bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 80227bc:	4620      	mov	r0, r4
 80227be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80227c2:	f7ff bfbd 	b.w	8022740 <_ZN8touchgfx8LCD32bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

080227c8 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 80227c8:	b538      	push	{r3, r4, r5, lr}
 80227ca:	4c0b      	ldr	r4, [pc, #44]	; (80227f8 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x30>)
 80227cc:	4605      	mov	r5, r0
 80227ce:	7823      	ldrb	r3, [r4, #0]
 80227d0:	f3bf 8f5b 	dmb	ish
 80227d4:	07db      	lsls	r3, r3, #31
 80227d6:	d40b      	bmi.n	80227f0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80227d8:	4620      	mov	r0, r4
 80227da:	f007 fa11 	bl	8029c00 <__cxa_guard_acquire>
 80227de:	b138      	cbz	r0, 80227f0 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 80227e0:	4620      	mov	r0, r4
 80227e2:	f007 fa19 	bl	8029c18 <__cxa_guard_release>
 80227e6:	4a05      	ldr	r2, [pc, #20]	; (80227fc <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x34>)
 80227e8:	4905      	ldr	r1, [pc, #20]	; (8022800 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x38>)
 80227ea:	4806      	ldr	r0, [pc, #24]	; (8022804 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 80227ec:	f007 fa01 	bl	8029bf2 <__aeabi_atexit>
 80227f0:	4b04      	ldr	r3, [pc, #16]	; (8022804 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x3c>)
 80227f2:	666b      	str	r3, [r5, #100]	; 0x64
 80227f4:	bd38      	pop	{r3, r4, r5, pc}
 80227f6:	bf00      	nop
 80227f8:	2003c390 	.word	0x2003c390
 80227fc:	20000000 	.word	0x20000000
 8022800:	08020b31 	.word	0x08020b31
 8022804:	20000088 	.word	0x20000088

08022808 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 8022808:	b538      	push	{r3, r4, r5, lr}
 802280a:	4c0b      	ldr	r4, [pc, #44]	; (8022838 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x30>)
 802280c:	4605      	mov	r5, r0
 802280e:	7823      	ldrb	r3, [r4, #0]
 8022810:	f3bf 8f5b 	dmb	ish
 8022814:	07db      	lsls	r3, r3, #31
 8022816:	d40b      	bmi.n	8022830 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022818:	4620      	mov	r0, r4
 802281a:	f007 f9f1 	bl	8029c00 <__cxa_guard_acquire>
 802281e:	b138      	cbz	r0, 8022830 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 8022820:	4620      	mov	r0, r4
 8022822:	f007 f9f9 	bl	8029c18 <__cxa_guard_release>
 8022826:	4a05      	ldr	r2, [pc, #20]	; (802283c <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x34>)
 8022828:	4905      	ldr	r1, [pc, #20]	; (8022840 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x38>)
 802282a:	4806      	ldr	r0, [pc, #24]	; (8022844 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 802282c:	f007 f9e1 	bl	8029bf2 <__aeabi_atexit>
 8022830:	4b04      	ldr	r3, [pc, #16]	; (8022844 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x3c>)
 8022832:	662b      	str	r3, [r5, #96]	; 0x60
 8022834:	bd38      	pop	{r3, r4, r5, pc}
 8022836:	bf00      	nop
 8022838:	2003c368 	.word	0x2003c368
 802283c:	20000000 	.word	0x20000000
 8022840:	08020b33 	.word	0x08020b33
 8022844:	20000060 	.word	0x20000060

08022848 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>:
 8022848:	b510      	push	{r4, lr}
 802284a:	4604      	mov	r4, r0
 802284c:	f7ff ffbc 	bl	80227c8 <_ZN8touchgfx8LCD32bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 8022850:	4620      	mov	r0, r4
 8022852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022856:	f7ff bfd7 	b.w	8022808 <_ZN8touchgfx8LCD32bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0802285c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 802285c:	b538      	push	{r3, r4, r5, lr}
 802285e:	4c15      	ldr	r4, [pc, #84]	; (80228b4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 8022860:	4605      	mov	r5, r0
 8022862:	7823      	ldrb	r3, [r4, #0]
 8022864:	f3bf 8f5b 	dmb	ish
 8022868:	07da      	lsls	r2, r3, #31
 802286a:	d40b      	bmi.n	8022884 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 802286c:	4620      	mov	r0, r4
 802286e:	f007 f9c7 	bl	8029c00 <__cxa_guard_acquire>
 8022872:	b138      	cbz	r0, 8022884 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 8022874:	4620      	mov	r0, r4
 8022876:	f007 f9cf 	bl	8029c18 <__cxa_guard_release>
 802287a:	4a0f      	ldr	r2, [pc, #60]	; (80228b8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 802287c:	490f      	ldr	r1, [pc, #60]	; (80228bc <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 802287e:	4810      	ldr	r0, [pc, #64]	; (80228c0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 8022880:	f007 f9b7 	bl	8029bf2 <__aeabi_atexit>
 8022884:	4c0f      	ldr	r4, [pc, #60]	; (80228c4 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 8022886:	7823      	ldrb	r3, [r4, #0]
 8022888:	f3bf 8f5b 	dmb	ish
 802288c:	07db      	lsls	r3, r3, #31
 802288e:	d40b      	bmi.n	80228a8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022890:	4620      	mov	r0, r4
 8022892:	f007 f9b5 	bl	8029c00 <__cxa_guard_acquire>
 8022896:	b138      	cbz	r0, 80228a8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 8022898:	4620      	mov	r0, r4
 802289a:	f007 f9bd 	bl	8029c18 <__cxa_guard_release>
 802289e:	4a06      	ldr	r2, [pc, #24]	; (80228b8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 80228a0:	4909      	ldr	r1, [pc, #36]	; (80228c8 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 80228a2:	480a      	ldr	r0, [pc, #40]	; (80228cc <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80228a4:	f007 f9a5 	bl	8029bf2 <__aeabi_atexit>
 80228a8:	4b05      	ldr	r3, [pc, #20]	; (80228c0 <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 80228aa:	672b      	str	r3, [r5, #112]	; 0x70
 80228ac:	4b07      	ldr	r3, [pc, #28]	; (80228cc <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 80228ae:	676b      	str	r3, [r5, #116]	; 0x74
 80228b0:	bd38      	pop	{r3, r4, r5, pc}
 80228b2:	bf00      	nop
 80228b4:	2003c360 	.word	0x2003c360
 80228b8:	20000000 	.word	0x20000000
 80228bc:	08020b2b 	.word	0x08020b2b
 80228c0:	20000058 	.word	0x20000058
 80228c4:	2003c364 	.word	0x2003c364
 80228c8:	08020b29 	.word	0x08020b29
 80228cc:	2000005c 	.word	0x2000005c

080228d0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>:
 80228d0:	b538      	push	{r3, r4, r5, lr}
 80228d2:	4c15      	ldr	r4, [pc, #84]	; (8022928 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 80228d4:	4605      	mov	r5, r0
 80228d6:	7823      	ldrb	r3, [r4, #0]
 80228d8:	f3bf 8f5b 	dmb	ish
 80228dc:	07da      	lsls	r2, r3, #31
 80228de:	d40b      	bmi.n	80228f8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80228e0:	4620      	mov	r0, r4
 80228e2:	f007 f98d 	bl	8029c00 <__cxa_guard_acquire>
 80228e6:	b138      	cbz	r0, 80228f8 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 80228e8:	4620      	mov	r0, r4
 80228ea:	f007 f995 	bl	8029c18 <__cxa_guard_release>
 80228ee:	4a0f      	ldr	r2, [pc, #60]	; (802292c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 80228f0:	490f      	ldr	r1, [pc, #60]	; (8022930 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 80228f2:	4810      	ldr	r0, [pc, #64]	; (8022934 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 80228f4:	f007 f97d 	bl	8029bf2 <__aeabi_atexit>
 80228f8:	4c0f      	ldr	r4, [pc, #60]	; (8022938 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 80228fa:	7823      	ldrb	r3, [r4, #0]
 80228fc:	f3bf 8f5b 	dmb	ish
 8022900:	07db      	lsls	r3, r3, #31
 8022902:	d40b      	bmi.n	802291c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 8022904:	4620      	mov	r0, r4
 8022906:	f007 f97b 	bl	8029c00 <__cxa_guard_acquire>
 802290a:	b138      	cbz	r0, 802291c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 802290c:	4620      	mov	r0, r4
 802290e:	f007 f983 	bl	8029c18 <__cxa_guard_release>
 8022912:	4a06      	ldr	r2, [pc, #24]	; (802292c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 8022914:	4909      	ldr	r1, [pc, #36]	; (802293c <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 8022916:	480a      	ldr	r0, [pc, #40]	; (8022940 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022918:	f007 f96b 	bl	8029bf2 <__aeabi_atexit>
 802291c:	4b05      	ldr	r3, [pc, #20]	; (8022934 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 802291e:	66ab      	str	r3, [r5, #104]	; 0x68
 8022920:	4b07      	ldr	r3, [pc, #28]	; (8022940 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 8022922:	66eb      	str	r3, [r5, #108]	; 0x6c
 8022924:	bd38      	pop	{r3, r4, r5, pc}
 8022926:	bf00      	nop
 8022928:	2003c350 	.word	0x2003c350
 802292c:	20000000 	.word	0x20000000
 8022930:	08020b2f 	.word	0x08020b2f
 8022934:	20000048 	.word	0x20000048
 8022938:	2003c354 	.word	0x2003c354
 802293c:	08020b2d 	.word	0x08020b2d
 8022940:	2000004c 	.word	0x2000004c

08022944 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>:
 8022944:	b510      	push	{r4, lr}
 8022946:	4604      	mov	r4, r0
 8022948:	f7ff ff88 	bl	802285c <_ZN8touchgfx8LCD32bpp43enableTextureMapperA4_BilinearInterpolationEv>
 802294c:	4620      	mov	r0, r4
 802294e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022952:	f7ff bfbd 	b.w	80228d0 <_ZN8touchgfx8LCD32bpp37enableTextureMapperA4_NearestNeighborEv>

08022956 <_ZN8touchgfx8LCD32bpp22enableTextureMapperAllEv>:
 8022956:	b510      	push	{r4, lr}
 8022958:	4604      	mov	r4, r0
 802295a:	f7ff fff3 	bl	8022944 <_ZN8touchgfx8LCD32bpp21enableTextureMapperA4Ev>
 802295e:	4620      	mov	r0, r4
 8022960:	f7ff ff72 	bl	8022848 <_ZN8touchgfx8LCD32bpp27enableTextureMapperARGB8888Ev>
 8022964:	4620      	mov	r0, r4
 8022966:	f7ff fdaf 	bl	80224c8 <_ZN8touchgfx8LCD32bpp30enableTextureMapperL8_ARGB8888Ev>
 802296a:	4620      	mov	r0, r4
 802296c:	f7ff fce4 	bl	8022338 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB565Ev>
 8022970:	4620      	mov	r0, r4
 8022972:	f7ff fd5f 	bl	8022434 <_ZN8touchgfx8LCD32bpp28enableTextureMapperL8_RGB888Ev>
 8022976:	4620      	mov	r0, r4
 8022978:	f7ff fe98 	bl	80226ac <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB565Ev>
 802297c:	4620      	mov	r0, r4
 802297e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022982:	f7ff bf17 	b.w	80227b4 <_ZN8touchgfx8LCD32bpp25enableTextureMapperRGB888Ev>

08022986 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>:
 8022986:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802298a:	e9dd 680e 	ldrd	r6, r8, [sp, #56]	; 0x38
 802298e:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 8022992:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 8022996:	f1b8 0f00 	cmp.w	r8, #0
 802299a:	fb08 640e 	mla	r4, r8, lr, r6
 802299e:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 80229a2:	9001      	str	r0, [sp, #4]
 80229a4:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
 80229a8:	eb02 0a04 	add.w	sl, r2, r4
 80229ac:	f89d 7048 	ldrb.w	r7, [sp, #72]	; 0x48
 80229b0:	6808      	ldr	r0, [r1, #0]
 80229b2:	f2c0 80dc 	blt.w	8022b6e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 80229b6:	45c3      	cmp	fp, r8
 80229b8:	f340 80d9 	ble.w	8022b6e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e8>
 80229bc:	2e00      	cmp	r6, #0
 80229be:	f2c0 80d4 	blt.w	8022b6a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 80229c2:	45b6      	cmp	lr, r6
 80229c4:	f340 80d1 	ble.w	8022b6a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1e4>
 80229c8:	5d12      	ldrb	r2, [r2, r4]
 80229ca:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 80229ce:	ea4f 222c 	mov.w	r2, ip, asr #8
 80229d2:	ea4f 04ec 	mov.w	r4, ip, asr #3
 80229d6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80229da:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80229de:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80229e2:	ea42 1952 	orr.w	r9, r2, r2, lsr #5
 80229e6:	ea44 1294 	orr.w	r2, r4, r4, lsr #6
 80229ea:	fa5f fc8c 	uxtb.w	ip, ip
 80229ee:	0212      	lsls	r2, r2, #8
 80229f0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80229f4:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80229f8:	ea42 020c 	orr.w	r2, r2, ip
 80229fc:	1c74      	adds	r4, r6, #1
 80229fe:	f100 80b7 	bmi.w	8022b70 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8022a02:	45a6      	cmp	lr, r4
 8022a04:	f340 80b4 	ble.w	8022b70 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8022a08:	2d00      	cmp	r5, #0
 8022a0a:	f000 80b1 	beq.w	8022b70 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ea>
 8022a0e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 8022a12:	f833 c014 	ldrh.w	ip, [r3, r4, lsl #1]
 8022a16:	ea4f 04ec 	mov.w	r4, ip, asr #3
 8022a1a:	ea4f 292c 	mov.w	r9, ip, asr #8
 8022a1e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022a22:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8022a26:	f009 09f8 	and.w	r9, r9, #248	; 0xf8
 8022a2a:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022a2e:	fa5f fc8c 	uxtb.w	ip, ip
 8022a32:	ea49 1959 	orr.w	r9, r9, r9, lsr #5
 8022a36:	0224      	lsls	r4, r4, #8
 8022a38:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8022a3c:	ea44 4909 	orr.w	r9, r4, r9, lsl #16
 8022a40:	ea49 090c 	orr.w	r9, r9, ip
 8022a44:	f118 0801 	adds.w	r8, r8, #1
 8022a48:	f100 8096 	bmi.w	8022b78 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 8022a4c:	45c3      	cmp	fp, r8
 8022a4e:	f340 8093 	ble.w	8022b78 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 8022a52:	9c01      	ldr	r4, [sp, #4]
 8022a54:	2c00      	cmp	r4, #0
 8022a56:	f000 808f 	beq.w	8022b78 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f2>
 8022a5a:	2e00      	cmp	r6, #0
 8022a5c:	f2c0 808a 	blt.w	8022b74 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 8022a60:	45b6      	cmp	lr, r6
 8022a62:	f340 8087 	ble.w	8022b74 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1ee>
 8022a66:	f81a 400e 	ldrb.w	r4, [sl, lr]
 8022a6a:	f833 4014 	ldrh.w	r4, [r3, r4, lsl #1]
 8022a6e:	ea4f 2824 	mov.w	r8, r4, asr #8
 8022a72:	ea4f 0ce4 	mov.w	ip, r4, asr #3
 8022a76:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8022a7a:	00e4      	lsls	r4, r4, #3
 8022a7c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8022a80:	ea48 1b58 	orr.w	fp, r8, r8, lsr #5
 8022a84:	ea4c 189c 	orr.w	r8, ip, ip, lsr #6
 8022a88:	b2e4      	uxtb	r4, r4
 8022a8a:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8022a8e:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8022a92:	ea48 480b 	orr.w	r8, r8, fp, lsl #16
 8022a96:	ea48 0804 	orr.w	r8, r8, r4
 8022a9a:	3601      	adds	r6, #1
 8022a9c:	d419      	bmi.n	8022ad2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8022a9e:	45b6      	cmp	lr, r6
 8022aa0:	dd17      	ble.n	8022ad2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8022aa2:	b1b5      	cbz	r5, 8022ad2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8022aa4:	44d6      	add	lr, sl
 8022aa6:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8022aaa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8022aae:	10dc      	asrs	r4, r3, #3
 8022ab0:	1218      	asrs	r0, r3, #8
 8022ab2:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 8022ab6:	00db      	lsls	r3, r3, #3
 8022ab8:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8022abc:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 8022ac0:	ea40 1650 	orr.w	r6, r0, r0, lsr #5
 8022ac4:	b2db      	uxtb	r3, r3
 8022ac6:	0220      	lsls	r0, r4, #8
 8022ac8:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022acc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8022ad0:	4318      	orrs	r0, r3
 8022ad2:	b2ad      	uxth	r5, r5
 8022ad4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8022ad8:	f002 16ff 	and.w	r6, r2, #16711935	; 0xff00ff
 8022adc:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8022ae0:	fb05 fa03 	mul.w	sl, r5, r3
 8022ae4:	012d      	lsls	r5, r5, #4
 8022ae6:	2fff      	cmp	r7, #255	; 0xff
 8022ae8:	ebca 1303 	rsb	r3, sl, r3, lsl #4
 8022aec:	f5c5 7b80 	rsb	fp, r5, #256	; 0x100
 8022af0:	eba5 050a 	sub.w	r5, r5, sl
 8022af4:	fa1f fe83 	uxth.w	lr, r3
 8022af8:	f009 13ff 	and.w	r3, r9, #16711935	; 0xff00ff
 8022afc:	b2ad      	uxth	r5, r5
 8022afe:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8022b02:	ebab 0b0e 	sub.w	fp, fp, lr
 8022b06:	fb05 f303 	mul.w	r3, r5, r3
 8022b0a:	fa1f fb8b 	uxth.w	fp, fp
 8022b0e:	fb05 f509 	mul.w	r5, r5, r9
 8022b12:	fb0b 3606 	mla	r6, fp, r6, r3
 8022b16:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8022b1a:	fb0b 5502 	mla	r5, fp, r2, r5
 8022b1e:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8022b22:	fb0a 6603 	mla	r6, sl, r3, r6
 8022b26:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 8022b2a:	fb0a 5000 	mla	r0, sl, r0, r5
 8022b2e:	fb0e 6303 	mla	r3, lr, r3, r6
 8022b32:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8022b36:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8022b3a:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 8022b3e:	fb0e 0303 	mla	r3, lr, r3, r0
 8022b42:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8022b46:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8022b4a:	ea43 0306 	orr.w	r3, r3, r6
 8022b4e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8022b52:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8022b56:	b2d4      	uxtb	r4, r2
 8022b58:	b2c5      	uxtb	r5, r0
 8022b5a:	d10f      	bne.n	8022b7c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1f6>
 8022b5c:	700b      	strb	r3, [r1, #0]
 8022b5e:	7048      	strb	r0, [r1, #1]
 8022b60:	708a      	strb	r2, [r1, #2]
 8022b62:	70cf      	strb	r7, [r1, #3]
 8022b64:	b003      	add	sp, #12
 8022b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022b6a:	4602      	mov	r2, r0
 8022b6c:	e746      	b.n	80229fc <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x76>
 8022b6e:	4602      	mov	r2, r0
 8022b70:	4681      	mov	r9, r0
 8022b72:	e767      	b.n	8022a44 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0xbe>
 8022b74:	4680      	mov	r8, r0
 8022b76:	e790      	b.n	8022a9a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x114>
 8022b78:	4680      	mov	r8, r0
 8022b7a:	e7aa      	b.n	8022ad2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x14c>
 8022b7c:	2f00      	cmp	r7, #0
 8022b7e:	d0f1      	beq.n	8022b64 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>
 8022b80:	78ce      	ldrb	r6, [r1, #3]
 8022b82:	b2db      	uxtb	r3, r3
 8022b84:	fb17 f505 	smulbb	r5, r7, r5
 8022b88:	fb07 f206 	mul.w	r2, r7, r6
 8022b8c:	1c50      	adds	r0, r2, #1
 8022b8e:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8022b92:	19ba      	adds	r2, r7, r6
 8022b94:	1200      	asrs	r0, r0, #8
 8022b96:	1a12      	subs	r2, r2, r0
 8022b98:	1a30      	subs	r0, r6, r0
 8022b9a:	780e      	ldrb	r6, [r1, #0]
 8022b9c:	b2d2      	uxtb	r2, r2
 8022b9e:	4346      	muls	r6, r0
 8022ba0:	70ca      	strb	r2, [r1, #3]
 8022ba2:	fb07 6303 	mla	r3, r7, r3, r6
 8022ba6:	fb17 f704 	smulbb	r7, r7, r4
 8022baa:	fb93 f3f2 	sdiv	r3, r3, r2
 8022bae:	700b      	strb	r3, [r1, #0]
 8022bb0:	784b      	ldrb	r3, [r1, #1]
 8022bb2:	fb00 5303 	mla	r3, r0, r3, r5
 8022bb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8022bba:	704b      	strb	r3, [r1, #1]
 8022bbc:	788b      	ldrb	r3, [r1, #2]
 8022bbe:	fb00 7703 	mla	r7, r0, r3, r7
 8022bc2:	fb97 f7f2 	sdiv	r7, r7, r2
 8022bc6:	708f      	strb	r7, [r1, #2]
 8022bc8:	e7cc      	b.n	8022b64 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh+0x1de>

08022bca <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022bca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022bce:	b097      	sub	sp, #92	; 0x5c
 8022bd0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8022bd4:	9213      	str	r2, [sp, #76]	; 0x4c
 8022bd6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8022bd8:	9014      	str	r0, [sp, #80]	; 0x50
 8022bda:	910c      	str	r1, [sp, #48]	; 0x30
 8022bdc:	6850      	ldr	r0, [r2, #4]
 8022bde:	9309      	str	r3, [sp, #36]	; 0x24
 8022be0:	6812      	ldr	r2, [r2, #0]
 8022be2:	f89d 40a4 	ldrb.w	r4, [sp, #164]	; 0xa4
 8022be6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8022bea:	e9dd a621 	ldrd	sl, r6, [sp, #132]	; 0x84
 8022bee:	fb00 1303 	mla	r3, r0, r3, r1
 8022bf2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8022bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8022bf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022bfa:	681b      	ldr	r3, [r3, #0]
 8022bfc:	930b      	str	r3, [sp, #44]	; 0x2c
 8022bfe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c00:	685f      	ldr	r7, [r3, #4]
 8022c02:	3704      	adds	r7, #4
 8022c04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022c06:	2b00      	cmp	r3, #0
 8022c08:	dc03      	bgt.n	8022c12 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8022c0a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8022c0c:	2b00      	cmp	r3, #0
 8022c0e:	f340 826a 	ble.w	80230e6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8022c12:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c14:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c18:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022c1c:	1e48      	subs	r0, r1, #1
 8022c1e:	f102 3cff 	add.w	ip, r2, #4294967295
 8022c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022c24:	2b00      	cmp	r3, #0
 8022c26:	f340 80ce 	ble.w	8022dc6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8022c2a:	ea5f 4e2a 	movs.w	lr, sl, asr #16
 8022c2e:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c32:	d406      	bmi.n	8022c42 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022c34:	4586      	cmp	lr, r0
 8022c36:	da04      	bge.n	8022c42 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022c38:	2b00      	cmp	r3, #0
 8022c3a:	db02      	blt.n	8022c42 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8022c3c:	4563      	cmp	r3, ip
 8022c3e:	f2c0 80c3 	blt.w	8022dc8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8022c42:	f11e 0e01 	adds.w	lr, lr, #1
 8022c46:	f100 80b3 	bmi.w	8022db0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022c4a:	4571      	cmp	r1, lr
 8022c4c:	f2c0 80b0 	blt.w	8022db0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022c50:	3301      	adds	r3, #1
 8022c52:	f100 80ad 	bmi.w	8022db0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022c56:	429a      	cmp	r2, r3
 8022c58:	f2c0 80aa 	blt.w	8022db0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8022c5c:	e9dd b809 	ldrd	fp, r8, [sp, #36]	; 0x24
 8022c60:	f1bb 0f00 	cmp.w	fp, #0
 8022c64:	f340 80ce 	ble.w	8022e04 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8022c68:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022c6a:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022c6e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8022c70:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8022c74:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022c78:	ea5f 422a 	movs.w	r2, sl, asr #16
 8022c7c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8022c80:	689b      	ldr	r3, [r3, #8]
 8022c82:	f100 8141 	bmi.w	8022f08 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022c86:	f103 39ff 	add.w	r9, r3, #4294967295
 8022c8a:	454a      	cmp	r2, r9
 8022c8c:	f280 813c 	bge.w	8022f08 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022c90:	f1bc 0f00 	cmp.w	ip, #0
 8022c94:	f2c0 8138 	blt.w	8022f08 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022c98:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022c9c:	45cc      	cmp	ip, r9
 8022c9e:	f280 8133 	bge.w	8022f08 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 8022ca2:	b21b      	sxth	r3, r3
 8022ca4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022ca6:	fb0c 2203 	mla	r2, ip, r3, r2
 8022caa:	eb05 0902 	add.w	r9, r5, r2
 8022cae:	5caa      	ldrb	r2, [r5, r2]
 8022cb0:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8022cb4:	2800      	cmp	r0, #0
 8022cb6:	f000 80e9 	beq.w	8022e8c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c2>
 8022cba:	f899 2001 	ldrb.w	r2, [r9, #1]
 8022cbe:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022cc2:	920f      	str	r2, [sp, #60]	; 0x3c
 8022cc4:	b151      	cbz	r1, 8022cdc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022cc6:	eb09 0203 	add.w	r2, r9, r3
 8022cca:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022cce:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022cd2:	930d      	str	r3, [sp, #52]	; 0x34
 8022cd4:	7853      	ldrb	r3, [r2, #1]
 8022cd6:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022cda:	9310      	str	r3, [sp, #64]	; 0x40
 8022cdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8022cde:	fb10 f201 	smulbb	r2, r0, r1
 8022ce2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8022ce4:	2cff      	cmp	r4, #255	; 0xff
 8022ce6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 8022cea:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022cee:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8022cf2:	ea4f 02e2 	mov.w	r2, r2, asr #3
 8022cf6:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022cfa:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 8022cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8022d02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8022d04:	ea4f 4303 	mov.w	r3, r3, lsl #16
 8022d08:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 8022d0c:	ea43 0305 	orr.w	r3, r3, r5
 8022d10:	fb02 f303 	mul.w	r3, r2, r3
 8022d14:	fb09 330c 	mla	r3, r9, ip, r3
 8022d18:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 8022d1c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8022d20:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 8022d24:	ea4c 0e0e 	orr.w	lr, ip, lr
 8022d28:	f1c1 0c10 	rsb	ip, r1, #16
 8022d2c:	ebac 0c00 	sub.w	ip, ip, r0
 8022d30:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8022d34:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8022d38:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8022d3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8022d3e:	ea4f 4003 	mov.w	r0, r3, lsl #16
 8022d42:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8022d46:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8022d4a:	ea40 0003 	orr.w	r0, r0, r3
 8022d4e:	fb02 c200 	mla	r2, r2, r0, ip
 8022d52:	ea4f 5352 	mov.w	r3, r2, lsr #21
 8022d56:	ea4f 1252 	mov.w	r2, r2, lsr #5
 8022d5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8022d5e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022d62:	ea42 0203 	orr.w	r2, r2, r3
 8022d66:	b293      	uxth	r3, r2
 8022d68:	ea4f 2223 	mov.w	r2, r3, asr #8
 8022d6c:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8022d70:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8022d74:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8022d78:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8022d7c:	b2db      	uxtb	r3, r3
 8022d7e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8022d82:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 8022d86:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8022d8a:	f040 8088 	bne.w	8022e9e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8022d8e:	f888 3000 	strb.w	r3, [r8]
 8022d92:	f888 1001 	strb.w	r1, [r8, #1]
 8022d96:	f888 2002 	strb.w	r2, [r8, #2]
 8022d9a:	f888 4003 	strb.w	r4, [r8, #3]
 8022d9e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022da0:	f108 0804 	add.w	r8, r8, #4
 8022da4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022da8:	449a      	add	sl, r3
 8022daa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022dac:	441e      	add	r6, r3
 8022dae:	e757      	b.n	8022c60 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8022db0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8022db2:	449a      	add	sl, r3
 8022db4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8022db6:	441e      	add	r6, r3
 8022db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dba:	3b01      	subs	r3, #1
 8022dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8022dbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022dc0:	3304      	adds	r3, #4
 8022dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8022dc4:	e72d      	b.n	8022c22 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8022dc6:	d024      	beq.n	8022e12 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8022dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022dca:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8022dcc:	3b01      	subs	r3, #1
 8022dce:	fb00 a003 	mla	r0, r0, r3, sl
 8022dd2:	1400      	asrs	r0, r0, #16
 8022dd4:	f53f af42 	bmi.w	8022c5c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022dd8:	3901      	subs	r1, #1
 8022dda:	4288      	cmp	r0, r1
 8022ddc:	f6bf af3e 	bge.w	8022c5c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022de0:	9924      	ldr	r1, [sp, #144]	; 0x90
 8022de2:	fb01 6303 	mla	r3, r1, r3, r6
 8022de6:	141b      	asrs	r3, r3, #16
 8022de8:	f53f af38 	bmi.w	8022c5c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022dec:	3a01      	subs	r2, #1
 8022dee:	4293      	cmp	r3, r2
 8022df0:	f6bf af34 	bge.w	8022c5c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8022df4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022df6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8022dfa:	3304      	adds	r3, #4
 8022dfc:	f1b9 0f00 	cmp.w	r9, #0
 8022e00:	f300 80a1 	bgt.w	8022f46 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 8022e04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022e06:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8022e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022e0c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8022e10:	930a      	str	r3, [sp, #40]	; 0x28
 8022e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e14:	2b00      	cmp	r3, #0
 8022e16:	f340 8166 	ble.w	80230e6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x51c>
 8022e1a:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022e1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e20:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022e24:	eeb0 6a62 	vmov.f32	s12, s5
 8022e28:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8022e2c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022e30:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022e34:	ee16 aa10 	vmov	sl, s12
 8022e38:	eeb0 6a43 	vmov.f32	s12, s6
 8022e3c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8022e40:	ee16 6a10 	vmov	r6, s12
 8022e44:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022e48:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022e4c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022e50:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022e54:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022e58:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022e5c:	ee12 2a90 	vmov	r2, s5
 8022e60:	eef0 2a47 	vmov.f32	s5, s14
 8022e64:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e68:	ee13 2a10 	vmov	r2, s6
 8022e6c:	9323      	str	r3, [sp, #140]	; 0x8c
 8022e6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e70:	eeb0 3a67 	vmov.f32	s6, s15
 8022e74:	fb92 f3f3 	sdiv	r3, r2, r3
 8022e78:	9324      	str	r3, [sp, #144]	; 0x90
 8022e7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8022e7c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8022e7e:	3b01      	subs	r3, #1
 8022e80:	930c      	str	r3, [sp, #48]	; 0x30
 8022e82:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8022e84:	bf08      	it	eq
 8022e86:	4613      	moveq	r3, r2
 8022e88:	9309      	str	r3, [sp, #36]	; 0x24
 8022e8a:	e6bb      	b.n	8022c04 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8022e8c:	2900      	cmp	r1, #0
 8022e8e:	f43f af25 	beq.w	8022cdc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022e92:	f819 3003 	ldrb.w	r3, [r9, r3]
 8022e96:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8022e9a:	930d      	str	r3, [sp, #52]	; 0x34
 8022e9c:	e71e      	b.n	8022cdc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022e9e:	2c00      	cmp	r4, #0
 8022ea0:	f43f af7d 	beq.w	8022d9e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022ea4:	f898 e003 	ldrb.w	lr, [r8, #3]
 8022ea8:	fb13 f304 	smulbb	r3, r3, r4
 8022eac:	fb14 f101 	smulbb	r1, r4, r1
 8022eb0:	fb14 f202 	smulbb	r2, r4, r2
 8022eb4:	fb04 fc0e 	mul.w	ip, r4, lr
 8022eb8:	f10c 0001 	add.w	r0, ip, #1
 8022ebc:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8022ec0:	eb04 0c0e 	add.w	ip, r4, lr
 8022ec4:	1200      	asrs	r0, r0, #8
 8022ec6:	ebac 0c00 	sub.w	ip, ip, r0
 8022eca:	ebae 0000 	sub.w	r0, lr, r0
 8022ece:	f898 e000 	ldrb.w	lr, [r8]
 8022ed2:	fa5f fc8c 	uxtb.w	ip, ip
 8022ed6:	fb00 330e 	mla	r3, r0, lr, r3
 8022eda:	f888 c003 	strb.w	ip, [r8, #3]
 8022ede:	fb93 f3fc 	sdiv	r3, r3, ip
 8022ee2:	f888 3000 	strb.w	r3, [r8]
 8022ee6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8022eea:	fb00 1103 	mla	r1, r0, r3, r1
 8022eee:	f898 3002 	ldrb.w	r3, [r8, #2]
 8022ef2:	fb00 2003 	mla	r0, r0, r3, r2
 8022ef6:	fb91 f1fc 	sdiv	r1, r1, ip
 8022efa:	fb90 f0fc 	sdiv	r0, r0, ip
 8022efe:	f888 1001 	strb.w	r1, [r8, #1]
 8022f02:	f888 0002 	strb.w	r0, [r8, #2]
 8022f06:	e74a      	b.n	8022d9e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022f08:	f112 0901 	adds.w	r9, r2, #1
 8022f0c:	f53f af47 	bmi.w	8022d9e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022f10:	454b      	cmp	r3, r9
 8022f12:	f6ff af44 	blt.w	8022d9e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022f16:	f11c 0901 	adds.w	r9, ip, #1
 8022f1a:	f53f af40 	bmi.w	8022d9e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022f1e:	45ce      	cmp	lr, r9
 8022f20:	f6ff af3d 	blt.w	8022d9e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022f24:	9202      	str	r2, [sp, #8]
 8022f26:	b21b      	sxth	r3, r3
 8022f28:	fa0f f28e 	sxth.w	r2, lr
 8022f2c:	9300      	str	r3, [sp, #0]
 8022f2e:	463b      	mov	r3, r7
 8022f30:	9201      	str	r2, [sp, #4]
 8022f32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8022f34:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8022f38:	e9cd c003 	strd	ip, r0, [sp, #12]
 8022f3c:	4641      	mov	r1, r8
 8022f3e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8022f40:	f7ff fd21 	bl	8022986 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKtssiihhh>
 8022f44:	e72b      	b.n	8022d9e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8022f46:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8022f48:	ea4f 412a 	mov.w	r1, sl, asr #16
 8022f4c:	1430      	asrs	r0, r6, #16
 8022f4e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8022f50:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8022f54:	f3ca 3803 	ubfx	r8, sl, #12, #4
 8022f58:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022f5c:	fb02 1000 	mla	r0, r2, r0, r1
 8022f60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8022f62:	4401      	add	r1, r0
 8022f64:	5c28      	ldrb	r0, [r5, r0]
 8022f66:	f837 0010 	ldrh.w	r0, [r7, r0, lsl #1]
 8022f6a:	f1b8 0f00 	cmp.w	r8, #0
 8022f6e:	d07d      	beq.n	802306c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a2>
 8022f70:	f891 e001 	ldrb.w	lr, [r1, #1]
 8022f74:	f837 501e 	ldrh.w	r5, [r7, lr, lsl #1]
 8022f78:	9511      	str	r5, [sp, #68]	; 0x44
 8022f7a:	f1bc 0f00 	cmp.w	ip, #0
 8022f7e:	d00a      	beq.n	8022f96 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8022f80:	eb01 0e02 	add.w	lr, r1, r2
 8022f84:	5c8a      	ldrb	r2, [r1, r2]
 8022f86:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022f8a:	920e      	str	r2, [sp, #56]	; 0x38
 8022f8c:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8022f90:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8022f94:	9212      	str	r2, [sp, #72]	; 0x48
 8022f96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8022f98:	fb18 f10c 	smulbb	r1, r8, ip
 8022f9c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8022f9e:	2cff      	cmp	r4, #255	; 0xff
 8022fa0:	ea4f 4e02 	mov.w	lr, r2, lsl #16
 8022fa4:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8022fa8:	ea4f 01e1 	mov.w	r1, r1, asr #3
 8022fac:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 8022fb0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8022fb4:	ea4e 0e02 	orr.w	lr, lr, r2
 8022fb8:	ebc1 0248 	rsb	r2, r1, r8, lsl #1
 8022fbc:	9215      	str	r2, [sp, #84]	; 0x54
 8022fbe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8022fc0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8022fc2:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8022fc6:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8022fca:	ea42 020b 	orr.w	r2, r2, fp
 8022fce:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8022fd2:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8022fd6:	fb01 f202 	mul.w	r2, r1, r2
 8022fda:	fb05 2e0e 	mla	lr, r5, lr, r2
 8022fde:	f00b 62fc 	and.w	r2, fp, #132120576	; 0x7e00000
 8022fe2:	ea42 0b00 	orr.w	fp, r2, r0
 8022fe6:	f1cc 0010 	rsb	r0, ip, #16
 8022fea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8022fec:	eba0 0808 	sub.w	r8, r0, r8
 8022ff0:	eb01 0848 	add.w	r8, r1, r8, lsl #1
 8022ff4:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
 8022ff8:	fb08 ee0b 	mla	lr, r8, fp, lr
 8022ffc:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8023000:	f422 68fc 	bic.w	r8, r2, #2016	; 0x7e0
 8023004:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023008:	ea4b 0808 	orr.w	r8, fp, r8
 802300c:	fb01 ee08 	mla	lr, r1, r8, lr
 8023010:	ea4f 525e 	mov.w	r2, lr, lsr #21
 8023014:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8023018:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802301c:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8023020:	ea42 0e0e 	orr.w	lr, r2, lr
 8023024:	fa1f f28e 	uxth.w	r2, lr
 8023028:	ea4f 2122 	mov.w	r1, r2, asr #8
 802302c:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8023030:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8023034:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023038:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802303c:	b2d2      	uxtb	r2, r2
 802303e:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8023042:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8023046:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802304a:	d117      	bne.n	802307c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b2>
 802304c:	f803 2c04 	strb.w	r2, [r3, #-4]
 8023050:	f803 0c03 	strb.w	r0, [r3, #-3]
 8023054:	f803 1c02 	strb.w	r1, [r3, #-2]
 8023058:	f803 4c01 	strb.w	r4, [r3, #-1]
 802305c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802305e:	3304      	adds	r3, #4
 8023060:	f109 39ff 	add.w	r9, r9, #4294967295
 8023064:	4492      	add	sl, r2
 8023066:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8023068:	4416      	add	r6, r2
 802306a:	e6c7      	b.n	8022dfc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 802306c:	f1bc 0f00 	cmp.w	ip, #0
 8023070:	d091      	beq.n	8022f96 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 8023072:	5c8a      	ldrb	r2, [r1, r2]
 8023074:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 8023078:	920e      	str	r2, [sp, #56]	; 0x38
 802307a:	e78c      	b.n	8022f96 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 802307c:	2c00      	cmp	r4, #0
 802307e:	d0ed      	beq.n	802305c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 8023080:	f813 8c01 	ldrb.w	r8, [r3, #-1]
 8023084:	fb12 f204 	smulbb	r2, r2, r4
 8023088:	fb14 f000 	smulbb	r0, r4, r0
 802308c:	fb14 f101 	smulbb	r1, r4, r1
 8023090:	fb04 fc08 	mul.w	ip, r4, r8
 8023094:	f10c 0e01 	add.w	lr, ip, #1
 8023098:	eb0e 2e1c 	add.w	lr, lr, ip, lsr #8
 802309c:	eb04 0c08 	add.w	ip, r4, r8
 80230a0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80230a4:	ebac 0c0e 	sub.w	ip, ip, lr
 80230a8:	eba8 0e0e 	sub.w	lr, r8, lr
 80230ac:	f813 8c04 	ldrb.w	r8, [r3, #-4]
 80230b0:	fa5f fc8c 	uxtb.w	ip, ip
 80230b4:	fb0e 2208 	mla	r2, lr, r8, r2
 80230b8:	f803 cc01 	strb.w	ip, [r3, #-1]
 80230bc:	fb92 f2fc 	sdiv	r2, r2, ip
 80230c0:	f803 2c04 	strb.w	r2, [r3, #-4]
 80230c4:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80230c8:	fb0e 0002 	mla	r0, lr, r2, r0
 80230cc:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 80230d0:	fb0e 1e02 	mla	lr, lr, r2, r1
 80230d4:	fb90 f0fc 	sdiv	r0, r0, ip
 80230d8:	fb9e fefc 	sdiv	lr, lr, ip
 80230dc:	f803 0c03 	strb.w	r0, [r3, #-3]
 80230e0:	f803 ec02 	strb.w	lr, [r3, #-2]
 80230e4:	e7ba      	b.n	802305c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x492>
 80230e6:	b017      	add	sp, #92	; 0x5c
 80230e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080230ec <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>:
 80230ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80230f0:	e9dd 7e0b 	ldrd	r7, lr, [sp, #44]	; 0x2c
 80230f4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80230f8:	f1be 0f00 	cmp.w	lr, #0
 80230fc:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8023100:	fb0e 7409 	mla	r4, lr, r9, r7
 8023104:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8023108:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 802310c:	eb02 0a04 	add.w	sl, r2, r4
 8023110:	6808      	ldr	r0, [r1, #0]
 8023112:	f2c0 80c5 	blt.w	80232a0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 8023116:	45f0      	cmp	r8, lr
 8023118:	f340 80c2 	ble.w	80232a0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b4>
 802311c:	2f00      	cmp	r7, #0
 802311e:	f2c0 80bd 	blt.w	802329c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8023122:	45b9      	cmp	r9, r7
 8023124:	f340 80ba 	ble.w	802329c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1b0>
 8023128:	5d12      	ldrb	r2, [r2, r4]
 802312a:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 802312e:	122c      	asrs	r4, r5, #8
 8023130:	10ea      	asrs	r2, r5, #3
 8023132:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8023136:	00ed      	lsls	r5, r5, #3
 8023138:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802313c:	ea44 1b54 	orr.w	fp, r4, r4, lsr #5
 8023140:	ea42 1492 	orr.w	r4, r2, r2, lsr #6
 8023144:	b2ed      	uxtb	r5, r5
 8023146:	0224      	lsls	r4, r4, #8
 8023148:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802314c:	ea44 440b 	orr.w	r4, r4, fp, lsl #16
 8023150:	432c      	orrs	r4, r5
 8023152:	1c7a      	adds	r2, r7, #1
 8023154:	f100 80a7 	bmi.w	80232a6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8023158:	4591      	cmp	r9, r2
 802315a:	f340 80a4 	ble.w	80232a6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 802315e:	2e00      	cmp	r6, #0
 8023160:	f000 80a1 	beq.w	80232a6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1ba>
 8023164:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8023168:	f833 b012 	ldrh.w	fp, [r3, r2, lsl #1]
 802316c:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8023170:	ea4f 252b 	mov.w	r5, fp, asr #8
 8023174:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8023178:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 802317c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8023180:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8023184:	fa5f fb8b 	uxtb.w	fp, fp
 8023188:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802318c:	0212      	lsls	r2, r2, #8
 802318e:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8023192:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8023196:	ea45 050b 	orr.w	r5, r5, fp
 802319a:	f11e 0e01 	adds.w	lr, lr, #1
 802319e:	f100 8086 	bmi.w	80232ae <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 80231a2:	45f0      	cmp	r8, lr
 80231a4:	f340 8083 	ble.w	80232ae <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 80231a8:	f1bc 0f00 	cmp.w	ip, #0
 80231ac:	d07f      	beq.n	80232ae <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1c2>
 80231ae:	2f00      	cmp	r7, #0
 80231b0:	db7b      	blt.n	80232aa <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 80231b2:	45b9      	cmp	r9, r7
 80231b4:	dd79      	ble.n	80232aa <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x1be>
 80231b6:	f81a 2009 	ldrb.w	r2, [sl, r9]
 80231ba:	f833 e012 	ldrh.w	lr, [r3, r2, lsl #1]
 80231be:	ea4f 222e 	mov.w	r2, lr, asr #8
 80231c2:	ea4f 08ee 	mov.w	r8, lr, asr #3
 80231c6:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80231ca:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80231ce:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80231d2:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 80231d6:	ea48 1298 	orr.w	r2, r8, r8, lsr #6
 80231da:	fa5f fe8e 	uxtb.w	lr, lr
 80231de:	0212      	lsls	r2, r2, #8
 80231e0:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 80231e4:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80231e8:	ea42 020e 	orr.w	r2, r2, lr
 80231ec:	3701      	adds	r7, #1
 80231ee:	d419      	bmi.n	8023224 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 80231f0:	45b9      	cmp	r9, r7
 80231f2:	dd17      	ble.n	8023224 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 80231f4:	b1b6      	cbz	r6, 8023224 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>
 80231f6:	44d1      	add	r9, sl
 80231f8:	f899 0001 	ldrb.w	r0, [r9, #1]
 80231fc:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
 8023200:	10df      	asrs	r7, r3, #3
 8023202:	1218      	asrs	r0, r3, #8
 8023204:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8023208:	00db      	lsls	r3, r3, #3
 802320a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802320e:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8023212:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8023216:	b2db      	uxtb	r3, r3
 8023218:	0238      	lsls	r0, r7, #8
 802321a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 802321e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8023222:	4318      	orrs	r0, r3
 8023224:	b2b6      	uxth	r6, r6
 8023226:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 802322a:	fa1f f78c 	uxth.w	r7, ip
 802322e:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8023232:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8023236:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802323a:	fb06 fc07 	mul.w	ip, r6, r7
 802323e:	0136      	lsls	r6, r6, #4
 8023240:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8023244:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 8023248:	eba6 060c 	sub.w	r6, r6, ip
 802324c:	b2bf      	uxth	r7, r7
 802324e:	b2b6      	uxth	r6, r6
 8023250:	ebae 0e07 	sub.w	lr, lr, r7
 8023254:	4373      	muls	r3, r6
 8023256:	fa1f fe8e 	uxth.w	lr, lr
 802325a:	4375      	muls	r5, r6
 802325c:	fb0e 3808 	mla	r8, lr, r8, r3
 8023260:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023264:	fb0e 5404 	mla	r4, lr, r4, r5
 8023268:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802326c:	fb0c 8803 	mla	r8, ip, r3, r8
 8023270:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023274:	fb0c 4000 	mla	r0, ip, r0, r4
 8023278:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802327c:	fb07 8303 	mla	r3, r7, r3, r8
 8023280:	fb07 0002 	mla	r0, r7, r2, r0
 8023284:	0a1b      	lsrs	r3, r3, #8
 8023286:	0a00      	lsrs	r0, r0, #8
 8023288:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802328c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023290:	4318      	orrs	r0, r3
 8023292:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023296:	6008      	str	r0, [r1, #0]
 8023298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802329c:	4604      	mov	r4, r0
 802329e:	e758      	b.n	8023152 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x66>
 80232a0:	4605      	mov	r5, r0
 80232a2:	4604      	mov	r4, r0
 80232a4:	e779      	b.n	802319a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 80232a6:	4605      	mov	r5, r0
 80232a8:	e777      	b.n	802319a <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0xae>
 80232aa:	4602      	mov	r2, r0
 80232ac:	e79e      	b.n	80231ec <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x100>
 80232ae:	4602      	mov	r2, r0
 80232b0:	e7b8      	b.n	8023224 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh+0x138>

080232b2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80232b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232b6:	b093      	sub	sp, #76	; 0x4c
 80232b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80232bc:	920f      	str	r2, [sp, #60]	; 0x3c
 80232be:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80232c0:	9010      	str	r0, [sp, #64]	; 0x40
 80232c2:	9108      	str	r1, [sp, #32]
 80232c4:	6850      	ldr	r0, [r2, #4]
 80232c6:	9306      	str	r3, [sp, #24]
 80232c8:	6812      	ldr	r2, [r2, #0]
 80232ca:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80232ce:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80232d2:	fb00 1303 	mla	r3, r0, r3, r1
 80232d6:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 80232da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232dc:	681b      	ldr	r3, [r3, #0]
 80232de:	9307      	str	r3, [sp, #28]
 80232e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232e2:	685f      	ldr	r7, [r3, #4]
 80232e4:	3704      	adds	r7, #4
 80232e6:	9b08      	ldr	r3, [sp, #32]
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	dc03      	bgt.n	80232f4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80232ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80232ee:	2b00      	cmp	r3, #0
 80232f0:	f340 81d9 	ble.w	80236a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80232f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80232f6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80232fa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80232fe:	1e48      	subs	r0, r1, #1
 8023300:	f102 3cff 	add.w	ip, r2, #4294967295
 8023304:	9b06      	ldr	r3, [sp, #24]
 8023306:	2b00      	cmp	r3, #0
 8023308:	f340 80bc 	ble.w	8023484 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 802330c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8023310:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023314:	d406      	bmi.n	8023324 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023316:	4586      	cmp	lr, r0
 8023318:	da04      	bge.n	8023324 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802331a:	2b00      	cmp	r3, #0
 802331c:	db02      	blt.n	8023324 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802331e:	4563      	cmp	r3, ip
 8023320:	f2c0 80b1 	blt.w	8023486 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8023324:	f11e 0e01 	adds.w	lr, lr, #1
 8023328:	f100 80a2 	bmi.w	8023470 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802332c:	4571      	cmp	r1, lr
 802332e:	f2c0 809f 	blt.w	8023470 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8023332:	3301      	adds	r3, #1
 8023334:	f100 809c 	bmi.w	8023470 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8023338:	429a      	cmp	r2, r3
 802333a:	f2c0 8099 	blt.w	8023470 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 802333e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8023342:	46c8      	mov	r8, r9
 8023344:	f1bb 0f00 	cmp.w	fp, #0
 8023348:	f340 80b9 	ble.w	80234be <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 802334c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 802334e:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8023352:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023354:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8023358:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 802335c:	1422      	asrs	r2, r4, #16
 802335e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023362:	689b      	ldr	r3, [r3, #8]
 8023364:	f100 80f6 	bmi.w	8023554 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023368:	f103 3aff 	add.w	sl, r3, #4294967295
 802336c:	4552      	cmp	r2, sl
 802336e:	f280 80f1 	bge.w	8023554 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023372:	f1bc 0f00 	cmp.w	ip, #0
 8023376:	f2c0 80ed 	blt.w	8023554 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 802337a:	f10e 3aff 	add.w	sl, lr, #4294967295
 802337e:	45d4      	cmp	ip, sl
 8023380:	f280 80e8 	bge.w	8023554 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8023384:	b21b      	sxth	r3, r3
 8023386:	9d07      	ldr	r5, [sp, #28]
 8023388:	fb0c 2203 	mla	r2, ip, r3, r2
 802338c:	eb05 0a02 	add.w	sl, r5, r2
 8023390:	5caa      	ldrb	r2, [r5, r2]
 8023392:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 8023396:	2800      	cmp	r0, #0
 8023398:	f000 80d3 	beq.w	8023542 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 802339c:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80233a0:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 80233a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80233a6:	b151      	cbz	r1, 80233be <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 80233a8:	eb0a 0203 	add.w	r2, sl, r3
 80233ac:	f81a 3003 	ldrb.w	r3, [sl, r3]
 80233b0:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80233b4:	9309      	str	r3, [sp, #36]	; 0x24
 80233b6:	7853      	ldrb	r3, [r2, #1]
 80233b8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80233bc:	930c      	str	r3, [sp, #48]	; 0x30
 80233be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80233c0:	fb10 f201 	smulbb	r2, r0, r1
 80233c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80233c6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80233ca:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80233ce:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80233d2:	10d2      	asrs	r2, r2, #3
 80233d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80233d8:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 80233dc:	ea4c 0c03 	orr.w	ip, ip, r3
 80233e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80233e2:	041b      	lsls	r3, r3, #16
 80233e4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 80233e8:	432b      	orrs	r3, r5
 80233ea:	4353      	muls	r3, r2
 80233ec:	fb0a 330c 	mla	r3, sl, ip, r3
 80233f0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 80233f4:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80233f8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80233fc:	ea4c 0e0e 	orr.w	lr, ip, lr
 8023400:	f1c1 0c10 	rsb	ip, r1, #16
 8023404:	ebac 0c00 	sub.w	ip, ip, r0
 8023408:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 802340c:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 8023410:	fb0c 3c0e 	mla	ip, ip, lr, r3
 8023414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023416:	0418      	lsls	r0, r3, #16
 8023418:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 802341c:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8023420:	4318      	orrs	r0, r3
 8023422:	fb02 c200 	mla	r2, r2, r0, ip
 8023426:	0d51      	lsrs	r1, r2, #21
 8023428:	0952      	lsrs	r2, r2, #5
 802342a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802342e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8023432:	430a      	orrs	r2, r1
 8023434:	b291      	uxth	r1, r2
 8023436:	10ca      	asrs	r2, r1, #3
 8023438:	1208      	asrs	r0, r1, #8
 802343a:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 802343e:	00c9      	lsls	r1, r1, #3
 8023440:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8023444:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8023448:	b2c9      	uxtb	r1, r1
 802344a:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 802344e:	021b      	lsls	r3, r3, #8
 8023450:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8023454:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8023458:	430b      	orrs	r3, r1
 802345a:	f8c8 3000 	str.w	r3, [r8]
 802345e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023460:	f108 0804 	add.w	r8, r8, #4
 8023464:	f10b 3bff 	add.w	fp, fp, #4294967295
 8023468:	441c      	add	r4, r3
 802346a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802346c:	441e      	add	r6, r3
 802346e:	e769      	b.n	8023344 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023470:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8023472:	f109 0904 	add.w	r9, r9, #4
 8023476:	441c      	add	r4, r3
 8023478:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802347a:	441e      	add	r6, r3
 802347c:	9b06      	ldr	r3, [sp, #24]
 802347e:	3b01      	subs	r3, #1
 8023480:	9306      	str	r3, [sp, #24]
 8023482:	e73f      	b.n	8023304 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023484:	d020      	beq.n	80234c8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 8023486:	9b06      	ldr	r3, [sp, #24]
 8023488:	981f      	ldr	r0, [sp, #124]	; 0x7c
 802348a:	3b01      	subs	r3, #1
 802348c:	fb00 4003 	mla	r0, r0, r3, r4
 8023490:	1400      	asrs	r0, r0, #16
 8023492:	f53f af54 	bmi.w	802333e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023496:	3901      	subs	r1, #1
 8023498:	4288      	cmp	r0, r1
 802349a:	f6bf af50 	bge.w	802333e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802349e:	9920      	ldr	r1, [sp, #128]	; 0x80
 80234a0:	fb01 6303 	mla	r3, r1, r3, r6
 80234a4:	141b      	asrs	r3, r3, #16
 80234a6:	f53f af4a 	bmi.w	802333e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80234aa:	3a01      	subs	r2, #1
 80234ac:	4293      	cmp	r3, r2
 80234ae:	f6bf af46 	bge.w	802333e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 80234b2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80234b6:	46ca      	mov	sl, r9
 80234b8:	f1b8 0f00 	cmp.w	r8, #0
 80234bc:	dc67      	bgt.n	802358e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 80234be:	9b06      	ldr	r3, [sp, #24]
 80234c0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80234c4:	eb09 0985 	add.w	r9, r9, r5, lsl #2
 80234c8:	9b08      	ldr	r3, [sp, #32]
 80234ca:	2b00      	cmp	r3, #0
 80234cc:	f340 80eb 	ble.w	80236a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 80234d0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80234d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80234d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80234da:	eeb0 6a62 	vmov.f32	s12, s5
 80234de:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80234e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80234e6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234ea:	ee16 4a10 	vmov	r4, s12
 80234ee:	eeb0 6a43 	vmov.f32	s12, s6
 80234f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80234f6:	ee16 6a10 	vmov	r6, s12
 80234fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80234fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023502:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023506:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802350a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802350e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023512:	ee12 2a90 	vmov	r2, s5
 8023516:	eef0 2a47 	vmov.f32	s5, s14
 802351a:	fb92 f3f3 	sdiv	r3, r2, r3
 802351e:	ee13 2a10 	vmov	r2, s6
 8023522:	931f      	str	r3, [sp, #124]	; 0x7c
 8023524:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023526:	eeb0 3a67 	vmov.f32	s6, s15
 802352a:	fb92 f3f3 	sdiv	r3, r2, r3
 802352e:	9320      	str	r3, [sp, #128]	; 0x80
 8023530:	9b08      	ldr	r3, [sp, #32]
 8023532:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8023534:	3b01      	subs	r3, #1
 8023536:	9308      	str	r3, [sp, #32]
 8023538:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802353a:	bf08      	it	eq
 802353c:	4613      	moveq	r3, r2
 802353e:	9306      	str	r3, [sp, #24]
 8023540:	e6d1      	b.n	80232e6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8023542:	2900      	cmp	r1, #0
 8023544:	f43f af3b 	beq.w	80233be <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8023548:	f81a 3003 	ldrb.w	r3, [sl, r3]
 802354c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 8023550:	9309      	str	r3, [sp, #36]	; 0x24
 8023552:	e734      	b.n	80233be <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 8023554:	f112 0a01 	adds.w	sl, r2, #1
 8023558:	d481      	bmi.n	802345e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802355a:	4553      	cmp	r3, sl
 802355c:	f6ff af7f 	blt.w	802345e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023560:	f11c 0a01 	adds.w	sl, ip, #1
 8023564:	f53f af7b 	bmi.w	802345e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8023568:	45d6      	cmp	lr, sl
 802356a:	f6ff af78 	blt.w	802345e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802356e:	b21b      	sxth	r3, r3
 8023570:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 8023574:	fa0f f28e 	sxth.w	r2, lr
 8023578:	9300      	str	r3, [sp, #0]
 802357a:	463b      	mov	r3, r7
 802357c:	9201      	str	r2, [sp, #4]
 802357e:	9a07      	ldr	r2, [sp, #28]
 8023580:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8023584:	4641      	mov	r1, r8
 8023586:	9810      	ldr	r0, [sp, #64]	; 0x40
 8023588:	f7ff fdb0 	bl	80230ec <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhPKtssiihh>
 802358c:	e767      	b.n	802345e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 802358e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8023590:	1422      	asrs	r2, r4, #16
 8023592:	1431      	asrs	r1, r6, #16
 8023594:	9d07      	ldr	r5, [sp, #28]
 8023596:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 802359a:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 802359e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 80235a2:	fb03 2101 	mla	r1, r3, r1, r2
 80235a6:	9a07      	ldr	r2, [sp, #28]
 80235a8:	440a      	add	r2, r1
 80235aa:	5c69      	ldrb	r1, [r5, r1]
 80235ac:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 80235b0:	f1be 0f00 	cmp.w	lr, #0
 80235b4:	d070      	beq.n	8023698 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 80235b6:	f892 c001 	ldrb.w	ip, [r2, #1]
 80235ba:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 80235be:	950d      	str	r5, [sp, #52]	; 0x34
 80235c0:	b150      	cbz	r0, 80235d8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80235c2:	eb02 0c03 	add.w	ip, r2, r3
 80235c6:	5cd3      	ldrb	r3, [r2, r3]
 80235c8:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235cc:	930a      	str	r3, [sp, #40]	; 0x28
 80235ce:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80235d2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80235d6:	930e      	str	r3, [sp, #56]	; 0x38
 80235d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80235da:	fb1e f200 	smulbb	r2, lr, r0
 80235de:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80235e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80235e4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 80235e8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80235ec:	10d2      	asrs	r2, r2, #3
 80235ee:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 80235f2:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80235f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80235fa:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 80235fe:	9311      	str	r3, [sp, #68]	; 0x44
 8023600:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8023602:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8023604:	041b      	lsls	r3, r3, #16
 8023606:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 802360a:	ea43 030b 	orr.w	r3, r3, fp
 802360e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8023612:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8023616:	4353      	muls	r3, r2
 8023618:	fb05 3c0c 	mla	ip, r5, ip, r3
 802361c:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 8023620:	ea43 0b01 	orr.w	fp, r3, r1
 8023624:	f1c0 0110 	rsb	r1, r0, #16
 8023628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802362a:	eba1 0e0e 	sub.w	lr, r1, lr
 802362e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 8023632:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 8023636:	fb0e cc0b 	mla	ip, lr, fp, ip
 802363a:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 802363e:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 8023642:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8023646:	ea4b 0e0e 	orr.w	lr, fp, lr
 802364a:	fb02 cc0e 	mla	ip, r2, lr, ip
 802364e:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8023652:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8023656:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802365a:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802365e:	ea42 0c0c 	orr.w	ip, r2, ip
 8023662:	fa1f f28c 	uxth.w	r2, ip
 8023666:	10d3      	asrs	r3, r2, #3
 8023668:	1211      	asrs	r1, r2, #8
 802366a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 802366e:	00d2      	lsls	r2, r2, #3
 8023670:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8023674:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8023678:	b2d2      	uxtb	r2, r2
 802367a:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 802367e:	021b      	lsls	r3, r3, #8
 8023680:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8023684:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8023688:	431a      	orrs	r2, r3
 802368a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802368c:	441c      	add	r4, r3
 802368e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023690:	f84a 2b04 	str.w	r2, [sl], #4
 8023694:	441e      	add	r6, r3
 8023696:	e70f      	b.n	80234b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 8023698:	2800      	cmp	r0, #0
 802369a:	d09d      	beq.n	80235d8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 802369c:	5cd3      	ldrb	r3, [r2, r3]
 802369e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 80236a2:	930a      	str	r3, [sp, #40]	; 0x28
 80236a4:	e798      	b.n	80235d8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 80236a6:	b013      	add	sp, #76	; 0x4c
 80236a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080236ac <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>:
 80236ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80236b0:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
 80236b4:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 80236b8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 80236bc:	f1b8 0f00 	cmp.w	r8, #0
 80236c0:	fb08 750e 	mla	r5, r8, lr, r7
 80236c4:	f9bd b034 	ldrsh.w	fp, [sp, #52]	; 0x34
 80236c8:	9001      	str	r0, [sp, #4]
 80236ca:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 80236ce:	eb02 0a05 	add.w	sl, r2, r5
 80236d2:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 80236d6:	6808      	ldr	r0, [r1, #0]
 80236d8:	f2c0 80b2 	blt.w	8023840 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 80236dc:	45c3      	cmp	fp, r8
 80236de:	f340 80af 	ble.w	8023840 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x194>
 80236e2:	2f00      	cmp	r7, #0
 80236e4:	f2c0 80aa 	blt.w	802383c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 80236e8:	45be      	cmp	lr, r7
 80236ea:	f340 80a7 	ble.w	802383c <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x190>
 80236ee:	5d55      	ldrb	r5, [r2, r5]
 80236f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80236f4:	195a      	adds	r2, r3, r5
 80236f6:	5d5d      	ldrb	r5, [r3, r5]
 80236f8:	f892 9001 	ldrb.w	r9, [r2, #1]
 80236fc:	7892      	ldrb	r2, [r2, #2]
 80236fe:	0412      	lsls	r2, r2, #16
 8023700:	ea42 2209 	orr.w	r2, r2, r9, lsl #8
 8023704:	432a      	orrs	r2, r5
 8023706:	1c7d      	adds	r5, r7, #1
 8023708:	f100 809b 	bmi.w	8023842 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 802370c:	45ae      	cmp	lr, r5
 802370e:	f340 8098 	ble.w	8023842 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8023712:	2c00      	cmp	r4, #0
 8023714:	f000 8095 	beq.w	8023842 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x196>
 8023718:	f89a 9001 	ldrb.w	r9, [sl, #1]
 802371c:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023720:	eb03 0509 	add.w	r5, r3, r9
 8023724:	f813 9009 	ldrb.w	r9, [r3, r9]
 8023728:	786e      	ldrb	r6, [r5, #1]
 802372a:	78ad      	ldrb	r5, [r5, #2]
 802372c:	042d      	lsls	r5, r5, #16
 802372e:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
 8023732:	ea45 0509 	orr.w	r5, r5, r9
 8023736:	f118 0801 	adds.w	r8, r8, #1
 802373a:	f100 8086 	bmi.w	802384a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 802373e:	45c3      	cmp	fp, r8
 8023740:	f340 8083 	ble.w	802384a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 8023744:	9e01      	ldr	r6, [sp, #4]
 8023746:	2e00      	cmp	r6, #0
 8023748:	d07f      	beq.n	802384a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19e>
 802374a:	2f00      	cmp	r7, #0
 802374c:	eb0a 090e 	add.w	r9, sl, lr
 8023750:	db79      	blt.n	8023846 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 8023752:	45be      	cmp	lr, r7
 8023754:	dd77      	ble.n	8023846 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x19a>
 8023756:	f81a a00e 	ldrb.w	sl, [sl, lr]
 802375a:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 802375e:	eb03 080a 	add.w	r8, r3, sl
 8023762:	f813 a00a 	ldrb.w	sl, [r3, sl]
 8023766:	f898 b001 	ldrb.w	fp, [r8, #1]
 802376a:	f898 8002 	ldrb.w	r8, [r8, #2]
 802376e:	ea4f 4808 	mov.w	r8, r8, lsl #16
 8023772:	ea48 280b 	orr.w	r8, r8, fp, lsl #8
 8023776:	ea48 080a 	orr.w	r8, r8, sl
 802377a:	3701      	adds	r7, #1
 802377c:	d411      	bmi.n	80237a2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 802377e:	45be      	cmp	lr, r7
 8023780:	dd0f      	ble.n	80237a2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 8023782:	b174      	cbz	r4, 80237a2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 8023784:	f899 7001 	ldrb.w	r7, [r9, #1]
 8023788:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 802378c:	eb03 0e07 	add.w	lr, r3, r7
 8023790:	5ddb      	ldrb	r3, [r3, r7]
 8023792:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8023796:	f89e 9001 	ldrb.w	r9, [lr, #1]
 802379a:	0400      	lsls	r0, r0, #16
 802379c:	ea40 2009 	orr.w	r0, r0, r9, lsl #8
 80237a0:	4318      	orrs	r0, r3
 80237a2:	b2a4      	uxth	r4, r4
 80237a4:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80237a8:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 80237ac:	f002 17ff 	and.w	r7, r2, #16711935	; 0xff00ff
 80237b0:	fb04 fe06 	mul.w	lr, r4, r6
 80237b4:	0124      	lsls	r4, r4, #4
 80237b6:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80237ba:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80237be:	ebce 1606 	rsb	r6, lr, r6, lsl #4
 80237c2:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80237c6:	eba4 040e 	sub.w	r4, r4, lr
 80237ca:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 80237ce:	b2b6      	uxth	r6, r6
 80237d0:	b2a4      	uxth	r4, r4
 80237d2:	eba9 0906 	sub.w	r9, r9, r6
 80237d6:	fb04 f303 	mul.w	r3, r4, r3
 80237da:	fa1f f989 	uxth.w	r9, r9
 80237de:	fb04 f405 	mul.w	r4, r4, r5
 80237e2:	fb09 3707 	mla	r7, r9, r7, r3
 80237e6:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 80237ea:	fb09 4402 	mla	r4, r9, r2, r4
 80237ee:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80237f2:	fb0e 7703 	mla	r7, lr, r3, r7
 80237f6:	f008 13ff 	and.w	r3, r8, #16711935	; 0xff00ff
 80237fa:	fb0e 4000 	mla	r0, lr, r0, r4
 80237fe:	fb06 7303 	mla	r3, r6, r3, r7
 8023802:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8023806:	f003 17ff 	and.w	r7, r3, #16711935	; 0xff00ff
 802380a:	f408 437f 	and.w	r3, r8, #65280	; 0xff00
 802380e:	fb06 0303 	mla	r3, r6, r3, r0
 8023812:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8023816:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802381a:	ea43 0307 	orr.w	r3, r3, r7
 802381e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8023822:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8023826:	b2d4      	uxtb	r4, r2
 8023828:	b2c5      	uxtb	r5, r0
 802382a:	d110      	bne.n	802384e <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x1a2>
 802382c:	700b      	strb	r3, [r1, #0]
 802382e:	7048      	strb	r0, [r1, #1]
 8023830:	708a      	strb	r2, [r1, #2]
 8023832:	f881 c003 	strb.w	ip, [r1, #3]
 8023836:	b003      	add	sp, #12
 8023838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802383c:	4602      	mov	r2, r0
 802383e:	e762      	b.n	8023706 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x5a>
 8023840:	4602      	mov	r2, r0
 8023842:	4605      	mov	r5, r0
 8023844:	e777      	b.n	8023736 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x8a>
 8023846:	4680      	mov	r8, r0
 8023848:	e797      	b.n	802377a <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xce>
 802384a:	4680      	mov	r8, r0
 802384c:	e7a9      	b.n	80237a2 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0xf6>
 802384e:	f1bc 0f00 	cmp.w	ip, #0
 8023852:	d0f0      	beq.n	8023836 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>
 8023854:	78ce      	ldrb	r6, [r1, #3]
 8023856:	b2db      	uxtb	r3, r3
 8023858:	fb1c f505 	smulbb	r5, ip, r5
 802385c:	fb0c f206 	mul.w	r2, ip, r6
 8023860:	1c50      	adds	r0, r2, #1
 8023862:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8023866:	eb0c 0206 	add.w	r2, ip, r6
 802386a:	1200      	asrs	r0, r0, #8
 802386c:	1a12      	subs	r2, r2, r0
 802386e:	1a30      	subs	r0, r6, r0
 8023870:	780e      	ldrb	r6, [r1, #0]
 8023872:	b2d2      	uxtb	r2, r2
 8023874:	4346      	muls	r6, r0
 8023876:	70ca      	strb	r2, [r1, #3]
 8023878:	fb0c 6303 	mla	r3, ip, r3, r6
 802387c:	fb1c fc04 	smulbb	ip, ip, r4
 8023880:	fb93 f3f2 	sdiv	r3, r3, r2
 8023884:	700b      	strb	r3, [r1, #0]
 8023886:	784b      	ldrb	r3, [r1, #1]
 8023888:	fb00 5303 	mla	r3, r0, r3, r5
 802388c:	fb93 f3f2 	sdiv	r3, r3, r2
 8023890:	704b      	strb	r3, [r1, #1]
 8023892:	788b      	ldrb	r3, [r1, #2]
 8023894:	fb00 cc03 	mla	ip, r0, r3, ip
 8023898:	fb9c fcf2 	sdiv	ip, ip, r2
 802389c:	f881 c002 	strb.w	ip, [r1, #2]
 80238a0:	e7c9      	b.n	8023836 <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh+0x18a>

080238a2 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80238a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80238a6:	b091      	sub	sp, #68	; 0x44
 80238a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80238ac:	920e      	str	r2, [sp, #56]	; 0x38
 80238ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80238b0:	900f      	str	r0, [sp, #60]	; 0x3c
 80238b2:	910c      	str	r1, [sp, #48]	; 0x30
 80238b4:	6850      	ldr	r0, [r2, #4]
 80238b6:	9309      	str	r3, [sp, #36]	; 0x24
 80238b8:	6812      	ldr	r2, [r2, #0]
 80238ba:	f89d 408c 	ldrb.w	r4, [sp, #140]	; 0x8c
 80238be:	e9dd 1320 	ldrd	r1, r3, [sp, #128]	; 0x80
 80238c2:	fb00 1303 	mla	r3, r0, r3, r1
 80238c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80238ca:	930a      	str	r3, [sp, #40]	; 0x28
 80238cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80238ce:	681b      	ldr	r3, [r3, #0]
 80238d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80238d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80238d4:	685d      	ldr	r5, [r3, #4]
 80238d6:	3504      	adds	r5, #4
 80238d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80238da:	2b00      	cmp	r3, #0
 80238dc:	dc03      	bgt.n	80238e6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80238de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80238e0:	2b00      	cmp	r3, #0
 80238e2:	f340 825d 	ble.w	8023da0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 80238e6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80238e8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80238ec:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80238f0:	1e48      	subs	r0, r1, #1
 80238f2:	1e56      	subs	r6, r2, #1
 80238f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80238f6:	2b00      	cmp	r3, #0
 80238f8:	f340 80c9 	ble.w	8023a8e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 80238fc:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80238fe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023900:	143f      	asrs	r7, r7, #16
 8023902:	ea4f 4323 	mov.w	r3, r3, asr #16
 8023906:	d406      	bmi.n	8023916 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023908:	4287      	cmp	r7, r0
 802390a:	da04      	bge.n	8023916 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 802390c:	2b00      	cmp	r3, #0
 802390e:	db02      	blt.n	8023916 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023910:	42b3      	cmp	r3, r6
 8023912:	f2c0 80bd 	blt.w	8023a90 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 8023916:	3701      	adds	r7, #1
 8023918:	f100 80aa 	bmi.w	8023a70 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802391c:	42b9      	cmp	r1, r7
 802391e:	f2c0 80a7 	blt.w	8023a70 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8023922:	3301      	adds	r3, #1
 8023924:	f100 80a4 	bmi.w	8023a70 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8023928:	429a      	cmp	r2, r3
 802392a:	f2c0 80a1 	blt.w	8023a70 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 802392e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023930:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8023932:	930d      	str	r3, [sp, #52]	; 0x34
 8023934:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023936:	2b00      	cmp	r3, #0
 8023938:	f340 80ca 	ble.w	8023ad0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 802393c:	9822      	ldr	r0, [sp, #136]	; 0x88
 802393e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023940:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8023942:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8023946:	141f      	asrs	r7, r3, #16
 8023948:	981b      	ldr	r0, [sp, #108]	; 0x6c
 802394a:	f3c2 3103 	ubfx	r1, r2, #12, #4
 802394e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023950:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023952:	1400      	asrs	r0, r0, #16
 8023954:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023958:	6892      	ldr	r2, [r2, #8]
 802395a:	f100 8138 	bmi.w	8023bce <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802395e:	f102 3eff 	add.w	lr, r2, #4294967295
 8023962:	4570      	cmp	r0, lr
 8023964:	f280 8133 	bge.w	8023bce <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023968:	2f00      	cmp	r7, #0
 802396a:	f2c0 8130 	blt.w	8023bce <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 802396e:	f10c 3eff 	add.w	lr, ip, #4294967295
 8023972:	4577      	cmp	r7, lr
 8023974:	f280 812b 	bge.w	8023bce <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 8023978:	b212      	sxth	r2, r2
 802397a:	fb07 0002 	mla	r0, r7, r2, r0
 802397e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023980:	eb07 0c00 	add.w	ip, r7, r0
 8023984:	5c38      	ldrb	r0, [r7, r0]
 8023986:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802398a:	eb05 0800 	add.w	r8, r5, r0
 802398e:	2b00      	cmp	r3, #0
 8023990:	f000 80e2 	beq.w	8023b58 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8023994:	f89c e001 	ldrb.w	lr, [ip, #1]
 8023998:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 802399c:	44ae      	add	lr, r5
 802399e:	2900      	cmp	r1, #0
 80239a0:	f000 80e3 	beq.w	8023b6a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80239a4:	eb0c 0702 	add.w	r7, ip, r2
 80239a8:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80239ac:	f897 c001 	ldrb.w	ip, [r7, #1]
 80239b0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80239b4:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80239b8:	442a      	add	r2, r5
 80239ba:	44ac      	add	ip, r5
 80239bc:	b29b      	uxth	r3, r3
 80239be:	5c2f      	ldrb	r7, [r5, r0]
 80239c0:	b289      	uxth	r1, r1
 80239c2:	f89e 0000 	ldrb.w	r0, [lr]
 80239c6:	f89e a001 	ldrb.w	sl, [lr, #1]
 80239ca:	2cff      	cmp	r4, #255	; 0xff
 80239cc:	fb03 fb01 	mul.w	fp, r3, r1
 80239d0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80239d4:	f89e e002 	ldrb.w	lr, [lr, #2]
 80239d8:	ebcb 1101 	rsb	r1, fp, r1, lsl #4
 80239dc:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 80239e0:	eba3 030b 	sub.w	r3, r3, fp
 80239e4:	b289      	uxth	r1, r1
 80239e6:	b29b      	uxth	r3, r3
 80239e8:	eba9 0901 	sub.w	r9, r9, r1
 80239ec:	fb03 f000 	mul.w	r0, r3, r0
 80239f0:	fa1f f989 	uxth.w	r9, r9
 80239f4:	fb03 fa0a 	mul.w	sl, r3, sl
 80239f8:	fb03 f30e 	mul.w	r3, r3, lr
 80239fc:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023a00:	fb09 0007 	mla	r0, r9, r7, r0
 8023a04:	7817      	ldrb	r7, [r2, #0]
 8023a06:	fb01 0007 	mla	r0, r1, r7, r0
 8023a0a:	f89c 7000 	ldrb.w	r7, [ip]
 8023a0e:	fb0b 0707 	mla	r7, fp, r7, r0
 8023a12:	f898 0001 	ldrb.w	r0, [r8, #1]
 8023a16:	f898 8002 	ldrb.w	r8, [r8, #2]
 8023a1a:	fb09 aa00 	mla	sl, r9, r0, sl
 8023a1e:	7850      	ldrb	r0, [r2, #1]
 8023a20:	fb09 3308 	mla	r3, r9, r8, r3
 8023a24:	f89c 2002 	ldrb.w	r2, [ip, #2]
 8023a28:	fb01 aa00 	mla	sl, r1, r0, sl
 8023a2c:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8023a30:	fb01 330e 	mla	r3, r1, lr, r3
 8023a34:	ea4f 2727 	mov.w	r7, r7, asr #8
 8023a38:	fb0b a000 	mla	r0, fp, r0, sl
 8023a3c:	fb0b 3b02 	mla	fp, fp, r2, r3
 8023a40:	ea4f 2020 	mov.w	r0, r0, asr #8
 8023a44:	ea4f 2b2b 	mov.w	fp, fp, asr #8
 8023a48:	f040 8095 	bne.w	8023b76 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d4>
 8023a4c:	7037      	strb	r7, [r6, #0]
 8023a4e:	7070      	strb	r0, [r6, #1]
 8023a50:	f886 b002 	strb.w	fp, [r6, #2]
 8023a54:	70f4      	strb	r4, [r6, #3]
 8023a56:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023a58:	3604      	adds	r6, #4
 8023a5a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023a5c:	4413      	add	r3, r2
 8023a5e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023a60:	931b      	str	r3, [sp, #108]	; 0x6c
 8023a62:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023a64:	4413      	add	r3, r2
 8023a66:	931c      	str	r3, [sp, #112]	; 0x70
 8023a68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023a6a:	3b01      	subs	r3, #1
 8023a6c:	930d      	str	r3, [sp, #52]	; 0x34
 8023a6e:	e761      	b.n	8023934 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8023a70:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023a72:	9f1d      	ldr	r7, [sp, #116]	; 0x74
 8023a74:	443b      	add	r3, r7
 8023a76:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8023a78:	931b      	str	r3, [sp, #108]	; 0x6c
 8023a7a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023a7c:	443b      	add	r3, r7
 8023a7e:	931c      	str	r3, [sp, #112]	; 0x70
 8023a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a82:	3b01      	subs	r3, #1
 8023a84:	9309      	str	r3, [sp, #36]	; 0x24
 8023a86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023a88:	3304      	adds	r3, #4
 8023a8a:	930a      	str	r3, [sp, #40]	; 0x28
 8023a8c:	e732      	b.n	80238f4 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8023a8e:	d026      	beq.n	8023ade <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23c>
 8023a90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023a92:	981d      	ldr	r0, [sp, #116]	; 0x74
 8023a94:	3b01      	subs	r3, #1
 8023a96:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8023a98:	fb00 6003 	mla	r0, r0, r3, r6
 8023a9c:	1400      	asrs	r0, r0, #16
 8023a9e:	f53f af46 	bmi.w	802392e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023aa2:	3901      	subs	r1, #1
 8023aa4:	4288      	cmp	r0, r1
 8023aa6:	f6bf af42 	bge.w	802392e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023aaa:	991e      	ldr	r1, [sp, #120]	; 0x78
 8023aac:	981c      	ldr	r0, [sp, #112]	; 0x70
 8023aae:	fb01 0303 	mla	r3, r1, r3, r0
 8023ab2:	141b      	asrs	r3, r3, #16
 8023ab4:	f53f af3b 	bmi.w	802392e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023ab8:	3a01      	subs	r2, #1
 8023aba:	4293      	cmp	r3, r2
 8023abc:	f6bf af37 	bge.w	802392e <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8023ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023ac2:	1d19      	adds	r1, r3, #4
 8023ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ac6:	930d      	str	r3, [sp, #52]	; 0x34
 8023ac8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023aca:	2b00      	cmp	r3, #0
 8023acc:	f300 809e 	bgt.w	8023c0c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8023ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8023ad4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8023ad8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023adc:	930a      	str	r3, [sp, #40]	; 0x28
 8023ade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023ae0:	2b00      	cmp	r3, #0
 8023ae2:	f340 815d 	ble.w	8023da0 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fe>
 8023ae6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023aea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023aec:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023af0:	eeb0 6a62 	vmov.f32	s12, s5
 8023af4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8023af8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023afc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023b00:	ed8d 6a1b 	vstr	s12, [sp, #108]	; 0x6c
 8023b04:	eeb0 6a43 	vmov.f32	s12, s6
 8023b08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8023b0c:	ed8d 6a1c 	vstr	s12, [sp, #112]	; 0x70
 8023b10:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023b14:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023b18:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023b1c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023b20:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023b24:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023b28:	ee12 2a90 	vmov	r2, s5
 8023b2c:	eef0 2a47 	vmov.f32	s5, s14
 8023b30:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b34:	ee13 2a10 	vmov	r2, s6
 8023b38:	931d      	str	r3, [sp, #116]	; 0x74
 8023b3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023b3c:	eeb0 3a67 	vmov.f32	s6, s15
 8023b40:	fb92 f3f3 	sdiv	r3, r2, r3
 8023b44:	931e      	str	r3, [sp, #120]	; 0x78
 8023b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023b48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8023b4a:	3b01      	subs	r3, #1
 8023b4c:	930c      	str	r3, [sp, #48]	; 0x30
 8023b4e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8023b50:	bf08      	it	eq
 8023b52:	4613      	moveq	r3, r2
 8023b54:	9309      	str	r3, [sp, #36]	; 0x24
 8023b56:	e6bf      	b.n	80238d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8023b58:	b151      	cbz	r1, 8023b70 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ce>
 8023b5a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023b5e:	46c4      	mov	ip, r8
 8023b60:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023b64:	442a      	add	r2, r5
 8023b66:	46c6      	mov	lr, r8
 8023b68:	e728      	b.n	80239bc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8023b6a:	46c4      	mov	ip, r8
 8023b6c:	4642      	mov	r2, r8
 8023b6e:	e725      	b.n	80239bc <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11a>
 8023b70:	46c4      	mov	ip, r8
 8023b72:	4642      	mov	r2, r8
 8023b74:	e7f7      	b.n	8023b66 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c4>
 8023b76:	2c00      	cmp	r4, #0
 8023b78:	f43f af6d 	beq.w	8023a56 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023b7c:	78f1      	ldrb	r1, [r6, #3]
 8023b7e:	b2ff      	uxtb	r7, r7
 8023b80:	f896 a001 	ldrb.w	sl, [r6, #1]
 8023b84:	b2c0      	uxtb	r0, r0
 8023b86:	fb04 f201 	mul.w	r2, r4, r1
 8023b8a:	fa5f fb8b 	uxtb.w	fp, fp
 8023b8e:	1c53      	adds	r3, r2, #1
 8023b90:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8023b94:	1862      	adds	r2, r4, r1
 8023b96:	121b      	asrs	r3, r3, #8
 8023b98:	1ad2      	subs	r2, r2, r3
 8023b9a:	1acb      	subs	r3, r1, r3
 8023b9c:	7831      	ldrb	r1, [r6, #0]
 8023b9e:	fb03 fa0a 	mul.w	sl, r3, sl
 8023ba2:	b2d2      	uxtb	r2, r2
 8023ba4:	4359      	muls	r1, r3
 8023ba6:	fb04 a000 	mla	r0, r4, r0, sl
 8023baa:	fb04 1707 	mla	r7, r4, r7, r1
 8023bae:	78b1      	ldrb	r1, [r6, #2]
 8023bb0:	70f2      	strb	r2, [r6, #3]
 8023bb2:	434b      	muls	r3, r1
 8023bb4:	fb04 3b0b 	mla	fp, r4, fp, r3
 8023bb8:	fb97 f7f2 	sdiv	r7, r7, r2
 8023bbc:	fb90 f0f2 	sdiv	r0, r0, r2
 8023bc0:	fb9b fbf2 	sdiv	fp, fp, r2
 8023bc4:	7037      	strb	r7, [r6, #0]
 8023bc6:	7070      	strb	r0, [r6, #1]
 8023bc8:	f886 b002 	strb.w	fp, [r6, #2]
 8023bcc:	e743      	b.n	8023a56 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023bce:	f110 0e01 	adds.w	lr, r0, #1
 8023bd2:	f53f af40 	bmi.w	8023a56 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023bd6:	4572      	cmp	r2, lr
 8023bd8:	f6ff af3d 	blt.w	8023a56 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023bdc:	f117 0e01 	adds.w	lr, r7, #1
 8023be0:	f53f af39 	bmi.w	8023a56 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023be4:	45f4      	cmp	ip, lr
 8023be6:	f6ff af36 	blt.w	8023a56 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023bea:	b212      	sxth	r2, r2
 8023bec:	9002      	str	r0, [sp, #8]
 8023bee:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8023bf0:	9200      	str	r2, [sp, #0]
 8023bf2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023bf4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8023bf8:	fa0f f38c 	sxth.w	r3, ip
 8023bfc:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8023c00:	9301      	str	r3, [sp, #4]
 8023c02:	4631      	mov	r1, r6
 8023c04:	462b      	mov	r3, r5
 8023c06:	f7ff fd51 	bl	80236ac <_ZNK8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhS4_ssiihhh>
 8023c0a:	e724      	b.n	8023a56 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8023c0c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8023c0e:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8023c10:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8023c14:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8023c16:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8023c18:	1436      	asrs	r6, r6, #16
 8023c1a:	143f      	asrs	r7, r7, #16
 8023c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023c1e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8023c22:	f3c3 3303 	ubfx	r3, r3, #12, #4
 8023c26:	fb02 7606 	mla	r6, r2, r6, r7
 8023c2a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8023c2c:	eb07 0c06 	add.w	ip, r7, r6
 8023c30:	5dbe      	ldrb	r6, [r7, r6]
 8023c32:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8023c36:	eb05 0806 	add.w	r8, r5, r6
 8023c3a:	2b00      	cmp	r3, #0
 8023c3c:	d06d      	beq.n	8023d1a <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x478>
 8023c3e:	f89c e001 	ldrb.w	lr, [ip, #1]
 8023c42:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8023c46:	44ae      	add	lr, r5
 8023c48:	2800      	cmp	r0, #0
 8023c4a:	d06f      	beq.n	8023d2c <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48a>
 8023c4c:	eb0c 0702 	add.w	r7, ip, r2
 8023c50:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023c54:	f897 c001 	ldrb.w	ip, [r7, #1]
 8023c58:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023c5c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8023c60:	442a      	add	r2, r5
 8023c62:	44ac      	add	ip, r5
 8023c64:	b29b      	uxth	r3, r3
 8023c66:	5daf      	ldrb	r7, [r5, r6]
 8023c68:	b280      	uxth	r0, r0
 8023c6a:	f89e 6000 	ldrb.w	r6, [lr]
 8023c6e:	f89e a001 	ldrb.w	sl, [lr, #1]
 8023c72:	2cff      	cmp	r4, #255	; 0xff
 8023c74:	fb03 fb00 	mul.w	fp, r3, r0
 8023c78:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8023c7c:	f89e e002 	ldrb.w	lr, [lr, #2]
 8023c80:	ebcb 1000 	rsb	r0, fp, r0, lsl #4
 8023c84:	f5c3 7980 	rsb	r9, r3, #256	; 0x100
 8023c88:	eba3 030b 	sub.w	r3, r3, fp
 8023c8c:	b280      	uxth	r0, r0
 8023c8e:	b29b      	uxth	r3, r3
 8023c90:	eba9 0900 	sub.w	r9, r9, r0
 8023c94:	fb03 f606 	mul.w	r6, r3, r6
 8023c98:	fa1f f989 	uxth.w	r9, r9
 8023c9c:	fb03 fa0a 	mul.w	sl, r3, sl
 8023ca0:	fb03 f30e 	mul.w	r3, r3, lr
 8023ca4:	f892 e002 	ldrb.w	lr, [r2, #2]
 8023ca8:	fb09 6607 	mla	r6, r9, r7, r6
 8023cac:	7817      	ldrb	r7, [r2, #0]
 8023cae:	fb00 6607 	mla	r6, r0, r7, r6
 8023cb2:	f89c 7000 	ldrb.w	r7, [ip]
 8023cb6:	fb0b 6707 	mla	r7, fp, r7, r6
 8023cba:	f898 6001 	ldrb.w	r6, [r8, #1]
 8023cbe:	f898 8002 	ldrb.w	r8, [r8, #2]
 8023cc2:	fb09 aa06 	mla	sl, r9, r6, sl
 8023cc6:	7856      	ldrb	r6, [r2, #1]
 8023cc8:	fb09 3308 	mla	r3, r9, r8, r3
 8023ccc:	ea4f 2727 	mov.w	r7, r7, asr #8
 8023cd0:	fb00 aa06 	mla	sl, r0, r6, sl
 8023cd4:	f89c 6001 	ldrb.w	r6, [ip, #1]
 8023cd8:	fb00 330e 	mla	r3, r0, lr, r3
 8023cdc:	f89c e002 	ldrb.w	lr, [ip, #2]
 8023ce0:	fb0b a606 	mla	r6, fp, r6, sl
 8023ce4:	fb0b 330e 	mla	r3, fp, lr, r3
 8023ce8:	ea4f 2626 	mov.w	r6, r6, asr #8
 8023cec:	ea4f 2b23 	mov.w	fp, r3, asr #8
 8023cf0:	d122      	bne.n	8023d38 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8023cf2:	f801 7c04 	strb.w	r7, [r1, #-4]
 8023cf6:	f801 6c03 	strb.w	r6, [r1, #-3]
 8023cfa:	f801 bc02 	strb.w	fp, [r1, #-2]
 8023cfe:	f801 4c01 	strb.w	r4, [r1, #-1]
 8023d02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8023d04:	3104      	adds	r1, #4
 8023d06:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023d08:	4413      	add	r3, r2
 8023d0a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8023d0c:	931b      	str	r3, [sp, #108]	; 0x6c
 8023d0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8023d10:	4413      	add	r3, r2
 8023d12:	931c      	str	r3, [sp, #112]	; 0x70
 8023d14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023d16:	3b01      	subs	r3, #1
 8023d18:	e6d5      	b.n	8023ac6 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8023d1a:	b150      	cbz	r0, 8023d32 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023d1c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8023d20:	46c4      	mov	ip, r8
 8023d22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023d26:	442a      	add	r2, r5
 8023d28:	46c6      	mov	lr, r8
 8023d2a:	e79b      	b.n	8023c64 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023d2c:	46c4      	mov	ip, r8
 8023d2e:	4642      	mov	r2, r8
 8023d30:	e798      	b.n	8023c64 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 8023d32:	46c4      	mov	ip, r8
 8023d34:	4642      	mov	r2, r8
 8023d36:	e7f7      	b.n	8023d28 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 8023d38:	2c00      	cmp	r4, #0
 8023d3a:	d0e2      	beq.n	8023d02 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8023d3c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
 8023d40:	b2ff      	uxtb	r7, r7
 8023d42:	f811 ac03 	ldrb.w	sl, [r1, #-3]
 8023d46:	b2f6      	uxtb	r6, r6
 8023d48:	fb04 f300 	mul.w	r3, r4, r0
 8023d4c:	eb04 0c00 	add.w	ip, r4, r0
 8023d50:	fa5f fb8b 	uxtb.w	fp, fp
 8023d54:	1c5a      	adds	r2, r3, #1
 8023d56:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023d5a:	1213      	asrs	r3, r2, #8
 8023d5c:	1ac2      	subs	r2, r0, r3
 8023d5e:	ebac 0c03 	sub.w	ip, ip, r3
 8023d62:	f811 3c04 	ldrb.w	r3, [r1, #-4]
 8023d66:	fb02 fa0a 	mul.w	sl, r2, sl
 8023d6a:	fa5f fc8c 	uxtb.w	ip, ip
 8023d6e:	4353      	muls	r3, r2
 8023d70:	fb04 a606 	mla	r6, r4, r6, sl
 8023d74:	fb04 3707 	mla	r7, r4, r7, r3
 8023d78:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8023d7c:	f801 cc01 	strb.w	ip, [r1, #-1]
 8023d80:	435a      	muls	r2, r3
 8023d82:	fb04 2b0b 	mla	fp, r4, fp, r2
 8023d86:	fb97 f7fc 	sdiv	r7, r7, ip
 8023d8a:	fb96 f6fc 	sdiv	r6, r6, ip
 8023d8e:	fb9b fbfc 	sdiv	fp, fp, ip
 8023d92:	f801 7c04 	strb.w	r7, [r1, #-4]
 8023d96:	f801 6c03 	strb.w	r6, [r1, #-3]
 8023d9a:	f801 bc02 	strb.w	fp, [r1, #-2]
 8023d9e:	e7b0      	b.n	8023d02 <_ZN8touchgfx8LCD32bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x460>
 8023da0:	b011      	add	sp, #68	; 0x44
 8023da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08023da6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>:
 8023da6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023daa:	e9dd 780b 	ldrd	r7, r8, [sp, #44]	; 0x2c
 8023dae:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 8023db2:	f1b8 0f00 	cmp.w	r8, #0
 8023db6:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8023dba:	fb08 740e 	mla	r4, r8, lr, r7
 8023dbe:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 8023dc2:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 8023dc6:	eb02 0904 	add.w	r9, r2, r4
 8023dca:	6808      	ldr	r0, [r1, #0]
 8023dcc:	f2c0 8099 	blt.w	8023f02 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8023dd0:	45c2      	cmp	sl, r8
 8023dd2:	f340 8096 	ble.w	8023f02 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x15c>
 8023dd6:	2f00      	cmp	r7, #0
 8023dd8:	f2c0 8091 	blt.w	8023efe <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8023ddc:	45be      	cmp	lr, r7
 8023dde:	f340 808e 	ble.w	8023efe <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x158>
 8023de2:	5d12      	ldrb	r2, [r2, r4]
 8023de4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023de8:	189c      	adds	r4, r3, r2
 8023dea:	5c9a      	ldrb	r2, [r3, r2]
 8023dec:	7866      	ldrb	r6, [r4, #1]
 8023dee:	78a4      	ldrb	r4, [r4, #2]
 8023df0:	0424      	lsls	r4, r4, #16
 8023df2:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8023df6:	4314      	orrs	r4, r2
 8023df8:	1c7a      	adds	r2, r7, #1
 8023dfa:	f100 8085 	bmi.w	8023f08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8023dfe:	4596      	cmp	lr, r2
 8023e00:	f340 8082 	ble.w	8023f08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8023e04:	2d00      	cmp	r5, #0
 8023e06:	d07f      	beq.n	8023f08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x162>
 8023e08:	f899 2001 	ldrb.w	r2, [r9, #1]
 8023e0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8023e10:	189e      	adds	r6, r3, r2
 8023e12:	5c9a      	ldrb	r2, [r3, r2]
 8023e14:	f896 b001 	ldrb.w	fp, [r6, #1]
 8023e18:	78b6      	ldrb	r6, [r6, #2]
 8023e1a:	0436      	lsls	r6, r6, #16
 8023e1c:	ea46 260b 	orr.w	r6, r6, fp, lsl #8
 8023e20:	4316      	orrs	r6, r2
 8023e22:	f118 0801 	adds.w	r8, r8, #1
 8023e26:	d473      	bmi.n	8023f10 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8023e28:	45c2      	cmp	sl, r8
 8023e2a:	dd71      	ble.n	8023f10 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8023e2c:	f1bc 0f00 	cmp.w	ip, #0
 8023e30:	d06e      	beq.n	8023f10 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x16a>
 8023e32:	2f00      	cmp	r7, #0
 8023e34:	eb09 080e 	add.w	r8, r9, lr
 8023e38:	db68      	blt.n	8023f0c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8023e3a:	45be      	cmp	lr, r7
 8023e3c:	dd66      	ble.n	8023f0c <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x166>
 8023e3e:	f819 900e 	ldrb.w	r9, [r9, lr]
 8023e42:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8023e46:	eb03 0209 	add.w	r2, r3, r9
 8023e4a:	f813 9009 	ldrb.w	r9, [r3, r9]
 8023e4e:	f892 a001 	ldrb.w	sl, [r2, #1]
 8023e52:	7892      	ldrb	r2, [r2, #2]
 8023e54:	0412      	lsls	r2, r2, #16
 8023e56:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 8023e5a:	ea42 0209 	orr.w	r2, r2, r9
 8023e5e:	3701      	adds	r7, #1
 8023e60:	d411      	bmi.n	8023e86 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8023e62:	45be      	cmp	lr, r7
 8023e64:	dd0f      	ble.n	8023e86 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8023e66:	b175      	cbz	r5, 8023e86 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>
 8023e68:	f898 7001 	ldrb.w	r7, [r8, #1]
 8023e6c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023e70:	eb03 0e07 	add.w	lr, r3, r7
 8023e74:	5ddb      	ldrb	r3, [r3, r7]
 8023e76:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8023e7a:	f89e 8001 	ldrb.w	r8, [lr, #1]
 8023e7e:	0400      	lsls	r0, r0, #16
 8023e80:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
 8023e84:	4318      	orrs	r0, r3
 8023e86:	b2ad      	uxth	r5, r5
 8023e88:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 8023e8c:	fa1f f78c 	uxth.w	r7, ip
 8023e90:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8023e94:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8023e98:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8023e9c:	fb05 fc07 	mul.w	ip, r5, r7
 8023ea0:	012d      	lsls	r5, r5, #4
 8023ea2:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8023ea6:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 8023eaa:	eba5 050c 	sub.w	r5, r5, ip
 8023eae:	b2bf      	uxth	r7, r7
 8023eb0:	b2ad      	uxth	r5, r5
 8023eb2:	ebae 0e07 	sub.w	lr, lr, r7
 8023eb6:	436b      	muls	r3, r5
 8023eb8:	fa1f fe8e 	uxth.w	lr, lr
 8023ebc:	436e      	muls	r6, r5
 8023ebe:	fb0e 3808 	mla	r8, lr, r8, r3
 8023ec2:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8023ec6:	fb0e 6404 	mla	r4, lr, r4, r6
 8023eca:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023ece:	fb0c 8803 	mla	r8, ip, r3, r8
 8023ed2:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8023ed6:	fb0c 4000 	mla	r0, ip, r0, r4
 8023eda:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8023ede:	fb07 8303 	mla	r3, r7, r3, r8
 8023ee2:	fb07 0002 	mla	r0, r7, r2, r0
 8023ee6:	0a1b      	lsrs	r3, r3, #8
 8023ee8:	0a00      	lsrs	r0, r0, #8
 8023eea:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8023eee:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8023ef2:	4318      	orrs	r0, r3
 8023ef4:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8023ef8:	6008      	str	r0, [r1, #0]
 8023efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023efe:	4604      	mov	r4, r0
 8023f00:	e77a      	b.n	8023df8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x52>
 8023f02:	4606      	mov	r6, r0
 8023f04:	4604      	mov	r4, r0
 8023f06:	e78c      	b.n	8023e22 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8023f08:	4606      	mov	r6, r0
 8023f0a:	e78a      	b.n	8023e22 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0x7c>
 8023f0c:	4602      	mov	r2, r0
 8023f0e:	e7a6      	b.n	8023e5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xb8>
 8023f10:	4602      	mov	r2, r0
 8023f12:	e7b8      	b.n	8023e86 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh+0xe0>

08023f14 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023f18:	b08f      	sub	sp, #60	; 0x3c
 8023f1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8023f1e:	920c      	str	r2, [sp, #48]	; 0x30
 8023f20:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8023f22:	900d      	str	r0, [sp, #52]	; 0x34
 8023f24:	910a      	str	r1, [sp, #40]	; 0x28
 8023f26:	6850      	ldr	r0, [r2, #4]
 8023f28:	9306      	str	r3, [sp, #24]
 8023f2a:	6812      	ldr	r2, [r2, #0]
 8023f2c:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 8023f30:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 8023f34:	fb00 1303 	mla	r3, r0, r3, r1
 8023f38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8023f3c:	9307      	str	r3, [sp, #28]
 8023f3e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023f40:	681b      	ldr	r3, [r3, #0]
 8023f42:	9308      	str	r3, [sp, #32]
 8023f44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023f46:	685c      	ldr	r4, [r3, #4]
 8023f48:	3404      	adds	r4, #4
 8023f4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023f4c:	2b00      	cmp	r3, #0
 8023f4e:	dc03      	bgt.n	8023f58 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8023f50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023f52:	2b00      	cmp	r3, #0
 8023f54:	f340 81dc 	ble.w	8024310 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8023f58:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8023f5a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023f5e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023f62:	1e48      	subs	r0, r1, #1
 8023f64:	1e56      	subs	r6, r2, #1
 8023f66:	9b06      	ldr	r3, [sp, #24]
 8023f68:	2b00      	cmp	r3, #0
 8023f6a:	f340 80ba 	ble.w	80240e2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ce>
 8023f6e:	ea5f 472b 	movs.w	r7, fp, asr #16
 8023f72:	ea4f 4325 	mov.w	r3, r5, asr #16
 8023f76:	d406      	bmi.n	8023f86 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023f78:	4287      	cmp	r7, r0
 8023f7a:	da04      	bge.n	8023f86 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023f7c:	2b00      	cmp	r3, #0
 8023f7e:	db02      	blt.n	8023f86 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8023f80:	42b3      	cmp	r3, r6
 8023f82:	f2c0 80af 	blt.w	80240e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d0>
 8023f86:	3701      	adds	r7, #1
 8023f88:	f100 80a0 	bmi.w	80240cc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023f8c:	42b9      	cmp	r1, r7
 8023f8e:	f2c0 809d 	blt.w	80240cc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023f92:	3301      	adds	r3, #1
 8023f94:	f100 809a 	bmi.w	80240cc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023f98:	429a      	cmp	r2, r3
 8023f9a:	f2c0 8097 	blt.w	80240cc <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8023f9e:	9b06      	ldr	r3, [sp, #24]
 8023fa0:	930b      	str	r3, [sp, #44]	; 0x2c
 8023fa2:	9b07      	ldr	r3, [sp, #28]
 8023fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8023fa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023fa8:	2b00      	cmp	r3, #0
 8023faa:	f340 80b8 	ble.w	802411e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023fae:	9820      	ldr	r0, [sp, #128]	; 0x80
 8023fb0:	142e      	asrs	r6, r5, #16
 8023fb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8023fb4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8023fb8:	68c7      	ldr	r7, [r0, #12]
 8023fba:	ea5f 402b 	movs.w	r0, fp, asr #16
 8023fbe:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8023fc2:	6892      	ldr	r2, [r2, #8]
 8023fc4:	f100 80fe 	bmi.w	80241c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023fc8:	f102 3cff 	add.w	ip, r2, #4294967295
 8023fcc:	4560      	cmp	r0, ip
 8023fce:	f280 80f9 	bge.w	80241c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023fd2:	2e00      	cmp	r6, #0
 8023fd4:	f2c0 80f6 	blt.w	80241c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023fd8:	f107 3cff 	add.w	ip, r7, #4294967295
 8023fdc:	4566      	cmp	r6, ip
 8023fde:	f280 80f1 	bge.w	80241c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8023fe2:	b212      	sxth	r2, r2
 8023fe4:	fb06 0002 	mla	r0, r6, r2, r0
 8023fe8:	9e08      	ldr	r6, [sp, #32]
 8023fea:	5c37      	ldrb	r7, [r6, r0]
 8023fec:	eb06 0e00 	add.w	lr, r6, r0
 8023ff0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8023ff4:	eb04 0c07 	add.w	ip, r4, r7
 8023ff8:	2b00      	cmp	r3, #0
 8023ffa:	f000 80d4 	beq.w	80241a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 8023ffe:	f89e 6001 	ldrb.w	r6, [lr, #1]
 8024002:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024006:	4426      	add	r6, r4
 8024008:	2900      	cmp	r1, #0
 802400a:	f000 80d5 	beq.w	80241b8 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802400e:	eb0e 0002 	add.w	r0, lr, r2
 8024012:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8024016:	7840      	ldrb	r0, [r0, #1]
 8024018:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802401c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024020:	4422      	add	r2, r4
 8024022:	4420      	add	r0, r4
 8024024:	b29b      	uxth	r3, r3
 8024026:	f814 a007 	ldrb.w	sl, [r4, r7]
 802402a:	b289      	uxth	r1, r1
 802402c:	7837      	ldrb	r7, [r6, #0]
 802402e:	f896 8001 	ldrb.w	r8, [r6, #1]
 8024032:	fb03 f901 	mul.w	r9, r3, r1
 8024036:	011b      	lsls	r3, r3, #4
 8024038:	78b6      	ldrb	r6, [r6, #2]
 802403a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802403e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 8024042:	eba3 0309 	sub.w	r3, r3, r9
 8024046:	b289      	uxth	r1, r1
 8024048:	b29b      	uxth	r3, r3
 802404a:	ebae 0e01 	sub.w	lr, lr, r1
 802404e:	435f      	muls	r7, r3
 8024050:	fa1f fe8e 	uxth.w	lr, lr
 8024054:	fb03 f808 	mul.w	r8, r3, r8
 8024058:	4373      	muls	r3, r6
 802405a:	fb0e 770a 	mla	r7, lr, sl, r7
 802405e:	f892 a000 	ldrb.w	sl, [r2]
 8024062:	fb01 770a 	mla	r7, r1, sl, r7
 8024066:	f890 a000 	ldrb.w	sl, [r0]
 802406a:	fb09 7a0a 	mla	sl, r9, sl, r7
 802406e:	f89c 7001 	ldrb.w	r7, [ip, #1]
 8024072:	f89c c002 	ldrb.w	ip, [ip, #2]
 8024076:	fb0e 8807 	mla	r8, lr, r7, r8
 802407a:	7857      	ldrb	r7, [r2, #1]
 802407c:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8024080:	fb0e 330c 	mla	r3, lr, ip, r3
 8024084:	fb01 8807 	mla	r8, r1, r7, r8
 8024088:	7847      	ldrb	r7, [r0, #1]
 802408a:	fb09 8707 	mla	r7, r9, r7, r8
 802408e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8024092:	ea4a 0707 	orr.w	r7, sl, r7
 8024096:	f892 a002 	ldrb.w	sl, [r2, #2]
 802409a:	fb01 310a 	mla	r1, r1, sl, r3
 802409e:	f890 a002 	ldrb.w	sl, [r0, #2]
 80240a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240a4:	fb09 1a0a 	mla	sl, r9, sl, r1
 80240a8:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 80240ac:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 80240b0:	ea47 070a 	orr.w	r7, r7, sl
 80240b4:	601f      	str	r7, [r3, #0]
 80240b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80240b8:	3304      	adds	r3, #4
 80240ba:	9309      	str	r3, [sp, #36]	; 0x24
 80240bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80240be:	449b      	add	fp, r3
 80240c0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80240c2:	441d      	add	r5, r3
 80240c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80240c6:	3b01      	subs	r3, #1
 80240c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80240ca:	e76c      	b.n	8023fa6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 80240cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80240ce:	449b      	add	fp, r3
 80240d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80240d2:	441d      	add	r5, r3
 80240d4:	9b06      	ldr	r3, [sp, #24]
 80240d6:	3b01      	subs	r3, #1
 80240d8:	9306      	str	r3, [sp, #24]
 80240da:	9b07      	ldr	r3, [sp, #28]
 80240dc:	3304      	adds	r3, #4
 80240de:	9307      	str	r3, [sp, #28]
 80240e0:	e741      	b.n	8023f66 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80240e2:	d023      	beq.n	802412c <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80240e4:	9b06      	ldr	r3, [sp, #24]
 80240e6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80240e8:	3b01      	subs	r3, #1
 80240ea:	fb00 b003 	mla	r0, r0, r3, fp
 80240ee:	1400      	asrs	r0, r0, #16
 80240f0:	f53f af55 	bmi.w	8023f9e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80240f4:	3901      	subs	r1, #1
 80240f6:	4288      	cmp	r0, r1
 80240f8:	f6bf af51 	bge.w	8023f9e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80240fc:	991c      	ldr	r1, [sp, #112]	; 0x70
 80240fe:	fb01 5303 	mla	r3, r1, r3, r5
 8024102:	141b      	asrs	r3, r3, #16
 8024104:	f53f af4b 	bmi.w	8023f9e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024108:	3a01      	subs	r2, #1
 802410a:	4293      	cmp	r3, r2
 802410c:	f6bf af47 	bge.w	8023f9e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8024110:	9b06      	ldr	r3, [sp, #24]
 8024112:	9309      	str	r3, [sp, #36]	; 0x24
 8024114:	9b07      	ldr	r3, [sp, #28]
 8024116:	930b      	str	r3, [sp, #44]	; 0x2c
 8024118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802411a:	2b00      	cmp	r3, #0
 802411c:	dc6f      	bgt.n	80241fe <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 802411e:	9b06      	ldr	r3, [sp, #24]
 8024120:	9a07      	ldr	r2, [sp, #28]
 8024122:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8024126:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802412a:	9307      	str	r3, [sp, #28]
 802412c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802412e:	2b00      	cmp	r3, #0
 8024130:	f340 80ee 	ble.w	8024310 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
 8024134:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024138:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802413a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802413e:	eeb0 6a62 	vmov.f32	s12, s5
 8024142:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8024146:	ee31 1a05 	vadd.f32	s2, s2, s10
 802414a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802414e:	ee16 ba10 	vmov	fp, s12
 8024152:	eeb0 6a43 	vmov.f32	s12, s6
 8024156:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802415a:	ee16 5a10 	vmov	r5, s12
 802415e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8024162:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024166:	ee77 2a62 	vsub.f32	s5, s14, s5
 802416a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802416e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8024172:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8024176:	ee12 2a90 	vmov	r2, s5
 802417a:	eef0 2a47 	vmov.f32	s5, s14
 802417e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024182:	ee13 2a10 	vmov	r2, s6
 8024186:	931b      	str	r3, [sp, #108]	; 0x6c
 8024188:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802418a:	eeb0 3a67 	vmov.f32	s6, s15
 802418e:	fb92 f3f3 	sdiv	r3, r2, r3
 8024192:	931c      	str	r3, [sp, #112]	; 0x70
 8024194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024196:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8024198:	3b01      	subs	r3, #1
 802419a:	930a      	str	r3, [sp, #40]	; 0x28
 802419c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802419e:	bf08      	it	eq
 80241a0:	4613      	moveq	r3, r2
 80241a2:	9306      	str	r3, [sp, #24]
 80241a4:	e6d1      	b.n	8023f4a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80241a6:	b151      	cbz	r1, 80241be <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2aa>
 80241a8:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80241ac:	4660      	mov	r0, ip
 80241ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80241b2:	4422      	add	r2, r4
 80241b4:	4666      	mov	r6, ip
 80241b6:	e735      	b.n	8024024 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80241b8:	4660      	mov	r0, ip
 80241ba:	4662      	mov	r2, ip
 80241bc:	e732      	b.n	8024024 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 80241be:	4660      	mov	r0, ip
 80241c0:	4662      	mov	r2, ip
 80241c2:	e7f7      	b.n	80241b4 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
 80241c4:	f110 0c01 	adds.w	ip, r0, #1
 80241c8:	f53f af75 	bmi.w	80240b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80241cc:	4562      	cmp	r2, ip
 80241ce:	f6ff af72 	blt.w	80240b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80241d2:	f116 0c01 	adds.w	ip, r6, #1
 80241d6:	f53f af6e 	bmi.w	80240b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80241da:	4567      	cmp	r7, ip
 80241dc:	f6ff af6b 	blt.w	80240b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80241e0:	b23f      	sxth	r7, r7
 80241e2:	b212      	sxth	r2, r2
 80241e4:	9701      	str	r7, [sp, #4]
 80241e6:	9200      	str	r2, [sp, #0]
 80241e8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 80241ec:	e9cd 0602 	strd	r0, r6, [sp, #8]
 80241f0:	4623      	mov	r3, r4
 80241f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80241f4:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 80241f8:	f7ff fdd5 	bl	8023da6 <_ZNK8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhS4_ssiihh>
 80241fc:	e75b      	b.n	80240b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80241fe:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024200:	ea4f 462b 	mov.w	r6, fp, asr #16
 8024204:	1428      	asrs	r0, r5, #16
 8024206:	f3cb 3303 	ubfx	r3, fp, #12, #4
 802420a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 802420e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8024212:	fb02 6000 	mla	r0, r2, r0, r6
 8024216:	9e08      	ldr	r6, [sp, #32]
 8024218:	5c37      	ldrb	r7, [r6, r0]
 802421a:	eb06 0e00 	add.w	lr, r6, r0
 802421e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8024222:	eb04 0c07 	add.w	ip, r4, r7
 8024226:	2b00      	cmp	r3, #0
 8024228:	d063      	beq.n	80242f2 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
 802422a:	f89e 6001 	ldrb.w	r6, [lr, #1]
 802422e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8024232:	4426      	add	r6, r4
 8024234:	2900      	cmp	r1, #0
 8024236:	d065      	beq.n	8024304 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8024238:	eb0e 0002 	add.w	r0, lr, r2
 802423c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 8024240:	7840      	ldrb	r0, [r0, #1]
 8024242:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8024246:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802424a:	4422      	add	r2, r4
 802424c:	4420      	add	r0, r4
 802424e:	b29b      	uxth	r3, r3
 8024250:	f814 a007 	ldrb.w	sl, [r4, r7]
 8024254:	b289      	uxth	r1, r1
 8024256:	7837      	ldrb	r7, [r6, #0]
 8024258:	f896 8001 	ldrb.w	r8, [r6, #1]
 802425c:	fb03 f901 	mul.w	r9, r3, r1
 8024260:	011b      	lsls	r3, r3, #4
 8024262:	78b6      	ldrb	r6, [r6, #2]
 8024264:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8024268:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 802426c:	eba3 0309 	sub.w	r3, r3, r9
 8024270:	b289      	uxth	r1, r1
 8024272:	b29b      	uxth	r3, r3
 8024274:	ebae 0e01 	sub.w	lr, lr, r1
 8024278:	435f      	muls	r7, r3
 802427a:	fa1f fe8e 	uxth.w	lr, lr
 802427e:	fb03 f808 	mul.w	r8, r3, r8
 8024282:	4373      	muls	r3, r6
 8024284:	7896      	ldrb	r6, [r2, #2]
 8024286:	fb0e 770a 	mla	r7, lr, sl, r7
 802428a:	f892 a000 	ldrb.w	sl, [r2]
 802428e:	fb01 770a 	mla	r7, r1, sl, r7
 8024292:	f890 a000 	ldrb.w	sl, [r0]
 8024296:	fb09 7a0a 	mla	sl, r9, sl, r7
 802429a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802429e:	f89c c002 	ldrb.w	ip, [ip, #2]
 80242a2:	fb0e 8807 	mla	r8, lr, r7, r8
 80242a6:	7857      	ldrb	r7, [r2, #1]
 80242a8:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80242ac:	fb0e 330c 	mla	r3, lr, ip, r3
 80242b0:	fb01 8807 	mla	r8, r1, r7, r8
 80242b4:	7847      	ldrb	r7, [r0, #1]
 80242b6:	fb01 3306 	mla	r3, r1, r6, r3
 80242ba:	fb09 8707 	mla	r7, r9, r7, r8
 80242be:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80242c2:	ea4a 0707 	orr.w	r7, sl, r7
 80242c6:	f890 a002 	ldrb.w	sl, [r0, #2]
 80242ca:	fb09 3a0a 	mla	sl, r9, sl, r3
 80242ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80242d0:	ea4f 2a0a 	mov.w	sl, sl, lsl #8
 80242d4:	f40a 0a7f 	and.w	sl, sl, #16711680	; 0xff0000
 80242d8:	ea47 070a 	orr.w	r7, r7, sl
 80242dc:	f843 7b04 	str.w	r7, [r3], #4
 80242e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80242e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80242e4:	449b      	add	fp, r3
 80242e6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80242e8:	441d      	add	r5, r3
 80242ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80242ec:	3b01      	subs	r3, #1
 80242ee:	9309      	str	r3, [sp, #36]	; 0x24
 80242f0:	e712      	b.n	8024118 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 80242f2:	b151      	cbz	r1, 802430a <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 80242f4:	f81e 2002 	ldrb.w	r2, [lr, r2]
 80242f8:	4660      	mov	r0, ip
 80242fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80242fe:	4422      	add	r2, r4
 8024300:	4666      	mov	r6, ip
 8024302:	e7a4      	b.n	802424e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8024304:	4660      	mov	r0, ip
 8024306:	4662      	mov	r2, ip
 8024308:	e7a1      	b.n	802424e <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 802430a:	4660      	mov	r0, ip
 802430c:	4662      	mov	r2, ip
 802430e:	e7f7      	b.n	8024300 <_ZN8touchgfx8LCD32bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8024310:	b00f      	add	sp, #60	; 0x3c
 8024312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024316 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>:
 8024316:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802431a:	b085      	sub	sp, #20
 802431c:	6808      	ldr	r0, [r1, #0]
 802431e:	e9dd 6910 	ldrd	r6, r9, [sp, #64]	; 0x40
 8024322:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
 8024326:	f1b9 0f00 	cmp.w	r9, #0
 802432a:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 802432e:	fb09 6408 	mla	r4, r9, r8, r6
 8024332:	f89d c048 	ldrb.w	ip, [sp, #72]	; 0x48
 8024336:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 802433a:	f89d 7050 	ldrb.w	r7, [sp, #80]	; 0x50
 802433e:	eb02 0a04 	add.w	sl, r2, r4
 8024342:	f2c0 8103 	blt.w	802454c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 8024346:	45cb      	cmp	fp, r9
 8024348:	f340 8100 	ble.w	802454c <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x236>
 802434c:	2e00      	cmp	r6, #0
 802434e:	f2c0 80fb 	blt.w	8024548 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8024352:	45b0      	cmp	r8, r6
 8024354:	f340 80f8 	ble.w	8024548 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x232>
 8024358:	5d12      	ldrb	r2, [r2, r4]
 802435a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802435e:	1c72      	adds	r2, r6, #1
 8024360:	f100 80f5 	bmi.w	802454e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8024364:	4590      	cmp	r8, r2
 8024366:	f340 80f2 	ble.w	802454e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 802436a:	f1bc 0f00 	cmp.w	ip, #0
 802436e:	f000 80ee 	beq.w	802454e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x238>
 8024372:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8024376:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 802437a:	f119 0901 	adds.w	r9, r9, #1
 802437e:	f100 80ea 	bmi.w	8024556 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8024382:	45cb      	cmp	fp, r9
 8024384:	f340 80e7 	ble.w	8024556 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8024388:	f1be 0f00 	cmp.w	lr, #0
 802438c:	f000 80e3 	beq.w	8024556 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x240>
 8024390:	2e00      	cmp	r6, #0
 8024392:	f2c0 80de 	blt.w	8024552 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 8024396:	45b0      	cmp	r8, r6
 8024398:	f340 80db 	ble.w	8024552 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x23c>
 802439c:	f81a 2008 	ldrb.w	r2, [sl, r8]
 80243a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80243a4:	3601      	adds	r6, #1
 80243a6:	d409      	bmi.n	80243bc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 80243a8:	45b0      	cmp	r8, r6
 80243aa:	dd07      	ble.n	80243bc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 80243ac:	f1bc 0f00 	cmp.w	ip, #0
 80243b0:	d004      	beq.n	80243bc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 80243b2:	44d0      	add	r8, sl
 80243b4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80243b8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80243bc:	fa1f fc8c 	uxth.w	ip, ip
 80243c0:	fa1f f38e 	uxth.w	r3, lr
 80243c4:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 80243c8:	fb03 fe0c 	mul.w	lr, r3, ip
 80243cc:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80243d0:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80243d4:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 80243d8:	ebac 060e 	sub.w	r6, ip, lr
 80243dc:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 80243e0:	ea4f 6912 	mov.w	r9, r2, lsr #24
 80243e4:	b29b      	uxth	r3, r3
 80243e6:	b2b6      	uxth	r6, r6
 80243e8:	ebac 0c03 	sub.w	ip, ip, r3
 80243ec:	ea4f 6810 	mov.w	r8, r0, lsr #24
 80243f0:	9601      	str	r6, [sp, #4]
 80243f2:	fa1f f68c 	uxth.w	r6, ip
 80243f6:	9602      	str	r6, [sp, #8]
 80243f8:	9e01      	ldr	r6, [sp, #4]
 80243fa:	fb06 fc0a 	mul.w	ip, r6, sl
 80243fe:	9e02      	ldr	r6, [sp, #8]
 8024400:	fb06 cc0b 	mla	ip, r6, fp, ip
 8024404:	fb03 cc09 	mla	ip, r3, r9, ip
 8024408:	fb0e cc08 	mla	ip, lr, r8, ip
 802440c:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8024410:	9603      	str	r6, [sp, #12]
 8024412:	2e00      	cmp	r6, #0
 8024414:	f000 8095 	beq.w	8024542 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8024418:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802441c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8024420:	fb0b fc0c 	mul.w	ip, fp, ip
 8024424:	fb0b f505 	mul.w	r5, fp, r5
 8024428:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 802442c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024430:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8024434:	44dc      	add	ip, fp
 8024436:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802443a:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 802443e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8024442:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8024446:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 802444a:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802444e:	fb0a fc0c 	mul.w	ip, sl, ip
 8024452:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8024456:	fb0a fa04 	mul.w	sl, sl, r4
 802445a:	ea4f 251c 	mov.w	r5, ip, lsr #8
 802445e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024462:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8024466:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 802446a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802446e:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8024472:	4465      	add	r5, ip
 8024474:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 8024478:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802447c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8024480:	fb09 fc0c 	mul.w	ip, r9, ip
 8024484:	0a2d      	lsrs	r5, r5, #8
 8024486:	fb09 f902 	mul.w	r9, r9, r2
 802448a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802448e:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8024492:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8024496:	f509 7280 	add.w	r2, r9, #256	; 0x100
 802449a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802449e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80244a2:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80244a6:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 80244aa:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80244ae:	4464      	add	r4, ip
 80244b0:	fb08 f202 	mul.w	r2, r8, r2
 80244b4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80244b8:	fb08 f800 	mul.w	r8, r8, r0
 80244bc:	0a24      	lsrs	r4, r4, #8
 80244be:	0a10      	lsrs	r0, r2, #8
 80244c0:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 80244c4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 80244c8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80244cc:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 80244d0:	4402      	add	r2, r0
 80244d2:	f508 7080 	add.w	r0, r8, #256	; 0x100
 80244d6:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 80244da:	9801      	ldr	r0, [sp, #4]
 80244dc:	0a12      	lsrs	r2, r2, #8
 80244de:	4345      	muls	r5, r0
 80244e0:	9802      	ldr	r0, [sp, #8]
 80244e2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80244e6:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80244ea:	fb06 5500 	mla	r5, r6, r0, r5
 80244ee:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80244f2:	fb02 520e 	mla	r2, r2, lr, r5
 80244f6:	fb04 2403 	mla	r4, r4, r3, r2
 80244fa:	9a01      	ldr	r2, [sp, #4]
 80244fc:	fb02 f60a 	mul.w	r6, r2, sl
 8024500:	0a24      	lsrs	r4, r4, #8
 8024502:	9a03      	ldr	r2, [sp, #12]
 8024504:	fb00 660b 	mla	r6, r0, fp, r6
 8024508:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802450c:	fb07 fc02 	mul.w	ip, r7, r2
 8024510:	fb0e 6e08 	mla	lr, lr, r8, r6
 8024514:	fb03 e309 	mla	r3, r3, r9, lr
 8024518:	0a1b      	lsrs	r3, r3, #8
 802451a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802451e:	4323      	orrs	r3, r4
 8024520:	f10c 0401 	add.w	r4, ip, #1
 8024524:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8024528:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802452c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8024530:	1224      	asrs	r4, r4, #8
 8024532:	b2d5      	uxtb	r5, r2
 8024534:	2cff      	cmp	r4, #255	; 0xff
 8024536:	b2c6      	uxtb	r6, r0
 8024538:	d10f      	bne.n	802455a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x244>
 802453a:	700b      	strb	r3, [r1, #0]
 802453c:	7048      	strb	r0, [r1, #1]
 802453e:	708a      	strb	r2, [r1, #2]
 8024540:	70cc      	strb	r4, [r1, #3]
 8024542:	b005      	add	sp, #20
 8024544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024548:	4605      	mov	r5, r0
 802454a:	e708      	b.n	802435e <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x48>
 802454c:	4605      	mov	r5, r0
 802454e:	4604      	mov	r4, r0
 8024550:	e713      	b.n	802437a <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x64>
 8024552:	4602      	mov	r2, r0
 8024554:	e726      	b.n	80243a4 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x8e>
 8024556:	4602      	mov	r2, r0
 8024558:	e730      	b.n	80243bc <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0xa6>
 802455a:	b2e2      	uxtb	r2, r4
 802455c:	2c00      	cmp	r4, #0
 802455e:	d0f0      	beq.n	8024542 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>
 8024560:	78cc      	ldrb	r4, [r1, #3]
 8024562:	b2db      	uxtb	r3, r3
 8024564:	fb17 f606 	smulbb	r6, r7, r6
 8024568:	fb02 fc04 	mul.w	ip, r2, r4
 802456c:	4422      	add	r2, r4
 802456e:	f10c 0001 	add.w	r0, ip, #1
 8024572:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8024576:	1200      	asrs	r0, r0, #8
 8024578:	1a24      	subs	r4, r4, r0
 802457a:	1a12      	subs	r2, r2, r0
 802457c:	7808      	ldrb	r0, [r1, #0]
 802457e:	b2d2      	uxtb	r2, r2
 8024580:	4360      	muls	r0, r4
 8024582:	70ca      	strb	r2, [r1, #3]
 8024584:	fb07 0303 	mla	r3, r7, r3, r0
 8024588:	7848      	ldrb	r0, [r1, #1]
 802458a:	fb17 f705 	smulbb	r7, r7, r5
 802458e:	fb04 6000 	mla	r0, r4, r0, r6
 8024592:	fb93 f3f2 	sdiv	r3, r3, r2
 8024596:	2bff      	cmp	r3, #255	; 0xff
 8024598:	bfd6      	itet	le
 802459a:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 802459e:	23ff      	movgt	r3, #255	; 0xff
 80245a0:	b2db      	uxtble	r3, r3
 80245a2:	fb90 f0f2 	sdiv	r0, r0, r2
 80245a6:	700b      	strb	r3, [r1, #0]
 80245a8:	28ff      	cmp	r0, #255	; 0xff
 80245aa:	788b      	ldrb	r3, [r1, #2]
 80245ac:	bfd4      	ite	le
 80245ae:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80245b2:	20ff      	movgt	r0, #255	; 0xff
 80245b4:	fb04 7303 	mla	r3, r4, r3, r7
 80245b8:	bfd8      	it	le
 80245ba:	b2c0      	uxtble	r0, r0
 80245bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80245c0:	2bff      	cmp	r3, #255	; 0xff
 80245c2:	7048      	strb	r0, [r1, #1]
 80245c4:	bfd6      	itet	le
 80245c6:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80245ca:	23ff      	movgt	r3, #255	; 0xff
 80245cc:	b2db      	uxtble	r3, r3
 80245ce:	708b      	strb	r3, [r1, #2]
 80245d0:	e7b7      	b.n	8024542 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh+0x22c>

080245d2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80245d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80245d6:	b09d      	sub	sp, #116	; 0x74
 80245d8:	921a      	str	r2, [sp, #104]	; 0x68
 80245da:	9308      	str	r3, [sp, #32]
 80245dc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80245de:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 80245e2:	901b      	str	r0, [sp, #108]	; 0x6c
 80245e4:	9118      	str	r1, [sp, #96]	; 0x60
 80245e6:	6850      	ldr	r0, [r2, #4]
 80245e8:	9309      	str	r3, [sp, #36]	; 0x24
 80245ea:	6812      	ldr	r2, [r2, #0]
 80245ec:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 80245f0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 80245f4:	fb00 1303 	mla	r3, r0, r3, r1
 80245f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80245fc:	930c      	str	r3, [sp, #48]	; 0x30
 80245fe:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024600:	681b      	ldr	r3, [r3, #0]
 8024602:	9311      	str	r3, [sp, #68]	; 0x44
 8024604:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024606:	685f      	ldr	r7, [r3, #4]
 8024608:	3704      	adds	r7, #4
 802460a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802460c:	2b00      	cmp	r3, #0
 802460e:	dc03      	bgt.n	8024618 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8024610:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8024612:	2b00      	cmp	r3, #0
 8024614:	f340 83cd 	ble.w	8024db2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 8024618:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 802461a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802461e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8024622:	1e48      	subs	r0, r1, #1
 8024624:	f102 3cff 	add.w	ip, r2, #4294967295
 8024628:	9b08      	ldr	r3, [sp, #32]
 802462a:	2b00      	cmp	r3, #0
 802462c:	f340 816c 	ble.w	8024908 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x336>
 8024630:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8024634:	ea4f 4326 	mov.w	r3, r6, asr #16
 8024638:	d406      	bmi.n	8024648 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802463a:	4586      	cmp	lr, r0
 802463c:	da04      	bge.n	8024648 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 802463e:	2b00      	cmp	r3, #0
 8024640:	db02      	blt.n	8024648 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8024642:	4563      	cmp	r3, ip
 8024644:	f2c0 8161 	blt.w	802490a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 8024648:	f11e 0e01 	adds.w	lr, lr, #1
 802464c:	f100 8151 	bmi.w	80248f2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8024650:	4571      	cmp	r1, lr
 8024652:	f2c0 814e 	blt.w	80248f2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8024656:	3301      	adds	r3, #1
 8024658:	f100 814b 	bmi.w	80248f2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 802465c:	429a      	cmp	r2, r3
 802465e:	f2c0 8148 	blt.w	80248f2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8024662:	9b08      	ldr	r3, [sp, #32]
 8024664:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 8024668:	9319      	str	r3, [sp, #100]	; 0x64
 802466a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802466c:	2b00      	cmp	r3, #0
 802466e:	f340 8169 	ble.w	8024944 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 8024672:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024674:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8024678:	f3c4 3203 	ubfx	r2, r4, #12, #4
 802467c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8024680:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 8024684:	1423      	asrs	r3, r4, #16
 8024686:	f100 81f7 	bmi.w	8024a78 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 802468a:	f100 39ff 	add.w	r9, r0, #4294967295
 802468e:	454b      	cmp	r3, r9
 8024690:	f280 81f2 	bge.w	8024a78 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 8024694:	f1bc 0f00 	cmp.w	ip, #0
 8024698:	f2c0 81ee 	blt.w	8024a78 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 802469c:	f10e 39ff 	add.w	r9, lr, #4294967295
 80246a0:	45cc      	cmp	ip, r9
 80246a2:	f280 81e9 	bge.w	8024a78 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a6>
 80246a6:	b200      	sxth	r0, r0
 80246a8:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80246aa:	fb0c 3300 	mla	r3, ip, r0, r3
 80246ae:	eb05 0903 	add.w	r9, r5, r3
 80246b2:	5ceb      	ldrb	r3, [r5, r3]
 80246b4:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80246b8:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80246bc:	2a00      	cmp	r2, #0
 80246be:	f000 8187 	beq.w	80249d0 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 80246c2:	f899 c001 	ldrb.w	ip, [r9, #1]
 80246c6:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 80246ca:	950d      	str	r5, [sp, #52]	; 0x34
 80246cc:	0e2d      	lsrs	r5, r5, #24
 80246ce:	9514      	str	r5, [sp, #80]	; 0x50
 80246d0:	b179      	cbz	r1, 80246f2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80246d2:	eb09 0c00 	add.w	ip, r9, r0
 80246d6:	f819 0000 	ldrb.w	r0, [r9, r0]
 80246da:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80246de:	900a      	str	r0, [sp, #40]	; 0x28
 80246e0:	0e00      	lsrs	r0, r0, #24
 80246e2:	9012      	str	r0, [sp, #72]	; 0x48
 80246e4:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80246e8:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80246ec:	900e      	str	r0, [sp, #56]	; 0x38
 80246ee:	0e00      	lsrs	r0, r0, #24
 80246f0:	9015      	str	r0, [sp, #84]	; 0x54
 80246f2:	b292      	uxth	r2, r2
 80246f4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80246f6:	b289      	uxth	r1, r1
 80246f8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80246fa:	fb02 fa01 	mul.w	sl, r2, r1
 80246fe:	0112      	lsls	r2, r2, #4
 8024700:	ebca 1101 	rsb	r1, sl, r1, lsl #4
 8024704:	eba2 090a 	sub.w	r9, r2, sl
 8024708:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 802470c:	b289      	uxth	r1, r1
 802470e:	fa1f f989 	uxth.w	r9, r9
 8024712:	1a52      	subs	r2, r2, r1
 8024714:	fb09 f000 	mul.w	r0, r9, r0
 8024718:	b292      	uxth	r2, r2
 802471a:	fb02 000e 	mla	r0, r2, lr, r0
 802471e:	fb01 0005 	mla	r0, r1, r5, r0
 8024722:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024724:	fb0a 0005 	mla	r0, sl, r5, r0
 8024728:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802472c:	2800      	cmp	r0, #0
 802472e:	f000 80d6 	beq.w	80248de <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024732:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024736:	d01b      	beq.n	8024770 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8024738:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 802473c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024740:	fb0e fb0b 	mul.w	fp, lr, fp
 8024744:	fb0e fe03 	mul.w	lr, lr, r3
 8024748:	ea4f 231b 	mov.w	r3, fp, lsr #8
 802474c:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024750:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8024754:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024758:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802475c:	445b      	add	r3, fp
 802475e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024762:	0a1b      	lsrs	r3, r3, #8
 8024764:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8024768:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802476c:	ea43 030c 	orr.w	r3, r3, ip
 8024770:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8024772:	2dff      	cmp	r5, #255	; 0xff
 8024774:	d021      	beq.n	80247ba <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8024776:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024778:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802477c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802477e:	fb05 fc0c 	mul.w	ip, r5, ip
 8024782:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024784:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8024788:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 802478c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802478e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024792:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024796:	fb05 fb0b 	mul.w	fp, r5, fp
 802479a:	44e6      	add	lr, ip
 802479c:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80247a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80247a4:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80247a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80247ac:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80247b0:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80247b4:	ea4e 050b 	orr.w	r5, lr, fp
 80247b8:	950d      	str	r5, [sp, #52]	; 0x34
 80247ba:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80247bc:	2dff      	cmp	r5, #255	; 0xff
 80247be:	d021      	beq.n	8024804 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 80247c0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80247c2:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80247c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80247c8:	fb05 fc0c 	mul.w	ip, r5, ip
 80247cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80247ce:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80247d2:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 80247d6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80247d8:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80247dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80247e0:	fb05 fb0b 	mul.w	fp, r5, fp
 80247e4:	44e6      	add	lr, ip
 80247e6:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 80247ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80247ee:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 80247f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80247f6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 80247fa:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 80247fe:	ea4e 050b 	orr.w	r5, lr, fp
 8024802:	950a      	str	r5, [sp, #40]	; 0x28
 8024804:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024806:	2dff      	cmp	r5, #255	; 0xff
 8024808:	d021      	beq.n	802484e <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 802480a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802480c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8024810:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024812:	fb05 fc0c 	mul.w	ip, r5, ip
 8024816:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8024818:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802481c:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8024820:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8024822:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8024826:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802482a:	fb05 fb0b 	mul.w	fp, r5, fp
 802482e:	44e6      	add	lr, ip
 8024830:	f50b 7c80 	add.w	ip, fp, #256	; 0x100
 8024834:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024838:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 802483c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024840:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024844:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024848:	ea4e 050b 	orr.w	r5, lr, fp
 802484c:	950e      	str	r5, [sp, #56]	; 0x38
 802484e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024850:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8024854:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024858:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802485c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802485e:	fb09 fc0c 	mul.w	ip, r9, ip
 8024862:	fb02 cc0e 	mla	ip, r2, lr, ip
 8024866:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 802486a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802486c:	fb01 cc0e 	mla	ip, r1, lr, ip
 8024870:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024874:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8024876:	fb0a cc0e 	mla	ip, sl, lr, ip
 802487a:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802487e:	fb09 f90e 	mul.w	r9, r9, lr
 8024882:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8024886:	fb02 9303 	mla	r3, r2, r3, r9
 802488a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802488c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8024890:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 8024894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024896:	fb01 330b 	mla	r3, r1, fp, r3
 802489a:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 802489e:	fb0a 3a01 	mla	sl, sl, r1, r3
 80248a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80248a4:	4358      	muls	r0, r3
 80248a6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80248aa:	1c43      	adds	r3, r0, #1
 80248ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80248b0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80248b4:	ea4c 0c0a 	orr.w	ip, ip, sl
 80248b8:	1200      	asrs	r0, r0, #8
 80248ba:	f3cc 4307 	ubfx	r3, ip, #16, #8
 80248be:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80248c2:	28ff      	cmp	r0, #255	; 0xff
 80248c4:	b2d9      	uxtb	r1, r3
 80248c6:	fa5f fe82 	uxtb.w	lr, r2
 80248ca:	f040 808c 	bne.w	80249e6 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 80248ce:	f888 c000 	strb.w	ip, [r8]
 80248d2:	f888 2001 	strb.w	r2, [r8, #1]
 80248d6:	f888 3002 	strb.w	r3, [r8, #2]
 80248da:	f888 0003 	strb.w	r0, [r8, #3]
 80248de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80248e0:	f108 0804 	add.w	r8, r8, #4
 80248e4:	441c      	add	r4, r3
 80248e6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80248e8:	441e      	add	r6, r3
 80248ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80248ec:	3b01      	subs	r3, #1
 80248ee:	9319      	str	r3, [sp, #100]	; 0x64
 80248f0:	e6bb      	b.n	802466a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80248f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80248f4:	441c      	add	r4, r3
 80248f6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80248f8:	441e      	add	r6, r3
 80248fa:	9b08      	ldr	r3, [sp, #32]
 80248fc:	3b01      	subs	r3, #1
 80248fe:	9308      	str	r3, [sp, #32]
 8024900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024902:	3304      	adds	r3, #4
 8024904:	930c      	str	r3, [sp, #48]	; 0x30
 8024906:	e68f      	b.n	8024628 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8024908:	d023      	beq.n	8024952 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x380>
 802490a:	9b08      	ldr	r3, [sp, #32]
 802490c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 802490e:	3b01      	subs	r3, #1
 8024910:	fb00 4003 	mla	r0, r0, r3, r4
 8024914:	1400      	asrs	r0, r0, #16
 8024916:	f53f aea4 	bmi.w	8024662 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802491a:	3901      	subs	r1, #1
 802491c:	4288      	cmp	r0, r1
 802491e:	f6bf aea0 	bge.w	8024662 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024922:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8024924:	fb01 6303 	mla	r3, r1, r3, r6
 8024928:	141b      	asrs	r3, r3, #16
 802492a:	f53f ae9a 	bmi.w	8024662 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 802492e:	3a01      	subs	r2, #1
 8024930:	4293      	cmp	r3, r2
 8024932:	f6bf ae96 	bge.w	8024662 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8024936:	9b08      	ldr	r3, [sp, #32]
 8024938:	990c      	ldr	r1, [sp, #48]	; 0x30
 802493a:	9319      	str	r3, [sp, #100]	; 0x64
 802493c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 802493e:	2b00      	cmp	r3, #0
 8024940:	f300 80ba 	bgt.w	8024ab8 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 8024944:	9b08      	ldr	r3, [sp, #32]
 8024946:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802494a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802494c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8024950:	930c      	str	r3, [sp, #48]	; 0x30
 8024952:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8024954:	2b00      	cmp	r3, #0
 8024956:	f340 822c 	ble.w	8024db2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e0>
 802495a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 802495e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8024960:	ee30 0a04 	vadd.f32	s0, s0, s8
 8024964:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8024968:	eef0 6a62 	vmov.f32	s13, s5
 802496c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8024970:	ee31 1a05 	vadd.f32	s2, s2, s10
 8024974:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024978:	ee16 4a90 	vmov	r4, s13
 802497c:	eef0 6a43 	vmov.f32	s13, s6
 8024980:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8024984:	ee16 6a90 	vmov	r6, s13
 8024988:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802498c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8024990:	ee77 2a62 	vsub.f32	s5, s14, s5
 8024994:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8024998:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802499c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80249a0:	ee12 2a90 	vmov	r2, s5
 80249a4:	eef0 2a47 	vmov.f32	s5, s14
 80249a8:	fb92 f3f3 	sdiv	r3, r2, r3
 80249ac:	ee13 2a10 	vmov	r2, s6
 80249b0:	9329      	str	r3, [sp, #164]	; 0xa4
 80249b2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80249b4:	eeb0 3a67 	vmov.f32	s6, s15
 80249b8:	fb92 f3f3 	sdiv	r3, r2, r3
 80249bc:	932a      	str	r3, [sp, #168]	; 0xa8
 80249be:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80249c0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80249c2:	3b01      	subs	r3, #1
 80249c4:	9318      	str	r3, [sp, #96]	; 0x60
 80249c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80249c8:	bf08      	it	eq
 80249ca:	4613      	moveq	r3, r2
 80249cc:	9308      	str	r3, [sp, #32]
 80249ce:	e61c      	b.n	802460a <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 80249d0:	2900      	cmp	r1, #0
 80249d2:	f43f ae8e 	beq.w	80246f2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80249d6:	f819 0000 	ldrb.w	r0, [r9, r0]
 80249da:	f857 0020 	ldr.w	r0, [r7, r0, lsl #2]
 80249de:	900a      	str	r0, [sp, #40]	; 0x28
 80249e0:	0e00      	lsrs	r0, r0, #24
 80249e2:	9012      	str	r0, [sp, #72]	; 0x48
 80249e4:	e685      	b.n	80246f2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x120>
 80249e6:	b2c3      	uxtb	r3, r0
 80249e8:	2800      	cmp	r0, #0
 80249ea:	f43f af78 	beq.w	80248de <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80249ee:	f898 0003 	ldrb.w	r0, [r8, #3]
 80249f2:	fa5f fc8c 	uxtb.w	ip, ip
 80249f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80249f8:	fb03 f900 	mul.w	r9, r3, r0
 80249fc:	4403      	add	r3, r0
 80249fe:	f109 0201 	add.w	r2, r9, #1
 8024a02:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8024a06:	1212      	asrs	r2, r2, #8
 8024a08:	1a80      	subs	r0, r0, r2
 8024a0a:	1a9b      	subs	r3, r3, r2
 8024a0c:	f898 2000 	ldrb.w	r2, [r8]
 8024a10:	b2db      	uxtb	r3, r3
 8024a12:	4342      	muls	r2, r0
 8024a14:	f888 3003 	strb.w	r3, [r8, #3]
 8024a18:	fb05 220c 	mla	r2, r5, ip, r2
 8024a1c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a1e:	fb92 f2f3 	sdiv	r2, r2, r3
 8024a22:	fb15 fe0e 	smulbb	lr, r5, lr
 8024a26:	2aff      	cmp	r2, #255	; 0xff
 8024a28:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a2a:	bfd4      	ite	le
 8024a2c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024a30:	22ff      	movgt	r2, #255	; 0xff
 8024a32:	fb15 f101 	smulbb	r1, r5, r1
 8024a36:	bfd8      	it	le
 8024a38:	b2d2      	uxtble	r2, r2
 8024a3a:	f888 2000 	strb.w	r2, [r8]
 8024a3e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8024a42:	fb00 e202 	mla	r2, r0, r2, lr
 8024a46:	fb92 f2f3 	sdiv	r2, r2, r3
 8024a4a:	2aff      	cmp	r2, #255	; 0xff
 8024a4c:	bfd6      	itet	le
 8024a4e:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024a52:	22ff      	movgt	r2, #255	; 0xff
 8024a54:	b2d2      	uxtble	r2, r2
 8024a56:	f888 2001 	strb.w	r2, [r8, #1]
 8024a5a:	f898 2002 	ldrb.w	r2, [r8, #2]
 8024a5e:	fb00 1202 	mla	r2, r0, r2, r1
 8024a62:	fb92 f2f3 	sdiv	r2, r2, r3
 8024a66:	2aff      	cmp	r2, #255	; 0xff
 8024a68:	bfd6      	itet	le
 8024a6a:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024a6e:	22ff      	movgt	r2, #255	; 0xff
 8024a70:	b2d2      	uxtble	r2, r2
 8024a72:	f888 2002 	strb.w	r2, [r8, #2]
 8024a76:	e732      	b.n	80248de <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024a78:	f113 0901 	adds.w	r9, r3, #1
 8024a7c:	f53f af2f 	bmi.w	80248de <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024a80:	4548      	cmp	r0, r9
 8024a82:	f6ff af2c 	blt.w	80248de <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024a86:	f11c 0901 	adds.w	r9, ip, #1
 8024a8a:	f53f af28 	bmi.w	80248de <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024a8e:	45ce      	cmp	lr, r9
 8024a90:	f6ff af25 	blt.w	80248de <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024a94:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024a96:	b200      	sxth	r0, r0
 8024a98:	9302      	str	r3, [sp, #8]
 8024a9a:	fa0f f38e 	sxth.w	r3, lr
 8024a9e:	9000      	str	r0, [sp, #0]
 8024aa0:	9301      	str	r3, [sp, #4]
 8024aa2:	463b      	mov	r3, r7
 8024aa4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8024aa6:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8024aaa:	e9cd c203 	strd	ip, r2, [sp, #12]
 8024aae:	4641      	mov	r1, r8
 8024ab0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8024ab2:	f7ff fc30 	bl	8024316 <_ZNK8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhPKmssiihhh>
 8024ab6:	e712      	b.n	80248de <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 8024ab8:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8024aba:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8024abe:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8024ac0:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8024ac4:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8024ac8:	1433      	asrs	r3, r6, #16
 8024aca:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8024ace:	fb0c e303 	mla	r3, ip, r3, lr
 8024ad2:	eb05 0e03 	add.w	lr, r5, r3
 8024ad6:	5ceb      	ldrb	r3, [r5, r3]
 8024ad8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8024adc:	ea4f 6813 	mov.w	r8, r3, lsr #24
 8024ae0:	2a00      	cmp	r2, #0
 8024ae2:	f000 8116 	beq.w	8024d12 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x740>
 8024ae6:	f89e 9001 	ldrb.w	r9, [lr, #1]
 8024aea:	f857 5029 	ldr.w	r5, [r7, r9, lsl #2]
 8024aee:	950f      	str	r5, [sp, #60]	; 0x3c
 8024af0:	0e2d      	lsrs	r5, r5, #24
 8024af2:	9516      	str	r5, [sp, #88]	; 0x58
 8024af4:	b178      	cbz	r0, 8024b16 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8024af6:	eb0e 090c 	add.w	r9, lr, ip
 8024afa:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8024afe:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8024b02:	f899 c001 	ldrb.w	ip, [r9, #1]
 8024b06:	950b      	str	r5, [sp, #44]	; 0x2c
 8024b08:	0e2d      	lsrs	r5, r5, #24
 8024b0a:	9513      	str	r5, [sp, #76]	; 0x4c
 8024b0c:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8024b10:	9510      	str	r5, [sp, #64]	; 0x40
 8024b12:	0e2d      	lsrs	r5, r5, #24
 8024b14:	9517      	str	r5, [sp, #92]	; 0x5c
 8024b16:	b292      	uxth	r2, r2
 8024b18:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024b1a:	b280      	uxth	r0, r0
 8024b1c:	fb02 fa00 	mul.w	sl, r2, r0
 8024b20:	0112      	lsls	r2, r2, #4
 8024b22:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8024b26:	eba2 090a 	sub.w	r9, r2, sl
 8024b2a:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8024b2e:	fa1f fc80 	uxth.w	ip, r0
 8024b32:	9816      	ldr	r0, [sp, #88]	; 0x58
 8024b34:	fa1f f989 	uxth.w	r9, r9
 8024b38:	eba2 020c 	sub.w	r2, r2, ip
 8024b3c:	fb09 f000 	mul.w	r0, r9, r0
 8024b40:	b292      	uxth	r2, r2
 8024b42:	fb02 0008 	mla	r0, r2, r8, r0
 8024b46:	fb0c 0005 	mla	r0, ip, r5, r0
 8024b4a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8024b4c:	fb0a 0005 	mla	r0, sl, r5, r0
 8024b50:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024b54:	2800      	cmp	r0, #0
 8024b56:	f000 80d3 	beq.w	8024d00 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024b5a:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8024b5e:	d01b      	beq.n	8024b98 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 8024b60:	f003 1bff 	and.w	fp, r3, #16711935	; 0xff00ff
 8024b64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024b68:	fb08 fb0b 	mul.w	fp, r8, fp
 8024b6c:	fb08 f803 	mul.w	r8, r8, r3
 8024b70:	ea4f 231b 	mov.w	r3, fp, lsr #8
 8024b74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8024b78:	f508 7e80 	add.w	lr, r8, #256	; 0x100
 8024b7c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b80:	eb0e 2e18 	add.w	lr, lr, r8, lsr #8
 8024b84:	445b      	add	r3, fp
 8024b86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024b8a:	0a1b      	lsrs	r3, r3, #8
 8024b8c:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 8024b90:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8024b94:	ea43 030e 	orr.w	r3, r3, lr
 8024b98:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024b9a:	2dff      	cmp	r5, #255	; 0xff
 8024b9c:	d021      	beq.n	8024be2 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x610>
 8024b9e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024ba0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024ba4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024ba6:	fb05 fe0e 	mul.w	lr, r5, lr
 8024baa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024bac:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8024bb0:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8024bb4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8024bb6:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024bba:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024bbe:	fb05 fb0b 	mul.w	fp, r5, fp
 8024bc2:	44f0      	add	r8, lr
 8024bc4:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8024bc8:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024bcc:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8024bd0:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024bd4:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024bd8:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024bdc:	ea48 050b 	orr.w	r5, r8, fp
 8024be0:	950f      	str	r5, [sp, #60]	; 0x3c
 8024be2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024be4:	2dff      	cmp	r5, #255	; 0xff
 8024be6:	d021      	beq.n	8024c2c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x65a>
 8024be8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024bea:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024bee:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024bf0:	fb05 fe0e 	mul.w	lr, r5, lr
 8024bf4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024bf6:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8024bfa:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8024bfe:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8024c00:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024c04:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024c08:	fb05 fb0b 	mul.w	fp, r5, fp
 8024c0c:	44f0      	add	r8, lr
 8024c0e:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8024c12:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024c16:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8024c1a:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024c1e:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024c22:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024c26:	ea48 050b 	orr.w	r5, r8, fp
 8024c2a:	950b      	str	r5, [sp, #44]	; 0x2c
 8024c2c:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8024c2e:	2dff      	cmp	r5, #255	; 0xff
 8024c30:	d021      	beq.n	8024c76 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a4>
 8024c32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024c34:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024c38:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8024c3a:	fb05 fe0e 	mul.w	lr, r5, lr
 8024c3e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024c40:	ea4f 281e 	mov.w	r8, lr, lsr #8
 8024c44:	f405 4b7f 	and.w	fp, r5, #65280	; 0xff00
 8024c48:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8024c4a:	f10e 1e01 	add.w	lr, lr, #65537	; 0x10001
 8024c4e:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024c52:	fb05 fb0b 	mul.w	fp, r5, fp
 8024c56:	44f0      	add	r8, lr
 8024c58:	f50b 7e80 	add.w	lr, fp, #256	; 0x100
 8024c5c:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024c60:	eb0e 2b1b 	add.w	fp, lr, fp, lsr #8
 8024c64:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8024c68:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8024c6c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8024c70:	ea48 050b 	orr.w	r5, r8, fp
 8024c74:	9510      	str	r5, [sp, #64]	; 0x40
 8024c76:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024c78:	f003 18ff 	and.w	r8, r3, #16711935	; 0xff00ff
 8024c7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8024c80:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8024c84:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8024c86:	fb09 fe0e 	mul.w	lr, r9, lr
 8024c8a:	fb02 ee08 	mla	lr, r2, r8, lr
 8024c8e:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 8024c92:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8024c94:	fb0c ee08 	mla	lr, ip, r8, lr
 8024c98:	f005 18ff 	and.w	r8, r5, #16711935	; 0xff00ff
 8024c9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8024c9e:	fb0a ee08 	mla	lr, sl, r8, lr
 8024ca2:	f405 487f 	and.w	r8, r5, #65280	; 0xff00
 8024ca6:	fb09 f908 	mul.w	r9, r9, r8
 8024caa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8024cae:	fb02 9303 	mla	r3, r2, r3, r9
 8024cb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024cb4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8024cb8:	f402 4b7f 	and.w	fp, r2, #65280	; 0xff00
 8024cbc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024cbe:	fb0c 330b 	mla	r3, ip, fp, r3
 8024cc2:	f402 487f 	and.w	r8, r2, #65280	; 0xff00
 8024cc6:	fb0a 3808 	mla	r8, sl, r8, r3
 8024cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024ccc:	4358      	muls	r0, r3
 8024cce:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024cd2:	1c43      	adds	r3, r0, #1
 8024cd4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8024cd8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8024cdc:	ea4e 0e08 	orr.w	lr, lr, r8
 8024ce0:	1200      	asrs	r0, r0, #8
 8024ce2:	f3ce 4307 	ubfx	r3, lr, #16, #8
 8024ce6:	f3ce 2207 	ubfx	r2, lr, #8, #8
 8024cea:	28ff      	cmp	r0, #255	; 0xff
 8024cec:	fa5f fc83 	uxtb.w	ip, r3
 8024cf0:	fa5f f882 	uxtb.w	r8, r2
 8024cf4:	d118      	bne.n	8024d28 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x756>
 8024cf6:	f881 e000 	strb.w	lr, [r1]
 8024cfa:	704a      	strb	r2, [r1, #1]
 8024cfc:	708b      	strb	r3, [r1, #2]
 8024cfe:	70c8      	strb	r0, [r1, #3]
 8024d00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8024d02:	3104      	adds	r1, #4
 8024d04:	441c      	add	r4, r3
 8024d06:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8024d08:	441e      	add	r6, r3
 8024d0a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8024d0c:	3b01      	subs	r3, #1
 8024d0e:	9319      	str	r3, [sp, #100]	; 0x64
 8024d10:	e614      	b.n	802493c <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 8024d12:	2800      	cmp	r0, #0
 8024d14:	f43f aeff 	beq.w	8024b16 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8024d18:	f81e c00c 	ldrb.w	ip, [lr, ip]
 8024d1c:	f857 502c 	ldr.w	r5, [r7, ip, lsl #2]
 8024d20:	950b      	str	r5, [sp, #44]	; 0x2c
 8024d22:	0e2d      	lsrs	r5, r5, #24
 8024d24:	9513      	str	r5, [sp, #76]	; 0x4c
 8024d26:	e6f6      	b.n	8024b16 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x544>
 8024d28:	b2c3      	uxtb	r3, r0
 8024d2a:	2800      	cmp	r0, #0
 8024d2c:	d0e8      	beq.n	8024d00 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024d2e:	78c8      	ldrb	r0, [r1, #3]
 8024d30:	fa5f fe8e 	uxtb.w	lr, lr
 8024d34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024d36:	fb03 f900 	mul.w	r9, r3, r0
 8024d3a:	4403      	add	r3, r0
 8024d3c:	f109 0201 	add.w	r2, r9, #1
 8024d40:	eb02 2219 	add.w	r2, r2, r9, lsr #8
 8024d44:	1212      	asrs	r2, r2, #8
 8024d46:	1a9b      	subs	r3, r3, r2
 8024d48:	1a82      	subs	r2, r0, r2
 8024d4a:	7808      	ldrb	r0, [r1, #0]
 8024d4c:	b2db      	uxtb	r3, r3
 8024d4e:	4350      	muls	r0, r2
 8024d50:	70cb      	strb	r3, [r1, #3]
 8024d52:	fb05 0e0e 	mla	lr, r5, lr, r0
 8024d56:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024d58:	7848      	ldrb	r0, [r1, #1]
 8024d5a:	fb15 f808 	smulbb	r8, r5, r8
 8024d5e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8024d60:	fb9e fef3 	sdiv	lr, lr, r3
 8024d64:	fb02 8000 	mla	r0, r2, r0, r8
 8024d68:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8024d6c:	fb15 fc0c 	smulbb	ip, r5, ip
 8024d70:	bfd4      	ite	le
 8024d72:	ea2e 7eee 	bicle.w	lr, lr, lr, asr #31
 8024d76:	f04f 0eff 	movgt.w	lr, #255	; 0xff
 8024d7a:	fb90 f0f3 	sdiv	r0, r0, r3
 8024d7e:	bfd8      	it	le
 8024d80:	fa5f fe8e 	uxtble.w	lr, lr
 8024d84:	28ff      	cmp	r0, #255	; 0xff
 8024d86:	bfd4      	ite	le
 8024d88:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8024d8c:	20ff      	movgt	r0, #255	; 0xff
 8024d8e:	f881 e000 	strb.w	lr, [r1]
 8024d92:	bfd8      	it	le
 8024d94:	b2c0      	uxtble	r0, r0
 8024d96:	7048      	strb	r0, [r1, #1]
 8024d98:	7888      	ldrb	r0, [r1, #2]
 8024d9a:	fb02 c200 	mla	r2, r2, r0, ip
 8024d9e:	fb92 f2f3 	sdiv	r2, r2, r3
 8024da2:	2aff      	cmp	r2, #255	; 0xff
 8024da4:	bfd6      	itet	le
 8024da6:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8024daa:	22ff      	movgt	r2, #255	; 0xff
 8024dac:	b2d2      	uxtble	r2, r2
 8024dae:	708a      	strb	r2, [r1, #2]
 8024db0:	e7a6      	b.n	8024d00 <_ZN8touchgfx8LCD32bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 8024db2:	b01d      	add	sp, #116	; 0x74
 8024db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08024db8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>:
 8024db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dbc:	b087      	sub	sp, #28
 8024dbe:	e9dd 8612 	ldrd	r8, r6, [sp, #72]	; 0x48
 8024dc2:	f89d 0058 	ldrb.w	r0, [sp, #88]	; 0x58
 8024dc6:	f9bd 5040 	ldrsh.w	r5, [sp, #64]	; 0x40
 8024dca:	2e00      	cmp	r6, #0
 8024dcc:	9002      	str	r0, [sp, #8]
 8024dce:	fb06 8005 	mla	r0, r6, r5, r8
 8024dd2:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 8024dd6:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8024dda:	eb02 0740 	add.w	r7, r2, r0, lsl #1
 8024dde:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 8024de2:	9703      	str	r7, [sp, #12]
 8024de4:	eb03 0700 	add.w	r7, r3, r0
 8024de8:	9704      	str	r7, [sp, #16]
 8024dea:	f2c0 8133 	blt.w	8025054 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8024dee:	45b3      	cmp	fp, r6
 8024df0:	f340 8130 	ble.w	8025054 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x29c>
 8024df4:	f1b8 0f00 	cmp.w	r8, #0
 8024df8:	f2c0 8128 	blt.w	802504c <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8024dfc:	4545      	cmp	r5, r8
 8024dfe:	f340 8125 	ble.w	802504c <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x294>
 8024e02:	f813 c000 	ldrb.w	ip, [r3, r0]
 8024e06:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8024e0a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
 8024e0e:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8024e12:	f423 6afc 	bic.w	sl, r3, #2016	; 0x7e0
 8024e16:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e1a:	fb0c f303 	mul.w	r3, ip, r3
 8024e1e:	fb0a f202 	mul.w	r2, sl, r2
 8024e22:	f103 0a20 	add.w	sl, r3, #32
 8024e26:	ea07 1052 	and.w	r0, r7, r2, lsr #5
 8024e2a:	f602 0201 	addw	r2, r2, #2049	; 0x801
 8024e2e:	eb0a 2313 	add.w	r3, sl, r3, lsr #8
 8024e32:	4402      	add	r2, r0
 8024e34:	0a1b      	lsrs	r3, r3, #8
 8024e36:	ea07 1752 	and.w	r7, r7, r2, lsr #5
 8024e3a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e3e:	ea47 0a03 	orr.w	sl, r7, r3
 8024e42:	f118 0301 	adds.w	r3, r8, #1
 8024e46:	f100 810a 	bmi.w	802505e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8024e4a:	429d      	cmp	r5, r3
 8024e4c:	f340 8107 	ble.w	802505e <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2a6>
 8024e50:	2c00      	cmp	r4, #0
 8024e52:	f000 8107 	beq.w	8025064 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2ac>
 8024e56:	9b04      	ldr	r3, [sp, #16]
 8024e58:	785a      	ldrb	r2, [r3, #1]
 8024e5a:	9b03      	ldr	r3, [sp, #12]
 8024e5c:	10d7      	asrs	r7, r2, #3
 8024e5e:	885b      	ldrh	r3, [r3, #2]
 8024e60:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8024e64:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e68:	4347      	muls	r7, r0
 8024e6a:	f64f 001f 	movw	r0, #63519	; 0xf81f
 8024e6e:	4353      	muls	r3, r2
 8024e70:	ea00 1957 	and.w	r9, r0, r7, lsr #5
 8024e74:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8024e78:	444f      	add	r7, r9
 8024e7a:	f103 0920 	add.w	r9, r3, #32
 8024e7e:	eb09 2313 	add.w	r3, r9, r3, lsr #8
 8024e82:	ea00 1057 	and.w	r0, r0, r7, lsr #5
 8024e86:	0a1b      	lsrs	r3, r3, #8
 8024e88:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024e8c:	4303      	orrs	r3, r0
 8024e8e:	9301      	str	r3, [sp, #4]
 8024e90:	3601      	adds	r6, #1
 8024e92:	f100 80ed 	bmi.w	8025070 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8024e96:	45b3      	cmp	fp, r6
 8024e98:	f340 80ea 	ble.w	8025070 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b8>
 8024e9c:	f1be 0f00 	cmp.w	lr, #0
 8024ea0:	f000 80eb 	beq.w	802507a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2c2>
 8024ea4:	f1b8 0f00 	cmp.w	r8, #0
 8024ea8:	f2c0 80df 	blt.w	802506a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8024eac:	4545      	cmp	r5, r8
 8024eae:	f340 80dc 	ble.w	802506a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2b2>
 8024eb2:	9b04      	ldr	r3, [sp, #16]
 8024eb4:	5d5f      	ldrb	r7, [r3, r5]
 8024eb6:	9b03      	ldr	r3, [sp, #12]
 8024eb8:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8024ebc:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
 8024ec0:	f423 66fc 	bic.w	r6, r3, #2016	; 0x7e0
 8024ec4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024ec8:	fb09 f906 	mul.w	r9, r9, r6
 8024ecc:	f64f 061f 	movw	r6, #63519	; 0xf81f
 8024ed0:	437b      	muls	r3, r7
 8024ed2:	ea06 1b59 	and.w	fp, r6, r9, lsr #5
 8024ed6:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8024eda:	44d9      	add	r9, fp
 8024edc:	f103 0b20 	add.w	fp, r3, #32
 8024ee0:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8024ee4:	ea06 1659 	and.w	r6, r6, r9, lsr #5
 8024ee8:	0a1b      	lsrs	r3, r3, #8
 8024eea:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8024eee:	431e      	orrs	r6, r3
 8024ef0:	f118 0801 	adds.w	r8, r8, #1
 8024ef4:	f100 80c6 	bmi.w	8025084 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8024ef8:	4545      	cmp	r5, r8
 8024efa:	f340 80c3 	ble.w	8025084 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2cc>
 8024efe:	2c00      	cmp	r4, #0
 8024f00:	f000 80c3 	beq.w	802508a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d2>
 8024f04:	3501      	adds	r5, #1
 8024f06:	9b04      	ldr	r3, [sp, #16]
 8024f08:	9803      	ldr	r0, [sp, #12]
 8024f0a:	5d5b      	ldrb	r3, [r3, r5]
 8024f0c:	f830 8015 	ldrh.w	r8, [r0, r5, lsl #1]
 8024f10:	ea4f 09e3 	mov.w	r9, r3, asr #3
 8024f14:	f428 65fc 	bic.w	r5, r8, #2016	; 0x7e0
 8024f18:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8024f1c:	fb09 f905 	mul.w	r9, r9, r5
 8024f20:	f64f 051f 	movw	r5, #63519	; 0xf81f
 8024f24:	fb03 f808 	mul.w	r8, r3, r8
 8024f28:	ea05 1b59 	and.w	fp, r5, r9, lsr #5
 8024f2c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8024f30:	44d9      	add	r9, fp
 8024f32:	ea05 1559 	and.w	r5, r5, r9, lsr #5
 8024f36:	f108 0920 	add.w	r9, r8, #32
 8024f3a:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8024f3e:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8024f42:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8024f46:	ea45 0508 	orr.w	r5, r5, r8
 8024f4a:	fa1f f984 	uxth.w	r9, r4
 8024f4e:	fa1f f88e 	uxth.w	r8, lr
 8024f52:	fb09 f008 	mul.w	r0, r9, r8
 8024f56:	9003      	str	r0, [sp, #12]
 8024f58:	ea4f 1009 	mov.w	r0, r9, lsl #4
 8024f5c:	ea4f 490a 	mov.w	r9, sl, lsl #16
 8024f60:	f42a 6afc 	bic.w	sl, sl, #2016	; 0x7e0
 8024f64:	9004      	str	r0, [sp, #16]
 8024f66:	9803      	ldr	r0, [sp, #12]
 8024f68:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 8024f6c:	ebc0 1808 	rsb	r8, r0, r8, lsl #4
 8024f70:	ea49 090a 	orr.w	r9, r9, sl
 8024f74:	f1ce 0a10 	rsb	sl, lr, #16
 8024f78:	fa1f f088 	uxth.w	r0, r8
 8024f7c:	fb14 f80e 	smulbb	r8, r4, lr
 8024f80:	ebaa 0a04 	sub.w	sl, sl, r4
 8024f84:	9005      	str	r0, [sp, #20]
 8024f86:	9801      	ldr	r0, [sp, #4]
 8024f88:	f3c8 08c7 	ubfx	r8, r8, #3, #8
 8024f8c:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8024f90:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8024f94:	ebc8 0444 	rsb	r4, r8, r4, lsl #1
 8024f98:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024f9c:	eb08 0a4a 	add.w	sl, r8, sl, lsl #1
 8024fa0:	ebc8 0e4e 	rsb	lr, r8, lr, lsl #1
 8024fa4:	ea4b 0000 	orr.w	r0, fp, r0
 8024fa8:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8024fac:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8024fb0:	4360      	muls	r0, r4
 8024fb2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8024fb6:	9c04      	ldr	r4, [sp, #16]
 8024fb8:	ea4b 0505 	orr.w	r5, fp, r5
 8024fbc:	fb0a 0009 	mla	r0, sl, r9, r0
 8024fc0:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 8024fc4:	fb08 0005 	mla	r0, r8, r5, r0
 8024fc8:	0435      	lsls	r5, r6, #16
 8024fca:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8024fce:	f005 65fc 	and.w	r5, r5, #132120576	; 0x7e00000
 8024fd2:	432e      	orrs	r6, r5
 8024fd4:	9d05      	ldr	r5, [sp, #20]
 8024fd6:	fb0e 0e06 	mla	lr, lr, r6, r0
 8024fda:	1b64      	subs	r4, r4, r5
 8024fdc:	e9dd 6503 	ldrd	r6, r5, [sp, #12]
 8024fe0:	b2a4      	uxth	r4, r4
 8024fe2:	1bad      	subs	r5, r5, r6
 8024fe4:	ea4f 505e 	mov.w	r0, lr, lsr #21
 8024fe8:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8024fec:	b2ad      	uxth	r5, r5
 8024fee:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8024ff2:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8024ff6:	436a      	muls	r2, r5
 8024ff8:	ea40 0e0e 	orr.w	lr, r0, lr
 8024ffc:	fb0c 2204 	mla	r2, ip, r4, r2
 8025000:	9c05      	ldr	r4, [sp, #20]
 8025002:	fa1f f08e 	uxth.w	r0, lr
 8025006:	fb04 2707 	mla	r7, r4, r7, r2
 802500a:	9a02      	ldr	r2, [sp, #8]
 802500c:	1205      	asrs	r5, r0, #8
 802500e:	fb06 7303 	mla	r3, r6, r3, r7
 8025012:	10c7      	asrs	r7, r0, #3
 8025014:	00c0      	lsls	r0, r0, #3
 8025016:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 802501a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802501e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8025022:	b2c0      	uxtb	r0, r0
 8025024:	4353      	muls	r3, r2
 8025026:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 802502a:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 802502e:	1c5a      	adds	r2, r3, #1
 8025030:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8025034:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8025038:	121b      	asrs	r3, r3, #8
 802503a:	2bff      	cmp	r3, #255	; 0xff
 802503c:	d128      	bne.n	8025090 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x2d8>
 802503e:	7008      	strb	r0, [r1, #0]
 8025040:	704f      	strb	r7, [r1, #1]
 8025042:	708d      	strb	r5, [r1, #2]
 8025044:	70cb      	strb	r3, [r1, #3]
 8025046:	b007      	add	sp, #28
 8025048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802504c:	f04f 0c00 	mov.w	ip, #0
 8025050:	46e2      	mov	sl, ip
 8025052:	e6f6      	b.n	8024e42 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x8a>
 8025054:	2200      	movs	r2, #0
 8025056:	4694      	mov	ip, r2
 8025058:	9201      	str	r2, [sp, #4]
 802505a:	4692      	mov	sl, r2
 802505c:	e718      	b.n	8024e90 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 802505e:	2200      	movs	r2, #0
 8025060:	9201      	str	r2, [sp, #4]
 8025062:	e715      	b.n	8024e90 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 8025064:	4622      	mov	r2, r4
 8025066:	9401      	str	r4, [sp, #4]
 8025068:	e712      	b.n	8024e90 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0xd8>
 802506a:	2700      	movs	r7, #0
 802506c:	463e      	mov	r6, r7
 802506e:	e73f      	b.n	8024ef0 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x138>
 8025070:	2300      	movs	r3, #0
 8025072:	461f      	mov	r7, r3
 8025074:	461d      	mov	r5, r3
 8025076:	461e      	mov	r6, r3
 8025078:	e767      	b.n	8024f4a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 802507a:	4673      	mov	r3, lr
 802507c:	4677      	mov	r7, lr
 802507e:	4675      	mov	r5, lr
 8025080:	4676      	mov	r6, lr
 8025082:	e762      	b.n	8024f4a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8025084:	2300      	movs	r3, #0
 8025086:	461d      	mov	r5, r3
 8025088:	e75f      	b.n	8024f4a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 802508a:	4623      	mov	r3, r4
 802508c:	4625      	mov	r5, r4
 802508e:	e75c      	b.n	8024f4a <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x192>
 8025090:	b2dc      	uxtb	r4, r3
 8025092:	2b00      	cmp	r3, #0
 8025094:	d0d7      	beq.n	8025046 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28e>
 8025096:	f891 c003 	ldrb.w	ip, [r1, #3]
 802509a:	fb04 f20c 	mul.w	r2, r4, ip
 802509e:	eb0c 0304 	add.w	r3, ip, r4
 80250a2:	780c      	ldrb	r4, [r1, #0]
 80250a4:	1c56      	adds	r6, r2, #1
 80250a6:	eb06 2612 	add.w	r6, r6, r2, lsr #8
 80250aa:	1232      	asrs	r2, r6, #8
 80250ac:	ebac 0602 	sub.w	r6, ip, r2
 80250b0:	1a9b      	subs	r3, r3, r2
 80250b2:	9a02      	ldr	r2, [sp, #8]
 80250b4:	b2db      	uxtb	r3, r3
 80250b6:	fb10 f002 	smulbb	r0, r0, r2
 80250ba:	9a02      	ldr	r2, [sp, #8]
 80250bc:	fb06 0404 	mla	r4, r6, r4, r0
 80250c0:	fb12 f707 	smulbb	r7, r2, r7
 80250c4:	7848      	ldrb	r0, [r1, #1]
 80250c6:	788a      	ldrb	r2, [r1, #2]
 80250c8:	fb06 7000 	mla	r0, r6, r0, r7
 80250cc:	fb94 f4f3 	sdiv	r4, r4, r3
 80250d0:	fb90 f0f3 	sdiv	r0, r0, r3
 80250d4:	2cff      	cmp	r4, #255	; 0xff
 80250d6:	bfd6      	itet	le
 80250d8:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 80250dc:	24ff      	movgt	r4, #255	; 0xff
 80250de:	b2e4      	uxtble	r4, r4
 80250e0:	28ff      	cmp	r0, #255	; 0xff
 80250e2:	bfd4      	ite	le
 80250e4:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80250e8:	20ff      	movgt	r0, #255	; 0xff
 80250ea:	700c      	strb	r4, [r1, #0]
 80250ec:	bfd8      	it	le
 80250ee:	b2c0      	uxtble	r0, r0
 80250f0:	7048      	strb	r0, [r1, #1]
 80250f2:	9802      	ldr	r0, [sp, #8]
 80250f4:	fb10 f505 	smulbb	r5, r0, r5
 80250f8:	fb06 5202 	mla	r2, r6, r2, r5
 80250fc:	fb92 f2f3 	sdiv	r2, r2, r3
 8025100:	2aff      	cmp	r2, #255	; 0xff
 8025102:	bfd6      	itet	le
 8025104:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025108:	22ff      	movgt	r2, #255	; 0xff
 802510a:	b2d2      	uxtble	r2, r2
 802510c:	708a      	strb	r2, [r1, #2]
 802510e:	e799      	b.n	8025044 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh+0x28c>

08025110 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025114:	b097      	sub	sp, #92	; 0x5c
 8025116:	9214      	str	r2, [sp, #80]	; 0x50
 8025118:	9309      	str	r3, [sp, #36]	; 0x24
 802511a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 802511c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8025120:	9015      	str	r0, [sp, #84]	; 0x54
 8025122:	9112      	str	r1, [sp, #72]	; 0x48
 8025124:	6850      	ldr	r0, [r2, #4]
 8025126:	930a      	str	r3, [sp, #40]	; 0x28
 8025128:	6812      	ldr	r2, [r2, #0]
 802512a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 802512e:	fb00 1303 	mla	r3, r0, r3, r1
 8025132:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025136:	930b      	str	r3, [sp, #44]	; 0x2c
 8025138:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802513a:	681b      	ldr	r3, [r3, #0]
 802513c:	930c      	str	r3, [sp, #48]	; 0x30
 802513e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025140:	685b      	ldr	r3, [r3, #4]
 8025142:	930d      	str	r3, [sp, #52]	; 0x34
 8025144:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025146:	2b00      	cmp	r3, #0
 8025148:	dc03      	bgt.n	8025152 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 802514a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802514c:	2b00      	cmp	r3, #0
 802514e:	f340 8407 	ble.w	8025960 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8025152:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025154:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025158:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 802515c:	1e48      	subs	r0, r1, #1
 802515e:	1e55      	subs	r5, r2, #1
 8025160:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025162:	2b00      	cmp	r3, #0
 8025164:	f340 81b7 	ble.w	80254d6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 8025168:	9e21      	ldr	r6, [sp, #132]	; 0x84
 802516a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802516c:	1436      	asrs	r6, r6, #16
 802516e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025172:	d406      	bmi.n	8025182 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025174:	4286      	cmp	r6, r0
 8025176:	da04      	bge.n	8025182 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8025178:	2b00      	cmp	r3, #0
 802517a:	db02      	blt.n	8025182 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 802517c:	42ab      	cmp	r3, r5
 802517e:	f2c0 81ab 	blt.w	80254d8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c8>
 8025182:	3601      	adds	r6, #1
 8025184:	f100 8198 	bmi.w	80254b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8025188:	42b1      	cmp	r1, r6
 802518a:	f2c0 8195 	blt.w	80254b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802518e:	3301      	adds	r3, #1
 8025190:	f100 8192 	bmi.w	80254b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 8025194:	429a      	cmp	r2, r3
 8025196:	f2c0 818f 	blt.w	80254b8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
 802519a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802519c:	f64f 071f 	movw	r7, #63519	; 0xf81f
 80251a0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80251a2:	9313      	str	r3, [sp, #76]	; 0x4c
 80251a4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80251a6:	2b00      	cmp	r3, #0
 80251a8:	f340 81b7 	ble.w	802551a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 80251ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80251ae:	9e21      	ldr	r6, [sp, #132]	; 0x84
 80251b0:	1418      	asrs	r0, r3, #16
 80251b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80251b4:	1436      	asrs	r6, r6, #16
 80251b6:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80251ba:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80251bc:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 80251c0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80251c2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80251c6:	f100 820f 	bmi.w	80255e8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80251ca:	f102 3eff 	add.w	lr, r2, #4294967295
 80251ce:	4576      	cmp	r6, lr
 80251d0:	f280 820a 	bge.w	80255e8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80251d4:	2800      	cmp	r0, #0
 80251d6:	f2c0 8207 	blt.w	80255e8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80251da:	f103 3eff 	add.w	lr, r3, #4294967295
 80251de:	4570      	cmp	r0, lr
 80251e0:	f280 8202 	bge.w	80255e8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 80251e4:	b212      	sxth	r2, r2
 80251e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80251e8:	fa1f fe81 	uxth.w	lr, r1
 80251ec:	fb00 6002 	mla	r0, r0, r2, r6
 80251f0:	ea4f 160e 	mov.w	r6, lr, lsl #4
 80251f4:	eb03 0a00 	add.w	sl, r3, r0
 80251f8:	f813 9000 	ldrb.w	r9, [r3, r0]
 80251fc:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8025200:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025204:	b29b      	uxth	r3, r3
 8025206:	f1bc 0f00 	cmp.w	ip, #0
 802520a:	f000 81cc 	beq.w	80255a6 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 802520e:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025212:	eb0a 0b02 	add.w	fp, sl, r2
 8025216:	fa1f fa8c 	uxth.w	sl, ip
 802521a:	940e      	str	r4, [sp, #56]	; 0x38
 802521c:	fb0a fe0e 	mul.w	lr, sl, lr
 8025220:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025224:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025228:	eba6 060e 	sub.w	r6, r6, lr
 802522c:	940f      	str	r4, [sp, #60]	; 0x3c
 802522e:	fa1f fa8a 	uxth.w	sl, sl
 8025232:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8025234:	b2b6      	uxth	r6, r6
 8025236:	eba3 030a 	sub.w	r3, r3, sl
 802523a:	fb08 f606 	mul.w	r6, r8, r6
 802523e:	b29b      	uxth	r3, r3
 8025240:	fb09 6303 	mla	r3, r9, r3, r6
 8025244:	fb0a 3304 	mla	r3, sl, r4, r3
 8025248:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 802524a:	fb0e 3304 	mla	r3, lr, r4, r3
 802524e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025252:	2b00      	cmp	r3, #0
 8025254:	f000 8123 	beq.w	802549e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025258:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802525a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 802525e:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8025262:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025266:	f000 81a3 	beq.w	80255b0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a0>
 802526a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 802526e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025272:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025276:	fb0a fe0e 	mul.w	lr, sl, lr
 802527a:	fb09 f000 	mul.w	r0, r9, r0
 802527e:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8025282:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025286:	f100 0b20 	add.w	fp, r0, #32
 802528a:	44ce      	add	lr, r9
 802528c:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025290:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8025294:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025298:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 802529c:	ea4e 0909 	orr.w	r9, lr, r9
 80252a0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80252a4:	8870      	ldrh	r0, [r6, #2]
 80252a6:	d019      	beq.n	80252dc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 80252a8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 80252ac:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 80252b0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80252b4:	fb0a fe0e 	mul.w	lr, sl, lr
 80252b8:	fb08 f800 	mul.w	r8, r8, r0
 80252bc:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 80252c0:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80252c4:	f108 0b20 	add.w	fp, r8, #32
 80252c8:	4486      	add	lr, r0
 80252ca:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 80252ce:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80252d2:	0a00      	lsrs	r0, r0, #8
 80252d4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80252d8:	ea4e 0000 	orr.w	r0, lr, r0
 80252dc:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 80252e0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80252e4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80252e8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80252ec:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 80252f0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80252f4:	ea4e 0909 	orr.w	r9, lr, r9
 80252f8:	ea4a 0000 	orr.w	r0, sl, r0
 80252fc:	f1bc 0f00 	cmp.w	ip, #0
 8025300:	f000 8158 	beq.w	80255b4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>
 8025304:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025308:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 802530a:	3a01      	subs	r2, #1
 802530c:	2cff      	cmp	r4, #255	; 0xff
 802530e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025312:	f102 0202 	add.w	r2, r2, #2
 8025316:	eb06 0e02 	add.w	lr, r6, r2
 802531a:	5ab2      	ldrh	r2, [r6, r2]
 802531c:	d018      	beq.n	8025350 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 802531e:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8025322:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025326:	ea4f 08e4 	mov.w	r8, r4, asr #3
 802532a:	fb04 fa02 	mul.w	sl, r4, r2
 802532e:	fb08 f806 	mul.w	r8, r8, r6
 8025332:	f10a 0620 	add.w	r6, sl, #32
 8025336:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 802533a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802533e:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8025342:	4442      	add	r2, r8
 8025344:	0a36      	lsrs	r6, r6, #8
 8025346:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 802534a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 802534e:	4332      	orrs	r2, r6
 8025350:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8025352:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8025356:	2cff      	cmp	r4, #255	; 0xff
 8025358:	d01a      	beq.n	8025390 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 802535a:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 802535e:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025362:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025366:	fb04 fa06 	mul.w	sl, r4, r6
 802536a:	fb08 f80e 	mul.w	r8, r8, lr
 802536e:	f10a 0e20 	add.w	lr, sl, #32
 8025372:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8025376:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802537a:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802537e:	4446      	add	r6, r8
 8025380:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025384:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8025388:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 802538c:	ea46 060e 	orr.w	r6, r6, lr
 8025390:	fb1c fe01 	smulbb	lr, ip, r1
 8025394:	f1cc 0810 	rsb	r8, ip, #16
 8025398:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 802539c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 80253a0:	ea4f 0eee 	mov.w	lr, lr, asr #3
 80253a4:	eba8 0801 	sub.w	r8, r8, r1
 80253a8:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 80253ac:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80253b0:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 80253b4:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 80253b8:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80253bc:	ea4a 0202 	orr.w	r2, sl, r2
 80253c0:	4341      	muls	r1, r0
 80253c2:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 80253c6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80253ca:	fb09 1108 	mla	r1, r9, r8, r1
 80253ce:	ea4b 0606 	orr.w	r6, fp, r6
 80253d2:	fb0c 1102 	mla	r1, ip, r2, r1
 80253d6:	fb0e 1e06 	mla	lr, lr, r6, r1
 80253da:	ea4f 505e 	mov.w	r0, lr, lsr #21
 80253de:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 80253e2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80253e6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 80253ea:	ea40 0e0e 	orr.w	lr, r0, lr
 80253ee:	fa1f f08e 	uxth.w	r0, lr
 80253f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80253f4:	1206      	asrs	r6, r0, #8
 80253f6:	10c1      	asrs	r1, r0, #3
 80253f8:	4353      	muls	r3, r2
 80253fa:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80253fe:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8025402:	1c5a      	adds	r2, r3, #1
 8025404:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8025408:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 802540c:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8025410:	00c2      	lsls	r2, r0, #3
 8025412:	121b      	asrs	r3, r3, #8
 8025414:	b2d2      	uxtb	r2, r2
 8025416:	2bff      	cmp	r3, #255	; 0xff
 8025418:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802541c:	f000 80de 	beq.w	80255dc <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4cc>
 8025420:	b2d8      	uxtb	r0, r3
 8025422:	2b00      	cmp	r3, #0
 8025424:	d03b      	beq.n	802549e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025426:	f895 c003 	ldrb.w	ip, [r5, #3]
 802542a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802542c:	fb00 fe0c 	mul.w	lr, r0, ip
 8025430:	4460      	add	r0, ip
 8025432:	fb12 f204 	smulbb	r2, r2, r4
 8025436:	f10e 0301 	add.w	r3, lr, #1
 802543a:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 802543e:	121b      	asrs	r3, r3, #8
 8025440:	ebac 0c03 	sub.w	ip, ip, r3
 8025444:	1ac0      	subs	r0, r0, r3
 8025446:	782b      	ldrb	r3, [r5, #0]
 8025448:	b2c0      	uxtb	r0, r0
 802544a:	fb0c 2303 	mla	r3, ip, r3, r2
 802544e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025450:	70e8      	strb	r0, [r5, #3]
 8025452:	fb12 f101 	smulbb	r1, r2, r1
 8025456:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025458:	fb93 f3f0 	sdiv	r3, r3, r0
 802545c:	fb12 f606 	smulbb	r6, r2, r6
 8025460:	2bff      	cmp	r3, #255	; 0xff
 8025462:	bfd6      	itet	le
 8025464:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8025468:	23ff      	movgt	r3, #255	; 0xff
 802546a:	b2db      	uxtble	r3, r3
 802546c:	702b      	strb	r3, [r5, #0]
 802546e:	786b      	ldrb	r3, [r5, #1]
 8025470:	fb0c 1303 	mla	r3, ip, r3, r1
 8025474:	fb93 f3f0 	sdiv	r3, r3, r0
 8025478:	2bff      	cmp	r3, #255	; 0xff
 802547a:	bfd6      	itet	le
 802547c:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8025480:	23ff      	movgt	r3, #255	; 0xff
 8025482:	b2db      	uxtble	r3, r3
 8025484:	706b      	strb	r3, [r5, #1]
 8025486:	78ab      	ldrb	r3, [r5, #2]
 8025488:	fb0c 6303 	mla	r3, ip, r3, r6
 802548c:	fb93 f3f0 	sdiv	r3, r3, r0
 8025490:	2bff      	cmp	r3, #255	; 0xff
 8025492:	bfd6      	itet	le
 8025494:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8025498:	23ff      	movgt	r3, #255	; 0xff
 802549a:	b2db      	uxtble	r3, r3
 802549c:	70ab      	strb	r3, [r5, #2]
 802549e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80254a0:	3504      	adds	r5, #4
 80254a2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80254a4:	4413      	add	r3, r2
 80254a6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80254a8:	9321      	str	r3, [sp, #132]	; 0x84
 80254aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254ac:	441a      	add	r2, r3
 80254ae:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80254b0:	3b01      	subs	r3, #1
 80254b2:	9222      	str	r2, [sp, #136]	; 0x88
 80254b4:	9313      	str	r3, [sp, #76]	; 0x4c
 80254b6:	e675      	b.n	80251a4 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80254b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80254ba:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80254bc:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80254be:	4433      	add	r3, r6
 80254c0:	9321      	str	r3, [sp, #132]	; 0x84
 80254c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80254c4:	441c      	add	r4, r3
 80254c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254c8:	3b01      	subs	r3, #1
 80254ca:	9422      	str	r4, [sp, #136]	; 0x88
 80254cc:	9309      	str	r3, [sp, #36]	; 0x24
 80254ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80254d0:	3304      	adds	r3, #4
 80254d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80254d4:	e644      	b.n	8025160 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 80254d6:	d027      	beq.n	8025528 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x418>
 80254d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80254da:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80254dc:	3b01      	subs	r3, #1
 80254de:	9d21      	ldr	r5, [sp, #132]	; 0x84
 80254e0:	fb00 5003 	mla	r0, r0, r3, r5
 80254e4:	1400      	asrs	r0, r0, #16
 80254e6:	f53f ae58 	bmi.w	802519a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80254ea:	3901      	subs	r1, #1
 80254ec:	4288      	cmp	r0, r1
 80254ee:	f6bf ae54 	bge.w	802519a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80254f2:	9924      	ldr	r1, [sp, #144]	; 0x90
 80254f4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80254f6:	fb01 0303 	mla	r3, r1, r3, r0
 80254fa:	141b      	asrs	r3, r3, #16
 80254fc:	f53f ae4d 	bmi.w	802519a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025500:	3a01      	subs	r2, #1
 8025502:	4293      	cmp	r3, r2
 8025504:	f6bf ae49 	bge.w	802519a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8025508:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802550a:	f64f 071f 	movw	r7, #63519	; 0xf81f
 802550e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8025510:	9313      	str	r3, [sp, #76]	; 0x4c
 8025512:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025514:	2b00      	cmp	r3, #0
 8025516:	f300 8086 	bgt.w	8025626 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 802551a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802551c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8025520:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8025522:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8025526:	930b      	str	r3, [sp, #44]	; 0x2c
 8025528:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802552a:	2b00      	cmp	r3, #0
 802552c:	f340 8218 	ble.w	8025960 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x850>
 8025530:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8025534:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8025536:	ee30 0a04 	vadd.f32	s0, s0, s8
 802553a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802553e:	eef0 6a62 	vmov.f32	s13, s5
 8025542:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8025546:	ee31 1a05 	vadd.f32	s2, s2, s10
 802554a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802554e:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 8025552:	eef0 6a43 	vmov.f32	s13, s6
 8025556:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802555a:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 802555e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8025562:	ee61 7a27 	vmul.f32	s15, s2, s15
 8025566:	ee77 2a62 	vsub.f32	s5, s14, s5
 802556a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802556e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8025572:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8025576:	ee12 2a90 	vmov	r2, s5
 802557a:	eef0 2a47 	vmov.f32	s5, s14
 802557e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025582:	ee13 2a10 	vmov	r2, s6
 8025586:	9323      	str	r3, [sp, #140]	; 0x8c
 8025588:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802558a:	eeb0 3a67 	vmov.f32	s6, s15
 802558e:	fb92 f3f3 	sdiv	r3, r2, r3
 8025592:	9324      	str	r3, [sp, #144]	; 0x90
 8025594:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8025596:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8025598:	3b01      	subs	r3, #1
 802559a:	9312      	str	r3, [sp, #72]	; 0x48
 802559c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802559e:	bf08      	it	eq
 80255a0:	4613      	moveq	r3, r2
 80255a2:	9309      	str	r3, [sp, #36]	; 0x24
 80255a4:	e5ce      	b.n	8025144 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80255a6:	fb08 f606 	mul.w	r6, r8, r6
 80255aa:	fb09 6303 	mla	r3, r9, r3, r6
 80255ae:	e64e      	b.n	802524e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 80255b0:	4681      	mov	r9, r0
 80255b2:	e675      	b.n	80252a0 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 80255b4:	f1c1 0210 	rsb	r2, r1, #16
 80255b8:	4341      	muls	r1, r0
 80255ba:	fb09 1902 	mla	r9, r9, r2, r1
 80255be:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80255c2:	ea4f 5059 	mov.w	r0, r9, lsr #21
 80255c6:	ea4f 1959 	mov.w	r9, r9, lsr #5
 80255ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80255ce:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80255d2:	ea40 0909 	orr.w	r9, r0, r9
 80255d6:	fa1f f089 	uxth.w	r0, r9
 80255da:	e70a      	b.n	80253f2 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 80255dc:	0209      	lsls	r1, r1, #8
 80255de:	ea41 4606 	orr.w	r6, r1, r6, lsl #16
 80255e2:	4332      	orrs	r2, r6
 80255e4:	602a      	str	r2, [r5, #0]
 80255e6:	e75a      	b.n	802549e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80255e8:	f116 0e01 	adds.w	lr, r6, #1
 80255ec:	f53f af57 	bmi.w	802549e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80255f0:	4572      	cmp	r2, lr
 80255f2:	f6ff af54 	blt.w	802549e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80255f6:	f110 0e01 	adds.w	lr, r0, #1
 80255fa:	f53f af50 	bmi.w	802549e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 80255fe:	4573      	cmp	r3, lr
 8025600:	f6ff af4d 	blt.w	802549e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025604:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025606:	b21b      	sxth	r3, r3
 8025608:	b212      	sxth	r2, r2
 802560a:	9602      	str	r6, [sp, #8]
 802560c:	9301      	str	r3, [sp, #4]
 802560e:	9200      	str	r2, [sp, #0]
 8025610:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8025614:	e9cd c405 	strd	ip, r4, [sp, #20]
 8025618:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 802561c:	4629      	mov	r1, r5
 802561e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8025620:	f7ff fbca 	bl	8024db8 <_ZNK8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtPKhssiihhh>
 8025624:	e73b      	b.n	802549e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38e>
 8025626:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025628:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802562c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802562e:	f3c3 3603 	ubfx	r6, r3, #12, #4
 8025632:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8025634:	fa1f fe82 	uxth.w	lr, r2
 8025638:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 802563c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802563e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8025642:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8025646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025648:	141b      	asrs	r3, r3, #16
 802564a:	fb00 3c0c 	mla	ip, r0, ip, r3
 802564e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8025650:	eb03 0a0c 	add.w	sl, r3, ip
 8025654:	f813 900c 	ldrb.w	r9, [r3, ip]
 8025658:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 802565c:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025660:	b29b      	uxth	r3, r3
 8025662:	2e00      	cmp	r6, #0
 8025664:	f000 815c 	beq.w	8025920 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x810>
 8025668:	f81a 4000 	ldrb.w	r4, [sl, r0]
 802566c:	eb0a 0b00 	add.w	fp, sl, r0
 8025670:	fa1f fa86 	uxth.w	sl, r6
 8025674:	9410      	str	r4, [sp, #64]	; 0x40
 8025676:	fb0a fe0e 	mul.w	lr, sl, lr
 802567a:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802567e:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025682:	eba5 050e 	sub.w	r5, r5, lr
 8025686:	9411      	str	r4, [sp, #68]	; 0x44
 8025688:	fa1f fa8a 	uxth.w	sl, sl
 802568c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802568e:	b2ad      	uxth	r5, r5
 8025690:	eba3 030a 	sub.w	r3, r3, sl
 8025694:	fb08 f505 	mul.w	r5, r8, r5
 8025698:	b29b      	uxth	r3, r3
 802569a:	fb09 5303 	mla	r3, r9, r3, r5
 802569e:	fb0a 3304 	mla	r3, sl, r4, r3
 80256a2:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80256a4:	fb0e 3304 	mla	r3, lr, r4, r3
 80256a8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80256ac:	2b00      	cmp	r3, #0
 80256ae:	f000 812a 	beq.w	8025906 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 80256b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80256b4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80256b8:	eb04 054c 	add.w	r5, r4, ip, lsl #1
 80256bc:	f834 c01c 	ldrh.w	ip, [r4, ip, lsl #1]
 80256c0:	f000 8133 	beq.w	802592a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81a>
 80256c4:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 80256c8:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 80256cc:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80256d0:	fb0a fe0e 	mul.w	lr, sl, lr
 80256d4:	fb09 fc0c 	mul.w	ip, r9, ip
 80256d8:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 80256dc:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 80256e0:	f10c 0b20 	add.w	fp, ip, #32
 80256e4:	44ce      	add	lr, r9
 80256e6:	eb0b 291c 	add.w	r9, fp, ip, lsr #8
 80256ea:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 80256ee:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80256f2:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80256f6:	ea4e 0909 	orr.w	r9, lr, r9
 80256fa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80256fe:	f8b5 c002 	ldrh.w	ip, [r5, #2]
 8025702:	d01a      	beq.n	802573a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62a>
 8025704:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 8025708:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 802570c:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025710:	fb0a fe0e 	mul.w	lr, sl, lr
 8025714:	fb08 f80c 	mul.w	r8, r8, ip
 8025718:	ea07 1c5e 	and.w	ip, r7, lr, lsr #5
 802571c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025720:	f108 0b20 	add.w	fp, r8, #32
 8025724:	44e6      	add	lr, ip
 8025726:	eb0b 2c18 	add.w	ip, fp, r8, lsr #8
 802572a:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 802572e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8025732:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025736:	ea4e 0c0c 	orr.w	ip, lr, ip
 802573a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 802573e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025742:	ea4f 4a0c 	mov.w	sl, ip, lsl #16
 8025746:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 802574a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 802574e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025752:	ea4e 0909 	orr.w	r9, lr, r9
 8025756:	ea4a 0c0c 	orr.w	ip, sl, ip
 802575a:	2e00      	cmp	r6, #0
 802575c:	f000 80e7 	beq.w	802592e <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x81e>
 8025760:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8025764:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8025766:	3801      	subs	r0, #1
 8025768:	2cff      	cmp	r4, #255	; 0xff
 802576a:	ea4f 0040 	mov.w	r0, r0, lsl #1
 802576e:	f100 0002 	add.w	r0, r0, #2
 8025772:	eb05 0e00 	add.w	lr, r5, r0
 8025776:	5a28      	ldrh	r0, [r5, r0]
 8025778:	d018      	beq.n	80257ac <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x69c>
 802577a:	f420 65fc 	bic.w	r5, r0, #2016	; 0x7e0
 802577e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025782:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025786:	fb04 fa00 	mul.w	sl, r4, r0
 802578a:	fb08 f805 	mul.w	r8, r8, r5
 802578e:	f10a 0520 	add.w	r5, sl, #32
 8025792:	ea07 1058 	and.w	r0, r7, r8, lsr #5
 8025796:	f608 0801 	addw	r8, r8, #2049	; 0x801
 802579a:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 802579e:	4440      	add	r0, r8
 80257a0:	0a2d      	lsrs	r5, r5, #8
 80257a2:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 80257a6:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80257aa:	4328      	orrs	r0, r5
 80257ac:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80257ae:	f8be 5002 	ldrh.w	r5, [lr, #2]
 80257b2:	2cff      	cmp	r4, #255	; 0xff
 80257b4:	d01a      	beq.n	80257ec <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 80257b6:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 80257ba:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80257be:	ea4f 08e4 	mov.w	r8, r4, asr #3
 80257c2:	fb04 fa05 	mul.w	sl, r4, r5
 80257c6:	fb08 f80e 	mul.w	r8, r8, lr
 80257ca:	f10a 0e20 	add.w	lr, sl, #32
 80257ce:	ea07 1558 	and.w	r5, r7, r8, lsr #5
 80257d2:	f608 0801 	addw	r8, r8, #2049	; 0x801
 80257d6:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 80257da:	4445      	add	r5, r8
 80257dc:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80257e0:	ea07 1555 	and.w	r5, r7, r5, lsr #5
 80257e4:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 80257e8:	ea45 050e 	orr.w	r5, r5, lr
 80257ec:	fb16 fe02 	smulbb	lr, r6, r2
 80257f0:	f1c6 0810 	rsb	r8, r6, #16
 80257f4:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 80257f8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80257fc:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025800:	eba8 0802 	sub.w	r8, r8, r2
 8025804:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 8025808:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802580c:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 8025810:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025814:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025818:	ea4a 0000 	orr.w	r0, sl, r0
 802581c:	fb0c f202 	mul.w	r2, ip, r2
 8025820:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 8025824:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025828:	fb09 2208 	mla	r2, r9, r8, r2
 802582c:	ea4b 0505 	orr.w	r5, fp, r5
 8025830:	fb06 2200 	mla	r2, r6, r0, r2
 8025834:	fb0e 2205 	mla	r2, lr, r5, r2
 8025838:	ea4f 5c52 	mov.w	ip, r2, lsr #21
 802583c:	0952      	lsrs	r2, r2, #5
 802583e:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8025842:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 8025846:	ea4c 0c05 	orr.w	ip, ip, r5
 802584a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802584c:	fa1f fc8c 	uxth.w	ip, ip
 8025850:	4353      	muls	r3, r2
 8025852:	ea4f 262c 	mov.w	r6, ip, asr #8
 8025856:	ea4f 00ec 	mov.w	r0, ip, asr #3
 802585a:	1c5a      	adds	r2, r3, #1
 802585c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8025860:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025864:	eb02 2323 	add.w	r3, r2, r3, asr #8
 8025868:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 802586c:	121b      	asrs	r3, r3, #8
 802586e:	b2d2      	uxtb	r2, r2
 8025870:	2bff      	cmp	r3, #255	; 0xff
 8025872:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8025876:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 802587a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 802587e:	d069      	beq.n	8025954 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x844>
 8025880:	b2dd      	uxtb	r5, r3
 8025882:	2b00      	cmp	r3, #0
 8025884:	d03f      	beq.n	8025906 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8025886:	f891 c003 	ldrb.w	ip, [r1, #3]
 802588a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802588c:	fb05 fe0c 	mul.w	lr, r5, ip
 8025890:	4465      	add	r5, ip
 8025892:	f891 8000 	ldrb.w	r8, [r1]
 8025896:	fb12 f204 	smulbb	r2, r2, r4
 802589a:	f10e 0301 	add.w	r3, lr, #1
 802589e:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 80258a2:	121b      	asrs	r3, r3, #8
 80258a4:	1aed      	subs	r5, r5, r3
 80258a6:	ebac 0303 	sub.w	r3, ip, r3
 80258aa:	f891 c001 	ldrb.w	ip, [r1, #1]
 80258ae:	b2ed      	uxtb	r5, r5
 80258b0:	fb03 2208 	mla	r2, r3, r8, r2
 80258b4:	fb92 f2f5 	sdiv	r2, r2, r5
 80258b8:	2aff      	cmp	r2, #255	; 0xff
 80258ba:	70cd      	strb	r5, [r1, #3]
 80258bc:	bfd6      	itet	le
 80258be:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 80258c2:	22ff      	movgt	r2, #255	; 0xff
 80258c4:	b2d2      	uxtble	r2, r2
 80258c6:	700a      	strb	r2, [r1, #0]
 80258c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80258ca:	fb12 f000 	smulbb	r0, r2, r0
 80258ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80258d0:	fb03 000c 	mla	r0, r3, ip, r0
 80258d4:	fb12 f606 	smulbb	r6, r2, r6
 80258d8:	f891 c002 	ldrb.w	ip, [r1, #2]
 80258dc:	fb90 f0f5 	sdiv	r0, r0, r5
 80258e0:	fb03 630c 	mla	r3, r3, ip, r6
 80258e4:	28ff      	cmp	r0, #255	; 0xff
 80258e6:	fb93 f3f5 	sdiv	r3, r3, r5
 80258ea:	bfd6      	itet	le
 80258ec:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 80258f0:	20ff      	movgt	r0, #255	; 0xff
 80258f2:	b2c0      	uxtble	r0, r0
 80258f4:	2bff      	cmp	r3, #255	; 0xff
 80258f6:	bfd4      	ite	le
 80258f8:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 80258fc:	23ff      	movgt	r3, #255	; 0xff
 80258fe:	7048      	strb	r0, [r1, #1]
 8025900:	bfd8      	it	le
 8025902:	b2db      	uxtble	r3, r3
 8025904:	708b      	strb	r3, [r1, #2]
 8025906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025908:	3104      	adds	r1, #4
 802590a:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 802590c:	4413      	add	r3, r2
 802590e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8025910:	9321      	str	r3, [sp, #132]	; 0x84
 8025912:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025914:	441a      	add	r2, r3
 8025916:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8025918:	3b01      	subs	r3, #1
 802591a:	9222      	str	r2, [sp, #136]	; 0x88
 802591c:	9313      	str	r3, [sp, #76]	; 0x4c
 802591e:	e5f8      	b.n	8025512 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x402>
 8025920:	fb08 f505 	mul.w	r5, r8, r5
 8025924:	fb09 5303 	mla	r3, r9, r3, r5
 8025928:	e6be      	b.n	80256a8 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x598>
 802592a:	46e1      	mov	r9, ip
 802592c:	e6e5      	b.n	80256fa <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ea>
 802592e:	f1c2 0010 	rsb	r0, r2, #16
 8025932:	fb0c f202 	mul.w	r2, ip, r2
 8025936:	fb09 2900 	mla	r9, r9, r0, r2
 802593a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 802593e:	ea4f 5c59 	mov.w	ip, r9, lsr #21
 8025942:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8025946:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802594a:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802594e:	ea4c 0c09 	orr.w	ip, ip, r9
 8025952:	e77a      	b.n	802584a <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
 8025954:	0200      	lsls	r0, r0, #8
 8025956:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 802595a:	4302      	orrs	r2, r0
 802595c:	600a      	str	r2, [r1, #0]
 802595e:	e7d2      	b.n	8025906 <_ZN8touchgfx8LCD32bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f6>
 8025960:	b017      	add	sp, #92	; 0x5c
 8025962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08025966 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>:
 8025966:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802596a:	b085      	sub	sp, #20
 802596c:	e9dd 8010 	ldrd	r8, r0, [sp, #64]	; 0x40
 8025970:	f9bd 4038 	ldrsh.w	r4, [sp, #56]	; 0x38
 8025974:	2800      	cmp	r0, #0
 8025976:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 802597a:	fb00 8504 	mla	r5, r0, r4, r8
 802597e:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 8025982:	f89d c04c 	ldrb.w	ip, [sp, #76]	; 0x4c
 8025986:	eb02 0745 	add.w	r7, r2, r5, lsl #1
 802598a:	9702      	str	r7, [sp, #8]
 802598c:	eb03 0705 	add.w	r7, r3, r5
 8025990:	9703      	str	r7, [sp, #12]
 8025992:	f2c0 812e 	blt.w	8025bf2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 8025996:	4582      	cmp	sl, r0
 8025998:	f340 812b 	ble.w	8025bf2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x28c>
 802599c:	f1b8 0f00 	cmp.w	r8, #0
 80259a0:	f2c0 8122 	blt.w	8025be8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 80259a4:	4544      	cmp	r4, r8
 80259a6:	f340 811f 	ble.w	8025be8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x282>
 80259aa:	f813 e005 	ldrb.w	lr, [r3, r5]
 80259ae:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 80259b2:	ea4f 02ee 	mov.w	r2, lr, asr #3
 80259b6:	f423 67fc 	bic.w	r7, r3, #2016	; 0x7e0
 80259ba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80259be:	4357      	muls	r7, r2
 80259c0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80259c4:	fb0e f503 	mul.w	r5, lr, r3
 80259c8:	ea02 1357 	and.w	r3, r2, r7, lsr #5
 80259cc:	f607 0701 	addw	r7, r7, #2049	; 0x801
 80259d0:	441f      	add	r7, r3
 80259d2:	f105 0320 	add.w	r3, r5, #32
 80259d6:	eb03 2315 	add.w	r3, r3, r5, lsr #8
 80259da:	ea02 1257 	and.w	r2, r2, r7, lsr #5
 80259de:	0a1b      	lsrs	r3, r3, #8
 80259e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80259e4:	4313      	orrs	r3, r2
 80259e6:	9301      	str	r3, [sp, #4]
 80259e8:	f118 0301 	adds.w	r3, r8, #1
 80259ec:	f100 8106 	bmi.w	8025bfc <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 80259f0:	429c      	cmp	r4, r3
 80259f2:	f340 8103 	ble.w	8025bfc <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x296>
 80259f6:	2e00      	cmp	r6, #0
 80259f8:	f000 8103 	beq.w	8025c02 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x29c>
 80259fc:	9b03      	ldr	r3, [sp, #12]
 80259fe:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025a02:	785a      	ldrb	r2, [r3, #1]
 8025a04:	9b02      	ldr	r3, [sp, #8]
 8025a06:	10d7      	asrs	r7, r2, #3
 8025a08:	885b      	ldrh	r3, [r3, #2]
 8025a0a:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 8025a0e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a12:	436f      	muls	r7, r5
 8025a14:	4353      	muls	r3, r2
 8025a16:	ea0b 1957 	and.w	r9, fp, r7, lsr #5
 8025a1a:	f607 0701 	addw	r7, r7, #2049	; 0x801
 8025a1e:	444f      	add	r7, r9
 8025a20:	ea0b 1557 	and.w	r5, fp, r7, lsr #5
 8025a24:	f103 0b20 	add.w	fp, r3, #32
 8025a28:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8025a2c:	0a1b      	lsrs	r3, r3, #8
 8025a2e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a32:	431d      	orrs	r5, r3
 8025a34:	3001      	adds	r0, #1
 8025a36:	f100 80ea 	bmi.w	8025c0e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 8025a3a:	4582      	cmp	sl, r0
 8025a3c:	f340 80e7 	ble.w	8025c0e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a8>
 8025a40:	f1bc 0f00 	cmp.w	ip, #0
 8025a44:	f000 80e8 	beq.w	8025c18 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2b2>
 8025a48:	f1b8 0f00 	cmp.w	r8, #0
 8025a4c:	f2c0 80dc 	blt.w	8025c08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 8025a50:	4544      	cmp	r4, r8
 8025a52:	f340 80d9 	ble.w	8025c08 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2a2>
 8025a56:	9b03      	ldr	r3, [sp, #12]
 8025a58:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 8025a5c:	5d1f      	ldrb	r7, [r3, r4]
 8025a5e:	9b02      	ldr	r3, [sp, #8]
 8025a60:	ea4f 09e7 	mov.w	r9, r7, asr #3
 8025a64:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 8025a68:	f423 60fc 	bic.w	r0, r3, #2016	; 0x7e0
 8025a6c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a70:	fb09 f900 	mul.w	r9, r9, r0
 8025a74:	437b      	muls	r3, r7
 8025a76:	ea0b 1a59 	and.w	sl, fp, r9, lsr #5
 8025a7a:	f609 0901 	addw	r9, r9, #2049	; 0x801
 8025a7e:	44d1      	add	r9, sl
 8025a80:	ea0b 1059 	and.w	r0, fp, r9, lsr #5
 8025a84:	f103 0b20 	add.w	fp, r3, #32
 8025a88:	eb0b 2313 	add.w	r3, fp, r3, lsr #8
 8025a8c:	0a1b      	lsrs	r3, r3, #8
 8025a8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8025a92:	4318      	orrs	r0, r3
 8025a94:	f118 0801 	adds.w	r8, r8, #1
 8025a98:	f100 80c3 	bmi.w	8025c22 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 8025a9c:	4544      	cmp	r4, r8
 8025a9e:	f340 80c0 	ble.w	8025c22 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2bc>
 8025aa2:	2e00      	cmp	r6, #0
 8025aa4:	f000 80c0 	beq.w	8025c28 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c2>
 8025aa8:	f104 0801 	add.w	r8, r4, #1
 8025aac:	9b03      	ldr	r3, [sp, #12]
 8025aae:	9c02      	ldr	r4, [sp, #8]
 8025ab0:	f813 3008 	ldrb.w	r3, [r3, r8]
 8025ab4:	f834 4018 	ldrh.w	r4, [r4, r8, lsl #1]
 8025ab8:	ea4f 0ae3 	mov.w	sl, r3, asr #3
 8025abc:	f424 68fc 	bic.w	r8, r4, #2016	; 0x7e0
 8025ac0:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025ac4:	fb0a fa08 	mul.w	sl, sl, r8
 8025ac8:	fb03 f904 	mul.w	r9, r3, r4
 8025acc:	f64f 041f 	movw	r4, #63519	; 0xf81f
 8025ad0:	ea04 1b5a 	and.w	fp, r4, sl, lsr #5
 8025ad4:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 8025ad8:	44da      	add	sl, fp
 8025ada:	ea04 185a 	and.w	r8, r4, sl, lsr #5
 8025ade:	f109 0420 	add.w	r4, r9, #32
 8025ae2:	eb04 2419 	add.w	r4, r4, r9, lsr #8
 8025ae6:	0a24      	lsrs	r4, r4, #8
 8025ae8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 8025aec:	ea48 0404 	orr.w	r4, r8, r4
 8025af0:	fa1f f886 	uxth.w	r8, r6
 8025af4:	fa1f fa8c 	uxth.w	sl, ip
 8025af8:	fb08 fb0a 	mul.w	fp, r8, sl
 8025afc:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8025b00:	ebcb 1a0a 	rsb	sl, fp, sl, lsl #4
 8025b04:	f5c8 7980 	rsb	r9, r8, #256	; 0x100
 8025b08:	eba8 080b 	sub.w	r8, r8, fp
 8025b0c:	fa1f fa8a 	uxth.w	sl, sl
 8025b10:	fa1f f888 	uxth.w	r8, r8
 8025b14:	eba9 090a 	sub.w	r9, r9, sl
 8025b18:	fb02 f808 	mul.w	r8, r2, r8
 8025b1c:	9a01      	ldr	r2, [sp, #4]
 8025b1e:	fa1f f989 	uxth.w	r9, r9
 8025b22:	0412      	lsls	r2, r2, #16
 8025b24:	fb0e 8809 	mla	r8, lr, r9, r8
 8025b28:	f002 6efc 	and.w	lr, r2, #132120576	; 0x7e00000
 8025b2c:	9a01      	ldr	r2, [sp, #4]
 8025b2e:	fb0a 8707 	mla	r7, sl, r7, r8
 8025b32:	ea4f 4805 	mov.w	r8, r5, lsl #16
 8025b36:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025b3a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 8025b3e:	fb0b 7303 	mla	r3, fp, r3, r7
 8025b42:	fb16 f70c 	smulbb	r7, r6, ip
 8025b46:	ea4e 0202 	orr.w	r2, lr, r2
 8025b4a:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8025b4e:	f3c7 07c7 	ubfx	r7, r7, #3, #8
 8025b52:	f1cc 0e10 	rsb	lr, ip, #16
 8025b56:	ea48 0505 	orr.w	r5, r8, r5
 8025b5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025b5e:	ebae 0e06 	sub.w	lr, lr, r6
 8025b62:	ebc7 0646 	rsb	r6, r7, r6, lsl #1
 8025b66:	ebc7 0c4c 	rsb	ip, r7, ip, lsl #1
 8025b6a:	2bff      	cmp	r3, #255	; 0xff
 8025b6c:	fb06 f605 	mul.w	r6, r6, r5
 8025b70:	eb07 0e4e 	add.w	lr, r7, lr, lsl #1
 8025b74:	fb0e 6202 	mla	r2, lr, r2, r6
 8025b78:	ea4f 4604 	mov.w	r6, r4, lsl #16
 8025b7c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 8025b80:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 8025b84:	ea44 0406 	orr.w	r4, r4, r6
 8025b88:	fb07 2604 	mla	r6, r7, r4, r2
 8025b8c:	ea4f 4200 	mov.w	r2, r0, lsl #16
 8025b90:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025b94:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8025b98:	ea40 0002 	orr.w	r0, r0, r2
 8025b9c:	fb0c 6c00 	mla	ip, ip, r0, r6
 8025ba0:	ea4f 525c 	mov.w	r2, ip, lsr #21
 8025ba4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8025ba8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025bac:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8025bb0:	ea42 020c 	orr.w	r2, r2, ip
 8025bb4:	b292      	uxth	r2, r2
 8025bb6:	ea4f 2022 	mov.w	r0, r2, asr #8
 8025bba:	ea4f 05e2 	mov.w	r5, r2, asr #3
 8025bbe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8025bc2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8025bc6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8025bca:	b2d2      	uxtb	r2, r2
 8025bcc:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8025bd0:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8025bd4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025bd8:	d129      	bne.n	8025c2e <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x2c8>
 8025bda:	700a      	strb	r2, [r1, #0]
 8025bdc:	704d      	strb	r5, [r1, #1]
 8025bde:	7088      	strb	r0, [r1, #2]
 8025be0:	70cb      	strb	r3, [r1, #3]
 8025be2:	b005      	add	sp, #20
 8025be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025be8:	f04f 0e00 	mov.w	lr, #0
 8025bec:	f8cd e004 	str.w	lr, [sp, #4]
 8025bf0:	e6fa      	b.n	80259e8 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x82>
 8025bf2:	2200      	movs	r2, #0
 8025bf4:	4696      	mov	lr, r2
 8025bf6:	4615      	mov	r5, r2
 8025bf8:	9201      	str	r2, [sp, #4]
 8025bfa:	e71b      	b.n	8025a34 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8025bfc:	2200      	movs	r2, #0
 8025bfe:	4615      	mov	r5, r2
 8025c00:	e718      	b.n	8025a34 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8025c02:	4632      	mov	r2, r6
 8025c04:	4635      	mov	r5, r6
 8025c06:	e715      	b.n	8025a34 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0xce>
 8025c08:	2700      	movs	r7, #0
 8025c0a:	4638      	mov	r0, r7
 8025c0c:	e742      	b.n	8025a94 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x12e>
 8025c0e:	2300      	movs	r3, #0
 8025c10:	461f      	mov	r7, r3
 8025c12:	461c      	mov	r4, r3
 8025c14:	4618      	mov	r0, r3
 8025c16:	e76b      	b.n	8025af0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8025c18:	4663      	mov	r3, ip
 8025c1a:	4667      	mov	r7, ip
 8025c1c:	4664      	mov	r4, ip
 8025c1e:	4660      	mov	r0, ip
 8025c20:	e766      	b.n	8025af0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8025c22:	2300      	movs	r3, #0
 8025c24:	461c      	mov	r4, r3
 8025c26:	e763      	b.n	8025af0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8025c28:	4633      	mov	r3, r6
 8025c2a:	4634      	mov	r4, r6
 8025c2c:	e760      	b.n	8025af0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x18a>
 8025c2e:	2b00      	cmp	r3, #0
 8025c30:	d0d7      	beq.n	8025be2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27c>
 8025c32:	78cf      	ldrb	r7, [r1, #3]
 8025c34:	fb03 f607 	mul.w	r6, r3, r7
 8025c38:	443b      	add	r3, r7
 8025c3a:	1c74      	adds	r4, r6, #1
 8025c3c:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 8025c40:	780e      	ldrb	r6, [r1, #0]
 8025c42:	1224      	asrs	r4, r4, #8
 8025c44:	1b3f      	subs	r7, r7, r4
 8025c46:	1b1b      	subs	r3, r3, r4
 8025c48:	24ff      	movs	r4, #255	; 0xff
 8025c4a:	437e      	muls	r6, r7
 8025c4c:	b2db      	uxtb	r3, r3
 8025c4e:	fb14 6202 	smlabb	r2, r4, r2, r6
 8025c52:	fb92 f6f3 	sdiv	r6, r2, r3
 8025c56:	42a6      	cmp	r6, r4
 8025c58:	f04f 02ff 	mov.w	r2, #255	; 0xff
 8025c5c:	bfc8      	it	gt
 8025c5e:	4626      	movgt	r6, r4
 8025c60:	784c      	ldrb	r4, [r1, #1]
 8025c62:	bfd8      	it	le
 8025c64:	ea26 76e6 	bicle.w	r6, r6, r6, asr #31
 8025c68:	fb07 f404 	mul.w	r4, r7, r4
 8025c6c:	bfd8      	it	le
 8025c6e:	b2f6      	uxtble	r6, r6
 8025c70:	fb12 4505 	smlabb	r5, r2, r5, r4
 8025c74:	700e      	strb	r6, [r1, #0]
 8025c76:	fb95 f4f3 	sdiv	r4, r5, r3
 8025c7a:	4294      	cmp	r4, r2
 8025c7c:	bfd4      	ite	le
 8025c7e:	ea24 74e4 	bicle.w	r4, r4, r4, asr #31
 8025c82:	4614      	movgt	r4, r2
 8025c84:	788a      	ldrb	r2, [r1, #2]
 8025c86:	bfd8      	it	le
 8025c88:	b2e4      	uxtble	r4, r4
 8025c8a:	437a      	muls	r2, r7
 8025c8c:	704c      	strb	r4, [r1, #1]
 8025c8e:	24ff      	movs	r4, #255	; 0xff
 8025c90:	fb14 2000 	smlabb	r0, r4, r0, r2
 8025c94:	fb90 f2f3 	sdiv	r2, r0, r3
 8025c98:	42a2      	cmp	r2, r4
 8025c9a:	bfd6      	itet	le
 8025c9c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025ca0:	4622      	movgt	r2, r4
 8025ca2:	b2d2      	uxtble	r2, r2
 8025ca4:	708a      	strb	r2, [r1, #2]
 8025ca6:	e79b      	b.n	8025be0 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh+0x27a>

08025ca8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8025ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025cac:	b093      	sub	sp, #76	; 0x4c
 8025cae:	9210      	str	r2, [sp, #64]	; 0x40
 8025cb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025cb2:	9011      	str	r0, [sp, #68]	; 0x44
 8025cb4:	910e      	str	r1, [sp, #56]	; 0x38
 8025cb6:	6850      	ldr	r0, [r2, #4]
 8025cb8:	9306      	str	r3, [sp, #24]
 8025cba:	6812      	ldr	r2, [r2, #0]
 8025cbc:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 8025cc0:	fb00 1303 	mla	r3, r0, r3, r1
 8025cc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8025cc8:	9307      	str	r3, [sp, #28]
 8025cca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ccc:	681b      	ldr	r3, [r3, #0]
 8025cce:	9308      	str	r3, [sp, #32]
 8025cd0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025cd2:	685b      	ldr	r3, [r3, #4]
 8025cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8025cd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8025cd8:	2b00      	cmp	r3, #0
 8025cda:	dc03      	bgt.n	8025ce4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8025cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8025cde:	2b00      	cmp	r3, #0
 8025ce0:	f340 83f9 	ble.w	80264d6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 8025ce4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025ce6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8025cea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8025cee:	1e48      	subs	r0, r1, #1
 8025cf0:	1e55      	subs	r5, r2, #1
 8025cf2:	9b06      	ldr	r3, [sp, #24]
 8025cf4:	2b00      	cmp	r3, #0
 8025cf6:	f340 81b4 	ble.w	8026062 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 8025cfa:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8025cfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025cfe:	1436      	asrs	r6, r6, #16
 8025d00:	ea4f 4323 	mov.w	r3, r3, asr #16
 8025d04:	d406      	bmi.n	8025d14 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d06:	4286      	cmp	r6, r0
 8025d08:	da04      	bge.n	8025d14 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d0a:	2b00      	cmp	r3, #0
 8025d0c:	db02      	blt.n	8025d14 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8025d0e:	42ab      	cmp	r3, r5
 8025d10:	f2c0 81a8 	blt.w	8026064 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3bc>
 8025d14:	3601      	adds	r6, #1
 8025d16:	f100 8195 	bmi.w	8026044 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025d1a:	42b1      	cmp	r1, r6
 8025d1c:	f2c0 8192 	blt.w	8026044 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025d20:	3301      	adds	r3, #1
 8025d22:	f100 818f 	bmi.w	8026044 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025d26:	429a      	cmp	r2, r3
 8025d28:	f2c0 818c 	blt.w	8026044 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8025d2c:	9b06      	ldr	r3, [sp, #24]
 8025d2e:	f64f 071f 	movw	r7, #63519	; 0xf81f
 8025d32:	9d07      	ldr	r5, [sp, #28]
 8025d34:	930f      	str	r3, [sp, #60]	; 0x3c
 8025d36:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8025d38:	2b00      	cmp	r3, #0
 8025d3a:	f340 81b5 	ble.w	80260a8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 8025d3e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025d40:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8025d42:	1418      	asrs	r0, r3, #16
 8025d44:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8025d46:	1436      	asrs	r6, r6, #16
 8025d48:	f3c3 3103 	ubfx	r1, r3, #12, #4
 8025d4c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8025d4e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 8025d52:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8025d54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8025d58:	f100 820e 	bmi.w	8026178 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025d5c:	f102 3eff 	add.w	lr, r2, #4294967295
 8025d60:	4576      	cmp	r6, lr
 8025d62:	f280 8209 	bge.w	8026178 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025d66:	2800      	cmp	r0, #0
 8025d68:	f2c0 8206 	blt.w	8026178 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025d6c:	f103 3eff 	add.w	lr, r3, #4294967295
 8025d70:	4570      	cmp	r0, lr
 8025d72:	f280 8201 	bge.w	8026178 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d0>
 8025d76:	b212      	sxth	r2, r2
 8025d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025d7a:	fa1f fe81 	uxth.w	lr, r1
 8025d7e:	fb00 6002 	mla	r0, r0, r2, r6
 8025d82:	ea4f 160e 	mov.w	r6, lr, lsl #4
 8025d86:	eb03 0a00 	add.w	sl, r3, r0
 8025d8a:	f813 9000 	ldrb.w	r9, [r3, r0]
 8025d8e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 8025d92:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8025d96:	b29b      	uxth	r3, r3
 8025d98:	f1bc 0f00 	cmp.w	ip, #0
 8025d9c:	f000 81ca 	beq.w	8026134 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
 8025da0:	f81a 4002 	ldrb.w	r4, [sl, r2]
 8025da4:	eb0a 0b02 	add.w	fp, sl, r2
 8025da8:	fa1f fa8c 	uxth.w	sl, ip
 8025dac:	940a      	str	r4, [sp, #40]	; 0x28
 8025dae:	fb0a fe0e 	mul.w	lr, sl, lr
 8025db2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 8025db6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 8025dba:	eba6 060e 	sub.w	r6, r6, lr
 8025dbe:	940b      	str	r4, [sp, #44]	; 0x2c
 8025dc0:	fa1f fa8a 	uxth.w	sl, sl
 8025dc4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025dc6:	b2b6      	uxth	r6, r6
 8025dc8:	eba3 030a 	sub.w	r3, r3, sl
 8025dcc:	fb08 f606 	mul.w	r6, r8, r6
 8025dd0:	b29b      	uxth	r3, r3
 8025dd2:	fb09 6303 	mla	r3, r9, r3, r6
 8025dd6:	fb0a 3304 	mla	r3, sl, r4, r3
 8025dda:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025ddc:	fb0e 3304 	mla	r3, lr, r4, r3
 8025de0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8025de4:	2b00      	cmp	r3, #0
 8025de6:	f000 8120 	beq.w	802602a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8025dea:	9c08      	ldr	r4, [sp, #32]
 8025dec:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8025df0:	eb04 0640 	add.w	r6, r4, r0, lsl #1
 8025df4:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 8025df8:	f000 81a1 	beq.w	802613e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 8025dfc:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025e00:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8025e04:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025e08:	fb0a fe0e 	mul.w	lr, sl, lr
 8025e0c:	fb09 f000 	mul.w	r0, r9, r0
 8025e10:	ea07 195e 	and.w	r9, r7, lr, lsr #5
 8025e14:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025e18:	f100 0b20 	add.w	fp, r0, #32
 8025e1c:	44ce      	add	lr, r9
 8025e1e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 8025e22:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8025e26:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8025e2a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8025e2e:	ea4e 0909 	orr.w	r9, lr, r9
 8025e32:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8025e36:	8870      	ldrh	r0, [r6, #2]
 8025e38:	d019      	beq.n	8025e6e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8025e3a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 8025e3e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8025e42:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025e46:	fb0a fe0e 	mul.w	lr, sl, lr
 8025e4a:	fb08 f800 	mul.w	r8, r8, r0
 8025e4e:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8025e52:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8025e56:	f108 0b20 	add.w	fp, r8, #32
 8025e5a:	4486      	add	lr, r0
 8025e5c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 8025e60:	ea07 1e5e 	and.w	lr, r7, lr, lsr #5
 8025e64:	0a00      	lsrs	r0, r0, #8
 8025e66:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8025e6a:	ea4e 0000 	orr.w	r0, lr, r0
 8025e6e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8025e72:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8025e76:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8025e7a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8025e7e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8025e82:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025e86:	ea4e 0909 	orr.w	r9, lr, r9
 8025e8a:	ea4a 0000 	orr.w	r0, sl, r0
 8025e8e:	f1bc 0f00 	cmp.w	ip, #0
 8025e92:	f000 8156 	beq.w	8026142 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49a>
 8025e96:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 8025e9a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8025e9c:	3a01      	subs	r2, #1
 8025e9e:	2cff      	cmp	r4, #255	; 0xff
 8025ea0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8025ea4:	f102 0202 	add.w	r2, r2, #2
 8025ea8:	eb06 0e02 	add.w	lr, r6, r2
 8025eac:	5ab2      	ldrh	r2, [r6, r2]
 8025eae:	d018      	beq.n	8025ee2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
 8025eb0:	f422 66fc 	bic.w	r6, r2, #2016	; 0x7e0
 8025eb4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8025eb8:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025ebc:	fb04 fa02 	mul.w	sl, r4, r2
 8025ec0:	fb08 f806 	mul.w	r8, r8, r6
 8025ec4:	f10a 0620 	add.w	r6, sl, #32
 8025ec8:	ea07 1258 	and.w	r2, r7, r8, lsr #5
 8025ecc:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025ed0:	eb06 261a 	add.w	r6, r6, sl, lsr #8
 8025ed4:	4442      	add	r2, r8
 8025ed6:	0a36      	lsrs	r6, r6, #8
 8025ed8:	ea07 1252 	and.w	r2, r7, r2, lsr #5
 8025edc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025ee0:	4332      	orrs	r2, r6
 8025ee2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8025ee4:	f8be 6002 	ldrh.w	r6, [lr, #2]
 8025ee8:	2cff      	cmp	r4, #255	; 0xff
 8025eea:	d01a      	beq.n	8025f22 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8025eec:	f426 6efc 	bic.w	lr, r6, #2016	; 0x7e0
 8025ef0:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8025ef4:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8025ef8:	fb04 fa06 	mul.w	sl, r4, r6
 8025efc:	fb08 f80e 	mul.w	r8, r8, lr
 8025f00:	f10a 0e20 	add.w	lr, sl, #32
 8025f04:	ea07 1658 	and.w	r6, r7, r8, lsr #5
 8025f08:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8025f0c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 8025f10:	4446      	add	r6, r8
 8025f12:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8025f16:	ea07 1656 	and.w	r6, r7, r6, lsr #5
 8025f1a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8025f1e:	ea46 060e 	orr.w	r6, r6, lr
 8025f22:	fb1c fe01 	smulbb	lr, ip, r1
 8025f26:	f1cc 0810 	rsb	r8, ip, #16
 8025f2a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 8025f2e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8025f32:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8025f36:	eba8 0801 	sub.w	r8, r8, r1
 8025f3a:	ea4f 4b06 	mov.w	fp, r6, lsl #16
 8025f3e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8025f42:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 8025f46:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8025f4a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 8025f4e:	ea4a 0202 	orr.w	r2, sl, r2
 8025f52:	4341      	muls	r1, r0
 8025f54:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 8025f58:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8025f5c:	fb09 1108 	mla	r1, r9, r8, r1
 8025f60:	ea4b 0606 	orr.w	r6, fp, r6
 8025f64:	fb0c 1102 	mla	r1, ip, r2, r1
 8025f68:	fb0e 1e06 	mla	lr, lr, r6, r1
 8025f6c:	ea4f 515e 	mov.w	r1, lr, lsr #21
 8025f70:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8025f74:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8025f78:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 8025f7c:	ea41 0e0e 	orr.w	lr, r1, lr
 8025f80:	fa1f f18e 	uxth.w	r1, lr
 8025f84:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8025f88:	2bff      	cmp	r3, #255	; 0xff
 8025f8a:	ea4f 00e1 	mov.w	r0, r1, asr #3
 8025f8e:	ea4f 02c1 	mov.w	r2, r1, lsl #3
 8025f92:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8025f96:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8025f9a:	b2d2      	uxtb	r2, r2
 8025f9c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8025fa0:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8025fa4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8025fa8:	f000 80df 	beq.w	802616a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8025fac:	f895 8003 	ldrb.w	r8, [r5, #3]
 8025fb0:	24ff      	movs	r4, #255	; 0xff
 8025fb2:	fb03 f608 	mul.w	r6, r3, r8
 8025fb6:	4443      	add	r3, r8
 8025fb8:	1c71      	adds	r1, r6, #1
 8025fba:	eb01 2126 	add.w	r1, r1, r6, asr #8
 8025fbe:	782e      	ldrb	r6, [r5, #0]
 8025fc0:	1209      	asrs	r1, r1, #8
 8025fc2:	1a5b      	subs	r3, r3, r1
 8025fc4:	eba8 0101 	sub.w	r1, r8, r1
 8025fc8:	f895 8002 	ldrb.w	r8, [r5, #2]
 8025fcc:	434e      	muls	r6, r1
 8025fce:	b2db      	uxtb	r3, r3
 8025fd0:	fb14 6202 	smlabb	r2, r4, r2, r6
 8025fd4:	24ff      	movs	r4, #255	; 0xff
 8025fd6:	70eb      	strb	r3, [r5, #3]
 8025fd8:	fb92 f2f3 	sdiv	r2, r2, r3
 8025fdc:	2aff      	cmp	r2, #255	; 0xff
 8025fde:	bfd6      	itet	le
 8025fe0:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8025fe4:	22ff      	movgt	r2, #255	; 0xff
 8025fe6:	b2d2      	uxtble	r2, r2
 8025fe8:	702a      	strb	r2, [r5, #0]
 8025fea:	786a      	ldrb	r2, [r5, #1]
 8025fec:	434a      	muls	r2, r1
 8025fee:	fb01 f108 	mul.w	r1, r1, r8
 8025ff2:	fb14 2000 	smlabb	r0, r4, r0, r2
 8025ff6:	22ff      	movs	r2, #255	; 0xff
 8025ff8:	fb90 f0f3 	sdiv	r0, r0, r3
 8025ffc:	fb12 1c0c 	smlabb	ip, r2, ip, r1
 8026000:	28ff      	cmp	r0, #255	; 0xff
 8026002:	fb9c fcf3 	sdiv	ip, ip, r3
 8026006:	bfd6      	itet	le
 8026008:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 802600c:	20ff      	movgt	r0, #255	; 0xff
 802600e:	b2c0      	uxtble	r0, r0
 8026010:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8026014:	bfd4      	ite	le
 8026016:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 802601a:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 802601e:	7068      	strb	r0, [r5, #1]
 8026020:	bfd8      	it	le
 8026022:	fa5f fc8c 	uxtble.w	ip, ip
 8026026:	f885 c002 	strb.w	ip, [r5, #2]
 802602a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802602c:	3504      	adds	r5, #4
 802602e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026030:	4413      	add	r3, r2
 8026032:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8026034:	931d      	str	r3, [sp, #116]	; 0x74
 8026036:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026038:	441a      	add	r2, r3
 802603a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802603c:	3b01      	subs	r3, #1
 802603e:	921e      	str	r2, [sp, #120]	; 0x78
 8026040:	930f      	str	r3, [sp, #60]	; 0x3c
 8026042:	e678      	b.n	8025d36 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8026044:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026046:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8026048:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 802604a:	4433      	add	r3, r6
 802604c:	931d      	str	r3, [sp, #116]	; 0x74
 802604e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026050:	441c      	add	r4, r3
 8026052:	9b06      	ldr	r3, [sp, #24]
 8026054:	3b01      	subs	r3, #1
 8026056:	941e      	str	r4, [sp, #120]	; 0x78
 8026058:	9306      	str	r3, [sp, #24]
 802605a:	9b07      	ldr	r3, [sp, #28]
 802605c:	3304      	adds	r3, #4
 802605e:	9307      	str	r3, [sp, #28]
 8026060:	e647      	b.n	8025cf2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8026062:	d028      	beq.n	80260b6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40e>
 8026064:	9b06      	ldr	r3, [sp, #24]
 8026066:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8026068:	3b01      	subs	r3, #1
 802606a:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 802606c:	fb00 5003 	mla	r0, r0, r3, r5
 8026070:	1400      	asrs	r0, r0, #16
 8026072:	f53f ae5b 	bmi.w	8025d2c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026076:	3901      	subs	r1, #1
 8026078:	4288      	cmp	r0, r1
 802607a:	f6bf ae57 	bge.w	8025d2c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802607e:	9920      	ldr	r1, [sp, #128]	; 0x80
 8026080:	981e      	ldr	r0, [sp, #120]	; 0x78
 8026082:	fb01 0303 	mla	r3, r1, r3, r0
 8026086:	141b      	asrs	r3, r3, #16
 8026088:	f53f ae50 	bmi.w	8025d2c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 802608c:	3a01      	subs	r2, #1
 802608e:	4293      	cmp	r3, r2
 8026090:	f6bf ae4c 	bge.w	8025d2c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026094:	9b07      	ldr	r3, [sp, #28]
 8026096:	f64f 071f 	movw	r7, #63519	; 0xf81f
 802609a:	1d19      	adds	r1, r3, #4
 802609c:	9b06      	ldr	r3, [sp, #24]
 802609e:	930f      	str	r3, [sp, #60]	; 0x3c
 80260a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80260a2:	2b00      	cmp	r3, #0
 80260a4:	f300 8085 	bgt.w	80261b2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50a>
 80260a8:	9b06      	ldr	r3, [sp, #24]
 80260aa:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80260ae:	9b07      	ldr	r3, [sp, #28]
 80260b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80260b4:	9307      	str	r3, [sp, #28]
 80260b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80260b8:	2b00      	cmp	r3, #0
 80260ba:	f340 820c 	ble.w	80264d6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82e>
 80260be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80260c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80260c4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80260c8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80260cc:	eef0 6a62 	vmov.f32	s13, s5
 80260d0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80260d4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80260d8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80260dc:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 80260e0:	eef0 6a43 	vmov.f32	s13, s6
 80260e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80260e8:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 80260ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80260f0:	ee61 7a27 	vmul.f32	s15, s2, s15
 80260f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80260f8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80260fc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026100:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026104:	ee12 2a90 	vmov	r2, s5
 8026108:	eef0 2a47 	vmov.f32	s5, s14
 802610c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026110:	ee13 2a10 	vmov	r2, s6
 8026114:	931f      	str	r3, [sp, #124]	; 0x7c
 8026116:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026118:	eeb0 3a67 	vmov.f32	s6, s15
 802611c:	fb92 f3f3 	sdiv	r3, r2, r3
 8026120:	9320      	str	r3, [sp, #128]	; 0x80
 8026122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8026124:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026126:	3b01      	subs	r3, #1
 8026128:	930e      	str	r3, [sp, #56]	; 0x38
 802612a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802612c:	bf08      	it	eq
 802612e:	4613      	moveq	r3, r2
 8026130:	9306      	str	r3, [sp, #24]
 8026132:	e5d0      	b.n	8025cd6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8026134:	fb08 f606 	mul.w	r6, r8, r6
 8026138:	fb09 6303 	mla	r3, r9, r3, r6
 802613c:	e650      	b.n	8025de0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 802613e:	4681      	mov	r9, r0
 8026140:	e677      	b.n	8025e32 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8026142:	f1c1 0210 	rsb	r2, r1, #16
 8026146:	4341      	muls	r1, r0
 8026148:	fb09 1902 	mla	r9, r9, r2, r1
 802614c:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8026150:	ea4f 5159 	mov.w	r1, r9, lsr #21
 8026154:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8026158:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802615c:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 8026160:	ea41 0909 	orr.w	r9, r1, r9
 8026164:	fa1f f189 	uxth.w	r1, r9
 8026168:	e70c      	b.n	8025f84 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
 802616a:	0200      	lsls	r0, r0, #8
 802616c:	ea40 4c0c 	orr.w	ip, r0, ip, lsl #16
 8026170:	ea4c 0202 	orr.w	r2, ip, r2
 8026174:	602a      	str	r2, [r5, #0]
 8026176:	e758      	b.n	802602a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8026178:	f116 0e01 	adds.w	lr, r6, #1
 802617c:	f53f af55 	bmi.w	802602a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8026180:	4572      	cmp	r2, lr
 8026182:	f6ff af52 	blt.w	802602a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8026186:	f110 0e01 	adds.w	lr, r0, #1
 802618a:	f53f af4e 	bmi.w	802602a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 802618e:	4573      	cmp	r3, lr
 8026190:	f6ff af4b 	blt.w	802602a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 8026194:	b21b      	sxth	r3, r3
 8026196:	b212      	sxth	r2, r2
 8026198:	9301      	str	r3, [sp, #4]
 802619a:	9200      	str	r2, [sp, #0]
 802619c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 80261a0:	e9cd 6002 	strd	r6, r0, [sp, #8]
 80261a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80261a8:	4629      	mov	r1, r5
 80261aa:	9811      	ldr	r0, [sp, #68]	; 0x44
 80261ac:	f7ff fbdb 	bl	8025966 <_ZNK8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtPKhssiihh>
 80261b0:	e73b      	b.n	802602a <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x382>
 80261b2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80261b4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80261b8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80261ba:	f3c3 3603 	ubfx	r6, r3, #12, #4
 80261be:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80261c0:	fa1f fe82 	uxth.w	lr, r2
 80261c4:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80261c8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80261ca:	ea4f 150e 	mov.w	r5, lr, lsl #4
 80261ce:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80261d2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80261d4:	141b      	asrs	r3, r3, #16
 80261d6:	fb00 3c0c 	mla	ip, r0, ip, r3
 80261da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80261dc:	eb03 0a0c 	add.w	sl, r3, ip
 80261e0:	f813 900c 	ldrb.w	r9, [r3, ip]
 80261e4:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 80261e8:	f89a 8001 	ldrb.w	r8, [sl, #1]
 80261ec:	b29b      	uxth	r3, r3
 80261ee:	2e00      	cmp	r6, #0
 80261f0:	f000 8152 	beq.w	8026498 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7f0>
 80261f4:	f81a 4000 	ldrb.w	r4, [sl, r0]
 80261f8:	eb0a 0b00 	add.w	fp, sl, r0
 80261fc:	fa1f fa86 	uxth.w	sl, r6
 8026200:	940c      	str	r4, [sp, #48]	; 0x30
 8026202:	fb0a fe0e 	mul.w	lr, sl, lr
 8026206:	f89b 4001 	ldrb.w	r4, [fp, #1]
 802620a:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 802620e:	eba5 050e 	sub.w	r5, r5, lr
 8026212:	940d      	str	r4, [sp, #52]	; 0x34
 8026214:	fa1f fa8a 	uxth.w	sl, sl
 8026218:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 802621a:	b2ad      	uxth	r5, r5
 802621c:	eba3 030a 	sub.w	r3, r3, sl
 8026220:	fb08 f505 	mul.w	r5, r8, r5
 8026224:	b29b      	uxth	r3, r3
 8026226:	fb09 5303 	mla	r3, r9, r3, r5
 802622a:	fb0a 3304 	mla	r3, sl, r4, r3
 802622e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8026230:	fb0e 3304 	mla	r3, lr, r4, r3
 8026234:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8026238:	2b00      	cmp	r3, #0
 802623a:	f000 8120 	beq.w	802647e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 802623e:	9c08      	ldr	r4, [sp, #32]
 8026240:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8026244:	eb04 0e4c 	add.w	lr, r4, ip, lsl #1
 8026248:	f834 501c 	ldrh.w	r5, [r4, ip, lsl #1]
 802624c:	f000 8129 	beq.w	80264a2 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fa>
 8026250:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 8026254:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 8026258:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802625c:	fb0a fc0c 	mul.w	ip, sl, ip
 8026260:	fb09 f505 	mul.w	r5, r9, r5
 8026264:	ea07 195c 	and.w	r9, r7, ip, lsr #5
 8026268:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 802626c:	f105 0b20 	add.w	fp, r5, #32
 8026270:	44cc      	add	ip, r9
 8026272:	eb0b 2915 	add.w	r9, fp, r5, lsr #8
 8026276:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 802627a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802627e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8026282:	ea4c 0909 	orr.w	r9, ip, r9
 8026286:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 802628a:	f8be 5002 	ldrh.w	r5, [lr, #2]
 802628e:	d019      	beq.n	80262c4 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 8026290:	f425 6cfc 	bic.w	ip, r5, #2016	; 0x7e0
 8026294:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 8026298:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 802629c:	fb0a fc0c 	mul.w	ip, sl, ip
 80262a0:	fb08 f805 	mul.w	r8, r8, r5
 80262a4:	ea07 155c 	and.w	r5, r7, ip, lsr #5
 80262a8:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 80262ac:	f108 0b20 	add.w	fp, r8, #32
 80262b0:	44ac      	add	ip, r5
 80262b2:	eb0b 2518 	add.w	r5, fp, r8, lsr #8
 80262b6:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 80262ba:	0a2d      	lsrs	r5, r5, #8
 80262bc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80262c0:	ea4c 0505 	orr.w	r5, ip, r5
 80262c4:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 80262c8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 80262cc:	ea4f 4a05 	mov.w	sl, r5, lsl #16
 80262d0:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 80262d4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 80262d8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80262dc:	ea4c 0909 	orr.w	r9, ip, r9
 80262e0:	ea4a 0505 	orr.w	r5, sl, r5
 80262e4:	2e00      	cmp	r6, #0
 80262e6:	f000 80de 	beq.w	80264a6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7fe>
 80262ea:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80262ee:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80262f0:	3801      	subs	r0, #1
 80262f2:	2cff      	cmp	r4, #255	; 0xff
 80262f4:	ea4f 0040 	mov.w	r0, r0, lsl #1
 80262f8:	f100 0002 	add.w	r0, r0, #2
 80262fc:	eb0e 0800 	add.w	r8, lr, r0
 8026300:	f83e 0000 	ldrh.w	r0, [lr, r0]
 8026304:	d01a      	beq.n	802633c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x694>
 8026306:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 802630a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802630e:	ea4f 0ee4 	mov.w	lr, r4, asr #3
 8026312:	fb04 fa00 	mul.w	sl, r4, r0
 8026316:	fb0e fe0c 	mul.w	lr, lr, ip
 802631a:	f10a 0c20 	add.w	ip, sl, #32
 802631e:	ea07 105e 	and.w	r0, r7, lr, lsr #5
 8026322:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 8026326:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 802632a:	4470      	add	r0, lr
 802632c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8026330:	ea07 1050 	and.w	r0, r7, r0, lsr #5
 8026334:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8026338:	ea40 000c 	orr.w	r0, r0, ip
 802633c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802633e:	f8b8 c002 	ldrh.w	ip, [r8, #2]
 8026342:	2cff      	cmp	r4, #255	; 0xff
 8026344:	d01a      	beq.n	802637c <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d4>
 8026346:	f42c 6efc 	bic.w	lr, ip, #2016	; 0x7e0
 802634a:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 802634e:	ea4f 08e4 	mov.w	r8, r4, asr #3
 8026352:	fb04 fa0c 	mul.w	sl, r4, ip
 8026356:	fb08 f80e 	mul.w	r8, r8, lr
 802635a:	f10a 0e20 	add.w	lr, sl, #32
 802635e:	ea07 1c58 	and.w	ip, r7, r8, lsr #5
 8026362:	f608 0801 	addw	r8, r8, #2049	; 0x801
 8026366:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 802636a:	44c4      	add	ip, r8
 802636c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8026370:	ea07 1c5c 	and.w	ip, r7, ip, lsr #5
 8026374:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 8026378:	ea4c 0c0e 	orr.w	ip, ip, lr
 802637c:	fb16 fe02 	smulbb	lr, r6, r2
 8026380:	f1c6 0810 	rsb	r8, r6, #16
 8026384:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 8026388:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 802638c:	ea4f 0eee 	mov.w	lr, lr, asr #3
 8026390:	eba8 0802 	sub.w	r8, r8, r2
 8026394:	ea4f 4b0c 	mov.w	fp, ip, lsl #16
 8026398:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 802639c:	ebce 0242 	rsb	r2, lr, r2, lsl #1
 80263a0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80263a4:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 80263a8:	ea4a 0000 	orr.w	r0, sl, r0
 80263ac:	436a      	muls	r2, r5
 80263ae:	ebce 0646 	rsb	r6, lr, r6, lsl #1
 80263b2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 80263b6:	fb09 2208 	mla	r2, r9, r8, r2
 80263ba:	ea4b 0c0c 	orr.w	ip, fp, ip
 80263be:	fb06 2200 	mla	r2, r6, r0, r2
 80263c2:	fb0e 220c 	mla	r2, lr, ip, r2
 80263c6:	0d55      	lsrs	r5, r2, #21
 80263c8:	0952      	lsrs	r2, r2, #5
 80263ca:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80263ce:	f422 6cfc 	bic.w	ip, r2, #2016	; 0x7e0
 80263d2:	ea45 000c 	orr.w	r0, r5, ip
 80263d6:	b280      	uxth	r0, r0
 80263d8:	2bff      	cmp	r3, #255	; 0xff
 80263da:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80263de:	ea4f 06e0 	mov.w	r6, r0, asr #3
 80263e2:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80263e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80263ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80263ee:	b2d2      	uxtb	r2, r2
 80263f0:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 80263f4:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 80263f8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80263fc:	d064      	beq.n	80264c8 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x820>
 80263fe:	f811 8c01 	ldrb.w	r8, [r1, #-1]
 8026402:	24ff      	movs	r4, #255	; 0xff
 8026404:	fb03 f508 	mul.w	r5, r3, r8
 8026408:	4443      	add	r3, r8
 802640a:	1c68      	adds	r0, r5, #1
 802640c:	eb00 2025 	add.w	r0, r0, r5, asr #8
 8026410:	f811 5c04 	ldrb.w	r5, [r1, #-4]
 8026414:	1200      	asrs	r0, r0, #8
 8026416:	1a1b      	subs	r3, r3, r0
 8026418:	eba8 0000 	sub.w	r0, r8, r0
 802641c:	f811 8c02 	ldrb.w	r8, [r1, #-2]
 8026420:	4345      	muls	r5, r0
 8026422:	b2db      	uxtb	r3, r3
 8026424:	fb14 5202 	smlabb	r2, r4, r2, r5
 8026428:	24ff      	movs	r4, #255	; 0xff
 802642a:	f801 3c01 	strb.w	r3, [r1, #-1]
 802642e:	fb92 f2f3 	sdiv	r2, r2, r3
 8026432:	2aff      	cmp	r2, #255	; 0xff
 8026434:	bfd6      	itet	le
 8026436:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802643a:	22ff      	movgt	r2, #255	; 0xff
 802643c:	b2d2      	uxtble	r2, r2
 802643e:	f801 2c04 	strb.w	r2, [r1, #-4]
 8026442:	f811 2c03 	ldrb.w	r2, [r1, #-3]
 8026446:	4342      	muls	r2, r0
 8026448:	fb00 f008 	mul.w	r0, r0, r8
 802644c:	fb14 2206 	smlabb	r2, r4, r6, r2
 8026450:	fb92 f2f3 	sdiv	r2, r2, r3
 8026454:	2aff      	cmp	r2, #255	; 0xff
 8026456:	bfd6      	itet	le
 8026458:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802645c:	22ff      	movgt	r2, #255	; 0xff
 802645e:	b2d2      	uxtble	r2, r2
 8026460:	f801 2c03 	strb.w	r2, [r1, #-3]
 8026464:	22ff      	movs	r2, #255	; 0xff
 8026466:	fb12 000c 	smlabb	r0, r2, ip, r0
 802646a:	fb90 f0f3 	sdiv	r0, r0, r3
 802646e:	28ff      	cmp	r0, #255	; 0xff
 8026470:	bfd6      	itet	le
 8026472:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8026476:	20ff      	movgt	r0, #255	; 0xff
 8026478:	b2c0      	uxtble	r0, r0
 802647a:	f801 0c02 	strb.w	r0, [r1, #-2]
 802647e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026480:	3104      	adds	r1, #4
 8026482:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8026484:	4413      	add	r3, r2
 8026486:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8026488:	931d      	str	r3, [sp, #116]	; 0x74
 802648a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802648c:	441a      	add	r2, r3
 802648e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8026490:	3b01      	subs	r3, #1
 8026492:	921e      	str	r2, [sp, #120]	; 0x78
 8026494:	930f      	str	r3, [sp, #60]	; 0x3c
 8026496:	e603      	b.n	80260a0 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8026498:	fb08 f505 	mul.w	r5, r8, r5
 802649c:	fb09 5303 	mla	r3, r9, r3, r5
 80264a0:	e6c8      	b.n	8026234 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58c>
 80264a2:	46a9      	mov	r9, r5
 80264a4:	e6ef      	b.n	8026286 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 80264a6:	f1c2 0010 	rsb	r0, r2, #16
 80264aa:	436a      	muls	r2, r5
 80264ac:	fb09 2900 	mla	r9, r9, r0, r2
 80264b0:	ea4f 0949 	mov.w	r9, r9, lsl #1
 80264b4:	ea4f 5659 	mov.w	r6, r9, lsr #21
 80264b8:	ea4f 1059 	mov.w	r0, r9, lsr #5
 80264bc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 80264c0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80264c4:	4330      	orrs	r0, r6
 80264c6:	e786      	b.n	80263d6 <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 80264c8:	0236      	lsls	r6, r6, #8
 80264ca:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 80264ce:	4332      	orrs	r2, r6
 80264d0:	f841 2c04 	str.w	r2, [r1, #-4]
 80264d4:	e7d3      	b.n	802647e <_ZN8touchgfx8LCD32bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d6>
 80264d6:	b013      	add	sp, #76	; 0x4c
 80264d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080264dc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>:
 80264dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264e0:	e9dd 680a 	ldrd	r6, r8, [sp, #40]	; 0x28
 80264e4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80264e8:	fb08 6703 	mla	r7, r8, r3, r6
 80264ec:	f1b8 0f00 	cmp.w	r8, #0
 80264f0:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 80264f4:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 80264f8:	eb02 0a47 	add.w	sl, r2, r7, lsl #1
 80264fc:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 8026500:	6808      	ldr	r0, [r1, #0]
 8026502:	f2c0 80d5 	blt.w	80266b0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 8026506:	45c1      	cmp	r9, r8
 8026508:	f340 80d2 	ble.w	80266b0 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d4>
 802650c:	2e00      	cmp	r6, #0
 802650e:	f2c0 80cd 	blt.w	80266ac <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8026512:	42b3      	cmp	r3, r6
 8026514:	f340 80ca 	ble.w	80266ac <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1d0>
 8026518:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 802651c:	ea4f 272c 	mov.w	r7, ip, asr #8
 8026520:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8026524:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8026528:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802652c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026530:	ea47 1b57 	orr.w	fp, r7, r7, lsr #5
 8026534:	ea42 1792 	orr.w	r7, r2, r2, lsr #6
 8026538:	fa5f fc8c 	uxtb.w	ip, ip
 802653c:	023f      	lsls	r7, r7, #8
 802653e:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8026542:	ea47 470b 	orr.w	r7, r7, fp, lsl #16
 8026546:	ea47 070c 	orr.w	r7, r7, ip
 802654a:	1c72      	adds	r2, r6, #1
 802654c:	f100 80b3 	bmi.w	80266b6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8026550:	4293      	cmp	r3, r2
 8026552:	f340 80b0 	ble.w	80266b6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 8026556:	2c00      	cmp	r4, #0
 8026558:	f000 80ad 	beq.w	80266b6 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1da>
 802655c:	f8ba b002 	ldrh.w	fp, [sl, #2]
 8026560:	ea4f 02eb 	mov.w	r2, fp, asr #3
 8026564:	ea4f 2c2b 	mov.w	ip, fp, asr #8
 8026568:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802656c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8026570:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8026574:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8026578:	fa5f fb8b 	uxtb.w	fp, fp
 802657c:	ea4c 1c5c 	orr.w	ip, ip, ip, lsr #5
 8026580:	0212      	lsls	r2, r2, #8
 8026582:	ea4b 1b5b 	orr.w	fp, fp, fp, lsr #5
 8026586:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 802658a:	ea4c 0c0b 	orr.w	ip, ip, fp
 802658e:	f118 0801 	adds.w	r8, r8, #1
 8026592:	f100 8094 	bmi.w	80266be <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 8026596:	45c1      	cmp	r9, r8
 8026598:	f340 8091 	ble.w	80266be <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 802659c:	f1be 0f00 	cmp.w	lr, #0
 80265a0:	f000 808d 	beq.w	80266be <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e2>
 80265a4:	2e00      	cmp	r6, #0
 80265a6:	f2c0 8088 	blt.w	80266ba <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 80265aa:	42b3      	cmp	r3, r6
 80265ac:	f340 8085 	ble.w	80266ba <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1de>
 80265b0:	f83a 8013 	ldrh.w	r8, [sl, r3, lsl #1]
 80265b4:	ea4f 2228 	mov.w	r2, r8, asr #8
 80265b8:	ea4f 09e8 	mov.w	r9, r8, asr #3
 80265bc:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 80265c0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80265c4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 80265c8:	ea42 1b52 	orr.w	fp, r2, r2, lsr #5
 80265cc:	ea49 1299 	orr.w	r2, r9, r9, lsr #6
 80265d0:	fa5f f888 	uxtb.w	r8, r8
 80265d4:	0212      	lsls	r2, r2, #8
 80265d6:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80265da:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
 80265de:	ea42 0208 	orr.w	r2, r2, r8
 80265e2:	3601      	adds	r6, #1
 80265e4:	d417      	bmi.n	8026616 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 80265e6:	42b3      	cmp	r3, r6
 80265e8:	dd15      	ble.n	8026616 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 80265ea:	b1a4      	cbz	r4, 8026616 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 80265ec:	3301      	adds	r3, #1
 80265ee:	f83a 6013 	ldrh.w	r6, [sl, r3, lsl #1]
 80265f2:	10f3      	asrs	r3, r6, #3
 80265f4:	1230      	asrs	r0, r6, #8
 80265f6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80265fa:	00f6      	lsls	r6, r6, #3
 80265fc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026600:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8026604:	ea40 1850 	orr.w	r8, r0, r0, lsr #5
 8026608:	b2f6      	uxtb	r6, r6
 802660a:	0218      	lsls	r0, r3, #8
 802660c:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 8026610:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8026614:	4330      	orrs	r0, r6
 8026616:	b2a4      	uxth	r4, r4
 8026618:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 802661c:	fa1f fe8e 	uxth.w	lr, lr
 8026620:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8026624:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8026628:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 802662c:	fb04 f80e 	mul.w	r8, r4, lr
 8026630:	0124      	lsls	r4, r4, #4
 8026632:	2dff      	cmp	r5, #255	; 0xff
 8026634:	ebc8 1e0e 	rsb	lr, r8, lr, lsl #4
 8026638:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 802663c:	eba4 0408 	sub.w	r4, r4, r8
 8026640:	fa1f fe8e 	uxth.w	lr, lr
 8026644:	b2a4      	uxth	r4, r4
 8026646:	eba9 090e 	sub.w	r9, r9, lr
 802664a:	fb04 f303 	mul.w	r3, r4, r3
 802664e:	fa1f f989 	uxth.w	r9, r9
 8026652:	fb04 f40c 	mul.w	r4, r4, ip
 8026656:	fb09 3606 	mla	r6, r9, r6, r3
 802665a:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 802665e:	fb09 4407 	mla	r4, r9, r7, r4
 8026662:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026666:	fb08 6603 	mla	r6, r8, r3, r6
 802666a:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 802666e:	fb08 4000 	mla	r0, r8, r0, r4
 8026672:	fb0e 6303 	mla	r3, lr, r3, r6
 8026676:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802667a:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 802667e:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8026682:	fb0e 0303 	mla	r3, lr, r3, r0
 8026686:	ea4f 2313 	mov.w	r3, r3, lsr #8
 802668a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802668e:	ea43 0306 	orr.w	r3, r3, r6
 8026692:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8026696:	f3c3 2007 	ubfx	r0, r3, #8, #8
 802669a:	b2d4      	uxtb	r4, r2
 802669c:	b2c6      	uxtb	r6, r0
 802669e:	d110      	bne.n	80266c2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1e6>
 80266a0:	700b      	strb	r3, [r1, #0]
 80266a2:	7048      	strb	r0, [r1, #1]
 80266a4:	708a      	strb	r2, [r1, #2]
 80266a6:	70cd      	strb	r5, [r1, #3]
 80266a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266ac:	4607      	mov	r7, r0
 80266ae:	e74c      	b.n	802654a <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x6e>
 80266b0:	4684      	mov	ip, r0
 80266b2:	4607      	mov	r7, r0
 80266b4:	e76b      	b.n	802658e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 80266b6:	4684      	mov	ip, r0
 80266b8:	e769      	b.n	802658e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0xb2>
 80266ba:	4602      	mov	r2, r0
 80266bc:	e791      	b.n	80265e2 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x106>
 80266be:	4602      	mov	r2, r0
 80266c0:	e7a9      	b.n	8026616 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x13a>
 80266c2:	2d00      	cmp	r5, #0
 80266c4:	d0f0      	beq.n	80266a8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>
 80266c6:	78cf      	ldrb	r7, [r1, #3]
 80266c8:	b2db      	uxtb	r3, r3
 80266ca:	fb15 f606 	smulbb	r6, r5, r6
 80266ce:	fb05 f207 	mul.w	r2, r5, r7
 80266d2:	1c50      	adds	r0, r2, #1
 80266d4:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 80266d8:	19ea      	adds	r2, r5, r7
 80266da:	1200      	asrs	r0, r0, #8
 80266dc:	1a12      	subs	r2, r2, r0
 80266de:	1a38      	subs	r0, r7, r0
 80266e0:	780f      	ldrb	r7, [r1, #0]
 80266e2:	b2d2      	uxtb	r2, r2
 80266e4:	4347      	muls	r7, r0
 80266e6:	70ca      	strb	r2, [r1, #3]
 80266e8:	fb05 7303 	mla	r3, r5, r3, r7
 80266ec:	fb15 f504 	smulbb	r5, r5, r4
 80266f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80266f4:	700b      	strb	r3, [r1, #0]
 80266f6:	784b      	ldrb	r3, [r1, #1]
 80266f8:	fb00 6303 	mla	r3, r0, r3, r6
 80266fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8026700:	704b      	strb	r3, [r1, #1]
 8026702:	788b      	ldrb	r3, [r1, #2]
 8026704:	fb00 5503 	mla	r5, r0, r3, r5
 8026708:	fb95 f5f2 	sdiv	r5, r5, r2
 802670c:	708d      	strb	r5, [r1, #2]
 802670e:	e7cb      	b.n	80266a8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh+0x1cc>

08026710 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026714:	b08f      	sub	sp, #60	; 0x3c
 8026716:	461f      	mov	r7, r3
 8026718:	920c      	str	r2, [sp, #48]	; 0x30
 802671a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802671c:	900d      	str	r0, [sp, #52]	; 0x34
 802671e:	9107      	str	r1, [sp, #28]
 8026720:	6850      	ldr	r0, [r2, #4]
 8026722:	6812      	ldr	r2, [r2, #0]
 8026724:	f89d 4084 	ldrb.w	r4, [sp, #132]	; 0x84
 8026728:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 802672c:	e9dd 5819 	ldrd	r5, r8, [sp, #100]	; 0x64
 8026730:	fb00 1303 	mla	r3, r0, r3, r1
 8026734:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8026738:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802673a:	681b      	ldr	r3, [r3, #0]
 802673c:	9306      	str	r3, [sp, #24]
 802673e:	9b07      	ldr	r3, [sp, #28]
 8026740:	2b00      	cmp	r3, #0
 8026742:	dc03      	bgt.n	802674c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8026744:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026746:	2b00      	cmp	r3, #0
 8026748:	f340 8230 	ble.w	8026bac <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 802674c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 802674e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026752:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026756:	1e48      	subs	r0, r1, #1
 8026758:	1e56      	subs	r6, r2, #1
 802675a:	2f00      	cmp	r7, #0
 802675c:	f340 80bd 	ble.w	80268da <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 8026760:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8026764:	ea4f 4328 	mov.w	r3, r8, asr #16
 8026768:	d406      	bmi.n	8026778 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802676a:	4584      	cmp	ip, r0
 802676c:	da04      	bge.n	8026778 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 802676e:	2b00      	cmp	r3, #0
 8026770:	db02      	blt.n	8026778 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8026772:	42b3      	cmp	r3, r6
 8026774:	f2c0 80b2 	blt.w	80268dc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1cc>
 8026778:	f11c 0c01 	adds.w	ip, ip, #1
 802677c:	f100 80a5 	bmi.w	80268ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026780:	4561      	cmp	r1, ip
 8026782:	f2c0 80a2 	blt.w	80268ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026786:	3301      	adds	r3, #1
 8026788:	f100 809f 	bmi.w	80268ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 802678c:	429a      	cmp	r2, r3
 802678e:	f2c0 809c 	blt.w	80268ca <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 8026792:	46ba      	mov	sl, r7
 8026794:	464e      	mov	r6, r9
 8026796:	f1ba 0f00 	cmp.w	sl, #0
 802679a:	f340 80bb 	ble.w	8026914 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 802679e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80267a0:	1429      	asrs	r1, r5, #16
 80267a2:	ea4f 4028 	mov.w	r0, r8, asr #16
 80267a6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80267aa:	f3c8 3c03 	ubfx	ip, r8, #12, #4
 80267ae:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 80267b2:	f100 8122 	bmi.w	80269fa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 80267b6:	f10e 3bff 	add.w	fp, lr, #4294967295
 80267ba:	4559      	cmp	r1, fp
 80267bc:	f280 811d 	bge.w	80269fa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 80267c0:	2800      	cmp	r0, #0
 80267c2:	f2c0 811a 	blt.w	80269fa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 80267c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80267ca:	4558      	cmp	r0, fp
 80267cc:	f280 8115 	bge.w	80269fa <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ea>
 80267d0:	fa0f fe8e 	sxth.w	lr, lr
 80267d4:	9b06      	ldr	r3, [sp, #24]
 80267d6:	fb00 110e 	mla	r1, r0, lr, r1
 80267da:	eb03 0041 	add.w	r0, r3, r1, lsl #1
 80267de:	f833 b011 	ldrh.w	fp, [r3, r1, lsl #1]
 80267e2:	8841      	ldrh	r1, [r0, #2]
 80267e4:	f1bc 0f00 	cmp.w	ip, #0
 80267e8:	d00b      	beq.n	8026802 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf2>
 80267ea:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 80267ee:	3b01      	subs	r3, #1
 80267f0:	005b      	lsls	r3, r3, #1
 80267f2:	3302      	adds	r3, #2
 80267f4:	eb00 0e03 	add.w	lr, r0, r3
 80267f8:	5ac3      	ldrh	r3, [r0, r3]
 80267fa:	9308      	str	r3, [sp, #32]
 80267fc:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026800:	9309      	str	r3, [sp, #36]	; 0x24
 8026802:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026806:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 802680a:	fb12 f30c 	smulbb	r3, r2, ip
 802680e:	f1cc 0e10 	rsb	lr, ip, #16
 8026812:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026816:	2cff      	cmp	r4, #255	; 0xff
 8026818:	ea4f 03e3 	mov.w	r3, r3, asr #3
 802681c:	ebae 0e02 	sub.w	lr, lr, r2
 8026820:	ea40 000b 	orr.w	r0, r0, fp
 8026824:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026828:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 802682c:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026830:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026834:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026838:	ebc3 0c4c 	rsb	ip, r3, ip, lsl #1
 802683c:	ea4b 0101 	orr.w	r1, fp, r1
 8026840:	fb02 f101 	mul.w	r1, r2, r1
 8026844:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026846:	fb0e 1e00 	mla	lr, lr, r0, r1
 802684a:	ea4f 4002 	mov.w	r0, r2, lsl #16
 802684e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026852:	9908      	ldr	r1, [sp, #32]
 8026854:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026858:	ea40 0002 	orr.w	r0, r0, r2
 802685c:	9a08      	ldr	r2, [sp, #32]
 802685e:	ea4f 4202 	mov.w	r2, r2, lsl #16
 8026862:	fb03 e000 	mla	r0, r3, r0, lr
 8026866:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 802686a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 802686e:	ea42 020e 	orr.w	r2, r2, lr
 8026872:	fb0c 0c02 	mla	ip, ip, r2, r0
 8026876:	ea4f 535c 	mov.w	r3, ip, lsr #21
 802687a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 802687e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8026882:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026886:	ea43 0c0c 	orr.w	ip, r3, ip
 802688a:	fa1f f38c 	uxth.w	r3, ip
 802688e:	ea4f 2223 	mov.w	r2, r3, asr #8
 8026892:	ea4f 01e3 	mov.w	r1, r3, asr #3
 8026896:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802689a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802689e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80268a2:	b2db      	uxtb	r3, r3
 80268a4:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80268a8:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 80268ac:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 80268b0:	d174      	bne.n	802699c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80268b2:	7033      	strb	r3, [r6, #0]
 80268b4:	7071      	strb	r1, [r6, #1]
 80268b6:	70b2      	strb	r2, [r6, #2]
 80268b8:	70f4      	strb	r4, [r6, #3]
 80268ba:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80268bc:	3604      	adds	r6, #4
 80268be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80268c2:	441d      	add	r5, r3
 80268c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80268c6:	4498      	add	r8, r3
 80268c8:	e765      	b.n	8026796 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80268ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80268cc:	3f01      	subs	r7, #1
 80268ce:	f109 0904 	add.w	r9, r9, #4
 80268d2:	441d      	add	r5, r3
 80268d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80268d6:	4498      	add	r8, r3
 80268d8:	e73f      	b.n	802675a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80268da:	d01f      	beq.n	802691c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80268dc:	1e7b      	subs	r3, r7, #1
 80268de:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80268e0:	fb00 5003 	mla	r0, r0, r3, r5
 80268e4:	1400      	asrs	r0, r0, #16
 80268e6:	f53f af54 	bmi.w	8026792 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80268ea:	3901      	subs	r1, #1
 80268ec:	4288      	cmp	r0, r1
 80268ee:	f6bf af50 	bge.w	8026792 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80268f2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80268f4:	fb01 8303 	mla	r3, r1, r3, r8
 80268f8:	141b      	asrs	r3, r3, #16
 80268fa:	f53f af4a 	bmi.w	8026792 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80268fe:	3a01      	subs	r2, #1
 8026900:	4293      	cmp	r3, r2
 8026902:	f6bf af46 	bge.w	8026792 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8026906:	f109 0304 	add.w	r3, r9, #4
 802690a:	46ba      	mov	sl, r7
 802690c:	f1ba 0f00 	cmp.w	sl, #0
 8026910:	f300 8090 	bgt.w	8026a34 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8026914:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 8026918:	eb09 0987 	add.w	r9, r9, r7, lsl #2
 802691c:	9b07      	ldr	r3, [sp, #28]
 802691e:	2b00      	cmp	r3, #0
 8026920:	f340 8144 	ble.w	8026bac <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 8026924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026928:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802692a:	ee30 0a04 	vadd.f32	s0, s0, s8
 802692e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026932:	eef0 6a62 	vmov.f32	s13, s5
 8026936:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802693a:	ee31 1a05 	vadd.f32	s2, s2, s10
 802693e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026942:	ee16 5a90 	vmov	r5, s13
 8026946:	eef0 6a43 	vmov.f32	s13, s6
 802694a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802694e:	ee16 8a90 	vmov	r8, s13
 8026952:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026956:	ee61 7a27 	vmul.f32	s15, s2, s15
 802695a:	ee77 2a62 	vsub.f32	s5, s14, s5
 802695e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026962:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026966:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802696a:	ee12 2a90 	vmov	r2, s5
 802696e:	eef0 2a47 	vmov.f32	s5, s14
 8026972:	fb92 f3f3 	sdiv	r3, r2, r3
 8026976:	ee13 2a10 	vmov	r2, s6
 802697a:	931b      	str	r3, [sp, #108]	; 0x6c
 802697c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802697e:	eeb0 3a67 	vmov.f32	s6, s15
 8026982:	fb92 f3f3 	sdiv	r3, r2, r3
 8026986:	931c      	str	r3, [sp, #112]	; 0x70
 8026988:	9b07      	ldr	r3, [sp, #28]
 802698a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802698c:	3b01      	subs	r3, #1
 802698e:	9307      	str	r3, [sp, #28]
 8026990:	bf08      	it	eq
 8026992:	4617      	moveq	r7, r2
 8026994:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026996:	bf18      	it	ne
 8026998:	461f      	movne	r7, r3
 802699a:	e6d0      	b.n	802673e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 802699c:	2c00      	cmp	r4, #0
 802699e:	d08c      	beq.n	80268ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80269a0:	f896 e003 	ldrb.w	lr, [r6, #3]
 80269a4:	fb13 f304 	smulbb	r3, r3, r4
 80269a8:	fb14 f101 	smulbb	r1, r4, r1
 80269ac:	fb14 f202 	smulbb	r2, r4, r2
 80269b0:	fb04 fc0e 	mul.w	ip, r4, lr
 80269b4:	f10c 0001 	add.w	r0, ip, #1
 80269b8:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 80269bc:	eb04 0c0e 	add.w	ip, r4, lr
 80269c0:	1200      	asrs	r0, r0, #8
 80269c2:	ebac 0c00 	sub.w	ip, ip, r0
 80269c6:	ebae 0000 	sub.w	r0, lr, r0
 80269ca:	f896 e000 	ldrb.w	lr, [r6]
 80269ce:	fa5f fc8c 	uxtb.w	ip, ip
 80269d2:	fb00 330e 	mla	r3, r0, lr, r3
 80269d6:	f886 c003 	strb.w	ip, [r6, #3]
 80269da:	fb93 f3fc 	sdiv	r3, r3, ip
 80269de:	7033      	strb	r3, [r6, #0]
 80269e0:	7873      	ldrb	r3, [r6, #1]
 80269e2:	fb00 1103 	mla	r1, r0, r3, r1
 80269e6:	78b3      	ldrb	r3, [r6, #2]
 80269e8:	fb00 2003 	mla	r0, r0, r3, r2
 80269ec:	fb91 f1fc 	sdiv	r1, r1, ip
 80269f0:	fb90 f0fc 	sdiv	r0, r0, ip
 80269f4:	7071      	strb	r1, [r6, #1]
 80269f6:	70b0      	strb	r0, [r6, #2]
 80269f8:	e75f      	b.n	80268ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80269fa:	f111 0b01 	adds.w	fp, r1, #1
 80269fe:	f53f af5c 	bmi.w	80268ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026a02:	45de      	cmp	lr, fp
 8026a04:	f6ff af59 	blt.w	80268ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026a08:	f110 0b01 	adds.w	fp, r0, #1
 8026a0c:	f53f af55 	bmi.w	80268ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026a10:	455b      	cmp	r3, fp
 8026a12:	f6ff af52 	blt.w	80268ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026a16:	b21b      	sxth	r3, r3
 8026a18:	9101      	str	r1, [sp, #4]
 8026a1a:	4631      	mov	r1, r6
 8026a1c:	9300      	str	r3, [sp, #0]
 8026a1e:	fa0f f38e 	sxth.w	r3, lr
 8026a22:	e9cd 0202 	strd	r0, r2, [sp, #8]
 8026a26:	e9cd c404 	strd	ip, r4, [sp, #16]
 8026a2a:	9a06      	ldr	r2, [sp, #24]
 8026a2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026a2e:	f7ff fd55 	bl	80264dc <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtssiihhh>
 8026a32:	e742      	b.n	80268ba <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8026a34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8026a36:	142e      	asrs	r6, r5, #16
 8026a38:	ea4f 4028 	mov.w	r0, r8, asr #16
 8026a3c:	f3c8 3e03 	ubfx	lr, r8, #12, #4
 8026a40:	f9b2 b008 	ldrsh.w	fp, [r2, #8]
 8026a44:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8026a48:	9a06      	ldr	r2, [sp, #24]
 8026a4a:	fb0b 6000 	mla	r0, fp, r0, r6
 8026a4e:	9e06      	ldr	r6, [sp, #24]
 8026a50:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 8026a54:	f832 c010 	ldrh.w	ip, [r2, r0, lsl #1]
 8026a58:	8870      	ldrh	r0, [r6, #2]
 8026a5a:	f1be 0f00 	cmp.w	lr, #0
 8026a5e:	d00b      	beq.n	8026a78 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 8026a60:	f10b 4200 	add.w	r2, fp, #2147483648	; 0x80000000
 8026a64:	3a01      	subs	r2, #1
 8026a66:	0052      	lsls	r2, r2, #1
 8026a68:	3202      	adds	r2, #2
 8026a6a:	eb06 0b02 	add.w	fp, r6, r2
 8026a6e:	5ab2      	ldrh	r2, [r6, r2]
 8026a70:	920a      	str	r2, [sp, #40]	; 0x28
 8026a72:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8026a76:	920b      	str	r2, [sp, #44]	; 0x2c
 8026a78:	ea4f 460c 	mov.w	r6, ip, lsl #16
 8026a7c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8026a80:	fb11 f20e 	smulbb	r2, r1, lr
 8026a84:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 8026a88:	f006 66fc 	and.w	r6, r6, #132120576	; 0x7e00000
 8026a8c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 8026a90:	10d2      	asrs	r2, r2, #3
 8026a92:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026a96:	ea46 060c 	orr.w	r6, r6, ip
 8026a9a:	f1ce 0c10 	rsb	ip, lr, #16
 8026a9e:	ea4b 0000 	orr.w	r0, fp, r0
 8026aa2:	2cff      	cmp	r4, #255	; 0xff
 8026aa4:	ebac 0c01 	sub.w	ip, ip, r1
 8026aa8:	ebc2 0141 	rsb	r1, r2, r1, lsl #1
 8026aac:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8026ab0:	fb01 f000 	mul.w	r0, r1, r0
 8026ab4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026ab6:	fb0c 0c06 	mla	ip, ip, r6, r0
 8026aba:	980a      	ldr	r0, [sp, #40]	; 0x28
 8026abc:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026ac0:	f421 66fc 	bic.w	r6, r1, #2016	; 0x7e0
 8026ac4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026ac6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026aca:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8026ace:	ea4b 0606 	orr.w	r6, fp, r6
 8026ad2:	f420 6bfc 	bic.w	fp, r0, #2016	; 0x7e0
 8026ad6:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 8026ada:	fb02 c606 	mla	r6, r2, r6, ip
 8026ade:	ebc2 024e 	rsb	r2, r2, lr, lsl #1
 8026ae2:	ea41 0b0b 	orr.w	fp, r1, fp
 8026ae6:	fb02 660b 	mla	r6, r2, fp, r6
 8026aea:	ea4f 5256 	mov.w	r2, r6, lsr #21
 8026aee:	ea4f 1656 	mov.w	r6, r6, lsr #5
 8026af2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8026af6:	f426 66fc 	bic.w	r6, r6, #2016	; 0x7e0
 8026afa:	ea46 0602 	orr.w	r6, r6, r2
 8026afe:	b2b2      	uxth	r2, r6
 8026b00:	ea4f 2122 	mov.w	r1, r2, asr #8
 8026b04:	ea4f 00e2 	mov.w	r0, r2, asr #3
 8026b08:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8026b0c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8026b10:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8026b14:	b2d2      	uxtb	r2, r2
 8026b16:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8026b1a:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 8026b1e:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8026b22:	d10f      	bne.n	8026b44 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8026b24:	f803 2c04 	strb.w	r2, [r3, #-4]
 8026b28:	f803 0c03 	strb.w	r0, [r3, #-3]
 8026b2c:	f803 1c02 	strb.w	r1, [r3, #-2]
 8026b30:	f803 4c01 	strb.w	r4, [r3, #-1]
 8026b34:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8026b36:	3304      	adds	r3, #4
 8026b38:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026b3c:	4415      	add	r5, r2
 8026b3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8026b40:	4490      	add	r8, r2
 8026b42:	e6e3      	b.n	802690c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 8026b44:	2c00      	cmp	r4, #0
 8026b46:	d0f5      	beq.n	8026b34 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8026b48:	f813 ec01 	ldrb.w	lr, [r3, #-1]
 8026b4c:	fb12 f204 	smulbb	r2, r2, r4
 8026b50:	fb14 f000 	smulbb	r0, r4, r0
 8026b54:	fb14 f101 	smulbb	r1, r4, r1
 8026b58:	fb04 f60e 	mul.w	r6, r4, lr
 8026b5c:	f106 0c01 	add.w	ip, r6, #1
 8026b60:	eb0c 2c16 	add.w	ip, ip, r6, lsr #8
 8026b64:	eb04 060e 	add.w	r6, r4, lr
 8026b68:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8026b6c:	eba6 060c 	sub.w	r6, r6, ip
 8026b70:	ebae 0c0c 	sub.w	ip, lr, ip
 8026b74:	f813 ec04 	ldrb.w	lr, [r3, #-4]
 8026b78:	b2f6      	uxtb	r6, r6
 8026b7a:	fb0c 220e 	mla	r2, ip, lr, r2
 8026b7e:	f803 6c01 	strb.w	r6, [r3, #-1]
 8026b82:	fb92 f2f6 	sdiv	r2, r2, r6
 8026b86:	f803 2c04 	strb.w	r2, [r3, #-4]
 8026b8a:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8026b8e:	fb0c 0002 	mla	r0, ip, r2, r0
 8026b92:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8026b96:	fb0c 1c02 	mla	ip, ip, r2, r1
 8026b9a:	fb90 f0f6 	sdiv	r0, r0, r6
 8026b9e:	fb9c fcf6 	sdiv	ip, ip, r6
 8026ba2:	f803 0c03 	strb.w	r0, [r3, #-3]
 8026ba6:	f803 cc02 	strb.w	ip, [r3, #-2]
 8026baa:	e7c3      	b.n	8026b34 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8026bac:	b00f      	add	sp, #60	; 0x3c
 8026bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08026bb2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>:
 8026bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026bb6:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
 8026bba:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8026bbe:	fb08 7403 	mla	r4, r8, r3, r7
 8026bc2:	f1b8 0f00 	cmp.w	r8, #0
 8026bc6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8026bca:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8026bce:	eb02 0944 	add.w	r9, r2, r4, lsl #1
 8026bd2:	6808      	ldr	r0, [r1, #0]
 8026bd4:	f2c0 80be 	blt.w	8026d54 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8026bd8:	45c2      	cmp	sl, r8
 8026bda:	f340 80bb 	ble.w	8026d54 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a2>
 8026bde:	2f00      	cmp	r7, #0
 8026be0:	f2c0 80b6 	blt.w	8026d50 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8026be4:	42bb      	cmp	r3, r7
 8026be6:	f340 80b3 	ble.w	8026d50 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x19e>
 8026bea:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
 8026bee:	10d5      	asrs	r5, r2, #3
 8026bf0:	1214      	asrs	r4, r2, #8
 8026bf2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8026bf6:	00d2      	lsls	r2, r2, #3
 8026bf8:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8026bfc:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8026c00:	ea44 1e54 	orr.w	lr, r4, r4, lsr #5
 8026c04:	b2d2      	uxtb	r2, r2
 8026c06:	022c      	lsls	r4, r5, #8
 8026c08:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8026c0c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8026c10:	4314      	orrs	r4, r2
 8026c12:	1c7a      	adds	r2, r7, #1
 8026c14:	f100 80a1 	bmi.w	8026d5a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8026c18:	4293      	cmp	r3, r2
 8026c1a:	f340 809e 	ble.w	8026d5a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8026c1e:	2e00      	cmp	r6, #0
 8026c20:	f000 809b 	beq.w	8026d5a <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1a8>
 8026c24:	f8b9 e002 	ldrh.w	lr, [r9, #2]
 8026c28:	ea4f 252e 	mov.w	r5, lr, asr #8
 8026c2c:	ea4f 02ee 	mov.w	r2, lr, asr #3
 8026c30:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8026c34:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026c38:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8026c3c:	ea45 1b55 	orr.w	fp, r5, r5, lsr #5
 8026c40:	ea42 1592 	orr.w	r5, r2, r2, lsr #6
 8026c44:	fa5f fe8e 	uxtb.w	lr, lr
 8026c48:	022d      	lsls	r5, r5, #8
 8026c4a:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8026c4e:	ea45 450b 	orr.w	r5, r5, fp, lsl #16
 8026c52:	ea45 050e 	orr.w	r5, r5, lr
 8026c56:	f118 0801 	adds.w	r8, r8, #1
 8026c5a:	f100 8082 	bmi.w	8026d62 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8026c5e:	45c2      	cmp	sl, r8
 8026c60:	dd7f      	ble.n	8026d62 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8026c62:	f1bc 0f00 	cmp.w	ip, #0
 8026c66:	d07c      	beq.n	8026d62 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1b0>
 8026c68:	2f00      	cmp	r7, #0
 8026c6a:	db78      	blt.n	8026d5e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8026c6c:	42bb      	cmp	r3, r7
 8026c6e:	dd76      	ble.n	8026d5e <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x1ac>
 8026c70:	f839 e013 	ldrh.w	lr, [r9, r3, lsl #1]
 8026c74:	ea4f 08ee 	mov.w	r8, lr, asr #3
 8026c78:	ea4f 222e 	mov.w	r2, lr, asr #8
 8026c7c:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 8026c80:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8026c84:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 8026c88:	ea48 1898 	orr.w	r8, r8, r8, lsr #6
 8026c8c:	ea42 1a52 	orr.w	sl, r2, r2, lsr #5
 8026c90:	fa5f fe8e 	uxtb.w	lr, lr
 8026c94:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8026c98:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 8026c9c:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 8026ca0:	ea42 020e 	orr.w	r2, r2, lr
 8026ca4:	3701      	adds	r7, #1
 8026ca6:	d417      	bmi.n	8026cd8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8026ca8:	42bb      	cmp	r3, r7
 8026caa:	dd15      	ble.n	8026cd8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8026cac:	b1a6      	cbz	r6, 8026cd8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>
 8026cae:	3301      	adds	r3, #1
 8026cb0:	f839 3013 	ldrh.w	r3, [r9, r3, lsl #1]
 8026cb4:	10df      	asrs	r7, r3, #3
 8026cb6:	1218      	asrs	r0, r3, #8
 8026cb8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8026cbc:	00db      	lsls	r3, r3, #3
 8026cbe:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026cc2:	ea47 1797 	orr.w	r7, r7, r7, lsr #6
 8026cc6:	ea40 1e50 	orr.w	lr, r0, r0, lsr #5
 8026cca:	b2db      	uxtb	r3, r3
 8026ccc:	0238      	lsls	r0, r7, #8
 8026cce:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8026cd2:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8026cd6:	4318      	orrs	r0, r3
 8026cd8:	b2b6      	uxth	r6, r6
 8026cda:	f005 13ff 	and.w	r3, r5, #16711935	; 0xff00ff
 8026cde:	fa1f f78c 	uxth.w	r7, ip
 8026ce2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8026ce6:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8026cea:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8026cee:	fb06 fc07 	mul.w	ip, r6, r7
 8026cf2:	0136      	lsls	r6, r6, #4
 8026cf4:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8026cf8:	f5c6 7e80 	rsb	lr, r6, #256	; 0x100
 8026cfc:	eba6 060c 	sub.w	r6, r6, ip
 8026d00:	b2bf      	uxth	r7, r7
 8026d02:	b2b6      	uxth	r6, r6
 8026d04:	ebae 0e07 	sub.w	lr, lr, r7
 8026d08:	4373      	muls	r3, r6
 8026d0a:	fa1f fe8e 	uxth.w	lr, lr
 8026d0e:	4375      	muls	r5, r6
 8026d10:	fb0e 3808 	mla	r8, lr, r8, r3
 8026d14:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8026d18:	fb0e 5404 	mla	r4, lr, r4, r5
 8026d1c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d20:	fb0c 8803 	mla	r8, ip, r3, r8
 8026d24:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8026d28:	fb0c 4000 	mla	r0, ip, r0, r4
 8026d2c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8026d30:	fb07 8303 	mla	r3, r7, r3, r8
 8026d34:	fb07 0002 	mla	r0, r7, r2, r0
 8026d38:	0a1b      	lsrs	r3, r3, #8
 8026d3a:	0a00      	lsrs	r0, r0, #8
 8026d3c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8026d40:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8026d44:	4318      	orrs	r0, r3
 8026d46:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8026d4a:	6008      	str	r0, [r1, #0]
 8026d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d50:	4604      	mov	r4, r0
 8026d52:	e75e      	b.n	8026c12 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x60>
 8026d54:	4605      	mov	r5, r0
 8026d56:	4604      	mov	r4, r0
 8026d58:	e77d      	b.n	8026c56 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 8026d5a:	4605      	mov	r5, r0
 8026d5c:	e77b      	b.n	8026c56 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xa4>
 8026d5e:	4602      	mov	r2, r0
 8026d60:	e7a0      	b.n	8026ca4 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0xf2>
 8026d62:	4602      	mov	r2, r0
 8026d64:	e7b8      	b.n	8026cd8 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh+0x126>

08026d66 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8026d66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d6a:	b08f      	sub	sp, #60	; 0x3c
 8026d6c:	461d      	mov	r5, r3
 8026d6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026d70:	9107      	str	r1, [sp, #28]
 8026d72:	920c      	str	r2, [sp, #48]	; 0x30
 8026d74:	6859      	ldr	r1, [r3, #4]
 8026d76:	681b      	ldr	r3, [r3, #0]
 8026d78:	900d      	str	r0, [sp, #52]	; 0x34
 8026d7a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 8026d7e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 8026d82:	fb01 2707 	mla	r7, r1, r7, r2
 8026d86:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8026d8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026d8c:	f8d3 8000 	ldr.w	r8, [r3]
 8026d90:	9b07      	ldr	r3, [sp, #28]
 8026d92:	2b00      	cmp	r3, #0
 8026d94:	dc03      	bgt.n	8026d9e <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8026d96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026d98:	2b00      	cmp	r3, #0
 8026d9a:	f340 81aa 	ble.w	80270f2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026d9e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026da0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8026da4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8026da8:	1e48      	subs	r0, r1, #1
 8026daa:	f102 3cff 	add.w	ip, r2, #4294967295
 8026dae:	2d00      	cmp	r5, #0
 8026db0:	f340 80b0 	ble.w	8026f14 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 8026db4:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8026db8:	ea4f 4326 	mov.w	r3, r6, asr #16
 8026dbc:	d406      	bmi.n	8026dcc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026dbe:	4586      	cmp	lr, r0
 8026dc0:	da04      	bge.n	8026dcc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026dc2:	2b00      	cmp	r3, #0
 8026dc4:	db02      	blt.n	8026dcc <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8026dc6:	4563      	cmp	r3, ip
 8026dc8:	f2c0 80a5 	blt.w	8026f16 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8026dcc:	f11e 0e01 	adds.w	lr, lr, #1
 8026dd0:	f100 8099 	bmi.w	8026f06 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026dd4:	4571      	cmp	r1, lr
 8026dd6:	f2c0 8096 	blt.w	8026f06 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026dda:	3301      	adds	r3, #1
 8026ddc:	f100 8093 	bmi.w	8026f06 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026de0:	429a      	cmp	r2, r3
 8026de2:	f2c0 8090 	blt.w	8026f06 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 8026de6:	46aa      	mov	sl, r5
 8026de8:	46b9      	mov	r9, r7
 8026dea:	f1ba 0f00 	cmp.w	sl, #0
 8026dee:	f340 80ac 	ble.w	8026f4a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 8026df2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8026df4:	1421      	asrs	r1, r4, #16
 8026df6:	ea4f 4026 	mov.w	r0, r6, asr #16
 8026dfa:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8026dfe:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8026e02:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 8026e06:	f100 80e4 	bmi.w	8026fd2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026e0a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8026e0e:	4559      	cmp	r1, fp
 8026e10:	f280 80df 	bge.w	8026fd2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026e14:	2800      	cmp	r0, #0
 8026e16:	f2c0 80dc 	blt.w	8026fd2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026e1a:	f103 3bff 	add.w	fp, r3, #4294967295
 8026e1e:	4558      	cmp	r0, fp
 8026e20:	f280 80d7 	bge.w	8026fd2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8026e24:	fa0f fe8e 	sxth.w	lr, lr
 8026e28:	fb00 110e 	mla	r1, r0, lr, r1
 8026e2c:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 8026e30:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 8026e34:	8841      	ldrh	r1, [r0, #2]
 8026e36:	f1bc 0f00 	cmp.w	ip, #0
 8026e3a:	d00b      	beq.n	8026e54 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xee>
 8026e3c:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 8026e40:	3b01      	subs	r3, #1
 8026e42:	005b      	lsls	r3, r3, #1
 8026e44:	3302      	adds	r3, #2
 8026e46:	eb00 0e03 	add.w	lr, r0, r3
 8026e4a:	5ac3      	ldrh	r3, [r0, r3]
 8026e4c:	9308      	str	r3, [sp, #32]
 8026e4e:	f8be 3002 	ldrh.w	r3, [lr, #2]
 8026e52:	9309      	str	r3, [sp, #36]	; 0x24
 8026e54:	ea4f 400b 	mov.w	r0, fp, lsl #16
 8026e58:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 8026e5c:	fb12 f30c 	smulbb	r3, r2, ip
 8026e60:	f1cc 0e10 	rsb	lr, ip, #16
 8026e64:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026e68:	10db      	asrs	r3, r3, #3
 8026e6a:	ebae 0e02 	sub.w	lr, lr, r2
 8026e6e:	ea40 000b 	orr.w	r0, r0, fp
 8026e72:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8026e76:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8026e7a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8026e7e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8026e82:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 8026e86:	ea4b 0101 	orr.w	r1, fp, r1
 8026e8a:	4351      	muls	r1, r2
 8026e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026e8e:	fb0e 1e00 	mla	lr, lr, r0, r1
 8026e92:	0410      	lsls	r0, r2, #16
 8026e94:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 8026e98:	9908      	ldr	r1, [sp, #32]
 8026e9a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8026e9e:	4310      	orrs	r0, r2
 8026ea0:	9a08      	ldr	r2, [sp, #32]
 8026ea2:	0412      	lsls	r2, r2, #16
 8026ea4:	fb03 e000 	mla	r0, r3, r0, lr
 8026ea8:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 8026eac:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 8026eb0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 8026eb4:	ea42 020e 	orr.w	r2, r2, lr
 8026eb8:	fb03 0302 	mla	r3, r3, r2, r0
 8026ebc:	0d59      	lsrs	r1, r3, #21
 8026ebe:	095b      	lsrs	r3, r3, #5
 8026ec0:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8026ec4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8026ec8:	430b      	orrs	r3, r1
 8026eca:	b299      	uxth	r1, r3
 8026ecc:	10ca      	asrs	r2, r1, #3
 8026ece:	1208      	asrs	r0, r1, #8
 8026ed0:	f002 03fc 	and.w	r3, r2, #252	; 0xfc
 8026ed4:	00c9      	lsls	r1, r1, #3
 8026ed6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8026eda:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 8026ede:	b2c9      	uxtb	r1, r1
 8026ee0:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 8026ee4:	021b      	lsls	r3, r3, #8
 8026ee6:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8026eea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8026eee:	430b      	orrs	r3, r1
 8026ef0:	f8c9 3000 	str.w	r3, [r9]
 8026ef4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026ef6:	f109 0904 	add.w	r9, r9, #4
 8026efa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8026efe:	441c      	add	r4, r3
 8026f00:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026f02:	441e      	add	r6, r3
 8026f04:	e771      	b.n	8026dea <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8026f06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8026f08:	3d01      	subs	r5, #1
 8026f0a:	3704      	adds	r7, #4
 8026f0c:	441c      	add	r4, r3
 8026f0e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8026f10:	441e      	add	r6, r3
 8026f12:	e74c      	b.n	8026dae <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8026f14:	d01d      	beq.n	8026f52 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 8026f16:	1e6b      	subs	r3, r5, #1
 8026f18:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026f1a:	fb00 4003 	mla	r0, r0, r3, r4
 8026f1e:	1400      	asrs	r0, r0, #16
 8026f20:	f53f af61 	bmi.w	8026de6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026f24:	3901      	subs	r1, #1
 8026f26:	4288      	cmp	r0, r1
 8026f28:	f6bf af5d 	bge.w	8026de6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026f2c:	991c      	ldr	r1, [sp, #112]	; 0x70
 8026f2e:	fb01 6303 	mla	r3, r1, r3, r6
 8026f32:	141b      	asrs	r3, r3, #16
 8026f34:	f53f af57 	bmi.w	8026de6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026f38:	3a01      	subs	r2, #1
 8026f3a:	4293      	cmp	r3, r2
 8026f3c:	f6bf af53 	bge.w	8026de6 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8026f40:	46a9      	mov	r9, r5
 8026f42:	46ba      	mov	sl, r7
 8026f44:	f1b9 0f00 	cmp.w	r9, #0
 8026f48:	dc5b      	bgt.n	8027002 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 8026f4a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8026f4e:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8026f52:	9b07      	ldr	r3, [sp, #28]
 8026f54:	2b00      	cmp	r3, #0
 8026f56:	f340 80cc 	ble.w	80270f2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38c>
 8026f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8026f5e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026f60:	ee30 0a04 	vadd.f32	s0, s0, s8
 8026f64:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8026f68:	eef0 6a62 	vmov.f32	s13, s5
 8026f6c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026f70:	ee31 1a05 	vadd.f32	s2, s2, s10
 8026f74:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f78:	ee16 4a90 	vmov	r4, s13
 8026f7c:	eef0 6a43 	vmov.f32	s13, s6
 8026f80:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8026f84:	ee16 6a90 	vmov	r6, s13
 8026f88:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8026f8c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8026f90:	ee77 2a62 	vsub.f32	s5, s14, s5
 8026f94:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8026f98:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8026f9c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8026fa0:	ee12 2a90 	vmov	r2, s5
 8026fa4:	eef0 2a47 	vmov.f32	s5, s14
 8026fa8:	fb92 f3f3 	sdiv	r3, r2, r3
 8026fac:	ee13 2a10 	vmov	r2, s6
 8026fb0:	931b      	str	r3, [sp, #108]	; 0x6c
 8026fb2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026fb4:	eeb0 3a67 	vmov.f32	s6, s15
 8026fb8:	fb92 f3f3 	sdiv	r3, r2, r3
 8026fbc:	931c      	str	r3, [sp, #112]	; 0x70
 8026fbe:	9b07      	ldr	r3, [sp, #28]
 8026fc0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026fc2:	3b01      	subs	r3, #1
 8026fc4:	9307      	str	r3, [sp, #28]
 8026fc6:	bf08      	it	eq
 8026fc8:	4615      	moveq	r5, r2
 8026fca:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8026fcc:	bf18      	it	ne
 8026fce:	461d      	movne	r5, r3
 8026fd0:	e6de      	b.n	8026d90 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8026fd2:	f111 0b01 	adds.w	fp, r1, #1
 8026fd6:	d48d      	bmi.n	8026ef4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026fd8:	45de      	cmp	lr, fp
 8026fda:	db8b      	blt.n	8026ef4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026fdc:	f110 0b01 	adds.w	fp, r0, #1
 8026fe0:	d488      	bmi.n	8026ef4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026fe2:	455b      	cmp	r3, fp
 8026fe4:	db86      	blt.n	8026ef4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8026fe6:	b21b      	sxth	r3, r3
 8026fe8:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8026fec:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 8026ff0:	9300      	str	r3, [sp, #0]
 8026ff2:	4642      	mov	r2, r8
 8026ff4:	fa0f f38e 	sxth.w	r3, lr
 8026ff8:	4649      	mov	r1, r9
 8026ffa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8026ffc:	f7ff fdd9 	bl	8026bb2 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtssiihh>
 8027000:	e778      	b.n	8026ef4 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 8027002:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8027004:	1420      	asrs	r0, r4, #16
 8027006:	1431      	asrs	r1, r6, #16
 8027008:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 802700c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8027010:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027014:	fb03 0101 	mla	r1, r3, r1, r0
 8027018:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 802701c:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 8027020:	8841      	ldrh	r1, [r0, #2]
 8027022:	f1be 0f00 	cmp.w	lr, #0
 8027026:	d00b      	beq.n	8027040 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
 8027028:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802702c:	3b01      	subs	r3, #1
 802702e:	005b      	lsls	r3, r3, #1
 8027030:	3302      	adds	r3, #2
 8027032:	eb00 0b03 	add.w	fp, r0, r3
 8027036:	5ac3      	ldrh	r3, [r0, r3]
 8027038:	930a      	str	r3, [sp, #40]	; 0x28
 802703a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 802703e:	930b      	str	r3, [sp, #44]	; 0x2c
 8027040:	ea4f 400c 	mov.w	r0, ip, lsl #16
 8027044:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8027048:	fb12 f30e 	smulbb	r3, r2, lr
 802704c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 8027050:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 8027054:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8027058:	10db      	asrs	r3, r3, #3
 802705a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 802705e:	ea40 000c 	orr.w	r0, r0, ip
 8027062:	f1ce 0c10 	rsb	ip, lr, #16
 8027066:	ea4b 0101 	orr.w	r1, fp, r1
 802706a:	f109 39ff 	add.w	r9, r9, #4294967295
 802706e:	ebac 0c02 	sub.w	ip, ip, r2
 8027072:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 8027076:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 802707a:	4351      	muls	r1, r2
 802707c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802707e:	fb0c 1c00 	mla	ip, ip, r0, r1
 8027082:	990a      	ldr	r1, [sp, #40]	; 0x28
 8027084:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 8027088:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 802708c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802708e:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 8027092:	0412      	lsls	r2, r2, #16
 8027094:	ea4b 0000 	orr.w	r0, fp, r0
 8027098:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 802709c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 80270a0:	fb03 c000 	mla	r0, r3, r0, ip
 80270a4:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 80270a8:	ea42 0b0b 	orr.w	fp, r2, fp
 80270ac:	fb03 000b 	mla	r0, r3, fp, r0
 80270b0:	0d42      	lsrs	r2, r0, #21
 80270b2:	0940      	lsrs	r0, r0, #5
 80270b4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80270b8:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 80270bc:	4310      	orrs	r0, r2
 80270be:	b282      	uxth	r2, r0
 80270c0:	10d3      	asrs	r3, r2, #3
 80270c2:	1211      	asrs	r1, r2, #8
 80270c4:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80270c8:	00d2      	lsls	r2, r2, #3
 80270ca:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 80270ce:	ea43 1393 	orr.w	r3, r3, r3, lsr #6
 80270d2:	b2d2      	uxtb	r2, r2
 80270d4:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 80270d8:	021b      	lsls	r3, r3, #8
 80270da:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80270de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80270e2:	431a      	orrs	r2, r3
 80270e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80270e6:	441c      	add	r4, r3
 80270e8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80270ea:	f84a 2b04 	str.w	r2, [sl], #4
 80270ee:	441e      	add	r6, r3
 80270f0:	e728      	b.n	8026f44 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 80270f2:	b00f      	add	sp, #60	; 0x3c
 80270f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080270f8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>:
 80270f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80270fc:	e9dd 690a 	ldrd	r6, r9, [sp, #40]	; 0x28
 8027100:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 8027104:	fb09 6c03 	mla	ip, r9, r3, r6
 8027108:	f1b9 0f00 	cmp.w	r9, #0
 802710c:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
 8027110:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8027114:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8027118:	f89d 5038 	ldrb.w	r5, [sp, #56]	; 0x38
 802711c:	eb02 080c 	add.w	r8, r2, ip
 8027120:	6808      	ldr	r0, [r1, #0]
 8027122:	f2c0 80a0 	blt.w	8027266 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 8027126:	45ca      	cmp	sl, r9
 8027128:	f340 809d 	ble.w	8027266 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16e>
 802712c:	2e00      	cmp	r6, #0
 802712e:	f2c0 8098 	blt.w	8027262 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8027132:	42b3      	cmp	r3, r6
 8027134:	f340 8095 	ble.w	8027262 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x16a>
 8027138:	f898 7002 	ldrb.w	r7, [r8, #2]
 802713c:	f898 b001 	ldrb.w	fp, [r8, #1]
 8027140:	043f      	lsls	r7, r7, #16
 8027142:	f812 200c 	ldrb.w	r2, [r2, ip]
 8027146:	ea47 270b 	orr.w	r7, r7, fp, lsl #8
 802714a:	4317      	orrs	r7, r2
 802714c:	1c72      	adds	r2, r6, #1
 802714e:	f100 808b 	bmi.w	8027268 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8027152:	4293      	cmp	r3, r2
 8027154:	f340 8088 	ble.w	8027268 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 8027158:	2c00      	cmp	r4, #0
 802715a:	f000 8085 	beq.w	8027268 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x170>
 802715e:	f898 c005 	ldrb.w	ip, [r8, #5]
 8027162:	f898 2004 	ldrb.w	r2, [r8, #4]
 8027166:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
 802716a:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
 802716e:	f898 2003 	ldrb.w	r2, [r8, #3]
 8027172:	ea4c 0c02 	orr.w	ip, ip, r2
 8027176:	f119 0901 	adds.w	r9, r9, #1
 802717a:	d479      	bmi.n	8027270 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 802717c:	45ca      	cmp	sl, r9
 802717e:	dd77      	ble.n	8027270 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8027180:	f1be 0f00 	cmp.w	lr, #0
 8027184:	d074      	beq.n	8027270 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x178>
 8027186:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
 802718a:	2e00      	cmp	r6, #0
 802718c:	eb08 090a 	add.w	r9, r8, sl
 8027190:	db6c      	blt.n	802726c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8027192:	42b3      	cmp	r3, r6
 8027194:	dd6a      	ble.n	802726c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x174>
 8027196:	f899 2002 	ldrb.w	r2, [r9, #2]
 802719a:	f899 b001 	ldrb.w	fp, [r9, #1]
 802719e:	0412      	lsls	r2, r2, #16
 80271a0:	f818 800a 	ldrb.w	r8, [r8, sl]
 80271a4:	ea42 220b 	orr.w	r2, r2, fp, lsl #8
 80271a8:	ea42 0208 	orr.w	r2, r2, r8
 80271ac:	3601      	adds	r6, #1
 80271ae:	d40c      	bmi.n	80271ca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 80271b0:	42b3      	cmp	r3, r6
 80271b2:	dd0a      	ble.n	80271ca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 80271b4:	b14c      	cbz	r4, 80271ca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 80271b6:	f899 0005 	ldrb.w	r0, [r9, #5]
 80271ba:	f899 3004 	ldrb.w	r3, [r9, #4]
 80271be:	0400      	lsls	r0, r0, #16
 80271c0:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 80271c4:	f899 3003 	ldrb.w	r3, [r9, #3]
 80271c8:	4318      	orrs	r0, r3
 80271ca:	fa1f f38e 	uxth.w	r3, lr
 80271ce:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 80271d2:	b2a4      	uxth	r4, r4
 80271d4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80271d8:	2dff      	cmp	r5, #255	; 0xff
 80271da:	fb04 f803 	mul.w	r8, r4, r3
 80271de:	ea4f 1404 	mov.w	r4, r4, lsl #4
 80271e2:	ebc8 1303 	rsb	r3, r8, r3, lsl #4
 80271e6:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 80271ea:	eba4 0408 	sub.w	r4, r4, r8
 80271ee:	fa1f fe83 	uxth.w	lr, r3
 80271f2:	f00c 13ff 	and.w	r3, ip, #16711935	; 0xff00ff
 80271f6:	b2a4      	uxth	r4, r4
 80271f8:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80271fc:	eba9 090e 	sub.w	r9, r9, lr
 8027200:	fb04 f303 	mul.w	r3, r4, r3
 8027204:	fa1f f989 	uxth.w	r9, r9
 8027208:	fb04 f40c 	mul.w	r4, r4, ip
 802720c:	fb09 3606 	mla	r6, r9, r6, r3
 8027210:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027214:	fb09 4407 	mla	r4, r9, r7, r4
 8027218:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802721c:	fb08 6603 	mla	r6, r8, r3, r6
 8027220:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027224:	fb08 4000 	mla	r0, r8, r0, r4
 8027228:	fb0e 6303 	mla	r3, lr, r3, r6
 802722c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8027230:	f003 16ff 	and.w	r6, r3, #16711935	; 0xff00ff
 8027234:	f402 437f 	and.w	r3, r2, #65280	; 0xff00
 8027238:	fb0e 0303 	mla	r3, lr, r3, r0
 802723c:	ea4f 2313 	mov.w	r3, r3, lsr #8
 8027240:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027244:	ea43 0306 	orr.w	r3, r3, r6
 8027248:	f3c3 4207 	ubfx	r2, r3, #16, #8
 802724c:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8027250:	b2d4      	uxtb	r4, r2
 8027252:	b2c6      	uxtb	r6, r0
 8027254:	d10e      	bne.n	8027274 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x17c>
 8027256:	700b      	strb	r3, [r1, #0]
 8027258:	7048      	strb	r0, [r1, #1]
 802725a:	708a      	strb	r2, [r1, #2]
 802725c:	70cd      	strb	r5, [r1, #3]
 802725e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027262:	4607      	mov	r7, r0
 8027264:	e772      	b.n	802714c <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x54>
 8027266:	4607      	mov	r7, r0
 8027268:	4684      	mov	ip, r0
 802726a:	e784      	b.n	8027176 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x7e>
 802726c:	4602      	mov	r2, r0
 802726e:	e79d      	b.n	80271ac <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xb4>
 8027270:	4602      	mov	r2, r0
 8027272:	e7aa      	b.n	80271ca <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0xd2>
 8027274:	2d00      	cmp	r5, #0
 8027276:	d0f2      	beq.n	802725e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>
 8027278:	78cf      	ldrb	r7, [r1, #3]
 802727a:	b2db      	uxtb	r3, r3
 802727c:	fb15 f606 	smulbb	r6, r5, r6
 8027280:	fb05 f207 	mul.w	r2, r5, r7
 8027284:	1c50      	adds	r0, r2, #1
 8027286:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 802728a:	19ea      	adds	r2, r5, r7
 802728c:	1200      	asrs	r0, r0, #8
 802728e:	1a12      	subs	r2, r2, r0
 8027290:	1a38      	subs	r0, r7, r0
 8027292:	780f      	ldrb	r7, [r1, #0]
 8027294:	b2d2      	uxtb	r2, r2
 8027296:	4347      	muls	r7, r0
 8027298:	70ca      	strb	r2, [r1, #3]
 802729a:	fb05 7303 	mla	r3, r5, r3, r7
 802729e:	fb15 f504 	smulbb	r5, r5, r4
 80272a2:	fb93 f3f2 	sdiv	r3, r3, r2
 80272a6:	700b      	strb	r3, [r1, #0]
 80272a8:	784b      	ldrb	r3, [r1, #1]
 80272aa:	fb00 6303 	mla	r3, r0, r3, r6
 80272ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80272b2:	704b      	strb	r3, [r1, #1]
 80272b4:	788b      	ldrb	r3, [r1, #2]
 80272b6:	fb00 5503 	mla	r5, r0, r3, r5
 80272ba:	fb95 f5f2 	sdiv	r5, r5, r2
 80272be:	708d      	strb	r5, [r1, #2]
 80272c0:	e7cd      	b.n	802725e <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh+0x166>

080272c2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80272c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80272c6:	b09b      	sub	sp, #108	; 0x6c
 80272c8:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 80272cc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80272ce:	9019      	str	r0, [sp, #100]	; 0x64
 80272d0:	9307      	str	r3, [sp, #28]
 80272d2:	6850      	ldr	r0, [r2, #4]
 80272d4:	6812      	ldr	r2, [r2, #0]
 80272d6:	f89d 40b4 	ldrb.w	r4, [sp, #180]	; 0xb4
 80272da:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80272de:	fb00 1303 	mla	r3, r0, r3, r1
 80272e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80272e6:	9308      	str	r3, [sp, #32]
 80272e8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80272ea:	681b      	ldr	r3, [r3, #0]
 80272ec:	9309      	str	r3, [sp, #36]	; 0x24
 80272ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80272f0:	2b00      	cmp	r3, #0
 80272f2:	dc03      	bgt.n	80272fc <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80272f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80272f6:	2b00      	cmp	r3, #0
 80272f8:	f340 8231 	ble.w	802775e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80272fc:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80272fe:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027302:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027306:	1e48      	subs	r0, r1, #1
 8027308:	1e55      	subs	r5, r2, #1
 802730a:	9b07      	ldr	r3, [sp, #28]
 802730c:	2b00      	cmp	r3, #0
 802730e:	f340 80c3 	ble.w	8027498 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 8027312:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8027314:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027316:	1436      	asrs	r6, r6, #16
 8027318:	ea4f 4323 	mov.w	r3, r3, asr #16
 802731c:	d406      	bmi.n	802732c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 802731e:	4286      	cmp	r6, r0
 8027320:	da04      	bge.n	802732c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027322:	2b00      	cmp	r3, #0
 8027324:	db02      	blt.n	802732c <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8027326:	42ab      	cmp	r3, r5
 8027328:	f2c0 80b7 	blt.w	802749a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 802732c:	3601      	adds	r6, #1
 802732e:	f100 80a4 	bmi.w	802747a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8027332:	42b1      	cmp	r1, r6
 8027334:	f2c0 80a1 	blt.w	802747a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8027338:	3301      	adds	r3, #1
 802733a:	f100 809e 	bmi.w	802747a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 802733e:	429a      	cmp	r2, r3
 8027340:	f2c0 809b 	blt.w	802747a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b8>
 8027344:	e9dd b607 	ldrd	fp, r6, [sp, #28]
 8027348:	f1bb 0f00 	cmp.w	fp, #0
 802734c:	f340 80c5 	ble.w	80274da <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8027350:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027352:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027354:	1418      	asrs	r0, r3, #16
 8027356:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027358:	68cf      	ldr	r7, [r1, #12]
 802735a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 802735e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8027360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027362:	1409      	asrs	r1, r1, #16
 8027364:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027368:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 802736a:	689b      	ldr	r3, [r3, #8]
 802736c:	f100 8127 	bmi.w	80275be <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027370:	f103 3cff 	add.w	ip, r3, #4294967295
 8027374:	4561      	cmp	r1, ip
 8027376:	f280 8122 	bge.w	80275be <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802737a:	2800      	cmp	r0, #0
 802737c:	f2c0 811f 	blt.w	80275be <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8027380:	f107 3cff 	add.w	ip, r7, #4294967295
 8027384:	4560      	cmp	r0, ip
 8027386:	f280 811a 	bge.w	80275be <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802738a:	b21b      	sxth	r3, r3
 802738c:	fb00 1103 	mla	r1, r0, r3, r1
 8027390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027392:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027396:	1847      	adds	r7, r0, r1
 8027398:	5c40      	ldrb	r0, [r0, r1]
 802739a:	7879      	ldrb	r1, [r7, #1]
 802739c:	f897 e002 	ldrb.w	lr, [r7, #2]
 80273a0:	910c      	str	r1, [sp, #48]	; 0x30
 80273a2:	f897 9003 	ldrb.w	r9, [r7, #3]
 80273a6:	f897 8004 	ldrb.w	r8, [r7, #4]
 80273aa:	f897 a005 	ldrb.w	sl, [r7, #5]
 80273ae:	b1cd      	cbz	r5, 80273e4 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80273b0:	f04f 0c03 	mov.w	ip, #3
 80273b4:	f06f 0104 	mvn.w	r1, #4
 80273b8:	3705      	adds	r7, #5
 80273ba:	fb13 130c 	smlabb	r3, r3, ip, r1
 80273be:	eb07 0c03 	add.w	ip, r7, r3
 80273c2:	5cfb      	ldrb	r3, [r7, r3]
 80273c4:	930d      	str	r3, [sp, #52]	; 0x34
 80273c6:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80273ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80273cc:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80273d0:	9311      	str	r3, [sp, #68]	; 0x44
 80273d2:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80273d6:	930e      	str	r3, [sp, #56]	; 0x38
 80273d8:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80273dc:	9310      	str	r3, [sp, #64]	; 0x40
 80273de:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80273e2:	9312      	str	r3, [sp, #72]	; 0x48
 80273e4:	b292      	uxth	r2, r2
 80273e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80273e8:	b2ad      	uxth	r5, r5
 80273ea:	2cff      	cmp	r4, #255	; 0xff
 80273ec:	fb02 f305 	mul.w	r3, r2, r5
 80273f0:	ea4f 1202 	mov.w	r2, r2, lsl #4
 80273f4:	ebc3 1505 	rsb	r5, r3, r5, lsl #4
 80273f8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80273fc:	eba2 0203 	sub.w	r2, r2, r3
 8027400:	b2ad      	uxth	r5, r5
 8027402:	b292      	uxth	r2, r2
 8027404:	eba7 0705 	sub.w	r7, r7, r5
 8027408:	fb02 f909 	mul.w	r9, r2, r9
 802740c:	b2bf      	uxth	r7, r7
 802740e:	fb02 f808 	mul.w	r8, r2, r8
 8027412:	fb02 fa0a 	mul.w	sl, r2, sl
 8027416:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027418:	fb07 9900 	mla	r9, r7, r0, r9
 802741c:	980d      	ldr	r0, [sp, #52]	; 0x34
 802741e:	fb07 8801 	mla	r8, r7, r1, r8
 8027422:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8027424:	fb07 aa0e 	mla	sl, r7, lr, sl
 8027428:	fb05 9900 	mla	r9, r5, r0, r9
 802742c:	980e      	ldr	r0, [sp, #56]	; 0x38
 802742e:	fb05 8801 	mla	r8, r5, r1, r8
 8027432:	9910      	ldr	r1, [sp, #64]	; 0x40
 8027434:	fb05 a502 	mla	r5, r5, r2, sl
 8027438:	9a12      	ldr	r2, [sp, #72]	; 0x48
 802743a:	fb03 9900 	mla	r9, r3, r0, r9
 802743e:	fb03 8801 	mla	r8, r3, r1, r8
 8027442:	fb03 5302 	mla	r3, r3, r2, r5
 8027446:	ea4f 2929 	mov.w	r9, r9, asr #8
 802744a:	ea4f 2828 	mov.w	r8, r8, asr #8
 802744e:	ea4f 2323 	mov.w	r3, r3, asr #8
 8027452:	f040 8088 	bne.w	8027566 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 8027456:	f886 9000 	strb.w	r9, [r6]
 802745a:	f886 8001 	strb.w	r8, [r6, #1]
 802745e:	70b3      	strb	r3, [r6, #2]
 8027460:	70f4      	strb	r4, [r6, #3]
 8027462:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8027464:	3604      	adds	r6, #4
 8027466:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8027468:	f10b 3bff 	add.w	fp, fp, #4294967295
 802746c:	4413      	add	r3, r2
 802746e:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8027470:	9325      	str	r3, [sp, #148]	; 0x94
 8027472:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027474:	4413      	add	r3, r2
 8027476:	9326      	str	r3, [sp, #152]	; 0x98
 8027478:	e766      	b.n	8027348 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 802747a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 802747c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 802747e:	4433      	add	r3, r6
 8027480:	9e28      	ldr	r6, [sp, #160]	; 0xa0
 8027482:	9325      	str	r3, [sp, #148]	; 0x94
 8027484:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027486:	4433      	add	r3, r6
 8027488:	9326      	str	r3, [sp, #152]	; 0x98
 802748a:	9b07      	ldr	r3, [sp, #28]
 802748c:	3b01      	subs	r3, #1
 802748e:	9307      	str	r3, [sp, #28]
 8027490:	9b08      	ldr	r3, [sp, #32]
 8027492:	3304      	adds	r3, #4
 8027494:	9308      	str	r3, [sp, #32]
 8027496:	e738      	b.n	802730a <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027498:	d026      	beq.n	80274e8 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 802749a:	9b07      	ldr	r3, [sp, #28]
 802749c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802749e:	3b01      	subs	r3, #1
 80274a0:	9d25      	ldr	r5, [sp, #148]	; 0x94
 80274a2:	fb00 5003 	mla	r0, r0, r3, r5
 80274a6:	1400      	asrs	r0, r0, #16
 80274a8:	f53f af4c 	bmi.w	8027344 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80274ac:	3901      	subs	r1, #1
 80274ae:	4288      	cmp	r0, r1
 80274b0:	f6bf af48 	bge.w	8027344 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80274b4:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80274b6:	9826      	ldr	r0, [sp, #152]	; 0x98
 80274b8:	fb01 0303 	mla	r3, r1, r3, r0
 80274bc:	141b      	asrs	r3, r3, #16
 80274be:	f53f af41 	bmi.w	8027344 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80274c2:	3a01      	subs	r2, #1
 80274c4:	4293      	cmp	r3, r2
 80274c6:	f6bf af3d 	bge.w	8027344 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80274ca:	9b08      	ldr	r3, [sp, #32]
 80274cc:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80274d0:	1d18      	adds	r0, r3, #4
 80274d2:	f1be 0f00 	cmp.w	lr, #0
 80274d6:	f300 808e 	bgt.w	80275f6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x334>
 80274da:	9b07      	ldr	r3, [sp, #28]
 80274dc:	9a08      	ldr	r2, [sp, #32]
 80274de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80274e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80274e6:	9308      	str	r3, [sp, #32]
 80274e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80274ea:	2b00      	cmp	r3, #0
 80274ec:	f340 8137 	ble.w	802775e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49c>
 80274f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80274f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80274f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80274fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80274fe:	eef0 6a62 	vmov.f32	s13, s5
 8027502:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027506:	ee31 1a05 	vadd.f32	s2, s2, s10
 802750a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802750e:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 8027512:	eef0 6a43 	vmov.f32	s13, s6
 8027516:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802751a:	edcd 6a26 	vstr	s13, [sp, #152]	; 0x98
 802751e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027522:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027526:	ee77 2a62 	vsub.f32	s5, s14, s5
 802752a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802752e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027532:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027536:	ee12 2a90 	vmov	r2, s5
 802753a:	eef0 2a47 	vmov.f32	s5, s14
 802753e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027542:	ee13 2a10 	vmov	r2, s6
 8027546:	9327      	str	r3, [sp, #156]	; 0x9c
 8027548:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802754a:	eeb0 3a67 	vmov.f32	s6, s15
 802754e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027552:	9328      	str	r3, [sp, #160]	; 0xa0
 8027554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8027556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8027558:	3b01      	subs	r3, #1
 802755a:	930a      	str	r3, [sp, #40]	; 0x28
 802755c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802755e:	bf08      	it	eq
 8027560:	4613      	moveq	r3, r2
 8027562:	9307      	str	r3, [sp, #28]
 8027564:	e6c3      	b.n	80272ee <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8027566:	2c00      	cmp	r4, #0
 8027568:	f43f af7b 	beq.w	8027462 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 802756c:	78f0      	ldrb	r0, [r6, #3]
 802756e:	fa5f f989 	uxtb.w	r9, r9
 8027572:	fa5f f888 	uxtb.w	r8, r8
 8027576:	fb04 f100 	mul.w	r1, r4, r0
 802757a:	1822      	adds	r2, r4, r0
 802757c:	b2db      	uxtb	r3, r3
 802757e:	1c4d      	adds	r5, r1, #1
 8027580:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8027584:	1229      	asrs	r1, r5, #8
 8027586:	1a45      	subs	r5, r0, r1
 8027588:	1a52      	subs	r2, r2, r1
 802758a:	7831      	ldrb	r1, [r6, #0]
 802758c:	b2d2      	uxtb	r2, r2
 802758e:	4369      	muls	r1, r5
 8027590:	70f2      	strb	r2, [r6, #3]
 8027592:	fb04 1909 	mla	r9, r4, r9, r1
 8027596:	7871      	ldrb	r1, [r6, #1]
 8027598:	4369      	muls	r1, r5
 802759a:	fb04 1808 	mla	r8, r4, r8, r1
 802759e:	78b1      	ldrb	r1, [r6, #2]
 80275a0:	434d      	muls	r5, r1
 80275a2:	fb04 5303 	mla	r3, r4, r3, r5
 80275a6:	fb99 f9f2 	sdiv	r9, r9, r2
 80275aa:	fb98 f8f2 	sdiv	r8, r8, r2
 80275ae:	fb93 f3f2 	sdiv	r3, r3, r2
 80275b2:	f886 9000 	strb.w	r9, [r6]
 80275b6:	f886 8001 	strb.w	r8, [r6, #1]
 80275ba:	70b3      	strb	r3, [r6, #2]
 80275bc:	e751      	b.n	8027462 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80275be:	f111 0c01 	adds.w	ip, r1, #1
 80275c2:	f53f af4e 	bmi.w	8027462 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80275c6:	4563      	cmp	r3, ip
 80275c8:	f6ff af4b 	blt.w	8027462 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80275cc:	f110 0c01 	adds.w	ip, r0, #1
 80275d0:	f53f af47 	bmi.w	8027462 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80275d4:	4567      	cmp	r7, ip
 80275d6:	f6ff af44 	blt.w	8027462 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80275da:	b23f      	sxth	r7, r7
 80275dc:	9101      	str	r1, [sp, #4]
 80275de:	b21b      	sxth	r3, r3
 80275e0:	4631      	mov	r1, r6
 80275e2:	9700      	str	r7, [sp, #0]
 80275e4:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80275e8:	e9cd 5404 	strd	r5, r4, [sp, #16]
 80275ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80275ee:	9819      	ldr	r0, [sp, #100]	; 0x64
 80275f0:	f7ff fd82 	bl	80270f8 <_ZNK8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKhssiihhh>
 80275f4:	e735      	b.n	8027462 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a0>
 80275f6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80275f8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80275fa:	f3c3 3103 	ubfx	r1, r3, #12, #4
 80275fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8027600:	1412      	asrs	r2, r2, #16
 8027602:	f3c3 3503 	ubfx	r5, r3, #12, #4
 8027606:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027608:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 802760c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 802760e:	141b      	asrs	r3, r3, #16
 8027610:	fb0c 2303 	mla	r3, ip, r3, r2
 8027614:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027616:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802761a:	18d6      	adds	r6, r2, r3
 802761c:	5cd2      	ldrb	r2, [r2, r3]
 802761e:	7873      	ldrb	r3, [r6, #1]
 8027620:	f896 8002 	ldrb.w	r8, [r6, #2]
 8027624:	930c      	str	r3, [sp, #48]	; 0x30
 8027626:	f896 a003 	ldrb.w	sl, [r6, #3]
 802762a:	f896 9004 	ldrb.w	r9, [r6, #4]
 802762e:	f896 b005 	ldrb.w	fp, [r6, #5]
 8027632:	b1a5      	cbz	r5, 802765e <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39c>
 8027634:	2703      	movs	r7, #3
 8027636:	f06f 0304 	mvn.w	r3, #4
 802763a:	3605      	adds	r6, #5
 802763c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8027640:	eb06 070c 	add.w	r7, r6, ip
 8027644:	f816 600c 	ldrb.w	r6, [r6, ip]
 8027648:	9613      	str	r6, [sp, #76]	; 0x4c
 802764a:	787e      	ldrb	r6, [r7, #1]
 802764c:	9615      	str	r6, [sp, #84]	; 0x54
 802764e:	78be      	ldrb	r6, [r7, #2]
 8027650:	9617      	str	r6, [sp, #92]	; 0x5c
 8027652:	78fe      	ldrb	r6, [r7, #3]
 8027654:	9614      	str	r6, [sp, #80]	; 0x50
 8027656:	793e      	ldrb	r6, [r7, #4]
 8027658:	9616      	str	r6, [sp, #88]	; 0x58
 802765a:	797e      	ldrb	r6, [r7, #5]
 802765c:	9618      	str	r6, [sp, #96]	; 0x60
 802765e:	b289      	uxth	r1, r1
 8027660:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027662:	b2ad      	uxth	r5, r5
 8027664:	2cff      	cmp	r4, #255	; 0xff
 8027666:	fb01 f605 	mul.w	r6, r1, r5
 802766a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 802766e:	ebc6 1505 	rsb	r5, r6, r5, lsl #4
 8027672:	f5c1 7780 	rsb	r7, r1, #256	; 0x100
 8027676:	eba1 0106 	sub.w	r1, r1, r6
 802767a:	b2ad      	uxth	r5, r5
 802767c:	b289      	uxth	r1, r1
 802767e:	eba7 0705 	sub.w	r7, r7, r5
 8027682:	fb01 f909 	mul.w	r9, r1, r9
 8027686:	b2bf      	uxth	r7, r7
 8027688:	fb01 fa0a 	mul.w	sl, r1, sl
 802768c:	fb01 fb0b 	mul.w	fp, r1, fp
 8027690:	fb07 9903 	mla	r9, r7, r3, r9
 8027694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8027696:	fb07 aa02 	mla	sl, r7, r2, sl
 802769a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 802769c:	fb05 9903 	mla	r9, r5, r3, r9
 80276a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80276a2:	fb07 bb08 	mla	fp, r7, r8, fp
 80276a6:	fb06 9903 	mla	r9, r6, r3, r9
 80276aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80276ac:	fb05 aa02 	mla	sl, r5, r2, sl
 80276b0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80276b2:	fb05 bb03 	mla	fp, r5, r3, fp
 80276b6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80276b8:	fb06 aa02 	mla	sl, r6, r2, sl
 80276bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80276c0:	fb06 b603 	mla	r6, r6, r3, fp
 80276c4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80276c8:	ea4f 2626 	mov.w	r6, r6, asr #8
 80276cc:	d113      	bne.n	80276f6 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80276ce:	f800 ac04 	strb.w	sl, [r0, #-4]
 80276d2:	f800 9c03 	strb.w	r9, [r0, #-3]
 80276d6:	f800 6c02 	strb.w	r6, [r0, #-2]
 80276da:	f800 4c01 	strb.w	r4, [r0, #-1]
 80276de:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80276e0:	3004      	adds	r0, #4
 80276e2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80276e4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80276e8:	4413      	add	r3, r2
 80276ea:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80276ec:	9325      	str	r3, [sp, #148]	; 0x94
 80276ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80276f0:	4413      	add	r3, r2
 80276f2:	9326      	str	r3, [sp, #152]	; 0x98
 80276f4:	e6ed      	b.n	80274d2 <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 80276f6:	2c00      	cmp	r4, #0
 80276f8:	d0f1      	beq.n	80276de <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 80276fa:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 80276fe:	fa5f fa8a 	uxtb.w	sl, sl
 8027702:	fa5f f989 	uxtb.w	r9, r9
 8027706:	fb04 f302 	mul.w	r3, r4, r2
 802770a:	eb04 0c02 	add.w	ip, r4, r2
 802770e:	b2f6      	uxtb	r6, r6
 8027710:	1c59      	adds	r1, r3, #1
 8027712:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8027716:	120b      	asrs	r3, r1, #8
 8027718:	1ad1      	subs	r1, r2, r3
 802771a:	ebac 0c03 	sub.w	ip, ip, r3
 802771e:	f810 3c04 	ldrb.w	r3, [r0, #-4]
 8027722:	fa5f fc8c 	uxtb.w	ip, ip
 8027726:	434b      	muls	r3, r1
 8027728:	f800 cc01 	strb.w	ip, [r0, #-1]
 802772c:	fb04 3a0a 	mla	sl, r4, sl, r3
 8027730:	f810 3c03 	ldrb.w	r3, [r0, #-3]
 8027734:	434b      	muls	r3, r1
 8027736:	fb04 3909 	mla	r9, r4, r9, r3
 802773a:	f810 3c02 	ldrb.w	r3, [r0, #-2]
 802773e:	4359      	muls	r1, r3
 8027740:	fb04 1606 	mla	r6, r4, r6, r1
 8027744:	fb9a fafc 	sdiv	sl, sl, ip
 8027748:	fb99 f9fc 	sdiv	r9, r9, ip
 802774c:	fb96 f6fc 	sdiv	r6, r6, ip
 8027750:	f800 ac04 	strb.w	sl, [r0, #-4]
 8027754:	f800 9c03 	strb.w	r9, [r0, #-3]
 8027758:	f800 6c02 	strb.w	r6, [r0, #-2]
 802775c:	e7bf      	b.n	80276de <_ZN8touchgfx8LCD32bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x41c>
 802775e:	b01b      	add	sp, #108	; 0x6c
 8027760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027764 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>:
 8027764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027768:	e9dd 7809 	ldrd	r7, r8, [sp, #36]	; 0x24
 802776c:	f9bd 9020 	ldrsh.w	r9, [sp, #32]
 8027770:	fb08 7603 	mla	r6, r8, r3, r7
 8027774:	f1b8 0f00 	cmp.w	r8, #0
 8027778:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 802777c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8027780:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 8027784:	6808      	ldr	r0, [r1, #0]
 8027786:	eb02 0e06 	add.w	lr, r2, r6
 802778a:	f2c0 8089 	blt.w	80278a0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 802778e:	45c1      	cmp	r9, r8
 8027790:	f340 8086 	ble.w	80278a0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x13c>
 8027794:	2f00      	cmp	r7, #0
 8027796:	f2c0 8081 	blt.w	802789c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802779a:	42bb      	cmp	r3, r7
 802779c:	dd7e      	ble.n	802789c <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x138>
 802779e:	f89e 4002 	ldrb.w	r4, [lr, #2]
 80277a2:	f89e a001 	ldrb.w	sl, [lr, #1]
 80277a6:	0424      	lsls	r4, r4, #16
 80277a8:	5d92      	ldrb	r2, [r2, r6]
 80277aa:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
 80277ae:	4314      	orrs	r4, r2
 80277b0:	1c7a      	adds	r2, r7, #1
 80277b2:	d478      	bmi.n	80278a6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 80277b4:	4293      	cmp	r3, r2
 80277b6:	dd76      	ble.n	80278a6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 80277b8:	2d00      	cmp	r5, #0
 80277ba:	d074      	beq.n	80278a6 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x142>
 80277bc:	f89e 6005 	ldrb.w	r6, [lr, #5]
 80277c0:	f89e 2004 	ldrb.w	r2, [lr, #4]
 80277c4:	0436      	lsls	r6, r6, #16
 80277c6:	ea46 2602 	orr.w	r6, r6, r2, lsl #8
 80277ca:	f89e 2003 	ldrb.w	r2, [lr, #3]
 80277ce:	4316      	orrs	r6, r2
 80277d0:	f118 0801 	adds.w	r8, r8, #1
 80277d4:	d46b      	bmi.n	80278ae <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 80277d6:	45c1      	cmp	r9, r8
 80277d8:	dd69      	ble.n	80278ae <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 80277da:	f1bc 0f00 	cmp.w	ip, #0
 80277de:	d066      	beq.n	80278ae <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x14a>
 80277e0:	eb03 0943 	add.w	r9, r3, r3, lsl #1
 80277e4:	2f00      	cmp	r7, #0
 80277e6:	eb0e 0809 	add.w	r8, lr, r9
 80277ea:	db5e      	blt.n	80278aa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 80277ec:	42bb      	cmp	r3, r7
 80277ee:	dd5c      	ble.n	80278aa <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x146>
 80277f0:	f898 2002 	ldrb.w	r2, [r8, #2]
 80277f4:	f898 a001 	ldrb.w	sl, [r8, #1]
 80277f8:	0412      	lsls	r2, r2, #16
 80277fa:	f81e e009 	ldrb.w	lr, [lr, r9]
 80277fe:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
 8027802:	ea42 020e 	orr.w	r2, r2, lr
 8027806:	3701      	adds	r7, #1
 8027808:	d40c      	bmi.n	8027824 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802780a:	42bb      	cmp	r3, r7
 802780c:	dd0a      	ble.n	8027824 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 802780e:	b14d      	cbz	r5, 8027824 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>
 8027810:	f898 0005 	ldrb.w	r0, [r8, #5]
 8027814:	f898 3004 	ldrb.w	r3, [r8, #4]
 8027818:	0400      	lsls	r0, r0, #16
 802781a:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 802781e:	f898 3003 	ldrb.w	r3, [r8, #3]
 8027822:	4318      	orrs	r0, r3
 8027824:	b2ad      	uxth	r5, r5
 8027826:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 802782a:	fa1f f78c 	uxth.w	r7, ip
 802782e:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8027832:	f004 18ff 	and.w	r8, r4, #16711935	; 0xff00ff
 8027836:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 802783a:	fb05 fc07 	mul.w	ip, r5, r7
 802783e:	012d      	lsls	r5, r5, #4
 8027840:	ebcc 1707 	rsb	r7, ip, r7, lsl #4
 8027844:	f5c5 7e80 	rsb	lr, r5, #256	; 0x100
 8027848:	eba5 050c 	sub.w	r5, r5, ip
 802784c:	b2bf      	uxth	r7, r7
 802784e:	b2ad      	uxth	r5, r5
 8027850:	ebae 0e07 	sub.w	lr, lr, r7
 8027854:	436b      	muls	r3, r5
 8027856:	fa1f fe8e 	uxth.w	lr, lr
 802785a:	436e      	muls	r6, r5
 802785c:	fb0e 3808 	mla	r8, lr, r8, r3
 8027860:	f000 13ff 	and.w	r3, r0, #16711935	; 0xff00ff
 8027864:	fb0e 6404 	mla	r4, lr, r4, r6
 8027868:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 802786c:	fb0c 8803 	mla	r8, ip, r3, r8
 8027870:	f002 13ff 	and.w	r3, r2, #16711935	; 0xff00ff
 8027874:	fb0c 4000 	mla	r0, ip, r0, r4
 8027878:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802787c:	fb07 8303 	mla	r3, r7, r3, r8
 8027880:	fb07 0002 	mla	r0, r7, r2, r0
 8027884:	0a1b      	lsrs	r3, r3, #8
 8027886:	0a00      	lsrs	r0, r0, #8
 8027888:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 802788c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027890:	4318      	orrs	r0, r3
 8027892:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8027896:	6008      	str	r0, [r1, #0]
 8027898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802789c:	4604      	mov	r4, r0
 802789e:	e787      	b.n	80277b0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x4c>
 80278a0:	4606      	mov	r6, r0
 80278a2:	4604      	mov	r4, r0
 80278a4:	e794      	b.n	80277d0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 80278a6:	4606      	mov	r6, r0
 80278a8:	e792      	b.n	80277d0 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0x6c>
 80278aa:	4602      	mov	r2, r0
 80278ac:	e7ab      	b.n	8027806 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xa2>
 80278ae:	4602      	mov	r2, r0
 80278b0:	e7b8      	b.n	8027824 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh+0xc0>

080278b2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80278b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80278b6:	b09b      	sub	sp, #108	; 0x6c
 80278b8:	e9cd 1209 	strd	r1, r2, [sp, #36]	; 0x24
 80278bc:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80278be:	9019      	str	r0, [sp, #100]	; 0x64
 80278c0:	9306      	str	r3, [sp, #24]
 80278c2:	6850      	ldr	r0, [r2, #4]
 80278c4:	6812      	ldr	r2, [r2, #0]
 80278c6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 80278ca:	e9dd 4a25 	ldrd	r4, sl, [sp, #148]	; 0x94
 80278ce:	fb00 1303 	mla	r3, r0, r3, r1
 80278d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80278d6:	9307      	str	r3, [sp, #28]
 80278d8:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80278da:	681b      	ldr	r3, [r3, #0]
 80278dc:	9308      	str	r3, [sp, #32]
 80278de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80278e0:	2b00      	cmp	r3, #0
 80278e2:	dc03      	bgt.n	80278ec <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80278e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80278e6:	2b00      	cmp	r3, #0
 80278e8:	f340 81a6 	ble.w	8027c38 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 80278ec:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80278ee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80278f2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80278f6:	1e48      	subs	r0, r1, #1
 80278f8:	1e55      	subs	r5, r2, #1
 80278fa:	9b06      	ldr	r3, [sp, #24]
 80278fc:	2b00      	cmp	r3, #0
 80278fe:	f340 80b0 	ble.w	8027a62 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8027902:	1426      	asrs	r6, r4, #16
 8027904:	ea4f 432a 	mov.w	r3, sl, asr #16
 8027908:	d406      	bmi.n	8027918 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802790a:	4286      	cmp	r6, r0
 802790c:	da04      	bge.n	8027918 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 802790e:	2b00      	cmp	r3, #0
 8027910:	db02      	blt.n	8027918 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8027912:	42ab      	cmp	r3, r5
 8027914:	f2c0 80a6 	blt.w	8027a64 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b2>
 8027918:	3601      	adds	r6, #1
 802791a:	f100 8097 	bmi.w	8027a4c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802791e:	42b1      	cmp	r1, r6
 8027920:	f2c0 8094 	blt.w	8027a4c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027924:	3301      	adds	r3, #1
 8027926:	f100 8091 	bmi.w	8027a4c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 802792a:	429a      	cmp	r2, r3
 802792c:	f2c0 808e 	blt.w	8027a4c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8027930:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 8027934:	f1bb 0f00 	cmp.w	fp, #0
 8027938:	f340 80af 	ble.w	8027a9a <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802793c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 802793e:	ea4f 452a 	mov.w	r5, sl, asr #16
 8027942:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027944:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8027948:	68c7      	ldr	r7, [r0, #12]
 802794a:	1420      	asrs	r0, r4, #16
 802794c:	f3ca 3103 	ubfx	r1, sl, #12, #4
 8027950:	689b      	ldr	r3, [r3, #8]
 8027952:	f100 80e8 	bmi.w	8027b26 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027956:	f103 3cff 	add.w	ip, r3, #4294967295
 802795a:	4560      	cmp	r0, ip
 802795c:	f280 80e3 	bge.w	8027b26 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027960:	2d00      	cmp	r5, #0
 8027962:	f2c0 80e0 	blt.w	8027b26 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027966:	f107 3cff 	add.w	ip, r7, #4294967295
 802796a:	4565      	cmp	r5, ip
 802796c:	f280 80db 	bge.w	8027b26 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8027970:	b21b      	sxth	r3, r3
 8027972:	fb05 0003 	mla	r0, r5, r3, r0
 8027976:	9d08      	ldr	r5, [sp, #32]
 8027978:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802797c:	182f      	adds	r7, r5, r0
 802797e:	5c28      	ldrb	r0, [r5, r0]
 8027980:	900b      	str	r0, [sp, #44]	; 0x2c
 8027982:	7978      	ldrb	r0, [r7, #5]
 8027984:	787d      	ldrb	r5, [r7, #1]
 8027986:	f897 e002 	ldrb.w	lr, [r7, #2]
 802798a:	f897 9003 	ldrb.w	r9, [r7, #3]
 802798e:	f897 8004 	ldrb.w	r8, [r7, #4]
 8027992:	900c      	str	r0, [sp, #48]	; 0x30
 8027994:	b1c1      	cbz	r1, 80279c8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8027996:	f06f 0c04 	mvn.w	ip, #4
 802799a:	2003      	movs	r0, #3
 802799c:	3705      	adds	r7, #5
 802799e:	fb13 c300 	smlabb	r3, r3, r0, ip
 80279a2:	eb07 0c03 	add.w	ip, r7, r3
 80279a6:	5cfb      	ldrb	r3, [r7, r3]
 80279a8:	930d      	str	r3, [sp, #52]	; 0x34
 80279aa:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80279ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80279b0:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80279b4:	9311      	str	r3, [sp, #68]	; 0x44
 80279b6:	f89c 3003 	ldrb.w	r3, [ip, #3]
 80279ba:	930e      	str	r3, [sp, #56]	; 0x38
 80279bc:	f89c 3004 	ldrb.w	r3, [ip, #4]
 80279c0:	9310      	str	r3, [sp, #64]	; 0x40
 80279c2:	f89c 3005 	ldrb.w	r3, [ip, #5]
 80279c6:	9312      	str	r3, [sp, #72]	; 0x48
 80279c8:	b292      	uxth	r2, r2
 80279ca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80279cc:	b289      	uxth	r1, r1
 80279ce:	fb02 f301 	mul.w	r3, r2, r1
 80279d2:	0112      	lsls	r2, r2, #4
 80279d4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80279d8:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80279dc:	1ad2      	subs	r2, r2, r3
 80279de:	b289      	uxth	r1, r1
 80279e0:	b292      	uxth	r2, r2
 80279e2:	1a7f      	subs	r7, r7, r1
 80279e4:	fb02 f909 	mul.w	r9, r2, r9
 80279e8:	b2bf      	uxth	r7, r7
 80279ea:	fb02 f808 	mul.w	r8, r2, r8
 80279ee:	fb07 9900 	mla	r9, r7, r0, r9
 80279f2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80279f4:	fb07 8805 	mla	r8, r7, r5, r8
 80279f8:	fb01 9900 	mla	r9, r1, r0, r9
 80279fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80279fe:	fb03 9900 	mla	r9, r3, r0, r9
 8027a02:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8027a04:	fb01 8800 	mla	r8, r1, r0, r8
 8027a08:	9810      	ldr	r0, [sp, #64]	; 0x40
 8027a0a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8027a0e:	fb03 8800 	mla	r8, r3, r0, r8
 8027a12:	980c      	ldr	r0, [sp, #48]	; 0x30
 8027a14:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027a18:	4342      	muls	r2, r0
 8027a1a:	ea49 0908 	orr.w	r9, r9, r8
 8027a1e:	fb07 280e 	mla	r8, r7, lr, r2
 8027a22:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8027a24:	fb01 8802 	mla	r8, r1, r2, r8
 8027a28:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8027a2a:	fb03 8802 	mla	r8, r3, r2, r8
 8027a2e:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8027a32:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8027a36:	ea49 0308 	orr.w	r3, r9, r8
 8027a3a:	6033      	str	r3, [r6, #0]
 8027a3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027a3e:	3604      	adds	r6, #4
 8027a40:	f10b 3bff 	add.w	fp, fp, #4294967295
 8027a44:	441c      	add	r4, r3
 8027a46:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a48:	449a      	add	sl, r3
 8027a4a:	e773      	b.n	8027934 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8027a4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027a4e:	441c      	add	r4, r3
 8027a50:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027a52:	449a      	add	sl, r3
 8027a54:	9b06      	ldr	r3, [sp, #24]
 8027a56:	3b01      	subs	r3, #1
 8027a58:	9306      	str	r3, [sp, #24]
 8027a5a:	9b07      	ldr	r3, [sp, #28]
 8027a5c:	3304      	adds	r3, #4
 8027a5e:	9307      	str	r3, [sp, #28]
 8027a60:	e74b      	b.n	80278fa <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8027a62:	d021      	beq.n	8027aa8 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8027a64:	9b06      	ldr	r3, [sp, #24]
 8027a66:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8027a68:	3b01      	subs	r3, #1
 8027a6a:	fb00 4003 	mla	r0, r0, r3, r4
 8027a6e:	1400      	asrs	r0, r0, #16
 8027a70:	f53f af5e 	bmi.w	8027930 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8027a74:	3901      	subs	r1, #1
 8027a76:	4288      	cmp	r0, r1
 8027a78:	f6bf af5a 	bge.w	8027930 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8027a7c:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8027a7e:	fb01 a303 	mla	r3, r1, r3, sl
 8027a82:	141b      	asrs	r3, r3, #16
 8027a84:	f53f af54 	bmi.w	8027930 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8027a88:	3a01      	subs	r2, #1
 8027a8a:	4293      	cmp	r3, r2
 8027a8c:	f6bf af50 	bge.w	8027930 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8027a90:	e9dd ce06 	ldrd	ip, lr, [sp, #24]
 8027a94:	f1bc 0f00 	cmp.w	ip, #0
 8027a98:	dc5c      	bgt.n	8027b54 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8027a9a:	9b06      	ldr	r3, [sp, #24]
 8027a9c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8027aa0:	9b07      	ldr	r3, [sp, #28]
 8027aa2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8027aa6:	9307      	str	r3, [sp, #28]
 8027aa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027aaa:	2b00      	cmp	r3, #0
 8027aac:	f340 80c4 	ble.w	8027c38 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 8027ab0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8027ab4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027ab6:	ee30 0a04 	vadd.f32	s0, s0, s8
 8027aba:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8027abe:	eef0 6a62 	vmov.f32	s13, s5
 8027ac2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8027ac6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8027aca:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ace:	ee16 4a90 	vmov	r4, s13
 8027ad2:	eef0 6a43 	vmov.f32	s13, s6
 8027ad6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8027ada:	ee16 aa90 	vmov	sl, s13
 8027ade:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8027ae2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8027ae6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8027aea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8027aee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8027af2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8027af6:	ee12 2a90 	vmov	r2, s5
 8027afa:	eef0 2a47 	vmov.f32	s5, s14
 8027afe:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b02:	ee13 2a10 	vmov	r2, s6
 8027b06:	9327      	str	r3, [sp, #156]	; 0x9c
 8027b08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027b0a:	eeb0 3a67 	vmov.f32	s6, s15
 8027b0e:	fb92 f3f3 	sdiv	r3, r2, r3
 8027b12:	9328      	str	r3, [sp, #160]	; 0xa0
 8027b14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027b16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027b18:	3b01      	subs	r3, #1
 8027b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8027b1c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8027b1e:	bf08      	it	eq
 8027b20:	4613      	moveq	r3, r2
 8027b22:	9306      	str	r3, [sp, #24]
 8027b24:	e6db      	b.n	80278de <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8027b26:	f110 0c01 	adds.w	ip, r0, #1
 8027b2a:	d487      	bmi.n	8027a3c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027b2c:	4563      	cmp	r3, ip
 8027b2e:	db85      	blt.n	8027a3c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027b30:	f115 0c01 	adds.w	ip, r5, #1
 8027b34:	d482      	bmi.n	8027a3c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027b36:	4567      	cmp	r7, ip
 8027b38:	db80      	blt.n	8027a3c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027b3a:	b23f      	sxth	r7, r7
 8027b3c:	b21b      	sxth	r3, r3
 8027b3e:	9700      	str	r7, [sp, #0]
 8027b40:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8027b44:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8027b48:	9a08      	ldr	r2, [sp, #32]
 8027b4a:	4631      	mov	r1, r6
 8027b4c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8027b4e:	f7ff fe09 	bl	8027764 <_ZNK8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKhssiihh>
 8027b52:	e773      	b.n	8027a3c <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8027b54:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8027b56:	1420      	asrs	r0, r4, #16
 8027b58:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8027b5c:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8027b60:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 8027b64:	ea4f 412a 	mov.w	r1, sl, asr #16
 8027b68:	930b      	str	r3, [sp, #44]	; 0x2c
 8027b6a:	fb07 0101 	mla	r1, r7, r1, r0
 8027b6e:	9808      	ldr	r0, [sp, #32]
 8027b70:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8027b74:	1845      	adds	r5, r0, r1
 8027b76:	5c41      	ldrb	r1, [r0, r1]
 8027b78:	78ae      	ldrb	r6, [r5, #2]
 8027b7a:	7868      	ldrb	r0, [r5, #1]
 8027b7c:	960c      	str	r6, [sp, #48]	; 0x30
 8027b7e:	f895 9003 	ldrb.w	r9, [r5, #3]
 8027b82:	f895 8004 	ldrb.w	r8, [r5, #4]
 8027b86:	f895 b005 	ldrb.w	fp, [r5, #5]
 8027b8a:	b192      	cbz	r2, 8027bb2 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 8027b8c:	2603      	movs	r6, #3
 8027b8e:	f06f 0304 	mvn.w	r3, #4
 8027b92:	3505      	adds	r5, #5
 8027b94:	fb17 3706 	smlabb	r7, r7, r6, r3
 8027b98:	19ee      	adds	r6, r5, r7
 8027b9a:	5ded      	ldrb	r5, [r5, r7]
 8027b9c:	9513      	str	r5, [sp, #76]	; 0x4c
 8027b9e:	7875      	ldrb	r5, [r6, #1]
 8027ba0:	9515      	str	r5, [sp, #84]	; 0x54
 8027ba2:	78b5      	ldrb	r5, [r6, #2]
 8027ba4:	9517      	str	r5, [sp, #92]	; 0x5c
 8027ba6:	78f5      	ldrb	r5, [r6, #3]
 8027ba8:	9514      	str	r5, [sp, #80]	; 0x50
 8027baa:	7935      	ldrb	r5, [r6, #4]
 8027bac:	9516      	str	r5, [sp, #88]	; 0x58
 8027bae:	7975      	ldrb	r5, [r6, #5]
 8027bb0:	9518      	str	r5, [sp, #96]	; 0x60
 8027bb2:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8027bb6:	b292      	uxth	r2, r2
 8027bb8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8027bbc:	fb03 f502 	mul.w	r5, r3, r2
 8027bc0:	011b      	lsls	r3, r3, #4
 8027bc2:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8027bc6:	f5c3 7680 	rsb	r6, r3, #256	; 0x100
 8027bca:	1b5b      	subs	r3, r3, r5
 8027bcc:	b292      	uxth	r2, r2
 8027bce:	b29b      	uxth	r3, r3
 8027bd0:	1ab6      	subs	r6, r6, r2
 8027bd2:	fb03 f909 	mul.w	r9, r3, r9
 8027bd6:	b2b6      	uxth	r6, r6
 8027bd8:	fb03 f808 	mul.w	r8, r3, r8
 8027bdc:	fb03 fb0b 	mul.w	fp, r3, fp
 8027be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8027be2:	fb06 9901 	mla	r9, r6, r1, r9
 8027be6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8027be8:	fb06 8800 	mla	r8, r6, r0, r8
 8027bec:	fb02 9901 	mla	r9, r2, r1, r9
 8027bf0:	9914      	ldr	r1, [sp, #80]	; 0x50
 8027bf2:	fb06 bb03 	mla	fp, r6, r3, fp
 8027bf6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027bf8:	fb05 9901 	mla	r9, r5, r1, r9
 8027bfc:	9915      	ldr	r1, [sp, #84]	; 0x54
 8027bfe:	fb02 bb03 	mla	fp, r2, r3, fp
 8027c02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027c04:	fb02 8801 	mla	r8, r2, r1, r8
 8027c08:	9916      	ldr	r1, [sp, #88]	; 0x58
 8027c0a:	f3c9 2907 	ubfx	r9, r9, #8, #8
 8027c0e:	fb05 8801 	mla	r8, r5, r1, r8
 8027c12:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027c16:	ea49 0908 	orr.w	r9, r9, r8
 8027c1a:	fb05 b803 	mla	r8, r5, r3, fp
 8027c1e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8027c20:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8027c24:	441c      	add	r4, r3
 8027c26:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8027c28:	f408 087f 	and.w	r8, r8, #16711680	; 0xff0000
 8027c2c:	449a      	add	sl, r3
 8027c2e:	ea49 0508 	orr.w	r5, r9, r8
 8027c32:	f84e 5b04 	str.w	r5, [lr], #4
 8027c36:	e72d      	b.n	8027a94 <_ZN8touchgfx8LCD32bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8027c38:	b01b      	add	sp, #108	; 0x6c
 8027c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08027c3e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>:
 8027c3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027c42:	b085      	sub	sp, #20
 8027c44:	6808      	ldr	r0, [r1, #0]
 8027c46:	e9dd 680f 	ldrd	r6, r8, [sp, #60]	; 0x3c
 8027c4a:	f9bd a038 	ldrsh.w	sl, [sp, #56]	; 0x38
 8027c4e:	fb08 6403 	mla	r4, r8, r3, r6
 8027c52:	f1b8 0f00 	cmp.w	r8, #0
 8027c56:	f89d c044 	ldrb.w	ip, [sp, #68]	; 0x44
 8027c5a:	f89d e048 	ldrb.w	lr, [sp, #72]	; 0x48
 8027c5e:	eb02 0984 	add.w	r9, r2, r4, lsl #2
 8027c62:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8027c66:	f2c0 80fc 	blt.w	8027e62 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 8027c6a:	45c2      	cmp	sl, r8
 8027c6c:	f340 80f9 	ble.w	8027e62 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x224>
 8027c70:	2e00      	cmp	r6, #0
 8027c72:	f2c0 80f4 	blt.w	8027e5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 8027c76:	42b3      	cmp	r3, r6
 8027c78:	f340 80f1 	ble.w	8027e5e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x220>
 8027c7c:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 8027c80:	1c72      	adds	r2, r6, #1
 8027c82:	f100 80ef 	bmi.w	8027e64 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8027c86:	4293      	cmp	r3, r2
 8027c88:	f340 80ec 	ble.w	8027e64 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8027c8c:	f1bc 0f00 	cmp.w	ip, #0
 8027c90:	f000 80e8 	beq.w	8027e64 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x226>
 8027c94:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8027c98:	f118 0801 	adds.w	r8, r8, #1
 8027c9c:	f100 80e6 	bmi.w	8027e6c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8027ca0:	45c2      	cmp	sl, r8
 8027ca2:	f340 80e3 	ble.w	8027e6c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8027ca6:	f1be 0f00 	cmp.w	lr, #0
 8027caa:	f000 80df 	beq.w	8027e6c <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22e>
 8027cae:	2e00      	cmp	r6, #0
 8027cb0:	f2c0 80da 	blt.w	8027e68 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 8027cb4:	42b3      	cmp	r3, r6
 8027cb6:	f340 80d7 	ble.w	8027e68 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x22a>
 8027cba:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
 8027cbe:	3601      	adds	r6, #1
 8027cc0:	d407      	bmi.n	8027cd2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027cc2:	42b3      	cmp	r3, r6
 8027cc4:	dd05      	ble.n	8027cd2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027cc6:	f1bc 0f00 	cmp.w	ip, #0
 8027cca:	d002      	beq.n	8027cd2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027ccc:	3301      	adds	r3, #1
 8027cce:	f859 0023 	ldr.w	r0, [r9, r3, lsl #2]
 8027cd2:	fa1f fc8c 	uxth.w	ip, ip
 8027cd6:	fa1f f38e 	uxth.w	r3, lr
 8027cda:	ea4f 6a14 	mov.w	sl, r4, lsr #24
 8027cde:	fb03 fe0c 	mul.w	lr, r3, ip
 8027ce2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8027ce6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 8027cea:	ebce 1303 	rsb	r3, lr, r3, lsl #4
 8027cee:	ebac 060e 	sub.w	r6, ip, lr
 8027cf2:	f5cc 7c80 	rsb	ip, ip, #256	; 0x100
 8027cf6:	ea4f 6912 	mov.w	r9, r2, lsr #24
 8027cfa:	b29b      	uxth	r3, r3
 8027cfc:	b2b6      	uxth	r6, r6
 8027cfe:	ebac 0c03 	sub.w	ip, ip, r3
 8027d02:	ea4f 6810 	mov.w	r8, r0, lsr #24
 8027d06:	9601      	str	r6, [sp, #4]
 8027d08:	fa1f f68c 	uxth.w	r6, ip
 8027d0c:	9602      	str	r6, [sp, #8]
 8027d0e:	9e01      	ldr	r6, [sp, #4]
 8027d10:	fb06 fc0a 	mul.w	ip, r6, sl
 8027d14:	9e02      	ldr	r6, [sp, #8]
 8027d16:	fb06 cc0b 	mla	ip, r6, fp, ip
 8027d1a:	fb03 cc09 	mla	ip, r3, r9, ip
 8027d1e:	fb0e cc08 	mla	ip, lr, r8, ip
 8027d22:	f3cc 2607 	ubfx	r6, ip, #8, #8
 8027d26:	9603      	str	r6, [sp, #12]
 8027d28:	2e00      	cmp	r6, #0
 8027d2a:	f000 8095 	beq.w	8027e58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 8027d2e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8027d32:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 8027d36:	fb0b fc0c 	mul.w	ip, fp, ip
 8027d3a:	fb0b f505 	mul.w	r5, fp, r5
 8027d3e:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8027d42:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027d46:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 8027d4a:	44dc      	add	ip, fp
 8027d4c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8027d50:	f00c 16ff 	and.w	r6, ip, #16711935	; 0xff00ff
 8027d54:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 8027d58:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8027d5c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8027d60:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8027d64:	fb0a fc0c 	mul.w	ip, sl, ip
 8027d68:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 8027d6c:	fb0a fa04 	mul.w	sl, sl, r4
 8027d70:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8027d74:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027d78:	f50a 7480 	add.w	r4, sl, #256	; 0x100
 8027d7c:	f40b 4b7f 	and.w	fp, fp, #65280	; 0xff00
 8027d80:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027d84:	eb04 2a1a 	add.w	sl, r4, sl, lsr #8
 8027d88:	4465      	add	r5, ip
 8027d8a:	f002 1cff 	and.w	ip, r2, #16711935	; 0xff00ff
 8027d8e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8027d92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8027d96:	fb09 fc0c 	mul.w	ip, r9, ip
 8027d9a:	0a2d      	lsrs	r5, r5, #8
 8027d9c:	fb09 f902 	mul.w	r9, r9, r2
 8027da0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8027da4:	ea4f 241c 	mov.w	r4, ip, lsr #8
 8027da8:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8027dac:	f509 7280 	add.w	r2, r9, #256	; 0x100
 8027db0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8027db4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027db8:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8027dbc:	f000 12ff 	and.w	r2, r0, #16711935	; 0xff00ff
 8027dc0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8027dc4:	4464      	add	r4, ip
 8027dc6:	fb08 f202 	mul.w	r2, r8, r2
 8027dca:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8027dce:	fb08 f800 	mul.w	r8, r8, r0
 8027dd2:	0a24      	lsrs	r4, r4, #8
 8027dd4:	0a10      	lsrs	r0, r2, #8
 8027dd6:	f102 1201 	add.w	r2, r2, #65537	; 0x10001
 8027dda:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027dde:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8027de2:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 8027de6:	4402      	add	r2, r0
 8027de8:	f508 7080 	add.w	r0, r8, #256	; 0x100
 8027dec:	eb00 2818 	add.w	r8, r0, r8, lsr #8
 8027df0:	9801      	ldr	r0, [sp, #4]
 8027df2:	0a12      	lsrs	r2, r2, #8
 8027df4:	4345      	muls	r5, r0
 8027df6:	9802      	ldr	r0, [sp, #8]
 8027df8:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8027dfc:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8027e00:	fb06 5500 	mla	r5, r6, r0, r5
 8027e04:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 8027e08:	fb02 520e 	mla	r2, r2, lr, r5
 8027e0c:	fb04 2403 	mla	r4, r4, r3, r2
 8027e10:	9a01      	ldr	r2, [sp, #4]
 8027e12:	fb02 f60a 	mul.w	r6, r2, sl
 8027e16:	0a24      	lsrs	r4, r4, #8
 8027e18:	9a03      	ldr	r2, [sp, #12]
 8027e1a:	fb00 660b 	mla	r6, r0, fp, r6
 8027e1e:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 8027e22:	fb07 fc02 	mul.w	ip, r7, r2
 8027e26:	fb0e 6e08 	mla	lr, lr, r8, r6
 8027e2a:	fb03 e309 	mla	r3, r3, r9, lr
 8027e2e:	0a1b      	lsrs	r3, r3, #8
 8027e30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8027e34:	4323      	orrs	r3, r4
 8027e36:	f10c 0401 	add.w	r4, ip, #1
 8027e3a:	eb04 241c 	add.w	r4, r4, ip, lsr #8
 8027e3e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8027e42:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8027e46:	1224      	asrs	r4, r4, #8
 8027e48:	b2d5      	uxtb	r5, r2
 8027e4a:	2cff      	cmp	r4, #255	; 0xff
 8027e4c:	b2c6      	uxtb	r6, r0
 8027e4e:	d10f      	bne.n	8027e70 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x232>
 8027e50:	700b      	strb	r3, [r1, #0]
 8027e52:	7048      	strb	r0, [r1, #1]
 8027e54:	708a      	strb	r2, [r1, #2]
 8027e56:	70cc      	strb	r4, [r1, #3]
 8027e58:	b005      	add	sp, #20
 8027e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027e5e:	4605      	mov	r5, r0
 8027e60:	e70e      	b.n	8027c80 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x42>
 8027e62:	4605      	mov	r5, r0
 8027e64:	4604      	mov	r4, r0
 8027e66:	e717      	b.n	8027c98 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x5a>
 8027e68:	4602      	mov	r2, r0
 8027e6a:	e728      	b.n	8027cbe <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x80>
 8027e6c:	4602      	mov	r2, r0
 8027e6e:	e730      	b.n	8027cd2 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x94>
 8027e70:	b2e2      	uxtb	r2, r4
 8027e72:	2c00      	cmp	r4, #0
 8027e74:	d0f0      	beq.n	8027e58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>
 8027e76:	78cc      	ldrb	r4, [r1, #3]
 8027e78:	b2db      	uxtb	r3, r3
 8027e7a:	fb17 f606 	smulbb	r6, r7, r6
 8027e7e:	fb02 fc04 	mul.w	ip, r2, r4
 8027e82:	4422      	add	r2, r4
 8027e84:	f10c 0001 	add.w	r0, ip, #1
 8027e88:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 8027e8c:	1200      	asrs	r0, r0, #8
 8027e8e:	1a24      	subs	r4, r4, r0
 8027e90:	1a12      	subs	r2, r2, r0
 8027e92:	7808      	ldrb	r0, [r1, #0]
 8027e94:	b2d2      	uxtb	r2, r2
 8027e96:	4360      	muls	r0, r4
 8027e98:	70ca      	strb	r2, [r1, #3]
 8027e9a:	fb07 0303 	mla	r3, r7, r3, r0
 8027e9e:	7848      	ldrb	r0, [r1, #1]
 8027ea0:	fb17 f705 	smulbb	r7, r7, r5
 8027ea4:	fb04 6000 	mla	r0, r4, r0, r6
 8027ea8:	fb93 f3f2 	sdiv	r3, r3, r2
 8027eac:	2bff      	cmp	r3, #255	; 0xff
 8027eae:	bfd6      	itet	le
 8027eb0:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027eb4:	23ff      	movgt	r3, #255	; 0xff
 8027eb6:	b2db      	uxtble	r3, r3
 8027eb8:	fb90 f0f2 	sdiv	r0, r0, r2
 8027ebc:	700b      	strb	r3, [r1, #0]
 8027ebe:	28ff      	cmp	r0, #255	; 0xff
 8027ec0:	788b      	ldrb	r3, [r1, #2]
 8027ec2:	bfd4      	ite	le
 8027ec4:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8027ec8:	20ff      	movgt	r0, #255	; 0xff
 8027eca:	fb04 7303 	mla	r3, r4, r3, r7
 8027ece:	bfd8      	it	le
 8027ed0:	b2c0      	uxtble	r0, r0
 8027ed2:	fb93 f3f2 	sdiv	r3, r3, r2
 8027ed6:	2bff      	cmp	r3, #255	; 0xff
 8027ed8:	7048      	strb	r0, [r1, #1]
 8027eda:	bfd6      	itet	le
 8027edc:	ea23 73e3 	bicle.w	r3, r3, r3, asr #31
 8027ee0:	23ff      	movgt	r3, #255	; 0xff
 8027ee2:	b2db      	uxtble	r3, r3
 8027ee4:	708b      	strb	r3, [r1, #2]
 8027ee6:	e7b7      	b.n	8027e58 <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh+0x21a>

08027ee8 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8027ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027eec:	b09b      	sub	sp, #108	; 0x6c
 8027eee:	9218      	str	r2, [sp, #96]	; 0x60
 8027ef0:	9306      	str	r3, [sp, #24]
 8027ef2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8027ef4:	f89d 30b4 	ldrb.w	r3, [sp, #180]	; 0xb4
 8027ef8:	9019      	str	r0, [sp, #100]	; 0x64
 8027efa:	9116      	str	r1, [sp, #88]	; 0x58
 8027efc:	6850      	ldr	r0, [r2, #4]
 8027efe:	9307      	str	r3, [sp, #28]
 8027f00:	6812      	ldr	r2, [r2, #0]
 8027f02:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8027f06:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 8027f0a:	fb00 1303 	mla	r3, r0, r3, r1
 8027f0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8027f12:	930a      	str	r3, [sp, #40]	; 0x28
 8027f14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f16:	681b      	ldr	r3, [r3, #0]
 8027f18:	930f      	str	r3, [sp, #60]	; 0x3c
 8027f1a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8027f1c:	2b00      	cmp	r3, #0
 8027f1e:	dc03      	bgt.n	8027f28 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8027f20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8027f22:	2b00      	cmp	r3, #0
 8027f24:	f340 83b3 	ble.w	802868e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 8027f28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8027f2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8027f32:	1e48      	subs	r0, r1, #1
 8027f34:	1e57      	subs	r7, r2, #1
 8027f36:	9b06      	ldr	r3, [sp, #24]
 8027f38:	2b00      	cmp	r3, #0
 8027f3a:	f340 8167 	ble.w	802820c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>
 8027f3e:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8027f42:	ea4f 4326 	mov.w	r3, r6, asr #16
 8027f46:	d406      	bmi.n	8027f56 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027f48:	4584      	cmp	ip, r0
 8027f4a:	da04      	bge.n	8027f56 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027f4c:	2b00      	cmp	r3, #0
 8027f4e:	db02      	blt.n	8027f56 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8027f50:	42bb      	cmp	r3, r7
 8027f52:	f2c0 815c 	blt.w	802820e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 8027f56:	f11c 0c01 	adds.w	ip, ip, #1
 8027f5a:	f100 814c 	bmi.w	80281f6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027f5e:	4561      	cmp	r1, ip
 8027f60:	f2c0 8149 	blt.w	80281f6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027f64:	3301      	adds	r3, #1
 8027f66:	f100 8146 	bmi.w	80281f6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027f6a:	429a      	cmp	r2, r3
 8027f6c:	f2c0 8143 	blt.w	80281f6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30e>
 8027f70:	9b06      	ldr	r3, [sp, #24]
 8027f72:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8027f74:	9317      	str	r3, [sp, #92]	; 0x5c
 8027f76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8027f78:	2b00      	cmp	r3, #0
 8027f7a:	f340 8165 	ble.w	8028248 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 8027f7e:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8027f80:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8027f84:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8027f86:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8027f8a:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8027f8e:	1422      	asrs	r2, r4, #16
 8027f90:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8027f94:	689b      	ldr	r3, [r3, #8]
 8027f96:	f100 81e7 	bmi.w	8028368 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027f9a:	f103 38ff 	add.w	r8, r3, #4294967295
 8027f9e:	4542      	cmp	r2, r8
 8027fa0:	f280 81e2 	bge.w	8028368 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027fa4:	f1bc 0f00 	cmp.w	ip, #0
 8027fa8:	f2c0 81de 	blt.w	8028368 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027fac:	f10e 38ff 	add.w	r8, lr, #4294967295
 8027fb0:	45c4      	cmp	ip, r8
 8027fb2:	f280 81d9 	bge.w	8028368 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 8027fb6:	b21b      	sxth	r3, r3
 8027fb8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8027fba:	fb0c 2203 	mla	r2, ip, r3, r2
 8027fbe:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8027fc2:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8027fc6:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8027fca:	2800      	cmp	r0, #0
 8027fcc:	f000 8182 	beq.w	80282d4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 8027fd0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8027fd4:	950b      	str	r5, [sp, #44]	; 0x2c
 8027fd6:	0e2d      	lsrs	r5, r5, #24
 8027fd8:	9512      	str	r5, [sp, #72]	; 0x48
 8027fda:	b181      	cbz	r1, 8027ffe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8027fdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8027fe0:	3b01      	subs	r3, #1
 8027fe2:	009b      	lsls	r3, r3, #2
 8027fe4:	3304      	adds	r3, #4
 8027fe6:	eb08 0c03 	add.w	ip, r8, r3
 8027fea:	f858 3003 	ldr.w	r3, [r8, r3]
 8027fee:	9308      	str	r3, [sp, #32]
 8027ff0:	0e1b      	lsrs	r3, r3, #24
 8027ff2:	9310      	str	r3, [sp, #64]	; 0x40
 8027ff4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8027ff8:	930c      	str	r3, [sp, #48]	; 0x30
 8027ffa:	0e1b      	lsrs	r3, r3, #24
 8027ffc:	9313      	str	r3, [sp, #76]	; 0x4c
 8027ffe:	b280      	uxth	r0, r0
 8028000:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8028002:	b289      	uxth	r1, r1
 8028004:	fb00 f901 	mul.w	r9, r0, r1
 8028008:	0100      	lsls	r0, r0, #4
 802800a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 802800e:	eba0 0809 	sub.w	r8, r0, r9
 8028012:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 8028016:	9812      	ldr	r0, [sp, #72]	; 0x48
 8028018:	b289      	uxth	r1, r1
 802801a:	fa1f f888 	uxth.w	r8, r8
 802801e:	1a5b      	subs	r3, r3, r1
 8028020:	fb08 f000 	mul.w	r0, r8, r0
 8028024:	b29b      	uxth	r3, r3
 8028026:	fb03 000e 	mla	r0, r3, lr, r0
 802802a:	fb01 0005 	mla	r0, r1, r5, r0
 802802e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028030:	fb09 0005 	mla	r0, r9, r5, r0
 8028034:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028038:	2800      	cmp	r0, #0
 802803a:	f000 80d3 	beq.w	80281e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802803e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028042:	d01b      	beq.n	802807c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x194>
 8028044:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 8028048:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 802804c:	fb0e fa0a 	mul.w	sl, lr, sl
 8028050:	fb0e fe02 	mul.w	lr, lr, r2
 8028054:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8028058:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802805c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028060:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028064:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028068:	4452      	add	r2, sl
 802806a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802806e:	0a12      	lsrs	r2, r2, #8
 8028070:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028074:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8028078:	ea42 020c 	orr.w	r2, r2, ip
 802807c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802807e:	2dff      	cmp	r5, #255	; 0xff
 8028080:	d021      	beq.n	80280c6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1de>
 8028082:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028084:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8028088:	9d12      	ldr	r5, [sp, #72]	; 0x48
 802808a:	fb05 fb0b 	mul.w	fp, r5, fp
 802808e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028090:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028094:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8028096:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802809a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802809e:	fb05 fa0a 	mul.w	sl, r5, sl
 80280a2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80280a6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80280aa:	44de      	add	lr, fp
 80280ac:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80280b0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80280b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80280b8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80280bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80280c0:	ea4e 050a 	orr.w	r5, lr, sl
 80280c4:	950b      	str	r5, [sp, #44]	; 0x2c
 80280c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80280c8:	2dff      	cmp	r5, #255	; 0xff
 80280ca:	d021      	beq.n	8028110 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 80280cc:	9d08      	ldr	r5, [sp, #32]
 80280ce:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 80280d2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80280d4:	fb05 fb0b 	mul.w	fp, r5, fp
 80280d8:	9d08      	ldr	r5, [sp, #32]
 80280da:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80280de:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80280e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80280e4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80280e8:	fb05 fa0a 	mul.w	sl, r5, sl
 80280ec:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80280f0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80280f4:	44de      	add	lr, fp
 80280f6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80280fa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80280fe:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028102:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028106:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802810a:	ea4e 050a 	orr.w	r5, lr, sl
 802810e:	9508      	str	r5, [sp, #32]
 8028110:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8028112:	2dff      	cmp	r5, #255	; 0xff
 8028114:	d021      	beq.n	802815a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 8028116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028118:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802811c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802811e:	fb05 fb0b 	mul.w	fp, r5, fp
 8028122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028124:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028128:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802812a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802812e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8028132:	fb05 fa0a 	mul.w	sl, r5, sl
 8028136:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802813a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 802813e:	44de      	add	lr, fp
 8028140:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028144:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028148:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802814c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028150:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028154:	ea4e 050a 	orr.w	r5, lr, sl
 8028158:	950c      	str	r5, [sp, #48]	; 0x30
 802815a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802815c:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 8028160:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8028164:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028168:	9d08      	ldr	r5, [sp, #32]
 802816a:	fb08 fc0c 	mul.w	ip, r8, ip
 802816e:	fb03 cc0e 	mla	ip, r3, lr, ip
 8028172:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028176:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8028178:	fb01 cc0e 	mla	ip, r1, lr, ip
 802817c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028180:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8028182:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028186:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802818a:	fb08 f80e 	mul.w	r8, r8, lr
 802818e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028192:	fb03 8202 	mla	r2, r3, r2, r8
 8028196:	9b08      	ldr	r3, [sp, #32]
 8028198:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802819c:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 80281a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80281a2:	fb01 220a 	mla	r2, r1, sl, r2
 80281a6:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 80281aa:	9b07      	ldr	r3, [sp, #28]
 80281ac:	fb09 2901 	mla	r9, r9, r1, r2
 80281b0:	4358      	muls	r0, r3
 80281b2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80281b6:	1c43      	adds	r3, r0, #1
 80281b8:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 80281bc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80281c0:	ea4c 0c09 	orr.w	ip, ip, r9
 80281c4:	1200      	asrs	r0, r0, #8
 80281c6:	f3cc 4307 	ubfx	r3, ip, #16, #8
 80281ca:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80281ce:	28ff      	cmp	r0, #255	; 0xff
 80281d0:	b2d9      	uxtb	r1, r3
 80281d2:	fa5f fe82 	uxtb.w	lr, r2
 80281d6:	f040 8086 	bne.w	80282e6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fe>
 80281da:	f887 c000 	strb.w	ip, [r7]
 80281de:	707a      	strb	r2, [r7, #1]
 80281e0:	70bb      	strb	r3, [r7, #2]
 80281e2:	70f8      	strb	r0, [r7, #3]
 80281e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80281e6:	3704      	adds	r7, #4
 80281e8:	441c      	add	r4, r3
 80281ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80281ec:	441e      	add	r6, r3
 80281ee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80281f0:	3b01      	subs	r3, #1
 80281f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80281f4:	e6bf      	b.n	8027f76 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80281f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80281f8:	441c      	add	r4, r3
 80281fa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80281fc:	441e      	add	r6, r3
 80281fe:	9b06      	ldr	r3, [sp, #24]
 8028200:	3b01      	subs	r3, #1
 8028202:	9306      	str	r3, [sp, #24]
 8028204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028206:	3304      	adds	r3, #4
 8028208:	930a      	str	r3, [sp, #40]	; 0x28
 802820a:	e694      	b.n	8027f36 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 802820c:	d023      	beq.n	8028256 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802820e:	9b06      	ldr	r3, [sp, #24]
 8028210:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8028212:	3b01      	subs	r3, #1
 8028214:	fb00 4003 	mla	r0, r0, r3, r4
 8028218:	1400      	asrs	r0, r0, #16
 802821a:	f53f aea9 	bmi.w	8027f70 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802821e:	3901      	subs	r1, #1
 8028220:	4288      	cmp	r0, r1
 8028222:	f6bf aea5 	bge.w	8027f70 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028226:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8028228:	fb01 6303 	mla	r3, r1, r3, r6
 802822c:	141b      	asrs	r3, r3, #16
 802822e:	f53f ae9f 	bmi.w	8027f70 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8028232:	3a01      	subs	r2, #1
 8028234:	4293      	cmp	r3, r2
 8028236:	f6bf ae9b 	bge.w	8027f70 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 802823a:	f8dd b018 	ldr.w	fp, [sp, #24]
 802823e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8028240:	f1bb 0f00 	cmp.w	fp, #0
 8028244:	f300 80ae 	bgt.w	80283a4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4bc>
 8028248:	9b06      	ldr	r3, [sp, #24]
 802824a:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 802824e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028250:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8028254:	930a      	str	r3, [sp, #40]	; 0x28
 8028256:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8028258:	2b00      	cmp	r3, #0
 802825a:	f340 8218 	ble.w	802868e <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a6>
 802825e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028262:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028264:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028268:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802826c:	eef0 6a62 	vmov.f32	s13, s5
 8028270:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028274:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028278:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802827c:	ee16 4a90 	vmov	r4, s13
 8028280:	eef0 6a43 	vmov.f32	s13, s6
 8028284:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028288:	ee16 6a90 	vmov	r6, s13
 802828c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028290:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028294:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028298:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802829c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80282a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80282a4:	ee12 2a90 	vmov	r2, s5
 80282a8:	eef0 2a47 	vmov.f32	s5, s14
 80282ac:	fb92 f3f3 	sdiv	r3, r2, r3
 80282b0:	ee13 2a10 	vmov	r2, s6
 80282b4:	9327      	str	r3, [sp, #156]	; 0x9c
 80282b6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80282b8:	eeb0 3a67 	vmov.f32	s6, s15
 80282bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80282c0:	9328      	str	r3, [sp, #160]	; 0xa0
 80282c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80282c4:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80282c6:	3b01      	subs	r3, #1
 80282c8:	9316      	str	r3, [sp, #88]	; 0x58
 80282ca:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80282cc:	bf08      	it	eq
 80282ce:	4613      	moveq	r3, r2
 80282d0:	9306      	str	r3, [sp, #24]
 80282d2:	e622      	b.n	8027f1a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80282d4:	2900      	cmp	r1, #0
 80282d6:	f43f ae92 	beq.w	8027ffe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80282da:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80282de:	9308      	str	r3, [sp, #32]
 80282e0:	0e1b      	lsrs	r3, r3, #24
 80282e2:	9310      	str	r3, [sp, #64]	; 0x40
 80282e4:	e68b      	b.n	8027ffe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 80282e6:	b2c3      	uxtb	r3, r0
 80282e8:	2800      	cmp	r0, #0
 80282ea:	f43f af7b 	beq.w	80281e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80282ee:	78f8      	ldrb	r0, [r7, #3]
 80282f0:	fa5f fc8c 	uxtb.w	ip, ip
 80282f4:	9d07      	ldr	r5, [sp, #28]
 80282f6:	fb03 f800 	mul.w	r8, r3, r0
 80282fa:	4403      	add	r3, r0
 80282fc:	f108 0201 	add.w	r2, r8, #1
 8028300:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8028304:	1212      	asrs	r2, r2, #8
 8028306:	1a80      	subs	r0, r0, r2
 8028308:	1a9b      	subs	r3, r3, r2
 802830a:	783a      	ldrb	r2, [r7, #0]
 802830c:	b2db      	uxtb	r3, r3
 802830e:	4342      	muls	r2, r0
 8028310:	70fb      	strb	r3, [r7, #3]
 8028312:	fb05 220c 	mla	r2, r5, ip, r2
 8028316:	9d07      	ldr	r5, [sp, #28]
 8028318:	fb92 f2f3 	sdiv	r2, r2, r3
 802831c:	fb15 fe0e 	smulbb	lr, r5, lr
 8028320:	2aff      	cmp	r2, #255	; 0xff
 8028322:	9d07      	ldr	r5, [sp, #28]
 8028324:	bfd4      	ite	le
 8028326:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 802832a:	22ff      	movgt	r2, #255	; 0xff
 802832c:	fb15 f101 	smulbb	r1, r5, r1
 8028330:	bfd8      	it	le
 8028332:	b2d2      	uxtble	r2, r2
 8028334:	703a      	strb	r2, [r7, #0]
 8028336:	787a      	ldrb	r2, [r7, #1]
 8028338:	fb00 e202 	mla	r2, r0, r2, lr
 802833c:	fb92 f2f3 	sdiv	r2, r2, r3
 8028340:	2aff      	cmp	r2, #255	; 0xff
 8028342:	bfd6      	itet	le
 8028344:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028348:	22ff      	movgt	r2, #255	; 0xff
 802834a:	b2d2      	uxtble	r2, r2
 802834c:	707a      	strb	r2, [r7, #1]
 802834e:	78ba      	ldrb	r2, [r7, #2]
 8028350:	fb00 1202 	mla	r2, r0, r2, r1
 8028354:	fb92 f2f3 	sdiv	r2, r2, r3
 8028358:	2aff      	cmp	r2, #255	; 0xff
 802835a:	bfd6      	itet	le
 802835c:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028360:	22ff      	movgt	r2, #255	; 0xff
 8028362:	b2d2      	uxtble	r2, r2
 8028364:	70ba      	strb	r2, [r7, #2]
 8028366:	e73d      	b.n	80281e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028368:	f112 0801 	adds.w	r8, r2, #1
 802836c:	f53f af3a 	bmi.w	80281e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028370:	4543      	cmp	r3, r8
 8028372:	f6ff af37 	blt.w	80281e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028376:	f11c 0801 	adds.w	r8, ip, #1
 802837a:	f53f af33 	bmi.w	80281e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 802837e:	45c6      	cmp	lr, r8
 8028380:	f6ff af30 	blt.w	80281e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 8028384:	9d07      	ldr	r5, [sp, #28]
 8028386:	b21b      	sxth	r3, r3
 8028388:	9201      	str	r2, [sp, #4]
 802838a:	fa0f f28e 	sxth.w	r2, lr
 802838e:	e9cd 1504 	strd	r1, r5, [sp, #16]
 8028392:	e9cd c002 	strd	ip, r0, [sp, #8]
 8028396:	9200      	str	r2, [sp, #0]
 8028398:	4639      	mov	r1, r7
 802839a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802839c:	9819      	ldr	r0, [sp, #100]	; 0x64
 802839e:	f7ff fc4e 	bl	8027c3e <_ZNK8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPmPKmssiihhh>
 80283a2:	e71f      	b.n	80281e4 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fc>
 80283a4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80283a6:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80283aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80283ac:	f3c4 3203 	ubfx	r2, r4, #12, #4
 80283b0:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80283b4:	1433      	asrs	r3, r6, #16
 80283b6:	f3c6 3703 	ubfx	r7, r6, #12, #4
 80283ba:	fb00 c303 	mla	r3, r0, r3, ip
 80283be:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
 80283c2:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80283c6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 80283ca:	2a00      	cmp	r2, #0
 80283cc:	f000 8111 	beq.w	80285f2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
 80283d0:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80283d4:	950d      	str	r5, [sp, #52]	; 0x34
 80283d6:	0e2d      	lsrs	r5, r5, #24
 80283d8:	9514      	str	r5, [sp, #80]	; 0x50
 80283da:	b187      	cbz	r7, 80283fe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80283dc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 80283e0:	3801      	subs	r0, #1
 80283e2:	0080      	lsls	r0, r0, #2
 80283e4:	3004      	adds	r0, #4
 80283e6:	eb0c 0800 	add.w	r8, ip, r0
 80283ea:	f85c 0000 	ldr.w	r0, [ip, r0]
 80283ee:	9009      	str	r0, [sp, #36]	; 0x24
 80283f0:	0e00      	lsrs	r0, r0, #24
 80283f2:	9011      	str	r0, [sp, #68]	; 0x44
 80283f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80283f8:	900e      	str	r0, [sp, #56]	; 0x38
 80283fa:	0e00      	lsrs	r0, r0, #24
 80283fc:	9015      	str	r0, [sp, #84]	; 0x54
 80283fe:	b292      	uxth	r2, r2
 8028400:	9814      	ldr	r0, [sp, #80]	; 0x50
 8028402:	b2bf      	uxth	r7, r7
 8028404:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8028406:	fb02 f907 	mul.w	r9, r2, r7
 802840a:	0112      	lsls	r2, r2, #4
 802840c:	ebc9 1707 	rsb	r7, r9, r7, lsl #4
 8028410:	eba2 0809 	sub.w	r8, r2, r9
 8028414:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8028418:	b2bf      	uxth	r7, r7
 802841a:	fa1f f888 	uxth.w	r8, r8
 802841e:	1bd2      	subs	r2, r2, r7
 8028420:	fb08 f000 	mul.w	r0, r8, r0
 8028424:	b292      	uxth	r2, r2
 8028426:	fb02 000e 	mla	r0, r2, lr, r0
 802842a:	fb07 0005 	mla	r0, r7, r5, r0
 802842e:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028430:	fb09 0005 	mla	r0, r9, r5, r0
 8028434:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8028438:	2800      	cmp	r0, #0
 802843a:	f000 80d2 	beq.w	80285e2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802843e:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 8028442:	d01b      	beq.n	802847c <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x594>
 8028444:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 8028448:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802844c:	fb0e fa0a 	mul.w	sl, lr, sl
 8028450:	fb0e fe03 	mul.w	lr, lr, r3
 8028454:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8028458:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 802845c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 8028460:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028464:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8028468:	4453      	add	r3, sl
 802846a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802846e:	0a1b      	lsrs	r3, r3, #8
 8028470:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8028474:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8028478:	ea43 030c 	orr.w	r3, r3, ip
 802847c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802847e:	2dff      	cmp	r5, #255	; 0xff
 8028480:	d021      	beq.n	80284c6 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5de>
 8028482:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028484:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028488:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802848a:	fb05 fc0c 	mul.w	ip, r5, ip
 802848e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028490:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028494:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8028498:	9d14      	ldr	r5, [sp, #80]	; 0x50
 802849a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802849e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80284a2:	fb05 fa0a 	mul.w	sl, r5, sl
 80284a6:	44e6      	add	lr, ip
 80284a8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80284ac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80284b0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80284b4:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80284b8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80284bc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80284c0:	ea4e 050a 	orr.w	r5, lr, sl
 80284c4:	950d      	str	r5, [sp, #52]	; 0x34
 80284c6:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80284c8:	2dff      	cmp	r5, #255	; 0xff
 80284ca:	d021      	beq.n	8028510 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x628>
 80284cc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80284ce:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80284d2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80284d4:	fb05 fc0c 	mul.w	ip, r5, ip
 80284d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80284da:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80284de:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80284e2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80284e4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80284e8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80284ec:	fb05 fa0a 	mul.w	sl, r5, sl
 80284f0:	44e6      	add	lr, ip
 80284f2:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80284f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80284fa:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80284fe:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028502:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028506:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802850a:	ea4e 050a 	orr.w	r5, lr, sl
 802850e:	9509      	str	r5, [sp, #36]	; 0x24
 8028510:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8028512:	2dff      	cmp	r5, #255	; 0xff
 8028514:	d021      	beq.n	802855a <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x672>
 8028516:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028518:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802851c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802851e:	fb05 fc0c 	mul.w	ip, r5, ip
 8028522:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028524:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8028528:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 802852c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802852e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 8028532:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8028536:	fb05 fa0a 	mul.w	sl, r5, sl
 802853a:	44e6      	add	lr, ip
 802853c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8028540:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8028544:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8028548:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802854c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8028550:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8028554:	ea4e 050a 	orr.w	r5, lr, sl
 8028558:	950e      	str	r5, [sp, #56]	; 0x38
 802855a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 802855c:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 8028560:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8028564:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8028568:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802856a:	fb08 fc0c 	mul.w	ip, r8, ip
 802856e:	fb02 cc0e 	mla	ip, r2, lr, ip
 8028572:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028576:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8028578:	fb07 cc0e 	mla	ip, r7, lr, ip
 802857c:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8028580:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8028582:	fb09 cc0e 	mla	ip, r9, lr, ip
 8028586:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802858a:	fb08 f80e 	mul.w	r8, r8, lr
 802858e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8028592:	fb02 8303 	mla	r3, r2, r3, r8
 8028596:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028598:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 802859c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 80285a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80285a2:	fb07 330a 	mla	r3, r7, sl, r3
 80285a6:	f402 4e7f 	and.w	lr, r2, #65280	; 0xff00
 80285aa:	fb09 3e0e 	mla	lr, r9, lr, r3
 80285ae:	9b07      	ldr	r3, [sp, #28]
 80285b0:	4358      	muls	r0, r3
 80285b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80285b6:	1c43      	adds	r3, r0, #1
 80285b8:	f40e 4e7f 	and.w	lr, lr, #65280	; 0xff00
 80285bc:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80285c0:	ea4c 0c0e 	orr.w	ip, ip, lr
 80285c4:	1200      	asrs	r0, r0, #8
 80285c6:	f3cc 4307 	ubfx	r3, ip, #16, #8
 80285ca:	f3cc 2207 	ubfx	r2, ip, #8, #8
 80285ce:	28ff      	cmp	r0, #255	; 0xff
 80285d0:	b2df      	uxtb	r7, r3
 80285d2:	fa5f fe82 	uxtb.w	lr, r2
 80285d6:	d115      	bne.n	8028604 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71c>
 80285d8:	f881 c000 	strb.w	ip, [r1]
 80285dc:	704a      	strb	r2, [r1, #1]
 80285de:	708b      	strb	r3, [r1, #2]
 80285e0:	70c8      	strb	r0, [r1, #3]
 80285e2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80285e4:	3104      	adds	r1, #4
 80285e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80285ea:	441c      	add	r4, r3
 80285ec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80285ee:	441e      	add	r6, r3
 80285f0:	e626      	b.n	8028240 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 80285f2:	2f00      	cmp	r7, #0
 80285f4:	f43f af03 	beq.w	80283fe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 80285f8:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
 80285fc:	9009      	str	r0, [sp, #36]	; 0x24
 80285fe:	0e00      	lsrs	r0, r0, #24
 8028600:	9011      	str	r0, [sp, #68]	; 0x44
 8028602:	e6fc      	b.n	80283fe <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x516>
 8028604:	b2c3      	uxtb	r3, r0
 8028606:	2800      	cmp	r0, #0
 8028608:	d0eb      	beq.n	80285e2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802860a:	78c8      	ldrb	r0, [r1, #3]
 802860c:	fa5f fc8c 	uxtb.w	ip, ip
 8028610:	9d07      	ldr	r5, [sp, #28]
 8028612:	fb03 f800 	mul.w	r8, r3, r0
 8028616:	4403      	add	r3, r0
 8028618:	f108 0201 	add.w	r2, r8, #1
 802861c:	eb02 2218 	add.w	r2, r2, r8, lsr #8
 8028620:	1212      	asrs	r2, r2, #8
 8028622:	1a9b      	subs	r3, r3, r2
 8028624:	1a82      	subs	r2, r0, r2
 8028626:	7808      	ldrb	r0, [r1, #0]
 8028628:	b2db      	uxtb	r3, r3
 802862a:	4350      	muls	r0, r2
 802862c:	70cb      	strb	r3, [r1, #3]
 802862e:	fb05 0c0c 	mla	ip, r5, ip, r0
 8028632:	9d07      	ldr	r5, [sp, #28]
 8028634:	7848      	ldrb	r0, [r1, #1]
 8028636:	fb15 fe0e 	smulbb	lr, r5, lr
 802863a:	9d07      	ldr	r5, [sp, #28]
 802863c:	fb9c fcf3 	sdiv	ip, ip, r3
 8028640:	fb02 e000 	mla	r0, r2, r0, lr
 8028644:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8028648:	fb15 f707 	smulbb	r7, r5, r7
 802864c:	bfd4      	ite	le
 802864e:	ea2c 7cec 	bicle.w	ip, ip, ip, asr #31
 8028652:	f04f 0cff 	movgt.w	ip, #255	; 0xff
 8028656:	fb90 f0f3 	sdiv	r0, r0, r3
 802865a:	bfd8      	it	le
 802865c:	fa5f fc8c 	uxtble.w	ip, ip
 8028660:	28ff      	cmp	r0, #255	; 0xff
 8028662:	bfd4      	ite	le
 8028664:	ea20 70e0 	bicle.w	r0, r0, r0, asr #31
 8028668:	20ff      	movgt	r0, #255	; 0xff
 802866a:	f881 c000 	strb.w	ip, [r1]
 802866e:	bfd8      	it	le
 8028670:	b2c0      	uxtble	r0, r0
 8028672:	7048      	strb	r0, [r1, #1]
 8028674:	7888      	ldrb	r0, [r1, #2]
 8028676:	fb02 7200 	mla	r2, r2, r0, r7
 802867a:	fb92 f2f3 	sdiv	r2, r2, r3
 802867e:	2aff      	cmp	r2, #255	; 0xff
 8028680:	bfd6      	itet	le
 8028682:	ea22 72e2 	bicle.w	r2, r2, r2, asr #31
 8028686:	22ff      	movgt	r2, #255	; 0xff
 8028688:	b2d2      	uxtble	r2, r2
 802868a:	708a      	strb	r2, [r1, #2]
 802868c:	e7a9      	b.n	80285e2 <_ZN8touchgfx8LCD32bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 802868e:	b01b      	add	sp, #108	; 0x6c
 8028690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028694 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>:
 8028694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028698:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	; 0x2c
 802869c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80286a0:	2c00      	cmp	r4, #0
 80286a2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 80286a6:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 80286aa:	fb00 4e03 	mla	lr, r0, r3, r4
 80286ae:	f89d c038 	ldrb.w	ip, [sp, #56]	; 0x38
 80286b2:	f2c0 808f 	blt.w	80287d4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 80286b6:	45a1      	cmp	r9, r4
 80286b8:	f340 808c 	ble.w	80287d4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 80286bc:	2800      	cmp	r0, #0
 80286be:	f2c0 8089 	blt.w	80287d4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 80286c2:	4580      	cmp	r8, r0
 80286c4:	f340 8086 	ble.w	80287d4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x140>
 80286c8:	ea4f 055e 	mov.w	r5, lr, lsr #1
 80286cc:	f01e 0f01 	tst.w	lr, #1
 80286d0:	5d56      	ldrb	r6, [r2, r5]
 80286d2:	bf0c      	ite	eq
 80286d4:	f006 060f 	andeq.w	r6, r6, #15
 80286d8:	1136      	asrne	r6, r6, #4
 80286da:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 80286de:	b2f6      	uxtb	r6, r6
 80286e0:	f114 0a01 	adds.w	sl, r4, #1
 80286e4:	d478      	bmi.n	80287d8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80286e6:	45d1      	cmp	r9, sl
 80286e8:	dd76      	ble.n	80287d8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80286ea:	2800      	cmp	r0, #0
 80286ec:	db74      	blt.n	80287d8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80286ee:	4580      	cmp	r8, r0
 80286f0:	dd72      	ble.n	80287d8 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x144>
 80286f2:	2f00      	cmp	r7, #0
 80286f4:	d072      	beq.n	80287dc <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x148>
 80286f6:	f10e 0b01 	add.w	fp, lr, #1
 80286fa:	ea4f 055b 	mov.w	r5, fp, lsr #1
 80286fe:	f01b 0f01 	tst.w	fp, #1
 8028702:	5d55      	ldrb	r5, [r2, r5]
 8028704:	bf0c      	ite	eq
 8028706:	f005 050f 	andeq.w	r5, r5, #15
 802870a:	112d      	asrne	r5, r5, #4
 802870c:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028710:	b2ed      	uxtb	r5, r5
 8028712:	f1bc 0f00 	cmp.w	ip, #0
 8028716:	d065      	beq.n	80287e4 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x150>
 8028718:	2c00      	cmp	r4, #0
 802871a:	f100 0001 	add.w	r0, r0, #1
 802871e:	db5f      	blt.n	80287e0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 8028720:	45a1      	cmp	r9, r4
 8028722:	dd5d      	ble.n	80287e0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 8028724:	2800      	cmp	r0, #0
 8028726:	db5b      	blt.n	80287e0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 8028728:	4580      	cmp	r8, r0
 802872a:	dd59      	ble.n	80287e0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x14c>
 802872c:	eb03 0b0e 	add.w	fp, r3, lr
 8028730:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8028734:	f01b 0f01 	tst.w	fp, #1
 8028738:	5d14      	ldrb	r4, [r2, r4]
 802873a:	bf0c      	ite	eq
 802873c:	f004 040f 	andeq.w	r4, r4, #15
 8028740:	1124      	asrne	r4, r4, #4
 8028742:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028746:	b2e4      	uxtb	r4, r4
 8028748:	f1ba 0f00 	cmp.w	sl, #0
 802874c:	db4d      	blt.n	80287ea <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802874e:	45d1      	cmp	r9, sl
 8028750:	dd4b      	ble.n	80287ea <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 8028752:	2800      	cmp	r0, #0
 8028754:	db49      	blt.n	80287ea <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 8028756:	4580      	cmp	r8, r0
 8028758:	dd47      	ble.n	80287ea <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x156>
 802875a:	2f00      	cmp	r7, #0
 802875c:	d047      	beq.n	80287ee <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15a>
 802875e:	3301      	adds	r3, #1
 8028760:	449e      	add	lr, r3
 8028762:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028766:	f01e 0f01 	tst.w	lr, #1
 802876a:	5cd0      	ldrb	r0, [r2, r3]
 802876c:	bf0c      	ite	eq
 802876e:	f000 000f 	andeq.w	r0, r0, #15
 8028772:	1100      	asrne	r0, r0, #4
 8028774:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028778:	b2c3      	uxtb	r3, r0
 802877a:	b2ba      	uxth	r2, r7
 802877c:	fa1f fc8c 	uxth.w	ip, ip
 8028780:	fb02 f00c 	mul.w	r0, r2, ip
 8028784:	0112      	lsls	r2, r2, #4
 8028786:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 802878a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 802878e:	1a12      	subs	r2, r2, r0
 8028790:	fa1f fc8c 	uxth.w	ip, ip
 8028794:	b292      	uxth	r2, r2
 8028796:	eba7 070c 	sub.w	r7, r7, ip
 802879a:	436a      	muls	r2, r5
 802879c:	b2bf      	uxth	r7, r7
 802879e:	fb06 2207 	mla	r2, r6, r7, r2
 80287a2:	fb0c 2404 	mla	r4, ip, r4, r2
 80287a6:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80287aa:	fb00 4303 	mla	r3, r0, r3, r4
 80287ae:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80287b2:	4353      	muls	r3, r2
 80287b4:	1c5a      	adds	r2, r3, #1
 80287b6:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80287ba:	4a21      	ldr	r2, [pc, #132]	; (8028840 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x1ac>)
 80287bc:	121b      	asrs	r3, r3, #8
 80287be:	7895      	ldrb	r5, [r2, #2]
 80287c0:	7857      	ldrb	r7, [r2, #1]
 80287c2:	2bff      	cmp	r3, #255	; 0xff
 80287c4:	7814      	ldrb	r4, [r2, #0]
 80287c6:	d114      	bne.n	80287f2 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x15e>
 80287c8:	700c      	strb	r4, [r1, #0]
 80287ca:	704f      	strb	r7, [r1, #1]
 80287cc:	708d      	strb	r5, [r1, #2]
 80287ce:	70cb      	strb	r3, [r1, #3]
 80287d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80287d4:	2600      	movs	r6, #0
 80287d6:	e783      	b.n	80286e0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x4c>
 80287d8:	2500      	movs	r5, #0
 80287da:	e79a      	b.n	8028712 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 80287dc:	463d      	mov	r5, r7
 80287de:	e798      	b.n	8028712 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x7e>
 80287e0:	2400      	movs	r4, #0
 80287e2:	e7b1      	b.n	8028748 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xb4>
 80287e4:	4663      	mov	r3, ip
 80287e6:	4664      	mov	r4, ip
 80287e8:	e7c7      	b.n	802877a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 80287ea:	2300      	movs	r3, #0
 80287ec:	e7c5      	b.n	802877a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 80287ee:	463b      	mov	r3, r7
 80287f0:	e7c3      	b.n	802877a <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0xe6>
 80287f2:	b2da      	uxtb	r2, r3
 80287f4:	2b00      	cmp	r3, #0
 80287f6:	d0eb      	beq.n	80287d0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 80287f8:	78ce      	ldrb	r6, [r1, #3]
 80287fa:	435c      	muls	r4, r3
 80287fc:	435f      	muls	r7, r3
 80287fe:	fb02 fc06 	mul.w	ip, r2, r6
 8028802:	4432      	add	r2, r6
 8028804:	436b      	muls	r3, r5
 8028806:	f10c 0001 	add.w	r0, ip, #1
 802880a:	eb00 201c 	add.w	r0, r0, ip, lsr #8
 802880e:	1200      	asrs	r0, r0, #8
 8028810:	1a12      	subs	r2, r2, r0
 8028812:	1a30      	subs	r0, r6, r0
 8028814:	780e      	ldrb	r6, [r1, #0]
 8028816:	b2d2      	uxtb	r2, r2
 8028818:	fb00 4606 	mla	r6, r0, r6, r4
 802881c:	784c      	ldrb	r4, [r1, #1]
 802881e:	70ca      	strb	r2, [r1, #3]
 8028820:	fb00 7404 	mla	r4, r0, r4, r7
 8028824:	fb94 f4f2 	sdiv	r4, r4, r2
 8028828:	704c      	strb	r4, [r1, #1]
 802882a:	788c      	ldrb	r4, [r1, #2]
 802882c:	fb00 3304 	mla	r3, r0, r4, r3
 8028830:	fb96 f6f2 	sdiv	r6, r6, r2
 8028834:	fb93 f3f2 	sdiv	r3, r3, r2
 8028838:	700e      	strb	r6, [r1, #0]
 802883a:	708b      	strb	r3, [r1, #2]
 802883c:	e7c8      	b.n	80287d0 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh+0x13c>
 802883e:	bf00      	nop
 8028840:	2003c2cc 	.word	0x2003c2cc

08028844 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028848:	b097      	sub	sp, #92	; 0x5c
 802884a:	9214      	str	r2, [sp, #80]	; 0x50
 802884c:	9309      	str	r3, [sp, #36]	; 0x24
 802884e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8028850:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8028854:	9015      	str	r0, [sp, #84]	; 0x54
 8028856:	910d      	str	r1, [sp, #52]	; 0x34
 8028858:	6850      	ldr	r0, [r2, #4]
 802885a:	930e      	str	r3, [sp, #56]	; 0x38
 802885c:	6812      	ldr	r2, [r2, #0]
 802885e:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8028862:	e9dd a521 	ldrd	sl, r5, [sp, #132]	; 0x84
 8028866:	fb00 1303 	mla	r3, r0, r3, r1
 802886a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802886e:	930a      	str	r3, [sp, #40]	; 0x28
 8028870:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028872:	689b      	ldr	r3, [r3, #8]
 8028874:	3301      	adds	r3, #1
 8028876:	f023 0301 	bic.w	r3, r3, #1
 802887a:	930f      	str	r3, [sp, #60]	; 0x3c
 802887c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 802887e:	681e      	ldr	r6, [r3, #0]
 8028880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028882:	2b00      	cmp	r3, #0
 8028884:	dc03      	bgt.n	802888e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8028886:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8028888:	2b00      	cmp	r3, #0
 802888a:	f340 8255 	ble.w	8028d38 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 802888e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8028890:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028894:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028898:	1e48      	subs	r0, r1, #1
 802889a:	1e57      	subs	r7, r2, #1
 802889c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802889e:	2b00      	cmp	r3, #0
 80288a0:	f340 80bb 	ble.w	8028a1a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 80288a4:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 80288a8:	ea4f 4325 	mov.w	r3, r5, asr #16
 80288ac:	d406      	bmi.n	80288bc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80288ae:	4584      	cmp	ip, r0
 80288b0:	da04      	bge.n	80288bc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80288b2:	2b00      	cmp	r3, #0
 80288b4:	db02      	blt.n	80288bc <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 80288b6:	42bb      	cmp	r3, r7
 80288b8:	f2c0 80b0 	blt.w	8028a1c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 80288bc:	f11c 0c01 	adds.w	ip, ip, #1
 80288c0:	f100 80a0 	bmi.w	8028a04 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80288c4:	4561      	cmp	r1, ip
 80288c6:	f2c0 809d 	blt.w	8028a04 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80288ca:	3301      	adds	r3, #1
 80288cc:	f100 809a 	bmi.w	8028a04 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80288d0:	429a      	cmp	r2, r3
 80288d2:	f2c0 8097 	blt.w	8028a04 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c0>
 80288d6:	e9dd b709 	ldrd	fp, r7, [sp, #36]	; 0x24
 80288da:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 80288de:	f1bb 0f00 	cmp.w	fp, #0
 80288e2:	f340 80bb 	ble.w	8028a5c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 80288e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80288e8:	1428      	asrs	r0, r5, #16
 80288ea:	f3ca 3203 	ubfx	r2, sl, #12, #4
 80288ee:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80288f2:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 80288f6:	ea5f 432a 	movs.w	r3, sl, asr #16
 80288fa:	f100 8134 	bmi.w	8028b66 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 80288fe:	f10c 39ff 	add.w	r9, ip, #4294967295
 8028902:	454b      	cmp	r3, r9
 8028904:	f280 812f 	bge.w	8028b66 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8028908:	2800      	cmp	r0, #0
 802890a:	f2c0 812c 	blt.w	8028b66 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802890e:	f10e 39ff 	add.w	r9, lr, #4294967295
 8028912:	4548      	cmp	r0, r9
 8028914:	f280 8127 	bge.w	8028b66 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8028918:	fb00 3308 	mla	r3, r0, r8, r3
 802891c:	0858      	lsrs	r0, r3, #1
 802891e:	07dc      	lsls	r4, r3, #31
 8028920:	f816 c000 	ldrb.w	ip, [r6, r0]
 8028924:	bf54      	ite	pl
 8028926:	f00c 0c0f 	andpl.w	ip, ip, #15
 802892a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802892e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028932:	fa5f fc8c 	uxtb.w	ip, ip
 8028936:	2a00      	cmp	r2, #0
 8028938:	f000 80d6 	beq.w	8028ae8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 802893c:	1c58      	adds	r0, r3, #1
 802893e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028942:	07c0      	lsls	r0, r0, #31
 8028944:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8028948:	bf54      	ite	pl
 802894a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802894e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028952:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028956:	fa5f f08e 	uxtb.w	r0, lr
 802895a:	9010      	str	r0, [sp, #64]	; 0x40
 802895c:	b1d9      	cbz	r1, 8028996 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 802895e:	4443      	add	r3, r8
 8028960:	0858      	lsrs	r0, r3, #1
 8028962:	07dc      	lsls	r4, r3, #31
 8028964:	f103 0301 	add.w	r3, r3, #1
 8028968:	5c30      	ldrb	r0, [r6, r0]
 802896a:	bf54      	ite	pl
 802896c:	f000 000f 	andpl.w	r0, r0, #15
 8028970:	1100      	asrmi	r0, r0, #4
 8028972:	07dc      	lsls	r4, r3, #31
 8028974:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028978:	b2c0      	uxtb	r0, r0
 802897a:	900b      	str	r0, [sp, #44]	; 0x2c
 802897c:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8028980:	f816 e000 	ldrb.w	lr, [r6, r0]
 8028984:	bf54      	ite	pl
 8028986:	f00e 030f 	andpl.w	r3, lr, #15
 802898a:	ea4f 132e 	movmi.w	r3, lr, asr #4
 802898e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028992:	b2db      	uxtb	r3, r3
 8028994:	9311      	str	r3, [sp, #68]	; 0x44
 8028996:	b292      	uxth	r2, r2
 8028998:	9c10      	ldr	r4, [sp, #64]	; 0x40
 802899a:	b289      	uxth	r1, r1
 802899c:	fb02 f301 	mul.w	r3, r2, r1
 80289a0:	0112      	lsls	r2, r2, #4
 80289a2:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80289a6:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80289aa:	1ad2      	subs	r2, r2, r3
 80289ac:	b289      	uxth	r1, r1
 80289ae:	b292      	uxth	r2, r2
 80289b0:	1a40      	subs	r0, r0, r1
 80289b2:	4362      	muls	r2, r4
 80289b4:	b280      	uxth	r0, r0
 80289b6:	fb0c 2c00 	mla	ip, ip, r0, r2
 80289ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80289bc:	fb01 c102 	mla	r1, r1, r2, ip
 80289c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80289c2:	fb03 1302 	mla	r3, r3, r2, r1
 80289c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80289c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80289cc:	4353      	muls	r3, r2
 80289ce:	1c5a      	adds	r2, r3, #1
 80289d0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80289d4:	4abf      	ldr	r2, [pc, #764]	; (8028cd4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 80289d6:	121b      	asrs	r3, r3, #8
 80289d8:	f892 9002 	ldrb.w	r9, [r2, #2]
 80289dc:	7850      	ldrb	r0, [r2, #1]
 80289de:	2bff      	cmp	r3, #255	; 0xff
 80289e0:	f892 c000 	ldrb.w	ip, [r2]
 80289e4:	f040 8091 	bne.w	8028b0a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 80289e8:	f887 c000 	strb.w	ip, [r7]
 80289ec:	7078      	strb	r0, [r7, #1]
 80289ee:	f887 9002 	strb.w	r9, [r7, #2]
 80289f2:	70fb      	strb	r3, [r7, #3]
 80289f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80289f6:	3704      	adds	r7, #4
 80289f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80289fc:	449a      	add	sl, r3
 80289fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028a00:	441d      	add	r5, r3
 8028a02:	e76c      	b.n	80288de <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 8028a04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8028a06:	449a      	add	sl, r3
 8028a08:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8028a0a:	441d      	add	r5, r3
 8028a0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a0e:	3b01      	subs	r3, #1
 8028a10:	9309      	str	r3, [sp, #36]	; 0x24
 8028a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028a14:	3304      	adds	r3, #4
 8028a16:	930a      	str	r3, [sp, #40]	; 0x28
 8028a18:	e740      	b.n	802889c <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8028a1a:	d026      	beq.n	8028a6a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 8028a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a1e:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8028a20:	3b01      	subs	r3, #1
 8028a22:	fb00 a003 	mla	r0, r0, r3, sl
 8028a26:	1400      	asrs	r0, r0, #16
 8028a28:	f53f af55 	bmi.w	80288d6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028a2c:	3901      	subs	r1, #1
 8028a2e:	4288      	cmp	r0, r1
 8028a30:	f6bf af51 	bge.w	80288d6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028a34:	9924      	ldr	r1, [sp, #144]	; 0x90
 8028a36:	fb01 5303 	mla	r3, r1, r3, r5
 8028a3a:	141b      	asrs	r3, r3, #16
 8028a3c:	f53f af4b 	bmi.w	80288d6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028a40:	3a01      	subs	r2, #1
 8028a42:	4293      	cmp	r3, r2
 8028a44:	f6bf af47 	bge.w	80288d6 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8028a48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028a4a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8028a4e:	3304      	adds	r3, #4
 8028a50:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 8028a54:	f1be 0f00 	cmp.w	lr, #0
 8028a58:	f300 80a6 	bgt.w	8028ba8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x364>
 8028a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028a5e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8028a62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028a64:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8028a68:	930a      	str	r3, [sp, #40]	; 0x28
 8028a6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028a6c:	2b00      	cmp	r3, #0
 8028a6e:	f340 8163 	ble.w	8028d38 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 8028a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8028a76:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028a78:	ee30 0a04 	vadd.f32	s0, s0, s8
 8028a7c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8028a80:	eef0 6a62 	vmov.f32	s13, s5
 8028a84:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8028a88:	ee31 1a05 	vadd.f32	s2, s2, s10
 8028a8c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028a90:	ee16 aa90 	vmov	sl, s13
 8028a94:	eef0 6a43 	vmov.f32	s13, s6
 8028a98:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8028a9c:	ee16 5a90 	vmov	r5, s13
 8028aa0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8028aa4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8028aa8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8028aac:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8028ab0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8028ab4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8028ab8:	ee12 2a90 	vmov	r2, s5
 8028abc:	eef0 2a47 	vmov.f32	s5, s14
 8028ac0:	fb92 f3f3 	sdiv	r3, r2, r3
 8028ac4:	ee13 2a10 	vmov	r2, s6
 8028ac8:	9323      	str	r3, [sp, #140]	; 0x8c
 8028aca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028acc:	eeb0 3a67 	vmov.f32	s6, s15
 8028ad0:	fb92 f3f3 	sdiv	r3, r2, r3
 8028ad4:	9324      	str	r3, [sp, #144]	; 0x90
 8028ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028ad8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8028ada:	3b01      	subs	r3, #1
 8028adc:	930d      	str	r3, [sp, #52]	; 0x34
 8028ade:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8028ae0:	bf08      	it	eq
 8028ae2:	4613      	moveq	r3, r2
 8028ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8028ae6:	e6cb      	b.n	8028880 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8028ae8:	2900      	cmp	r1, #0
 8028aea:	f43f af54 	beq.w	8028996 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8028aee:	eb08 0003 	add.w	r0, r8, r3
 8028af2:	0843      	lsrs	r3, r0, #1
 8028af4:	07c0      	lsls	r0, r0, #31
 8028af6:	5cf3      	ldrb	r3, [r6, r3]
 8028af8:	bf54      	ite	pl
 8028afa:	f003 030f 	andpl.w	r3, r3, #15
 8028afe:	111b      	asrmi	r3, r3, #4
 8028b00:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028b04:	b2db      	uxtb	r3, r3
 8028b06:	930b      	str	r3, [sp, #44]	; 0x2c
 8028b08:	e745      	b.n	8028996 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8028b0a:	b2da      	uxtb	r2, r3
 8028b0c:	2b00      	cmp	r3, #0
 8028b0e:	f43f af71 	beq.w	80289f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028b12:	f897 e003 	ldrb.w	lr, [r7, #3]
 8028b16:	fb03 fc0c 	mul.w	ip, r3, ip
 8028b1a:	4358      	muls	r0, r3
 8028b1c:	fb02 f10e 	mul.w	r1, r2, lr
 8028b20:	4472      	add	r2, lr
 8028b22:	fb03 f309 	mul.w	r3, r3, r9
 8028b26:	1c4c      	adds	r4, r1, #1
 8028b28:	eb04 2111 	add.w	r1, r4, r1, lsr #8
 8028b2c:	1209      	asrs	r1, r1, #8
 8028b2e:	1a52      	subs	r2, r2, r1
 8028b30:	ebae 0101 	sub.w	r1, lr, r1
 8028b34:	f897 e000 	ldrb.w	lr, [r7]
 8028b38:	b2d2      	uxtb	r2, r2
 8028b3a:	fb01 cc0e 	mla	ip, r1, lr, ip
 8028b3e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8028b42:	70fa      	strb	r2, [r7, #3]
 8028b44:	fb9c fcf2 	sdiv	ip, ip, r2
 8028b48:	f887 c000 	strb.w	ip, [r7]
 8028b4c:	f897 c001 	ldrb.w	ip, [r7, #1]
 8028b50:	fb01 000c 	mla	r0, r1, ip, r0
 8028b54:	fb01 310e 	mla	r1, r1, lr, r3
 8028b58:	fb90 f0f2 	sdiv	r0, r0, r2
 8028b5c:	fb91 f1f2 	sdiv	r1, r1, r2
 8028b60:	7078      	strb	r0, [r7, #1]
 8028b62:	70b9      	strb	r1, [r7, #2]
 8028b64:	e746      	b.n	80289f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028b66:	f113 0901 	adds.w	r9, r3, #1
 8028b6a:	f53f af43 	bmi.w	80289f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028b6e:	45cc      	cmp	ip, r9
 8028b70:	f6ff af40 	blt.w	80289f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028b74:	f110 0901 	adds.w	r9, r0, #1
 8028b78:	f53f af3c 	bmi.w	80289f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028b7c:	45ce      	cmp	lr, r9
 8028b7e:	f6ff af39 	blt.w	80289f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028b82:	9302      	str	r3, [sp, #8]
 8028b84:	fa0f f38e 	sxth.w	r3, lr
 8028b88:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8028b8a:	9301      	str	r3, [sp, #4]
 8028b8c:	fa0f f38c 	sxth.w	r3, ip
 8028b90:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8028b94:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8028b98:	9300      	str	r3, [sp, #0]
 8028b9a:	4632      	mov	r2, r6
 8028b9c:	4643      	mov	r3, r8
 8028b9e:	4639      	mov	r1, r7
 8028ba0:	9815      	ldr	r0, [sp, #84]	; 0x54
 8028ba2:	f7ff fd77 	bl	8028694 <_ZNK8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPmPKtsssiihhh>
 8028ba6:	e725      	b.n	80289f4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028ba8:	ea4f 412a 	mov.w	r1, sl, asr #16
 8028bac:	f3ca 3003 	ubfx	r0, sl, #12, #4
 8028bb0:	142a      	asrs	r2, r5, #16
 8028bb2:	f3c5 3703 	ubfx	r7, r5, #12, #4
 8028bb6:	fb08 1202 	mla	r2, r8, r2, r1
 8028bba:	0851      	lsrs	r1, r2, #1
 8028bbc:	07d4      	lsls	r4, r2, #31
 8028bbe:	5c71      	ldrb	r1, [r6, r1]
 8028bc0:	bf54      	ite	pl
 8028bc2:	f001 010f 	andpl.w	r1, r1, #15
 8028bc6:	1109      	asrmi	r1, r1, #4
 8028bc8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8028bcc:	b2c9      	uxtb	r1, r1
 8028bce:	2800      	cmp	r0, #0
 8028bd0:	d06d      	beq.n	8028cae <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46a>
 8028bd2:	f102 0901 	add.w	r9, r2, #1
 8028bd6:	ea4f 0c59 	mov.w	ip, r9, lsr #1
 8028bda:	f019 0f01 	tst.w	r9, #1
 8028bde:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8028be2:	bf0c      	ite	eq
 8028be4:	f00c 0c0f 	andeq.w	ip, ip, #15
 8028be8:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 8028bec:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028bf0:	fa5f f48c 	uxtb.w	r4, ip
 8028bf4:	9412      	str	r4, [sp, #72]	; 0x48
 8028bf6:	b307      	cbz	r7, 8028c3a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028bf8:	4442      	add	r2, r8
 8028bfa:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8028bfe:	07d4      	lsls	r4, r2, #31
 8028c00:	f102 0201 	add.w	r2, r2, #1
 8028c04:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8028c08:	bf54      	ite	pl
 8028c0a:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028c0e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028c12:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028c16:	fa5f f48c 	uxtb.w	r4, ip
 8028c1a:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8028c1e:	940c      	str	r4, [sp, #48]	; 0x30
 8028c20:	07d4      	lsls	r4, r2, #31
 8028c22:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8028c26:	bf54      	ite	pl
 8028c28:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028c2c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028c30:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028c34:	fa5f f28c 	uxtb.w	r2, ip
 8028c38:	9213      	str	r2, [sp, #76]	; 0x4c
 8028c3a:	b280      	uxth	r0, r0
 8028c3c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8028c3e:	b2bf      	uxth	r7, r7
 8028c40:	fb00 f207 	mul.w	r2, r0, r7
 8028c44:	0100      	lsls	r0, r0, #4
 8028c46:	ebc2 1707 	rsb	r7, r2, r7, lsl #4
 8028c4a:	f5c0 7c80 	rsb	ip, r0, #256	; 0x100
 8028c4e:	1a80      	subs	r0, r0, r2
 8028c50:	b2bf      	uxth	r7, r7
 8028c52:	b280      	uxth	r0, r0
 8028c54:	ebac 0c07 	sub.w	ip, ip, r7
 8028c58:	4360      	muls	r0, r4
 8028c5a:	fa1f fc8c 	uxth.w	ip, ip
 8028c5e:	fb01 010c 	mla	r1, r1, ip, r0
 8028c62:	980c      	ldr	r0, [sp, #48]	; 0x30
 8028c64:	fb07 1700 	mla	r7, r7, r0, r1
 8028c68:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8028c6a:	fb02 7201 	mla	r2, r2, r1, r7
 8028c6e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8028c70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8028c74:	434a      	muls	r2, r1
 8028c76:	1c51      	adds	r1, r2, #1
 8028c78:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8028c7c:	4915      	ldr	r1, [pc, #84]	; (8028cd4 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 8028c7e:	1212      	asrs	r2, r2, #8
 8028c80:	7888      	ldrb	r0, [r1, #2]
 8028c82:	784f      	ldrb	r7, [r1, #1]
 8028c84:	2aff      	cmp	r2, #255	; 0xff
 8028c86:	4604      	mov	r4, r0
 8028c88:	f891 c000 	ldrb.w	ip, [r1]
 8028c8c:	d124      	bne.n	8028cd8 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 8028c8e:	f803 cc04 	strb.w	ip, [r3, #-4]
 8028c92:	f803 7c03 	strb.w	r7, [r3, #-3]
 8028c96:	f803 0c02 	strb.w	r0, [r3, #-2]
 8028c9a:	f803 2c01 	strb.w	r2, [r3, #-1]
 8028c9e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8028ca0:	3304      	adds	r3, #4
 8028ca2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8028ca6:	4492      	add	sl, r2
 8028ca8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8028caa:	4415      	add	r5, r2
 8028cac:	e6d2      	b.n	8028a54 <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8028cae:	2f00      	cmp	r7, #0
 8028cb0:	d0c3      	beq.n	8028c3a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028cb2:	4442      	add	r2, r8
 8028cb4:	ea4f 0c52 	mov.w	ip, r2, lsr #1
 8028cb8:	07d2      	lsls	r2, r2, #31
 8028cba:	f816 c00c 	ldrb.w	ip, [r6, ip]
 8028cbe:	bf54      	ite	pl
 8028cc0:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028cc4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028cc8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028ccc:	fa5f f28c 	uxtb.w	r2, ip
 8028cd0:	920c      	str	r2, [sp, #48]	; 0x30
 8028cd2:	e7b2      	b.n	8028c3a <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f6>
 8028cd4:	2003c2cc 	.word	0x2003c2cc
 8028cd8:	b2d1      	uxtb	r1, r2
 8028cda:	2a00      	cmp	r2, #0
 8028cdc:	d0df      	beq.n	8028c9e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8028cde:	f813 9c01 	ldrb.w	r9, [r3, #-1]
 8028ce2:	fb02 fc0c 	mul.w	ip, r2, ip
 8028ce6:	4357      	muls	r7, r2
 8028ce8:	fb01 fb09 	mul.w	fp, r1, r9
 8028cec:	4449      	add	r1, r9
 8028cee:	4362      	muls	r2, r4
 8028cf0:	f10b 0001 	add.w	r0, fp, #1
 8028cf4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8028cf8:	f813 bc04 	ldrb.w	fp, [r3, #-4]
 8028cfc:	1200      	asrs	r0, r0, #8
 8028cfe:	1a09      	subs	r1, r1, r0
 8028d00:	eba9 0000 	sub.w	r0, r9, r0
 8028d04:	f813 9c02 	ldrb.w	r9, [r3, #-2]
 8028d08:	b2c9      	uxtb	r1, r1
 8028d0a:	fb00 cc0b 	mla	ip, r0, fp, ip
 8028d0e:	fb9c fcf1 	sdiv	ip, ip, r1
 8028d12:	f803 cc04 	strb.w	ip, [r3, #-4]
 8028d16:	f813 cc03 	ldrb.w	ip, [r3, #-3]
 8028d1a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8028d1e:	fb00 770c 	mla	r7, r0, ip, r7
 8028d22:	fb00 2009 	mla	r0, r0, r9, r2
 8028d26:	fb97 f7f1 	sdiv	r7, r7, r1
 8028d2a:	fb90 f0f1 	sdiv	r0, r0, r1
 8028d2e:	f803 7c03 	strb.w	r7, [r3, #-3]
 8028d32:	f803 0c02 	strb.w	r0, [r3, #-2]
 8028d36:	e7b2      	b.n	8028c9e <_ZN8touchgfx8LCD32bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45a>
 8028d38:	b017      	add	sp, #92	; 0x5c
 8028d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d3e:	bf00      	nop

08028d40 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>:
 8028d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028d44:	e9dd 0c0b 	ldrd	r0, ip, [sp, #44]	; 0x2c
 8028d48:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8028d4c:	2800      	cmp	r0, #0
 8028d4e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	; 0x28
 8028d52:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8028d56:	fb0c 0e03 	mla	lr, ip, r3, r0
 8028d5a:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 8028d5e:	f2c0 8088 	blt.w	8028e72 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028d62:	4581      	cmp	r9, r0
 8028d64:	f340 8085 	ble.w	8028e72 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028d68:	f1bc 0f00 	cmp.w	ip, #0
 8028d6c:	f2c0 8081 	blt.w	8028e72 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028d70:	45e0      	cmp	r8, ip
 8028d72:	dd7e      	ble.n	8028e72 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x132>
 8028d74:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8028d78:	f01e 0f01 	tst.w	lr, #1
 8028d7c:	5d15      	ldrb	r5, [r2, r4]
 8028d7e:	bf0c      	ite	eq
 8028d80:	f005 050f 	andeq.w	r5, r5, #15
 8028d84:	112d      	asrne	r5, r5, #4
 8028d86:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8028d8a:	b2ed      	uxtb	r5, r5
 8028d8c:	f110 0a01 	adds.w	sl, r0, #1
 8028d90:	d471      	bmi.n	8028e76 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028d92:	45d1      	cmp	r9, sl
 8028d94:	dd6f      	ble.n	8028e76 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028d96:	f1bc 0f00 	cmp.w	ip, #0
 8028d9a:	db6c      	blt.n	8028e76 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028d9c:	45e0      	cmp	r8, ip
 8028d9e:	dd6a      	ble.n	8028e76 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x136>
 8028da0:	2e00      	cmp	r6, #0
 8028da2:	d06a      	beq.n	8028e7a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13a>
 8028da4:	f10e 0b01 	add.w	fp, lr, #1
 8028da8:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8028dac:	f01b 0f01 	tst.w	fp, #1
 8028db0:	5d14      	ldrb	r4, [r2, r4]
 8028db2:	bf0c      	ite	eq
 8028db4:	f004 040f 	andeq.w	r4, r4, #15
 8028db8:	1124      	asrne	r4, r4, #4
 8028dba:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8028dbe:	b2e4      	uxtb	r4, r4
 8028dc0:	2f00      	cmp	r7, #0
 8028dc2:	d05e      	beq.n	8028e82 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x142>
 8028dc4:	2800      	cmp	r0, #0
 8028dc6:	f10c 0c01 	add.w	ip, ip, #1
 8028dca:	db58      	blt.n	8028e7e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028dcc:	4581      	cmp	r9, r0
 8028dce:	dd56      	ble.n	8028e7e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028dd0:	f1bc 0f00 	cmp.w	ip, #0
 8028dd4:	db53      	blt.n	8028e7e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028dd6:	45e0      	cmp	r8, ip
 8028dd8:	dd51      	ble.n	8028e7e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x13e>
 8028dda:	eb03 0b0e 	add.w	fp, r3, lr
 8028dde:	ea4f 005b 	mov.w	r0, fp, lsr #1
 8028de2:	f01b 0f01 	tst.w	fp, #1
 8028de6:	5c10      	ldrb	r0, [r2, r0]
 8028de8:	bf0c      	ite	eq
 8028dea:	f000 000f 	andeq.w	r0, r0, #15
 8028dee:	1100      	asrne	r0, r0, #4
 8028df0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8028df4:	b2c0      	uxtb	r0, r0
 8028df6:	f1ba 0f00 	cmp.w	sl, #0
 8028dfa:	db45      	blt.n	8028e88 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8028dfc:	45d1      	cmp	r9, sl
 8028dfe:	dd43      	ble.n	8028e88 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8028e00:	f1bc 0f00 	cmp.w	ip, #0
 8028e04:	db40      	blt.n	8028e88 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8028e06:	45e0      	cmp	r8, ip
 8028e08:	dd3e      	ble.n	8028e88 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x148>
 8028e0a:	2e00      	cmp	r6, #0
 8028e0c:	d03e      	beq.n	8028e8c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x14c>
 8028e0e:	3301      	adds	r3, #1
 8028e10:	449e      	add	lr, r3
 8028e12:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8028e16:	f01e 0f01 	tst.w	lr, #1
 8028e1a:	5cd3      	ldrb	r3, [r2, r3]
 8028e1c:	bf0c      	ite	eq
 8028e1e:	f003 030f 	andeq.w	r3, r3, #15
 8028e22:	111b      	asrne	r3, r3, #4
 8028e24:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8028e28:	b2db      	uxtb	r3, r3
 8028e2a:	b2b2      	uxth	r2, r6
 8028e2c:	b2bf      	uxth	r7, r7
 8028e2e:	fb02 f607 	mul.w	r6, r2, r7
 8028e32:	0112      	lsls	r2, r2, #4
 8028e34:	ebc6 1707 	rsb	r7, r6, r7, lsl #4
 8028e38:	f5c2 7c80 	rsb	ip, r2, #256	; 0x100
 8028e3c:	1b92      	subs	r2, r2, r6
 8028e3e:	b2bf      	uxth	r7, r7
 8028e40:	b292      	uxth	r2, r2
 8028e42:	ebac 0c07 	sub.w	ip, ip, r7
 8028e46:	4362      	muls	r2, r4
 8028e48:	fa1f fc8c 	uxth.w	ip, ip
 8028e4c:	fb05 220c 	mla	r2, r5, ip, r2
 8028e50:	fb07 2000 	mla	r0, r7, r0, r2
 8028e54:	4a22      	ldr	r2, [pc, #136]	; (8028ee0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x1a0>)
 8028e56:	fb06 0303 	mla	r3, r6, r3, r0
 8028e5a:	7817      	ldrb	r7, [r2, #0]
 8028e5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8028e60:	2bff      	cmp	r3, #255	; 0xff
 8028e62:	d115      	bne.n	8028e90 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x150>
 8028e64:	700f      	strb	r7, [r1, #0]
 8028e66:	7853      	ldrb	r3, [r2, #1]
 8028e68:	704b      	strb	r3, [r1, #1]
 8028e6a:	7893      	ldrb	r3, [r2, #2]
 8028e6c:	708b      	strb	r3, [r1, #2]
 8028e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028e72:	2500      	movs	r5, #0
 8028e74:	e78a      	b.n	8028d8c <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x4c>
 8028e76:	2400      	movs	r4, #0
 8028e78:	e7a2      	b.n	8028dc0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 8028e7a:	4634      	mov	r4, r6
 8028e7c:	e7a0      	b.n	8028dc0 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x80>
 8028e7e:	2000      	movs	r0, #0
 8028e80:	e7b9      	b.n	8028df6 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xb6>
 8028e82:	463b      	mov	r3, r7
 8028e84:	4638      	mov	r0, r7
 8028e86:	e7d0      	b.n	8028e2a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8028e88:	2300      	movs	r3, #0
 8028e8a:	e7ce      	b.n	8028e2a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8028e8c:	4633      	mov	r3, r6
 8028e8e:	e7cc      	b.n	8028e2a <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0xea>
 8028e90:	2b00      	cmp	r3, #0
 8028e92:	d0ec      	beq.n	8028e6e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8028e94:	78cc      	ldrb	r4, [r1, #3]
 8028e96:	435f      	muls	r7, r3
 8028e98:	7896      	ldrb	r6, [r2, #2]
 8028e9a:	f892 c001 	ldrb.w	ip, [r2, #1]
 8028e9e:	fb03 f204 	mul.w	r2, r3, r4
 8028ea2:	780d      	ldrb	r5, [r1, #0]
 8028ea4:	1c50      	adds	r0, r2, #1
 8028ea6:	fb03 fc0c 	mul.w	ip, r3, ip
 8028eaa:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 8028eae:	191a      	adds	r2, r3, r4
 8028eb0:	4373      	muls	r3, r6
 8028eb2:	1200      	asrs	r0, r0, #8
 8028eb4:	1a12      	subs	r2, r2, r0
 8028eb6:	1a20      	subs	r0, r4, r0
 8028eb8:	784c      	ldrb	r4, [r1, #1]
 8028eba:	b2d2      	uxtb	r2, r2
 8028ebc:	fb00 7505 	mla	r5, r0, r5, r7
 8028ec0:	fb00 c404 	mla	r4, r0, r4, ip
 8028ec4:	70ca      	strb	r2, [r1, #3]
 8028ec6:	fb94 f4f2 	sdiv	r4, r4, r2
 8028eca:	704c      	strb	r4, [r1, #1]
 8028ecc:	788c      	ldrb	r4, [r1, #2]
 8028ece:	fb00 3304 	mla	r3, r0, r4, r3
 8028ed2:	fb95 f5f2 	sdiv	r5, r5, r2
 8028ed6:	fb93 f3f2 	sdiv	r3, r3, r2
 8028eda:	700d      	strb	r5, [r1, #0]
 8028edc:	708b      	strb	r3, [r1, #2]
 8028ede:	e7c6      	b.n	8028e6e <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh+0x12e>
 8028ee0:	2003c2cc 	.word	0x2003c2cc

08028ee4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8028ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028ee8:	b095      	sub	sp, #84	; 0x54
 8028eea:	461c      	mov	r4, r3
 8028eec:	4fc4      	ldr	r7, [pc, #784]	; (8029200 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>)
 8028eee:	920d      	str	r2, [sp, #52]	; 0x34
 8028ef0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8028ef2:	9013      	str	r0, [sp, #76]	; 0x4c
 8028ef4:	9108      	str	r1, [sp, #32]
 8028ef6:	6850      	ldr	r0, [r2, #4]
 8028ef8:	6812      	ldr	r2, [r2, #0]
 8028efa:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 8028efe:	e9dd b51f 	ldrd	fp, r5, [sp, #124]	; 0x7c
 8028f02:	fb00 1303 	mla	r3, r0, r3, r1
 8028f06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8028f0a:	9307      	str	r3, [sp, #28]
 8028f0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028f0e:	689b      	ldr	r3, [r3, #8]
 8028f10:	3301      	adds	r3, #1
 8028f12:	f023 0301 	bic.w	r3, r3, #1
 8028f16:	930a      	str	r3, [sp, #40]	; 0x28
 8028f18:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028f1a:	681e      	ldr	r6, [r3, #0]
 8028f1c:	9b08      	ldr	r3, [sp, #32]
 8028f1e:	2b00      	cmp	r3, #0
 8028f20:	dc03      	bgt.n	8028f2a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8028f22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028f24:	2b00      	cmp	r3, #0
 8028f26:	f340 824e 	ble.w	80293c6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8028f2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028f2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8028f30:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8028f34:	1e48      	subs	r0, r1, #1
 8028f36:	f102 3cff 	add.w	ip, r2, #4294967295
 8028f3a:	2c00      	cmp	r4, #0
 8028f3c:	f340 80b3 	ble.w	80290a6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 8028f40:	ea5f 4e2b 	movs.w	lr, fp, asr #16
 8028f44:	ea4f 4325 	mov.w	r3, r5, asr #16
 8028f48:	d406      	bmi.n	8028f58 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028f4a:	4586      	cmp	lr, r0
 8028f4c:	da04      	bge.n	8028f58 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028f4e:	2b00      	cmp	r3, #0
 8028f50:	db02      	blt.n	8028f58 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8028f52:	4563      	cmp	r3, ip
 8028f54:	f2c0 80a8 	blt.w	80290a8 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 8028f58:	f11e 0e01 	adds.w	lr, lr, #1
 8028f5c:	f100 809a 	bmi.w	8029094 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028f60:	4571      	cmp	r1, lr
 8028f62:	f2c0 8097 	blt.w	8029094 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028f66:	3301      	adds	r3, #1
 8028f68:	f100 8094 	bmi.w	8029094 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028f6c:	429a      	cmp	r2, r3
 8028f6e:	f2c0 8091 	blt.w	8029094 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b0>
 8028f72:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8028f76:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 8028f7a:	9409      	str	r4, [sp, #36]	; 0x24
 8028f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028f7e:	2b00      	cmp	r3, #0
 8028f80:	f340 80b0 	ble.w	80290e4 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8028f84:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8028f86:	1428      	asrs	r0, r5, #16
 8028f88:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8028f8c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8028f90:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8028f94:	ea5f 432b 	movs.w	r3, fp, asr #16
 8028f98:	f100 8134 	bmi.w	8029204 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028f9c:	f10c 3aff 	add.w	sl, ip, #4294967295
 8028fa0:	4553      	cmp	r3, sl
 8028fa2:	f280 812f 	bge.w	8029204 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028fa6:	2800      	cmp	r0, #0
 8028fa8:	f2c0 812c 	blt.w	8029204 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028fac:	f10e 3aff 	add.w	sl, lr, #4294967295
 8028fb0:	4550      	cmp	r0, sl
 8028fb2:	f280 8127 	bge.w	8029204 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 8028fb6:	fb00 3309 	mla	r3, r0, r9, r3
 8028fba:	0858      	lsrs	r0, r3, #1
 8028fbc:	f816 c000 	ldrb.w	ip, [r6, r0]
 8028fc0:	07d8      	lsls	r0, r3, #31
 8028fc2:	bf54      	ite	pl
 8028fc4:	f00c 0c0f 	andpl.w	ip, ip, #15
 8028fc8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8028fcc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8028fd0:	fa5f fc8c 	uxtb.w	ip, ip
 8028fd4:	2a00      	cmp	r2, #0
 8028fd6:	f000 80cb 	beq.w	8029170 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8028fda:	1c58      	adds	r0, r3, #1
 8028fdc:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8028fe0:	07c0      	lsls	r0, r0, #31
 8028fe2:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8028fe6:	bf54      	ite	pl
 8028fe8:	f00e 0e0f 	andpl.w	lr, lr, #15
 8028fec:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8028ff0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8028ff4:	fa5f fe8e 	uxtb.w	lr, lr
 8028ff8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8028ffc:	b1c1      	cbz	r1, 8029030 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8028ffe:	444b      	add	r3, r9
 8029000:	0858      	lsrs	r0, r3, #1
 8029002:	f013 0f01 	tst.w	r3, #1
 8029006:	5c30      	ldrb	r0, [r6, r0]
 8029008:	bf0c      	ite	eq
 802900a:	f000 000f 	andeq.w	r0, r0, #15
 802900e:	1100      	asrne	r0, r0, #4
 8029010:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029014:	b2c0      	uxtb	r0, r0
 8029016:	900b      	str	r0, [sp, #44]	; 0x2c
 8029018:	1c58      	adds	r0, r3, #1
 802901a:	0843      	lsrs	r3, r0, #1
 802901c:	07c0      	lsls	r0, r0, #31
 802901e:	5cf3      	ldrb	r3, [r6, r3]
 8029020:	bf54      	ite	pl
 8029022:	f003 030f 	andpl.w	r3, r3, #15
 8029026:	111b      	asrmi	r3, r3, #4
 8029028:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802902c:	b2db      	uxtb	r3, r3
 802902e:	930f      	str	r3, [sp, #60]	; 0x3c
 8029030:	b292      	uxth	r2, r2
 8029032:	b289      	uxth	r1, r1
 8029034:	fb02 f301 	mul.w	r3, r2, r1
 8029038:	0112      	lsls	r2, r2, #4
 802903a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 802903e:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8029042:	1ad2      	subs	r2, r2, r3
 8029044:	b289      	uxth	r1, r1
 8029046:	b292      	uxth	r2, r2
 8029048:	1a40      	subs	r0, r0, r1
 802904a:	fa1f fe80 	uxth.w	lr, r0
 802904e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8029050:	4342      	muls	r2, r0
 8029052:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8029056:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8029058:	fb01 c102 	mla	r1, r1, r2, ip
 802905c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802905e:	f897 c000 	ldrb.w	ip, [r7]
 8029062:	fb03 1302 	mla	r3, r3, r2, r1
 8029066:	f3c3 2307 	ubfx	r3, r3, #8, #8
 802906a:	2bff      	cmp	r3, #255	; 0xff
 802906c:	f040 8091 	bne.w	8029192 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 8029070:	f888 c000 	strb.w	ip, [r8]
 8029074:	787b      	ldrb	r3, [r7, #1]
 8029076:	f888 3001 	strb.w	r3, [r8, #1]
 802907a:	78bb      	ldrb	r3, [r7, #2]
 802907c:	f888 3002 	strb.w	r3, [r8, #2]
 8029080:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029082:	f108 0804 	add.w	r8, r8, #4
 8029086:	449b      	add	fp, r3
 8029088:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802908a:	441d      	add	r5, r3
 802908c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802908e:	3b01      	subs	r3, #1
 8029090:	9309      	str	r3, [sp, #36]	; 0x24
 8029092:	e773      	b.n	8028f7c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8029094:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029096:	3c01      	subs	r4, #1
 8029098:	449b      	add	fp, r3
 802909a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 802909c:	441d      	add	r5, r3
 802909e:	9b07      	ldr	r3, [sp, #28]
 80290a0:	3304      	adds	r3, #4
 80290a2:	9307      	str	r3, [sp, #28]
 80290a4:	e749      	b.n	8028f3a <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80290a6:	d023      	beq.n	80290f0 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 80290a8:	1e63      	subs	r3, r4, #1
 80290aa:	9821      	ldr	r0, [sp, #132]	; 0x84
 80290ac:	fb00 b003 	mla	r0, r0, r3, fp
 80290b0:	1400      	asrs	r0, r0, #16
 80290b2:	f53f af5e 	bmi.w	8028f72 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80290b6:	3901      	subs	r1, #1
 80290b8:	4288      	cmp	r0, r1
 80290ba:	f6bf af5a 	bge.w	8028f72 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80290be:	9922      	ldr	r1, [sp, #136]	; 0x88
 80290c0:	fb01 5303 	mla	r3, r1, r3, r5
 80290c4:	141b      	asrs	r3, r3, #16
 80290c6:	f53f af54 	bmi.w	8028f72 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80290ca:	3a01      	subs	r2, #1
 80290cc:	4293      	cmp	r3, r2
 80290ce:	f6bf af50 	bge.w	8028f72 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 80290d2:	9b07      	ldr	r3, [sp, #28]
 80290d4:	46a0      	mov	r8, r4
 80290d6:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 80290da:	1d1a      	adds	r2, r3, #4
 80290dc:	f1b8 0f00 	cmp.w	r8, #0
 80290e0:	f300 80af 	bgt.w	8029242 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 80290e4:	9b07      	ldr	r3, [sp, #28]
 80290e6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80290ea:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80290ee:	9307      	str	r3, [sp, #28]
 80290f0:	9b08      	ldr	r3, [sp, #32]
 80290f2:	2b00      	cmp	r3, #0
 80290f4:	f340 8167 	ble.w	80293c6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80290f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80290fc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80290fe:	ee30 0a04 	vadd.f32	s0, s0, s8
 8029102:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8029106:	eef0 6a62 	vmov.f32	s13, s5
 802910a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 802910e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8029112:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029116:	ee16 ba90 	vmov	fp, s13
 802911a:	eef0 6a43 	vmov.f32	s13, s6
 802911e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8029122:	ee16 5a90 	vmov	r5, s13
 8029126:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802912a:	ee61 7a27 	vmul.f32	s15, s2, s15
 802912e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8029132:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8029136:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802913a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802913e:	ee12 2a90 	vmov	r2, s5
 8029142:	eef0 2a47 	vmov.f32	s5, s14
 8029146:	fb92 f3f3 	sdiv	r3, r2, r3
 802914a:	ee13 2a10 	vmov	r2, s6
 802914e:	9321      	str	r3, [sp, #132]	; 0x84
 8029150:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8029152:	eeb0 3a67 	vmov.f32	s6, s15
 8029156:	fb92 f3f3 	sdiv	r3, r2, r3
 802915a:	9322      	str	r3, [sp, #136]	; 0x88
 802915c:	9b08      	ldr	r3, [sp, #32]
 802915e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8029160:	3b01      	subs	r3, #1
 8029162:	9308      	str	r3, [sp, #32]
 8029164:	bf08      	it	eq
 8029166:	4614      	moveq	r4, r2
 8029168:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 802916a:	bf18      	it	ne
 802916c:	461c      	movne	r4, r3
 802916e:	e6d5      	b.n	8028f1c <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8029170:	2900      	cmp	r1, #0
 8029172:	f43f af5d 	beq.w	8029030 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8029176:	eb09 0003 	add.w	r0, r9, r3
 802917a:	0843      	lsrs	r3, r0, #1
 802917c:	07c0      	lsls	r0, r0, #31
 802917e:	5cf3      	ldrb	r3, [r6, r3]
 8029180:	bf54      	ite	pl
 8029182:	f003 030f 	andpl.w	r3, r3, #15
 8029186:	111b      	asrmi	r3, r3, #4
 8029188:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802918c:	b2db      	uxtb	r3, r3
 802918e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029190:	e74e      	b.n	8029030 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8029192:	2b00      	cmp	r3, #0
 8029194:	f43f af74 	beq.w	8029080 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8029198:	f898 a003 	ldrb.w	sl, [r8, #3]
 802919c:	fb03 fc0c 	mul.w	ip, r3, ip
 80291a0:	78ba      	ldrb	r2, [r7, #2]
 80291a2:	fb03 f00a 	mul.w	r0, r3, sl
 80291a6:	f897 e001 	ldrb.w	lr, [r7, #1]
 80291aa:	9210      	str	r2, [sp, #64]	; 0x40
 80291ac:	eb03 020a 	add.w	r2, r3, sl
 80291b0:	1c41      	adds	r1, r0, #1
 80291b2:	fb03 fe0e 	mul.w	lr, r3, lr
 80291b6:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80291ba:	1208      	asrs	r0, r1, #8
 80291bc:	ebaa 0100 	sub.w	r1, sl, r0
 80291c0:	1a12      	subs	r2, r2, r0
 80291c2:	f898 0000 	ldrb.w	r0, [r8]
 80291c6:	b2d2      	uxtb	r2, r2
 80291c8:	fb01 cc00 	mla	ip, r1, r0, ip
 80291cc:	f898 0001 	ldrb.w	r0, [r8, #1]
 80291d0:	f888 2003 	strb.w	r2, [r8, #3]
 80291d4:	fb01 ee00 	mla	lr, r1, r0, lr
 80291d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80291da:	fb9c fcf2 	sdiv	ip, ip, r2
 80291de:	4343      	muls	r3, r0
 80291e0:	f888 c000 	strb.w	ip, [r8]
 80291e4:	f898 c002 	ldrb.w	ip, [r8, #2]
 80291e8:	fb01 330c 	mla	r3, r1, ip, r3
 80291ec:	fb9e fef2 	sdiv	lr, lr, r2
 80291f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80291f4:	f888 e001 	strb.w	lr, [r8, #1]
 80291f8:	f888 3002 	strb.w	r3, [r8, #2]
 80291fc:	e740      	b.n	8029080 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 80291fe:	bf00      	nop
 8029200:	2003c2cc 	.word	0x2003c2cc
 8029204:	f113 0a01 	adds.w	sl, r3, #1
 8029208:	f53f af3a 	bmi.w	8029080 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802920c:	45d4      	cmp	ip, sl
 802920e:	f6ff af37 	blt.w	8029080 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8029212:	f110 0a01 	adds.w	sl, r0, #1
 8029216:	f53f af33 	bmi.w	8029080 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 802921a:	45d6      	cmp	lr, sl
 802921c:	f6ff af30 	blt.w	8029080 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8029220:	e9cd 3002 	strd	r3, r0, [sp, #8]
 8029224:	fa0f f38e 	sxth.w	r3, lr
 8029228:	9813      	ldr	r0, [sp, #76]	; 0x4c
 802922a:	9301      	str	r3, [sp, #4]
 802922c:	fa0f f38c 	sxth.w	r3, ip
 8029230:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8029234:	9300      	str	r3, [sp, #0]
 8029236:	4632      	mov	r2, r6
 8029238:	464b      	mov	r3, r9
 802923a:	4641      	mov	r1, r8
 802923c:	f7ff fd80 	bl	8028d40 <_ZNK8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPmPKtsssiihh>
 8029240:	e71e      	b.n	8029080 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8029242:	ea4f 412b 	mov.w	r1, fp, asr #16
 8029246:	f3cb 3c03 	ubfx	ip, fp, #12, #4
 802924a:	142b      	asrs	r3, r5, #16
 802924c:	f3c5 3e03 	ubfx	lr, r5, #12, #4
 8029250:	fb09 1303 	mla	r3, r9, r3, r1
 8029254:	0859      	lsrs	r1, r3, #1
 8029256:	07d8      	lsls	r0, r3, #31
 8029258:	5c71      	ldrb	r1, [r6, r1]
 802925a:	bf54      	ite	pl
 802925c:	f001 010f 	andpl.w	r1, r1, #15
 8029260:	1109      	asrmi	r1, r1, #4
 8029262:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8029266:	b2c9      	uxtb	r1, r1
 8029268:	f1bc 0f00 	cmp.w	ip, #0
 802926c:	d062      	beq.n	8029334 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
 802926e:	f103 0a01 	add.w	sl, r3, #1
 8029272:	ea4f 005a 	mov.w	r0, sl, lsr #1
 8029276:	f01a 0f01 	tst.w	sl, #1
 802927a:	5c30      	ldrb	r0, [r6, r0]
 802927c:	bf0c      	ite	eq
 802927e:	f000 000f 	andeq.w	r0, r0, #15
 8029282:	1100      	asrne	r0, r0, #4
 8029284:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8029288:	b2c0      	uxtb	r0, r0
 802928a:	9011      	str	r0, [sp, #68]	; 0x44
 802928c:	f1be 0f00 	cmp.w	lr, #0
 8029290:	d019      	beq.n	80292c6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8029292:	444b      	add	r3, r9
 8029294:	0858      	lsrs	r0, r3, #1
 8029296:	f013 0f01 	tst.w	r3, #1
 802929a:	f103 0301 	add.w	r3, r3, #1
 802929e:	5c30      	ldrb	r0, [r6, r0]
 80292a0:	bf0c      	ite	eq
 80292a2:	f000 000f 	andeq.w	r0, r0, #15
 80292a6:	1100      	asrne	r0, r0, #4
 80292a8:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80292ac:	b2c0      	uxtb	r0, r0
 80292ae:	900c      	str	r0, [sp, #48]	; 0x30
 80292b0:	0858      	lsrs	r0, r3, #1
 80292b2:	07db      	lsls	r3, r3, #31
 80292b4:	5c30      	ldrb	r0, [r6, r0]
 80292b6:	bf54      	ite	pl
 80292b8:	f000 000f 	andpl.w	r0, r0, #15
 80292bc:	1100      	asrmi	r0, r0, #4
 80292be:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80292c2:	b2c0      	uxtb	r0, r0
 80292c4:	9012      	str	r0, [sp, #72]	; 0x48
 80292c6:	fa1f fc8c 	uxth.w	ip, ip
 80292ca:	fa1f fe8e 	uxth.w	lr, lr
 80292ce:	fb0c f30e 	mul.w	r3, ip, lr
 80292d2:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 80292d6:	ebc3 1e0e 	rsb	lr, r3, lr, lsl #4
 80292da:	f5cc 7080 	rsb	r0, ip, #256	; 0x100
 80292de:	ebac 0c03 	sub.w	ip, ip, r3
 80292e2:	fa1f fe8e 	uxth.w	lr, lr
 80292e6:	fa1f fc8c 	uxth.w	ip, ip
 80292ea:	eba0 000e 	sub.w	r0, r0, lr
 80292ee:	fa1f fa80 	uxth.w	sl, r0
 80292f2:	9811      	ldr	r0, [sp, #68]	; 0x44
 80292f4:	fb00 fc0c 	mul.w	ip, r0, ip
 80292f8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80292fa:	fb01 c10a 	mla	r1, r1, sl, ip
 80292fe:	fb0e 1e00 	mla	lr, lr, r0, r1
 8029302:	9912      	ldr	r1, [sp, #72]	; 0x48
 8029304:	fb03 e301 	mla	r3, r3, r1, lr
 8029308:	f897 e000 	ldrb.w	lr, [r7]
 802930c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8029310:	2bff      	cmp	r3, #255	; 0xff
 8029312:	d11f      	bne.n	8029354 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8029314:	f802 ec04 	strb.w	lr, [r2, #-4]
 8029318:	787b      	ldrb	r3, [r7, #1]
 802931a:	f802 3c03 	strb.w	r3, [r2, #-3]
 802931e:	78bb      	ldrb	r3, [r7, #2]
 8029320:	f802 3c02 	strb.w	r3, [r2, #-2]
 8029324:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029326:	3204      	adds	r2, #4
 8029328:	f108 38ff 	add.w	r8, r8, #4294967295
 802932c:	449b      	add	fp, r3
 802932e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8029330:	441d      	add	r5, r3
 8029332:	e6d3      	b.n	80290dc <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
 8029334:	f1be 0f00 	cmp.w	lr, #0
 8029338:	d0c5      	beq.n	80292c6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 802933a:	444b      	add	r3, r9
 802933c:	0858      	lsrs	r0, r3, #1
 802933e:	07db      	lsls	r3, r3, #31
 8029340:	5c30      	ldrb	r0, [r6, r0]
 8029342:	bf54      	ite	pl
 8029344:	f000 000f 	andpl.w	r0, r0, #15
 8029348:	1100      	asrmi	r0, r0, #4
 802934a:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 802934e:	b2c0      	uxtb	r0, r0
 8029350:	900c      	str	r0, [sp, #48]	; 0x30
 8029352:	e7b8      	b.n	80292c6 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 8029354:	2b00      	cmp	r3, #0
 8029356:	d0e5      	beq.n	8029324 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 8029358:	78b9      	ldrb	r1, [r7, #2]
 802935a:	fb03 fe0e 	mul.w	lr, r3, lr
 802935e:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 8029362:	9110      	str	r1, [sp, #64]	; 0x40
 8029364:	fb03 f100 	mul.w	r1, r3, r0
 8029368:	f897 a001 	ldrb.w	sl, [r7, #1]
 802936c:	f101 0c01 	add.w	ip, r1, #1
 8029370:	fb03 fa0a 	mul.w	sl, r3, sl
 8029374:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 8029378:	1819      	adds	r1, r3, r0
 802937a:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 802937e:	eba0 000c 	sub.w	r0, r0, ip
 8029382:	eba1 010c 	sub.w	r1, r1, ip
 8029386:	f812 cc04 	ldrb.w	ip, [r2, #-4]
 802938a:	9009      	str	r0, [sp, #36]	; 0x24
 802938c:	b2c9      	uxtb	r1, r1
 802938e:	fb00 ee0c 	mla	lr, r0, ip, lr
 8029392:	f812 cc03 	ldrb.w	ip, [r2, #-3]
 8029396:	f802 1c01 	strb.w	r1, [r2, #-1]
 802939a:	fb00 aa0c 	mla	sl, r0, ip, sl
 802939e:	9810      	ldr	r0, [sp, #64]	; 0x40
 80293a0:	f812 cc02 	ldrb.w	ip, [r2, #-2]
 80293a4:	4343      	muls	r3, r0
 80293a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80293a8:	fb00 330c 	mla	r3, r0, ip, r3
 80293ac:	fb9e fef1 	sdiv	lr, lr, r1
 80293b0:	fb9a faf1 	sdiv	sl, sl, r1
 80293b4:	fb93 f3f1 	sdiv	r3, r3, r1
 80293b8:	f802 ec04 	strb.w	lr, [r2, #-4]
 80293bc:	f802 ac03 	strb.w	sl, [r2, #-3]
 80293c0:	f802 3c02 	strb.w	r3, [r2, #-2]
 80293c4:	e7ae      	b.n	8029324 <_ZN8touchgfx8LCD32bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 80293c6:	b015      	add	sp, #84	; 0x54
 80293c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080293cc <CRC_Lock>:
 80293cc:	4a20      	ldr	r2, [pc, #128]	; (8029450 <CRC_Lock+0x84>)
 80293ce:	b530      	push	{r4, r5, lr}
 80293d0:	6813      	ldr	r3, [r2, #0]
 80293d2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80293d6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80293da:	f023 0301 	bic.w	r3, r3, #1
 80293de:	6013      	str	r3, [r2, #0]
 80293e0:	4b1c      	ldr	r3, [pc, #112]	; (8029454 <CRC_Lock+0x88>)
 80293e2:	681a      	ldr	r2, [r3, #0]
 80293e4:	4022      	ands	r2, r4
 80293e6:	42aa      	cmp	r2, r5
 80293e8:	d005      	beq.n	80293f6 <CRC_Lock+0x2a>
 80293ea:	681b      	ldr	r3, [r3, #0]
 80293ec:	f24c 2270 	movw	r2, #49776	; 0xc270
 80293f0:	4023      	ands	r3, r4
 80293f2:	4293      	cmp	r3, r2
 80293f4:	d124      	bne.n	8029440 <CRC_Lock+0x74>
 80293f6:	4b18      	ldr	r3, [pc, #96]	; (8029458 <CRC_Lock+0x8c>)
 80293f8:	681b      	ldr	r3, [r3, #0]
 80293fa:	bb0b      	cbnz	r3, 8029440 <CRC_Lock+0x74>
 80293fc:	4b17      	ldr	r3, [pc, #92]	; (802945c <CRC_Lock+0x90>)
 80293fe:	681a      	ldr	r2, [r3, #0]
 8029400:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029404:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8029408:	d00d      	beq.n	8029426 <CRC_Lock+0x5a>
 802940a:	681a      	ldr	r2, [r3, #0]
 802940c:	f240 4483 	movw	r4, #1155	; 0x483
 8029410:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8029414:	42a2      	cmp	r2, r4
 8029416:	d006      	beq.n	8029426 <CRC_Lock+0x5a>
 8029418:	681b      	ldr	r3, [r3, #0]
 802941a:	f240 4285 	movw	r2, #1157	; 0x485
 802941e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8029422:	4293      	cmp	r3, r2
 8029424:	d10c      	bne.n	8029440 <CRC_Lock+0x74>
 8029426:	4b0e      	ldr	r3, [pc, #56]	; (8029460 <CRC_Lock+0x94>)
 8029428:	2201      	movs	r2, #1
 802942a:	601a      	str	r2, [r3, #0]
 802942c:	681a      	ldr	r2, [r3, #0]
 802942e:	2a00      	cmp	r2, #0
 8029430:	d1fc      	bne.n	802942c <CRC_Lock+0x60>
 8029432:	4b0c      	ldr	r3, [pc, #48]	; (8029464 <CRC_Lock+0x98>)
 8029434:	6018      	str	r0, [r3, #0]
 8029436:	6818      	ldr	r0, [r3, #0]
 8029438:	1a43      	subs	r3, r0, r1
 802943a:	4258      	negs	r0, r3
 802943c:	4158      	adcs	r0, r3
 802943e:	bd30      	pop	{r4, r5, pc}
 8029440:	4b09      	ldr	r3, [pc, #36]	; (8029468 <CRC_Lock+0x9c>)
 8029442:	2201      	movs	r2, #1
 8029444:	601a      	str	r2, [r3, #0]
 8029446:	681a      	ldr	r2, [r3, #0]
 8029448:	2a00      	cmp	r2, #0
 802944a:	d1fc      	bne.n	8029446 <CRC_Lock+0x7a>
 802944c:	4b07      	ldr	r3, [pc, #28]	; (802946c <CRC_Lock+0xa0>)
 802944e:	e7f1      	b.n	8029434 <CRC_Lock+0x68>
 8029450:	e0002000 	.word	0xe0002000
 8029454:	e000ed00 	.word	0xe000ed00
 8029458:	e0042000 	.word	0xe0042000
 802945c:	5c001000 	.word	0x5c001000
 8029460:	58024c08 	.word	0x58024c08
 8029464:	58024c00 	.word	0x58024c00
 8029468:	40023008 	.word	0x40023008
 802946c:	40023000 	.word	0x40023000

08029470 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8029470:	6101      	str	r1, [r0, #16]
 8029472:	4770      	bx	lr

08029474 <_ZN8touchgfx8Gestures4tickEv>:
 8029474:	7b83      	ldrb	r3, [r0, #14]
 8029476:	b14b      	cbz	r3, 802948c <_ZN8touchgfx8Gestures4tickEv+0x18>
 8029478:	8903      	ldrh	r3, [r0, #8]
 802947a:	3301      	adds	r3, #1
 802947c:	b29b      	uxth	r3, r3
 802947e:	2b07      	cmp	r3, #7
 8029480:	8103      	strh	r3, [r0, #8]
 8029482:	bf81      	itttt	hi
 8029484:	2300      	movhi	r3, #0
 8029486:	8143      	strhhi	r3, [r0, #10]
 8029488:	8183      	strhhi	r3, [r0, #12]
 802948a:	7383      	strbhi	r3, [r0, #14]
 802948c:	4770      	bx	lr
	...

08029490 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8029490:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8029494:	4698      	mov	r8, r3
 8029496:	8883      	ldrh	r3, [r0, #4]
 8029498:	4604      	mov	r4, r0
 802949a:	4617      	mov	r7, r2
 802949c:	f8ad 3006 	strh.w	r3, [sp, #6]
 80294a0:	eba8 0303 	sub.w	r3, r8, r3
 80294a4:	4a19      	ldr	r2, [pc, #100]	; (802950c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 80294a6:	460e      	mov	r6, r1
 80294a8:	b21b      	sxth	r3, r3
 80294aa:	88c1      	ldrh	r1, [r0, #6]
 80294ac:	9200      	str	r2, [sp, #0]
 80294ae:	2000      	movs	r0, #0
 80294b0:	2b00      	cmp	r3, #0
 80294b2:	8aa2      	ldrh	r2, [r4, #20]
 80294b4:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80294b8:	bfb8      	it	lt
 80294ba:	425b      	neglt	r3, r3
 80294bc:	f88d 0004 	strb.w	r0, [sp, #4]
 80294c0:	f8ad 1008 	strh.w	r1, [sp, #8]
 80294c4:	b21b      	sxth	r3, r3
 80294c6:	f8ad 800a 	strh.w	r8, [sp, #10]
 80294ca:	f8ad 500c 	strh.w	r5, [sp, #12]
 80294ce:	4293      	cmp	r3, r2
 80294d0:	dc07      	bgt.n	80294e2 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80294d2:	1a69      	subs	r1, r5, r1
 80294d4:	b209      	sxth	r1, r1
 80294d6:	2900      	cmp	r1, #0
 80294d8:	bfb8      	it	lt
 80294da:	4249      	neglt	r1, r1
 80294dc:	b209      	sxth	r1, r1
 80294de:	428a      	cmp	r2, r1
 80294e0:	da10      	bge.n	8029504 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80294e2:	6920      	ldr	r0, [r4, #16]
 80294e4:	4669      	mov	r1, sp
 80294e6:	eba8 0606 	sub.w	r6, r8, r6
 80294ea:	1bef      	subs	r7, r5, r7
 80294ec:	6803      	ldr	r3, [r0, #0]
 80294ee:	685b      	ldr	r3, [r3, #4]
 80294f0:	4798      	blx	r3
 80294f2:	2300      	movs	r3, #0
 80294f4:	2001      	movs	r0, #1
 80294f6:	8166      	strh	r6, [r4, #10]
 80294f8:	8123      	strh	r3, [r4, #8]
 80294fa:	81a7      	strh	r7, [r4, #12]
 80294fc:	f8a4 8004 	strh.w	r8, [r4, #4]
 8029500:	80e5      	strh	r5, [r4, #6]
 8029502:	73a0      	strb	r0, [r4, #14]
 8029504:	b004      	add	sp, #16
 8029506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802950a:	bf00      	nop
 802950c:	08030a20 	.word	0x08030a20

08029510 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 8029510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8029512:	461e      	mov	r6, r3
 8029514:	1e4b      	subs	r3, r1, #1
 8029516:	b085      	sub	sp, #20
 8029518:	4604      	mov	r4, r0
 802951a:	2b01      	cmp	r3, #1
 802951c:	460d      	mov	r5, r1
 802951e:	4617      	mov	r7, r2
 8029520:	d84b      	bhi.n	80295ba <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8029522:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8029526:	1cd3      	adds	r3, r2, #3
 8029528:	b29b      	uxth	r3, r3
 802952a:	2b06      	cmp	r3, #6
 802952c:	d916      	bls.n	802955c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 802952e:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 80295d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8029532:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029536:	f8cd c004 	str.w	ip, [sp, #4]
 802953a:	f04f 0c00 	mov.w	ip, #0
 802953e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8029542:	6900      	ldr	r0, [r0, #16]
 8029544:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029548:	a901      	add	r1, sp, #4
 802954a:	f88d c008 	strb.w	ip, [sp, #8]
 802954e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8029552:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029556:	6803      	ldr	r3, [r0, #0]
 8029558:	689b      	ldr	r3, [r3, #8]
 802955a:	4798      	blx	r3
 802955c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029560:	1cd3      	adds	r3, r2, #3
 8029562:	b29b      	uxth	r3, r3
 8029564:	2b06      	cmp	r3, #6
 8029566:	d916      	bls.n	8029596 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8029568:	f8df c064 	ldr.w	ip, [pc, #100]	; 80295d0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 802956c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8029570:	f8cd c004 	str.w	ip, [sp, #4]
 8029574:	f04f 0c01 	mov.w	ip, #1
 8029578:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802957c:	6920      	ldr	r0, [r4, #16]
 802957e:	f8ad 100c 	strh.w	r1, [sp, #12]
 8029582:	a901      	add	r1, sp, #4
 8029584:	f88d c008 	strb.w	ip, [sp, #8]
 8029588:	f8ad 200a 	strh.w	r2, [sp, #10]
 802958c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8029590:	6803      	ldr	r3, [r0, #0]
 8029592:	689b      	ldr	r3, [r3, #8]
 8029594:	4798      	blx	r3
 8029596:	4b0d      	ldr	r3, [pc, #52]	; (80295cc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8029598:	a901      	add	r1, sp, #4
 802959a:	6920      	ldr	r0, [r4, #16]
 802959c:	9301      	str	r3, [sp, #4]
 802959e:	2300      	movs	r3, #0
 80295a0:	f88d 5008 	strb.w	r5, [sp, #8]
 80295a4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80295a8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80295ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80295b0:	6803      	ldr	r3, [r0, #0]
 80295b2:	681b      	ldr	r3, [r3, #0]
 80295b4:	4798      	blx	r3
 80295b6:	b005      	add	sp, #20
 80295b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80295ba:	2900      	cmp	r1, #0
 80295bc:	d1eb      	bne.n	8029596 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80295be:	80a2      	strh	r2, [r4, #4]
 80295c0:	80c6      	strh	r6, [r0, #6]
 80295c2:	60a1      	str	r1, [r4, #8]
 80295c4:	81a1      	strh	r1, [r4, #12]
 80295c6:	73a1      	strb	r1, [r4, #14]
 80295c8:	e7e5      	b.n	8029596 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 80295ca:	bf00      	nop
 80295cc:	08030a0c 	.word	0x08030a0c
 80295d0:	08030a34 	.word	0x08030a34

080295d4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>:
 80295d4:	10c9      	asrs	r1, r1, #3
 80295d6:	2900      	cmp	r1, #0
 80295d8:	bfb8      	it	lt
 80295da:	4249      	neglt	r1, r1
 80295dc:	2801      	cmp	r0, #1
 80295de:	d108      	bne.n	80295f2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80295e0:	f3c1 0008 	ubfx	r0, r1, #0, #9
 80295e4:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80295e8:	4601      	mov	r1, r0
 80295ea:	dd02      	ble.n	80295f2 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5+0x1e>
 80295ec:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
 80295f0:	4770      	bx	lr
 80295f2:	29ff      	cmp	r1, #255	; 0xff
 80295f4:	bfa8      	it	ge
 80295f6:	21ff      	movge	r1, #255	; 0xff
 80295f8:	4608      	mov	r0, r1
 80295fa:	4770      	bx	lr

080295fc <_ZN8touchgfx10Rasterizer6lineToEii>:
 80295fc:	b410      	push	{r4}
 80295fe:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8029602:	429c      	cmp	r4, r3
 8029604:	d803      	bhi.n	802960e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 8029606:	f85d 4b04 	ldr.w	r4, [sp], #4
 802960a:	f7ef be3d 	b.w	8019288 <_ZN8touchgfx7Outline6lineToEii>
 802960e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8029612:	4770      	bx	lr

08029614 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 8029614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029618:	b08b      	sub	sp, #44	; 0x2c
 802961a:	4606      	mov	r6, r0
 802961c:	468a      	mov	sl, r1
 802961e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8029622:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8029626:	9308      	str	r3, [sp, #32]
 8029628:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 802962c:	9309      	str	r3, [sp, #36]	; 0x24
 802962e:	f7ef ff96 	bl	801955e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 8029632:	68b5      	ldr	r5, [r6, #8]
 8029634:	4604      	mov	r4, r0
 8029636:	2d00      	cmp	r5, #0
 8029638:	d044      	beq.n	80296c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802963a:	6873      	ldr	r3, [r6, #4]
 802963c:	42ab      	cmp	r3, r5
 802963e:	d33d      	bcc.n	80296bc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 8029640:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8029644:	f04f 0800 	mov.w	r8, #0
 8029648:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	; 0x34
 802964c:	eb02 0b03 	add.w	fp, r2, r3
 8029650:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8029654:	fb02 1203 	mla	r2, r2, r3, r1
 8029658:	9205      	str	r2, [sp, #20]
 802965a:	1e6a      	subs	r2, r5, #1
 802965c:	9204      	str	r2, [sp, #16]
 802965e:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 8029662:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029666:	454b      	cmp	r3, r9
 8029668:	463a      	mov	r2, r7
 802966a:	d008      	beq.n	802967e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 802966c:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	; 0x34
 8029670:	eb03 0b09 	add.w	fp, r3, r9
 8029674:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8029678:	fb03 1309 	mla	r3, r3, r9, r1
 802967c:	9305      	str	r3, [sp, #20]
 802967e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8029682:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8029686:	4498      	add	r8, r3
 8029688:	9b04      	ldr	r3, [sp, #16]
 802968a:	3b01      	subs	r3, #1
 802968c:	9304      	str	r3, [sp, #16]
 802968e:	9b04      	ldr	r3, [sp, #16]
 8029690:	3301      	adds	r3, #1
 8029692:	d015      	beq.n	80296c0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 8029694:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8029698:	42bb      	cmp	r3, r7
 802969a:	d117      	bne.n	80296cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 802969c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 80296a0:	9b04      	ldr	r3, [sp, #16]
 80296a2:	4548      	cmp	r0, r9
 80296a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80296a8:	d17d      	bne.n	80297a6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 80296aa:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 80296ae:	4401      	add	r1, r0
 80296b0:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80296b4:	4480      	add	r8, r0
 80296b6:	e7e9      	b.n	802968c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 80296b8:	461f      	mov	r7, r3
 80296ba:	e042      	b.n	8029742 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 80296bc:	2000      	movs	r0, #0
 80296be:	e002      	b.n	80296c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 80296c0:	2900      	cmp	r1, #0
 80296c2:	d16d      	bne.n	80297a0 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 80296c4:	2001      	movs	r0, #1
 80296c6:	b00b      	add	sp, #44	; 0x2c
 80296c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80296cc:	b379      	cbz	r1, 802972e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 80296ce:	2f00      	cmp	r7, #0
 80296d0:	db29      	blt.n	8029726 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80296d2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 80296d6:	42bb      	cmp	r3, r7
 80296d8:	dd25      	ble.n	8029726 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80296da:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 80296de:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 80296e2:	f7ff ff77 	bl	80295d4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 80296e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80296e8:	fb10 f003 	smulbb	r0, r0, r3
 80296ec:	b280      	uxth	r0, r0
 80296ee:	1c41      	adds	r1, r0, #1
 80296f0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80296f4:	1209      	asrs	r1, r1, #8
 80296f6:	f011 0fff 	tst.w	r1, #255	; 0xff
 80296fa:	d014      	beq.n	8029726 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80296fc:	b2c9      	uxtb	r1, r1
 80296fe:	9808      	ldr	r0, [sp, #32]
 8029700:	b2ba      	uxth	r2, r7
 8029702:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 8029704:	9102      	str	r1, [sp, #8]
 8029706:	2101      	movs	r1, #1
 8029708:	4413      	add	r3, r2
 802970a:	4402      	add	r2, r0
 802970c:	9101      	str	r1, [sp, #4]
 802970e:	fa0f f18b 	sxth.w	r1, fp
 8029712:	f8da 0000 	ldr.w	r0, [sl]
 8029716:	b21b      	sxth	r3, r3
 8029718:	9100      	str	r1, [sp, #0]
 802971a:	b212      	sxth	r2, r2
 802971c:	6941      	ldr	r1, [r0, #20]
 802971e:	4650      	mov	r0, sl
 8029720:	460d      	mov	r5, r1
 8029722:	9905      	ldr	r1, [sp, #20]
 8029724:	47a8      	blx	r5
 8029726:	9b04      	ldr	r3, [sp, #16]
 8029728:	1c7a      	adds	r2, r7, #1
 802972a:	3301      	adds	r3, #1
 802972c:	d0ca      	beq.n	80296c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802972e:	f9b4 7000 	ldrsh.w	r7, [r4]
 8029732:	1abb      	subs	r3, r7, r2
 8029734:	2b00      	cmp	r3, #0
 8029736:	dd31      	ble.n	802979c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029738:	2a00      	cmp	r2, #0
 802973a:	dabd      	bge.n	80296b8 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 802973c:	2f00      	cmp	r7, #0
 802973e:	dd2d      	ble.n	802979c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029740:	2200      	movs	r2, #0
 8029742:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	; 0x36
 8029746:	19d1      	adds	r1, r2, r7
 8029748:	4299      	cmp	r1, r3
 802974a:	db02      	blt.n	8029752 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 802974c:	1a9f      	subs	r7, r3, r2
 802974e:	2f00      	cmp	r7, #0
 8029750:	dd24      	ble.n	802979c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029752:	ea4f 1188 	mov.w	r1, r8, lsl #6
 8029756:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 802975a:	f7ff ff3b 	bl	80295d4 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.5>
 802975e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8029760:	fb10 f003 	smulbb	r0, r0, r3
 8029764:	b280      	uxth	r0, r0
 8029766:	1c41      	adds	r1, r0, #1
 8029768:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802976c:	1209      	asrs	r1, r1, #8
 802976e:	f011 0fff 	tst.w	r1, #255	; 0xff
 8029772:	d013      	beq.n	802979c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8029774:	b292      	uxth	r2, r2
 8029776:	9808      	ldr	r0, [sp, #32]
 8029778:	b2c9      	uxtb	r1, r1
 802977a:	8e73      	ldrh	r3, [r6, #50]	; 0x32
 802977c:	b23f      	sxth	r7, r7
 802977e:	4413      	add	r3, r2
 8029780:	9102      	str	r1, [sp, #8]
 8029782:	4402      	add	r2, r0
 8029784:	fa0f f18b 	sxth.w	r1, fp
 8029788:	f8da 0000 	ldr.w	r0, [sl]
 802978c:	b21b      	sxth	r3, r3
 802978e:	9100      	str	r1, [sp, #0]
 8029790:	b212      	sxth	r2, r2
 8029792:	9701      	str	r7, [sp, #4]
 8029794:	9905      	ldr	r1, [sp, #20]
 8029796:	6947      	ldr	r7, [r0, #20]
 8029798:	4650      	mov	r0, sl
 802979a:	47b8      	blx	r7
 802979c:	464b      	mov	r3, r9
 802979e:	e75e      	b.n	802965e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 80297a0:	2f00      	cmp	r7, #0
 80297a2:	da96      	bge.n	80296d2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 80297a4:	e78e      	b.n	80296c4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80297a6:	2900      	cmp	r1, #0
 80297a8:	d0f8      	beq.n	802979c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80297aa:	e790      	b.n	80296ce <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

080297ac <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE>:
 80297ac:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80297b0:	4b4b      	ldr	r3, [pc, #300]	; (80298e0 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x134>)
 80297b2:	2500      	movs	r5, #0
 80297b4:	f100 0620 	add.w	r6, r0, #32
 80297b8:	4604      	mov	r4, r0
 80297ba:	f100 0718 	add.w	r7, r0, #24
 80297be:	4690      	mov	r8, r2
 80297c0:	e9c0 3100 	strd	r3, r1, [r0]
 80297c4:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80297c8:	e9c0 5504 	strd	r5, r5, [r0, #16]
 80297cc:	e9c0 5506 	strd	r5, r5, [r0, #24]
 80297d0:	4630      	mov	r0, r6
 80297d2:	f7ef f89f 	bl	8018914 <_ZN8touchgfx7OutlineC1Ev>
 80297d6:	2301      	movs	r3, #1
 80297d8:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
 80297dc:	f8a4 5052 	strh.w	r5, [r4, #82]	; 0x52
 80297e0:	f8a4 5054 	strh.w	r5, [r4, #84]	; 0x54
 80297e4:	f8a4 5056 	strh.w	r5, [r4, #86]	; 0x56
 80297e8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80297ec:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
 80297f0:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80297f4:	f8d4 c004 	ldr.w	ip, [r4, #4]
 80297f8:	9500      	str	r5, [sp, #0]
 80297fa:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
 80297fe:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
 8029802:	f9b8 2000 	ldrsh.w	r2, [r8]
 8029806:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 802980a:	f9bc 9008 	ldrsh.w	r9, [ip, #8]
 802980e:	4410      	add	r0, r2
 8029810:	f9bc e00a 	ldrsh.w	lr, [ip, #10]
 8029814:	b280      	uxth	r0, r0
 8029816:	fa0f fa80 	sxth.w	sl, r0
 802981a:	45aa      	cmp	sl, r5
 802981c:	dd5c      	ble.n	80298d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 802981e:	4591      	cmp	r9, r2
 8029820:	dd5a      	ble.n	80298d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8029822:	f9b8 1002 	ldrsh.w	r1, [r8, #2]
 8029826:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 802982a:	440b      	add	r3, r1
 802982c:	b29b      	uxth	r3, r3
 802982e:	b21d      	sxth	r5, r3
 8029830:	2d00      	cmp	r5, #0
 8029832:	dd51      	ble.n	80298d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8029834:	458e      	cmp	lr, r1
 8029836:	dd4f      	ble.n	80298d8 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0x12c>
 8029838:	45d1      	cmp	r9, sl
 802983a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 802983e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8029842:	bfb8      	it	lt
 8029844:	fa1f f089 	uxthlt.w	r0, r9
 8029848:	45ae      	cmp	lr, r5
 802984a:	f8ad 2000 	strh.w	r2, [sp]
 802984e:	bfb8      	it	lt
 8029850:	fa1f f38e 	uxthlt.w	r3, lr
 8029854:	1a80      	subs	r0, r0, r2
 8029856:	f8ad 1002 	strh.w	r1, [sp, #2]
 802985a:	1a5b      	subs	r3, r3, r1
 802985c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8029860:	f8ad 3006 	strh.w	r3, [sp, #6]
 8029864:	466d      	mov	r5, sp
 8029866:	e895 0003 	ldmia.w	r5, {r0, r1}
 802986a:	e887 0003 	stmia.w	r7, {r0, r1}
 802986e:	f8dc 3000 	ldr.w	r3, [ip]
 8029872:	4660      	mov	r0, ip
 8029874:	4639      	mov	r1, r7
 8029876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029878:	4798      	blx	r3
 802987a:	6861      	ldr	r1, [r4, #4]
 802987c:	4628      	mov	r0, r5
 802987e:	3104      	adds	r1, #4
 8029880:	f7f1 f9cc 	bl	801ac1c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8029884:	4638      	mov	r0, r7
 8029886:	f7f1 f9a1 	bl	801abcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802988a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802988e:	f8bd 2000 	ldrh.w	r2, [sp]
 8029892:	4630      	mov	r0, r6
 8029894:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
 8029898:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 802989c:	f7ef f81f 	bl	80188de <_ZN8touchgfx7Outline5resetEv>
 80298a0:	f9bd 3000 	ldrsh.w	r3, [sp]
 80298a4:	f9b4 201e 	ldrsh.w	r2, [r4, #30]
 80298a8:	4620      	mov	r0, r4
 80298aa:	015b      	lsls	r3, r3, #5
 80298ac:	60a3      	str	r3, [r4, #8]
 80298ae:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80298b2:	015b      	lsls	r3, r3, #5
 80298b4:	60e3      	str	r3, [r4, #12]
 80298b6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80298ba:	015b      	lsls	r3, r3, #5
 80298bc:	6123      	str	r3, [r4, #16]
 80298be:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80298c2:	015b      	lsls	r3, r3, #5
 80298c4:	6163      	str	r3, [r4, #20]
 80298c6:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 80298ca:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
 80298ce:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
 80298d2:	b002      	add	sp, #8
 80298d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80298d8:	2300      	movs	r3, #0
 80298da:	9301      	str	r3, [sp, #4]
 80298dc:	e7c2      	b.n	8029864 <_ZN8touchgfx6CanvasC1EPKNS_12CanvasWidgetERKNS_4RectE+0xb8>
 80298de:	bf00      	nop
 80298e0:	0803050c 	.word	0x0803050c

080298e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80298e4:	4b07      	ldr	r3, [pc, #28]	; (8029904 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x20>)
 80298e6:	b510      	push	{r4, lr}
 80298e8:	781b      	ldrb	r3, [r3, #0]
 80298ea:	2b01      	cmp	r3, #1
 80298ec:	d108      	bne.n	8029900 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>
 80298ee:	6843      	ldr	r3, [r0, #4]
 80298f0:	6814      	ldr	r4, [r2, #0]
 80298f2:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 80298f6:	680b      	ldr	r3, [r1, #0]
 80298f8:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80298fc:	6013      	str	r3, [r2, #0]
 80298fe:	600c      	str	r4, [r1, #0]
 8029900:	bd10      	pop	{r4, pc}
 8029902:	bf00      	nop
 8029904:	2003c2b4 	.word	0x2003c2b4

08029908 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8029908:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802990a:	ab02      	add	r3, sp, #8
 802990c:	4604      	mov	r4, r0
 802990e:	9101      	str	r1, [sp, #4]
 8029910:	a901      	add	r1, sp, #4
 8029912:	f843 2d08 	str.w	r2, [r3, #-8]!
 8029916:	461a      	mov	r2, r3
 8029918:	f7ff ffe4 	bl	80298e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 802991c:	68a3      	ldr	r3, [r4, #8]
 802991e:	9901      	ldr	r1, [sp, #4]
 8029920:	9a00      	ldr	r2, [sp, #0]
 8029922:	1ac9      	subs	r1, r1, r3
 8029924:	68e3      	ldr	r3, [r4, #12]
 8029926:	1ad2      	subs	r2, r2, r3
 8029928:	9101      	str	r1, [sp, #4]
 802992a:	2a00      	cmp	r2, #0
 802992c:	9200      	str	r2, [sp, #0]
 802992e:	db1c      	blt.n	802996a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8029930:	6963      	ldr	r3, [r4, #20]
 8029932:	429a      	cmp	r2, r3
 8029934:	bfac      	ite	ge
 8029936:	2002      	movge	r0, #2
 8029938:	2000      	movlt	r0, #0
 802993a:	2900      	cmp	r1, #0
 802993c:	db17      	blt.n	802996e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 802993e:	6923      	ldr	r3, [r4, #16]
 8029940:	4299      	cmp	r1, r3
 8029942:	bfac      	ite	ge
 8029944:	2308      	movge	r3, #8
 8029946:	2300      	movlt	r3, #0
 8029948:	4303      	orrs	r3, r0
 802994a:	f894 0064 	ldrb.w	r0, [r4, #100]	; 0x64
 802994e:	b2dd      	uxtb	r5, r3
 8029950:	b978      	cbnz	r0, 8029972 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8029952:	f104 0020 	add.w	r0, r4, #32
 8029956:	f7ff fe51 	bl	80295fc <_ZN8touchgfx10Rasterizer6lineToEii>
 802995a:	9b01      	ldr	r3, [sp, #4]
 802995c:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8029960:	65e3      	str	r3, [r4, #92]	; 0x5c
 8029962:	9b00      	ldr	r3, [sp, #0]
 8029964:	6623      	str	r3, [r4, #96]	; 0x60
 8029966:	b002      	add	sp, #8
 8029968:	bd70      	pop	{r4, r5, r6, pc}
 802996a:	2001      	movs	r0, #1
 802996c:	e7e5      	b.n	802993a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 802996e:	2304      	movs	r3, #4
 8029970:	e7ea      	b.n	8029948 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8029972:	b113      	cbz	r3, 802997a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8029974:	ea10 0305 	ands.w	r3, r0, r5
 8029978:	d11d      	bne.n	80299b6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xae>
 802997a:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 802997e:	f104 0620 	add.w	r6, r4, #32
 8029982:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
 8029986:	b193      	cbz	r3, 80299ae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa6>
 8029988:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 802998c:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8029990:	4298      	cmp	r0, r3
 8029992:	d802      	bhi.n	802999a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8029994:	4630      	mov	r0, r6
 8029996:	f7ef fc91 	bl	80192bc <_ZN8touchgfx7Outline6moveToEii>
 802999a:	2300      	movs	r3, #0
 802999c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80299a0:	2301      	movs	r3, #1
 80299a2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80299a6:	4630      	mov	r0, r6
 80299a8:	e9dd 2100 	ldrd	r2, r1, [sp]
 80299ac:	e7d3      	b.n	8029956 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 80299ae:	4630      	mov	r0, r6
 80299b0:	f7ff fe24 	bl	80295fc <_ZN8touchgfx10Rasterizer6lineToEii>
 80299b4:	e7f7      	b.n	80299a6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9e>
 80299b6:	461d      	mov	r5, r3
 80299b8:	e7cf      	b.n	802995a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>

080299ba <_ZN8touchgfx6Canvas5closeEv>:
 80299ba:	b538      	push	{r3, r4, r5, lr}
 80299bc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 80299c0:	4604      	mov	r4, r0
 80299c2:	b993      	cbnz	r3, 80299ea <_ZN8touchgfx6Canvas5closeEv+0x30>
 80299c4:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 80299c8:	f890 2065 	ldrb.w	r2, [r0, #101]	; 0x65
 80299cc:	4213      	tst	r3, r2
 80299ce:	d10c      	bne.n	80299ea <_ZN8touchgfx6Canvas5closeEv+0x30>
 80299d0:	f100 0520 	add.w	r5, r0, #32
 80299d4:	b123      	cbz	r3, 80299e0 <_ZN8touchgfx6Canvas5closeEv+0x26>
 80299d6:	e9d0 1217 	ldrd	r1, r2, [r0, #92]	; 0x5c
 80299da:	4628      	mov	r0, r5
 80299dc:	f7ff fe0e 	bl	80295fc <_ZN8touchgfx10Rasterizer6lineToEii>
 80299e0:	4628      	mov	r0, r5
 80299e2:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 80299e6:	f7ff fe09 	bl	80295fc <_ZN8touchgfx10Rasterizer6lineToEii>
 80299ea:	2300      	movs	r3, #0
 80299ec:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 80299f0:	e9d4 0309 	ldrd	r0, r3, [r4, #36]	; 0x24
 80299f4:	4298      	cmp	r0, r3
 80299f6:	bf34      	ite	cc
 80299f8:	2000      	movcc	r0, #0
 80299fa:	2001      	movcs	r0, #1
 80299fc:	bd38      	pop	{r3, r4, r5, pc}
	...

08029a00 <_ZN8touchgfx6Canvas6renderEh>:
 8029a00:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8029a04:	4604      	mov	r4, r0
 8029a06:	6840      	ldr	r0, [r0, #4]
 8029a08:	460d      	mov	r5, r1
 8029a0a:	6803      	ldr	r3, [r0, #0]
 8029a0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8029a0e:	4798      	blx	r3
 8029a10:	fb10 f105 	smulbb	r1, r0, r5
 8029a14:	b289      	uxth	r1, r1
 8029a16:	1c4d      	adds	r5, r1, #1
 8029a18:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 8029a1c:	122d      	asrs	r5, r5, #8
 8029a1e:	f000 8097 	beq.w	8029b50 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8029a22:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8029a26:	2b00      	cmp	r3, #0
 8029a28:	f000 8092 	beq.w	8029b50 <_ZN8touchgfx6Canvas6renderEh+0x150>
 8029a2c:	4620      	mov	r0, r4
 8029a2e:	f7ff ffc4 	bl	80299ba <_ZN8touchgfx6Canvas5closeEv>
 8029a32:	4607      	mov	r7, r0
 8029a34:	2800      	cmp	r0, #0
 8029a36:	d043      	beq.n	8029ac0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8029a38:	6863      	ldr	r3, [r4, #4]
 8029a3a:	4e46      	ldr	r6, [pc, #280]	; (8029b54 <_ZN8touchgfx6Canvas6renderEh+0x154>)
 8029a3c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8029a3e:	6837      	ldr	r7, [r6, #0]
 8029a40:	6803      	ldr	r3, [r0, #0]
 8029a42:	689b      	ldr	r3, [r3, #8]
 8029a44:	4798      	blx	r3
 8029a46:	4601      	mov	r1, r0
 8029a48:	4638      	mov	r0, r7
 8029a4a:	f7ed fc4d 	bl	80172e8 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 8029a4e:	4607      	mov	r7, r0
 8029a50:	f7e5 f870 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 8029a54:	6803      	ldr	r3, [r0, #0]
 8029a56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8029a58:	4798      	blx	r3
 8029a5a:	4680      	mov	r8, r0
 8029a5c:	f7e5 f86a 	bl	800eb34 <_ZN8touchgfx3HAL3lcdEv>
 8029a60:	6803      	ldr	r3, [r0, #0]
 8029a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029a64:	4798      	blx	r3
 8029a66:	280b      	cmp	r0, #11
 8029a68:	d857      	bhi.n	8029b1a <_ZN8touchgfx6Canvas6renderEh+0x11a>
 8029a6a:	e8df f000 	tbb	[pc, r0]
 8029a6e:	584d      	.short	0x584d
 8029a70:	2d560668 	.word	0x2d560668
 8029a74:	6161613d 	.word	0x6161613d
 8029a78:	6161      	.short	0x6161
 8029a7a:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8029a7e:	2208      	movs	r2, #8
 8029a80:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029a84:	fb91 f2f2 	sdiv	r2, r1, r2
 8029a88:	fb08 2303 	mla	r3, r8, r3, r2
 8029a8c:	441f      	add	r7, r3
 8029a8e:	424b      	negs	r3, r1
 8029a90:	f001 0107 	and.w	r1, r1, #7
 8029a94:	f003 0307 	and.w	r3, r3, #7
 8029a98:	bf58      	it	pl
 8029a9a:	4259      	negpl	r1, r3
 8029a9c:	b2c9      	uxtb	r1, r1
 8029a9e:	6860      	ldr	r0, [r4, #4]
 8029aa0:	b2ed      	uxtb	r5, r5
 8029aa2:	fa0f f388 	sxth.w	r3, r8
 8029aa6:	463a      	mov	r2, r7
 8029aa8:	e9cd 1500 	strd	r1, r5, [sp]
 8029aac:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8029aae:	f104 0020 	add.w	r0, r4, #32
 8029ab2:	f7ff fdaf 	bl	8029614 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8029ab6:	4607      	mov	r7, r0
 8029ab8:	6830      	ldr	r0, [r6, #0]
 8029aba:	6803      	ldr	r3, [r0, #0]
 8029abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8029abe:	4798      	blx	r3
 8029ac0:	4638      	mov	r0, r7
 8029ac2:	b002      	add	sp, #8
 8029ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8029ac8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8029acc:	2204      	movs	r2, #4
 8029ace:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029ad2:	fb91 f2f2 	sdiv	r2, r1, r2
 8029ad6:	fb08 2303 	mla	r3, r8, r3, r2
 8029ada:	441f      	add	r7, r3
 8029adc:	424b      	negs	r3, r1
 8029ade:	f001 0103 	and.w	r1, r1, #3
 8029ae2:	f003 0303 	and.w	r3, r3, #3
 8029ae6:	e7d7      	b.n	8029a98 <_ZN8touchgfx6Canvas6renderEh+0x98>
 8029ae8:	f9b4 1018 	ldrsh.w	r1, [r4, #24]
 8029aec:	2202      	movs	r2, #2
 8029aee:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029af2:	2900      	cmp	r1, #0
 8029af4:	fb91 f2f2 	sdiv	r2, r1, r2
 8029af8:	f001 0101 	and.w	r1, r1, #1
 8029afc:	fb08 2303 	mla	r3, r8, r3, r2
 8029b00:	bfb8      	it	lt
 8029b02:	4249      	neglt	r1, r1
 8029b04:	441f      	add	r7, r3
 8029b06:	e7c9      	b.n	8029a9c <_ZN8touchgfx6Canvas6renderEh+0x9c>
 8029b08:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029b0c:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8029b10:	fb08 f303 	mul.w	r3, r8, r3
 8029b14:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8029b18:	441f      	add	r7, r3
 8029b1a:	2100      	movs	r1, #0
 8029b1c:	e7bf      	b.n	8029a9e <_ZN8touchgfx6Canvas6renderEh+0x9e>
 8029b1e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029b22:	2103      	movs	r1, #3
 8029b24:	fb08 f203 	mul.w	r2, r8, r3
 8029b28:	8b23      	ldrh	r3, [r4, #24]
 8029b2a:	fb13 2301 	smlabb	r3, r3, r1, r2
 8029b2e:	e7f3      	b.n	8029b18 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8029b30:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029b34:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8029b38:	fb08 2303 	mla	r3, r8, r3, r2
 8029b3c:	e7ec      	b.n	8029b18 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8029b3e:	f9b4 301a 	ldrsh.w	r3, [r4, #26]
 8029b42:	f9b4 2018 	ldrsh.w	r2, [r4, #24]
 8029b46:	fb08 f303 	mul.w	r3, r8, r3
 8029b4a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8029b4e:	e7e3      	b.n	8029b18 <_ZN8touchgfx6Canvas6renderEh+0x118>
 8029b50:	2701      	movs	r7, #1
 8029b52:	e7b5      	b.n	8029ac0 <_ZN8touchgfx6Canvas6renderEh+0xc0>
 8029b54:	2003c2bc 	.word	0x2003c2bc

08029b58 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 8029b58:	b513      	push	{r0, r1, r4, lr}
 8029b5a:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
 8029b5e:	4604      	mov	r4, r0
 8029b60:	e9cd 2100 	strd	r2, r1, [sp]
 8029b64:	b1a3      	cbz	r3, 8029b90 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8029b66:	466a      	mov	r2, sp
 8029b68:	a901      	add	r1, sp, #4
 8029b6a:	4620      	mov	r0, r4
 8029b6c:	f7ff feba 	bl	80298e4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8029b70:	68a3      	ldr	r3, [r4, #8]
 8029b72:	9901      	ldr	r1, [sp, #4]
 8029b74:	9a00      	ldr	r2, [sp, #0]
 8029b76:	1ac9      	subs	r1, r1, r3
 8029b78:	68e3      	ldr	r3, [r4, #12]
 8029b7a:	1ad2      	subs	r2, r2, r3
 8029b7c:	9101      	str	r1, [sp, #4]
 8029b7e:	2a00      	cmp	r2, #0
 8029b80:	9200      	str	r2, [sp, #0]
 8029b82:	da0b      	bge.n	8029b9c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8029b84:	2301      	movs	r3, #1
 8029b86:	2900      	cmp	r1, #0
 8029b88:	da0e      	bge.n	8029ba8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8029b8a:	f043 0304 	orr.w	r3, r3, #4
 8029b8e:	e013      	b.n	8029bb8 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8029b90:	f7ff ff13 	bl	80299ba <_ZN8touchgfx6Canvas5closeEv>
 8029b94:	2800      	cmp	r0, #0
 8029b96:	d1e6      	bne.n	8029b66 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8029b98:	b002      	add	sp, #8
 8029b9a:	bd10      	pop	{r4, pc}
 8029b9c:	6963      	ldr	r3, [r4, #20]
 8029b9e:	429a      	cmp	r2, r3
 8029ba0:	bfac      	ite	ge
 8029ba2:	2302      	movge	r3, #2
 8029ba4:	2300      	movlt	r3, #0
 8029ba6:	e7ee      	b.n	8029b86 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8029ba8:	6920      	ldr	r0, [r4, #16]
 8029baa:	4281      	cmp	r1, r0
 8029bac:	bfac      	ite	ge
 8029bae:	2008      	movge	r0, #8
 8029bb0:	2000      	movlt	r0, #0
 8029bb2:	4318      	orrs	r0, r3
 8029bb4:	b2c3      	uxtb	r3, r0
 8029bb6:	b158      	cbz	r0, 8029bd0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8029bb8:	2201      	movs	r2, #1
 8029bba:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
 8029bbe:	9901      	ldr	r1, [sp, #4]
 8029bc0:	9a00      	ldr	r2, [sp, #0]
 8029bc2:	66a1      	str	r1, [r4, #104]	; 0x68
 8029bc4:	66e2      	str	r2, [r4, #108]	; 0x6c
 8029bc6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8029bca:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
 8029bce:	e7e3      	b.n	8029b98 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8029bd0:	f884 0065 	strb.w	r0, [r4, #101]	; 0x65
 8029bd4:	e9d4 3009 	ldrd	r3, r0, [r4, #36]	; 0x24
 8029bd8:	4298      	cmp	r0, r3
 8029bda:	d803      	bhi.n	8029be4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8029bdc:	f104 0020 	add.w	r0, r4, #32
 8029be0:	f7ef fb6c 	bl	80192bc <_ZN8touchgfx7Outline6moveToEii>
 8029be4:	2300      	movs	r3, #0
 8029be6:	2201      	movs	r2, #1
 8029be8:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
 8029bec:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 8029bf0:	e7e5      	b.n	8029bbe <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08029bf2 <__aeabi_atexit>:
 8029bf2:	460b      	mov	r3, r1
 8029bf4:	4601      	mov	r1, r0
 8029bf6:	4618      	mov	r0, r3
 8029bf8:	f000 b8ce 	b.w	8029d98 <__cxa_atexit>

08029bfc <_ZdlPvj>:
 8029bfc:	f000 b812 	b.w	8029c24 <_ZdlPv>

08029c00 <__cxa_guard_acquire>:
 8029c00:	6803      	ldr	r3, [r0, #0]
 8029c02:	07db      	lsls	r3, r3, #31
 8029c04:	d406      	bmi.n	8029c14 <__cxa_guard_acquire+0x14>
 8029c06:	7843      	ldrb	r3, [r0, #1]
 8029c08:	b103      	cbz	r3, 8029c0c <__cxa_guard_acquire+0xc>
 8029c0a:	deff      	udf	#255	; 0xff
 8029c0c:	2301      	movs	r3, #1
 8029c0e:	7043      	strb	r3, [r0, #1]
 8029c10:	4618      	mov	r0, r3
 8029c12:	4770      	bx	lr
 8029c14:	2000      	movs	r0, #0
 8029c16:	4770      	bx	lr

08029c18 <__cxa_guard_release>:
 8029c18:	2301      	movs	r3, #1
 8029c1a:	6003      	str	r3, [r0, #0]
 8029c1c:	4770      	bx	lr

08029c1e <__cxa_pure_virtual>:
 8029c1e:	b508      	push	{r3, lr}
 8029c20:	f000 f80e 	bl	8029c40 <_ZSt9terminatev>

08029c24 <_ZdlPv>:
 8029c24:	f000 b90a 	b.w	8029e3c <free>

08029c28 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8029c28:	b508      	push	{r3, lr}
 8029c2a:	4780      	blx	r0
 8029c2c:	f000 f888 	bl	8029d40 <abort>

08029c30 <_ZSt13get_terminatev>:
 8029c30:	4b02      	ldr	r3, [pc, #8]	; (8029c3c <_ZSt13get_terminatev+0xc>)
 8029c32:	6818      	ldr	r0, [r3, #0]
 8029c34:	f3bf 8f5b 	dmb	ish
 8029c38:	4770      	bx	lr
 8029c3a:	bf00      	nop
 8029c3c:	200000b8 	.word	0x200000b8

08029c40 <_ZSt9terminatev>:
 8029c40:	b508      	push	{r3, lr}
 8029c42:	f7ff fff5 	bl	8029c30 <_ZSt13get_terminatev>
 8029c46:	f7ff ffef 	bl	8029c28 <_ZN10__cxxabiv111__terminateEPFvvE>
 8029c4a:	0000      	movs	r0, r0
 8029c4c:	0000      	movs	r0, r0
	...

08029c50 <ceil>:
 8029c50:	ee10 1a90 	vmov	r1, s1
 8029c54:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8029c58:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8029c5c:	2b13      	cmp	r3, #19
 8029c5e:	b530      	push	{r4, r5, lr}
 8029c60:	ee10 0a10 	vmov	r0, s0
 8029c64:	ee10 5a10 	vmov	r5, s0
 8029c68:	dc2f      	bgt.n	8029cca <ceil+0x7a>
 8029c6a:	2b00      	cmp	r3, #0
 8029c6c:	da13      	bge.n	8029c96 <ceil+0x46>
 8029c6e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8029d30 <ceil+0xe0>
 8029c72:	ee30 0b07 	vadd.f64	d0, d0, d7
 8029c76:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8029c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029c7e:	dd05      	ble.n	8029c8c <ceil+0x3c>
 8029c80:	2900      	cmp	r1, #0
 8029c82:	db4c      	blt.n	8029d1e <ceil+0xce>
 8029c84:	4301      	orrs	r1, r0
 8029c86:	d04e      	beq.n	8029d26 <ceil+0xd6>
 8029c88:	492b      	ldr	r1, [pc, #172]	; (8029d38 <ceil+0xe8>)
 8029c8a:	2000      	movs	r0, #0
 8029c8c:	460b      	mov	r3, r1
 8029c8e:	4602      	mov	r2, r0
 8029c90:	ec43 2b10 	vmov	d0, r2, r3
 8029c94:	e020      	b.n	8029cd8 <ceil+0x88>
 8029c96:	4a29      	ldr	r2, [pc, #164]	; (8029d3c <ceil+0xec>)
 8029c98:	411a      	asrs	r2, r3
 8029c9a:	ea01 0402 	and.w	r4, r1, r2
 8029c9e:	4304      	orrs	r4, r0
 8029ca0:	d01a      	beq.n	8029cd8 <ceil+0x88>
 8029ca2:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8029d30 <ceil+0xe0>
 8029ca6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8029caa:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8029cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029cb2:	ddeb      	ble.n	8029c8c <ceil+0x3c>
 8029cb4:	2900      	cmp	r1, #0
 8029cb6:	bfc2      	ittt	gt
 8029cb8:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8029cbc:	fa40 f303 	asrgt.w	r3, r0, r3
 8029cc0:	18c9      	addgt	r1, r1, r3
 8029cc2:	ea21 0102 	bic.w	r1, r1, r2
 8029cc6:	2000      	movs	r0, #0
 8029cc8:	e7e0      	b.n	8029c8c <ceil+0x3c>
 8029cca:	2b33      	cmp	r3, #51	; 0x33
 8029ccc:	dd05      	ble.n	8029cda <ceil+0x8a>
 8029cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8029cd2:	d101      	bne.n	8029cd8 <ceil+0x88>
 8029cd4:	ee30 0b00 	vadd.f64	d0, d0, d0
 8029cd8:	bd30      	pop	{r4, r5, pc}
 8029cda:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8029cde:	f04f 32ff 	mov.w	r2, #4294967295
 8029ce2:	40e2      	lsrs	r2, r4
 8029ce4:	4202      	tst	r2, r0
 8029ce6:	d0f7      	beq.n	8029cd8 <ceil+0x88>
 8029ce8:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8029d30 <ceil+0xe0>
 8029cec:	ee30 0b07 	vadd.f64	d0, d0, d7
 8029cf0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8029cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8029cf8:	ddc8      	ble.n	8029c8c <ceil+0x3c>
 8029cfa:	2900      	cmp	r1, #0
 8029cfc:	dd02      	ble.n	8029d04 <ceil+0xb4>
 8029cfe:	2b14      	cmp	r3, #20
 8029d00:	d103      	bne.n	8029d0a <ceil+0xba>
 8029d02:	3101      	adds	r1, #1
 8029d04:	ea20 0002 	bic.w	r0, r0, r2
 8029d08:	e7c0      	b.n	8029c8c <ceil+0x3c>
 8029d0a:	2401      	movs	r4, #1
 8029d0c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8029d10:	fa04 f303 	lsl.w	r3, r4, r3
 8029d14:	4418      	add	r0, r3
 8029d16:	42a8      	cmp	r0, r5
 8029d18:	bf38      	it	cc
 8029d1a:	1909      	addcc	r1, r1, r4
 8029d1c:	e7f2      	b.n	8029d04 <ceil+0xb4>
 8029d1e:	2000      	movs	r0, #0
 8029d20:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8029d24:	e7b2      	b.n	8029c8c <ceil+0x3c>
 8029d26:	4608      	mov	r0, r1
 8029d28:	e7b0      	b.n	8029c8c <ceil+0x3c>
 8029d2a:	bf00      	nop
 8029d2c:	f3af 8000 	nop.w
 8029d30:	8800759c 	.word	0x8800759c
 8029d34:	7e37e43c 	.word	0x7e37e43c
 8029d38:	3ff00000 	.word	0x3ff00000
 8029d3c:	000fffff 	.word	0x000fffff

08029d40 <abort>:
 8029d40:	b508      	push	{r3, lr}
 8029d42:	2006      	movs	r0, #6
 8029d44:	f000 ff10 	bl	802ab68 <raise>
 8029d48:	2001      	movs	r0, #1
 8029d4a:	f7d8 facf 	bl	80022ec <_exit>
	...

08029d50 <__assert_func>:
 8029d50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8029d52:	4614      	mov	r4, r2
 8029d54:	461a      	mov	r2, r3
 8029d56:	4b09      	ldr	r3, [pc, #36]	; (8029d7c <__assert_func+0x2c>)
 8029d58:	681b      	ldr	r3, [r3, #0]
 8029d5a:	4605      	mov	r5, r0
 8029d5c:	68d8      	ldr	r0, [r3, #12]
 8029d5e:	b14c      	cbz	r4, 8029d74 <__assert_func+0x24>
 8029d60:	4b07      	ldr	r3, [pc, #28]	; (8029d80 <__assert_func+0x30>)
 8029d62:	9100      	str	r1, [sp, #0]
 8029d64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8029d68:	4906      	ldr	r1, [pc, #24]	; (8029d84 <__assert_func+0x34>)
 8029d6a:	462b      	mov	r3, r5
 8029d6c:	f000 f828 	bl	8029dc0 <fiprintf>
 8029d70:	f7ff ffe6 	bl	8029d40 <abort>
 8029d74:	4b04      	ldr	r3, [pc, #16]	; (8029d88 <__assert_func+0x38>)
 8029d76:	461c      	mov	r4, r3
 8029d78:	e7f3      	b.n	8029d62 <__assert_func+0x12>
 8029d7a:	bf00      	nop
 8029d7c:	200000bc 	.word	0x200000bc
 8029d80:	08030cfc 	.word	0x08030cfc
 8029d84:	08030d09 	.word	0x08030d09
 8029d88:	08030d37 	.word	0x08030d37

08029d8c <atexit>:
 8029d8c:	2300      	movs	r3, #0
 8029d8e:	4601      	mov	r1, r0
 8029d90:	461a      	mov	r2, r3
 8029d92:	4618      	mov	r0, r3
 8029d94:	f001 bf84 	b.w	802bca0 <__register_exitproc>

08029d98 <__cxa_atexit>:
 8029d98:	b510      	push	{r4, lr}
 8029d9a:	4c05      	ldr	r4, [pc, #20]	; (8029db0 <__cxa_atexit+0x18>)
 8029d9c:	4613      	mov	r3, r2
 8029d9e:	b12c      	cbz	r4, 8029dac <__cxa_atexit+0x14>
 8029da0:	460a      	mov	r2, r1
 8029da2:	4601      	mov	r1, r0
 8029da4:	2002      	movs	r0, #2
 8029da6:	f001 ff7b 	bl	802bca0 <__register_exitproc>
 8029daa:	bd10      	pop	{r4, pc}
 8029dac:	4620      	mov	r0, r4
 8029dae:	e7fc      	b.n	8029daa <__cxa_atexit+0x12>
 8029db0:	0802bca1 	.word	0x0802bca1

08029db4 <__errno>:
 8029db4:	4b01      	ldr	r3, [pc, #4]	; (8029dbc <__errno+0x8>)
 8029db6:	6818      	ldr	r0, [r3, #0]
 8029db8:	4770      	bx	lr
 8029dba:	bf00      	nop
 8029dbc:	200000bc 	.word	0x200000bc

08029dc0 <fiprintf>:
 8029dc0:	b40e      	push	{r1, r2, r3}
 8029dc2:	b503      	push	{r0, r1, lr}
 8029dc4:	4601      	mov	r1, r0
 8029dc6:	ab03      	add	r3, sp, #12
 8029dc8:	4805      	ldr	r0, [pc, #20]	; (8029de0 <fiprintf+0x20>)
 8029dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8029dce:	6800      	ldr	r0, [r0, #0]
 8029dd0:	9301      	str	r3, [sp, #4]
 8029dd2:	f000 fbcd 	bl	802a570 <_vfiprintf_r>
 8029dd6:	b002      	add	sp, #8
 8029dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8029ddc:	b003      	add	sp, #12
 8029dde:	4770      	bx	lr
 8029de0:	200000bc 	.word	0x200000bc

08029de4 <__libc_init_array>:
 8029de4:	b570      	push	{r4, r5, r6, lr}
 8029de6:	4d0d      	ldr	r5, [pc, #52]	; (8029e1c <__libc_init_array+0x38>)
 8029de8:	4c0d      	ldr	r4, [pc, #52]	; (8029e20 <__libc_init_array+0x3c>)
 8029dea:	1b64      	subs	r4, r4, r5
 8029dec:	10a4      	asrs	r4, r4, #2
 8029dee:	2600      	movs	r6, #0
 8029df0:	42a6      	cmp	r6, r4
 8029df2:	d109      	bne.n	8029e08 <__libc_init_array+0x24>
 8029df4:	4d0b      	ldr	r5, [pc, #44]	; (8029e24 <__libc_init_array+0x40>)
 8029df6:	4c0c      	ldr	r4, [pc, #48]	; (8029e28 <__libc_init_array+0x44>)
 8029df8:	f003 f8dc 	bl	802cfb4 <_init>
 8029dfc:	1b64      	subs	r4, r4, r5
 8029dfe:	10a4      	asrs	r4, r4, #2
 8029e00:	2600      	movs	r6, #0
 8029e02:	42a6      	cmp	r6, r4
 8029e04:	d105      	bne.n	8029e12 <__libc_init_array+0x2e>
 8029e06:	bd70      	pop	{r4, r5, r6, pc}
 8029e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8029e0c:	4798      	blx	r3
 8029e0e:	3601      	adds	r6, #1
 8029e10:	e7ee      	b.n	8029df0 <__libc_init_array+0xc>
 8029e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8029e16:	4798      	blx	r3
 8029e18:	3601      	adds	r6, #1
 8029e1a:	e7f2      	b.n	8029e02 <__libc_init_array+0x1e>
 8029e1c:	08164bc0 	.word	0x08164bc0
 8029e20:	08164bc0 	.word	0x08164bc0
 8029e24:	08164bc0 	.word	0x08164bc0
 8029e28:	08164bd8 	.word	0x08164bd8

08029e2c <malloc>:
 8029e2c:	4b02      	ldr	r3, [pc, #8]	; (8029e38 <malloc+0xc>)
 8029e2e:	4601      	mov	r1, r0
 8029e30:	6818      	ldr	r0, [r3, #0]
 8029e32:	f000 baff 	b.w	802a434 <_malloc_r>
 8029e36:	bf00      	nop
 8029e38:	200000bc 	.word	0x200000bc

08029e3c <free>:
 8029e3c:	4b02      	ldr	r3, [pc, #8]	; (8029e48 <free+0xc>)
 8029e3e:	4601      	mov	r1, r0
 8029e40:	6818      	ldr	r0, [r3, #0]
 8029e42:	f000 ba8b 	b.w	802a35c <_free_r>
 8029e46:	bf00      	nop
 8029e48:	200000bc 	.word	0x200000bc

08029e4c <memcpy>:
 8029e4c:	440a      	add	r2, r1
 8029e4e:	4291      	cmp	r1, r2
 8029e50:	f100 33ff 	add.w	r3, r0, #4294967295
 8029e54:	d100      	bne.n	8029e58 <memcpy+0xc>
 8029e56:	4770      	bx	lr
 8029e58:	b510      	push	{r4, lr}
 8029e5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8029e5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8029e62:	4291      	cmp	r1, r2
 8029e64:	d1f9      	bne.n	8029e5a <memcpy+0xe>
 8029e66:	bd10      	pop	{r4, pc}

08029e68 <memset>:
 8029e68:	4402      	add	r2, r0
 8029e6a:	4603      	mov	r3, r0
 8029e6c:	4293      	cmp	r3, r2
 8029e6e:	d100      	bne.n	8029e72 <memset+0xa>
 8029e70:	4770      	bx	lr
 8029e72:	f803 1b01 	strb.w	r1, [r3], #1
 8029e76:	e7f9      	b.n	8029e6c <memset+0x4>

08029e78 <validate_structure>:
 8029e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8029e7a:	6801      	ldr	r1, [r0, #0]
 8029e7c:	293b      	cmp	r1, #59	; 0x3b
 8029e7e:	4604      	mov	r4, r0
 8029e80:	d911      	bls.n	8029ea6 <validate_structure+0x2e>
 8029e82:	223c      	movs	r2, #60	; 0x3c
 8029e84:	4668      	mov	r0, sp
 8029e86:	f001 ff7d 	bl	802bd84 <div>
 8029e8a:	9a01      	ldr	r2, [sp, #4]
 8029e8c:	6863      	ldr	r3, [r4, #4]
 8029e8e:	9900      	ldr	r1, [sp, #0]
 8029e90:	2a00      	cmp	r2, #0
 8029e92:	440b      	add	r3, r1
 8029e94:	6063      	str	r3, [r4, #4]
 8029e96:	bfbb      	ittet	lt
 8029e98:	323c      	addlt	r2, #60	; 0x3c
 8029e9a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8029e9e:	6022      	strge	r2, [r4, #0]
 8029ea0:	6022      	strlt	r2, [r4, #0]
 8029ea2:	bfb8      	it	lt
 8029ea4:	6063      	strlt	r3, [r4, #4]
 8029ea6:	6861      	ldr	r1, [r4, #4]
 8029ea8:	293b      	cmp	r1, #59	; 0x3b
 8029eaa:	d911      	bls.n	8029ed0 <validate_structure+0x58>
 8029eac:	223c      	movs	r2, #60	; 0x3c
 8029eae:	4668      	mov	r0, sp
 8029eb0:	f001 ff68 	bl	802bd84 <div>
 8029eb4:	9a01      	ldr	r2, [sp, #4]
 8029eb6:	68a3      	ldr	r3, [r4, #8]
 8029eb8:	9900      	ldr	r1, [sp, #0]
 8029eba:	2a00      	cmp	r2, #0
 8029ebc:	440b      	add	r3, r1
 8029ebe:	60a3      	str	r3, [r4, #8]
 8029ec0:	bfbb      	ittet	lt
 8029ec2:	323c      	addlt	r2, #60	; 0x3c
 8029ec4:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8029ec8:	6062      	strge	r2, [r4, #4]
 8029eca:	6062      	strlt	r2, [r4, #4]
 8029ecc:	bfb8      	it	lt
 8029ece:	60a3      	strlt	r3, [r4, #8]
 8029ed0:	68a1      	ldr	r1, [r4, #8]
 8029ed2:	2917      	cmp	r1, #23
 8029ed4:	d911      	bls.n	8029efa <validate_structure+0x82>
 8029ed6:	2218      	movs	r2, #24
 8029ed8:	4668      	mov	r0, sp
 8029eda:	f001 ff53 	bl	802bd84 <div>
 8029ede:	9a01      	ldr	r2, [sp, #4]
 8029ee0:	68e3      	ldr	r3, [r4, #12]
 8029ee2:	9900      	ldr	r1, [sp, #0]
 8029ee4:	2a00      	cmp	r2, #0
 8029ee6:	440b      	add	r3, r1
 8029ee8:	60e3      	str	r3, [r4, #12]
 8029eea:	bfbb      	ittet	lt
 8029eec:	3218      	addlt	r2, #24
 8029eee:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8029ef2:	60a2      	strge	r2, [r4, #8]
 8029ef4:	60a2      	strlt	r2, [r4, #8]
 8029ef6:	bfb8      	it	lt
 8029ef8:	60e3      	strlt	r3, [r4, #12]
 8029efa:	6921      	ldr	r1, [r4, #16]
 8029efc:	290b      	cmp	r1, #11
 8029efe:	d911      	bls.n	8029f24 <validate_structure+0xac>
 8029f00:	220c      	movs	r2, #12
 8029f02:	4668      	mov	r0, sp
 8029f04:	f001 ff3e 	bl	802bd84 <div>
 8029f08:	9a01      	ldr	r2, [sp, #4]
 8029f0a:	6963      	ldr	r3, [r4, #20]
 8029f0c:	9900      	ldr	r1, [sp, #0]
 8029f0e:	2a00      	cmp	r2, #0
 8029f10:	440b      	add	r3, r1
 8029f12:	6163      	str	r3, [r4, #20]
 8029f14:	bfbb      	ittet	lt
 8029f16:	320c      	addlt	r2, #12
 8029f18:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8029f1c:	6122      	strge	r2, [r4, #16]
 8029f1e:	6122      	strlt	r2, [r4, #16]
 8029f20:	bfb8      	it	lt
 8029f22:	6163      	strlt	r3, [r4, #20]
 8029f24:	6963      	ldr	r3, [r4, #20]
 8029f26:	0798      	lsls	r0, r3, #30
 8029f28:	d120      	bne.n	8029f6c <validate_structure+0xf4>
 8029f2a:	2164      	movs	r1, #100	; 0x64
 8029f2c:	fb93 f2f1 	sdiv	r2, r3, r1
 8029f30:	fb01 3212 	mls	r2, r1, r2, r3
 8029f34:	b9e2      	cbnz	r2, 8029f70 <validate_structure+0xf8>
 8029f36:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8029f3a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8029f3e:	fb93 f1f2 	sdiv	r1, r3, r2
 8029f42:	fb02 3311 	mls	r3, r2, r1, r3
 8029f46:	2b00      	cmp	r3, #0
 8029f48:	bf14      	ite	ne
 8029f4a:	231c      	movne	r3, #28
 8029f4c:	231d      	moveq	r3, #29
 8029f4e:	68e2      	ldr	r2, [r4, #12]
 8029f50:	2a00      	cmp	r2, #0
 8029f52:	dc0f      	bgt.n	8029f74 <validate_structure+0xfc>
 8029f54:	4f33      	ldr	r7, [pc, #204]	; (802a024 <validate_structure+0x1ac>)
 8029f56:	260b      	movs	r6, #11
 8029f58:	2064      	movs	r0, #100	; 0x64
 8029f5a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8029f5e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8029f62:	f1bc 0f00 	cmp.w	ip, #0
 8029f66:	dd31      	ble.n	8029fcc <validate_structure+0x154>
 8029f68:	b003      	add	sp, #12
 8029f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8029f6c:	231c      	movs	r3, #28
 8029f6e:	e7ee      	b.n	8029f4e <validate_structure+0xd6>
 8029f70:	231d      	movs	r3, #29
 8029f72:	e7ec      	b.n	8029f4e <validate_structure+0xd6>
 8029f74:	4e2b      	ldr	r6, [pc, #172]	; (802a024 <validate_structure+0x1ac>)
 8029f76:	2700      	movs	r7, #0
 8029f78:	2064      	movs	r0, #100	; 0x64
 8029f7a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8029f7e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8029f82:	2a01      	cmp	r2, #1
 8029f84:	bf14      	ite	ne
 8029f86:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 8029f8a:	469c      	moveq	ip, r3
 8029f8c:	4561      	cmp	r1, ip
 8029f8e:	ddeb      	ble.n	8029f68 <validate_structure+0xf0>
 8029f90:	3201      	adds	r2, #1
 8029f92:	eba1 010c 	sub.w	r1, r1, ip
 8029f96:	2a0c      	cmp	r2, #12
 8029f98:	60e1      	str	r1, [r4, #12]
 8029f9a:	6122      	str	r2, [r4, #16]
 8029f9c:	d1ef      	bne.n	8029f7e <validate_structure+0x106>
 8029f9e:	6963      	ldr	r3, [r4, #20]
 8029fa0:	1c5a      	adds	r2, r3, #1
 8029fa2:	0791      	lsls	r1, r2, #30
 8029fa4:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8029fa8:	d137      	bne.n	802a01a <validate_structure+0x1a2>
 8029faa:	fb92 f1f0 	sdiv	r1, r2, r0
 8029fae:	fb00 2211 	mls	r2, r0, r1, r2
 8029fb2:	2a00      	cmp	r2, #0
 8029fb4:	d133      	bne.n	802a01e <validate_structure+0x1a6>
 8029fb6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8029fba:	fb93 f2f5 	sdiv	r2, r3, r5
 8029fbe:	fb05 3312 	mls	r3, r5, r2, r3
 8029fc2:	2b00      	cmp	r3, #0
 8029fc4:	bf14      	ite	ne
 8029fc6:	231c      	movne	r3, #28
 8029fc8:	231d      	moveq	r3, #29
 8029fca:	e7d8      	b.n	8029f7e <validate_structure+0x106>
 8029fcc:	6921      	ldr	r1, [r4, #16]
 8029fce:	3901      	subs	r1, #1
 8029fd0:	6121      	str	r1, [r4, #16]
 8029fd2:	3101      	adds	r1, #1
 8029fd4:	d114      	bne.n	802a000 <validate_structure+0x188>
 8029fd6:	6963      	ldr	r3, [r4, #20]
 8029fd8:	1e5a      	subs	r2, r3, #1
 8029fda:	0791      	lsls	r1, r2, #30
 8029fdc:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8029fe0:	d117      	bne.n	802a012 <validate_structure+0x19a>
 8029fe2:	fb92 f1f0 	sdiv	r1, r2, r0
 8029fe6:	fb00 2211 	mls	r2, r0, r1, r2
 8029fea:	b9a2      	cbnz	r2, 802a016 <validate_structure+0x19e>
 8029fec:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8029ff0:	fb93 f2f5 	sdiv	r2, r3, r5
 8029ff4:	fb05 3312 	mls	r3, r5, r2, r3
 8029ff8:	2b00      	cmp	r3, #0
 8029ffa:	bf14      	ite	ne
 8029ffc:	231c      	movne	r3, #28
 8029ffe:	231d      	moveq	r3, #29
 802a000:	6922      	ldr	r2, [r4, #16]
 802a002:	2a01      	cmp	r2, #1
 802a004:	bf14      	ite	ne
 802a006:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 802a00a:	461a      	moveq	r2, r3
 802a00c:	4462      	add	r2, ip
 802a00e:	60e2      	str	r2, [r4, #12]
 802a010:	e7a5      	b.n	8029f5e <validate_structure+0xe6>
 802a012:	231c      	movs	r3, #28
 802a014:	e7f4      	b.n	802a000 <validate_structure+0x188>
 802a016:	231d      	movs	r3, #29
 802a018:	e7f2      	b.n	802a000 <validate_structure+0x188>
 802a01a:	231c      	movs	r3, #28
 802a01c:	e7af      	b.n	8029f7e <validate_structure+0x106>
 802a01e:	231d      	movs	r3, #29
 802a020:	e7ad      	b.n	8029f7e <validate_structure+0x106>
 802a022:	bf00      	nop
 802a024:	08030d3c 	.word	0x08030d3c

0802a028 <mktime>:
 802a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a02c:	b085      	sub	sp, #20
 802a02e:	4607      	mov	r7, r0
 802a030:	f002 f8b8 	bl	802c1a4 <__gettzinfo>
 802a034:	4681      	mov	r9, r0
 802a036:	4638      	mov	r0, r7
 802a038:	f7ff ff1e 	bl	8029e78 <validate_structure>
 802a03c:	e9d7 4000 	ldrd	r4, r0, [r7]
 802a040:	233c      	movs	r3, #60	; 0x3c
 802a042:	fb03 4400 	mla	r4, r3, r0, r4
 802a046:	68b8      	ldr	r0, [r7, #8]
 802a048:	4abc      	ldr	r2, [pc, #752]	; (802a33c <mktime+0x314>)
 802a04a:	697e      	ldr	r6, [r7, #20]
 802a04c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 802a050:	fb03 4400 	mla	r4, r3, r0, r4
 802a054:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 802a058:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802a05c:	3d01      	subs	r5, #1
 802a05e:	2b01      	cmp	r3, #1
 802a060:	4415      	add	r5, r2
 802a062:	dd11      	ble.n	802a088 <mktime+0x60>
 802a064:	07b1      	lsls	r1, r6, #30
 802a066:	d10f      	bne.n	802a088 <mktime+0x60>
 802a068:	2264      	movs	r2, #100	; 0x64
 802a06a:	fb96 f3f2 	sdiv	r3, r6, r2
 802a06e:	fb02 6313 	mls	r3, r2, r3, r6
 802a072:	b943      	cbnz	r3, 802a086 <mktime+0x5e>
 802a074:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 802a078:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802a07c:	fb93 f1f2 	sdiv	r1, r3, r2
 802a080:	fb02 3311 	mls	r3, r2, r1, r3
 802a084:	b903      	cbnz	r3, 802a088 <mktime+0x60>
 802a086:	3501      	adds	r5, #1
 802a088:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 802a08c:	3310      	adds	r3, #16
 802a08e:	f644 6220 	movw	r2, #20000	; 0x4e20
 802a092:	4293      	cmp	r3, r2
 802a094:	61fd      	str	r5, [r7, #28]
 802a096:	f200 815d 	bhi.w	802a354 <mktime+0x32c>
 802a09a:	2e46      	cmp	r6, #70	; 0x46
 802a09c:	dd71      	ble.n	802a182 <mktime+0x15a>
 802a09e:	2346      	movs	r3, #70	; 0x46
 802a0a0:	f240 1c6d 	movw	ip, #365	; 0x16d
 802a0a4:	2164      	movs	r1, #100	; 0x64
 802a0a6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802a0aa:	079a      	lsls	r2, r3, #30
 802a0ac:	d163      	bne.n	802a176 <mktime+0x14e>
 802a0ae:	fb93 f2f1 	sdiv	r2, r3, r1
 802a0b2:	fb01 3212 	mls	r2, r1, r2, r3
 802a0b6:	2a00      	cmp	r2, #0
 802a0b8:	d160      	bne.n	802a17c <mktime+0x154>
 802a0ba:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 802a0be:	fb92 fef0 	sdiv	lr, r2, r0
 802a0c2:	fb00 221e 	mls	r2, r0, lr, r2
 802a0c6:	2a00      	cmp	r2, #0
 802a0c8:	bf14      	ite	ne
 802a0ca:	4662      	movne	r2, ip
 802a0cc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802a0d0:	3301      	adds	r3, #1
 802a0d2:	429e      	cmp	r6, r3
 802a0d4:	4415      	add	r5, r2
 802a0d6:	d1e8      	bne.n	802a0aa <mktime+0x82>
 802a0d8:	4b99      	ldr	r3, [pc, #612]	; (802a340 <mktime+0x318>)
 802a0da:	ea4f 78e4 	mov.w	r8, r4, asr #31
 802a0de:	fbc5 4803 	smlal	r4, r8, r5, r3
 802a0e2:	f001 fb79 	bl	802b7d8 <__tz_lock>
 802a0e6:	f001 fb83 	bl	802b7f0 <_tzset_unlocked>
 802a0ea:	4b96      	ldr	r3, [pc, #600]	; (802a344 <mktime+0x31c>)
 802a0ec:	f8d3 b000 	ldr.w	fp, [r3]
 802a0f0:	f1bb 0f00 	cmp.w	fp, #0
 802a0f4:	d039      	beq.n	802a16a <mktime+0x142>
 802a0f6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 802a0fa:	6978      	ldr	r0, [r7, #20]
 802a0fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 802a100:	f1bb 0f01 	cmp.w	fp, #1
 802a104:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802a108:	46da      	mov	sl, fp
 802a10a:	bfa8      	it	ge
 802a10c:	f04f 0a01 	movge.w	sl, #1
 802a110:	4283      	cmp	r3, r0
 802a112:	d178      	bne.n	802a206 <mktime+0x1de>
 802a114:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 802a118:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 802a11c:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 802a120:	1a5b      	subs	r3, r3, r1
 802a122:	9302      	str	r3, [sp, #8]
 802a124:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 802a128:	9303      	str	r3, [sp, #12]
 802a12a:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 802a12e:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 802a132:	9301      	str	r3, [sp, #4]
 802a134:	ebb3 0c02 	subs.w	ip, r3, r2
 802a138:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 802a13c:	4564      	cmp	r4, ip
 802a13e:	eb78 0300 	sbcs.w	r3, r8, r0
 802a142:	da66      	bge.n	802a212 <mktime+0x1ea>
 802a144:	f8d9 3000 	ldr.w	r3, [r9]
 802a148:	2b00      	cmp	r3, #0
 802a14a:	d06f      	beq.n	802a22c <mktime+0x204>
 802a14c:	9b02      	ldr	r3, [sp, #8]
 802a14e:	429c      	cmp	r4, r3
 802a150:	9b03      	ldr	r3, [sp, #12]
 802a152:	eb78 0303 	sbcs.w	r3, r8, r3
 802a156:	db03      	blt.n	802a160 <mktime+0x138>
 802a158:	4564      	cmp	r4, ip
 802a15a:	eb78 0300 	sbcs.w	r3, r8, r0
 802a15e:	db6b      	blt.n	802a238 <mktime+0x210>
 802a160:	f1bb 0f00 	cmp.w	fp, #0
 802a164:	f04f 0b00 	mov.w	fp, #0
 802a168:	da6b      	bge.n	802a242 <mktime+0x21a>
 802a16a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 802a16e:	190c      	adds	r4, r1, r4
 802a170:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 802a174:	e0a9      	b.n	802a2ca <mktime+0x2a2>
 802a176:	f240 126d 	movw	r2, #365	; 0x16d
 802a17a:	e7a9      	b.n	802a0d0 <mktime+0xa8>
 802a17c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802a180:	e7a6      	b.n	802a0d0 <mktime+0xa8>
 802a182:	d0a9      	beq.n	802a0d8 <mktime+0xb0>
 802a184:	2345      	movs	r3, #69	; 0x45
 802a186:	f240 1c6d 	movw	ip, #365	; 0x16d
 802a18a:	2164      	movs	r1, #100	; 0x64
 802a18c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802a190:	e012      	b.n	802a1b8 <mktime+0x190>
 802a192:	bb62      	cbnz	r2, 802a1ee <mktime+0x1c6>
 802a194:	fb93 f2f1 	sdiv	r2, r3, r1
 802a198:	fb01 3212 	mls	r2, r1, r2, r3
 802a19c:	bb52      	cbnz	r2, 802a1f4 <mktime+0x1cc>
 802a19e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 802a1a2:	fb92 fef0 	sdiv	lr, r2, r0
 802a1a6:	fb00 221e 	mls	r2, r0, lr, r2
 802a1aa:	2a00      	cmp	r2, #0
 802a1ac:	bf14      	ite	ne
 802a1ae:	4662      	movne	r2, ip
 802a1b0:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802a1b4:	1aad      	subs	r5, r5, r2
 802a1b6:	3b01      	subs	r3, #1
 802a1b8:	429e      	cmp	r6, r3
 802a1ba:	f003 0203 	and.w	r2, r3, #3
 802a1be:	dbe8      	blt.n	802a192 <mktime+0x16a>
 802a1c0:	b9da      	cbnz	r2, 802a1fa <mktime+0x1d2>
 802a1c2:	2264      	movs	r2, #100	; 0x64
 802a1c4:	fb96 f3f2 	sdiv	r3, r6, r2
 802a1c8:	fb02 6313 	mls	r3, r2, r3, r6
 802a1cc:	b9c3      	cbnz	r3, 802a200 <mktime+0x1d8>
 802a1ce:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 802a1d2:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802a1d6:	fb93 f1f2 	sdiv	r1, r3, r2
 802a1da:	fb02 3311 	mls	r3, r2, r1, r3
 802a1de:	2b00      	cmp	r3, #0
 802a1e0:	f240 136d 	movw	r3, #365	; 0x16d
 802a1e4:	bf08      	it	eq
 802a1e6:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 802a1ea:	1aed      	subs	r5, r5, r3
 802a1ec:	e774      	b.n	802a0d8 <mktime+0xb0>
 802a1ee:	f240 126d 	movw	r2, #365	; 0x16d
 802a1f2:	e7df      	b.n	802a1b4 <mktime+0x18c>
 802a1f4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802a1f8:	e7dc      	b.n	802a1b4 <mktime+0x18c>
 802a1fa:	f240 136d 	movw	r3, #365	; 0x16d
 802a1fe:	e7f4      	b.n	802a1ea <mktime+0x1c2>
 802a200:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 802a204:	e7f1      	b.n	802a1ea <mktime+0x1c2>
 802a206:	f001 fa3d 	bl	802b684 <__tzcalc_limits>
 802a20a:	2800      	cmp	r0, #0
 802a20c:	d182      	bne.n	802a114 <mktime+0xec>
 802a20e:	46d3      	mov	fp, sl
 802a210:	e050      	b.n	802a2b4 <mktime+0x28c>
 802a212:	9b01      	ldr	r3, [sp, #4]
 802a214:	1a5b      	subs	r3, r3, r1
 802a216:	9301      	str	r3, [sp, #4]
 802a218:	ea4f 73e1 	mov.w	r3, r1, asr #31
 802a21c:	eb6e 0e03 	sbc.w	lr, lr, r3
 802a220:	9b01      	ldr	r3, [sp, #4]
 802a222:	429c      	cmp	r4, r3
 802a224:	eb78 030e 	sbcs.w	r3, r8, lr
 802a228:	dbf1      	blt.n	802a20e <mktime+0x1e6>
 802a22a:	e78b      	b.n	802a144 <mktime+0x11c>
 802a22c:	9b02      	ldr	r3, [sp, #8]
 802a22e:	429c      	cmp	r4, r3
 802a230:	9b03      	ldr	r3, [sp, #12]
 802a232:	eb78 0303 	sbcs.w	r3, r8, r3
 802a236:	db8f      	blt.n	802a158 <mktime+0x130>
 802a238:	f1bb 0f00 	cmp.w	fp, #0
 802a23c:	db3e      	blt.n	802a2bc <mktime+0x294>
 802a23e:	f04f 0b01 	mov.w	fp, #1
 802a242:	ea8a 0a0b 	eor.w	sl, sl, fp
 802a246:	f1ba 0f01 	cmp.w	sl, #1
 802a24a:	d133      	bne.n	802a2b4 <mktime+0x28c>
 802a24c:	f1bb 0f00 	cmp.w	fp, #0
 802a250:	d04e      	beq.n	802a2f0 <mktime+0x2c8>
 802a252:	1a52      	subs	r2, r2, r1
 802a254:	683b      	ldr	r3, [r7, #0]
 802a256:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 802a25a:	4413      	add	r3, r2
 802a25c:	1914      	adds	r4, r2, r4
 802a25e:	603b      	str	r3, [r7, #0]
 802a260:	4638      	mov	r0, r7
 802a262:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 802a266:	f7ff fe07 	bl	8029e78 <validate_structure>
 802a26a:	68fa      	ldr	r2, [r7, #12]
 802a26c:	ebb2 020a 	subs.w	r2, r2, sl
 802a270:	d020      	beq.n	802a2b4 <mktime+0x28c>
 802a272:	2a01      	cmp	r2, #1
 802a274:	dc3e      	bgt.n	802a2f4 <mktime+0x2cc>
 802a276:	1c90      	adds	r0, r2, #2
 802a278:	bfd8      	it	le
 802a27a:	2201      	movle	r2, #1
 802a27c:	69fb      	ldr	r3, [r7, #28]
 802a27e:	18d3      	adds	r3, r2, r3
 802a280:	4415      	add	r5, r2
 802a282:	d540      	bpl.n	802a306 <mktime+0x2de>
 802a284:	1e73      	subs	r3, r6, #1
 802a286:	0799      	lsls	r1, r3, #30
 802a288:	d137      	bne.n	802a2fa <mktime+0x2d2>
 802a28a:	2264      	movs	r2, #100	; 0x64
 802a28c:	fb93 f1f2 	sdiv	r1, r3, r2
 802a290:	fb02 3311 	mls	r3, r2, r1, r3
 802a294:	bba3      	cbnz	r3, 802a300 <mktime+0x2d8>
 802a296:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802a29a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 802a29e:	fb96 f2f3 	sdiv	r2, r6, r3
 802a2a2:	fb03 6612 	mls	r6, r3, r2, r6
 802a2a6:	2e00      	cmp	r6, #0
 802a2a8:	f240 136d 	movw	r3, #365	; 0x16d
 802a2ac:	bf18      	it	ne
 802a2ae:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 802a2b2:	61fb      	str	r3, [r7, #28]
 802a2b4:	f1bb 0f01 	cmp.w	fp, #1
 802a2b8:	f47f af57 	bne.w	802a16a <mktime+0x142>
 802a2bc:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 802a2c0:	190c      	adds	r4, r1, r4
 802a2c2:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 802a2c6:	f04f 0b01 	mov.w	fp, #1
 802a2ca:	f001 fa8b 	bl	802b7e4 <__tz_unlock>
 802a2ce:	3504      	adds	r5, #4
 802a2d0:	2307      	movs	r3, #7
 802a2d2:	fb95 f3f3 	sdiv	r3, r5, r3
 802a2d6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802a2da:	1aed      	subs	r5, r5, r3
 802a2dc:	bf48      	it	mi
 802a2de:	3507      	addmi	r5, #7
 802a2e0:	f8c7 b020 	str.w	fp, [r7, #32]
 802a2e4:	61bd      	str	r5, [r7, #24]
 802a2e6:	4620      	mov	r0, r4
 802a2e8:	4641      	mov	r1, r8
 802a2ea:	b005      	add	sp, #20
 802a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a2f0:	1a8a      	subs	r2, r1, r2
 802a2f2:	e7af      	b.n	802a254 <mktime+0x22c>
 802a2f4:	f04f 32ff 	mov.w	r2, #4294967295
 802a2f8:	e7c0      	b.n	802a27c <mktime+0x254>
 802a2fa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 802a2fe:	e7d8      	b.n	802a2b2 <mktime+0x28a>
 802a300:	f240 136d 	movw	r3, #365	; 0x16d
 802a304:	e7d5      	b.n	802a2b2 <mktime+0x28a>
 802a306:	07b2      	lsls	r2, r6, #30
 802a308:	d11e      	bne.n	802a348 <mktime+0x320>
 802a30a:	2164      	movs	r1, #100	; 0x64
 802a30c:	fb96 f2f1 	sdiv	r2, r6, r1
 802a310:	fb01 6212 	mls	r2, r1, r2, r6
 802a314:	b9da      	cbnz	r2, 802a34e <mktime+0x326>
 802a316:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802a31a:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 802a31e:	fb96 f1f2 	sdiv	r1, r6, r2
 802a322:	fb02 6611 	mls	r6, r2, r1, r6
 802a326:	2e00      	cmp	r6, #0
 802a328:	f240 126d 	movw	r2, #365	; 0x16d
 802a32c:	bf08      	it	eq
 802a32e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802a332:	4293      	cmp	r3, r2
 802a334:	bfa8      	it	ge
 802a336:	1a9b      	subge	r3, r3, r2
 802a338:	e7bb      	b.n	802a2b2 <mktime+0x28a>
 802a33a:	bf00      	nop
 802a33c:	08030d6c 	.word	0x08030d6c
 802a340:	00015180 	.word	0x00015180
 802a344:	2003c4ec 	.word	0x2003c4ec
 802a348:	f240 126d 	movw	r2, #365	; 0x16d
 802a34c:	e7f1      	b.n	802a332 <mktime+0x30a>
 802a34e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802a352:	e7ee      	b.n	802a332 <mktime+0x30a>
 802a354:	f04f 34ff 	mov.w	r4, #4294967295
 802a358:	46a0      	mov	r8, r4
 802a35a:	e7c4      	b.n	802a2e6 <mktime+0x2be>

0802a35c <_free_r>:
 802a35c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a35e:	2900      	cmp	r1, #0
 802a360:	d044      	beq.n	802a3ec <_free_r+0x90>
 802a362:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a366:	9001      	str	r0, [sp, #4]
 802a368:	2b00      	cmp	r3, #0
 802a36a:	f1a1 0404 	sub.w	r4, r1, #4
 802a36e:	bfb8      	it	lt
 802a370:	18e4      	addlt	r4, r4, r3
 802a372:	f002 f89f 	bl	802c4b4 <__malloc_lock>
 802a376:	4a1e      	ldr	r2, [pc, #120]	; (802a3f0 <_free_r+0x94>)
 802a378:	9801      	ldr	r0, [sp, #4]
 802a37a:	6813      	ldr	r3, [r2, #0]
 802a37c:	b933      	cbnz	r3, 802a38c <_free_r+0x30>
 802a37e:	6063      	str	r3, [r4, #4]
 802a380:	6014      	str	r4, [r2, #0]
 802a382:	b003      	add	sp, #12
 802a384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a388:	f002 b89a 	b.w	802c4c0 <__malloc_unlock>
 802a38c:	42a3      	cmp	r3, r4
 802a38e:	d908      	bls.n	802a3a2 <_free_r+0x46>
 802a390:	6825      	ldr	r5, [r4, #0]
 802a392:	1961      	adds	r1, r4, r5
 802a394:	428b      	cmp	r3, r1
 802a396:	bf01      	itttt	eq
 802a398:	6819      	ldreq	r1, [r3, #0]
 802a39a:	685b      	ldreq	r3, [r3, #4]
 802a39c:	1949      	addeq	r1, r1, r5
 802a39e:	6021      	streq	r1, [r4, #0]
 802a3a0:	e7ed      	b.n	802a37e <_free_r+0x22>
 802a3a2:	461a      	mov	r2, r3
 802a3a4:	685b      	ldr	r3, [r3, #4]
 802a3a6:	b10b      	cbz	r3, 802a3ac <_free_r+0x50>
 802a3a8:	42a3      	cmp	r3, r4
 802a3aa:	d9fa      	bls.n	802a3a2 <_free_r+0x46>
 802a3ac:	6811      	ldr	r1, [r2, #0]
 802a3ae:	1855      	adds	r5, r2, r1
 802a3b0:	42a5      	cmp	r5, r4
 802a3b2:	d10b      	bne.n	802a3cc <_free_r+0x70>
 802a3b4:	6824      	ldr	r4, [r4, #0]
 802a3b6:	4421      	add	r1, r4
 802a3b8:	1854      	adds	r4, r2, r1
 802a3ba:	42a3      	cmp	r3, r4
 802a3bc:	6011      	str	r1, [r2, #0]
 802a3be:	d1e0      	bne.n	802a382 <_free_r+0x26>
 802a3c0:	681c      	ldr	r4, [r3, #0]
 802a3c2:	685b      	ldr	r3, [r3, #4]
 802a3c4:	6053      	str	r3, [r2, #4]
 802a3c6:	4421      	add	r1, r4
 802a3c8:	6011      	str	r1, [r2, #0]
 802a3ca:	e7da      	b.n	802a382 <_free_r+0x26>
 802a3cc:	d902      	bls.n	802a3d4 <_free_r+0x78>
 802a3ce:	230c      	movs	r3, #12
 802a3d0:	6003      	str	r3, [r0, #0]
 802a3d2:	e7d6      	b.n	802a382 <_free_r+0x26>
 802a3d4:	6825      	ldr	r5, [r4, #0]
 802a3d6:	1961      	adds	r1, r4, r5
 802a3d8:	428b      	cmp	r3, r1
 802a3da:	bf04      	itt	eq
 802a3dc:	6819      	ldreq	r1, [r3, #0]
 802a3de:	685b      	ldreq	r3, [r3, #4]
 802a3e0:	6063      	str	r3, [r4, #4]
 802a3e2:	bf04      	itt	eq
 802a3e4:	1949      	addeq	r1, r1, r5
 802a3e6:	6021      	streq	r1, [r4, #0]
 802a3e8:	6054      	str	r4, [r2, #4]
 802a3ea:	e7ca      	b.n	802a382 <_free_r+0x26>
 802a3ec:	b003      	add	sp, #12
 802a3ee:	bd30      	pop	{r4, r5, pc}
 802a3f0:	2003c3c0 	.word	0x2003c3c0

0802a3f4 <sbrk_aligned>:
 802a3f4:	b570      	push	{r4, r5, r6, lr}
 802a3f6:	4e0e      	ldr	r6, [pc, #56]	; (802a430 <sbrk_aligned+0x3c>)
 802a3f8:	460c      	mov	r4, r1
 802a3fa:	6831      	ldr	r1, [r6, #0]
 802a3fc:	4605      	mov	r5, r0
 802a3fe:	b911      	cbnz	r1, 802a406 <sbrk_aligned+0x12>
 802a400:	f000 fb7a 	bl	802aaf8 <_sbrk_r>
 802a404:	6030      	str	r0, [r6, #0]
 802a406:	4621      	mov	r1, r4
 802a408:	4628      	mov	r0, r5
 802a40a:	f000 fb75 	bl	802aaf8 <_sbrk_r>
 802a40e:	1c43      	adds	r3, r0, #1
 802a410:	d00a      	beq.n	802a428 <sbrk_aligned+0x34>
 802a412:	1cc4      	adds	r4, r0, #3
 802a414:	f024 0403 	bic.w	r4, r4, #3
 802a418:	42a0      	cmp	r0, r4
 802a41a:	d007      	beq.n	802a42c <sbrk_aligned+0x38>
 802a41c:	1a21      	subs	r1, r4, r0
 802a41e:	4628      	mov	r0, r5
 802a420:	f000 fb6a 	bl	802aaf8 <_sbrk_r>
 802a424:	3001      	adds	r0, #1
 802a426:	d101      	bne.n	802a42c <sbrk_aligned+0x38>
 802a428:	f04f 34ff 	mov.w	r4, #4294967295
 802a42c:	4620      	mov	r0, r4
 802a42e:	bd70      	pop	{r4, r5, r6, pc}
 802a430:	2003c3c4 	.word	0x2003c3c4

0802a434 <_malloc_r>:
 802a434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a438:	1ccd      	adds	r5, r1, #3
 802a43a:	f025 0503 	bic.w	r5, r5, #3
 802a43e:	3508      	adds	r5, #8
 802a440:	2d0c      	cmp	r5, #12
 802a442:	bf38      	it	cc
 802a444:	250c      	movcc	r5, #12
 802a446:	2d00      	cmp	r5, #0
 802a448:	4607      	mov	r7, r0
 802a44a:	db01      	blt.n	802a450 <_malloc_r+0x1c>
 802a44c:	42a9      	cmp	r1, r5
 802a44e:	d905      	bls.n	802a45c <_malloc_r+0x28>
 802a450:	230c      	movs	r3, #12
 802a452:	603b      	str	r3, [r7, #0]
 802a454:	2600      	movs	r6, #0
 802a456:	4630      	mov	r0, r6
 802a458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802a45c:	4e2e      	ldr	r6, [pc, #184]	; (802a518 <_malloc_r+0xe4>)
 802a45e:	f002 f829 	bl	802c4b4 <__malloc_lock>
 802a462:	6833      	ldr	r3, [r6, #0]
 802a464:	461c      	mov	r4, r3
 802a466:	bb34      	cbnz	r4, 802a4b6 <_malloc_r+0x82>
 802a468:	4629      	mov	r1, r5
 802a46a:	4638      	mov	r0, r7
 802a46c:	f7ff ffc2 	bl	802a3f4 <sbrk_aligned>
 802a470:	1c43      	adds	r3, r0, #1
 802a472:	4604      	mov	r4, r0
 802a474:	d14d      	bne.n	802a512 <_malloc_r+0xde>
 802a476:	6834      	ldr	r4, [r6, #0]
 802a478:	4626      	mov	r6, r4
 802a47a:	2e00      	cmp	r6, #0
 802a47c:	d140      	bne.n	802a500 <_malloc_r+0xcc>
 802a47e:	6823      	ldr	r3, [r4, #0]
 802a480:	4631      	mov	r1, r6
 802a482:	4638      	mov	r0, r7
 802a484:	eb04 0803 	add.w	r8, r4, r3
 802a488:	f000 fb36 	bl	802aaf8 <_sbrk_r>
 802a48c:	4580      	cmp	r8, r0
 802a48e:	d13a      	bne.n	802a506 <_malloc_r+0xd2>
 802a490:	6821      	ldr	r1, [r4, #0]
 802a492:	3503      	adds	r5, #3
 802a494:	1a6d      	subs	r5, r5, r1
 802a496:	f025 0503 	bic.w	r5, r5, #3
 802a49a:	3508      	adds	r5, #8
 802a49c:	2d0c      	cmp	r5, #12
 802a49e:	bf38      	it	cc
 802a4a0:	250c      	movcc	r5, #12
 802a4a2:	4629      	mov	r1, r5
 802a4a4:	4638      	mov	r0, r7
 802a4a6:	f7ff ffa5 	bl	802a3f4 <sbrk_aligned>
 802a4aa:	3001      	adds	r0, #1
 802a4ac:	d02b      	beq.n	802a506 <_malloc_r+0xd2>
 802a4ae:	6823      	ldr	r3, [r4, #0]
 802a4b0:	442b      	add	r3, r5
 802a4b2:	6023      	str	r3, [r4, #0]
 802a4b4:	e00e      	b.n	802a4d4 <_malloc_r+0xa0>
 802a4b6:	6822      	ldr	r2, [r4, #0]
 802a4b8:	1b52      	subs	r2, r2, r5
 802a4ba:	d41e      	bmi.n	802a4fa <_malloc_r+0xc6>
 802a4bc:	2a0b      	cmp	r2, #11
 802a4be:	d916      	bls.n	802a4ee <_malloc_r+0xba>
 802a4c0:	1961      	adds	r1, r4, r5
 802a4c2:	42a3      	cmp	r3, r4
 802a4c4:	6025      	str	r5, [r4, #0]
 802a4c6:	bf18      	it	ne
 802a4c8:	6059      	strne	r1, [r3, #4]
 802a4ca:	6863      	ldr	r3, [r4, #4]
 802a4cc:	bf08      	it	eq
 802a4ce:	6031      	streq	r1, [r6, #0]
 802a4d0:	5162      	str	r2, [r4, r5]
 802a4d2:	604b      	str	r3, [r1, #4]
 802a4d4:	4638      	mov	r0, r7
 802a4d6:	f104 060b 	add.w	r6, r4, #11
 802a4da:	f001 fff1 	bl	802c4c0 <__malloc_unlock>
 802a4de:	f026 0607 	bic.w	r6, r6, #7
 802a4e2:	1d23      	adds	r3, r4, #4
 802a4e4:	1af2      	subs	r2, r6, r3
 802a4e6:	d0b6      	beq.n	802a456 <_malloc_r+0x22>
 802a4e8:	1b9b      	subs	r3, r3, r6
 802a4ea:	50a3      	str	r3, [r4, r2]
 802a4ec:	e7b3      	b.n	802a456 <_malloc_r+0x22>
 802a4ee:	6862      	ldr	r2, [r4, #4]
 802a4f0:	42a3      	cmp	r3, r4
 802a4f2:	bf0c      	ite	eq
 802a4f4:	6032      	streq	r2, [r6, #0]
 802a4f6:	605a      	strne	r2, [r3, #4]
 802a4f8:	e7ec      	b.n	802a4d4 <_malloc_r+0xa0>
 802a4fa:	4623      	mov	r3, r4
 802a4fc:	6864      	ldr	r4, [r4, #4]
 802a4fe:	e7b2      	b.n	802a466 <_malloc_r+0x32>
 802a500:	4634      	mov	r4, r6
 802a502:	6876      	ldr	r6, [r6, #4]
 802a504:	e7b9      	b.n	802a47a <_malloc_r+0x46>
 802a506:	230c      	movs	r3, #12
 802a508:	603b      	str	r3, [r7, #0]
 802a50a:	4638      	mov	r0, r7
 802a50c:	f001 ffd8 	bl	802c4c0 <__malloc_unlock>
 802a510:	e7a1      	b.n	802a456 <_malloc_r+0x22>
 802a512:	6025      	str	r5, [r4, #0]
 802a514:	e7de      	b.n	802a4d4 <_malloc_r+0xa0>
 802a516:	bf00      	nop
 802a518:	2003c3c0 	.word	0x2003c3c0

0802a51c <__sfputc_r>:
 802a51c:	6893      	ldr	r3, [r2, #8]
 802a51e:	3b01      	subs	r3, #1
 802a520:	2b00      	cmp	r3, #0
 802a522:	b410      	push	{r4}
 802a524:	6093      	str	r3, [r2, #8]
 802a526:	da08      	bge.n	802a53a <__sfputc_r+0x1e>
 802a528:	6994      	ldr	r4, [r2, #24]
 802a52a:	42a3      	cmp	r3, r4
 802a52c:	db01      	blt.n	802a532 <__sfputc_r+0x16>
 802a52e:	290a      	cmp	r1, #10
 802a530:	d103      	bne.n	802a53a <__sfputc_r+0x1e>
 802a532:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a536:	f001 bae1 	b.w	802bafc <__swbuf_r>
 802a53a:	6813      	ldr	r3, [r2, #0]
 802a53c:	1c58      	adds	r0, r3, #1
 802a53e:	6010      	str	r0, [r2, #0]
 802a540:	7019      	strb	r1, [r3, #0]
 802a542:	4608      	mov	r0, r1
 802a544:	f85d 4b04 	ldr.w	r4, [sp], #4
 802a548:	4770      	bx	lr

0802a54a <__sfputs_r>:
 802a54a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802a54c:	4606      	mov	r6, r0
 802a54e:	460f      	mov	r7, r1
 802a550:	4614      	mov	r4, r2
 802a552:	18d5      	adds	r5, r2, r3
 802a554:	42ac      	cmp	r4, r5
 802a556:	d101      	bne.n	802a55c <__sfputs_r+0x12>
 802a558:	2000      	movs	r0, #0
 802a55a:	e007      	b.n	802a56c <__sfputs_r+0x22>
 802a55c:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a560:	463a      	mov	r2, r7
 802a562:	4630      	mov	r0, r6
 802a564:	f7ff ffda 	bl	802a51c <__sfputc_r>
 802a568:	1c43      	adds	r3, r0, #1
 802a56a:	d1f3      	bne.n	802a554 <__sfputs_r+0xa>
 802a56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802a570 <_vfiprintf_r>:
 802a570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802a574:	460d      	mov	r5, r1
 802a576:	b09d      	sub	sp, #116	; 0x74
 802a578:	4614      	mov	r4, r2
 802a57a:	4698      	mov	r8, r3
 802a57c:	4606      	mov	r6, r0
 802a57e:	b118      	cbz	r0, 802a588 <_vfiprintf_r+0x18>
 802a580:	6983      	ldr	r3, [r0, #24]
 802a582:	b90b      	cbnz	r3, 802a588 <_vfiprintf_r+0x18>
 802a584:	f001 fd2c 	bl	802bfe0 <__sinit>
 802a588:	4b89      	ldr	r3, [pc, #548]	; (802a7b0 <_vfiprintf_r+0x240>)
 802a58a:	429d      	cmp	r5, r3
 802a58c:	d11b      	bne.n	802a5c6 <_vfiprintf_r+0x56>
 802a58e:	6875      	ldr	r5, [r6, #4]
 802a590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a592:	07d9      	lsls	r1, r3, #31
 802a594:	d405      	bmi.n	802a5a2 <_vfiprintf_r+0x32>
 802a596:	89ab      	ldrh	r3, [r5, #12]
 802a598:	059a      	lsls	r2, r3, #22
 802a59a:	d402      	bmi.n	802a5a2 <_vfiprintf_r+0x32>
 802a59c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a59e:	f001 fefb 	bl	802c398 <__retarget_lock_acquire_recursive>
 802a5a2:	89ab      	ldrh	r3, [r5, #12]
 802a5a4:	071b      	lsls	r3, r3, #28
 802a5a6:	d501      	bpl.n	802a5ac <_vfiprintf_r+0x3c>
 802a5a8:	692b      	ldr	r3, [r5, #16]
 802a5aa:	b9eb      	cbnz	r3, 802a5e8 <_vfiprintf_r+0x78>
 802a5ac:	4629      	mov	r1, r5
 802a5ae:	4630      	mov	r0, r6
 802a5b0:	f001 fb08 	bl	802bbc4 <__swsetup_r>
 802a5b4:	b1c0      	cbz	r0, 802a5e8 <_vfiprintf_r+0x78>
 802a5b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a5b8:	07dc      	lsls	r4, r3, #31
 802a5ba:	d50e      	bpl.n	802a5da <_vfiprintf_r+0x6a>
 802a5bc:	f04f 30ff 	mov.w	r0, #4294967295
 802a5c0:	b01d      	add	sp, #116	; 0x74
 802a5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802a5c6:	4b7b      	ldr	r3, [pc, #492]	; (802a7b4 <_vfiprintf_r+0x244>)
 802a5c8:	429d      	cmp	r5, r3
 802a5ca:	d101      	bne.n	802a5d0 <_vfiprintf_r+0x60>
 802a5cc:	68b5      	ldr	r5, [r6, #8]
 802a5ce:	e7df      	b.n	802a590 <_vfiprintf_r+0x20>
 802a5d0:	4b79      	ldr	r3, [pc, #484]	; (802a7b8 <_vfiprintf_r+0x248>)
 802a5d2:	429d      	cmp	r5, r3
 802a5d4:	bf08      	it	eq
 802a5d6:	68f5      	ldreq	r5, [r6, #12]
 802a5d8:	e7da      	b.n	802a590 <_vfiprintf_r+0x20>
 802a5da:	89ab      	ldrh	r3, [r5, #12]
 802a5dc:	0598      	lsls	r0, r3, #22
 802a5de:	d4ed      	bmi.n	802a5bc <_vfiprintf_r+0x4c>
 802a5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a5e2:	f001 fedb 	bl	802c39c <__retarget_lock_release_recursive>
 802a5e6:	e7e9      	b.n	802a5bc <_vfiprintf_r+0x4c>
 802a5e8:	2300      	movs	r3, #0
 802a5ea:	9309      	str	r3, [sp, #36]	; 0x24
 802a5ec:	2320      	movs	r3, #32
 802a5ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802a5f2:	f8cd 800c 	str.w	r8, [sp, #12]
 802a5f6:	2330      	movs	r3, #48	; 0x30
 802a5f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802a7bc <_vfiprintf_r+0x24c>
 802a5fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802a600:	f04f 0901 	mov.w	r9, #1
 802a604:	4623      	mov	r3, r4
 802a606:	469a      	mov	sl, r3
 802a608:	f813 2b01 	ldrb.w	r2, [r3], #1
 802a60c:	b10a      	cbz	r2, 802a612 <_vfiprintf_r+0xa2>
 802a60e:	2a25      	cmp	r2, #37	; 0x25
 802a610:	d1f9      	bne.n	802a606 <_vfiprintf_r+0x96>
 802a612:	ebba 0b04 	subs.w	fp, sl, r4
 802a616:	d00b      	beq.n	802a630 <_vfiprintf_r+0xc0>
 802a618:	465b      	mov	r3, fp
 802a61a:	4622      	mov	r2, r4
 802a61c:	4629      	mov	r1, r5
 802a61e:	4630      	mov	r0, r6
 802a620:	f7ff ff93 	bl	802a54a <__sfputs_r>
 802a624:	3001      	adds	r0, #1
 802a626:	f000 80aa 	beq.w	802a77e <_vfiprintf_r+0x20e>
 802a62a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a62c:	445a      	add	r2, fp
 802a62e:	9209      	str	r2, [sp, #36]	; 0x24
 802a630:	f89a 3000 	ldrb.w	r3, [sl]
 802a634:	2b00      	cmp	r3, #0
 802a636:	f000 80a2 	beq.w	802a77e <_vfiprintf_r+0x20e>
 802a63a:	2300      	movs	r3, #0
 802a63c:	f04f 32ff 	mov.w	r2, #4294967295
 802a640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802a644:	f10a 0a01 	add.w	sl, sl, #1
 802a648:	9304      	str	r3, [sp, #16]
 802a64a:	9307      	str	r3, [sp, #28]
 802a64c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802a650:	931a      	str	r3, [sp, #104]	; 0x68
 802a652:	4654      	mov	r4, sl
 802a654:	2205      	movs	r2, #5
 802a656:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a65a:	4858      	ldr	r0, [pc, #352]	; (802a7bc <_vfiprintf_r+0x24c>)
 802a65c:	f7d5 fdf8 	bl	8000250 <memchr>
 802a660:	9a04      	ldr	r2, [sp, #16]
 802a662:	b9d8      	cbnz	r0, 802a69c <_vfiprintf_r+0x12c>
 802a664:	06d1      	lsls	r1, r2, #27
 802a666:	bf44      	itt	mi
 802a668:	2320      	movmi	r3, #32
 802a66a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a66e:	0713      	lsls	r3, r2, #28
 802a670:	bf44      	itt	mi
 802a672:	232b      	movmi	r3, #43	; 0x2b
 802a674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802a678:	f89a 3000 	ldrb.w	r3, [sl]
 802a67c:	2b2a      	cmp	r3, #42	; 0x2a
 802a67e:	d015      	beq.n	802a6ac <_vfiprintf_r+0x13c>
 802a680:	9a07      	ldr	r2, [sp, #28]
 802a682:	4654      	mov	r4, sl
 802a684:	2000      	movs	r0, #0
 802a686:	f04f 0c0a 	mov.w	ip, #10
 802a68a:	4621      	mov	r1, r4
 802a68c:	f811 3b01 	ldrb.w	r3, [r1], #1
 802a690:	3b30      	subs	r3, #48	; 0x30
 802a692:	2b09      	cmp	r3, #9
 802a694:	d94e      	bls.n	802a734 <_vfiprintf_r+0x1c4>
 802a696:	b1b0      	cbz	r0, 802a6c6 <_vfiprintf_r+0x156>
 802a698:	9207      	str	r2, [sp, #28]
 802a69a:	e014      	b.n	802a6c6 <_vfiprintf_r+0x156>
 802a69c:	eba0 0308 	sub.w	r3, r0, r8
 802a6a0:	fa09 f303 	lsl.w	r3, r9, r3
 802a6a4:	4313      	orrs	r3, r2
 802a6a6:	9304      	str	r3, [sp, #16]
 802a6a8:	46a2      	mov	sl, r4
 802a6aa:	e7d2      	b.n	802a652 <_vfiprintf_r+0xe2>
 802a6ac:	9b03      	ldr	r3, [sp, #12]
 802a6ae:	1d19      	adds	r1, r3, #4
 802a6b0:	681b      	ldr	r3, [r3, #0]
 802a6b2:	9103      	str	r1, [sp, #12]
 802a6b4:	2b00      	cmp	r3, #0
 802a6b6:	bfbb      	ittet	lt
 802a6b8:	425b      	neglt	r3, r3
 802a6ba:	f042 0202 	orrlt.w	r2, r2, #2
 802a6be:	9307      	strge	r3, [sp, #28]
 802a6c0:	9307      	strlt	r3, [sp, #28]
 802a6c2:	bfb8      	it	lt
 802a6c4:	9204      	strlt	r2, [sp, #16]
 802a6c6:	7823      	ldrb	r3, [r4, #0]
 802a6c8:	2b2e      	cmp	r3, #46	; 0x2e
 802a6ca:	d10c      	bne.n	802a6e6 <_vfiprintf_r+0x176>
 802a6cc:	7863      	ldrb	r3, [r4, #1]
 802a6ce:	2b2a      	cmp	r3, #42	; 0x2a
 802a6d0:	d135      	bne.n	802a73e <_vfiprintf_r+0x1ce>
 802a6d2:	9b03      	ldr	r3, [sp, #12]
 802a6d4:	1d1a      	adds	r2, r3, #4
 802a6d6:	681b      	ldr	r3, [r3, #0]
 802a6d8:	9203      	str	r2, [sp, #12]
 802a6da:	2b00      	cmp	r3, #0
 802a6dc:	bfb8      	it	lt
 802a6de:	f04f 33ff 	movlt.w	r3, #4294967295
 802a6e2:	3402      	adds	r4, #2
 802a6e4:	9305      	str	r3, [sp, #20]
 802a6e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 802a7cc <_vfiprintf_r+0x25c>
 802a6ea:	7821      	ldrb	r1, [r4, #0]
 802a6ec:	2203      	movs	r2, #3
 802a6ee:	4650      	mov	r0, sl
 802a6f0:	f7d5 fdae 	bl	8000250 <memchr>
 802a6f4:	b140      	cbz	r0, 802a708 <_vfiprintf_r+0x198>
 802a6f6:	2340      	movs	r3, #64	; 0x40
 802a6f8:	eba0 000a 	sub.w	r0, r0, sl
 802a6fc:	fa03 f000 	lsl.w	r0, r3, r0
 802a700:	9b04      	ldr	r3, [sp, #16]
 802a702:	4303      	orrs	r3, r0
 802a704:	3401      	adds	r4, #1
 802a706:	9304      	str	r3, [sp, #16]
 802a708:	f814 1b01 	ldrb.w	r1, [r4], #1
 802a70c:	482c      	ldr	r0, [pc, #176]	; (802a7c0 <_vfiprintf_r+0x250>)
 802a70e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802a712:	2206      	movs	r2, #6
 802a714:	f7d5 fd9c 	bl	8000250 <memchr>
 802a718:	2800      	cmp	r0, #0
 802a71a:	d03f      	beq.n	802a79c <_vfiprintf_r+0x22c>
 802a71c:	4b29      	ldr	r3, [pc, #164]	; (802a7c4 <_vfiprintf_r+0x254>)
 802a71e:	bb1b      	cbnz	r3, 802a768 <_vfiprintf_r+0x1f8>
 802a720:	9b03      	ldr	r3, [sp, #12]
 802a722:	3307      	adds	r3, #7
 802a724:	f023 0307 	bic.w	r3, r3, #7
 802a728:	3308      	adds	r3, #8
 802a72a:	9303      	str	r3, [sp, #12]
 802a72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a72e:	443b      	add	r3, r7
 802a730:	9309      	str	r3, [sp, #36]	; 0x24
 802a732:	e767      	b.n	802a604 <_vfiprintf_r+0x94>
 802a734:	fb0c 3202 	mla	r2, ip, r2, r3
 802a738:	460c      	mov	r4, r1
 802a73a:	2001      	movs	r0, #1
 802a73c:	e7a5      	b.n	802a68a <_vfiprintf_r+0x11a>
 802a73e:	2300      	movs	r3, #0
 802a740:	3401      	adds	r4, #1
 802a742:	9305      	str	r3, [sp, #20]
 802a744:	4619      	mov	r1, r3
 802a746:	f04f 0c0a 	mov.w	ip, #10
 802a74a:	4620      	mov	r0, r4
 802a74c:	f810 2b01 	ldrb.w	r2, [r0], #1
 802a750:	3a30      	subs	r2, #48	; 0x30
 802a752:	2a09      	cmp	r2, #9
 802a754:	d903      	bls.n	802a75e <_vfiprintf_r+0x1ee>
 802a756:	2b00      	cmp	r3, #0
 802a758:	d0c5      	beq.n	802a6e6 <_vfiprintf_r+0x176>
 802a75a:	9105      	str	r1, [sp, #20]
 802a75c:	e7c3      	b.n	802a6e6 <_vfiprintf_r+0x176>
 802a75e:	fb0c 2101 	mla	r1, ip, r1, r2
 802a762:	4604      	mov	r4, r0
 802a764:	2301      	movs	r3, #1
 802a766:	e7f0      	b.n	802a74a <_vfiprintf_r+0x1da>
 802a768:	ab03      	add	r3, sp, #12
 802a76a:	9300      	str	r3, [sp, #0]
 802a76c:	462a      	mov	r2, r5
 802a76e:	4b16      	ldr	r3, [pc, #88]	; (802a7c8 <_vfiprintf_r+0x258>)
 802a770:	a904      	add	r1, sp, #16
 802a772:	4630      	mov	r0, r6
 802a774:	f3af 8000 	nop.w
 802a778:	4607      	mov	r7, r0
 802a77a:	1c78      	adds	r0, r7, #1
 802a77c:	d1d6      	bne.n	802a72c <_vfiprintf_r+0x1bc>
 802a77e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802a780:	07d9      	lsls	r1, r3, #31
 802a782:	d405      	bmi.n	802a790 <_vfiprintf_r+0x220>
 802a784:	89ab      	ldrh	r3, [r5, #12]
 802a786:	059a      	lsls	r2, r3, #22
 802a788:	d402      	bmi.n	802a790 <_vfiprintf_r+0x220>
 802a78a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802a78c:	f001 fe06 	bl	802c39c <__retarget_lock_release_recursive>
 802a790:	89ab      	ldrh	r3, [r5, #12]
 802a792:	065b      	lsls	r3, r3, #25
 802a794:	f53f af12 	bmi.w	802a5bc <_vfiprintf_r+0x4c>
 802a798:	9809      	ldr	r0, [sp, #36]	; 0x24
 802a79a:	e711      	b.n	802a5c0 <_vfiprintf_r+0x50>
 802a79c:	ab03      	add	r3, sp, #12
 802a79e:	9300      	str	r3, [sp, #0]
 802a7a0:	462a      	mov	r2, r5
 802a7a2:	4b09      	ldr	r3, [pc, #36]	; (802a7c8 <_vfiprintf_r+0x258>)
 802a7a4:	a904      	add	r1, sp, #16
 802a7a6:	4630      	mov	r0, r6
 802a7a8:	f000 f880 	bl	802a8ac <_printf_i>
 802a7ac:	e7e4      	b.n	802a778 <_vfiprintf_r+0x208>
 802a7ae:	bf00      	nop
 802a7b0:	080311a0 	.word	0x080311a0
 802a7b4:	080311c0 	.word	0x080311c0
 802a7b8:	08031180 	.word	0x08031180
 802a7bc:	08030d9c 	.word	0x08030d9c
 802a7c0:	08030da6 	.word	0x08030da6
 802a7c4:	00000000 	.word	0x00000000
 802a7c8:	0802a54b 	.word	0x0802a54b
 802a7cc:	08030da2 	.word	0x08030da2

0802a7d0 <_printf_common>:
 802a7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802a7d4:	4616      	mov	r6, r2
 802a7d6:	4699      	mov	r9, r3
 802a7d8:	688a      	ldr	r2, [r1, #8]
 802a7da:	690b      	ldr	r3, [r1, #16]
 802a7dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802a7e0:	4293      	cmp	r3, r2
 802a7e2:	bfb8      	it	lt
 802a7e4:	4613      	movlt	r3, r2
 802a7e6:	6033      	str	r3, [r6, #0]
 802a7e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802a7ec:	4607      	mov	r7, r0
 802a7ee:	460c      	mov	r4, r1
 802a7f0:	b10a      	cbz	r2, 802a7f6 <_printf_common+0x26>
 802a7f2:	3301      	adds	r3, #1
 802a7f4:	6033      	str	r3, [r6, #0]
 802a7f6:	6823      	ldr	r3, [r4, #0]
 802a7f8:	0699      	lsls	r1, r3, #26
 802a7fa:	bf42      	ittt	mi
 802a7fc:	6833      	ldrmi	r3, [r6, #0]
 802a7fe:	3302      	addmi	r3, #2
 802a800:	6033      	strmi	r3, [r6, #0]
 802a802:	6825      	ldr	r5, [r4, #0]
 802a804:	f015 0506 	ands.w	r5, r5, #6
 802a808:	d106      	bne.n	802a818 <_printf_common+0x48>
 802a80a:	f104 0a19 	add.w	sl, r4, #25
 802a80e:	68e3      	ldr	r3, [r4, #12]
 802a810:	6832      	ldr	r2, [r6, #0]
 802a812:	1a9b      	subs	r3, r3, r2
 802a814:	42ab      	cmp	r3, r5
 802a816:	dc26      	bgt.n	802a866 <_printf_common+0x96>
 802a818:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802a81c:	1e13      	subs	r3, r2, #0
 802a81e:	6822      	ldr	r2, [r4, #0]
 802a820:	bf18      	it	ne
 802a822:	2301      	movne	r3, #1
 802a824:	0692      	lsls	r2, r2, #26
 802a826:	d42b      	bmi.n	802a880 <_printf_common+0xb0>
 802a828:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802a82c:	4649      	mov	r1, r9
 802a82e:	4638      	mov	r0, r7
 802a830:	47c0      	blx	r8
 802a832:	3001      	adds	r0, #1
 802a834:	d01e      	beq.n	802a874 <_printf_common+0xa4>
 802a836:	6823      	ldr	r3, [r4, #0]
 802a838:	68e5      	ldr	r5, [r4, #12]
 802a83a:	6832      	ldr	r2, [r6, #0]
 802a83c:	f003 0306 	and.w	r3, r3, #6
 802a840:	2b04      	cmp	r3, #4
 802a842:	bf08      	it	eq
 802a844:	1aad      	subeq	r5, r5, r2
 802a846:	68a3      	ldr	r3, [r4, #8]
 802a848:	6922      	ldr	r2, [r4, #16]
 802a84a:	bf0c      	ite	eq
 802a84c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802a850:	2500      	movne	r5, #0
 802a852:	4293      	cmp	r3, r2
 802a854:	bfc4      	itt	gt
 802a856:	1a9b      	subgt	r3, r3, r2
 802a858:	18ed      	addgt	r5, r5, r3
 802a85a:	2600      	movs	r6, #0
 802a85c:	341a      	adds	r4, #26
 802a85e:	42b5      	cmp	r5, r6
 802a860:	d11a      	bne.n	802a898 <_printf_common+0xc8>
 802a862:	2000      	movs	r0, #0
 802a864:	e008      	b.n	802a878 <_printf_common+0xa8>
 802a866:	2301      	movs	r3, #1
 802a868:	4652      	mov	r2, sl
 802a86a:	4649      	mov	r1, r9
 802a86c:	4638      	mov	r0, r7
 802a86e:	47c0      	blx	r8
 802a870:	3001      	adds	r0, #1
 802a872:	d103      	bne.n	802a87c <_printf_common+0xac>
 802a874:	f04f 30ff 	mov.w	r0, #4294967295
 802a878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802a87c:	3501      	adds	r5, #1
 802a87e:	e7c6      	b.n	802a80e <_printf_common+0x3e>
 802a880:	18e1      	adds	r1, r4, r3
 802a882:	1c5a      	adds	r2, r3, #1
 802a884:	2030      	movs	r0, #48	; 0x30
 802a886:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802a88a:	4422      	add	r2, r4
 802a88c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802a890:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802a894:	3302      	adds	r3, #2
 802a896:	e7c7      	b.n	802a828 <_printf_common+0x58>
 802a898:	2301      	movs	r3, #1
 802a89a:	4622      	mov	r2, r4
 802a89c:	4649      	mov	r1, r9
 802a89e:	4638      	mov	r0, r7
 802a8a0:	47c0      	blx	r8
 802a8a2:	3001      	adds	r0, #1
 802a8a4:	d0e6      	beq.n	802a874 <_printf_common+0xa4>
 802a8a6:	3601      	adds	r6, #1
 802a8a8:	e7d9      	b.n	802a85e <_printf_common+0x8e>
	...

0802a8ac <_printf_i>:
 802a8ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802a8b0:	7e0f      	ldrb	r7, [r1, #24]
 802a8b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802a8b4:	2f78      	cmp	r7, #120	; 0x78
 802a8b6:	4691      	mov	r9, r2
 802a8b8:	4680      	mov	r8, r0
 802a8ba:	460c      	mov	r4, r1
 802a8bc:	469a      	mov	sl, r3
 802a8be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802a8c2:	d807      	bhi.n	802a8d4 <_printf_i+0x28>
 802a8c4:	2f62      	cmp	r7, #98	; 0x62
 802a8c6:	d80a      	bhi.n	802a8de <_printf_i+0x32>
 802a8c8:	2f00      	cmp	r7, #0
 802a8ca:	f000 80d8 	beq.w	802aa7e <_printf_i+0x1d2>
 802a8ce:	2f58      	cmp	r7, #88	; 0x58
 802a8d0:	f000 80a3 	beq.w	802aa1a <_printf_i+0x16e>
 802a8d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a8d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802a8dc:	e03a      	b.n	802a954 <_printf_i+0xa8>
 802a8de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802a8e2:	2b15      	cmp	r3, #21
 802a8e4:	d8f6      	bhi.n	802a8d4 <_printf_i+0x28>
 802a8e6:	a101      	add	r1, pc, #4	; (adr r1, 802a8ec <_printf_i+0x40>)
 802a8e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802a8ec:	0802a945 	.word	0x0802a945
 802a8f0:	0802a959 	.word	0x0802a959
 802a8f4:	0802a8d5 	.word	0x0802a8d5
 802a8f8:	0802a8d5 	.word	0x0802a8d5
 802a8fc:	0802a8d5 	.word	0x0802a8d5
 802a900:	0802a8d5 	.word	0x0802a8d5
 802a904:	0802a959 	.word	0x0802a959
 802a908:	0802a8d5 	.word	0x0802a8d5
 802a90c:	0802a8d5 	.word	0x0802a8d5
 802a910:	0802a8d5 	.word	0x0802a8d5
 802a914:	0802a8d5 	.word	0x0802a8d5
 802a918:	0802aa65 	.word	0x0802aa65
 802a91c:	0802a989 	.word	0x0802a989
 802a920:	0802aa47 	.word	0x0802aa47
 802a924:	0802a8d5 	.word	0x0802a8d5
 802a928:	0802a8d5 	.word	0x0802a8d5
 802a92c:	0802aa87 	.word	0x0802aa87
 802a930:	0802a8d5 	.word	0x0802a8d5
 802a934:	0802a989 	.word	0x0802a989
 802a938:	0802a8d5 	.word	0x0802a8d5
 802a93c:	0802a8d5 	.word	0x0802a8d5
 802a940:	0802aa4f 	.word	0x0802aa4f
 802a944:	682b      	ldr	r3, [r5, #0]
 802a946:	1d1a      	adds	r2, r3, #4
 802a948:	681b      	ldr	r3, [r3, #0]
 802a94a:	602a      	str	r2, [r5, #0]
 802a94c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802a950:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802a954:	2301      	movs	r3, #1
 802a956:	e0a3      	b.n	802aaa0 <_printf_i+0x1f4>
 802a958:	6820      	ldr	r0, [r4, #0]
 802a95a:	6829      	ldr	r1, [r5, #0]
 802a95c:	0606      	lsls	r6, r0, #24
 802a95e:	f101 0304 	add.w	r3, r1, #4
 802a962:	d50a      	bpl.n	802a97a <_printf_i+0xce>
 802a964:	680e      	ldr	r6, [r1, #0]
 802a966:	602b      	str	r3, [r5, #0]
 802a968:	2e00      	cmp	r6, #0
 802a96a:	da03      	bge.n	802a974 <_printf_i+0xc8>
 802a96c:	232d      	movs	r3, #45	; 0x2d
 802a96e:	4276      	negs	r6, r6
 802a970:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802a974:	485e      	ldr	r0, [pc, #376]	; (802aaf0 <_printf_i+0x244>)
 802a976:	230a      	movs	r3, #10
 802a978:	e019      	b.n	802a9ae <_printf_i+0x102>
 802a97a:	680e      	ldr	r6, [r1, #0]
 802a97c:	602b      	str	r3, [r5, #0]
 802a97e:	f010 0f40 	tst.w	r0, #64	; 0x40
 802a982:	bf18      	it	ne
 802a984:	b236      	sxthne	r6, r6
 802a986:	e7ef      	b.n	802a968 <_printf_i+0xbc>
 802a988:	682b      	ldr	r3, [r5, #0]
 802a98a:	6820      	ldr	r0, [r4, #0]
 802a98c:	1d19      	adds	r1, r3, #4
 802a98e:	6029      	str	r1, [r5, #0]
 802a990:	0601      	lsls	r1, r0, #24
 802a992:	d501      	bpl.n	802a998 <_printf_i+0xec>
 802a994:	681e      	ldr	r6, [r3, #0]
 802a996:	e002      	b.n	802a99e <_printf_i+0xf2>
 802a998:	0646      	lsls	r6, r0, #25
 802a99a:	d5fb      	bpl.n	802a994 <_printf_i+0xe8>
 802a99c:	881e      	ldrh	r6, [r3, #0]
 802a99e:	4854      	ldr	r0, [pc, #336]	; (802aaf0 <_printf_i+0x244>)
 802a9a0:	2f6f      	cmp	r7, #111	; 0x6f
 802a9a2:	bf0c      	ite	eq
 802a9a4:	2308      	moveq	r3, #8
 802a9a6:	230a      	movne	r3, #10
 802a9a8:	2100      	movs	r1, #0
 802a9aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802a9ae:	6865      	ldr	r5, [r4, #4]
 802a9b0:	60a5      	str	r5, [r4, #8]
 802a9b2:	2d00      	cmp	r5, #0
 802a9b4:	bfa2      	ittt	ge
 802a9b6:	6821      	ldrge	r1, [r4, #0]
 802a9b8:	f021 0104 	bicge.w	r1, r1, #4
 802a9bc:	6021      	strge	r1, [r4, #0]
 802a9be:	b90e      	cbnz	r6, 802a9c4 <_printf_i+0x118>
 802a9c0:	2d00      	cmp	r5, #0
 802a9c2:	d04d      	beq.n	802aa60 <_printf_i+0x1b4>
 802a9c4:	4615      	mov	r5, r2
 802a9c6:	fbb6 f1f3 	udiv	r1, r6, r3
 802a9ca:	fb03 6711 	mls	r7, r3, r1, r6
 802a9ce:	5dc7      	ldrb	r7, [r0, r7]
 802a9d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 802a9d4:	4637      	mov	r7, r6
 802a9d6:	42bb      	cmp	r3, r7
 802a9d8:	460e      	mov	r6, r1
 802a9da:	d9f4      	bls.n	802a9c6 <_printf_i+0x11a>
 802a9dc:	2b08      	cmp	r3, #8
 802a9de:	d10b      	bne.n	802a9f8 <_printf_i+0x14c>
 802a9e0:	6823      	ldr	r3, [r4, #0]
 802a9e2:	07de      	lsls	r6, r3, #31
 802a9e4:	d508      	bpl.n	802a9f8 <_printf_i+0x14c>
 802a9e6:	6923      	ldr	r3, [r4, #16]
 802a9e8:	6861      	ldr	r1, [r4, #4]
 802a9ea:	4299      	cmp	r1, r3
 802a9ec:	bfde      	ittt	le
 802a9ee:	2330      	movle	r3, #48	; 0x30
 802a9f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 802a9f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 802a9f8:	1b52      	subs	r2, r2, r5
 802a9fa:	6122      	str	r2, [r4, #16]
 802a9fc:	f8cd a000 	str.w	sl, [sp]
 802aa00:	464b      	mov	r3, r9
 802aa02:	aa03      	add	r2, sp, #12
 802aa04:	4621      	mov	r1, r4
 802aa06:	4640      	mov	r0, r8
 802aa08:	f7ff fee2 	bl	802a7d0 <_printf_common>
 802aa0c:	3001      	adds	r0, #1
 802aa0e:	d14c      	bne.n	802aaaa <_printf_i+0x1fe>
 802aa10:	f04f 30ff 	mov.w	r0, #4294967295
 802aa14:	b004      	add	sp, #16
 802aa16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802aa1a:	4835      	ldr	r0, [pc, #212]	; (802aaf0 <_printf_i+0x244>)
 802aa1c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 802aa20:	6829      	ldr	r1, [r5, #0]
 802aa22:	6823      	ldr	r3, [r4, #0]
 802aa24:	f851 6b04 	ldr.w	r6, [r1], #4
 802aa28:	6029      	str	r1, [r5, #0]
 802aa2a:	061d      	lsls	r5, r3, #24
 802aa2c:	d514      	bpl.n	802aa58 <_printf_i+0x1ac>
 802aa2e:	07df      	lsls	r7, r3, #31
 802aa30:	bf44      	itt	mi
 802aa32:	f043 0320 	orrmi.w	r3, r3, #32
 802aa36:	6023      	strmi	r3, [r4, #0]
 802aa38:	b91e      	cbnz	r6, 802aa42 <_printf_i+0x196>
 802aa3a:	6823      	ldr	r3, [r4, #0]
 802aa3c:	f023 0320 	bic.w	r3, r3, #32
 802aa40:	6023      	str	r3, [r4, #0]
 802aa42:	2310      	movs	r3, #16
 802aa44:	e7b0      	b.n	802a9a8 <_printf_i+0xfc>
 802aa46:	6823      	ldr	r3, [r4, #0]
 802aa48:	f043 0320 	orr.w	r3, r3, #32
 802aa4c:	6023      	str	r3, [r4, #0]
 802aa4e:	2378      	movs	r3, #120	; 0x78
 802aa50:	4828      	ldr	r0, [pc, #160]	; (802aaf4 <_printf_i+0x248>)
 802aa52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802aa56:	e7e3      	b.n	802aa20 <_printf_i+0x174>
 802aa58:	0659      	lsls	r1, r3, #25
 802aa5a:	bf48      	it	mi
 802aa5c:	b2b6      	uxthmi	r6, r6
 802aa5e:	e7e6      	b.n	802aa2e <_printf_i+0x182>
 802aa60:	4615      	mov	r5, r2
 802aa62:	e7bb      	b.n	802a9dc <_printf_i+0x130>
 802aa64:	682b      	ldr	r3, [r5, #0]
 802aa66:	6826      	ldr	r6, [r4, #0]
 802aa68:	6961      	ldr	r1, [r4, #20]
 802aa6a:	1d18      	adds	r0, r3, #4
 802aa6c:	6028      	str	r0, [r5, #0]
 802aa6e:	0635      	lsls	r5, r6, #24
 802aa70:	681b      	ldr	r3, [r3, #0]
 802aa72:	d501      	bpl.n	802aa78 <_printf_i+0x1cc>
 802aa74:	6019      	str	r1, [r3, #0]
 802aa76:	e002      	b.n	802aa7e <_printf_i+0x1d2>
 802aa78:	0670      	lsls	r0, r6, #25
 802aa7a:	d5fb      	bpl.n	802aa74 <_printf_i+0x1c8>
 802aa7c:	8019      	strh	r1, [r3, #0]
 802aa7e:	2300      	movs	r3, #0
 802aa80:	6123      	str	r3, [r4, #16]
 802aa82:	4615      	mov	r5, r2
 802aa84:	e7ba      	b.n	802a9fc <_printf_i+0x150>
 802aa86:	682b      	ldr	r3, [r5, #0]
 802aa88:	1d1a      	adds	r2, r3, #4
 802aa8a:	602a      	str	r2, [r5, #0]
 802aa8c:	681d      	ldr	r5, [r3, #0]
 802aa8e:	6862      	ldr	r2, [r4, #4]
 802aa90:	2100      	movs	r1, #0
 802aa92:	4628      	mov	r0, r5
 802aa94:	f7d5 fbdc 	bl	8000250 <memchr>
 802aa98:	b108      	cbz	r0, 802aa9e <_printf_i+0x1f2>
 802aa9a:	1b40      	subs	r0, r0, r5
 802aa9c:	6060      	str	r0, [r4, #4]
 802aa9e:	6863      	ldr	r3, [r4, #4]
 802aaa0:	6123      	str	r3, [r4, #16]
 802aaa2:	2300      	movs	r3, #0
 802aaa4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802aaa8:	e7a8      	b.n	802a9fc <_printf_i+0x150>
 802aaaa:	6923      	ldr	r3, [r4, #16]
 802aaac:	462a      	mov	r2, r5
 802aaae:	4649      	mov	r1, r9
 802aab0:	4640      	mov	r0, r8
 802aab2:	47d0      	blx	sl
 802aab4:	3001      	adds	r0, #1
 802aab6:	d0ab      	beq.n	802aa10 <_printf_i+0x164>
 802aab8:	6823      	ldr	r3, [r4, #0]
 802aaba:	079b      	lsls	r3, r3, #30
 802aabc:	d413      	bmi.n	802aae6 <_printf_i+0x23a>
 802aabe:	68e0      	ldr	r0, [r4, #12]
 802aac0:	9b03      	ldr	r3, [sp, #12]
 802aac2:	4298      	cmp	r0, r3
 802aac4:	bfb8      	it	lt
 802aac6:	4618      	movlt	r0, r3
 802aac8:	e7a4      	b.n	802aa14 <_printf_i+0x168>
 802aaca:	2301      	movs	r3, #1
 802aacc:	4632      	mov	r2, r6
 802aace:	4649      	mov	r1, r9
 802aad0:	4640      	mov	r0, r8
 802aad2:	47d0      	blx	sl
 802aad4:	3001      	adds	r0, #1
 802aad6:	d09b      	beq.n	802aa10 <_printf_i+0x164>
 802aad8:	3501      	adds	r5, #1
 802aada:	68e3      	ldr	r3, [r4, #12]
 802aadc:	9903      	ldr	r1, [sp, #12]
 802aade:	1a5b      	subs	r3, r3, r1
 802aae0:	42ab      	cmp	r3, r5
 802aae2:	dcf2      	bgt.n	802aaca <_printf_i+0x21e>
 802aae4:	e7eb      	b.n	802aabe <_printf_i+0x212>
 802aae6:	2500      	movs	r5, #0
 802aae8:	f104 0619 	add.w	r6, r4, #25
 802aaec:	e7f5      	b.n	802aada <_printf_i+0x22e>
 802aaee:	bf00      	nop
 802aaf0:	08030dad 	.word	0x08030dad
 802aaf4:	08030dbe 	.word	0x08030dbe

0802aaf8 <_sbrk_r>:
 802aaf8:	b538      	push	{r3, r4, r5, lr}
 802aafa:	4d06      	ldr	r5, [pc, #24]	; (802ab14 <_sbrk_r+0x1c>)
 802aafc:	2300      	movs	r3, #0
 802aafe:	4604      	mov	r4, r0
 802ab00:	4608      	mov	r0, r1
 802ab02:	602b      	str	r3, [r5, #0]
 802ab04:	f7d7 fc6a 	bl	80023dc <_sbrk>
 802ab08:	1c43      	adds	r3, r0, #1
 802ab0a:	d102      	bne.n	802ab12 <_sbrk_r+0x1a>
 802ab0c:	682b      	ldr	r3, [r5, #0]
 802ab0e:	b103      	cbz	r3, 802ab12 <_sbrk_r+0x1a>
 802ab10:	6023      	str	r3, [r4, #0]
 802ab12:	bd38      	pop	{r3, r4, r5, pc}
 802ab14:	2003c58c 	.word	0x2003c58c

0802ab18 <_raise_r>:
 802ab18:	291f      	cmp	r1, #31
 802ab1a:	b538      	push	{r3, r4, r5, lr}
 802ab1c:	4604      	mov	r4, r0
 802ab1e:	460d      	mov	r5, r1
 802ab20:	d904      	bls.n	802ab2c <_raise_r+0x14>
 802ab22:	2316      	movs	r3, #22
 802ab24:	6003      	str	r3, [r0, #0]
 802ab26:	f04f 30ff 	mov.w	r0, #4294967295
 802ab2a:	bd38      	pop	{r3, r4, r5, pc}
 802ab2c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 802ab2e:	b112      	cbz	r2, 802ab36 <_raise_r+0x1e>
 802ab30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802ab34:	b94b      	cbnz	r3, 802ab4a <_raise_r+0x32>
 802ab36:	4620      	mov	r0, r4
 802ab38:	f000 f830 	bl	802ab9c <_getpid_r>
 802ab3c:	462a      	mov	r2, r5
 802ab3e:	4601      	mov	r1, r0
 802ab40:	4620      	mov	r0, r4
 802ab42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802ab46:	f000 b817 	b.w	802ab78 <_kill_r>
 802ab4a:	2b01      	cmp	r3, #1
 802ab4c:	d00a      	beq.n	802ab64 <_raise_r+0x4c>
 802ab4e:	1c59      	adds	r1, r3, #1
 802ab50:	d103      	bne.n	802ab5a <_raise_r+0x42>
 802ab52:	2316      	movs	r3, #22
 802ab54:	6003      	str	r3, [r0, #0]
 802ab56:	2001      	movs	r0, #1
 802ab58:	e7e7      	b.n	802ab2a <_raise_r+0x12>
 802ab5a:	2400      	movs	r4, #0
 802ab5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802ab60:	4628      	mov	r0, r5
 802ab62:	4798      	blx	r3
 802ab64:	2000      	movs	r0, #0
 802ab66:	e7e0      	b.n	802ab2a <_raise_r+0x12>

0802ab68 <raise>:
 802ab68:	4b02      	ldr	r3, [pc, #8]	; (802ab74 <raise+0xc>)
 802ab6a:	4601      	mov	r1, r0
 802ab6c:	6818      	ldr	r0, [r3, #0]
 802ab6e:	f7ff bfd3 	b.w	802ab18 <_raise_r>
 802ab72:	bf00      	nop
 802ab74:	200000bc 	.word	0x200000bc

0802ab78 <_kill_r>:
 802ab78:	b538      	push	{r3, r4, r5, lr}
 802ab7a:	4d07      	ldr	r5, [pc, #28]	; (802ab98 <_kill_r+0x20>)
 802ab7c:	2300      	movs	r3, #0
 802ab7e:	4604      	mov	r4, r0
 802ab80:	4608      	mov	r0, r1
 802ab82:	4611      	mov	r1, r2
 802ab84:	602b      	str	r3, [r5, #0]
 802ab86:	f7d7 fba1 	bl	80022cc <_kill>
 802ab8a:	1c43      	adds	r3, r0, #1
 802ab8c:	d102      	bne.n	802ab94 <_kill_r+0x1c>
 802ab8e:	682b      	ldr	r3, [r5, #0]
 802ab90:	b103      	cbz	r3, 802ab94 <_kill_r+0x1c>
 802ab92:	6023      	str	r3, [r4, #0]
 802ab94:	bd38      	pop	{r3, r4, r5, pc}
 802ab96:	bf00      	nop
 802ab98:	2003c58c 	.word	0x2003c58c

0802ab9c <_getpid_r>:
 802ab9c:	f7d7 bb8e 	b.w	80022bc <_getpid>

0802aba0 <siscanf>:
 802aba0:	b40e      	push	{r1, r2, r3}
 802aba2:	b510      	push	{r4, lr}
 802aba4:	b09f      	sub	sp, #124	; 0x7c
 802aba6:	ac21      	add	r4, sp, #132	; 0x84
 802aba8:	f44f 7101 	mov.w	r1, #516	; 0x204
 802abac:	f854 2b04 	ldr.w	r2, [r4], #4
 802abb0:	9201      	str	r2, [sp, #4]
 802abb2:	f8ad 101c 	strh.w	r1, [sp, #28]
 802abb6:	9004      	str	r0, [sp, #16]
 802abb8:	9008      	str	r0, [sp, #32]
 802abba:	f7d5 fb41 	bl	8000240 <strlen>
 802abbe:	4b0c      	ldr	r3, [pc, #48]	; (802abf0 <siscanf+0x50>)
 802abc0:	9005      	str	r0, [sp, #20]
 802abc2:	9009      	str	r0, [sp, #36]	; 0x24
 802abc4:	930d      	str	r3, [sp, #52]	; 0x34
 802abc6:	480b      	ldr	r0, [pc, #44]	; (802abf4 <siscanf+0x54>)
 802abc8:	9a01      	ldr	r2, [sp, #4]
 802abca:	6800      	ldr	r0, [r0, #0]
 802abcc:	9403      	str	r4, [sp, #12]
 802abce:	2300      	movs	r3, #0
 802abd0:	9311      	str	r3, [sp, #68]	; 0x44
 802abd2:	9316      	str	r3, [sp, #88]	; 0x58
 802abd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802abd8:	f8ad 301e 	strh.w	r3, [sp, #30]
 802abdc:	a904      	add	r1, sp, #16
 802abde:	4623      	mov	r3, r4
 802abe0:	f001 fcfe 	bl	802c5e0 <__ssvfiscanf_r>
 802abe4:	b01f      	add	sp, #124	; 0x7c
 802abe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802abea:	b003      	add	sp, #12
 802abec:	4770      	bx	lr
 802abee:	bf00      	nop
 802abf0:	0802ac1b 	.word	0x0802ac1b
 802abf4:	200000bc 	.word	0x200000bc

0802abf8 <__sread>:
 802abf8:	b510      	push	{r4, lr}
 802abfa:	460c      	mov	r4, r1
 802abfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ac00:	f001 ffb8 	bl	802cb74 <_read_r>
 802ac04:	2800      	cmp	r0, #0
 802ac06:	bfab      	itete	ge
 802ac08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802ac0a:	89a3      	ldrhlt	r3, [r4, #12]
 802ac0c:	181b      	addge	r3, r3, r0
 802ac0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802ac12:	bfac      	ite	ge
 802ac14:	6563      	strge	r3, [r4, #84]	; 0x54
 802ac16:	81a3      	strhlt	r3, [r4, #12]
 802ac18:	bd10      	pop	{r4, pc}

0802ac1a <__seofread>:
 802ac1a:	2000      	movs	r0, #0
 802ac1c:	4770      	bx	lr

0802ac1e <__swrite>:
 802ac1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ac22:	461f      	mov	r7, r3
 802ac24:	898b      	ldrh	r3, [r1, #12]
 802ac26:	05db      	lsls	r3, r3, #23
 802ac28:	4605      	mov	r5, r0
 802ac2a:	460c      	mov	r4, r1
 802ac2c:	4616      	mov	r6, r2
 802ac2e:	d505      	bpl.n	802ac3c <__swrite+0x1e>
 802ac30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ac34:	2302      	movs	r3, #2
 802ac36:	2200      	movs	r2, #0
 802ac38:	f001 fbb2 	bl	802c3a0 <_lseek_r>
 802ac3c:	89a3      	ldrh	r3, [r4, #12]
 802ac3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802ac42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802ac46:	81a3      	strh	r3, [r4, #12]
 802ac48:	4632      	mov	r2, r6
 802ac4a:	463b      	mov	r3, r7
 802ac4c:	4628      	mov	r0, r5
 802ac4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802ac52:	f000 bfa5 	b.w	802bba0 <_write_r>

0802ac56 <__sseek>:
 802ac56:	b510      	push	{r4, lr}
 802ac58:	460c      	mov	r4, r1
 802ac5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ac5e:	f001 fb9f 	bl	802c3a0 <_lseek_r>
 802ac62:	1c43      	adds	r3, r0, #1
 802ac64:	89a3      	ldrh	r3, [r4, #12]
 802ac66:	bf15      	itete	ne
 802ac68:	6560      	strne	r0, [r4, #84]	; 0x54
 802ac6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802ac6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802ac72:	81a3      	strheq	r3, [r4, #12]
 802ac74:	bf18      	it	ne
 802ac76:	81a3      	strhne	r3, [r4, #12]
 802ac78:	bd10      	pop	{r4, pc}

0802ac7a <__sclose>:
 802ac7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ac7e:	f001 b871 	b.w	802bd64 <_close_r>

0802ac82 <strncmp>:
 802ac82:	b510      	push	{r4, lr}
 802ac84:	b17a      	cbz	r2, 802aca6 <strncmp+0x24>
 802ac86:	4603      	mov	r3, r0
 802ac88:	3901      	subs	r1, #1
 802ac8a:	1884      	adds	r4, r0, r2
 802ac8c:	f813 0b01 	ldrb.w	r0, [r3], #1
 802ac90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 802ac94:	4290      	cmp	r0, r2
 802ac96:	d101      	bne.n	802ac9c <strncmp+0x1a>
 802ac98:	42a3      	cmp	r3, r4
 802ac9a:	d101      	bne.n	802aca0 <strncmp+0x1e>
 802ac9c:	1a80      	subs	r0, r0, r2
 802ac9e:	bd10      	pop	{r4, pc}
 802aca0:	2800      	cmp	r0, #0
 802aca2:	d1f3      	bne.n	802ac8c <strncmp+0xa>
 802aca4:	e7fa      	b.n	802ac9c <strncmp+0x1a>
 802aca6:	4610      	mov	r0, r2
 802aca8:	e7f9      	b.n	802ac9e <strncmp+0x1c>

0802acaa <strncpy>:
 802acaa:	b510      	push	{r4, lr}
 802acac:	3901      	subs	r1, #1
 802acae:	4603      	mov	r3, r0
 802acb0:	b132      	cbz	r2, 802acc0 <strncpy+0x16>
 802acb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802acb6:	f803 4b01 	strb.w	r4, [r3], #1
 802acba:	3a01      	subs	r2, #1
 802acbc:	2c00      	cmp	r4, #0
 802acbe:	d1f7      	bne.n	802acb0 <strncpy+0x6>
 802acc0:	441a      	add	r2, r3
 802acc2:	2100      	movs	r1, #0
 802acc4:	4293      	cmp	r3, r2
 802acc6:	d100      	bne.n	802acca <strncpy+0x20>
 802acc8:	bd10      	pop	{r4, pc}
 802acca:	f803 1b01 	strb.w	r1, [r3], #1
 802acce:	e7f9      	b.n	802acc4 <strncpy+0x1a>

0802acd0 <is_leap_year>:
 802acd0:	0783      	lsls	r3, r0, #30
 802acd2:	d10f      	bne.n	802acf4 <is_leap_year+0x24>
 802acd4:	2264      	movs	r2, #100	; 0x64
 802acd6:	fb90 f3f2 	sdiv	r3, r0, r2
 802acda:	fb02 0313 	mls	r3, r2, r3, r0
 802acde:	b95b      	cbnz	r3, 802acf8 <is_leap_year+0x28>
 802ace0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802ace4:	fb90 f2f3 	sdiv	r2, r0, r3
 802ace8:	fb03 0012 	mls	r0, r3, r2, r0
 802acec:	fab0 f080 	clz	r0, r0
 802acf0:	0940      	lsrs	r0, r0, #5
 802acf2:	4770      	bx	lr
 802acf4:	2000      	movs	r0, #0
 802acf6:	4770      	bx	lr
 802acf8:	2001      	movs	r0, #1
 802acfa:	4770      	bx	lr

0802acfc <first_day>:
 802acfc:	b570      	push	{r4, r5, r6, lr}
 802acfe:	2104      	movs	r1, #4
 802ad00:	4604      	mov	r4, r0
 802ad02:	f240 75b1 	movw	r5, #1969	; 0x7b1
 802ad06:	2607      	movs	r6, #7
 802ad08:	3c01      	subs	r4, #1
 802ad0a:	42ac      	cmp	r4, r5
 802ad0c:	dc01      	bgt.n	802ad12 <first_day+0x16>
 802ad0e:	4608      	mov	r0, r1
 802ad10:	bd70      	pop	{r4, r5, r6, pc}
 802ad12:	4620      	mov	r0, r4
 802ad14:	f7ff ffdc 	bl	802acd0 <is_leap_year>
 802ad18:	f201 136d 	addw	r3, r1, #365	; 0x16d
 802ad1c:	1819      	adds	r1, r3, r0
 802ad1e:	fb91 f3f6 	sdiv	r3, r1, r6
 802ad22:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802ad26:	1ac9      	subs	r1, r1, r3
 802ad28:	e7ee      	b.n	802ad08 <first_day+0xc>

0802ad2a <match_string>:
 802ad2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ad2e:	4605      	mov	r5, r0
 802ad30:	4690      	mov	r8, r2
 802ad32:	1f0c      	subs	r4, r1, #4
 802ad34:	2600      	movs	r6, #0
 802ad36:	f854 0f04 	ldr.w	r0, [r4, #4]!
 802ad3a:	b910      	cbnz	r0, 802ad42 <match_string+0x18>
 802ad3c:	f04f 36ff 	mov.w	r6, #4294967295
 802ad40:	e00c      	b.n	802ad5c <match_string+0x32>
 802ad42:	f7d5 fa7d 	bl	8000240 <strlen>
 802ad46:	6821      	ldr	r1, [r4, #0]
 802ad48:	4607      	mov	r7, r0
 802ad4a:	4602      	mov	r2, r0
 802ad4c:	4643      	mov	r3, r8
 802ad4e:	6828      	ldr	r0, [r5, #0]
 802ad50:	f001 ff62 	bl	802cc18 <strncasecmp_l>
 802ad54:	b928      	cbnz	r0, 802ad62 <match_string+0x38>
 802ad56:	6828      	ldr	r0, [r5, #0]
 802ad58:	4438      	add	r0, r7
 802ad5a:	6028      	str	r0, [r5, #0]
 802ad5c:	4630      	mov	r0, r6
 802ad5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802ad62:	3601      	adds	r6, #1
 802ad64:	e7e7      	b.n	802ad36 <match_string+0xc>
	...

0802ad68 <strptime_l>:
 802ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ad6c:	b087      	sub	sp, #28
 802ad6e:	f8df 9334 	ldr.w	r9, [pc, #820]	; 802b0a4 <strptime_l+0x33c>
 802ad72:	4fc5      	ldr	r7, [pc, #788]	; (802b088 <strptime_l+0x320>)
 802ad74:	9001      	str	r0, [sp, #4]
 802ad76:	460e      	mov	r6, r1
 802ad78:	4614      	mov	r4, r2
 802ad7a:	461d      	mov	r5, r3
 802ad7c:	f04f 0800 	mov.w	r8, #0
 802ad80:	7832      	ldrb	r2, [r6, #0]
 802ad82:	bb7a      	cbnz	r2, 802ade4 <strptime_l+0x7c>
 802ad84:	f008 0307 	and.w	r3, r8, #7
 802ad88:	2b07      	cmp	r3, #7
 802ad8a:	f040 8311 	bne.w	802b3b0 <strptime_l+0x648>
 802ad8e:	f018 0f10 	tst.w	r8, #16
 802ad92:	d112      	bne.n	802adba <strptime_l+0x52>
 802ad94:	4bbd      	ldr	r3, [pc, #756]	; (802b08c <strptime_l+0x324>)
 802ad96:	6925      	ldr	r5, [r4, #16]
 802ad98:	6960      	ldr	r0, [r4, #20]
 802ad9a:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
 802ad9e:	68e3      	ldr	r3, [r4, #12]
 802ada0:	4419      	add	r1, r3
 802ada2:	61e1      	str	r1, [r4, #28]
 802ada4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802ada8:	f7ff ff92 	bl	802acd0 <is_leap_year>
 802adac:	b108      	cbz	r0, 802adb2 <strptime_l+0x4a>
 802adae:	2d01      	cmp	r5, #1
 802adb0:	dc01      	bgt.n	802adb6 <strptime_l+0x4e>
 802adb2:	3901      	subs	r1, #1
 802adb4:	61e1      	str	r1, [r4, #28]
 802adb6:	f048 0810 	orr.w	r8, r8, #16
 802adba:	f008 081c 	and.w	r8, r8, #28
 802adbe:	f1b8 0f14 	cmp.w	r8, #20
 802adc2:	d10d      	bne.n	802ade0 <strptime_l+0x78>
 802adc4:	6960      	ldr	r0, [r4, #20]
 802adc6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802adca:	f7ff ff97 	bl	802acfc <first_day>
 802adce:	69e3      	ldr	r3, [r4, #28]
 802add0:	4418      	add	r0, r3
 802add2:	2307      	movs	r3, #7
 802add4:	fb90 f3f3 	sdiv	r3, r0, r3
 802add8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802addc:	1ac0      	subs	r0, r0, r3
 802adde:	61a0      	str	r0, [r4, #24]
 802ade0:	9801      	ldr	r0, [sp, #4]
 802ade2:	e221      	b.n	802b228 <strptime_l+0x4c0>
 802ade4:	f812 3009 	ldrb.w	r3, [r2, r9]
 802ade8:	0719      	lsls	r1, r3, #28
 802adea:	d50a      	bpl.n	802ae02 <strptime_l+0x9a>
 802adec:	9b01      	ldr	r3, [sp, #4]
 802adee:	781a      	ldrb	r2, [r3, #0]
 802adf0:	f819 2002 	ldrb.w	r2, [r9, r2]
 802adf4:	0712      	lsls	r2, r2, #28
 802adf6:	d401      	bmi.n	802adfc <strptime_l+0x94>
 802adf8:	3601      	adds	r6, #1
 802adfa:	e7c1      	b.n	802ad80 <strptime_l+0x18>
 802adfc:	3301      	adds	r3, #1
 802adfe:	9301      	str	r3, [sp, #4]
 802ae00:	e7f4      	b.n	802adec <strptime_l+0x84>
 802ae02:	2a25      	cmp	r2, #37	; 0x25
 802ae04:	f040 82ca 	bne.w	802b39c <strptime_l+0x634>
 802ae08:	7873      	ldrb	r3, [r6, #1]
 802ae0a:	2b00      	cmp	r3, #0
 802ae0c:	f000 82c6 	beq.w	802b39c <strptime_l+0x634>
 802ae10:	2b45      	cmp	r3, #69	; 0x45
 802ae12:	f000 80bb 	beq.w	802af8c <strptime_l+0x224>
 802ae16:	2b4f      	cmp	r3, #79	; 0x4f
 802ae18:	f000 80b8 	beq.w	802af8c <strptime_l+0x224>
 802ae1c:	3601      	adds	r6, #1
 802ae1e:	f1a3 0225 	sub.w	r2, r3, #37	; 0x25
 802ae22:	b2d1      	uxtb	r1, r2
 802ae24:	2954      	cmp	r1, #84	; 0x54
 802ae26:	f200 82ac 	bhi.w	802b382 <strptime_l+0x61a>
 802ae2a:	2a54      	cmp	r2, #84	; 0x54
 802ae2c:	f200 82a9 	bhi.w	802b382 <strptime_l+0x61a>
 802ae30:	a101      	add	r1, pc, #4	; (adr r1, 802ae38 <strptime_l+0xd0>)
 802ae32:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802ae36:	bf00      	nop
 802ae38:	0802b37b 	.word	0x0802b37b
 802ae3c:	0802b383 	.word	0x0802b383
 802ae40:	0802b383 	.word	0x0802b383
 802ae44:	0802b383 	.word	0x0802b383
 802ae48:	0802b383 	.word	0x0802b383
 802ae4c:	0802b383 	.word	0x0802b383
 802ae50:	0802b383 	.word	0x0802b383
 802ae54:	0802b383 	.word	0x0802b383
 802ae58:	0802b383 	.word	0x0802b383
 802ae5c:	0802b383 	.word	0x0802b383
 802ae60:	0802b383 	.word	0x0802b383
 802ae64:	0802b383 	.word	0x0802b383
 802ae68:	0802b383 	.word	0x0802b383
 802ae6c:	0802b383 	.word	0x0802b383
 802ae70:	0802b383 	.word	0x0802b383
 802ae74:	0802b383 	.word	0x0802b383
 802ae78:	0802b383 	.word	0x0802b383
 802ae7c:	0802b383 	.word	0x0802b383
 802ae80:	0802b383 	.word	0x0802b383
 802ae84:	0802b383 	.word	0x0802b383
 802ae88:	0802b383 	.word	0x0802b383
 802ae8c:	0802b383 	.word	0x0802b383
 802ae90:	0802b383 	.word	0x0802b383
 802ae94:	0802b383 	.word	0x0802b383
 802ae98:	0802b383 	.word	0x0802b383
 802ae9c:	0802b383 	.word	0x0802b383
 802aea0:	0802b383 	.word	0x0802b383
 802aea4:	0802b383 	.word	0x0802b383
 802aea8:	0802af9b 	.word	0x0802af9b
 802aeac:	0802afb9 	.word	0x0802afb9
 802aeb0:	0802afd7 	.word	0x0802afd7
 802aeb4:	0802b015 	.word	0x0802b015
 802aeb8:	0802b383 	.word	0x0802b383
 802aebc:	0802b047 	.word	0x0802b047
 802aec0:	0802b383 	.word	0x0802b383
 802aec4:	0802b06b 	.word	0x0802b06b
 802aec8:	0802b0a9 	.word	0x0802b0a9
 802aecc:	0802b383 	.word	0x0802b383
 802aed0:	0802b383 	.word	0x0802b383
 802aed4:	0802b383 	.word	0x0802b383
 802aed8:	0802b107 	.word	0x0802b107
 802aedc:	0802b383 	.word	0x0802b383
 802aee0:	0802b383 	.word	0x0802b383
 802aee4:	0802b383 	.word	0x0802b383
 802aee8:	0802b383 	.word	0x0802b383
 802aeec:	0802b167 	.word	0x0802b167
 802aef0:	0802b1cf 	.word	0x0802b1cf
 802aef4:	0802b1ef 	.word	0x0802b1ef
 802aef8:	0802b22f 	.word	0x0802b22f
 802aefc:	0802b26d 	.word	0x0802b26d
 802af00:	0802b2bf 	.word	0x0802b2bf
 802af04:	0802b331 	.word	0x0802b331
 802af08:	0802b361 	.word	0x0802b361
 802af0c:	0802adf9 	.word	0x0802adf9
 802af10:	0802b383 	.word	0x0802b383
 802af14:	0802b383 	.word	0x0802b383
 802af18:	0802b383 	.word	0x0802b383
 802af1c:	0802b383 	.word	0x0802b383
 802af20:	0802b383 	.word	0x0802b383
 802af24:	0802b383 	.word	0x0802b383
 802af28:	0802afb3 	.word	0x0802afb3
 802af2c:	0802afd1 	.word	0x0802afd1
 802af30:	0802aff7 	.word	0x0802aff7
 802af34:	0802b027 	.word	0x0802b027
 802af38:	0802b027 	.word	0x0802b027
 802af3c:	0802b383 	.word	0x0802b383
 802af40:	0802b383 	.word	0x0802b383
 802af44:	0802afd1 	.word	0x0802afd1
 802af48:	0802b383 	.word	0x0802b383
 802af4c:	0802b0c7 	.word	0x0802b0c7
 802af50:	0802b06b 	.word	0x0802b06b
 802af54:	0802b0a9 	.word	0x0802b0a9
 802af58:	0802b0e9 	.word	0x0802b0e9
 802af5c:	0802b121 	.word	0x0802b121
 802af60:	0802b383 	.word	0x0802b383
 802af64:	0802b12d 	.word	0x0802b12d
 802af68:	0802b383 	.word	0x0802b383
 802af6c:	0802b14f 	.word	0x0802b14f
 802af70:	0802b16f 	.word	0x0802b16f
 802af74:	0802b1e7 	.word	0x0802b1e7
 802af78:	0802b1f7 	.word	0x0802b1f7
 802af7c:	0802b383 	.word	0x0802b383
 802af80:	0802b213 	.word	0x0802b213
 802af84:	0802b327 	.word	0x0802b327
 802af88:	0802b33b 	.word	0x0802b33b
 802af8c:	78b3      	ldrb	r3, [r6, #2]
 802af8e:	1cb2      	adds	r2, r6, #2
 802af90:	2b00      	cmp	r3, #0
 802af92:	f000 81f1 	beq.w	802b378 <strptime_l+0x610>
 802af96:	4616      	mov	r6, r2
 802af98:	e741      	b.n	802ae1e <strptime_l+0xb6>
 802af9a:	493d      	ldr	r1, [pc, #244]	; (802b090 <strptime_l+0x328>)
 802af9c:	462a      	mov	r2, r5
 802af9e:	a801      	add	r0, sp, #4
 802afa0:	f7ff fec3 	bl	802ad2a <match_string>
 802afa4:	2800      	cmp	r0, #0
 802afa6:	f2c0 813e 	blt.w	802b226 <strptime_l+0x4be>
 802afaa:	61a0      	str	r0, [r4, #24]
 802afac:	f048 0808 	orr.w	r8, r8, #8
 802afb0:	e722      	b.n	802adf8 <strptime_l+0x90>
 802afb2:	4938      	ldr	r1, [pc, #224]	; (802b094 <strptime_l+0x32c>)
 802afb4:	462a      	mov	r2, r5
 802afb6:	e7f2      	b.n	802af9e <strptime_l+0x236>
 802afb8:	4937      	ldr	r1, [pc, #220]	; (802b098 <strptime_l+0x330>)
 802afba:	462a      	mov	r2, r5
 802afbc:	a801      	add	r0, sp, #4
 802afbe:	f7ff feb4 	bl	802ad2a <match_string>
 802afc2:	2800      	cmp	r0, #0
 802afc4:	f2c0 812f 	blt.w	802b226 <strptime_l+0x4be>
 802afc8:	6120      	str	r0, [r4, #16]
 802afca:	f048 0802 	orr.w	r8, r8, #2
 802afce:	e713      	b.n	802adf8 <strptime_l+0x90>
 802afd0:	462a      	mov	r2, r5
 802afd2:	4639      	mov	r1, r7
 802afd4:	e7f2      	b.n	802afbc <strptime_l+0x254>
 802afd6:	462b      	mov	r3, r5
 802afd8:	220a      	movs	r2, #10
 802afda:	9801      	ldr	r0, [sp, #4]
 802afdc:	a903      	add	r1, sp, #12
 802afde:	f000 faa7 	bl	802b530 <strtol_l>
 802afe2:	9b03      	ldr	r3, [sp, #12]
 802afe4:	9a01      	ldr	r2, [sp, #4]
 802afe6:	4293      	cmp	r3, r2
 802afe8:	f000 811d 	beq.w	802b226 <strptime_l+0x4be>
 802afec:	2264      	movs	r2, #100	; 0x64
 802afee:	4350      	muls	r0, r2
 802aff0:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
 802aff4:	e1af      	b.n	802b356 <strptime_l+0x5ee>
 802aff6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 802affa:	9801      	ldr	r0, [sp, #4]
 802affc:	462b      	mov	r3, r5
 802affe:	4622      	mov	r2, r4
 802b000:	f7ff feb2 	bl	802ad68 <strptime_l>
 802b004:	9003      	str	r0, [sp, #12]
 802b006:	2800      	cmp	r0, #0
 802b008:	f000 810d 	beq.w	802b226 <strptime_l+0x4be>
 802b00c:	9001      	str	r0, [sp, #4]
 802b00e:	f048 080f 	orr.w	r8, r8, #15
 802b012:	e6f1      	b.n	802adf8 <strptime_l+0x90>
 802b014:	4921      	ldr	r1, [pc, #132]	; (802b09c <strptime_l+0x334>)
 802b016:	462b      	mov	r3, r5
 802b018:	4622      	mov	r2, r4
 802b01a:	9801      	ldr	r0, [sp, #4]
 802b01c:	f7ff fea4 	bl	802ad68 <strptime_l>
 802b020:	9003      	str	r0, [sp, #12]
 802b022:	b9f0      	cbnz	r0, 802b062 <strptime_l+0x2fa>
 802b024:	e0ff      	b.n	802b226 <strptime_l+0x4be>
 802b026:	462b      	mov	r3, r5
 802b028:	220a      	movs	r2, #10
 802b02a:	9801      	ldr	r0, [sp, #4]
 802b02c:	a903      	add	r1, sp, #12
 802b02e:	f000 fa7f 	bl	802b530 <strtol_l>
 802b032:	9b03      	ldr	r3, [sp, #12]
 802b034:	9a01      	ldr	r2, [sp, #4]
 802b036:	4293      	cmp	r3, r2
 802b038:	f000 80f5 	beq.w	802b226 <strptime_l+0x4be>
 802b03c:	60e0      	str	r0, [r4, #12]
 802b03e:	9301      	str	r3, [sp, #4]
 802b040:	f048 0801 	orr.w	r8, r8, #1
 802b044:	e6d8      	b.n	802adf8 <strptime_l+0x90>
 802b046:	4916      	ldr	r1, [pc, #88]	; (802b0a0 <strptime_l+0x338>)
 802b048:	9801      	ldr	r0, [sp, #4]
 802b04a:	462b      	mov	r3, r5
 802b04c:	4622      	mov	r2, r4
 802b04e:	f7ff fe8b 	bl	802ad68 <strptime_l>
 802b052:	9003      	str	r0, [sp, #12]
 802b054:	2800      	cmp	r0, #0
 802b056:	f000 80e6 	beq.w	802b226 <strptime_l+0x4be>
 802b05a:	9b01      	ldr	r3, [sp, #4]
 802b05c:	4298      	cmp	r0, r3
 802b05e:	f000 80e2 	beq.w	802b226 <strptime_l+0x4be>
 802b062:	9001      	str	r0, [sp, #4]
 802b064:	f048 0807 	orr.w	r8, r8, #7
 802b068:	e6c6      	b.n	802adf8 <strptime_l+0x90>
 802b06a:	462b      	mov	r3, r5
 802b06c:	220a      	movs	r2, #10
 802b06e:	9801      	ldr	r0, [sp, #4]
 802b070:	a903      	add	r1, sp, #12
 802b072:	f000 fa5d 	bl	802b530 <strtol_l>
 802b076:	9b03      	ldr	r3, [sp, #12]
 802b078:	9a01      	ldr	r2, [sp, #4]
 802b07a:	4293      	cmp	r3, r2
 802b07c:	f000 80d3 	beq.w	802b226 <strptime_l+0x4be>
 802b080:	60a0      	str	r0, [r4, #8]
 802b082:	9301      	str	r3, [sp, #4]
 802b084:	e6b8      	b.n	802adf8 <strptime_l+0x90>
 802b086:	bf00      	nop
 802b088:	08030f44 	.word	0x08030f44
 802b08c:	08030df8 	.word	0x08030df8
 802b090:	08030fc0 	.word	0x08030fc0
 802b094:	08030fa4 	.word	0x08030fa4
 802b098:	08030f74 	.word	0x08030f74
 802b09c:	08030dd4 	.word	0x08030dd4
 802b0a0:	08030ddd 	.word	0x08030ddd
 802b0a4:	0803107d 	.word	0x0803107d
 802b0a8:	462b      	mov	r3, r5
 802b0aa:	220a      	movs	r2, #10
 802b0ac:	9801      	ldr	r0, [sp, #4]
 802b0ae:	a903      	add	r1, sp, #12
 802b0b0:	f000 fa3e 	bl	802b530 <strtol_l>
 802b0b4:	9b03      	ldr	r3, [sp, #12]
 802b0b6:	9a01      	ldr	r2, [sp, #4]
 802b0b8:	4293      	cmp	r3, r2
 802b0ba:	f000 80b4 	beq.w	802b226 <strptime_l+0x4be>
 802b0be:	280c      	cmp	r0, #12
 802b0c0:	bf08      	it	eq
 802b0c2:	2000      	moveq	r0, #0
 802b0c4:	e7dc      	b.n	802b080 <strptime_l+0x318>
 802b0c6:	462b      	mov	r3, r5
 802b0c8:	220a      	movs	r2, #10
 802b0ca:	9801      	ldr	r0, [sp, #4]
 802b0cc:	a903      	add	r1, sp, #12
 802b0ce:	f000 fa2f 	bl	802b530 <strtol_l>
 802b0d2:	9b03      	ldr	r3, [sp, #12]
 802b0d4:	9a01      	ldr	r2, [sp, #4]
 802b0d6:	4293      	cmp	r3, r2
 802b0d8:	f000 80a5 	beq.w	802b226 <strptime_l+0x4be>
 802b0dc:	3801      	subs	r0, #1
 802b0de:	61e0      	str	r0, [r4, #28]
 802b0e0:	9301      	str	r3, [sp, #4]
 802b0e2:	f048 0810 	orr.w	r8, r8, #16
 802b0e6:	e687      	b.n	802adf8 <strptime_l+0x90>
 802b0e8:	462b      	mov	r3, r5
 802b0ea:	220a      	movs	r2, #10
 802b0ec:	9801      	ldr	r0, [sp, #4]
 802b0ee:	a903      	add	r1, sp, #12
 802b0f0:	f000 fa1e 	bl	802b530 <strtol_l>
 802b0f4:	9b03      	ldr	r3, [sp, #12]
 802b0f6:	9a01      	ldr	r2, [sp, #4]
 802b0f8:	4293      	cmp	r3, r2
 802b0fa:	f000 8094 	beq.w	802b226 <strptime_l+0x4be>
 802b0fe:	3801      	subs	r0, #1
 802b100:	6120      	str	r0, [r4, #16]
 802b102:	9301      	str	r3, [sp, #4]
 802b104:	e761      	b.n	802afca <strptime_l+0x262>
 802b106:	462b      	mov	r3, r5
 802b108:	220a      	movs	r2, #10
 802b10a:	9801      	ldr	r0, [sp, #4]
 802b10c:	a903      	add	r1, sp, #12
 802b10e:	f000 fa0f 	bl	802b530 <strtol_l>
 802b112:	9b03      	ldr	r3, [sp, #12]
 802b114:	9a01      	ldr	r2, [sp, #4]
 802b116:	4293      	cmp	r3, r2
 802b118:	f000 8085 	beq.w	802b226 <strptime_l+0x4be>
 802b11c:	6060      	str	r0, [r4, #4]
 802b11e:	e7b0      	b.n	802b082 <strptime_l+0x31a>
 802b120:	9b01      	ldr	r3, [sp, #4]
 802b122:	781a      	ldrb	r2, [r3, #0]
 802b124:	2a0a      	cmp	r2, #10
 802b126:	f000 8131 	beq.w	802b38c <strptime_l+0x624>
 802b12a:	e07c      	b.n	802b226 <strptime_l+0x4be>
 802b12c:	499d      	ldr	r1, [pc, #628]	; (802b3a4 <strptime_l+0x63c>)
 802b12e:	462a      	mov	r2, r5
 802b130:	a801      	add	r0, sp, #4
 802b132:	f7ff fdfa 	bl	802ad2a <match_string>
 802b136:	2800      	cmp	r0, #0
 802b138:	db75      	blt.n	802b226 <strptime_l+0x4be>
 802b13a:	68a3      	ldr	r3, [r4, #8]
 802b13c:	b92b      	cbnz	r3, 802b14a <strptime_l+0x3e2>
 802b13e:	2801      	cmp	r0, #1
 802b140:	f47f ae5a 	bne.w	802adf8 <strptime_l+0x90>
 802b144:	230c      	movs	r3, #12
 802b146:	60a3      	str	r3, [r4, #8]
 802b148:	e656      	b.n	802adf8 <strptime_l+0x90>
 802b14a:	330c      	adds	r3, #12
 802b14c:	e7fb      	b.n	802b146 <strptime_l+0x3de>
 802b14e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 802b152:	462b      	mov	r3, r5
 802b154:	4622      	mov	r2, r4
 802b156:	9801      	ldr	r0, [sp, #4]
 802b158:	f7ff fe06 	bl	802ad68 <strptime_l>
 802b15c:	9003      	str	r0, [sp, #12]
 802b15e:	2800      	cmp	r0, #0
 802b160:	d061      	beq.n	802b226 <strptime_l+0x4be>
 802b162:	9001      	str	r0, [sp, #4]
 802b164:	e648      	b.n	802adf8 <strptime_l+0x90>
 802b166:	4990      	ldr	r1, [pc, #576]	; (802b3a8 <strptime_l+0x640>)
 802b168:	462b      	mov	r3, r5
 802b16a:	4622      	mov	r2, r4
 802b16c:	e7f3      	b.n	802b156 <strptime_l+0x3ee>
 802b16e:	f7fe fe21 	bl	8029db4 <__errno>
 802b172:	f8d0 b000 	ldr.w	fp, [r0]
 802b176:	f7fe fe1d 	bl	8029db4 <__errno>
 802b17a:	2300      	movs	r3, #0
 802b17c:	6003      	str	r3, [r0, #0]
 802b17e:	220a      	movs	r2, #10
 802b180:	462b      	mov	r3, r5
 802b182:	9801      	ldr	r0, [sp, #4]
 802b184:	a903      	add	r1, sp, #12
 802b186:	f000 fa73 	bl	802b670 <strtoll_l>
 802b18a:	9a03      	ldr	r2, [sp, #12]
 802b18c:	9b01      	ldr	r3, [sp, #4]
 802b18e:	429a      	cmp	r2, r3
 802b190:	e9cd 0104 	strd	r0, r1, [sp, #16]
 802b194:	4680      	mov	r8, r0
 802b196:	468a      	mov	sl, r1
 802b198:	d045      	beq.n	802b226 <strptime_l+0x4be>
 802b19a:	f7fe fe0b 	bl	8029db4 <__errno>
 802b19e:	6803      	ldr	r3, [r0, #0]
 802b1a0:	2b00      	cmp	r3, #0
 802b1a2:	d140      	bne.n	802b226 <strptime_l+0x4be>
 802b1a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 802b1a8:	4553      	cmp	r3, sl
 802b1aa:	bf08      	it	eq
 802b1ac:	4542      	cmpeq	r2, r8
 802b1ae:	d13a      	bne.n	802b226 <strptime_l+0x4be>
 802b1b0:	4621      	mov	r1, r4
 802b1b2:	a804      	add	r0, sp, #16
 802b1b4:	f000 fffa 	bl	802c1ac <localtime_r>
 802b1b8:	4284      	cmp	r4, r0
 802b1ba:	d134      	bne.n	802b226 <strptime_l+0x4be>
 802b1bc:	f7fe fdfa 	bl	8029db4 <__errno>
 802b1c0:	9b03      	ldr	r3, [sp, #12]
 802b1c2:	f8c0 b000 	str.w	fp, [r0]
 802b1c6:	f04f 081f 	mov.w	r8, #31
 802b1ca:	9301      	str	r3, [sp, #4]
 802b1cc:	e614      	b.n	802adf8 <strptime_l+0x90>
 802b1ce:	462b      	mov	r3, r5
 802b1d0:	220a      	movs	r2, #10
 802b1d2:	9801      	ldr	r0, [sp, #4]
 802b1d4:	a903      	add	r1, sp, #12
 802b1d6:	f000 f9ab 	bl	802b530 <strtol_l>
 802b1da:	9b03      	ldr	r3, [sp, #12]
 802b1dc:	9a01      	ldr	r2, [sp, #4]
 802b1de:	4293      	cmp	r3, r2
 802b1e0:	d021      	beq.n	802b226 <strptime_l+0x4be>
 802b1e2:	6020      	str	r0, [r4, #0]
 802b1e4:	e74d      	b.n	802b082 <strptime_l+0x31a>
 802b1e6:	9b01      	ldr	r3, [sp, #4]
 802b1e8:	781a      	ldrb	r2, [r3, #0]
 802b1ea:	2a09      	cmp	r2, #9
 802b1ec:	e79b      	b.n	802b126 <strptime_l+0x3be>
 802b1ee:	496f      	ldr	r1, [pc, #444]	; (802b3ac <strptime_l+0x644>)
 802b1f0:	462b      	mov	r3, r5
 802b1f2:	4622      	mov	r2, r4
 802b1f4:	e7af      	b.n	802b156 <strptime_l+0x3ee>
 802b1f6:	462b      	mov	r3, r5
 802b1f8:	220a      	movs	r2, #10
 802b1fa:	9801      	ldr	r0, [sp, #4]
 802b1fc:	a903      	add	r1, sp, #12
 802b1fe:	f000 f997 	bl	802b530 <strtol_l>
 802b202:	9b03      	ldr	r3, [sp, #12]
 802b204:	9a01      	ldr	r2, [sp, #4]
 802b206:	4293      	cmp	r3, r2
 802b208:	d00d      	beq.n	802b226 <strptime_l+0x4be>
 802b20a:	3801      	subs	r0, #1
 802b20c:	61a0      	str	r0, [r4, #24]
 802b20e:	9301      	str	r3, [sp, #4]
 802b210:	e6cc      	b.n	802afac <strptime_l+0x244>
 802b212:	462b      	mov	r3, r5
 802b214:	220a      	movs	r2, #10
 802b216:	9801      	ldr	r0, [sp, #4]
 802b218:	a903      	add	r1, sp, #12
 802b21a:	f000 f989 	bl	802b530 <strtol_l>
 802b21e:	9b03      	ldr	r3, [sp, #12]
 802b220:	9a01      	ldr	r2, [sp, #4]
 802b222:	4293      	cmp	r3, r2
 802b224:	d1f2      	bne.n	802b20c <strptime_l+0x4a4>
 802b226:	2000      	movs	r0, #0
 802b228:	b007      	add	sp, #28
 802b22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b22e:	462b      	mov	r3, r5
 802b230:	9801      	ldr	r0, [sp, #4]
 802b232:	220a      	movs	r2, #10
 802b234:	a903      	add	r1, sp, #12
 802b236:	f000 f97b 	bl	802b530 <strtol_l>
 802b23a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802b23e:	9b01      	ldr	r3, [sp, #4]
 802b240:	459b      	cmp	fp, r3
 802b242:	4682      	mov	sl, r0
 802b244:	d0ef      	beq.n	802b226 <strptime_l+0x4be>
 802b246:	6960      	ldr	r0, [r4, #20]
 802b248:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802b24c:	f7ff fd56 	bl	802acfc <first_day>
 802b250:	69a3      	ldr	r3, [r4, #24]
 802b252:	ebca 0aca 	rsb	sl, sl, sl, lsl #3
 802b256:	4453      	add	r3, sl
 802b258:	1a1b      	subs	r3, r3, r0
 802b25a:	2b00      	cmp	r3, #0
 802b25c:	61e3      	str	r3, [r4, #28]
 802b25e:	da02      	bge.n	802b266 <strptime_l+0x4fe>
 802b260:	61a0      	str	r0, [r4, #24]
 802b262:	2300      	movs	r3, #0
 802b264:	61e3      	str	r3, [r4, #28]
 802b266:	f8cd b004 	str.w	fp, [sp, #4]
 802b26a:	e73a      	b.n	802b0e2 <strptime_l+0x37a>
 802b26c:	462b      	mov	r3, r5
 802b26e:	9801      	ldr	r0, [sp, #4]
 802b270:	220a      	movs	r2, #10
 802b272:	a903      	add	r1, sp, #12
 802b274:	f000 f95c 	bl	802b530 <strtol_l>
 802b278:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802b27c:	9b01      	ldr	r3, [sp, #4]
 802b27e:	459b      	cmp	fp, r3
 802b280:	4682      	mov	sl, r0
 802b282:	d0d0      	beq.n	802b226 <strptime_l+0x4be>
 802b284:	6960      	ldr	r0, [r4, #20]
 802b286:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802b28a:	f7ff fd37 	bl	802acfc <first_day>
 802b28e:	2307      	movs	r3, #7
 802b290:	3006      	adds	r0, #6
 802b292:	fb90 f3f3 	sdiv	r3, r0, r3
 802b296:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802b29a:	1ac2      	subs	r2, r0, r3
 802b29c:	2a03      	cmp	r2, #3
 802b29e:	f10a 30ff 	add.w	r0, sl, #4294967295
 802b2a2:	bfcc      	ite	gt
 802b2a4:	2300      	movgt	r3, #0
 802b2a6:	2307      	movle	r3, #7
 802b2a8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 802b2ac:	4403      	add	r3, r0
 802b2ae:	69a0      	ldr	r0, [r4, #24]
 802b2b0:	4403      	add	r3, r0
 802b2b2:	1a9b      	subs	r3, r3, r2
 802b2b4:	2b00      	cmp	r3, #0
 802b2b6:	61e3      	str	r3, [r4, #28]
 802b2b8:	dad5      	bge.n	802b266 <strptime_l+0x4fe>
 802b2ba:	61a2      	str	r2, [r4, #24]
 802b2bc:	e7d1      	b.n	802b262 <strptime_l+0x4fa>
 802b2be:	462b      	mov	r3, r5
 802b2c0:	9801      	ldr	r0, [sp, #4]
 802b2c2:	220a      	movs	r2, #10
 802b2c4:	a903      	add	r1, sp, #12
 802b2c6:	f000 f933 	bl	802b530 <strtol_l>
 802b2ca:	f8dd a00c 	ldr.w	sl, [sp, #12]
 802b2ce:	9b01      	ldr	r3, [sp, #4]
 802b2d0:	459a      	cmp	sl, r3
 802b2d2:	4683      	mov	fp, r0
 802b2d4:	d0a7      	beq.n	802b226 <strptime_l+0x4be>
 802b2d6:	6960      	ldr	r0, [r4, #20]
 802b2d8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802b2dc:	f7ff fd0e 	bl	802acfc <first_day>
 802b2e0:	69a1      	ldr	r1, [r4, #24]
 802b2e2:	3006      	adds	r0, #6
 802b2e4:	f04f 0c07 	mov.w	ip, #7
 802b2e8:	fb90 f2fc 	sdiv	r2, r0, ip
 802b2ec:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802b2f0:	1a83      	subs	r3, r0, r2
 802b2f2:	3106      	adds	r1, #6
 802b2f4:	fb91 f2fc 	sdiv	r2, r1, ip
 802b2f8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 802b2fc:	1a89      	subs	r1, r1, r2
 802b2fe:	ebcb 02cb 	rsb	r2, fp, fp, lsl #3
 802b302:	440a      	add	r2, r1
 802b304:	1ad2      	subs	r2, r2, r3
 802b306:	2a00      	cmp	r2, #0
 802b308:	61e2      	str	r2, [r4, #28]
 802b30a:	da09      	bge.n	802b320 <strptime_l+0x5b8>
 802b30c:	3301      	adds	r3, #1
 802b30e:	fb93 fcfc 	sdiv	ip, r3, ip
 802b312:	ebcc 0ccc 	rsb	ip, ip, ip, lsl #3
 802b316:	eba3 030c 	sub.w	r3, r3, ip
 802b31a:	61a3      	str	r3, [r4, #24]
 802b31c:	2300      	movs	r3, #0
 802b31e:	61e3      	str	r3, [r4, #28]
 802b320:	f8cd a004 	str.w	sl, [sp, #4]
 802b324:	e6dd      	b.n	802b0e2 <strptime_l+0x37a>
 802b326:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 802b32a:	462b      	mov	r3, r5
 802b32c:	4622      	mov	r2, r4
 802b32e:	e674      	b.n	802b01a <strptime_l+0x2b2>
 802b330:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 802b334:	462b      	mov	r3, r5
 802b336:	4622      	mov	r2, r4
 802b338:	e70d      	b.n	802b156 <strptime_l+0x3ee>
 802b33a:	462b      	mov	r3, r5
 802b33c:	220a      	movs	r2, #10
 802b33e:	9801      	ldr	r0, [sp, #4]
 802b340:	a903      	add	r1, sp, #12
 802b342:	f000 f8f5 	bl	802b530 <strtol_l>
 802b346:	9b03      	ldr	r3, [sp, #12]
 802b348:	9a01      	ldr	r2, [sp, #4]
 802b34a:	4293      	cmp	r3, r2
 802b34c:	f43f af6b 	beq.w	802b226 <strptime_l+0x4be>
 802b350:	2845      	cmp	r0, #69	; 0x45
 802b352:	dc00      	bgt.n	802b356 <strptime_l+0x5ee>
 802b354:	3064      	adds	r0, #100	; 0x64
 802b356:	6160      	str	r0, [r4, #20]
 802b358:	9301      	str	r3, [sp, #4]
 802b35a:	f048 0804 	orr.w	r8, r8, #4
 802b35e:	e54b      	b.n	802adf8 <strptime_l+0x90>
 802b360:	462b      	mov	r3, r5
 802b362:	220a      	movs	r2, #10
 802b364:	9801      	ldr	r0, [sp, #4]
 802b366:	a903      	add	r1, sp, #12
 802b368:	f000 f8e2 	bl	802b530 <strtol_l>
 802b36c:	9b03      	ldr	r3, [sp, #12]
 802b36e:	9a01      	ldr	r2, [sp, #4]
 802b370:	4293      	cmp	r3, r2
 802b372:	f47f ae3d 	bne.w	802aff0 <strptime_l+0x288>
 802b376:	e756      	b.n	802b226 <strptime_l+0x4be>
 802b378:	3601      	adds	r6, #1
 802b37a:	9b01      	ldr	r3, [sp, #4]
 802b37c:	781a      	ldrb	r2, [r3, #0]
 802b37e:	2a25      	cmp	r2, #37	; 0x25
 802b380:	e6d1      	b.n	802b126 <strptime_l+0x3be>
 802b382:	9a01      	ldr	r2, [sp, #4]
 802b384:	7811      	ldrb	r1, [r2, #0]
 802b386:	2925      	cmp	r1, #37	; 0x25
 802b388:	d102      	bne.n	802b390 <strptime_l+0x628>
 802b38a:	9b01      	ldr	r3, [sp, #4]
 802b38c:	3301      	adds	r3, #1
 802b38e:	e678      	b.n	802b082 <strptime_l+0x31a>
 802b390:	1c51      	adds	r1, r2, #1
 802b392:	9101      	str	r1, [sp, #4]
 802b394:	7852      	ldrb	r2, [r2, #1]
 802b396:	429a      	cmp	r2, r3
 802b398:	d0f7      	beq.n	802b38a <strptime_l+0x622>
 802b39a:	e744      	b.n	802b226 <strptime_l+0x4be>
 802b39c:	9b01      	ldr	r3, [sp, #4]
 802b39e:	7819      	ldrb	r1, [r3, #0]
 802b3a0:	4291      	cmp	r1, r2
 802b3a2:	e6c0      	b.n	802b126 <strptime_l+0x3be>
 802b3a4:	08030fe8 	.word	0x08030fe8
 802b3a8:	08030de6 	.word	0x08030de6
 802b3ac:	08030dec 	.word	0x08030dec
 802b3b0:	f008 0314 	and.w	r3, r8, #20
 802b3b4:	2b14      	cmp	r3, #20
 802b3b6:	f47f ad00 	bne.w	802adba <strptime_l+0x52>
 802b3ba:	f018 0302 	ands.w	r3, r8, #2
 802b3be:	d103      	bne.n	802b3c8 <strptime_l+0x660>
 802b3c0:	69e1      	ldr	r1, [r4, #28]
 802b3c2:	291e      	cmp	r1, #30
 802b3c4:	dc17      	bgt.n	802b3f6 <strptime_l+0x68e>
 802b3c6:	6123      	str	r3, [r4, #16]
 802b3c8:	f018 0f01 	tst.w	r8, #1
 802b3cc:	f47f acf5 	bne.w	802adba <strptime_l+0x52>
 802b3d0:	6925      	ldr	r5, [r4, #16]
 802b3d2:	4b11      	ldr	r3, [pc, #68]	; (802b418 <strptime_l+0x6b0>)
 802b3d4:	69e1      	ldr	r1, [r4, #28]
 802b3d6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 802b3da:	6960      	ldr	r0, [r4, #20]
 802b3dc:	1ac9      	subs	r1, r1, r3
 802b3de:	60e1      	str	r1, [r4, #12]
 802b3e0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802b3e4:	f7ff fc74 	bl	802acd0 <is_leap_year>
 802b3e8:	b110      	cbz	r0, 802b3f0 <strptime_l+0x688>
 802b3ea:	2d01      	cmp	r5, #1
 802b3ec:	f73f ace5 	bgt.w	802adba <strptime_l+0x52>
 802b3f0:	3101      	adds	r1, #1
 802b3f2:	60e1      	str	r1, [r4, #12]
 802b3f4:	e4e1      	b.n	802adba <strptime_l+0x52>
 802b3f6:	6960      	ldr	r0, [r4, #20]
 802b3f8:	4d07      	ldr	r5, [pc, #28]	; (802b418 <strptime_l+0x6b0>)
 802b3fa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802b3fe:	f7ff fc67 	bl	802acd0 <is_leap_year>
 802b402:	2302      	movs	r3, #2
 802b404:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 802b408:	4402      	add	r2, r0
 802b40a:	4291      	cmp	r1, r2
 802b40c:	db02      	blt.n	802b414 <strptime_l+0x6ac>
 802b40e:	3301      	adds	r3, #1
 802b410:	2b0c      	cmp	r3, #12
 802b412:	d1f7      	bne.n	802b404 <strptime_l+0x69c>
 802b414:	3b01      	subs	r3, #1
 802b416:	e7d6      	b.n	802b3c6 <strptime_l+0x65e>
 802b418:	08030df8 	.word	0x08030df8

0802b41c <strptime>:
 802b41c:	4b01      	ldr	r3, [pc, #4]	; (802b424 <strptime+0x8>)
 802b41e:	f7ff bca3 	b.w	802ad68 <strptime_l>
 802b422:	bf00      	nop
 802b424:	20000188 	.word	0x20000188

0802b428 <_strtol_l.constprop.0>:
 802b428:	2b01      	cmp	r3, #1
 802b42a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b42e:	d001      	beq.n	802b434 <_strtol_l.constprop.0+0xc>
 802b430:	2b24      	cmp	r3, #36	; 0x24
 802b432:	d906      	bls.n	802b442 <_strtol_l.constprop.0+0x1a>
 802b434:	f7fe fcbe 	bl	8029db4 <__errno>
 802b438:	2316      	movs	r3, #22
 802b43a:	6003      	str	r3, [r0, #0]
 802b43c:	2000      	movs	r0, #0
 802b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b442:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802b528 <_strtol_l.constprop.0+0x100>
 802b446:	460d      	mov	r5, r1
 802b448:	462e      	mov	r6, r5
 802b44a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b44e:	f814 700c 	ldrb.w	r7, [r4, ip]
 802b452:	f017 0708 	ands.w	r7, r7, #8
 802b456:	d1f7      	bne.n	802b448 <_strtol_l.constprop.0+0x20>
 802b458:	2c2d      	cmp	r4, #45	; 0x2d
 802b45a:	d132      	bne.n	802b4c2 <_strtol_l.constprop.0+0x9a>
 802b45c:	782c      	ldrb	r4, [r5, #0]
 802b45e:	2701      	movs	r7, #1
 802b460:	1cb5      	adds	r5, r6, #2
 802b462:	2b00      	cmp	r3, #0
 802b464:	d05b      	beq.n	802b51e <_strtol_l.constprop.0+0xf6>
 802b466:	2b10      	cmp	r3, #16
 802b468:	d109      	bne.n	802b47e <_strtol_l.constprop.0+0x56>
 802b46a:	2c30      	cmp	r4, #48	; 0x30
 802b46c:	d107      	bne.n	802b47e <_strtol_l.constprop.0+0x56>
 802b46e:	782c      	ldrb	r4, [r5, #0]
 802b470:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802b474:	2c58      	cmp	r4, #88	; 0x58
 802b476:	d14d      	bne.n	802b514 <_strtol_l.constprop.0+0xec>
 802b478:	786c      	ldrb	r4, [r5, #1]
 802b47a:	2310      	movs	r3, #16
 802b47c:	3502      	adds	r5, #2
 802b47e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802b482:	f108 38ff 	add.w	r8, r8, #4294967295
 802b486:	f04f 0c00 	mov.w	ip, #0
 802b48a:	fbb8 f9f3 	udiv	r9, r8, r3
 802b48e:	4666      	mov	r6, ip
 802b490:	fb03 8a19 	mls	sl, r3, r9, r8
 802b494:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802b498:	f1be 0f09 	cmp.w	lr, #9
 802b49c:	d816      	bhi.n	802b4cc <_strtol_l.constprop.0+0xa4>
 802b49e:	4674      	mov	r4, lr
 802b4a0:	42a3      	cmp	r3, r4
 802b4a2:	dd24      	ble.n	802b4ee <_strtol_l.constprop.0+0xc6>
 802b4a4:	f1bc 0f00 	cmp.w	ip, #0
 802b4a8:	db1e      	blt.n	802b4e8 <_strtol_l.constprop.0+0xc0>
 802b4aa:	45b1      	cmp	r9, r6
 802b4ac:	d31c      	bcc.n	802b4e8 <_strtol_l.constprop.0+0xc0>
 802b4ae:	d101      	bne.n	802b4b4 <_strtol_l.constprop.0+0x8c>
 802b4b0:	45a2      	cmp	sl, r4
 802b4b2:	db19      	blt.n	802b4e8 <_strtol_l.constprop.0+0xc0>
 802b4b4:	fb06 4603 	mla	r6, r6, r3, r4
 802b4b8:	f04f 0c01 	mov.w	ip, #1
 802b4bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b4c0:	e7e8      	b.n	802b494 <_strtol_l.constprop.0+0x6c>
 802b4c2:	2c2b      	cmp	r4, #43	; 0x2b
 802b4c4:	bf04      	itt	eq
 802b4c6:	782c      	ldrbeq	r4, [r5, #0]
 802b4c8:	1cb5      	addeq	r5, r6, #2
 802b4ca:	e7ca      	b.n	802b462 <_strtol_l.constprop.0+0x3a>
 802b4cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802b4d0:	f1be 0f19 	cmp.w	lr, #25
 802b4d4:	d801      	bhi.n	802b4da <_strtol_l.constprop.0+0xb2>
 802b4d6:	3c37      	subs	r4, #55	; 0x37
 802b4d8:	e7e2      	b.n	802b4a0 <_strtol_l.constprop.0+0x78>
 802b4da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802b4de:	f1be 0f19 	cmp.w	lr, #25
 802b4e2:	d804      	bhi.n	802b4ee <_strtol_l.constprop.0+0xc6>
 802b4e4:	3c57      	subs	r4, #87	; 0x57
 802b4e6:	e7db      	b.n	802b4a0 <_strtol_l.constprop.0+0x78>
 802b4e8:	f04f 3cff 	mov.w	ip, #4294967295
 802b4ec:	e7e6      	b.n	802b4bc <_strtol_l.constprop.0+0x94>
 802b4ee:	f1bc 0f00 	cmp.w	ip, #0
 802b4f2:	da05      	bge.n	802b500 <_strtol_l.constprop.0+0xd8>
 802b4f4:	2322      	movs	r3, #34	; 0x22
 802b4f6:	6003      	str	r3, [r0, #0]
 802b4f8:	4646      	mov	r6, r8
 802b4fa:	b942      	cbnz	r2, 802b50e <_strtol_l.constprop.0+0xe6>
 802b4fc:	4630      	mov	r0, r6
 802b4fe:	e79e      	b.n	802b43e <_strtol_l.constprop.0+0x16>
 802b500:	b107      	cbz	r7, 802b504 <_strtol_l.constprop.0+0xdc>
 802b502:	4276      	negs	r6, r6
 802b504:	2a00      	cmp	r2, #0
 802b506:	d0f9      	beq.n	802b4fc <_strtol_l.constprop.0+0xd4>
 802b508:	f1bc 0f00 	cmp.w	ip, #0
 802b50c:	d000      	beq.n	802b510 <_strtol_l.constprop.0+0xe8>
 802b50e:	1e69      	subs	r1, r5, #1
 802b510:	6011      	str	r1, [r2, #0]
 802b512:	e7f3      	b.n	802b4fc <_strtol_l.constprop.0+0xd4>
 802b514:	2430      	movs	r4, #48	; 0x30
 802b516:	2b00      	cmp	r3, #0
 802b518:	d1b1      	bne.n	802b47e <_strtol_l.constprop.0+0x56>
 802b51a:	2308      	movs	r3, #8
 802b51c:	e7af      	b.n	802b47e <_strtol_l.constprop.0+0x56>
 802b51e:	2c30      	cmp	r4, #48	; 0x30
 802b520:	d0a5      	beq.n	802b46e <_strtol_l.constprop.0+0x46>
 802b522:	230a      	movs	r3, #10
 802b524:	e7ab      	b.n	802b47e <_strtol_l.constprop.0+0x56>
 802b526:	bf00      	nop
 802b528:	0803107d 	.word	0x0803107d

0802b52c <_strtol_r>:
 802b52c:	f7ff bf7c 	b.w	802b428 <_strtol_l.constprop.0>

0802b530 <strtol_l>:
 802b530:	4613      	mov	r3, r2
 802b532:	460a      	mov	r2, r1
 802b534:	4601      	mov	r1, r0
 802b536:	4802      	ldr	r0, [pc, #8]	; (802b540 <strtol_l+0x10>)
 802b538:	6800      	ldr	r0, [r0, #0]
 802b53a:	f7ff bf75 	b.w	802b428 <_strtol_l.constprop.0>
 802b53e:	bf00      	nop
 802b540:	200000bc 	.word	0x200000bc

0802b544 <_strtoll_l.constprop.0>:
 802b544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b548:	b085      	sub	sp, #20
 802b54a:	4688      	mov	r8, r1
 802b54c:	9201      	str	r2, [sp, #4]
 802b54e:	4a47      	ldr	r2, [pc, #284]	; (802b66c <_strtoll_l.constprop.0+0x128>)
 802b550:	9003      	str	r0, [sp, #12]
 802b552:	461e      	mov	r6, r3
 802b554:	460d      	mov	r5, r1
 802b556:	462b      	mov	r3, r5
 802b558:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b55c:	5ca7      	ldrb	r7, [r4, r2]
 802b55e:	f017 0708 	ands.w	r7, r7, #8
 802b562:	d1f8      	bne.n	802b556 <_strtoll_l.constprop.0+0x12>
 802b564:	2c2d      	cmp	r4, #45	; 0x2d
 802b566:	d147      	bne.n	802b5f8 <_strtoll_l.constprop.0+0xb4>
 802b568:	782c      	ldrb	r4, [r5, #0]
 802b56a:	2701      	movs	r7, #1
 802b56c:	1c9d      	adds	r5, r3, #2
 802b56e:	2e00      	cmp	r6, #0
 802b570:	d077      	beq.n	802b662 <_strtoll_l.constprop.0+0x11e>
 802b572:	2e10      	cmp	r6, #16
 802b574:	d109      	bne.n	802b58a <_strtoll_l.constprop.0+0x46>
 802b576:	2c30      	cmp	r4, #48	; 0x30
 802b578:	d107      	bne.n	802b58a <_strtoll_l.constprop.0+0x46>
 802b57a:	782b      	ldrb	r3, [r5, #0]
 802b57c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802b580:	2b58      	cmp	r3, #88	; 0x58
 802b582:	d169      	bne.n	802b658 <_strtoll_l.constprop.0+0x114>
 802b584:	786c      	ldrb	r4, [r5, #1]
 802b586:	2610      	movs	r6, #16
 802b588:	3502      	adds	r5, #2
 802b58a:	f107 4a00 	add.w	sl, r7, #2147483648	; 0x80000000
 802b58e:	f107 3bff 	add.w	fp, r7, #4294967295
 802b592:	f10a 3aff 	add.w	sl, sl, #4294967295
 802b596:	ea4f 79e6 	mov.w	r9, r6, asr #31
 802b59a:	4632      	mov	r2, r6
 802b59c:	464b      	mov	r3, r9
 802b59e:	4658      	mov	r0, fp
 802b5a0:	4651      	mov	r1, sl
 802b5a2:	f7d4 feff 	bl	80003a4 <__aeabi_uldivmod>
 802b5a6:	2300      	movs	r3, #0
 802b5a8:	9202      	str	r2, [sp, #8]
 802b5aa:	468c      	mov	ip, r1
 802b5ac:	4602      	mov	r2, r0
 802b5ae:	4619      	mov	r1, r3
 802b5b0:	4618      	mov	r0, r3
 802b5b2:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 802b5b6:	f1be 0f09 	cmp.w	lr, #9
 802b5ba:	d822      	bhi.n	802b602 <_strtoll_l.constprop.0+0xbe>
 802b5bc:	4674      	mov	r4, lr
 802b5be:	42a6      	cmp	r6, r4
 802b5c0:	dd30      	ble.n	802b624 <_strtoll_l.constprop.0+0xe0>
 802b5c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 802b5c6:	d014      	beq.n	802b5f2 <_strtoll_l.constprop.0+0xae>
 802b5c8:	4282      	cmp	r2, r0
 802b5ca:	eb7c 0301 	sbcs.w	r3, ip, r1
 802b5ce:	d326      	bcc.n	802b61e <_strtoll_l.constprop.0+0xda>
 802b5d0:	458c      	cmp	ip, r1
 802b5d2:	bf08      	it	eq
 802b5d4:	4282      	cmpeq	r2, r0
 802b5d6:	d102      	bne.n	802b5de <_strtoll_l.constprop.0+0x9a>
 802b5d8:	9b02      	ldr	r3, [sp, #8]
 802b5da:	42a3      	cmp	r3, r4
 802b5dc:	db1f      	blt.n	802b61e <_strtoll_l.constprop.0+0xda>
 802b5de:	4371      	muls	r1, r6
 802b5e0:	fb00 1109 	mla	r1, r0, r9, r1
 802b5e4:	fba6 0300 	umull	r0, r3, r6, r0
 802b5e8:	4419      	add	r1, r3
 802b5ea:	1820      	adds	r0, r4, r0
 802b5ec:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 802b5f0:	2301      	movs	r3, #1
 802b5f2:	f815 4b01 	ldrb.w	r4, [r5], #1
 802b5f6:	e7dc      	b.n	802b5b2 <_strtoll_l.constprop.0+0x6e>
 802b5f8:	2c2b      	cmp	r4, #43	; 0x2b
 802b5fa:	bf04      	itt	eq
 802b5fc:	782c      	ldrbeq	r4, [r5, #0]
 802b5fe:	1c9d      	addeq	r5, r3, #2
 802b600:	e7b5      	b.n	802b56e <_strtoll_l.constprop.0+0x2a>
 802b602:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 802b606:	f1be 0f19 	cmp.w	lr, #25
 802b60a:	d801      	bhi.n	802b610 <_strtoll_l.constprop.0+0xcc>
 802b60c:	3c37      	subs	r4, #55	; 0x37
 802b60e:	e7d6      	b.n	802b5be <_strtoll_l.constprop.0+0x7a>
 802b610:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 802b614:	f1be 0f19 	cmp.w	lr, #25
 802b618:	d804      	bhi.n	802b624 <_strtoll_l.constprop.0+0xe0>
 802b61a:	3c57      	subs	r4, #87	; 0x57
 802b61c:	e7cf      	b.n	802b5be <_strtoll_l.constprop.0+0x7a>
 802b61e:	f04f 33ff 	mov.w	r3, #4294967295
 802b622:	e7e6      	b.n	802b5f2 <_strtoll_l.constprop.0+0xae>
 802b624:	1c5a      	adds	r2, r3, #1
 802b626:	d109      	bne.n	802b63c <_strtoll_l.constprop.0+0xf8>
 802b628:	9a03      	ldr	r2, [sp, #12]
 802b62a:	2322      	movs	r3, #34	; 0x22
 802b62c:	6013      	str	r3, [r2, #0]
 802b62e:	9b01      	ldr	r3, [sp, #4]
 802b630:	4658      	mov	r0, fp
 802b632:	4651      	mov	r1, sl
 802b634:	b953      	cbnz	r3, 802b64c <_strtoll_l.constprop.0+0x108>
 802b636:	b005      	add	sp, #20
 802b638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b63c:	b117      	cbz	r7, 802b644 <_strtoll_l.constprop.0+0x100>
 802b63e:	4240      	negs	r0, r0
 802b640:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802b644:	9a01      	ldr	r2, [sp, #4]
 802b646:	2a00      	cmp	r2, #0
 802b648:	d0f5      	beq.n	802b636 <_strtoll_l.constprop.0+0xf2>
 802b64a:	b10b      	cbz	r3, 802b650 <_strtoll_l.constprop.0+0x10c>
 802b64c:	f105 38ff 	add.w	r8, r5, #4294967295
 802b650:	9b01      	ldr	r3, [sp, #4]
 802b652:	f8c3 8000 	str.w	r8, [r3]
 802b656:	e7ee      	b.n	802b636 <_strtoll_l.constprop.0+0xf2>
 802b658:	2430      	movs	r4, #48	; 0x30
 802b65a:	2e00      	cmp	r6, #0
 802b65c:	d195      	bne.n	802b58a <_strtoll_l.constprop.0+0x46>
 802b65e:	2608      	movs	r6, #8
 802b660:	e793      	b.n	802b58a <_strtoll_l.constprop.0+0x46>
 802b662:	2c30      	cmp	r4, #48	; 0x30
 802b664:	d089      	beq.n	802b57a <_strtoll_l.constprop.0+0x36>
 802b666:	260a      	movs	r6, #10
 802b668:	e78f      	b.n	802b58a <_strtoll_l.constprop.0+0x46>
 802b66a:	bf00      	nop
 802b66c:	0803107d 	.word	0x0803107d

0802b670 <strtoll_l>:
 802b670:	4613      	mov	r3, r2
 802b672:	460a      	mov	r2, r1
 802b674:	4601      	mov	r1, r0
 802b676:	4802      	ldr	r0, [pc, #8]	; (802b680 <strtoll_l+0x10>)
 802b678:	6800      	ldr	r0, [r0, #0]
 802b67a:	f7ff bf63 	b.w	802b544 <_strtoll_l.constprop.0>
 802b67e:	bf00      	nop
 802b680:	200000bc 	.word	0x200000bc

0802b684 <__tzcalc_limits>:
 802b684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b688:	4605      	mov	r5, r0
 802b68a:	f000 fd8b 	bl	802c1a4 <__gettzinfo>
 802b68e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802b692:	429d      	cmp	r5, r3
 802b694:	f340 8099 	ble.w	802b7ca <__tzcalc_limits+0x146>
 802b698:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 802b69c:	18ac      	adds	r4, r5, r2
 802b69e:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 802b6a2:	f240 126d 	movw	r2, #365	; 0x16d
 802b6a6:	10a4      	asrs	r4, r4, #2
 802b6a8:	fb02 4403 	mla	r4, r2, r3, r4
 802b6ac:	f06f 0263 	mvn.w	r2, #99	; 0x63
 802b6b0:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 802b6b4:	fb93 f3f2 	sdiv	r3, r3, r2
 802b6b8:	441c      	add	r4, r3
 802b6ba:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802b6be:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 802b6c2:	fb95 fcf3 	sdiv	ip, r5, r3
 802b6c6:	fb03 5c1c 	mls	ip, r3, ip, r5
 802b6ca:	186a      	adds	r2, r5, r1
 802b6cc:	fabc f68c 	clz	r6, ip
 802b6d0:	fbb2 f2f3 	udiv	r2, r2, r3
 802b6d4:	f005 0303 	and.w	r3, r5, #3
 802b6d8:	4414      	add	r4, r2
 802b6da:	2264      	movs	r2, #100	; 0x64
 802b6dc:	6045      	str	r5, [r0, #4]
 802b6de:	fb95 f7f2 	sdiv	r7, r5, r2
 802b6e2:	0976      	lsrs	r6, r6, #5
 802b6e4:	fb02 5717 	mls	r7, r2, r7, r5
 802b6e8:	4601      	mov	r1, r0
 802b6ea:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802b6ee:	9300      	str	r3, [sp, #0]
 802b6f0:	f04f 0a07 	mov.w	sl, #7
 802b6f4:	7a0d      	ldrb	r5, [r1, #8]
 802b6f6:	694b      	ldr	r3, [r1, #20]
 802b6f8:	2d4a      	cmp	r5, #74	; 0x4a
 802b6fa:	d12d      	bne.n	802b758 <__tzcalc_limits+0xd4>
 802b6fc:	9a00      	ldr	r2, [sp, #0]
 802b6fe:	eb04 0e03 	add.w	lr, r4, r3
 802b702:	b902      	cbnz	r2, 802b706 <__tzcalc_limits+0x82>
 802b704:	b917      	cbnz	r7, 802b70c <__tzcalc_limits+0x88>
 802b706:	f1bc 0f00 	cmp.w	ip, #0
 802b70a:	d123      	bne.n	802b754 <__tzcalc_limits+0xd0>
 802b70c:	2b3b      	cmp	r3, #59	; 0x3b
 802b70e:	bfd4      	ite	le
 802b710:	2300      	movle	r3, #0
 802b712:	2301      	movgt	r3, #1
 802b714:	4473      	add	r3, lr
 802b716:	3b01      	subs	r3, #1
 802b718:	698d      	ldr	r5, [r1, #24]
 802b71a:	4a2d      	ldr	r2, [pc, #180]	; (802b7d0 <__tzcalc_limits+0x14c>)
 802b71c:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 802b720:	fbc3 5e02 	smlal	r5, lr, r3, r2
 802b724:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 802b726:	18ed      	adds	r5, r5, r3
 802b728:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 802b72c:	e9c1 5308 	strd	r5, r3, [r1, #32]
 802b730:	3128      	adds	r1, #40	; 0x28
 802b732:	458b      	cmp	fp, r1
 802b734:	d1de      	bne.n	802b6f4 <__tzcalc_limits+0x70>
 802b736:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 802b73a:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 802b73e:	428c      	cmp	r4, r1
 802b740:	eb72 0303 	sbcs.w	r3, r2, r3
 802b744:	bfb4      	ite	lt
 802b746:	2301      	movlt	r3, #1
 802b748:	2300      	movge	r3, #0
 802b74a:	6003      	str	r3, [r0, #0]
 802b74c:	2001      	movs	r0, #1
 802b74e:	b003      	add	sp, #12
 802b750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b754:	2300      	movs	r3, #0
 802b756:	e7dd      	b.n	802b714 <__tzcalc_limits+0x90>
 802b758:	2d44      	cmp	r5, #68	; 0x44
 802b75a:	d101      	bne.n	802b760 <__tzcalc_limits+0xdc>
 802b75c:	4423      	add	r3, r4
 802b75e:	e7db      	b.n	802b718 <__tzcalc_limits+0x94>
 802b760:	9a00      	ldr	r2, [sp, #0]
 802b762:	bb62      	cbnz	r2, 802b7be <__tzcalc_limits+0x13a>
 802b764:	2f00      	cmp	r7, #0
 802b766:	bf0c      	ite	eq
 802b768:	4635      	moveq	r5, r6
 802b76a:	2501      	movne	r5, #1
 802b76c:	68ca      	ldr	r2, [r1, #12]
 802b76e:	9201      	str	r2, [sp, #4]
 802b770:	4a18      	ldr	r2, [pc, #96]	; (802b7d4 <__tzcalc_limits+0x150>)
 802b772:	f04f 0930 	mov.w	r9, #48	; 0x30
 802b776:	fb09 2505 	mla	r5, r9, r5, r2
 802b77a:	46a6      	mov	lr, r4
 802b77c:	f04f 0800 	mov.w	r8, #0
 802b780:	3d04      	subs	r5, #4
 802b782:	9a01      	ldr	r2, [sp, #4]
 802b784:	f108 0801 	add.w	r8, r8, #1
 802b788:	4542      	cmp	r2, r8
 802b78a:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 802b78e:	dc18      	bgt.n	802b7c2 <__tzcalc_limits+0x13e>
 802b790:	f10e 0504 	add.w	r5, lr, #4
 802b794:	fb95 f8fa 	sdiv	r8, r5, sl
 802b798:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 802b79c:	eba5 0808 	sub.w	r8, r5, r8
 802b7a0:	ebb3 0808 	subs.w	r8, r3, r8
 802b7a4:	690b      	ldr	r3, [r1, #16]
 802b7a6:	f103 33ff 	add.w	r3, r3, #4294967295
 802b7aa:	bf48      	it	mi
 802b7ac:	f108 0807 	addmi.w	r8, r8, #7
 802b7b0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802b7b4:	4443      	add	r3, r8
 802b7b6:	454b      	cmp	r3, r9
 802b7b8:	da05      	bge.n	802b7c6 <__tzcalc_limits+0x142>
 802b7ba:	4473      	add	r3, lr
 802b7bc:	e7ac      	b.n	802b718 <__tzcalc_limits+0x94>
 802b7be:	4635      	mov	r5, r6
 802b7c0:	e7d4      	b.n	802b76c <__tzcalc_limits+0xe8>
 802b7c2:	44ce      	add	lr, r9
 802b7c4:	e7dd      	b.n	802b782 <__tzcalc_limits+0xfe>
 802b7c6:	3b07      	subs	r3, #7
 802b7c8:	e7f5      	b.n	802b7b6 <__tzcalc_limits+0x132>
 802b7ca:	2000      	movs	r0, #0
 802b7cc:	e7bf      	b.n	802b74e <__tzcalc_limits+0xca>
 802b7ce:	bf00      	nop
 802b7d0:	00015180 	.word	0x00015180
 802b7d4:	080311ec 	.word	0x080311ec

0802b7d8 <__tz_lock>:
 802b7d8:	4801      	ldr	r0, [pc, #4]	; (802b7e0 <__tz_lock+0x8>)
 802b7da:	f000 bddc 	b.w	802c396 <__retarget_lock_acquire>
 802b7de:	bf00      	nop
 802b7e0:	2003c589 	.word	0x2003c589

0802b7e4 <__tz_unlock>:
 802b7e4:	4801      	ldr	r0, [pc, #4]	; (802b7ec <__tz_unlock+0x8>)
 802b7e6:	f000 bdd8 	b.w	802c39a <__retarget_lock_release>
 802b7ea:	bf00      	nop
 802b7ec:	2003c589 	.word	0x2003c589

0802b7f0 <_tzset_unlocked>:
 802b7f0:	4b01      	ldr	r3, [pc, #4]	; (802b7f8 <_tzset_unlocked+0x8>)
 802b7f2:	6818      	ldr	r0, [r3, #0]
 802b7f4:	f000 b802 	b.w	802b7fc <_tzset_unlocked_r>
 802b7f8:	200000bc 	.word	0x200000bc

0802b7fc <_tzset_unlocked_r>:
 802b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b800:	b08d      	sub	sp, #52	; 0x34
 802b802:	4607      	mov	r7, r0
 802b804:	f000 fcce 	bl	802c1a4 <__gettzinfo>
 802b808:	49b0      	ldr	r1, [pc, #704]	; (802bacc <_tzset_unlocked_r+0x2d0>)
 802b80a:	4eb1      	ldr	r6, [pc, #708]	; (802bad0 <_tzset_unlocked_r+0x2d4>)
 802b80c:	4605      	mov	r5, r0
 802b80e:	4638      	mov	r0, r7
 802b810:	f000 fcc0 	bl	802c194 <_getenv_r>
 802b814:	4604      	mov	r4, r0
 802b816:	b970      	cbnz	r0, 802b836 <_tzset_unlocked_r+0x3a>
 802b818:	4bae      	ldr	r3, [pc, #696]	; (802bad4 <_tzset_unlocked_r+0x2d8>)
 802b81a:	4aaf      	ldr	r2, [pc, #700]	; (802bad8 <_tzset_unlocked_r+0x2dc>)
 802b81c:	6018      	str	r0, [r3, #0]
 802b81e:	4baf      	ldr	r3, [pc, #700]	; (802badc <_tzset_unlocked_r+0x2e0>)
 802b820:	6018      	str	r0, [r3, #0]
 802b822:	4baf      	ldr	r3, [pc, #700]	; (802bae0 <_tzset_unlocked_r+0x2e4>)
 802b824:	6830      	ldr	r0, [r6, #0]
 802b826:	e9c3 2200 	strd	r2, r2, [r3]
 802b82a:	f7fe fb07 	bl	8029e3c <free>
 802b82e:	6034      	str	r4, [r6, #0]
 802b830:	b00d      	add	sp, #52	; 0x34
 802b832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b836:	6831      	ldr	r1, [r6, #0]
 802b838:	2900      	cmp	r1, #0
 802b83a:	d162      	bne.n	802b902 <_tzset_unlocked_r+0x106>
 802b83c:	6830      	ldr	r0, [r6, #0]
 802b83e:	f7fe fafd 	bl	8029e3c <free>
 802b842:	4620      	mov	r0, r4
 802b844:	f7d4 fcfc 	bl	8000240 <strlen>
 802b848:	1c41      	adds	r1, r0, #1
 802b84a:	4638      	mov	r0, r7
 802b84c:	f7fe fdf2 	bl	802a434 <_malloc_r>
 802b850:	6030      	str	r0, [r6, #0]
 802b852:	2800      	cmp	r0, #0
 802b854:	d15a      	bne.n	802b90c <_tzset_unlocked_r+0x110>
 802b856:	7823      	ldrb	r3, [r4, #0]
 802b858:	4aa2      	ldr	r2, [pc, #648]	; (802bae4 <_tzset_unlocked_r+0x2e8>)
 802b85a:	49a3      	ldr	r1, [pc, #652]	; (802bae8 <_tzset_unlocked_r+0x2ec>)
 802b85c:	2b3a      	cmp	r3, #58	; 0x3a
 802b85e:	bf08      	it	eq
 802b860:	3401      	addeq	r4, #1
 802b862:	ae0a      	add	r6, sp, #40	; 0x28
 802b864:	4633      	mov	r3, r6
 802b866:	4620      	mov	r0, r4
 802b868:	f7ff f99a 	bl	802aba0 <siscanf>
 802b86c:	2800      	cmp	r0, #0
 802b86e:	dddf      	ble.n	802b830 <_tzset_unlocked_r+0x34>
 802b870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b872:	18e7      	adds	r7, r4, r3
 802b874:	5ce3      	ldrb	r3, [r4, r3]
 802b876:	2b2d      	cmp	r3, #45	; 0x2d
 802b878:	d14c      	bne.n	802b914 <_tzset_unlocked_r+0x118>
 802b87a:	3701      	adds	r7, #1
 802b87c:	f04f 38ff 	mov.w	r8, #4294967295
 802b880:	f10d 0a20 	add.w	sl, sp, #32
 802b884:	f10d 0b1e 	add.w	fp, sp, #30
 802b888:	2400      	movs	r4, #0
 802b88a:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 802b88e:	4997      	ldr	r1, [pc, #604]	; (802baec <_tzset_unlocked_r+0x2f0>)
 802b890:	9603      	str	r6, [sp, #12]
 802b892:	f8cd b000 	str.w	fp, [sp]
 802b896:	4633      	mov	r3, r6
 802b898:	aa07      	add	r2, sp, #28
 802b89a:	4638      	mov	r0, r7
 802b89c:	f8ad 401e 	strh.w	r4, [sp, #30]
 802b8a0:	f8ad 4020 	strh.w	r4, [sp, #32]
 802b8a4:	f7ff f97c 	bl	802aba0 <siscanf>
 802b8a8:	42a0      	cmp	r0, r4
 802b8aa:	ddc1      	ble.n	802b830 <_tzset_unlocked_r+0x34>
 802b8ac:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802b8b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802b8b4:	f8df 9240 	ldr.w	r9, [pc, #576]	; 802baf8 <_tzset_unlocked_r+0x2fc>
 802b8b8:	213c      	movs	r1, #60	; 0x3c
 802b8ba:	fb01 3302 	mla	r3, r1, r2, r3
 802b8be:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802b8c2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802b8c6:	fb01 3302 	mla	r3, r1, r2, r3
 802b8ca:	fb08 f303 	mul.w	r3, r8, r3
 802b8ce:	f8df 8210 	ldr.w	r8, [pc, #528]	; 802bae0 <_tzset_unlocked_r+0x2e4>
 802b8d2:	62ab      	str	r3, [r5, #40]	; 0x28
 802b8d4:	4b83      	ldr	r3, [pc, #524]	; (802bae4 <_tzset_unlocked_r+0x2e8>)
 802b8d6:	f8c8 3000 	str.w	r3, [r8]
 802b8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b8dc:	4982      	ldr	r1, [pc, #520]	; (802bae8 <_tzset_unlocked_r+0x2ec>)
 802b8de:	441f      	add	r7, r3
 802b8e0:	464a      	mov	r2, r9
 802b8e2:	4633      	mov	r3, r6
 802b8e4:	4638      	mov	r0, r7
 802b8e6:	f7ff f95b 	bl	802aba0 <siscanf>
 802b8ea:	42a0      	cmp	r0, r4
 802b8ec:	dc18      	bgt.n	802b920 <_tzset_unlocked_r+0x124>
 802b8ee:	f8d8 3000 	ldr.w	r3, [r8]
 802b8f2:	f8c8 3004 	str.w	r3, [r8, #4]
 802b8f6:	4b77      	ldr	r3, [pc, #476]	; (802bad4 <_tzset_unlocked_r+0x2d8>)
 802b8f8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802b8fa:	601a      	str	r2, [r3, #0]
 802b8fc:	4b77      	ldr	r3, [pc, #476]	; (802badc <_tzset_unlocked_r+0x2e0>)
 802b8fe:	601c      	str	r4, [r3, #0]
 802b900:	e796      	b.n	802b830 <_tzset_unlocked_r+0x34>
 802b902:	f7d4 fcf5 	bl	80002f0 <strcmp>
 802b906:	2800      	cmp	r0, #0
 802b908:	d198      	bne.n	802b83c <_tzset_unlocked_r+0x40>
 802b90a:	e791      	b.n	802b830 <_tzset_unlocked_r+0x34>
 802b90c:	4621      	mov	r1, r4
 802b90e:	f001 f97b 	bl	802cc08 <strcpy>
 802b912:	e7a0      	b.n	802b856 <_tzset_unlocked_r+0x5a>
 802b914:	2b2b      	cmp	r3, #43	; 0x2b
 802b916:	bf08      	it	eq
 802b918:	3701      	addeq	r7, #1
 802b91a:	f04f 0801 	mov.w	r8, #1
 802b91e:	e7af      	b.n	802b880 <_tzset_unlocked_r+0x84>
 802b920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b922:	f8c8 9004 	str.w	r9, [r8, #4]
 802b926:	18fc      	adds	r4, r7, r3
 802b928:	5cfb      	ldrb	r3, [r7, r3]
 802b92a:	2b2d      	cmp	r3, #45	; 0x2d
 802b92c:	f040 808b 	bne.w	802ba46 <_tzset_unlocked_r+0x24a>
 802b930:	3401      	adds	r4, #1
 802b932:	f04f 37ff 	mov.w	r7, #4294967295
 802b936:	2300      	movs	r3, #0
 802b938:	f8ad 301c 	strh.w	r3, [sp, #28]
 802b93c:	f8ad 301e 	strh.w	r3, [sp, #30]
 802b940:	f8ad 3020 	strh.w	r3, [sp, #32]
 802b944:	930a      	str	r3, [sp, #40]	; 0x28
 802b946:	e9cd a602 	strd	sl, r6, [sp, #8]
 802b94a:	e9cd b600 	strd	fp, r6, [sp]
 802b94e:	4967      	ldr	r1, [pc, #412]	; (802baec <_tzset_unlocked_r+0x2f0>)
 802b950:	4633      	mov	r3, r6
 802b952:	aa07      	add	r2, sp, #28
 802b954:	4620      	mov	r0, r4
 802b956:	f7ff f923 	bl	802aba0 <siscanf>
 802b95a:	2800      	cmp	r0, #0
 802b95c:	dc78      	bgt.n	802ba50 <_tzset_unlocked_r+0x254>
 802b95e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802b960:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 802b964:	652b      	str	r3, [r5, #80]	; 0x50
 802b966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b968:	462f      	mov	r7, r5
 802b96a:	441c      	add	r4, r3
 802b96c:	f04f 0900 	mov.w	r9, #0
 802b970:	7823      	ldrb	r3, [r4, #0]
 802b972:	2b2c      	cmp	r3, #44	; 0x2c
 802b974:	bf08      	it	eq
 802b976:	3401      	addeq	r4, #1
 802b978:	f894 8000 	ldrb.w	r8, [r4]
 802b97c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 802b980:	d178      	bne.n	802ba74 <_tzset_unlocked_r+0x278>
 802b982:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802b986:	e9cd 6301 	strd	r6, r3, [sp, #4]
 802b98a:	ab09      	add	r3, sp, #36	; 0x24
 802b98c:	9300      	str	r3, [sp, #0]
 802b98e:	4958      	ldr	r1, [pc, #352]	; (802baf0 <_tzset_unlocked_r+0x2f4>)
 802b990:	9603      	str	r6, [sp, #12]
 802b992:	4633      	mov	r3, r6
 802b994:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 802b998:	4620      	mov	r0, r4
 802b99a:	f7ff f901 	bl	802aba0 <siscanf>
 802b99e:	2803      	cmp	r0, #3
 802b9a0:	f47f af46 	bne.w	802b830 <_tzset_unlocked_r+0x34>
 802b9a4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 802b9a8:	1e4b      	subs	r3, r1, #1
 802b9aa:	2b0b      	cmp	r3, #11
 802b9ac:	f63f af40 	bhi.w	802b830 <_tzset_unlocked_r+0x34>
 802b9b0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802b9b4:	1e53      	subs	r3, r2, #1
 802b9b6:	2b04      	cmp	r3, #4
 802b9b8:	f63f af3a 	bhi.w	802b830 <_tzset_unlocked_r+0x34>
 802b9bc:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 802b9c0:	2b06      	cmp	r3, #6
 802b9c2:	f63f af35 	bhi.w	802b830 <_tzset_unlocked_r+0x34>
 802b9c6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 802b9ca:	f887 8008 	strb.w	r8, [r7, #8]
 802b9ce:	617b      	str	r3, [r7, #20]
 802b9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802b9d2:	eb04 0803 	add.w	r8, r4, r3
 802b9d6:	2302      	movs	r3, #2
 802b9d8:	f8ad 301c 	strh.w	r3, [sp, #28]
 802b9dc:	2300      	movs	r3, #0
 802b9de:	f8ad 301e 	strh.w	r3, [sp, #30]
 802b9e2:	f8ad 3020 	strh.w	r3, [sp, #32]
 802b9e6:	930a      	str	r3, [sp, #40]	; 0x28
 802b9e8:	f898 3000 	ldrb.w	r3, [r8]
 802b9ec:	2b2f      	cmp	r3, #47	; 0x2f
 802b9ee:	d109      	bne.n	802ba04 <_tzset_unlocked_r+0x208>
 802b9f0:	e9cd a602 	strd	sl, r6, [sp, #8]
 802b9f4:	e9cd b600 	strd	fp, r6, [sp]
 802b9f8:	493e      	ldr	r1, [pc, #248]	; (802baf4 <_tzset_unlocked_r+0x2f8>)
 802b9fa:	4633      	mov	r3, r6
 802b9fc:	aa07      	add	r2, sp, #28
 802b9fe:	4640      	mov	r0, r8
 802ba00:	f7ff f8ce 	bl	802aba0 <siscanf>
 802ba04:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802ba08:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802ba0c:	213c      	movs	r1, #60	; 0x3c
 802ba0e:	fb01 3302 	mla	r3, r1, r2, r3
 802ba12:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802ba16:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802ba1a:	fb01 3302 	mla	r3, r1, r2, r3
 802ba1e:	61bb      	str	r3, [r7, #24]
 802ba20:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 802ba22:	3728      	adds	r7, #40	; 0x28
 802ba24:	4444      	add	r4, r8
 802ba26:	f1b9 0f00 	cmp.w	r9, #0
 802ba2a:	d020      	beq.n	802ba6e <_tzset_unlocked_r+0x272>
 802ba2c:	6868      	ldr	r0, [r5, #4]
 802ba2e:	f7ff fe29 	bl	802b684 <__tzcalc_limits>
 802ba32:	4b28      	ldr	r3, [pc, #160]	; (802bad4 <_tzset_unlocked_r+0x2d8>)
 802ba34:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802ba36:	601a      	str	r2, [r3, #0]
 802ba38:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802ba3a:	1a9b      	subs	r3, r3, r2
 802ba3c:	4a27      	ldr	r2, [pc, #156]	; (802badc <_tzset_unlocked_r+0x2e0>)
 802ba3e:	bf18      	it	ne
 802ba40:	2301      	movne	r3, #1
 802ba42:	6013      	str	r3, [r2, #0]
 802ba44:	e6f4      	b.n	802b830 <_tzset_unlocked_r+0x34>
 802ba46:	2b2b      	cmp	r3, #43	; 0x2b
 802ba48:	bf08      	it	eq
 802ba4a:	3401      	addeq	r4, #1
 802ba4c:	2701      	movs	r7, #1
 802ba4e:	e772      	b.n	802b936 <_tzset_unlocked_r+0x13a>
 802ba50:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802ba54:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802ba58:	213c      	movs	r1, #60	; 0x3c
 802ba5a:	fb01 3302 	mla	r3, r1, r2, r3
 802ba5e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802ba62:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802ba66:	fb01 3302 	mla	r3, r1, r2, r3
 802ba6a:	437b      	muls	r3, r7
 802ba6c:	e77a      	b.n	802b964 <_tzset_unlocked_r+0x168>
 802ba6e:	f04f 0901 	mov.w	r9, #1
 802ba72:	e77d      	b.n	802b970 <_tzset_unlocked_r+0x174>
 802ba74:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 802ba78:	bf06      	itte	eq
 802ba7a:	3401      	addeq	r4, #1
 802ba7c:	4643      	moveq	r3, r8
 802ba7e:	2344      	movne	r3, #68	; 0x44
 802ba80:	220a      	movs	r2, #10
 802ba82:	a90b      	add	r1, sp, #44	; 0x2c
 802ba84:	4620      	mov	r0, r4
 802ba86:	9305      	str	r3, [sp, #20]
 802ba88:	f001 f956 	bl	802cd38 <strtoul>
 802ba8c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 802ba90:	9b05      	ldr	r3, [sp, #20]
 802ba92:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802ba96:	45a0      	cmp	r8, r4
 802ba98:	d114      	bne.n	802bac4 <_tzset_unlocked_r+0x2c8>
 802ba9a:	234d      	movs	r3, #77	; 0x4d
 802ba9c:	f1b9 0f00 	cmp.w	r9, #0
 802baa0:	d107      	bne.n	802bab2 <_tzset_unlocked_r+0x2b6>
 802baa2:	722b      	strb	r3, [r5, #8]
 802baa4:	2103      	movs	r1, #3
 802baa6:	2302      	movs	r3, #2
 802baa8:	e9c5 1303 	strd	r1, r3, [r5, #12]
 802baac:	f8c5 9014 	str.w	r9, [r5, #20]
 802bab0:	e791      	b.n	802b9d6 <_tzset_unlocked_r+0x1da>
 802bab2:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802bab6:	220b      	movs	r2, #11
 802bab8:	2301      	movs	r3, #1
 802baba:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 802babe:	2300      	movs	r3, #0
 802bac0:	63eb      	str	r3, [r5, #60]	; 0x3c
 802bac2:	e788      	b.n	802b9d6 <_tzset_unlocked_r+0x1da>
 802bac4:	b280      	uxth	r0, r0
 802bac6:	723b      	strb	r3, [r7, #8]
 802bac8:	6178      	str	r0, [r7, #20]
 802baca:	e784      	b.n	802b9d6 <_tzset_unlocked_r+0x1da>
 802bacc:	08031040 	.word	0x08031040
 802bad0:	2003c4e8 	.word	0x2003c4e8
 802bad4:	2003c4f0 	.word	0x2003c4f0
 802bad8:	08031043 	.word	0x08031043
 802badc:	2003c4ec 	.word	0x2003c4ec
 802bae0:	20000120 	.word	0x20000120
 802bae4:	2003c4db 	.word	0x2003c4db
 802bae8:	08031047 	.word	0x08031047
 802baec:	0803106a 	.word	0x0803106a
 802baf0:	08031056 	.word	0x08031056
 802baf4:	08031069 	.word	0x08031069
 802baf8:	2003c4d0 	.word	0x2003c4d0

0802bafc <__swbuf_r>:
 802bafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bafe:	460e      	mov	r6, r1
 802bb00:	4614      	mov	r4, r2
 802bb02:	4605      	mov	r5, r0
 802bb04:	b118      	cbz	r0, 802bb0e <__swbuf_r+0x12>
 802bb06:	6983      	ldr	r3, [r0, #24]
 802bb08:	b90b      	cbnz	r3, 802bb0e <__swbuf_r+0x12>
 802bb0a:	f000 fa69 	bl	802bfe0 <__sinit>
 802bb0e:	4b21      	ldr	r3, [pc, #132]	; (802bb94 <__swbuf_r+0x98>)
 802bb10:	429c      	cmp	r4, r3
 802bb12:	d12b      	bne.n	802bb6c <__swbuf_r+0x70>
 802bb14:	686c      	ldr	r4, [r5, #4]
 802bb16:	69a3      	ldr	r3, [r4, #24]
 802bb18:	60a3      	str	r3, [r4, #8]
 802bb1a:	89a3      	ldrh	r3, [r4, #12]
 802bb1c:	071a      	lsls	r2, r3, #28
 802bb1e:	d52f      	bpl.n	802bb80 <__swbuf_r+0x84>
 802bb20:	6923      	ldr	r3, [r4, #16]
 802bb22:	b36b      	cbz	r3, 802bb80 <__swbuf_r+0x84>
 802bb24:	6923      	ldr	r3, [r4, #16]
 802bb26:	6820      	ldr	r0, [r4, #0]
 802bb28:	1ac0      	subs	r0, r0, r3
 802bb2a:	6963      	ldr	r3, [r4, #20]
 802bb2c:	b2f6      	uxtb	r6, r6
 802bb2e:	4283      	cmp	r3, r0
 802bb30:	4637      	mov	r7, r6
 802bb32:	dc04      	bgt.n	802bb3e <__swbuf_r+0x42>
 802bb34:	4621      	mov	r1, r4
 802bb36:	4628      	mov	r0, r5
 802bb38:	f000 f9be 	bl	802beb8 <_fflush_r>
 802bb3c:	bb30      	cbnz	r0, 802bb8c <__swbuf_r+0x90>
 802bb3e:	68a3      	ldr	r3, [r4, #8]
 802bb40:	3b01      	subs	r3, #1
 802bb42:	60a3      	str	r3, [r4, #8]
 802bb44:	6823      	ldr	r3, [r4, #0]
 802bb46:	1c5a      	adds	r2, r3, #1
 802bb48:	6022      	str	r2, [r4, #0]
 802bb4a:	701e      	strb	r6, [r3, #0]
 802bb4c:	6963      	ldr	r3, [r4, #20]
 802bb4e:	3001      	adds	r0, #1
 802bb50:	4283      	cmp	r3, r0
 802bb52:	d004      	beq.n	802bb5e <__swbuf_r+0x62>
 802bb54:	89a3      	ldrh	r3, [r4, #12]
 802bb56:	07db      	lsls	r3, r3, #31
 802bb58:	d506      	bpl.n	802bb68 <__swbuf_r+0x6c>
 802bb5a:	2e0a      	cmp	r6, #10
 802bb5c:	d104      	bne.n	802bb68 <__swbuf_r+0x6c>
 802bb5e:	4621      	mov	r1, r4
 802bb60:	4628      	mov	r0, r5
 802bb62:	f000 f9a9 	bl	802beb8 <_fflush_r>
 802bb66:	b988      	cbnz	r0, 802bb8c <__swbuf_r+0x90>
 802bb68:	4638      	mov	r0, r7
 802bb6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802bb6c:	4b0a      	ldr	r3, [pc, #40]	; (802bb98 <__swbuf_r+0x9c>)
 802bb6e:	429c      	cmp	r4, r3
 802bb70:	d101      	bne.n	802bb76 <__swbuf_r+0x7a>
 802bb72:	68ac      	ldr	r4, [r5, #8]
 802bb74:	e7cf      	b.n	802bb16 <__swbuf_r+0x1a>
 802bb76:	4b09      	ldr	r3, [pc, #36]	; (802bb9c <__swbuf_r+0xa0>)
 802bb78:	429c      	cmp	r4, r3
 802bb7a:	bf08      	it	eq
 802bb7c:	68ec      	ldreq	r4, [r5, #12]
 802bb7e:	e7ca      	b.n	802bb16 <__swbuf_r+0x1a>
 802bb80:	4621      	mov	r1, r4
 802bb82:	4628      	mov	r0, r5
 802bb84:	f000 f81e 	bl	802bbc4 <__swsetup_r>
 802bb88:	2800      	cmp	r0, #0
 802bb8a:	d0cb      	beq.n	802bb24 <__swbuf_r+0x28>
 802bb8c:	f04f 37ff 	mov.w	r7, #4294967295
 802bb90:	e7ea      	b.n	802bb68 <__swbuf_r+0x6c>
 802bb92:	bf00      	nop
 802bb94:	080311a0 	.word	0x080311a0
 802bb98:	080311c0 	.word	0x080311c0
 802bb9c:	08031180 	.word	0x08031180

0802bba0 <_write_r>:
 802bba0:	b538      	push	{r3, r4, r5, lr}
 802bba2:	4d07      	ldr	r5, [pc, #28]	; (802bbc0 <_write_r+0x20>)
 802bba4:	4604      	mov	r4, r0
 802bba6:	4608      	mov	r0, r1
 802bba8:	4611      	mov	r1, r2
 802bbaa:	2200      	movs	r2, #0
 802bbac:	602a      	str	r2, [r5, #0]
 802bbae:	461a      	mov	r2, r3
 802bbb0:	f7d6 fbc3 	bl	800233a <_write>
 802bbb4:	1c43      	adds	r3, r0, #1
 802bbb6:	d102      	bne.n	802bbbe <_write_r+0x1e>
 802bbb8:	682b      	ldr	r3, [r5, #0]
 802bbba:	b103      	cbz	r3, 802bbbe <_write_r+0x1e>
 802bbbc:	6023      	str	r3, [r4, #0]
 802bbbe:	bd38      	pop	{r3, r4, r5, pc}
 802bbc0:	2003c58c 	.word	0x2003c58c

0802bbc4 <__swsetup_r>:
 802bbc4:	4b32      	ldr	r3, [pc, #200]	; (802bc90 <__swsetup_r+0xcc>)
 802bbc6:	b570      	push	{r4, r5, r6, lr}
 802bbc8:	681d      	ldr	r5, [r3, #0]
 802bbca:	4606      	mov	r6, r0
 802bbcc:	460c      	mov	r4, r1
 802bbce:	b125      	cbz	r5, 802bbda <__swsetup_r+0x16>
 802bbd0:	69ab      	ldr	r3, [r5, #24]
 802bbd2:	b913      	cbnz	r3, 802bbda <__swsetup_r+0x16>
 802bbd4:	4628      	mov	r0, r5
 802bbd6:	f000 fa03 	bl	802bfe0 <__sinit>
 802bbda:	4b2e      	ldr	r3, [pc, #184]	; (802bc94 <__swsetup_r+0xd0>)
 802bbdc:	429c      	cmp	r4, r3
 802bbde:	d10f      	bne.n	802bc00 <__swsetup_r+0x3c>
 802bbe0:	686c      	ldr	r4, [r5, #4]
 802bbe2:	89a3      	ldrh	r3, [r4, #12]
 802bbe4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802bbe8:	0719      	lsls	r1, r3, #28
 802bbea:	d42c      	bmi.n	802bc46 <__swsetup_r+0x82>
 802bbec:	06dd      	lsls	r5, r3, #27
 802bbee:	d411      	bmi.n	802bc14 <__swsetup_r+0x50>
 802bbf0:	2309      	movs	r3, #9
 802bbf2:	6033      	str	r3, [r6, #0]
 802bbf4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802bbf8:	81a3      	strh	r3, [r4, #12]
 802bbfa:	f04f 30ff 	mov.w	r0, #4294967295
 802bbfe:	e03e      	b.n	802bc7e <__swsetup_r+0xba>
 802bc00:	4b25      	ldr	r3, [pc, #148]	; (802bc98 <__swsetup_r+0xd4>)
 802bc02:	429c      	cmp	r4, r3
 802bc04:	d101      	bne.n	802bc0a <__swsetup_r+0x46>
 802bc06:	68ac      	ldr	r4, [r5, #8]
 802bc08:	e7eb      	b.n	802bbe2 <__swsetup_r+0x1e>
 802bc0a:	4b24      	ldr	r3, [pc, #144]	; (802bc9c <__swsetup_r+0xd8>)
 802bc0c:	429c      	cmp	r4, r3
 802bc0e:	bf08      	it	eq
 802bc10:	68ec      	ldreq	r4, [r5, #12]
 802bc12:	e7e6      	b.n	802bbe2 <__swsetup_r+0x1e>
 802bc14:	0758      	lsls	r0, r3, #29
 802bc16:	d512      	bpl.n	802bc3e <__swsetup_r+0x7a>
 802bc18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802bc1a:	b141      	cbz	r1, 802bc2e <__swsetup_r+0x6a>
 802bc1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bc20:	4299      	cmp	r1, r3
 802bc22:	d002      	beq.n	802bc2a <__swsetup_r+0x66>
 802bc24:	4630      	mov	r0, r6
 802bc26:	f7fe fb99 	bl	802a35c <_free_r>
 802bc2a:	2300      	movs	r3, #0
 802bc2c:	6363      	str	r3, [r4, #52]	; 0x34
 802bc2e:	89a3      	ldrh	r3, [r4, #12]
 802bc30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802bc34:	81a3      	strh	r3, [r4, #12]
 802bc36:	2300      	movs	r3, #0
 802bc38:	6063      	str	r3, [r4, #4]
 802bc3a:	6923      	ldr	r3, [r4, #16]
 802bc3c:	6023      	str	r3, [r4, #0]
 802bc3e:	89a3      	ldrh	r3, [r4, #12]
 802bc40:	f043 0308 	orr.w	r3, r3, #8
 802bc44:	81a3      	strh	r3, [r4, #12]
 802bc46:	6923      	ldr	r3, [r4, #16]
 802bc48:	b94b      	cbnz	r3, 802bc5e <__swsetup_r+0x9a>
 802bc4a:	89a3      	ldrh	r3, [r4, #12]
 802bc4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802bc50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802bc54:	d003      	beq.n	802bc5e <__swsetup_r+0x9a>
 802bc56:	4621      	mov	r1, r4
 802bc58:	4630      	mov	r0, r6
 802bc5a:	f000 fbd9 	bl	802c410 <__smakebuf_r>
 802bc5e:	89a0      	ldrh	r0, [r4, #12]
 802bc60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802bc64:	f010 0301 	ands.w	r3, r0, #1
 802bc68:	d00a      	beq.n	802bc80 <__swsetup_r+0xbc>
 802bc6a:	2300      	movs	r3, #0
 802bc6c:	60a3      	str	r3, [r4, #8]
 802bc6e:	6963      	ldr	r3, [r4, #20]
 802bc70:	425b      	negs	r3, r3
 802bc72:	61a3      	str	r3, [r4, #24]
 802bc74:	6923      	ldr	r3, [r4, #16]
 802bc76:	b943      	cbnz	r3, 802bc8a <__swsetup_r+0xc6>
 802bc78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802bc7c:	d1ba      	bne.n	802bbf4 <__swsetup_r+0x30>
 802bc7e:	bd70      	pop	{r4, r5, r6, pc}
 802bc80:	0781      	lsls	r1, r0, #30
 802bc82:	bf58      	it	pl
 802bc84:	6963      	ldrpl	r3, [r4, #20]
 802bc86:	60a3      	str	r3, [r4, #8]
 802bc88:	e7f4      	b.n	802bc74 <__swsetup_r+0xb0>
 802bc8a:	2000      	movs	r0, #0
 802bc8c:	e7f7      	b.n	802bc7e <__swsetup_r+0xba>
 802bc8e:	bf00      	nop
 802bc90:	200000bc 	.word	0x200000bc
 802bc94:	080311a0 	.word	0x080311a0
 802bc98:	080311c0 	.word	0x080311c0
 802bc9c:	08031180 	.word	0x08031180

0802bca0 <__register_exitproc>:
 802bca0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802bca4:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802bd60 <__register_exitproc+0xc0>
 802bca8:	4606      	mov	r6, r0
 802bcaa:	f8d8 0000 	ldr.w	r0, [r8]
 802bcae:	461f      	mov	r7, r3
 802bcb0:	460d      	mov	r5, r1
 802bcb2:	4691      	mov	r9, r2
 802bcb4:	f000 fb70 	bl	802c398 <__retarget_lock_acquire_recursive>
 802bcb8:	4b25      	ldr	r3, [pc, #148]	; (802bd50 <__register_exitproc+0xb0>)
 802bcba:	681c      	ldr	r4, [r3, #0]
 802bcbc:	b934      	cbnz	r4, 802bccc <__register_exitproc+0x2c>
 802bcbe:	4c25      	ldr	r4, [pc, #148]	; (802bd54 <__register_exitproc+0xb4>)
 802bcc0:	601c      	str	r4, [r3, #0]
 802bcc2:	4b25      	ldr	r3, [pc, #148]	; (802bd58 <__register_exitproc+0xb8>)
 802bcc4:	b113      	cbz	r3, 802bccc <__register_exitproc+0x2c>
 802bcc6:	681b      	ldr	r3, [r3, #0]
 802bcc8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 802bccc:	6863      	ldr	r3, [r4, #4]
 802bcce:	2b1f      	cmp	r3, #31
 802bcd0:	dd07      	ble.n	802bce2 <__register_exitproc+0x42>
 802bcd2:	f8d8 0000 	ldr.w	r0, [r8]
 802bcd6:	f000 fb61 	bl	802c39c <__retarget_lock_release_recursive>
 802bcda:	f04f 30ff 	mov.w	r0, #4294967295
 802bcde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802bce2:	b34e      	cbz	r6, 802bd38 <__register_exitproc+0x98>
 802bce4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 802bce8:	b988      	cbnz	r0, 802bd0e <__register_exitproc+0x6e>
 802bcea:	4b1c      	ldr	r3, [pc, #112]	; (802bd5c <__register_exitproc+0xbc>)
 802bcec:	b923      	cbnz	r3, 802bcf8 <__register_exitproc+0x58>
 802bcee:	f8d8 0000 	ldr.w	r0, [r8]
 802bcf2:	f000 fb52 	bl	802c39a <__retarget_lock_release>
 802bcf6:	e7f0      	b.n	802bcda <__register_exitproc+0x3a>
 802bcf8:	f44f 7084 	mov.w	r0, #264	; 0x108
 802bcfc:	f7fe f896 	bl	8029e2c <malloc>
 802bd00:	2800      	cmp	r0, #0
 802bd02:	d0f4      	beq.n	802bcee <__register_exitproc+0x4e>
 802bd04:	2300      	movs	r3, #0
 802bd06:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 802bd0a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 802bd0e:	6863      	ldr	r3, [r4, #4]
 802bd10:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802bd14:	2201      	movs	r2, #1
 802bd16:	409a      	lsls	r2, r3
 802bd18:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 802bd1c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 802bd20:	4313      	orrs	r3, r2
 802bd22:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802bd26:	2e02      	cmp	r6, #2
 802bd28:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 802bd2c:	bf02      	ittt	eq
 802bd2e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802bd32:	4313      	orreq	r3, r2
 802bd34:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 802bd38:	6863      	ldr	r3, [r4, #4]
 802bd3a:	f8d8 0000 	ldr.w	r0, [r8]
 802bd3e:	1c5a      	adds	r2, r3, #1
 802bd40:	3302      	adds	r3, #2
 802bd42:	6062      	str	r2, [r4, #4]
 802bd44:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 802bd48:	f000 fb28 	bl	802c39c <__retarget_lock_release_recursive>
 802bd4c:	2000      	movs	r0, #0
 802bd4e:	e7c6      	b.n	802bcde <__register_exitproc+0x3e>
 802bd50:	2003c580 	.word	0x2003c580
 802bd54:	2003c4f4 	.word	0x2003c4f4
 802bd58:	08030dd0 	.word	0x08030dd0
 802bd5c:	08029e2d 	.word	0x08029e2d
 802bd60:	20000128 	.word	0x20000128

0802bd64 <_close_r>:
 802bd64:	b538      	push	{r3, r4, r5, lr}
 802bd66:	4d06      	ldr	r5, [pc, #24]	; (802bd80 <_close_r+0x1c>)
 802bd68:	2300      	movs	r3, #0
 802bd6a:	4604      	mov	r4, r0
 802bd6c:	4608      	mov	r0, r1
 802bd6e:	602b      	str	r3, [r5, #0]
 802bd70:	f7d6 faff 	bl	8002372 <_close>
 802bd74:	1c43      	adds	r3, r0, #1
 802bd76:	d102      	bne.n	802bd7e <_close_r+0x1a>
 802bd78:	682b      	ldr	r3, [r5, #0]
 802bd7a:	b103      	cbz	r3, 802bd7e <_close_r+0x1a>
 802bd7c:	6023      	str	r3, [r4, #0]
 802bd7e:	bd38      	pop	{r3, r4, r5, pc}
 802bd80:	2003c58c 	.word	0x2003c58c

0802bd84 <div>:
 802bd84:	2900      	cmp	r1, #0
 802bd86:	b510      	push	{r4, lr}
 802bd88:	fb91 f4f2 	sdiv	r4, r1, r2
 802bd8c:	fb02 1314 	mls	r3, r2, r4, r1
 802bd90:	db06      	blt.n	802bda0 <div+0x1c>
 802bd92:	2b00      	cmp	r3, #0
 802bd94:	da01      	bge.n	802bd9a <div+0x16>
 802bd96:	3401      	adds	r4, #1
 802bd98:	1a9b      	subs	r3, r3, r2
 802bd9a:	e9c0 4300 	strd	r4, r3, [r0]
 802bd9e:	bd10      	pop	{r4, pc}
 802bda0:	2b00      	cmp	r3, #0
 802bda2:	bfc4      	itt	gt
 802bda4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 802bda8:	189b      	addgt	r3, r3, r2
 802bdaa:	e7f6      	b.n	802bd9a <div+0x16>

0802bdac <__sflush_r>:
 802bdac:	898a      	ldrh	r2, [r1, #12]
 802bdae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bdb2:	4605      	mov	r5, r0
 802bdb4:	0710      	lsls	r0, r2, #28
 802bdb6:	460c      	mov	r4, r1
 802bdb8:	d458      	bmi.n	802be6c <__sflush_r+0xc0>
 802bdba:	684b      	ldr	r3, [r1, #4]
 802bdbc:	2b00      	cmp	r3, #0
 802bdbe:	dc05      	bgt.n	802bdcc <__sflush_r+0x20>
 802bdc0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802bdc2:	2b00      	cmp	r3, #0
 802bdc4:	dc02      	bgt.n	802bdcc <__sflush_r+0x20>
 802bdc6:	2000      	movs	r0, #0
 802bdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bdcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bdce:	2e00      	cmp	r6, #0
 802bdd0:	d0f9      	beq.n	802bdc6 <__sflush_r+0x1a>
 802bdd2:	2300      	movs	r3, #0
 802bdd4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802bdd8:	682f      	ldr	r7, [r5, #0]
 802bdda:	602b      	str	r3, [r5, #0]
 802bddc:	d032      	beq.n	802be44 <__sflush_r+0x98>
 802bdde:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802bde0:	89a3      	ldrh	r3, [r4, #12]
 802bde2:	075a      	lsls	r2, r3, #29
 802bde4:	d505      	bpl.n	802bdf2 <__sflush_r+0x46>
 802bde6:	6863      	ldr	r3, [r4, #4]
 802bde8:	1ac0      	subs	r0, r0, r3
 802bdea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802bdec:	b10b      	cbz	r3, 802bdf2 <__sflush_r+0x46>
 802bdee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802bdf0:	1ac0      	subs	r0, r0, r3
 802bdf2:	2300      	movs	r3, #0
 802bdf4:	4602      	mov	r2, r0
 802bdf6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802bdf8:	6a21      	ldr	r1, [r4, #32]
 802bdfa:	4628      	mov	r0, r5
 802bdfc:	47b0      	blx	r6
 802bdfe:	1c43      	adds	r3, r0, #1
 802be00:	89a3      	ldrh	r3, [r4, #12]
 802be02:	d106      	bne.n	802be12 <__sflush_r+0x66>
 802be04:	6829      	ldr	r1, [r5, #0]
 802be06:	291d      	cmp	r1, #29
 802be08:	d82c      	bhi.n	802be64 <__sflush_r+0xb8>
 802be0a:	4a2a      	ldr	r2, [pc, #168]	; (802beb4 <__sflush_r+0x108>)
 802be0c:	40ca      	lsrs	r2, r1
 802be0e:	07d6      	lsls	r6, r2, #31
 802be10:	d528      	bpl.n	802be64 <__sflush_r+0xb8>
 802be12:	2200      	movs	r2, #0
 802be14:	6062      	str	r2, [r4, #4]
 802be16:	04d9      	lsls	r1, r3, #19
 802be18:	6922      	ldr	r2, [r4, #16]
 802be1a:	6022      	str	r2, [r4, #0]
 802be1c:	d504      	bpl.n	802be28 <__sflush_r+0x7c>
 802be1e:	1c42      	adds	r2, r0, #1
 802be20:	d101      	bne.n	802be26 <__sflush_r+0x7a>
 802be22:	682b      	ldr	r3, [r5, #0]
 802be24:	b903      	cbnz	r3, 802be28 <__sflush_r+0x7c>
 802be26:	6560      	str	r0, [r4, #84]	; 0x54
 802be28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802be2a:	602f      	str	r7, [r5, #0]
 802be2c:	2900      	cmp	r1, #0
 802be2e:	d0ca      	beq.n	802bdc6 <__sflush_r+0x1a>
 802be30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802be34:	4299      	cmp	r1, r3
 802be36:	d002      	beq.n	802be3e <__sflush_r+0x92>
 802be38:	4628      	mov	r0, r5
 802be3a:	f7fe fa8f 	bl	802a35c <_free_r>
 802be3e:	2000      	movs	r0, #0
 802be40:	6360      	str	r0, [r4, #52]	; 0x34
 802be42:	e7c1      	b.n	802bdc8 <__sflush_r+0x1c>
 802be44:	6a21      	ldr	r1, [r4, #32]
 802be46:	2301      	movs	r3, #1
 802be48:	4628      	mov	r0, r5
 802be4a:	47b0      	blx	r6
 802be4c:	1c41      	adds	r1, r0, #1
 802be4e:	d1c7      	bne.n	802bde0 <__sflush_r+0x34>
 802be50:	682b      	ldr	r3, [r5, #0]
 802be52:	2b00      	cmp	r3, #0
 802be54:	d0c4      	beq.n	802bde0 <__sflush_r+0x34>
 802be56:	2b1d      	cmp	r3, #29
 802be58:	d001      	beq.n	802be5e <__sflush_r+0xb2>
 802be5a:	2b16      	cmp	r3, #22
 802be5c:	d101      	bne.n	802be62 <__sflush_r+0xb6>
 802be5e:	602f      	str	r7, [r5, #0]
 802be60:	e7b1      	b.n	802bdc6 <__sflush_r+0x1a>
 802be62:	89a3      	ldrh	r3, [r4, #12]
 802be64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802be68:	81a3      	strh	r3, [r4, #12]
 802be6a:	e7ad      	b.n	802bdc8 <__sflush_r+0x1c>
 802be6c:	690f      	ldr	r7, [r1, #16]
 802be6e:	2f00      	cmp	r7, #0
 802be70:	d0a9      	beq.n	802bdc6 <__sflush_r+0x1a>
 802be72:	0793      	lsls	r3, r2, #30
 802be74:	680e      	ldr	r6, [r1, #0]
 802be76:	bf08      	it	eq
 802be78:	694b      	ldreq	r3, [r1, #20]
 802be7a:	600f      	str	r7, [r1, #0]
 802be7c:	bf18      	it	ne
 802be7e:	2300      	movne	r3, #0
 802be80:	eba6 0807 	sub.w	r8, r6, r7
 802be84:	608b      	str	r3, [r1, #8]
 802be86:	f1b8 0f00 	cmp.w	r8, #0
 802be8a:	dd9c      	ble.n	802bdc6 <__sflush_r+0x1a>
 802be8c:	6a21      	ldr	r1, [r4, #32]
 802be8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802be90:	4643      	mov	r3, r8
 802be92:	463a      	mov	r2, r7
 802be94:	4628      	mov	r0, r5
 802be96:	47b0      	blx	r6
 802be98:	2800      	cmp	r0, #0
 802be9a:	dc06      	bgt.n	802beaa <__sflush_r+0xfe>
 802be9c:	89a3      	ldrh	r3, [r4, #12]
 802be9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802bea2:	81a3      	strh	r3, [r4, #12]
 802bea4:	f04f 30ff 	mov.w	r0, #4294967295
 802bea8:	e78e      	b.n	802bdc8 <__sflush_r+0x1c>
 802beaa:	4407      	add	r7, r0
 802beac:	eba8 0800 	sub.w	r8, r8, r0
 802beb0:	e7e9      	b.n	802be86 <__sflush_r+0xda>
 802beb2:	bf00      	nop
 802beb4:	20400001 	.word	0x20400001

0802beb8 <_fflush_r>:
 802beb8:	b538      	push	{r3, r4, r5, lr}
 802beba:	690b      	ldr	r3, [r1, #16]
 802bebc:	4605      	mov	r5, r0
 802bebe:	460c      	mov	r4, r1
 802bec0:	b913      	cbnz	r3, 802bec8 <_fflush_r+0x10>
 802bec2:	2500      	movs	r5, #0
 802bec4:	4628      	mov	r0, r5
 802bec6:	bd38      	pop	{r3, r4, r5, pc}
 802bec8:	b118      	cbz	r0, 802bed2 <_fflush_r+0x1a>
 802beca:	6983      	ldr	r3, [r0, #24]
 802becc:	b90b      	cbnz	r3, 802bed2 <_fflush_r+0x1a>
 802bece:	f000 f887 	bl	802bfe0 <__sinit>
 802bed2:	4b14      	ldr	r3, [pc, #80]	; (802bf24 <_fflush_r+0x6c>)
 802bed4:	429c      	cmp	r4, r3
 802bed6:	d11b      	bne.n	802bf10 <_fflush_r+0x58>
 802bed8:	686c      	ldr	r4, [r5, #4]
 802beda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802bede:	2b00      	cmp	r3, #0
 802bee0:	d0ef      	beq.n	802bec2 <_fflush_r+0xa>
 802bee2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802bee4:	07d0      	lsls	r0, r2, #31
 802bee6:	d404      	bmi.n	802bef2 <_fflush_r+0x3a>
 802bee8:	0599      	lsls	r1, r3, #22
 802beea:	d402      	bmi.n	802bef2 <_fflush_r+0x3a>
 802beec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802beee:	f000 fa53 	bl	802c398 <__retarget_lock_acquire_recursive>
 802bef2:	4628      	mov	r0, r5
 802bef4:	4621      	mov	r1, r4
 802bef6:	f7ff ff59 	bl	802bdac <__sflush_r>
 802befa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802befc:	07da      	lsls	r2, r3, #31
 802befe:	4605      	mov	r5, r0
 802bf00:	d4e0      	bmi.n	802bec4 <_fflush_r+0xc>
 802bf02:	89a3      	ldrh	r3, [r4, #12]
 802bf04:	059b      	lsls	r3, r3, #22
 802bf06:	d4dd      	bmi.n	802bec4 <_fflush_r+0xc>
 802bf08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802bf0a:	f000 fa47 	bl	802c39c <__retarget_lock_release_recursive>
 802bf0e:	e7d9      	b.n	802bec4 <_fflush_r+0xc>
 802bf10:	4b05      	ldr	r3, [pc, #20]	; (802bf28 <_fflush_r+0x70>)
 802bf12:	429c      	cmp	r4, r3
 802bf14:	d101      	bne.n	802bf1a <_fflush_r+0x62>
 802bf16:	68ac      	ldr	r4, [r5, #8]
 802bf18:	e7df      	b.n	802beda <_fflush_r+0x22>
 802bf1a:	4b04      	ldr	r3, [pc, #16]	; (802bf2c <_fflush_r+0x74>)
 802bf1c:	429c      	cmp	r4, r3
 802bf1e:	bf08      	it	eq
 802bf20:	68ec      	ldreq	r4, [r5, #12]
 802bf22:	e7da      	b.n	802beda <_fflush_r+0x22>
 802bf24:	080311a0 	.word	0x080311a0
 802bf28:	080311c0 	.word	0x080311c0
 802bf2c:	08031180 	.word	0x08031180

0802bf30 <std>:
 802bf30:	2300      	movs	r3, #0
 802bf32:	b510      	push	{r4, lr}
 802bf34:	4604      	mov	r4, r0
 802bf36:	e9c0 3300 	strd	r3, r3, [r0]
 802bf3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802bf3e:	6083      	str	r3, [r0, #8]
 802bf40:	8181      	strh	r1, [r0, #12]
 802bf42:	6643      	str	r3, [r0, #100]	; 0x64
 802bf44:	81c2      	strh	r2, [r0, #14]
 802bf46:	6183      	str	r3, [r0, #24]
 802bf48:	4619      	mov	r1, r3
 802bf4a:	2208      	movs	r2, #8
 802bf4c:	305c      	adds	r0, #92	; 0x5c
 802bf4e:	f7fd ff8b 	bl	8029e68 <memset>
 802bf52:	4b05      	ldr	r3, [pc, #20]	; (802bf68 <std+0x38>)
 802bf54:	6263      	str	r3, [r4, #36]	; 0x24
 802bf56:	4b05      	ldr	r3, [pc, #20]	; (802bf6c <std+0x3c>)
 802bf58:	62a3      	str	r3, [r4, #40]	; 0x28
 802bf5a:	4b05      	ldr	r3, [pc, #20]	; (802bf70 <std+0x40>)
 802bf5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802bf5e:	4b05      	ldr	r3, [pc, #20]	; (802bf74 <std+0x44>)
 802bf60:	6224      	str	r4, [r4, #32]
 802bf62:	6323      	str	r3, [r4, #48]	; 0x30
 802bf64:	bd10      	pop	{r4, pc}
 802bf66:	bf00      	nop
 802bf68:	0802abf9 	.word	0x0802abf9
 802bf6c:	0802ac1f 	.word	0x0802ac1f
 802bf70:	0802ac57 	.word	0x0802ac57
 802bf74:	0802ac7b 	.word	0x0802ac7b

0802bf78 <_cleanup_r>:
 802bf78:	4901      	ldr	r1, [pc, #4]	; (802bf80 <_cleanup_r+0x8>)
 802bf7a:	f000 b8af 	b.w	802c0dc <_fwalk_reent>
 802bf7e:	bf00      	nop
 802bf80:	0802beb9 	.word	0x0802beb9

0802bf84 <__sfmoreglue>:
 802bf84:	b570      	push	{r4, r5, r6, lr}
 802bf86:	2268      	movs	r2, #104	; 0x68
 802bf88:	1e4d      	subs	r5, r1, #1
 802bf8a:	4355      	muls	r5, r2
 802bf8c:	460e      	mov	r6, r1
 802bf8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 802bf92:	f7fe fa4f 	bl	802a434 <_malloc_r>
 802bf96:	4604      	mov	r4, r0
 802bf98:	b140      	cbz	r0, 802bfac <__sfmoreglue+0x28>
 802bf9a:	2100      	movs	r1, #0
 802bf9c:	e9c0 1600 	strd	r1, r6, [r0]
 802bfa0:	300c      	adds	r0, #12
 802bfa2:	60a0      	str	r0, [r4, #8]
 802bfa4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802bfa8:	f7fd ff5e 	bl	8029e68 <memset>
 802bfac:	4620      	mov	r0, r4
 802bfae:	bd70      	pop	{r4, r5, r6, pc}

0802bfb0 <__sfp_lock_acquire>:
 802bfb0:	4801      	ldr	r0, [pc, #4]	; (802bfb8 <__sfp_lock_acquire+0x8>)
 802bfb2:	f000 b9f1 	b.w	802c398 <__retarget_lock_acquire_recursive>
 802bfb6:	bf00      	nop
 802bfb8:	2003c587 	.word	0x2003c587

0802bfbc <__sfp_lock_release>:
 802bfbc:	4801      	ldr	r0, [pc, #4]	; (802bfc4 <__sfp_lock_release+0x8>)
 802bfbe:	f000 b9ed 	b.w	802c39c <__retarget_lock_release_recursive>
 802bfc2:	bf00      	nop
 802bfc4:	2003c587 	.word	0x2003c587

0802bfc8 <__sinit_lock_acquire>:
 802bfc8:	4801      	ldr	r0, [pc, #4]	; (802bfd0 <__sinit_lock_acquire+0x8>)
 802bfca:	f000 b9e5 	b.w	802c398 <__retarget_lock_acquire_recursive>
 802bfce:	bf00      	nop
 802bfd0:	2003c588 	.word	0x2003c588

0802bfd4 <__sinit_lock_release>:
 802bfd4:	4801      	ldr	r0, [pc, #4]	; (802bfdc <__sinit_lock_release+0x8>)
 802bfd6:	f000 b9e1 	b.w	802c39c <__retarget_lock_release_recursive>
 802bfda:	bf00      	nop
 802bfdc:	2003c588 	.word	0x2003c588

0802bfe0 <__sinit>:
 802bfe0:	b510      	push	{r4, lr}
 802bfe2:	4604      	mov	r4, r0
 802bfe4:	f7ff fff0 	bl	802bfc8 <__sinit_lock_acquire>
 802bfe8:	69a3      	ldr	r3, [r4, #24]
 802bfea:	b11b      	cbz	r3, 802bff4 <__sinit+0x14>
 802bfec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802bff0:	f7ff bff0 	b.w	802bfd4 <__sinit_lock_release>
 802bff4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802bff8:	6523      	str	r3, [r4, #80]	; 0x50
 802bffa:	4b13      	ldr	r3, [pc, #76]	; (802c048 <__sinit+0x68>)
 802bffc:	4a13      	ldr	r2, [pc, #76]	; (802c04c <__sinit+0x6c>)
 802bffe:	681b      	ldr	r3, [r3, #0]
 802c000:	62a2      	str	r2, [r4, #40]	; 0x28
 802c002:	42a3      	cmp	r3, r4
 802c004:	bf04      	itt	eq
 802c006:	2301      	moveq	r3, #1
 802c008:	61a3      	streq	r3, [r4, #24]
 802c00a:	4620      	mov	r0, r4
 802c00c:	f000 f820 	bl	802c050 <__sfp>
 802c010:	6060      	str	r0, [r4, #4]
 802c012:	4620      	mov	r0, r4
 802c014:	f000 f81c 	bl	802c050 <__sfp>
 802c018:	60a0      	str	r0, [r4, #8]
 802c01a:	4620      	mov	r0, r4
 802c01c:	f000 f818 	bl	802c050 <__sfp>
 802c020:	2200      	movs	r2, #0
 802c022:	60e0      	str	r0, [r4, #12]
 802c024:	2104      	movs	r1, #4
 802c026:	6860      	ldr	r0, [r4, #4]
 802c028:	f7ff ff82 	bl	802bf30 <std>
 802c02c:	68a0      	ldr	r0, [r4, #8]
 802c02e:	2201      	movs	r2, #1
 802c030:	2109      	movs	r1, #9
 802c032:	f7ff ff7d 	bl	802bf30 <std>
 802c036:	68e0      	ldr	r0, [r4, #12]
 802c038:	2202      	movs	r2, #2
 802c03a:	2112      	movs	r1, #18
 802c03c:	f7ff ff78 	bl	802bf30 <std>
 802c040:	2301      	movs	r3, #1
 802c042:	61a3      	str	r3, [r4, #24]
 802c044:	e7d2      	b.n	802bfec <__sinit+0xc>
 802c046:	bf00      	nop
 802c048:	08030d38 	.word	0x08030d38
 802c04c:	0802bf79 	.word	0x0802bf79

0802c050 <__sfp>:
 802c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802c052:	4607      	mov	r7, r0
 802c054:	f7ff ffac 	bl	802bfb0 <__sfp_lock_acquire>
 802c058:	4b1e      	ldr	r3, [pc, #120]	; (802c0d4 <__sfp+0x84>)
 802c05a:	681e      	ldr	r6, [r3, #0]
 802c05c:	69b3      	ldr	r3, [r6, #24]
 802c05e:	b913      	cbnz	r3, 802c066 <__sfp+0x16>
 802c060:	4630      	mov	r0, r6
 802c062:	f7ff ffbd 	bl	802bfe0 <__sinit>
 802c066:	3648      	adds	r6, #72	; 0x48
 802c068:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802c06c:	3b01      	subs	r3, #1
 802c06e:	d503      	bpl.n	802c078 <__sfp+0x28>
 802c070:	6833      	ldr	r3, [r6, #0]
 802c072:	b30b      	cbz	r3, 802c0b8 <__sfp+0x68>
 802c074:	6836      	ldr	r6, [r6, #0]
 802c076:	e7f7      	b.n	802c068 <__sfp+0x18>
 802c078:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802c07c:	b9d5      	cbnz	r5, 802c0b4 <__sfp+0x64>
 802c07e:	4b16      	ldr	r3, [pc, #88]	; (802c0d8 <__sfp+0x88>)
 802c080:	60e3      	str	r3, [r4, #12]
 802c082:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802c086:	6665      	str	r5, [r4, #100]	; 0x64
 802c088:	f000 f984 	bl	802c394 <__retarget_lock_init_recursive>
 802c08c:	f7ff ff96 	bl	802bfbc <__sfp_lock_release>
 802c090:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802c094:	e9c4 5504 	strd	r5, r5, [r4, #16]
 802c098:	6025      	str	r5, [r4, #0]
 802c09a:	61a5      	str	r5, [r4, #24]
 802c09c:	2208      	movs	r2, #8
 802c09e:	4629      	mov	r1, r5
 802c0a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802c0a4:	f7fd fee0 	bl	8029e68 <memset>
 802c0a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802c0ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 802c0b0:	4620      	mov	r0, r4
 802c0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c0b4:	3468      	adds	r4, #104	; 0x68
 802c0b6:	e7d9      	b.n	802c06c <__sfp+0x1c>
 802c0b8:	2104      	movs	r1, #4
 802c0ba:	4638      	mov	r0, r7
 802c0bc:	f7ff ff62 	bl	802bf84 <__sfmoreglue>
 802c0c0:	4604      	mov	r4, r0
 802c0c2:	6030      	str	r0, [r6, #0]
 802c0c4:	2800      	cmp	r0, #0
 802c0c6:	d1d5      	bne.n	802c074 <__sfp+0x24>
 802c0c8:	f7ff ff78 	bl	802bfbc <__sfp_lock_release>
 802c0cc:	230c      	movs	r3, #12
 802c0ce:	603b      	str	r3, [r7, #0]
 802c0d0:	e7ee      	b.n	802c0b0 <__sfp+0x60>
 802c0d2:	bf00      	nop
 802c0d4:	08030d38 	.word	0x08030d38
 802c0d8:	ffff0001 	.word	0xffff0001

0802c0dc <_fwalk_reent>:
 802c0dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c0e0:	4606      	mov	r6, r0
 802c0e2:	4688      	mov	r8, r1
 802c0e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802c0e8:	2700      	movs	r7, #0
 802c0ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802c0ee:	f1b9 0901 	subs.w	r9, r9, #1
 802c0f2:	d505      	bpl.n	802c100 <_fwalk_reent+0x24>
 802c0f4:	6824      	ldr	r4, [r4, #0]
 802c0f6:	2c00      	cmp	r4, #0
 802c0f8:	d1f7      	bne.n	802c0ea <_fwalk_reent+0xe>
 802c0fa:	4638      	mov	r0, r7
 802c0fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c100:	89ab      	ldrh	r3, [r5, #12]
 802c102:	2b01      	cmp	r3, #1
 802c104:	d907      	bls.n	802c116 <_fwalk_reent+0x3a>
 802c106:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802c10a:	3301      	adds	r3, #1
 802c10c:	d003      	beq.n	802c116 <_fwalk_reent+0x3a>
 802c10e:	4629      	mov	r1, r5
 802c110:	4630      	mov	r0, r6
 802c112:	47c0      	blx	r8
 802c114:	4307      	orrs	r7, r0
 802c116:	3568      	adds	r5, #104	; 0x68
 802c118:	e7e9      	b.n	802c0ee <_fwalk_reent+0x12>
	...

0802c11c <_findenv_r>:
 802c11c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c120:	f8df a06c 	ldr.w	sl, [pc, #108]	; 802c190 <_findenv_r+0x74>
 802c124:	4607      	mov	r7, r0
 802c126:	4689      	mov	r9, r1
 802c128:	4616      	mov	r6, r2
 802c12a:	f000 fe61 	bl	802cdf0 <__env_lock>
 802c12e:	f8da 4000 	ldr.w	r4, [sl]
 802c132:	b134      	cbz	r4, 802c142 <_findenv_r+0x26>
 802c134:	464b      	mov	r3, r9
 802c136:	4698      	mov	r8, r3
 802c138:	f813 2b01 	ldrb.w	r2, [r3], #1
 802c13c:	b13a      	cbz	r2, 802c14e <_findenv_r+0x32>
 802c13e:	2a3d      	cmp	r2, #61	; 0x3d
 802c140:	d1f9      	bne.n	802c136 <_findenv_r+0x1a>
 802c142:	4638      	mov	r0, r7
 802c144:	f000 fe5a 	bl	802cdfc <__env_unlock>
 802c148:	2000      	movs	r0, #0
 802c14a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c14e:	eba8 0809 	sub.w	r8, r8, r9
 802c152:	46a3      	mov	fp, r4
 802c154:	f854 0b04 	ldr.w	r0, [r4], #4
 802c158:	2800      	cmp	r0, #0
 802c15a:	d0f2      	beq.n	802c142 <_findenv_r+0x26>
 802c15c:	4642      	mov	r2, r8
 802c15e:	4649      	mov	r1, r9
 802c160:	f7fe fd8f 	bl	802ac82 <strncmp>
 802c164:	2800      	cmp	r0, #0
 802c166:	d1f4      	bne.n	802c152 <_findenv_r+0x36>
 802c168:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802c16c:	eb03 0508 	add.w	r5, r3, r8
 802c170:	f813 3008 	ldrb.w	r3, [r3, r8]
 802c174:	2b3d      	cmp	r3, #61	; 0x3d
 802c176:	d1ec      	bne.n	802c152 <_findenv_r+0x36>
 802c178:	f8da 3000 	ldr.w	r3, [sl]
 802c17c:	ebab 0303 	sub.w	r3, fp, r3
 802c180:	109b      	asrs	r3, r3, #2
 802c182:	4638      	mov	r0, r7
 802c184:	6033      	str	r3, [r6, #0]
 802c186:	f000 fe39 	bl	802cdfc <__env_unlock>
 802c18a:	1c68      	adds	r0, r5, #1
 802c18c:	e7dd      	b.n	802c14a <_findenv_r+0x2e>
 802c18e:	bf00      	nop
 802c190:	20000010 	.word	0x20000010

0802c194 <_getenv_r>:
 802c194:	b507      	push	{r0, r1, r2, lr}
 802c196:	aa01      	add	r2, sp, #4
 802c198:	f7ff ffc0 	bl	802c11c <_findenv_r>
 802c19c:	b003      	add	sp, #12
 802c19e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0802c1a4 <__gettzinfo>:
 802c1a4:	4800      	ldr	r0, [pc, #0]	; (802c1a8 <__gettzinfo+0x4>)
 802c1a6:	4770      	bx	lr
 802c1a8:	20000130 	.word	0x20000130

0802c1ac <localtime_r>:
 802c1ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802c1b0:	4680      	mov	r8, r0
 802c1b2:	9101      	str	r1, [sp, #4]
 802c1b4:	f7ff fff6 	bl	802c1a4 <__gettzinfo>
 802c1b8:	9901      	ldr	r1, [sp, #4]
 802c1ba:	4605      	mov	r5, r0
 802c1bc:	4640      	mov	r0, r8
 802c1be:	f000 fe35 	bl	802ce2c <gmtime_r>
 802c1c2:	6943      	ldr	r3, [r0, #20]
 802c1c4:	0799      	lsls	r1, r3, #30
 802c1c6:	4604      	mov	r4, r0
 802c1c8:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 802c1cc:	d105      	bne.n	802c1da <localtime_r+0x2e>
 802c1ce:	2264      	movs	r2, #100	; 0x64
 802c1d0:	fb97 f3f2 	sdiv	r3, r7, r2
 802c1d4:	fb02 7313 	mls	r3, r2, r3, r7
 802c1d8:	bb73      	cbnz	r3, 802c238 <localtime_r+0x8c>
 802c1da:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802c1de:	fb97 f6f3 	sdiv	r6, r7, r3
 802c1e2:	fb03 7616 	mls	r6, r3, r6, r7
 802c1e6:	fab6 f386 	clz	r3, r6
 802c1ea:	095b      	lsrs	r3, r3, #5
 802c1ec:	4e67      	ldr	r6, [pc, #412]	; (802c38c <localtime_r+0x1e0>)
 802c1ee:	2230      	movs	r2, #48	; 0x30
 802c1f0:	fb02 6603 	mla	r6, r2, r3, r6
 802c1f4:	f7ff faf0 	bl	802b7d8 <__tz_lock>
 802c1f8:	f7ff fafa 	bl	802b7f0 <_tzset_unlocked>
 802c1fc:	4b64      	ldr	r3, [pc, #400]	; (802c390 <localtime_r+0x1e4>)
 802c1fe:	681b      	ldr	r3, [r3, #0]
 802c200:	b34b      	cbz	r3, 802c256 <localtime_r+0xaa>
 802c202:	686b      	ldr	r3, [r5, #4]
 802c204:	42bb      	cmp	r3, r7
 802c206:	d119      	bne.n	802c23c <localtime_r+0x90>
 802c208:	682f      	ldr	r7, [r5, #0]
 802c20a:	e9d8 2300 	ldrd	r2, r3, [r8]
 802c20e:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 802c212:	b9df      	cbnz	r7, 802c24c <localtime_r+0xa0>
 802c214:	4282      	cmp	r2, r0
 802c216:	eb73 0101 	sbcs.w	r1, r3, r1
 802c21a:	da23      	bge.n	802c264 <localtime_r+0xb8>
 802c21c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 802c220:	4282      	cmp	r2, r0
 802c222:	eb73 0701 	sbcs.w	r7, r3, r1
 802c226:	bfb4      	ite	lt
 802c228:	2701      	movlt	r7, #1
 802c22a:	2700      	movge	r7, #0
 802c22c:	4282      	cmp	r2, r0
 802c22e:	418b      	sbcs	r3, r1
 802c230:	6227      	str	r7, [r4, #32]
 802c232:	db19      	blt.n	802c268 <localtime_r+0xbc>
 802c234:	6aab      	ldr	r3, [r5, #40]	; 0x28
 802c236:	e018      	b.n	802c26a <localtime_r+0xbe>
 802c238:	2301      	movs	r3, #1
 802c23a:	e7d7      	b.n	802c1ec <localtime_r+0x40>
 802c23c:	4638      	mov	r0, r7
 802c23e:	f7ff fa21 	bl	802b684 <__tzcalc_limits>
 802c242:	2800      	cmp	r0, #0
 802c244:	d1e0      	bne.n	802c208 <localtime_r+0x5c>
 802c246:	f04f 33ff 	mov.w	r3, #4294967295
 802c24a:	e004      	b.n	802c256 <localtime_r+0xaa>
 802c24c:	4282      	cmp	r2, r0
 802c24e:	eb73 0101 	sbcs.w	r1, r3, r1
 802c252:	da02      	bge.n	802c25a <localtime_r+0xae>
 802c254:	2300      	movs	r3, #0
 802c256:	6223      	str	r3, [r4, #32]
 802c258:	e7ec      	b.n	802c234 <localtime_r+0x88>
 802c25a:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 802c25e:	4282      	cmp	r2, r0
 802c260:	418b      	sbcs	r3, r1
 802c262:	daf7      	bge.n	802c254 <localtime_r+0xa8>
 802c264:	2301      	movs	r3, #1
 802c266:	6223      	str	r3, [r4, #32]
 802c268:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802c26a:	6861      	ldr	r1, [r4, #4]
 802c26c:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 802c270:	203c      	movs	r0, #60	; 0x3c
 802c272:	fb93 f5f2 	sdiv	r5, r3, r2
 802c276:	fb02 3315 	mls	r3, r2, r5, r3
 802c27a:	fb93 f2f0 	sdiv	r2, r3, r0
 802c27e:	fb00 3012 	mls	r0, r0, r2, r3
 802c282:	6823      	ldr	r3, [r4, #0]
 802c284:	1a89      	subs	r1, r1, r2
 802c286:	68a2      	ldr	r2, [r4, #8]
 802c288:	6061      	str	r1, [r4, #4]
 802c28a:	1a1b      	subs	r3, r3, r0
 802c28c:	1b52      	subs	r2, r2, r5
 802c28e:	2b3b      	cmp	r3, #59	; 0x3b
 802c290:	6023      	str	r3, [r4, #0]
 802c292:	60a2      	str	r2, [r4, #8]
 802c294:	dd35      	ble.n	802c302 <localtime_r+0x156>
 802c296:	3101      	adds	r1, #1
 802c298:	6061      	str	r1, [r4, #4]
 802c29a:	3b3c      	subs	r3, #60	; 0x3c
 802c29c:	6023      	str	r3, [r4, #0]
 802c29e:	6863      	ldr	r3, [r4, #4]
 802c2a0:	2b3b      	cmp	r3, #59	; 0x3b
 802c2a2:	dd34      	ble.n	802c30e <localtime_r+0x162>
 802c2a4:	3201      	adds	r2, #1
 802c2a6:	60a2      	str	r2, [r4, #8]
 802c2a8:	3b3c      	subs	r3, #60	; 0x3c
 802c2aa:	6063      	str	r3, [r4, #4]
 802c2ac:	68a3      	ldr	r3, [r4, #8]
 802c2ae:	2b17      	cmp	r3, #23
 802c2b0:	dd33      	ble.n	802c31a <localtime_r+0x16e>
 802c2b2:	69e2      	ldr	r2, [r4, #28]
 802c2b4:	3201      	adds	r2, #1
 802c2b6:	61e2      	str	r2, [r4, #28]
 802c2b8:	69a2      	ldr	r2, [r4, #24]
 802c2ba:	3201      	adds	r2, #1
 802c2bc:	2a06      	cmp	r2, #6
 802c2be:	bfc8      	it	gt
 802c2c0:	2200      	movgt	r2, #0
 802c2c2:	61a2      	str	r2, [r4, #24]
 802c2c4:	68e2      	ldr	r2, [r4, #12]
 802c2c6:	3b18      	subs	r3, #24
 802c2c8:	3201      	adds	r2, #1
 802c2ca:	60a3      	str	r3, [r4, #8]
 802c2cc:	6923      	ldr	r3, [r4, #16]
 802c2ce:	60e2      	str	r2, [r4, #12]
 802c2d0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 802c2d4:	428a      	cmp	r2, r1
 802c2d6:	dd0e      	ble.n	802c2f6 <localtime_r+0x14a>
 802c2d8:	2b0b      	cmp	r3, #11
 802c2da:	eba2 0201 	sub.w	r2, r2, r1
 802c2de:	60e2      	str	r2, [r4, #12]
 802c2e0:	f103 0201 	add.w	r2, r3, #1
 802c2e4:	bf09      	itett	eq
 802c2e6:	6963      	ldreq	r3, [r4, #20]
 802c2e8:	6122      	strne	r2, [r4, #16]
 802c2ea:	2200      	moveq	r2, #0
 802c2ec:	3301      	addeq	r3, #1
 802c2ee:	bf02      	ittt	eq
 802c2f0:	6122      	streq	r2, [r4, #16]
 802c2f2:	6163      	streq	r3, [r4, #20]
 802c2f4:	61e2      	streq	r2, [r4, #28]
 802c2f6:	f7ff fa75 	bl	802b7e4 <__tz_unlock>
 802c2fa:	4620      	mov	r0, r4
 802c2fc:	b002      	add	sp, #8
 802c2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c302:	2b00      	cmp	r3, #0
 802c304:	dacb      	bge.n	802c29e <localtime_r+0xf2>
 802c306:	3901      	subs	r1, #1
 802c308:	6061      	str	r1, [r4, #4]
 802c30a:	333c      	adds	r3, #60	; 0x3c
 802c30c:	e7c6      	b.n	802c29c <localtime_r+0xf0>
 802c30e:	2b00      	cmp	r3, #0
 802c310:	dacc      	bge.n	802c2ac <localtime_r+0x100>
 802c312:	3a01      	subs	r2, #1
 802c314:	60a2      	str	r2, [r4, #8]
 802c316:	333c      	adds	r3, #60	; 0x3c
 802c318:	e7c7      	b.n	802c2aa <localtime_r+0xfe>
 802c31a:	2b00      	cmp	r3, #0
 802c31c:	daeb      	bge.n	802c2f6 <localtime_r+0x14a>
 802c31e:	69e2      	ldr	r2, [r4, #28]
 802c320:	3a01      	subs	r2, #1
 802c322:	61e2      	str	r2, [r4, #28]
 802c324:	69a2      	ldr	r2, [r4, #24]
 802c326:	3a01      	subs	r2, #1
 802c328:	bf48      	it	mi
 802c32a:	2206      	movmi	r2, #6
 802c32c:	61a2      	str	r2, [r4, #24]
 802c32e:	68e2      	ldr	r2, [r4, #12]
 802c330:	3318      	adds	r3, #24
 802c332:	3a01      	subs	r2, #1
 802c334:	60e2      	str	r2, [r4, #12]
 802c336:	60a3      	str	r3, [r4, #8]
 802c338:	2a00      	cmp	r2, #0
 802c33a:	d1dc      	bne.n	802c2f6 <localtime_r+0x14a>
 802c33c:	6923      	ldr	r3, [r4, #16]
 802c33e:	3b01      	subs	r3, #1
 802c340:	d405      	bmi.n	802c34e <localtime_r+0x1a2>
 802c342:	6123      	str	r3, [r4, #16]
 802c344:	6923      	ldr	r3, [r4, #16]
 802c346:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802c34a:	60e3      	str	r3, [r4, #12]
 802c34c:	e7d3      	b.n	802c2f6 <localtime_r+0x14a>
 802c34e:	230b      	movs	r3, #11
 802c350:	6123      	str	r3, [r4, #16]
 802c352:	6963      	ldr	r3, [r4, #20]
 802c354:	1e5a      	subs	r2, r3, #1
 802c356:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 802c35a:	6162      	str	r2, [r4, #20]
 802c35c:	079a      	lsls	r2, r3, #30
 802c35e:	d105      	bne.n	802c36c <localtime_r+0x1c0>
 802c360:	2164      	movs	r1, #100	; 0x64
 802c362:	fb93 f2f1 	sdiv	r2, r3, r1
 802c366:	fb01 3212 	mls	r2, r1, r2, r3
 802c36a:	b962      	cbnz	r2, 802c386 <localtime_r+0x1da>
 802c36c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802c370:	fb93 f1f2 	sdiv	r1, r3, r2
 802c374:	fb02 3311 	mls	r3, r2, r1, r3
 802c378:	fab3 f383 	clz	r3, r3
 802c37c:	095b      	lsrs	r3, r3, #5
 802c37e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 802c382:	61e3      	str	r3, [r4, #28]
 802c384:	e7de      	b.n	802c344 <localtime_r+0x198>
 802c386:	2301      	movs	r3, #1
 802c388:	e7f9      	b.n	802c37e <localtime_r+0x1d2>
 802c38a:	bf00      	nop
 802c38c:	080311ec 	.word	0x080311ec
 802c390:	2003c4ec 	.word	0x2003c4ec

0802c394 <__retarget_lock_init_recursive>:
 802c394:	4770      	bx	lr

0802c396 <__retarget_lock_acquire>:
 802c396:	4770      	bx	lr

0802c398 <__retarget_lock_acquire_recursive>:
 802c398:	4770      	bx	lr

0802c39a <__retarget_lock_release>:
 802c39a:	4770      	bx	lr

0802c39c <__retarget_lock_release_recursive>:
 802c39c:	4770      	bx	lr
	...

0802c3a0 <_lseek_r>:
 802c3a0:	b538      	push	{r3, r4, r5, lr}
 802c3a2:	4d07      	ldr	r5, [pc, #28]	; (802c3c0 <_lseek_r+0x20>)
 802c3a4:	4604      	mov	r4, r0
 802c3a6:	4608      	mov	r0, r1
 802c3a8:	4611      	mov	r1, r2
 802c3aa:	2200      	movs	r2, #0
 802c3ac:	602a      	str	r2, [r5, #0]
 802c3ae:	461a      	mov	r2, r3
 802c3b0:	f7d6 f806 	bl	80023c0 <_lseek>
 802c3b4:	1c43      	adds	r3, r0, #1
 802c3b6:	d102      	bne.n	802c3be <_lseek_r+0x1e>
 802c3b8:	682b      	ldr	r3, [r5, #0]
 802c3ba:	b103      	cbz	r3, 802c3be <_lseek_r+0x1e>
 802c3bc:	6023      	str	r3, [r4, #0]
 802c3be:	bd38      	pop	{r3, r4, r5, pc}
 802c3c0:	2003c58c 	.word	0x2003c58c

0802c3c4 <__swhatbuf_r>:
 802c3c4:	b570      	push	{r4, r5, r6, lr}
 802c3c6:	460e      	mov	r6, r1
 802c3c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802c3cc:	2900      	cmp	r1, #0
 802c3ce:	b096      	sub	sp, #88	; 0x58
 802c3d0:	4614      	mov	r4, r2
 802c3d2:	461d      	mov	r5, r3
 802c3d4:	da08      	bge.n	802c3e8 <__swhatbuf_r+0x24>
 802c3d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 802c3da:	2200      	movs	r2, #0
 802c3dc:	602a      	str	r2, [r5, #0]
 802c3de:	061a      	lsls	r2, r3, #24
 802c3e0:	d410      	bmi.n	802c404 <__swhatbuf_r+0x40>
 802c3e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802c3e6:	e00e      	b.n	802c406 <__swhatbuf_r+0x42>
 802c3e8:	466a      	mov	r2, sp
 802c3ea:	f000 fd0d 	bl	802ce08 <_fstat_r>
 802c3ee:	2800      	cmp	r0, #0
 802c3f0:	dbf1      	blt.n	802c3d6 <__swhatbuf_r+0x12>
 802c3f2:	9a01      	ldr	r2, [sp, #4]
 802c3f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802c3f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802c3fc:	425a      	negs	r2, r3
 802c3fe:	415a      	adcs	r2, r3
 802c400:	602a      	str	r2, [r5, #0]
 802c402:	e7ee      	b.n	802c3e2 <__swhatbuf_r+0x1e>
 802c404:	2340      	movs	r3, #64	; 0x40
 802c406:	2000      	movs	r0, #0
 802c408:	6023      	str	r3, [r4, #0]
 802c40a:	b016      	add	sp, #88	; 0x58
 802c40c:	bd70      	pop	{r4, r5, r6, pc}
	...

0802c410 <__smakebuf_r>:
 802c410:	898b      	ldrh	r3, [r1, #12]
 802c412:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802c414:	079d      	lsls	r5, r3, #30
 802c416:	4606      	mov	r6, r0
 802c418:	460c      	mov	r4, r1
 802c41a:	d507      	bpl.n	802c42c <__smakebuf_r+0x1c>
 802c41c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802c420:	6023      	str	r3, [r4, #0]
 802c422:	6123      	str	r3, [r4, #16]
 802c424:	2301      	movs	r3, #1
 802c426:	6163      	str	r3, [r4, #20]
 802c428:	b002      	add	sp, #8
 802c42a:	bd70      	pop	{r4, r5, r6, pc}
 802c42c:	ab01      	add	r3, sp, #4
 802c42e:	466a      	mov	r2, sp
 802c430:	f7ff ffc8 	bl	802c3c4 <__swhatbuf_r>
 802c434:	9900      	ldr	r1, [sp, #0]
 802c436:	4605      	mov	r5, r0
 802c438:	4630      	mov	r0, r6
 802c43a:	f7fd fffb 	bl	802a434 <_malloc_r>
 802c43e:	b948      	cbnz	r0, 802c454 <__smakebuf_r+0x44>
 802c440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802c444:	059a      	lsls	r2, r3, #22
 802c446:	d4ef      	bmi.n	802c428 <__smakebuf_r+0x18>
 802c448:	f023 0303 	bic.w	r3, r3, #3
 802c44c:	f043 0302 	orr.w	r3, r3, #2
 802c450:	81a3      	strh	r3, [r4, #12]
 802c452:	e7e3      	b.n	802c41c <__smakebuf_r+0xc>
 802c454:	4b0d      	ldr	r3, [pc, #52]	; (802c48c <__smakebuf_r+0x7c>)
 802c456:	62b3      	str	r3, [r6, #40]	; 0x28
 802c458:	89a3      	ldrh	r3, [r4, #12]
 802c45a:	6020      	str	r0, [r4, #0]
 802c45c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802c460:	81a3      	strh	r3, [r4, #12]
 802c462:	9b00      	ldr	r3, [sp, #0]
 802c464:	6163      	str	r3, [r4, #20]
 802c466:	9b01      	ldr	r3, [sp, #4]
 802c468:	6120      	str	r0, [r4, #16]
 802c46a:	b15b      	cbz	r3, 802c484 <__smakebuf_r+0x74>
 802c46c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802c470:	4630      	mov	r0, r6
 802c472:	f000 fd87 	bl	802cf84 <_isatty_r>
 802c476:	b128      	cbz	r0, 802c484 <__smakebuf_r+0x74>
 802c478:	89a3      	ldrh	r3, [r4, #12]
 802c47a:	f023 0303 	bic.w	r3, r3, #3
 802c47e:	f043 0301 	orr.w	r3, r3, #1
 802c482:	81a3      	strh	r3, [r4, #12]
 802c484:	89a0      	ldrh	r0, [r4, #12]
 802c486:	4305      	orrs	r5, r0
 802c488:	81a5      	strh	r5, [r4, #12]
 802c48a:	e7cd      	b.n	802c428 <__smakebuf_r+0x18>
 802c48c:	0802bf79 	.word	0x0802bf79

0802c490 <__ascii_mbtowc>:
 802c490:	b082      	sub	sp, #8
 802c492:	b901      	cbnz	r1, 802c496 <__ascii_mbtowc+0x6>
 802c494:	a901      	add	r1, sp, #4
 802c496:	b142      	cbz	r2, 802c4aa <__ascii_mbtowc+0x1a>
 802c498:	b14b      	cbz	r3, 802c4ae <__ascii_mbtowc+0x1e>
 802c49a:	7813      	ldrb	r3, [r2, #0]
 802c49c:	600b      	str	r3, [r1, #0]
 802c49e:	7812      	ldrb	r2, [r2, #0]
 802c4a0:	1e10      	subs	r0, r2, #0
 802c4a2:	bf18      	it	ne
 802c4a4:	2001      	movne	r0, #1
 802c4a6:	b002      	add	sp, #8
 802c4a8:	4770      	bx	lr
 802c4aa:	4610      	mov	r0, r2
 802c4ac:	e7fb      	b.n	802c4a6 <__ascii_mbtowc+0x16>
 802c4ae:	f06f 0001 	mvn.w	r0, #1
 802c4b2:	e7f8      	b.n	802c4a6 <__ascii_mbtowc+0x16>

0802c4b4 <__malloc_lock>:
 802c4b4:	4801      	ldr	r0, [pc, #4]	; (802c4bc <__malloc_lock+0x8>)
 802c4b6:	f7ff bf6f 	b.w	802c398 <__retarget_lock_acquire_recursive>
 802c4ba:	bf00      	nop
 802c4bc:	2003c586 	.word	0x2003c586

0802c4c0 <__malloc_unlock>:
 802c4c0:	4801      	ldr	r0, [pc, #4]	; (802c4c8 <__malloc_unlock+0x8>)
 802c4c2:	f7ff bf6b 	b.w	802c39c <__retarget_lock_release_recursive>
 802c4c6:	bf00      	nop
 802c4c8:	2003c586 	.word	0x2003c586

0802c4cc <_realloc_r>:
 802c4cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802c4d0:	4680      	mov	r8, r0
 802c4d2:	4614      	mov	r4, r2
 802c4d4:	460e      	mov	r6, r1
 802c4d6:	b921      	cbnz	r1, 802c4e2 <_realloc_r+0x16>
 802c4d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802c4dc:	4611      	mov	r1, r2
 802c4de:	f7fd bfa9 	b.w	802a434 <_malloc_r>
 802c4e2:	b92a      	cbnz	r2, 802c4f0 <_realloc_r+0x24>
 802c4e4:	f7fd ff3a 	bl	802a35c <_free_r>
 802c4e8:	4625      	mov	r5, r4
 802c4ea:	4628      	mov	r0, r5
 802c4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802c4f0:	f000 fd58 	bl	802cfa4 <_malloc_usable_size_r>
 802c4f4:	4284      	cmp	r4, r0
 802c4f6:	4607      	mov	r7, r0
 802c4f8:	d802      	bhi.n	802c500 <_realloc_r+0x34>
 802c4fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802c4fe:	d812      	bhi.n	802c526 <_realloc_r+0x5a>
 802c500:	4621      	mov	r1, r4
 802c502:	4640      	mov	r0, r8
 802c504:	f7fd ff96 	bl	802a434 <_malloc_r>
 802c508:	4605      	mov	r5, r0
 802c50a:	2800      	cmp	r0, #0
 802c50c:	d0ed      	beq.n	802c4ea <_realloc_r+0x1e>
 802c50e:	42bc      	cmp	r4, r7
 802c510:	4622      	mov	r2, r4
 802c512:	4631      	mov	r1, r6
 802c514:	bf28      	it	cs
 802c516:	463a      	movcs	r2, r7
 802c518:	f7fd fc98 	bl	8029e4c <memcpy>
 802c51c:	4631      	mov	r1, r6
 802c51e:	4640      	mov	r0, r8
 802c520:	f7fd ff1c 	bl	802a35c <_free_r>
 802c524:	e7e1      	b.n	802c4ea <_realloc_r+0x1e>
 802c526:	4635      	mov	r5, r6
 802c528:	e7df      	b.n	802c4ea <_realloc_r+0x1e>

0802c52a <_sungetc_r>:
 802c52a:	b538      	push	{r3, r4, r5, lr}
 802c52c:	1c4b      	adds	r3, r1, #1
 802c52e:	4614      	mov	r4, r2
 802c530:	d103      	bne.n	802c53a <_sungetc_r+0x10>
 802c532:	f04f 35ff 	mov.w	r5, #4294967295
 802c536:	4628      	mov	r0, r5
 802c538:	bd38      	pop	{r3, r4, r5, pc}
 802c53a:	8993      	ldrh	r3, [r2, #12]
 802c53c:	f023 0320 	bic.w	r3, r3, #32
 802c540:	8193      	strh	r3, [r2, #12]
 802c542:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802c544:	6852      	ldr	r2, [r2, #4]
 802c546:	b2cd      	uxtb	r5, r1
 802c548:	b18b      	cbz	r3, 802c56e <_sungetc_r+0x44>
 802c54a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802c54c:	4293      	cmp	r3, r2
 802c54e:	dd08      	ble.n	802c562 <_sungetc_r+0x38>
 802c550:	6823      	ldr	r3, [r4, #0]
 802c552:	1e5a      	subs	r2, r3, #1
 802c554:	6022      	str	r2, [r4, #0]
 802c556:	f803 5c01 	strb.w	r5, [r3, #-1]
 802c55a:	6863      	ldr	r3, [r4, #4]
 802c55c:	3301      	adds	r3, #1
 802c55e:	6063      	str	r3, [r4, #4]
 802c560:	e7e9      	b.n	802c536 <_sungetc_r+0xc>
 802c562:	4621      	mov	r1, r4
 802c564:	f000 fbfc 	bl	802cd60 <__submore>
 802c568:	2800      	cmp	r0, #0
 802c56a:	d0f1      	beq.n	802c550 <_sungetc_r+0x26>
 802c56c:	e7e1      	b.n	802c532 <_sungetc_r+0x8>
 802c56e:	6921      	ldr	r1, [r4, #16]
 802c570:	6823      	ldr	r3, [r4, #0]
 802c572:	b151      	cbz	r1, 802c58a <_sungetc_r+0x60>
 802c574:	4299      	cmp	r1, r3
 802c576:	d208      	bcs.n	802c58a <_sungetc_r+0x60>
 802c578:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802c57c:	42a9      	cmp	r1, r5
 802c57e:	d104      	bne.n	802c58a <_sungetc_r+0x60>
 802c580:	3b01      	subs	r3, #1
 802c582:	3201      	adds	r2, #1
 802c584:	6023      	str	r3, [r4, #0]
 802c586:	6062      	str	r2, [r4, #4]
 802c588:	e7d5      	b.n	802c536 <_sungetc_r+0xc>
 802c58a:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802c58e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c592:	6363      	str	r3, [r4, #52]	; 0x34
 802c594:	2303      	movs	r3, #3
 802c596:	63a3      	str	r3, [r4, #56]	; 0x38
 802c598:	4623      	mov	r3, r4
 802c59a:	f803 5f46 	strb.w	r5, [r3, #70]!
 802c59e:	6023      	str	r3, [r4, #0]
 802c5a0:	2301      	movs	r3, #1
 802c5a2:	e7dc      	b.n	802c55e <_sungetc_r+0x34>

0802c5a4 <__ssrefill_r>:
 802c5a4:	b510      	push	{r4, lr}
 802c5a6:	460c      	mov	r4, r1
 802c5a8:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802c5aa:	b169      	cbz	r1, 802c5c8 <__ssrefill_r+0x24>
 802c5ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802c5b0:	4299      	cmp	r1, r3
 802c5b2:	d001      	beq.n	802c5b8 <__ssrefill_r+0x14>
 802c5b4:	f7fd fed2 	bl	802a35c <_free_r>
 802c5b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802c5ba:	6063      	str	r3, [r4, #4]
 802c5bc:	2000      	movs	r0, #0
 802c5be:	6360      	str	r0, [r4, #52]	; 0x34
 802c5c0:	b113      	cbz	r3, 802c5c8 <__ssrefill_r+0x24>
 802c5c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802c5c4:	6023      	str	r3, [r4, #0]
 802c5c6:	bd10      	pop	{r4, pc}
 802c5c8:	6923      	ldr	r3, [r4, #16]
 802c5ca:	6023      	str	r3, [r4, #0]
 802c5cc:	2300      	movs	r3, #0
 802c5ce:	6063      	str	r3, [r4, #4]
 802c5d0:	89a3      	ldrh	r3, [r4, #12]
 802c5d2:	f043 0320 	orr.w	r3, r3, #32
 802c5d6:	81a3      	strh	r3, [r4, #12]
 802c5d8:	f04f 30ff 	mov.w	r0, #4294967295
 802c5dc:	e7f3      	b.n	802c5c6 <__ssrefill_r+0x22>
	...

0802c5e0 <__ssvfiscanf_r>:
 802c5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802c5e4:	460c      	mov	r4, r1
 802c5e6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802c5ea:	2100      	movs	r1, #0
 802c5ec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802c5f0:	49a6      	ldr	r1, [pc, #664]	; (802c88c <__ssvfiscanf_r+0x2ac>)
 802c5f2:	91a0      	str	r1, [sp, #640]	; 0x280
 802c5f4:	f10d 0804 	add.w	r8, sp, #4
 802c5f8:	49a5      	ldr	r1, [pc, #660]	; (802c890 <__ssvfiscanf_r+0x2b0>)
 802c5fa:	4fa6      	ldr	r7, [pc, #664]	; (802c894 <__ssvfiscanf_r+0x2b4>)
 802c5fc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 802c898 <__ssvfiscanf_r+0x2b8>
 802c600:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802c604:	4606      	mov	r6, r0
 802c606:	91a1      	str	r1, [sp, #644]	; 0x284
 802c608:	9300      	str	r3, [sp, #0]
 802c60a:	7813      	ldrb	r3, [r2, #0]
 802c60c:	2b00      	cmp	r3, #0
 802c60e:	f000 815a 	beq.w	802c8c6 <__ssvfiscanf_r+0x2e6>
 802c612:	5dd9      	ldrb	r1, [r3, r7]
 802c614:	f011 0108 	ands.w	r1, r1, #8
 802c618:	f102 0501 	add.w	r5, r2, #1
 802c61c:	d019      	beq.n	802c652 <__ssvfiscanf_r+0x72>
 802c61e:	6863      	ldr	r3, [r4, #4]
 802c620:	2b00      	cmp	r3, #0
 802c622:	dd0f      	ble.n	802c644 <__ssvfiscanf_r+0x64>
 802c624:	6823      	ldr	r3, [r4, #0]
 802c626:	781a      	ldrb	r2, [r3, #0]
 802c628:	5cba      	ldrb	r2, [r7, r2]
 802c62a:	0712      	lsls	r2, r2, #28
 802c62c:	d401      	bmi.n	802c632 <__ssvfiscanf_r+0x52>
 802c62e:	462a      	mov	r2, r5
 802c630:	e7eb      	b.n	802c60a <__ssvfiscanf_r+0x2a>
 802c632:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c634:	3201      	adds	r2, #1
 802c636:	9245      	str	r2, [sp, #276]	; 0x114
 802c638:	6862      	ldr	r2, [r4, #4]
 802c63a:	3301      	adds	r3, #1
 802c63c:	3a01      	subs	r2, #1
 802c63e:	6062      	str	r2, [r4, #4]
 802c640:	6023      	str	r3, [r4, #0]
 802c642:	e7ec      	b.n	802c61e <__ssvfiscanf_r+0x3e>
 802c644:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c646:	4621      	mov	r1, r4
 802c648:	4630      	mov	r0, r6
 802c64a:	4798      	blx	r3
 802c64c:	2800      	cmp	r0, #0
 802c64e:	d0e9      	beq.n	802c624 <__ssvfiscanf_r+0x44>
 802c650:	e7ed      	b.n	802c62e <__ssvfiscanf_r+0x4e>
 802c652:	2b25      	cmp	r3, #37	; 0x25
 802c654:	d012      	beq.n	802c67c <__ssvfiscanf_r+0x9c>
 802c656:	469a      	mov	sl, r3
 802c658:	6863      	ldr	r3, [r4, #4]
 802c65a:	2b00      	cmp	r3, #0
 802c65c:	f340 8091 	ble.w	802c782 <__ssvfiscanf_r+0x1a2>
 802c660:	6822      	ldr	r2, [r4, #0]
 802c662:	7813      	ldrb	r3, [r2, #0]
 802c664:	4553      	cmp	r3, sl
 802c666:	f040 812e 	bne.w	802c8c6 <__ssvfiscanf_r+0x2e6>
 802c66a:	6863      	ldr	r3, [r4, #4]
 802c66c:	3b01      	subs	r3, #1
 802c66e:	6063      	str	r3, [r4, #4]
 802c670:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802c672:	3201      	adds	r2, #1
 802c674:	3301      	adds	r3, #1
 802c676:	6022      	str	r2, [r4, #0]
 802c678:	9345      	str	r3, [sp, #276]	; 0x114
 802c67a:	e7d8      	b.n	802c62e <__ssvfiscanf_r+0x4e>
 802c67c:	9141      	str	r1, [sp, #260]	; 0x104
 802c67e:	9143      	str	r1, [sp, #268]	; 0x10c
 802c680:	7853      	ldrb	r3, [r2, #1]
 802c682:	2b2a      	cmp	r3, #42	; 0x2a
 802c684:	bf02      	ittt	eq
 802c686:	2310      	moveq	r3, #16
 802c688:	1c95      	addeq	r5, r2, #2
 802c68a:	9341      	streq	r3, [sp, #260]	; 0x104
 802c68c:	220a      	movs	r2, #10
 802c68e:	46aa      	mov	sl, r5
 802c690:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802c694:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802c698:	2b09      	cmp	r3, #9
 802c69a:	d91d      	bls.n	802c6d8 <__ssvfiscanf_r+0xf8>
 802c69c:	487e      	ldr	r0, [pc, #504]	; (802c898 <__ssvfiscanf_r+0x2b8>)
 802c69e:	2203      	movs	r2, #3
 802c6a0:	f7d3 fdd6 	bl	8000250 <memchr>
 802c6a4:	b140      	cbz	r0, 802c6b8 <__ssvfiscanf_r+0xd8>
 802c6a6:	2301      	movs	r3, #1
 802c6a8:	eba0 0009 	sub.w	r0, r0, r9
 802c6ac:	fa03 f000 	lsl.w	r0, r3, r0
 802c6b0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c6b2:	4318      	orrs	r0, r3
 802c6b4:	9041      	str	r0, [sp, #260]	; 0x104
 802c6b6:	4655      	mov	r5, sl
 802c6b8:	f815 3b01 	ldrb.w	r3, [r5], #1
 802c6bc:	2b78      	cmp	r3, #120	; 0x78
 802c6be:	d806      	bhi.n	802c6ce <__ssvfiscanf_r+0xee>
 802c6c0:	2b57      	cmp	r3, #87	; 0x57
 802c6c2:	d810      	bhi.n	802c6e6 <__ssvfiscanf_r+0x106>
 802c6c4:	2b25      	cmp	r3, #37	; 0x25
 802c6c6:	d0c6      	beq.n	802c656 <__ssvfiscanf_r+0x76>
 802c6c8:	d856      	bhi.n	802c778 <__ssvfiscanf_r+0x198>
 802c6ca:	2b00      	cmp	r3, #0
 802c6cc:	d064      	beq.n	802c798 <__ssvfiscanf_r+0x1b8>
 802c6ce:	2303      	movs	r3, #3
 802c6d0:	9347      	str	r3, [sp, #284]	; 0x11c
 802c6d2:	230a      	movs	r3, #10
 802c6d4:	9342      	str	r3, [sp, #264]	; 0x108
 802c6d6:	e071      	b.n	802c7bc <__ssvfiscanf_r+0x1dc>
 802c6d8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802c6da:	fb02 1103 	mla	r1, r2, r3, r1
 802c6de:	3930      	subs	r1, #48	; 0x30
 802c6e0:	9143      	str	r1, [sp, #268]	; 0x10c
 802c6e2:	4655      	mov	r5, sl
 802c6e4:	e7d3      	b.n	802c68e <__ssvfiscanf_r+0xae>
 802c6e6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802c6ea:	2a20      	cmp	r2, #32
 802c6ec:	d8ef      	bhi.n	802c6ce <__ssvfiscanf_r+0xee>
 802c6ee:	a101      	add	r1, pc, #4	; (adr r1, 802c6f4 <__ssvfiscanf_r+0x114>)
 802c6f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802c6f4:	0802c7a7 	.word	0x0802c7a7
 802c6f8:	0802c6cf 	.word	0x0802c6cf
 802c6fc:	0802c6cf 	.word	0x0802c6cf
 802c700:	0802c805 	.word	0x0802c805
 802c704:	0802c6cf 	.word	0x0802c6cf
 802c708:	0802c6cf 	.word	0x0802c6cf
 802c70c:	0802c6cf 	.word	0x0802c6cf
 802c710:	0802c6cf 	.word	0x0802c6cf
 802c714:	0802c6cf 	.word	0x0802c6cf
 802c718:	0802c6cf 	.word	0x0802c6cf
 802c71c:	0802c6cf 	.word	0x0802c6cf
 802c720:	0802c81b 	.word	0x0802c81b
 802c724:	0802c7f1 	.word	0x0802c7f1
 802c728:	0802c77f 	.word	0x0802c77f
 802c72c:	0802c77f 	.word	0x0802c77f
 802c730:	0802c77f 	.word	0x0802c77f
 802c734:	0802c6cf 	.word	0x0802c6cf
 802c738:	0802c7f5 	.word	0x0802c7f5
 802c73c:	0802c6cf 	.word	0x0802c6cf
 802c740:	0802c6cf 	.word	0x0802c6cf
 802c744:	0802c6cf 	.word	0x0802c6cf
 802c748:	0802c6cf 	.word	0x0802c6cf
 802c74c:	0802c82b 	.word	0x0802c82b
 802c750:	0802c7fd 	.word	0x0802c7fd
 802c754:	0802c79f 	.word	0x0802c79f
 802c758:	0802c6cf 	.word	0x0802c6cf
 802c75c:	0802c6cf 	.word	0x0802c6cf
 802c760:	0802c827 	.word	0x0802c827
 802c764:	0802c6cf 	.word	0x0802c6cf
 802c768:	0802c7f1 	.word	0x0802c7f1
 802c76c:	0802c6cf 	.word	0x0802c6cf
 802c770:	0802c6cf 	.word	0x0802c6cf
 802c774:	0802c7a7 	.word	0x0802c7a7
 802c778:	3b45      	subs	r3, #69	; 0x45
 802c77a:	2b02      	cmp	r3, #2
 802c77c:	d8a7      	bhi.n	802c6ce <__ssvfiscanf_r+0xee>
 802c77e:	2305      	movs	r3, #5
 802c780:	e01b      	b.n	802c7ba <__ssvfiscanf_r+0x1da>
 802c782:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c784:	4621      	mov	r1, r4
 802c786:	4630      	mov	r0, r6
 802c788:	4798      	blx	r3
 802c78a:	2800      	cmp	r0, #0
 802c78c:	f43f af68 	beq.w	802c660 <__ssvfiscanf_r+0x80>
 802c790:	9844      	ldr	r0, [sp, #272]	; 0x110
 802c792:	2800      	cmp	r0, #0
 802c794:	f040 808d 	bne.w	802c8b2 <__ssvfiscanf_r+0x2d2>
 802c798:	f04f 30ff 	mov.w	r0, #4294967295
 802c79c:	e08f      	b.n	802c8be <__ssvfiscanf_r+0x2de>
 802c79e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802c7a0:	f042 0220 	orr.w	r2, r2, #32
 802c7a4:	9241      	str	r2, [sp, #260]	; 0x104
 802c7a6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802c7a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802c7ac:	9241      	str	r2, [sp, #260]	; 0x104
 802c7ae:	2210      	movs	r2, #16
 802c7b0:	2b6f      	cmp	r3, #111	; 0x6f
 802c7b2:	9242      	str	r2, [sp, #264]	; 0x108
 802c7b4:	bf34      	ite	cc
 802c7b6:	2303      	movcc	r3, #3
 802c7b8:	2304      	movcs	r3, #4
 802c7ba:	9347      	str	r3, [sp, #284]	; 0x11c
 802c7bc:	6863      	ldr	r3, [r4, #4]
 802c7be:	2b00      	cmp	r3, #0
 802c7c0:	dd42      	ble.n	802c848 <__ssvfiscanf_r+0x268>
 802c7c2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c7c4:	0659      	lsls	r1, r3, #25
 802c7c6:	d404      	bmi.n	802c7d2 <__ssvfiscanf_r+0x1f2>
 802c7c8:	6823      	ldr	r3, [r4, #0]
 802c7ca:	781a      	ldrb	r2, [r3, #0]
 802c7cc:	5cba      	ldrb	r2, [r7, r2]
 802c7ce:	0712      	lsls	r2, r2, #28
 802c7d0:	d441      	bmi.n	802c856 <__ssvfiscanf_r+0x276>
 802c7d2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802c7d4:	2b02      	cmp	r3, #2
 802c7d6:	dc50      	bgt.n	802c87a <__ssvfiscanf_r+0x29a>
 802c7d8:	466b      	mov	r3, sp
 802c7da:	4622      	mov	r2, r4
 802c7dc:	a941      	add	r1, sp, #260	; 0x104
 802c7de:	4630      	mov	r0, r6
 802c7e0:	f000 f876 	bl	802c8d0 <_scanf_chars>
 802c7e4:	2801      	cmp	r0, #1
 802c7e6:	d06e      	beq.n	802c8c6 <__ssvfiscanf_r+0x2e6>
 802c7e8:	2802      	cmp	r0, #2
 802c7ea:	f47f af20 	bne.w	802c62e <__ssvfiscanf_r+0x4e>
 802c7ee:	e7cf      	b.n	802c790 <__ssvfiscanf_r+0x1b0>
 802c7f0:	220a      	movs	r2, #10
 802c7f2:	e7dd      	b.n	802c7b0 <__ssvfiscanf_r+0x1d0>
 802c7f4:	2300      	movs	r3, #0
 802c7f6:	9342      	str	r3, [sp, #264]	; 0x108
 802c7f8:	2303      	movs	r3, #3
 802c7fa:	e7de      	b.n	802c7ba <__ssvfiscanf_r+0x1da>
 802c7fc:	2308      	movs	r3, #8
 802c7fe:	9342      	str	r3, [sp, #264]	; 0x108
 802c800:	2304      	movs	r3, #4
 802c802:	e7da      	b.n	802c7ba <__ssvfiscanf_r+0x1da>
 802c804:	4629      	mov	r1, r5
 802c806:	4640      	mov	r0, r8
 802c808:	f000 f9c6 	bl	802cb98 <__sccl>
 802c80c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c812:	9341      	str	r3, [sp, #260]	; 0x104
 802c814:	4605      	mov	r5, r0
 802c816:	2301      	movs	r3, #1
 802c818:	e7cf      	b.n	802c7ba <__ssvfiscanf_r+0x1da>
 802c81a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802c81c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802c820:	9341      	str	r3, [sp, #260]	; 0x104
 802c822:	2300      	movs	r3, #0
 802c824:	e7c9      	b.n	802c7ba <__ssvfiscanf_r+0x1da>
 802c826:	2302      	movs	r3, #2
 802c828:	e7c7      	b.n	802c7ba <__ssvfiscanf_r+0x1da>
 802c82a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802c82c:	06c3      	lsls	r3, r0, #27
 802c82e:	f53f aefe 	bmi.w	802c62e <__ssvfiscanf_r+0x4e>
 802c832:	9b00      	ldr	r3, [sp, #0]
 802c834:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c836:	1d19      	adds	r1, r3, #4
 802c838:	9100      	str	r1, [sp, #0]
 802c83a:	681b      	ldr	r3, [r3, #0]
 802c83c:	f010 0f01 	tst.w	r0, #1
 802c840:	bf14      	ite	ne
 802c842:	801a      	strhne	r2, [r3, #0]
 802c844:	601a      	streq	r2, [r3, #0]
 802c846:	e6f2      	b.n	802c62e <__ssvfiscanf_r+0x4e>
 802c848:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c84a:	4621      	mov	r1, r4
 802c84c:	4630      	mov	r0, r6
 802c84e:	4798      	blx	r3
 802c850:	2800      	cmp	r0, #0
 802c852:	d0b6      	beq.n	802c7c2 <__ssvfiscanf_r+0x1e2>
 802c854:	e79c      	b.n	802c790 <__ssvfiscanf_r+0x1b0>
 802c856:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802c858:	3201      	adds	r2, #1
 802c85a:	9245      	str	r2, [sp, #276]	; 0x114
 802c85c:	6862      	ldr	r2, [r4, #4]
 802c85e:	3a01      	subs	r2, #1
 802c860:	2a00      	cmp	r2, #0
 802c862:	6062      	str	r2, [r4, #4]
 802c864:	dd02      	ble.n	802c86c <__ssvfiscanf_r+0x28c>
 802c866:	3301      	adds	r3, #1
 802c868:	6023      	str	r3, [r4, #0]
 802c86a:	e7ad      	b.n	802c7c8 <__ssvfiscanf_r+0x1e8>
 802c86c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802c86e:	4621      	mov	r1, r4
 802c870:	4630      	mov	r0, r6
 802c872:	4798      	blx	r3
 802c874:	2800      	cmp	r0, #0
 802c876:	d0a7      	beq.n	802c7c8 <__ssvfiscanf_r+0x1e8>
 802c878:	e78a      	b.n	802c790 <__ssvfiscanf_r+0x1b0>
 802c87a:	2b04      	cmp	r3, #4
 802c87c:	dc0e      	bgt.n	802c89c <__ssvfiscanf_r+0x2bc>
 802c87e:	466b      	mov	r3, sp
 802c880:	4622      	mov	r2, r4
 802c882:	a941      	add	r1, sp, #260	; 0x104
 802c884:	4630      	mov	r0, r6
 802c886:	f000 f87d 	bl	802c984 <_scanf_i>
 802c88a:	e7ab      	b.n	802c7e4 <__ssvfiscanf_r+0x204>
 802c88c:	0802c52b 	.word	0x0802c52b
 802c890:	0802c5a5 	.word	0x0802c5a5
 802c894:	0803107d 	.word	0x0803107d
 802c898:	08030da2 	.word	0x08030da2
 802c89c:	4b0b      	ldr	r3, [pc, #44]	; (802c8cc <__ssvfiscanf_r+0x2ec>)
 802c89e:	2b00      	cmp	r3, #0
 802c8a0:	f43f aec5 	beq.w	802c62e <__ssvfiscanf_r+0x4e>
 802c8a4:	466b      	mov	r3, sp
 802c8a6:	4622      	mov	r2, r4
 802c8a8:	a941      	add	r1, sp, #260	; 0x104
 802c8aa:	4630      	mov	r0, r6
 802c8ac:	f3af 8000 	nop.w
 802c8b0:	e798      	b.n	802c7e4 <__ssvfiscanf_r+0x204>
 802c8b2:	89a3      	ldrh	r3, [r4, #12]
 802c8b4:	f013 0f40 	tst.w	r3, #64	; 0x40
 802c8b8:	bf18      	it	ne
 802c8ba:	f04f 30ff 	movne.w	r0, #4294967295
 802c8be:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802c8c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802c8c6:	9844      	ldr	r0, [sp, #272]	; 0x110
 802c8c8:	e7f9      	b.n	802c8be <__ssvfiscanf_r+0x2de>
 802c8ca:	bf00      	nop
 802c8cc:	00000000 	.word	0x00000000

0802c8d0 <_scanf_chars>:
 802c8d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802c8d4:	4615      	mov	r5, r2
 802c8d6:	688a      	ldr	r2, [r1, #8]
 802c8d8:	4680      	mov	r8, r0
 802c8da:	460c      	mov	r4, r1
 802c8dc:	b932      	cbnz	r2, 802c8ec <_scanf_chars+0x1c>
 802c8de:	698a      	ldr	r2, [r1, #24]
 802c8e0:	2a00      	cmp	r2, #0
 802c8e2:	bf0c      	ite	eq
 802c8e4:	2201      	moveq	r2, #1
 802c8e6:	f04f 32ff 	movne.w	r2, #4294967295
 802c8ea:	608a      	str	r2, [r1, #8]
 802c8ec:	6822      	ldr	r2, [r4, #0]
 802c8ee:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802c980 <_scanf_chars+0xb0>
 802c8f2:	06d1      	lsls	r1, r2, #27
 802c8f4:	bf5f      	itttt	pl
 802c8f6:	681a      	ldrpl	r2, [r3, #0]
 802c8f8:	1d11      	addpl	r1, r2, #4
 802c8fa:	6019      	strpl	r1, [r3, #0]
 802c8fc:	6816      	ldrpl	r6, [r2, #0]
 802c8fe:	2700      	movs	r7, #0
 802c900:	69a0      	ldr	r0, [r4, #24]
 802c902:	b188      	cbz	r0, 802c928 <_scanf_chars+0x58>
 802c904:	2801      	cmp	r0, #1
 802c906:	d107      	bne.n	802c918 <_scanf_chars+0x48>
 802c908:	682a      	ldr	r2, [r5, #0]
 802c90a:	7811      	ldrb	r1, [r2, #0]
 802c90c:	6962      	ldr	r2, [r4, #20]
 802c90e:	5c52      	ldrb	r2, [r2, r1]
 802c910:	b952      	cbnz	r2, 802c928 <_scanf_chars+0x58>
 802c912:	2f00      	cmp	r7, #0
 802c914:	d031      	beq.n	802c97a <_scanf_chars+0xaa>
 802c916:	e022      	b.n	802c95e <_scanf_chars+0x8e>
 802c918:	2802      	cmp	r0, #2
 802c91a:	d120      	bne.n	802c95e <_scanf_chars+0x8e>
 802c91c:	682b      	ldr	r3, [r5, #0]
 802c91e:	781b      	ldrb	r3, [r3, #0]
 802c920:	f813 3009 	ldrb.w	r3, [r3, r9]
 802c924:	071b      	lsls	r3, r3, #28
 802c926:	d41a      	bmi.n	802c95e <_scanf_chars+0x8e>
 802c928:	6823      	ldr	r3, [r4, #0]
 802c92a:	06da      	lsls	r2, r3, #27
 802c92c:	bf5e      	ittt	pl
 802c92e:	682b      	ldrpl	r3, [r5, #0]
 802c930:	781b      	ldrbpl	r3, [r3, #0]
 802c932:	f806 3b01 	strbpl.w	r3, [r6], #1
 802c936:	682a      	ldr	r2, [r5, #0]
 802c938:	686b      	ldr	r3, [r5, #4]
 802c93a:	3201      	adds	r2, #1
 802c93c:	602a      	str	r2, [r5, #0]
 802c93e:	68a2      	ldr	r2, [r4, #8]
 802c940:	3b01      	subs	r3, #1
 802c942:	3a01      	subs	r2, #1
 802c944:	606b      	str	r3, [r5, #4]
 802c946:	3701      	adds	r7, #1
 802c948:	60a2      	str	r2, [r4, #8]
 802c94a:	b142      	cbz	r2, 802c95e <_scanf_chars+0x8e>
 802c94c:	2b00      	cmp	r3, #0
 802c94e:	dcd7      	bgt.n	802c900 <_scanf_chars+0x30>
 802c950:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802c954:	4629      	mov	r1, r5
 802c956:	4640      	mov	r0, r8
 802c958:	4798      	blx	r3
 802c95a:	2800      	cmp	r0, #0
 802c95c:	d0d0      	beq.n	802c900 <_scanf_chars+0x30>
 802c95e:	6823      	ldr	r3, [r4, #0]
 802c960:	f013 0310 	ands.w	r3, r3, #16
 802c964:	d105      	bne.n	802c972 <_scanf_chars+0xa2>
 802c966:	68e2      	ldr	r2, [r4, #12]
 802c968:	3201      	adds	r2, #1
 802c96a:	60e2      	str	r2, [r4, #12]
 802c96c:	69a2      	ldr	r2, [r4, #24]
 802c96e:	b102      	cbz	r2, 802c972 <_scanf_chars+0xa2>
 802c970:	7033      	strb	r3, [r6, #0]
 802c972:	6923      	ldr	r3, [r4, #16]
 802c974:	443b      	add	r3, r7
 802c976:	6123      	str	r3, [r4, #16]
 802c978:	2000      	movs	r0, #0
 802c97a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802c97e:	bf00      	nop
 802c980:	0803107d 	.word	0x0803107d

0802c984 <_scanf_i>:
 802c984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c988:	4698      	mov	r8, r3
 802c98a:	4b76      	ldr	r3, [pc, #472]	; (802cb64 <_scanf_i+0x1e0>)
 802c98c:	460c      	mov	r4, r1
 802c98e:	4682      	mov	sl, r0
 802c990:	4616      	mov	r6, r2
 802c992:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802c996:	b087      	sub	sp, #28
 802c998:	ab03      	add	r3, sp, #12
 802c99a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802c99e:	4b72      	ldr	r3, [pc, #456]	; (802cb68 <_scanf_i+0x1e4>)
 802c9a0:	69a1      	ldr	r1, [r4, #24]
 802c9a2:	4a72      	ldr	r2, [pc, #456]	; (802cb6c <_scanf_i+0x1e8>)
 802c9a4:	2903      	cmp	r1, #3
 802c9a6:	bf18      	it	ne
 802c9a8:	461a      	movne	r2, r3
 802c9aa:	68a3      	ldr	r3, [r4, #8]
 802c9ac:	9201      	str	r2, [sp, #4]
 802c9ae:	1e5a      	subs	r2, r3, #1
 802c9b0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802c9b4:	bf88      	it	hi
 802c9b6:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802c9ba:	4627      	mov	r7, r4
 802c9bc:	bf82      	ittt	hi
 802c9be:	eb03 0905 	addhi.w	r9, r3, r5
 802c9c2:	f240 135d 	movwhi	r3, #349	; 0x15d
 802c9c6:	60a3      	strhi	r3, [r4, #8]
 802c9c8:	f857 3b1c 	ldr.w	r3, [r7], #28
 802c9cc:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802c9d0:	bf98      	it	ls
 802c9d2:	f04f 0900 	movls.w	r9, #0
 802c9d6:	6023      	str	r3, [r4, #0]
 802c9d8:	463d      	mov	r5, r7
 802c9da:	f04f 0b00 	mov.w	fp, #0
 802c9de:	6831      	ldr	r1, [r6, #0]
 802c9e0:	ab03      	add	r3, sp, #12
 802c9e2:	7809      	ldrb	r1, [r1, #0]
 802c9e4:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802c9e8:	2202      	movs	r2, #2
 802c9ea:	f7d3 fc31 	bl	8000250 <memchr>
 802c9ee:	b328      	cbz	r0, 802ca3c <_scanf_i+0xb8>
 802c9f0:	f1bb 0f01 	cmp.w	fp, #1
 802c9f4:	d159      	bne.n	802caaa <_scanf_i+0x126>
 802c9f6:	6862      	ldr	r2, [r4, #4]
 802c9f8:	b92a      	cbnz	r2, 802ca06 <_scanf_i+0x82>
 802c9fa:	6822      	ldr	r2, [r4, #0]
 802c9fc:	2308      	movs	r3, #8
 802c9fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802ca02:	6063      	str	r3, [r4, #4]
 802ca04:	6022      	str	r2, [r4, #0]
 802ca06:	6822      	ldr	r2, [r4, #0]
 802ca08:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802ca0c:	6022      	str	r2, [r4, #0]
 802ca0e:	68a2      	ldr	r2, [r4, #8]
 802ca10:	1e51      	subs	r1, r2, #1
 802ca12:	60a1      	str	r1, [r4, #8]
 802ca14:	b192      	cbz	r2, 802ca3c <_scanf_i+0xb8>
 802ca16:	6832      	ldr	r2, [r6, #0]
 802ca18:	1c51      	adds	r1, r2, #1
 802ca1a:	6031      	str	r1, [r6, #0]
 802ca1c:	7812      	ldrb	r2, [r2, #0]
 802ca1e:	f805 2b01 	strb.w	r2, [r5], #1
 802ca22:	6872      	ldr	r2, [r6, #4]
 802ca24:	3a01      	subs	r2, #1
 802ca26:	2a00      	cmp	r2, #0
 802ca28:	6072      	str	r2, [r6, #4]
 802ca2a:	dc07      	bgt.n	802ca3c <_scanf_i+0xb8>
 802ca2c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802ca30:	4631      	mov	r1, r6
 802ca32:	4650      	mov	r0, sl
 802ca34:	4790      	blx	r2
 802ca36:	2800      	cmp	r0, #0
 802ca38:	f040 8085 	bne.w	802cb46 <_scanf_i+0x1c2>
 802ca3c:	f10b 0b01 	add.w	fp, fp, #1
 802ca40:	f1bb 0f03 	cmp.w	fp, #3
 802ca44:	d1cb      	bne.n	802c9de <_scanf_i+0x5a>
 802ca46:	6863      	ldr	r3, [r4, #4]
 802ca48:	b90b      	cbnz	r3, 802ca4e <_scanf_i+0xca>
 802ca4a:	230a      	movs	r3, #10
 802ca4c:	6063      	str	r3, [r4, #4]
 802ca4e:	6863      	ldr	r3, [r4, #4]
 802ca50:	4947      	ldr	r1, [pc, #284]	; (802cb70 <_scanf_i+0x1ec>)
 802ca52:	6960      	ldr	r0, [r4, #20]
 802ca54:	1ac9      	subs	r1, r1, r3
 802ca56:	f000 f89f 	bl	802cb98 <__sccl>
 802ca5a:	f04f 0b00 	mov.w	fp, #0
 802ca5e:	68a3      	ldr	r3, [r4, #8]
 802ca60:	6822      	ldr	r2, [r4, #0]
 802ca62:	2b00      	cmp	r3, #0
 802ca64:	d03d      	beq.n	802cae2 <_scanf_i+0x15e>
 802ca66:	6831      	ldr	r1, [r6, #0]
 802ca68:	6960      	ldr	r0, [r4, #20]
 802ca6a:	f891 c000 	ldrb.w	ip, [r1]
 802ca6e:	f810 000c 	ldrb.w	r0, [r0, ip]
 802ca72:	2800      	cmp	r0, #0
 802ca74:	d035      	beq.n	802cae2 <_scanf_i+0x15e>
 802ca76:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802ca7a:	d124      	bne.n	802cac6 <_scanf_i+0x142>
 802ca7c:	0510      	lsls	r0, r2, #20
 802ca7e:	d522      	bpl.n	802cac6 <_scanf_i+0x142>
 802ca80:	f10b 0b01 	add.w	fp, fp, #1
 802ca84:	f1b9 0f00 	cmp.w	r9, #0
 802ca88:	d003      	beq.n	802ca92 <_scanf_i+0x10e>
 802ca8a:	3301      	adds	r3, #1
 802ca8c:	f109 39ff 	add.w	r9, r9, #4294967295
 802ca90:	60a3      	str	r3, [r4, #8]
 802ca92:	6873      	ldr	r3, [r6, #4]
 802ca94:	3b01      	subs	r3, #1
 802ca96:	2b00      	cmp	r3, #0
 802ca98:	6073      	str	r3, [r6, #4]
 802ca9a:	dd1b      	ble.n	802cad4 <_scanf_i+0x150>
 802ca9c:	6833      	ldr	r3, [r6, #0]
 802ca9e:	3301      	adds	r3, #1
 802caa0:	6033      	str	r3, [r6, #0]
 802caa2:	68a3      	ldr	r3, [r4, #8]
 802caa4:	3b01      	subs	r3, #1
 802caa6:	60a3      	str	r3, [r4, #8]
 802caa8:	e7d9      	b.n	802ca5e <_scanf_i+0xda>
 802caaa:	f1bb 0f02 	cmp.w	fp, #2
 802caae:	d1ae      	bne.n	802ca0e <_scanf_i+0x8a>
 802cab0:	6822      	ldr	r2, [r4, #0]
 802cab2:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802cab6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802caba:	d1bf      	bne.n	802ca3c <_scanf_i+0xb8>
 802cabc:	2310      	movs	r3, #16
 802cabe:	6063      	str	r3, [r4, #4]
 802cac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802cac4:	e7a2      	b.n	802ca0c <_scanf_i+0x88>
 802cac6:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802caca:	6022      	str	r2, [r4, #0]
 802cacc:	780b      	ldrb	r3, [r1, #0]
 802cace:	f805 3b01 	strb.w	r3, [r5], #1
 802cad2:	e7de      	b.n	802ca92 <_scanf_i+0x10e>
 802cad4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802cad8:	4631      	mov	r1, r6
 802cada:	4650      	mov	r0, sl
 802cadc:	4798      	blx	r3
 802cade:	2800      	cmp	r0, #0
 802cae0:	d0df      	beq.n	802caa2 <_scanf_i+0x11e>
 802cae2:	6823      	ldr	r3, [r4, #0]
 802cae4:	05db      	lsls	r3, r3, #23
 802cae6:	d50d      	bpl.n	802cb04 <_scanf_i+0x180>
 802cae8:	42bd      	cmp	r5, r7
 802caea:	d909      	bls.n	802cb00 <_scanf_i+0x17c>
 802caec:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802caf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802caf4:	4632      	mov	r2, r6
 802caf6:	4650      	mov	r0, sl
 802caf8:	4798      	blx	r3
 802cafa:	f105 39ff 	add.w	r9, r5, #4294967295
 802cafe:	464d      	mov	r5, r9
 802cb00:	42bd      	cmp	r5, r7
 802cb02:	d02d      	beq.n	802cb60 <_scanf_i+0x1dc>
 802cb04:	6822      	ldr	r2, [r4, #0]
 802cb06:	f012 0210 	ands.w	r2, r2, #16
 802cb0a:	d113      	bne.n	802cb34 <_scanf_i+0x1b0>
 802cb0c:	702a      	strb	r2, [r5, #0]
 802cb0e:	6863      	ldr	r3, [r4, #4]
 802cb10:	9e01      	ldr	r6, [sp, #4]
 802cb12:	4639      	mov	r1, r7
 802cb14:	4650      	mov	r0, sl
 802cb16:	47b0      	blx	r6
 802cb18:	6821      	ldr	r1, [r4, #0]
 802cb1a:	f8d8 3000 	ldr.w	r3, [r8]
 802cb1e:	f011 0f20 	tst.w	r1, #32
 802cb22:	d013      	beq.n	802cb4c <_scanf_i+0x1c8>
 802cb24:	1d1a      	adds	r2, r3, #4
 802cb26:	f8c8 2000 	str.w	r2, [r8]
 802cb2a:	681b      	ldr	r3, [r3, #0]
 802cb2c:	6018      	str	r0, [r3, #0]
 802cb2e:	68e3      	ldr	r3, [r4, #12]
 802cb30:	3301      	adds	r3, #1
 802cb32:	60e3      	str	r3, [r4, #12]
 802cb34:	1bed      	subs	r5, r5, r7
 802cb36:	44ab      	add	fp, r5
 802cb38:	6925      	ldr	r5, [r4, #16]
 802cb3a:	445d      	add	r5, fp
 802cb3c:	6125      	str	r5, [r4, #16]
 802cb3e:	2000      	movs	r0, #0
 802cb40:	b007      	add	sp, #28
 802cb42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802cb46:	f04f 0b00 	mov.w	fp, #0
 802cb4a:	e7ca      	b.n	802cae2 <_scanf_i+0x15e>
 802cb4c:	1d1a      	adds	r2, r3, #4
 802cb4e:	f8c8 2000 	str.w	r2, [r8]
 802cb52:	681b      	ldr	r3, [r3, #0]
 802cb54:	f011 0f01 	tst.w	r1, #1
 802cb58:	bf14      	ite	ne
 802cb5a:	8018      	strhne	r0, [r3, #0]
 802cb5c:	6018      	streq	r0, [r3, #0]
 802cb5e:	e7e6      	b.n	802cb2e <_scanf_i+0x1aa>
 802cb60:	2001      	movs	r0, #1
 802cb62:	e7ed      	b.n	802cb40 <_scanf_i+0x1bc>
 802cb64:	0802f404 	.word	0x0802f404
 802cb68:	0802cd35 	.word	0x0802cd35
 802cb6c:	0802b52d 	.word	0x0802b52d
 802cb70:	08031265 	.word	0x08031265

0802cb74 <_read_r>:
 802cb74:	b538      	push	{r3, r4, r5, lr}
 802cb76:	4d07      	ldr	r5, [pc, #28]	; (802cb94 <_read_r+0x20>)
 802cb78:	4604      	mov	r4, r0
 802cb7a:	4608      	mov	r0, r1
 802cb7c:	4611      	mov	r1, r2
 802cb7e:	2200      	movs	r2, #0
 802cb80:	602a      	str	r2, [r5, #0]
 802cb82:	461a      	mov	r2, r3
 802cb84:	f7d5 fbbc 	bl	8002300 <_read>
 802cb88:	1c43      	adds	r3, r0, #1
 802cb8a:	d102      	bne.n	802cb92 <_read_r+0x1e>
 802cb8c:	682b      	ldr	r3, [r5, #0]
 802cb8e:	b103      	cbz	r3, 802cb92 <_read_r+0x1e>
 802cb90:	6023      	str	r3, [r4, #0]
 802cb92:	bd38      	pop	{r3, r4, r5, pc}
 802cb94:	2003c58c 	.word	0x2003c58c

0802cb98 <__sccl>:
 802cb98:	b570      	push	{r4, r5, r6, lr}
 802cb9a:	780b      	ldrb	r3, [r1, #0]
 802cb9c:	4604      	mov	r4, r0
 802cb9e:	2b5e      	cmp	r3, #94	; 0x5e
 802cba0:	bf0b      	itete	eq
 802cba2:	784b      	ldrbeq	r3, [r1, #1]
 802cba4:	1c48      	addne	r0, r1, #1
 802cba6:	1c88      	addeq	r0, r1, #2
 802cba8:	2200      	movne	r2, #0
 802cbaa:	bf08      	it	eq
 802cbac:	2201      	moveq	r2, #1
 802cbae:	1e61      	subs	r1, r4, #1
 802cbb0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802cbb4:	f801 2f01 	strb.w	r2, [r1, #1]!
 802cbb8:	42a9      	cmp	r1, r5
 802cbba:	d1fb      	bne.n	802cbb4 <__sccl+0x1c>
 802cbbc:	b90b      	cbnz	r3, 802cbc2 <__sccl+0x2a>
 802cbbe:	3801      	subs	r0, #1
 802cbc0:	bd70      	pop	{r4, r5, r6, pc}
 802cbc2:	f082 0201 	eor.w	r2, r2, #1
 802cbc6:	54e2      	strb	r2, [r4, r3]
 802cbc8:	4605      	mov	r5, r0
 802cbca:	4628      	mov	r0, r5
 802cbcc:	f810 1b01 	ldrb.w	r1, [r0], #1
 802cbd0:	292d      	cmp	r1, #45	; 0x2d
 802cbd2:	d006      	beq.n	802cbe2 <__sccl+0x4a>
 802cbd4:	295d      	cmp	r1, #93	; 0x5d
 802cbd6:	d0f3      	beq.n	802cbc0 <__sccl+0x28>
 802cbd8:	b909      	cbnz	r1, 802cbde <__sccl+0x46>
 802cbda:	4628      	mov	r0, r5
 802cbdc:	e7f0      	b.n	802cbc0 <__sccl+0x28>
 802cbde:	460b      	mov	r3, r1
 802cbe0:	e7f1      	b.n	802cbc6 <__sccl+0x2e>
 802cbe2:	786e      	ldrb	r6, [r5, #1]
 802cbe4:	2e5d      	cmp	r6, #93	; 0x5d
 802cbe6:	d0fa      	beq.n	802cbde <__sccl+0x46>
 802cbe8:	42b3      	cmp	r3, r6
 802cbea:	dcf8      	bgt.n	802cbde <__sccl+0x46>
 802cbec:	3502      	adds	r5, #2
 802cbee:	4619      	mov	r1, r3
 802cbf0:	3101      	adds	r1, #1
 802cbf2:	428e      	cmp	r6, r1
 802cbf4:	5462      	strb	r2, [r4, r1]
 802cbf6:	dcfb      	bgt.n	802cbf0 <__sccl+0x58>
 802cbf8:	1af1      	subs	r1, r6, r3
 802cbfa:	3901      	subs	r1, #1
 802cbfc:	1c58      	adds	r0, r3, #1
 802cbfe:	42b3      	cmp	r3, r6
 802cc00:	bfa8      	it	ge
 802cc02:	2100      	movge	r1, #0
 802cc04:	1843      	adds	r3, r0, r1
 802cc06:	e7e0      	b.n	802cbca <__sccl+0x32>

0802cc08 <strcpy>:
 802cc08:	4603      	mov	r3, r0
 802cc0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802cc0e:	f803 2b01 	strb.w	r2, [r3], #1
 802cc12:	2a00      	cmp	r2, #0
 802cc14:	d1f9      	bne.n	802cc0a <strcpy+0x2>
 802cc16:	4770      	bx	lr

0802cc18 <strncasecmp_l>:
 802cc18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cc1c:	4605      	mov	r5, r0
 802cc1e:	460e      	mov	r6, r1
 802cc20:	461f      	mov	r7, r3
 802cc22:	eb00 0802 	add.w	r8, r0, r2
 802cc26:	4545      	cmp	r5, r8
 802cc28:	d00e      	beq.n	802cc48 <strncasecmp_l+0x30>
 802cc2a:	4639      	mov	r1, r7
 802cc2c:	f815 0b01 	ldrb.w	r0, [r5], #1
 802cc30:	f000 f88c 	bl	802cd4c <tolower_l>
 802cc34:	4639      	mov	r1, r7
 802cc36:	4604      	mov	r4, r0
 802cc38:	f816 0b01 	ldrb.w	r0, [r6], #1
 802cc3c:	f000 f886 	bl	802cd4c <tolower_l>
 802cc40:	1a24      	subs	r4, r4, r0
 802cc42:	d102      	bne.n	802cc4a <strncasecmp_l+0x32>
 802cc44:	2800      	cmp	r0, #0
 802cc46:	d1ee      	bne.n	802cc26 <strncasecmp_l+0xe>
 802cc48:	2400      	movs	r4, #0
 802cc4a:	4620      	mov	r0, r4
 802cc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802cc50 <_strtoul_l.constprop.0>:
 802cc50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802cc54:	4f36      	ldr	r7, [pc, #216]	; (802cd30 <_strtoul_l.constprop.0+0xe0>)
 802cc56:	4686      	mov	lr, r0
 802cc58:	460d      	mov	r5, r1
 802cc5a:	4628      	mov	r0, r5
 802cc5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 802cc60:	5de6      	ldrb	r6, [r4, r7]
 802cc62:	f016 0608 	ands.w	r6, r6, #8
 802cc66:	d1f8      	bne.n	802cc5a <_strtoul_l.constprop.0+0xa>
 802cc68:	2c2d      	cmp	r4, #45	; 0x2d
 802cc6a:	d12f      	bne.n	802cccc <_strtoul_l.constprop.0+0x7c>
 802cc6c:	782c      	ldrb	r4, [r5, #0]
 802cc6e:	2601      	movs	r6, #1
 802cc70:	1c85      	adds	r5, r0, #2
 802cc72:	2b00      	cmp	r3, #0
 802cc74:	d057      	beq.n	802cd26 <_strtoul_l.constprop.0+0xd6>
 802cc76:	2b10      	cmp	r3, #16
 802cc78:	d109      	bne.n	802cc8e <_strtoul_l.constprop.0+0x3e>
 802cc7a:	2c30      	cmp	r4, #48	; 0x30
 802cc7c:	d107      	bne.n	802cc8e <_strtoul_l.constprop.0+0x3e>
 802cc7e:	7828      	ldrb	r0, [r5, #0]
 802cc80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802cc84:	2858      	cmp	r0, #88	; 0x58
 802cc86:	d149      	bne.n	802cd1c <_strtoul_l.constprop.0+0xcc>
 802cc88:	786c      	ldrb	r4, [r5, #1]
 802cc8a:	2310      	movs	r3, #16
 802cc8c:	3502      	adds	r5, #2
 802cc8e:	f04f 38ff 	mov.w	r8, #4294967295
 802cc92:	2700      	movs	r7, #0
 802cc94:	fbb8 f8f3 	udiv	r8, r8, r3
 802cc98:	fb03 f908 	mul.w	r9, r3, r8
 802cc9c:	ea6f 0909 	mvn.w	r9, r9
 802cca0:	4638      	mov	r0, r7
 802cca2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802cca6:	f1bc 0f09 	cmp.w	ip, #9
 802ccaa:	d814      	bhi.n	802ccd6 <_strtoul_l.constprop.0+0x86>
 802ccac:	4664      	mov	r4, ip
 802ccae:	42a3      	cmp	r3, r4
 802ccb0:	dd22      	ble.n	802ccf8 <_strtoul_l.constprop.0+0xa8>
 802ccb2:	2f00      	cmp	r7, #0
 802ccb4:	db1d      	blt.n	802ccf2 <_strtoul_l.constprop.0+0xa2>
 802ccb6:	4580      	cmp	r8, r0
 802ccb8:	d31b      	bcc.n	802ccf2 <_strtoul_l.constprop.0+0xa2>
 802ccba:	d101      	bne.n	802ccc0 <_strtoul_l.constprop.0+0x70>
 802ccbc:	45a1      	cmp	r9, r4
 802ccbe:	db18      	blt.n	802ccf2 <_strtoul_l.constprop.0+0xa2>
 802ccc0:	fb00 4003 	mla	r0, r0, r3, r4
 802ccc4:	2701      	movs	r7, #1
 802ccc6:	f815 4b01 	ldrb.w	r4, [r5], #1
 802ccca:	e7ea      	b.n	802cca2 <_strtoul_l.constprop.0+0x52>
 802cccc:	2c2b      	cmp	r4, #43	; 0x2b
 802ccce:	bf04      	itt	eq
 802ccd0:	782c      	ldrbeq	r4, [r5, #0]
 802ccd2:	1c85      	addeq	r5, r0, #2
 802ccd4:	e7cd      	b.n	802cc72 <_strtoul_l.constprop.0+0x22>
 802ccd6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802ccda:	f1bc 0f19 	cmp.w	ip, #25
 802ccde:	d801      	bhi.n	802cce4 <_strtoul_l.constprop.0+0x94>
 802cce0:	3c37      	subs	r4, #55	; 0x37
 802cce2:	e7e4      	b.n	802ccae <_strtoul_l.constprop.0+0x5e>
 802cce4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802cce8:	f1bc 0f19 	cmp.w	ip, #25
 802ccec:	d804      	bhi.n	802ccf8 <_strtoul_l.constprop.0+0xa8>
 802ccee:	3c57      	subs	r4, #87	; 0x57
 802ccf0:	e7dd      	b.n	802ccae <_strtoul_l.constprop.0+0x5e>
 802ccf2:	f04f 37ff 	mov.w	r7, #4294967295
 802ccf6:	e7e6      	b.n	802ccc6 <_strtoul_l.constprop.0+0x76>
 802ccf8:	2f00      	cmp	r7, #0
 802ccfa:	da07      	bge.n	802cd0c <_strtoul_l.constprop.0+0xbc>
 802ccfc:	2322      	movs	r3, #34	; 0x22
 802ccfe:	f8ce 3000 	str.w	r3, [lr]
 802cd02:	f04f 30ff 	mov.w	r0, #4294967295
 802cd06:	b932      	cbnz	r2, 802cd16 <_strtoul_l.constprop.0+0xc6>
 802cd08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802cd0c:	b106      	cbz	r6, 802cd10 <_strtoul_l.constprop.0+0xc0>
 802cd0e:	4240      	negs	r0, r0
 802cd10:	2a00      	cmp	r2, #0
 802cd12:	d0f9      	beq.n	802cd08 <_strtoul_l.constprop.0+0xb8>
 802cd14:	b107      	cbz	r7, 802cd18 <_strtoul_l.constprop.0+0xc8>
 802cd16:	1e69      	subs	r1, r5, #1
 802cd18:	6011      	str	r1, [r2, #0]
 802cd1a:	e7f5      	b.n	802cd08 <_strtoul_l.constprop.0+0xb8>
 802cd1c:	2430      	movs	r4, #48	; 0x30
 802cd1e:	2b00      	cmp	r3, #0
 802cd20:	d1b5      	bne.n	802cc8e <_strtoul_l.constprop.0+0x3e>
 802cd22:	2308      	movs	r3, #8
 802cd24:	e7b3      	b.n	802cc8e <_strtoul_l.constprop.0+0x3e>
 802cd26:	2c30      	cmp	r4, #48	; 0x30
 802cd28:	d0a9      	beq.n	802cc7e <_strtoul_l.constprop.0+0x2e>
 802cd2a:	230a      	movs	r3, #10
 802cd2c:	e7af      	b.n	802cc8e <_strtoul_l.constprop.0+0x3e>
 802cd2e:	bf00      	nop
 802cd30:	0803107d 	.word	0x0803107d

0802cd34 <_strtoul_r>:
 802cd34:	f7ff bf8c 	b.w	802cc50 <_strtoul_l.constprop.0>

0802cd38 <strtoul>:
 802cd38:	4613      	mov	r3, r2
 802cd3a:	460a      	mov	r2, r1
 802cd3c:	4601      	mov	r1, r0
 802cd3e:	4802      	ldr	r0, [pc, #8]	; (802cd48 <strtoul+0x10>)
 802cd40:	6800      	ldr	r0, [r0, #0]
 802cd42:	f7ff bf85 	b.w	802cc50 <_strtoul_l.constprop.0>
 802cd46:	bf00      	nop
 802cd48:	200000bc 	.word	0x200000bc

0802cd4c <tolower_l>:
 802cd4c:	4b03      	ldr	r3, [pc, #12]	; (802cd5c <tolower_l+0x10>)
 802cd4e:	5cc3      	ldrb	r3, [r0, r3]
 802cd50:	f003 0303 	and.w	r3, r3, #3
 802cd54:	2b01      	cmp	r3, #1
 802cd56:	bf08      	it	eq
 802cd58:	3020      	addeq	r0, #32
 802cd5a:	4770      	bx	lr
 802cd5c:	0803107d 	.word	0x0803107d

0802cd60 <__submore>:
 802cd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802cd64:	460c      	mov	r4, r1
 802cd66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802cd68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802cd6c:	4299      	cmp	r1, r3
 802cd6e:	d11d      	bne.n	802cdac <__submore+0x4c>
 802cd70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802cd74:	f7fd fb5e 	bl	802a434 <_malloc_r>
 802cd78:	b918      	cbnz	r0, 802cd82 <__submore+0x22>
 802cd7a:	f04f 30ff 	mov.w	r0, #4294967295
 802cd7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cd82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802cd86:	63a3      	str	r3, [r4, #56]	; 0x38
 802cd88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802cd8c:	6360      	str	r0, [r4, #52]	; 0x34
 802cd8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802cd92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802cd96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802cd9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802cd9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802cda2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802cda6:	6020      	str	r0, [r4, #0]
 802cda8:	2000      	movs	r0, #0
 802cdaa:	e7e8      	b.n	802cd7e <__submore+0x1e>
 802cdac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802cdae:	0077      	lsls	r7, r6, #1
 802cdb0:	463a      	mov	r2, r7
 802cdb2:	f7ff fb8b 	bl	802c4cc <_realloc_r>
 802cdb6:	4605      	mov	r5, r0
 802cdb8:	2800      	cmp	r0, #0
 802cdba:	d0de      	beq.n	802cd7a <__submore+0x1a>
 802cdbc:	eb00 0806 	add.w	r8, r0, r6
 802cdc0:	4601      	mov	r1, r0
 802cdc2:	4632      	mov	r2, r6
 802cdc4:	4640      	mov	r0, r8
 802cdc6:	f7fd f841 	bl	8029e4c <memcpy>
 802cdca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802cdce:	f8c4 8000 	str.w	r8, [r4]
 802cdd2:	e7e9      	b.n	802cda8 <__submore+0x48>

0802cdd4 <__ascii_wctomb>:
 802cdd4:	b149      	cbz	r1, 802cdea <__ascii_wctomb+0x16>
 802cdd6:	2aff      	cmp	r2, #255	; 0xff
 802cdd8:	bf85      	ittet	hi
 802cdda:	238a      	movhi	r3, #138	; 0x8a
 802cddc:	6003      	strhi	r3, [r0, #0]
 802cdde:	700a      	strbls	r2, [r1, #0]
 802cde0:	f04f 30ff 	movhi.w	r0, #4294967295
 802cde4:	bf98      	it	ls
 802cde6:	2001      	movls	r0, #1
 802cde8:	4770      	bx	lr
 802cdea:	4608      	mov	r0, r1
 802cdec:	4770      	bx	lr
	...

0802cdf0 <__env_lock>:
 802cdf0:	4801      	ldr	r0, [pc, #4]	; (802cdf8 <__env_lock+0x8>)
 802cdf2:	f7ff bad1 	b.w	802c398 <__retarget_lock_acquire_recursive>
 802cdf6:	bf00      	nop
 802cdf8:	2003c585 	.word	0x2003c585

0802cdfc <__env_unlock>:
 802cdfc:	4801      	ldr	r0, [pc, #4]	; (802ce04 <__env_unlock+0x8>)
 802cdfe:	f7ff bacd 	b.w	802c39c <__retarget_lock_release_recursive>
 802ce02:	bf00      	nop
 802ce04:	2003c585 	.word	0x2003c585

0802ce08 <_fstat_r>:
 802ce08:	b538      	push	{r3, r4, r5, lr}
 802ce0a:	4d07      	ldr	r5, [pc, #28]	; (802ce28 <_fstat_r+0x20>)
 802ce0c:	2300      	movs	r3, #0
 802ce0e:	4604      	mov	r4, r0
 802ce10:	4608      	mov	r0, r1
 802ce12:	4611      	mov	r1, r2
 802ce14:	602b      	str	r3, [r5, #0]
 802ce16:	f7d5 fab8 	bl	800238a <_fstat>
 802ce1a:	1c43      	adds	r3, r0, #1
 802ce1c:	d102      	bne.n	802ce24 <_fstat_r+0x1c>
 802ce1e:	682b      	ldr	r3, [r5, #0]
 802ce20:	b103      	cbz	r3, 802ce24 <_fstat_r+0x1c>
 802ce22:	6023      	str	r3, [r4, #0]
 802ce24:	bd38      	pop	{r3, r4, r5, pc}
 802ce26:	bf00      	nop
 802ce28:	2003c58c 	.word	0x2003c58c

0802ce2c <gmtime_r>:
 802ce2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802ce30:	e9d0 6700 	ldrd	r6, r7, [r0]
 802ce34:	460c      	mov	r4, r1
 802ce36:	4a4f      	ldr	r2, [pc, #316]	; (802cf74 <gmtime_r+0x148>)
 802ce38:	2300      	movs	r3, #0
 802ce3a:	4630      	mov	r0, r6
 802ce3c:	4639      	mov	r1, r7
 802ce3e:	f7d3 fa61 	bl	8000304 <__aeabi_ldivmod>
 802ce42:	4639      	mov	r1, r7
 802ce44:	4605      	mov	r5, r0
 802ce46:	4a4b      	ldr	r2, [pc, #300]	; (802cf74 <gmtime_r+0x148>)
 802ce48:	4630      	mov	r0, r6
 802ce4a:	2300      	movs	r3, #0
 802ce4c:	f7d3 fa5a 	bl	8000304 <__aeabi_ldivmod>
 802ce50:	2a00      	cmp	r2, #0
 802ce52:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 802ce56:	bfb7      	itett	lt
 802ce58:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802ce5c:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 802ce60:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 802ce64:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 802ce68:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 802ce6c:	fbb2 f1f0 	udiv	r1, r2, r0
 802ce70:	fb00 2211 	mls	r2, r0, r1, r2
 802ce74:	203c      	movs	r0, #60	; 0x3c
 802ce76:	60a1      	str	r1, [r4, #8]
 802ce78:	fbb2 f1f0 	udiv	r1, r2, r0
 802ce7c:	fb00 2211 	mls	r2, r0, r1, r2
 802ce80:	6061      	str	r1, [r4, #4]
 802ce82:	6022      	str	r2, [r4, #0]
 802ce84:	2107      	movs	r1, #7
 802ce86:	1cda      	adds	r2, r3, #3
 802ce88:	fb92 f1f1 	sdiv	r1, r2, r1
 802ce8c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 802ce90:	1a52      	subs	r2, r2, r1
 802ce92:	bf48      	it	mi
 802ce94:	3207      	addmi	r2, #7
 802ce96:	4d38      	ldr	r5, [pc, #224]	; (802cf78 <gmtime_r+0x14c>)
 802ce98:	4838      	ldr	r0, [pc, #224]	; (802cf7c <gmtime_r+0x150>)
 802ce9a:	61a2      	str	r2, [r4, #24]
 802ce9c:	2b00      	cmp	r3, #0
 802ce9e:	bfb7      	itett	lt
 802cea0:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 802cea4:	fb93 f5f5 	sdivge	r5, r3, r5
 802cea8:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 802ceac:	fb92 f5f5 	sdivlt	r5, r2, r5
 802ceb0:	fb00 3005 	mla	r0, r0, r5, r3
 802ceb4:	f648 62ac 	movw	r2, #36524	; 0x8eac
 802ceb8:	fbb0 f2f2 	udiv	r2, r0, r2
 802cebc:	4402      	add	r2, r0
 802cebe:	f240 53b4 	movw	r3, #1460	; 0x5b4
 802cec2:	fbb0 f1f3 	udiv	r1, r0, r3
 802cec6:	1a52      	subs	r2, r2, r1
 802cec8:	f240 1c6d 	movw	ip, #365	; 0x16d
 802cecc:	492c      	ldr	r1, [pc, #176]	; (802cf80 <gmtime_r+0x154>)
 802cece:	fbb0 f1f1 	udiv	r1, r0, r1
 802ced2:	2764      	movs	r7, #100	; 0x64
 802ced4:	1a52      	subs	r2, r2, r1
 802ced6:	fbb2 f1fc 	udiv	r1, r2, ip
 802ceda:	fbb2 f3f3 	udiv	r3, r2, r3
 802cede:	fbb1 f6f7 	udiv	r6, r1, r7
 802cee2:	1af3      	subs	r3, r6, r3
 802cee4:	4403      	add	r3, r0
 802cee6:	fb0c 3311 	mls	r3, ip, r1, r3
 802ceea:	2299      	movs	r2, #153	; 0x99
 802ceec:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 802cef0:	f10e 0e02 	add.w	lr, lr, #2
 802cef4:	f103 0c01 	add.w	ip, r3, #1
 802cef8:	fbbe f0f2 	udiv	r0, lr, r2
 802cefc:	4342      	muls	r2, r0
 802cefe:	3202      	adds	r2, #2
 802cf00:	f04f 0805 	mov.w	r8, #5
 802cf04:	fbb2 f2f8 	udiv	r2, r2, r8
 802cf08:	ebac 0c02 	sub.w	ip, ip, r2
 802cf0c:	f240 52f9 	movw	r2, #1529	; 0x5f9
 802cf10:	4596      	cmp	lr, r2
 802cf12:	bf94      	ite	ls
 802cf14:	2202      	movls	r2, #2
 802cf16:	f06f 0209 	mvnhi.w	r2, #9
 802cf1a:	4410      	add	r0, r2
 802cf1c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802cf20:	fb02 1505 	mla	r5, r2, r5, r1
 802cf24:	2801      	cmp	r0, #1
 802cf26:	bf98      	it	ls
 802cf28:	3501      	addls	r5, #1
 802cf2a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 802cf2e:	d30d      	bcc.n	802cf4c <gmtime_r+0x120>
 802cf30:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 802cf34:	61e3      	str	r3, [r4, #28]
 802cf36:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 802cf3a:	2300      	movs	r3, #0
 802cf3c:	e9c4 0504 	strd	r0, r5, [r4, #16]
 802cf40:	f8c4 c00c 	str.w	ip, [r4, #12]
 802cf44:	6223      	str	r3, [r4, #32]
 802cf46:	4620      	mov	r0, r4
 802cf48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802cf4c:	078a      	lsls	r2, r1, #30
 802cf4e:	d102      	bne.n	802cf56 <gmtime_r+0x12a>
 802cf50:	fb07 1616 	mls	r6, r7, r6, r1
 802cf54:	b95e      	cbnz	r6, 802cf6e <gmtime_r+0x142>
 802cf56:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802cf5a:	fbb1 f6f2 	udiv	r6, r1, r2
 802cf5e:	fb02 1216 	mls	r2, r2, r6, r1
 802cf62:	fab2 f282 	clz	r2, r2
 802cf66:	0952      	lsrs	r2, r2, #5
 802cf68:	333b      	adds	r3, #59	; 0x3b
 802cf6a:	4413      	add	r3, r2
 802cf6c:	e7e2      	b.n	802cf34 <gmtime_r+0x108>
 802cf6e:	2201      	movs	r2, #1
 802cf70:	e7fa      	b.n	802cf68 <gmtime_r+0x13c>
 802cf72:	bf00      	nop
 802cf74:	00015180 	.word	0x00015180
 802cf78:	00023ab1 	.word	0x00023ab1
 802cf7c:	fffdc54f 	.word	0xfffdc54f
 802cf80:	00023ab0 	.word	0x00023ab0

0802cf84 <_isatty_r>:
 802cf84:	b538      	push	{r3, r4, r5, lr}
 802cf86:	4d06      	ldr	r5, [pc, #24]	; (802cfa0 <_isatty_r+0x1c>)
 802cf88:	2300      	movs	r3, #0
 802cf8a:	4604      	mov	r4, r0
 802cf8c:	4608      	mov	r0, r1
 802cf8e:	602b      	str	r3, [r5, #0]
 802cf90:	f7d5 fa0b 	bl	80023aa <_isatty>
 802cf94:	1c43      	adds	r3, r0, #1
 802cf96:	d102      	bne.n	802cf9e <_isatty_r+0x1a>
 802cf98:	682b      	ldr	r3, [r5, #0]
 802cf9a:	b103      	cbz	r3, 802cf9e <_isatty_r+0x1a>
 802cf9c:	6023      	str	r3, [r4, #0]
 802cf9e:	bd38      	pop	{r3, r4, r5, pc}
 802cfa0:	2003c58c 	.word	0x2003c58c

0802cfa4 <_malloc_usable_size_r>:
 802cfa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802cfa8:	1f18      	subs	r0, r3, #4
 802cfaa:	2b00      	cmp	r3, #0
 802cfac:	bfbc      	itt	lt
 802cfae:	580b      	ldrlt	r3, [r1, r0]
 802cfb0:	18c0      	addlt	r0, r0, r3
 802cfb2:	4770      	bx	lr

0802cfb4 <_init>:
 802cfb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cfb6:	bf00      	nop
 802cfb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cfba:	bc08      	pop	{r3}
 802cfbc:	469e      	mov	lr, r3
 802cfbe:	4770      	bx	lr

0802cfc0 <_fini>:
 802cfc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802cfc2:	bf00      	nop
 802cfc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802cfc6:	bc08      	pop	{r3}
 802cfc8:	469e      	mov	lr, r3
 802cfca:	4770      	bx	lr
